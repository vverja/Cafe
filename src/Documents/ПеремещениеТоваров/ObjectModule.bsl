#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
// 		НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт

	Статус= Перечисления.СтатусыПеремещенийТоваров[НовыйСтатус];
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПеремещениеТоваров);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	Возврат ПроверитьЗаполнение();

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Основание") Тогда
			
			ЗаполнитьДокументНаОснованииПоступленияТоваровУслуг(ДанныеЗаполнения);
			
		ИначеЕсли ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
			
			ЗаполнитьПоЗаказу(ДанныеЗаполнения);
			
		ИначеЕсли ДанныеЗаполнения.Свойство("АктОРасхождениях") 
			И ДанныеЗаполнения.Свойство("ПеремещениеТоваров") Тогда
			
			ЗаполнитьДокументНаОснованииАктаОРасхожденияхПослеПеремещения(ДанныеЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Для Каждого ДанныеСтроки Из Товары Цикл
		Если ПеремещениеПоЗаказам 
			И ЗначениеЗаполнено(ЗаказНаПеремещение) 
			И Не ЗначениеЗаполнено(ДанныеСтроки.ЗаказНаПеремещение) Тогда
		
			// Если передача по заказу, то нужно заполнить пустой заказ
			ДанныеСтроки.ЗаказНаПеремещение = ЗаказНаПеремещение;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеСтроки.ЗаказНаПеремещение)
			И ДанныеСтроки.ЗаказНаПеремещение <> Неопределено Тогда
			
			ДанныеСтроки.ЗаказНаПеремещение = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаказыСервер.ПроверитьДатуРаспоряжения(ЭтотОбъект);
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПеремещениеТоваров));
    
	СформироватьСписокЗависимыхЗаказов();
	
	ЗаполнитьСделкуВТаблицеТовары();
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ПеремещениеТоваров,
			СкладОтправитель,
			Подразделение,
			Неопределено);
		
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийОтправитель");
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Товары,
			МестаУчета,
			ИменаПолей);
		
		ЗаполнитьВидыЗапасов(Отказ);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ПеремещениеТоваров.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ЕстьНазначение = Ложь;
	Если Товары.Количество() > 0 Тогда

		Если Товары.Количество() <> Товары.НайтиСтроки(Новый Структура("Назначение", Справочники.Назначения.ПустаяСсылка())).Количество() Тогда
			ЕстьНазначение = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ПеремещениеТоваров.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	Если ЗначениеЗаполнено(СкладОтправитель) И СкладОтправитель = СкладПолучатель Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Один склад не может быть как отправителем, так и получателем. Измените один из складов.';uk='Один склад не може бути як відправником, так і одержувачем. Змініть один з складів.'"),
				ЭтотОбъект,
				"СкладОтправитель",
				,
				Отказ);

	КонецЕсли;

	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru='Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.';uk='Організація-одержувач повинна бути взаємопов''язана з організацією-відправником за організаційною структурою.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОрганизацияПолучатель",
			,
			Отказ);
		
	КонецЕсли;

	// Если накладная по заказу - то код строки должен быть заполнен.
	Если Не ЗначениеЗаполнено(ЗаказНаПеремещение) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
	КонецЕсли;

	// Проверка указания характеристик.
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПеремещениеТоваров),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПеремещениеПоЗаказам);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ПеремещениеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ТоварыКОформлениюПоступления.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыНаПеремещение(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
    
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.ПустаяСсылка();
	ПеремещениеПоЗаказам = Ложь;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();

	Для Каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаТЧ.КодСтроки             = 0;
		СтрокаТЧ.ЗаказНаПеремещение    = Документы.ЗаказНаПеремещение.ПустаяСсылка();
		СтрокаТЧ.Сделка                = Справочники.СделкиСКлиентами.ПустаяСсылка();
		СтрокаТЧ.Назначение            = Неопределено;
		СтрокаТЧ.ИдентификаторСтроки   = "";
		СтрокаТЧ.НазначениеОтправителя = Неопределено;
		
	КонецЦикла;

	ВидыЗапасов.Очистить();
	Серии.Очистить();
	
	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ДанныеВнутреннихДокументов.ЗаписатьДанныеДокумента(Ссылка);
	
	Документы.ТранспортнаяНакладная.АктуализироватьТранспортныеНакладные(Ссылка, Проведен, ПометкаУдаления);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = 1;
	СтрокаТаб.ЗначениеДоступа = Организация;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = 1;
	СтрокаТаб.ЗначениеДоступа = СкладОтправитель;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = 2;
	СтрокаТаб.ЗначениеДоступа = Организация;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = 2;
	СтрокаТаб.ЗначениеДоступа = СкладПолучатель;

КонецПроцедуры

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоЗаказу(СтруктураЗаполнения)
	
	МассивЗаказов = СтруктураЗаполнения.МассивЗаказов;
	СкладОтправитель = СтруктураЗаполнения.РеквизитыШапки.СкладОтправитель;
	СкладПолучатель = СтруктураЗаполнения.РеквизитыШапки.СкладПолучатель;
	
	ПараметрыЗаполнения = Документы.ПеремещениеТоваров.ПараметрыЗаполненияДокумента();
	ПараметрыЗаполнения.Вставить("РеквизитыШапки", СтруктураЗаполнения.РеквизитыШапки);
	ПараметрыЗаполнения.Вставить("ФормаОткрыта", Ложь);
	
	Если СтруктураЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", СтруктураЗаполнения.ЗаполнятьПоОрдеру);
	КонецЕсли;
	
	ТаблицаНакладная = Документы.ПеремещениеТоваров.ДанныеТаблицыТоварыДокумента(ЭтотОбъект.Ссылка);
	
	КлючевыеПоля = ПараметрыЗаполнения.КлючевыеПоля;
	
	// Таблица с кодами строк
	ТаблицаКОформлениюОстаток = РегистрыНакопления.ЗаказыНаПеремещение.КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов, ЭтотОбъект.Ссылка);
	ТаблицаКОформлениюОстаток.Индексы.Добавить(КлючевыеПоля);
	
	Если ПараметрыЗаполнения.Свойство("ЗаполнятьПоОрдеру")
		И ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		
		// Таблица отгружено
		ТаблицаОформлено = РегистрыНакопления.ТоварыКОтгрузке.ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, ЭтотОбъект.Ссылка, СкладОтправитель);
		
		ТаблицаОтгружено = РегистрыНакопления.ТоварыКОтгрузке.ОтгруженоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, СкладОтправитель);
		
		КлючевыеПоля = "Распоряжение, " + КлючевыеПоля;
		
		// Получение разницы между ОтгруженоОрдерами и Накладными (кроме текущей)
		ТаблицаОтгруженоОстаток = НакладныеСервер.ВычестьТаблицу(ТаблицаОтгружено, ТаблицаОформлено, КлючевыеПоля);
		ТаблицаОтгруженоОстаток.Индексы.Добавить(КлючевыеПоля);
		
		// Таблица принято
		ТаблицаОформленоПоПриемке = РегистрыНакопления.ТоварыКОформлениюПоступления.ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, ЭтотОбъект.Ссылка, СкладПолучатель);
		
		ТаблицаПринято = РегистрыНакопления.ТоварыКОформлениюПоступления.ПринятоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, СкладПолучатель);
		
		// Получение разницы между ОтгруженоОрдерами и Накладными (кроме текущей)
		ТаблицаПринятоОстаток = НакладныеСервер.ВычестьТаблицу(ТаблицаПринято, ТаблицаОформленоПоПриемке, КлючевыеПоля);
		ТаблицаПринятоОстаток.Индексы.Добавить(КлючевыеПоля);
		
		ТаблицаОтгруженоОстаток.Колонки.Распоряжение.Имя = "ЗаказНаПеремещение";
		ТаблицаПринятоОстаток.Колонки.Распоряжение.Имя = "ЗаказНаПеремещение";
		
		МассивНазначенийЗаказа = Новый Массив();
		Для Каждого Заказ Из МассивЗаказов Цикл
			Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				НазначениеЗаказа = Документы.КорректировкаНазначенияТоваров.ПолучитьНазначениеЗаказа(Заказ);
				Если ЗначениеЗаполнено(НазначениеЗаказа) Тогда
					МассивНазначенийЗаказа.Добавить(НазначениеЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаОтгруженоОстаток.Колонки.Назначение.Имя = "НазначениеОтправителя";
		ТаблицаОтгруженоОстаток.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		ТаблицаОтгруженоОстаток.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
		
		ТаблицаОтгруженоСобственныхНазначений = ТаблицаОтгруженоОстаток.СкопироватьКолонки();
		ТаблицаОтгруженоСтороннихНазначений = ТаблицаОтгруженоОстаток.СкопироватьКолонки();
		ТаблицаОтгруженоНеОбособленно = ТаблицаОтгруженоОстаток.СкопироватьКолонки();
		
		Для Каждого Строка Из ТаблицаОтгруженоОстаток Цикл
			Если Не ЗначениеЗаполнено(Строка.НазначениеОтправителя) Тогда
				// Назначение получателя может быть как заполнено так и нет
				НоваяСтрока = ТаблицаОтгруженоНеОбособленно.Добавить();
			ИначеЕсли МассивНазначенийЗаказа.Найти(Строка.НазначениеОтправителя) <> Неопределено Тогда
				// Назначение получателя должно быть пустой ссылкой
				НоваяСтрока = ТаблицаОтгруженоСобственныхНазначений.Добавить();
			Иначе
				// Назначение получателя должно быть равно текущему назначению
				НоваяСтрока = ТаблицаОтгруженоСтороннихНазначений.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		// Вычитание количества из таблицы ТаблицаПринятоОстаток которое можно сопоставить с таблицей ТаблицаОтгруженоСтороннихНазначений
		Для Каждого Строка Из ТаблицаОтгруженоСтороннихНазначений Цикл
			Строка.Назначение = Строка.НазначениеОтправителя;
		КонецЦикла;
		
		РаспределениеПриемкиНаСторонниеНазначения = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоСтороннихНазначений, 
		ТаблицаПринятоОстаток, 
		"Номенклатура, Характеристика, Назначение", 
		"Назначение");
		
		ТаблицаОтгруженоСтороннихНазначенийСНазначениями = РаспределениеПриемкиНаСторонниеНазначения.РаспределенноеКоличество;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РаспределениеПриемкиНаСторонниеНазначения.НеРаспределенноеКоличество, ТаблицаОтгруженоСтороннихНазначенийСНазначениями);
		
		// Заполнение поля "Назначение" в таблице ТаблицаОтгруженоНеОбособленно, из оставшихся строк таблицы ТаблицаПринятоОстаток
		// ТаблицаПринятоОстаток должна содержать только заполненные назначения
		КоличествоСтрок = ТаблицаПринятоОстаток.Количество() - 1;
		Для н = 0 По КоличествоСтрок Цикл
			ТекущийИндекс = КоличествоСтрок - н;
			Если Не ЗначениеЗаполнено(ТаблицаПринятоОстаток[ТекущийИндекс].Назначение) Тогда
				ТаблицаПринятоОстаток.Удалить(ТекущийИндекс);
			КонецЕсли;
		КонецЦикла;
		
		РаспределениеПриемкиНаНеОбособленнуюОтгрузку = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоНеОбособленно, 
		ТаблицаПринятоОстаток, 
		"Номенклатура, Характеристика", 
		"Назначение");
		
		ТаблицаОтгруженоНеОбособленноСНазначениями = РаспределениеПриемкиНаНеОбособленнуюОтгрузку.РаспределенноеКоличество;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РаспределениеПриемкиНаНеОбособленнуюОтгрузку.НеРаспределенноеКоличество, ТаблицаОтгруженоНеОбособленноСНазначениями);
		
		// Заполнение кодов строк
		
		ПоляОтбора = "ЗаказНаПеремещение, Номенклатура, Характеристика, Назначение, НазначениеОтправителя";
		ЗаполняемоеПоле = "КодСтроки";
		
		РезультатРаспределенияСобственныхНазначений	 = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоСобственныхНазначений, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
		РезультатРаспределенияСтороннихНазначений	 = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоСтороннихНазначенийСНазначениями, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
		РезультатРаспределенияНеОбособленно			 = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоНеОбособленноСНазначениями, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
		
		ПоляОтбора = "ЗаказНаПеремещение, Номенклатура, Характеристика";
		
		ДораспределениеСтороннихНазначений 	= НакладныеСервер.РаспределитьОстаткиНаТаблицу(РезультатРаспределенияСтороннихНазначений.НеРаспределенноеКоличество, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
		ДораспределениеНеОбособленно 		= НакладныеСервер.РаспределитьОстаткиНаТаблицу(РезультатРаспределенияНеОбособленно.НеРаспределенноеКоличество, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
		
		// Объединение результатов таблиц
		
		ТаблицаОтгруженоСДаннымиПриемки = РезультатРаспределенияСобственныхНазначений.РаспределенноеКоличество;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРаспределенияСобственныхНазначений.НеРаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРаспределенияСтороннихНазначений.РаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДораспределениеСтороннихНазначений.РаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДораспределениеСтороннихНазначений.НеРаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРаспределенияНеОбособленно.РаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДораспределениеНеОбособленно.РаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДораспределениеНеОбособленно.НеРаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
		
		// ТаблицаОтгруженоОстаток будет уменьшена на количество из ТаблицаНакладная
		КлючевыеПоля = "ЗаказНаПеремещение, " + ПараметрыЗаполнения.КлючевыеПоля;
		ТаблицаСуществующихСтрок = НакладныеСервер.МинимумТаблиц(ТаблицаОтгруженоСДаннымиПриемки, ТаблицаНакладная, КлючевыеПоля);
		
		// Оставшиеся строки
		ТаблицаНовыхСтрок = Документы.ПеремещениеТоваров.ДополнитьСтрокиТаблицыПерезаполненияПоЗаказу(ТаблицаОтгруженоСДаннымиПриемки);
		
	Иначе
		ТаблицаНовыхСтрок = Документы.ПеремещениеТоваров.ДополнитьСтрокиТаблицыПерезаполненияПоЗаказу(ТаблицаКОформлениюОстаток);
		ТаблицаСуществующихСтрок = ТаблицаНовыхСтрок.СкопироватьКолонки();
	КонецЕсли;
	
	ТЧПерезаполнена = РегистрыСведений.ДанныеВнутреннихДокументов.ПерезаполнитьТоварыНакладной(
		ТаблицаСуществующихСтрок, ТаблицаНовыхСтрок, ЭтотОбъект.Товары, 
			ПараметрыЗаполнения.КлючевыеПоля + ", " + ПараметрыЗаполнения.ДополнительныеПоляТаблицыДокумента);
			
	Документы.ПеремещениеТоваров.ЗаполнитьШапкуДокументаПоЗаказу(ЭтотОбъект, ПараметрыЗаполнения, СтруктураЗаполнения.МассивЗаказов);

	// Информация о шапке документа актуализирована в ЗаполнитьШапкуДокументаПоЗаказу
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Подразделение", Подразделение);
	ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Документы.ПеремещениеТоваров.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПоступленияТоваровУслуг(ДанныеЗаполнения)
	
	ПоступлениеТоваровУслуг = ДанныеЗаполнения.Основание;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ПоступлениеТоваровУслуг);
	Запрос.УстановитьПараметр("Склад", ДанныеЗаполнения.Склад);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Сделка КАК Сделка,
	|	ПоступлениеТоваровУслуг.Склад КАК СкладОтправитель,
	|	ПоступлениеТоваровУслуг.Подразделение КАК Подразделение,
	|
	|	НЕ ПоступлениеТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование
	|
	|////////////////////////////////////////////////
	|;
	|ВЫБРАТЬ
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Назначение          КАК Назначение,
	|	Товары.Склад               КАК Склад,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Количество          КАК Количество,
	|	Товары.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	Товары.Упаковка            КАК Упаковка,
	|	Товары.Назначение          КАК НазначениеОтправителя
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И Товары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И Товары.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура          КАК Номенклатура,
	|	Серии.Характеристика        КАК Характеристика,
	|	Серии.Назначение            КАК Назначение,
	|	Серии.Склад                 КАК Склад,
	|	Серии.Серия                 КАК Серия,
	|	Серии.Количество            КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &ДокументОснование
	|	И Серии.Склад = &Склад";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ТоварыОснования = ПакетРезультатов[1].Выгрузить();
	Если ТоварыОснования.Количество() = 0 Тогда

		ТекстОшибки = НСтр("ru='Документ %Документ% не содержит товаров. Ввод на основании документа запрещен.';uk='Документ %Документ% не містить товарів. Введення на підставі документа заборонено.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ПоступлениеТоваровУслуг);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Шапка = ПакетРезультатов[0].Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Шапка.Ссылка,
		,
		Шапка.ЕстьОшибкиПроведен,);
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	ДокументОснование = ПоступлениеТоваровУслуг;
	СкладОтправитель  = ДанныеЗаполнения.Склад;
	
	// Разбиение строк, заполнение серий со статусом 10.
	ИндексыСтрок = Новый Массив();
	Для Каждого СтрокаТовары Из ТоварыОснования Цикл
		
		Если СтрокаТовары.СтатусУказанияСерий = 10 Тогда
			ИндексыСтрок.Вставить(0, ТоварыОснования.Индекс(СтрокаТовары));
		КонецЕсли;
		
	КонецЦикла;
	
	СерииОснования = ПакетРезультатов[2].Выгрузить();
	
	Если ИндексыСтрок.Количество() > 0 Тогда
		
		КлючСерии = "Номенклатура, Характеристика, Склад, Назначение";
		ОбеспечениеСервер.ПеренестиСерииИзТаблицыВСтроки(ТоварыОснования, ИндексыСтрок, СерииОснования, КлючСерии);
		
	КонецЕсли;
	
	Товары.Загрузить(ТоварыОснования);
	
	Для Каждого СтрокаСерии Из СерииОснования Цикл
		Если СтрокаСерии.Количество > 0 Тогда
			НоваяСтрока = Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			НоваяСтрока.НазначениеОтправителя = НоваяСтрока.Назначение;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПеремещениеТоваров);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииАктаОРасхожденияхПослеПеремещения(Знач ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	НЕ ПеремещениеТоваров.Проведен КАК ЕстьОшибкиПроведен,
	|	ПеремещениеТоваров.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ПеремещениеТоваров.ВидЦены КАК ВидЦены,
	|	ПеремещениеТоваров.Организация КАК Организация,
	|	ПеремещениеТоваров.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	ПеремещениеТоваров.Подразделение КАК Подразделение,
	|	ПеремещениеТоваров.Сделка КАК Сделка,
	|	ПеремещениеТоваров.СкладОтправитель КАК СкладОтправитель,
	|	ПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель,
	|	ПеремещениеТоваров.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	НЕ &ЭтоПереперемещение
	|	И ПеремещениеТоваров.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка,
	|	НЕ ПеремещениеТоваров.Проведен,
	|	ПеремещениеТоваров.БанковскийСчетОрганизации,
	|	ПеремещениеТоваров.ВидЦены,
	|	ПеремещениеТоваров.ОрганизацияПолучатель,
	|	ПеремещениеТоваров.Организация,
	|	ПеремещениеТоваров.Подразделение,
	|	ПеремещениеТоваров.Сделка,
	|	ПеремещениеТоваров.СкладПолучатель,
	|	ПеремещениеТоваров.СкладОтправитель,
	|	ПеремещениеТоваров.ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	&ЭтоПереперемещение
	|	И ПеремещениеТоваров.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПеремещенияТовары.Номенклатура КАК Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияТовары.Характеристика КАК Характеристика,
	|	АктОРасхожденияхПослеПеремещенияТовары.Заказ КАК ЗаказНаПеремещение,
	|	АктОРасхожденияхПослеПеремещенияТовары.КодСтроки  КАК КодСтроки,
	|	АктОРасхожденияхПослеПеремещенияТовары.Назначение КАК Назначение,
	|	АктОРасхожденияхПослеПеремещенияТовары.НазначениеОтправителя КАК НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияТовары.Серия КАК Серия,
	|	АктОРасхожденияхПослеПеремещенияТовары.Упаковка КАК Упаковка,
	|	СУММА(АктОРасхожденияхПослеПеремещенияТовары.КоличествоПоДокументу - АктОРасхожденияхПослеПеремещенияТовары.Количество) КАК Количество,
	|	СУММА(АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещенияТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.Ссылка = &АктОРасхождениях
	|	И НЕ &ЭтоПереперемещение
	|	И АктОРасхожденияхПослеПеремещенияТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка)
	|	И АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеПеремещенияТовары.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияТовары.Характеристика,
	|	АктОРасхожденияхПослеПеремещенияТовары.Заказ,
	|	АктОРасхожденияхПослеПеремещенияТовары.КодСтроки,
	|	АктОРасхожденияхПослеПеремещенияТовары.Назначение,
	|	АктОРасхожденияхПослеПеремещенияТовары.НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияТовары.Серия,
	|	АктОРасхожденияхПослеПеремещенияТовары.Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПеремещенияТовары.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияТовары.Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказНаПеремещение,
	|	0 КАК КодСтроки,
	|	АктОРасхожденияхПослеПеремещенияТовары.Назначение,
	|	АктОРасхожденияхПослеПеремещенияТовары.НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияТовары.Серия,
	|	АктОРасхожденияхПослеПеремещенияТовары.Упаковка,
	|	СУММА(АктОРасхожденияхПослеПеремещенияТовары.Количество - АктОРасхожденияхПослеПеремещенияТовары.КоличествоПоДокументу),
	|	СУММА(АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу)
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещенияТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.Ссылка = &АктОРасхождениях
	|	И &ЭтоПереперемещение
	|	И АктОРасхожденияхПослеПеремещенияТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного)
	|	И АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеПеремещенияТовары.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияТовары.Характеристика,
	|	АктОРасхожденияхПослеПеремещенияТовары.Назначение,
	|	АктОРасхожденияхПослеПеремещенияТовары.НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияТовары.Серия,
	|	АктОРасхожденияхПослеПеремещенияТовары.Упаковка	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПеремещенияТовары.Номенклатура КАК Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияТовары.Характеристика КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказНаПеремещение,
	|	0 КАК КодСтроки,
	|	АктОРасхожденияхПослеПеремещенияТовары.Назначение КАК Назначение,
	|	АктОРасхожденияхПослеПеремещенияТовары.НазначениеОтправителя КАК НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияТовары.Серия КАК Серия,
	|	АктОРасхожденияхПослеПеремещенияТовары.Упаковка КАК Упаковка,
	|	СУММА(АктОРасхожденияхПослеПеремещенияТовары.Количество - АктОРасхожденияхПослеПеремещенияТовары.КоличествоПоДокументу),
	|	СУММА(АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу)
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещенияТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.Ссылка = &АктОРасхождениях
	|	И НЕ &ЭтоПереперемещение
	|	И АктОРасхожденияхПослеПеремещенияТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного)
	|	И АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеПеремещенияТовары.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияТовары.Характеристика,
	|	АктОРасхожденияхПослеПеремещенияТовары.Назначение,
	|	АктОРасхожденияхПослеПеремещенияТовары.НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияТовары.Серия,
	|	АктОРасхожденияхПослеПеремещенияТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПеремещенияСерии.Номенклатура КАК Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияСерии.Характеристика КАК Характеристика,
	|	АктОРасхожденияхПослеПеремещенияСерии.Серия КАК Серия,
	|	АктОРасхожденияхПослеПеремещенияСерии.Назначение КАК Назначение,
	|	АктОРасхожденияхПослеПеремещенияСерии.НазначениеОтправителя КАК НазначениеОтправителя,
	|	СУММА(АктОРасхожденияхПослеПеремещенияСерии.КоличествоПоДокументу - АктОРасхожденияхПослеПеремещенияСерии.Количество) КАК Количество
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Серии КАК АктОРасхожденияхПослеПеремещенияСерии
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияСерии.Ссылка = &АктОРасхождениях
	|	И НЕ &ЭтоПереперемещение
	|	И АктОРасхожденияхПослеПеремещенияСерии.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка)
	|	И АктОРасхожденияхПослеПеремещенияСерии.КоличествоПоДокументу - АктОРасхожденияхПослеПеремещенияСерии.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеПеремещенияСерии.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияСерии.Характеристика,
	|	АктОРасхожденияхПослеПеремещенияСерии.Серия,
	|	АктОРасхожденияхПослеПеремещенияСерии.НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияСерии.Назначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПеремещенияСерии.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияСерии.Характеристика,
	|	АктОРасхожденияхПослеПеремещенияСерии.Серия,
	|	АктОРасхожденияхПослеПеремещенияСерии.Назначение,
	|	АктОРасхожденияхПослеПеремещенияСерии.НазначениеОтправителя,
	|	СУММА(АктОРасхожденияхПослеПеремещенияСерии.Количество - АктОРасхожденияхПослеПеремещенияСерии.КоличествоПоДокументу)
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Серии КАК АктОРасхожденияхПослеПеремещенияСерии
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияСерии.Ссылка = &АктОРасхождениях
	|	И &ЭтоПереперемещение
	|	И АктОРасхожденияхПослеПеремещенияСерии.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ВозвратПерепоставленного)
	|	И АктОРасхожденияхПослеПеремещенияСерии.Количество - АктОРасхожденияхПослеПеремещенияСерии.КоличествоПоДокументу > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеПеремещенияСерии.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияСерии.Характеристика,
	|	АктОРасхожденияхПослеПеремещенияСерии.Серия,
	|	АктОРасхожденияхПослеПеремещенияСерии.НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияСерии.Назначение	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОРасхожденияхПослеПеремещенияСерии.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияСерии.Характеристика,
	|	АктОРасхожденияхПослеПеремещенияСерии.Серия,
	|	АктОРасхожденияхПослеПеремещенияСерии.Назначение,
	|	АктОРасхожденияхПослеПеремещенияСерии.НазначениеОтправителя,
	|	СУММА(АктОРасхожденияхПослеПеремещенияСерии.Количество - АктОРасхожденияхПослеПеремещенияСерии.КоличествоПоДокументу)
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Серии КАК АктОРасхожденияхПослеПеремещенияСерии
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияСерии.Ссылка = &АктОРасхождениях
	|	И &ЭтоПереперемещение
	|	И АктОРасхожденияхПослеПеремещенияСерии.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного)
	|	И АктОРасхожденияхПослеПеремещенияСерии.Количество - АктОРасхожденияхПослеПеремещенияСерии.КоличествоПоДокументу > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеПеремещенияСерии.Номенклатура,
	|	АктОРасхожденияхПослеПеремещенияСерии.Характеристика,
	|	АктОРасхожденияхПослеПеремещенияСерии.Серия,
	|	АктОРасхожденияхПослеПеремещенияСерии.НазначениеОтправителя,
	|	АктОРасхожденияхПослеПеремещенияСерии.Назначение;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.Заказ КАК ЗаказНаПеремещение
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещенияТовары
	|ГДЕ
	|	АктОРасхожденияхПослеПеремещенияТовары.Ссылка = &АктОРасхождениях
	|	И НЕ &ЭтоПереперемещение
	|	И АктОРасхожденияхПослеПеремещенияТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка)
	|	И АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок > 0
	|	И АктОРасхожденияхПослеПеремещенияТовары.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("ДокументОснование",  ДанныеЗаполнения.ПеремещениеТоваров);
	Запрос.УстановитьПараметр("АктОРасхождениях",   ДанныеЗаполнения.АктОРасхождениях);
	Запрос.УстановитьПараметр("ЭтоПереперемещение", ДанныеЗаполнения.ЭтоПереперемещение);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаШапка = ПакетЗапросов[0].Выбрать();
	ВыборкаРасчетыПоОснованию = ПакетЗапросов[2].Выбрать();
	ВыборкаЗаказы = ПакетЗапросов[3].Выбрать();
	
	ЭлементовВВыборкеЗаказы = ВыборкаЗаказы.Количество();
	Если ЭлементовВВыборкеЗаказы > 0 Тогда
		ПеремещениеПоЗаказам = Истина;
		Если ЭлементовВВыборкеЗаказы = 1 Тогда
			ВыборкаЗаказы.Следующий();
			ЗаказНаПеремещение = ВыборкаЗаказы.ЗаказНаПеремещение;
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаШапка.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.Ссылка,
		,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		,
		);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	ПеремещениеАктаОРасхождениях = ДанныеЗаполнения.ПеремещениеТоваров;
	
	Товары.Загрузить(ПакетЗапросов[1].Выгрузить());
	Серии.Загрузить(ПакетЗапросов[2].Выгрузить());
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПеремещениеТоваров);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Ответственный = Пользователи.ТекущийПользователь();
	ДатаРаспоряжения = ТекущаяДата();
	ВидЦены = Справочники.Склады.УчетныйВидЦены(СкладОтправитель);
	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров") Тогда
		Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Дата															КАК Дата,
	|	&Организация													КАК Организация,
	|	&Склад															КАК СкладОтправитель,
	|	&СкладПолучатель												КАК СкладПолучатель,
	|	&Склад															КАК Склад,
	|	Неопределено													КАК Партнер,
	|	Неопределено													КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)		КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)			КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)						КАК Валюта,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров)	КАК ХозяйственнаяОперация,
	|	Истина															КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР КОГДА &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|			И Не &ОбособленныйУчетТоваровПоСделке ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ															КАК Подразделение,
	|
	|	ВЫБОР КОГДА &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|			И Не &ОбособленныйУчетТоваровПоСделке ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ															КАК Менеджер,
	|
	|	ВЫБОР КОГДА &ОбособленныйУчетТоваровПоСделке
	|			И &ФормироватьВидыЗапасовПоСделкам ТОГДА
	|		&Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ															КАК Сделка
	|	
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура					КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика				КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ДокументРеализации			КАК ДокументРеализации,
	|	ТаблицаТоваров.Количество					КАК Количество,
	|	&Склад										КАК Склад,
	|	ТаблицаТоваров.Сделка						КАК Сделка,
	|	ТаблицаТоваров.Назначение					КАК Назначение,
	|	ТаблицаТоваров.ЗаказНаПеремещение			КАК ЗаказНаПеремещение,
	|	ТаблицаТоваров.КодСтроки					КАК КодСтроки
	|
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР КОГДА ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|		И ТоварыЗаказа.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|		Заказ.Назначение
	|	КОГДА ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить) ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	ИНАЧЕ
	|		ТаблицаТоваров.Назначение
	|	КОНЕЦ КАК Назначение
	|	
	|ПОМЕСТИТЬ ВтТоварыПодЗаказ
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаПеремещение КАК Заказ
	|	ПО
	|		ТаблицаТоваров.ЗаказНаПеремещение = Заказ.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаПеремещение.Товары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.ЗаказНаПеремещение	= ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки			= ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура		= ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика		= ТоварыЗаказа.Характеристика
	|ГДЕ
	|	ТаблицаТоваров.ЗаказНаПеремещение <> ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки						КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура						КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика					КАК Характеристика,
	|	ТаблицаТоваров.Серия							КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель    КАК СтатусУказанияСерийПолучатель,
	|	(ВЫБОР КОГДА ТаблицаТоваров.АналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) ТОГДА
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|	ИНАЧЕ
	|		ЕСТЬNULL(Аналитика.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|	КОНЕЦ) КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК ЦелевоеНалоговоеНазначение,
	|	ТаблицаТоваров.ДокументРеализации				КАК ДокументРеализации,
	|	ТаблицаТоваров.Количество						КАК Количество,
	|	&Склад											КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)	КАК СтавкаНДС,
	|	0												КАК СуммаСНДС,
	|	0												КАК СуммаНДС,
	|	0												КАК СуммаВознаграждения,
	|	0												КАК СуммаНДСВознаграждения,
	|
	|	ВЫБОР КОГДА ТаблицаТоваров.Сделка <> ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) ТОГДА
	|		ТаблицаТоваров.Сделка
	|	ИНАЧЕ
	|		&Сделка
	|	КОНЕЦ											КАК Сделка,
	|	ЕСТЬNULL(ТоварыПодЗаказ.Назначение, ТаблицаТоваров.Назначение) КАК Назначение,
	|	ТаблицаТоваров.Назначение						КАК НазначениеПолучатель,
	|	ИСТИНА											КАК ПодбиратьВидыЗапасов
	|
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтТоварыПодЗаказ КАК ТоварыПодЗаказ
	|	ПО
	|		ТаблицаТоваров.НомерСтроки = ТоварыПодЗаказ.НомерСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия = ТаблицаТоваров.Серия
	|		И Аналитика.Склад = &Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации			КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя			КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)		КАК СкладОтгрузки,
	|	&Склад											КАК Склад,
	|	ТаблицаВидыЗапасов.Сделка						КАК Сделка,
	|	ТаблицаВидыЗапасов.Серия						КАК Серия,
	|	&ВидыЗапасовУказаныВручную						КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура							КАК Номенклатура,
	|	Аналитика.Характеристика						КАК Характеристика,
	|	Аналитика.Серия									КАК Серия,
	|	ТаблицаВидыЗапасов.ДокументРеализации			КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя			КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.СкладОтгрузки				КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад						КАК Склад,
	|	ТаблицаВидыЗапасов.Сделка						КАК Сделка,
	|	ТаблицаВидыЗапасов.Серия						КАК СерияПолучатель,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную	КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОбособленныйУчетПоСделке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сделка, "ОбособленныйУчетТоваровПоСделке");
	ОбособленныйУчетПоСделке = ?(ЗначениеЗаполнено(ОбособленныйУчетПоСделке), ОбособленныйУчетПоСделке, Ложь);
	ВариантОбособленногоУчетаТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "ВариантОбособленногоУчетаТоваров");
	
	Запрос.УстановитьПараметр("ОбособленныйУчетТоваровПоСделке",					ОбособленныйУчетПоСделке);
	Запрос.УстановитьПараметр("Ссылка",												Ссылка);
	Запрос.УстановитьПараметр("Дата",												Дата);
	Запрос.УстановитьПараметр("Организация",										Организация);
	Запрос.УстановитьПараметр("СкладПолучатель",									СкладПолучатель);
	Запрос.УстановитьПараметр("Склад",												СкладОтправитель);
	Запрос.УстановитьПараметр("Сделка",												Сделка);
	Запрос.УстановитьПараметр("Менеджер",											Ответственный);
	Запрос.УстановитьПараметр("Подразделение",										Подразделение);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную",							ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ВариантОбособленногоУчетаТоваров",					ВариантОбособленногоУчетаТоваров);
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации",                     Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам",	ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам",					ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров",										ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(Товары.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",									ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	
	Запрос.Выполнить();
	
	Если ВидыЗапасовУказаныВручную Тогда
		ДополнительныеСвойства.Вставить("ИгнорироватьОперативныеОстатки", Истина);
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ТаблицаДанныхДокумента.Подразделение,
	|	ТаблицаДанныхДокумента.Менеджер,
	|	ТаблицаДанныхДокумента.Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначение,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|;
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.СкладПолучатель КАК СкладПолучатель,
	|	ДанныеДокумента.СкладОтправитель КАК СкладОтправитель,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		И Не ЕСТЬNULL(ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке, Ложь)
	|	ТОГДА
	|		ДанныеДокумента.Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		И Не ЕСТЬNULL(ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке, Ложь)
	|	ТОГДА
	|		ДанныеДокумента.Ответственный
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке, Ложь)
	|		И &ФормироватьВидыЗапасовПоСделкам
	|	ТОГДА
	|		ДанныеДокумента.Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ КАК Сделка
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Дата <> СохраненныеДанные.Дата ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.СкладПолучатель <> СохраненныеДанные.СкладПолучатель ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.СкладОтправитель <> СохраненныеДанные.СкладОтправитель ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.ХозяйственнаяОперация <> СохраненныеДанные.ХозяйственнаяОперация ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Подразделение <> СохраненныеДанные.Подразделение ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Менеджер <> СохраненныеДанные.Менеджер ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Сделка <> СохраненныеДанные.Сделка ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК РеквизитыИзменены
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	|	ПО
	|		Истина
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат (Выборка.Следующий() И Выборка.РеквизитыИзменены);
	
КонецФункции

Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Сделка КАК Сделка,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Сделка КАК Сделка,
	|		ТаблицаТоваров.НазначениеПолучатель КАК Назначение,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		(ВЫБОР ТаблицаТоваров.СтатусУказанияСерийПолучатель
	|			КОГДА 14 ТОГДА ТаблицаТоваров.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КОНЕЦ) КАК Серия,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.Сделка КАК Сделка,
	|		ТаблицаВидыЗапасов.ВидЗапасовПолучателя.Назначение КАК Назначение,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.СерияПолучатель КАК Серия,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Сделка,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	Сделки = Товары.ВыгрузитьКолонку("Сделка");
		
	Если Константы.ПеремещатьТоварыДругихОрганизаций.Получить()
	 И Перечисления.ХозяйственныеОперации.ПеремещениеТоваров = ХозяйственнаяОперация Тогда
		ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленные(
			Организация,
			Сделки,
			Ответственный,
			Подразделение,
			МенеджерВременныхТаблиц,
			Истина,
			ХозяйственнаяОперация);
	Иначе	
		ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленныеБезИнтеркомпани(
			Организация,
			Сделки,
			Ответственный,
			Подразделение,
			МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
				
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Перемещение превышает остаток товара организации %1 на складе %2 %3 %4';uk='Переміщення перевищує залишок товару організації %1 на складі %2 %3 %4'"),
			Организация,
			СкладОтправитель,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Номенклатура: %1, недостаточно %2 %3';uk='Номенклатура: %1, недостатньо %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.Серия),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru=' с указанными кодами УКТВЭД и номерами ГТД';uk=' з зазначеними кодами УКТЗЕД та номерами ВМД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНазначениеВидовЗапасов()
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	Для Каждого СтрокаТоваров Из Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТоваров.Назначение) Тогда
			Продолжить;
		Конецесли;

		КоличествоТоваров = СтрокаТоваров.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл

			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);

			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.Назначение = СтрокаТоваров.Назначение;
			НоваяСтрока.Количество = Количество;

			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;

			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры 

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	Если Не Проведен
	 ИЛИ ПерезаполнитьВидыЗапасов
	 ИЛИ ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	 ИЛИ ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц) Тогда
	 
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(Ссылка, Организация, Дата, ДополнительныеСвойства, МенеджерВременныхТаблиц);
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц,
			ДополнительныеСвойства,
			ВидыЗапасов,
			ТаблицаОшибок,
			Отказ);
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, Сделка, ВидЗапасов, НомерГТД", "Количество");
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
		
		Если Не Отказ Тогда
			ЗаполнитьНазначениеВидовЗапасов();
			ЗаполнитьВидЗапасовПолучателя();
			ЗаполнитьДопКолонкиВидовЗапасов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидЗапасовПолучателя() Экспорт
			
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки,
	|	Запасы.Назначение,
	|	Запасы.ВидЗапасов
	|
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&ВидыЗапасов КАК Запасы
	|;
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВидыЗапасов.Комитент КАК Комитент,
	|	ВидыЗапасов.Контрагент КАК Контрагент,
	|	ВидыЗапасов.Договор КАК Договор,
	|	ВидыЗапасов.Соглашение КАК Соглашение,
	|	ВидыЗапасов.Валюта КАК Валюта,
	|	ВидыЗапасов.НалоговоеНазначение КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ВидыЗапасов.Комитент
	|	ИНАЧЕ
	|		ВидыЗапасов.Поставщик
	|	КОНЕЦ КАК Поставщик,
	|
	|	ВидыЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ВидыЗапасов.Подразделение КАК Подразделение,
	|	ВидыЗапасов.Менеджер КАК Менеджер,
	|	ВидыЗапасов.Сделка КАК Сделка,
	|	ВидыЗапасов.Подразделение.ВариантОбособленногоУчетаТоваров КАК ВариантОбособленногоУчетаТоваров,
	|	ЕСТЬNULL(ВидыЗапасов.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
	|
	|	Запасы.Назначение КАК Назначение,
	|
	|	ЛОЖЬ КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасовВладельца,
	|
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|	КОНЕЦ КАК ХозоперацияВидаЗапаса
	|ИЗ
	|	Запасы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ВидыЗапасов.Ссылка = Запасы.ВидЗапасов
	|ГДЕ
	|	ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	ИЛИ &ЭтоВнутренняяПередачаТоваров
	|	ИЛИ Запасы.Назначение <> ВидыЗапасов.Назначение
	|");
	ЭтоВнутренняяПередачаТоваров = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров);
	Запрос.УстановитьПараметр("ЭтоВнутренняяПередачаТоваров", ЭтоВнутренняяПередачаТоваров);
	Запрос.УстановитьПараметр("ВидыЗапасов", ВидыЗапасов.Выгрузить(, "НомерСтроки, Назначение, ВидЗапасов"));
	Если ЭтоВнутренняяПередачаТоваров Тогда
		НалоговоеНазначениеОрганизации = Справочники.Организации.НалоговоеНазначениеНДС(ОрганизацияПолучатель, Дата);
	Иначе
		НалоговоеНазначениеОрганизации = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);
	КонецЕсли;
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", НалоговоеНазначениеОрганизации);
	
	ВидыЗапасовПолучателя = Новый Соответствие;
	ПолучательЗапасов = ?(Перечисления.ХозяйственныеОперации.ПеремещениеТоваров = ХозяйственнаяОперация,
		Организация,
		ОрганизацияПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидЗапасовПолучателя = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
			ПолучательЗапасов,
			Выборка.ХозоперацияВидаЗапаса,
			Выборка);
		ВидыЗапасовПолучателя.Вставить(Выборка.НомерСтроки, ВидЗапасовПолучателя);
	КонецЦикла;
	
	Для Каждого Запас Из ВидыЗапасов Цикл
		ВидЗапасовПолучателя = ВидыЗапасовПолучателя[Запас.НомерСтроки];
		Запас.ВидЗапасовПолучателя = ?(Неопределено = ВидЗапасовПолучателя, Запас.ВидЗапасов, ВидЗапасовПолучателя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДопКолонкиВидовЗапасов() Экспорт 
	
	КолонкиГруппировок = "АналитикаУчетаНоменклатуры, СтатусУказанияСерийПолучатель, Серия";
	КолонкиСуммирования = "Количество";
	
	ТаблицаТовары = Товары.Выгрузить(, КолонкиГруппировок + ", " + КолонкиСуммирования);
	ТаблицаТовары.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоТоваровПоСтроке", СтрокаТоваров.Количество);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		
		ЗаполнитьСтрокуВидовЗапасов(СтрокаТоваров, СтруктураПоиска, Ресурсы);
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуВидовЗапасов(СтрокаТоваров, СтруктураПоиска, Ресурсы) 
	
	Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
		
		Если СтрокаЗапасов.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоПоСтроке = Мин(Ресурсы.КоличествоТоваровПоСтроке, СтрокаЗапасов.Количество);
		
		НоваяСтрока = ВидыЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
		
		Если СтрокаТоваров.СтатусУказанияСерийПолучатель = 14 Тогда
			НоваяСтрока.Серия = СтрокаТоваров.Серия;
		Иначе
			НоваяСтрока.Серия = Неопределено;
		КонецЕсли;
		НоваяСтрока.Количество = КоличествоПоСтроке;
		
		Ресурсы.КоличествоТоваровПоСтроке = Ресурсы.КоличествоТоваровПоСтроке - НоваяСтрока.Количество;
		СтрокаЗапасов.Количество          = СтрокаЗапасов.Количество          - НоваяСтрока.Количество;
		
		Если Ресурсы.КоличествоТоваровПоСтроке = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьСделкуВТаблицеТовары()
	
	Если Не ПеремещениеПоЗаказам Тогда
		
		Для Каждого СтрокаТовары Из Товары Цикл
			СтрокаТовары.Сделка = Сделка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	Если ПеремещениеПоЗаказам  Или Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ЗаказыНаПеремещение);

		Если НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПеремещениеТоваров).ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.ТоварыНаСкладах);
		КонецЕсли;

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	// заказы клиентов
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Назначения.Заказ КАК ЗаказКлиента
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	Назначения.Ссылка В(&МассивНазначений)
	|	И (Назначения.Заказ ССЫЛКА Документ.ЗаказКлиента
	|			ИЛИ Назначения.Заказ ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|	)
	|
	|СГРУППИРОВАТЬ ПО
	|	Назначения.Заказ";
	
	Запрос.УстановитьПараметр("МассивНазначений", ЭтотОбъект.Товары.ВыгрузитьКолонку("Назначение"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	МассивЗависимыхЗаказов = Результат.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

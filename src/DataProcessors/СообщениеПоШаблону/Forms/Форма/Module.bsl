
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	СпособОтправки = 0;
	ОбработатьПереданныеПараметры();
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранКонтакт" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ВыбранныйКонтакт") И ЗначениеЗаполнено(Параметр.ВыбранныйКонтакт) Тогда
		
		Представление = "";
		Телефон = "";
		
		ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
		                          Параметр.ВыбранныйКонтакт, Представление, Телефон,
		                          ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
		НоваяСтрока = Объект.АдресатыSMS.Добавить();
		НоваяСтрока.Контакт          = Параметр.ВыбранныйКонтакт;
		НоваяСтрока.Телефон          = Телефон;
		НоваяСтрока.ПолучательВыбран = Истина;
		НоваяСтрока.Представление    = ?(ПустаяСтрока(Представление), Строка(Параметр.ВыбранныйКонтакт), Представление);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПараметраШаблона(Элемент)

	ТребуетсяФормированиеТекстов = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.УчетнаяЗапись <> ВыбранноеЗначение Тогда
		Объект.УчетнаяЗапись = ВыбранноеЗначение;
		ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ЭлементСписка <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Объект.ОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАдресатыПочта

&НаКлиенте
Процедура АдресатыПочтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.Группа           = "Кому";
		Элемент.ТекущиеДанные.ПолучательВыбран = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыПочтаАдресатПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АдресатыПочта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПреобразования = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(ТекущиеДанные.АдресатПредставление);
	Если РезультатПреобразования.Количество() > 0 Тогда
		ТекущиеДанные.Представление = РезультатПреобразования[0].Псевдоним;
		ТекущиеДанные.Адрес         = РезультатПреобразования[0].Адрес;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеШаблоны

&НаКлиенте
Процедура ДоступныеШаблоныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Далее(ЭтаФорма.Команды.Далее);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеШаблоныПриАктивизацииСтроки(Элемент)
	
	 ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаШаблонов", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеШаблоныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресатов(Команда)
	
	Если Объект.ПредназначенДляЭлектронныхПисем Тогда
		ИмяТабличнойЧасти = "АдресатыПочта";
	Иначе
		ИмяТабличнойЧасти = "АдресатыSMS";
	КонецЕсли;
	
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		Результат = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьАдресатовЗавершение", ЭтотОбъект), НСтр("ru='Табличная возможных адресатов будет очищена. Продолжить?';uk='Таблична частина можливих адресатів буде очищена. Продовжити?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьАдресатовФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресатовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Не Результат = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьАдресатовФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресатовФрагмент()
    
    ЗаполнитьТаблицуВозможныхАдресатов();

КонецПроцедуры

&НаКлиенте
Процедура АдресатыПочтаПодобратьИзАдреснойКниги(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("Предмет", Объект.Предмет);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",НСтр("ru='Кому';uk='Кому'"));
	
	Результат = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.АдреснаяКнига", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("АдресатыПочтаПодобратьИзАдреснойКнигиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыПочтаПодобратьИзАдреснойКнигиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если (ТипЗнч(Результат) <> Тип("Массив")) Тогда
        Возврат;
    КонецЕсли;
    
    Для каждого Адресат Из Результат Цикл
        
        Представление = ?(ПустаяСтрока(Адресат.Представление), Адресат.Адрес, Адресат.Представление + " <" + Адресат.Адрес + ">");
        Если Объект.АдресатыПочта.НайтиСтроки(Новый Структура("АдресатПредставление,",Представление)).Количество() = 0 Тогда
            НоваяСтрока = Объект.АдресатыПочта.Добавить();
            НоваяСтрока.ПолучательВыбран = Истина;
            НоваяСтрока.АдресатПредставление = Представление;
            НоваяСтрока.Группа               = Адресат.Группа;
            НоваяСтрока.Контакт              = Адресат.Контакт;
            НоваяСтрока.Адрес                = Адресат.Адрес;
            НоваяСтрока.Представление        = Адресат.Представление;
        КонецЕсли;
        
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура АдресатыSMSПодобратьКонтакты(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Предмет",       Объект.Предмет);
	ПараметрыОткрытия.Вставить("ТолькоТелефон", Истина);
	
	Результат = ОткрытьФорму("ОбщаяФорма.ВыборКонтакта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(текДанные.Ссылка, УникальныйИдентификатор);
		
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = текДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			ЗапуститьПриложение("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, текДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ПутьКФайлу = текДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			Если ЭтоАдресВременногоХранилища(текДанные.ИмяФайлаНаКомпьютере) Тогда
				ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(ИмяВременнойПапки);
				ПутьКФайлу = ИмяВременнойПапки + "\" + текДанные.ИмяФайла;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(текДанные.ИмяФайлаНаКомпьютере);
				ДвоичныеДанные.Записать(ПутьКФайлу);
			КонецЕсли;
			ЗапуститьПриложение("""" + ПутьКФайлу + """");
		#Иначе
			ПолучитьФайл(ПутьКФайлу, текДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаШаблонов()

	Если Не ПартнерыИКонтрагентыКлиент.ПозиционированиеКорректно("ДоступныеШаблоны",ЭтаФорма) Тогда
		
		Если ТекущийАктивныйШаблон <> ПредопределенноеЗначение("Справочник.ШаблоныСообщений.ПустаяСсылка") Тогда
			УстановитьТекстПредпросмотр(Неопределено);
		КонецЕсли;
		ОснованиеВыбора = "";
		
	Иначе
		
		Если ТекущийАктивныйШаблон <> Элементы.ДоступныеШаблоны.ТекущаяСтрока Тогда
			УстановитьТекстПредпросмотр(Элементы.ДоступныеШаблоны.ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстПредпросмотр(ДанныеШаблона)

	Если ДанныеШаблона = Неопределено Тогда
		
		Элементы.СтраницыПредпросмотрШаблона.ТекущаяСтраница = Элементы.СтраницаПредпросмотрОбычныйТекст;
		ПредпросмотрОбычныйТекст = "";
		ТекущийАктивныйШаблон = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.ПустаяСсылка");
		
	ИначеЕсли ДанныеШаблона.ПредназначенДляSMS Тогда
		
		Элементы.СтраницыПредпросмотрШаблона.ТекущаяСтраница = Элементы.СтраницаПредпросмотрОбычныйТекст;
		ПредпросмотрОбычныйТекст = ДанныеШаблона.ТекстШаблонаSMS;
		ТекущийАктивныйШаблон    = ДанныеШаблона.Ссылка;
		
	ИначеЕсли ДанныеШаблона.ПредназначенДляЭлектронныхПисем Тогда
		
		Если ДанныеШаблона.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст") Тогда
			
			Элементы.СтраницыПредпросмотрШаблона.ТекущаяСтраница = Элементы.СтраницаПредпросмотрОбычныйТекст;
			ПредпросмотрОбычныйТекст = ДанныеШаблона.ТекстШаблонаПисьма;
			ТекущийАктивныйШаблон    = ДанныеШаблона.Ссылка;
			
		ИначеЕсли ДанныеШаблона.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
			
			Элементы.СтраницыПредпросмотрШаблона.ТекущаяСтраница = Элементы.СтраницаПредпросмотрHTML;
			СформироватьПредпросмотрHTML(ДанныеШаблона.Ссылка, ДанныеШаблона.ТекстШаблонаПисьмаHTML);
			ТекущийАктивныйШаблон    = ДанныеШаблона.Ссылка;
			
		Иначе
			
			УстановитьТекстПредпросмотр(Неопределено);
			
		КонецЕсли;
		
	Иначе
		УстановитьТекстПредпросмотр(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьПредпросмотрHTML(Шаблон,ИсходныйТекстШаблонаПисьмаHTML)
	
	СтруктураВложений = Новый Структура;
	ТекстШаблонаПисьмаHTML = ИсходныйТекстШаблонаПисьмаHTML;
	ТекстШаблонаПисьмаHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Шаблон ,ТекстШаблонаПисьмаHTML, СтруктураВложений);
	ФорматированныйДокументПредпросмотр.УстановитьHTML(ТекстШаблонаПисьмаHTML, СтруктураВложений);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьРеквизитыФормыСогласноПараметрам()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ПараметрыШаблона.Очистить();
	
	Если Объект.ШаблонСообщения.Пустая() Тогда
		
		Объект.ТекстСообщенияПисьма             = "";
		Объект.ТекстСообщенияПисьмаHTML         = "";
		Объект.ТипТекстаПисьма                  = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		Объект.ТемаПисьма                       = "";
		Объект.ТекстСообщенияSMS                = "";
		Объект.ИсходныйТекстСообщенияПисьма     = "";
		Объект.ИсходныйТекстСообщенияПисьмаНТМL = "";
		Объект.ИсходныйТекстТемыПисьма          = "";
		Объект.ИсходныйТекстСообщенияSMS        = "";
		Объект.ПредназначенДляSMS               = Ложь;
		Объект.ПредназначенДляЭлектронныхПисем  = Ложь;
		Объект.Предмет                          = Неопределено;
		ЗапросыШаблона.Очистить();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ШаблоныСообщенийПараметры.ИмяПараметра,
		|	ШаблоныСообщенийПараметры.ТипПараметра,
		|	ШаблоныСообщенийПараметры.ЭтоПредопределенныйПараметр,
		|	ШаблоныСообщенийПараметры.ПредставлениеПараметра
		|ИЗ
		|	Справочник.ШаблоныСообщений.Параметры КАК ШаблоныСообщенийПараметры
		|ГДЕ
		|	ШаблоныСообщенийПараметры.Ссылка = &ШаблонСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШаблоныСообщений.ТекстШаблонаПисьма,
		|	ШаблоныСообщений.ШаблонПоВнешнейОбработке,
		|	ШаблоныСообщений.ВнешняяОбработка,
		|	ШаблоныСообщений.ТемаПисьма,
		|	ШаблоныСообщений.ТекстШаблонаSMS,
		|	ШаблоныСообщений.ПредназначенДляЭлектронныхПисем,
		|	ШаблоныСообщений.ПредназначенДляSMS,
		|	ШаблоныСообщений.ТипТекстаПисьма,
		|	ШаблоныСообщений.ТекстШаблонаПисьмаHTML,
		|	ШаблоныСообщений.УпаковатьВАрхив,
		|	ШаблоныСообщений.ФорматВложений,
		|	ШаблоныСообщений.ОтправлятьВТранслите,
		|	ШаблоныСообщений.Наименование КАК НаименованиеШаблона
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.Ссылка = &ШаблонСообщения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШаблоныСообщенийПечатныеФормы.ПечатнаяФорма
		|ИЗ
		|	Справочник.ШаблоныСообщений.ПечатныеФормы КАК ШаблоныСообщенийПечатныеФормы
		|ГДЕ
		|	ШаблоныСообщенийПечатныеФормы.Ссылка = &ШаблонСообщения";
		
		Запрос.УстановитьПараметр("ШаблонСообщения", Объект.ШаблонСообщения);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаТексты = Результат[1].Выбрать();
		ВыборкаТексты.Следующий();
		Объект.ШаблонПоВнешнейОбработке = ВыборкаТексты.ШаблонПоВнешнейОбработке;
		
		Если Объект.ШаблонПоВнешнейОбработке Тогда
			
			Объект.ВнешняяОбработка = ВыборкаТексты.ВнешняяОбработка;
			
			ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(Объект.ВнешняяОбработка);
			УстановитьБезопасныйРежим(Истина);
			
			СтруктураДанныхВнешнейОбработки = ВнешнийОбъект.СтруктураДанныхДляСообщенияПоШаблону(Объект.ПредназначенДляЭлектронныхПисем);
			ПараметрыШаблона.Загрузить(СтруктураДанныхВнешнейОбработки.ПараметрыШаблона);
			Объект.ПредназначенДляЭлектронныхПисем = СтруктураДанныхВнешнейОбработки.ПредназначенДляЭлектронныхПисем;
			Объект.ПредназначенДляSMS              = СтруктураДанныхВнешнейОбработки.ПредназначенДляSMS;
			Если Объект.ПредназначенДляЭлектронныхПисем Тогда
				Объект.ТипТекстаПисьма = СтруктураДанныхВнешнейОбработки.ТипТекстаПисьма;
			КонецЕсли;
			
			Для Каждого ПараметрШаблона ИЗ ПараметрыШаблона Цикл
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ПараметрШаблона.ИмяПараметра,ПараметрШаблона.ОписаниеТипа,,));
			КонецЦикла;
			
			УстановитьБезопасныйРежим(Ложь);
			
		Иначе
			
			Если НЕ Результат[0].Пустой() Тогда
				ВыборкаПараметры = Результат[0].Выбрать();
				Пока ВыборкаПараметры.Следующий() Цикл
					ДобавитьРеквизитВМассивПоВыборке(ДобавляемыеРеквизиты,ВыборкаПараметры);
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ Результат[2].Пустой() Тогда
				ПечатныеФормы.Загрузить(Результат[2].Выгрузить());
			КонецЕсли;
			
			Если Не Объект.ШаблонСообщения.Пустая() Тогда
				
				ЗаполнитьЗначенияСвойств(Объект, ВыборкаТексты);
				Объект.ИсходныйТекстСообщенияПисьма     = ВыборкаТексты.ТекстШаблонаПисьма;
				Объект.ИсходныйТекстТемыПисьма          = ВыборкаТексты.ТемаПисьма;
				Объект.ИсходныйТекстСообщенияПисьмаНТМL = ВыборкаТексты.ТекстШаблонаПисьмаHTML;
				Объект.ИсходныйТекстСообщенияSMS        = ВыборкаТексты.ТекстШаблонаSMS;
				Объект.ТекстСообщенияПисьма             = ВыборкаТексты.ТекстШаблонаПисьма;
				Объект.ТекстСообщенияSMS                = ВыборкаТексты.ТекстШаблонаSMS;
				Объект.УпаковатьВАрхив                  = ВыборкаТексты.УпаковатьВАрхив;
				Объект.ОтправлятьВТранслите             = ВыборкаТексты.ОтправлятьВТранслите;
				Объект.НаименованиеШаблона              = ВыборкаТексты.НаименованиеШаблона;
				ЗаполнитьТаблицуЗапросовПакета();
				
				Если  Объект.ПредназначенДляЭлектронныхПисем Тогда
					Если  Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
						И НЕ ПустаяСтрока(Объект.ИсходныйТекстСообщенияПисьмаНТМL) Тогда
						
						СтруктураВложений = Новый Структура;
						Объект.ИсходныйТекстСообщенияПисьмаНТМL = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
						                                             Объект.ШаблонСообщения ,
						                                             Объект.ИсходныйТекстСообщенияПисьмаНТМL,
						                                             СтруктураВложений);
						
						ТаблицаКартинокШаблонаПисьма.Очистить();
						Для каждого Вложение Из СтруктураВложений Цикл
							
							НоваяСтрока = ТаблицаКартинокШаблонаПисьма.Добавить();
							НоваяСтрока.Идентификатор = Вложение.Ключ;
							НоваяСтрока.Картинка      = Вложение.Значение;
							
						КонецЦикла;
						
						Объект.ТекстСообщенияПисьмаHTML = Объект.ИсходныйТекстСообщенияПисьмаНТМL;
						ТекстСообщенияПисьмоФорматированныйДокумент.УстановитьHTML(Объект.ТекстСообщенияПисьмаHTML, СтруктураВложений);
						
					КонецЕсли;
					
					ФорматыВложенийПисьма.Очистить();
					ФорматыВложенийШаблон = ВыборкаТексты.ФорматВложений.Получить();
					Если ФорматыВложенийПисьма <> Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФорматыВложенийШаблон, ФорматыВложенийПисьма);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты,ДобавленныеДинамическиРеквизиты.ВыгрузитьЗначения());
	УдалитьЭлементыФормыПараметровШаблона();
	ДобавитьЭлементыФормыПараметровШаблона(ДобавляемыеРеквизиты);
	
	ДобавленныеДинамическиРеквизиты.Очистить();
	Для каждого ДобавленныйРеквизит Из ДобавляемыеРеквизиты Цикл
		ДобавленныеДинамическиРеквизиты.Добавить(ДобавленныйРеквизит.Имя);
	КонецЦикла;
	
	СформироватьЗаголовок();
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецФункции
 
&НаСервере
Процедура СформироватьЗаголовок()

	Если Объект.ПредназначенДляЭлектронныхПисем Тогда
		Заголовок = НСтр("ru='Письмо по шаблону';uk='Лист за шаблоном'");
	ИначеЕсли Объект.ПредназначенДляSMS Тогда
		Заголовок = НСтр("ru='Сообщение SMS по шаблону';uk='Повідомлення SMS за шаблоном'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыФормыПараметровШаблона()
	
	Для каждого УдаляемыйРеквизит Из ДобавленныеДинамическиРеквизиты Цикл
		
		НайденныйЭлементФормы = Элементы.Найти(УдаляемыйРеквизит.Значение);
		
		Если НайденныйЭлементФормы <> Неопределено  Тогда
			Элементы.Удалить(НайденныйЭлементФормы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыФормыПараметровШаблона(ДобавляемыеРеквизиты)
	
	Для Каждого ПараметрШаблона ИЗ ПараметрыШаблона Цикл
		
		Элемент = Элементы.Добавить(ПараметрШаблона.ИмяПараметра,Тип("ПолеФормы"),Элементы.ПараметрыШаблона);
		Элемент.Вид                        = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка         = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.Заголовок                  = ПараметрШаблона.ПредставлениеПараметра;
		Элемент.ПутьКДанным                = ПараметрШаблона.ИмяПараметра;
		Элемент.РастягиватьПоГоризонтали   = Ложь;
		Элемент.УстановитьДействие("ПриИзменении","Подключаемый_ПриИзмененииПараметраШаблона");
		Элемент.Ширина = 50;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитВМассивПоВыборке(ДобавляемыеРеквизиты,Выборка)

	ОписаниеТипа = Выборка.ТипПараметра.Получить();
	Если ЗначениеЗаполнено(ОписаниеТипа) Тогда
		МетаданныеПараметра = Метаданные.НайтиПоТипу(ОписаниеТипа.Типы()[0]);
		Если МетаданныеПараметра <> Неопределено И Не ПравоДоступа("Чтение", МетаданныеПараметра) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Выборка.ИмяПараметра,ОписаниеТипа,,));
	
	НовыйПараметрШаблона = ПараметрыШаблона.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйПараметрШаблона, Выборка);
	НовыйПараметрШаблона.ОписаниеТипа = ОписаниеТипа;

КонецПроцедуры

&НаСервере
Процедура СформироватьТекстСообщения()
	
	Если Объект.ШаблонПоВнешнейОбработке Тогда
		
		ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(Объект.ВнешняяОбработка);
		
		СтруктураСообщения = ВнешнийОбъект.СформироватьСообщениеПоШаблону(СформироватьСтруктураПараметровШаблона());
		
		Если Объект.ПредназначенДляЭлектронныхПисем Тогда
			
			Если Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
				
				Объект.ТекстСообщенияПисьмаHTML = СтруктураСообщения.ТекстПисьмаHTML;
				ТаблицаКартинокШаблонаПисьма.Очистить();
				
				Если СтруктураСообщения.СтруктураВложений = Неопределено Тогда
					СтруктураСообщения.СтруктураВложений = Новый Структура;
				КонецЕсли;
				Для каждого Вложение Из СтруктураСообщения.СтруктураВложений Цикл
					
					НоваяСтрока = ТаблицаКартинокШаблонаПисьма.Добавить();
					НоваяСтрока.Идентификатор = Вложение.Ключ;
					НоваяСтрока.Картинка      = Вложение.Значение;
					
				КонецЦикла;
				
				ТекстСообщенияПисьмоФорматированныйДокумент.УстановитьHTML(Объект.ТекстСообщенияПисьмаHTML, СтруктураСообщения.СтруктураВложений);
				
			Иначе
				
				Объект.ТекстСообщенияПисьма = СтруктураСообщения.ТекстПисьма;
				
			КонецЕсли;
			
			Объект.ТемаПисьма = СтруктураСообщения.ТемаПисьма;
			
		Иначе
			
			Объект.ТекстСообщенияSMS = СтруктураСообщения.ТекстСообщенияSMS;
			
		КонецЕсли;
		
		ОпределитьПредметСообщения();
		
	Иначе
		
		СоответстиеПараметровТекстаСообщения = ШаблоныСообщенийСервер.ПараметрыТекстаСообщения(Объект.ПредназначенДляЭлектронныхПисем,
		                                                                                       Объект.ПредназначенДляSMS,
		                                                                                       Объект.ТипТекстаПисьма,
		                                                                                       Объект.ИсходныйТекстТемыПисьма,
		                                                                                       Объект.ИсходныйТекстСообщенияПисьмаНТМL,
		                                                                                       Объект.ИсходныйТекстСообщенияПисьма,
		                                                                                       Объект.ИсходныйТекстСообщенияSMS);
		
		Если СоответстиеПараметровТекстаСообщения <> Неопределено Тогда
			ПодставитьПараметрыСообщенияВТекст(СоответстиеПараметровТекстаСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяФормированиеТекстов = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПодставитьПараметрыСообщенияВТекст(СоответствиеПараметровТекстаСообщения)

	ТаблицаПараметровСообщения = ШаблоныСообщенийСервер.ПустаяТаблицаПараметровСообщения();
	
	Для каждого ЭлементСоответствия Из СоответствиеПараметровТекстаСообщения Цикл
		
		Если ЭлементСоответствия.Ключ = "Произвольные" Тогда
			
			Для каждого ЭлементМассиваПараметров Из ЭлементСоответствия.Значение Цикл
			
				Попытка
					Если ЗначениеЗаполнено(ЭтаФорма[ЭлементМассиваПараметров]) Тогда
						ШаблоныСообщенийСервер.ДобавитьСтрокуТаблицуПараметров(
						           ТаблицаПараметровСообщения,
						           ЭлементСоответствия.Ключ + "." + ЭлементМассиваПараметров,
						           ЭтаФорма[ЭлементМассиваПараметров]);
					КонецЕсли;
				Исключение
					ЗаписьЖурналаРегистрации(
					НСтр("ru='Шаблоны сообщений';uk='Шаблони повідомлень'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЦикла;
			
		Иначе
			
			НайденныеСтроки = ЗапросыШаблона.НайтиСтроки(Новый Структура("ИмяНабораДанных",ЭлементСоответствия.Ключ));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаТаблицыЗапросовШаблона = НайденныеСтроки[0];
				Запрос = Новый Запрос;
				Запрос.Текст = СтрокаТаблицыЗапросовШаблона.ТекстЗапроса;
				
				ЕстьНезаполенныйПараметр = Ложь;
				Для каждого ТребуемыйПараметр Из СтрокаТаблицыЗапросовШаблона.СписокТребуемыхПараметров Цикл
					Если ТребуемыйПараметр.Значение = "ТекущаяДата" Тогда
						Запрос.УстановитьПараметр(ТребуемыйПараметр.Значение,ТекущаяДатаСеанса());
					ИначеЕсли ЗначениеЗаполнено(ЭтаФорма[ЭлементСоответствия.Ключ]) Тогда
						Запрос.УстановитьПараметр(ТребуемыйПараметр.Значение,ЭтаФорма[ЭлементСоответствия.Ключ]);
					Иначе
						ЕстьНезаполенныйПараметр = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьНезаполенныйПараметр Тогда
					Продолжить;
				КонецЕсли;
				
				//Запрос может выполниться с ошибкой
				Попытка
					Выборка = Запрос.Выполнить().Выбрать();
				Исключение
					ЗаписьЖурналаРегистрации(
					НСтр("ru='Шаблоны сообщений';uk='Шаблони повідомлень'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
				
				Выборка.Следующий();
				
				Для каждого ЭлементМассиваПараметров Из ЭлементСоответствия.Значение Цикл
					//А поля в выборке может и не быть
					Попытка
						ШаблоныСообщенийСервер.ДобавитьСтрокуТаблицуПараметров(
						                                ТаблицаПараметровСообщения,
						                                ЭлементСоответствия.Ключ + "." + ЭлементМассиваПараметров,
						                                Выборка[ЭлементМассиваПараметров]);
						Исключение
						ЗаписьЖурналаРегистрации(
						НСтр("ru='Шаблоны сообщений';uk='Шаблони повідомлень'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЦикла;
			
			КонецЕсли;
			
			Если ЭлементСоответствия.Значение.Найти("ВнешняяСсылкаНаОбъект") <> Неопределено
				 И ЗначениеЗаполнено(ЭтаФорма[ЭлементСоответствия.Ключ]) Тогда
				ШаблоныСообщенийСервер.ДобавитьСтрокуТаблицуПараметров(
				                         ТаблицаПараметровСообщения,
				                         ЭлементСоответствия.Ключ + ".ВнешняяСсылкаНаОбъект",
				                         ШаблоныСообщенийСервер.ВнешняяСсылкаНаОбъект(ЭтаФорма[ЭлементСоответствия.Ключ]));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ПредназначенДляSMS Тогда
		Объект.ТекстСообщенияSMS = ШаблоныСообщенийСервер.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
		                                                                             Объект.ИсходныйТекстСообщенияSMS,
		                                                                             ТаблицаПараметровСообщения);
	КонецЕсли;
	
	Если Объект.ПредназначенДляЭлектронныхПисем Тогда
		Если Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			Объект.ТекстСообщенияПисьмаHTML = "";
			Объект.ТекстСообщенияПисьмаHTML = ШаблоныСообщенийСервер.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
			                                                                     Объект.ИсходныйТекстСообщенияПисьмаНТМL,
			                                                                     ТаблицаПараметровСообщения);
			ТекстСообщенияПисьмоФорматированныйДокумент.УстановитьHTML(Объект.ТекстСообщенияПисьмаHTML, 
			                                                           СтруктураВложенийИзТаблицыКартинок(ЭтаФорма));
		Иначе
			Объект.ТекстСообщенияПисьма = ШаблоныСообщенийСервер.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
			                                                                          Объект.ИсходныйТекстСообщенияПисьма, 
			                                                                          ТаблицаПараметровСообщения);
		КонецЕсли;
		Объект.ТемаПисьма           = ШаблоныСообщенийСервер.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
		                                                                                Объект.ИсходныйТекстТемыПисьма,
		                                                                                ТаблицаПараметровСообщения);
	КонецЕсли;
	
	ОпределитьПредметСообщения();
	ДобавитьВложенияПечатныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложенияПечатныеФормы()
	
	Вложения.Очистить();
	
	СоотвествиеПараметровПечатныхФорм = ПолучитьПараметрыПечатныхФорм();
	
	Для каждого ПараметрШаблона Из ПараметрыШаблона Цикл
		
		Если СоотвествиеПараметровПечатныхФорм.Получить(ПараметрШаблона.ИмяПараметра) <> Неопределено
			И ЗначениеЗаполнено(ЭтаФорма[ПараметрШаблона.ИмяПараметра]) Тогда
			
			Для Каждого ПечатнаяФорма ИЗ СоотвествиеПараметровПечатныхФорм.Получить(ПараметрШаблона.ИмяПараметра) Цикл
				
				ДобавитьВложениеПечатнуюФорму(ЭтаФорма[ПараметрШаблона.ИмяПараметра], ПечатнаяФорма);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыПечатныхФорм()
	
	СоотвествиеПараметровПечатныхФорм = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ПечатныеФормы Цикл
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.ПечатнаяФорма, ".");
		Если МассивСтрок.Количество() = 2 Тогда
			Если СоотвествиеПараметровПечатныхФорм.Получить(МассивСтрок[0]) = Неопределено Тогда
				МассивПечатныхФорм = Новый Массив;
				МассивПечатныхФорм.Добавить(МассивСтрок[1]);
				СоотвествиеПараметровПечатныхФорм.Вставить(МассивСтрок[0], МассивПечатныхФорм);
			Иначе 
				СоотвествиеПараметровПечатныхФорм.Получить(МассивСтрок[0]).Добавить(МассивСтрок[1]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоотвествиеПараметровПечатныхФорм;
	
КонецФункции

&НаСервере
Процедура ДобавитьВложениеПечатнуюФорму(ОбъектПечати, ИмяПечатнойФормы) 
	
	Перем КоллекцияПечатныхФорм;
	
	СтруктураПечати    = СтруктураПечати(Метаданные.НайтиПоТипу(ТипЗнч(ОбъектПечати)).ПолноеИмя(), ИмяПечатнойФормы);
	Если СтруктураПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяМенеджераПечати = СтруктураПечати.МенеджерПечати;
	ПараметрыПечати    = СтруктураПечати.ПараметрыПечати;
	МассивОбъектов     = Новый Массив;
	МассивОбъектов.Добавить(ОбъектПечати);
	ИменаМакетов       = СтруктураПечати.ИмяПечатнойФормы;
	
	КоллекцияПечатныхФорм = УправлениеПечатью.СформироватьПечатныеФормы(
	                                            ИмяМенеджераПечати,
	                                            ИменаМакетов, 
	                                            МассивОбъектов,
	                                            ПараметрыПечати);
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм.КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма = Неопределено Или ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
			Продолжить;
		КонецЕсли;
		Результат = ПоместитьТабличныйДокументВоВременноеХранилище(ПечатнаяФорма);
		Для Каждого СохраненнаяПечатнаяФорма ИЗ Результат Цикл
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.Расположение = 4;
			НоваяСтрока.ИмяФайлаНаКомпьютере = СохраненнаяПечатнаяФорма.АдресВоВременномХранилище;
			НоваяСтрока.ИмяФайла = СохраненнаяПечатнаяФорма.ИмяФайла;
			НоваяСтрока.РазмерПредставление = ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(СохраненнаяПечатнаяФорма.Размер);
			
			Расширение = ВзаимодействияКлиентСервер.ПолучитьРасширениеФайла(СохраненнаяПечатнаяФорма.ИмяФайла);
			НоваяСтрока.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураПечати(ПолноеИмяОбъектаМетаданных, ИмяПечатнойФормы)
	
	МассивОбъектовСПечатнымиФормами = ШаблоныСообщенийСервер.МассивОбъектовСПечатнымиФормами();
	НомерЭлементаВМассиве = МассивОбъектовСПечатнымиФормами.Найти(ПолноеИмяОбъектаМетаданных);
	Если НомерЭлементаВМассиве = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПечатныхФорм = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МассивОбъектовСПечатнымиФормами[НомерЭлементаВМассиве]).ДоступныеДляШаблоновПечатныеФормы();
	Для Каждого ЭлементМассива Из МассивПечатныхФорм Цикл
		Если ЭлементМассива.Имя = ИмяПечатнойФормы ИЛИ ЭлементМассива.ИмяПечатнойФормыСУчетомПараметров = ИмяПечатнойФормы Тогда
			СтруктураПечати = Новый Структура;
			СтруктураПечати.Вставить("МенеджерПечати", ЭлементМассива.МенеджерПечати);
			СтруктураПечати.Вставить("ПараметрыПечати",ЭлементМассива.ПараметрыПечати);
			СтруктураПечати.Вставить("ИмяПечатнойФормы",ЭлементМассива.Имя);
			Возврат СтруктураПечати;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаСервере
Функция ПоместитьТабличныйДокументВоВременноеХранилище(ПечатнаяФорма)
	
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АдресВоВременномХранилище");
	Результат.Колонки.Добавить("ИмяФайла");
	Результат.Колонки.Добавить("Размер");
	
	Если Объект.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	Для Каждого ЭлементСписка Из ФорматыВложенийПисьма Цикл
			
			НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ЭлементСписка.Значение))[0];
			ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
			
			ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ПечатнаяФорма.СинонимМакета, НастройкиФормата.Расширение, ИспользованныеИменаФайлов);
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла;
			
			ТабличныйДокумент.Записать(ПолноеИмяФайла, ЭлементСписка.Значение);
			
			Если ЗаписьZipФайла <> Неопределено Тогда 
				ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
			Иначе
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
				НоваяСтрока.ИмяФайла = ИмяФайла;
				НоваяСтрока.Размер   = ДвоичныеДанные.Размер();
			КонецЕсли;
		
	КонецЦикла;
		
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
		НоваяСтрока.ИмяФайла = ИмяФайлаДляАрхива(ИмяФайла);
		НоваяСтрока.Размер   = ДвоичныеДанные.Размер();
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяФайлаДляАрхива(ИмяФайла)

	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайла,".");
	Если МассивСтрок.Количество() = 2 Тогда
		Возврат  МассивСтрок[0] +".zip";
	ИначеЕсли МассивСтрок.Количество() = 1 Тогда
		Возврат ИмяФайла + ".zip";
	Иначе
		Возврат ИмяФайла;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов)
	
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
		
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
							ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
							1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// если имя уже было ранее использовано, прибавляем счетчик в конце имени
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонИмениФайла,
				ИмяМакета,
				" (" + НомерИспользования + ")",
				Расширение));
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

&НаСервере
Процедура ОпределитьПредметСообщения()
	
	МассивВозможныхПредметов = Новый Массив;
	МассивПрочихСсылочныхПараметров = Новый Массив;
	
	Для каждого ПараметрШаблона Из ПараметрыШаблона Цикл
		
		ЗначениеПараметра = ЭтаФорма[ПараметрШаблона.ИмяПараметра];
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Если ВзаимодействияКлиентСервер.ЯвляетсяПредметом(ЗначениеПараметра) Тогда
				
				Если ЗначениеПараметра = Объект.Предмет Тогда
					Возврат;
				Иначе
					Если ЗначениеЗаполнено(Объект.Предмет) Тогда
						МассивВозможныхПредметов.Добавить(ЗначениеПараметра);
					Иначе
						Объект.Предмет = ЗначениеПараметра;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеПараметра)) 
				И (ОбщегоНазначения.ВидОбъектаПоСсылке(ЗначениеПараметра) = "Документ" 
				   ИЛИ ОбщегоНазначения.ВидОбъектаПоСсылке(ЗначениеПараметра) = "Справочник") Тогда
				
				МассивПрочихСсылочныхПараметров.Добавить(ПараметрШаблона.ИмяПараметра);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВозможныхПредметов.Количество()> 0 Тогда
		
		Объект.Предмет = МассивВозможныхПредметов[0];
		
	Иначе
		
		МассивТиповПредметов = ВзаимодействияКлиентСерверПовтИспПереопределяемый.ПолучитьМассивТиповПредметов();
		Для каждого ИмяПараметра Из МассивПрочихСсылочныхПараметров Цикл
			
			ПараметрОбъект = ЭтаФорма[ИмяПараметра];
			МетаданныеОбъекта = ПараметрОбъект.Метаданные();
			
			Для Каждого Реквизит ИЗ МетаданныеОбъекта.Реквизиты Цикл
				
				Для каждого ВозможныйТипПредмета Из МассивТиповПредметов Цикл
				
					Если Реквизит.Тип.СодержитТип(Тип(ВозможныйТипПредмета)) Тогда
						МетаданныеРеквизита = Метаданные.НайтиПоТипу(Тип(ВозможныйТипПредмета));
						Если ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
							ЗначениеРеквизита = ПараметрОбъект[Реквизит.Имя];
							Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
								Объект.Предмет = ЗначениеРеквизита;
								Возврат;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
						
				КонецЦикла;

			КонецЦикла;
		
		КонецЦикла;
		
		Объект.Предмет = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Команда)

	Отказ = УсловияПереходаПоСтраницамНеВыполнены(Команда);
	
	Если Не Отказ Тогда
		ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Команда)
	КонецЕсли;
	
	УправлениеСтраницамиПодвал();

КонецПроцедуры

&НаКлиенте
Функция УсловияПереходаПоСтраницамНеВыполнены(Команда)

	ОчиститьСообщения();
	
	Если Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаВыборШаблона Тогда
		ШаблоныТекущиеДанные = Элементы.ДоступныеШаблоны.ТекущиеДанные;
		Если ШаблоныТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран шаблон сообщения';uk='Не вибраний шаблон повідомлення'"),, "ДоступныеШаблоны");
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаАдресаты И СпособОтправки = 1 Тогда
		
		Возврат СообщениеПодготовленоНеПравильно();
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура УправлениеСтраницамиПодвал()

	Если Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаВыборШаблона Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаПараметры Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
		Элементы.ДалееКнопкиНазадДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТекстСообщения Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
		Элементы.ДалееКнопкиНазадДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаАдресаты Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиСоздать;
		Элементы.ДалееКнопкиСоздатьНазад.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Команда)

	Если Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаВыборШаблона Тогда
		Если Команда.Имя = "Далее" Тогда
			ШаблоныТекущиеДанные = Элементы.ДоступныеШаблоны.ТекущиеДанные;
			Если ШаблоныТекущиеДанные <> Неопределено Тогда
				Если ШаблоныТекущиеДанные.Ссылка <> Объект.ШаблонСообщения Тогда
					Объект.ШаблонСообщения = ШаблоныТекущиеДанные.Ссылка;
					ПриИзмененииШаблонаСообщенияСервер();
				Иначе
					Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаПараметры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаПараметры Тогда
		Если Команда.Имя = "Далее" Тогда
			Если ТребуетсяФормированиеТекстов Тогда
				СформироватьТекстСообщения();
			КонецЕсли;
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТекстСообщения;
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаВыборШаблона;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТекстСообщения Тогда
		Если Команда.Имя = "Далее" Тогда
			Если Не АдресатыЗаполнялись Тогда
				ЗаполнитьТаблицуВозможныхАдресатов();
			КонецЕсли;
			Если Объект.ПредназначенДляЭлектронныхПисем Тогда
				Элементы.СтраницыАдресатыПисьмаSMS.ТекущаяСтраница = Элементы.СтраницаАдресатыПисьма;
			Иначе
				Элементы.СтраницыАдресатыПисьмаSMS.ТекущаяСтраница = Элементы.СтраницаАдресатыSMS;
			КонецЕсли;
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаАдресаты;
		ИначеЕсли  Команда.Имя = "Назад" Тогда
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаПараметры;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаАдресаты Тогда
		Если Команда.Имя = "Далее" Тогда
			Если Элементы.СтраницыАдресатыПисьмаSMS.ТекущаяСтраница = Элементы.СтраницаАдресатыПисьма Тогда
				Если СпособОтправки = 1 Тогда
					ОтправитьПисьмо();
				Иначе
					ОткрытьФормуОтправкиПочтовогоСообщения();
				КонецЕсли;
			Иначе
				Если СпособОтправки = 1 Тогда
					ОтправитьSMS();
				Иначе
					ОткрытьФормуОтправкиSMS();
				КонецЕсли;
			КонецЕсли;
			Закрыть();
		ИначеЕсли  Команда.Имя = "Назад" Тогда
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТекстСообщения
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтправкиПочтовогоСообщения()

	Получатели = Новый Массив;
	Для каждого Адресат Из Объект.АдресатыПочта Цикл
		
		Если Не Адресат.ПолучательВыбран Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолучатель = Новый Структура;
		СтруктураПолучатель.Вставить("Адрес", Адресат.Адрес);
		СтруктураПолучатель.Вставить("Представление", Адресат.Представление);
		СтруктураПолучатель.Вставить("ИсточникКонтактнойИнформации", Адресат.Контакт);
		СтруктураПолучатель.Вставить("Группа", Адресат.Группа);
		Получатели.Добавить(СтруктураПолучатель);
	
	КонецЦикла;
	
	Если Объект.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
		ТекстПисьма = Новый Структура;
		ТекстПисьма.Вставить("СтруктураВложений", СтруктураВложенийИзТаблицыКартинок(ЭтаФорма));
		ТекстПисьма.Вставить("ТекстHTML",Объект.ТекстСообщенияПисьмаHTML);
	Иначе
		ТекстПисьма = Объект.ТекстСообщенияПисьма;
	КонецЕсли;
	
	СписокВложений = Новый СписокЗначений;
	Для Каждого Вложение Из Вложения Цикл
		СписокВложений.Добавить(Вложение.ИмяФайлаНаКомпьютере, Вложение.ИмяФайла);
	КонецЦикла;
	
	ВзаимодействияКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(Объект.УчетнаяЗапись, 
	                                                            Получатели,
	                                                            Объект.ТемаПисьма,
	                                                            ТекстПисьма ,
	                                                            СписокВложений, 
	                                                            Объект.Предмет);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтправкиSMS()
	
	Получатели = Новый Массив;
	Для каждого Адресат Из Объект.АдресатыSMS Цикл
		
		Если Не Адресат.ПолучательВыбран Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолучатель = Новый Структура;
		СтруктураПолучатель.Вставить("Телефон", Адресат.Телефон);
		СтруктураПолучатель.Вставить("Представление", Адресат.Представление);
		СтруктураПолучатель.Вставить("ИсточникКонтактнойИнформации", Адресат.Контакт);
		Получатели.Добавить(СтруктураПолучатель);
	
	КонецЦикла;
	
	ВзаимодействияКлиент.ОткрытьФормуОтправкиSMS(Получатели, Объект.ТекстСообщенияSMS ,
	                                             Объект.Предмет, Объект.ОтправлятьВТранслите);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	Если НЕ Форма.Объект.ПредназначенДляSMS И НЕ Форма.Объект.ПредназначенДляЭлектронныхПисем Тогда
		Форма.Объект.ПредназначенДляЭлектронныхПисем = Истина;
	КонецЕсли;
	
	Если Форма.Объект.ПредназначенДляЭлектронныхПисем  Тогда
		
		Форма.Элементы.СтраницыТекстыСообщения.ТекущаяСтраница   = Форма.Элементы.СтраницаТекстПисьма;
		Форма.Элементы.СтраницыАдресатыПисьмаSMS.ТекущаяСтраница = Форма.Элементы.СтраницаАдресатыПисьма;
		
		Если Форма.Объект.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
			Форма.Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Форма.Элементы.СтраницаТекстПисьмаHTML;
		Иначе
			Форма.Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Форма.Элементы.СтраницаТекстПисьмаОбычныйТекст;
		КонецЕсли;
		
	ИначеЕсли Форма.Объект.ПредназначенДляSMS Тогда
		
		Форма.Элементы.СтраницыТекстыСообщения.ТекущаяСтраница = Форма.Элементы.СтраницаТекстСообщенияSMS;
		Форма.Элементы.СтраницыАдресатыПисьмаSMS.ТекущаяСтраница = Форма.Элементы.СтраницаАдресатыSMS;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры()
	
	ПолноеИмяТипаПараметраВводаНаОсновании = "";
	
	Если ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ШаблоныСообщений") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		Объект.ШаблонСообщения = Параметры.Основание;
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Основание, 
		                                                        "ПредназначенДляЭлектронныхПисем, ПредназначенДляSMS");
		Если НЕ Реквизиты.ПредназначенДляЭлектронныхПисем  И Параметры.ПредназначенДляЭлектронныхПисем Тогда
			ВызватьИсключение НСтр("ru='Данный шаблон не предназначен для создания электронных писем.';uk='Даний шаблон не призначений для створення електронних листів.'");
		КонецЕсли;
		Если НЕ Реквизиты.ПредназначенДляSMS И НЕ Параметры.ПредназначенДляЭлектронныхПисем Тогда
			ВызватьИсключение НСтр("ru='Данный шаблон не предназначен для создания сообщений SMS.';uk='Даний шаблон не призначений для створення повідомлень SMS.'");
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ПредназначенДляЭлектронныхПисем Тогда
		
		Объект.ПредназначенДляЭлектронныхПисем = Истина;
		ЗаполнитьДоступныеУчетныеЗаписи();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДоступныеШаблоны, "ПредназначенДляЭлектронныхПисем",
		                                                     Истина, ВидСравненияКомпоновкиДанных.Равно);
		
	Иначе
		
		Объект.ПредназначенДляSMS = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДоступныеШаблоны, "ПредназначенДляSMS",
		                                                     Истина, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Основание) И НЕ ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ШаблоныСообщений") Тогда
		
		Основание = Параметры.Основание;
		
		ПолноеИмяТипаПараметраВводаНаОсновании = Метаданные.НайтиПоТипу(ТипЗнч(Параметры.Основание)).ПолноеИмя();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДоступныеШаблоны,
		                                                     "ПолноеИмяТипаПараметраВводаНаОсновании",
		                                                     ПолноеИмяТипаПараметраВводаНаОсновании, 
		                                                     ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	Если Объект.ШаблонСообщения.Пустая() Тогда
		Объект.ШаблонСообщения = ШаблоныСообщенийСервер.ШаблонСообщенияПоУмолчанию(Объект.ПредназначенДляЭлектронныхПисем,
		                                                                           ПолноеИмяТипаПараметраВводаНаОсновании);
	КонецЕсли;
	
	Если НЕ Объект.ШаблонСообщения.Пустая() Тогда
		
		ПриИзмененииШаблонаСообщенияСервер();
		
	КонецЕсли;
	
	СформироватьЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииШаблонаСообщенияСервер()
	
	ДобавитьРеквизитыФормыСогласноПараметрам();
	ТребуетсяФормированиеТекстов = Истина;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Для Каждого ПараметрШаблона Из ПараметрыШаблона Цикл
			Если ПараметрШаблона.ОписаниеТипа.СодержитТип(ТипЗнч(Основание)) Тогда
				ЭтаФорма[ПараметрШаблона.ИмяПараметра] = Основание;
			КонецЕсли;
		КонецЦикла;
		
		Если ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Основание) Тогда
			Объект.Предмет = Основание;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВсеПараметрыЗаполнены() Тогда
		
		СформироватьТекстСообщения();
		Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТекстСообщения;
		
	Иначе 
		
		Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаПараметры;
		
	КонецЕсли;
	
	Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
	Элементы.ДалееКнопкиНазадДалее.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеУчетныеЗаписи()
	
	УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(
	Элементы.ОтправительПредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);
	Если Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда
		Объект.ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора.Получить(0);
		Объект.УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВсеПараметрыЗаполнены()
	
	Для каждого ПараметрШаблона Из ПараметрыШаблона Цикл
	
		Если Не ЗначениеЗаполнено(ЭтаФорма[ПараметрШаблона.ИмяПараметра]) Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЗапросовПакета()

	СоответстиеПараметровТекстаСообщения = ШаблоныСообщенийСервер.ПараметрыТекстаСообщения(Объект.ПредназначенДляЭлектронныхПисем,
	                                                                                       Объект.ПредназначенДляSMS,
	                                                                                       Объект.ТипТекстаПисьма,
	                                                                                       Объект.ИсходныйТекстТемыПисьма,
	                                                                                       Объект.ИсходныйТекстСообщенияПисьмаНТМL,
	                                                                                       Объект.ИсходныйТекстСообщенияПисьма,
	                                                                                       Объект.ИсходныйТекстСообщенияSMS);
	
	Если СоответстиеПараметровТекстаСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементСоответствия Из СоответстиеПараметровТекстаСообщения Цикл
		
		Если ЭлементСоответствия.Ключ <> "Произвольные" Тогда
			
			Если ЭлементСоответствия.Значение.Количество() = 1 И ЭлементСоответствия.Значение[0] = "ВнешняяСсылкаНаОбъект" Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныеСтроки = ПараметрыШаблона.НайтиСтроки(Новый Структура("ИмяПараметра", ЭлементСоответствия.Ключ));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(НайденныеСтроки[0].ОписаниеТипа.Типы()[0]);
			Если МетаданныеОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
		
			Если МетаданныеОбъекта.Макеты.Найти("ДанныеШаблонаСообщений") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПодстрок =  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных,".");
			Если МассивПодстрок.Количество() <> 2 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаТаблицыЗапросовШаблона = ЗапросыШаблона.Добавить();
			НоваяСтрокаТаблицыЗапросовШаблона.ИмяНабораДанных = ЭлементСоответствия.Ключ;
			
			ИмяМакета = "ДанныеШаблонаСообщений";
			
			Если МассивПодстрок[0] = "Справочник" Тогда
				Если ИспользоватьПартнеровКакКонтрагентов И МассивПодстрок[1] = "Партнеры" Тогда
					ИмяМакета = "ДанныеШаблонаСообщенийИспользоватьПартнеровКакКонтрагентов";
				КонецЕсли;
				МакетСКД = Справочники[МассивПодстрок[1]].ПолучитьМакет(ИмяМакета);
			ИначеЕсли МассивПодстрок[0] = "Документ" Тогда
				МакетСКД = Документы[МассивПодстрок[1]].ПолучитьМакет(ИмяМакета);
			КонецЕсли;
		
			АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД,УникальныйИдентификатор);
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
			Для Каждого ДоступныйПараметр ИЗ КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
				Если НЕ ДоступныйПараметр.Заголовок = "Период" Тогда
					НоваяСтрокаТаблицыЗапросовШаблона.СписокТребуемыхПараметров.Добавить(Строка(ДоступныйПараметр.Параметр));
				КонецЕсли;
			КонецЦикла;
			
			КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
			
			Для Каждого ВыбранноеПоле Из ЭлементСоответствия.Значение Цикл 
				ОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ВыбранноеПоле);
			КонецЦикла;
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(МакетСКД, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			НоваяСтрокаТаблицыЗапросовШаблона.ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.Данные.Запрос;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВозможныхАдресатов()
	
	СтандартнаяОбработка = Истина;
	ПараметрыОтправки =  ШаблоныСообщенийКлиентСервер.ИнициализироватьСтруктуруПолучатели();
	
	МассивПараметровДанныхДляОпределенияПолучателей = Новый Массив;
	Объект.АдресатыПочта.Очистить();
	Объект.АдресатыSMS.Очистить();
	
	Если Объект.ШаблонПоВнешнейОбработке Тогда
		
		ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(Объект.ВнешняяОбработка);
		УстановитьБезопасныйРежим(Истина);
		
		ПараметрыОтправки.Получатель = ВнешнийОбъект.СтруктураДанныхПолучатели(СформироватьСтруктураПараметровШаблона(), СтандартнаяОбработка);
		
		УстановитьБезопасныйРежим(Ложь);
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		Для каждого ПараметрШаблона Из ПараметрыШаблона Цикл
			
			ЗначениеПараметра = ЭтаФорма[ПараметрШаблона.ИмяПараметра];
			Если ЗначениеЗаполнено(ЗначениеПараметра) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеПараметра))
				И (ОбщегоНазначения.ВидОбъектаПоСсылке(ЗначениеПараметра) = "Справочник" ИЛИ ОбщегоНазначения.ВидОбъектаПоСсылке(ЗначениеПараметра) = "Документ") Тогда
				
				МассивПараметровДанныхДляОпределенияПолучателей.Добавить(ЗначениеПараметра);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СоответствиеТиповДанныхПараметров = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивПараметровДанныхДляОпределенияПолучателей);
		
		МассивДокументовРодителей = Новый Массив;
		ДополненноеСоответствие = Новый Соответствие;
		Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхПараметров Цикл
			
			СтруктураДанныхПараметра = Новый Структура("ОсновнойПолучатель, МассивРеквизитовПолучателей, МассивДанных",
			"",Новый Массив, ЭлементСоответствия.Значение);
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементСоответствия.Ключ,".");
			
			ФормированиеПечатныхФорм.ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ЭлементСоответствия.Ключ , СтруктураДанныхПараметра);
			
			ДополненноеСоответствие.Вставить(ЭлементСоответствия.Ключ, СтруктураДанныхПараметра);
			
			Для Каждого Параметр Из ЭлементСоответствия.Значение Цикл
				ФормированиеПечатныхФорм.ПолучитьРодительскиеДокументы(МассивДокументовРодителей,Параметр);
			КонецЦикла;
			
		КонецЦикла;
		
		ФормированиеПечатныхФорм.СформироватьПараметрыОтправки(ДополненноеСоответствие, ПараметрыОтправки, МассивДокументовРодителей,Объект.ПредназначенДляSMS);
		
	КонецЕсли;
	
	Если Объект.ПредназначенДляЭлектронныхПисем Тогда
		
		Для каждого Получатель Из ПараметрыОтправки.Получатель Цикл
			
			НоваяСтрока = Объект.АдресатыПочта.Добавить();
			НоваяСтрока.АдресатПредставление = ?(ПустаяСтрока(Получатель.Представление), Получатель.Адрес, Получатель.Представление + " <" + Получатель.Адрес + ">");
			НоваяСтрока.Пояснение            = Получатель.Пояснение;
			НоваяСтрока.Группа               = "Кому";
			НоваяСтрока.Контакт              = Получатель.ИсточникКонтактнойИнформации;
			НоваяСтрока.Адрес                = Получатель.Адрес;
			НоваяСтрока.Представление        = Получатель.Представление;
			Если ЗначениеЗаполнено(Основание) 
			   И Основание = Получатель.ОбъектИсточник
			   И ТипЗнч(Получатель.ИсточникКонтактнойИнформации) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
				НоваяСтрока.ПолучательВыбран = Истина;
			
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Получатель Из ПараметрыОтправки.Получатель Цикл
			
			НоваяСтрока = Объект.АдресатыSMS.Добавить();
			НоваяСтрока.Представление = Получатель.Представление;
			НоваяСтрока.Телефон       = Получатель.Адрес;
			НоваяСтрока.Пояснение     = Получатель.Пояснение;
			НоваяСтрока.Контакт       = Получатель.ИсточникКонтактнойИнформации;
			
			Если ЗначениеЗаполнено(Основание) 
			   И Основание = Получатель.ОбъектИсточник
			   И ТипЗнч(Получатель.ИсточникКонтактнойИнформации) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			
				НоваяСтрока.ПолучательВыбран = Истина;
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	АдресатыЗаполнялись = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажки(ИмяКоманды)

	ИмяТабличнойЧасти = ?(Элементы.СтраницыАдресатыПисьмаSMS.ТекущаяСтраница = Элементы.СтраницаАдресатыПисьма, "АдресатыПочта" , "АдресатыSMS");
	Для каждого Адресат Из Объект[ИмяТабличнойЧасти] Цикл
		Если ИмяКоманды = "УстановитьФлажки" Тогда
			Адресат.ПолучательВыбран = Истина;
		Иначе
			Адресат.ПолучательВыбран = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураВложенийИзТаблицыКартинок(Форма)

	СтруктураВложений = Новый Структура;
	Для каждого СтрокаТаблицы Из Форма.ТаблицаКартинокШаблонаПисьма Цикл
	
		СтруктураВложений.Вставить(СтрокаТаблицы.Идентификатор, СтрокаТаблицы.Картинка);
	
	КонецЦикла;
	
	Возврат СтруктураВложений;

КонецФункции 

&НаСервере
Функция СформироватьСтруктураПараметровШаблона()

	СтруктураПараметровШаблона = Новый Структура;
	
	Для Каждого ДобавленныйРеквизит Из ДобавленныеДинамическиРеквизиты Цикл
		СтруктураПараметровШаблона.Вставить(ДобавленныйРеквизит.Значение, ЭтаФорма[ДобавленныйРеквизит.Значение]);
	КонецЦикла;
	
	Возврат СтруктураПараметровШаблона;

КонецФункции

&НаКлиенте
Функция СообщениеПодготовленоНеПравильно()

	Если Объект.ПредназначенДляSMS Тогда
		Возврат СообщениеSMSЗаполненоСОшибками();
	Иначе
		Возврат ЭлектронноеПисьмоЗаполненоСОшибками();
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция СообщениеSMSЗаполненоСОшибками()
	
	Отказ = Ложь;
	
	Если ПустаяСтрока(Объект.ТекстСообщенияSMS) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Пустой текст сообщения SMS';uk='Пустий текст повідомлення SMS'"),,"Объект.ТекстСообщенияSMS");
		Отказ = Истина;
	КонецЕсли;
	
	Адресаты = Объект.АдресатыSMS.НайтиСтроки(Новый Структура("ПолучательВыбран",Истина));
	
	Если Адресаты.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан ни один получатель SMS';uk='Не вказаний жоден одержувач SMS'"),,"Объект.АдресатыSMS");
		Отказ = Истина;
		
	Иначе
		
		Для каждого АдресатSMS Из Адресаты Цикл
			
			ПроверитьЗаполнениеТелефона(АдресатSMS, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция ЭлектронноеПисьмоЗаполненоСОшибками()
	
	Отказ = Ложь;
	
	Если Объект.УчетнаяЗапись.Пустая() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана учетная запись для отправки';uk='Не зазначений обліковий запис для відправки'"),,
		                                                  "Объект.УчетнаяЗапись");
		Отказ = Истина;
		
	КонецЕсли;
	
	Получатели = Объект.АдресатыПочта.НайтиСтроки(Новый Структура("ПолучательВыбран",Истина));
	Если Получатели.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан ни один получатель письма';uk='Не зазначений жоден одержувач листа'"),,
		                                                       "Объект.АдресатыПочта", , Отказ);
		Отказ = Истина;
		
	Иначе
		
		Для каждого Получатель Из Получатели Цикл
			Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Получатель.Адрес) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				                    НСтр("ru='Указан некорректный адрес электронной почты %1';uk='Зазначено некоректну адресу електронної пошти, %1'"),
				                    Получатель.Адрес);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
				    ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.АдресатыПочта", Получатель.НомерСтроки, "АдресатПредставление"),,
				    Отказ);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеТелефона(Адресат, Отказ)

	Если ПустаяСтрока(Адресат.Телефон) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не указан номер телефона';uk='Не вказаний номер телефону'"),
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.АдресатыSMS", Адресат.НомерСтроки, "Телефон"),
			,
			Отказ);
			Возврат;
	КонецЕсли;
		
	СтруктураПолей = ВзаимодействияКлиентСервер.СтруктураПолейПоПредставлениюТелефона(Адресат.Телефон);
	Если Не ВзаимодействияКлиентСервер.КорректноВведенНомерТелефона(СтруктураПолей) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Номер телефона должен быть указан в формате ""+xx (xxx) xxxxxxx""';uk='Номер телефону повинен бути вказаний у форматі ""+xx (xxx) xxxxxxx""'"),
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.АдресатыSMS", Адресат.НомерСтроки, "Телефон"),
			,
			Отказ);
			Возврат;
	Иначе
		Адресат.НомерДляОтправки = ?(ЛЕВ(СтруктураПолей.КодСтраны,1)= "+", СтруктураПолей.КодСтраны,"+" + СтруктураПолей.КодСтраны) +
		                             СтруктураПолей.КодГорода + СтруктураПолей.НомерТелефона;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмо()

	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Попытка
		НачатьТранзакцию();
		Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		
		Письмо.Автор                    = Пользователи.ТекущийПользователь();
		Письмо.Ответственный            = Пользователи.ТекущийПользователь();
		Письмо.Дата                     = ТекущаяДатаСеанса();
		Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Письмо.Кодировка                = КодировкаТекста.UTF8;
		Письмо.ОтправительПредставление = Объект.ОтправительПредставление;
		
		Если Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
			
			Письмо.Текст = Объект.ТекстСообщенияПисьма;
			
		Иначе
			
			ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
			
			СтруктураВложений = Новый Структура;
			ТекстСообщенияПисьмоФорматированныйДокумент.ПолучитьHTML(Письмо.ТекстHTML, СтруктураВложений);
			Для каждого Вложение Из СтруктураВложений Цикл
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла                  = Вложение.Ключ;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка                  = Вложение.Значение;
				
			КонецЦикла;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
				
				ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Письмо.ТекстHTML);
				Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
				ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
				
				Письмо.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
				Письмо.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Письмо.ТекстHTML);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Письмо.Тема = Объект.ТемаПисьма;
		Письмо.ТипТекста = ?(Объект.ТипТекстаПисьма  = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML,
		Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками,
		Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
		Письмо.УчетнаяЗапись = Объект.УчетнаяЗапись;
		Письмо.ВзаимодействиеОснование = Неопределено;
		
		//Заполним реквизиты ВключатьТелоИсходногоПисьма, ОтображатьТелоИсходногоПисьма, УведомитьОДоставке и УведомитьОПрочтении
		НастройкиПользователя = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
		                           Объект.УчетнаяЗапись,
		                           Объект.ТипТекстаПисьма,
		                           Истина);
		ЗаполнитьЗначенияСвойств(Письмо, НастройкиПользователя);
		
		НайденныеСтроки = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Письмо.УдалятьПослеОтправки = Ложь;
		Иначе
			Письмо.УдалятьПослеОтправки = НайденныеСтроки[0].УдалятьПослеОтправки;
		КонецЕсли;
		
		Письмо.Комментарий = КомментарийПоНаименованиюШаблона();
		
		Для Каждого ПолучательПисьма Из Объект.АдресатыПочта Цикл
			
			Если Не ПолучательПисьма.ПолучательВыбран Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПолучательПисьма.Группа = "Кому" Тогда
				ИмяТаблицы = "ПолучателиПисьма";
			ИначеЕсли ПолучательПисьма.Группа = "Скрытые" Тогда
				ИмяТаблицы = "ПолучателиСкрытыхКопий";
			ИначеЕсли ПолучательПисьма.Группа = "Копии" Тогда
				ИмяТаблицы = "ПолучателиКопий";
			ИначеЕсли ПолучательПисьма.Группа = "Получатели" Тогда
				ИмяТаблицы = "ПолучателиОтвета";
			Иначе
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Письмо[ИмяТаблицы].Добавить();
			НоваяСтрока.Адрес         = ПолучательПисьма.Адрес;
			НоваяСтрока.Представление = ПолучательПисьма.Представление;
			НоваяСтрока.Контакт       = ПолучательПисьма.Контакт;
			
		КонецЦикла;
		
		Письмо.СписокПолучателейПисьма        = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(
		                                                                      Письмо.ПолучателиПисьма, Ложь);
		Письмо.СписокПолучателейКопий         = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(
		                                                                      Письмо.ПолучателиКопий, Ложь);
		Письмо.СписокПолучателейСкрытыхКопий  = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(
		                                                                      Письмо.ПолучателиСкрытыхКопий, Ложь);
		Если ИнформационнаяБазаФайловая Тогда
			Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
		Иначе
			Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		КонецЕсли;
		
		Если Вложения.Количество() > 0 ИЛИ ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			Письмо.ЕстьВложения = Истина;
		КонецЕсли;
		
		Письмо.Размер = ОценитьРазмерПисьма(Письмо);
		
		Письмо.Записать();
		
		//Добавим вложения
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			
			Размер = 0;
			ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо.Ссылка, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
			
		КонецЦикла;
		
		Если Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			
			Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
				
				ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
				АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
				ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо.Ссылка,
				АдресКартинкиВоВременномХранилище,
				"_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"),
				ДвоичныеДанныеКартинки.Размер());
				
				Если ПрисоединенныйФайл <> Неопределено Тогда
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
					ПрисоединенныйФайлОбъект.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Предмет = ?(ЗначениеЗаполнено(Объект.Предмет), Объект.Предмет, Письмо.Ссылка);
		Реквизиты = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(,Предмет,Истина,);
		ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, Реквизиты);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при создании письма %1';uk='Помилка при створенні листа %1'"),КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Попытка
		ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(Письмо);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при отправке письма %1';uk='Помилка при відправці листа %1'"),КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если НЕ Письмо.УдалятьПослеОтправки Тогда
		
		Попытка
			Письмо.ИдентификаторСообщения = ИдентификаторПисьма;
			Письмо.СтатусПисьма          = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
			Письмо.ДатаОтправления       = ТекущаяДатаСеанса();
			Письмо.Записать(РежимЗаписиДокумента.Запись);
			
			ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
			Письмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(Письмо.Ссылка));
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                    НСтр("ru='Ошибка при записи письма после успешной отправки %1';uk='Помилка при запису листа після успішної відправки %1'"),
			                    КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		
		Письмо.Прочитать();
		Письмо.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьSMS()

	СообщениеSMS = Документы.СообщениеSMS.СоздатьДокумент();
	
	СообщениеSMS.Дата                    = ТекущаяДатаСеанса();
	СообщениеSMS.Автор                   = Пользователи.ТекущийПользователь();

	СообщениеSMS.Ответственный           = Пользователи.ТекущийПользователь();
	СообщениеSMS.Важность                = Перечисления.ВариантыВажностиВзаимодействия.Обычная;

	СообщениеSMS.ВзаимодействиеОснование = Неопределено;
	СообщениеSMS.ТекстСообщения          = Объект.ТекстСообщенияSMS;
	СообщениеSMS.Тема                    = ВзаимодействияКлиентСервер.ТемаПоТекстуСообщения(Объект.ТекстСообщенияSMS);
	СообщениеSMS.ОтправлятьВТранслите    = Объект.ОтправлятьВТранслите;
	СообщениеSMS.Комментарий             = КомментарийПоНаименованиюШаблона();
	
	Для каждого АдресатSMS Из Объект.АдресатыSMS Цикл
		
		Если Не АдресатSMS.ПолучательВыбран Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СообщениеSMS.Адресаты.Добавить();
		НоваяСтрока.Контакт                = АдресатSMS.Контакт;
		НоваяСтрока.ПредставлениеКонтакта  = АдресатSMS.Представление;
		НоваяСтрока.КакСвязаться           = АдресатSMS.Телефон;
		НоваяСтрока.НомерДляОтправки       = АдресатSMS.НомерДляОтправки;
		НоваяСтрока.ИдентификаторСообщения = "";
		НоваяСтрока.ТекстОшибки            = "";
		НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Черновик;
	
	КонецЦикла;

	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Взаимодействия.ОтправкаSMSПоДокументу(СообщениеSMS);
	Иначе
		ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(СообщениеSMS);
	КонецЕсли;
	
	СообщениеSMS.Записать();
	
	Предмет = ?(ЗначениеЗаполнено(Объект.Предмет), Объект.Предмет, СообщениеSMS.Ссылка);
	Реквизиты = ВзаимодействияКлиентСервер.СтруктураРеквизитовВзаимодействияДляЗаписи(,Предмет,Истина);
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(СообщениеSMS.Ссылка, Реквизиты);
	
КонецПроцедуры

&НаСервере
Функция КомментарийПоНаименованиюШаблона()

	Возврат НСтр("ru='Создано и отправлено по шаблону';uk='Створено і відправлено за шаблоном'") + " - " + Объект.НаименованиеШаблона;

КонецФункции

&НаСервере
Функция ОценитьРазмерПисьма(Письмо)

	Размер = СтрДлина(Письмо.Тема)*2;
	Размер = Размер + 
		?(Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
		СтрДлина(Письмо.ТекстHTML),
		СтрДлина(Письмо.Текст))*2;
	
	Для каждого Вложение Из Вложения Цикл
		Размер = Размер + Вложение.Размер * 1.5;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыСоответствий Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		Размер = Размер + СтрокаТаблицыСоответствий.Картинка.ПолучитьДвоичныеДанные().Размер()*1.5;
	КонецЦикла;
	
	Возврат Размер;

КонецФункции


#КонецОбласти

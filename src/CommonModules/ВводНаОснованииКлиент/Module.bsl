
#Область ПрограммныйИнтерфейс

// Выводить на экран открытую форму объекта введенного на основании.
// 
// Параметры:
//  ИмяМенеджераПечати - Строка - менеджер создать на основании;
//  МассивОбъектов     - Ссылка, Массив - объекты создать на основании;
//  ВладелецФормы      - УправляемаяФорма - форма, из которой выполняется создание на основании;
//  ПараметрыСоздатьНаОсновании    - Структура - произвольные параметры для передачи в менеджер создать на основании.
//
Процедура ВыполнитьКомандуСоздатьНаОсновании(ИменаОбъекта, МассивОбъектов, ВладелецФормы, ПараметрыСоздатьНаОсновании = Неопределено) Экспорт
	
	// Проверим количество объектов.
	Если НЕ ПроверитьКоличествоПереданныхОбъектов(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	// Получим ключ уникальности открываемой формы.
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИменаОбъекта,ПараметрКоманды,ПараметрыСоздатьНаОсновании,Основание");
	ПараметрыОткрытия.ИменаОбъекта		 = ИменаОбъекта;
	ПараметрыОткрытия.ПараметрКоманды	 = МассивОбъектов;
	ПараметрыОткрытия.ПараметрыСоздатьНаОсновании	 = ПараметрыСоздатьНаОсновании;
	
	Если ПараметрыСоздатьНаОсновании.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрыОткрытия.Основание = ПараметрыОткрытия.ПараметрКоманды;
	Иначе
		ПараметрыОткрытия.Основание = ПараметрыОткрытия.ПараметрКоманды[0];
	КонецЕсли; 
	
	ОткрытьФорму(ИменаОбъекта + ".ФормаОбъекта", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);
	
КонецПроцедуры

// Обработчик динамически подключаемой команды создать на основании.
//
// Команда  - КомандаФормы - подключаемая команда формы, выполняющая обработчик Подключаемый_ВыполнитьКомандуСоздатьНаОсновании.
// Источник - ТаблицаФормы, ДанныеФормыСтруктура - источник объектов создания на основании (Форма.Объект, Форма.Элементы.Список).
//
//
Процедура ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Знач Команда, Знач Форма, Знач Источник) Экспорт
	
	ОписаниеКоманды = Команда;
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		ОписаниеКоманды = ОписаниеКомандыСоздатьНаОсновании(Команда.Имя, Форма.Команды.Найти("АдресКомандСоздатьНаОснованииВоВременномХранилище").Действие);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ТаблицаФормы") и ЗначениеЗаполнено(ОписаниеКоманды.ИмяСписка) Тогда
		Источник = Форма.Элементы[ОписаниеКоманды.ИмяСписка];
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Источник", Источник);
	
	Если Не ОписаниеКоманды.НеВыполнятьЗаписьВФорме И ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура")
		И (Источник.Ссылка.Пустая() Или Форма.Модифицированность) Тогда
		
		Если Источник.Ссылка.Пустая() Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные еще не записаны.
                    |Выполнение действия ""%1"" возможно только после записи данных.
                    |Данные будут записаны.'
                    |;uk='Дані ще не записані.
                    |Виконання дії ""%1"" можливе тільки після запису даних.
                    |Дані будуть записані.'"),
				ОписаниеКоманды.Представление);
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуСоздатьНаОснованииПодтверждениеЗаписи", ВводНаОснованииСлужебныйКлиент, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Возврат;
		КонецЕсли;
		ВводНаОснованииСлужебныйКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОснованииПодтверждениеЗаписи(КодВозвратаДиалога.ОК, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ВводНаОснованииСлужебныйКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОснованииПодтверждениеЗаписи(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

// Устанавливает свойство видимость для элемента формы
Процедура УстановитьВидимостьЭлементаФормыКлиент(Форма, ПолноеИмяЭлемента, Видимость) Экспорт
	
	Для каждого ТекЭлемент Из Форма.Элементы Цикл
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекЭлемент.Имя, "_");
		МассивПодстрок.Удалить(0);
		
		ИмяЭлемента = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивПодстрок, "_");
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_", ".");
		
		Если ИмяЭлемента = ПолноеИмяЭлемента Тогда
			ТекЭлемент.Видимость = Видимость;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеКомандыСоздатьНаОсновании(ИмяКоманды, АдресКомандСоздатьНаОснованииВоВременномХранилище)
	
	Возврат ВводНаОснованииКлиентПовтИсп.ОписаниеКомандыСоздатьНаОсновании(ИмяКоманды, АдресКомандСоздатьНаОснованииВоВременномХранилище);
	
КонецФункции

Функция ПроверитьКоличествоПереданныхОбъектов(ПараметрКоманды)
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") И ПараметрКоманды.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьПроведенностьДокументов(ОписаниеПроцедурыЗавершения, СписокДокументов, Форма = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеПроцедурыЗавершения", ОписаниеПроцедурыЗавершения);
	ДополнительныеПараметры.Вставить("СписокДокументов", СписокДокументов);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	НепроведенныеДокументы = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(СписокДокументов);
	ЕстьНепроведенныеДокументы = НепроведенныеДокументы.Количество() > 0;
	Если ЕстьНепроведенныеДокументы Тогда
		ДополнительныеПараметры.Вставить("НепроведенныеДокументы", НепроведенныеДокументы);
		ВводНаОснованииСлужебныйКлиент.ПроверитьПроведенностьДокументовДиалогПроведения(ДополнительныеПараметры);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеПроцедурыЗавершения, СписокДокументов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеСлужебныйВызовСервера: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	СоответствиеФО = Новый Соответствие;
	
	// Библиотека стандартных подсистем
	
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО);
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеПодписиЭД",       "ИспользоватьЭлектронныеПодписиЭД");
	СоответствиеФО.Вставить("ИспользоватьНесколькоОрганизацийЭД",     "ИспользоватьНесколькоОрганизацийЭД");
	
	ИмяФОПрикладногоРешения = СоответствиеФО.Получить(НаименованиеФО);
	Если ИмяФОПрикладногоРешения = Неопределено Тогда // не задано соответствие
		Результат = Ложь;
	Иначе
		Результат = ПолучитьФункциональнуюОпцию(ИмяФОПрикладногоРешения)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразует двоичные данные в строку на сервере.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
//
// Возвращаемое значение:
//  <Строка> - Строка в кодировке UTF8
//
Функция СтрокаИзДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные.Записать(ВремФайл);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ВремФайл, КодировкаТекста.UTF8);
		УдалитьФайлы(ВремФайл);
		Результат = ТекстовыйДокумент.ПолучитьТекст();
		Возврат Результат;
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
КонецФункции

// Возвращает имя прикладного справочника по имени библиотечного справочника.
//
// Параметры:
//  ИмяСправочника - Строка - название справочника из библиотеки.
//
// Возвращаемое значение:
//  Строка - строковое имя прикладного справочника.
//
Функция ИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ИмяСправочника);
	
КонецФункции

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	ЭлектронноеВзаимодействиеПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров)
	
КонецПроцедуры

// Возвращает массив документов, которые могут быть проведены
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив документов, которые можно проводить
//
Функция МассивПроводимыхДокументов(МассивДокументов) Экспорт
	
	МассивПроводныхДокументов = Новый Массив;
	МассивТиповНеПроводныхДокументов = Новый Массив;
	Для каждого Элемент Из МассивДокументов Цикл
		ИмяДокумента = Элемент.Метаданные().ПолноеИмя();
		Если Метаданные.Документы.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяДокумента)) Тогда
			
			Если Элемент.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
				Если МассивТиповНеПроводныхДокументов.Найти(ТипЗнч(Элемент)) = Неопределено Тогда
					МассивТиповНеПроводныхДокументов.Добавить(ТипЗнч(Элемент));
				КонецЕсли;
			КонецЕсли;
			
			МассивПроводныхДокументов.Добавить(Элемент)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТипНеПроводногоДокумента Из МассивТиповНеПроводныхДокументов Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивПроводныхДокументов, ТипНеПроводногоДокумента);
	КонецЦикла;
	
	Возврат МассивПроводныхДокументов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Права

// Только для внутреннего использования
Функция ЕстьПравоЧтенияЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронноеВзаимодействиеПереопределяемый.ЕстьПравоЧтенияЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД");
	КонецЕсли;	
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Только для внутреннего использования
Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронноеВзаимодействиеПереопределяемый.ЕстьПравоОбработкиЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
	КонецЕсли;
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьПравоНастройкиЭДО(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = Пользователи.РолиДоступны("НастройкаПараметровЭД");
	
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Ошибки и сообщения

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - строка, код ошибки;
//  СтороннееОписаниеОшибки - строка, описание ошибки переданное другой системой.
//
// Возвращаемое значение:
//  ТекстСообщения - строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонСообщения = НСтр("ru='Код ошибки %1. %2';uk='Код помилки %1. %2'");
	
	СообщенияОшибок = Новый Соответствие;
	ИнициализацияСообщенийОшибок(СообщенияОшибок);
	
	СообщениеОбОшибке = СообщенияОшибок.Получить(КодОшибки);
	Если СообщениеОбОшибке = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		СообщениеОбОшибке = СтороннееОписаниеОшибки;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеПереопределяемый.ИзменитьСообщениеОбОшибке(КодОшибки, СообщениеОбОшибке);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КодОшибки, СообщениеОбОшибке);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
//  ВидОперации - строка - вид операции при которой возникло исключение.
//  ПодробныйТекстОшибки - строка - описание ошибки.
//  ТекстСообщения - строка - текст ошибки.
//  КодСобытия - Число - код события, используется для стандартизации иерархии событий.
//                Может принимать значения: 0 - Общая подсистема, 1 - Обмен с банками, 2 - Обмен с контрагентами,
//                                          3 - Обмен с сайтами, 4 - Регламентные задания, 5 - Бизнес-сеть.
//  СсылкаНаОбъект - ДокументСсылка, СправочникСсылка - объект с которым связано данное событие
//
Процедура ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2, СсылкаНаОбъект = Неопределено) Экспорт
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
	
	Если ЭтоПолноправныйПользователь И ЗначениеЗаполнено(ПодробныйТекстОшибки) И НЕ ПустаяСтрока(ТекстСообщения)
		И ПодробныйТекстОшибки <> ТекстСообщения Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru='(Подробности см. в Журнале регистрации).';uk='(Подробиці див. у Журналі реєстрації).'");
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ТекстОшибки = НСтр("ru='Выполнение операции:';uk='Виконання операції:'")+ " " + ВидОперации + Символы.ПС + ПодробныйТекстОшибки;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ОбъектМетаданных = СсылкаНаОбъект.Метаданные();
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		ТекстОшибки, КодСобытия, , ОбъектМетаданных, СсылкаНаОбъект);
	
КонецПроцедуры

// Возвращает текст сообщения пользователю о необходимости  настройки системы.
//
// Параметры:
//  <ВидОперации> - Строка - признак выполняемой операции
//
// Возвращаемое значение:
//  ТекстСообщения - <Строка> - Строка сообщения
//
Функция ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации) Экспорт
	
	ТекстСообщения = "";
	ЭлектронноеВзаимодействиеПереопределяемый.ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения);
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
			ТекстСообщения = НСтр("ru='Для работы с электронными документами необходимо
            |в настройках системы включить использование обмена электронными документами.'
            |;uk='Для роботи з електронними документами необхідно
            |в настройках системи включити використання обміну електронними документами.'");
		ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
			ТекстСообщения = НСтр("ru='Для возможности подписания ЭД необходимо
            |в настройках системы включить опцию использования электронных цифровых подписей.'
            |;uk='Для можливості підписання ЕД необхідно
            |в настройках системи включити опцію використання електронних цифрових підписів.'");
		ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
			ТекстСообщения = НСтр("ru='Для возможности настройки криптографии необходимо 
            |в настройках системы включить опцию использования электронных цифровых подписей.'
            |;uk='Для можливості настройки криптографії необхідно 
            |в настройках системи включити опцію використання електронних цифрових підписів.'");
		ИначеЕсли ВРег(ВидОперации) = "РАБОТАСБАНКАМИ" Тогда
			ТекстСообщения = НСтр("ru='Для возможности обмена ЭД с банками необходимо 
            |в настройках системы включить опцию использования прямого взаимодействия с банками.'
            |;uk='Для можливості обміну ЕД з банками необхідно 
            |в настройках системи включити опцію використання прямої взаємодії з банками.'");
		Иначе
			ТекстСообщения = НСтр("ru='Операция не может быть выполнена. Не выполнены необходимые настройки системы.';uk='Операція не може бути виконана. Не виконані необхідні настройки системи.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Криптография

// Находит существующий или создает новый элемент справочника СертификатыКлючейЭлектроннойПодписиИШифрования
//
// Параметры:
//  ДвоичныеДанныеСертификата - ДвоичныеДанные - содержимое сертификата
//  Организация - СправочникСсылка.Организации - организация
//  НазваниеПрограммыКриптографии - Строка - название криптосредства
//
// Возвращаемое значение:
//  СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на новый сертификат
//
Функция НайтиСоздатьСертификатЭП(ДвоичныеДанныеСертификата, Организация, НазваниеПрограммыКриптографии = Неопределено) Экспорт
	
	Попытка
		СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Исключение
		ТекстСообщения = НСтр("ru='Ошибка чтения данных сертификата.';uk='Помилка читання даних сертифіката.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru='Чтение данных сертификата.';uk='Читання даних сертифіката.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток = &Отпечаток";

	Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
	Запрос.УстановитьПараметр("Отпечаток", Отпечаток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	СертификатОписаниеДанных = Новый ТаблицаЗначений;
	СертификатОписаниеДанных.Колонки.Добавить("Свойство");
	СертификатОписаниеДанных.Колонки.Добавить("Значение");
	
	СертификатОбъект = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.СоздатьЭлемент();
	СертификатОбъект.ДанныеСертификата = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
	СертификатОбъект.Отпечаток = Отпечаток;
	СертификатОбъект.Добавил = ПользователиКлиентСервер.ТекущийПользователь();
	Если ЗначениеЗаполнено(НазваниеПрограммыКриптографии) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПрограммыЭлектроннойПодписиИШифрования.Ссылка
		               |ИЗ
		               |	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		               |ГДЕ
		               |	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы = &НазваниеПрограммыКриптографии";
		Запрос.УстановитьПараметр("НазваниеПрограммыКриптографии", НазваниеПрограммыКриптографии);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СертификатОбъект.Программа = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	СертификатОбъект.Организация = Организация;
	СертификатОбъект.Наименование = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСертификата(СертификатКриптографии);
	
	СертификатОбъект.Подписание = СертификатКриптографии.ИспользоватьДляПодписи;
	СертификатОбъект.Шифрование = СертификатКриптографии.ИспользоватьДляШифрования;

	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(СертификатКриптографии);
	ОбновитьЗначение(СертификатОбъект.КомуВыдан, СтруктураСертификата.КомуВыдан);
	ОбновитьЗначение(СертификатОбъект.КемВыдан, СтруктураСертификата.КемВыдан);
	ОбновитьЗначение(СертификатОбъект.ДействителенДо, СтруктураСертификата.ДействителенДо);
	
	СвойстваСубъекта = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(СертификатКриптографии);
	ОбновитьЗначение(СертификатОбъект.Фамилия, СвойстваСубъекта.Фамилия, Истина);
	ОбновитьЗначение(СертификатОбъект.Имя, СвойстваСубъекта.Имя, Истина);
	ОбновитьЗначение(СертификатОбъект.Отчество, СвойстваСубъекта.Отчество, Истина);
	ОбновитьЗначение(СертификатОбъект.Должность, СвойстваСубъекта.Должность, Истина);
	ОбновитьЗначение(СертификатОбъект.Фирма, СвойстваСубъекта.Организация, Истина);
	
	// Заполнение ФИО, в случае отсутствия поля SN
	Если НЕ ЗначениеЗаполнено(СертификатОбъект.Фамилия) И СертификатКриптографии.Субъект.Свойство("CN") Тогда
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СертификатКриптографии.Субъект.CN);
		ОбновитьЗначение(СертификатОбъект.Фамилия, ФИО.Фамилия, Истина);
		ОбновитьЗначение(СертификатОбъект.Имя, ФИО.Имя, Истина);
		ОбновитьЗначение(СертификатОбъект.Отчество, ФИО.Отчество, Истина);
	КонецЕсли;
	
	СертификатОбъект.Записать();
	
	Возврат СертификатОбъект.Ссылка;
	
КонецФункции

// Заносит информацию о подписи объекта
//
// Параметры
//  ПодписываемыйОбъектСсылка  - любая ссылка / объект - в табличную часть которого будет занесена информация о ЭП
//  							в случае если ссылка - будет получен объект, блокировка, запись в ИБ
//  							в случае объекта за блокировку и запись отвечает вызывающий код
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ЗанестиИнформациюОПодписи(
				ПодписываемыйОбъектСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				ДвоичныеДанныеСертификата,
				УникальныйИдентификатор = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПодписи = ЭлектронноеВзаимодействиеСлужебный.ДатаУстановкиПодписи(НоваяПодписьДвоичныеДанные);
	ДатаПодписи = ?(ЗначениеЗаполнено(ДатаПодписи), ДатаПодписи, ТекущаяДатаСеанса());
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ПодписываемыйОбъект.Заблокировать();
	Иначе
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка;
	КонецЕсли;
	
	Если ДатаПодписи = Дата('00010101') Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеПодписи.Добавить();
	
	НоваяЗапись.КомуВыданСертификат = КомуВыданСертификат;
	НоваяЗапись.ДатаПодписи         = ДатаПодписи;
	НоваяЗапись.ИмяФайлаПодписи     = ИмяФайлаПодписи;
	НоваяЗапись.Комментарий         = Комментарий;
	НоваяЗапись.Отпечаток           = Отпечаток;
	НоваяЗапись.Подпись             = Новый ХранилищеЗначения(НоваяПодписьДвоичныеДанные);
	НоваяЗапись.УстановившийПодпись = Пользователи.ТекущийПользователь();
	НоваяЗапись.Сертификат          = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
	
	ПодписываемыйОбъект.ПодписанЭП = Истина;
	ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		ПодписываемыйОбъект.Разблокировать();
	КонецЕсли;

КонецПроцедуры

// Определяет, где нужно проводить крипто операции.
//
// Возвращаемое значение:
//  Булево - Истина, если криптография настроена на сервере или Ложь - если на клиенте
//
Функция ВыполнятьКриптооперацииНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.СоздаватьЭлектронныеПодписиНаСервере.Получить() = Истина;
	
КонецФункции

// Позволяет получить значения реквизитов сертификата ЭП.
//
// Параметры:
//  Сертификат ЭП - справочник-ссылка - ссылка на элемент справочника "Сертификаты ЭП".
//
// Возвращаемое значение:
//  Структура значений реквизитов.
//
Функция РеквизитыСертификата(СертификатЭП) Экспорт
	
	ПараметрыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СертификатЭП,
		"Отозван, Отпечаток, ДействителенДо, ПользовательОповещенОСрокеДействия,
		|Фамилия, Имя, Отчество, Должность, Организация, ДанныеСертификата,
		|Наименование, Пользователь, КомуВыдан, Фирма"); //* Добавлена Фирма
	ПараметрыСертификата.Вставить("ДвоичныеДанныеСертификата", ПараметрыСертификата.ДанныеСертификата.Получить());
	ПараметрыСертификата.Вставить("ВыбранныйСертификат", СертификатЭП);
	ПараметрыСертификата.Вставить("ПарольПолучен", Ложь);
	ПараметрыСертификата.Вставить("ПарольПользователя", Неопределено);
	
	// В БСП методах необходим параметр
	ПараметрыСертификата.Вставить("Комментарий", "");
	
	Возврат ПараметрыСертификата;
	
КонецФункции

// Возвращает пароль к сертификату, если доступен текущему пользователю.
// При вызове в привилегированном режиме текущий пользователь не учитывается.
//
// Параметры:
//  Сертификат - Неопределено - вернуть пароли ко всем сертификатам, доступным текущему пользователю.
//             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - вернуть пароль
//                 к указанному сертификату.
//              
// Возвращаемое значение:
//  Неопределено - пароль для указанного сертификата не указан.
//  Строка       - пароль для указанного сертификата.
//  Соответствие - все заданные пароли, доступные текущему пользователю
//                 в виде ключ - сертификат и значение - пароль.
//
Функция ПарольКСертификату(Сертификат = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Константы.КонтекстРаботыЭД.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Пользователи.РолиДоступны("ИспользованиеЭлектроннойПодписиИШифрования") Тогда
		Если Сертификат <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Если Сертификат <> Неопределено Тогда
		Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойства = Данные.Получить(Сертификат);
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.Свойство("Пароль")
		   И ТипЗнч(Свойства.Пароль) = Тип("Строка")
		   И Свойства.Свойство("Пользователь")
		   И ТипЗнч(Свойства.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
		   Если Свойства.Пользователь = Пользователи.ТекущийПользователь()
			   ИЛИ Свойства.Пользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
				
				Возврат Свойства.Пароль;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	ПаролиСертификатов = Новый Соответствие;
	
	Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Возврат ПаролиСертификатов;
	КонецЕсли;
	
	
	Для Каждого КлючИЗначение Из Данные Цикл
		Свойства = КлючИЗначение.Значение;
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.Свойство("Пароль")
		   И ТипЗнч(Свойства.Пароль) = Тип("Строка")
		   И Свойства.Свойство("Пользователь")
		   И ТипЗнч(Свойства.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
		   Если Свойства.Пользователь = Пользователи.ТекущийПользователь()
			   ИЛИ Свойства.Пользователь = Справочники.Пользователи.ПустаяСсылка()
			 Или ПривилегированныйРежим() Тогда
				ПаролиСертификатов.Вставить(КлючИЗначение.Ключ, Свойства.Пароль);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПаролиСертификатов;
	
КонецФункции

// Находит сертификат по строке отпечатка
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//  ТолькоВЛичномХранилище  - Булево - вести поиск только в личном хранилище
//
// Возвращаемое значение:
//   СертификатКриптографии  - сертификат криптографии 
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
			ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

// Получает массив структур личных сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования.
//
// Параметры:
//   ТолькоЛичные  - Булево - если Ложь, то берутся также и сертификаты получателей.
//
// Возвращаемое значение:
//   Массив - массив структур с полями сертификата.
Функция МассивОтпечатковСертификатов() Экспорт
	
	МассивОтпечатков = Новый Массив;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Возврат МассивОтпечатков;
	КонецЕсли;
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат МассивОтпечатков;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса(); // Используется для выявления истекших сертификатов, которые хранятся на клиентском компьютере.
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить; // Пропуск истекших сертификатов.
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			Если МассивОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивОтпечатков.Добавить(СтрокаОтпечатка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивОтпечатков;
	
КонецФункции

// Получение структуры команд ЭДО из сохраненной настройки.
//  ИмяКоманды - Строка - имя команды.
//  АдресКомандВоВременномХранилище - Строка - адрес во временном хранилище.
//
Функция ОписаниеКомандыЭДО(ИмяКоманды, АдресКомандВоВременномХранилище) Экспорт
	
	КомандыЭДО = ПолучитьИзВременногоХранилища(АдресКомандВоВременномХранилище);
	Для Каждого КомандаЭДО Из КомандыЭДО.НайтиСтроки(Новый Структура("ИмяКомандыНаФорме", ИмяКоманды)) Цикл
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаЭДО);
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьЗначение(СтароеЗначение, НовоеЗначение, ПропускатьНеопределенныеЗначения = Ложь)
	
	Если НовоеЗначение = Неопределено И ПропускатьНеопределенныеЗначения Тогда
		Возврат;
	КонецЕсли;
	
	Если СтароеЗначение <> НовоеЗначение Тогда
		СтароеЗначение = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияСообщенийОшибок(СообщенияОшибок)
	
	// Общие коды ошибок
	СообщенияОшибок.Вставить("001", );
	СообщенияОшибок.Вставить("002", );
	СообщенияОшибок.Вставить("003", );
	СообщенияОшибок.Вставить("004", );
	СообщенияОшибок.Вставить("005", );
	СообщенияОшибок.Вставить("006", НСтр("ru='Невозможно извлечь файлы из архива. Путь к файлам архива должен быть короче 256 символов.
                                        |Возможные способы устранения ошибки:
                                        | - в настройках операционнной системы, в переменных среды, изменить путь к временным файлам;
                                        | - изменить размещение каталога временных файлов в процедуре ""ОбменСКонтрагентамиПереопределяемый.ТекущийКаталогВременныхФайлов"".'
                                        |;uk='Неможливо витягти файли з архіву. Шлях до файлів архіву повинен бути коротше 256 символів.
                                        |Можливі способи усунення помилки:
                                        |- у настройках операційної системи, в змінних середовища, змінити шлях до тимчасових файлів;
                                        |- змінити розміщення каталогу тимчасових файлів в процедурі ""ОбменСКонтрагентамиПереопределяемый.ТекущийКаталогВременныхФайлов"".'"));
	// Коды ошибок 1С
	СообщенияОшибок.Вставить("0", НСтр("ru='Одна из имеющихся в запросе подписей принадлежит неизвестному лицу.';uk='Одна з наявних у запиті підписів належить невідомій особі.'"));
	СообщенияОшибок.Вставить("2", НСтр("ru='Одна из подписей неверна';uk='Один з підписів невірний'"));
	СообщенияОшибок.Вставить("3", НСтр("ru='Должны быть представлены две разные подписи.';uk='Повинні бути представлені два різні підписи.'"));
	СообщенияОшибок.Вставить("4", НСтр("ru='Неверный тип содержимого: двоичный.';uk='Невірний тип вмісту: двійковий.'"));
	СообщенияОшибок.Вставить("5", НСтр("ru='Должна быть предоставлена хотя бы одна подпись.';uk='Повинен бути надан хоча б один підпис.'"));
	СообщенияОшибок.Вставить("6", НСтр("ru='Не все подписи отличаются.';uk='Не всі підписи відрізняються.'"));
	СообщенияОшибок.Вставить("7", НСтр("ru='Все подписи не обеспечивают уровень полномочий, необходимых для операции.';uk='Всі підписи не забезпечують рівень повноважень, необхідних для операції.'"));
	СообщенияОшибок.Вставить("8", НСтр("ru='Один из подписантов неизвестен.';uk='Один з підписантів невідомий.'"));
	СообщенияОшибок.Вставить("9", НСтр("ru='Содержимое типа транспортного сообщения является неправильным, ожидается: application/xml.';uk='Вміст типу транспортного сполучення є неправильним, очікується: application/xml.'"));
	СообщенияОшибок.Вставить("10", НСтр("ru='Содержимое типа делового сообщения неверно, ожидается: application/xml.';uk='Вміст типу ділового повідомлення невірно, очікується: application/xml.'"));
	СообщенияОшибок.Вставить("11", НСтр("ru='Не все подписи соответствуют одному и тому же клиенту.';uk='Не всі підписи відповідають одному й тому ж клієнтові.'"));
	СообщенияОшибок.Вставить("12", НСтр("ru='Всех имеющихся в запросе подписей недостаточно для того, чтобы получить право на доступ к запрашиваемому счету.';uk='Всіх наявних у запиті підписів недостатньо для того, щоб отримати право на доступ до відповідного рахунку.'"));
	СообщенияОшибок.Вставить("13", НСтр("ru='HTTP запрос URL неверный. Поддерживаются только запросы ресурсов и состояния.';uk='HTTP запит URL невірний. Підтримуються тільки запити ресурсів і стану.'"));
	СообщенияОшибок.Вставить("14", НСтр("ru='Ошибка проверки транспортного контейнера.';uk='Помилка перевірки транспортного контейнера.'"));
	СообщенияОшибок.Вставить("15", НСтр("ru='Ошибка проверки контейнера бизнес данных.
                                              |Необходимо обратиться в тех.поддержку банка'
                                              |;uk='Помилка перевірки контейнера бізнес-даних.
                                              |Необхідно звернутися в тех. підтримку банку'"));
	СообщенияОшибок.Вставить("16", НСтр("ru='В выписке счета слишком малая начальная дата.';uk='У виписці рахунку занадто мала початкова дата.'"));
	СообщенияОшибок.Вставить("17", НСтр("ru='В выписке счета слишком большая конечная дата.';uk='У виписці рахунку занадто велика кінцева дата.'"));
	СообщенияОшибок.Вставить("18", НСтр("ru='Неверная дата документа.';uk='Невірна дата документа.'"));
	СообщенияОшибок.Вставить("19", НСтр("ru='Счет банка не соответствует БИК.';uk='Рахунок банку не відповідає БИК.'"));
	СообщенияОшибок.Вставить("21", НСтр("ru='Неразрешенная инструкция.';uk='Недозволена інструкція.'"));
	
	СообщенияОшибок.Вставить("100", НСтр("ru='Не удалось создать менеджер криптографии на компьютере.';uk='Не вдалося створити менеджер криптографії на комп''ютері.'"));
	СообщенияОшибок.Вставить("101", НСтр("ru='Сертификат не найден в хранилище сертификатов на компьютере.';uk='Сертифікат не знайдений в сховище сертифікатів на комп''ютері.'"));
	СообщенияОшибок.Вставить("102", НСтр("ru='Сертификат не действителен.';uk='Сертифікат не дійсний.'"));
	СообщенияОшибок.Вставить("103", НСтр("ru='Не удалось выполнить операции шифрования/расшифровки на компьютере.';uk='Не вдалося виконати операції шифрування/розшифрування на комп''ютері.'"));
	СообщенияОшибок.Вставить("104", НСтр("ru='Не удалось выполнить операции формирования/проверки ЭП на компьютере.';uk='Не вдалося виконати операції формування/перевірки ЕП на комп''ютері.'"));
	СообщенияОшибок.Вставить("105", НСтр("ru='Нет доступных сертификатов в хранилище сертификатов на компьютере.';uk='Немає доступних сертифікатів у сховищі сертифікатів на комп''ютері.'"));
	
	СообщенияОшибок.Вставить("110", НСтр("ru='Не удалось создать менеджер криптографии на сервере.';uk='Не вдалося створити менеджер криптографії на сервері.'"));
	СообщенияОшибок.Вставить("111", НСтр("ru='Сертификат не найден в хранилище сертификатов на сервере.';uk='Сертифікат не знайдений в сховище сертифікатів на сервері.'"));
	СообщенияОшибок.Вставить("112", НСтр("ru='Сертификат не действителен.';uk='Сертифікат не дійсний.'"));
	СообщенияОшибок.Вставить("113", НСтр("ru='Не удалось выполнить операции шифрования/расшифровки на сервере.';uk='Не вдалося виконати операції шифрування/розшифрування на сервері.'"));
	СообщенияОшибок.Вставить("114", НСтр("ru='Не удалось выполнить операции формирования/проверки ЭП на сервере.';uk='Не вдалося виконати операції формування/перевірки ЕП на сервері.'"));
	СообщенияОшибок.Вставить("115", НСтр("ru='Нет доступных сертификатов в хранилище сертификатов на сервере.';uk='Немає доступних сертифікатів у сховищі сертифікатів на сервері.'"));
	
	СообщенияОшибок.Вставить("106", НСтр("ru='Версия платформы 1С ниже ""8.2.17"".';uk='Версія платформи 1С нижче ""8.2.17"".'"));
	СообщенияОшибок.Вставить("107", НСтр("ru='Не удалось создать каталоги обмена.';uk='Не вдалося створити каталоги обміну.'"));
	
	СообщенияОшибок.Вставить("121", НСтр("ru='Не удалось соединиться с FTP сервером.';uk='Не вдалося з''єднатися з сервером FTP.'"));
	СообщенияОшибок.Вставить("122", НСтр("ru='Невозможно создать каталог, так как на FTP ресурсе существует файл с таким именем.';uk='Неможливо створити каталог, так як на FTP ресурсі існує файл з таким ім''ям.'"));
	СообщенияОшибок.Вставить("123", НСтр("ru='Невозможно создать каталог.';uk='Неможливо створити каталог.'"));
	СообщенияОшибок.Вставить("124", НСтр("ru='Невозможно открыть каталог.';uk='Неможливо відкрити каталог.'"));
	СообщенияОшибок.Вставить("125", НСтр("ru='Произошла ошибка при поиске файлов на FTP ресурсе.';uk='Сталася помилка при пошуку файлів на FTP ресурс.'"));
	СообщенияОшибок.Вставить("126", НСтр("ru='Различаются данные записанного, а затем прочитанного тестового файла в каталоге.';uk='Розрізняються дані записаного, а потім прочитаного тестового файлу в каталозі.'"));
	СообщенияОшибок.Вставить("127", НСтр("ru='Не удалось записать файл в каталог.';uk='Не вдалося записати файл в каталог.'"));
	СообщенияОшибок.Вставить("128", НСтр("ru='Не удалось прочитать файл в каталоге.';uk='Не вдалося прочитати файл у каталозі.'"));
	СообщенияОшибок.Вставить("129", НСтр("ru='Не удалось удалить файл.';uk='Не вдається вилучити файл.'"));
	
КонецПроцедуры

#КонецОбласти

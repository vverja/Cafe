
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ПриЧтенииСозданииНаСервере();

	КонецЕсли;
	
	Если Не Документы.КорректировкаНазначенияТоваров.ДоступнаВозможностьИзменения(Объект.Ссылка) Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда
		
		ОбработкаВыбораСерверПолучитьВидыЗапасов(ВыбранноеЗначение, ИсточникВыбора.ВидыЗапасовУказаныВручную);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта" Тогда
		
		Если Объект.Товары.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнениеКорректировкиНазначенияЗавершение", ЭтотОбъект, ВыбранноеЗначение), НСтр("ru='Таблица товаров будет очищена. Продолжить?';uk='Таблиця товарів буде очищена. Продовжити?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
		Иначе
			ОбработкаВыбораСерверЗаполнитьТаблицуТовары(ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.КорректировкаНазначенияТоваров.Форма.ФормаВыбораНазначения" Тогда
		
		НазначениеПриИзмененииСервер(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЗначениеЗаполнено(Объект.Заказ) И Объект.Ссылка.Пустая() Тогда 
		СообщитьОРезультатахЗаполненияТЧТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
						Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
						Новый Структура("Номенклатура", "ТипНоменклатуры")));
						
	ЗаполнитьСлужебныеРеквизитыТЧ();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации <> ВыбранноеЗначение Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВидОперацииОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение), НСтр("ru='Таблица товаров будет очищена. Продолжить?';uk='Таблиця товарів буде очищена. Продовжити?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.ВидОперации = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Организация", Объект.Организация);
	ОткрытьФорму("Документ.КорректировкаНазначенияТоваров.Форма.ФормаВыбораНазначения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Организация", Объект.Организация);
	ОткрытьФорму("Документ.КорректировкаНазначенияТоваров.Форма.ФормаВыбораНазначения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	НазначениеПриИзмененииСервер(Объект.Назначение);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНадписьНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСписокНазначений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНовоеНазначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", "НовоеНазначение");
	
	ПараметрыДействия = Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыДействия);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение                   = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТоварыНоменклатураПриИзмененииНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсходноеНазначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ПараметрыДействия = Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыДействия);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ПараметрыДействия = Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыДействия);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПомещениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеМассовоеСнятиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьСвязанныйОбъект", ТекущаяСтрока.ИсходноеНазначение, Истина);
	ОткрытьФорму("Справочник.Назначения.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать"))
		И Не ЗначениеЗаполнено(Объект.Назначение) Тогда
		
		ТекстРезервированиеСнятие = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв")
			, НСтр("ru='Снятие резерва невозможно.';uk='Зняття резерву неможливо.'"), НСтр("ru='Резервирование невозможно.';uk='Резервування неможливе.'"));
		
		ТекстНазначениеЗаказ = ?(ИспользоватьУчетЗатратПоНаправлениямДеятельности, 
			НСтр("ru='Необходимо выбрать назначение.';uk='Необхідно вибрати призначення.'"), НСтр("ru='Необходимо выбрать заказ.';uk='Необхідно вибрати замовлення.'"));
		
		ТекстОтказа = ТекстРезервированиеСнятие + " " + ТекстНазначениеЗаказ;
		
		ПоказатьПредупреждение(, ТекстОтказа);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыЗаполнения = Новый Структура();
	ПараметрыФормыЗаполнения.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыФормыЗаполнения.Вставить("Назначение",  Объект.Назначение);
	ПараметрыФормыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыФормыЗаполнения.Вставить("КорректировкаНазначения", Объект.Ссылка);
	ПараметрыФормыЗаполнения.Вставить("УникальныйИдентификаторДляВременногоХранилища", УникальныйИдентификатор);
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта", ПараметрыФормыЗаполнения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
	ФинансыКлиент.ОткрытьВидыЗапасов(
		Объект,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормаСлужебные

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьУчетЗатратПоНаправлениямДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
						Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
						Новый Структура("Номенклатура", "ТипНоменклатуры")));
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект,
																									Документы.КорректировкаНазначенияТоваров));
																									
	ЗаполнитьСлужебныеРеквизитыТЧ();
																									
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	
	ЗаполнитьДоступныеДействия();
	ОбновитьИнформациюПоЗаказам();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ЭтоПроизвольнаяКорректировка = Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений;
	ЭтоРезервирование            = Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать;
	ЭтоКорректировка             = Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
	ЭтоСнятиеРезерва             = Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв;
	ЭтоМассовоеСнятие            = Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям;

	Элементы.ТоварыНоменклатура.ТолькоПросмотр   = Не ЭтоПроизвольнаяКорректировка;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр = Не ЭтоПроизвольнаяКорректировка;
	Элементы.ТоварыСклад.ТолькоПросмотр          = Не ЭтоПроизвольнаяКорректировка;
	Элементы.Товары.ИзменятьСоставСтрок          = ЭтоПроизвольнаяКорректировка;
	Элементы.ТоварыНовоеНазначение.Видимость     = ЭтоПроизвольнаяКорректировка;
	
	Элементы.ТоварыИсходноеНазначение.Видимость       = ЭтоПроизвольнаяКорректировка Или ЭтоКорректировка;
	Элементы.ТоварыНазначениеМассовоеСнятие.Видимость = ЭтоМассовоеСнятие И Не Объект.ДокументПоРаспоряжению И ИспользоватьУчетЗатратПоНаправлениямДеятельности;
	Элементы.ТоварыЗаказ.Видимость                    = ЭтоМассовоеСнятие И Не Объект.ДокументПоРаспоряжению И Не ИспользоватьУчетЗатратПоНаправлениямДеятельности;
	
	ВидыОпераций = Перечисления.ВидыОперацийКорректировкиНазначения;
	ЗаголовокЗаполнитьПоВидуОперации = Новый Соответствие();
	ЗаголовокЗаполнитьПоВидуОперации.Вставить(ВидыОпераций.Резервировать,                  НСтр("ru='Подобрать из свободных остатков';uk='Підібрати з вільних залишків'"));
	ЗаголовокЗаполнитьПоВидуОперации.Вставить(ВидыОпераций.РезервироватьИКорректировать,   НСтр("ru='Подобрать из свободных и обособленных остатков';uk='Підібрати з вільних і відокремлених залишків'"));
	ЗаголовокЗаполнитьПоВидуОперации.Вставить(ВидыОпераций.СнятьРезерв,                    НСтр("ru='Заполнить обособленными остатками';uk='Заповнити відокремленими залишками'"));
	ЗаголовокЗаполнитьПоВидуОперации.Вставить(ВидыОпераций.СнятьРезервПоМногимНазначениям, НСтр("ru='Заполнить обособленными остатками';uk='Заповнити відокремленими залишками'"));
	ЗаголовокЗаполнитьПоВидуОперации.Вставить(ВидыОпераций.ПроизвольнаяКорректировкаНазначений,      Неопределено);
	
	ЗаголовокЗаполнить = ЗаголовокЗаполнитьПоВидуОперации.Получить(Объект.ВидОперации);
	Элементы.ТоварыЗаполнить.Заголовок = ЗаголовокЗаполнить;
	Элементы.ТоварыЗаполнить.Видимость = ЗаголовокЗаполнить <> Неопределено;
	
	Элементы.Назначение.Видимость       = (ЭтоРезервирование Или ЭтоСнятиеРезерва Или ЭтоКорректировка) И ИспользоватьУчетЗатратПоНаправлениямДеятельности;
	Элементы.Заказ.Видимость            = (ЭтоРезервирование Или ЭтоСнятиеРезерва Или ЭтоКорректировка) И Не ИспользоватьУчетЗатратПоНаправлениямДеятельности;
	Элементы.ОснованиеНадпись.Видимость = ЭтоМассовоеСнятие Или ЭтоПроизвольнаяКорректировка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНовоеНазначение.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Товар;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НовоеНазначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ТекстПоступаетНаСклад = НСтр("ru='Поступает на склад';uk='Надходить на склад'");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПоступаетНаСклад);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЯчейка.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НовоеНазначение.ДвиженияПоСкладскимРегистрам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<ячейки не используются>';uk='<комірки не використовуються>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПомещение.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НовоеНазначение.ДвиженияПоСкладскимРегистрам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<помещения не используются>';uk='<приміщення не використовуються>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЯчейка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПомещение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИсходноеНазначение.ДвиженияПоСкладскимРегистрам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЯчейка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИспользоватьАдресноеХранение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<ячейки не используются>';uk='<комірки не використовуються>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПомещение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ИспользоватьСкладскиеПомещения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<помещения не используются>';uk='<приміщення не використовуються>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНовоеНазначение.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапретСнятияРезерва");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НовоеНазначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНовоеНазначение.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапретСнятияРезерва");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НовоеНазначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНовоеНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапретСнятияРезерва");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма, "ТоварыНовоеНазначение");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОРезультатахЗаполненияТЧТовары()
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Нет данных для заполнения по ""%Заказ%"" .';uk='Немає даних для заповнення за ""%Заказ%"" .'");
		
		Если ЗначениеЗаполнено(Объект.Заказ) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", Строка(Объект.Заказ));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Заказ");
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%", Строка(Объект.Назначение));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Назначение");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыСлужебные

&НаКлиенте
Процедура ВидОперацииОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидОперации = ДополнительныеПараметры;
	
	ПриИзмененииКлючевыхПолейШапки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеДействия()
	
	ТекущийВидОперации = Объект.ВидОперации;
	
	ДоступныеДействия = Документы.КорректировкаНазначенияТоваров.ДоступныеДействия(Объект.Заказ);
	
	// Уже выбранный в документе вид операции остается. При отсутствии к нему доступа документ открывает на ТолькоПросмотр
	Если ДоступныеДействия.Найти(ТекущийВидОперации) = Неопределено Тогда
		ДоступныеДействия.Добавить(ТекущийВидОперации);
	КонецЕсли;
	
	Элементы.ВидОперации.СписокВыбора.ЗагрузитьЗначения(ДоступныеДействия);
	
	Если ДоступныеДействия.Найти(ТекущийВидОперации) <> Неопределено Тогда
		Объект.ВидОперации = ТекущийВидОперации;
	Иначе
		// Инверсия действия резервирования, в случае если доступно только одно действие резервирование из двух
		Если ТекущийВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		ИначеЕсли ТекущийВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевыхПолейШапки()
	
	Объект.Товары.Очистить();
	СписокНазначений.Очистить();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений") Тогда
		
		Если ЗначениеЗаполнено(Объект.Заказ) Тогда
			Документы.КорректировкаНазначенияТоваров.ЗаполнитьПоЗаказу(Объект.Заказ, Объект.Ссылка, Объект.Товары);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям") Тогда
		
		Если Не ЗапретСнятияРезерва Тогда
			Документы.КорректировкаНазначенияТоваров.ЗаполнитьПоОснованию(Объект.Назначение, 
				Объект.Ссылка, 
				ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв"), 
				Объект.Товары, 
				Истина);
				
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИНформациюПоЗаказам();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТЧ()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.Помещение КАК Помещение
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|				И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Помещение КАК Справочник.СкладскиеПомещения).ИспользоватьАдресноеХранение
	|							И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Помещение КАК Справочник.СкладскиеПомещения).ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьАдресноеХранение
	|						И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользоватьАдресноеХранение,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ИспользоватьСкладскиеПомещения
	|				И &Период >= ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьСкладскиеПомещения
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(,"НомерСтроки,Склад,Помещение"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Строка = Объект.Товары[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ИспользоватьАдресноеХранение,ИспользоватьСкладскиеПомещения");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокНазначений()
	
	ЗаголовокФормыПросмотра = ?(ИспользоватьУчетЗатратПоНаправлениямДеятельности, 
		НСтр("ru='Назначения (%КоличествоДокументов%)';uk='Призначення (%КоличествоДокументов%)'"),
		НСтр("ru='Заказы (%КоличествоДокументов%)';uk='Замовлення (%КоличествоДокументов%)'"));
		
	СписокЗаказовИНаправленийДеятельности = ПолучитьСписокЗаказовИНаправленийДеятельности();
		
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
		СписокЗаказовИНаправленийДеятельности,
		ЗаголовокФормыПросмотра),
		ЭтаФорма,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЗаказовИНаправленийДеятельности()
	
	СписокВозврата = Новый СписокЗначений();
	
	ЗначенияРеквизитовНазначений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНазначений.ВыгрузитьЗначения(), "Заказ, НаправлениеДеятельности");
	
	Для Каждого КлючЗначение Из ЗначенияРеквизитовНазначений Цикл
		
		РеквизитыНазначения = КлючЗначение.Значение;
		
		Если ЗначениеЗаполнено(РеквизитыНазначения.Заказ) Тогда
			СписокВозврата.Добавить(РеквизитыНазначения.Заказ);
		ИначеЕсли ЗначениеЗаполнено(РеквизитыНазначения.НаправлениеДеятельности) Тогда
			СписокВозврата.Добавить(РеквизитыНазначения.НаправлениеДеятельности);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	ИмяПоляНазначение = ?(Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать
		Или Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать,
		"НовоеНазначение",
		"ИсходноеНазначение");
	
	ТаблицаНазначений = Объект.Товары.Выгрузить(, ИмяПоляНазначение);
	ТаблицаНазначений.Свернуть(ИмяПоляНазначение);
	СписокНазначений.ЗагрузитьЗначения(ТаблицаНазначений.ВыгрузитьКолонку(ИмяПоляНазначение));
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.ПроизвольнаяКорректировкаНазначений
		Или Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
		
		Если СписокНазначений.Количество() = 1 Тогда
			
			Объект.Назначение = СписокНазначений[0].Значение;
			Объект.Заказ      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Назначение, "Заказ");
			
		Иначе
		
			Объект.Назначение = Неопределено;
			Объект.Заказ      = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВсегоНазначений = СписокНазначений.Количество();
	
	Элементы.ОснованиеНадпись.Гиперссылка = ВсегоНазначений > 0;
	Элементы.ОснованиеНадпись.ЦветТекста = ?(Элементы.ОснованиеНадпись.Гиперссылка, ЦветаСтиля.ЦветГиперссылки, ЦветаСтиля.ПоясняющийТекст);
	
	ШаблонВсегоНазначений = ?(ИспользоватьУчетЗатратПоНаправлениямДеятельности, НСтр("ru='Всего назначений: %1';uk='Всього призначень: %1'"), НСтр("ru='Всего заказов: %1';uk='Всього замовлень: %1'"));
	Если ВсегоНазначений > 1 Тогда
		Элементы.ОснованиеНадпись.Заголовок = СтрЗаменить(ШаблонВсегоНазначений, "%1", ВсегоНазначений);
	ИначеЕсли ВсегоНазначений = 1 Тогда
		Элементы.ОснованиеНадпись.Заголовок = ?(ИспользоватьУчетЗатратПоНаправлениямДеятельности, Объект.Назначение, Объект.Заказ);
	Иначе
		Элементы.ОснованиеНадпись.Заголовок =  НСтр("ru='Необходимо заполнить список товаров.';uk='Необхідно заповнити список товарів.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НазначениеПриИзмененииСервер(Назначение)
	
	Модифицированность = Истина;
	Объект.Назначение = Назначение;
	Объект.Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Назначение, "Заказ");
	
	
	ЗаполнитьДоступныеДействия();
	ПриИзмененииКлючевыхПолейШапки();
	
КонецПроцедуры

#КонецОбласти

#Область ТоварыСлужебные

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтруктураШапкиДокумента = Новый Структура();
	СтруктураШапкиДокумента.Вставить("Склад", ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию());
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(СтруктураШапкиДокумента, Ложь));

	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСлужебныеРеквизитыТЧ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст, ТекущиеДанные) Тогда
		ТекстИсключения = НСтр("ru='Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.';uk='Помилка при спробі зазначити серії - в цьому документі для зазначення серій не потрібен серверний виклик.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыСлужебные

&НаКлиенте
Процедура ЗаполнениеКорректировкиНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеКорректировкиНазначенияЗавершениеНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеКорректировкиНазначенияЗавершениеНаСервере(ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ВидОперации) И Объект.ВидОперации <> ДополнительныеПараметры.ВидОперации Тогда
		Объект.ВидОперации = ДополнительныеПараметры.ВидОперации;
		СписокНазначений.Очистить();
	КонецЕсли;
	
	ЗаполнитьТаблицуТоварыИзХранилища(ДополнительныеПараметры.ТаблицаТовары);
	
	Модифицированность = Истина;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСерверЗаполнитьТаблицуТовары(Знач ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ВидОперации) И Объект.ВидОперации <> ВыбранноеЗначение.ВидОперации Тогда
		Объект.ВидОперации = ВыбранноеЗначение.ВидОперации;
		СписокНазначений.Очистить();
	КонецЕсли;
	
	ЗаполнитьТаблицуТоварыИзХранилища(ВыбранноеЗначение.ТаблицаТовары);
	
	Модифицированность = Истина;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоварыИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.Товары.Очистить();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище).Товары;
	
	Если ЗначениеЗаполнено(ТоварыИзХранилища) И ТоварыИзХранилища.Количество() > 0 Тогда
		
		Объект.Товары.Загрузить(ТоварыИзХранилища);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")));
		
		ЗаполнитьСлужебныеРеквизитыТЧ();
		
		ЗаказДляПодсчета = Неопределено;
		Заказов = 0;
		Для Каждого Строка Из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(ЗаказДляПодсчета) И ЗначениеЗаполнено(Строка.Заказ) Тогда
				ЗаказДляПодсчета = Строка.Заказ;
				Заказов = Заказов + 1;
			КонецЕсли;
			Если Строка.Заказ <> ЗаказДляПодсчета Тогда
				ЗаказДляПодсчета = Строка.Заказ;
				Заказов = Заказов + 1;
			КонецЕсли;
			
			ПараметрыПомещенияЯчейки = Новый Структура();
			ПараметрыПомещенияЯчейки.Вставить("Склад", Строка.Склад);
			ПараметрыПомещенияЯчейки.Вставить("Помещение", Строка.Помещение);
			ПараметрыПомещенияЯчейки.Вставить("Дата", Объект.Дата);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакИспользованияПомещений", ПараметрыПомещенияЯчейки);
			СтруктураДействий.Вставить("ЗаполнитьПризнакАдресногоХранения", ПараметрыПомещенияЯчейки);
			СтруктураДействий.Вставить("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", "НовоеНазначение");
			СтруктураДействий.Вставить("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", "ИсходноеНазначение");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
			
		КонецЦикла;
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		Если Заказов > 1 Тогда
			Объект.ДокументПоРаспоряжению = Ложь;
		Иначе
			Объект.ДокументПоРаспоряжению = Истина;
		КонецЕсли;
		
		ОбновитьИнформациюПоЗаказам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
	
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,
		Объект.ВидыЗапасов,
		УникальныйИдентификатор,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСерверПолучитьВидыЗапасов(ВыбранноеЗначение, ВидыЗапасовУказаныВручную)
	
	ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
	Объект.ВидыЗапасовУказаныВручную = ВидыЗапасовУказаныВручную;
	Модифицированность = Истина;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

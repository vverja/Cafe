&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		// Документ основания с ордерным складом поступления должен находиться в статусе "Принято"
		МассивДокументовОснования = ДокументыОснования.Выгрузить(, "ДокументОснование").ВыгрузитьКолонку("ДокументОснование");
		
		Если МассивДокументовОснования.Количество() > 0 Тогда
			ДокументОснование = МассивДокументовОснования[0];
			ДокументОснованияРазрешен = ДокументОснованияДоступенДляВводаАкта(ДокументОснование);
			Если Не ДокументОснованияРазрешен Тогда
				ТекстИсключения = НСтр("ru='Для создания документа ""Акт о расхождениях после перемещения"", документ ""Перемещение товаров"" 
                    |должен быть проведен в статусе ""Принято"", поскольку на складе-получателе ведется учет по сериям.'
                    |;uk='Для створення документа ""Акт про розбіжності після переміщення"", документ ""Переміщення товарів"" 
                    |повинен бути проведений у статусі ""Прийнято"", оскільки на складі одержувача ведеться облік по серіях.'");
				ВызватьИсключение ТекстИсключения;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьОрдерностьСкладаПолучателя();
	
	УстановитьВидимостьДоступность();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаВыбора" Тогда

		ОбработатьПодборДокументовОснований(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда

		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.АктОРасхожденияхПослеПеремещения.Форма.ФормаПодбораДокументовОснований" Тогда
		
		ОбработатьПодборДокументовОснований(ВыбранноеЗначение);

	КонецЕсли;

	ОтключитьОтметкуНезаполненного();

	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	РасхожденияСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(Объект);
	
	СтруктураДействий = РасхожденияКлиентСервер.СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваров();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ЗаполнитьПризнакОснованиеПоЗаказам();
	
	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура ЗаполнитьПоОснованиямВыполнить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоПеремещениямВыполнитьЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Объект.Товары, 
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПеремещениямВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПоОснованиям();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРасхожденияВыполнить(Команда)
	
	ТолькоРасхождения = Не ТолькоРасхождения;
	Элементы.ТоварыТолькоРасхождения.Пометка = ТолькоРасхождения;
	
	Если ТолькоРасхождения Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождения", Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументыОснования(Команда)

	ПараметрыФормы = РасхожденияКлиент.СтруктураПараметровФормыПодбораДокументовОснованийПеремещений();

	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);

	СписокДокументовОснований = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы ИЗ ДокументыОснования Цикл
		СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование);
	КонецЦикла;
	
	ПараметрыФормы.ДокументыОснования = СписокДокументовОснований;
	
	ПараметрыФормы.ТабличнаяЧастьНеПустая = Объект.Товары.Количество() > 0;

	ОткрытьФорму("Документ.АктОРасхожденияхПослеПеремещения.Форма.ФормаПодбораДокументовОснований",
	             ПараметрыФормы,
	             ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = РасхожденияКлиент.ПараметрыОткрытияФормыЗагрузкиИзВнешнихФайлов(Ложь);
	
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ПараметрЗаголовок = НСтр("ru='Подбор товаров в %Документ%';uk='Підбір товарів у %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='акт о расхождениях после перемещения';uk='акт про розбіжності після переміщення'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("Склад",                                     Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                    ПараметрыУказанияСерий);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДействие(Команда)
	
	РасхожденияКлиент.ИзменитьДействиеВыделенныхСтрок(
		Объект,
		ЭтаФорма,
		"Перемещение");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДействиеВыделенныхСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат; // Ничего не выбрано
	КонецЕсли;
	
	РезультатУстановки = РасхожденияКлиент.УстановитьВариантДействияВыделеннымСтрокам(ЭтаФорма, Результат);
	
	Если РезультатУстановки.НуженСерверныйВызов Тогда
		КоличествоИзмененныхСтрокСоответствие = РезультатУстановки.КоличествоИзмененныхСтрокСоответствие;
		УстановитьВариантДействияВСтрокахСервер(Результат, КоличествоИзмененныхСтрокСоответствие);
		РасхожденияКлиент.ОповеститьОбУстановкеДействия(КоличествоИзмененныхСтрокСоответствие);
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура УстановитьВариантДействияВСтрокахСервер(Результат, КоличествоИзмененныхСтрокСоответствие)
	
	РасхожденияСервер.УстановитьВариантДействияВСтроках(ЭтаФорма, Результат, КоличествоИзмененныхСтрокСоответствие);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.Товары.ТекущиеДанные.Действие = Результат;
		Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Элементы.Товары.ТекущаяСтрока, КэшированныеЗначения);
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	СкладПолучательПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованиеПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если ДокументыОснования.Количество() = 1 Тогда
		ПоказатьЗначение(, ДокументыОснования[0].ДокументОснование);
	ИначеЕсли ДокументыОснования.Количество() > 1 Тогда
		
		СписокДокументов = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ДокументыОснования Цикл
			СписокДокументов.Добавить(СтрокаТаблицы.ДокументОснование);
		КонецЦикла;
		
		ЗаголовокФормыПросмотра = НСтр("ru='Перемещения товаров (%КоличествоДокументов%)';uk='Переміщення товарів (%КоличествоДокументов%)'");
		
		ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
		                СписокДокументов,
		                ЗаголовокФормыПросмотра),
		ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОформляемыеДокументыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АктОРасхождениях", Объект.Ссылка);
	ОткрытьФорму("Обработка.РаботаСАктамиРасхождений.Форма.ОформляемыеДокументы", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновное Тогда
		
		СформироватьСпособОтраженияРасхожденией();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	РасхожденияКлиентСервер.УправлениеДоступностью(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПересчитатьСтрокуИПоказателиФормы(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПересчитатьСтрокуИПоказателиФормы(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийМенеджераПодвалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ЕстьКомментарийМенеджера = Не ПустаяСтрока(ТекущиеДанные.КомментарийМенеджера);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийМенеджераПодвалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КомментарийМенеджераНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийПолучателяПодвалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КомментарийПолучателяНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийПолучателяПодвалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ЕстьКомментарийПолучателя = Не ПустаяСтрока(ТекущиеДанные.КомментарийПолучателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	СтруктураДействий.Вставить("ПересчитатьРасхождения");

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование) Тогда
		РасхожденияКлиентСервер.ЗаполнитьДокументОснованиеВСтроке(ТекущаяСтрока, ДокументыОснования);
	КонецЕсли;
	
	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументОснованиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	РасхожденияКлиент.ТоварыДокументОснованияПриИзменении(ТекущаяСтрока, ЭтаФорма.ДокументыОснования);
	
	СтруктураДействий = Новый Структура;
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЗаполненоПоОснованию Тогда
		Возврат;
	КонецЕсли;

	Элемент.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;

	НайденныеСтроки = ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекущиеДанные.ДокументОснование));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элемент.СписокВыбора.ЗагрузитьЗначения(
		НайденныеСтроки[0].ЗаказыОснования.ВыгрузитьЗначения());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	РасхожденияКлиент.ТоварыПередУдалением(ТекущаяСтрока, Отказ, Ложь);
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование И ТекущиеДанные.ЗаполненоПоОснованию Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Товары.Добавить();
		СтрокаИсключаемыхСвойств = "ЗаполненоПоОснованию, КоличествоПоДокументу, КоличествоУпаковокПоДокументу, КодСтроки, Назначение, НазначениеОтправителя";
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , СтрокаИсключаемыхСвойств);
		
		Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Истина);
		
		Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
			
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Элементы.Товары.ТекущаяСтрока, КэшированныеЗначения);
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
			
		КонецЕсли;
		
		ПересчитатьСтрокуИПоказателиФормы(НоваяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрока, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	Если Поле = Элементы.ТоварыЗаказ Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Заказ) И ТекущаяСтрока.ЗаполненоПоОснованию Тогда
			ПоказатьЗначение(Неопределено, ТекущаяСтрока.Заказ);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыДокументОснование Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование) И ТекущаяСтрока.ЗаполненоПоОснованию Тогда
			ПоказатьЗначение(Неопределено, ТекущаяСтрока.ДокументОснование);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыСтатусУказанияСерий
		Или Поле = Элементы.ТоварыСерия
		Или (Поле = Элементы.ТоварыКоличествоУпаковок
			И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(ТекущаяСтрока.СтатусУказанияСерий, ПараметрыУказанияСерий))
			И ПравоНаРедактирование Тогда
		
		ОткрытьПодборСерий();
		
	ИначеЕсли Поле = Элементы.ТоварыЕстьКомментарийМенеджера И ПравоНаРедактирование Тогда
		
		КомментарийМенеджераНачалоВыбора();
		
	ИначеЕсли Поле = Элементы.ТоварыЕстьКомментарийПолучателя И ПравоНаРедактирование Тогда
		
		КомментарийПолучателяНачалоВыбора();
		
	ИначеЕсли Поле = Элементы.ТоварыДействие И ПравоНаРедактирование Тогда
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		РасхожденияКлиент.ТоварыДействиеНачалоВыбора(
			Элементы.Товары.ТекущиеДанные,
			Объект,
			ЭтаФорма,
			"Перемещение");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение                   = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоПоступлению(Команда) 
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru='Для заполнения по приемке необходимо предварительно записать документ. Выполнить запись документа и продолжить?';uk='Для заповнення з приймання необхідно попередньо записати документ. Виконати запис документа і продовжити?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПерезаполнитьПоПоступлениюОтветПользователя", ЭтотОбъект), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	Иначе
		ЗаполнитьПоПриемкеСервер();
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Количество перезаполнено';uk='Кількість перезаповнено'"),
		,
		НСтр("ru='В строках перезаполнено количество.';uk='У рядках перезаповнено кількість.'"),
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоПоступлениюОтветПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ЗаполнитьПоПриемкеСервер();
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Количество перезаполнено';uk='Кількість перезаповнено'"),
		,
		НСтр("ru='В строках перезаполнено количество.';uk='У рядках перезаповнено кількість.'"),
		БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеПриИзменении(Элемент)
	ОбновитьНазначениеОтправителя();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьНазначениеОтправителя();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Упаковка
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	
	// ТоварыТекстовоеОписание отметка незаполненного

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТекстовоеОписание.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыТекстовоеОписание только просмотр
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТекстовоеОписание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаполненоПоОснованию");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<заполнено по основанию>';uk='<заповнений по підставі>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Использование характеристик
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	
	// ТоварыДействие нет расхождений
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕстьРасхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>';uk='<не потрібно>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыДействие документ не согласован
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыДействие представление

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.Действие");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Оформление перепоставленного';uk='Оформлення перепоставленого'"));

	// Заказ клиента код строки отметка незаполненного

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыКодСтрокиСверхЗаказа видимость

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказ.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьОснованиеПоЗаказам");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//ТоварыЗаказ сверх заказа

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<сверх заказа>';uk='<понад замовлення>'"));
	
	// ТоварыЗаказ гиперссылка

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказ.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаполненоПоОснованию");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	// ТоварыДокументОснование гиперссылка

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументОснование.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументОснование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаполненоПоОснованию");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	// ТоварыЗаказ доступность

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказ.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументОснование");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаполненоПоОснованию");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ТоварыЗаказ реализация не по заказам

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказ.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументОснование");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ОснованиеПоЗаказам");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<реализация не по заказу>';uk='<реалізація не по замовленню>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Реализация отметка незаполненного

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументОснование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Серии номенклатуры
	
	РасхожденияСервер.УстановитьУсловноеОформлениеСерий(ЭтаФорма, "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары");
	
	//Недоступность элементов таблицы товары по реализациям
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусУказанияСерий.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНазначение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументОснование.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаполненоПоОснованию");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//Расхождение количество

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокРасхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоУпаковокРасхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	//НеДоступность документов оснований

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыОснованиеПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоДокументовОснований");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// ТоварыКоличествоУпаковок клиента отметка незаполненного
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаполненоПоОснованию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.АктОРасхожденияхПослеПеремещения));
	ПравоНаРедактирование  = ПравоДоступа("Изменение", Объект.Ссылка.Метаданные());

	Если Объект.ХозяйственнаяОперация.Пустая() Тогда
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеремещениеТоваров");
	КонецЕсли;
	
	ЗаполнитьДокументыОснования();
	ЗаполнитьТоварыСписокВыбораПоДокументамОснованиям();
	
	ЭтаФорма.ДокументыОснованиеПредставление = РасхожденияСервер.ФормированиеНадписиДокументыОснованиеПеремещение(
		Элементы.ДокументыОснованиеПредставление,
		ЭтаФорма.КоличествоДокументовОснований,
		Объект.Товары.Количество(),
		?(ЭтаФорма.КоличествоДокументовОснований > 0, ЭтаФорма.ДокументыОснования[0].ДокументОснование, ""));
	
	РасхожденияСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(Объект);
	
	СтруктураДействий = РасхожденияКлиентСервер.СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваров();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);
	
	СформироватьСпособОтраженияРасхожденией();
	
	УстановитьВидимостьДоступность();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные) Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ТекущиеДанные.ЗаполненоПоОснованию
			И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(ТекущиеДанные.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Серия в строке из документа-основания не редактируется, добавьте новую строку.';uk='Серія в рядку з документа-підстави не редагується, додайте новий рядок.'"));
			Возврат;
		КонецЕсли;
	
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = Неопределено;
		ОповещениеПодбораСерий = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение",
		                                                  ЭтотОбъект,
		                                                  Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий));
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,
		            ПараметрыФормыУказанияСерий,
		            ЭтаФорма,
		            ,
		            ,
		            , 
		            ОповещениеПодбораСерий,
	                РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	ЗначениеВозврата = Результат;
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);
	РасхожденияКлиентСервер.УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьРасхождения");
	РасхожденияСервер.ОбработатьУказаниеСерий(ЭтаФорма, ПараметрыФормыУказанияСерий, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийМенеджераНачалоВыбора()

	РасхожденияКлиент.КомментарийНачалоВыбора(ЭтотОбъект,
	                                          "КомментарийМенеджера",
	                                          "ЕстьКомментарийМенеджера",
	                                          "ТоварыКомментарийМенеджераПодвал");

КонецПроцедуры

&НаКлиенте
Процедура КомментарийПолучателяНачалоВыбора()

	РасхожденияКлиент.КомментарийНачалоВыбора(ЭтотОбъект,
	                                          "КомментарийПолучателя",
	                                          "ЕстьКомментарийПолучателя",
	                                          "ТоварыКомментарийПолучателяПодвал");

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНазначениеОтправителя()
	
	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТовары.КодСтроки <> 0 Тогда
		СтрокаТовары.НазначениеОтправителя = СтрокаТовары.Назначение;
	КонецЕсли;
	
	ПересчитатьСтрокуИПоказателиФормы(СтрокаТовары);
	
КонецПроцедуры

#Область Серии

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормыУказанияСерий = НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект,
		ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	Если ТекущиеДанные.ЗаполненоПоОснованию Тогда
		ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества = Истина;
	КонецЕсли;
	
	Возврат ПараметрыФормыУказанияСерий;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.АктОРасхожденияхПослеПеремещения));
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
		ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ДокументОснованияДоступенДляВводаАкта(ДокументОснование)
	
	СтатусДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Статус");
	
	ИспользуютсяСерииНаСкладеПоступления = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.СкладПолучатель, Ложь);
	
	Если ИспользуютсяСерииНаСкладеПоступления.ИспользоватьСерииНоменклатуры 
		И СтатусДокументаОснования <> Перечисления.СтатусыПеремещенийТоваров.Принято Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСтрокуИПоказателиФормы(ТекущаяСтрока)
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьРасхождения");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	
	РасхожденияКлиентСервер.УправлениеДоступностью(ЭтотОбъект);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	УстановитьВидимость();
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()

	ВлияющиеРеквизитыДоступны = ЭтаФорма.ДокументыОснования.Количество() = 0;
	
	ПодборДокументовОснованийДоступен = (ЗначениеЗаполнено(Объект.Организация)
	                                    И ЗначениеЗаполнено(Объект.СкладОтправитель)
	                                    И ЗначениеЗаполнено(Объект.СкладПолучатель)
	                                    И ЗначениеЗаполнено(Объект.ХозяйственнаяОперация));
	
	ПодборТоваровДоступен = ПодборДокументовОснованийДоступен И (ЭтаФорма.ДокументыОснования.Количество() > 0);
	
	Элементы.Организация.ТолькоПросмотр			= НЕ ВлияющиеРеквизитыДоступны;
	Элементы.ОрганизацияПолучатель.ТолькоПросмотр	= НЕ ВлияющиеРеквизитыДоступны;
	Элементы.СкладОтправитель.ТолькоПросмотр		= НЕ ВлияющиеРеквизитыДоступны;
	Элементы.СкладПолучатель.ТолькоПросмотр		= НЕ ВлияющиеРеквизитыДоступны;
	Элементы.ХозяйственнаяОперация.ТолькоПросмотр	= НЕ ВлияющиеРеквизитыДоступны;
	
	Элементы.ИзменитьДокументыОснования.Доступность		= ПодборДокументовОснованийДоступен;
	Элементы.ТоварыЗаполнитьПоОснованиям.Доступность	= ПодборТоваровДоступен;
	Элементы.ТоварыЗагрузитьИзВнешнегоФайла.Доступность	= ПодборТоваровДоступен;
	Элементы.ТоварыОткрытьПодбор.Доступность			= ПодборТоваровДоступен;
	Элементы.ТоварыДобавить.Доступность					= ПодборТоваровДоступен;
	Элементы.Товары.Доступность							= ПодборТоваровДоступен;
	
	Элементы.ТоварыИзменитьДействие.Доступность = (Излишки > 0 ИЛИ Недостачи > 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	Элементы.ОрганизацияПолучатель.Видимость = 
		?(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаТоваров"),
		Истина, Ложь);

		Элементы.ТоварыДокументОснование.Видимость = ЭтаФорма.ДокументыОснования.Количество() > 1;

	// Видимость элементов серий
	Элементы.ТоварыСтатусУказанияСерий.Видимость  = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость         = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость                = ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям;
	
	Элементы.ТоварыПерезаполнитьПоПоступлению.Видимость = ИспользоватьОрдернуюСхемуСкладПолучатель;

КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборДокументовОснований(МассивДокументовОснований)
	
	// Первоначальное заполнение таблицы ДокументыОснования из полученного массива оснований
	ЗаполнитьДокументыОснования(МассивДокументовОснований);
	ЗаполнитьТоварыСписокВыбораПоДокументамОснованиям();
	
	ЗаполнитьПоОснованиям();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиям()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = Документы.АктОРасхожденияхПослеПеремещения.ТекстЗапросаПоОснованиюПеремещения();
	
	Запрос.УстановитьПараметр("Основания", ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Объект.Товары.Загрузить(РезультатЗапроса[1].Выгрузить());
	Объект.Серии.Загрузить(РезультатЗапроса[2].Выгрузить());

	РасхожденияСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(Объект);
	
	ЗаполнитьДокументыОснования(); // Дозаполнение уже заполенной таблицы ДокументыОснования заказами по результатам текущего запроса
	ЗаполнитьТоварыСписокВыбораПоДокументамОснованиям(); // Дозаполнение по результатам текущего запроса
	
	ЭтаФорма.ДокументыОснованиеПредставление = РасхожденияСервер.ФормированиеНадписиДокументыОснованиеПеремещение(
		Элементы.ДокументыОснованиеПредставление,
		ЭтаФорма.КоличествоДокументовОснований,
		Объект.Товары.Количество(),
		?(ЭтаФорма.КоличествоДокументовОснований > 0, ЭтаФорма.ДокументыОснования[0].ДокументОснование, ""));
	
	СтруктураДействий = РасхожденияКлиентСервер.СтруктураДействийЗаполнитьЗависимыеРеквизитыТоваров();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.АктОРасхожденияхПослеПеремещения));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеремещениеТоваров") Тогда
		Объект.ОрганизацияПолучатель = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.АктОРасхожденияхПослеПеремещения));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыОснования(МассивДокументовОснований = Неопределено)

	ЭтаФорма.КоличествоДокументовОснований = 0;
	
	ЕстьОснованиеПоЗаказам = Ложь;
	
	ЭтаФорма.ДокументыОснования.Очистить();
	
	Если МассивДокументовОснований = Неопределено Тогда
		МассивДокументовОснований = Объект.Товары.Выгрузить(,"ДокументОснование").ВыгрузитьКолонку("ДокументОснование");
	КонецЕсли;
	
	ТаблицаДокументовОснований = РасхожденияСервер.СформироватьТаблицуДокументовОснованийПеремещение(МассивДокументовОснований);
	ЭтаФорма.ДокументыОснования.Загрузить(ТаблицаДокументовОснований);

	ЭтаФорма.КоличествоДокументовОснований = ЭтаФорма.ДокументыОснования.Количество();
	
	ЗаполнитьПризнакОснованиеПоЗаказам();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакОснованиеПоЗаказам()
	
	Для Каждого СтрокаДокументыОснования Из ЭтаФорма.ДокументыОснования Цикл
		Если СтрокаДокументыОснования.ЗаказыОснования.Количество() > 0 Тогда
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ДокументОснование", СтрокаДокументыОснования.ДокументОснование));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ОснованиеПоЗаказам = Истина;
				ЕстьОснованиеПоЗаказам = Истина;
			КонецЦикла
		КонецЕсли;
	КонецЦикла

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыСписокВыбораПоДокументамОснованиям()

	Элементы.ТоварыДокументОснование.СписокВыбора.Очистить();
	МассивДокументовОснований = ЭтаФорма.ДокументыОснования.Выгрузить(, "ДокументОснование").ВыгрузитьКолонку("ДокументОснование");
	Элементы.ТоварыДокументОснование.СписокВыбора.ЗагрузитьЗначения(МассивДокументовОснований);

КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище, КэшированныеЗначения)

	РасхожденияСервер.ПолучитьЗагруженныеТоварыИзХранилища(Объект.Товары, ЭтаФорма.ДокументыОснования, АдресТоваровВХранилище);

	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);

	ЗаполнитьСтатусыУказанияСерийСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, КэшированныеЗначения);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, КэшированныеЗначения)

	РасхожденияСервер.ОбработкаВыбораПодборНаСервереПеремещение(Объект.Товары, ЭтаФорма.ДокументыОснования, ВыбранноеЗначение);

	РасхожденияСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(Объект);
	ЗаполнитьСтатусыУказанияСерийСервер();

	СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
	РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);

КонецПроцедуры

&НаСервере
Процедура СформироватьСпособОтраженияРасхожденией()
	
	РасхожденияСервер.СформироватьНадписьСпособаОтраженияРасхождений(Объект.Товары,
	                                                                 Элементы.НадписьРасхождения,
	                                                                 Элементы.ОформитьДокументы,
	                                                                 ТипЗнч(Объект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПриемкеСервер()
	
	ПараметрыИменПолей = Новый Структура();
	ПараметрыИменПолей.Вставить("ИмяПоляКоличествоПоРаспоряжению", "КоличествоПоДокументу");
	ПараметрыИменПолей.Вставить("ИмяПоляКоличествоДляИзменения", "Количество");
	
	ОрдернаяСхемаПриОтгрузке = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.СкладОтправитель);
	ОрдернаяСхемаПриПриемке = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.СкладПолучатель);
	
	ПараметрыЗаполнения = Документы.АктОРасхожденияхПослеПеремещения.ПараметрыЗаполненияДокумента();
	
	ТаблицаНакладная = Документы.АктОРасхожденияхПослеПеремещения.ДанныеТаблицыТоварыДокумента(Объект.Ссылка, ОрдернаяСхемаПриОтгрузке, ОрдернаяСхемаПриПриемке);
	
	МассивЗаказов = ТаблицаНакладная.ВыгрузитьКолонку("Распоряжение");
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗаказов);
	
	ТаблицаКОформлениюОстаток = РегистрыНакопления.ЗаказыНаПеремещение.КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов);
	ТаблицаКОформлениюОстаток.Индексы.Добавить(ПараметрыЗаполнения.КлючевыеПоля);
	
	ИсключаемыеНакладные = ТаблицаНакладная.ВыгрузитьКолонку("ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсключаемыеНакладные);
	
	ТаблицаОформлено = РегистрыНакопления.ТоварыКОформлениюПоступления.ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, ИсключаемыеНакладные, , Истина);
	
	ТаблицаПринято = РегистрыНакопления.ТоварыКОформлениюПоступления.ПринятоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, , Истина);
	
	// Получение разницы между ОтгруженоОрдерами и Накладными (кроме текущей)
	ТаблицаПолученоОстаток = НакладныеСервер.ВычестьТаблицу(ТаблицаПринято, ТаблицаОформлено, ПараметрыЗаполнения.КлючевыеПоля);
	
	ТаблицаПолученоОстаток = ДополнитьТаблицуСпособомСоединения(ТаблицаПолученоОстаток, ПараметрыУказанияСерий, Объект.СкладОтправитель, Объект.СкладПолучатель, ОрдернаяСхемаПриОтгрузке, ОрдернаяСхемаПриПриемке);
	
	ТаблицаПолученоОстаток.Индексы.Добавить(ПараметрыЗаполнения.КлючевыеПоля);
	
	// Разделение таблиц ТаблицаНакладная и ТаблицаПолученоОстаток на несколько по полю "СпособСоединения"
	ТаблицыНакладных = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаНакладная, "СпособСоединения");
	ТаблицыПолученных = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ТаблицаПолученоОстаток, "СпособСоединения");
	
	// Формирование структуры действий с разделенными таблицами
	ДействияСПолученнымиТаблицами = Новый Структура();
	
	Для Каждого КлючЗначение Из ТаблицыНакладных Цикл
		
		Ключ = КлючЗначение.Ключ.СпособСоединения;
		СтруктураДействий = Новый Структура("ТаблицаНакладная, ТаблицаПолученоОстаток", КлючЗначение.Таблица, ТаблицаПолученоОстаток.СкопироватьКолонки());
		ДействияСПолученнымиТаблицами.Вставить(Ключ, СтруктураДействий);
		
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ТаблицыПолученных Цикл
		
		Ключ = КлючЗначение.Ключ.СпособСоединения;
		
		Если ДействияСПолученнымиТаблицами.Свойство(Ключ) Тогда
			СтруктураДействий = ДействияСПолученнымиТаблицами[Ключ];
			СтруктураДействий.ТаблицаПолученоОстаток = КлючЗначение.Таблица;
		Иначе
			СтруктураДействий = Новый Структура("ТаблицаНакладная, ТаблицаПолученоОстаток", ТаблицаНакладная.СкопироватьКолонки(), КлючЗначение.Таблица);
			ДействияСПолученнымиТаблицами.Вставить(Ключ, СтруктураДействий);
		КонецЕсли;
		
	КонецЦикла;
	
	// Таблицы дополняемые по мере обработки каждого способа соединения
	ТаблицаСуществующихСтрокТЧТовары = ТаблицаНакладная.СкопироватьКолонки();
	ТаблицаСуществующихСтрокТЧТовары.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаНовыхСтрокТЧТовары = ТаблицаНакладная.СкопироватьКолонки();
	
	ТаблицаСуществующихСтрокТЧСерии = ТаблицаСуществующихСтрокТЧТовары.СкопироватьКолонки();
	ТаблицаНовыхСтрокТЧСерии = ТаблицаНакладная.СкопироватьКолонки();
	
	Для Каждого КлючЗначение Из ДействияСПолученнымиТаблицами Цикл
		
		Действие = КлючЗначение.Ключ;
		СтруктураДействий = КлючЗначение.Значение;
		
		КлючевыеПоля = РасхожденияСервер.КлючевыеПоляВЗависимостиОтДействия(Действие, ПараметрыЗаполнения.КлючевыеПоля);

		// ТаблицаПолученоОстаток будет уменьшена на количество из ТаблицаНакладная
		ТаблицаСуществующихСтрок = НакладныеСервер.МинимумТаблиц(СтруктураДействий.ТаблицаПолученоОстаток, СтруктураДействий.ТаблицаНакладная, КлючевыеПоля.КлючевыеПоляДляПоискаСуществующихСтрок, ПараметрыИменПолей);

		ТаблицаНовыхСтрок = ТаблицаНакладная.СкопироватьКолонки();
		ТаблицаНовыхСтрок = НакладныеСервер.РазвернутьПоКодамСтрок(ТаблицаНовыхСтрок, 
								СтруктураДействий.ТаблицаПолученоОстаток, 
								ТаблицаКОформлениюОстаток, 
								КлючевыеПоля.КлючевыеПоляДляПоискаНовыхСтрок, 
								Истина);
	
		// Отнесение новых строк на заказы и документы основания
		ПараметрыОтбора = Новый Структура("Заказ");
		Для Каждого Строка Из ТаблицаНовыхСтрок Цикл
			Если ТипЗнч(Строка.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				Строка.Заказ = Строка.Распоряжение;
				ПараметрыОтбора.Заказ = Строка.Распоряжение;
				СтрокиСДокументомОснованием = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиСДокументомОснованием.Количество() > 0 Тогда
					Строка.ДокументОснование = СтрокиСДокументомОснованием[0].ДокументОснование;
				КонецЕсли;
			Иначе
				Строка.ДокументОснование = Строка.Распоряжение;
			КонецЕсли;
		КонецЦикла;
		
		Документы.АктОРасхожденияхПослеПеремещения.ДополнитьСтрокиТаблицыПерезаполненияПоЗаказу(ТаблицаНовыхСтрок);
		РасхожденияСервер.ОтнестиНовыеСтрокиНаСуществующие(ТаблицаСуществующихСтрок, ТаблицаНовыхСтрок, КлючевыеПоля.КлючевыеПоляДляОтнесенияНовыхСтрок + ", КодСтроки");
		
		Если Действие = "А4" Тогда
			// Указание серий в отдельной таблице "Серии"
			
			// В таблицу "Серии" данные будут перенесены в неизменном виде
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСуществующихСтрок, ТаблицаСуществующихСтрокТЧСерии);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНовыхСтрок, ТаблицаНовыхСтрокТЧСерии);
			
			// В таблицу "Товары" необходимо перенести те же данные, но с пустой серией, сгруппированные по всем полям, и суммированные по "Количество" и "КоличествоПоДокументу"
			ГруппировочныеПоля = Документы.АктОРасхожденияхПослеПеремещения.СписокПолейТЧТоварыСтрокой();
			ГруппировочныеПоля = СтрЗаменить(ГруппировочныеПоля, "Серия,", "");
			ГруппировочныеПоля = СтрЗаменить(ГруппировочныеПоля, "Количество,", "");
			ГруппировочныеПоля = СтрЗаменить(ГруппировочныеПоля, "КоличествоПоДокументу,", "");
			ГруппировочныеПоля = СтрЗаменить(ГруппировочныеПоля, "КоличествоУпаковок,", "");
			ГруппировочныеПоля = СтрЗаменить(ГруппировочныеПоля, "КоличествоУпаковокПоДокументу,", "");
			
			ТаблицаСуществующихСтрок.Свернуть(ГруппировочныеПоля + ", ИндексСтроки", "Количество, КоличествоПоДокументу");
			ТаблицаНовыхСтрок.Свернуть(ГруппировочныеПоля, "Количество, КоличествоПоДокументу");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСуществующихСтрок, ТаблицаСуществующихСтрокТЧТовары);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНовыхСтрок, ТаблицаНовыхСтрокТЧТовары);
		
	КонецЦикла;
	
	ПараметрыЗаполнения.КлючевыеПоля = СтрЗаменить(ПараметрыЗаполнения.КлючевыеПоля, "Распоряжение, ", "");
	ПараметрыЗаполнения.КлючевыеПоля = ПараметрыЗаполнения.КлючевыеПоля + ", КодСтроки";
	
	ТЧТоварыПерезаполнена = РегистрыСведений.ДанныеВнутреннихДокументов.ПерезаполнитьТоварыНакладной(
		ТаблицаСуществующихСтрокТЧТовары, ТаблицаНовыхСтрокТЧТовары, Объект.Товары, 
			ПараметрыЗаполнения.КлючевыеПоля + ", " + ПараметрыЗаполнения.ДополнительныеПоляТаблицыДокумента, Ложь);
			
	ТЧСерииПерезаполнена = РегистрыСведений.ДанныеВнутреннихДокументов.ПерезаполнитьСерииНакладной(
		ТаблицаСуществующихСтрокТЧСерии, ТаблицаНовыхСтрокТЧСерии, Объект.Серии, 
			"Номенклатура, Характеристика, Назначение, Серия", Ложь);
	
	Если ТЧТоварыПерезаполнена Или ТЧСерииПерезаполнена Тогда
		
		// Обновление статусов указания серий.
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		НоменклатураСервер.ОчиститьНеиспользуемыеСерии(Объект, ПараметрыУказанияСерий);
		
		Документы.АктОРасхожденияхПослеПеремещения.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Объект.Товары, ПараметрыЗаполнения);
		РасхожденияСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(Объект);
	
		// Постобработка индивидуальная для документа
		СтруктураИтогов = РасхожденияКлиентСервер.РассчитатьИтоговыеКоличественныеПоказателиФормы(Объект.Товары);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураИтогов);
		РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениями);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДополнитьТаблицуСпособомСоединения(Таблица, ПараметрыУказанияСерий, СкладОтправитель, СкладПолучатель, ОрдернаяСхемаПриОтгрузке, ОрдернаяСхемаПриПриемке)
	
	// Поля ожидаемые в механизме заполнения статусов серий
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("НазначениеОтправителя", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Таблица.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки"));
	Таблица.Колонки.Добавить("СтатусУказанияСерий", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СтатусУказанияСерийОтправитель", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("СтатусУказанияСерийПолучатель", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.ПеремещениеТоваров"));
	Таблица.Колонки.Добавить("ЗаполненоПоОснованию", Новый ОписаниеТипов("Булево"));
	
	НомерСтроки = 1;
	Для Каждого Строка Из Таблица Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Получение статусов указания серий
	ОбъектДляЗаполненияСерий = Новый Структура();
	ОбъектДляЗаполненияСерий.Вставить("Товары", Таблица);
	ОбъектДляЗаполненияСерий.Вставить("Серии", Таблица.СкопироватьКолонки());
	ОбъектДляЗаполненияСерий.Вставить("СкладОтправитель", СкладОтправитель);
	ОбъектДляЗаполненияСерий.Вставить("СкладПолучатель", СкладПолучатель);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДляЗаполненияСерий, ПараметрыУказанияСерий);
	
	// Рассчет способа соединения
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Распоряжение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Назначение,
	|	Таблица.Серия,
	|	Таблица.Количество,
	|	ВЫБОР
	|		КОГДА &ОрдернаяСхемаПриОтгрузке
	|				И &ОрдернаяСхемаПриПриемке
	|				И Таблица.СтатусУказанияСерийОтправитель В (2, 4, 6, 8)
	|				И Таблица.СтатусУказанияСерийПолучатель В (0)
	|			ТОГДА ""А0""
	|		КОГДА &ОрдернаяСхемаПриПриемке
	|				И Таблица.СтатусУказанияСерийОтправитель В (0)
	|				И Таблица.СтатусУказанияСерийПолучатель В (0)
	|			ТОГДА ""А0""
	|		КОГДА НЕ &ОрдернаяСхемаПриОтгрузке
	|				И &ОрдернаяСхемаПриПриемке
	|				И Таблица.СтатусУказанияСерийОтправитель В (2, 4, 6, 8)
	|			ТОГДА ""А4""
	|		КОГДА &ОрдернаяСхемаПриПриемке
	|				И Таблица.СтатусУказанияСерийОтправитель В (2, 4, 6, 8)
	|				И Таблица.СтатусУказанияСерийПолучатель В (0, 14)
	|			ТОГДА ""А1""
	|		КОГДА &ОрдернаяСхемаПриПриемке
	|				И Таблица.СтатусУказанияСерийОтправитель В (10, 14)
	|				И Таблица.СтатусУказанияСерийПолучатель В (0, 14)
	|			ТОГДА ""А2""
	|		КОГДА &ОрдернаяСхемаПриПриемке
	|				И Таблица.СтатусУказанияСерийОтправитель В (0)
	|				И Таблица.СтатусУказанияСерийПолучатель В (14)
	|			ТОГДА ""А2""
	|		ИНАЧЕ ""А3""
	|	КОНЕЦ КАК СпособСоединения
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Таблица.Распоряжение     КАК Распоряжение,
	|	Таблица.Номенклатура     КАК Номенклатура,
	|	Таблица.Характеристика   КАК Характеристика,
	|	Таблица.Назначение       КАК Назначение,
	|	Таблица.Серия            КАК Серия,
	|	Таблица.Количество       КАК Количество,
	|	Таблица.СпособСоединения КАК СпособСоединения
	|ПОМЕСТИТЬ ВтСгруппированнаяТаблица
	|ИЗ
	|	ВтТовары КАК Таблица
	|ГДЕ
	|	Таблица.СпособСоединения <> ""А0""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Серии со способом соединения А0 не указываются в накладной, поэтому детализацию до серий нужно свернуть
	|ВЫБРАТЬ
	|	Таблица.Распоряжение     КАК Распоряжение,
	|	Таблица.Номенклатура     КАК Номенклатура,
	|	Таблица.Характеристика   КАК Характеристика,
	|	Таблица.Назначение       КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	СУММА(Таблица.Количество) КАК Количество,
	|	Таблица.СпособСоединения КАК СпособСоединения
	|ИЗ
	|	ВтТовары КАК Таблица
	|ГДЕ
	|	Таблица.СпособСоединения = ""А0""
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Распоряжение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Назначение,
	|	Таблица.СпособСоединения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Таблица.Распоряжение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Назначение,
	|	Таблица.Серия,
	|	Таблица.Количество,
	|	Таблица.СпособСоединения
	|ИЗ
	|	ВтСгруппированнаяТаблица КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпособСоединения";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица", ОбъектДляЗаполненияСерий.Товары);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриОтгрузке", ОрдернаяСхемаПриОтгрузке);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриПриемке", ОрдернаяСхемаПриПриемке);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура СкладПолучательПриИзмененииСервер()
	
	ПолучитьОрдерностьСкладаПолучателя();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОрдерностьСкладаПолучателя()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьОрдернуюСхемуСкладПолучатель = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.СкладПолучатель, Объект.Дата, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьТекстРасхождений(ТекстНаличиеРасхождений, СтрокСРасхождениям)
	
	Если СтрокСРасхождениям = 0 Тогда
		
		ТекстНаличиеРасхождений = НСтр("ru='Нет расхождений';uk='Немає розбіжностей'");
		
	Иначе
		
		ШаблонТекстНаличиеРасхождений = НСтр("ru='Имеются расхождения по %1 %2';uk='Є розбіжності по %1 %2'");
		
		СтрокИменительныйПадеж = НСтр("ru='позиции';uk='позиції'");
		СтрокРодительныйПадежЕдинственноеЧисло = НСтр("ru='позициям';uk='позиціях'");
		СтрокРодительныйПадежМножественноеЧисло = НСтр("ru='позициям';uk='позиціях'");
		
		ТекстСтрок = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(СтрокСРасхождениям, 
			СтрокИменительныйПадеж, 
			СтрокРодительныйПадежЕдинственноеЧисло, 
			СтрокРодительныйПадежМножественноеЧисло, 
			"ж");
		
		ШаблонТекстНаличиеРасхождений = СтрШаблон(ШаблонТекстНаличиеРасхождений, СтрокСРасхождениям, ТекстСтрок);
		
		ТекстНаличиеРасхождений = ШаблонТекстНаличиеРасхождений;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

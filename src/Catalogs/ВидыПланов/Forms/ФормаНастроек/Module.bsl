
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СтруктураНастроек") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.СтруктураНастроек,,"ДополнительныеПоля");
		
		ДополнительныеПоля.Загрузить(Параметры.СтруктураНастроек.ДополнительныеПоля.Выгрузить());
		
		Если Параметры.СтруктураНастроек.Владелец.Пустая() Тогда
			ВосстановитьНастройки();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		
		Если СмещениеПериода >= 0 Тогда
		
			НаправлениеСмещения = 1;
			СмещениеРедактируемое = СмещениеПериода;
		
		Иначе
		
			НаправлениеСмещения = -1;
			СмещениеРедактируемое = НаправлениеСмещения * СмещениеПериода;
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
	КонецЕсли;
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
	УстановитьВидимостьСтраницФормыИДоступностьЭлементов();

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив();
	
	Если Не (ПланироватьПоСумме и ВариантЗаполненияЦен = "ЦеныНоменклатуры" и ИспользоватьВидЦены) Тогда
		НепроверяемыеРеквизиты.Добавить("ВидЦены");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ВариантСмещенияПриИзменении(Элемент)
	
	ПриИзмененииСмещения(ЭтаФорма);
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СмещениеПродажиПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСмещенияПродажиПоКатегориямПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСмещенияСборкаПриИзменении(Элемент)
	
	ПриИзмененииСмещения(ЭтаФорма);
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СмещениеСборкаПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСмещенияПроизводствоПриИзменении(Элемент)
	
	ПриИзмененииСмещения(ЭтаФорма);
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СмещениеПроизводствоПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСмещенияЗакупкиПриИзменении(Элемент)
	
	ПриИзмененииСмещения(ЭтаФорма);
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СмещениеЗакупкиПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСмещенияПродажиПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСмещенияСборкаПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСмещенияПроизводствоПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСмещенияЗакупкиПриИзменении(Элемент)
	
	ОбновитьПериодПриИзмененииСмещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияЦенСоглашениеПриИзменении(Элемент)
	
	ПриИзмененииВариантаЦен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияЦенПартнерПриИзменении(Элемент)
	
	ПриИзмененииВариантаЦен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВидЦеныПриИзменении(Элемент)
	
	ВариантЗаполненияЦен = "ЦеныНоменклатуры";
	ПриИзмененииИспользоватьВидЦены(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВидЦеныЗакупкиПриИзменении(Элемент)
	
	ВариантЗаполненияЦен = "ЦеныНоменклатуры";
	ПриИзмененииИспользоватьВидЦены(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаПредставлениеЗакупкиНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьДиалогРедактированияФормулы();
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаПредставлениеПродажиНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьДиалогРедактированияФормулы();
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ФормулаПредставлениеСборкаНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьДиалогРедактированияФормулы();
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаПредставлениеПроизводствоНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьДиалогРедактированияФормулы();
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	
	СмещениеПериода = НаправлениеСмещения * СмещениеРедактируемое;
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);
	
	ВсеЗаполнено = ПроверитьЗаполнение();
	
	Если ВсеЗаполнено Тогда
		Закрыть(СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииСмещения(Форма)
	
	Если Форма.ВариантСмещения = "Произвольное" Тогда
		Форма.Элементы.СмещениеПродажиПоКатегориям.Доступность = Истина;
		Форма.Элементы.СмещениеПродажи.Доступность 		= Истина;
		Форма.Элементы.СмещениеСборка.Доступность 		= Истина;
		Форма.Элементы.СмещениеПроизводство.Доступность = Истина;
		Форма.Элементы.СмещениеЗакупки.Доступность 		= Истина;
		
		Форма.Элементы.НаправлениеСмещенияПродажиПоКатегориям.Доступность = Истина;
		Форма.Элементы.НаправлениеСмещенияПродажи.Доступность 		= Истина;
		Форма.Элементы.НаправлениеСмещенияСборка.Доступность 		= Истина;
		Форма.Элементы.НаправлениеСмещенияПроизводство.Доступность = Истина;
		Форма.Элементы.НаправлениеСмещенияЗакупки.Доступность 		= Истина;
	Иначе
		Форма.Элементы.СмещениеПродажиПоКатегориям.Доступность = Ложь;
		Форма.Элементы.СмещениеПродажи.Доступность 		= Ложь;
		Форма.Элементы.СмещениеСборка.Доступность 		= Ложь;
		Форма.Элементы.СмещениеПроизводство.Доступность = Ложь;
		Форма.Элементы.СмещениеЗакупки.Доступность 		= Ложь;
		
		Форма.Элементы.НаправлениеСмещенияПродажиПоКатегориям.Доступность = Ложь;
		Форма.Элементы.НаправлениеСмещенияПродажи.Доступность 		= Ложь;
		Форма.Элементы.НаправлениеСмещенияСборка.Доступность 		= Ложь;
		Форма.Элементы.НаправлениеСмещенияПроизводство.Доступность = Ложь;
		Форма.Элементы.НаправлениеСмещенияЗакупки.Доступность 		= Ложь;
	КонецЕсли;
	
	Если Форма.ВариантСмещения = "ПредыдущийПериод" Тогда
		Форма.СмещениеРедактируемое = 1;
		Форма.НаправлениеСмещения = -1;
	ИначеЕсли Форма.ВариантСмещения = "ПредыдущийГод" Тогда
		
		Форма.НаправлениеСмещения = -1;
		
		Если Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
			Форма.СмещениеРедактируемое = 12;
		ИначеЕсли Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
			Форма.СмещениеРедактируемое = ДеньГода(КонецГода(Форма.НачалоПериодаПлан));
		ИначеЕсли Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
			Форма.СмещениеРедактируемое = НеделяГода(КонецГода(Форма.НачалоПериодаПлан)) - 1;
		ИначеЕсли Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
			Форма.СмещениеРедактируемое = 36;
		ИначеЕсли Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
			Форма.СмещениеРедактируемое = 4;
		ИначеЕсли Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
			Форма.СмещениеРедактируемое = 2;
		ИначеЕсли Форма.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
			Форма.СмещениеРедактируемое = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПериодПриИзмененииСмещения(Форма) 

	Форма.НачалоПериодаСмещенный = ПересчитатьНачалоПериода(Форма.НачалоПериодаПлан, Форма.Периодичность, Форма.СмещениеРедактируемое, Форма.НаправлениеСмещения);
	Форма.ОкончаниеПериодаСмещенный = ПересчитатьОкончаниеПериода(Форма.ОкончаниеПериодаПлан, Форма.Периодичность, Форма.СмещениеРедактируемое, Форма.НаправлениеСмещения);
	
	УстановитьПериодПрописью(Форма.СмещениеПериода, Форма.Периодичность, Форма.ПериодичностьПредставление);
	
	Форма.ПериодСмещенныйПредставление = СформироватьПредставлениеПериода(Новый Структура("Периодичность, НачалоПериода, ОкончаниеПериода", Форма.Периодичность, Форма.НачалоПериодаСмещенный, Форма.ОкончаниеПериодаСмещенный));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредставлениеПериода(Параметры) 

	Представление = "";
	
	НачалоПериода 		= Параметры.НачалоПериода;
	ОкончаниеПериода	= Параметры.ОкончаниеПериода;
	Периодичность 		= Параметры.Периодичность;
	
	ПланированиеКлиентСервер.УстановитьНачалоОкончаниеПериодаПлана(Периодичность, НачалоПериода, ОкончаниеПериода);
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		
		Если НачалоМесяца(НачалоПериода) = НачалоМесяца(ОкончаниеПериода) Тогда
			Представление = Формат(НачалоПериода, "ДФ='ММММ гггг'");
		Иначе
			Представление = Формат(НачалоПериода, "ДФ='ММММ гггг'") + " - " + Формат(ОкончаниеПериода, "ДФ='ММММ гггг'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		Если НачалоДня(НачалоПериода) = НачалоДня(ОкончаниеПериода) Тогда
			Представление = Формат(НачалоПериода, "ДЛФ=DD");
		Иначе
			Представление = Формат(НачалоПериода, "ДЛФ=DD") + " - " + Формат(ОкончаниеПериода, "ДЛФ=DD");
		КонецЕсли;
		
	Иначе
		
		Представление = Формат(НачалоПериода, "ДЛФ=DD") + " - " + Формат(ОкончаниеПериода, "ДЛФ=DD");
		
	КонецЕсли;
	
	Возврат Представление;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьОкончаниеПериода(Знач НачалоПериода, Знач Периодичность, Знач Смещение, Знач НаправлениеСмещения)
	
	Смещение = НаправлениеСмещения * Смещение;
	
	Результат = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПериода, Периодичность, Смещение);
	
	Результат = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(Результат + 1, Периодичность);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьНачалоПериода(Знач НачалоПериода, Знач Периодичность, Знач Смещение, Знач НаправлениеСмещения)
	
	Смещение = НаправлениеСмещения * Смещение;
	
	Результат = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПериода, Периодичность, Смещение);
	
	Результат = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(Результат + 1, Периодичность);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПериодПрописью(Знач Смещение, Знач Периодичность, ПериодичностьПредставление)

	ПериодичностьПредставление = МониторингЦелевыхПоказателейКлиентСервер.ПериодПрописью(Смещение, Периодичность);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииВариантаЦен(Форма)
	
	Если Форма.ВариантЗаполненияЦен = "ЦеныНоменклатуры" Тогда
		Форма.Элементы.ВидЦеныПартнер.Доступность 	= Истина;
		Форма.Элементы.ВидЦеныСоглашение.Доступность= Истина;
		Форма.ИспользоватьВидЦены = Истина;
	Иначе
		Форма.Элементы.ВидЦеныПартнер.Доступность 	= Ложь;
		Форма.Элементы.ВидЦеныСоглашение.Доступность= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииИспользоватьВидЦены(Форма)
	
	Если Форма.ИспользоватьВидЦены Тогда
		Форма.Элементы.ВидЦеныПродажи.Доступность = Истина;
		Форма.Элементы.ВидЦеныЗакупки.Доступность = Истина;
	Иначе
		Форма.Элементы.ВидЦеныПродажи.Доступность = Ложь;
		Форма.Элементы.ВидЦеныЗакупки.Доступность = Ложь;
	КонецЕсли;
	
	СкорректироватьВариантЗаполненияЦен(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкорректироватьВариантЗаполненияЦен(Форма)

	Если Форма.ЗаполнятьПартнера и Форма.ВариантЗаполненияЦен = "ЦеныНоменклатурыПоставщиков" и не Форма.ЗаполнятьСоглашение Тогда
		Форма.ВариантЗаполненияЦен = "МинимальнаяЦенаПоставщика";
	ИначеЕсли Форма.ЗаполнятьСоглашение и Форма.ВариантЗаполненияЦен = "МинимальнаяЦенаПоставщика" Тогда
		Форма.ВариантЗаполненияЦен = "ЦеныНоменклатурыПоставщиков";
	ИначеЕсли Не Форма.ВариантЗаполненияЦен = "ЦеныНоменклатуры" и не Форма.ЗаполнятьПартнера и не Форма.ЗаполнятьСоглашение Тогда
		Форма.ВариантЗаполненияЦен = "ЦеныНоменклатуры";
	КонецЕсли;
	
	Если Форма.ВариантЗаполненияЦен = "ЦеныНоменклатуры" И (Форма.ЗаполнятьПартнера ИЛИ Форма.ЗаполнятьСоглашение) Тогда
		Форма.ИспользоватьВидЦены = Истина;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницФормыИДоступностьЭлементов()

	Если ТипПлана = Перечисления.ТипыПланов.ПланПродаж Тогда
		Элементы.ГруппаПланыИспользования.ТекущаяСтраница = Элементы.ГруппаПростойВариантЗаполненияПродажи;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
		Элементы.ГруппаПланыИспользования.ТекущаяСтраница = Элементы.ГруппаПростойВариантЗаполненияПродажиПоКатегориям;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
		Элементы.ГруппаПланыИспользования.ТекущаяСтраница = Элементы.ГруппаПростойВариантЗаполненияСборка;
	ИначеЕсли ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
		Элементы.ГруппаПланыИспользования.ТекущаяСтраница = Элементы.ГруппаПростойВариантЗаполненияЗакупки;
	КонецЕсли;
	
	Если ЗаполнятьПартнера Тогда
		Элементы.ГруппаСоставПродажи.ТекущаяСтраница = Элементы.ГруппаСоставПродажиПартнер;
		Элементы.ГруппаСоставЗакупки.ТекущаяСтраница = Элементы.ГруппаСоставЗакупкиПартнер;
		Если ЗаполнятьСоглашение Тогда
			Элементы.ГруппаЦеныЗакупкиСтраницы.ТекущаяСтраница = Элементы.ГруппаЦеныСоглашение;
		Иначе
			Элементы.ГруппаЦеныЗакупкиСтраницы.ТекущаяСтраница = Элементы.ГруппаЦеныПартнер;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСоставПродажи.ТекущаяСтраница = Элементы.ГруппаСоставПродажиБезДетализации;
		Элементы.ГруппаСоставЗакупки.ТекущаяСтраница = Элементы.ГруппаСоставЗакупкиБезДетализации;
		Элементы.ГруппаЦеныЗакупкиСтраницы.ТекущаяСтраница = Элементы.ГруппаВидЦеныЗакупки;
	КонецЕсли;
	
	Элементы.ГруппаЦеныПродажиСтраницы.ТекущаяСтраница = Элементы.ГруппаВидЦеныПродажи;
	
	Если Не ПланироватьПоСумме Тогда
		Элементы.ГруппаЦеныЗакупки.Заголовок = "";
		Элементы.ГруппаЦеныПродажи.Заголовок = "";
		Элементы.ГруппаЦеныЗакупкиСтраницы.ТекущаяСтраница = Элементы.ГруппаБезЦеныЗакупки;
		Элементы.ГруппаЦеныПродажиСтраницы.ТекущаяСтраница = Элементы.ГруппаБезЦеныПродажи;
	КонецЕсли;
	
	ПриИзмененииСмещения(ЭтаФорма);
	ПриИзмененииВариантаЦен(ЭтаФорма);
	ПриИзмененииИспользоватьВидЦены(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогРедактированияФормулы()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Расширенный",Истина);
	ПараметрыФормы.Вставить("ВключитьЗначение",Ложь);
	ПараметрыФормы.Вставить("Формула",?(Формула = НСтр("ru='Задать формулу';uk='Задати формулу'"),"", Формула));
	ПараметрыФормы.Вставить("Представление",?(ФормулаПредставление = ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы(),
		"", ФормулаПредставление));
	ПараметрыФормы.Вставить("Операнды",ПоместитьДополнительныеПоляВХранилище());
	ПараметрыФормы.Вставить("Операторы",АдресХранилищаДереваОператоров);
	ПараметрыФормы.Вставить("ТипПлана", ТипПлана);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадатьПроизвольнуюФормулу",ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения,Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьПроизвольнуюФормулу(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Формула = ?(ЗначениеЗаполнено(Результат.Формула), Результат.Формула, ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы());
	ФормулаПредставление = ?(ЗначениеЗаполнено(Результат.Представление) 
		и Формула <> ПланированиеКлиентСервер.ТекстУстановкиНовойФормулы(), Результат.Представление, Формула);

КонецПроцедуры

&НаСервере
Функция ПоместитьДополнительныеПоляВХранилище()
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДополнительныеПоля.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиРаботыПользователя" + ТипПлана, "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	УстановитьЗначениеНастройки("СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеНастройки(ИмяНастройки, Настройка)
	
	ЗначениеНастройкиИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиРаботыПользователя" + ТипПлана, ИмяНастройки, Настройка);
	Если ЗначениеНастройкиИзХранилища <> Неопределено Тогда
		Настройка = ЗначениеНастройкиИзХранилища;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

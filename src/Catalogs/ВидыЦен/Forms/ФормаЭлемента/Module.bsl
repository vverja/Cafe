
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	ИспользоватьНесколькоВидовЦен                 = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	ИспользоватьНесколькоВалют                    = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьПроизводство                      = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	ИспользоватьЦеновыеГруппы                     = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьПередачиТоваровМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	ИспользоватьКонкурентнуюРазведку              = ПолучитьФункциональнуюОпцию("ИспользоватьКонкурентнуюРазведку");
	
	
	Если Не ИспользоватьНесколькоВидовЦен Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = НСтр("ru='Параметры прайс-листа';uk='Параметри прайс-листа'");
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если ИспользоватьНесколькоВидовЦен Тогда
		// подсистема запрета редактирования ключевых реквизитов объектов
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	КонецЕсли;
	
	СоответствиеНастроек = Новый Структура;
	ПредыдущийСпособЗаданияЦены = Объект.СпособЗаданияЦены;
	ПредыдущаяСхемаКомпоновкиДанных = Объект.СхемаКомпоновкиДанных;
	ХранилищеНастроекКомпоновкиДанных = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных;
	ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
	ХранилищеСхемыКомпоновкиДанных = Объект.Ссылка.ХранилищеСхемыКомпоновкиДанных;
	
	СоответствиеСхемСКД = Новый Структура;
	Если Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
		СоответствиеСхемСКД.Вставить(СтрЗаменить(Строка(Объект.СпособЗаданияЦены)," ",""), "ЦеныПоступленияПредопределенный");
	Иначе
		СоответствиеСхемСКД.Вставить(СтрЗаменить(Строка(Объект.СпособЗаданияЦены)," ",""), Объект.СхемаКомпоновкиДанных);
	КонецЕсли;
	
	ИспользоватьРасширеннуюНастройкуОкругления = ИспользуютсяРасширенныеНастройкиОкругления(ЭтаФорма);
	ИспользоватьРасширенныеВозможностиЦенооборазования = ИспользуютсяРасширенныеВозможности(ЭтаФорма);
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	СпособЗаданияЦеныПриИзмененииНаСервере();
	НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);
	
	НастроитьФорму();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИспользоватьРасширенныеВозможностиЦенооборазования Тогда
		Если ТекущийОбъект.ПравилаОкругленияЦены.Количество() > 0 Тогда
			ТекущийОбъект.Округлять = Истина;
		Иначе
			ТекущийОбъект.Округлять = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийОбъект.Округлять И ТекущийОбъект.ПравилаОкругленияЦены.Количество() = 1
		И ТекущийОбъект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0
		И ТекущийОбъект.ПравилаОкругленияЦены[0].ПсихологическоеОкругление = 0 Тогда
		ТекущийОбъект.ТочностьОкругления = ТекущийОбъект.ПравилаОкругленияЦены[0].ТочностьОкругления;
	КонецЕсли;
	
	Если Не ТекущийОбъект.Округлять И ТекущийОбъект.ПравилаОкругленияЦены.Количество() > 0 Тогда
		ТекущийОбъект.ПравилаОкругленияЦены.Очистить();
		ТекущийОбъект.ТочностьОкругления = 0;
	КонецЕсли;
	
	ТекущийОбъект.ВлияющиеВидыЦен.Очистить();
	
	Если ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
		Или ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			Если ХранилищеСхемыКомпоновкиДанных <> Неопределено Тогда
				Если Не Ценообразование.ПроверитьСхемуКомпоновкиДанных(ХранилищеСхемыКомпоновкиДанных.Получить()) Тогда
					Отказ = Истина;
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо настроить схему компоновки данных для заполнения цен.';uk='Необхідно настроїти схему компонування даних для заповнення цін.'"), Объект.Ссылка,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных    = ХранилищеСхемыКомпоновкиДанных;
		
	ИначеЕсли ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			Для Каждого СтрокаТЧ Из ТекущийОбъект.ЦеновыеГруппы Цикл
				ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, СтрокаТЧ.Формула);
			КонецЦикла;
			
		КонецЕсли;
		
		ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, ТекущийОбъект.Формула);
		
		Если Не ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			Если ХранилищеСхемыКомпоновкиДанных <> Неопределено И ХранилищеСхемыКомпоновкиДанных.Получить() <> Неопределено Тогда
				Если Не Ценообразование.ПроверитьСхемуКомпоновкиДанных(ХранилищеСхемыКомпоновкиДанных.Получить()) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных    = ХранилищеСхемыКомпоновкиДанных;
		
	ИначеЕсли ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			Для Каждого СтрокаТЧ Из ТекущийОбъект.ЦеновыеГруппы Цикл
				ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, "["+СтрокаТЧ.БазовыйВидЦены.Идентификатор+"]");
			КонецЦикла;
			
		КонецЕсли;
		
		ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, "["+ТекущийОбъект.БазовыйВидЦены.Идентификатор+"]");
		
		Если Не ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			Если ХранилищеСхемыКомпоновкиДанных <> Неопределено И ХранилищеСхемыКомпоновкиДанных.Получить() <> Неопределено Тогда
				Если Не Ценообразование.ПроверитьСхемуКомпоновкиДанных(ХранилищеСхемыКомпоновкиДанных.Получить()) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных    = ХранилищеСхемыКомпоновкиДанных;
		
	ИначеЕсли ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			Если ХранилищеСхемыКомпоновкиДанных <> Неопределено И ХранилищеСхемыКомпоновкиДанных.Получить() <> Неопределено Тогда
				Если Не Ценообразование.ПроверитьСхемуКомпоновкиДанных(ХранилищеСхемыКомпоновкиДанных.Получить()) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных    = ХранилищеСхемыКомпоновкиДанных;
		
	ИначеЕсли ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
		
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
		
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИспользоватьНесколькоВидовЦен Тогда
		// подсистема запрета редактирования ключевых реквизитов объектов	
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	КонецЕсли;
	
	НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен") Тогда
		
		Если Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Объект.Формула, ПолучитьМассивБазовыхВидовЦенСервер(), "Объект.Формула") Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если ИспользоватьЦеновыеГруппы Тогда
		
			Если Объект.ЦеновыеГруппы.Количество() > 0 Тогда
				
				// Для корректного вычисления цен в таблице Формулы не должно быть дублей ценовых групп и пустых строк
				ТаблицаЦеновыхГрупп = Новый ТаблицаЗначений;
				ТаблицаЦеновыхГрупп.Колонки.Добавить("НомерСтроки",         Новый ОписаниеТипов("Число"));
				ТаблицаЦеновыхГрупп.Колонки.Добавить("ЦеноваяГруппа",       Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
				ТаблицаЦеновыхГрупп.Колонки.Добавить("Формула", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000)));
				
				Для Каждого СтрокаТЧ Из Объект.ЦеновыеГруппы Цикл
					ЗаполнитьЗначенияСвойств(ТаблицаЦеновыхГрупп.Добавить(), СтрокаТЧ);
				КонецЦикла;
				
				Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ВременнаяТаблицаЦеновыеГруппы.НомерСтроки         КАК НомерСтроки,
					|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа       КАК ЦеноваяГруппа,
					|	ВременнаяТаблицаЦеновыеГруппы.Формула КАК Формула
					|ПОМЕСТИТЬ
					|	ВременнаяТаблицаЦеновыеГруппы
					|ИЗ
					|	&ТаблицаЦеновыхГрупп КАК ВременнаяТаблицаЦеновыеГруппы
					|;
					|ВЫБРАТЬ
					|	МАКСИМУМ(ВременнаяТаблицаЦеновыеГруппы.НомерСтроки)    КАК НомерСтроки,
					|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа            КАК ЦеноваяГруппа
					|ИЗ
					|	ВременнаяТаблицаЦеновыеГруппы КАК ВременнаяТаблицаЦеновыеГруппы
					|ГДЕ
					|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
					|СГРУППИРОВАТЬ ПО
					|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа
					|ИМЕЮЩИЕ
					|	КОЛИЧЕСТВО (*) > 1
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки ВОЗР
					|;
					|");
					
				Запрос.УстановитьПараметр("ТаблицаЦеновыхГрупп", ТаблицаЦеновыхГрупп);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
				
					ТекстОшибки = НСтр("ru='Ценовая группа ""%ЦеноваяГруппа%"" повторяется';uk='Цінова група ""%ЦеноваяГруппа%"" повторюється'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Выборка.ЦеноваяГруппа);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						Объект.Ссылка,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Формулы", Выборка.НомерСтроки, "ЦеноваяГруппа"),
						,
						Отказ);
				
				КонецЦикла;
				
			КонецЕсли;
			
			ТекИндекс = 0;
			Для Каждого Формула Из Объект.ЦеновыеГруппы Цикл
				
				ТекстОшибки = НСтр("ru='В формуле для ценовой группы ""%ЦеноваяГруппа%"" обнаружены ошибки';uk='У формулі для цінової групи ""%ЦеноваяГруппа%"" виявлені помилки'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Формула.ЦеноваяГруппа);
				
				Если Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула.Формула, ПолучитьМассивБазовыхВидовЦенСервер(), "Объект.Формулы[" + ТекИндекс + "].Формула", ТекстОшибки) Тогда
					Отказ = Истина;
				КонецЕсли;
				ТекИндекс = ТекИндекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособЗаданияЦеныПриИзменении(Элемент)
	
	НастроитьВидимостьЭлементовФормы(ЭтаФорма);
	
	СпособЗаданияЦеныПриИзмененииНаСервере();
	
	ПредыдущийСпособЗаданияЦены = Объект.СпособЗаданияЦены;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьПредлагаемоеЗначениеИдентификатора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаЦеныПриИзменении(Элемент)
	
	НастроитьТаблицуПравилОкругления();
	НастроитьДоступностьЭлементовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьОкругленияУпрощенноПриИзменении(Элемент)
	
	ТочностьОкругленияУпрощенноПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьПриИзменении(Элемент)
	
	ТочностьОкругленияУпрощенноПриИзмененииНаКлиенте();
	НастроитьВидимостьДоступностьЭлементовНастройкиОкругления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОкругленияПриИзменении(Элемент)
	НастроитьТаблицуПравилОкругления();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормулы

&НаКлиенте
Процедура ФормулыФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка    = Ложь;
	РезультатРедактирования = Неопределено;

	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", 
		ПолучитьПараметрыФормыРедактированияЦены(Элементы.Формулы.ТекущиеДанные.Формула), Элемент,,,, Новый ОписаниеОповещения("ФормулыФормулаНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыФормулаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатРедактирования = Результат;
    
    Если РезультатРедактирования <> Неопределено Тогда
        Элементы.Формулы.ТекущиеДанные.Формула = РезультатРедактирования;
        Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаОкругленияЦены

&НаКлиенте
Процедура ПравилаОкругленияЦеныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если Объект.ПравилаОкругленияЦены.Количество() > 1 Тогда
			
			БазовоеЗначениеГраницы = Объект.ПравилаОкругленияЦены[Объект.ПравилаОкругленияЦены.Количество() - 2].НижняяГраницаДиапазонаЦен ;
			
			Если Не ЗначениеЗаполнено(БазовоеЗначениеГраницы) Тогда
				БазовоеЗначениеГраницы = 1;
			КонецЕсли;
			
			Элемент.ТекущиеДанные.НижняяГраницаДиапазонаЦен = БазовоеЗначениеГраницы * 10;
			
		КонецЕсли;
		
		НастроитьТаблицуПравилОкругления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НижняяГраницаДиапазонаЦенПриИзменении(Элемент)
	
	НастроитьТаблицуПравилОкругления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОчиститьСообщения();
	
	Если Не ОтменаРедактирования Тогда
		
		Для Каждого СтрокаПравилОкругления Из Объект.ПравилаОкругленияЦены Цикл
			
			Если СтрокаПравилОкругления <> Элемент.ТекущиеДанные 
				И СтрокаПравилОкругления.НижняяГраницаДиапазонаЦен = Элемент.ТекущиеДанные.НижняяГраницаДиапазонаЦен Тогда
				
				Сообщение = НСтр("ru='Для диапазона от %НижняяГраница% уже заданы правила округления.';uk='Для діапазону від %НижняяГраница% вже задані правила округлення.'");
				ЗначениеНижнейГраницы = Элемент.ТекущиеДанные.НижняяГраницаДиапазонаЦен;
				
				Если ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
					ЗначениеНижнейГраницы = Строка(ЗначениеНижнейГраницы) + " " + Объект.ВалютаЦены;
				КонецЕсли;
				
				Сообщение = СтрЗаменить(Сообщение, "%НижняяГраница%", ЗначениеНижнейГраницы);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, Объект.Ссылка, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПравилаОкругленияЦены", Объект.ПравилаОкругленияЦены.Индекс(Элемент.ТекущиеДанные) + 1, "НижняяГраницаДиапазонаЦен"),, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПослеУдаления(Элемент)
	
	НастроитьТаблицуПравилОкругления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПриИзменении(Элемент)
	
	НастроитьТаблицуПравилОкругления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанных(Команда)
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru='Настройка схемы компоновки данных для вида цены ""%1""';uk='Настройка схеми компонування даних для виду ціни ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Объект.Наименование);
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();
	
	АдресХранилищаНастройкиКомпоновщика = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеЗагружатьСхемуКомпоновкиДанныхИзФайла,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|УникальныйИдентификатор,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|Заголовок",
			Истина,
			Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаЦенуПоступления"),
			Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаЦенуПоступления"),
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных),,,,, Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение", ЭтотОбъект, Новый Структура("Адреса", Адреса)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Адреса = ДополнительныеПараметры.Адреса;
    
    
    АдресХранилищаНастройкиКомпоновщика = Результат;
    
    Если ЗначениеЗаполнено(АдресХранилищаНастройкиКомпоновщика) Тогда
        ПрименитьИзмененияКСхемеКомпоновкиДанных(Адреса.СхемаКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормул(Команда)
	
	РезультатРедактирования = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", 
		ПолучитьПараметрыФормыРедактированияЦены(Объект.Формула), Элементы.Формула,,,, Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатРедактирования = Результат;
    
    Если РезультатРедактирования <> Неопределено Тогда
        Объект.Формула = РезультатРедактирования;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулы(Команда)
	
	ОчиститьСообщения();
	
	ОбнаруженыОшибки = Ложь;
	Если ЗначениеЗаполнено(Объект.Формула) Тогда
		Если Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Объект.Формула, ПолучитьМассивБазовыхВидовЦен(), "Объект.Формула") Тогда
			ОбнаруженыОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Формула Из Объект.ЦеновыеГруппы Цикл
		ИндексЭлемента = Объект.ЦеновыеГруппы.Индекс( Объект.ЦеновыеГруппы.НайтиПоИдентификатору(Элементы.Формулы.ТекущиеДанные.ПолучитьИдентификатор()));
		Если Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула.Формула, ПолучитьМассивБазовыхВидовЦен(), "Объект.ЦеновыеГруппы[" + ИндексЭлемента + "].Формула") Тогда
			ОбнаруженыОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбнаруженыОшибки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='В формулах ошибок не обнаружено';uk='У формулах помилок не виявлено'"),
			,
			,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулТекущейСтроки(Команда)
	
	Если Элементы.Формулы.ТекущиеДанные <> Неопределено Тогда
		
		РезультатРедактирования = Неопределено;

		
		ОткрытьФорму("ОбщаяФорма.КонструкторФормул", 
			ПолучитьПараметрыФормыРедактированияЦены(Элементы.Формулы.ТекущиеДанные.Формула), Элементы.Формулы.ТекущиеДанные.Формула,,,, Новый ОписаниеОповещения("КонструкторФормулТекущейСтрокиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулТекущейСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатРедактирования = Результат;
    
    Если РезультатРедактирования <> Неопределено Тогда
        Элементы.Формулы.ТекущиеДанные.Формула = РезультатРедактирования;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонструкторОкругления()
	
	СтрокаПравилОкругления = Элементы.ПравилаОкругленияЦены.ТекущиеДанные;
	
	Если СтрокаПравилОкругления = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'"));
		Возврат;
	КонецЕсли;
	
	ВерхняяГраницаДиапазона  = ВерхняяГраницаДиапазонаЦен(СтрокаПравилОкругления);
	ИдентификаторСтрокиПравилОкругления = СтрокаПравилОкругления.ПолучитьИдентификатор();

	Если ЗначениеЗаполнено(СтрокаПравилОкругления.ТочностьОкругления)
		И (СтрокаПравилОкругления.ТочностьОкругления < ВерхняяГраницаДиапазона)
			Или ВерхняяГраницаДиапазона = -1 Тогда
		ВерхняяГраницаДиапазона = СтрокаПравилОкругления.ТочностьОкругления;
	КонецЕсли;
	
	РезультатРедактирования = Неопределено;

	
	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаКонструктораОкругления", 
		Новый Структура("ТочностьОкругления, ВариантОкругления, ПсихологическоеОкругление, ГраницаДиапазонаЦен, ПримерЧисло",
			СтрокаПравилОкругления.ТочностьОкругления,
			Объект.ВариантОкругления,
			СтрокаПравилОкругления.ПсихологическоеОкругление,
			ВерхняяГраницаДиапазона,
			СтрокаПравилОкругления.НижняяГраницаДиапазонаЦен
		),,,,, Новый ОписаниеОповещения("КонструкторОкругленияЗавершение", ЭтотОбъект, Новый Структура("СтрокаПравилОкругления", СтрокаПравилОкругления)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторОкругленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтрокаПравилОкругления = ДополнительныеПараметры.СтрокаПравилОкругления;
    
    
    РезультатРедактирования = Результат;
    
    Если РезультатРедактирования <> Неопределено Тогда
        СтрокаПравилОкругления.ПсихологическоеОкругление = РезультатРедактирования.ПсихологическоеОкругление;
        СтрокаПравилОкругления.ТочностьОкругления = РезультатРедактирования.ТочностьОкругления;
        НастроитьТаблицуПравилОкругления();
    КонецЕсли;

КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРасширенныйРежим(Команда)
	
	ИспользоватьРасширенныеВозможностиЦенооборазования = Истина;
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРасширенныйРежим(Команда)
	
	Если ИспользуютсяРасширенныеВозможности(ЭтаФорма) Тогда
		ТекстВопроса = НСтр("ru='Расширенные настройки будут удалены, продолжить?';uk='Розширені настройки будуть вилучені, продовжити?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыключитьРасширенныйРежимЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыключитьРасширенныйРежимФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРасширенныйРежимЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ВыключитьРасширенныйРежимФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРасширенныйРежимФрагмент()
	
	Если Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ")
		ИЛИ Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен") Тогда
		Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную");
		СпособЗаданияЦеныПриИзмененииНаСервере();
	КонецЕсли;
	
	Если ИспользуютсяРасширенныеНастройкиОкругления(ЭтаФорма) Тогда
		Объект.ТочностьОкругления = Объект.ПравилаОкругленияЦены[0].ТочностьОкругления;
	Иначе
		Если Объект.ПравилаОкругленияЦены.Количество() > 0 Тогда
			Объект.ТочностьОкругления = Объект.ПравилаОкругленияЦены[0].ТочностьОкругления;
		Иначе
			Объект.ТочностьОкругления = 0;
		КонецЕсли;
	КонецЕсли;
	Объект.Округлять = Объект.ПравилаОкругленияЦены.Количество() > 0;
	Объект.ПравилаОкругленияЦены.Очистить();
	ТочностьОкругленияУпрощенноПриИзмененииНаКлиенте();
	НастроитьВидимостьДоступностьЭлементовНастройкиОкругления(ЭтаФорма);
	
	Если Объект.ПорогиСрабатывания.Количество() > 0 Тогда
		Объект.ПорогиСрабатывания.Очистить();
	КонецЕсли;
	
	Если Объект.ЦеновыеГруппы.Количество() > 0 Тогда
		Объект.ЦеновыеГруппы.Очистить();
	КонецЕсли;
	
	Объект.ПорогСрабатывания = 0;
	
	ОчиститьНастройкиКомпоновкиДанных();
	
	ИспользоватьРасширенныеВозможностиЦенооборазования = Ложь;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаКомпоновкиДанных.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаКомпоновкиДанных1.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаКомпоновкиДанных2.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПроизвольныеСхемыКомпоновкиДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СпособЗаданияЦеныПриИзмененииНаСервере()
	
	МассивСпособыЗаданияЦеныЗаполнятьПоДаннымИБ = Новый Массив;
	МассивСпособыЗаданияЦеныЗаполнятьПоДаннымИБ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ"));
	МассивСпособыЗаданияЦеныЗаполнятьПоДаннымИБ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении"));
	МассивСпособыЗаданияЦеныЗаполнятьПоДаннымИБ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаЦенуПоступления"));
	
	МассивСпособыЗаданияЦеныПрочее = Новый Массив;
	МассивСпособыЗаданияЦеныПрочее.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную"));
	МассивСпособыЗаданияЦеныПрочее.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен"));
	МассивСпособыЗаданияЦеныПрочее.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен"));
	
	Значение = Неопределено;
	Если СоответствиеСхемСКД.Свойство(СтрЗаменить(Строка(Объект.СпособЗаданияЦены)," ",""), Значение) Тогда
		Объект.СхемаКомпоновкиДанных = Значение;
	Иначе
		Если МассивСпособыЗаданияЦеныПрочее.Найти(Объект.СпособЗаданияЦены) <> Неопределено Тогда
			Объект.СхемаКомпоновкиДанных = "Типовой";
		Иначе
			Объект.СхемаКомпоновкиДанных = "ЦеныПоступленияПредопределенный";
		КонецЕсли;
	КонецЕсли;
	
	Если    Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен")
		ИЛИ Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен") Тогда
		Объект.УстанавливатьЦенуПриВводеНаОсновании = Ложь;
		Элементы.УстанавливатьЦенуПриВводеНаОсновании.ТолькоПросмотр = Истина;
	Иначе
		Если НЕ Элементы.Округлять.ТолькоПросмотр Тогда
			Элементы.УстанавливатьЦенуПриВводеНаОсновании.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СхемаКомпоновкиДанныхПриИзмененииНаСервере();
	
	Если Не СтраницаПравилРасчетаИнициализирована
		И (Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
		ИЛИ Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен
		ИЛИ Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления) Тогда
		
		ИнициализироватьСтраницуПравилРасчета(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СхемаКомпоновкиДанныхПриИзмененииНаСервере()
	
	СохранитьНастройки();
	
	Ключ = Объект.СхемаКомпоновкиДанных + СтрЗаменить(Строка(Объект.СпособЗаданияЦены)," ","");
	
	АдресВоВременномХранилище = Неопределено;
	Если СоответствиеНастроек.Свойство(Ключ, АдресВоВременномХранилище) И ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ХранилищеНастроекКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Иначе
		ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
	
	ПредыдущаяСхемаКомпоновкиДанных = Объект.СхемаКомпоновкиДанных;
	
	СоответствиеСхемСКД.Вставить(СтрЗаменить(Строка(Объект.СпособЗаданияЦены)," ",""), Объект.СхемаКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаКомпоновкиДанныхПриИзменении(Элемент)
	
	СхемаКомпоновкиДанныхПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьОкругленияУпрощенноПриИзмененииНаКлиенте()
	
	Если НЕ ИспользоватьРасширеннуюНастройкуОкругления Тогда
		Объект.ПравилаОкругленияЦены.Очистить();
		Если Объект.Округлять Тогда
			НоваяСтрока = Объект.ПравилаОкругленияЦены.Добавить();
			НоваяСтрока.ТочностьОкругления = Объект.ТочностьОкругления;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТочностьОкругленияУпрощенно.Доступность = Объект.Округлять;
	Элементы.ВариантОкругленияУпрощенно.Доступность = Объект.Округлять;
	
	НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОчиститьНастройкиКомпоновкиДанных()
	
	ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	Ключ = ПредыдущаяСхемаКомпоновкиДанных + СтрЗаменить(Строка(ПредыдущийСпособЗаданияЦены)," ","");
	
	АдресВоВременномХранилище = Неопределено;
	АдресВоВременномХранилище = СоответствиеНастроек.Свойство(Ключ, АдресВоВременномХранилище);
	
	Если ХранилищеНастроекКомпоновкиДанных = Неопределено Тогда
		ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
			ХранилищеНастроекКомпоновкиДанных,
			АдресВоВременномХранилище);
	Иначе
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
			ХранилищеНастроекКомпоновкиДанных,
			УникальныйИдентификатор);
	КонецЕсли;
	
	СоответствиеНастроек.Вставить(Ключ, АдресВоВременномХранилище);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	НастроитьВидимостьЭлементовФормы(ЭтаФорма);
	НастроитьДоступностьЭлементовФормы(ЭтаФорма);
	
	Элементы.СпособЗаданияЦены.СписокВыбора.Очистить();
	Элементы.СпособЗаданияЦены.СписокВыбора.Добавить(Перечисления.СпособыЗаданияЦен.Вручную);
	
	Если ИспользоватьНесколькоВидовЦен Тогда
		Элементы.СпособЗаданияЦены.СписокВыбора.Добавить(Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен);
	КонецЕсли;
	
	Элементы.СпособЗаданияЦены.СписокВыбора.Добавить(Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления);
	
	Если ИспользоватьРасширенныеВозможностиЦенооборазования
		И ИспользоватьНесколькоВидовЦен Тогда
		Элементы.СпособЗаданияЦены.СписокВыбора.Добавить(Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен);
	КонецЕсли;
	
	Если ИспользоватьРасширенныеВозможностиЦенооборазования Тогда
		Элементы.СпособЗаданияЦены.СписокВыбора.Добавить(Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ);
	КонецЕсли;
	
	Элементы.Идентификатор.Видимость = ИспользоватьНесколькоВидовЦен;
	
	МассивРасширенныйНаборПредопределенныхМакетов = Новый Массив;
	МассивРасширенныйНаборПредопределенныхМакетов.Добавить("СебестоимостьИПроцентИнтеркампаниПредопределенный");
	МассивРасширенныйНаборПредопределенныхМакетов.Добавить("СебестоимостьИПроцентОтПрибылиИнтеркампаниПредопределенный");
	МассивРасширенныйНаборПредопределенныхМакетов.Добавить("МаксимальныеЦеныКонкурентовПредопределенный");
	МассивРасширенныйНаборПредопределенныхМакетов.Добавить("СредниеЦеныКонкурентовПредопределенный");
	МассивРасширенныйНаборПредопределенныхМакетов.Добавить("МинимальныеЦеныКонкурентовПредопределенный");
	
	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Очистить();
	Элементы.СхемаКомпоновкиДанных1.СписокВыбора.Очистить();
	Элементы.СхемаКомпоновкиДанных2.СписокВыбора.Очистить();
	
	// Заполнение списка схем компоновки данных
	ПризнакПредопределенногоМакета = Врег("Предопределенный");
	ДлинаПризнакаПредопределенногоМакета = СтрДлина(ПризнакПредопределенногоМакета);
	Для каждого Макет из Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).Макеты Цикл
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Если НЕ ИспользоватьПередачиТоваровМеждуОрганизациями
				И (Макет.Имя = "СебестоимостьИПроцентИнтеркампаниПредопределенный"
				ИЛИ Макет.Имя = "СебестоимостьИПроцентОтПрибылиИнтеркампаниПредопределенный") Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ИспользоватьКонкурентнуюРазведку
				И (Макет.Имя = "МаксимальныеЦеныКонкурентовПредопределенный"
				ИЛИ Макет.Имя = "СредниеЦеныКонкурентовПредопределенный"
				ИЛИ Макет.Имя = "МинимальныеЦеныКонкурентовПредопределенный") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакета)) = ПризнакПредопределенногоМакета Тогда
				
				Если Не ИспользоватьРасширенныеВозможностиЦенооборазования
					И МассивРасширенныйНаборПредопределенныхМакетов.Найти(Макет.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
				
			Иначе
				
				ПризнакПредопределенногоМакетаОтбор = Врег("Типовой");
				ДлинаПризнакаПредопределенногоМакетаОтбор = СтрДлина(ПризнакПредопределенногоМакетаОтбор);
				Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакетаОтбор)) = ПризнакПредопределенногоМакетаОтбор Тогда
					Элементы.СхемаКомпоновкиДанных1.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
					Элементы.СхемаКомпоновкиДанных2.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИспользоватьПроизвольныеСхемыКомпоновкиДанных = Не ОбщегоНазначенияПовтИсп.РазделениеВключено() И ИспользоватьРасширенныеВозможностиЦенооборазования;
	Если ИспользоватьПроизвольныеСхемыКомпоновкиДанных Тогда
		
		ПредставлениеПроизвольнойСхемы = НСтр("ru='Произвольный';uk='Довільний'");
		Элементы.СхемаКомпоновкиДанных. СписокВыбора.Добавить("", ПредставлениеПроизвольнойСхемы);
		Элементы.СхемаКомпоновкиДанных1.СписокВыбора.Добавить("", ПредставлениеПроизвольнойСхемы);
		Элементы.СхемаКомпоновкиДанных2.СписокВыбора.Добавить("", ПредставлениеПроизвольнойСхемы);
	
	КонецЕсли;
	
	// Формирование списка выбора для поля ТочностьОкругленияУпрощенно
	Элементы.ТочностьОкругленияУпрощенно.СписокВыбора.Очистить();
	ЗначениеОкругления             = 0.01;
	ЧетноеПриращение               = Ложь;
	МаксимальноеЗначениеОкругления = 1000;
	ГраницаДиапазонаЦен            = -1;
	
	Пока ЗначениеОкругления <= МаксимальноеЗначениеОкругления 
		И (ЗначениеОкругления <= ГраницаДиапазонаЦен Или ГраницаДиапазонаЦен < 0) Цикл
		
		Элементы.ТочностьОкругленияУпрощенно.СписокВыбора.Добавить(ЗначениеОкругления);
		ЗначениеОкругления = ЗначениеОкругления * ?(ЧетноеПриращение, 2, 5);
		ЧетноеПриращение   = Не ЧетноеПриращение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьЭлементовФормы(Форма)
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеНастройкиОкругления(Форма)
	
	ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	
	Если Форма.Объект.ПравилаОкругленияЦены.Количество() = 1
		И Форма.Объект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0
		И Форма.Объект.ПравилаОкругленияЦены[0].ПсихологическоеОкругление = 0 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	ИначеЕсли Форма.Объект.ПравилаОкругленияЦены.Количество() >= 1 Тогда
		ИспользоватьРасширеннуюНастройкуОкругления = Истина;
	Иначе
		ИспользоватьРасширеннуюНастройкуОкругления = Ложь;
	КонецЕсли;
	
	Возврат ИспользоватьРасширеннуюНастройкуОкругления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеВозможности(Форма)
	
	ИспользоватьРасширенныеВозможности = Ложь;
	
	Если ИспользуютсяРасширенныеНастройкиОкругления(Форма) Тогда
		ИспользоватьРасширенныеВозможности = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.СхемаКомпоновкиДанных) ИЛИ Форма.ИспользуетсяПроизвольныйОтбор Тогда
		ИспользоватьРасширенныеВозможности = Истина;
	КонецЕсли;
	
	Если Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ")
		ИЛИ Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен") Тогда
		ИспользоватьРасширенныеВозможности = Истина;
	КонецЕсли;
	
	Если Форма.Объект.ПорогиСрабатывания.Количество() > 0 ИЛИ Форма.Объект.ПорогСрабатывания <> 0 Тогда
		ИспользоватьРасширенныеВозможности = Истина;
	КонецЕсли;
	
	Если Форма.Объект.ЦеновыеГруппы.Количество() > 0 Тогда
		ИспользоватьРасширенныеВозможности = Истина;
	КонецЕсли;
	
	Возврат ИспользоватьРасширенныеВозможности;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастроитьВидимостьЭлементовФормы(ЭтаФорма);
	НастроитьДоступностьЭлементовФормы(ЭтаФорма);
	НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) ИЛИ ХранилищеСхемыКомпоновкиДанных = Неопределено Тогда
		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Справочники.ВидыЦен.СформироватьНовуюСхемуКомпоновкиДанных();
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Функция ПолучитьXML(Значение)
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

&НаСервере
Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных)
	
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
		
		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных
		Если ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище)) Тогда
			Объект.СхемаКомпоновкиДанных   = "";
			ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище));
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	Иначе
		
		Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСтраницуПравилРасчета(ИнициализироватьОсновнуюФормулу)
	
	Если Не СтраницаПравилРасчетаИнициализирована Тогда
		
		ЗаполнитьТаблицуБазовыхЦен();
		ПостроитьДеревоОператоров();
		
		СтраницаПравилРасчетаИнициализирована = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуБазовыхЦен()
	
	ЗапросРазрешенныеВидыЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыЦен.Ссылка          КАК Ссылка,
		|	ВидыЦен.Идентификатор   КАК Идентификатор,
		|	ВидыЦен.ПометкаУдаления КАК ПометкаУдаления,
		|	ВЫБОР КОГДА ВидыЦен.Ссылка НЕ В (&РазрешенныеВидыЦен) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК ЗапрещенныйВидЦены,
		|	ВидыЦен.ВлияющиеВидыЦен.(
		|		ВлияющийВидЦен      КАК ВлияющийВидЦен
		|	)
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Ссылка <> &ТекущаяЦена");
		
	Запрос.УстановитьПараметр("ТекущаяЦена", Объект.Ссылка);
	Запрос.Параметры.Вставить("РазрешенныеВидыЦен", ЗапросРазрешенныеВидыЦен.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить();
	
	ТекущийМассив = Новый Массив();
	ТекущийМассив.Добавить(Объект.Ссылка);
	
	Пока ТекущийМассив.Количество() > 0 Цикл
		
		МассивУдаляемых = Новый Массив();
		
		Для Каждого СтрокаТаблицы Из ТаблицаВидовЦен Цикл
			
			Для Каждого ВидЦены Из ТекущийМассив Цикл
				
				Если СтрокаТаблицы.ВлияющиеВидыЦен.Найти(ВидЦены, "ВлияющийВидЦен") <> Неопределено ИЛИ СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
					
					МассивУдаляемых.Добавить(СтрокаТаблицы);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТекущийМассив.Очистить();
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемых Цикл
			
			ТекущийМассив.Добавить(УдаляемаяСтрока.Ссылка);
			ТаблицаВидовЦен.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаВидовЦен.Колонки.Удалить(ТаблицаВидовЦен.Колонки.ВлияющиеВидыЦен);
	ЗначениеВРеквизитФормы(ТаблицаВидовЦен, "ДоступныеБазовыеВидыЦен");
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоОператоров()
	
	ПараметрыОператоров = Новый Структура;
	ПараметрыОператоров.Вставить("СтандартныеОператоры", Истина);
	ПараметрыОператоров.Вставить("ЛогическиеОператоры", Истина);
	ПараметрыОператоров.Вставить("Функции", Истина);
	
	АдресХранилищаДереваОператоров = РаботаСФормулами.ПостроитьДеревоОператоров(ПараметрыОператоров, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, Формула)
	
	МассивЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формула, "[");
	
	Для Индекс = 1 По МассивЭлементов.Количество() - 1 Цикл
		
		Если ЗначениеЗаполнено(МассивЭлементов[Индекс]) Тогда
			
			ОкончаниеИдентификатора = СтрНайти(МассивЭлементов[Индекс], "]");
			
			Если ОкончаниеИдентификатора > 0 Тогда
				
				БазоваяЦенаИдентификатор = Лев(МассивЭлементов[Индекс], ОкончаниеИдентификатора - 1);
				БазовыеЦены = ДоступныеБазовыеВидыЦен.НайтиСтроки(Новый Структура("Идентификатор", БазоваяЦенаИдентификатор));
				
				Если БазовыеЦены.Количество() > 0 Тогда
					
					Если ТекущийОбъект.ВлияющиеВидыЦен.НайтиСтроки(Новый Структура("ВлияющийВидЦен", БазовыеЦены[0].Ссылка)).Количество() = 0 Тогда
						ТекущийОбъект.ВлияющиеВидыЦен.Добавить().ВлияющийВидЦен = БазовыеЦены[0].Ссылка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьТаблицуПравилОкругленияСервер(Форма)
	
	Если Форма.Объект.ПравилаОкругленияЦены.Количество() > 0 Тогда
		Форма.Объект.ПравилаОкругленияЦены.Сортировать("НижняяГраницаДиапазонаЦен");
	КонецЕсли;
	
	МаксимальныйИндекс = Форма.Объект.ПравилаОкругленияЦены.Количество() - 1;
	Для Индекс = 0 По МаксимальныйИндекс Цикл
		
		Если Форма.Объект.ПравилаОкругленияЦены.Количество() = 1 И Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен = 0 Тогда
			ЦеновойДиапазон = НСтр("ru='<Все цены>';uk='<Всі ціни>'");
		Иначе
			
			Если Индекс = МаксимальныйИндекс Тогда
				
				ЦеновойДиапазон = НСтр("ru='Свыше %НачалоДиапазона%';uk='Понад %НачалоДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%", Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен);
				
			Иначе
				
				ЦеновойДиапазон = НСтр("ru='От %НачалоДиапазона% до %ОкончаниеДиапазона%';uk='Від %НачалоДиапазона% до %ОкончаниеДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%",    Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен);
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%ОкончаниеДиапазона%", Форма.Объект.ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.Объект.ВалютаЦены) Тогда
				ЦеновойДиапазон = ЦеновойДиапазон + " " + Форма.Объект.ВалютаЦены;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.Объект.ПравилаОкругленияЦены[Индекс].ЦеновойДиапазон = ЦеновойДиапазон;
		
		УстановитьПример(Форма, Индекс);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивБазовыхВидовЦенСервер()
	
	БазовыеВидыЦенМассив = Новый Массив();
	
	Для Каждого ВидЦены Из ДоступныеБазовыеВидыЦен Цикл
		БазовыеВидыЦенМассив.Добавить(ВидЦены.Идентификатор);
	КонецЦикла;
	
	Возврат БазовыеВидыЦенМассив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьЭлементовФормы(Форма)
	
	Форма.Элементы.ВалютаЦены.Видимость = Форма.ИспользоватьНесколькоВалют;
	
	Форма.Элементы.ИспользоватьПриПередачеПродукцииДавальцу.Видимость = Ложь;
	
	Форма.Элементы.ИспользоватьПриВыпускеПродукции.Видимость = Форма.ИспользоватьПроизводство;
	Форма.Элементы.ИспользоватьПриПродаже.Видимость = Форма.ИспользоватьНесколькоВидовЦен;
	
	Форма.Элементы.СтраницаПравилаОкругленияЦены.Видимость = Форма.ИспользоватьРасширенныеВозможностиЦенооборазования;
	
	Если Форма.ИспользоватьРасширенныеВозможностиЦенооборазования Тогда
		
		Форма.Элементы.СтраницаСКД.Видимость              = Ложь;
		Форма.Элементы.СтраницаПравилаРасчета.Видимость   = Ложь;
		Форма.Элементы.СтраницаНазначатьВручную.Видимость = Ложь;

		Если Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ")
			Или Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении") Тогда
			
			Форма.Элементы.СтраницаСКД.Видимость = Истина;
			Форма.Элементы.СтраницаУточнениеПоЦеновымГруппам.Видимость = Ложь;
			
		ИначеЕсли Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен") Тогда
			
			Форма.Элементы.СтраницаПравилаРасчета.Видимость = Истина;
			Форма.Элементы.СтраницаУточнениеПоЦеновымГруппам.Видимость = Форма.ИспользоватьРасширенныеВозможностиЦенооборазования;
			
			Форма.Элементы.ГруппаОсновнаяФормулаРасчета.Видимость   = Истина;
			Форма.Элементы.ГруппаНаценкаНаБазовыйВидЦены.Видимость  = Ложь;
			Форма.Элементы.ГруппаНаценкаНаЦенуПоступления.Видимость = Ложь;
			Форма.Элементы.ФормулыФормула.Видимость                 = Истина;
			Форма.Элементы.ФормулыБазовыйВидЦены.Видимость          = Ложь;
			Форма.Элементы.ФормулыНаценка.Видимость                 = Ложь;
			Форма.Элементы.СхемаКомпоновкиДанных1.Видимость         = Истина;
			Форма.Элементы.СхемаКомпоновкиДанных2.Видимость         = Истина;
			Форма.Элементы.РедактироватьСхемуКомпоновкиДанных1.Видимость = Истина;
			Форма.Элементы.РедактироватьСхемуКомпоновкиДанных2.Видимость = Истина;
			
		ИначеЕсли Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен") Тогда
			
			Форма.Элементы.СтраницаПравилаРасчета.Видимость = Истина;
			Форма.Элементы.СтраницаУточнениеПоЦеновымГруппам.Видимость = Форма.ИспользоватьРасширенныеВозможностиЦенооборазования;
			
			Форма.Элементы.ГруппаОсновнаяФормулаРасчета.Видимость   = Ложь;
			Форма.Элементы.ГруппаНаценкаНаБазовыйВидЦены.Видимость  = Истина;
			Форма.Элементы.ГруппаНаценкаНаЦенуПоступления.Видимость = Ложь;
			Форма.Элементы.ФормулыФормула.Видимость                 = Ложь;
			Форма.Элементы.ФормулыБазовыйВидЦены.Видимость          = Истина;
			Форма.Элементы.ФормулыНаценка.Видимость                 = Истина;
			Форма.Элементы.СхемаКомпоновкиДанных1.Видимость         = Истина;
			Форма.Элементы.СхемаКомпоновкиДанных2.Видимость         = Истина;
			Форма.Элементы.РедактироватьСхемуКомпоновкиДанных1.Видимость = Истина;
			Форма.Элементы.РедактироватьСхемуКомпоновкиДанных2.Видимость = Истина;
			
		ИначеЕсли Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаЦенуПоступления") Тогда
			
			Форма.Элементы.СтраницаПравилаРасчета.Видимость = Истина;
			Форма.Элементы.СтраницаУточнениеПоЦеновымГруппам.Видимость = Форма.ИспользоватьРасширенныеВозможностиЦенооборазования;
			
			Форма.Элементы.ГруппаОсновнаяФормулаРасчета.Видимость   = Ложь;
			Форма.Элементы.ГруппаНаценкаНаБазовыйВидЦены.Видимость  = Ложь;
			Форма.Элементы.ГруппаНаценкаНаЦенуПоступления.Видимость = Истина;
			Форма.Элементы.ФормулыФормула.Видимость                 = Ложь;
			Форма.Элементы.ФормулыБазовыйВидЦены.Видимость          = Ложь;
			Форма.Элементы.ФормулыНаценка.Видимость                 = Истина;
			Форма.Элементы.СхемаКомпоновкиДанных1.Видимость         = Ложь;
			Форма.Элементы.СхемаКомпоновкиДанных2.Видимость         = Ложь;
			Форма.Элементы.РедактироватьСхемуКомпоновкиДанных1.Видимость = Истина;
			Форма.Элементы.РедактироватьСхемуКомпоновкиДанных2.Видимость = Истина;
			
		Иначе
			
			Форма.Элементы.СтраницаНазначатьВручную.Видимость = Истина;
			Форма.Элементы.СтраницаУточнениеПоЦеновымГруппам.Видимость = Ложь;
			
			Форма.Элементы.СхемаКомпоновкиДанных1.Видимость         = Истина;
			Форма.Элементы.СхемаКомпоновкиДанных2.Видимость         = Истина;
			Форма.Элементы.РедактироватьСхемуКомпоновкиДанных1.Видимость = Истина;
			Форма.Элементы.РедактироватьСхемуКомпоновкиДанных2.Видимость = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Форма.Элементы.СтраницаНаценкаНаБазовыйВидЦены.Видимость = Ложь;
		Форма.Элементы.СтраницаНаценкаПриПоступленииТоваров.Видимость = Ложь;
		Форма.Элементы.СтраницаУточнениеПоЦеновымГруппам.Видимость = Ложь;
		
		Если Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен") Тогда
			Форма.Элементы.СтраницаНаценкаНаБазовыйВидЦены.Видимость = Истина;
		ИначеЕсли Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаЦенуПоступления") Тогда
			Форма.Элементы.СтраницаНаценкаПриПоступленииТоваров.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.СтраницаПорогиСрабатывания.Видимость = Форма.ИспользоватьРасширенныеВозможностиЦенооборазования;

	Форма.Элементы.ВключитьРасширенныйРежим.Видимость = Не Форма.ИспользоватьРасширенныеВозможностиЦенооборазования;
	Форма.Элементы.ВыключитьРасширенныйРежим.Видимость = Форма.ИспользоватьРасширенныеВозможностиЦенооборазования;
	
	НастроитьВидимостьДоступностьЭлементовНастройкиОкругления(Форма);
	
	Форма.Элементы.УпрощеннаяНастройка.Видимость = Не Форма.ИспользоватьРасширенныеВозможностиЦенооборазования;
	Форма.Элементы.КоманднаяПанельФормы.Видимость = Форма.ИспользоватьНесколькоВидовЦен;
	Форма.Элементы.Наименование.Видимость = Форма.ИспользоватьНесколькоВидовЦен;
	
	Если Не Форма.Элементы.СтраницаУточнениеПоЦеновымГруппам.Видимость
		И Не Форма.Элементы.СтраницаПравилаОкругленияЦены.Видимость
		И Не Форма.Элементы.СтраницаПорогиСрабатывания.Видимость Тогда
		Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредлагаемоеЗначениеИдентификатора()
	
	Если Не Элементы.Идентификатор.ТолькоПросмотр Тогда
		Объект.Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(Объект.Наименование);
	КонецЕсли;
	ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора()
	
	Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(Объект.Наименование);
	
	Элементы.Идентификатор.СписокВыбора[0].Значение = Идентификатор;
	Если Не ЗначениеЗаполнено(Объект.Идентификатор) Тогда
		Объект.Идентификатор = Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивБазовыхВидовЦен()
	
	БазовыеВидыЦенМассив = Новый Массив();
	
	Для Каждого ВидЦены Из ДоступныеБазовыеВидыЦен Цикл
		БазовыеВидыЦенМассив.Добавить(ВидЦены.Идентификатор);
	КонецЦикла;
	
	Возврат БазовыеВидыЦенМассив;
	
КонецФункции

&НаСервере
Функция ПоместитьБазовыеВидыЦенВХранилище()
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДоступныеБазовыеВидыЦен.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыФормыРедактированияЦены(Формула)
	
	Возврат Новый Структура("Формула,Операнды,ОперандыЗаголовок,Операторы", Формула, ПоместитьБазовыеВидыЦенВХранилище(), НСтр("ru='Доступные виды цен';uk='Доступні види цін'"), АдресХранилищаДереваОператоров);
	
КонецФункции

&НаКлиенте
Функция ВерхняяГраницаДиапазонаЦен(СтрокаПравилОкругления)
	
	Индекс = Объект.ПравилаОкругленияЦены.Индекс(СтрокаПравилОкругления);
	
	Если Индекс < Объект.ПравилаОкругленияЦены.Количество() - 1 Тогда
		Возврат Объект.ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен;
	КонецЕсли;
	
	Возврат -1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПример(Форма, Индекс)
	
	Число = 1111.11;
	Если Форма.Объект.ПравилаОкругленияЦены.Количество() > 1 Тогда
		НижняяГраница = Форма.Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен;
		Если Индекс = Форма.Объект.ПравилаОкругленияЦены.Количество() - 1 Тогда
			ВерхняяГраница = НижняяГраница + 1000;
		Иначе
			ВерхняяГраница = Форма.Объект.ПравилаОкругленияЦены[Индекс+1].НижняяГраницаДиапазонаЦен;
		КонецЕсли;
		Число = НижняяГраница + Окр((ВерхняяГраница - НижняяГраница)/2, 15, 2);
		Если Число + 0.11 < ВерхняяГраница Тогда
			Число = Число + 0.11;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Объект.ПравилаОкругленияЦены[Индекс].ТочностьОкругления <> 0 ИЛИ Форма.Объект.ПравилаОкругленияЦены[Индекс].ПсихологическоеОкругление <> 0 Тогда
		Цена = ЦенообразованиеКлиентСервер.ОкруглитьЦену(Число, Форма.Объект.ПравилаОкругленияЦены[Индекс].ТочностьОкругления, Форма.Объект.ВариантОкругления);
		Значение = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(
			Цена,
			Форма.Объект.ПравилаОкругленияЦены[Индекс].ПсихологическоеОкругление);
		
		ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=; ЧГ=0";
		Форма.Объект.ПравилаОкругленияЦены[Индекс].Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Округлять %1 до %2';uk='Округляти %1 до %2'"),
			Формат(Число, ФорматнаяСтрока),
			Формат(Значение, ФорматнаяСтрока));
	Иначе
		Форма.Объект.ПравилаОкругленияЦены[Индекс].Подсказка = НСтр("ru='Не округляется';uk='Не округляється'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТаблицуПравилОкругления()
	
	Если Объект.ПравилаОкругленияЦены.Количество() > 1 Тогда
		НастроитьТаблицуПравилОкругленияСервер(ЭтаФорма);
	Иначе
		
		Если Объект.ПравилаОкругленияЦены.Количество() = 1 Тогда
			
			Если Объект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0 Тогда
				ЦеновойДиапазон = НСтр("ru='<Все цены>';uk='<Всі ціни>'");
			Иначе
				
				ЦеновойДиапазон = НСтр("ru='Свыше %НачалоДиапазона%';uk='Понад %НачалоДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%", Объект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен);
				
				Если ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
					ЦеновойДиапазон = ЦеновойДиапазон + " " + Объект.ВалютаЦены;
				КонецЕсли;
				
			КонецЕсли;
			
			Объект.ПравилаОкругленияЦены[0].ЦеновойДиапазон = ЦеновойДиапазон;
			
			УстановитьПример(ЭтаФорма, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьДоступностьЭлементовНастройкиОкругления(Форма)
	
	Если Форма.ИспользоватьРасширенныеВозможностиЦенооборазования Тогда
		ТолькоПросмотрДанныхОкругления = Ложь;
	Иначе
		ТолькоПросмотрДанныхОкругления =  Не Форма.Объект.Округлять ИЛИ Форма.Элементы.Округлять.ТолькоПросмотр;
	КонецЕсли;
	
	Форма.Элементы.ТочностьОкругленияУпрощенно.ТолькоПросмотр = ТолькоПросмотрДанныхОкругления;
	Форма.Элементы.ВариантОкругления.ТолькоПросмотр           = ТолькоПросмотрДанныхОкругления;
	Форма.Элементы.ВариантОкругленияУпрощенно.ТолькоПросмотр  = ТолькоПросмотрДанныхОкругления;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущийЭлемент = Элементы.ТочностьОкругления Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование списка выбора для поля ТочностьОкругления
	Элементы.ТочностьОкругления.СписокВыбора.Очистить();
	ЗначениеОкругления             = 0.01;
	ЧетноеПриращение               = Ложь;
	МаксимальноеЗначениеОкругления = 1000;
	ГраницаДиапазонаЦен            = ВерхняяГраницаДиапазонаЦен(Элементы.ПравилаОкругленияЦены.ТекущиеДанные);
	
	Пока ЗначениеОкругления <= МаксимальноеЗначениеОкругления 
		И (ЗначениеОкругления <= ГраницаДиапазонаЦен Или ГраницаДиапазонаЦен < 0) Цикл
		
		Элементы.ТочностьОкругления.СписокВыбора.Добавить(ЗначениеОкругления);
		ЗначениеОкругления = ЗначениеОкругления * ?(ЧетноеПриращение, 2, 5);
		ЧетноеПриращение   = Не ЧетноеПриращение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НастроитьВидимостьДоступностьЭлементовНастройкиОкругления(ЭтаФорма);
	СпособЗаданияЦеныПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

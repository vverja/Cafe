#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записывает данные документы в регистр сведений ДанныеВнутреннихДокументов
//
// Параметры:
//  Ссылка				 - 	 - 
//
Процедура ЗаписатьДанныеДокумента(Ссылка) Экспорт
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
	Запрос = Новый Запрос();
	Запрос.Текст = МенеджерДокумента.ТекстЗапросаДанныеВнутреннихДокументов();
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановленПривилегированныйРежим = ПривилегированныйРежим();
	Если Не УстановленПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗаписиПоДокументу = Запрос.Выполнить().Выгрузить();
	
	Если ЗаписиПоДокументу.Количество() > 0 Тогда
		
		Набор = РегистрыСведений.ДанныеВнутреннихДокументов.СоздатьНаборЗаписей();
		Набор.Отбор.Ссылка.Установить(Ссылка);
		Набор.Прочитать();
		
		Набор.Очистить();
		
		Набор.Загрузить(ЗаписиПоДокументу);
		
		Набор.Записать();
		
	КонецЕсли;
	
	Если Не УстановленПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанныеДокумента(Регистратор) Экспорт
	
	УстановленПривилегированныйРежим = ПривилегированныйРежим();
	Если Не УстановленПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Набор = РегистрыСведений.ДанныеВнутреннихДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Набор.Прочитать();
	
	Набор.Очистить();
	
	Набор.Записать();
	
	Если Не УстановленПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

// Массив менеджеров документов, используемых в переданном массиве хозяйственных операций
//
// Параметры:
//  МассивХозяйственныхОпераций - Массив - 
// 
// Возвращаемое значение:
//   - Массив
//
Функция ИспользуемыеМенеджерыДокументовПоОперациям(МассивХозяйственныхОпераций) Экспорт
	
	ТаблицаОперацииНакладные = ОписаниеМетаданныхНакладныхПоОперациям(МассивХозяйственныхОпераций);
	
	Метаданные = ТаблицаОперацииНакладные.ВыгрузитьКолонку("ОбъектМетаданныхДокумента");
	
	МассивМенеджеров = Новый Массив();
	
	Для Каждого Строка Из Метаданные Цикл
		Имя = Строка.Имя;
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Имя);
		МассивМенеджеров.Добавить(МенеджерДокумента);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивМенеджеров);
	
	Возврат МассивМенеджеров;
	
КонецФункции

// Массив типов документов, используемых в переданном массиве хозяйственных операций
//
// Параметры:
//  МассивХозяйственныхОпераций - Массив - 
//  Отбор 						- Структура - Структура отбора по таблице ОписаниеМетаданныхНакладных
// 
// Возвращаемое значение:
//   - Массив
//
Функция ИспользуемыеТипыДокументовПоОперациям(МассивХозяйственныхОпераций, Отбор = Неопределено) Экспорт
	
	ТипыДокументов = Новый Массив();
	
	ТаблицаОперацииНакладные = ОписаниеМетаданныхНакладныхПоОперациям(МассивХозяйственныхОпераций);
		
	Если Отбор <> Неопределено Тогда
		НайденныеСтроки = ТаблицаОперацииНакладные.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			ТипыДокументов.Добавить(Строка.ТипДокумента);
		КонецЦикла;
	Иначе
		
		ТипыДокументов = ТаблицаОперацииНакладные.ВыгрузитьКолонку("ТипДокумента");
		
	КонецЕсли;
	
	ТипыДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТипыДокументов);
	
	Возврат ТипыДокументов;
	
КонецФункции

// Массив хозяйственных операций, используемых в переданном типе документа
//
// Параметры:
//  ТипДокумента - ДокументСсылка - 
// 
// Возвращаемое значение:
//   - Массив
//
Функция ХозяйственныеОперацииПоТипуДокумента(ТипДокумента) Экспорт
	
	МассивХозяйственныхОпераций = Новый Массив();
	
	ТаблицаОперацииНакладные = ОписаниеМетаданныхНакладных();
	
	Отбор = Новый Структура();
	Отбор.Вставить("ТипДокумента", ТипДокумента);
	
	НайденныеСтроки = ТаблицаОперацииНакладные.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		МассивХозяйственныхОпераций.Добавить(Строка.ХозяйственнаяОперация);
	КонецЦикла;
	
	МассивХозяйственныхОпераций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивХозяйственныхОпераций);
	
	Возврат МассивХозяйственныхОпераций;
	
КонецФункции

// Массив объектов метаданных по хозяйственным операциям
//
// Параметры:
//  МассивХозяйственныхОпераций	 - Массив - Хозяйственные операции для которых нужно узнать соответствующие объекты метаданных
//  ТолькоНакладные				 - Булево - Учитывать только накладные
// 
// Возвращаемое значение:
//   - Массив
//
Функция ИспользуемыеОбъектыМетаданныхПоОперациям(МассивХозяйственныхОпераций, ТолькоНакладные = Ложь) Экспорт
	
	ОбъектыМетаданных = Новый Массив();
	ТаблицаОперацииНакладные = ОписаниеМетаданныхНакладныхПоОперациям(МассивХозяйственныхОпераций);
	
	Для Каждого Строка Из ТаблицаОперацииНакладные Цикл
		ОбъектыМетаданных.Добавить(Строка.ОбъектМетаданныхДокумента);
	КонецЦикла;
	
	ОбъектыМетаданных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыМетаданных);
	
	Возврат ОбъектыМетаданных;
	
КонецФункции

// Таблица соответствий ХозяйственнаяОперация - ТипДокумента, где в качестве типа указаны как накладные, так и заказы по накладным
// Таблица ограничена входящим массивом хозяйственных операций
//
// Параметры:
//  МассивХозяйственныхОпераций	 - Массив - Хозяйственные операции
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ОписаниеМетаданныхНакладныхПоОперациям(МассивХозяйственныхОпераций) Экспорт
	
	ТаблицаОперацииНакладные = ОписаниеМетаданныхНакладных();
	ОтобраннаяТаблица = ТаблицаОперацииНакладные.СкопироватьКолонки();
	
	Для Каждого Операция Из МассивХозяйственныхОпераций Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("ХозяйственнаяОперация", Операция);
		
		НайденныеСтроки = ТаблицаОперацииНакладные.НайтиСтроки(Отбор);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Строка = ОтобраннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОтобраннаяТаблица;
	
КонецФункции

// Полная таблица соответствий ХозяйственнаяОперация - ТипДокумента, где в качестве типа указаны как накладные, так и заказы по накладным
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ОписаниеМетаданныхНакладных() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ТаблицаЗначений.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ТаблицаЗначений.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Тип"));
	ТаблицаЗначений.Колонки.Добавить("ТипНакладной", Новый ОписаниеТипов("Тип"));
	ТаблицаЗначений.Колонки.Добавить("ОбъектМетаданныхДокумента", Новый ОписаниеТипов("ОбъектМетаданных"));
	ТаблицаЗначений.Колонки.Добавить("Накладная", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ИспользуютсяСтатусы", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ИспользуетсяРаспоряжение", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ПоНесколькимЗаказам", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ПриходныйОрдерНевозможен", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("КомандаСозданияФормы", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("РазделятьДокументыПоПодразделению", Новый ОписаниеТипов("Булево"));
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Накладные с заказами:
	
	// Сборка.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		
		// Накладная на сборку.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СборкаТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.СборкаТоваров");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.СборкаТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.СборкаТоваров;
		Строка.Накладная					= Истина;
		Строка.ИспользуютсяСтатусы			= ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыСборокТоваров");
		Строка.ИспользуетсяРаспоряжение		= Истина;
		Строка.КомандаСозданияФормы			= "СписокСоздатьСборкуТоваров";
		
		// Накладная на разборку.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СборкаТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.СборкаТоваров");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.СборкаТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.СборкаТоваров;
		Строка.Накладная					= Истина;
		Строка.ИспользуютсяСтатусы			= ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыСборокТоваров");
		Строка.ИспользуетсяРаспоряжение		= Истина;
		Строка.КомандаСозданияФормы			= "СписокСоздатьРазборкуТоваров";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку") Тогда
		
		// Заказ на разборку.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СборкаТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ЗаказНаСборку");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.СборкаТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ЗаказНаСборку;
		Строка.ИспользуетсяРаспоряжение		= Истина;
		
	КонецЕсли;
	
	// Внутреннее потребление.
	ВнутреннееПотреблениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление") Тогда
		
		// Накладная на списание.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ВнутреннееПотреблениеТоваров;
		Строка.Накладная					= Истина;
		Строка.ИспользуетсяРаспоряжение		= Истина;
		Строка.ПоНесколькимЗаказам			= ВнутреннееПотреблениеПоНесколькимЗаказам;
		Строка.ПриходныйОрдерНевозможен		= Истина;
		Строка.КомандаСозданияФормы			= "СписокСоздатьСписаниеНаРасходы";
		
		Если Не ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
			// Накладная на передачу в эксплуатацию.
			Строка = ТаблицаЗначений.Добавить();
			Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
			Строка.ТипДокумента 				= Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
			Строка.ТипНакладной 				= Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
			Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ВнутреннееПотреблениеТоваров;
			Строка.Накладная					= Истина;
			Строка.ИспользуетсяРаспоряжение		= Истина;
			Строка.ПоНесколькимЗаказам			= ВнутреннееПотреблениеПоНесколькимЗаказам;
			Строка.ПриходныйОрдерНевозможен		= Истина;
			Строка.КомандаСозданияФормы			= "СписокСоздатьПередачуВЭксплуатацию";
		КонецЕсли;
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление") Тогда
		
		// Заказ на списание.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ЗаказНаВнутреннееПотребление;
		Строка.ИспользуетсяРаспоряжение		= Истина;
		Строка.ПоНесколькимЗаказам			= ВнутреннееПотреблениеПоНесколькимЗаказам;
		Строка.ПриходныйОрдерНевозможен		= Истина;
		
		Если Не ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
			// Заказ на передачу в эксплуатацию.
			Строка = ТаблицаЗначений.Добавить();
			Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
			Строка.ТипДокумента 				= Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление");
			Строка.ТипНакладной 				= Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров");
			Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ЗаказНаВнутреннееПотребление;
			Строка.ИспользуетсяРаспоряжение		= Истина;
			Строка.ПоНесколькимЗаказам			= ВнутреннееПотреблениеПоНесколькимЗаказам;
			Строка.ПриходныйОрдерНевозможен		= Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	ИспользоватьПеремещениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам");
	ИспользоватьПеремещениеМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров") Тогда
		
		// Накладная на складское перемещение.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ПеремещениеТоваров");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.ПеремещениеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПеремещениеТоваров;
		Строка.Накладная					= Истина;
		Строка.ИспользуютсяСтатусы			= ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров");
		Строка.ИспользуетсяРаспоряжение		= Истина;
		Строка.ПоНесколькимЗаказам			= ИспользоватьПеремещениеПоНесколькимЗаказам;
		Строка.КомандаСозданияФормы			= "СписокСоздатьПеремещениеТоваров";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров")
		И ИспользоватьПеремещениеМеждуОрганизациями Тогда
		
		// Накладная на перемещение между организациями.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ПеремещениеТоваров");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.ПеремещениеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПеремещениеТоваров;
		Строка.Накладная					= Истина;
		Строка.ИспользуютсяСтатусы			= ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров");
		Строка.ИспользуетсяРаспоряжение		= Истина;
		Строка.ПоНесколькимЗаказам			= ИспользоватьПеремещениеПоНесколькимЗаказам;
		Строка.КомандаСозданияФормы			= "СписокСоздатьВнутреннююПередачуТоваров";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение") Тогда
		
		// Заказ на складское перемещение.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ЗаказНаПеремещение");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.ПеремещениеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ЗаказНаПеремещение;
		Строка.ИспользуетсяРаспоряжение		= Истина;
		Строка.ПоНесколькимЗаказам			= ИспользоватьПеремещениеПоНесколькимЗаказам;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
		И ИспользоватьПеремещениеМеждуОрганизациями Тогда
		
		// Заказ на перемещение между организациями.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ЗаказНаПеремещение");
		Строка.ТипНакладной 				= Тип("ДокументСсылка.ПеремещениеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ЗаказНаПеремещение;
		Строка.ИспользуетсяРаспоряжение		= Истина;
		Строка.ПоНесколькимЗаказам			= ИспользоватьПеремещениеПоНесколькимЗаказам;
		
	КонецЕсли;
		
	// Передача в производство.
		
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// Накладные без заказов:
	
	
	// Оприходование излишков товаров.
	Строка = ТаблицаЗначений.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ОприходованиеТоваров;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ОприходованиеИзлишковТоваров");
	Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ОприходованиеИзлишковТоваров;
	Строка.Накладная					= Истина;
	Строка.КомандаСозданияФормы			= "СписокСоздатьОприходованиеИзлишковТоваров";
	
	// Пересортица товаров.
	Строка = ТаблицаЗначений.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПересортицаТоваров;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.ПересортицаТоваров");
	Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПересортицаТоваров;
	Строка.Накладная					= Истина;
	Строка.КомандаСозданияФормы			= "СписокСоздатьПересортицуТоваров";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") Тогда
		
		// Порча товаров.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПорчаТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ПорчаТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПорчаТоваров;
		Строка.Накладная					= Истина;
		Строка.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ПорчаТоваров;
		Строка.КомандаСозданияФормы			= "СписокСоздатьПорчуТоваров";
		
		// Порча товаров с переоценкой.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ПорчаТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПорчаТоваров;
		Строка.Накладная					= Истина;
		Строка.КомандаСозданияФормы			= "СписокСоздатьПорчуТоваров";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочееОприходованиеТоваров") Тогда
		
		Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
			
			// Поступление из производства (УТ).
			Строка = ТаблицаЗначений.Добавить();
			Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПоступлениеИзПроизводства;
			Строка.ТипДокумента 				= Тип("ДокументСсылка.ПрочееОприходованиеТоваров");
			Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПрочееОприходованиеТоваров;
			Строка.Накладная					= Истина;
			Строка.КомандаСозданияФормы			= "СписокСоздатьПоступлениеИзПроизводства";
			
		КонецЕсли;
		
		// Возврат из эксплуатации.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ПрочееОприходованиеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПрочееОприходованиеТоваров;
		Строка.Накладная					= Истина;
		Строка.КомандаСозданияФормы			= "СписокСоздатьВозвратИзЭксплуатации";
		
		// Сторно списания на расходы.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ПрочееОприходованиеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПрочееОприходованиеТоваров;
		Строка.Накладная					= Истина;
		Строка.КомандаСозданияФормы 		= "СписокСоздатьСторноСписанияНаРасходы";
		
		// Прочее поступление товаров.
		Строка = ТаблицаЗначений.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПрочееПоступлениеТоваров;
		Строка.ТипДокумента 				= Тип("ДокументСсылка.ПрочееОприходованиеТоваров");
		Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.ПрочееОприходованиеТоваров;
		Строка.Накладная					= Истина;
		Строка.КомандаСозданияФормы			= "СписокСоздатьПрочееПоступлениеТоваров";
		
	КонецЕсли;
	
	// Списание недостач товаров.
	Строка = ТаблицаЗначений.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваров;
	Строка.ТипДокумента 				= Тип("ДокументСсылка.СписаниеНедостачТоваров");
	Строка.ОбъектМетаданныхДокумента	= Метаданные.Документы.СписаниеНедостачТоваров;
	Строка.Накладная					= Истина;
	Строка.КомандаСозданияФормы			= "СписокСоздатьСписаниеНедостачТоваров";
	
	// Удаление из результирующей таблицы объектов метаданных к которым нет доступа
	МассивКУдалению = Новый Массив();
	Для Каждого Строка Из ТаблицаЗначений Цикл
		Если Не ПравоДоступа("Чтение", Строка.ОбъектМетаданныхДокумента) Тогда
			МассивКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из МассивКУдалению Цикл
		ТаблицаЗначений.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция РазделитьЗаказыПоТипамНакладных(СписокРаспоряжений, ПоОрдерам, СписокОшибок) Экспорт
	
	ТаблицаОперацииНакладные = ОписаниеМетаданныхНакладных();
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИспользуетсяРаспоряжение", Истина);
	
	НайденныеСтроки = ТаблицаОперацииНакладные.НайтиСтроки(Отбор);
	СоответствиеДоступныхЗаказовИНакладных = ТаблицаОперацииНакладные.Скопировать(НайденныеСтроки, "ТипНакладной, ТипДокумента, ХозяйственнаяОперация, Накладная, ПоНесколькимЗаказам, РазделятьДокументыПоПодразделению");
	
	Типы = СоответствиеДоступныхЗаказовИНакладных.ВыгрузитьКолонку("ТипДокумента");
	
	ТекущиеКлючи = Новый Структура();
	ТекущиеКлючи.Вставить("ТипНакладной");
	ТекущиеКлючи.Вставить("Организация");
	ТекущиеКлючи.Вставить("Склад");
	ТекущиеКлючи.Вставить("СкладПолучатель");
	ТекущиеКлючи.Вставить("ХозяйственнаяОперация");
	ТекущиеКлючи.Вставить("СостояниеНакладной");
	ТекущиеКлючи.Вставить("СостояниеОрдера");
	ТекущиеКлючи.Вставить("Подразделение");
	
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений();
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(Типы));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеНакладной", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеОрдера", Новый ОписаниеТипов("Число"));
	
	РазделеннаяТаблица = Неопределено;
	МассивТаблиц = Новый Массив();
	
	СписокРаспоряжений.Сортировать("Ссылка, Склад, СостояниеНакладной");
	
	НачалоДня = НачалоДня(ТекущаяДата());
	
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	
	Для Каждого Строка Из СписокРаспоряжений Цикл
		
		СтрокаСоответствия = СоответствиеДоступныхЗаказовИНакладных.Найти(ТипЗнч(Строка.Ссылка), "ТипДокумента");
		ТипНакладной = СтрокаСоответствия.ТипНакладной;
		
		ВыдатьСообщениеОбОшибке = Ложь;
		Если ПакетныйРежим И СтрокаСоответствия.Накладная Тогда
			
			ВыдатьСообщениеОбОшибке = Истина;
			ТекстОшибки = НСтр("ru='Для распоряжения %1 невозможно перезаполнить накладную вместе с другими распоряжениями. Выберите распоряжение отдельно.';uk='Для розпорядження %1 неможливо перезаповнити накладну разом з іншими розпорядженнями. Виберіть розпорядження окремо.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
		ИначеЕсли ПоОрдерам И НЕ ТипНакладной = ТИП("ДокументСсылка.СборкаТоваров") Тогда
			
			Если Строка.СостояниеОрдера = 0 Или Строка.СостояниеОрдера = 4 Тогда
				
				ВыдатьСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ПоОрдерам И ТипНакладной = ТИП("ДокументСсылка.СборкаТоваров") Тогда
			
			Если (Строка.СостояниеОрдера = 0 Или Строка.СостояниеОрдера = 4)
				И (Строка.СостояниеПриходногоОрдера = 0 Или Строка.СостояниеПриходногоОрдера = 4) Тогда
				
				ВыдатьСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
		Иначе // оформление по заказам
			
			Если Строка.СостояниеНакладной = 0 Или Строка.СостояниеНакладной = 4 Тогда
				
				ВыдатьСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыдатьСообщениеОбОшибке Тогда
			
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru='Для распоряжения %1 не требуется создание накладной';uk='Для розпорядження %1 не потрібне створення накладної'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			Продолжить;
			
		КонецЕсли;
		
		РазделятьПоПодразделению = Строка.Подразделение <> ТекущиеКлючи.Подразделение И СтрокаСоответствия.РазделятьДокументыПоПодразделению;
		
		// Создание новой таблицы в случаях:
		// 1. Таблица еще ни разу не создана
		// 2. Запрещено группировать в одну накладную несколько заказов
		// 3. Распоряжение является накладной или ключевые поля различаются (например, нельзя группировать 
		//	в одну накладную заказы у которых разные склады)
		Если РазделеннаяТаблица = Неопределено 
			Или Не СтрокаСоответствия.ПоНесколькимЗаказам
			Или Строка.СостояниеНакладной = 4
			Или ТипНакладной <> ТекущиеКлючи.ТипНакладной 
			Или Строка.Организация <> ТекущиеКлючи.Организация 
			Или РазделятьПоПодразделению
			Или Строка.Склад <> ТекущиеКлючи.Склад 
			Или Строка.СкладПолучатель <> ТекущиеКлючи.СкладПолучатель
			Или Строка.ХозяйственнаяОперация <> ТекущиеКлючи.ХозяйственнаяОперация Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица); // Передача в массив ссылки на текущую таблицу
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
			ТекущиеКлючи.ТипНакладной = ТипНакладной;
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

// Возвращает таблицу значений содержащую новые данные для табличной части "Товары" накладной
//
// Параметры:
//  Накладная			 - Ссылка - Ссылка на накладную
//  МассивЗаказов		 - Массив - Массив связанных с накладной заказов
//  ПараметрыЗаполнения	 - Структура - 
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ПолучитьДанныеДляПерезаполненияНакладнойПоПриемке(Накладная, МассивЗаказов, ТаблицаНакладная, ТаблицаКОформлениюОстаток, ПараметрыЗаполнения) Экспорт
	
	Перем Склад;
	
	МенеджерНакладной = ПараметрыЗаполнения.Менеджер;
	КлючевыеПоля = ПараметрыЗаполнения.КлючевыеПоля;
	ПараметрыЗаполнения.Свойство("Склад", Склад);
	ДобавлятьСтрокиСверхРаспоряжения = Истина;
	ПоляДляДозаполненияПоДаннымОрдера = "";
	
	ПараметрыЗаполнения.Свойство("ПоляДляДозаполненияПоДаннымОрдера", ПоляДляДозаполненияПоДаннымОрдера);
	
	Если ПараметрыЗаполнения.Свойство("ЗаполнятьПоОрдеру")
		И ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		
		ТаблицаОформлено = РегистрыНакопления.ТоварыКОформлениюПоступления.ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, Накладная, Склад);
		
		ТаблицаПринято = РегистрыНакопления.ТоварыКОформлениюПоступления.ПринятоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, Склад);
		
		// Получение разницы между ОтгруженоОрдерами и Накладными (кроме текущей)
		ТаблицаПолученоОстаток = НакладныеСервер.ВычестьТаблицу(ТаблицаПринято, ТаблицаОформлено, КлючевыеПоля);
		
		ТаблицаПолученоОстаток.Индексы.Добавить(КлючевыеПоля);
		
		// ТаблицаПолученоОстаток будет уменьшена на количество из ТаблицаНакладная
		ТаблицаСуществующихСтрок = НакладныеСервер.МинимумТаблиц(ТаблицаПолученоОстаток, ТаблицаНакладная, КлючевыеПоля);
		
		Если ПараметрыЗаполнения.Свойство("НеСопоставлятьСЗаказомПоСериям")
			И ПараметрыЗаполнения.НеСопоставлятьСЗаказомПоСериям Тогда
			КлючевыеПоля = СтрЗаменить(КлючевыеПоля, "Серия", "");
		КонецЕсли;
		
		// Сборка по заказам не может иметь строки сверх заказа
		Если ТипЗнч(Накладная) = Тип("ДокументСсылка.СборкаТоваров")
			И ПараметрыЗаполнения.Свойство("НакладнаяПоЗаказу")
			И ПараметрыЗаполнения.НакладнаяПоЗаказу Тогда
			ДобавлятьСтрокиСверхРаспоряжения = Ложь;
		КонецЕсли;
		
		ТаблицаНовыхСтрок = ТаблицаНакладная.СкопироватьКолонки();
		ТаблицаНовыхСтрок = НакладныеСервер.РазвернутьПоКодамСтрок(ТаблицаНовыхСтрок, 
								ТаблицаПолученоОстаток, 
								ТаблицаКОформлениюОстаток, 
								КлючевыеПоля, 
								ДобавлятьСтрокиСверхРаспоряжения,
								,
								ПоляДляДозаполненияПоДаннымОрдера);
		
	Иначе
		ТаблицаНовыхСтрок = ТаблицаКОформлениюОстаток;
		ТаблицаСуществующихСтрок = ТаблицаНовыхСтрок.СкопироватьКолонки();
	КонецЕсли;
	
	Структура = Новый Структура();
	Структура.Вставить("ТаблицаСуществующихСтрок", ТаблицаСуществующихСтрок);
	Структура.Вставить("ТаблицаНовыхСтрок", ТаблицаНовыхСтрок);
	
	Возврат Структура;
	
КонецФункции

// Возвращает таблицу значений содержащую новые данные для табличной части "Товары" накладной
//
// Параметры:
//  Накладная			 - Ссылка - Ссылка на накладную
//  МассивЗаказов		 - Массив - Массив связанных с накладной заказов
//  ПараметрыЗаполнения	 - Структура - 
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ПолучитьДанныеДляПерезаполненияНакладной(Накладная, МассивЗаказов, ТаблицаНакладная, ТаблицаКОформлениюОстаток, ПараметрыЗаполнения, ТипНакладной = Неопределено) Экспорт
	
	Перем Склад;
	
	МенеджерНакладной = ПараметрыЗаполнения.Менеджер;
	КлючевыеПоля = ПараметрыЗаполнения.КлючевыеПоля;
	ПараметрыЗаполнения.Свойство("Склад", Склад);
	
	ОтборПоДате = ПараметрыЗаполнения.Дата;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("НачалоТекущегоДня", НачалоДня(ТекущаяДата()));
	ПараметрыОтбора.Вставить("Заказы", МассивЗаказов);
	ПараметрыОтбора.Вставить("ОтборПоДате", ОтборПоДате);
	ПараметрыОтбора.Вставить("Накладная", Накладная);
	
	Если ПараметрыЗаполнения.Свойство("ЗаполнятьПоОрдеру")
		И ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		
		ТаблицаОформлено = РегистрыНакопления.ТоварыКОтгрузке.ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, Накладная, Склад);
		
		ТаблицаОтгружено = РегистрыНакопления.ТоварыКОтгрузке.ОтгруженоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, Склад);
		
		// Получение разницы между ОтгруженоОрдерами и Накладными (кроме текущей)
		ТаблицаОтгруженоОстаток = НакладныеСервер.ВычестьТаблицу(ТаблицаОтгружено, ТаблицаОформлено, "Распоряжение, " + КлючевыеПоля);
		ТаблицаОтгруженоОстаток.Колонки.Распоряжение.Имя = ПараметрыЗаполнения.ИмяПоляЗаказ;
		
		// ТаблицаОтгруженоОстаток будет уменьшена на количество из ТаблицаНакладная
		Если ТипНакладной = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			
			ТаблицаКОформлениюОстаток.Колонки.Назначение.Имя = "Назначение1";
			ТаблицаКОформлениюОстаток.Колонки.НазначениеОтправителя.Имя = "Назначение";
			ТаблицаНакладная.Колонки.Назначение.Имя = "Назначение1";
			ТаблицаНакладная.Колонки.НазначениеОтправителя.Имя = "Назначение";
			
		КонецЕсли;
		
		КлючевыеПоляСЗаказом = ?(ПараметрыЗаполнения.НакладнаяПоЗаказу, 
			ПараметрыЗаполнения.ИмяПоляЗаказ + ", " + КлючевыеПоля,
			КлючевыеПоля);
		
		ТаблицаОтгруженоОстаток.Индексы.Добавить(КлючевыеПоляСЗаказом);
		ТаблицаСуществующихСтрок = НакладныеСервер.МинимумТаблиц(ТаблицаОтгруженоОстаток, ТаблицаНакладная, КлючевыеПоляСЗаказом);
		
		ТаблицаНовыхСтрок = ТаблицаНакладная.СкопироватьКолонки();
		Если Не ПараметрыЗаполнения.Свойство("РазворачиватьПоКодамСтрок")
			Или ПараметрыЗаполнения.РазворачиватьПоКодамСтрок Тогда
			ТаблицаНовыхСтрок = НакладныеСервер.РазвернутьПоКодамСтрок(ТаблицаНовыхСтрок, ТаблицаОтгруженоОстаток, ТаблицаКОформлениюОстаток, КлючевыеПоляСЗаказом);
			
			Если ТипНакладной = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				
				ТаблицаНовыхСтрок.Колонки.Назначение.Имя = "НазначениеОтправителя";
				ТаблицаНовыхСтрок.Колонки.Назначение1.Имя = "Назначение";
				
			КонецЕсли;
			
		Иначе
			ТаблицаНовыхСтрок = ТаблицаОтгруженоОстаток;
		КонецЕсли;

		Если ТипНакладной = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			
			ТаблицаКОформлениюОстаток.Колонки.Назначение.Имя = "НазначениеОтправителя";
			ТаблицаКОформлениюОстаток.Колонки.Назначение1.Имя = "Назначение";
			ТаблицаСуществующихСтрок.Колонки.Назначение.Имя = "НазначениеОтправителя";
			ТаблицаСуществующихСтрок.Колонки.Назначение1.Имя = "Назначение";
			
		КонецЕсли;
		
	Иначе
		ТаблицаНовыхСтрок = ТаблицаКОформлениюОстаток;
		ТаблицаСуществующихСтрок = ТаблицаНовыхСтрок.СкопироватьКолонки();
	КонецЕсли;
	
	Структура = Новый Структура();
	Структура.Вставить("ТаблицаСуществующихСтрок", ТаблицаСуществующихСтрок);
	Структура.Вставить("ТаблицаНовыхСтрок", ТаблицаНовыхСтрок);
	
	Возврат Структура;
	
КонецФункции

// Перезаполняет табличную часть Товары накладной
//  Возвращает признак того, есть ли изменения табличной части
//
// Параметры:
//  ТаблицаСуществующихСтрок		 - ТаблицаЗначений		 - 
//  ТаблицаНовыхСтрок				 - ТаблицаЗначений		 - 
//  ТаблицаТовары					 - ДанныеФормыКоллекция	 - 
//  КлючевыеПоля					 - Строка				 - 
//  УдалятьСтрокиСПустымКоличеством	 - Булево				 - 
// 
// Возвращаемое значение:
//   - Булево
//
Функция ПерезаполнитьТоварыНакладной(ТаблицаСуществующихСтрок, ТаблицаНовыхСтрок, ТаблицаТовары, КлючевыеПоля, УдалятьСтрокиСПустымКоличеством = Истина) Экспорт
	
	ТЧИзменена = Ложь;
	
	СтрокиТоварыКУдалению = Новый Массив();
	
	// Уменьшение количества существующих строк, удаление ненужных
	Для Каждого Строка Из ТаблицаТовары Цикл
		НайденнаяСтрока = ТаблицаСуществующихСтрок.Найти(Строка.НомерСтроки - 1, "ИндексСтроки");
		
		Строка.Количество = 0;
		Если НайденнаяСтрока <> Неопределено Тогда
			Строка.Количество = НайденнаяСтрока.Количество;
			ТЧИзменена = Истина;
		КонецЕсли;
		
		Если Строка.Количество <= 0 Тогда
			СтрокиТоварыКУдалению.Добавить(Строка);
			ТЧИзменена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление строк с количеством = 0
	Если УдалятьСтрокиСПустымКоличеством Тогда
		Для Каждого Строка Из СтрокиТоварыКУдалению Цикл
			ТаблицаТовары.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Отбор = Новый Структура(КлючевыеПоля);
	
	// Добавление новых строк в таблицу Товары
	Для Каждого Строка Из ТаблицаНовыхСтрок Цикл
		Если Строка.Количество > 0 Тогда
			ЗаполнитьЗначенияСвойств(Отбор, Строка);
			
			// Поиск существующих строк, аналитика которых полностью совпадает
			НайденныеСтроки = ТаблицаТовары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + Строка.Количество;
			Иначе
				// Добавление новой строки, если таких же строк не найдено
				НоваяСтрока = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
			
			ТЧИзменена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЧИзменена;
	
КонецФункции

// Перезаполняет табличную часть Серии накладной
//  Возвращает признак того, есть ли изменения табличной части
//
// Параметры:
//  ТаблицаСуществующихСтрок		 - ТаблицаЗначений		 - 
//  ТаблицаНовыхСтрок				 - ТаблицаЗначений		 - 
//  ТаблицаТовары					 - ДанныеФормыКоллекция	 - 
//  КлючевыеПоля					 - Строка				 - 
//  УдалятьСтрокиСПустымКоличеством	 - Булево				 - 
// 
// Возвращаемое значение:
//   - Булево
//
Функция ПерезаполнитьСерииНакладной(ТаблицаСуществующихСтрок, ТаблицаНовыхСтрок, ТаблицаСерии, КлючевыеПоля, УдалятьСтрокиСПустымКоличеством = Истина) Экспорт
	
	ТЧИзменена = Ложь;
	
	СтрокиТоварыКУдалению = Новый Массив();
	
	Отбор = Новый Структура(КлючевыеПоля);
	
	// Уменьшение количества существующих строк, удаление ненужных
	Для Каждого Строка Из ТаблицаСерии Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		
		НайденныеСтроки = ТаблицаСуществующихСтрок.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			
			Строка.Количество = НайденнаяСтрока.Количество;
			ТЧИзменена = Истина;
			
			Если Строка.Количество <= 0 Тогда
				СтрокиТоварыКУдалению.Добавить(Строка);
				ТЧИзменена = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление строк с количеством = 0
	Если УдалятьСтрокиСПустымКоличеством Тогда
		Для Каждого Строка Из СтрокиТоварыКУдалению Цикл
			ТаблицаСерии.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	// Добавление новых строк в таблицу Серии
	Для Каждого Строка Из ТаблицаНовыхСтрок Цикл
		Если Строка.Количество > 0 Тогда
			ЗаполнитьЗначенияСвойств(Отбор, Строка);
			
			// Поиск существующих строк, аналитика которых полностью совпадает
			НайденныеСтроки = ТаблицаСерии.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + Строка.Количество;
			Иначе
				// Добавление новой строки, если таких же строк не найдено
				НоваяСтрока = ТаблицаСерии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
			
			ТЧИзменена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЧИзменена;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


Процедура ЗаполнитьРегистрСведенийДанныеВнутреннихДокументовОтметитьКОбработке(Параметры) Экспорт
	
	МассивМетаданныхДокументов = Новый Массив();
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
    МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ИнвентаризационнаяОпись);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ОприходованиеИзлишковТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ПересортицаТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ПорчаТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.СборкаТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.СписаниеНедостачТоваров);
	
	Отступ = 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	#ПОЛНОЕИМЯДОКУМЕНТА КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеВнутреннихДокументов КАК ДанныеВнутреннихДокументов
	|		ПО ДанныеВнутреннихДокументов.Ссылка = Документ.Ссылка
	|ГДЕ
	|	ДанныеВнутреннихДокументов.Ссылка ЕСТЬ NULL";
	
	ТекстЗапроса = ШаблонТекстаЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПОЛНОЕИМЯДОКУМЕНТА", МассивМетаданныхДокументов[0].ПолноеИмя());
	
	Для Н = 1 По МассивМетаданныхДокументов.Количество() - 1 Цикл
		
		ОбъектМетаданных = МассивМетаданныхДокументов[Н];
		ДобавляемыйТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ПОЛНОЕИМЯДОКУМЕНТА", ОбъектМетаданных.ПолноеИмя());
		
		ТекстЗапроса = ТекстЗапроса + Отступ + ДобавляемыйТекстЗапроса;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ДанныеВнутреннихДокументов.СоздатьНаборЗаписей();
		Набор.Отбор.Ссылка.Установить(Выборка.Ссылка);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
	КонецЦикла;

КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Заполняет регистр сведений Данные внутренних документов
Процедура ЗаполнитьРегистрСведенийДанныеВнутреннихДокументовЗаписатьДанные(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ДанныеВнутреннихДокументов";
	
	МассивМетаданныхДокументов = Новый Массив();
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
    МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ИнвентаризационнаяОпись);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ОприходованиеИзлишковТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ПересортицаТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ПорчаТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.СборкаТоваров);
	МассивМетаданныхДокументов.Добавить(Метаданные.Документы.СписаниеНедостачТоваров);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получение данных для обработки в виде временной таблицы. Таблица уже проверена на возможность обработки
	РезультатСозданияВТ = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
        Параметры.Очередь, 
		ПолноеИмяРегистра, 
        МенеджерВременныхТаблиц
    );
		
	Параметры.ОбработкаЗавершена = Не РезультатСозданияВТ.ЕстьДанныеДляОбработки;
		
	Если Не РезультатСозданияВТ.ЕстьЗаписиВоВременнойТаблице Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на возможность обработки документов регистра (измерение "Ссылка")
	Для Каждого ОбъектМетаданных Из МассивМетаданныхДокументов Цикл
		
		ТаблицаЗаблокированныхДокументов = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
            Параметры.Очередь,
			ОбъектМетаданных.ПолноеИмя(), 
            МенеджерВременныхТаблиц
        );
			
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таб.Ссылка
		|ИЗ
		|	ВТДляОбработкиДанныеВнутреннихДокументов КАК Таб
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ТаблицаЗаблокированных КАК ТаблицаЗаблокированных
		|		ПО Таб.Ссылка = ТаблицаЗаблокированных.Ссылка
		|ГДЕ
		|	ТаблицаЗаблокированных.Ссылка ЕСТЬ NULL
		|	И ТИПЗНАЧЕНИЯ(Таб.Ссылка) = &Тип";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаЗаблокированных", ТаблицаЗаблокированныхДокументов.ИмяВременнойТаблицы);
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Тип", Тип("ДокументСсылка." + ОбъектМетаданных.Имя));
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ." + ОбъектМетаданных.Имя);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				Блокировка.Заблокировать();
				
				Набор = РегистрыСведений.ДанныеВнутреннихДокументов.СоздатьНаборЗаписей();
				Набор.Отбор.Ссылка.Установить(Выборка.Ссылка);
				
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Ссылка);
				
				Запрос = Новый Запрос();
				Запрос.Текст = МенеджерДокумента.ТекстЗапросаДанныеВнутреннихДокументов();
				Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
				
				ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
				Набор.Загрузить(ТаблицаЗаписей);
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
                    ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				    УровеньЖурналаРегистрации.Предупреждение,
				    ОбъектМетаданных,
				    Выборка.Ссылка,
				    ТекстСообщения
                );
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        "РегистрСведений.ДанныеВнутреннихДокументов"
    );
	
КонецПроцедуры



#КонецОбласти

#КонецОбласти

#КонецЕсли
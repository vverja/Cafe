&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = МониторингЦелевыхПоказателей.ПолучитьНастройкиМонитораЦелевыхПоказателей();
	ОтборЗонаВнимания = 0;
	
	ТекущийВариантИнтерфейсаКлиентскогоПриложения = ТекущийВариантИнтерфейсаКлиентскогоПриложения();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не ПустаяСтрока(Параметры.ИдентификаторВариантаАнализа) Тогда
		РежимАнализаВзаимосвязанных = Истина;
		
		Элементы.ФормаНастроить.Видимость = Не РежимАнализаВзаимосвязанных;
		Элементы.ГруппаБыстрыеОтборы.Видимость = Не РежимАнализаВзаимосвязанных;
		
		// Установим заголовок
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСвойстваВариантаАнализаПоИдентификатору(Параметры.ИдентификаторВариантаАнализа);
		НаименованиеВариантаАнализа = ВариантАнализа.Ссылка.Наименование;
		Заголовок = НСтр("ru='Анализируемый показатель';uk='Аналізований показник'") + " """ + НаименованиеВариантаАнализа + """";
		АвтоЗаголовок = Не РежимАнализаВзаимосвязанных;
		
		Параметры.Свойство("ДемонстрационныйРежим", ДемонстрационныйРежим);
		
		АдресаДинамическихПараметров =  Новый ХранилищеЗначения(ДанныеФормыВЗначение(Параметры.СоставМонитора, Тип("ТаблицаЗначений")));
	КонецЕсли;
	
	ЗарегистрироватьПостоянныеКоманды();

	Элементы.ПодсказкаОМобильномПриложении.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеНастроекМонитораПоказателей" Тогда
		ОбновлениеСтруктурыНастроекСервер();
		
		ИнициализироватьОбработчикАвтообновления(СтруктураНастроек.ПериодАвтообновления * 60);
		
		ОбновитьСоставМонитораКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИнициализироватьОбработчикАвтообновления();
	ИнициализироватьОбработчикПервогоЗапуска();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборЗонаВниманияПриИзменении(Элемент)
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	УстановитьПользовательскийПараметр(ЭтаФорма, "ОтборСтатус", ОтборСтатус);

	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьКонтроляПриИзменении(Элемент)
	УстановитьПользовательскийПараметр(ЭтаФорма, "ПериодичностьКонтроля", ПериодичностьКонтроля);
	
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьАнализПоказателяНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторВариантаАнализа = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Элемент.Имя);
	
	ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору("ВариантыАнализаЦелевыхПоказателей", ИдентификаторВариантаАнализа);

	Отбор = Новый Структура("ОтборВариантовАнализа, ДемонстрационныйРежим", ВариантАнализа, ДемонстрационныйРежим);
	ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", 
		Отбор,
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки,
		Истина);
		
	ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.Форма.ПечатнаяФормаВариантаАнализа", 
		ПараметрыФормы, 
		ЭтаФорма, 
		Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаОМобильномПриложенииНажатие(Элемент)
	ПараметрыФормы = Новый Структура("ИмяМакетаОписания, НазваниеПриложения", 
		"ОписаниеМобильногоПриложенияМониторERP", НСтр("ru='Монитор ERP';uk='Монітор ERP'"));
		
	ОткрытьФорму("ОбщаяФорма.ОписаниеМобильногоПриложения", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настроить(Команда)
	ПараметрыФормы = Новый Структура("ПользовательскиеНастройки", 
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
		
	ОбработкаЗавершения = Новый ОписаниеОповещения("НастроитьЗавершение", ЭтаФорма);
	ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.ФормаНастроек", 
		ПараметрыФормы, 
		ЭтаФорма, 
		ЭтаФорма,,,
		ОбработкаЗавершения);
КонецПроцедуры

&НаКлиенте 
Процедура НастроитьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если Не РезультатЗакрытия = КодВозвратаДиалога.Отмена 
		И Не РезультатЗакрытия = Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультатЗакрытия);
		
		ОбновлениеСтруктурыНастроекСервер();
		
		ИнициализироватьОбработчикАвтообновления(СтруктураНастроек.ПериодАвтообновления * 60);
		
		ОбновитьСоставМонитораКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ИнициализироватьОбработчикАвтообновления();
	
	ОбновитьСоставМонитораКлиент(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АнализВзаимосвязанныхВариантовАнализа(Команда)
	ИмяКоманды = Команда.Имя;
	
	ИдентификаторТекущегоЭлемента = ПолучитьИдентификаторЭлементаПоИмениСПозицией(ИмяКоманды);
	
	ИдентификаторВариантаАнализа = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(ИмяКоманды);
	ЧистоеИмяКоманды = ПолучитьЧистоеИмяКоманды(ИмяКоманды);
	
	ПараметрыФормы = Новый Структура("ИдентификаторВариантаАнализа, 
		|ВидПоиска, 
		|ОбновлятьДанныеПринудительно,
		|СоставМонитора,
		|ДемонстрационныйРежим", 
		ИдентификаторВариантаАнализа,
		ЧистоеИмяКоманды,
		Истина,
		СоставМонитора,
		ДемонстрационныйРежим);
		
	ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.Форма.ФормаМониторЦелевыхПоказателей", ПараметрыФормы, ЭтаФорма, ИдентификаторВариантаАнализа);
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ИзменитьОбъектАнализаДиаграммы(Команда)
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы[Команда.Имя].Пометка Тогда
		ИдентификаторПоказателя = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
		
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору("ВариантыАнализаЦелевыхПоказателей", ИдентификаторПоказателя);
		
		ИдентификаторОбъектаАнализа = ПолучитьИдентификаторДинамическогоПараметра(Команда.Имя);
		
		ПараметрыИсточникаДанных = Новый Структура("ОбъектАнализа", ИдентификаторОбъектаАнализа);
		
		// Поместим динамические параметры во временное хранилище
		ПоместитьОбновитьДинамическиеПараметрыВоВременномХранилище(ВариантАнализа, ИдентификаторПоказателя, ПараметрыИсточникаДанных);
		
		ИзменитьДинамическийПараметрДляДиаграммы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторПоказателя);
		
		// Изменим пометки кнопок
		Элементы[Команда.Имя].Пометка = Истина;
		КнопкиОбъектовАнализа = Элементы["ОбъектыАнализа__" + ИдентификаторПоказателя].ПодчиненныеЭлементы;
		
		Для Каждого КнопкаОбъектаАнализа Из КнопкиОбъектовАнализа Цикл 
			Если Не КнопкаОбъектаАнализа = Элементы[Команда.Имя] Тогда
				КнопкаОбъектаАнализа.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ИзменитьОбъектАнализаТаблицы(Команда)
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы[Команда.Имя].Пометка Тогда
		ИдентификаторПоказателя = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
		
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору("ВариантыАнализаЦелевыхПоказателей", ИдентификаторПоказателя);
		
		ИдентификаторОбъектаАнализа = ПолучитьИдентификаторДинамическогоПараметра(Команда.Имя);
		
		ПараметрыИсточникаДанных = Новый Структура("ОбъектАнализа", ИдентификаторОбъектаАнализа);
		
		// Поместим динамические параметры во временное хранилище
		ПоместитьОбновитьДинамическиеПараметрыВоВременномХранилище(ВариантАнализа, ИдентификаторПоказателя, ПараметрыИсточникаДанных);
		
		ИзменитьДинамическийПараметрДляТаблицы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторПоказателя);
		
		// Изменим пометки кнопок
		Элементы[Команда.Имя].Пометка = Истина;
		КнопкиОбъектовАнализа = Элементы["ОбъектыАнализа__" + ИдентификаторПоказателя].ПодчиненныеЭлементы;
		
		Для Каждого КнопкаОбъектаАнализа Из КнопкиОбъектовАнализа Цикл 
			Если Не КнопкаОбъектаАнализа = Элементы[Команда.Имя] Тогда
				КнопкаОбъектаАнализа.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ИзменитьПериодичность(Команда)
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы[Команда.Имя].Пометка Тогда
		ИдентификаторПоказателя = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
		
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору("ВариантыАнализаЦелевыхПоказателей", ИдентификаторПоказателя);
		
		ИдентификаторПериодичности = ПолучитьИдентификаторДинамическогоПараметра(Команда.Имя);
		
		ПараметрыИсточникаДанных = Новый Структура("ПериодичностьРасчетаПоказателя", ПолучитьСсылкуПеречисленияПоИдентификатору("Периодичность", ИдентификаторПериодичности));
		
		// Поместим динамические параметры во временное хранилище
		ПоместитьОбновитьДинамическиеПараметрыВоВременномХранилище(ВариантАнализа, ИдентификаторПоказателя, ПараметрыИсточникаДанных);
		
		ИзменитьДинамическийПараметрДляДиаграммы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторПоказателя);
		
		// Изменим пометки кнопок
		Элементы[Команда.Имя].Пометка = Истина;
		КнопкиОбъектовАнализа = Элементы["Периодичность__" + ИдентификаторПоказателя].ПодчиненныеЭлементы;
		
		Для Каждого КнопкаОбъектаАнализа Из КнопкиОбъектовАнализа Цикл 
			Если Не КнопкаОбъектаАнализа = Элементы[Команда.Имя] Тогда
				КнопкаОбъектаАнализа.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьАнализПоказателя(Команда)
	ИдентификаторПоказателя = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
	
	ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору("ВариантыАнализаЦелевыхПоказателей", ИдентификаторПоказателя);
	
	Отбор = Новый Структура("ОтборВариантовАнализа, ДемонстрационныйРежим", ВариантАнализа, ДемонстрационныйРежим);
	ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", 
		Отбор,
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки,
		Истина);
		
	ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.Форма.ПечатнаяФормаВариантаАнализа", 
		ПараметрыФормы, 
		ЭтаФорма, 
		Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчет(Команда)
	ИдентификаторВариантаАнализа = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
	СвойстваВариантаАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСвойстваВариантаАнализаПоИдентификатору(ИдентификаторВариантаАнализа);
	
	ИдентификаторВариантаОтчета = ПолучитьИдентификаторВариантаОтчета(Команда.Имя);
	ВариантОтчета = ПолучитьВариантОтчетаПоИдентификатору(ИдентификаторВариантаОтчета);
	СвойстваВариантаОтчета = ПолучитьСвойстваВариантаОтчета(ВариантОтчета);
	
	НастройкиВариантаОтчета = МониторингЦелевыхПоказателейВызовСервера.СформироватьНастройкиВариантаОтчета(СвойстваВариантаАнализа, СвойстваВариантаОтчета);
	
	Если НастройкиВариантаОтчета = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Выбранный отчет не найден в системе';uk='Вибраний звіт не знайдений в системі'"));
	Иначе
		ПараметрыОтчета = Новый Структура("КлючПользовательскихНастроек,
			|ПользовательскиеНастройки, 
			|ФиксированныеНастройки, 
			|КлючВарианта, 
			|КлючНазначенияИспользования, 
			|СформироватьПриОткрытии",
			Команда.Имя,
			НастройкиВариантаОтчета.ПользовательскиеНастройки,
			НастройкиВариантаОтчета.ФиксированныеНастройки,
			СвойстваВариантаОтчета.КлючВарианта,
			Команда.Имя,
			Истина);
		
		ОткрытьФорму(СвойстваВариантаОтчета.КлючОбъекта + ".Форма", ПараметрыОтчета, СвойстваВариантаАнализа.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	Если СоставМонитораНеопределен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сформировать сводный отчет невозможно, т.к. монитор показателей не настроен.';uk='Сформувати зведений звіт неможливо, тому що монітор показників не налаштований.'"),, НСтр("ru='Ошибка формирования сводного отчета';uk='Помилка формування зведеного звіту'"));
	ИначеЕсли СоставМонитораПустойПоОтбору Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сформировать сводный отчет невозможно, т.к. в текущий отбор не входит ни один показатель.';uk='Сформувати зведений звіт неможливо, тому що в поточний відбір не входить жоден показник.'"),, НСтр("ru='Ошибка формирования сводного отчета';uk='Помилка формування зведеного звіту'"));
	Иначе 
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, 
			"ВариантГруппировкиПоказателей", 
			СтруктураНастроек.ВариантГруппировкиПоказателей);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, 
			"КоличествоКолонокМонитораПоказателей", 
			СтруктураНастроек.КоличествоКолонокМонитораПоказателей);
		
		Отбор = Новый Структура("ДемонстрационныйРежим", ДемонстрационныйРежим);
		ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", 
			Отбор,
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки,
			Истина);
			
		ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.Форма.ПечатнаяФормаВариантаАнализа", 
			ПараметрыФормы, 
			ЭтаФорма, 
			Новый УникальныйИдентификатор());
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтилиОтображенияПоказателей

&НаСервере
Функция СтильОтображенияПоказателяБазовый()
	// Стиль диаграмм, таблиц, текстовых представлений
	Стиль = Новый Структура;
	Стиль.Вставить("Ширина",				56);
	Стиль.Вставить("ПоложениеЗаголовка",	ПоложениеЗаголовкаЭлементаФормы.Нет);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильОтображенияДиаграмм()
	// Уточненный стиль диаграмм
	Стиль = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтильОтображенияПоказателяБазовый());
	Стиль.Вставить("Высота",	8 * СтруктураНастроек.ПроизвольныйМасштаб / 100);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильОтображенияТекстовых()
	// Уточненный стиль текстовых представлений
	Стиль = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтильОтображенияПоказателяБазовый());
	Стиль.Вставить("Ширина",					12);
	Стиль.Вставить("Высота",					4);
	Стиль.Вставить("ГоризонтальноеПоложение",	ГоризонтальноеПоложениеЭлемента.Центр);
	Стиль.Вставить("ВертикальноеПоложение",		ВертикальноеПоложениеЭлемента.Центр);
	Стиль.Вставить("ЦветФона",					WebЦвета.Белый);
	Стиль.Вставить("Рамка",						Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1));
	Стиль.Вставить("РастягиватьПоГоризонтали",	Истина);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильОтображенияТаблиц()
	// Уточненный стиль таблиц
	Стиль = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтильОтображенияПоказателяБазовый());
	Стиль.Вставить("Высота",					8 * СтруктураНастроек.ПроизвольныйМасштаб / 100);
	Стиль.Вставить("ПоложениеКоманднойПанели",	ПоложениеКоманднойПанелиЭлементаФормы.Нет);
	Стиль.Вставить("ТолькоПросмотр",			Истина);
	Стиль.Вставить("Шапка",						Ложь);
	Стиль.Вставить("Подвал",					Ложь);
	Стиль.Вставить("ГоризонтальныеЛинии",		Ложь);
	Стиль.Вставить("ВертикальныеЛинии",			Ложь);
	Стиль.Вставить("МножественныйВыбор",		Ложь);
	Стиль.Вставить("ЧередованиеЦветовСтрок",	Истина);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильКомандныхПанелейПоказателей()
	Стиль = Новый Структура;
	Стиль.Вставить("РастягиватьПоГоризонтали",	Ложь);
	Стиль.Вставить("ГоризонтальноеПоложение",	ГоризонтальноеПоложениеЭлемента.Право);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильЗаголовков()
	Стиль = Новый Структура;
	Стиль.Вставить("Высота",					1);
	Стиль.Вставить("РастягиватьПоВертикали",	Ложь);
	Стиль.Вставить("РастягиватьПоГоризонтали",	Истина);
	Стиль.Вставить("ВертикальноеПоложение",		ВертикальноеПоложениеЭлемента.Верх);
	Стиль.Вставить("ПоложениеЗаголовка",		ПоложениеЗаголовкаЭлементаФормы.Нет);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыПоказателей()
	Стиль = Новый Структура;
	Стиль.Вставить("ШиринаПодчиненныхЭлементов",	ШиринаПодчиненныхЭлементовФормы.Одинаковая);
	Стиль.Вставить("ОтображатьЗаголовок",			Истина);
	Стиль.Вставить("Отображение",					ОтображениеОбычнойГруппы.ОбычноеВыделение);
	Стиль.Вставить("ШрифтЗаголовка",				ШрифтГруппыПоказателей());
	Стиль.Вставить("ЦветТекстаЗаголовка",			ЦветГруппыПоказателей());
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыПоказателейЦельДостигнута()
	Стиль = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтильГруппыПоказателей());
	Стиль.Вставить("ЦветТекстаЗаголовка",	WebЦвета.ЦветМорскойВолны);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыПоказателейПриемлемоеСостояние()
	Стиль = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтильГруппыПоказателей());
	Стиль.Вставить("ЦветТекстаЗаголовка",	WebЦвета.ТемноОранжевый);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыПоказателейНеприемлемоеСостояние()
	Стиль = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтильГруппыПоказателей());
	Стиль.Вставить("ЦветТекстаЗаголовка",	WebЦвета.Кирпичный);
	
	Возврат Стиль;
КонецФункции

&НаСервере 
Функция СтильГруппыПоСостоянию(Состояние)
	Если Состояние = "НеприемлемоеСостояние" 
		Или Состояние = "РассчитаноСОшибками" Тогда
		Возврат СтильГруппыПоказателейНеприемлемоеСостояние();
	ИначеЕсли Состояние = "ПриемлемоеСостояние" Тогда
		Возврат СтильГруппыПоказателейПриемлемоеСостояние();
	ИначеЕсли Состояние = "ЦельДостигнута" Тогда
		Возврат СтильГруппыПоказателейЦельДостигнута();
	Иначе
		Возврат СтильГруппыПоказателей();
	КонецЕсли;
КонецФункции

&НаСервере
Функция БазовыйМасштабТекста()
	Возврат Макс(100, 100 + 30*(СтруктураНастроек.ПроизвольныйМасштаб / 100-1));
КонецФункции

&НаСервере
Функция ШрифтДеталейПоказателя()
	Возврат Новый Шрифт(,,       ,,,, 40 + БазовыйМасштабТекста());
КонецФункции

&НаСервере
Функция ШрифтЗначенияПоказателя()
	Возврат Новый Шрифт(,, Истина,,,, 120 + БазовыйМасштабТекста());
КонецФункции

&НаСервере
Функция ШрифтВажно()
	Возврат Новый Шрифт(,, Истина);
КонецФункции

&НаСервере
Функция ШрифтЗаголовкаПоказателяВажно()
	Возврат Новый Шрифт(,, Истина,,,, БазовыйМасштабТекста());
КонецФункции

&НаСервере
Функция ЦветГруппыПоказателей()
	// Настройки групп-оберток для показателей
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ЦветГруппыПоказателей = ЦветаСтиля.ГруппаВариантовОтчетовЦвет82;
	Иначе // Такси.
		ЦветГруппыПоказателей = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
	КонецЕсли;
	
	Возврат ЦветГруппыПоказателей;
КонецФункции

&НаСервере
Функция ШрифтГруппыПоказателей()
	// Настройки групп-оберток для показателей
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ШрифтГруппыПоказателей = Новый Шрифт("MS Shell Dlg", 10, Истина, Ложь, Ложь, Ложь, 100);
	Иначе // Такси.
		ШрифтГруппыПоказателей = Новый Шрифт("Arial", 12, Истина, Ложь, Ложь, Ложь, 100);
	КонецЕсли;
	
	Возврат ШрифтГруппыПоказателей;
КонецФункции

#КонецОбласти 

#Область СозданиеЭлементовФормы

&НаСервере
Функция ВертикальнаяГруппа(Имя, Заголовок, РодительскаяГруппа = Неопределено)
	ГруппаСтрокаЭлементов = Элементы.Добавить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаСтрокаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСтрокаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСтрокаЭлементов.Заголовок = Заголовок;
	ГруппаСтрокаЭлементов.РазрешитьИзменениеСостава = Ложь;
	ГруппаСтрокаЭлементов.ОтображатьЗаголовок = Ложь;
	
	Возврат ГруппаСтрокаЭлементов;
КонецФункции

&НаСервере
Функция ГоризонтальнаяГруппа(Имя, Заголовок, РодительскаяГруппа = Неопределено)
	ГруппаСтрокаЭлементов = Элементы.Добавить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаСтрокаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСтрокаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаСтрокаЭлементов.Заголовок = Заголовок;
	ГруппаСтрокаЭлементов.ОтображатьЗаголовок = Ложь;
	
	Возврат ГруппаСтрокаЭлементов;
КонецФункции

// Добавляет вертикальные группы элементов формы, в которых 
// затем будут будут размещены элементы формы показателей
// 
// Параметры:
//	РодительскаяГруппа - ГруппаФормы
//	ВариантОтображенияПоказателейСтроки - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа, Неопределено - указывает на краткое отображение или в виде диаграммы/таблицы
//	КлючУникальностиГруппы - Строка - уникальный идентификатор группы, основанный на имени зоны внимания
//
&НаСервере 
Процедура ДобавитьГруппыКолонкиЭлементов(РодительскаяГруппа, ВариантОтображенияПоказателейСтроки = Неопределено, КлючУникальностиГруппы)
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	Если ВариантОтображенияПоказателейСтроки = ВариантыОтображенияВариантовАнализа.Кратко Тогда
		Для Сч = 1 По СтруктураНастроек.КоличествоКолонокМонитораПоказателей Цикл 
			ГруппаКолонкаЭлементов = ВертикальнаяГруппа("ГруппаКолонкаЭлементовКратко" + КлючУникальностиГруппы + "__" + Сч, НСтр("ru='Колонка №';uk='Колонка №'") + Сч, РодительскаяГруппа);
		КонецЦикла;
	Иначе
		Если Элементы.Найти("ГруппаКолонкаЭлементовПодробно" + КлючУникальностиГруппы) = Неопределено Тогда
			Для Сч = 1 По СтруктураНастроек.КоличествоКолонокМонитораПоказателей Цикл 
				ГруппаКолонкаЭлементов = ВертикальнаяГруппа("ГруппаКолонкаЭлементовПодробно" + КлючУникальностиГруппы + "__" + Сч, НСтр("ru='Колонка №';uk='Колонка №'") + Сч, РодительскаяГруппа);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Добавляет команды, доступные для указанного варианта анализа.
// Возможные команды: "Влияющие показатели", "Зависимые показатели", "Периодичность", "Объект анализа", "Отчеты", "Анализ показателя"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант, для которого добавляются команды
//	ГруппаЭлементов - ГруппаФормы - командная панель, в которую нужно добавить кнопки
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - указывает на краткое отображение или в виде диаграммы/таблицы
//
&НаСервере
Процедура ДобавитьКомандыВариантовАнализа(ВариантАнализа, ГруппаЭлементов, ИдентификаторЭлементаФормы, ВариантОтображения)
	ВариантыОтображения = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	ПараметрыДоступностиАнализаВзаимосвязанных = МониторингЦелевыхПоказателей.ПолучитьПараметрыДоступностиАнализаВзаимосвязанных(ВариантАнализа);
	
	ДобавлятьПодменюВзаимосвязей = Истина;
	ДобавлятьПодменюОбъектовАнализа = Не ДемонстрационныйРежим
		И ((ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика)
		И ВариантАнализа.РежимПокомпонентногоСравнения = 0);
	ДобавлятьПодменюПериодичности = Не ДемонстрационныйРежим
		И (ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика);
	
	КоманднаяПанельКомандПоказателя = Элементы.Добавить("КоманднаяПанельКомандПоказателя__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), Элементы["Заголовок__" + ИдентификаторЭлементаФормы]);
	КоманднаяПанельКомандПоказателя.Вид = ВидГруппыФормы.КоманднаяПанель;
	КоманднаяПанельКомандПоказателя.Заголовок = НСтр("ru='Команды показателя';uk='Команди показника'");
	ЗаполнитьЗначенияСвойств(КоманднаяПанельКомандПоказателя, СтильКомандныхПанелейПоказателей());
	
	// Добавим подменю "Все действия"
	ПодменюВсеДействия = Элементы.Добавить("ВсеДействия__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), КоманднаяПанельКомандПоказателя);
	ПодменюВсеДействия.Вид = ВидГруппыФормы.Подменю;
	ПодменюВсеДействия.Отображение = ОтображениеКнопки.Текст;
	ПодменюВсеДействия.Заголовок = " ";
	
	// Добавим реквизиты формы
	
	Если ДобавлятьПодменюВзаимосвязей
		И Не (ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеЗависимые ИЛИ ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеВлияющие) Тогда	
		ПустаяКоманда = Команды.Добавить("ПустаяКоманда__" + ИдентификаторЭлементаФормы);
		ПустаяКоманда.Заголовок = НСтр("ru='Взаимосвязей нет';uk='Взаємозв''язків немає'");
		ПустаяКоманда.Картинка = БиблиотекаКартинок.ПиктограммаВсеПоказатели;
	КонецЕсли;
	
	Если ДобавлятьПодменюВзаимосвязей
		И ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеЗависимые Тогда	
		КомандаПоискаСвязи = Команды.Добавить("ЗависимыеПоказатели__" + ИдентификаторЭлементаФормы);
		КомандаПоискаСвязи.Заголовок = НСтр("ru='Зависимые показатели';uk='Залежні показники'");
		КомандаПоискаСвязи.Действие = "Подключаемый_АнализВзаимосвязанныхВариантовАнализа";
		КомандаПоискаСвязи.Картинка = БиблиотекаКартинок.ПиктограммаЗависимыеПоказатели;
	КонецЕсли;
	
	Если ДобавлятьПодменюВзаимосвязей
		И ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеВлияющие Тогда	
		КомандаПоискаСвязи = Команды.Добавить("ВлияющиеПоказатели__" + ИдентификаторЭлементаФормы);
		КомандаПоискаСвязи.Заголовок = НСтр("ru='Влияющие показатели';uk='Впливаючі показники'");
		КомандаПоискаСвязи.Действие = "Подключаемый_АнализВзаимосвязанныхВариантовАнализа";
		КомандаПоискаСвязи.Картинка = БиблиотекаКартинок.ПиктограммаВлияющиеПоказатели;
	КонецЕсли;
	
	КомандаАнализПоказателя = Команды.Добавить("ОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы);
	КомандаАнализПоказателя.Заголовок = НСтр("ru='Анализ показателя';uk='Аналіз показника'");
	КомандаАнализПоказателя.Действие = "Подключаемый_ОткрытьАнализПоказателя";
	КомандаАнализПоказателя.Картинка = БиблиотекаКартинок.Отчеты;
	
	// Получим количество варианты отчетов для показателя
	ВариантыОтчетовПоказателя = ПолучитьВариантыОтчетовПоказателя(ВариантАнализа);
	КоличествоВариантовОтчетов = ВариантыОтчетовПоказателя.Количество();
	
	Если ВариантОтображения = ВариантыОтображения.Диаграмма 
		ИЛИ ВариантОтображения = ВариантыОтображения.Таблица Тогда
		
		// Добавим меню по объектам анализа
		ДоступныеОбъектыАнализа = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(ВариантАнализа.Владелец);
		ОбъектАнализаПоУмолчанию = ВариантАнализа.ОбъектАнализа.Получить();
		
		Если ДобавлятьПодменюОбъектовАнализа И ДоступныеОбъектыАнализа.Количество() > 1 Тогда
			Для Каждого ОбъектАнализа Из ДоступныеОбъектыАнализа Цикл 
				КомандаИзмененияОбъектаАнализа = Команды.Добавить("ИзменитьОбъектАнализа__" + ИдентификаторЭлементаФормы + "__" + Строка(ОбъектАнализа.Значение));
				КомандаИзмененияОбъектаАнализа.Заголовок = ОбъектАнализа.Представление;
				Если ВариантОтображения = ВариантыОтображения.Диаграмма Тогда
					КомандаИзмененияОбъектаАнализа.Действие = "Подключаемый_ИзменитьОбъектАнализаДиаграммы";
				Иначе
					КомандаИзмененияОбъектаАнализа.Действие = "Подключаемый_ИзменитьОбъектАнализаТаблицы";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Добавим меню периодичности
		// Получим адрес динамических параметров
		ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ВариантАнализа);
		НайденныеСоставМонитора = СоставМонитора.НайтиСтроки(ОтборПоВариантуАнализа);
		Если НайденныеСоставМонитора.Количество() > 0 Тогда
			АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
			
			Если Не ПустаяСтрока(АдресДинамическихПараметров) Тогда
				ДинамическиеПараметры = ПолучитьИзВременногоХранилища(АдресДинамическихПараметров);
				
				Если ДинамическиеПараметры.Свойство("ПериодичностьРасчетаПоказателя") Тогда
					ПериодичностьПоУмолчанию = ДинамическиеПараметры.ПериодичностьРасчетаПоказателя;
				Иначе
					ПериодичностьПоУмолчанию = ВариантАнализа.ПериодичностьРасчетаПоказателя;
				КонецЕсли;
			Иначе
				ПериодичностьПоУмолчанию = ВариантАнализа.ПериодичностьРасчетаПоказателя;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавлятьПодменюПериодичности Тогда
			КомандаИзмененияПериодичности = Команды.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "День");
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='День';uk='День'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			КомандаИзмененияПериодичности = Команды.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Неделя");
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Неделя';uk='Тиждень'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			КомандаИзмененияПериодичности = Команды.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Декада");
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Декада';uk='Декада'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			КомандаИзмененияПериодичности = Команды.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Месяц");
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Месяц';uk='Місяць'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			КомандаИзмененияПериодичности = Команды.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Квартал");
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Квартал';uk='Квартал'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			КомандаИзмененияПериодичности = Команды.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Полугодие");
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Полугодие';uk='Півріччя'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			КомандаИзмененияПериодичности = Команды.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Год");
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Год';uk='Рік'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
		КонецЕсли;
		
		// Добавим элементы формы
		// Добавим подменю связей
		Если ДобавлятьПодменюВзаимосвязей Тогда
			Если ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеЗависимые ИЛИ ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеВлияющие Тогда	
				ПодменюЗависимостей = Элементы.Добавить("ЗависимостиПоказателей__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ПодменюВсеДействия);
				ПодменюЗависимостей.Вид = ВидГруппыФормы.Подменю;
				ПодменюЗависимостей.Заголовок = НСтр("ru='Взаимосвязи';uk='Взаємозв''язки'");
				ПодменюЗависимостей.Картинка = БиблиотекаКартинок.ПиктограммаВсеПоказатели;
			Иначе
				КнопкаПоискаСвязи = Элементы.Добавить("ЗависимостиПоказателей__" + ИдентификаторЭлементаФормы, Тип("КнопкаФормы"), ПодменюВсеДействия);
				КнопкаПоискаСвязи.ИмяКоманды = "ПустаяКоманда__" + ИдентификаторЭлементаФормы;
				КнопкаПоискаСвязи.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавлятьПодменюВзаимосвязей И ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеЗависимые Тогда	
			КнопкаПоискаСвязи =Элементы.Добавить("ФормаЗависимыеПоказатели__" + ИдентификаторЭлементаФормы, Тип("КнопкаФормы"), ПодменюЗависимостей);
			КнопкаПоискаСвязи.ИмяКоманды = "ЗависимыеПоказатели__" + ИдентификаторЭлементаФормы;
		КонецЕсли;
		
		Если ДобавлятьПодменюВзаимосвязей И ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеВлияющие Тогда	
			КнопкаПоискаСвязи =Элементы.Добавить("ФормаВлияющиеПоказатели__" + ИдентификаторЭлементаФормы, Тип("КнопкаФормы"), ПодменюЗависимостей);
			КнопкаПоискаСвязи.ИмяКоманды = "ВлияющиеПоказатели__" + ИдентификаторЭлементаФормы;
		КонецЕсли;
		
		Если ДобавлятьПодменюОбъектовАнализа И ДоступныеОбъектыАнализа.Количество() > 1 Тогда
			ПодменюОбъектыАнализа = Элементы.Добавить("ОбъектыАнализа__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ПодменюВсеДействия);
			ПодменюОбъектыАнализа.Вид = ВидГруппыФормы.Подменю;
			ПодменюОбъектыАнализа.Заголовок = НСтр("ru='Объекты анализа';uk='Об''єкти аналізу'");
			
			Для Каждого ОбъектАнализа Из ДоступныеОбъектыАнализа Цикл 
				КнопкаОбъектаАнализа = Элементы.Добавить("ИзменитьОбъектАнализа__" + ИдентификаторЭлементаФормы + "__" + Строка(ОбъектАнализа.Значение), Тип("КнопкаФормы"), ПодменюОбъектыАнализа);
				КнопкаОбъектаАнализа.ИмяКоманды = "ИзменитьОбъектАнализа__" + ИдентификаторЭлементаФормы + "__" + Строка(ОбъектАнализа.Значение);
				Если ОбъектАнализа.Значение = ОбъектАнализаПоУмолчанию Тогда
					КнопкаОбъектаАнализа.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДобавлятьПодменюПериодичности Тогда
			ПодменюПериодичности = Элементы.Добавить("Периодичность__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ПодменюВсеДействия);
			ПодменюПериодичности.Вид = ВидГруппыФормы.Подменю;
			ПодменюПериодичности.Заголовок = НСтр("ru='Периодичность';uk='Періодичність'");
			
			КнопкаПериодичности = Элементы.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "День", Тип("КнопкаФормы"), ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "День";
			Если "День" = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ПериодичностьПоУмолчанию) Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Неделя", Тип("КнопкаФормы"), ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Неделя";
			Если "Неделя" = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ПериодичностьПоУмолчанию) Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Декада", Тип("КнопкаФормы"), ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Декада";
			Если "Декада" = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ПериодичностьПоУмолчанию) Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Месяц", Тип("КнопкаФормы"), ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Месяц";
			Если "Месяц" = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ПериодичностьПоУмолчанию) Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Квартал", Тип("КнопкаФормы"), ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Квартал";
			Если "Квартал" = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ПериодичностьПоУмолчанию) Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Полугодие", Тип("КнопкаФормы"), ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Полугодие";
			Если "Полугодие" = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ПериодичностьПоУмолчанию) Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить("ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Год", Тип("КнопкаФормы"), ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Год";
			Если "Год" = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ПериодичностьПоУмолчанию) Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоВариантовОтчетов Тогда
		Для Каждого ВариантОтчетаПоказателя Из ВариантыОтчетовПоказателя Цикл 
			ИдентификаторВарианта = ВариантОтчетаПоказателя.Значение;
			НаименованиеВарианта = ВариантОтчетаПоказателя.Представление;
			
			КомандаОткрытьОтчет = Команды.Добавить("ОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта);
			КомандаОткрытьОтчет.Заголовок = НаименованиеВарианта;
			КомандаОткрытьОтчет.Действие = "Подключаемый_ОткрытьОтчет";
			КомандаОткрытьОтчет.Картинка = БиблиотекаКартинок.Отчет;
		КонецЦикла;
		
		ПодменюОтчеты = Элементы.Добавить("Отчеты__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ПодменюВсеДействия);
		ПодменюОтчеты.Вид = ВидГруппыФормы.Подменю;
		ПодменюОтчеты.Заголовок = НСтр("ru='Отчеты';uk='Звіти'");
		ПодменюОтчеты.Картинка = БиблиотекаКартинок.Отчет;
		
		Для Каждого ВариантОтчетаПоказателя Из ВариантыОтчетовПоказателя Цикл 
			ИдентификаторВарианта = ВариантОтчетаПоказателя.Значение;
			
			КнопкаОтчета = Элементы.Добавить("ФормаОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта, Тип("КнопкаФормы"), ПодменюОтчеты);
			КнопкаОтчета.ИмяКоманды = "ОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта;
		КонецЦикла;
	КонецЕсли;
	
	// Добавим команды анализа, расшифровки и настройки
	КнопкаАнализПоказателя = Элементы.Добавить("ФормаОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы, Тип("КнопкаФормы"), ПодменюВсеДействия);
	КнопкаАнализПоказателя.ИмяКоманды = "ОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы;
КонецПроцедуры

// Кэширует свойства анализируемого состава монитора
// Анализируется количество источников данных: 
//	- по которым требуется вывод подробной информации
//	- по которым требуется вывод итога таблицы
//	- по которым требуется анализ состояния по нарастающему итогу
// 
// Параметры:
//	АнализируемыйСоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках
//	АдресаДинамическихПараметров - ТаблицаЗначений, Неопределено - содержит вариант анализа и адрес дин. настроек во временном хранилище
//
&НаСервере 
Процедура ЗаполнитьСводнуюИнформациюПоИсточникамДанных(АнализируемыйСоставМонитора, АдресаДинамическихПараметров = Неопределено)
	НаборИсточниковДанных = АнализируемыйСоставМонитора.НаборИсточниковДанных;
	
	Если Не АнализируемыйСоставМонитора.Пустой Тогда 
		ВариантыАнализаСПодробностями.Очистить();
		ОтборПоПодробным = Новый Структура("ВыводитьПодробности", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоПодробным);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ВариантыАнализаСПодробностями.Добавить(НайденныйВариантАнализа.ВариантАнализа);
		КонецЦикла;
		
		ТабличныеВариантыАнализаСИтогами.Очистить();
		ОтборПоТабличнымСИтогами = Новый Структура("ВыводитьИтогТаблицы", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоТабличнымСИтогами);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ТабличныеВариантыАнализаСИтогами.Добавить(НайденныйВариантАнализа.ВариантАнализа);
		КонецЦикла;
		
		ВариантыАнализаСНарастающимИтогом.Очистить();
		ОтборПоНарастающемуИтогу = Новый Структура("СостояниеПоНарастающемуИтогу", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоНарастающемуИтогу);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ВариантыАнализаСНарастающимИтогом.Добавить(НайденныйВариантАнализа.ВариантАнализа);
		КонецЦикла;
		
		СоставМонитораОбъект = НаборИсточниковДанных.Скопировать(,"ВариантАнализа, 
			|ОшибкаРасчета,
			|РасчетыНеактуальны,
			|Пустой, 
			|СостояниеПоНарастающемуИтогу, 
			|ВыводитьИтогТаблицы, 
			|ВыводитьПодробности, 
			|Группа, 
			|ЗонаВнимания, 
			|ПорядокЗоныВнимания");
		СоставМонитораОбъект.Колонки.Добавить("АдресДинамическихПараметров");
		
		// Заполним переданные адреса динамических параметров
		Если Не АдресаДинамическихПараметров = Неопределено Тогда
			Для Каждого ЭлементСоставаМонитора Из СоставМонитораОбъект Цикл 
				ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ЭлементСоставаМонитора.ВариантАнализа);
				НайденныеСоставМонитора = АдресаДинамическихПараметров.НайтиСтроки(ОтборПоВариантуАнализа);
				Если НайденныеСоставМонитора.Количество() > 0 Тогда
					ЭлементСоставаМонитора.АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗначениеВДанныеФормы(СоставМонитораОбъект, СоставМонитора);
	Иначе
		ВариантыАнализаСПодробностями.Очистить();
		ТабличныеВариантыАнализаСИтогами.Очистить();
		ВариантыАнализаСНарастающимИтогом.Очистить();
		СоставМонитора.Очистить();
	КонецЕсли;
КонецПроцедуры

// Пересчитывает источник данных для переданного варианта анализа при изменении объекта анализа или периодичности.
// Обновляет диаграмму варианта анализа
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант, для которого изменили дин. параметр
//	ПараметрыИсточникаДанных - Структура, содержащая состояние динамических параметров варианта анализа
//	ИдентификаторЭлементаФормы - Строка - уникальный идентификатор(имя) обновляемой диаграммы
//
&НаСервере 
Процедура ИзменитьДинамическийПараметрДляДиаграммы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторЭлементаФормы)
	ПринудительноеОбновление = Ложь;
	
	Если ПараметрыИсточникаДанных.Свойство("ОбъектАнализа") Тогда
		Если Строка(ВариантАнализа.ОбъектАнализа.Получить()) = ПараметрыИсточникаДанных.ОбъектАнализа Тогда
			ПринудительноеОбновление = ПринудительноеОбновление Или Ложь;
		Иначе
			ПринудительноеОбновление = ПринудительноеОбновление Или Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыИсточникаДанных.Свойство("ПериодичностьРасчетаПоказателя") Тогда	
		Если ВариантАнализа.ПериодичностьРасчетаПоказателя = ПараметрыИсточникаДанных.ПериодичностьРасчетаПоказателя Тогда
			ПринудительноеОбновление = ПринудительноеОбновление Или Ложь;
		Иначе
			ПринудительноеОбновление = ПринудительноеОбновление Или Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИсточникДанных = МониторингЦелевыхПоказателей.ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, 
		Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма, 
		ПринудительноеОбновление, 
		ПараметрыИсточникаДанных);
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	РасчетыНеактуальны = НЕ ИсточникДанных.РасчетыАктуальны;
	
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны И НЕ ОшибкаРасчета Тогда
		ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы].ИсточникДанных = Новый ТаблицаЗначений;
		ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы].ИсточникДанных = Неопределено;
		ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ЗаполнитьДиаграммуДляМонитора(ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы], ВариантАнализа, ИсточникДанных);
	Иначе
		Диаграмма = ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя';uk='Помилка розрахунку показника'");
		КонецЕсли;

		Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки);
	КонецЕсли;
	
	// Установим новое наименование диаграммы
	УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных, Истина);
КонецПроцедуры

// Пересчитывает источник данных для переданного варианта анализа при изменении объекта анализа или периодичности.
// Обновляет таблицу варианта анализа
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант, для которого изменили дин. параметр
//	ПараметрыИсточникаДанных - Структура, содержащая состояние динамических параметров варианта анализа
//	ИдентификаторЭлементаФормы - Строка - уникальный идентификатор(имя) обновляемой таблицы
//
&НаСервере 
Процедура ИзменитьДинамическийПараметрДляТаблицы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторЭлементаФормы)
	Если ПараметрыИсточникаДанных.Свойство("ОбъектАнализа") Тогда
		Если Строка(ВариантАнализа.ОбъектАнализа.Получить()) = ПараметрыИсточникаДанных.ОбъектАнализа Тогда
			ПринудительноеОбновление = Ложь;
		Иначе
			ПринудительноеОбновление = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыИсточникаДанных.Свойство("ПериодичностьРасчетаПоказателя") Тогда	
		Если ВариантАнализа.ПериодичностьРасчетаПоказателя = ПараметрыИсточникаДанных.ПериодичностьРасчетаПоказателя Тогда
			ПринудительноеОбновление = Ложь;
		Иначе
			ПринудительноеОбновление = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИсточникДанныхВариантаАнализа = МониторингЦелевыхПоказателей.ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма, ПринудительноеОбновление,ПараметрыИсточникаДанных);
	
	Если Не ИсточникДанныхВариантаАнализа.Пустой Тогда
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанныхВариантаАнализа.ДинамическиеСвойстваВариантаАнализа;
		ВыводитьИтогВТаблице = (Не ТабличныеВариантыАнализаСИтогами.НайтиПоЗначению(ВариантАнализа) = Неопределено);
		
		Если ВыводитьИтогВТаблице Тогда 
			КратностьЗначений			= ВариантАнализа.КратностьЗначений;
			ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
			Размерность					= СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
			
			ЭтаФорма["ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанныхВариантаАнализа.Данные.Итог(ИсточникДанныхВариантаАнализа.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа), ТочностьРасчетаДробнойЧасти, КратностьЗначений) + " " + Размерность;
			
		КонецЕсли;
		
		МониторингЦелевыхПоказателей.ЗаполнитьТаблицуДляМонитора(ЭтаФорма["ТаблицаЗначений__" + ИдентификаторЭлементаФормы], ИдентификаторЭлементаФормы, ВариантАнализа, ИсточникДанныхВариантаАнализа);
	Иначе
		Если Не ИсточникДанныхВариантаАнализа.РасчетыАктуальны Тогда
			ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы], НСтр("ru='Данные неактуальны.';uk='Дані неактуальні.'"));
		ИначеЕсли ИсточникДанныхВариантаАнализа.ОшибкаРасчета Тогда
			ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы], НСтр("ru='Ошибка при расчете значений показателя.';uk='Помилка при розрахунку значень показника.'"));
		Иначе
			ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы], НСтр("ru='Недостаточно данных для расчета показателя.';uk='Недостатньо даних для розрахунку показника.'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Добавляет элементы формы для вида отображения "Диаграмма"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//
&НаСервере
Процедура НарисоватьДиаграмму(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	ВыводитьКартинкиСостоянияИТренда = Ложь;
	
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
	
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	МассивРеквизитов = Новый Массив;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(
		Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Диаграмма для';uk='Діаграма для'") + " " + ВариантАнализа));
	
	// Добавим картинки
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Картинка"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаСостояния__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Картинка состояния';uk='Картинка стану'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаТренда__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Картинка тренда';uk='Картинка тренду'")));
	КонецЕсли;
	
	// Добавим строковый реквизит
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ФорматированнаяСтрока"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Наименование показателя';uk='Найменування показника'")));
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Добавим поля формы
	ГруппаЗаголовокПоказателя = ГоризонтальнаяГруппа("Заголовок__" + ИдентификаторЭлементаФормы, НСтр("ru='Статусы';uk='Статуси'"), ГруппаЭлементов);
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаСостояния__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЗаголовокПоказателя);
		ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаСостояния__" + ИдентификаторЭлементаФормы;
		ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеЗначенияИндикатора.Ширина = 2;
		ПолеЗначенияИндикатора.Высота = 1;
		ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
		ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
		ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу;
		
		ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаТренда__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЗаголовокПоказателя);
		ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаТренда__" + ИдентификаторЭлементаФормы;
		ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеЗначенияИндикатора.Ширина = 2;
		ПолеЗначенияИндикатора.Высота = 1;
		ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
		ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
		ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	КонецЕсли;
	
	ПолеНаименования = Элементы.Вставить("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЗаголовокПоказателя);
	ПолеНаименования.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНаименования.ПутьКДанным = "НаименованиеПоказателя__" + ИдентификаторЭлементаФормы;
	ЗаполнитьЗначенияСвойств(ПолеНаименования, СтильЗаголовков());
	
	ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
	ПолеДиаграммы.Вид = ВидПоляФормы.ПолеДиаграммы;
	ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
	ЗаполнитьЗначенияСвойств(ПолеДиаграммы, СтильОтображенияДиаграмм());
	
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		ЭтаФорма["КартинкаСостояния__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьКартинкуСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных);
		ЭтаФорма["КартинкаТренда__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьКартинкуТрендаДляПоказателя(ВариантАнализа, ИсточникДанных);
	КонецЕсли;
	
	УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		Диаграмма = ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы];
		Диаграмма = МониторингЦелевыхПоказателей.ЗаполнитьДиаграммуДляМонитора(Диаграмма, ВариантАнализа, ИсточникДанных);
	Иначе
		Диаграмма = ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя';uk='Помилка розрахунку показника'");
		КонецЕсли;
		
		Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

// Добавляет элементы формы для вида отображения "Таблица"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//
&НаСервере
Процедура НарисоватьТаблицу(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	ВыводитьКартинкиСостоянияИТренда = Ложь;
	
	ВыводитьИтогВТаблице = (Не ТабличныеВариантыАнализаСИтогами.НайтиПоЗначению(ВариантАнализа) = Неопределено);
	
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	МассивРеквизитов = Новый Массив;
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ТаблицаЗначений"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		МассивРеквизитов.Добавить(
			Новый РеквизитФормы("ТаблицаЗначений__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Таблица для';uk='Таблиця для'") + " " + ВариантАнализа));
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Диаграмма"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		МассивРеквизитов.Добавить(
			Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Диаграмма для';uk='Діаграма для'") + " " + ВариантАнализа));
	КонецЕсли;
	
	// Добавим картинки
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Картинка"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаСостояния__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Картинка состояния';uk='Картинка стану'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаТренда__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Картинка тренда';uk='Картинка тренду'")));
	КонецЕсли;
	
	// Добавим строковый реквизит
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ФорматированнаяСтрока"));
	ОписаниеТиповФорматированныхСтрок = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, ОписаниеТиповФорматированныхСтрок, "", НСтр("ru='Наименование показателя';uk='Найменування показника'")));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрок = Новый ОписаниеТипов(МассивТипов);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КолонкаОбъектАнализа" + "__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "ТаблицаЗначений__" + ИдентификаторЭлементаФормы, ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "ТаблицаЗначений__" + ИдентификаторЭлементаФормы, ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление));
		
		Если ВыводитьИтогВТаблице Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок));
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Заполним данные реквизитов формы
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		ЭтаФорма["КартинкаСостояния__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьКартинкуСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных);
		ЭтаФорма["КартинкаТренда__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьКартинкуТрендаДляПоказателя(ВариантАнализа, ИсточникДанных);
	КонецЕсли;
	
	УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных);
	
	// Добавим поля формы
	ГруппаЗаголовокПоказателя = ГоризонтальнаяГруппа("Заголовок__" + ИдентификаторЭлементаФормы, НСтр("ru='Заголовок показателя';uk='Заголовок показника'"), ГруппаЭлементов);
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаСостояния__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЗаголовокПоказателя);
		ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаСостояния__" + ИдентификаторЭлементаФормы;
		ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеЗначенияИндикатора.Ширина = 2;
		ПолеЗначенияИндикатора.Высота = 1;
		ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
		ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
		ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу;
		
		ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаТренда__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЗаголовокПоказателя);
		ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаТренда__" + ИдентификаторЭлементаФормы;
		ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеЗначенияИндикатора.Ширина = 2;
		ПолеЗначенияИндикатора.Высота = 1;
		ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
		ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
		ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	КонецЕсли;
	
	ПолеНаименования = Элементы.Вставить("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЗаголовокПоказателя);
	ПолеНаименования.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНаименования.ПутьКДанным = "НаименованиеПоказателя__" + ИдентификаторЭлементаФормы;
	ЗаполнитьЗначенияСвойств(ПолеНаименования, СтильЗаголовков());
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПолеТаблицы = Элементы.Вставить("ТаблицаЗначений__" + ИдентификаторЭлементаФормы, Тип("ТаблицаФормы"), ГруппаЭлементов);
		ПолеТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы;
		ЗаполнитьЗначенияСвойств(ПолеТаблицы, СтильОтображенияТаблиц());
		ПолеТаблицы.Подвал = ВыводитьИтогВТаблице;
		ПолеТаблицы.КонтекстноеМеню.Доступность = Ложь;
		
		ПолеПоляТаблицы = Элементы.Вставить("КолонкаОбъектАнализа" + "__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ПолеТаблицы);
		ПолеПоляТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПоляТаблицы.АвтоВысотаЯчейки = Истина;
		ПолеПоляТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы + "." + "КолонкаОбъектАнализа" + "__" + ИдентификаторЭлементаФормы;
		ПолеПоляТаблицы.ОтображатьВПодвале = Ложь;
		
		ПолеПоляТаблицы = Элементы.Вставить("КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ПолеТаблицы);
		ПолеПоляТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПоляТаблицы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		ПолеПоляТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы + "." + "КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы;
		
		Если ВыводитьИтогВТаблице Тогда 
			ПолеПоляТаблицы.ПутьКДаннымПодвала = "ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы;
			ПолеПоляТаблицы.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
			ПолеПоляТаблицы.ШрифтПодвала = ШрифтВажно();
			
			КратностьЗначений			= ВариантАнализа.КратностьЗначений;
			ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
			Размерность					= СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
			
			ЭтаФорма["ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы] = ИсточникДанных.Данные.Итог(ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа);
		КонецЕсли;
		
		МониторингЦелевыхПоказателей.ЗаполнитьТаблицуДляМонитора(ЭтаФорма["ТаблицаЗначений__" + ИдентификаторЭлементаФормы], ИдентификаторЭлементаФормы, ВариантАнализа, ИсточникДанных);
		
	Иначе
		ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
		ПолеДиаграммы.Вид = ВидПоляФормы.ПолеДиаграммы;
		ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
		ПолеДиаграммы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеДиаграммы.Ширина = 56;
		ПолеДиаграммы.Высота = 8 * СтруктураНастроек.ПроизвольныйМасштаб / 100;
		
		Диаграмма = ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя';uk='Помилка розрахунку показника'");
		КонецЕсли;
		
		Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

// Добавляет элементы формы для вида отображения "Кратко"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//
&НаСервере
Процедура НарисоватьКратко(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	ВыводитьКартинкиСостоянияИТренда = Ложь;
	
	МассивРеквизитов = Новый Массив;
	
	ПоказыватьТекущееЗначениеИДеталиПоказателя = (Не ВариантыАнализаСПодробностями.НайтиПоЗначению(ВариантАнализа) = Неопределено);
	ИспользоватьНарастающийИтог = (Не ВариантыАнализаСНарастающимИтогом.НайтиПоЗначению(ВариантАнализа) = Неопределено);
	
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ФорматированнаяСтрока"));
	ОписаниеТиповФорматированныхСтрок = Новый ОписаниеТипов(МассивТипов);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
		МассивРеквизитов.Добавить(
			Новый РеквизитФормы("Значение__" + ИдентификаторЭлементаФормы, ОписаниеТиповФорматированныхСтрок, "", НСтр("ru='Значение показателя';uk='Значення показника'")));
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Диаграмма"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		МассивРеквизитов.Добавить(
			Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Диаграмма для';uk='Діаграма для'") + " " + ВариантАнализа));
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрок = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, ОписаниеТиповФорматированныхСтрок, "", НСтр("ru='Наименование показателя';uk='Найменування показника'")));
	
	// Добавим картинки-реквизиты
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Картинка"));
		ОписаниеТиповКартинок = Новый ОписаниеТипов(МассивТипов);
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаСостояния__" + ИдентификаторЭлементаФормы, ОписаниеТиповКартинок, "", НСтр("ru='Картинка состояния';uk='Картинка стану'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаТренда__" + ИдентификаторЭлементаФормы, ОписаниеТиповКартинок, "", НСтр("ru='Картинка тренда';uk='Картинка тренду'")));
	КонецЕсли;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ГруппаЗаголовокПоказателя = ГоризонтальнаяГруппа("Заголовок__" + ИдентификаторЭлементаФормы, НСтр("ru='Заголовок показателя';uk='Заголовок показника'"), ГруппаЭлементов);
	
	// Добавим элементы формы
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаСостояния__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЗаголовокПоказателя);
		ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаСостояния__" + ИдентификаторЭлементаФормы;
		ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеЗначенияИндикатора.Ширина = 2;
		ПолеЗначенияИндикатора.Высота = 1;
		ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
		ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
		ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу;
		
		ПолеИндикатора = Элементы.Вставить("КартинкаТренда__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);//ГруппаЗаголовокПоказателя);
		ПолеИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
		ПолеИндикатора.ПутьКДанным = "КартинкаТренда__" + ИдентификаторЭлементаФормы;
		ПолеИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеИндикатора.Ширина = 2;
		ПолеИндикатора.Высота = 1;
		ПолеИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		ПолеИндикатора.РастягиватьПоГоризонтали = Ложь;
		ПолеИндикатора.РастягиватьПоВертикали = Ложь;
		ПолеИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу + Символы.ПС + Символы.ПС + ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	КонецЕсли;
	
	ПолеНаименования = Элементы.Вставить("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЗаголовокПоказателя);
	ПолеНаименования.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНаименования.ПутьКДанным = "НаименованиеПоказателя__" + ИдентификаторЭлементаФормы;
	ЗаполнитьЗначенияСвойств(ПолеНаименования, СтильЗаголовков());
	
	КратностьЗначений = ВариантАнализа.КратностьЗначений;
	ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	// Заполним значения созданных полей
	Если ВыводитьКартинкиСостоянияИТренда Тогда
		ЭтаФорма["КартинкаСостояния__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьКартинкуСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных);
		ЭтаФорма["КартинкаТренда__" + ИдентификаторЭлементаФормы] = МониторингЦелевыхПоказателей.ПолучитьКартинкуТрендаДляПоказателя(ВариантАнализа, ИсточникДанных);
	КонецЕсли;
	
	ТекстовоеПредставлениеПериода = МониторингЦелевыхПоказателей.ПредставлениеПериодаВариантаАнализа(ИсточникДанных);
	
	УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПолеЗначения = Элементы.Вставить("Значение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
		ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеЗначения.ПутьКДанным = "Значение__" + ИдентификаторЭлементаФормы;
		ЗаполнитьЗначенияСвойств(ПолеЗначения, СтильОтображенияТекстовых());
		
		ПолеЗначения.УстановитьДействие("Нажатие", "Подключаемый_ОткрытьАнализПоказателяНажатие");
	
		ПоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		ОтображаемоеЗначение = ПоследнееЗначение;
		
		РазмерностьПоказателя = СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
		
		Если ЗначениеЗаполнено(РазмерностьПоказателя) Тогда
			СтрокаРазмерности = " " + РазмерностьПоказателя;
		Иначе
			СтрокаРазмерности = "";
		КонецЕсли;
		Если ПоказыватьТекущееЗначениеИДеталиПоказателя Тогда
			ДеталиПоказателяСтрока = "";
			Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
				ПоследнееЦелевоеЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, ТочностьРасчетаДробнойЧасти);
				ПредпоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПредпоследнееЗначение, ТочностьРасчетаДробнойЧасти);
			Иначе
				ПоследнееЦелевоеЗначение = 0;
				ПредпоследнееЗначение = 0;
			КонецЕсли;
			
			Если Не ПредпоследнееЗначение = 0 Тогда
				ОтносительноеИзменение = Окр(100 * (ПоследнееЗначение - ПредпоследнееЗначение)/ПредпоследнееЗначение, ТочностьРасчетаДробнойЧасти);
				
				Если ОтносительноеИзменение > 0 Тогда
					ЗнакИзменения = "▲";
				ИначеЕсли ОтносительноеИзменение = 0 Тогда
					ЗнакИзменения = "";
				ИначеЕсли ОтносительноеИзменение < 0 Тогда
					ЗнакИзменения = "▼";
				КонецЕсли;
				
				ДеталиПоказателяСтрока = ДеталиПоказателяСтрока + ЗнакИзменения + Символы.НПП + ОтносительноеИзменение + " %";
			КонецЕсли;
			
			АбсолютноеИзменение = ПоследнееЗначение - ПредпоследнееЗначение;
			
			Если АбсолютноеИзменение > 0 Тогда
				ЗнакИзменения = "▲";
			ИначеЕсли АбсолютноеИзменение = 0 Тогда
				ЗнакИзменения = "";
			ИначеЕсли АбсолютноеИзменение < 0 Тогда
				ЗнакИзменения = "▼";
			КонецЕсли;
			
			ДеталиПоказателяСтрока = ДеталиПоказателяСтрока + 
				?(ЗначениеЗаполнено(ДеталиПоказателяСтрока), " / ", ЗнакИзменения + Символы.НПП) + 
				МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(АбсолютноеИзменение, ТочностьРасчетаДробнойЧасти, КратностьЗначений) + 
				СтрокаРазмерности;
		КонецЕсли;
		
		ЦветаСостоянияИТренда = МониторингЦелевыхПоказателей.ПолучитьЦветаСостоянияИТрендаПоказателя(ВариантАнализа, ИсточникДанных);
		
		ЗначениеСтрока = Новый ФорматированнаяСтрока(
			СокрЛП(МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(
				ОтображаемоеЗначение, 
				ТочностьРасчетаДробнойЧасти, 
				КратностьЗначений) + СтрокаРазмерности), 
			ШрифтЗначенияПоказателя(),
			ЦветаСостоянияИТренда.ЦветСостояния);
		
		ДеталиПоказателяСтрока = Новый ФорматированнаяСтрока(
			?(ДеталиПоказателяСтрока = Неопределено, "", ДеталиПоказателяСтрока), 
			ШрифтДеталейПоказателя(), 
			ЦветаСостоянияИТренда.ЦветТренда);
		
		ЭтаФорма["Значение__" + ИдентификаторЭлементаФормы] = Новый ФорматированнаяСтрока(
			ЗначениеСтрока, 
			?(ПоказыватьТекущееЗначениеИДеталиПоказателя, Символы.ПС, ""),
			ДеталиПоказателяСтрока);
	Иначе 
		ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
		ПолеДиаграммы.Вид = ВидПоляФормы.ПолеДиаграммы;
		ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
		ЗаполнитьЗначенияСвойств(ПолеДиаграммы, СтильОтображенияТекстовых());
		
		Диаграмма = ЭтаФорма["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя';uk='Помилка розрахунку показника'");
		КонецЕсли;
		
		Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

// Добавляет элементы формы справочной информации о показателе для анализа взаимосвязанных
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//
&НаСервере
Процедура НарисоватьПоляСправкиОПоказателе(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	МассивРеквизитов = Новый Массив;
	
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	
	// Добавим строковые реквизиты формы
	ОписаниеТиповСтрок = МониторингЦелевыхПоказателей.ПолучитьОписаниеТиповСтроки(0);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦельЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Цель';uk='Ціль'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦелевойТрендЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Целевой тренд';uk='Цільовий тренд'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦелевыеЗначенияЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Целевые значения';uk='Цільові значення'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическоеСостояниеЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Состояние';uk='Стан'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическийТрендЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Тренд';uk='Тренд'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическоеЗначениеЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Заголовок значения';uk='Заголовок значення'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ОтветственныйЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Ответственный';uk='Відповідальний'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФормулаЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Формула';uk='Формула'")));
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦельЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение цели';uk='Значення цілі'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение целевого тренда';uk='Значення цільового тренда'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значения целевых значений';uk='Значення цільових значень'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение состояния';uk='Значення стану'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение тренда';uk='Значення тренду'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение';uk='Значення'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ОтветственныйЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение ответственного';uk='Значення відповідального'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФормулаЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение формулы';uk='Значення формули'")));
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементЦель__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	// Добавим элементы формы
	ПолеЗначения = Элементы.Вставить("ЦельЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦельЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ЦельЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦельЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементЦелевойТренд__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ЦелевойТрендЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦелевойТрендЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементЦелевыеЗначения__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ЦелевыеЗначенияЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦелевыеЗначенияЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементСостояние__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	// Добавим элементы формы
	ПолеЗначения = Элементы.Вставить("ФактическоеСостояниеЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическоеСостояниеЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементФактическийТренд__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ФактическийТрендЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическийТрендЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементФактическоеЗначение__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ФактическоеЗначениеЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическоеЗначениеЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Иначе
		ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементОтвественный__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ОтветственныйЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ОтветственныйЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ОтветственныйЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ОтветственныйЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементФормула__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ФормулаЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФормулаЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Истина;
	ПолеЗначения.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	
	ПолеЗначения = Элементы.Вставить("ФормулаЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФормулаЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.РастягиватьПоВертикали = Истина;
	ПолеЗначения.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	// Заполним значения созданных полей
	ЭтаФорма["ЦельЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Цель:';uk='Ціль:'");
	ЭтаФорма["ЦелевойТрендЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Целевой тренд:';uk='Цільовий тренд:'");
	ЭтаФорма["ЦелевыеЗначенияЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Целевые значения:';uk='Цільові значення:'");
	
	ЭтаФорма["ЦельЗначение__" + ИдентификаторЭлементаФормы]	= ВариантАнализа.Владелец;
	ЭтаФорма["ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы]	= ВариантАнализа.Владелец.ЦелевойТренд;
	ЭтаФорма["ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы]	= МониторингЦелевыхПоказателей.ПолучитьСвойстваВариантаАнализа(ВариантАнализа, ИсточникДанных).ЦелевыеЗначения;
	
	КратностьЗначений = ВариантАнализа.КратностьЗначений;
	ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		ОтображаемоеЗначение = ПоследнееЗначение;
	Иначе 
		ПоследнееЗначение = 0;
		ОтображаемоеЗначение = 0;
	КонецЕсли;
	
	РазмерностьПоказателя = СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
	
	Если ЗначениеЗаполнено(РазмерностьПоказателя) Тогда
		СтрокаРазмерности = " " + РазмерностьПоказателя;
	Иначе
		СтрокаРазмерности = "";
	КонецЕсли;
	
	ЭтаФорма["ФактическоеСостояниеЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Состояние:';uk='Стан:'");
	ЭтаФорма["ФактическийТрендЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Тренд:';uk='Тренд:'");
	ЭтаФорма["ФактическоеЗначениеЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Значение:';uk='Значення:'");
	ЭтаФорма["ФормулаЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Формула:';uk='Формула:'");
	ЭтаФорма["ОтветственныйЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Ответственный:';uk='Відповідальний:'");
	
	ЭтаФорма["ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы]	= ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу;
	ЭтаФорма["ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы]	= ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ЭтаФорма["ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы]	= СокрЛП(МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(ОтображаемоеЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений) + СтрокаРазмерности);
	Иначе
		ЭтаФорма["ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы]	= ИсточникДанных.ОписаниеОшибки;
	КонецЕсли;
	
	ЭтаФорма["ФормулаЗначение__" + ИдентификаторЭлементаФормы]	= ВариантАнализа.Владелец.ФормулаРасчета;
	ЭтаФорма["ОтветственныйЗначение__" + ИдентификаторЭлементаФормы]	= ВариантАнализа.Ответственный;
КонецПроцедуры

// Добавляет группу элементов формы заданной ширины и высоты, содержащую пустую картинку.
// Используется для выравнивания элементов монитора.
// 
// Параметры:
//	ГруппаЭлементов - ГруппаФормы - группа, в кот. добавляется элемент
//	ИдентификаторЭлементаФормы - Строка - уникальный идентиф. добавляемого элмента
//	СтильЭлемента - Структура - структура, содержащая модифицируемые свойства элемента формы
//		Ключ - Строка - имя модифицируемого свойства
//		Значение - Строка - значение модифицируемого свойства
//
&НаСервере 
Процедура НарисоватьПустойЭлемент(ГруппаЭлементов, ИдентификаторЭлементаФормы, СтильЭлемента)
	// Добавим декорацию формы
	ПолеДекорации = Элементы.Вставить("ВыравнивающийЭлемент__" + ИдентификаторЭлементаФормы, Тип("ДекорацияФормы"), ГруппаЭлементов);
	ПолеДекорации.Вид = ВидДекорацииФормы.Картинка;
	ПолеДекорации.Картинка = Новый Картинка;
	ПолеДекорации.Заголовок = НСтр("ru='Выравнивающий элемент';uk='Вирівнюючий елемент'");
	ПолеДекорации.Доступность = Ложь;
	
	ЗаполнитьЗначенияСвойств(ПолеДекорации, СтильЭлемента);
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора - краткое представление, диаграммы и таблицы
// 
// Параметры:
//	СоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках
//
&НаСервере
Процедура НарисоватьЭлементыМонитора(СоставМонитора)
	СтруктураВывода = МониторингЦелевыхПоказателей.СтруктураВывода(СоставМонитора);

	СоздатьБазовуюСтруктуруЭлементовФормы(СоставМонитора, СтруктураВывода);
	
	НаборИсточниковДанных = СоставМонитора.НаборИсточниковДанных;
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	ЗоныВнимания = Перечисления.ЗоныВниманияВариантовАнализа;
	
	Если РежимАнализаВзаимосвязанных Тогда
		// Создадим элементы формы для анализируемого показателя
		Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
			Если ЭлементВывода = "Анализируемые" Тогда
				ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка();
			ИначеЕсли ЭлементВывода = "Зависимые" Тогда
				ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели;
			ИначеЕсли ЭлементВывода = "Влияющие" Тогда
				ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели;
			КонецЕсли;
			Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомВидаАнализаВзаимосвязаных(СтруктураВывода[ЭлементВывода], ВидПоискаВзаимосвязанных);
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Если СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоСостоянию" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				Состояние = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					НарисоватьЭлементыМонитораСУчетомСостояния(СтруктураВывода[ЭлементВывода], Состояние);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				Идентификатор = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					НарисоватьЭлементыМонитораСУчетомГрупп(СтруктураВывода[ЭлементВывода], Идентификатор);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в режиме анализа взаимосвязанных
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	ВидПоискаВзаимосвязанных - ПеречислениеСсылка.ВидыПоискаСвязанныхПоказателей - значения зависимые, влияющие, взаимосвязанные, все
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомВидаАнализаВзаимосвязаных(КоллекцияВариантовАнализа, ВидПоискаВзаимосвязанных)
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	ВариантыОтображения = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	Если Не ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка() Тогда
		ИмяВидаПоиска = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ВидПоискаВзаимосвязанных);
	Иначе
	ИмяВидаПоиска = "АнализируемыйПоказатель";
	КонецЕсли;
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		ВариантАнализа = ЭлементМонитора.ВариантАнализа;
		ИсточникДанных = ЭлементМонитора.ИсточникДанных.Получить();
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
		ВариантОтображения = ВариантыОтображения.Диаграмма;
		ВидПредставленияЧисел = ВариантАнализа.КратностьЗначений;
		ИдентификаторЭлементаФормы = СтрЗаменить(Строка(ВариантАнализа.УникальныйИдентификатор()),"-","_");
		
		МножительРазмера = СтруктураНастроек.ПроизвольныйМасштаб / 100;
		
		ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + "1"];
		ВысотаЭлемента = 10;
		
		ГруппаЭлемент = Элементы.Добавить("ЭлементДиаграмма__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
		ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
		
		Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
			ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + ?(Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность)," (" + ДинамическиеСвойстваВариантаАнализа.Размерность + ")", "");
		Иначе
			ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + " (" + МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
		КонецЕсли;
		
		ШиринаЭлемента = 29;
		
		// Размеры
		ГруппаЭлемент.Ширина = ШиринаЭлемента;
		ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
		ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
		
		// Наполним элемент контентом по шаблонам вариантов
		НарисоватьЭлементыПоказателя(ВариантАнализа, ИсточникДанных, ВариантОтображения, ГруппаЭлемент, ИдентификаторЭлементаФормы);
		
		// Заполним справочную информацию о показателе
		ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + "2"];
		ВысотаЭлемента = 10;
		
		ГруппаЭлемент = Элементы.Добавить("ЭлементСправкаОПоказателе__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
		ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаЭлемент.Заголовок = НСтр("ru='Справка о показателе';uk='Довідка про показник'");
		
		ШиринаЭлемента = 29;
		
		// Размеры
		ГруппаЭлемент.Ширина = ШиринаЭлемента;
		ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
		ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
		ГруппаЭлемент.ШрифтЗаголовка = ШрифтВажно();
		
		// Наполним элемент контентом по шаблонам вариантов
		НарисоватьПоляСправкиОПоказателе(ВариантАнализа, ИсточникДанных, ГруппаЭлемент, ИдентификаторЭлементаФормы);
	КонецЦикла;
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в группу в режиме вывода по важности
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	Состояние - Строка - состояние показателя. Может принимать значения: ЦельДостигнута, ПриемлемоеСостояние, НеприемлемоеСостояние, СостояниеНеОпределено, РасчитаноСОшибкой
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомСостояния(КоллекцияВариантовАнализа, Состояние)
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	ВариантыОтображения = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	СчетчикСтрок = 1;
	СчетчикЭлементовСтроки = 1;
	КоличествоПоказателейВКоллекции = КоллекцияВариантовАнализа.Количество();
	КоличествоНенарисованныхПоказателей = КоличествоПоказателейВКоллекции;
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		ВариантАнализа = ЭлементМонитора.ВариантАнализа;
		ИсточникДанных = ЭлементМонитора.ИсточникДанных.Получить();
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
		ВариантОтображения = ЭлементМонитора.ВариантОтображения;
		ВидПредставленияЧисел = ВариантАнализа.КратностьЗначений;
		ИдентификаторЭлементаФормы = СтрЗаменить(Строка(ВариантАнализа.УникальныйИдентификатор()),"-","_");
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			МножительРазмера = 1;
		Иначе
			МножительРазмера = СтруктураНастроек.ПроизвольныйМасштаб / 100;
		КонецЕсли;
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			СуффиксИмениГруппы = "Кратко";
			ВысотаЭлемента = 0;
		Иначе
			СуффиксИмениГруппы = "Подробно";
			ВысотаЭлемента = 10;
		КонецЕсли;
		
		ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементов" + СуффиксИмениГруппы + Состояние + "__" + СчетчикЭлементовСтроки];
		
		ГруппаЭлемент = Элементы.Добавить("Элемент__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
		ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
		
		Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
			ГруппаЭлемент.Заголовок = ВариантАнализа.Наименование + ?(Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность)," (" + ДинамическиеСвойстваВариантаАнализа.Размерность + ")", "");
		Иначе
			ГруппаЭлемент.Заголовок = ВариантАнализа.Наименование + " (" + МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
		КонецЕсли;
		
		Если СтруктураНастроек.КоличествоКолонокМонитораПоказателей < 2
			ИЛИ СтруктураНастроек.КоличествоКолонокМонитораПоказателей > 4 Тогда
			ШиринаЭлемента = 30;
		ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 2 тогда
			ШиринаЭлемента = 29;
		ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 3 тогда
			ШиринаЭлемента = 29;
		ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 4 тогда
			ШиринаЭлемента = 28;
		КонецЕсли;
		
		// Размеры
		ГруппаЭлемент.Ширина = ШиринаЭлемента;
		ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
		ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
		
		// Наполним элемент контентом по шаблонам вариантов
		НарисоватьЭлементыПоказателя(ВариантАнализа, ИсточникДанных, ВариантОтображения, ГруппаЭлемент, ИдентификаторЭлементаФормы);
		
		КоличествоНенарисованныхПоказателей = КоличествоНенарисованныхПоказателей - 1;
		
		Если КоличествоНенарисованныхПоказателей = 0 И СчетчикЭлементовСтроки < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
			Для СчВыравнивающихЭлементов = 1 По (СтруктураНастроек.КоличествоКолонокМонитораПоказателей - СчетчикЭлементовСтроки) Цикл 
				ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементов" + СуффиксИмениГруппы + Состояние + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов)];
				
				ГруппаЭлемент = Элементы.Добавить("КонтейнерВыравнивающегоЭлемента__" + ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
				ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
				ГруппаЭлемент.Ширина = ШиринаЭлемента;
				ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
				ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
				ГруппаЭлемент.Заголовок = НСтр("ru='Контейнер выравнивающего элемента';uk='Контейнер вирівнюючого елемента'");
				
				НарисоватьПустойЭлемент(ГруппаЭлемент, ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов, СтильОтображенияПоказателяБазовый());
			КонецЦикла;
		КонецЕсли;
		
		СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
		
		Если СчетчикЭлементовСтроки > СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда 
			СчетчикЭлементовСтроки = 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в группу в режиме вывода по категориям целей
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	ИдентификаторГруппы - Строка - идентификатор группы, в которую будут добавлены элементы формы
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомГрупп(КоллекцияВариантовАнализа, ИдентификаторГруппы)
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	ВариантыОтображения = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	СчетчикСтрок = 1;
	СчетчикЭлементовСтроки = 1;
	КоличествоПоказателейВКоллекции = КоллекцияВариантовАнализа.Количество();
	КоличествоПоказателейВПоследнейСтроке = КоличествоПоказателейВКоллекции % СтруктураНастроек.КоличествоКолонокМонитораПоказателей;
	КоличествоНенарисованныхПоказателей = КоличествоПоказателейВКоллекции;
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		ВариантАнализа = ЭлементМонитора.ВариантАнализа;
		ИсточникДанных = ЭлементМонитора.ИсточникДанных.Получить();
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
		ВариантОтображения = ЭлементМонитора.ВариантОтображения;
		ВидПредставленияЧисел = ВариантАнализа.КратностьЗначений;
		ИдентификаторЭлементаФормы = СтрЗаменить(Строка(ВариантАнализа.УникальныйИдентификатор()),"-","_");
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			МножительРазмера = 1;
		Иначе
			МножительРазмера = СтруктураНастроек.ПроизвольныйМасштаб / 100;
		КонецЕсли;
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			СуффиксИмениГруппы = "Кратко";
		Иначе
			СуффиксИмениГруппы = "Подробно";
		КонецЕсли;
		
		ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементов" + СуффиксИмениГруппы + ИдентификаторГруппы + "__" + СчетчикЭлементовСтроки];
		
		ГруппаЭлемент = Элементы.Добавить("Элемент__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
		ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
		
		Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
			ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + " (" + ДинамическиеСвойстваВариантаАнализа.Размерность + ")";
		Иначе
			ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + " (" + МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность + ")";
		КонецЕсли;
		
		Если СтруктураНастроек.КоличествоКолонокМонитораПоказателей < 2
			ИЛИ СтруктураНастроек.КоличествоКолонокМонитораПоказателей > 4 Тогда
			ШиринаЭлемента = 30;
		ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 2 тогда
			ШиринаЭлемента = 29;
		ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 3 тогда
			ШиринаЭлемента = 29;
		ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 4 тогда
			ШиринаЭлемента = 28;
		КонецЕсли;
		
		// Размеры
		ГруппаЭлемент.Ширина = ШиринаЭлемента;
		ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
		
		// Наполним элемент контентом по шаблонам вариантов
		НарисоватьЭлементыПоказателя(ВариантАнализа, ИсточникДанных, ВариантОтображения, ГруппаЭлемент, ИдентификаторЭлементаФормы);
		
		КоличествоНенарисованныхПоказателей = КоличествоНенарисованныхПоказателей - 1;
		
		Если КоличествоНенарисованныхПоказателей = 0 И СчетчикЭлементовСтроки < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
			Для СчВыравнивающихЭлементов = 1 По (СтруктураНастроек.КоличествоКолонокМонитораПоказателей - СчетчикЭлементовСтроки) Цикл 
				ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементов" + СуффиксИмениГруппы + ИдентификаторГруппы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов)];
				
				ГруппаЭлемент = Элементы.Добавить("КонтейнерВыравнивающегоЭлемента__" + ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
				ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
				ГруппаЭлемент.Ширина = ШиринаЭлемента;
				ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
				ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
				ГруппаЭлемент.Заголовок = НСтр("ru='Контейнер выравнивающего элемента';uk='Контейнер вирівнюючого елемента'");
				
				НарисоватьПустойЭлемент(ГруппаЭлемент, ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов, СтильОтображенияПоказателяБазовый());
			КонецЦикла;
		КонецЕсли;
		
		СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
		
		Если СчетчикЭлементовСтроки > СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда 
			СчетчикЭлементовСтроки = 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Вызывает процедуры добавления элементов формы для переданного варианта анализа
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант, для которого будут созданы элементы формы
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - кратко, диаграмма, таблица
//	ГруппаЭлементов - ГруппаФормы - группа, в которую будут добавлены элементы
//	ИдентификаторЭлементаФормы - Строка - строквый GUID варианта анализа("-" заменены на "_")
//
&НаСервере
Процедура НарисоватьЭлементыПоказателя(ВариантАнализа, ИсточникДанных, ВариантОтображения, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	Если ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма Тогда
		
		НарисоватьДиаграмму(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	ИначеЕсли ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Кратко Тогда
		
		НарисоватьКратко(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	ИначеЕсли ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Таблица Тогда
		
		НарисоватьТаблицу(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	КонецЕсли;
	
	ДобавитьКомандыВариантовАнализа(ВариантАнализа, ГруппаЭлементов, ИдентификаторЭлементаФормы, ВариантОтображения);
КонецПроцедуры

// Создает группы формы для последующего добавления в них элементов формы вариантов анализа
// 
// Параметры:
//	СоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках
//
&НаСервере
Процедура СоздатьБазовуюСтруктуруЭлементовФормы(СоставМонитора, СтруктураВывода)
	СтатистикаПоСтрокам = СоставМонитора.СтатистикаПоСтрокам;
	НаборИсточниковДанных = СоставМонитора.НаборИсточниковДанных;
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	ЗоныВнимания = Перечисления.ЗоныВниманияВариантовАнализа;
	
	ГруппаПоказатели = ВертикальнаяГруппа("ГруппаПоказатели", НСтр("ru='Показатели';uk='Показники'"), Элементы.ОсновнаяСтраницаМонитора);
	
	Если РежимАнализаВзаимосвязанных Тогда
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСвойстваВариантаАнализаПоИдентификатору(Параметры.ИдентификаторВариантаАнализа);
		НаименованиеВариантаАнализа = ВариантАнализа.Ссылка.Наименование;
		
		ГруппаАнализируемыйПоказатель = ГоризонтальнаяГруппа("ГруппаАнализируемыйПоказатель", НСтр("ru='Анализируемый показатель';uk='Аналізований показник'") + " """ + НаименованиеВариантаАнализа + """", ГруппаПоказатели);
		ЗаполнитьЗначенияСвойств(ГруппаАнализируемыйПоказатель, СтильГруппыПоказателей());
		
		// Колонок в режиме анализа взаимосвязей всегда 2 - диаграмма, справка о показателей.
		Для Сч = 1 По 2 Цикл 
			ГруппаКолонкаЭлементов = ВертикальнаяГруппа("ГруппаКолонкаЭлементовАнализируемыйПоказатель" + "__" + Сч, НСтр("ru='Колонка №';uk='Колонка №'") + Сч, ГруппаАнализируемыйПоказатель);
			
		КонецЦикла;
		
		ОтборЗависимых = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели);
		Зависимые = НаборИсточниковДанных.НайтиСтроки(ОтборЗависимых);
		
		Если Зависимые.Количество() > 0 Тогда
			ИмяВидаПоиска = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели);
			
			ГруппаЗависимые = ГоризонтальнаяГруппа("Группа" + ИмяВидаПоиска, НСтр("ru='Зависимые показатели';uk='Залежні показники'"), ГруппаПоказатели);
			ЗаполнитьЗначенияСвойств(ГруппаЗависимые, СтильГруппыПоказателей());
			
			// Колонок в режиме анализа взаимосвязей всегда 3 - диаграмма, целевое состояние, фактическое состояние.
			Для Сч = 1 По 2 Цикл 
				ГруппаКолонкаЭлементов = ВертикальнаяГруппа("ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + Сч, НСтр("ru='Колонка №';uk='Колонка №'") + Сч, ГруппаЗависимые);
			КонецЦикла;
		КонецЕсли;
		
		ОтборВлияющих = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели);
		Влияющие  = НаборИсточниковДанных.НайтиСтроки(ОтборВлияющих);
		
		Если Влияющие.Количество() > 0 Тогда
			ИмяВидаПоиска = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели);
			
			ГруппаВлияющие = ГоризонтальнаяГруппа("Группа" + ИмяВидаПоиска, НСтр("ru='Влияющие показатели';uk='Впливаючі показники'"), ГруппаПоказатели);
			ЗаполнитьЗначенияСвойств(ГруппаВлияющие, СтильГруппыПоказателей());
			
			// Колонок в режиме анализа взаимосвязей всегда 3 - диаграмма, целевое состояние, фактическое состояние.
			Для Сч = 1 По 2 Цикл 
				ГруппаКолонкаЭлементов = ВертикальнаяГруппа("ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + Сч, НСтр("ru='Колонка №';uk='Колонка №'") + Сч, ГруппаВлияющие);
			КонецЦикла;
		КонецЕсли;
	Иначе
		ГруппаПоказателиКратко = ВертикальнаяГруппа("ГруппаПоказателиКратко", НСтр("ru='Показатели (кратко)';uk='Показники (коротко)'"), ГруппаПоказатели);
		ГруппаПоказателиПодробно = ВертикальнаяГруппа("ГруппаПоказателиПодробно", НСтр("ru='Показатели (подробно)';uk='Показники (детально)'"), ГруппаПоказатели);
		
		Если СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоСостоянию" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				СостояниеДляГруппы = СтрЗаменить(ЭлементВывода, "Показатели", "");
				Состояние = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					ГруппаПоказателя = ГоризонтальнаяГруппа("Группа" + СостояниеДляГруппы, 
						МониторингЦелевыхПоказателей.ПредставлениеСостояния(Состояние), 
						ГруппаПоказателиКратко);
					ЗаполнитьЗначенияСвойств(ГруппаПоказателя, СтильГруппыПоСостоянию(Состояние));
					
					Если СтрНайти(ЭлементВывода, "Кратко") > 0 Тогда
						ДобавитьГруппыКолонкиЭлементов(ГруппаПоказателя, ВариантыОтображенияВариантовАнализа.Кратко, Состояние);
					Иначе
						ДобавитьГруппыКолонкиЭлементов(ГруппаПоказателя, , Состояние);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				Идентификатор = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				КатегорияЦелиИдентификатор = МониторингЦелевыхПоказателей.СтрокуВУникальныйИденификатор(Идентификатор);
				КатегорияЦели = Справочники.КатегорииЦелей.ПолучитьСсылку(КатегорияЦелиИдентификатор);
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					ПредставлениеГруппы = КатегорияЦели.Наименование;
					
					Если СтрНайти(ЭлементВывода, "Кратко") > 0 Тогда
						ГруппаТекстовыеЗаголовок = ГоризонтальнаяГруппа("ГруппаТекстовыеЗаголовок__" + Идентификатор, 
							ПредставлениеГруппы, 
							ГруппаПоказателиКратко);
					Иначе
						ГруппаТекстовыеЗаголовок = ГоризонтальнаяГруппа("ГруппаТабличныеИДиаграммные__" + Идентификатор, 
							ПредставлениеГруппы, 
							ГруппаПоказателиПодробно);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ГруппаТекстовыеЗаголовок, СтильГруппыПоказателей());
					
					Если СтрНайти(ЭлементВывода, "Кратко") > 0 Тогда
						ДобавитьГруппыКолонкиЭлементов(ГруппаТекстовыеЗаголовок, ВариантыОтображенияВариантовАнализа.Кратко, Идентификатор);
					Иначе
						ДобавитьГруппыКолонкиЭлементов(ГруппаТекстовыеЗаголовок, , Идентификатор);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных, ДинамическоеИзменение = Ложь)
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	ТекстовоеПредставлениеПериода = МониторингЦелевыхПоказателей.ПредставлениеПериодаВариантаАнализа(ИсточникДанных);
	ЦветаСостоянияИТренда = МониторингЦелевыхПоказателей.ПолучитьЦветаСостоянияИТрендаПоказателя(ВариантАнализа, ИсточникДанных);
	
	МаркерСветофора = Новый ФорматированнаяСтрока("●" + Символы.НПП, ШрифтЗаголовкаПоказателяВажно(), ЦветаСостоянияИТренда.ЦветСостояния);
	МаркерМодифицированности = " * ";
	РазделительСтрок = " / ";
	
	НаименованиеВариантаАнализа = Новый ФорматированнаяСтрока(ВариантАнализа.Наименование, ШрифтЗаголовкаПоказателяВажно());
	ПериодичностьСтрока = Новый ФорматированнаяСтрока(Строка(ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя), ШрифтЗаголовкаПоказателяВажно());
    ОбъектАнализаСтрока = "";
	Если ЗначениеЗаполнено(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа) Тогда
		ОбъектАнализаСтрока = Новый ФорматированнаяСтрока(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление, ШрифтЗаголовкаПоказателяВажно());
	КонецЕсли;
	
	МассивСтрокНаименования = Новый Массив;
	Если ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "НеприемлемоеСостояние"
		Или ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "ПриемлемоеСостояние"
		Или ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "ЦельДостигнута" Тогда
		
		МассивСтрокНаименования.Добавить(МаркерСветофора);
	КонецЕсли;
	МассивСтрокНаименования.Добавить(НаименованиеВариантаАнализа);
	Если ДинамическоеИзменение Тогда
		МассивСтрокНаименования.Добавить(МаркерМодифицированности);
		Если Не ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения Тогда
			МассивСтрокНаименования.Добавить(ОбъектАнализаСтрока);
			МассивСтрокНаименования.Добавить(РазделительСтрок);
		КонецЕсли;
		МассивСтрокНаименования.Добавить(ПериодичностьСтрока);
	КонецЕсли;
	Если Не ВариантАнализа.КратностьЗначений = ВидыПредставленияЧисел.БезИзменений Тогда
		МассивСтрокНаименования.Добавить(РазделительСтрок);
		МассивСтрокНаименования.Добавить(МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа));
	КонецЕсли;
	Если Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность) Тогда
		МассивСтрокНаименования.Добавить(РазделительСтрок);
		МассивСтрокНаименования.Добавить(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
	КонецЕсли;
	МассивСтрокНаименования.Добавить(РазделительСтрок);
	МассивСтрокНаименования.Добавить(ТекстовоеПредставлениеПериода);
	
	ЭтаФорма["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы] = Новый ФорматированнаяСтрока(МассивСтрокНаименования);
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьОбновитьДинамическиеПараметрыВоВременномХранилище(Знач ВариантАнализа, Знач ИдентификаторПоказателя, Знач ПараметрыИсточникаДанных)
	Перем АдресДинамическихПараметров, ДинамическиеПараметры, НайденныеСоставМонитора, НовыйАдрес, ОтборПоВариантуАнализа;
	
	ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ВариантАнализа);
	НайденныеСоставМонитора = СоставМонитора.НайтиСтроки(ОтборПоВариантуАнализа);
	
	АдресДинамическихПараметров = "";
	Если НайденныеСоставМонитора.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НайденныеСоставМонитора[0].АдресДинамическихПараметров) Тогда
			АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
			ДинамическиеПараметры = ПолучитьИзВременногоХранилища(АдресДинамическихПараметров);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыИсточникаДанных, ДинамическиеПараметры, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДинамическихПараметров) Тогда
		АдресДинамическихПараметров = ПоместитьВоВременноеХранилище(ПараметрыИсточникаДанных, 
		АдресДинамическихПараметров);
	Иначе
		АдресДинамическихПараметров = ПоместитьВоВременноеХранилище(ПараметрыИсточникаДанных, 
		Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторПоказателя,"_","-")));
	КонецЕсли;
	
	Если НайденныеСоставМонитора.Количество() > 0 Тогда
		НайденныеСоставМонитора[0].АдресДинамическихПараметров = АдресДинамическихПараметров;
	Иначе
		НовыйАдрес = СоставМонитора.Добавить();
		НовыйАдрес.ВариантАнализа = ВариантАнализа;
		НовыйАдрес.АдресДинамическихПараметров = АдресДинамическихПараметров;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьОбработчикАвтообновления(ПериодАвтообновления = Неопределено)
	Если ПериодАвтообновления = Неопределено Тогда
		ПериодАвтообновления = СтруктураНастроек.ПериодАвтообновления * 60;
	КонецЕсли;
	
	Если ПериодАвтообновления > 0 Тогда
		ОтключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент");
		ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент", ПериодАвтообновления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьОбработчикПервогоЗапуска()
	ПериодПервогоЗапуска = 0.1;
	
	ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент", ПериодПервогоЗапуска, Истина);
КонецПроцедуры

&НаСервере 
Процедура ОбновлениеСтруктурыНастроекСервер()
	СтруктураНастроек = МониторингЦелевыхПоказателей.ПолучитьНастройкиМонитораЦелевыхПоказателей();
КонецПроцедуры

&НаСервере
Процедура ОбработатьСУчетомНеобходимостиУдаления(МассивСуществующихРеквизитов)
	НеудаляемыеРеквизиты = Новый Массив;
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаДляПечати");
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаСНарастающимИтогом");
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаСПодробностями");
	НеудаляемыеРеквизиты.Добавить("ДемонстрационныйРежим");
	НеудаляемыеРеквизиты.Добавить("ДоступныеОтчеты");
	НеудаляемыеРеквизиты.Добавить("ОтборЗонаВнимания");
	НеудаляемыеРеквизиты.Добавить("ОтборСтатус");
	НеудаляемыеРеквизиты.Добавить("ПериодичностьКонтроля");
	НеудаляемыеРеквизиты.Добавить("ТекущийПользователь");
	НеудаляемыеРеквизиты.Добавить("РежимАнализаВзаимосвязанных");
	НеудаляемыеРеквизиты.Добавить("СоставМонитора");
	НеудаляемыеРеквизиты.Добавить("СоставМонитораНеопределен");
	НеудаляемыеРеквизиты.Добавить("СоставМонитораПустойПоОтбору");
	НеудаляемыеРеквизиты.Добавить("СтруктураНастроек");
	НеудаляемыеРеквизиты.Добавить("ТабличныеВариантыАнализаСИтогами");
	НеудаляемыеРеквизиты.Добавить("ТекущийВариантИнтерфейсаКлиентскогоПриложения");
	// Длительные операции
	НеудаляемыеРеквизиты.Добавить("АдресХранилища");
	НеудаляемыеРеквизиты.Добавить("ИдентификаторЗадания");
	НеудаляемыеРеквизиты.Добавить("АдресаДинамическихПараметров");
	НеудаляемыеРеквизиты.Добавить("Отчет");
	НеудаляемыеРеквизиты.Добавить("ПостоянныеКоманды");
	
	КоличествоНеУдаляемыхРеквизитов = НеудаляемыеРеквизиты.Количество();
	
	Для Каждого НеудаляемыйРеквизит Из НеудаляемыеРеквизиты Цикл 
		Для Каждого СуществующийРеквизит Из МассивСуществующихРеквизитов Цикл 
			Если СуществующийРеквизит.Имя = НеудаляемыйРеквизит Тогда
				Индекс = МассивСуществующихРеквизитов.Найти(СуществующийРеквизит);
				Прервать;
			Иначе
				Индекс = Неопределено;
			КонецЕсли;
		КонецЦикла;
		Если Индекс <> Неопределено Тогда
			МассивСуществующихРеквизитов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжидания_ОбновитьСоставМонитораКлиент()
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

&НаСервере 
Процедура ОбновитьСоставМонитора(СоставМонитора)
	Элементы.ГруппаПояснениеПриЗапуске.Видимость = Ложь;
	
	// Удалим ранее созданные программно элементы формы
	ГруппаПоказатели = Элементы.Найти("ГруппаПоказатели");
	Если Не ГруппаПоказатели = Неопределено Тогда
		Элементы.Удалить(ГруппаПоказатели);
	КонецЕсли;
	
	// Удалим ранее созданные программно реквизиты
	МассивСуществующихРеквизитов = ПолучитьРеквизиты();
	
	ОбработатьСУчетомНеобходимостиУдаления(МассивСуществующихРеквизитов);
	
	Если МассивСуществующихРеквизитов.Количество() > 0 Тогда
		МассивПутейУдаляемыхРеквизитов = Новый Массив;
		
		Для Каждого СуществующийРеквизит Из МассивСуществующихРеквизитов Цикл 
			МассивПутейУдаляемыхРеквизитов.Добавить(СуществующийРеквизит.Имя);
		КонецЦикла;
		
		ИзменитьРеквизиты(, МассивПутейУдаляемыхРеквизитов);
	КонецЕсли;
	
	// Удалим ранее созданные программно команды
	МассивУдаляемыхКоманд = Новый Массив;
	Для Каждого Команда Из Команды Цикл 
		ИмяКоманды = Команда.Имя;
		
		Если ПостоянныеКоманды.НайтиПоЗначению(ИмяКоманды) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивУдаляемыхКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Для Каждого УдаляемаяКоманда Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(Команды.Найти(УдаляемаяКоманда));
	КонецЦикла;
	
	// Получить список состава монитора (показатель, тип, позиция)
	Если РежимАнализаВзаимосвязанных Тогда 
		АдресДинамическихПараметров = АдресаДинамическихПараметров.Получить();
	КонецЕсли;
	
	ЗаполнитьСводнуюИнформациюПоИсточникамДанных(СоставМонитора, АдресДинамическихПараметров);
	
	СоставМонитораНеопределен = (СоставМонитора.НаборИсточниковДанных = Неопределено);
	СоставМонитораПустойПоОтбору = (СоставМонитора.Пустой И Не СоставМонитораНеопределен);
	
	УстановитьВидимостьПредложенияДобавитьПоказателиВСоставМонитора(СоставМонитораНеопределен);
	УстановитьВидимостьСообщенияПустойРезультатОтбора(СоставМонитораПустойПоОтбору);
	
	Если Не СоставМонитораНеопределен И Не СоставМонитораПустойПоОтбору Тогда
		// Создать реквизиты формы по составу монитора
		// К имени элементов добавляется строка "__"+ID_Элемента, где
		// ID_Элемента = Показатель.УникальныйИдентификатор()
		НарисоватьЭлементыМонитора(СоставМонитора);
	КонецЕсли;
	
	ДоступныеОтчеты.Очистить();
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантОтчетаПоИдентификатору(Идентификатор)
	Перем ВариантОтчета;
	
	ВариантОтчета = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору("ВариантыОтчетов", Идентификатор);
	
	Возврат ВариантОтчета;
КонецФункции

&НаСервере 
Функция ТекстЗапросаВариантовОтчетов()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИдентификаторыМетаданных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИдентификаторыМетаданных
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыМетаданных
	|ГДЕ
	|	ИдентификаторыМетаданных.Ссылка В(&ДоступныеВариантыОтчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетыВариантовАнализа.ВариантОтчета КАК Ссылка,
	|	ВариантыОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВариантыАнализаЦелевыхПоказателей.ОтчетыДляРасшифровки КАК ОтчетыВариантовАнализа
	|		ВНУТРЕННеЕ СОЕДИНеНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО ОтчетыВариантовАнализа.ВариантОтчета = ВариантыОтчетов.Ссылка
	|		ВНУТРЕННеЕ СОЕДИНеНИЕ ИдентификаторыМетаданных КАК ИдентификаторыМетаданных
	|		ПО (ВариантыОтчетов.Отчет = ИдентификаторыМетаданных.Ссылка)
	|ГДЕ
	|	ОтчетыВариантовАнализа.Ссылка = &ВариантАнализа
	|	И Не ВариантыОтчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантыОтчетов.Наименование";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьВариантыОтчетовПоказателя(ВариантАнализа)
	Перем ВариантыОтчетовПоказателя;
	
	ВариантыОтчетовПоказателя = Новый СписокЗначений;
	
	Если ДоступныеОтчеты.Количество() = 0 Тогда
		ДоступныеОтчеты.ЗагрузитьЗначения(ВариантыОтчетовПовтИсп.ДоступныеОтчеты());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВариантовОтчетов();
	Запрос.УстановитьПараметр("ДоступныеВариантыОтчетов", ДоступныеОтчеты);
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаВариантов = РезультатЗапроса.Выбрать();
		Пока ВыборкаВариантов.Следующий() Цикл
			ВариантыОтчетовПоказателя.Добавить(СтрЗаменить(ВыборкаВариантов.Ссылка.УникальныйИдентификатор(), "-", "_"), ВыборкаВариантов.Наименование);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВариантыОтчетовПоказателя;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторВариантаОтчета(ИмяЭлемента)
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ДваИдентификатора = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "__") - 1);
	Идентификатор = Прав(ДваИдентификатора, СтрНайти(ДваИдентификатора, "__") - 1);
	
	Возврат Идентификатор;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторДинамическогоПараметра(ИмяЭлемента)
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ДваИдентификатора = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "__") - 1);
	Идентификатор = Прав(ДваИдентификатора, СтрДлина(ДваИдентификатора) - СтрНайти(ДваИдентификатора, "__") - 1);
	
	Возврат Идентификатор;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторЭлементаПоИмениБезПозиции(ИмяЭлемента)
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ИдентификаторСПозицией = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "__") - 1);
	Если СтрНайти(ИдентификаторСПозицией, "__") > 0 Тогда
		Идентификатор = Лев(ИдентификаторСПозицией, СтрНайти(ИдентификаторСПозицией, "__") - 1);
	Иначе
		Идентификатор = ИдентификаторСПозицией
	КонецЕсли;
	
	Возврат Идентификатор;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторЭлементаПоИмениСПозицией(ИмяЭлемента)
	Перем Идентификатор;
	
	Идентификатор = "";
	
	Идентификатор = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "__") - 1);
	
	Возврат Идентификатор;
КонецФункции

&НаСервере
Функция ПолучитьСвойстваВариантаОтчета(ВариантОтчета)
	СвойстваВариантаОтчета = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваВариантаОтчета = Новый Структура("КлючВарианта, КлючОбъекта", ВариантОтчета.КлючВарианта, ВариантОтчета.Отчет.ПолноеИмя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СвойстваВариантаОтчета;
КонецФункции

&НаСервере
Функция ПолучитьСсылкуПеречисленияПоИдентификатору(ИмяОбъекта, Идентификатор)
	Перем ИскомаяСсылка;
	
	ИскомаяСсылка = Перечисления[ИмяОбъекта][Идентификатор];
	
	Возврат ИскомаяСсылка;
КонецФункции

&НаКлиенте
Функция ПолучитьЧистоеИмяКоманды(ИмяКоманды)
	Перем ЧистоеИмяКоманды;
	
	ЧистоеИмяКоманды = Лев(ИмяКоманды, СтрНайти(ИмяКоманды, "__") - 1);
	
	Возврат ЧистоеИмяКоманды;
КонецФункции

&НаСервере 
Процедура УстановитьВидимостьПредложенияДобавитьПоказателиВСоставМонитора(Видимость)
	Элементы.ГруппаПриПустомСоставеМонитора.Видимость = Видимость;
	ПостояннаяЧасть = НСтр("ru='Нет ни одного доступного для отображения варианта анализа.';uk='Немає жодного доступного для відображення варіанту аналізу.'"); 
	Если ПравоДоступа("Изменение", Метаданные.Справочники.ВариантыАнализаЦелевыхПоказателей) Тогда
		Элементы.ПояснениеЕслиМониторНеНастроен.Заголовок = ПостояннаяЧасть
			+ Символы.ПС + НСтр("ru='Для настройки используйте рабочее место ""Финансовый результат и контроллинг"" - ""Настройка доступности вариантов анализа"".';uk='Для настройки використовуйте робоче місце ""Фінансовий результат і контролінг"" - ""Настройка доступності варіантів аналізу"".'");
	Иначе
		Элементы.ПояснениеЕслиМониторНеНастроен.Заголовок = ПостояннаяЧасть
			+ Символы.ПС + НСтр("ru='Обратитесь к админитратору системы для настройки доступности вариантов анализа.';uk='Зверніться до админитратора системи для настройки доступності варіантів аналізу.'");
	КонецЕсли;
	Элементы.Печать.Доступность = Не Видимость;
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьСообщенияПустойРезультатОтбора(Видимость)
	Элементы.ГруппаПриПустомРезультатеОтбора.Видимость = Видимость;
КонецПроцедуры

&НаСервере 
Процедура ЗарегистрироватьПостоянныеКоманды()
	ПостоянныеКоманды.Добавить("ВключитьОтключитьДемонстрационныйРежим");
	ПостоянныеКоманды.Добавить("Настроить");
	ПостоянныеКоманды.Добавить("Обновить");
	ПостоянныеКоманды.Добавить("Печать");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьПользовательскийПараметр(Форма, ИмяПараметра, ЗначениеПараметра)
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, ИмяПараметра, ЗначениеПараметра);
	
	Форма.ПользовательскиеНастройкиМодифицированы = Истина;
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

&НаСервере
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура ОбновитьСоставМонитораКлиент(ПринудительноОбновитьДанные = Ложь)
	ПараметрыСоставаМонитора = МониторингЦелевыхПоказателейКлиентСервер.ИнициализацияПараметровСоставаМонитора();
	
	Если РежимАнализаВзаимосвязанных Тогда
		ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных  = РежимАнализаВзаимосвязанных;
		ПараметрыСоставаМонитора.ВидПоиска 					  = Параметры.ВидПоиска;
		ПараметрыСоставаМонитора.СвойстваВариантаАнализа 	  = Параметры.ИдентификаторВариантаАнализа;
		ПараметрыСоставаМонитора.АдресаДинамическихПараметров = АдресаДинамическихПараметров;	
		ПараметрыСоставаМонитора.ОтборЗонаВнимания 			  = ОтборЗонаВнимания;
		ПараметрыСоставаМонитора.ОтборСтатус 			      = ОтборСтатус;
		ПараметрыСоставаМонитора.ПериодичностьКонтроля 		  = ПериодичностьКонтроля;
		ПараметрыСоставаМонитора.УчитыватьВариантыОтображения = Истина;
	Иначе
		ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных  = РежимАнализаВзаимосвязанных;
		ПараметрыСоставаМонитора.ОтборВариантовАнализа 		  = Неопределено;
		ПараметрыСоставаМонитора.ПринудительноОбновитьДанные  = ПринудительноОбновитьДанные;
		ПараметрыСоставаМонитора.СтруктураНастроек 			  = СтруктураНастроек;
		ПараметрыСоставаМонитора.ОтборЗонаВнимания 			  = ОтборЗонаВнимания;
		ПараметрыСоставаМонитора.ОтборСтатус 			      = ОтборСтатус;
		ПараметрыСоставаМонитора.ПериодичностьКонтроля 		  = ПериодичностьКонтроля;
		ПараметрыСоставаМонитора.УчитыватьВариантыОтображения = Истина;
	КонецЕсли;
	
	ПараметрыСоставаМонитора.ДемонстрационныйРежим			  = ДемонстрационныйРежим;
	
	ЗаданиеВыполнено = ЗаполнитьОтчетНаСервере(ПараметрыСоставаМонитора);
	Если ЗаданиеВыполнено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтчетНаСервере(ПараметрыСоставаМонитора)
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаданиеВыполнено = Ложь;
	
	// В файловом режиме работы выполняем операцию непосредственно (синхронно).
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		МониторингЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения(ПараметрыСоставаМонитора, АдресХранилища);
		
		ЗагрузитьПодготовленныеДанные();
		
		Возврат Истина;
	КонецЕсли; 
	
	// В клиент-серверном режиме работы выполняем операцию в фоновом задании (асинхронно).
	НаименованиеЗадания = НСтр("ru='Заполнение отчета ""Монитор целевых показателей""';uk='Заповнення звіту ""Монітор цільових показників""'");
	
	ПараметрыЗаполнения = Новый Массив;
	ПараметрыЗаполнения.Добавить(ПараметрыСоставаМонитора);
	ПараметрыЗаполнения.Добавить(АдресХранилища);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("МониторингЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения", 
	ПараметрыЗаполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение  
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Возврат;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
	ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
	Истина);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Монитор") Тогда
		СформированныйСостав = Результат.Монитор;
		ОбновитьСоставМонитора(СформированныйСостав);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьДемонстрационныйРежим(Команда)
	Элементы[Команда.Имя].Пометка = Не Элементы[Команда.Имя].Пометка;
	ДемонстрационныйРежим = Не ДемонстрационныйРежим;
	
	Если Элементы[Команда.Имя].Пометка Тогда
		Заголовок = НСтр("ru='Демонстрационный режим';uk='Демонстраційний режим'");
	Иначе
		Заголовок = "";
	КонецЕсли;
	
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

#КонецОбласти

#КонецОбласти
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ВспомогательныеПроцедурыИФункции

Функция БанковскийСчетПоФормеОплатыИДанным(БанковскийСчетКассаДокумента, ФормаОплаты, БанковскийСчет, Касса, БанковскийСчетДоговора) Экспорт
	
	Если ЗначениеЗаполнено(БанковскийСчетКассаДокумента) Тогда
		Возврат БанковскийСчетКассаДокумента
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда 
		Если ЗначениеЗаполнено(Касса) ТОГДА 
			Возврат Касса;
		КонецЕсли;
		Если ЗначениеЗаполнено(БанковскийСчетДоговора) Тогда
			Возврат БанковскийСчетДоговора;
		КонецЕсли;
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			Возврат БанковскийСчет 
		КонецЕсли;
		Если ЗначениеЗаполнено(БанковскийСчетДоговора) Тогда
			Возврат БанковскийСчетДоговора;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Касса) И ЗначениеЗаполнено(БанковскийСчет) Тогда
			Возврат Неопределено;
		ИначеЕсли ЗначениеЗаполнено(Касса) Тогда
			Возврат Касса;
		ИначеЕсли ЗначениеЗаполнено(БанковскийСчет) Тогда
			Возврат БанковскийСчет;
		ИначеЕсли ЗначениеЗаполнено(БанковскийСчетДоговора) Тогда
			Возврат БанковскийСчетДоговора;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция БанковскиеСчетаКассыДоступныеДляЗаявки(Заявка) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.Владелец,
	|	БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств
	|ПОМЕСТИТЬ ВсеМестаХраненияДС
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Кассы.Ссылка,
	|	Кассы.Владелец,
	|	Кассы.ВалютаДенежныхСредств
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеМестаХраненияДС.Ссылка,
	|	МИНИМУМ(ПорядокПлатежногоКалендаря.ПорядокВПлатежномКалендаре) КАК ПорядокВПлатежномКалендаре
	|ИЗ
	|	ВсеМестаХраненияДС КАК ВсеМестаХраненияДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокПлатежногоКалендаря КАК ПорядокПлатежногоКалендаря
	|		ПО ВсеМестаХраненияДС.Ссылка = ПорядокПлатежногоКалендаря.БанковскийСчетКасса
	|";
	
	Результат = Новый СписокЗначений;
	Результат.Добавить("ВспомогательныйФильтр");
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявка, 
	"Организация, РасшифровкаПлатежа,
	|ФормаОплатыЗаявки, БанковскийСчет, Касса, Валюта, БанковскийСчетПолучатель");
	
	Отбор = " ГДЕ Владелец = &Организация ";
	
	Запрос = Новый Запрос();
	Для Каждого КлючИЗначение из РеквизитыЗаявки Цикл
		Запрос.Параметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если РеквизитыЗаявки.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		
		Отбор = Отбор + "
		|И Ссылка ССЫЛКА Справочник.БанковскиеСчетаОрганизаций
		|";
		
		Если ЗначениеЗаполнено(РеквизитыЗаявки.БанковскийСчет) Тогда
			
			Отбор = Отбор + "
			|И Ссылка = &БанковскийСчет";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыЗаявки.БанковскийСчетПолучатель) Тогда
			Отбор = Отбор + "
			|И ВалютаДенежныхСредств = &ВалютаСчетаПолучателя";
			Запрос.УстановитьПараметр("ВалютаСчетаПолучателя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗаявки.БанковскийСчетПолучатель, "Валюта"));
		КонецЕсли;
		
	ИначеЕсли РеквизитыЗаявки.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
		
		Отбор = Отбор + "
		|И Ссылка ССЫЛКА Справочник.Кассы";
		
		Если ЗначениеЗаполнено(РеквизитыЗаявки.Касса) Тогда
			
			Отбор = Отбор + "
			|И Ссылка = &Касса";
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса + " " + Отбор + "
	|СГРУППИРОВАТЬ ПО
	|	ВсеМестаХраненияДС.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО ПорядокВПлатежномКалендаре";
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		ИнформацияОбОшибке = ОписаниеОшибки();
		ВызватьИсключение ИнформацияОбОшибке;
	КонецПопытки;
	
	СписокРезультат = Новый СписокЗначений;
	СписокРезультат.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Кассы"));
	МассивТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	СписокРезультат.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	
	Возврат СписокРезультат;
	
КонецФункции

Функция ИндексПорядкаСтрокиДерева(Организация, Валюта, БанковскийСчетКасса, ЗначениеГруппировки = Неопределено)
	
	ТаблицаПорядка = ПлатежныйКалендарьСерверПовтИсп.ТаблицаПорядкаДерева();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	СтруктураПоиска.Вставить("Валюта", Валюта);
	Если ТипЗнч(БанковскийСчетКасса) <> Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")
		И ТипЗнч(БанковскийСчетКасса) <> Тип("СправочникСсылка.Кассы") Тогда
		СтруктураПоиска.Вставить("БанковскийСчетКасса", Неопределено);
	Иначе
		СтруктураПоиска.Вставить("БанковскийСчетКасса", БанковскийСчетКасса);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
		СтруктураПоиска.Вставить("ЗначениеГруппировки", ЗначениеГруппировки);
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаПорядка.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0].ПорядокВПлатежномКалендаре;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеГруппировки) Тогда
		Возврат -1;
	Иначе
		Возврат 999999;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДокументыПоТипам(СоответствиеМассивовДокументов, ТаблицаПоступлений)
	
	Для Каждого СтрокаТаблицы из ТаблицаПоступлений.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) Тогда
			МассивПоТипу = СоответствиеМассивовДокументов[ТипЗнч(СтрокаТаблицы.ДокументПланирования)];
			Если МассивПоТипу = Неопределено Тогда
				МассивПоТипу = Новый Массив;
				СоответствиеМассивовДокументов.Вставить(ТипЗнч(СтрокаТаблицы.ДокументПланирования), МассивПоТипу);
			КонецЕсли;
			МассивПоТипу.Добавить(СтрокаТаблицы.ДокументПланирования);
		КонецЕсли;
		
		ЗаполнитьДокументыПоТипам(СоответствиеМассивовДокументов, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыОбъектовПоТипам(СоответствиеМассивовДокументов)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ""; НомерПараметра = 0;
	Для Каждого КлючИЗначение из СоответствиеМассивовДокументов Цикл
		
		Если КлючИЗначение.Ключ = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ " + Символы.ПС;
		Если КлючИЗначение.Ключ = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|Таблица.ЖелательнаяДатаПлатежа КАК ЖелательнаяДатаПлатежа,";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|Неопределено КАК ЖелательнаяДатаПлатежа,";
		КонецЕсли;
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		Если МетаданныеТипа.Реквизиты.Найти("НазначениеПлатежа") <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "Таблица.НазначениеПлатежа КАК НазначениеПлатежа,";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "NULL КАК НазначениеПлатежа,";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|Таблица.Номер КАК Номер,
		|Таблица.Дата КАК Дата,
		|Таблица.Ссылка КАК Ссылка,";
		
		Если КлючИЗначение.Ключ = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|Таблица.НаименованиеДляПечати КАК Представление";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|Таблица.Представление КАК Представление";
		КонецЕсли;
	
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИЗ ";
		
		НомерПараметра = НомерПараметра + 1;
		ИмяПараметра = "Массив_" + НомерПараметра;
		ТекстЗапроса = ТекстЗапроса + МетаданныеТипа.ПолноеИмя() + " КАК Таблица
		|ГДЕ Ссылка В (&" + ИмяПараметра + ") 
		|";
		
		Запрос.УстановитьПараметр(ИмяПараметра, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ВыводКалендаря

Функция НакопленныйОстатокРасчетов(
				Знач ЗаказДляПроверки,
				Знач СуммаПоГрафикуНаТекущуюДату,
				Знач НакопленнаяСуммаПоГрафику,
				Знач ВсегоСуммаПоГрафику,
				Знач ВсегоСуммаПоЗаявкам) Экспорт
				
	СуммаПоГрафикуНаТекущуюДату = ?(ЗначениеЗаполнено(СуммаПоГрафикуНаТекущуюДату), СуммаПоГрафикуНаТекущуюДату, 0);
	НакопленнаяСуммаПоГрафику = ?(ЗначениеЗаполнено(НакопленнаяСуммаПоГрафику), НакопленнаяСуммаПоГрафику, 0);
	ВсегоСуммаПоГрафику = ?(ЗначениеЗаполнено(ВсегоСуммаПоГрафику), ВсегоСуммаПоГрафику, 0);
	ВсегоСуммаПоЗаявкам = ?(ЗначениеЗаполнено(ВсегоСуммаПоЗаявкам), ВсегоСуммаПоЗаявкам, 0);
	
	ОстатокПоЗаказу = Макс(ВсегоСуммаПоГрафику - ВсегоСуммаПоЗаявкам, 0);
	
	Если Не ОстатокПоЗаказу Тогда
		Возврат 0;
	КонецЕсли;
	
	ДоступноНаДату = Макс(НакопленнаяСуммаПоГрафику - ВсегоСуммаПоЗаявкам, 0);
	
	Если Не ДоступноНаДату Тогда
		Возврат 0;
	КонецЕсли;
	
	Остаток = Мин(ДоступноНаДату, СуммаПоГрафикуНаТекущуюДату);
	
	Возврат Макс(Остаток, 0);
	
КонецФункции

Функция РаспределитьСуммуОстаткаПоДатамПлатежей(Данные) Экспорт
	Перем ТаблицаРаспределениеПлатежа;
	
	Если Не Данные.ВременныеДанныеОбработки.Свойство("ТаблицаРаспределениеПлатежа", ТаблицаРаспределениеПлатежа) Тогда
		ТаблицаРаспределениеПлатежа = Данные.Данные.Скопировать();
		ТаблицаРаспределениеПлатежа.Свернуть("ДокументПланирования, БанковскийСчетКасса, ДатаПлатежа, СуммаРасход");
		ТаблицаРаспределениеПлатежа.Сортировать("ДатаПлатежа");
		Данные.ВременныеДанныеОбработки.Вставить("ТаблицаРаспределениеПлатежа", ТаблицаРаспределениеПлатежа);
	КонецЕсли;
	
	ТекущиеДанные = Данные.ТекущийЭлемент;
	
	ОтнестиНаСтроку = 0;
	ОсталосьРаспределить = ТекущиеДанные.СуммаРаспределения;
	Если Не ЗначениеЗаполнено(ОсталосьРаспределить) Тогда
		ОсталосьРаспределить = 0;
	КонецЕсли;
	
	//1. Находим план по платежам за этот период
	СтруктураПоиска = Новый Структура("ДокументПланирования, БанковскийСчетКасса, ДатаПлатежа");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	СтруктураПоиска.ДатаПлатежа = ТекущиеДанные.Период;
	НайденныеСтроки = ТаблицаРаспределениеПлатежа.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
	
		СписатьВТекущейСтроке = Мин(ОсталосьРаспределить, НайденнаяСтрока.СуммаРасход);
		НайденнаяСтрока.СуммаРасход = НайденнаяСтрока.СуммаРасход - СписатьВТекущейСтроке;
		ОсталосьРаспределить = ОсталосьРаспределить - СписатьВТекущейСтроке;
		ОтнестиНаСтроку = ОтнестиНаСтроку + СписатьВТекущейСтроке;
		
	КонецЦикла;
	
	//2. Все строки платежей по очередности
	СтруктураПоиска = Новый Структура("ДокументПланирования, БанковскийСчетКасса");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	НайденныеСтроки = ТаблицаРаспределениеПлатежа.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
	
		СписатьВТекущейСтроке = Мин(ОсталосьРаспределить, НайденнаяСтрока.СуммаРасход);
		НайденнаяСтрока.СуммаРасход = НайденнаяСтрока.СуммаРасход - СписатьВТекущейСтроке;
		ОсталосьРаспределить = ОсталосьРаспределить - СписатьВТекущейСтроке;
		ОтнестиНаСтроку = ОтнестиНаСтроку + СписатьВТекущейСтроке;
		
	КонецЦикла;
	
	Возврат ОтнестиНаСтроку;
	
КонецФункции

Функция ПредставлениеГруппы(ДокументПланирования, Группа) Экспорт
	
	Если Не ЗначениеЗаполнено(Группа) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

Функция ВыполнитьСКД(Объект, ИмяСКД, СохраненныеМакеты, ВнешниеНаборы = Неопределено, 
										ИмяВариантаОтчета = Неопределено, Дерево = Ложь)
										
	ИмяМакета = ИмяСКД;
	Если ЗначениеЗаполнено(ИмяВариантаОтчета) Тогда
		ИмяМакета = ИмяМакета + "_" + ИмяВариантаОтчета;
	КонецЕсли;
	
	Если СохраненныеМакеты.Свойство(ИмяМакета) Тогда
		
		Макет = СохраненныеМакеты[ИмяМакета];
		Для Каждого ЗначениеПараметра из Макет.ЗначенияПараметров Цикл
			
			Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СписокЗначений") Тогда
				
				ТипСписка = ЗначениеПараметра.Значение.ТипЗначения;
				ТипСпискаСодержитНужныйТип = ТипСписка.СодержитТип(Тип("СправочникСсылка.Кассы"))
						ИЛИ ТипСписка.СодержитТип(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
				
				Если ТипСпискаСодержитНужныйТип Тогда
					ЗначениеПараметра.Значение = Объект.БанковскиеСчетаКассы;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(Макет, ВнешниеНаборы, Дерево);
		
	Иначе
		
		СКД = Обработки.ПлатежныйКалендарь.ПолучитьМакет(ИмяСКД);
		Компоновщик = ФинансоваяОтчетностьСервер.КомпоновщикСхемы(СКД);
		Если ИмяВариантаОтчета <> Неопределено Тогда
			Компоновщик.ЗагрузитьНастройки(СКД.ВариантыНастроек[ИмяВариантаОтчета].Настройки);
		КонецЕсли;
		ЗаполнитьПараметрыКомпоновки(Объект, Компоновщик);
		ЗаполнитьОтборыКомпоновки(Объект, Компоновщик);
		
		Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
		
		МакетСКД = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКД, Компоновщик);
		СохраненныеМакеты.Вставить(ИмяМакета, МакетСКД);
		
		Возврат ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетСКД, ВнешниеНаборы, Дерево);
		
	КонецЕсли;
	
КонецФункции

Функция РассчитатьДанныеКалендаря(Объект, АдресХранилища = "", СохраненныеМакеты = Неопределено, АдресХранилищаМакетов = "") Экспорт
	Перем Заявка;
	
	ДеревоПлатежей = Объект.ДеревоПлатежей;
	ЭлементыДерева = ДеревоПлатежей.Строки;
	ЭлементыДерева.Очистить();
	
	Если Объект.Свойство("Заявка", Заявка) Тогда
		Если Не ЗначениеЗаполнено(Заявка) Тогда
			Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
				РезультатЗаполнения = Новый Структура;
				РезультатЗаполнения.Вставить("Результат", ДеревоПлатежей);
				ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
			КонецЕсли;
			Возврат ДеревоПлатежей;
		КонецЕсли;
		Объект.Вставить("БанковскиеСчетаКассы", БанковскиеСчетаКассыДоступныеДляЗаявки(Заявка));
	КонецЕсли;
	
	Если СохраненныеМакеты = Неопределено Тогда
		СохраненныеМакеты = Новый Структура;
	КонецЕсли;
	
	ЗаявкиОтобранные = ВыполнитьСКД(Объект, "ЗаявкиЗаПериод", СохраненныеМакеты);
	ЗаявкиОтобранные.Колонки.Добавить("ВидНабора");
	ЗаявкиОтобранные.ЗаполнитьЗначения("Заявки", "ВидНабора");
	
	ОстаткиПоСчетам = ВыполнитьСКД(Объект, "ТекущиеОстаткиДС", СохраненныеМакеты);
	
	ДанныеПоОплатам = ВыполнитьСКД(Объект, "ДанныеПоРасчетам", СохраненныеМакеты);
	
	ВнешниеНаборы = Новый Структура("Заявки, ДанныеПоОплатам", ЗаявкиОтобранные, ДанныеПоОплатам);
	ТаблицаПоступлений = ВыполнитьСКД(Объект, "ДанныеПланирования", СохраненныеМакеты, ВнешниеНаборы, Объект.ТекущаяГруппировка, Истина);
	
	СоответствиеМассивовДокументов = Новый Соответствие;
	СоответствиеМассивовДокументов.Вставить(Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"), Новый Массив);
	ЗаполнитьДокументыПоТипам(СоответствиеМассивовДокументов, ТаблицаПоступлений);
	РеквизитыОбъектов = РеквизитыОбъектовПоТипам(СоответствиеМассивовДокументов);
	
	Для Каждого СтрокаДерева из ТаблицаПоступлений.Строки Цикл
		Если Не ЗначениеЗаполнено(СтрокаДерева.БанковскийСчетКасса) Тогда
			НоваяСтрока = ЭлементыДерева.Добавить();
 			НоваяСтрока.Группировка = НСтр("ru='Не распределено: ';uk='Не розподілено: '") + СтрокаДерева.ОрганизацияПредставление + ", " + СтрокаДерева.ВалютаПредставление;
			НоваяСтрока.Организация = СтрокаДерева.Организация;
			НоваяСтрока.Валюта = СтрокаДерева.Валюта;
			НоваяСтрока.ЗначениеГруппировки = СтрокаДерева.Организация;
			НоваяСтрока.ЕстьПодчиненныеСтроки = Истина;
			НоваяСтрока.ИндексПорядка = ИндексПорядкаСтрокиДерева(НоваяСтрока.Организация, НоваяСтрока.Валюта, Неопределено);
			ВывестиСтрокиДерева(Объект, ДеревоПлатежей, НоваяСтрока, СтрокаДерева.Строки, РеквизитыОбъектов);
		КонецЕсли;
	КонецЦикла;
	
	НесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	
	Для Каждого СтрокаОстатков из ОстаткиПоСчетам Цикл
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Группировка 		 = СтрокаОстатков.Представление;
		НоваяСтрока.ЗначениеГруппировки	 = СтрокаОстатков.БанковскийСчетКасса;
		НоваяСтрока.Организация			 = СтрокаОстатков.Организация;
		Если НесколькоВалют Тогда
			НоваяСтрока.Валюта			 = СтрокаОстатков.Валюта;
		КонецЕсли;
		НоваяСтрока.ОстатокОборот = Формат(СтрокаОстатков.СуммаОстаток, "ЧДЦ=2");
		НоваяСтрока.ИндексПорядка = ИндексПорядкаСтрокиДерева(НоваяСтрока.Организация, 
												НоваяСтрока.Валюта, СтрокаОстатков.БанковскийСчетКасса);
		НайденнаяСтрока = ТаблицаПоступлений.Строки.Найти(СтрокаОстатков.БанковскийСчетКасса, "БанковскийСчетКасса");
		Если НайденнаяСтрока <> Неопределено Тогда
			НоваяСтрока.ЕстьПодчиненныеСтроки = Истина;
			ВывестиСтрокиДерева(Объект, ДеревоПлатежей, НоваяСтрока, НайденнаяСтрока.Строки, РеквизитыОбъектов);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыДерева.Сортировать("ИндексПорядка", Истина);
	
	Для Каждого СтрокаБанковскогоСчета из ЭлементыДерева Цикл
		ПлатежныйКалендарьКлиентСервер.ПересчитатьПодчиненныеСтроки(ДеревоПлатежей, СтрокаБанковскогоСчета, 
																	Объект.ДнейПланирования,
																	Объект.ОтражатьОтрицательныеСуммы, Объект.ОтображениеСумм);
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		РезультатЗаполнения = Новый Структура;
		РезультатЗаполнения.Вставить("Результат", ДеревоПлатежей);
		ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаМакетов) Тогда
		ПоместитьВоВременноеХранилище(СохраненныеМакеты, АдресХранилищаМакетов);
	КонецЕсли;
	
	Возврат ДеревоПлатежей;
	
КонецФункции

Процедура ЗаполнитьПараметрыКомпоновки(Объект, НастройкиСКД)
	
	НачалоПериода = Объект.ПланироватьСДаты;
	КонецПериода = ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(НачалоПериода, Объект.ДнейПланирования);
	
	ФинОтчетность = ФинансоваяОтчетностьСервер;
	
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "НачалоПериода", 	НачалоДня(НачалоПериода), Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "КонецПериода", 	КонецДня(КонецПериода), Истина);
	
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ОтображатьНеутвержденные", Объект.ОтображатьНеутвержденные, Истина);
	
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ОтображатьНераспределенныеВКалендаре", 	Объект.ОтображатьНераспределенныеВКалендаре, Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьЗаказыКлиентов", 				Объект.ЗаказыПокупателей, 			Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьВозвратыТоваровОтКлиента", 	Объект.ВозвратыТоваровОтКлиента, 	Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьСчетаПокупателей", 			Объект.СчетаНаОплатуПокупателям, 	Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьЗаказыПоставщикам", 			Объект.ЗаказыПоставщикам, 			Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьВозвратыТоваровПоставщикам", 	Объект.ВозвратыТоваровПоставщику, 	Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьПоступленияПоЭквайрингу", 	Объект.ПоступленияПоЭквайрингу, 	Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьВыплатыПоФинансовойДеятельности", Объект.РасходыПоФинансовойДеятельности, Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьПоступленияПоФинансовойДеятельности", Объект.ПоступленияПоФинансовойДеятельности, Истина);
	ФинОтчетность.УстановитьПараметрКомпоновки(НастройкиСКД, "ИспользоватьВедомостиНаВыплатуЗарплаты", 	Объект.ВедомостиНаВыплатуЗарплаты, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОтборыКомпоновки(Объект, НастройкиСКД)
	
	ФинОтчетность = ФинансоваяОтчетностьСервер;
	
	Если ЗначениеЗаполнено(Объект.Организации) Тогда
		ФинОтчетность.УстановитьОтбор(НастройкиСКД.Настройки.Отбор, "Организация", Объект.Организации, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		ФинОтчетность.УстановитьОтбор(НастройкиСКД.Настройки.Отбор, "Валюта", Объект.Валюта, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	ГруппаОтбора = НастройкиСКД.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Если ЗначениеЗаполнено(Объект.БанковскиеСчетаКассы) ИЛИ Объект.Свойство("Заявка") Тогда
		ФинОтчетность.УстановитьОтбор(ГруппаОтбора, "БанковскийСчетКасса", Объект.БанковскиеСчетаКассы, ВидСравненияКомпоновкиДанных.ВСписке);
		Если Объект.ОтображатьНераспределенные = Истина Тогда
			ФинОтчетность.НовыйОтбор(ГруппаОтбора, "БанковскийСчетКасса", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
		КонецЕсли;
	Иначе
		Если Объект.ОтображатьНераспределенные = Ложь Тогда
			ФинОтчетность.УстановитьОтбор(ГруппаОтбора, "БанковскийСчетКасса", , ВидСравненияКомпоновкиДанных.Заполнено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСтрокиДерева(Объект, ДеревоПлатежей, СтрокаДерева, КоллекцияСтрокИсточник, РеквизитыОбъектов)
	
	ЭлементыДерева = СтрокаДерева.Строки;
	
	НайденнаяСтрока = КоллекцияСтрокИсточник.Найти(Истина, "ЭтоПриход", Истина);
	ЕстьДанные = НайденнаяСтрока <> Неопределено;
	ПлатежныйКалендарьКлиентСервер.ПроверитьДобавитьСтрокуИтогов(ДеревоПлатежей, СтрокаДерева, Истина, ЕстьДанные);
	
	Если ЕстьДанные Тогда
		СтрокаПриходов = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(СтрокаДерева, "ВидСтроки", 3);
		ВывестиДокументыПоДнямВДерево(Объект, СтрокаПриходов, КоллекцияСтрокИсточник, РеквизитыОбъектов, Истина);
	КонецЕсли;
	
	НайденнаяСтрока = КоллекцияСтрокИсточник.Найти(Истина, "ЭтоРасход", Истина);
	ЕстьДанные = НайденнаяСтрока <> Неопределено;
	ПлатежныйКалендарьКлиентСервер.ПроверитьДобавитьСтрокуИтогов(ДеревоПлатежей, СтрокаДерева, Ложь, ЕстьДанные);
	
	Если ЕстьДанные Тогда
		ВывестиДокументыПоДнямВДерево(Объект, СтрокаДерева, КоллекцияСтрокИсточник, РеквизитыОбъектов, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураРеквизитовДокументаПоСтрокеКомпоновки(СтрокаРеквизитов, СтрокаДокумента, ИмяСуммы)
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Представление, ЖелательнаяДатаПлатежа, НазначениеПлатежа");
	Если СтрокаРеквизитов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, СтрокаРеквизитов);
	КонецЕсли;
	РеквизитыДокумента.Вставить("КонтрагентНаименование", СтрокаДокумента.ПартнерПредставление);
	РеквизитыДокумента.Вставить("СуммаДокумента", ?(ИмяСуммы = "СуммаРасход", -СтрокаДокумента[ИмяСуммы], СтрокаДокумента[ИмяСуммы]));
	
	Возврат РеквизитыДокумента;
	
КонецФункции

Процедура ВывестиДокументыПоДнямВДерево(Объект, СтрокаДерева, КоллекцияСтрокИсточник, РеквизитыОбъектов, Поступление)
	
	Если Поступление Тогда
		ИмяФлага = "ЭтоПриход";
		ИмяСуммы = "СуммаПриход";
	Иначе
		ИмяФлага = "ЭтоРасход";
		ИмяСуммы = "СуммаРасход";
	КонецЕсли;
	
	ЭлементыДерева = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокаДерева);
	НачальныйНомер = ЭлементыДерева.Количество();
	
	Для Каждого СтрокаГруппировки из КоллекцияСтрокИсточник Цикл
		
		Если Не СтрокаГруппировки[ИмяФлага] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект.ТекущаяГруппировка = "Произвольная" Тогда
			ИмяЗначения = "Группа";
		ИначеЕсли Объект.ТекущаяГруппировка = "Партнер" Тогда
			ИмяЗначения = "Партнер";
			ИмяПустого = НСтр("ru='<партнер не указан>';uk='<партнер не зазначений>'");
		ИначеЕсли Объект.ТекущаяГруппировка = "СтатьяДДС" Тогда
			ИмяЗначения = "СтатьяДвиженияДенежныхСредств";
			ИмяПустого = НСтр("ru='<Статья ДДС не указана>';uk='<Стаття РГК не зазначена>'");
		КонецЕсли;
		
		НоваяСтрока = Неопределено;
		
		Если Объект.ТекущаяГруппировка = "Произвольная" И 
			Не ЗначениеЗаполнено(СтрокаГруппировки[ИмяЗначения]) Тогда
			
			ЭлементыДобавления = ЭлементыДерева;
			БазовыйИндекс = ЭлементыДобавления.Количество();
			
		Иначе
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			НоваяСтрока.ЗначениеГруппировки = СтрокаГруппировки[ИмяЗначения];
			НоваяСтрока.ВидСтроки = 1;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеГруппировки) Тогда 
				НоваяСтрока.Группировка = ИмяПустого;
			Иначе
				Если ИмяЗначения = "Группа" Тогда
					НоваяСтрока.Группировка = СтрокаГруппировки[ИмяЗначения];
				Иначе
					НоваяСтрока.Группировка = СтрокаГруппировки[ИмяЗначения + "Представление"];
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.ИндексПорядка = ИндексПорядкаСтрокиДерева(СтрокаДерева.Организация, 
											СтрокаДерева.Валюта, СтрокаДерева.ЗначениеГруппировки, НоваяСтрока.Группировка);
			ЭлементыДобавления = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(НоваяСтрока);
			БазовыйИндекс = 0;
			
		КонецЕсли;
		
		Для Каждого СтрокаДня из СтрокаГруппировки.Строки Цикл
			
			Если Не СтрокаДня[ИмяФлага] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НомерДня = (СтрокаДня.ДатаПлатежа - Объект.ПланироватьСДаты) / 86400 + 1;
			Если НомерДня > Объект.ДнейПланирования Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = "День" + Формат(НомерДня, "ЧГ=");
			
			Добавлено = БазовыйИндекс;
			Для Каждого СтрокаДокумента из СтрокаДня.Строки Цикл
				
				Если Не СтрокаДокумента[ИмяФлага] = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Добавлено = Добавлено + 1;
				Если Добавлено > ЭлементыДобавления.Количество() Тогда
					ЭлементыДобавления.Добавить();
				КонецЕсли;
				
				РеквизитыДляЗаполнения = РеквизитыОбъектов.Найти(СтрокаДокумента.ДокументПланирования, "Ссылка");
				РеквизитыДокумента = СтруктураРеквизитовДокументаПоСтрокеКомпоновки(РеквизитыДляЗаполнения, СтрокаДокумента, ИмяСуммы);
				
				СтрокаРасстановки = ЭлементыДобавления[Добавлено - 1];
				СтрокаРасстановки.ИндексПорядка = -1;
				СтрокаРасстановки[ИмяКолонки + "Значение"] = СтрокаДокумента.ДокументПланирования;
				
				СуммаДокумента = ?(ИмяСуммы = "СуммаРасход", -1, 1) * СтрокаДокумента[ИмяСуммы];
				Если СтрокаДокумента.Валюта <> СтрокаДокумента.ВалютаДокумента Тогда
					ЗначенияКурсаВалюты = ПлатежныйКалендарьСерверПовтИсп.КурсВалюты(СтрокаДокумента.Валюта, Объект.ПланироватьСДаты);
					ЗначенияКурсаВалютыДокумента = ПлатежныйКалендарьСерверПовтИсп.КурсВалюты(СтрокаДокумента.ВалютаДокумента, Объект.ПланироватьСДаты);
					СуммаДокумента = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаДокумента, ЗначенияКурсаВалютыДокумента, ЗначенияКурсаВалюты);
				КонецЕсли;
				
				РеквизитыДокумента.Вставить("СуммаДокумента", СуммаДокумента);
				
				СтрокаРасстановки[ИмяКолонки + "Представление"] = 
					ПлатежныйКалендарьКлиентСервер.ПредставлениеДокумента(СтрокаДокумента.ДокументПланирования, РеквизитыДокумента, 
																			Объект.ОтражатьОтрицательныеСуммы, Объект.ОтображениеСумм);
				
				СтрокаРасстановки[ИмяКолонки + "Сумма"] = СуммаДокумента;
				СтрокаРасстановки.ВидСтроки = 1;
				Если Объект.ТекущаяГруппировка = "Произвольная" Тогда
					СтрокаРасстановки.ДоступноДляИзмененияГруппировки = Истина;
					Если Не ЗначениеЗаполнено(СтрокаГруппировки[ИмяЗначения]) Тогда
						СтрокаРасстановки.ЗначениеГруппировки = "";
						СтрокаРасстановки.Группировка = "";
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НоваяСтрока <> Неопределено Тогда
			ПлатежныйКалендарьКлиентСервер.ПроверитьВозможностьВыводаВОднуСтроку(НоваяСтрока, Объект.ДнейПланирования);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыДерева.Сортировать("ИндексПорядка");
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеЗаявок

Функция ДоступныйОстатокНаДень(СтрокаПоискаОстатка, ДеньПроверки)
	
	Если ДеньПроверки = 1 Тогда
		НачальныйОстаток = СтрокаПоискаОстатка.ОстатокОборот;
	Иначе
		НачальныйОстаток = СтрокаПоискаОстатка["День" + (ДеньПроверки - 1) + "Сумма"];
	КонецЕсли;
	
	ЗначениеНаДень = СтрокаПоискаОстатка["День" + ДеньПроверки + "Сумма"];
	Если Не ЗначениеЗаполнено(ЗначениеНаДень) Тогда
		ЗначениеНаДень = 0;
	КонецЕсли;
	
	ДоступныйОстаток = Мин(НачальныйОстаток, ЗначениеНаДень);
	
	Возврат ДоступныйОстаток;
	
КонецФункции

Функция СтрокаСчетаКассы(ДеревоПлатежей, СчетКасса)
	
		СтруктураПоиска = Новый Структура("ЗначениеГруппировки", СчетКасса);
	
	НайденныеСтроки = ДеревоПлатежей.Строки.НайтиСтроки(СтруктураПоиска);
	Если Не НайденныеСтроки.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаПоискаОстатка = НайденныеСтроки[0];
	
	Возврат СтрокаПоискаОстатка;
	
КонецФункции

Функция ОплатитьЗаявкуССобственногоСчета(СтруктураВызова, СписокСчетов, СуммаОплаты, РассчитаннаяДатаОплаты)
	
	Если Не СуммаОплаты Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДеревоПлатежей 	= СтруктураВызова.ДеревоПлатежей;
	ТаблицаПлатежей = СтруктураВызова.ТаблицаПлатежей;
	РеквизитыЗаявки = СтруктураВызова.РеквизитыЗаявки;
	Объект 			= СтруктураВызова.Объект;
	
	МинимальнаяВозможнаяДатаОплаты = Неопределено;
	
	
	Для Сч = 1 По Объект.ДнейПланирования Цикл
		
		ДеньПроверки = Объект.ДнейПланирования - Сч + 1;
		ВсегоДоступноПоСчетамЗаДень = 0;
		
		Для Каждого ЭлементСписка из СписокСчетов Цикл
			
			СчетКасса = ЭлементСписка.Значение;
			
			СтрокаПоискаОстатка = СтрокаСчетаКассы(ДеревоПлатежей, СчетКасса);
			Если СтрокаПоискаОстатка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступныйОстаток = ДоступныйОстатокНаДень(СтрокаПоискаОстатка, ДеньПроверки);
			Если ДоступныйОстаток < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВсегоДоступноПоСчетамЗаДень = ВсегоДоступноПоСчетамЗаДень + ДоступныйОстаток;
			
		КонецЦикла;
		
		Если ВсегоДоступноПоСчетамЗаДень > СуммаОплаты Тогда
			МинимальнаяВозможнаяДатаОплаты = ДеньПроверки;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МинимальнаяВозможнаяДатаОплаты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаПлатежа = ПлатежныйКалендарьКлиентСервер.ДатаПлатежа(Объект.ПланироватьСДаты, МинимальнаяВозможнаяДатаОплаты);
	РассчитаннаяДатаОплаты = Макс(ДатаПлатежа, РассчитаннаяДатаОплаты);
	
	ОсталосьОплатить = СуммаОплаты;
	Для Каждого ЭлементСписка из СписокСчетов Цикл
		
		СчетКасса = ЭлементСписка.Значение;
		
		СтрокаПоискаОстатка = СтрокаСчетаКассы(ДеревоПлатежей, СчетКасса);
		Если СтрокаПоискаОстатка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступныйОстаток = ДоступныйОстатокНаДень(СтрокаПоискаОстатка, МинимальнаяВозможнаяДатаОплаты);
		ОплатитьСоСчета = Мин(ДоступныйОстаток, ОсталосьОплатить);
		
		Если Не ОплатитьСоСчета Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.БанковскийСчетКасса = СтрокаПоискаОстатка.ЗначениеГруппировки;
		НоваяСтрока.Сумма = ОплатитьСоСчета;
		
		ОсталосьОплатить = ОсталосьОплатить - ОплатитьСоСчета;
		Если Не ОсталосьОплатить Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


Функция ТаблицаПлатежей()
	
	ТаблицаПлатежей = Новый ТаблицаЗначений;
	ТаблицаПлатежей.Колонки.Добавить("ДатаПлатежа");
	ТаблицаПлатежей.Колонки.Добавить("БанковскийСчетКасса");
	ТаблицаПлатежей.Колонки.Добавить("Сумма");
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

Процедура РаспределитьЗаявкиПоСчетам(Объект, СписокЗаявок, СохраненныеМакеты) Экспорт
	
	Объект.Вставить("ОтображатьНераспределенные", Ложь);
	
	СписокРеквизитов = 
	"ЖелательнаяДатаПлатежа, СуммаДокумента, РаспределениеПоСчетам";
	
	РеквизитыЗаявок = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокЗаявок, СписокРеквизитов);
	
	Для Каждого Заявка из СписокЗаявок Цикл
		
		ТаблицаПлатежей = ТаблицаПлатежей();
		ДеревоПлатежей = РассчитатьДанныеКалендаря(Объект, , СохраненныеМакеты);
		СписокСчетов = БанковскиеСчетаКассыДоступныеДляЗаявки(Заявка);
		РеквизитыЗаявки = РеквизитыЗаявок[Заявка];
		
		СтруктураВызова = Новый Структура;
		СтруктураВызова.Вставить("ДеревоПлатежей", ДеревоПлатежей);
		СтруктураВызова.Вставить("ТаблицаПлатежей", ТаблицаПлатежей);
		СтруктураВызова.Вставить("РеквизитыЗаявки", РеквизитыЗаявки);
		СтруктураВызова.Вставить("Объект", Объект);
		
		ДатаОплаты = РеквизитыЗаявки.ЖелательнаяДатаПлатежа;
		
		СуммаКОплате = Макс(РеквизитыЗаявки.СуммаДокумента - РеквизитыЗаявки.РаспределениеПоСчетам.Выгрузить().Итог("Сумма"), 0);
		
		Если Не ОплатитьЗаявкуССобственногоСчета(СтруктураВызова, СписокСчетов, СуммаКОплате, ДатаОплаты) Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаявкаОбъект = Заявка.ПолучитьОбъект();
		ТаблицаПлатежей.ЗаполнитьЗначения(ДатаОплаты, "ДатаПлатежа");
		
		ОсталосьОплатить = РеквизитыЗаявки.СуммаДокумента - ЗаявкаОбъект.РаспределениеПоСчетам.Итог("Сумма");
		Для Каждого СтрокаОтражения из ТаблицаПлатежей Цикл
			НоваяСтрока = ЗаявкаОбъект.РаспределениеПоСчетам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтражения);
			ОсталосьОплатить = ОсталосьОплатить - НоваяСтрока.Сумма;
			Если ОсталосьОплатить < 0 Тогда
				//Ошибка округления
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + ОсталосьОплатить;
			КонецЕсли;
		КонецЦикла;
		
		ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
		ЗаявкаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

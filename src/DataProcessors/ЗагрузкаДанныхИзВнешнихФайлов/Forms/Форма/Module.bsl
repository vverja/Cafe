&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьРучныеСкидкиВЗакупках      = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьНоменклатуруПоставщиков    = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков");
	
	ЗагружатьКоличество = ?(Параметры.Свойство("ЗагружатьКоличество"), Параметры.ЗагружатьКоличество, Истина);
	ПроверятьЗаполнениеХарактеристик =
		Параметры.Свойство("ПроверятьЗаполнениеХарактеристик") И Параметры.ПроверятьЗаполнениеХарактеристик;

	ЗагружатьЗапасы                       = Параметры.ЗагружатьЗапасы;
	ЗагружатьЦены                         = Параметры.ЗагружатьЦены;
	ЗагружатьСкидки                       = Параметры.ЗагружатьСкидки;
	ЗагружатьСуммы                        = Параметры.ЗагружатьСуммы;
	Объект.ЗагружатьУпаковочныеЛисты      = Параметры.ЗагружатьУпаковочныеЛисты;
	ЦенаВключаетНДС                       = Параметры.ЦенаВключаетНДС;
	ЗагружатьГТД                          = Параметры.ЗагружатьГТД;
	ИмяТЧ                                 = Параметры.ИмяТЧ;
	ВернутьМногооборотнуюТару             = Параметры.ВернутьМногооборотнуюТару;
	НеПересчитыватьСуммовыеПоказатели     = Параметры.НеПересчитыватьСуммовыеПоказатели;
	Партнер                               = Параметры.Партнер;
	СегментНоменклатуры                   = Параметры.СегментНоменклатуры;
	
	Если Параметры.Свойство("Заголовок") И ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СегментНоменклатуры) Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("СегментНоменклатуры", СегментНоменклатуры));
		Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("ЗапретРедактированияСегментаНоменклатуры", Истина));
		КонецЕсли;
		ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = ПараметрыВыбора;
	КонецЕсли;
	
	СопоставлятьПоНоменклатуреПоставщиков = Параметры.СопоставлятьПоНоменклатуреПоставщиков
		И ИспользоватьНоменклатуруПоставщиков
		И ЗначениеЗаполнено(Партнер);
	
	Валюта     = Параметры.Валюта;
	Дата       = Параметры.Дата;
	Соглашение = Параметры.Соглашение;
	
	Если НЕ ЗначениеЗаполнено(Параметры.НалогообложениеНДС) Тогда
		НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		НалогообложениеНДС = Параметры.НалогообложениеНДС;
	КонецЕсли;
	
	ИспользоватьТару = ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	
	Если ЗначениеЗаполнено(Параметры.ОтборПоТипуНоменклатуры) Тогда
		ОтборПоТипуНоменклатуры = Параметры.ОтборПоТипуНоменклатуры;
		
		ТекстОтбора = НСтр("ru='Для выбора доступна номенклатура с типом: %Тип%.';uk='Для вибору доступна номенклатура з типом: %Тип%.'");
		Тип = "";
		Для каждого ТипНоменклатурыОтбор Из Параметры.ОтборПоТипуНоменклатуры Цикл
			
			Если НЕ ИспользоватьТару И ТипНоменклатурыОтбор = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				Продолжить;
			КонецЕсли;
			
			Тип = Тип + ТипНоменклатурыОтбор + ", ";
			
		КонецЦикла;
		ТекстОтбора = СтрЗаменить(ТекстОтбора, "%Тип%", Лев(Тип, СтрДлина(Тип)-2));
		
		Элементы.ОтборНадпись.Заголовок = ТекстОтбора;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Параметры.ОтборПоТипуНоменклатуры));
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
	ИнициализироватьТабличныйДокумент();
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьДоступностьКолонок();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ЗагружатьУпаковочныеЛисты Тогда
		УпаковочныеЛистыПоНомерамСтрок = Новый Соответствие;
		Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
			
			ТекущаяСтрока = Объект.Товары[ТекИндекс];
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
				И Не ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнены данные по товару или упаковочному листу в строке %НомерСтроки%.';uk='Не заповнені дані за товаром або пакувальним листом в рядку %НомерСтроки%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
				Если УпаковочныеЛистыПоНомерамСтрок[ТекущаяСтрока.УпаковочныйЛист] = Неопределено Тогда
					УпаковочныеЛистыПоНомерамСтрок.Вставить(ТекущаяСтрока.УпаковочныйЛист, ТекущаяСтрока.НомерСтроки);
				Иначе
					ТекстОшибки = НСтр("ru='В строке %НомерСтроки% повторяется %УпаковочныйЛист% из строки %НомерПовторяемойСтроки%.
                        |Измените или удалите одну из строк.'
                        |;uk='У рядку %НомерСтроки% повторюється %УпаковочныйЛист% з рядка %НомерПовторяемойСтроки%.
                        |Змініть або видаліть один з рядків.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%УпаковочныйЛист%", ТекущаяСтрока.УпаковочныйЛист);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерПовторяемойСтроки%",
						УпаковочныеЛистыПоНомерамСтрок[ТекущаяСтрока.УпаковочныйЛист]);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "УпаковочныйЛист");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Если СоздатьНомераГТД Или ПроверятьЗаполнениеХарактеристик Тогда
		Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""';uk=' у рядку %НомерСтроки% списку ""Товари""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Объект.Товары[ТекИндекс].НомерСтроки);
			
			
			// Проверка заполнения характеристик.
			Если Объект.Товары[ТекИндекс].ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Характеристика) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнена колонка ""Характеристика""';uk='Не заповнена колонка ""Характеристика""'") + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Характеристика"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C3").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C4").Текст);
			
	Если Не ЗаполненыНоменклатураКодАртикулШтрихкод Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Необходимо скопировать колонки в таблицу из внешнего файла.';uk='Необхідно скопіювати колонки у таблицю із зовнішнього файлу.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(НСтр("ru='Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...';uk='Здійснюється співставлення введених даних з даними інформаційної бази. Будь ласка, зачекайте...'"),,,БиблиотекаКартинок.Информация32);
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ();

	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	СоздатьНомераГТД = Ложь;
	Если Объект.Товары.НайтиСтроки(Новый Структура("СоздатьНомерГТД, ВедетсяУчетПоГТД", Истина, Истина)).Количество()>0 Тогда
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Создать", НСтр("ru='Создать';uk='Створити'"));
		СписокКнопок.Добавить("БезСоздания", НСтр("ru='Не создавать';uk='Не створювати'"));
		СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
		
		ОтветНаВопрос = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиТоварыЗавершение", ЭтотОбъект), 
			НСтр("ru='Некоторые загружаемые номера ГТД не найдены в информационной базе. Создать номера ГТД?';uk='Деякі номери ВМД, які завантажуються, не знайдені в інформаційній базі. Створити номери ВМД?'"), 
			СписокКнопок);
		Возврат;
	КонецЕсли;
	
	ПеренестиТоварыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Отмена" Тогда
		Отказ = Истина;
		Возврат
	ИначеЕсли ОтветНаВопрос = "Создать" Тогда
		СоздатьНомераГТД = Истина;
	КонецЕсли;
	ПеренестиТоварыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыФрагмент()
	
	Перем СтруктураВыбора;
	
	Если ПроверитьЗаполнение() Тогда
		Если СоздатьНомераГТД Тогда
			СоздатьНомераГТД();
		КонецЕсли;
		Закрыть();
		СтруктураВыбора = Новый Структура();
		СтруктураВыбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыВХранилище());
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			СтруктураВыбора.Вставить("ИмяТЧ", ИмяТЧ);
		КонецЕсли;
		ОповеститьОВыборе(СтруктураВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Партнер);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		СтруктураПараметровСопоставленнияНоменклатуры);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	Если Не НеПересчитыватьСуммовыеПоказатели Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.УпаковочныйЛист = ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Партнер",                            Партнер);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		СтруктураПараметровСопоставленнияНоменклатуры);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	Если Не НеПересчитыватьСуммовыеПоказатели Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.УпаковочныйЛист = ПредопределенноеЗначение("Документ.УпаковочныйЛист.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковочныйЛистПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.УпаковочныйЛист) Тогда
		ТекущаяСтрока.Номенклатура       = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ТекущаяСтрока.Характеристика     = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		ТекущаяСтрока.Упаковка           = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
		ТекущаяСтрока.КоличествоУпаковок = 1;
		ТекущаяСтрока.Количество         = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", 
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(
			Объект, 
			Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыХарактеристика" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки, Истина);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыУпаковочныйЛист" Тогда
		ЗаполнитьСписокВыбораУпаковочныхЛистов(ТекущаяСтрока.КодСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.СоздатьНомерГТД = НЕ ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД);
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	УточнениеНоменклатуры.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	Объект.Товары.Очистить();
	
	ЗаполнитьТаблицуНоменклатурыИШтрихкодов();
	
	НомераКолонок = Новый Соответствие;
	НомерКолонки = 1;
	
	НомераКолонок.Вставить("КолонкаШтрихкод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаКод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаАртикул", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаНоменклатура", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		НомераКолонок.Вставить("КолонкаХарактеристика", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьКоличество Тогда
		НомераКолонок.Вставить("КолонкаКоличество", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьЗапасы Тогда
		НомераКолонок.Вставить("КолонкаМинимальныйОстаток", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаМаксимальныйОстаток", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьЦены Тогда
		НомераКолонок.Вставить("КолонкаЦена", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьСуммы Тогда
		Если ИспользоватьРучныеСкидкиВЗакупках И ЗагружатьСкидки Тогда
			НомераКолонок.Вставить("КолонкаПроцентРучнойСкидки", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
			НомераКолонок.Вставить("КолонкаСуммаРучнойСкидки", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
		КонецЕсли;
		НомераКолонок.Вставить("КолонкаСумма", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			НомераКолонок.Вставить("КолонкаСуммаНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
			Если НЕ ЦенаВключаетНДС Тогда
				НомераКолонок.Вставить("КолонкаСуммаСНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
				НомерКолонки = НомерКолонки +1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗагружатьГТД Тогда
		НомераКолонок.Вставить("КолонкаНомерГТД", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	
	НомерСтроки = 2;
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
	ЕстьОшибкиРаспознавания = Ложь;
	
	УпаковочныйЛистСинонимВРег   = СтрЗаменить(ВРег(Метаданные.Документы.УпаковочныйЛист.Синоним), " ", "");
	ДлинаСинонимаУпаковочныйЛист = СтрДлина(УпаковочныйЛистСинонимВРег);
	КодыУпаковочныхЛистовНаПроверку.Очистить();
	
	Пока ЗаполненыНоменклатураКодАртикулШтрихкод Цикл
		
		НоваяСтрока = УточнениеНоменклатуры.Добавить();
		Количество = 0;
		НоваяСтрока.КодСтроки = НомерСтроки;
		
		Попытка
			НоваяСтрока.Штрихкод = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст;
			НоваяСтрока.Код = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст;
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст;
			НоваяСтрока.НоменклатураНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст;
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				НоваяСтрока.ХарактеристикаНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаХарактеристика")).Текст;
			КонецЕсли;
			Если ЗагружатьКоличество Тогда
				Количество = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКоличество")).Текст;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗагружатьКоличество Тогда
			Попытка
				НоваяСтрока.Количество = Число(СтрЗаменить(Количество, " ", "")); 
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗагружатьЗапасы Тогда

			МинимальныйОстаток = 0;
			Попытка
				МинимальныйОстаток = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаМинимальныйОстаток")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			Попытка
				НоваяСтрока.МинимальныйОстаток = Число(СтрЗаменить(МинимальныйОстаток, " ", ""));
			Исключение
			КонецПопытки;

			МаксимальныйОстаток = 0;
			Попытка
				МаксимальныйОстаток = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаМаксимальныйОстаток")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			Попытка
				НоваяСтрока.МаксимальныйОстаток = Число(СтрЗаменить(МаксимальныйОстаток, " ", ""));
			Исключение
			КонецПопытки;

		КонецЕсли;

		Если ЗагружатьЦены Тогда
			Цена = 0;
			Попытка
				Цена = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаЦена")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.Цена = Число(СтрЗаменить(Цена, " ", ""));
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗагружатьСуммы Тогда
			ПроцентРучнойСкидки = 0;
			СуммаРучнойСкидки   = 0;
			Сумма               = 0;
			СуммаНДС            = 0;
			СуммаСНДС           = 0;
			
			Попытка
				Если ИспользоватьРучныеСкидкиВЗакупках И ЗагружатьСкидки Тогда
					ПроцентРучнойСкидки = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаПроцентРучнойСкидки")).Текст;
					СуммаРучнойСкидки = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаРучнойСкидки")).Текст;
					ПроцентРучнойСкидки = СтрЗаменить(ПроцентРучнойСкидки, "%", "");
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСумма") <>  Неопределено Тогда
					Сумма     = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСумма")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаНДС") <>  Неопределено Тогда
					СуммаНДС  = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаНДС")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаСНДС") <>  Неопределено Тогда
					СуммаСНДС = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаСНДС")).Текст;
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				НоваяСтрока.ПроцентРучнойСкидки = Число(СтрЗаменить(ПроцентРучнойСкидки, " ", ""));
			Исключение
			
			КонецПопытки;
			
			Попытка
				НоваяСтрока.СуммаРучнойСкидки = Число(СтрЗаменить(СуммаРучнойСкидки, " ", ""));
			Исключение
			
			КонецПопытки;
			
			Попытка
				НоваяСтрока.Сумма = Число(СтрЗаменить(Сумма, " ", "")); 
			Исключение
			
			КонецПопытки;
			
			Попытка
				НоваяСтрока.СуммаНДС = Число(СтрЗаменить(СуммаНДС, " ", "")); 
			Исключение
			
			КонецПопытки;
			
			Попытка
				НоваяСтрока.СуммаСНДС = Число(СтрЗаменить(СуммаСНДС, " ", ""));
			Исключение
			
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗагружатьГТД Тогда
			Попытка
				НомерГТД            = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНомерГТД")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Если ЗначениеЗаполнено(НомерГТД) Тогда
				НоваяСтрока.НомерГТД             = СокрЛП(НомерГТД);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПоискаКод            = ВРег(СтрЗаменить(НоваяСтрока.Код, " ", "")); 
		СтрокаПоискаАртикул        = ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")); 
		СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""));
		СтрокаПоискаХарактеристика = ВРег(СтрЗаменить(НоваяСтрока.ХарактеристикаНаименование, " ", ""));
		
		Если ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
			ШтрихКодБезПробелов = СтрЗаменить(НоваяСтрока.Штрихкод, " ", "");
			НайденныеСтроки = ТаблицаШтрихкодов.НайтиСтроки(Новый Структура("Штрихкод", ШтрихКодБезПробелов));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
				КонецЦикла;
			ИначеЕсли Объект.ЗагружатьУпаковочныеЛисты Тогда
				СтрокаСНовымКодом = КодыУпаковочныхЛистовНаПроверку.Добавить();
				СтрокаСНовымКодом.Код = ШтрихКодБезПробелов;
				СтрокаСНовымКодом.КодСтроки = НомерСтроки;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Код) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеХарактеристикиПоиск", 
				СтрокаПоискаКод, 
				СтрокаПоискаХарактеристика));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеХарактеристикиПолноеПоиск", 
					СтрокаПоискаКод, 
					СтрокаПоискаХарактеристика));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", 
						СтрокаПоискаКод));
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск, НаименованиеХарактеристикиПоиск", 
				СтрокаПоискаАртикул, 
				СтрокаПоискаНоменклатура,
				СтрокаПоискаХарактеристика));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск, НаименованиеХарактеристикиПоиск", 
					СтрокаПоискаАртикул, 
					СтрокаПоискаНоменклатура,
					СтрокаПоискаХарактеристика));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск, НаименованиеХарактеристикиПолноеПоиск", 
						СтрокаПоискаАртикул, 
						СтрокаПоискаНоменклатура,
						СтрокаПоискаХарактеристика));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск, НаименованиеХарактеристикиПолноеПоиск", 
							СтрокаПоискаАртикул, 
							СтрокаПоискаНоменклатура,
							СтрокаПоискаХарактеристика));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск", 
								СтрокаПоискаАртикул, 
								СтрокаПоискаНоменклатура));
							Если НайденныеСтроки.Количество() = 0 Тогда
								НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск", 
									СтрокаПоискаАртикул, 
									СтрокаПоискаНоменклатура));
								Если НайденныеСтроки.Количество() = 0 Тогда
									НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск, НоменклатураПоставщикаПоиск", 
										СтрокаПоискаАртикул, 
										СтрокаПоискаНоменклатура));
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, КодСтроки",НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика, НомерСтроки));
				Если ПодобранныеРанееТовары.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Код) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПоиск",
				СтрокаПоискаКод,
				СтрокаПоискаНоменклатура));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПолноеПоиск",
					СтрокаПоискаКод,
					СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", 
						СтрокаПоискаКод));
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
				Если ПодобранныеРанееТовары.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,"Характеристика");
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаНоменклатура));
				
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", 
						СтрокаПоискаАртикул));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск, НоменклатураПоставщикаПоиск", 
							СтрокаПоискаАртикул, 
							СтрокаПоискаНоменклатура));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", 
									СтрокаПоискаАртикул));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
				Если ПодобранныеРанееТовары.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,"Характеристика");
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПоиск, НаименованиеПоиск",
				СтрокаПоискаХарактеристика,
				СтрокаПоискаНоменклатура));
				
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПоиск, НаименованиеПолноеПоиск",
					СтрокаПоискаХарактеристика,
					СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПолноеПоиск, НаименованиеПоиск",
						СтрокаПоискаХарактеристика,
						СтрокаПоискаНоменклатура));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПолноеПоиск, НаименованиеПолноеПоиск",
							СтрокаПоискаХарактеристика,
							СтрокаПоискаНоменклатура));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск", 
								СтрокаПоискаНоменклатура));
							Если НайденныеСтроки.Количество() = 0 Тогда
								НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", 
									СтрокаПоискаНоменклатура));
								Если НайденныеСтроки.Количество() = 0 Тогда
									НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НоменклатураПоставщикаПоиск", 
										СтрокаПоискаНоменклатура));
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
				ПодобраннаяСтрока.КодСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск",
				СтрокаПоискаАртикул));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", 
					СтрокаПоискаАртикул));
			КонецЕсли;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
				Если ПодобранныеРанееТовары.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,"Характеристика");
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеХарактеристикиПоиск",
				СтрокаПоискаАртикул,
				СтрокаПоискаХарактеристика));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеХарактеристикиПолноеПоиск",
					СтрокаПоискаАртикул,
					СтрокаПоискаХарактеристика));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоставщикаПоиск", 
						СтрокаПоискаАртикул));
				КонецЕсли;
			КонецЕсли;
				
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
				Если ПодобранныеРанееТовары.Количество() = 0 Тогда
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
			Если Объект.ЗагружатьУпаковочныеЛисты
				И СтрНайти(СтрокаПоискаНоменклатура, УпаковочныйЛистСинонимВРег) = 1 Тогда
				ПозицияОкончанияКода = СтрНайти(ВРег(НоваяСтрока.НоменклатураНаименование), " " + НСтр("ru='ОТ';uk='ВІД'") + " ") - 1;
				
				Если ПозицияОкончанияКода > 0 Тогда
					СтрокаПоискаКодаУпЛиста = СтрЗаменить(Лев(НоваяСтрока.НоменклатураНаименование, ПозицияОкончанияКода), " ", "");
				Иначе
					СтрокаПоискаКодаУпЛиста = СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", "");
				КонецЕсли;
				СтрокаПоискаКодаУпЛиста = Сред(СтрокаПоискаКодаУпЛиста, ДлинаСинонимаУпаковочныйЛист + 1);
				СтрокаСНовымКодом = КодыУпаковочныхЛистовНаПроверку.Добавить();
				СтрокаСНовымКодом.Код = СтрокаПоискаКодаУпЛиста;
				СтрокаСНовымКодом.КодСтроки = НомерСтроки;
			Иначе
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск",
					СтрокаПоискаНоменклатура));
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", 
						СтрокаПоискаНоменклатура));
					Если НайденныеСтроки.Количество() = 0 Тогда
						НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НоменклатураПоставщикаПоиск", 
							СтрокаПоискаНоменклатура));
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, КодСтроки",НайденнаяСтрока.Номенклатура, НомерСтроки));
					Если ПодобранныеРанееТовары.Количество() = 0 Тогда
						ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
						ПодобраннаяСтрока.КодСтроки = НомерСтроки;
						ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, НайденнаяСтрока,,"Характеристика");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			
		КонецЕсли;
		
		// Заполнение тч Товары.
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ЗагружаемаяНоменклатура    = НоваяСтрока.НоменклатураНаименование;
		НоваяСтрокаТовары.ЗагружаемаяХарактеристика  = НоваяСтрока.ХарактеристикаНаименование;
		НоваяСтрокаТовары.ЗагружаемыйАртикул         = НоваяСтрока.Артикул;
		НоваяСтрокаТовары.ЗагружаемыйШтрихкод        = НоваяСтрока.Штрихкод;
		НоваяСтрокаТовары.ЗагружаемыйКод             = НоваяСтрока.Код;
		НоваяСтрокаТовары.ЗагружаемыйНомерГТД        = НоваяСтрока.НомерГТД;
		Если ЗагружатьКоличество Тогда
			НоваяСтрокаТовары.КоличествоУпаковок        = НоваяСтрока.Количество;
		КонецЕсли;
		НоваяСтрокаТовары.КодСтроки                  = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрока,,"Артикул");
		
		МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));
		
		Если МассивПодобраннойНоменклатуры.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, МассивПодобраннойНоменклатуры.Получить(0));
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
		Если ЗагружатьКоличество Тогда
		
			Если НоваяСтрокаТовары.Количество > 0 Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;

		КонецЕсли;
		
		Если НЕ НеПересчитыватьСуммовыеПоказатели Тогда
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
			
			ЕстьСкидки = ЗначениеЗаполнено(НоваяСтрока.СуммаРучнойСкидки) ИЛИ ЗначениеЗаполнено(НоваяСтрока.ПроцентРучнойСкидки);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаНДС) ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаСНДС)  ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) ИЛИ ЕстьСкидки Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаРучнойСкидки) И ЗначениеЗаполнено(НоваяСтрока.ПроцентРучнойСкидки) Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.СуммаРучнойСкидки) И НЕ ЗначениеЗаполнено(НоваяСтрока.ПроцентРучнойСкидки) Тогда
				СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоваяСтрока.СуммаРучнойСкидки) ИЛИ ЗначениеЗаполнено(НоваяСтрока.ПроцентРучнойСкидки) Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, Неопределено);
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	Если ЗагружатьГТД Тогда
		ДополнитьТоварыНомерамиГТД();
	КонецЕсли;
	
	Если Объект.ЗагружатьУпаковочныеЛисты Тогда
		ЗаполнитьУпаковочныеЛисты();
	КонецЕсли;
	
	ТаблицаНоменклатуры.Очистить();
	ТаблицаШтрихкодов.Очистить();
	УточнениеНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНоменклатурыИШтрихкодов()
	
	ТаблицаНоменклатуры.Очистить();
	ТаблицаШтрихкодов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = ШтрихкодыНоменклатуры.Номенклатура)
		|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
		|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ШтрихкодыНоменклатуры.Характеристика)
		|			И (ВариантыКомплектацииНоменклатуры.Основной)
		|ГДЕ
		|	ИСТИНА
		|	И &ШтрихкодыТекстУсловияОтбор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
		|ПОМЕСТИТЬ НомХар
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
		|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
		|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (ВариантыКомплектацииНоменклатуры.Основной)
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|	И &ТекстУсловияОтбор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА Номенклатура.Ссылка
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА Номенклатура.ВладелецХарактеристик
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА Номенклатура.ВидНоменклатуры
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
		|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
		|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		|			И (ВариантыКомплектацииНоменклатуры.Основной)
		|ГДЕ
		|	Номенклатура.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И &ТекстУсловияОтбор
		|;
		|";
		
	Если ПравоДоступа("Чтение", Метаданные.Справочники.НоменклатураПоставщиков) Тогда
		ТекстЗапроса = "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомХар.Номенклатура.Код КАК Код,
			|	НомХар.Номенклатура.Артикул КАК Артикул,
			|	"""" КАК АртикулПоиск,
			|	НомХар.Номенклатура.Наименование КАК Наименование,
			|	"""" КАК НаименованиеПоиск,
			|	НомХар.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
			|	"""" КАК НаименованиеПолноеПоиск,
			|	НомХар.Номенклатура КАК Номенклатура,
			|	НомХар.Характеристика.Наименование КАК НаименованиеХарактеристики,
			|	"""" КАК НаименованиеХарактеристикиПоиск,
			|	НомХар.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
			|	"""" КАК НаименованиеХарактеристикиПолноеПоиск,
			|	НомХар.Характеристика КАК Характеристика,
			|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
			|	"""" КАК НоменклатураПоставщикаПоиск,
			|	НоменклатураПоставщиков.Артикул КАК АртикулПоставщика,
			|	"""" КАК АртикулПоставщикаПоиск
			|	
			|ИЗ
			|	НомХар КАК НомХар
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|		ПО НомХар.Номенклатура = НоменклатураПоставщиков.Номенклатура
			|			И НомХар.Характеристика = НоменклатураПоставщиков.Характеристика
			|			И НЕ НоменклатураПоставщиков.ПометкаУдаления
			|			И &СопоставлятьПоНоменклатуреПоставщиков
			|			И НоменклатураПоставщиков.Владелец = &Партнер
			|";
	Иначе
		ТекстЗапроса = "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомХар.Номенклатура.Код КАК Код,
			|	НомХар.Номенклатура.Артикул КАК Артикул,
			|	"""" КАК АртикулПоиск,
			|	НомХар.Номенклатура.Наименование КАК Наименование,
			|	"""" КАК НаименованиеПоиск,
			|	НомХар.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
			|	"""" КАК НаименованиеПолноеПоиск,
			|	НомХар.Номенклатура КАК Номенклатура,
			|	НомХар.Характеристика.Наименование КАК НаименованиеХарактеристики,
			|	"""" КАК НаименованиеХарактеристикиПоиск,
			|	НомХар.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
			|	"""" КАК НаименованиеХарактеристикиПолноеПоиск,
			|	НомХар.Характеристика КАК Характеристика,
			|	"""" КАК НоменклатураПоставщика,
			|	"""" КАК НоменклатураПоставщикаПоиск,
			|	"""" КАК АртикулПоставщика,
			|	"""" КАК АртикулПоставщикаПоиск
			|	
			|ИЗ
			|	НомХар КАК НомХар
			|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СопоставлятьПоНоменклатуреПоставщиков", СопоставлятьПоНоменклатуреПоставщиков);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	ТекстУсловияОтбор = "ИСТИНА";
	ШтрихкодыТекстУсловияОтбор = "ИСТИНА";
	
	Если ЗначениеЗаполнено(ОтборПоТипуНоменклатуры) Тогда
		
		СодержитНабор = Ложь;
		ОтборыПоТипуНоменклатурыБезНаборов = Новый СписокЗначений;
		Для Каждого ЭлементМассива Из ОтборПоТипуНоменклатуры Цикл
			ОтборыПоТипуНоменклатурыБезНаборов.Добавить(ЭлементМассива);
		КонецЦикла;
		Если ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор) <> Неопределено Тогда
			СодержитНабор = Истина;
			ОтборыПоТипуНоменклатурыБезНаборов.Удалить(ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор));
		КонецЕсли;
		
		Если Не СодержитНабор Тогда
			
			ТекстУсловияОтбор          = "Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)";
			ШтрихкодыТекстУсловияОтбор = "ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)";
			
			Запрос.УстановитьПараметр("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
			
		Иначе
			
			ОграничиватьНаборыПоУслугам = ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Услуга) <> Неопределено
			                          ИЛИ ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Работа) <> Неопределено;
			ОграничиватьНаборыПоТоварам = ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.МногооборотнаяТара) <> Неопределено
			                          ИЛИ ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Товар) <> Неопределено;
			
			Если Не ОграничиватьНаборыПоУслугам И ОграничиватьНаборыПоТоварам Тогда
				
				ТекстУсловияОтбор = "Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)
				                    |И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитУслуги, Ложь)";
				ШтрихкодыТекстУсловияОтбор = "ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)
				                             |И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитУслуги, Ложь)";
			КонецЕсли;
			
			Если ОграничиватьНаборыПоУслугам И Не ОграничиватьНаборыПоТоварам Тогда
				
				ТекстУсловияОтбор = "Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)
				                    |И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитТовары, Ложь)";
				ШтрихкодыТекстУсловияОтбор = "ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)
				                             |И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитТовары, Ложь)";
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекстУсловияОтбор", ТекстУсловияОтбор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ШтрихкодыТекстУсловияОтбор", ШтрихкодыТекстУсловияОтбор);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаШтрихкодов.Загрузить(Результат[0].Выгрузить());
	ТаблицаНоменклатуры.Загрузить(Результат[2].Выгрузить());
	
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ТекСтрока.Код = ВРег(СтрЗаменить(ТекСтрока.Код, " ", ""));
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.Наименование, " ", ""));
		ТекСтрока.НаименованиеПолноеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПолное, " ", ""));
		ТекСтрока.НаименованиеХарактеристикиПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеХарактеристики, " ", ""));
		ТекСтрока.НаименованиеХарактеристикиПолноеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеХарактеристикиПолное, " ", ""));
		ТекСтрока.НоменклатураПоставщикаПоиск = ВРег(СтрЗаменить(ТекСтрока.НоменклатураПоставщика, " ", ""));
		ТекСтрока.АртикулПоставщикаПоиск = ВРег(СтрЗаменить(ТекСтрока.АртикулПоставщика, " ", ""));
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДополнитьТоварыНомерамиГТД()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаГТД.КодСтроки КАК КодСтроки,
 	|	ТаблицаГТД.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаНомеровГТД
	|ИЗ
	|	&ТаблицаГТД КАК ТаблицаГТД
	|ГДЕ
	|	ТаблицаГТД.НомерГТД <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ТаблицаНомеровГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомеровГТД.КодСтроки КАК КодСтроки
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.НомерГТД = ДанныеСправочника.Код 
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления");
	ТаблицаГТД = УточнениеНоменклатуры.Выгрузить(,"КодСтроки, НомерГТД");
	Запрос.УстановитьПараметр("ТаблицаГТД", ТаблицаГТД);
	Результат = Запрос.ВыполнитьПакет();

	ВыборкаГТД = Результат[1].Выгрузить();
	
	Для каждого УточняемаяСтрока Из ТаблицаГТД Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КодСтроки", УточняемаяСтрока.КодСтроки); 
		Если ЗначениеЗаполнено(УточняемаяСтрока.НомерГТД) Тогда
			НайденныеСтроки = ВыборкаГТД.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 1 Тогда
				ЗаполняемыеСтрокиТаблицыТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", УточняемаяСтрока.КодСтроки));
				Если ЗаполняемыеСтрокиТаблицыТовары.Количество() = 1 Тогда
					ЗаполняемыеСтрока = ЗаполняемыеСтрокиТаблицыТовары.Получить(0);
					ЗаполняемыеСтрока.НомерГТД = НайденныеСтроки.Получить(0).Ссылка;
				КонецЕсли; 
			ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
				ЗаполняемыеСтрокиТаблицыТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", УточняемаяСтрока.КодСтроки));
				Если ЗаполняемыеСтрокиТаблицыТовары.Количество() = 1 Тогда
					ЗаполняемыеСтрока = ЗаполняемыеСтрокиТаблицыТовары.Получить(0);
					ЗаполняемыеСтрока.СоздатьНомерГТД = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанных");
	ТабличныйДокумент.Очистить();
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Штрихкод");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Код");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Артикул");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Номенклатура");
	Если Объект.ЗагружатьУпаковочныеЛисты Тогда
		ОбластьТовары.Параметры.ЗаголовокТоварноеМесто = НСтр("ru='Номенклатура / Упаковочный лист';uk='Номенклатура / Пакувальний лист'");
	Иначе
		ОбластьТовары.Параметры.ЗаголовокТоварноеМесто = НСтр("ru='Номенклатура';uk='Номенклатура'");
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Характеристика");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьКоличество Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьЗапасы Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("МинимальныйОстаток");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("МаксимальныйОстаток");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьЦены Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Цена");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	Если ЗагружатьСуммы Тогда
		Если ИспользоватьРучныеСкидкиВЗакупках И ЗагружатьСкидки Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ПроцентРучнойСкидки");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаРучнойСкидки");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
		КонецЕсли;
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Сумма");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		
		Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаНДС");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
			Если НЕ ЦенаВключаетНДС Тогда
				ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаСНДС");
				ТабличныйДокумент.Присоединить(ОбластьТовары);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗагружатьГТД Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("НомерГТД");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели)
	
	СтруктураПересчетаСуммы = Новый Структура;
		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
											Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНоменклатурыХарактеристик(КодТекущейСтроки, СписокХарактеристик = Ложь)
	
	Если СписокХарактеристик Тогда
		СписокВыбораХарактеристка = Элементы.ТоварыХарактеристика.СписокВыбора;
		СписокВыбораХарактеристка.Очистить();
	Иначе
		СписокВыбораНоменклатура  = Элементы.ТоварыНоменклатура.СписокВыбора;
		СписокВыбораНоменклатура.Очистить();
	КонецЕсли;
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	Для каждого ЭлементМассива Из МассивПодобраннойНоменклатуры Цикл
		Если СписокХарактеристик Тогда
			Если СписокВыбораХарактеристка.НайтиПоЗначению(ЭлементМассива.Характеристика) = Неопределено Тогда
				СписокВыбораХарактеристка.Добавить(ЭлементМассива.Характеристика);
			КонецЕсли;
		Иначе
			Если СписокВыбораНоменклатура.НайтиПоЗначению(ЭлементМассива.Номенклатура) = Неопределено Тогда
				СписокВыбораНоменклатура.Добавить(ЭлементМассива.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораУпаковочныхЛистов(КодТекущейСтроки)
	
	МассивПодобранныхУпЛистов = ПодобранныеУпаковочныеЛисты.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	СписокВыбора = Элементы.ТоварыУпаковочныйЛист.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого Стр Из МассивПодобранныхУпЛистов Цикл
		ПредставлениеУпаковочногоЛиста =
			Стр.Код + " " + НСтр("ru='от';uk='від'") + " " + Стр.Дата;
		СписокВыбора.Добавить(Стр.УпаковочныйЛист, ПредставлениеУпаковочногоЛиста);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()

	Товары = Объект.Товары.Выгрузить();
	
	ТоварыДляПереноса = Товары.СкопироватьКолонки();
	ТоварыДляПереноса.Колонки.Добавить("НоменклатураНабора", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварыДляПереноса.Колонки.Добавить("ХарактеристикаНабора", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТоварыДляПереноса.Колонки.Добавить("ИндексНабора", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10,0));
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			ЗаполнитьЗначенияСвойств(ТоварыДляПереноса.Добавить(), СтрокаТЧ)
		Иначе
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, СтрокаТЧ);
			ПараметрыКомплектующих.НоменклатураНабора   = СтрокаТЧ.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = СтрокаТЧ.Характеристика;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата",       Дата);
			ДополнительныеПараметры.Вставить("Соглашение", Соглашение);
			ДополнительныеПараметры.Вставить("Валюта",     Валюта);
			ДополнительныеПараметры.Вставить("Цена",       СтрокаТЧ.Цена);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				
				НоваяСтрока = ТоварыДляПереноса.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
				НоваяСтрока.ИндексНабора = 1;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыДляПереноса);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНомерГТД(НомерГТД)
	
	НовыйНомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
	НовыйНомерГТД.Код = НомерГТД;
	НовыйНомерГТД.ОбменДанными.Загрузка = Истина;
	Попытка 
		НовыйНомерГТД.Записать();
	Исключение
	КонецПопытки;
	
	Возврат НовыйНомерГТД.Ссылка;
	
КонецФункции

&НаСервере
Процедура СоздатьНомераГТД()
	
	ТаблицаСоздаваемыхНомеровГТД = Объект.Товары.Выгрузить(Новый Структура("СоздатьНомерГТД, ВедетсяУчетПоГТД", Истина, Истина),"ЗагружаемыйНомерГТД");
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаГТД.ЗагружаемыйНомерГТД КАК ЗагружаемыйНомерГТД
	|ПОМЕСТИТЬ ТаблицаНомеровГТД
	|ИЗ
	|	&ТаблицаГТД КАК ТаблицаГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК НомерГТД,
	|	ТаблицаНомеровГТД.ЗагружаемыйНомерГТД КАК ЗагружаемыйНомерГТД
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.ЗагружаемыйНомерГТД = ДанныеСправочника.Код
	|			И НЕ ДанныеСправочника.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСправочника.Ссылка,
 	|	ТаблицаНомеровГТД.ЗагружаемыйНомерГТД");
	Запрос.УстановитьПараметр("ТаблицаГТД", ТаблицаСоздаваемыхНомеровГТД);
	ВыборкаГТД = Запрос.Выполнить().Выгрузить();

	Для Каждого СоздаваемаяСтрока ИЗ ВыборкаГТД Цикл
		Если ЗначениеЗаполнено(СоздаваемаяСтрока.НомерГТД) Тогда
			ЗаполняемыйНомерГТД = СоздаваемаяСтрока.НомерГТД;
		Иначе 
 			ЗаполняемыйНомерГТД = СоздатьНомерГТД(СоздаваемаяСтрока.ЗагружаемыйНомерГТД);
		КонецЕсли; 
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЗагружаемыйНомерГТД", СоздаваемаяСтрока.ЗагружаемыйНомерГТД);
		СтруктураПоиска.Вставить("СоздатьНомерГТД", Истина);
		СтруктураПоиска.Вставить("ВедетсяУчетПоГТД", Истина);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
		Для каждого ЗаполняемаяСтрока Из НайденныеСтроки Цикл
			ЗаполняемаяСтрока.НомерГТД = ЗаполняемыйНомерГТД;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКолонок()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ТоварыЗагружаемаяХарактеристика", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры);
		
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ТоварыГруппаНомерГТД");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Видимость", 
		ЗагружатьГТД,
		Истина);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Видимость", 
		ЗагружатьСкидки И ИспользоватьРучныеСкидкиВЗакупках,
		Истина);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыУпаковочныйЛист");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Видимость", 
		Объект.ЗагружатьУпаковочныеЛисты,
		Истина);
		
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыАртикулПоставщика");
	МассивЭлементов.Добавить("ТоварыНоменклатураПоставщика");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Видимость", 
		СопоставлятьПоНоменклатуреПоставщиков);
		

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Отметка незаполненной характеристики, если форма открыта с параметром ПроверятьЗаполнениеХарактеристик = Истина.
	Если Параметры.Свойство("ПроверятьЗаполнениеХарактеристик") И Параметры.ПроверятьЗаполнениеХарактеристик Тогда

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	КонецЕсли;

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Скрытие количества упаковок

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Скрытие запасов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМинимальныйОстаток.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМаксимальныйОстаток.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьЗапасы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);


	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<УКТВЭД и ГТД не используются>';uk='<УКТЗЕД та ВМД не використовуються>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
 

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьХарактеристикиНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);


	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);


	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<будет создан>';uk='<буде створено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.NotGroup;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//


	//

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='место';uk='місце'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.УпаковочныйЛист");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковочныйЛист.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется для товаров>';uk='<не використовується для товарів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУпаковочныеЛисты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТКоды.Код,
	|	ВТКоды.КодСтроки
	|ПОМЕСТИТЬ ВТКоды
	|ИЗ
	|	&КодыУпаковочныхЛистовНаПроверку КАК ВТКоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковочныйЛист.Ссылка КАК УпаковочныйЛист,
	|	УпаковочныйЛист.Код КАК Код,
	|	УпаковочныйЛист.Дата КАК Дата,
	|	ВТКоды.КодСтроки
	|ПОМЕСТИТЬ ВТПодобранныеУпаковочныеЛисты
	|ИЗ
	|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоды КАК ВТКоды
	|		ПО УпаковочныйЛист.Код = ВТКоды.Код
	|		И УпаковочныйЛист.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист,
	|	ВТПодобранныеУпаковочныеЛисты.Код,
	|	ВТПодобранныеУпаковочныеЛисты.Дата,
	|	ВТПодобранныеУпаковочныеЛисты.КодСтроки
	|ИЗ
	|	ВТПодобранныеУпаковочныеЛисты КАК ВТПодобранныеУпаковочныеЛисты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист.Код,
	|	ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПодобранныеУпаковочныеЛисты.КодСтроки,
	|	МАКСИМУМ(ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист) КАК УпаковочныйЛист
	|ИЗ
	|	ВТПодобранныеУпаковочныеЛисты КАК ВТПодобранныеУпаковочныеЛисты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПодобранныеУпаковочныеЛисты.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТПодобранныеУпаковочныеЛисты.УпаковочныйЛист) = 1";
	Запрос.УстановитьПараметр("КодыУпаковочныхЛистовНаПроверку", КодыУпаковочныхЛистовНаПроверку.Выгрузить());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПодобранныеУпаковочныеЛисты.Загрузить(РезультатЗапроса[2].Выгрузить());
	Для Каждого Стр Из РезультатЗапроса[3].Выгрузить() Цикл
		Объект.Товары[Стр.КодСтроки - 2].УпаковочныйЛист = Стр.УпаковочныйЛист;
		Объект.Товары[Стр.КодСтроки - 2].Количество = 1;
		Объект.Товары[Стр.КодСтроки - 2].КоличествоУпаковок = 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	Документы.ВводОстатков.ПолучитьСписокТиповОпераций(СписокДоступныхТиповОпераций);
	
	ИнициализироватьТаблицуПоясненийКОперациям();
	ОтборОрганизацияПриИзмененииСервер();
	
	ИспользоватьНесколькоКасс = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	ИспользоватьНесколькоРасчетныхСчетов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользоватьРозничныеПродажи = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи");
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ЭтоБазоваяВерсия = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	ЕдинственнаяВалюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
	ЕдинственнаяКасса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию();
	ЕдинственныйРасчетныйСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию();
	
	КомандаКассы = Команды.Найти("ОткрытьФормуСпискаКассы");
	КомандаРасчетныеСчета = Команды.Найти("ОткрытьФормуСпискаБанковскиеСчета");
	КомандаВалюты = Команды.Найти("ОткрытьФормуСпискаВалют");
	КомандаСклады = Команды.Найти("ОткрытьФормуСпискаСклады");
	КомандаПартнеры = Команды.Найти("ОткрытьФормуСпискаПартнеры");
	
	Если ИспользоватьНесколькоКасс Тогда
		КомандаКассы.Заголовок = НСтр("ru='Кассы';uk='Каси'");
	Иначе
		КомандаКассы.Заголовок = НСтр("ru='Касса';uk='Каса'");
	КонецЕсли;
	
	Если ЭтоБазоваяВерсия Тогда
		Элементы.ДенежныеСредстваКассы.Видимость = Ложь;
		Элементы.КассыКассы.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользоватьНесколькоРасчетныхСчетов Тогда
		КомандаРасчетныеСчета.Заголовок = НСтр("ru='Банковские счета';uk='Банківські рахунки'");
	Иначе
		КомандаРасчетныеСчета.Заголовок = НСтр("ru='Банковский счет';uk='Банківський рахунок'");
	КонецЕсли;
	
	Если ИспользоватьНесколькоВалют Тогда
		КомандаВалюты.Заголовок = НСтр("ru='Валюты';uk='Валюти'");
	Иначе
		КомандаВалюты.Заголовок = НСтр("ru='Валюта';uk='Валюта'");
	КонецЕсли;
	
	Если НЕ ИспользоватьРозничныеПродажи Тогда
		Элементы.ДенежныеСредстваКассыККМ.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		Элементы.ТоварыСоглашенияСКлиентами.Видимость = Ложь;
		Элементы.ТоварыПереданныеНаКомиссиюСоглашенияСКлиентами.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		КомандаСклады.Заголовок = НСтр("ru='Склад';uk='Склад'");
	Иначе
		КомандаСклады.Заголовок = НСтр("ru='Склады';uk='Склади'");
	КонецЕсли;
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		КомандаПартнеры.Заголовок = НСтр("ru='Контрагенты';uk='Контрагенти'");
	КонецЕсли;
	

	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
    
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Отчеты.УправленческийБаланс) Тогда
		Элементы.ОткрытьОтчетКонтрольБалансаВводаОстатков.Видимость = Ложь;
	КонецЕсли;

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ТекущийРаздел = Элементы.ДеревоОпераций.ТекущиеДанные.Раздел;
	ТекущаяОперация = Элементы.ДеревоОпераций.ТекущиеДанные.ОперацияВводаОстатков;
	ОтборОрганизацияПриИзмененииСервер();
	РазвернутьДеревоОпераций();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуСпискаВалют(Команда)
	
	Если ИспользоватьНесколькоВалют Тогда
		
		Форма = ПолучитьФорму("Справочник.Валюты.Форма.ФормаСписка", , ,"ВводОстатков");
		Форма.Открыть();
		
	Иначе
		
		ОткрытьФорму("Справочник.Валюты.ФормаОбъекта",
			Новый Структура("Ключ",ЕдинственнаяВалюта),
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаБанковскиеСчета(Команда)
	
	Если ИспользоватьНесколькоРасчетныхСчетов Тогда
		
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Владелец", ОтборОрганизация);
			ПараметрыФормы.Вставить("Отбор", Отбор);
		КонецЕсли;

		Форма = ПолучитьФорму("Справочник.БанковскиеСчетаОрганизаций.Форма.ФормаСписка", ПараметрыФормы, ,"ВводОстатков");
		Форма.Открыть();
		
	Иначе
		
		ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.ФормаОбъекта",
			Новый Структура("Ключ",ЕдинственныйРасчетныйСчет),
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаКассы(Команда)
	
	Если ИспользоватьНесколькоКасс Тогда
		
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Владелец", ОтборОрганизация);
			ПараметрыФормы.Вставить("Отбор", Отбор);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Кассы.Форма.ФормаСписка", ПараметрыФормы, , "ВводОстатков");
		
	Иначе
		
		ОткрытьФорму("Справочник.Кассы.ФормаОбъекта",
			Новый Структура("Ключ",ЕдинственнаяКасса),
			ЭтаФорма);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаКассыККМ(Команда)

	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ОтборОрганизация);
		ПараметрыФормы.Вставить("Отбор", Отбор);
	КонецЕсли;

	ОткрытьФорму("Справочник.КассыККМ.Форма.ФормаСписка", ПараметрыФормы, ,"ВводОстатков");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаПартнеры(Команда)
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСписка", , ,"ВводОстатков");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаПодразделения(Команда)

	ОткрытьФорму("Справочник.СтруктураПредприятия.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаФизическиеЛица(Команда)

	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаСоглашенияСКлиентами(Команда)

	ОткрытьФорму("Справочник.СоглашенияСКлиентами.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаСоглашенияСПоставщиками(Команда)

	ОткрытьФорму("Справочник.СоглашенияСПоставщиками.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаСклады(Команда)

	Если ИспользоватьНесколькоСкладов Тогда
		ОткрытьФорму("Справочник.Склады.Форма.ФормаСписка", , ,"ВводОстатков");
	Иначе
		ОткрытьФорму("Справочник.Склады.ФормаОбъекта", Новый Структура("Ключ", СкладПоУмолчанию()));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаНоменклатура(Команда)

	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаЭквайринговыеТерминалы(Команда)

	ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСкладскиеЯчейки(Команда)

	ОткрытьФорму("Справочник.СкладскиеЯчейки.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаСтатьиАктивовПассивов(Команда)

	ОткрытьФорму("ПланВидовХарактеристик.СтатьиАктивовПассивов.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаСтатьиРасходов(Команда)

	ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаСтатьиДоходов(Команда)

	ОткрытьФорму("ПланВидовХарактеристик.СтатьиДоходов.Форма.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаНаправленияДеятельности(Команда)

	ОткрытьФорму("Справочник.НаправленияДеятельности.ФормаСписка", , ,"ВводОстатков");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКонтрольБалансаВводаОстатков(Команда)
	ПараметрыФормы = Новый Структура("КлючВарианта, СформироватьПриОткрытии", 
		"КонтрольВводаОстатковКонтекст", 
		Истина);
	ОткрытьФорму("Отчет.УправленческийБаланс.Форма", ПараметрыФормы, , "ВводОстатков");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаВидыПодарочныхСертификатов(Команда)
	
	ОткрытьФорму("Справочник.ВидыПодарочныхСертификатов.Форма.ФормаСписка", , ,"ВводОстатков");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаКартыЛояльности(Команда)
	
	ОткрытьФорму("Справочник.КартыЛояльности.Форма.ФормаСписка", , ,"ВводОстатков");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВидыКартЛояльности(Команда)
	
	ОткрытьФорму("Справочник.ВидыКартЛояльности.Форма.ФормаСписка", , ,"ВводОстатков");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.Раздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(НСтр("ru='Подотчетные лица';uk='Підзвітні особи'"));
	СписокЗначений.Добавить(НСтр("ru='Товары';uk='Товари'"));
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.ОперацияВводаОстатков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОрганизацияПолучатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.Раздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Расчеты между организациями';uk='Розрахунки між організаціями'");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.ОперацияВводаОстатков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Партнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.Раздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Товары';uk='Товари'");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.ОперацияВводаОстатков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Склад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.Раздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Товары';uk='Товари'");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.ОперацияВводаОстатков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОрганизацияПродавец.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.Раздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Расчеты между организациями';uk='Розрахунки між організаціями'");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.ОперацияВводаОстатков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Организация.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.ОперацияВводаОстатков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОпераций.Раздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='Расчеты между организациями';uk='Розрахунки між організаціями'");

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");


КонецПроцедуры

&НаСервере
Процедура ОтборОрганизацияПриИзмененииСервер()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОтборОрганизация = Справочники.Организации.ПустаяСсылка();
		Элементы.ОтборОрганизация.Видимость = Ложь;
	КонецЕсли;
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Организация", ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	ОбновитьСтатусыТиповОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоОпераций()
	
	АктивнаяСтрока = Неопределено;
	КоллекцияЭлементовДерева=ДеревоОпераций.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Если Строка.Раздел = ТекущийРаздел И Строка.ОперацияВводаОстатков = ТекущаяОперация Тогда
			АктивнаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		Элементы.ДеревоОпераций.Развернуть(ИдентификаторСтроки, Истина);
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Для Каждого Элемент Из ПодчиненныеСтроки Цикл
			ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
			Если Элемент.Раздел = ТекущийРаздел И Элемент.ОперацияВводаОстатков = ТекущаяОперация Тогда
				АктивнаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если АктивнаяСтрока <> Неопределено Тогда
		Элементы.ДеревоОпераций.ТекущаяСтрока = АктивнаяСтрока;
	Иначе
		Элементы.ДеревоОпераций.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = НСтр("ru='Запись_ВводОстатков';uk='Запись_ВводОстатков'") Тогда
		Если Параметр.Свойство("ТипОперации") Тогда
			ОбновитьСтатусыТиповОпераций(Параметр.ТипОперации);
		Иначе
			ОбновитьСтатусыТиповОпераций();
		КонецЕсли;
		Элементы.Список.ТекущаяСтрока = Источник;
	КонецЕсли;
	РазвернутьДеревоОпераций();
	
КонецПроцедуры

&НаСервере
Функция СоответствиеТиповОпераций()
	
	СоответствиеТиповОперацийВводаОстатков = Новый Соответствие;
	
	ТипыОперацийДенежныеСредства = Новый СписокЗначений;
	ТипыОперацийДенежныеСредства.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиВКассах);
	ТипыОперацийДенежныеСредства.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах);
	ТипыОперацийДенежныеСредства.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке);
	ТипыОперацийДенежныеСредства.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах);
	ТипыОперацийДенежныеСредства.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов);
	
	ТипыОперацийПодотчетныеЛица = Новый СписокЗначений;
	ТипыОперацийПодотчетныеЛица.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников);
	ТипыОперацийПодотчетныеЛица.Добавить(Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств);
	
	ТипыОперацийРасчетыСПартнерами = Новый СписокЗначений;
	ТипыОперацийРасчетыСПартнерами.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов);
	ТипыОперацийРасчетыСПартнерами.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов);
	ТипыОперацийРасчетыСПартнерами.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками);
	ТипыОперацийРасчетыСПартнерами.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам);
	
	ТипыОперацийТовары = Новый СписокЗначений;
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений);
	
	ТипыОперацийРасчетыМеждуОрганизациями = Новый СписокЗначений;
	ТипыОперацийРасчетыМеждуОрганизациями.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям);
	ТипыОперацийРасчетыМеждуОрганизациями.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам);
	
	ТипыОперацийЭкваринг = Новый СписокЗначений;
	ТипыОперацийЭкваринг.Добавить(Перечисления.ТипыОперацийВводаОстатков.СторноОтчетовПоЭквайрингу);
	
	ТипыОперацийТМЦ = Новый СписокЗначений;
	ТипыОперацийТМЦ.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации);
	
	ТипыОперацийПрочее = Новый СписокЗначений;
	ТипыОперацийПрочее.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихАктивовПассивов);
	ТипыОперацийПрочее.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов);
	ТипыОперацийПрочее.Добавить(Перечисления.ТипыОперацийВводаОстатков.ПодарочныеСертификаты);
	ТипыОперацийПрочее.Добавить(Перечисления.ТипыОперацийВводаОстатков.ФинансовыйРезультатЗаПрошлыеПериоды);
	ТипыОперацийПрочее.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды);
	ТипыОперацийПрочее.Добавить(Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды);
	
	СоответствиеТиповОперацийВводаОстатков.Вставить(НСтр("ru='Денежные средства';uk='Грошові кошти'"), ТипыОперацийДенежныеСредства);
	СоответствиеТиповОперацийВводаОстатков.Вставить(НСтр("ru='Подотчетные лица';uk='Підзвітні особи'"), ТипыОперацийПодотчетныеЛица);
	СоответствиеТиповОперацийВводаОстатков.Вставить(НСтр("ru='Расчеты с партнерами';uk='Розрахунки з партнерами'"), ТипыОперацийРасчетыСПартнерами);
	СоответствиеТиповОперацийВводаОстатков.Вставить(НСтр("ru='Товары';uk='Товари'"), ТипыОперацийТовары);
	СоответствиеТиповОперацийВводаОстатков.Вставить(НСтр("ru='Расчеты между организациями';uk='Розрахунки між організаціями'"), ТипыОперацийРасчетыМеждуОрганизациями);
	СоответствиеТиповОперацийВводаОстатков.Вставить(НСтр("ru='Эквайринговые операции';uk='Еквайрингові операції'"), ТипыОперацийЭкваринг);
	СоответствиеТиповОперацийВводаОстатков.Вставить(НСтр("ru='ТМЦ в эксплуатации';uk='ТМЦ в експлуатації'"), ТипыОперацийТМЦ);
	СоответствиеТиповОперацийВводаОстатков.Вставить(НСтр("ru='Прочее';uk='Інше'"), ТипыОперацийПрочее);
	
	Возврат СоответствиеТиповОперацийВводаОстатков;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыТиповОпераций(ТипОперации = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВводОстатков.Ссылка
		|ИЗ
		|	Документ.ВводОстатков КАК ВводОстатков
		|ГДЕ
		|	(ВводОстатков.Организация = &Организация ИЛИ &ПоВсемОрг)
		|	И
		|	ВводОстатков.ТипОперации В (&СписокДоступныхТиповОпераций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ВводОстатков.Ссылка) КАК КоличДокументов,
		|	ВводОстатков.ТипОперации КАК ТипОперации
		|ПОМЕСТИТЬ ВТДокументыВводаОстатков
		|ИЗ
		|	Документ.ВводОстатков КАК ВводОстатков
		|ГДЕ
		|	(ВводОстатков.ТипОперации = &ТипОперации ИЛИ &ПоВсемТипам)
		|	 И
		|	(ВводОстатков.Организация = &Организация ИЛИ &ПоВсемОрг)
		|СГРУППИРОВАТЬ ПО
		|	ВводОстатков.ТипОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеречислениеТипыОперацийВводаОстатков.Ссылка КАК ОперацияВводаОстатков,
		|	ЕСТЬNULL(ВТДокументыВводаОстатков.КоличДокументов, 0) КАК Количество,
		|	ВЫБОР
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийДенежныеСредства)
		|			ТОГДА &РазделДенежныеСредства
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийПодотчетныеЛица)
		|			ТОГДА &РазделПодотчетныеЛица
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийРасчетыСПартнерами)
		|			ТОГДА &РазделРасчетыСПартнерами
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийТовары)
		|			ТОГДА &РазделТовары
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийРасчетыМеждуОрганизациями)
		|			ТОГДА &РазделРасчетыМеждуОрганизациями
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийЭкваринг)
		|			ТОГДА &РазделЭквайринговыеОперации
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийТМЦ)
		|			ТОГДА &РазделТМЦ
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийПрочее)
		|			ТОГДА &РазделПрочее
		|	КОНЕЦ КАК Раздел
		|ИЗ
		|	Перечисление.ТипыОперацийВводаОстатков КАК ПеречислениеТипыОперацийВводаОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыВводаОстатков КАК ВТДокументыВводаОстатков
		|		ПО ПеречислениеТипыОперацийВводаОстатков.Ссылка = ВТДокументыВводаОстатков.ТипОперации
		|ГДЕ
		|	ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&СписокДоступныхТиповОпераций)
		|ИТОГИ ПО
		|	Раздел";
	ТипыОпераций = СоответствиеТиповОпераций();
	Запрос.УстановитьПараметр("ТипыОперацийДенежныеСредства", ТипыОпераций[НСтр("ru='Денежные средства';uk='Грошові кошти'")]);
	Запрос.УстановитьПараметр("ТипыОперацийПодотчетныеЛица", ТипыОпераций[НСтр("ru='Подотчетные лица';uk='Підзвітні особи'")]);
	Запрос.УстановитьПараметр("ТипыОперацийРасчетыСПартнерами", ТипыОпераций[НСтр("ru='Расчеты с партнерами';uk='Розрахунки з партнерами'")]);
	Запрос.УстановитьПараметр("ТипыОперацийТовары", ТипыОпераций[НСтр("ru='Товары';uk='Товари'")]);
	Запрос.УстановитьПараметр("ТипыОперацийРасчетыМеждуОрганизациями", ТипыОпераций[НСтр("ru='Расчеты между организациями';uk='Розрахунки між організаціями'")]);
	Запрос.УстановитьПараметр("ТипыОперацийЭкваринг", ТипыОпераций[НСтр("ru='Эквайринговые операции';uk='Еквайрингові операції'")]);
	Запрос.УстановитьПараметр("ТипыОперацийТМЦ", ТипыОпераций[НСтр("ru='ТМЦ в эксплуатации';uk='ТМЦ в експлуатації'")]);
	Запрос.УстановитьПараметр("ТипыОперацийПрочее", ТипыОпераций[НСтр("ru='Прочее';uk='Інше'")]);
	Запрос.УстановитьПараметр("РазделДенежныеСредства", НСтр("ru='Денежные средства';uk='Грошові кошти'"));
	Запрос.УстановитьПараметр("РазделПодотчетныеЛица", НСтр("ru='Подотчетные лица';uk='Підзвітні особи'"));
	Запрос.УстановитьПараметр("РазделРасчетыСПартнерами", НСтр("ru='Расчеты с партнерами';uk='Розрахунки з партнерами'"));
	Запрос.УстановитьПараметр("РазделТовары", НСтр("ru='Товары';uk='Товари'"));
	Запрос.УстановитьПараметр("РазделРасчетыМеждуОрганизациями", НСтр("ru='Расчеты между организациями';uk='Розрахунки між організаціями'"));
	Запрос.УстановитьПараметр("РазделЭквайринговыеОперации", НСтр("ru='Эквайринговые операции';uk='Еквайрингові операції'"));
	Запрос.УстановитьПараметр("РазделТМЦ", НСтр("ru='ТМЦ в эксплуатации';uk='ТМЦ в експлуатації'"));
	Запрос.УстановитьПараметр("РазделПрочее", НСтр("ru='Прочее';uk='Інше'"));
	
	Если ТипОперации = Неопределено Тогда 
		Запрос.УстановитьПараметр("ТипОперации",Неопределено);
		Запрос.УстановитьПараметр("ПоВсемТипам",Истина);
	Иначе
		Запрос.УстановитьПараметр("ТипОперации",ТипОперации);
		Запрос.УстановитьПараметр("ПоВсемТипам",Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда 
		Запрос.УстановитьПараметр("Организация",ОтборОрганизация);
		Запрос.УстановитьПараметр("ПоВсемОрг",Ложь);
	Иначе
		Запрос.УстановитьПараметр("Организация",Неопределено);
		Запрос.УстановитьПараметр("ПоВсемОрг",Истина);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокДоступныхТиповОпераций",СписокДоступныхТиповОпераций);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВсегоДокументов = РезультатЗапроса[0].Выгрузить().Количество();
	
	Если ТипОперации = Неопределено Тогда
		
		Дерево = ДеревоОпераций;
		Дерево.ПолучитьЭлементы().Очистить();
		ВыборкаРазделы = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СтрокаВсего = Дерево.ПолучитьЭлементы().Добавить();
		СтрокаВсего.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ПустаяСсылка();
		СтрокаВсего.Количество = ВсегоДокументов;
		ПредставлениеОперации = НСтр("ru='Все документы (%ВсегоДокументов%)';uk='Всі документи (%ВсегоДокументов%)'");
		ПредставлениеОперации = СтрЗаменить(ПредставлениеОперации, "%ВсегоДокументов%", ВсегоДокументов);
		СтрокаВсего.ПредставлениеОперации = ПредставлениеОперации;
		СтрокаВсего.СтатусОперации = 2;
		
		Пока ВыборкаРазделы.Следующий() Цикл
			СтрокаГруппы = Дерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГруппы, ВыборкаРазделы);
			СтрокаГруппы.СтатусОперации = 2;
			ВыборкаДетальныеЗаписи = ВыборкаРазделы.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаОперация = СтрокаГруппы.ПолучитьЭлементы().Добавить();
				СтрокаОперация.ОперацияВводаОстатков = ВыборкаДетальныеЗаписи.ОперацияВводаОстатков;
				СтрокаОперация.Количество = ВыборкаДетальныеЗаписи.Количество;
				СтрокаОперация.ПредставлениеОперации = Строка(ВыборкаДетальныеЗаписи.ОперацияВводаОстатков);
				СтрокаОперация.СтатусОперации = 1;
				Если ВыборкаДетальныеЗаписи.Количество > 0 Тогда
					СтрокаОперация.ПредставлениеОперации = СтрокаОперация.ПредставлениеОперации + " ("+ВыборкаДетальныеЗаписи.Количество+")";
					СтрокаОперация.СтатусОперации = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе

		Дерево = РеквизитФормыВЗначение("ДеревоОпераций");
		ВыборкаРазделы = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРазделы.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаРазделы.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = ТипОперации Тогда
					СтрокаОперация = Дерево.Строки.Найти(ВыборкаДетальныеЗаписи.ОперацияВводаОстатков,"ОперацияВводаОстатков", Истина);
					Если СтрокаОперация <> Неопределено Тогда
						СтрокаОперация.Количество = ВыборкаДетальныеЗаписи.Количество;
						СтрокаОперация.ПредставлениеОперации = ВыборкаДетальныеЗаписи.ОперацияВводаОстатков;
						СтрокаОперация.СтатусОперации = 1;
						Если ВыборкаДетальныеЗаписи.Количество > 0 Тогда
							СтрокаОперация.ПредставлениеОперации = СтрокаОперация.ПредставлениеОперации + " ("+ВыборкаДетальныеЗаписи.Количество+")";
							СтрокаОперация.СтатусОперации = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Раздел", "");
		ПараметрыОтбора.Вставить("ОперацияВводаОстатков", Перечисления.ТипыОперацийВводаОстатков.ПустаяСсылка());
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки[0] <> Неопределено Тогда
			СтрокаВсего = НайденныеСтроки[0];
			СтрокаВсего.Количество = ВсегоДокументов;
			ПредставлениеОперации = НСтр("ru='Все документы (%ВсегоДокументов%)';uk='Всі документи (%ВсегоДокументов%)'");
			ПредставлениеОперации = СтрЗаменить(ПредставлениеОперации, "%ВсегоДокументов%", ВсегоДокументов);
			СтрокаВсего.ПредставлениеОперации = ПредставлениеОперации;
		КонецЕсли;

		ЗначениеВРеквизитФормы(Дерево, "ДеревоОпераций");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперацийПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОперацияВводаОстатков) Тогда
		ОтборПоТипамОпераций.Очистить();
		ОтборПоТипамОпераций.Добавить(Элемент.ТекущиеДанные.ОперацияВводаОстатков);
		ИзменитьЭлементОтбораГруппы();
	Иначе
		Если Элемент.ТекущиеДанные.Раздел = "" Тогда
			ОтборПоТипамОпераций.Очистить();
			ОтборПоТипамОпераций.ЗагрузитьЗначения(СписокДоступныхТиповОпераций.ВыгрузитьЗначения());
			ИзменитьЭлементОтбораГруппы();
		Иначе	
			УстановитьОтборПоТипамОперацийРаздела(Элемент.ТекущиеДанные.Раздел);
			ИзменитьЭлементОтбораГруппы();
		КонецЕсли;
	КонецЕсли;
	ТекущийРаздел = Элементы.ДеревоОпераций.ТекущиеДанные.Раздел;
	ТекущаяОперация = Элементы.ДеревоОпераций.ТекущиеДанные.ОперацияВводаОстатков;
	УстановитьТекстПоясненияИДополнительныеСсылки();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭлементОтбораГруппы()
	
	ГруппаЭлементовОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы, "ТипОперации", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(ГруппаЭлементовОтбора, "ТипОперации", ОтборПоТипамОпераций , Истина, ВидСравненияКомпоновкиДанных.ВСписке)
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстПоясненияИДополнительныеСсылки()
	
	УстановитьТекстПояснения(Элементы.ДеревоОпераций.ТекущиеДанные.Раздел, Элементы.ДеревоОпераций.ТекущиеДанные.ОперацияВводаОстатков);
	ВидимаяСтраница = ОпределитьВидимуюСтраницуСсылок(Элементы.ДеревоОпераций.ТекущиеДанные.Раздел, Элементы.ДеревоОпераций.ТекущиеДанные.ОперацияВводаОстатков);
	Элементы.ГруппаШапка.ТекущаяСтраница = Элементы[ВидимаяСтраница];
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстПояснения(Раздел, Операция)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Раздел", Раздел);
	Отбор.Вставить("ОперацияВводаОстатков", Операция);
	
	МассивСтрок = ТЗТекстПояснений.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество()>0 Тогда
		ТекущийТекстПояснения = МассивСтрок[0].Пояснение;
	Иначе
		ТекущийТекстПояснения = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуПоясненийКОперациям()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ПеречислениеТипыОперацийВводаОстатков.Ссылка КАК ОперацияВводаОстатков,
		|	ВЫБОР
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВКассах),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов))
		|			ТОГДА &ЗаголовокДС
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств))
		|			ТОГДА &ЗаголовокПодотчетники
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам))
		|			ТОГДА &ЗаголовокПартнеры
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений))
		|			ТОГДА &ЗаголовокТовары
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам))
		|			ТОГДА &ЗаголовокИнтеркампани
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.СторноОтчетовПоЭквайрингу)
		|			ТОГДА &ЗаголовокЭквайринг
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации))
		|			ТОГДА &ЗаголовокТМЦВЭксплуатации
		|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПрочихАктивовПассивов),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ФинансовыйРезультатЗаПрошлыеПериоды),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ПодарочныеСертификаты))
		|			ТОГДА &ЗаголовокПрочее
		|	КОНЕЦ КАК Раздел
		|ИЗ
		|	Перечисление.ТипыОперацийВводаОстатков КАК ПеречислениеТипыОперацийВводаОстатков
		|
		|ИТОГИ ПО Раздел";
		
	ЗаголовокДС = НСтр("ru='Денежные средства';uk='Грошові кошти'");
	ЗаголовокПодотчетники = НСтр("ru='Подотчетные лица';uk='Підзвітні особи'");
	ЗаголовокПартнеры = НСтр("ru='Расчеты с партнерами';uk='Розрахунки з партнерами'");
	ЗаголовокТовары = НСтр("ru='Товары';uk='Товари'");
	ЗаголовокИнтеркампани = НСтр("ru='Расчеты между организациями';uk='Розрахунки між організаціями'");
	ЗаголовокЭквайринг = НСтр("ru='Эквайринговые операции';uk='Еквайрингові операції'");
	ЗаголовокТМЦВЭксплуатации = НСтр("ru='ТМЦ в эксплуатации';uk='ТМЦ в експлуатації'");
	ЗаголовокПрочее = НСтр("ru='Прочее';uk='Інше'");
	
	Запрос.УстановитьПараметр("ЗаголовокДС", ЗаголовокДС);
	Запрос.УстановитьПараметр("ЗаголовокПодотчетники", ЗаголовокПодотчетники);
	Запрос.УстановитьПараметр("ЗаголовокПартнеры", ЗаголовокПартнеры);
	Запрос.УстановитьПараметр("ЗаголовокТовары", ЗаголовокТовары);
	Запрос.УстановитьПараметр("ЗаголовокИнтеркампани", ЗаголовокИнтеркампани);
	Запрос.УстановитьПараметр("ЗаголовокЭквайринг", ЗаголовокЭквайринг);
	Запрос.УстановитьПараметр("ЗаголовокТМЦВЭксплуатации", ЗаголовокТМЦВЭксплуатации);
	Запрос.УстановитьПараметр("ЗаголовокПрочее", ЗаголовокПрочее);

	НоваяСтрока = ТЗТекстПояснений.Добавить();
	НоваяСтрока.Раздел = "";
	НоваяСтрока.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ПустаяСсылка();
	НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки по всем типам операций';uk='Вводяться залишки за всіма типами операцій'");
	
	ВыборкаРазделы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаРазделы.Следующий() Цикл
		НоваяСтрока = ТЗТекстПояснений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаРазделы);
		Если ВыборкаРазделы.Раздел = ЗаголовокДС Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки наличных и безналичных денежных средств организаций';uk='Вводяться залишки готівкових і безготівкових коштів організацій'")
		ИначеЕсли ВыборкаРазделы.Раздел = ЗаголовокПодотчетники Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки взаиморасчетов организаций с подотчетными лицами';uk='Вводяться залишки взаєморозрахунків організацій з підзвітними особами'")
		ИначеЕсли ВыборкаРазделы.Раздел = ЗаголовокПартнеры Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки взаиморасчетов между организациями и партнерами компании (клиентами и поставщиками)';uk='Вводяться залишки взаєморозрахунків між організаціями та партнерами компанії (клієнтами і постачальниками)'")
		ИначеЕсли ВыборкаРазделы.Раздел = ЗаголовокИнтеркампани Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки взаиморасчетов между собственными организациями';uk='Вводяться залишки взаєморозрахунків між власними організаціями'")
		ИначеЕсли ВыборкаРазделы.Раздел = ЗаголовокТовары Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки товаров организаций';uk='Вводяться залишки товарів організацій'")
		ИначеЕсли ВыборкаРазделы.Раздел = ЗаголовокЭквайринг Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки задолженности банков по эквайринговым операциям, проведенным до начала ведения учета';uk='Вводяться залишки заборгованості банків за еквайринговою операціями, проведеними до початку ведення обліку'")
		ИначеЕсли ВыборкаРазделы.Раздел = ЗаголовокТМЦВЭксплуатации Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки позиций номенклатуры переданных в эксплуатацию';uk='Вводяться залишки позицій номенклатури переданих в експлуатацію'")
		ИначеЕсли ВыборкаРазделы.Раздел = ЗаголовокПрочее Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки по прочим операциям';uk='Вводяться залишки за іншими операціями'")
		КонецЕсли;
		ВыборкаДетальныеЗаписи = ВыборкаРазделы.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ТЗТекстПояснений.Добавить();
			НоваяСтрока.ОперацияВводаОстатков = ВыборкаДетальныеЗаписи.ОперацияВводаОстатков;
			Если ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки задолженности автономных касс ККМ по оформлению отчетов о розничных продажах';uk='Вводяться залишки заборгованості автономних кас ККМ з оформлення звітів про роздрібні продажі'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки наличных денежных средств, находящихся в автономных кассах ККМ';uk='Вводяться залишки готівки, що знаходяться в автономних касах ККМ'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВКассах Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки наличных денежных средств, находящихся в кассах организаций';uk='Вводяться залишки готівки в касах організацій'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки безналичных денежных средств, находящихся на банковских счетах организаций';uk='Вводяться залишки безготівкових коштів, що знаходяться на банківських рахунках організацій'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки дебиторской задолженности клиентов перед организациями';uk='Вводяться залишки дебіторської заборгованості клієнтів перед організаціями'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки авансов, полученных от клиентов';uk='Вводяться залишки авансів, отриманих від клієнтів'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки кредиторской задолженности организаций перед поставщиками';uk='Вводяться залишки кредиторської заборгованості організацій перед постачальниками'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки авансов, выданных поставщикам';uk='Вводяться залишки авансів, виданих постачальникам'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки задолженности подотчетных лиц по выданным денежным средствам';uk='Вводяться залишки заборгованості підзвітних осіб за виданими грошовими коштами'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки перерасходов денежных средств по оформленным авансовым отчетам';uk='Вводяться залишки перевитрат коштів за оформленими авансовими звітами'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки расчетов между организациями по выданным авансам';uk='Вводяться залишки розрахунків між організаціями за виданими авансами'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки расчетов между организациями по реализованным товарам и оказанным услугам';uk='Вводяться залишки розрахунків між організаціями за реалізованими товарами і наданими послугами'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки собственных товаров организаций на обычных (не адресных) складах';uk='Вводяться залишки власних товарів організацій на звичайних (не адресних) складах'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки собственных товаров организаций на адресных складах';uk='Вводяться залишки власних товарів організацій на адресних складах'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки собственных товаров организаций, переданные на комиссию';uk='Вводяться залишки власних товарів організацій, передані на комісію'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки товаров, принятых на комиссию на обычных (не адресных) складах';uk='Вводяться залишки товарів, прийнятих на комісію на звичайних (не адресних) складах'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки товаров, принятых на комиссию на адресных складах';uk='Вводяться залишки товарів, прийнятих на комісію на адресних складах'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.СторноОтчетовПоЭквайрингу Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки задолженности банков по эквайринговым операциям, проведенным до начала ведения учета';uk='Вводяться залишки заборгованості банків за еквайринговою операціями, проведеними до початку ведення обліку'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки возвратной тары, переданной клиентам';uk='Вводяться залишки зворотної тари, переданої клієнтам'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки возвратной тары, принятой от поставщиков';uk='Вводяться залишки зворотної тари, прийнятої від постачальників'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки возвратной тары, принятой от поставщиков на адресных складах';uk='Вводяться залишки зворотної тари, прийнятої від постачальників на адресних складах'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихАктивовПассивов Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки прочих активов и пассивов';uk='Вводяться залишки інших активів і пасивів'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков Тогда
				НоваяСтрока.Пояснение = НСтр("ru='По данным складского учета заполняются остатки товаров в ячейках';uk='За даними складського обліку заповнюються залишки товарів у комірках'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Остатки товаров разделяются по складским помещениям';uk='Залишки товарів поділяються за складськими приміщеннями'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ПодарочныеСертификаты Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки по подарочным сертификатам';uk='Вводяться залишки за подарунковим сертифікатам'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки по договорам кредитов, депозитов и выданных займов';uk='Вводяться залишки за договорами кредитів, депозитів і виданих позик'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки позиций номенклатуры переданных в эксплуатацию';uk='Вводяться залишки позицій номенклатури переданих в експлуатацію'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки позиций номенклатуры переданных переработчику';uk='Вводяться залишки позицій номенклатури переданих переробнику'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки позиций номенклатуры переданных в производство';uk='Вводяться залишки позицій номенклатури переданих у виробництво'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки прочих расходов';uk='Вводяться залишки інших витрат'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ФинансовыйРезультатЗаПрошлыеПериоды Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся данные о финансовом результате за прошлые периоды';uk='Вводяться дані про фінансовий результат за минулі періоди'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся данные об оптовых продажах за прошлые периоды';uk='Вводяться дані про гуртові продажі за минулі періоди'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся данные о розничных продажах за прошлые периоды';uk='Вводяться дані про роздрібні продажі за минулі періоди'")
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьВидимуюСтраницуСсылок(Раздел = Неопределено, Операция = Неопределено)

	Если Раздел = НСтр("ru='Денежные средства';uk='Грошові кошти'") Тогда
			Возврат "ГруппаДенежныеСредства";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиВКассах") Тогда
			Возврат "ГруппаКассы";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах") 
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке") Тогда
			Возврат "ГруппаКассыККМ";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах") Тогда
			Возврат "ГруппаБанковскиеСчета";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов") Тогда
			Возврат "ГруппаДоговорыКредитовДепозитов";
	ИначеЕсли Раздел = НСтр("ru='Расчеты с партнерами';uk='Розрахунки з партнерами'")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам") Тогда
			Возврат "ГруппаРасчетыСКлиентами";
	ИначеЕсли Раздел = НСтр("ru='Подотчетные лица';uk='Підзвітні особи'")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств") Тогда
			Возврат "ГруппаПодотчетныеЛица";
	ИначеЕсли Раздел = НСтр("ru='Расчеты между организациями';uk='Розрахунки між організаціями'")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям") Тогда
			Возврат "ГруппаРасчетыМеждуОрганизациями";
	ИначеЕсли Раздел = НСтр("ru='Товары';uk='Товари'") Тогда
			Возврат "ГруппаТовары";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе") Тогда
			Возврат "ГруппаСобственныеТовары";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию") Тогда
			Возврат "ГруппаТоварыПереданныеНаКомиссию";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе") Тогда
			Возврат "ГруппаТоварыПолученныеНаКомиссию";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам") Тогда
			Возврат "ГруппаТоварыПереданныеПереработчикам";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство") Тогда
			Возврат "ГруппаТоварыПереданныеВПроизводство";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов") Тогда
			Возврат "ГруппаПрочиеРасходы";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ФинансовыйРезультатЗаПрошлыеПериоды") Тогда
			Возврат "ГруппаФинансовыйРезультат";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды") Тогда
			Возврат "ГруппаОптовыеПродажи";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды") Тогда
			Возврат "ГруппаРозничныеПродажи";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков")
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе") Тогда
			Возврат "ГруппаПринятаяТара";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам") Тогда
			Возврат "ГруппаПереданнаяТара";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ПодарочныеСертификаты") Тогда
			Возврат "ГруппаПодарочныеСертификаты";
	ИначеЕсли Раздел = НСтр("ru='Эквайринговые операции';uk='Еквайрингові операції'") 
		ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.СторноОтчетовПоЭквайрингу") Тогда
			Возврат "ГруппаЭквайринговыеОперации";
	ИначеЕсли Раздел = НСтр("ru='Прочее';uk='Інше'") Тогда
			Возврат "ГруппаПрочее";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПрочихАктивовПассивов") Тогда
			Возврат "ГруппаПрочиеАктивыПассивы";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков") Тогда
			Возврат "ГруппаПереходНаАдресноеХранение";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений") Тогда
			Возврат "ГруппаПереходНаПомещения";
	ИначеЕсли Раздел = НСтр("ru='ТМЦ в эксплуатации';uk='ТМЦ в експлуатації'") Тогда
			Возврат "ГруппаТМЦВЭксплуатации";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации") Тогда
			Возврат "ГруппаТМЦВЭксплуатации";
	Иначе
		Возврат "ГруппаВсе";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоТипамОперацийРаздела(ИмяРаздела)
	
	Дерево = РеквизитФормыВЗначение("ДеревоОпераций");
	ГруппаДерева = Дерево.Строки.Найти(ИмяРаздела, "Раздел");
	МассивТиповОпераций  = Новый Массив;
	Если ГруппаДерева <> Неопределено Тогда
		Для Каждого Строка Из ГруппаДерева.Строки Цикл
			МассивТиповОпераций.Добавить(Строка.ОперацияВводаОстатков);
		КонецЦикла;
	КонецЕсли;
	ОтборПоТипамОпераций.ЗагрузитьЗначения(МассивТиповОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ОтборОрганизация);
		ПараметрыФормы.Вставить("ОтборПоТипамОпераций", ОтборПоТипамОпераций);
		ОткрытьФорму("Документ.ВводОстатков.ФормаОбъекта", ПараметрыФормы,,);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперацийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СкладПоУмолчанию()
	
	Возврат Справочники.Склады.СкладПоУмолчанию();
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ МЕТОДЫ ДЛЯ РАБОТЫ С ОБМЕНОМ С МОБИЛЬНЫМ ПРИЛОЖЕНИЕМ "МОНИТОР ERP"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает результат форимирования данных обмена.
//
// Параметры:
//  ПереданныеПараметрыОбмена - структура переданных параметров обмена.
//
// Возвращаемое Значение:
//  ХранилищеЗначения - результат формирования пакета обмена.
//
Функция ПередаваемыеДанныеОбмена(ПереданныеПараметрыОбмена) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Если ЗначениеЗаполнено(ПереданныеПараметрыОбмена.АдресХранилища) Тогда
			Результат = ПодготовленныеДанные(ПереданныеПараметрыОбмена.АдресХранилища);
		Иначе
			Результат = ЗаполняемыеДанныеНаСервере(ПереданныеПараметрыОбмена);
		КонецЕсли;
		Если Результат = Неопределено Тогда
			Возврат Новый ХранилищеЗначения(ПереданныеПараметрыОбмена, Новый СжатиеДанных(9));
		Иначе
			ВыбФайл = Новый Файл(ПереданныеПараметрыОбмена.АдресХранилища);
			Если ВыбФайл.Существует() Тогда
				УдалитьФайлы(ПереданныеПараметрыОбмена.АдресХранилища);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	Иначе
		
		Задание = ЗаданиеПоИдентификатору(ПереданныеПараметрыОбмена.ИдентификаторЗадания);
		Если НЕ Задание = Неопределено Тогда
			Если ДлительныеОперации.ЗаданиеВыполнено(ПереданныеПараметрыОбмена.ИдентификаторЗадания) Тогда
				Результат = ПодготовленныеДанные(ПереданныеПараметрыОбмена.АдресХранилища);
				Если Результат = Неопределено Тогда
					Возврат Новый ХранилищеЗначения(ПереданныеПараметрыОбмена, Новый СжатиеДанных(9));
				Иначе
					ВыбФайл = Новый Файл(ПереданныеПараметрыОбмена.АдресХранилища);
					Если ВыбФайл.Существует() Тогда
						УдалитьФайлы(ПереданныеПараметрыОбмена.АдресХранилища);
					КонецЕсли;
					Возврат Результат;
				КонецЕсли;
			Иначе
				Возврат Новый ХранилищеЗначения(ПереданныеПараметрыОбмена, Новый СжатиеДанных(9));
			КонецЕсли;
		Иначе
			Результат = ЗаполняемыеДанныеНаСервере(ПереданныеПараметрыОбмена);
			Если Результат = Неопределено Тогда
				Возврат Новый ХранилищеЗначения(ПереданныеПараметрыОбмена, Новый СжатиеДанных(9));
			Иначе
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Вносит в информационную базу данные, которые присланы из узла "УзелОбмена".
//
// Параметры:
//  УзелОбмена	– ПланОбменаСсылка - узел плана обмена "мобильные", с которым осуществляется обмен;
//  ДанныеОбмена - ХранилищеЗначения-  пакет обмена полученный из узла УзелОбмена, помещен в ХранилищеЗначения.
//
// Возвращаемое Значение:
//  ХранилищеЗначения - результат приема пакета обмена.
//
Функция РезультатПриемаПакетаОбмена(УзелОбмена, ДанныеОбмена) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	ОтветноеСообщение = Новый Массив;
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
		Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Если ТипДанныхXML.ИмяТипа = "CatalogObject.Партнеры" Тогда
			ЗаписатьПартнера(Данные, ОтветноеСообщение);
		ИначеЕсли ТипДанныхXML.ИмяТипа = "CatalogObject.КонтактныеЛицаПартнеров" Тогда
			ЗаписатьКонтактноеЛицоПартнера(Данные, ОтветноеСообщение);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	Возврат Новый ХранилищеЗначения(ОтветноеСообщение, Новый СжатиеДанных(9));
КонецФункции

// Заменяет на основании анализа типа данных на данные,
// удаляющие информацию из узла в котором их не должно быть.
//
// Параметры:
//  Данные – Объект, набор записей, который нужно преобразовать.
//
Процедура УдалениеДанных(Данные) Экспорт
	
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	// Проверяем тип, интересуют только те типы, которые реализованы на мобильной платформе.
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		Или Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных.
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		Или Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные.
		Данные.Очистить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание;
КонецФункции

Процедура ЗаписатьКонтактноеЛицоПартнера(Данные, Сообщение)
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "CatalogObject.КонтактныеЛицаПартнеров");
	ТипОбъектаКИ = ФабрикаXDTO.Тип(URIИмен, "CatalogTabularSectionRow.КонтактныеЛицаПартнеров.КонтактнаяИнформация");
	МобильноеКонтактноеЛицо = МобильныйОбъектСКонтаткнойИнформацией(Данные, ТипОбъекта, ТипОбъектаКИ);
	
	МобильноеПриложениеМониторERPПереопределяемый.СоздатьОбновитьКонтактноеЛицоКлиента(МобильноеКонтактноеЛицо,
		Сообщение);
КонецПроцедуры

Процедура ЗаписатьПартнера(Данные, Сообщение)
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "CatalogObject.Партнеры");
	ТипОбъектаКИ = ФабрикаXDTO.Тип(URIИмен, "CatalogTabularSectionRow.Партнеры.КонтактнаяИнформация");
	МобильныйПартнер = МобильныйОбъектСКонтаткнойИнформацией(Данные, ТипОбъекта, ТипОбъектаКИ);
	
	МобильноеПриложениеМониторERPПереопределяемый.ОбновитьКлиента(МобильныйПартнер, Сообщение);
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение)
	
	Для Каждого Свойство Из Значение.Свойства() Цикл
		Если ТипЗнч(Значение[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			МобильныеДанные[СокрЛП(Свойство)] = СериализаторXDTO.ПрочитатьXDTO(Значение[СокрЛП(Свойство)]);
		Иначе
			МобильныеДанные[СокрЛП(Свойство)] = Значение[СокрЛП(Свойство)];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗаполняемыеДанныеНаСервере(ПараметрыОбменаСМонитором)
	
	АдресХранилища = ПолучитьИмяВременногоФайла("xml");
	
	// В файловом режиме работы выполняем операцию непосредственно (синхронно).
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ПодготовитьДанныеДляЗаполнения(ПараметрыОбменаСМонитором, АдресХранилища);
		
		ПараметрыОбменаСМонитором.АдресХранилища = АдресХранилища;
		
		Возврат ПодготовленныеДанные(АдресХранилища);
		
	КонецЕсли;
	
	// В клиент-серверном режиме работы выполняем операцию в фоновом задании (асинхронно).
	НаименованиеЗадания = НСтр("ru='Подготовка данных для обмена с ""Монитор ERP""';uk='Підготовка даних для обміну з ""Монітор ERP""'");
	
	ПараметрыЗаполнения = Новый Массив;
	ПараметрыЗаполнения.Добавить(ПараметрыОбменаСМонитором);
	ПараметрыЗаполнения.Добавить(АдресХранилища);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("МобильноеПриложениеМониторERPСервер.ПодготовитьДанныеДляЗаполнения",
										ПараметрыЗаполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		Возврат ПодготовленныеДанные(АдресХранилища);
	КонецЕсли;
	
	ПараметрыОбменаСМонитором.ИдентификаторЗадания = ИдентификаторЗадания;
	ПараметрыОбменаСМонитором.АдресХранилища = АдресХранилища;
	
	Возврат Неопределено;
КонецФункции

Функция КоличествоЗарегистрированныхОбъектов(УзелОбмена, ПараметрыОбмена)
	
	ТекстЗапроса = "";
	
	СоответствиеОбъектов = ПараметрыОбмена.ОбъектыОбмена;
	
	Для Каждого Эл Из СоответствиеОбъектов Цикл
		Если Эл.Значение Тогда
			ТекстЗапроса = "ОБЪЕДИНИТЬ ВСЕ
							|ВЫБРАТЬ
							|	Ссылка КАК ИзмСсылка
							|Из Справочник." + Эл.Ключ + ".Изменения
							|ГДЕ 
							|	Узел = &Узел";
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СокрЛП(Сред(ТекстЗапроса, 15));
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|Количество(ИзмСсылка) КАК КоличествоИзм
					|ИЗ ("+ТекстЗапроса+") КАК Изменения";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоИзм;
КонецФункции

Функция МассивИзменений(УзелОбмена, НомерСообщения, ФильтрИзменений)
	
	// Данные уже могут быть недоступны по правам
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИзменений = Новый Массив;
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, НомерСообщения, ФильтрИзменений);
	Пока ВыборкаИзменений.Следующий() Цикл
		МассивИзменений.Добавить(ВыборкаИзменений.Получить());
	КонецЦикла;
	
	Возврат МассивИзменений;
КонецФункции

Функция МобильныйОбъектСКонтаткнойИнформацией(Данные, ТипОбъекта, ТипОбъектаКИ)
	
	МобильныйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из Данные.Свойства() Цикл
		ЭтоТабличнаяЧасть = Ложь;
		Если ТипЗнч(Данные[СокрЛП(Свойство)]) = Тип("ОбъектXDTO") Тогда
			Если НЕ ЭтоТаблицаОбъекта(Данные[СокрЛП(Свойство)])
				И НЕ СокрЛП(Свойство) = "КонтактнаяИнформация" Тогда
				Значение = СериализаторXDTO.ПрочитатьXDTO(Данные[СокрЛП(Свойство)]);
			Иначе
				Значение = Данные[СокрЛП(Свойство)];
				ЭтоТабличнаяЧасть = Истина;
			КонецЕсли;
		Иначе
			Значение = Данные[СокрЛП(Свойство)];
		КонецЕсли;
		Если Не ЭтоТабличнаяЧасть Тогда
			УстанавливаемоеСвойсво = МобильныйОбъект.Свойства().Получить(СокрЛП(Свойство));
			Если НЕ УстанавливаемоеСвойсво = Неопределено Тогда
				МобильныйОбъект.Установить(УстанавливаемоеСвойсво, Значение);
			КонецЕсли;
		Иначе
			Если Значение.Свойства().Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Значение.Row) = Тип("СписокXDTO") Тогда
				Для Каждого ЭлементСписка Из Значение.Row Цикл
					МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
					ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, ЭлементСписка);
					МобильныйОбъект[СокрЛП(Свойство)].Добавить(МобильныеДанные);
				КонецЦикла;
			Иначе
				МобильныеДанные = ФабрикаXDTO.Создать(ТипОбъектаКИ);
				ЗаполнитьЗначенияСвойствОбъекта(МобильныеДанные, Значение.Row);
				МобильныйОбъект[СокрЛП(Свойство)].Добавить(МобильныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МобильныйОбъект;
КонецФункции

Функция ПакетДляОбмена(УзелОбмена, ПараметрыОбмена, ВремяНачалаРаботы)
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs",  "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ТипДанныхУдаления = Тип("УдалениеОбъекта");
	
	ФильтрИзменений = МобильноеПриложениеМониторERPПереопределяемый.ФильтрИзмененийПоПараметрам(ПараметрыОбмена);
	
	МассивИзменений = МассивИзменений(УзелОбмена, ЗаписьСообщения.НомерСообщения, ФильтрИзменений);
	
	Версия = "";
	ПараметрыОбмена.Свойство("Версия", Версия);
	
	ВыгружатьОсновныеСправочники = Ложь;
	Если ПараметрыОбмена.Свойство("ВыгружатьОсновныеСправочники") Тогда
		ВыгружатьОсновныеСправочники = ПараметрыОбмена.ВыгружатьОсновныеСправочники;
	Иначе
		Если НЕ ФильтрИзменений.Найти(Метаданные.Справочники.Партнеры) = Неопределено Тогда
			ВыгружатьОсновныеСправочники = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыгружатьКонтактныеТелефоны = Истина;
	Если Не ЗначениеЗаполнено(Версия) Тогда
		МакетПравилОбмена = ПланыОбмена.МобильноеПриложениеМониторERP.ПолучитьМакет("МобильноеПриложение");
	Иначе
		МакетПравилОбмена = ПланыОбмена.МобильноеПриложениеМониторERP.ПолучитьМакет("МобильноеПриложение1_0_3");
		ВыгружатьКонтактныеТелефоны = Ложь;
	КонецЕсли;
	
	ИмяВременногоФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xsd");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Фабрика = СоздатьФабрикуXDTO(ИмяВременногоФайлаПравилОбмена);
	
	КоличествоОбъектовКОбмену	= КоличествоЗарегистрированныхОбъектов(УзелОбмена, ПараметрыОбмена);
	КоличествоСекунд			= ПараметрыОбмена.КоличествоСекунд;
	КолОбъектов					= 0;
	ОбщееВремя					= ВремяНачалаРаботы;
	
	Если НЕ ВыгружатьКонтактныеТелефоны 
		И ВыгружатьОсновныеСправочники Тогда
		МобильноеПриложениеМониторERPПереопределяемый.ВыгрузитьОсновныеСправочники(Фабрика, ЗаписьXML);
	КонецЕсли;
	
	Для Каждого Данные Из МассивИзменений Цикл
		
		ВремяНачала = ТекущаяДата();
		НуженПеренос = МобильноеПриложениеМониторERPПереопределяемый.НуженПереносДанных(Данные);
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных.
		Если Не НуженПеренос Тогда
			// Получаем значение с возможным удалением данных.
			УдалениеДанных(Данные);
		КонецЕсли;
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		// Записываем данные в сообщение.
		МобильноеПриложениеМониторERPПереопределяемый.ЗаписатьДанные(ЗаписьXML, Фабрика, Данные,
			ВыгружатьКонтактныеТелефоны);
		// Удаляем регистрацию в узле обмена.
		ВремяКонца = ТекущаяДата();
		РазностьВремени = ВремяКонца-ВремяНачала;
		ОбщееВремя  = ОбщееВремя + РазностьВремени;
		КолОбъектов = КолОбъектов +1;
		// Пытаемся предотвратить тайм-аут прокси.
		Если (ОбщееВремя >= КоличествоСекунд) Или (РазностьВремени > Цел(КоличествоСекунд/2)) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	КоличествоОсталосьПолучить = КоличествоОбъектовКОбмену - КолОбъектов;
	
	УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
	
	СтруктураВозврата = Новый Структура("ДанныеОбмена, КоличествоВсего, ОсталосьПолучить, Выполнено",
		ЗаписьXML.Закрыть(), КоличествоОбъектовКОбмену, КоличествоОсталосьПолучить, Истина);
	
	Возврат Новый ХранилищеЗначения(СтруктураВозврата, Новый СжатиеДанных(9));
КонецФункции

Процедура ПодготовитьДанныеДляЗаполнения(ПараметрыОбменаСМонитором, АдресХранилища) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(АдресХранилища);
	
	ЗаписатьXML(ЗаписьXML, ПакетДляОбмена(ПараметрыОбменаСМонитором.УзелОбмена, ПараметрыОбменаСМонитором,
														ПараметрыОбменаСМонитором.ВремяНачалаРаботы));
	ЗаписьXML.Закрыть();
КонецПроцедуры

Функция ПодготовленныеДанные(АдресХранилища)
	
	ВыбФайл = Новый Файл(АдресХранилища);
	Если НЕ ВыбФайл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(АдресХранилища);
	Данные = Неопределено;
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		Данные = ПрочитатьXML(ЧтениеXML);
	КонецЦикла;
	
	Возврат Данные;
КонецФункции

Функция ЭтоТаблицаОбъекта(Знач СвойствоXDTO)
	
	Если СвойствоXDTO.Свойства().Количество() = 1 Тогда
		
		Возврат СвойствоXDTO.Свойства().Получить(0).ВерхняяГраница <> 1;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Модуль "НакладныеКлиент" содержит процедуры и функции для
// поддержки заполнения накладных и функциональности форм документов
// и списков накладных.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует массив ссылок по выделенным строкам списка, исключая группировки,
// предупреждает пользователя об отсутствии выделенных строк.
//
// Параметры:
//  Список 			- ДинамическийСписок - список, выделенные строки которого содержат ссылки для дальнейшей обработки.
//  ТипНакладная	- ОписаниеТипов - описание типов, содержащее типы накладных, присутствующих в списке.
//  СвойстваЗаказов	- Строка - перечень свойств, которые нужно получить из списка.
//
// Возвращаемое значение:
//  Структура - содержит два массива "Заказы" и "Накладные", содержащие ссылки на выделенные строки списка.
//
Функция СсылкиВыделенныхСтрокСпискаПоВидам(Список, ТипНакладная, СвойстваЗаказов = "") Экспорт
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	ИдентификаторыСтрок = Новый Массив();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Для оформления накладных необходимо выделить одну или несколько
                                         |строк в списке распоряжений к оформлению.'
                                         |;uk='Для оформлення накладних необхідно виділити одну або кілька
                                         |рядків у списку розпоряджень до оформлення.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе
		
		Для Каждого Идентификатор Из Список.ВыделенныеСтроки Цикл
			
			Если ТипЗнч(Идентификатор) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				ИдентификаторыСтрок.Добавить(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИдентификаторыСтрок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru='Выполнение команды для группировки строк не предусмотрено.';uk='Виконання команди для групування рядків не передбачено.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументыПоВидам = Новый Структура;
	ДокументыПоВидам.Вставить("Заказы", Новый Массив);
	ДокументыПоВидам.Вставить("Накладные", Новый Массив);
	ДокументыПоВидам.Вставить("СоответствиеОрдера", 0);
	ДокументыПоВидам.Вставить("СостояниеНакладной", 0);
	ДокументыПоВидам.Вставить("СвойстваЗаказов", Новый Массив); // значения полей строки списка, если это строка - заказ
	ДокументыПоВидам.Вставить("Количество", ИдентификаторыСтрок.Количество());
	
	ЕстьНакладная = Ложь;
	Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
		
		СтрокаСписка = Список.ДанныеСтроки(Идентификатор);
		СоответствиеОрдераВСтрокеСписка = СтрокаСписка.СоответствиеОрдера;
		СостояниеНакладнойВСтрокеСписка = СтрокаСписка.СостояниеНакладной;
		
		Ссылка = СтрокаСписка.Ссылка;
		
		Если ТипНакладная.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			Если Не ЕстьНакладная Тогда
				ДокументыПоВидам.Накладные.Добавить(Ссылка);
				ДокументыПоВидам.СоответствиеОрдера = СоответствиеОрдераВСтрокеСписка;
				ЕстьНакладная = Истина;
			КонецЕсли;
			
		Иначе
			
			ДокументыПоВидам.Заказы.Добавить(Ссылка);
			ДокументыПоВидам.СоответствиеОрдера = Макс(ДокументыПоВидам.СоответствиеОрдера, СоответствиеОрдераВСтрокеСписка);
			ДокументыПоВидам.СостояниеНакладной = Макс(ДокументыПоВидам.СостояниеНакладной, СостояниеНакладнойВСтрокеСписка);
			
			Если СвойстваЗаказов <> "" Тогда
				ЗначенияСвойствЗаказа = Новый Структура(СвойстваЗаказов);
				ЗаполнитьЗначенияСвойств(ЗначенияСвойствЗаказа, СтрокаСписка);
				ДокументыПоВидам.СвойстваЗаказов.Добавить(ЗначенияСвойствЗаказа);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыПоВидам;
	
КонецФункции

// Сообщает об ошибках создания накладной на основании заказов, если у заказов не совпадают реквизиты шапки.
// Параметры:
//  ТекстыОшибок - Массив, Строка - Массив текстов ошибок или текст одной ошибки.
//
Процедура СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ТекстыОшибок) Экспорт
	
	ОчиститьСообщения();
	Если ТипЗнч(ТекстыОшибок) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстыОшибок,,,,);
	Иначе
		
		Для Каждого ТекстОшибки Из ТекстыОшибок Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

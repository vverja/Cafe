
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	МассивТипов = Справочники.СертификатыНоменклатуры.СформироватьСписокВыбораТиповСертификатов();
	Элементы.ТипСертификата.СписокВыбора.ЗагрузитьЗначения(МассивТипов);

	Если Параметры.Свойство("ТипСертификата") Тогда
		Объект.ТипСертификата = Параметры.ТипСертификата;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидНоменклатуры") Тогда
		ВидНоменклатуры = Параметры.ВидНоменклатуры;
	КонецЕсли;
	
	Если Параметры.Свойство("Номенклатура") Тогда
		Номенклатура = Параметры.Номенклатура;
	КонецЕсли;	
		
	Элементы.ОбластьДействияХарактеристика.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.ОбластьДействияСерия.Видимость  		 = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Если Объект.Бессрочный Тогда
		Элементы.ДатаОкончанияСрокаДействия.Доступность = Ложь;
	КонецЕсли;
	
	ВариантОбластиДействия = "КонкретныйТовар";

	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьОбластьДействия(Параметры.ЗначениеКопирования);	
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьОбластьДействия(Объект.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда 
		НоменклатураПриИзмененииСервер();
	ИначеЕсли ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницаВидНоменклатуры;
		НоменклатураПриИзмененииСервер();	
		ВариантОбластиДействия = "ВидНоменклатуры";	
	Иначе
		НоменклатураПриИзмененииСервер();
	КонецЕсли;	
			
	УстановитьТекущуюОбластьДействия();

	СчетчикИзображений = НСтр("ru='0 из 0';uk='0 з 0'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		СформироватьТаблицуИзображений();	
		Элементы.ПрисоединенныйФайл.Видимость = Истина;
		Если ВсегоИзображений>0 Тогда
			ПрисоединенныйФайл = Изображения[ТекущееИзображение - 1].Ссылка;
		КонецЕсли;	
	Иначе
		Элементы.ПрисоединенныйФайл.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.СертификатыНоменклатуры) Тогда
		Элементы.КоманднаяПанельИзображения.Доступность = Ложь;
		Элементы.ОбластьДействия.КоманднаяПанель.Доступность = Ложь;
		Элементы.ОбластьДействия.КонтекстноеМеню.Доступность = Ложь;
		Элементы.ВариантОбластиДействия.Доступность = Ложь;
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПредставление();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	УстановитьПометкуУдаленияДляДобавленныхИзображений();
КонецПроцедуры

//Обход ошибки платформы 20020193
//Неправильно отображается представление
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)	
	Объект.Наименование = Объект.Представление;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ВариантОбластиДействия = "КонкретныйТовар" 
		И Не ЗначениеЗаполнено(Номенклатура) Тогда
		Отказ = Истина;	
		ТекстСообщения = НСтр("ru='Область действия не заполнена';uk='Область дії не заповнена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Номенклатура");
	ИначеЕсли ВариантОбластиДействия = "ВидНоменклатуры"
		И Не ЗначениеЗаполнено(ВидНоменклатуры)Тогда	
		Отказ = Истина;
		ТекстСообщения = НСтр("ru='Область действия не заполнена';uk='Область дії не заповнена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ВидНоменклатуры");
	ИначеЕсли ВариантОбластиДействия = "СписокТоваров" Тогда
		НеЗаполненныеСтроки = ОбластьДействия.НайтиСтроки(Новый Структура("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка()));
		Для Каждого НеЗаполненнаяСтрока Из НеЗаполненныеСтроки Цикл
			ОбластьДействия.Удалить(НеЗаполненнаяСтрока);			
		КонецЦикла;
		
		Если ОбластьДействия.Количество()=0 Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Область действия не заполнена';uk='Область дії не заповнена'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОбластьДействия");
		КонецЕсли;	
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Запись в регистр "ОбластиДействияСертификатовНоменклатуры".
	НаборЗаписей = РегистрыСведений.ОбластиДействияСертификатовНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СертификатНоменклатуры.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	ТаблицаОбластиДействия = НаборЗаписей.ВыгрузитьКолонки();
	
	Если ВариантОбластиДействия = "КонкретныйТовар" Тогда
		НоваяСтрокаОбластиДействия 				   = ТаблицаОбластиДействия.Добавить();
		НоваяСтрокаОбластиДействия.ВидНоменклатуры = ВидНоменклатуры;
		НоваяСтрокаОбластиДействия.Номенклатура	   = Номенклатура;
		НоваяСтрокаОбластиДействия.Характеристика  = Характеристика;
		НоваяСтрокаОбластиДействия.Серия		   = Серия;
	ИначеЕсли ВариантОбластиДействия = "ВидНоменклатуры" Тогда
		НоваяСтрокаОбластиДействия 				   = ТаблицаОбластиДействия.Добавить();
		НоваяСтрокаОбластиДействия.ВидНоменклатуры = ВидНоменклатуры;
	Иначе
		ТаблицаОбластиДействия = ОбластьДействия.Выгрузить();
		ТаблицаОбластиДействия.Колонки.Добавить("СертификатНоменклатуры", 
			Новый ОписаниеТипов("СправочникСсылка.СертификатыНоменклатуры"));
	КонецЕсли;
	
	ТаблицаОбластиДействия.ЗаполнитьЗначения(Объект.Ссылка,"СертификатНоменклатуры");
	ТаблицаОбластиДействия.Свернуть("СертификатНоменклатуры,ВидНоменклатуры,Номенклатура,Характеристика,Серия");
	
	НаборЗаписей.Загрузить(ТаблицаОбластиДействия);
	НаборЗаписей.Записать();
	
	ТЗИзображенияПомеченныеНаУдаление = ИзображенияПомеченныеНаУдаление.Выгрузить();
	ТЗИзображенияПомеченныеНаУдаление.Свернуть("Ссылка","Пометка");
	// Установка/Снятие пометки удаления присоединенным файлам.
	Для Каждого Изображение Из ТЗИзображенияПомеченныеНаУдаление Цикл
		УстановитьПометкуУдаленияИзображения(Изображение.Ссылка,Изображение.Пометка);
	КонецЦикла;
	ИзображенияПомеченныеНаУдаление.Очистить();

	// Запись присоединенных файлов.
	Для Каждого Изображение Из Изображения Цикл
		Если ЗначениеЗаполнено(Изображение.ИмяБезРасширения) Тогда			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", Объект.Ссылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Изображение.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", Изображение.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Изображение.УниверсальноеВремяИзменения);
			
			ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
			ПараметрыФайла,
			Изображение.АдресФайлаВХранилище,
			"",
			"НоменклатураПрисоединенныеФайлы");
		КонецЕсли;
	КонецЦикла;	
	Изображения.Очистить();	
	СформироватьТаблицуИзображений();
	
	Элементы.ПрисоединенныйФайл.Видимость = Истина;	
	Если ВсегоИзображений>0 Тогда
			ПрисоединенныйФайл = Изображения[ТекущееИзображение - 1].Ссылка;
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СертификатНоменклатуры", Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборОбластиДействияСертифкатаНоменклатуры" Тогда
		ПодборОбластиДействия(Параметр);
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
				
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если ТекущееИзображение > 0 Тогда
			Если Изображения[ТекущееИзображение-1].Ссылка = СсылкаНаФайл Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НовоеИзображение = Изображения.Вставить(ВсегоИзображений);
		НовоеИзображение.Ссылка = СсылкаНаФайл;
		СтркутураРеквизитов = РеквизитыИзображения(СсылкаНаФайл);
		НовоеИзображение.ПометкаУдаления = СтркутураРеквизитов.ПометкаУдаления;	
		АдресФайлаВХранилище = СтркутураРеквизитов.АдресФайлаВХранилище;
		НовоеИзображение.АдресФайлаВХранилище = АдресФайлаВХранилище;
		АдресКартинки = АдресФайлаВХранилище;
		
		ВсегоИзображений = ВсегоИзображений + 1;
		ТекущееИзображение = ВсегоИзображений;
		ОбновитьСчетчикИзображений();	
		ПрисоединенныйФайл = Изображения[ТекущееИзображение - 1].Ссылка;
		
		НоваяСтрока = ИзображенияПомеченныеНаУдаление.Добавить();
		НоваяСтрока.Ссылка = ПрисоединенныйФайл;
		НоваяСтрока.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте                             
Процедура ТипСертификатаПриИзменении(Элемент)
	ОбновитьПредставление(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ТипСертификатаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	МассивТипов = СформироватьСписокТипов(Текст);
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивТипов);

КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	ОбновитьПредставление(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОрганВыдавшийДокументПриИзменении(Элемент)
	ОбновитьПредставление();
КонецПроцедуры

&НаКлиенте
Процедура БессрочныйПриИзменении(Элемент)	
	Если Объект.Бессрочный Тогда
		Элементы.ДатаОкончанияСрокаДействия.Доступность = Ложь;
	Иначе
		Элементы.ДатаОкончанияСрокаДействия.Доступность = Истина;
	КонецЕсли;		
	ОбновитьПредставление();	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбластиДействияПриИзменении(Элемент)
	
	Если ТекущаяОбластьДействия.ВариантОбластиДействия = "СписокТоваров" Тогда
		СменитьВариантОбласти = Истина;

		Если ОбластьДействия.Количество() > 1 Тогда 
			ТекстВопроса = НСтр("ru='При смене варианта области действия список будет очищен. Продолжить?';uk='При зміні варіанта області дії список буде очищений. Продовжити?'");
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ВариантОбластиДействияПриИзмененииОтветНаВопрос", ЭтотОбъект), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет, 
				, 
				КодВозвратаДиалога.Нет);
			Возврат;
		ИначеЕсли ОбластьДействия.Количество() = 0 Тогда
			СменитьВариантОбласти = Ложь;
		КонецЕсли;
		
		ВариантОбластиДействияСменитьВариантОбласти(СменитьВариантОбласти);
		
	ИначеЕсли ВариантОбластиДействия = "СписокТоваров" Тогда
		ОбластьДействия.Очистить();
		НоваяСтрока = ОбластьДействия.Добавить();
		НоваяСтрока.ВидНоменклатуры = ВидНоменклатуры;
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Характеристика = Характеристика;
		НоваяСтрока.Серия = Серия;
		НоваяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		НоваяСтрока.СерииИспользуются = СерииИспользуются;
		Элементы.ОбластьДействия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	ВариантОбластиДействияПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбластиДействияПриИзмененииОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВариантОбластиДействия = ТекущаяОбластьДействия.ВариантОбластиДействия;
		Возврат;
	КонецЕсли;
	
	ВариантОбластиДействияСменитьВариантОбласти(Истина);
	
	ВариантОбластиДействияПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбластиДействияСменитьВариантОбласти(Знач СменитьВариантОбласти)
	
	Если СменитьВариантОбласти Тогда
		ТекущаяСтрока = Элементы.ОбластьДействия.ТекущиеДанные;
		ВидНоменклатуры = ТекущаяСтрока.ВидНоменклатуры; 
		Номенклатура = ТекущаяСтрока.Номенклатура;
		Характеристика = ТекущаяСтрока.Характеристика;
		Серия = ТекущаяСтрока.Серия;
		ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
		СерииИспользуются = ТекущаяСтрока.СерииИспользуются;
		
		УстановитьДоступностьИПодсказкуВводаСерийИХарактеристикиНаКлиенте();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВариантОбластиДействияПриИзмененииЗавершение()
	
	Если ВариантОбластиДействия = "КонкретныйТовар" Тогда
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницаКонретныйТовар;
	ИначеЕсли ВариантОбластиДействия = "ВидНоменклатуры" Тогда
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницаВидНоменклатуры;
	Иначе
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницаСписокПродукции;
	КонецЕсли;
	
	УстановитьТекущуюОбластьДействияКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ВидНоменклатурыПриИзмененииНаСервере();
	ПриИзмененииОбластиДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзмененииСервер();
	ПриИзмененииОбластиДействия();
	ПодключитьОбработчикОжидания("ОбновитьКартинку", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	Элементы.Серия.Доступность = ЗначениеЗаполнено(Номенклатура) И (ЗначениеЗаполнено(Характеристика)
	Или Не ХарактеристикиИспользуются) И СерииИспользуются;
	ПриИзмененииОбластиДействия();
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	ПриИзмененииОбластиДействия();
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимПодбора", "ПодборСерий");
	ПараметрыФормы.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	ПараметрыФормы.Вставить("Номенклатура", Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", Характеристика);
	ПараметрыФормы.Вставить("ХарактеристикиИспользуются", ХарактеристикиИспользуются);
	
	Оповещение = Новый ОписаниеОповещения(
             "ВыборСерииЗавершение",
             ЭтотОбъект);
			 
	ОткрытьФорму("Справочник.СертификатыНоменклатуры.Форма.ФормаПодбораОбластиДействияСерия",
		ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		ПросмотретьИзображение();	
	Иначе
		
		Если Не Элементы.КоманднаяПанельИзображения.Доступность Тогда
			Возврат;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЗаблокироватьДанныеФормыДляРедактирования();
			ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка,
				УникальныйИдентификатор,
				НоменклатураКлиент.ФильтрФайловИзображений());
		Иначе
			ДобавитьИзображениеНеПрисоединенное();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияСрокаДействияПриИзменении(Элемент)
	Если Объект.ДатаОкончанияСрокаДействия < Объект.ДатаНачалаСрокаДействия Тогда
		Объект.ДатаОкончанияСрокаДействия = Объект.ДатаНачалаСрокаДействия;	
	КонецЕсли;
	ОбновитьПредставление();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаСрокаДействияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияСрокаДействия)
		И Объект.ДатаНачалаСрокаДействия > Объект.ДатаОкончанияСрокаДействия Тогда
		Объект.ДатаНачалаСрокаДействия = Объект.ДатаОкончанияСрокаДействия;	
	КонецЕсли;
	ОбновитьПредставление();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбластьДействия

&НаКлиенте
Процедура ОбластьДействияПриАктивизацииСтроки(Элемент)
	УстановитьТекущуюОбластьДействияКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияВидНоменлатурыПриИзменении(Элемент)
	Элементы.ОбластьДействия.ТекущиеДанные.СерииИспользуются = ДоступностьСерий(Элементы.ОбластьДействия.ТекущиеДанные.ВидНоменклатуры, Истина);
	Элементы.ОбластьДействия.ТекущиеДанные.ХарактеристикиИспользуются = Ложь;
	ПриИзмененииОбластиДействия();
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияНоменклатураПриИзменении(Элемент)		

	ТекущаяСтрока =  Элементы.ОбластьДействия.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		СвойстваНоменклатуры = ОбластьДействияНоменклатураПриИзмененииНаСервере(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.ВидНоменклатуры);
		ТекущаяСтрока.ХарактеристикиИспользуются = СвойстваНоменклатуры.ХарактеристикиИспользуются;
		
		Если СвойстваНоменклатуры.Свойство("ВидНоменклатуры") Тогда
			ТекущаяОбластьДействия.ВидНоменклатуры = СвойстваНоменклатуры.ВидНоменклатуры;
			ТекущаяСтрока.ВидНоменклатуры = СвойстваНоменклатуры.ВидНоменклатуры;	
			ТекущаяСтрока.СерииИспользуются = СвойстваНоменклатуры.СерииИспользуются;	
		КонецЕсли;		
	КонецЕсли;
	
	ПриИзмененииОбластиДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияХарактеристикаПриИзменении(Элемент)
	ПриИзмененииОбластиДействия();
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияСерияПриИзменении(Элемент)
	ПриИзмененииОбластиДействия();
КонецПроцедуры

&НаКлиенте
Процедура ОбластьДействияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ОбластьДействия.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимПодбора", "ПодборСерий");
	ПараметрыФормы.Вставить("ВидНоменклатуры", ТекущаяСтрока.ВидНоменклатуры);
	ПараметрыФормы.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	ПараметрыФормы.Вставить("ХарактеристикиИспользуются", ТекущаяСтрока.ХарактеристикиИспользуются);
	
	Оповещение = Новый ОписаниеОповещения(
             "ВыборСерииЗавершение",
             ЭтотОбъект);
			 
	ОткрытьФорму("Справочник.СертификатыНоменклатуры.Форма.ФормаПодбораОбластиДействияСерия",
		ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимПодбора", "ПодборОбластиДействия");
	Серия = Неопределено;

	ОткрытьФорму("Справочник.СертификатыНоменклатуры.Форма.ФормаПодбораОбластиДействияСерия",ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение()
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПрисоединенныйФайл = Изображения[ТекущееИзображение-1].Ссылка;
		
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			ПрисоединенныеФайлыКлиент.ОткрытьФайл(
			ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(
			ПрисоединенныйФайл,
			УникальныйИдентификатор));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отсутствует изображение для просмотра';uk='Відсутнє зображення для перегляду'"),, "АдресКартинки");
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияУТКлиент.ЗапуститьПриложениеБезОбработкиРезультата(Изображения[ТекущееИзображение-1].ПолноеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОбластьДействия(Команда)
	
	Если Элементы.ОбластьДействия.ТекущиеДанные<>Неопределено Тогда	
		СтруктураСтроки = Новый Структура("ВидНоменклатуры, Номенклатура, СерииИспользуются,
		|Серия, Характеристика, ХарактеристикиИспользуются");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Элементы.ОбластьДействия.ТекущиеДанные);
		Элементы.ОбластьДействия.ДобавитьСтроку();
		ЗаполнитьЗначенияСвойств(Элементы.ОбластьДействия.ТекущиеДанные, СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ТекущаяОбластьДействия, СтруктураСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СледующиеИзображение(Команда)
	
	Если ТекущееИзображение < ВсегоИзображений Тогда
		ТекущееИзображение = ТекущееИзображение + 1;
		АдресКартинки = Изображения[ТекущееИзображение - 1].АдресФайлаВХранилище;
		ОбновитьСчетчикИзображений();
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПрисоединенныйФайл = Изображения[ТекущееИзображение - 1].Ссылка;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущееИзображение(Команда)
	
	Если ТекущееИзображение > 1 Тогда
		ТекущееИзображение = ТекущееИзображение - 1;
		АдресКартинки = Изображения[ТекущееИзображение - 1].АдресФайлаВХранилище; 
		ОбновитьСчетчикИзображений();
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПрисоединенныйФайл = Изображения[ТекущееИзображение - 1].Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, НоменклатураКлиент.ФильтрФайловИзображений());
	Иначе                        
		ДобавитьИзображениеНеПрисоединенное();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте             
Процедура ОчиститьИзображение(Команда)
	
	Если ВсегоИзображений > 0 Тогда	
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Модифицированность = Истина;
			ТекущаяСтрока = Изображения[ТекущееИзображение - 1];		
			НоваяСтрока = ИзображенияПомеченныеНаУдаление.Добавить();
			НоваяСтрока.Ссылка = Изображения[ТекущееИзображение - 1].Ссылка;
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		Изображения.Удалить(ТекущееИзображение-1);
		ВсегоИзображений = ВсегоИзображений - 1;
		
		Если ТекущееИзображение>ВсегоИзображений Тогда
			ТекущееИзображение = ТекущееИзображение - 1;
		КонецЕсли;	
		
		Если ВсегоИзображений = 0 Тогда        
			АдресКартинки = "";	
			ПрисоединенныйФайл = ПредопределенноеЗначение("Справочник.СертификатыНоменклатуры.ПустаяСсылка");
		Иначе
			АдресКартинки = Изображения[ТекущееИзображение - 1].АдресФайлаВХранилище;
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				ПрисоединенныйФайл = Изображения[ТекущееИзображение - 1].Ссылка;
			КонецЕсли;	
		КонецЕсли;
		
		ОбновитьСчетчикИзображений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор, ВестиУчетСертификатовНоменклатуры",
		УникальныйИдентификатор,
		Истина);
	АдресВоВременномХранилище = Неопределено;

	ОткрытьФорму("Обработка.ПодборТоваровПоОтбору.Форма.Форма", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ДобавитьТоварыПоОтборуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтборуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресВоВременномХранилище = Результат;
    Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
        ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище);
    КонецЕсли;

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбластьДействияХарактеристика.Имя);

	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбластьДействияХарактеристика.Имя);

	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ГруппаОтбораИЛИ = ГруппаОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбораИ2 = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для всех характеристик>';uk='<для всіх характеристик>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбластьДействияСерия.Имя);

	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<серия не указывается>';uk='<серія не зазначається>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбластьДействияСерия.Имя);

	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Серия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для всех серий>';uk='<для всіх серій>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбластьДействияНоменклатура.Имя);

	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для всей номенклатуры>';uk='<для всієї номенклатури>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбластьДействияХарактеристика.Имя);

	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбластьДействияСерия.Имя);

	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбластьДействия.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ВыборСерииЗавершение(ПодобраннаяСерия, Параметры) Экспорт
	
	Если ВариантОбластиДействия = "КонкретныйТовар" Тогда 	
		Серия = ПодобраннаяСерия;
	Иначе
		Элементы.ОбластьДействия.ТекущиеДанные.Серия = ПодобраннаяСерия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьИПодсказкуВводаСерийИХарактеристикиНаКлиенте()
	
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются И ЗначениеЗаполнено(Номенклатура);
	Элементы.Серия.Доступность = ЗначениеЗаполнено(Номенклатура) И (ЗначениеЗаполнено(Характеристика)
		Или Не ХарактеристикиИспользуются) И СерииИспользуются;
	
	Если ХарактеристикиИспользуются Тогда
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='<для всех характеристик>';uk='<для всіх характеристик>'");
	Иначе
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
	КонецЕсли;
	
	Если СерииИспользуются Тогда
		Элементы.Серия.ПодсказкаВвода = НСтр("ru='<для всех серий>';uk='<для всіх серій>'");
	Иначе
		Элементы.Серия.ПодсказкаВвода = НСтр("ru='<серия не указывается>';uk='<серія не зазначається>'");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбластьДействия(СсылкаСертификатаНоменклатуры)
	
	НаборЗаписей = РегистрыСведений.ОбластиДействияСертификатовНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СертификатНоменклатуры.Установить(СсылкаСертификатаНоменклатуры);
	НаборЗаписей.Прочитать();
	ТаблицаРегистра = НаборЗаписей.Выгрузить();
	
	КоличествоЭлементовТаблицы = ТаблицаРегистра.Количество();
	ВариантОбластиДействия = "КонкретныйТовар";
	
	Если КоличествоЭлементовТаблицы = 1 Тогда
		СтрокаОбластиДействия = ТаблицаРегистра[0];
		Если ЗначениеЗаполнено(СтрокаОбластиДействия.Номенклатура) Тогда
			ВидНоменклатуры   		   = СтрокаОбластиДействия.ВидНоменклатуры;
			Номенклатура 	  		   = СтрокаОбластиДействия.Номенклатура;
			Характеристика 	 		   = СтрокаОбластиДействия.Характеристика;
			Серия 					   = СтрокаОбластиДействия.Серия;
			НоменклатураПриИзмененииСервер();	
		Иначе	
			ВариантОбластиДействия = "ВидНоменклатуры";
			ВидНоменклатуры   		   = СтрокаОбластиДействия.ВидНоменклатуры;
			СерииИспользуются 		   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользоватьСерии");
			ХарактеристикиИспользуются = ХарактеристикиИспользуются(ВидНоменклатуры)	
		КонецЕсли;	
	ИначеЕсли КоличествоЭлементовТаблицы > 0 Тогда
		ВариантОбластиДействия = "СписокТоваров";
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбластьДействия.ВидНоменклатуры,
		|	ОбластьДействия.Номенклатура,
		|	ОбластьДействия.Характеристика,
		|	ОбластьДействия.Серия
		|ПОМЕСТИТЬ ОбластьДействия
		|ИЗ
		|	&ОбластьДействия КАК ОбластьДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбластьДействия.Номенклатура,
		|	ОбластьДействия.ВидНоменклатуры,
		|	ОбластьДействия.Характеристика,
		|	ОбластьДействия.Серия,
		|	ВЫБОР
		|		КОГДА ОбластьДействия.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ОбластьДействия.ВидНоменклатуры.ИспользоватьСерии КАК СерииИспользуются
		|ИЗ
		|	ОбластьДействия КАК ОбластьДействия";
		Запрос.УстановитьПараметр("ОбластьДействия",ТаблицаРегистра);
		
		ОбластьДействия.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;	
	
	ТекущийВариантОбластиДействия = ВариантОбластиДействия;
	Если ВариантОбластиДействия = "КонкретныйТовар" Тогда
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницаКонретныйТовар;	
	ИначеЕсли ВариантОбластиДействия = "ВидНоменклатуры" Тогда
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницаВидНоменклатуры;
	Иначе
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницаСписокПродукции;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПредставление(ИзменятьПредставление = Ложь)
		
	ПредставлениеСертификата = Объект.ТипСертификата + " №" + Объект.Номер;
	Если Объект.Бессрочный Тогда
		ПредставлениеДаты = НСтр("ru=' от %ДатаНачалаСрокаДействия%';uk=' від %ДатаНачалаСрокаДействия%'");
	Иначе	
	    ПредставлениеДаты = НСтр("ru=' с %ДатаНачалаСрокаДействия% по %ДатаОкончанияСрокаДействия%';uk=' з %ДатаНачалаСрокаДействия% по %ДатаОкончанияСрокаДействия%'");
	КонецЕсли;	
	
	ПредставлениеДаты = СтрЗаменить(ПредставлениеДаты, "%ДатаНачалаСрокаДействия%",  Формат(Объект.ДатаНачалаСрокаДействия, "ДЛФ=Д"));
	ПредставлениеДаты = СтрЗаменить(ПредставлениеДаты, "%ДатаОкончанияСрокаДействия%",  Формат(Объект.ДатаОкончанияСрокаДействия, "ДЛФ=Д"));
	
	Если ЗначениеЗаполнено(Объект.ОрганВыдавшийДокумент) Тогда
		ПредставлениеВыдан = НСтр("ru='. Выдан: %ОрганВыдавшийДокумент%';uk='. Виданий: %ОрганВыдавшийДокумент%'");
		ПредставлениеВыдан = СтрЗаменить(ПредставлениеВыдан, "%ОрганВыдавшийДокумент%", Объект.ОрганВыдавшийДокумент);
	Иначе
		ПредставлениеВыдан = "";
	КонецЕсли;
	
	Элементы.Представление.СписокВыбора.Очистить();
	Элементы.Представление.СписокВыбора.Добавить(ПредставлениеСертификата);	
	Элементы.Представление.СписокВыбора.Добавить(ПредставлениеСертификата + ПредставлениеДаты);
	Если ЗначениеЗаполнено(Объект.ОрганВыдавшийДокумент) Тогда
		Элементы.Представление.СписокВыбора.Добавить(ПредставлениеСертификата + ПредставлениеДаты + ПредставлениеВыдан);
	КонецЕсли;

	Если ИзменятьПредставление Тогда
		Объект.Представление = ПредставлениеСертификата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ВидНоменклатуры, ИспользованиеХарактеристик");
		ВидНоменклатуры = РеквизитыНоменклатуры.ВидНоменклатуры;
		
		Если РеквизитыНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры 
			ИЛИ РеквизитыНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
			ИЛИ РеквизитыНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
			Элементы.Характеристика.Доступность = Истина;
			Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='<для всех характеристик>';uk='<для всіх характеристик>'");
			ХарактеристикиИспользуются = Истина;
		Иначе
			Элементы.Характеристика.Доступность = Ложь;
			Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
			ХарактеристикиИспользуются = Ложь;
		КонецЕсли;
		
		ДоступностьСерий(ВидНоменклатуры, Ложь);
			
	Иначе
		Элементы.Характеристика.Доступность = Ложь;
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
		ХарактеристикиИспользуются = Ложь;

		Элементы.Серия.Доступность = Ложь;
		Элементы.Серия.ПодсказкаВвода = НСтр("ru='<серия не указывается>';uk='<серія не зазначається>'");
		СерииИспользуются = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ТекущийВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура,"ВидНоменклатуры");
	Если ТекущийВидНоменклатуры<>ВидНоменклатуры Тогда
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ХарактеристикиИспользуются = Ложь;
		Элементы.Характеристика.Доступность = Ложь;
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
	КонецЕсли;
	
	ДоступностьСерий(ВидНоменклатуры, Ложь);
	 
КонецПроцедуры

&НаСервере
Функция ДоступностьСерий(ТекущийВидНоменклатуры, ЭтоСписок)
	
	Если ЗначениеЗаполнено(ТекущийВидНоменклатуры) Тогда
		ИспользоватьСерии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийВидНоменклатуры, "ИспользоватьСерии");
	Иначе
	   	ИспользоватьСерии = Ложь;
	КонецЕсли;
	
	Если ЭтоСписок Тогда
		Возврат ИспользоватьСерии;
	КонецЕсли;
	
	Если ИспользоватьСерии Тогда		
		Элементы.Серия.Доступность = ЗначениеЗаполнено(Номенклатура) И (ЗначениеЗаполнено(Характеристика) Или Не ХарактеристикиИспользуются);
		Элементы.Серия.ПодсказкаВвода = НСтр("ru='<для всех серий>';uk='<для всіх серій>'");
		СерииИспользуются = Истина;
	Иначе
		Элементы.Серия.Доступность = Ложь;
		Элементы.Серия.ПодсказкаВвода = НСтр("ru='<серия не указывается>';uk='<серія не зазначається>'");
		СерииИспользуются = Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбластьДействияНоменклатураПриИзмененииНаСервере(Номенклатура, ВидНоменклатурыВСтроке)

	СтруктураВозврата = Новый Структура;
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ИспользованиеХарактеристик, ВидНоменклатуры");
	ИспользованиеХарактеристик = РеквизитыНоменклатуры.ИспользованиеХарактеристик;
	ВидНоменклатуры = РеквизитыНоменклатуры.ВидНоменклатуры;

	Если ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры 
		ИЛИ ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
		ИЛИ ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
		СтруктураВозврата.Вставить("ХарактеристикиИспользуются",Истина);		
	Иначе
		СтруктураВозврата.Вставить("ХарактеристикиИспользуются",Ложь);
	КонецЕсли;
	 
	Если ВидНоменклатуры <> ВидНоменклатурыВСтроке Тогда
		ИспользоватьСерии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользоватьСерии");
		СтруктураВозврата.Вставить("ВидНоменклатуры",ВидНоменклатуры);
		СтруктураВозврата.Вставить("СерииИспользуются",ИспользоватьСерии);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции	
	
&НаСервере
Функция ХарактеристикиИспользуются(ТекущаяНоменклатура)
	
	ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНоменклатура, "ИспользованиеХарактеристик");

	Если ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры 
		ИЛИ ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
		ИЛИ ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
		Возврат Истина;		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюОбластьДействия()
	                                   
	ТекущаяОбластьДействия = Новый Структура();
	
	ТекущаяОбластьДействия.Вставить("ВариантОбластиДействия", ВариантОбластиДействия);

	Если ВариантОбластиДействия = "КонкретныйТовар"
		Или ВариантОбластиДействия = "ВидНоменклатуры" Тогда
		ТекущаяОбластьДействия.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		ТекущаяОбластьДействия.Вставить("Номенклатура", Номенклатура);	
		ТекущаяОбластьДействия.Вставить("Характеристика", Характеристика);	
		ТекущаяОбластьДействия.Вставить("Серия", Серия);	
	Иначе
		Если Элементы.ОбластьДействия.ТекущаяСтрока=Неопределено Тогда
			ТекущаяСтрока = ОбластьДействия[0];	
		Иначе
			ТекущаяСтрока = Элементы.ОбластьДействия.ТекущиеДанные;
		КонецЕсли;	
		ТекущаяОбластьДействия.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		ТекущаяОбластьДействия.Вставить("Номенклатура", Номенклатура);	
		ТекущаяОбластьДействия.Вставить("Характеристика", Характеристика);	
		ТекущаяОбластьДействия.Вставить("Серия", Серия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюОбластьДействияКлиент()
	                                   
	ТекущаяОбластьДействия = Новый Структура();
	
	ТекущаяОбластьДействия.Вставить("ВариантОбластиДействия", ВариантОбластиДействия);
	
	Если ВариантОбластиДействия = "КонкретныйТовар"
		Или ВариантОбластиДействия = "ВидНоменклатуры" Тогда
		ТекущаяОбластьДействия.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		ТекущаяОбластьДействия.Вставить("Номенклатура", Номенклатура);	
		ТекущаяОбластьДействия.Вставить("Характеристика", Характеристика);	
		ТекущаяОбластьДействия.Вставить("Серия", Серия);
	Иначе
		Если Элементы.ОбластьДействия.ТекущиеДанные=Неопределено Тогда
			ТекущаяОбластьДействия.Вставить("ВидНоменклатуры", Неопределено);
			ТекущаяОбластьДействия.Вставить("Номенклатура", Неопределено);	
			ТекущаяОбластьДействия.Вставить("Характеристика", Неопределено);	
			ТекущаяОбластьДействия.Вставить("Серия", Неопределено);
		Иначе
			ТекущаяСтрока = Элементы.ОбластьДействия.ТекущиеДанные;
			ТекущаяОбластьДействия.Вставить("ВидНоменклатуры", ТекущаяСтрока.ВидНоменклатуры);
			ТекущаяОбластьДействия.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);	
			ТекущаяОбластьДействия.Вставить("Характеристика", ТекущаяСтрока.Характеристика);	
			ТекущаяОбластьДействия.Вставить("Серия", ТекущаяСтрока.Серия);			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбластиДействия()
	
	Если ВариантОбластиДействия = "КонкретныйТовар"
		Или ВариантОбластиДействия = "ВидНоменклатуры" Тогда
		
		Если ТекущаяОбластьДействия.Характеристика <> Характеристика Тогда
			Серия 		   = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			УстановитьТекущуюОбластьДействияКлиент();
		ИначеЕсли ТекущаяОбластьДействия.Номенклатура <> Номенклатура Тогда
			Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Серия 		   = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			УстановитьТекущуюОбластьДействияКлиент();
		ИначеЕсли ТекущаяОбластьДействия.ВидНоменклатуры <> ВидНоменклатуры Тогда
			Номенклатура   = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			Серия 		   = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			Элементы.Серия.ПодсказкаВвода = НСтр("ru='<серия не указывается>';uk='<серія не зазначається>'");
			Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
			УстановитьТекущуюОбластьДействияКлиент();
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока = Элементы.ОбластьДействия.ТекущиеДанные;
		
		Если ТекущаяОбластьДействия.ВидНоменклатуры <> ТекущаяСтрока.ВидНоменклатуры Тогда
			ТекущаяСтрока.Номенклатура   = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			ТекущаяСтрока.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			ТекущаяСтрока.Серия 		   = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			УстановитьТекущуюОбластьДействияКлиент();
		ИначеЕсли ТекущаяОбластьДействия.Номенклатура <> ТекущаяСтрока.Номенклатура Тогда
			ТекущаяСтрока.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			ТекущаяСтрока.Серия 		   = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			УстановитьТекущуюОбластьДействияКлиент();
		ИначеЕсли ТекущаяОбластьДействия.Характеристика <> ТекущаяСтрока.Характеристика Тогда
			ТекущаяСтрока.Серия 		   = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			УстановитьТекущуюОбластьДействияКлиент();
	    КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОбластиДействия(ПарамаетрыВыбора)
	
	Если ПарамаетрыВыбора.Область = "ВидНоменклатуры" Тогда
		
		НоваяСтрокаОбластиДействия = ОбластьДействия.Добавить();
		НоваяСтрокаОбластиДействия.ВидНоменклатуры = ПарамаетрыВыбора.ВидНоменклатуры;
		НоваяСтрокаОбластиДействия.СерииИспользуются = ПарамаетрыВыбора.СерииИспользуются;
		
	ИначеЕсли ПарамаетрыВыбора.Область = "Номенклатура" Тогда	
		
		НоваяСтрокаОбластиДействия = ОбластьДействия.Добавить();
		НоваяСтрокаОбластиДействия.ВидНоменклатуры = ПарамаетрыВыбора.ВидНоменклатуры;
		НоваяСтрокаОбластиДействия.Номенклатура = ПарамаетрыВыбора.Номенклатура;
		НоваяСтрокаОбластиДействия.ХарактеристикиИспользуются = ПарамаетрыВыбора.ХарактеристикиИспользуются;
		НоваяСтрокаОбластиДействия.СерииИспользуются = ПарамаетрыВыбора.СерииИспользуются;
		
	ИначеЕсли ПарамаетрыВыбора.Область = "Характеристика" Тогда	
		
		НоваяСтрокаОбластиДействия = ОбластьДействия.Добавить();
		НоваяСтрокаОбластиДействия.ВидНоменклатуры = ПарамаетрыВыбора.ВидНоменклатуры;
		НоваяСтрокаОбластиДействия.Номенклатура = ПарамаетрыВыбора.Номенклатура;
		НоваяСтрокаОбластиДействия.Характеристика = ПарамаетрыВыбора.Характеристика;
		НоваяСтрокаОбластиДействия.ХарактеристикиИспользуются = ПарамаетрыВыбора.ХарактеристикиИспользуются;
		НоваяСтрокаОбластиДействия.СерииИспользуются = ПарамаетрыВыбора.СерииИспользуются;

	ИначеЕсли ПарамаетрыВыбора.Область = "Серия" Тогда
		
		НоваяСтрокаОбластиДействия = ОбластьДействия.Добавить();
		НоваяСтрокаОбластиДействия.ВидНоменклатуры = ПарамаетрыВыбора.ВидНоменклатуры;
		НоваяСтрокаОбластиДействия.Номенклатура = ПарамаетрыВыбора.Номенклатура;
		НоваяСтрокаОбластиДействия.Характеристика = ПарамаетрыВыбора.Характеристика;
		НоваяСтрокаОбластиДействия.Серия = ПарамаетрыВыбора.Серия;
		НоваяСтрокаОбластиДействия.ХарактеристикиИспользуются = ПарамаетрыВыбора.ХарактеристикиИспользуются;
		НоваяСтрокаОбластиДействия.СерииИспользуются = ПарамаетрыВыбора.СерииИспользуются;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СформироватьСписокТипов(Текст)
	
	Возврат Справочники.СертификатыНоменклатуры.АвтоПодборТиповСертификатов(Текст);
	
КонецФункции

&НаСервере
Процедура ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище)
		
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры  КАК ВидНоменклатуры,
	|	ТаблицаНоменклатура.Номенклатура                  КАК Номенклатура,
	|	ТаблицаНоменклатура.Характеристика                КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК СерииИспользуются
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура";

	Запрос.УстановитьПараметр("Таблица", ТаблицаТовары);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОбластьДействия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);

	КонецЦикла;
		
КонецПроцедуры

#Область РаботаСИзображениями

&НаКлиенте
Процедура ОбновитьСчетчикИзображений()
	
	ТекстДекорации = НСтр("ru='%ТекущееИзображение% из %ВсегоИзображений%';uk='%ТекущееИзображение% з %ВсегоИзображений%'");
	ТекстДекорации = СтрЗаменить(ТекстДекорации,"%ТекущееИзображение%",ТекущееИзображение);
	ТекстДекорации = СтрЗаменить(ТекстДекорации,"%ВсегоИзображений%",ВсегоИзображений);
	СчетчикИзображений = ТекстДекорации;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыИзображения(СсылкаНаФайл)
	
	АдресФайлаВХранилище = НавигационнаяСсылкаКартинки(СсылкаНаФайл, УникальныйИдентификатор);
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаФайл,"ПометкаУдаления");
	
	Возврат Новый Структура("АдресФайлаВХранилище, ПометкаУдаления", АдресФайлаВХранилище, ПометкаУдаления);	
	
КонецФункции	

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицуИзображений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправочникСертификатыНоменклатурыПрисоединенныеФайлы.Ссылка,
	|	СправочникСертификатыНоменклатурыПрисоединенныеФайлы.ПометкаУдаления
	|ИЗ
	|	Справочник.СертификатыНоменклатурыПрисоединенныеФайлы КАК СправочникСертификатыНоменклатурыПрисоединенныеФайлы
	|ГДЕ
	|	СправочникСертификатыНоменклатурыПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И СправочникСертификатыНоменклатурыПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникСертификатыНоменклатурыПрисоединенныеФайлы.ДатаСоздания";
	
	Запрос.УстановитьПараметр("ВладелецФайла",Объект.Ссылка);
	
	ПрисоединенныйФайлВыборка = Запрос.Выполнить().Выбрать();
	Пока ПрисоединенныйФайлВыборка.Следующий() Цикл	
		НовоеИзображение = Изображения.Добавить();
		НовоеИзображение.Ссылка = ПрисоединенныйФайлВыборка.Ссылка;
		НовоеИзображение.ПометкаУдаления = ПрисоединенныйФайлВыборка.ПометкаУдаления;
		АдресФайлаВХранилище = НавигационнаяСсылкаКартинки(ПрисоединенныйФайлВыборка.Ссылка, УникальныйИдентификатор);
		НовоеИзображение.АдресФайлаВХранилище = АдресФайлаВХранилище;
	КонецЦикла;
	
	ВсегоИзображений = Изображения.Количество();
		
	Если ВсегоИзображений > 0 Тогда
		
		Если ТекущееИзображение = 0 Тогда
			ТекущееИзображение = 1;
		КонецЕсли;
		
		АдресКартинки = Изображения[ТекущееИзображение-1].АдресФайлаВХранилище;
		
		ТекстДекорации = НСтр("ru='%ТекущееИзображение% из %ВсегоИзображений%';uk='%ТекущееИзображение% з %ВсегоИзображений%'");
		ТекстДекорации = СтрЗаменить(ТекстДекорации,"%ТекущееИзображение%",ТекущееИзображение);
		ТекстДекорации = СтрЗаменить(ТекстДекорации,"%ВсегоИзображений%",ВсегоИзображений);
		СчетчикИзображений = ТекстДекорации;
		
		ПометкаУдаления = Изображения[ТекущееИзображение - 1].ПометкаУдаления;
		Элементы.АдресКартинки.Доступность =  Не ПометкаУдаления;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьИзображениеНеПрисоединенное()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = НоменклатураКлиент.ФильтрФайловИзображений();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНеПрисоединенноеДиалогЗавершение",
		ЭтотОбъект);
		
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНеПрисоединенноеДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНеПрисоединенноеИнициализацияФайла",
		ЭтотОбъект,
		Новый Структура("ИмяФайла, ДанныеФайлаКартинки",
			ИмяФайла,
			Новый Структура("ПолноеИмя, ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения")));
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНеПрисоединенноеИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНеПрисоединенноеСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНеПрисоединенноеСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден';uk='Файл не знайдено'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ДанныеФайлаКартинки, ДополнительныеПараметры.Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНеПрисоединенноеПолучениеВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНеПрисоединенноеПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ДанныеФайлаКартинки.ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНеПрисоединенноеПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНеПрисоединенноеПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ДанныеФайлаКартинки.УниверсальноеВремяИзменения = ВремяИзменения;
	
	НовоеИзображение = Изображения.Вставить(ВсегоИзображений);
	ЗаполнитьЗначенияСвойств(НовоеИзображение, ДополнительныеПараметры.ДанныеФайлаКартинки);
	НовоеИзображение.Расширение = СтрЗаменить(НовоеИзображение.Расширение, ".", "");
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	НовоеИзображение.АдресФайлаВХранилище = АдресФайлаВХранилище;
	АдресКартинки = АдресФайлаВХранилище;
	
	ВсегоИзображений = ВсегоИзображений + 1;
	ТекущееИзображение = ВсегоИзображений;
	
	ОбновитьСчетчикИзображений();
	
КонецПроцедуры


&НаСервере
Процедура УстановитьПометкуУдаленияИзображения(ПрисоединенныйФайлСсылка, Пометка)
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Пометка);	
	ПрисоединенныйФайлОбъект.Записать();
	
КонецПроцедуры

// Процедура требуется для обновления картинки, потому что при изменении доступности элементов формы пропадает иображение.
// Версия платформы 8.3.3.715.
&НаКлиенте
Процедура ОбновитьКартинку()
	
	АдресКартинкиКопия = АдресКартинки;
	ВызовСервера();
	АдресКартинки = АдресКартинкиКопия;
	
КонецПроцедуры	

&НаСервере
Процедура ВызовСервера()

	АдресКартинки = "";
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьПометкуУдаленияДляДобавленныхИзображений()

	Для Каждого Изображение Из ИзображенияПомеченныеНаУдаление Цикл
		Если Не Изображение.Пометка Тогда
			УстановитьПометкуУдаленияИзображения(Изображение.Ссылка,Истина);	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Доплатить = Параметры.Доплатить;
	Валюта = Параметры.Валюта;
	АдресВХранилищеТовары = Параметры.АдресВХранилищеТовары;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ТаблицаПодарочныеСертификаты = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаПодарочныеСертификаты, "Индекс");
	ТаблицаПодарочныеСертификаты.Колонки.Добавить("Остаток", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаПодарочныеСертификаты.Индекс КАК Индекс
	|ПОМЕСТИТЬ ТаблицаПодарочныеСертификаты
	|ИЗ
	|	&ТаблицаПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаПодарочныеСертификаты.Индекс КАК Индекс,
	|	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус,
	|
	|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата) КАК ДатаНачалаДействия,
	|	ВЫБОР
	|		КОГДА ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата), ДЕНЬ, ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата), НЕДЕЛЯ, ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата), МЕСЯЦ, ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата), КВАРТАЛ, ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата), ГОД, ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата), ДЕКАДА, ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата), ПОЛУГОДИЕ, ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		ИНАЧЕ ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, &Дата)
	|	КОНЕЦ КАК ДатаОкончанияДействия,
	
	|	(ПодарочныеСертификатыОстатки.СуммаОстаток
	|	* ВЫБОР
	|		КОГДА &Валюта <> ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыСертификаты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыСертификаты.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыСертификаты.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыСертификаты.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК Остаток
	|ИЗ
	|	ТаблицаПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&Дата, ПодарочныйСертификат В (ВЫБРАТЬ Т.ПодарочныйСертификат ИЗ ТаблицаПодарочныеСертификаты КАК Т)) КАК ПодарочныеСертификатыОстатки
	|	ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ТаблицаПодарочныеСертификаты.ПодарочныйСертификат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	|	ПО ТаблицаПодарочныеСертификаты.ПодарочныйСертификат = АктивацияПодарочныхСертификатов.ПодарочныйСертификат
	|		И (АктивацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&Дата, ПодарочныйСертификат В (ВЫБРАТЬ Т.ПодарочныйСертификат ИЗ ТаблицаПодарочныеСертификаты КАК Т)) КАК ИсторияПодарочныхСертификатов
	|	ПО ИсторияПодарочныхСертификатов.ПодарочныйСертификат = ТаблицаПодарочныеСертификаты.ПодарочныйСертификат
	|	
	|	// Определим курс валюты документа.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	ПО
	|		Истина
	|		
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыСертификаты
	|	ПО
	|		ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.Валюта = КурсыВалютыСертификаты.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПодарочныеСертификаты.Индекс
	|;
	|");
	
	Запрос.Параметры.Вставить("ТаблицаПодарочныеСертификаты", ТаблицаПодарочныеСертификаты);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	ПодарочныеСертификаты.Загрузить(ТаблицаПодарочныеСертификаты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокиТаблицы = ПодарочныеСертификаты.НайтиСтроки(Новый Структура("Индекс",Выборка.Индекс));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокиТаблицы[0], Выборка, ,"Индекс");
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаОплаты = 0;
	Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
		СуммаОплаты = СуммаОплаты + СтрокаТЧ.Сумма;
	КонецЦикла;
	
	ОсталосьДоплатить = Доплатить - СуммаОплаты;
	
	Элементы.ПодарочныеСертификатыСумма.Заголовок   = Элементы.ПодарочныеСертификатыСумма.Заголовок + " " + "(" + Валюта + ")";
	Элементы.ПодарочныеСертификатыОстаток.Заголовок = Элементы.ПодарочныеСертификатыОстаток.Заголовок + " " + "(" + Валюта + ")";
	Элементы.ГруппаИтого.Заголовок = Элементы.ГруппаИтого.Заголовок + " " + "(" + Валюта + ")";

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода,СчитывательМагнитныхКарт");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ОбработатьДанныеСчитывателяМагнитныхКарт(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "СчитанПодарочныйСертификат"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ОбработатьПодарочныйСертификат(Параметр.ПодарочныйСертификат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарочныеСертификаты

&НаКлиенте
Процедура ПодарочныеСертификатыПриИзменении(Элемент)
	
	СуммаОплаты = 0;
	Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
		СуммаОплаты = СуммаОплаты + СтрокаТЧ.Сумма;
	КонецЦикла;
	
	ОсталосьДоплатить = Доплатить - СуммаОплаты;

КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПодарочныйСертификатПриИзменении(Элемент)
	
	ПодарочныйСертификат = Элементы.ПодарочныеСертификаты.ТекущиеДанные.ПодарочныйСертификат;
	ОбработатьПодарочныйСертификат(ПодарочныйСертификат, Элементы.ПодарочныеСертификаты.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	ПроверитьОплатуПоСегментам(Отказ);
	
	ПроверитьДублиСтрокВТабличнойЧасти(Отказ);
	
	Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
		
		Если СтрокаТЧ.Остаток < СтрокаТЧ.Сумма И СтрокаТЧ.Сумма > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сумма оплаты превышает остаток денежных средств на сертификате ""%1"" в строке %2';uk='Сума оплати перевищує залишок грошових коштів на сертифікаті ""%1"" в рядку %2'"),
					СтрокаТЧ.ПодарочныйСертификат, ПодарочныеСертификаты.Индекс(СтрокаТЧ) + 1),
				Неопределено,
				"ПодарочныеСертификаты["+ПодарочныеСертификаты.Индекс(СтрокаТЧ)+"].Сумма",
				,
				Отказ);
		КонецЕсли;
		
		Если СтрокаТЧ.Сумма = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнено поле ""Сумма"" в строке %1';uk='Не заповнене поле ""Сума"" в рядку %1'"),
					ПодарочныеСертификаты.Индекс(СтрокаТЧ) + 1),
				Неопределено,
				"ПодарочныеСертификаты["+ПодарочныеСертификаты.Индекс(СтрокаТЧ)+"].Сумма",
				,
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ПодарочныйСертификат) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнено поле ""Подарочный сертификат"" в строке %1';uk='Не заповнене поле ""Подарунковий сертифікат"" в рядку %1'"),
					ПодарочныеСертификаты.Индекс(СтрокаТЧ) + 1),
				Неопределено,
				"ПодарочныеСертификаты["+ПодарочныеСертификаты.Индекс(СтрокаТЧ)+"].ПодарочныйСертификат",
				,
				Отказ);
		КонецЕсли;
		
		Если СтрокаТЧ.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован")
			И СтрокаТЧ.ДатаОкончанияДействия < ТекущаяДата Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Подарочный сертификат в строке %1 просрочен. Дата окончания действия %2.';uk='Подарунковий сертифікат в рядку %1 прострочений. Дата закінчення дії %2.'"),
					ПодарочныеСертификаты.Индекс(СтрокаТЧ) + 1, СтрокаТЧ.ДатаОкончанияДействия),
				Неопределено,
				"ПодарочныеСертификаты["+ПодарочныеСертификаты.Индекс(СтрокаТЧ)+"].ПодарочныйСертификат",
				,
				Отказ);
		КонецЕсли;
	
		Если СтрокаТЧ.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.ЧастичноПогашен")
			И СтрокаТЧ.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Активирован") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Подарочный сертификат в строке %1 не может быть использован для оплаты. Статус сертификата ""%2"".';uk='Подарунковий сертифікат в рядку %1 не може бути використаний для оплати. Статус сертифіката ""%2"".'"),
					ПодарочныеСертификаты.Индекс(СтрокаТЧ) + 1, СтрокаТЧ.Статус),
				Неопределено,
				"ПодарочныеСертификаты["+ПодарочныеСертификаты.Индекс(СтрокаТЧ)+"].ПодарочныйСертификат",
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;

	Если Не Отказ Тогда
		Закрыть(ПоместитьТабличнуюЧастьПодарочныеСертификатыВХранилище(ЭтаФорма.ВладелецФормы.УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьПодарочныйСертификат(Команда)
	
	ОткрытьФорму(
		"Справочник.ПодарочныеСертификаты.Форма.СчитываниеПодарочногоСертификата",
		Новый Структура("НеИспользоватьРучнойВвод", Ложь),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодарочныеСертификаты.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодарочныеСертификаты.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Активирован);
	СписокЗначений.Добавить(Перечисления.СтатусыПодарочныхСертификатов.ЧастичноПогашен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодарочныеСертификаты.ДатаОкончанияДействия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТекущаяДата");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодарочныеСертификаты.Остаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);

КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ПодарочныеСертификатыКлиент.ОбработатьПолученныйКодНаКлиенте(
		ЭтаФорма,
		МассивШтрихкодов[0].Штрихкод,
		ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСчитывателяМагнитныхКарт(Данные)
	
	ПодарочныеСертификатыКлиент.ОбработатьПолученныйКодНаКлиенте(
		ЭтаФорма,
		Данные,
		ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод"));
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПоместитьТабличнуюЧастьПодарочныеСертификатыВХранилище(Идентификатор)
	
	Возврат ПоместитьВоВременноеХранилище(ПодарочныеСертификаты.Выгрузить(), Идентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьПодарочныйСертификат(ПодарочныйСертификат, ИдентификаторСтроки = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ПодарочныеСертификаты.Владелец.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыСертификаты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыСертификаты.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыСертификаты.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыСертификаты.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&Дата, ПодарочныйСертификат = &Ссылка) КАК ПодарочныеСертификатыОстатки
	|		ПО ПодарочныеСертификатыОстатки.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыСертификаты
	|ПО 
	|	ПодарочныеСертификаты.Владелец.Валюта = КурсыВалютыСертификаты.Валюта
	|	И ПодарочныеСертификаты.Ссылка = &Ссылка
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|	
	|ГДЕ
	|	ПодарочныеСертификаты.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПодарочныйСертификат);
	Запрос.УстановитьПараметр("Дата",   ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СуммаОплаты = 0;
	Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
		Если СтрокаТЧ.ПодарочныйСертификат <> ПодарочныйСертификат Тогда
			СуммаОплаты = СуммаОплаты + СтрокаТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	ОсталосьДоплатить = Доплатить - СуммаОплаты;
	
	Если Выборка.Следующий() Тогда
		
		Если ИдентификаторСтроки = Неопределено Тогда
			
			НайденныеСтроки = ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ПодарочныйСертификат", ПодарочныйСертификат));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденнаяСтрока = ПодарочныеСертификаты.Добавить();
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
		Иначе
			НайденнаяСтрока = ПодарочныеСертификаты.НайтиПоИдентификатору(ИдентификаторСтроки);
		КонецЕсли;
		
		Данные = ПодарочныеСертификатыВызовСервера.ПолучитьДанныеПодарочногоСертификата(ПодарочныйСертификат);
		
		НайденнаяСтрока.ПодарочныйСертификат  = ПодарочныйСертификат;
		НайденнаяСтрока.Остаток               = Выборка.Остаток;
		НайденнаяСтрока.Сумма                 = Мин(ОсталосьДоплатить, Выборка.Остаток);
		НайденнаяСтрока.Статус                = Данные.Статус;
		НайденнаяСтрока.ДатаНачалаДействия    = Данные.ДатаНачалаДействия;
		НайденнаяСтрока.ДатаОкончанияДействия = Данные.ДатаОкончанияДействия;
		
		СуммаОплаты = СуммаОплаты + НайденнаяСтрока.Сумма;
		
		ОсталосьДоплатить =  ОсталосьДоплатить - НайденнаяСтрока.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублиСтрокВТабличнойЧасти(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|ТаблицаПроверки.НомерСтроки, 
	|ТаблицаПроверки.ПодарочныйСертификат
	|	ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПроверки.НомерСтроки) КАК НомерСтроки,
	|	СУММА(1) КАК КоличествоДублей,
	|	ТаблицаПроверки.ПодарочныйСертификат
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|
	|СГРУППИРОВАТЬ ПО 
	|	ТаблицаПроверки.ПодарочныйСертификат
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки,
	|	ДублирующиесяСтроки.НомерСтроки КАК ПерваяСтрока
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаПроверки.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки 
	|	И ТаблицаПроверки.ПодарочныйСертификат = ДублирующиесяСтроки.ПодарочныйСертификат");
	
	Таблица = ПодарочныеСертификаты.Выгрузить(,"ПодарочныйСертификат");
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(Таблица, "НомерСтроки");
	
	Запрос.УстановитьПараметр("ТаблицаПроверки", Таблица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru='Данные в строке %НомерСтроки% списка ""Подарочные сертификаты"" совпадают с данными в строке %ПерваяСтрока% по значению поля ""Подарочный сертификат"".';uk='Дані в рядку %НомерСтроки% списку ""Подарункові сертифікати"" збігаються з даними у рядку %ПерваяСтрока% за значенням поля ""Подарунковий сертифікат"".'");
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки + 1);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПерваяСтрока%", Выборка.ПерваяСтрока + 1);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Неопределено,
			"ПодарочныеСертификаты["+Выборка.НомерСтроки+"].ПодарочныйСертификат",
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОплатуПоСегментам(Отказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодарочныеСертификаты.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаПодарочныеСертификаты.Сумма КАК Сумма,
	|	ТаблицаПодарочныеСертификаты.Остаток КАК Остаток
	|ПОМЕСТИТЬ ТаблицаПодарочныеСертификаты
	|ИЗ
	|	&ТаблицаПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Сегмент КАК Сегмент,
	|	СУММА(Товары.Сумма) КАК Сумма
	|ПОМЕСТИТЬ СуммыПоСегментам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		НоменклатураСегмента.Сегмент КАК Сегмент
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|			ПО ТаблицаТовары.Номенклатура = НоменклатураСегмента.Номенклатура
	|				И ТаблицаТовары.Характеристика = НоменклатураСегмента.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура,
	|		ТаблицаТовары.Характеристика,
	|		ТаблицаТовары.Сумма,
	|		ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|			ПО ТаблицаТовары.Номенклатура = НоменклатураСегмента.Номенклатура
	|				И ТаблицаТовары.Характеристика = НоменклатураСегмента.Характеристика) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Сегмент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Сегмент КАК Сегмент,
	|	СУММА(Таблица.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(Таблица.Сумма) КАК Сумма,
	|	СУММА(Таблица.Остаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.СегментНоменклатуры КАК Сегмент,
	|		0 КАК Сумма,
	|		СУММА(ТаблицаПодарочныеСертификаты.Сумма) КАК СуммаОплаты,
	|		СУММА(ТаблицаПодарочныеСертификаты.Остаток) КАК Остаток
	|	ИЗ
	|		ТаблицаПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.СегментНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СуммыПоСегментам.Сегмент,
	|		СуммыПоСегментам.Сумма,
	|		0,
	|		0
	|	ИЗ
	|		СуммыПоСегментам КАК СуммыПоСегментам) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Сегмент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодарочныеСертификаты.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец КАК ВидПодарочногоСертификата,
	|	ТаблицаПодарочныеСертификаты.ПодарочныйСертификат.Владелец.СегментНоменклатуры КАК Сегмент
	|ИЗ
	|	ТаблицаПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты");
	
	ТаблицаПодарочныеСертификаты = ПодарочныеСертификаты.Выгрузить(,"ПодарочныйСертификат,Сумма,Остаток");
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаПодарочныеСертификаты, "НомерСтроки");
	
	Запрос.УстановитьПараметр("ТаблицаПодарочныеСертификаты", ТаблицаПодарочныеСертификаты);
	Запрос.УстановитьПараметр("ТаблицаТовары", ПолучитьИзВременногоХранилища(АдресВХранилищеТовары));
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапросов[3].Выбрать();
	ТаблицаСертификатыИВиды = РезультатыЗапросов[4].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОплаты > 0 И Выборка.Сумма = 0 Тогда
			
			СтрокиПодарочныхСертификатов = ТаблицаСертификатыИВиды.НайтиСтроки(Новый Структура("Сегмент",Выборка.Сегмент));
			
			Для Каждого СтрокаТЧ Из СтрокиПодарочныхСертификатов Цикл
			
				ТекстСообщения = НСтр("ru='Сертификаты вида ""%ВидПодарочногоСертификата%"" предназначены
                                            |только для оплаты номенклатурных позиций из сегмента ""%Сегмент%"". Оплата данного чека такими сертификатами невозможна.'
                                            |;uk='Сертифікати виду ""%ВидПодарочногоСертификата%"" призначені
                                            |тільки для оплати номенклатурних позицій з сегменту ""%Сегмент%"". Оплата даного чека такими сертифікатами неможлива.'");
				ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ВидПодарочногоСертификата%", ТаблицаСертификатыИВиды.Найти(Выборка.Сегмент, "Сегмент").ВидПодарочногоСертификата);
				ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%Сегмент%", Выборка.Сегмент);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Неопределено,
					"ПодарочныеСертификаты["+СтрокаТЧ.НомерСтроки+"].ПодарочныйСертификат",
					,
					Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Выборка.СуммаОплаты > 0 И Выборка.Сумма > 0 И Выборка.Сумма < Выборка.СуммаОплаты Тогда
			
			ВидыПодарочныхСертификатов = Новый Массив;
			Для Каждого СтрокаТЧ Из ТаблицаСертификатыИВиды.НайтиСтроки(Новый Структура("Сегмент",Выборка.Сегмент)) Цикл
				ПредставлениеВида = """" + СтрокаТЧ.ВидПодарочногоСертификата + """";
				Если ВидыПодарочныхСертификатов.Найти(ПредставлениеВида) = Неопределено Тогда
					ВидыПодарочныхСертификатов.Добавить(ПредставлениеВида);
				КонецЕсли;
			КонецЦикла;
			
			СтрокиПодарочныхСертификатов = ТаблицаСертификатыИВиды.НайтиСтроки(Новый Структура("Сегмент",Выборка.Сегмент));
			Для Каждого СтрокаТЧ Из СтрокиПодарочныхСертификатов Цикл
			
				ТекстСообщения = НСтр("ru='Сертификаты вида %ВидПодарочногоСертификата% предназначены
                                            |только для оплаты номенклатурных позиций из сегмента ""%Сегмент%"". Данными сертификатами можно оплатить только %Сумма% %Валюта%.'
                                            |;uk='Сертифікати виду %ВидПодарочногоСертификата% призначені
                                            |тільки для оплати номенклатурних позицій з сегменту ""%Сегмент%"". Цими сертифікатами можна оплатити лише %Сумма% %Валюта%.'");
				ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ВидПодарочногоСертификата%", СтрСоединить(ВидыПодарочныхСертификатов, ","));
				ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%Сегмент%", Выборка.Сегмент);
				ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%Сумма%", Выборка.Сумма);
				ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%Валюта%", Валюта);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Неопределено,
					"ПодарочныеСертификаты["+СтрокаТЧ.НомерСтроки+"].ПодарочныйСертификат",
					,
					Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

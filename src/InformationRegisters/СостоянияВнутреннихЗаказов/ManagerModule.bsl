#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на заказ расчитывает и записывает в регистр сведений состояние заказа
//
//	Параметры:
//		Заказы - ДокументСсылка - документ, в рамках проведения которого перерасчитывается состояние
//		Отказ - Булево - признак прерывания обработки проведения
//		УдалениеПоведения - Булево - признак обработки удаления проведения
//
Процедура ОтразитьСостояниеЗаказа(МассивЗаказов, Отказ) Экспорт
	
	ЗаказыПоТипам = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивЗаказов);
	
	Для Каждого Элемент Из ЗаказыПоТипам Цикл
		
		ТипЗаказа = Элемент.Ключ;
		Заказы = Элемент.Значение;
		
		Если ТипЗаказа = "Документ.ЗаказНаПеремещение"
				Или ТипЗаказа = "Документ.ЗаказНаСборку"
				Или ТипЗаказа = "Документ.ЗаказНаВнутреннееПотребление" Тогда
			
			Таблица = ТаблицаИзмененийСостоянийЗаказов(ТипЗаказа, Заказы);
			ЗаписатьСостояния(Таблица);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаИзмененийСостоянийЗаказов(ТипДокумента, МассивЗаказов)
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипДокумента);
	СтруктураПараметровДокумента = МенеджерДокумента.ПараметрыДляРасчетаСостояний();
	
	ВременныеТаблицыДокумента       = МенеджерДокумента.ВременныеТаблицыДокументаДляРасчетаСостояний();
	ВременнаяТаблицаОстаткиЗаказов  = СтруктураПараметровДокумента.МодульОстаткиЗаказов.ВременнаяТаблицаОстаткиЗаказов();
	
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапроса.Добавить(ВременныеТаблицыДокумента.ТоварыДокумента,    "");
	ТекстыЗапроса.Добавить(ВременныеТаблицыДокумента.РеквизитыДокумента, "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОбеспечениеЗаказа(),          "");
	
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОстаткиЗаказов,                     "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОстаткиКОтгрузке(),                 "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОстаткиКПоступлению(),              "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаРасхожденияНакладнаяОрдер(),        "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОборотыКОтгрузкеСОрдерныхСкладов(), "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаОстаткиНаличияПодЗаказ(),    "");
	
	ТекстыЗапроса.Добавить(ВременнаяТаблицаЧастичноВНаличии(), "");
	ТекстыЗапроса.Добавить(ТекстЗапросаРасчетаСостояний(),     "Таблица");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказа", СтруктураПараметровДокумента.КонтролироватьЗакрытиеЗаказа);
	Запрос.УстановитьПараметр("СтатусВПроцессеПоступления", СтруктураПараметровДокумента.СтатусВПроцессеПоступления);
	Запрос.УстановитьПараметр("СтатусВПроцессеОтгрузки", СтруктураПараметровДокумента.СтатусВПроцессеОтгрузки);
	Запрос.УстановитьПараметр("СтатусГотовКОтгрузке", СтруктураПараметровДокумента.СтатусГотовКОтгрузке);
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("МенеджерСоздаетОрдера",
		Константы.РежимФормированияРасходныхОрдеров.Получить() = Перечисления.РежимыФормированияРасходныхОрдеров.Менеджером);
	
	Таблицы = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, , Истина);

	Возврат Таблицы.Таблица;

КонецФункции

Функция ТекстЗапросаРасчетаСостояний()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                        КАК Заказ,
		|	Таблица.Состояние                     КАК Состояние,
		|	Таблица.ЕстьРасхожденияОрдерНакладная КАК ЕстьРасхожденияОрдерНакладная
		|ИЗ(
		|ВЫБРАТЬ
		|	ВтРеквизитыДокумента.Ссылка КАК Ссылка,
		|
		|	ВЫБОР КОГДА НЕ ВтРеквизитыДокумента.Проведен ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ПустаяСсылка)
		|
		|		КОГДА ВТОбеспечениеЗаказа.Ссылка ЕСТЬ NULL ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ПустаяСсылка)
		|
		|		КОГДА ВТОбеспечениеЗаказа.ЕстьКОбеспечению ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ГотовКОбеспечению)
		|
		|		КОГДА ВТОбеспечениеЗаказа.ЕстьРезервироватьКДате ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ОжидаетсяОбеспечение)
		|
		|		КОГДА ВТОбеспечениеЗаказа.ЕстьКОбеспечениюОбособленно И НЕ ВтЧастичноВНаличии.Ссылка ЕСТЬ NULL ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ОжидаетсяОбеспечение)
		|
		|		КОГДА НЕ ВтРеквизитыДокумента.СтатусКОтгрузке ИЛИ НЕ ВТОбеспечениеЗаказа.ВсеОтгрузить ТОГДА
		|
		|			&СтатусГотовКОтгрузке
		|
		|		КОГДА &МенеджерСоздаетОрдера И ВтОборотыКОтгрузке.Расход = 0 ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ГотовКОтгрузке)
		|
		|		КОГДА НЕ ВтОстаткиЗаказов.Распоряжение ЕСТЬ NULL ТОГДА
		|
		|			&СтатусВПроцессеОтгрузки
		|
		|		КОГДА НЕ ВтОстаткиКОтгрузке.Распоряжение ЕСТЬ NULL ТОГДА
		|
		|			&СтатусВПроцессеОтгрузки
		|
		|		КОГДА НЕ ВтОстаткиКПоступлению.Распоряжение ЕСТЬ NULL ТОГДА
		|
		|			&СтатусВПроцессеПоступления
		|
		|		КОГДА НЕ ВтРеквизитыДокумента.СтатусЗакрыт И &КонтролироватьЗакрытиеЗаказа ТОГДА
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ГотовКЗакрытию)
		|
		|		ИНАЧЕ
		|
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.Закрыт)
		|
		|	КОНЕЦ     КАК Состояние,
		|
		|	ВЫБОР КОГДА ВтРасхожденияНакладнаяОрдер.Распоряжение ЕСТЬ NULL ТОГДА
		|				ЛОЖЬ
		|			ИНАЧЕ
		|				ИСТИНА
		|		КОНЕЦ КАК ЕстьРасхожденияОрдерНакладная,
		|
		|	РегистрСостояний.Состояние                     КАК СостояниеДоИзменения,
		|	РегистрСостояний.ЕстьРасхожденияОрдерНакладная КАК ЕстьРасхожденияОрдерНакладнаяДоИзменения
		|
		|ИЗ
		|	ВтРеквизитыДокумента КАК ВтРеквизитыДокумента
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбеспечениеЗаказа КАК ВТОбеспечениеЗаказа
		|		ПО ВТОбеспечениеЗаказа.Ссылка = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЧастичноВНаличии КАК ВтЧастичноВНаличии
		|		ПО ВтЧастичноВНаличии.Ссылка = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОборотыКОтгрузке КАК ВтОборотыКОтгрузке
		|		ПО ВтОборотыКОтгрузке.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиЗаказов КАК ВтОстаткиЗаказов
		|		ПО ВтОстаткиЗаказов.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиКОтгрузке КАК ВтОстаткиКОтгрузке
		|		ПО ВтОстаткиКОтгрузке.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиКПоступлению КАК ВтОстаткиКПоступлению
		|		ПО ВтОстаткиКПоступлению.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасхожденияНакладнаяОрдер КАК ВтРасхожденияНакладнаяОрдер
		|		ПО ВтРасхожденияНакладнаяОрдер.Распоряжение = ВтРеквизитыДокумента.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВнутреннихЗаказов КАК РегистрСостояний
		|		ПО РегистрСостояний.Заказ = ВтРеквизитыДокумента.Ссылка) КАК Таблица
		|ГДЕ
		|	Таблица.Состояние <> Таблица.СостояниеДоИзменения ИЛИ Таблица.СостояниеДоИзменения ЕСТЬ NULL
		|	ИЛИ Таблица.ЕстьРасхожденияОрдерНакладная <> Таблица.ЕстьРасхожденияОрдерНакладнаяДоИзменения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаОбеспечениеЗаказа()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Ссылка КАК Ссылка,
		|	
		|	МАКСИМУМ(Набор.ЕстьКОбеспечению)            КАК ЕстьКОбеспечению,
		|	МАКСИМУМ(Набор.ЕстьРезервироватьКДате)      КАК ЕстьРезервироватьКДате,
		|	МАКСИМУМ(Набор.ЕстьКОбеспечениюОбособленно) КАК ЕстьКОбеспечениюОбособленно,
		|	МИНИМУМ(Набор.ВсеОтгрузить)                 КАК ВсеОтгрузить
		|	
		|ПОМЕСТИТЬ ВТОбеспечениеЗаказа
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Ссылка КАК Ссылка,
		|		
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
		|						ИЛИ Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|							И Таблица.ЭтоТовар ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ      КАК ЕстьКОбеспечению,
		|		
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
		|						И Таблица.ДатаОтгрузки > &ТекущаяДата ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ      КАК ЕстьРезервироватьКДате,
		|			
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) И Таблица.ЭтоТовар ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ      КАК ЕстьКОбеспечениюОбособленно,
		|	
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения В(
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ      КАК ВсеОтгрузить
		|	
		|	ИЗ
		|		ВтТоварыДокумента КАК Таблица) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Ссылка";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ВременнаяТаблицаОстаткиКОтгрузке()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ДокументОтгрузки КАК Распоряжение,
		|	Таблица.КОтгрузкеОстаток КАК Количество
		|ПОМЕСТИТЬ ВтОстаткиКОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&МассивЗаказов)) КАК Таблица";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаОстаткиКПоступлению()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ДокументПоступления КАК Распоряжение,
		|	Таблица.КПоступлениюОстаток КАК Количество
		|ПОМЕСТИТЬ ВтОстаткиКПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления В (&МассивЗаказов)) КАК Таблица";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаРасхожденияНакладнаяОрдер()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Набор.Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ ВтРасхожденияНакладнаяОрдер
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.ДокументОтгрузки КАК Распоряжение,
		|
		|		Таблица.Номенклатура     КАК Номенклатура,
		|		Таблица.Характеристика   КАК Характеристика,
		|		Таблица.Склад            КАК Склад,
		|		Таблица.Назначение       КАК Назначение,
		|		Таблица.Серия            КАК Серия
		|
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,, ДокументОтгрузки В (&МассивЗаказов)) КАК Таблица
		|ГДЕ
		|	Таблица.КОформлениюРасход <> Таблица.КОтгрузкеРасход + Таблица.СобраноПриход
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Таблица.ДокументПоступления КАК Распоряжение,
		|
		|		Таблица.Номенклатура     КАК Номенклатура,
		|		Таблица.Характеристика   КАК Характеристика,
		|		Таблица.Склад            КАК Склад,
		|		Таблица.Назначение       КАК Назначение,
		|		Таблица.Серия            КАК Серия
		|
		|ИЗ
		|	РегистрНакопления.ТоварыКОформлениюПоступления.Остатки(,ДокументПоступления В (&МассивЗаказов)) КАК Таблица
		|ГДЕ
		|	Таблица.КОформлениюОстаток <> 0
		|
		|) КАК Набор";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаОборотыКОтгрузкеСОрдерныхСкладов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ДокументОтгрузки  КАК Распоряжение,
		|	Таблица.КОтгрузкеПриход   КАК Приход,
		|	Таблица.КОтгрузкеРасход + Таблица.КСборкеПриход + Таблица.СобираетсяПриход + Таблица.СобраноПриход КАК Расход //все ордера
		|ПОМЕСТИТЬ ВтОборотыКОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,,
		|		ДокументОтгрузки В (&МассивЗаказов)
		|		И Склад В(
		|			ВЫБРАТЬ
		|				СпрСклады.Ссылка КАК Склад
		|			ИЗ
		|				Справочник.Склады КАК СпрСклады
		|			ГДЕ
		|				СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата)) КАК Таблица";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ВременнаяТаблицаОстаткиНаличияПодЗаказ()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Назначение        КАК Назначение,
		|	Таблица.Номенклатура      КАК Номенклатура,
		|	Таблица.Характеристика    КАК Характеристика,
		|	Таблица.Склад             КАК Склад,
		|
		|	Таблица.НаличиеПодЗаказОстаток КАК НаличиеПодЗаказОстаток
		|
		|ПОМЕСТИТЬ ВтОстаткиНаличияПодЗаказ
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|		Назначение В(
		|			ВЫБРАТЬ
		|				СпрНазначения.Ссылка КАК Назначение
		|			ИЗ
		|				Справочник.Назначения КАК СпрНазначения
		|			ГДЕ
		|				СпрНазначения.Заказ В(&МассивЗаказов))) КАК Таблица";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ВременнаяТаблицаЧастичноВНаличии()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтЧастичноВНаличии
		|ИЗ
		|	ВтТоварыДокумента КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиНаличияПодЗаказ КАК ТаблицаОстатки
		|		ПО ТаблицаОстатки.Назначение     = ТаблицаТовары.Назначение
		|		 И ТаблицаОстатки.Номенклатура   = ТаблицаТовары.Номенклатура
		|		 И ТаблицаОстатки.Характеристика = ТаблицаТовары.Характеристика
		|		 И ТаблицаОстатки.Склад          = ТаблицаТовары.Склад
		|
		|ГДЕ
		|	ТаблицаТовары.ЭтоТовар
		|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Назначение, ТаблицаТовары.Номенклатура, ТаблицаТовары.Характеристика, ТаблицаТовары.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаТовары.Количество) > МАКСИМУМ(ЕСТЬNULL(ТаблицаОстатки.НаличиеПодЗаказОстаток, 0))";
	
	Возврат ТекстЗапроса
	
КонецФункции

Процедура ЗаписатьСостояния(Таблица)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
	
		Набор = РегистрыСведений.СостоянияВнутреннихЗаказов.СоздатьНаборЗаписей();
		Набор.Отбор.Заказ.Установить(СтрокаТаблицы.Заказ);
		
		Если Не СтрокаТаблицы.Состояние.Пустая() Тогда
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
		КонецЕсли;
		
		Попытка
			Набор.Записать(Истина);
		Исключение
			
			ТекстСообщения = НСтр("ru='Не удалось отразить состояние заказа: %Ссылка% по причине: %Причина%';uk='Не вдалося відобразити стан замовлення: %Ссылка% по причині: %Причина%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Заказ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			СтрокаТаблицы.Заказ.Метаданные(), СтрокаТаблицы.Заказ, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииБсп

#Область НастройкиПоУмолчанию

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИмяФормы             - Строка - имя формы
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",    Ложь);
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",       НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",        "АвтоматическаяСинхронизация");
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",          "АвтоматическаяСинхронизация");
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",      Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	СтруктураНастроек.Вставить("УправленческаяОрганизация",          Справочники.Организации.УправленческаяОрганизация);
	СтруктураНастроек.Вставить("ВыгружатьУправленческуюОрганизацию", Ложь);
	СтруктураНастроек.Вставить("ВыгружатьАналитикуПоСкладам",        Истина);
	СтруктураНастроек.Вставить("ВыгружатьЦеныНоменклатуры",          Ложь);
	СтруктураНастроек.Вставить("ВерсияФорматаОбмена",                "1.6.BAS");
	
	Если ИдентификаторНастройки = "Казначейство275" Тогда
		СтруктураНастроек.Вставить("ВерсияФорматаОбмена", "1.1");
	КонецЕсли;

	СтруктураТабличнойЧастиОрганизации = Новый Структура("Организация", Новый Массив);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	СтруктураТабличнойЧастиВидыЦен = Новый Структура("ВидЦенНоменклатуры", Новый Массив);
	СтруктураНастроек.Вставить("ВидыЦенНоменклатуры", СтруктураТабличнойЧастиВидыЦен);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИмяФормы             - Строка - имя формы
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	
	// Технологические настройки.
	СтруктураНастроек.Вставить("ВариантНастройки", ИдентификаторНастройки);
	СтруктураНастроек.Вставить("ВерсияФорматаОбмена", "1.1");
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	
	// Основные настройки.
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ВыгружатьАналитикуПоСкладам",  Истина);
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",  "АвтоматическаяСинхронизация");
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",    "АвтоматическаяСинхронизация");
	
	Если ИдентификаторНастройки = "ОбменУТ11" Или ИдентификаторНастройки = "ОбменУТБП"
		Или ИдентификаторНастройки = "ОбменБП30" Или ИдентификаторНастройки = "ОбменБПКОРП30" Тогда
		СтруктураНастроек.Вставить("ОтправлятьДокументыПокупкиПродажи", Ложь);
		СтруктураНастроек.Вставить("ОтправлятьСкладскиеДокументы",      Ложь);
		СтруктураНастроек.Вставить("ОтправлятьАвансовыеОтчеты",         Ложь);
	Иначе
		СтруктураНастроек.Вставить("ОтправлятьДокументыПокупкиПродажи", Истина);
		СтруктураНастроек.Вставить("ОтправлятьСкладскиеДокументы",      Истина);
		СтруктураНастроек.Вставить("ОтправлятьАвансовыеОтчеты",         Истина);
	КонецЕсли;
	
	// Отбор по организациям
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация",      Новый Массив);
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация_Ключ", Новый Массив);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИмяФормы             - Строка - имя формы
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		Или ИдентификаторНастройки = "Казначейство275" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СкладПоУмолчанию", Неопределено);
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИмяФормы             - Строка - имя формы
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
// 
// Возвращаемое значение:
//      Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НоменклатурнаяГруппаПоУмолчанию",                  "");
	СтруктураНастроек.Вставить("НоменклатурнаяГруппаПоУмолчанию_Ключ",             "");
	СтруктураНастроек.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров", "");
	СтруктураНастроек.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров_Ключ", "");
	СтруктураНастроек.Вставить("СкладПоУмолчанию",                                 "");
	СтруктураНастроек.Вставить("СкладПоУмолчанию_Ключ",                            "");
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область ВыводОписаний

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru='Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru='Любая программа с поддержкой универсального формата данных';uk='Будь-яка програма з підтримкою універсального формату даних'");
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки = "") Экспорт
	
	ПоясняющийТекст = "";
	
		ПоясняющийТекст = НСтр("ru='Позволяет синхронизировать данные между любыми программами, поддерживающими универсальный формат обмена ""Enterprise Data"".';uk='Дозволяє синхронізувати дані між будь-якими програмами, що підтримують універсальний формат обміну ""Enterprise Data"".'");
	
	Возврат ПоясняющийТекст;
	
КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки = "") Экспорт
	Возврат "ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ПодробнаяИнформация";
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//      НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                           полученная при помощи функции НастройкаОтборовНаУзле().
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//     Строка - описание ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат "";
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		ТекстОписания = НСтр("ru='Вся нормативно-справочная информация регистрируется к отправке';uk='Вся нормативно-довідкова інформація реєструється до відправлення'");
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
		ТекстОписания = НСтр("ru='К отправке регистрируется только используемая в документах нормативно-справочная информация';uk='До відправлення реєструється тільки нормативно-довідкова інформація, що використовується у документах'");
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		ТекстОписания = НСтр("ru='Данные отправляться не будут';uk='Дані відправлятися не будуть'");
	КонецЕсли;

	ТекстОписания = ТекстОписания + ";";
	
	Если НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
		
		Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;';uk='Документи автоматично реєструються до відправлення починаючи з %ДатаНачала%;'");
			ТекстОписания = СтрЗаменить(ТекстОписания,"%ДатаНачала%", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=D"));
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Все документы автоматически регистрируются к отправке;';uk='Всі документи автоматично реєструються до відправлення;'");
		КонецЕсли;
		
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Пользователь самостоятельно отбирает и регистрирует документы к отправке;';uk='Користувач самостійно відбирає і реєструє документи до відправки;'");
		
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И Не НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Документы не отправляются;';uk='Документи не надсилаються;'");
		
	КонецЕсли;
	
	Если ИдентификаторНастройки <> "Казначейство275" Тогда
		Если НастройкаОтборовНаУзле.ВыгружатьАналитикуПоСкладам Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Выгружать аналитику по складам';uk='Вивантажувати аналітику по складах'");
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Не выгружать аналитику по складам';uk='Не вивантажувати аналітику по складах'");
		КонецЕсли;
		ТекстОписания = ТекстОписания + ";";
	КонецЕсли;
	
	Если Не НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		
		ОтборПоОрганизациямСтрокой = НСтр("ru='Отправлять данные по всем организациям';uk='Надсилати дані по всіх організаціях'");
		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
			
			КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			
			ОтборПоОрганизациямСтрокой = НСтр("ru='Отправлять данные с отбором по организациям: %ПредставлениеКоллекции%';uk='Надсилати дані з відбором по організаціям: %ПредставлениеКоллекции%'");
			ОтборПоОрганизациямСтрокой = СтрЗаменить(ОтборПоОрганизациямСтрокой, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
			
		ИначеЕсли Не НастройкаОтборовНаУзле.ВыгружатьУправленческуюОрганизацию Тогда
			ОтборПоОрганизациямСтрокой = НСтр("ru='Отправлять данные по всем организациям, кроме управленческой';uk='Надсилати дані по всім організаціям, крім управлінської'");
		КонецЕсли;
		
		ТекстОписания = ТекстОписания + Символы.ПС + ОтборПоОрганизациямСтрокой;
		
	КонецЕсли;
	Если НастройкаОтборовНаУзле.ВыгружатьЦеныНоменклатуры Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ВидыЦенНоменклатуры.ВидЦенНоменклатуры;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Отправлять данные о ценах номенклатуры: %ПредставлениеКоллекции%;';uk='Надсилати дані про ціни номенклатури: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	ИначеЕсли Не НастройкаОтборовНаУзле.ВыгружатьЦеныНоменклатуры
		И НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Цены номенклатуры не выгружаются;';uk='Ціни номенклатури не вивантажуються;'");
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//      ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                              полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Строка - описание для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		Или ИдентификаторНастройки = "Казначейство275" Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = НСтр("ru='Склад по умолчанию для документов движения ТМЦ: %Значение%';uk='Склад по умовчанню для документів руху ТМЦ: %Значение%'");
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СкладПоУмолчанию) Тогда
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.СкладПоУмолчанию));
	Иначе
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru='не указан';uk='не зазначений'"));
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//      НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                           полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Строка - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = "";
	
	Если ИдентификаторНастройки <> "ОбменУТБП" Тогда
		Если НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
			ТекстОписания = НСтр("ru='Вся нормативно-справочная информация регистрируется к отправке';uk='Вся нормативно-довідкова інформація реєструється до відправлення'");
		ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
			ТекстОписания = НСтр("ru='К отправке регистрируется только используемая в документах нормативно-справочная информация';uk='До відправлення реєструється тільки нормативно-довідкова інформація, що використовується у документах'");
		ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
			ТекстОписания = НСтр("ru='Данные отправляться не будут';uk='Дані відправлятися не будуть'");
		КонецЕсли;

		ТекстОписания = ТекстОписания + ";";
		
		Если НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
			
			Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
				ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;';uk='Документи автоматично реєструються до відправлення починаючи з %ДатаНачала%;'");
				ТекстОписания = СтрЗаменить(ТекстОписания,"%ДатаНачала%", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=D"));
			Иначе
				ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Все документы автоматически регистрируются к отправке;';uk='Всі документи автоматично реєструються до відправлення;'");
			КонецЕсли;
			
		ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
			
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Пользователь самостоятельно отбирает и регистрирует документы к отправке;';uk='Користувач самостійно відбирає і реєструє документи до відправки;'");
			
		ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "НеСинхронизировать"
			И Не НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
			
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Документы не отправляются;';uk='Документи не надсилаються;'");
			
		КонецЕсли;

		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
			
			КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Отправлять данные с отбором по организациям: %ПредставлениеКоллекции%;';uk='Надсилати дані з відбором за організаціями: %ПредставлениеКоллекции%;'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
			
		Иначе
			
			Если Не НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
				
				ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Отправлять данные по всем организациям';uk='Надсилати дані по всіх організаціях'");
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ТекстОписания = НСтр("ru='Данные отправляться не будут';uk='Дані відправлятися не будуть'");
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//      ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                              полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Строка - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = НСтр("ru='Номенклатурная группа для загружаемой номенклатуры по умолчанию: %Значение%';uk='Номенклатурна група для номенклатури, яка завантажується, по умовчанню: %Значение%'");
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.НоменклатурнаяГруппаПоУмолчанию) Тогда
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.НоменклатурнаяГруппаПоУмолчанию));
	Иначе
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru='не указана';uk='не вказана'"));
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Статья прочих доходов при оприходовании товаров: %Значение%';uk='Стаття інших доходів при оприбуткуванні товарів: %Значение%'");
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров) Тогда
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров));
	Иначе
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru='не указана';uk='не вказана'"));
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Склад по умолчанию для документов движения ТМЦ: %Значение%';uk='Склад по умовчанню для документів руху ТМЦ: %Значение%'");
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СкладПоУмолчанию) Тогда
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.СкладПоУмолчанию));
	Иначе
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru='не указан';uk='не зазначений'"));
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

#КонецОбласти

#Область КонстантыИПроверкаПараметровУчета

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	Возврат "";
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	Возврат "";
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
//  Параметры:
// ВерсияКорреспондента (только чтение) – Строка – версия конфигурации корреспондента, например, "2.1.5.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
	
КонецПроцедуры

// Обработчик события при отправке данных узла-отправителя.
// Событие возникает при отправке данных узла-отправителя из текущей базы в корреспондент,
// до помещения данных узла в сообщения обмена.
// В обработчике можно изменить отправляемые данные или вовсе отказаться от отправки данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется отправка данных.
// Игнорировать – Булево – признак отказа от выгрузки данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то отправка данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при получении данных узла-отправителя.
// Событие возникает при получении данных узла-отправителя,
// когда данные узла прочитаны из сообщения обмена, но не записаны в информационную базу.
// В обработчике можно изменить полученные данные или вовсе отказаться от получения данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется получение данных.
// Игнорировать – Булево – признак отказа от получения данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то получение данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры
#КонецОбласти

#Область ПереопределяемаяНастройкаДополненияВыгрузки

// Предназначена для настройки вариантов интерактивной настройки выгрузки по сценарию узла.
// Для настройки необходимо установить значения свойств параметров в необходимые значения.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производится настройка
//     Параметры  - Структура        - Параметры для изменения. Содержит поля:
//
//         ВариантБезДополнения - Структура     - настройки типового варианта "Не добавлять".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 1.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантВсеДокументы - Структура      - настройки типового варианта "Добавить все документы за период".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 2.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантПроизвольныйОтбор - Структура - настройки типового варианта "Добавить данные с произвольным отбором".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 3.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантДополнительно - Структура     - настройки дополнительного варианта по сценарию узла.
//                                                Содержит поля:
//             Использование            - Булево            - флаг разрешения использования варианта. По умолчанию Ложь.
//             Порядок                  - Число             - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 4.
//             Заголовок                - Строка            - название варианта для отображения на форме.
//             ИмяФормыОтбора           - Cтрока            - Имя формы, вызываемой для редактирования настроек.
//             ЗаголовокКомандыФормы    - Cтрока            - Заголовок для отрисовки на форме команды открытия формы настроек.
//             ИспользоватьПериодОтбора - Булево            - флаг того, что необходим общий отбор по периоду. По умолчанию Ложь.
//             ПериодОтбора             - СтандартныйПериод - значение периода общего отбора, предлагаемого по умолчанию.
//
//             Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                            Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Можно  использовать специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки, предлагаемого по умолчанию.
//                 Отбор               - ОтборКомпоновкиДанных - отбор по умолчанию. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", необходимо использовать поле "Ссылка.Организация"
Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт
	
	Если Получатель.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать 
		И Получатель.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		
		Параметры.ВариантВсеДокументы.Использование      = Ложь;
		Параметры.ВариантБезДополнения.Использование     = Ложь;
		Параметры.ВариантПроизвольныйОтбор.Использование = Ложь;
		Параметры.ВариантДополнительно.Использование     = Ложь;
		
	Иначе
		
		//Отключаем вариант "ВариантВсеДокументы"
		
		Параметры.ВариантВсеДокументы.Использование      = Ложь;
		
		//Настраиваем вариант "Без дополнения" 
		Параметры.ВариантБезДополнения.Использование = Истина;
		Параметры.ВариантБезДополнения.Порядок       = 3;
		Параметры.ВариантБезДополнения.Заголовок     = НСтр("ru='Не добавлять документы к отправке';uk='Не додавати документи до відправки'") 
			+ Символы.ПС 
			+ НСтр("ru='Отправлять только нормативно-справочную информацию, измененную с момента последней отправки.';uk='Відправляти тільки нормативно-довідкову інформацію, змінену з моменту останньої відправки.'");
		
		//Настраиваем вариант "Произвольный отбор" 
		Параметры.ВариантПроизвольныйОтбор.Использование = Истина;
		Параметры.ВариантПроизвольныйОтбор.Порядок       = 2;
		
		Если Получатель.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			Параметры.ВариантПроизвольныйОтбор.Заголовок = НСтр("ru='Добавить справочники';uk='Додати довідники'");
		Иначе
			Параметры.ВариантПроизвольныйОтбор.Заголовок = НСтр("ru='Добавить произвольные справочники и документы';uk='Додати довільні довідники та документи'");
		КонецЕсли;
		
		Если Не Получатель.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			// Вычисляем и устанавливаем параметры сценария
			ПараметрыПоУмолчанию = ПараметрыВыгрузкиПоУмолчанию(Получатель);
			
			// Настраиваем вариант "Дополнительно" по сценарию узла
			Параметры.ВариантДополнительно.Использование            = Истина;
			Параметры.ВариантДополнительно.Порядок                  = 1;
			Параметры.ВариантДополнительно.Заголовок                = НСтр("ru='Отправить все документы';uk='Надіслати всі документи'");
			Параметры.ВариантДополнительно.ИмяФормыОтбора           = "ОбщаяФорма.НастройкаВыгрузки";
			Параметры.ВариантДополнительно.ЗаголовокКомандыФормы    = НСтр("ru='Выбрать организации для отбора';uk='Вибрати організації для відбору'");
			Параметры.ВариантДополнительно.ИспользоватьПериодОтбора = Истина;
			Параметры.ВариантДополнительно.ПериодОтбора             = ПараметрыПоУмолчанию.Период;
			
			// Добавляем строка настройки отбора 
			СтрокаОтбора = Параметры.ВариантДополнительно.Отбор.Добавить();
			СтрокаОтбора.ПолноеИмяМетаданных = "ВсеДокументы";
			СтрокаОтбора.ВыборПериода = Истина;
			СтрокаОтбора.Период       = ПараметрыПоУмолчанию.Период;
			СтрокаОтбора.Отбор        = ПараметрыПоУмолчанию.Отбор;
		Иначе
			Параметры.ВариантДополнительно.Использование            = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает представление отбора для варианта дополнения выгрузки по сценарию узла.
// См. описание "ВариантДополнительно" в процедуре "НастроитьИнтерактивнуюВыгрузку"
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого определяется представление отбора
//     Параметры  - Структура        - Характеристики отбора. Содержит поля:
//         ИспользоватьПериодОтбора - Булево            - флаг того, что необходимо использовать общий отбор по периоду.
//         ПериодОтбора             - СтандартныйПериод - значение периода общего отбора.
//         Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                        Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Могут быть использованы специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки.
//                 Отбор               - ОтборКомпоновкиДанных - поля отбора. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", будет использовано поле "Ссылка.Организация"
//
// Возвращаемое значение: 
//     Строка - описание отбора
//
Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт
	
	Если Параметры.ИспользоватьПериодОтбора Тогда
		Если ЗначениеЗаполнено(Параметры.ПериодОтбора) Тогда
			ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='за период: %1';uk='за період: %1'"), НРег(Параметры.ПериодОтбора));
		Иначе
			ДатаНачалаВыгрузки = Получатель.ДатаНачалаВыгрузкиДокументов;
			Если ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
				ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='начиная с даты начала отправки документов: %1';uk='починаючи з дати початку відправлення документів: %1'"), Формат(ДатаНачалаВыгрузки, "ДЛФ=DD"));
			Иначе
				ОписаниеПериода = НСтр("ru='за весь период учета';uk='за весь період обліку'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОписаниеПериода = "";
	КонецЕсли;
	
	СписокОрганизаций = ОрганизацииОтбораИнтерактивнойВыгрузки(Параметры.Отбор);
	
	Если СписокОрганизаций.Количество()=0 Тогда
		ОписаниеОтбораОрганизации = НСтр("ru='по всем организациям';uk='по всіх організаціях'");
	Иначе
		ОписаниеОтбораОрганизации = "";
		Для Каждого Элемент Из СписокОрганизаций Цикл
			ОписаниеОтбораОрганизации = ОписаниеОтбораОрганизации+ ", " + Элемент.Представление;
		КонецЦикла;
		ОписаниеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='с отбором по организациям: %1';uk='з відбором по організаціях: %1'"), СокрЛП(Сред(ОписаниеОтбораОрганизации, 2)));
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Будут отправлены все документы %1,
                 |%2'
                 |;uk='Будуть відправлені всі документи %1,
                 |%2'"),
		ОписаниеПериода,  ОписаниеОтбораОрганизации
	);
	
КонецФункции

// Расчет параметров выгрузки по умолчанию.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производитсят настройка
//
// Возвращаемое значение - Структура - содержит поля:
//     ПредставлениеОтбора - Строка - текстовое описание отбора по умолчанию 
//     Период              - СтандартныйПериод     - значение периода общего отбора по умолчанию
//     Отбор               - ОтборКомпоновкиДанных - отбор
//
Функция ПараметрыВыгрузкиПоУмолчанию(Получатель)
	
	Результат = Новый Структура;
	
	// Период по умолчанию
	Результат.Вставить("Период", Новый СтандартныйПериод);
	Результат.Период.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
	// Отбор по умолчанию и его представление
	КомпоновщикОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	Результат.Вставить("Отбор", КомпоновщикОтбора.Настройки.Отбор);
	
	// Общее представление, период не включаем, так как в этом сценарии поле периода будет редактироваться отдельно
	Результат.Вставить( "ПредставлениеОтбора", 
	                    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	                    НСтр("ru='Будут отправлены все документы за %1';uk='Будуть відправлені всі документи за %1'"),
	                    НРег(Строка(Результат.Период.Вариант))));
	
	Возврат Результат;
КонецФункции

// Возвращает список организаций по таблице отбора (см "ПредставлениеОтбораИнтерактивнойВыгрузки")
// Также используется из демонстрационной формы "НастройкаВыгрузки" этого плана обмена.
//
// Параметры:
//     ТаблицаОтбора - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла. Содержит колонки:
//         ПолноеИмяМетаданных - Строка
//         ВыборПериода        - Булево
//         Период              - СтандартныйПериод
//         Отбор               - ОтборКомпоновкиДанных
//
// Возвращаемое значение:
//     СписокЗначений - значение - ссылка на организацию, представление - наименование
//
Функция ОрганизацииОтбораИнтерактивнойВыгрузки(Знач ТаблицаОтбора) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ТаблицаОтбора.Количество()=0 Или ТаблицаОтбора[0].Отбор.Элементы.Количество()=0 Тогда
		// Нет данных отбора
		Возврат Результат;
	КонецЕсли;
		
	// Мы знаем состав отбора, так как помещали туда сами - или из "НастроитьИнтерактивнуюВыгрузку"
	// или как результат редактирования в форме
	
	СтрокаДанных = ТаблицаОтбора[0].Отбор.Элементы[0];
	Отобранные   = СтрокаДанных.ПравоеЗначение;
	ТипКоллекции = ТипЗнч(Отобранные);
	
	Если ТипКоллекции=Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Отобранные Цикл
			ДобавитьСписокОрганизций(Результат, Элемент.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции=Тип("Массив") Тогда
		ДобавитьСписокОрганизций(Результат, Отобранные);
		 
	ИначеЕсли ТипКоллекции=Тип("СправочникСсылка.Организации") Тогда
		Если Результат.НайтиПоЗначению(Отобранные)=Неопределено Тогда
			Результат.Добавить(Отобранные, Отобранные.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в список органинизаций коллекцию
//
// Параметры:
//     Список      - СписокЗначений - дополняемый список
//     Организации - коллекция организаций
// 
Процедура ДобавитьСписокОрганизций(Список, Знач Организации)
	
	Для Каждого Организация Из Организации Цикл
		
		Если ТипЗнч(Организация)=Тип("Массив") Тогда
			ДобавитьСписокОрганизций(Список, Организация);
			Продолжить;
		КонецЕсли;
		
		Если Список.НайтиПоЗначению(Организация)=Неопределено Тогда
			Список.Добавить(Организация, Организация.Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию
// 
// Параметры:
//      Настройки - Структура - Сеодержит настройки по умолчанию
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
Процедура ОпределитьНастройки(Настройки, ИдентификаторНастройки = "") Экспорт
	
	МассивНастроек = Новый Массив();
	МассивНастроек.Добавить("ОбменУниверсальный");
	Настройки.ВариантыНастроекОбмена = МассивНастроек;
	
	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Ложь;
	Настройки.ПутьКФайлуКомплектаПравилНаПользовательскомСайте = "https://releases.1c.eu/project/BASERP";
	Настройки.ПутьКФайлуКомплектаПравилВКаталогеШаблонов = "\nethelp\BASERP";
	
	Если ИдентификаторНастройки = "ОбменУниверсальный" Тогда
		Настройки.Вставить("ЗаголовокКомандыДляСозданияНовогоОбменаДанными", НСтр("ru='Другая программа';uk='Інша програма'"));
		Настройки.Вставить("ЗаголовокПомощникаСозданияОбмена",               НСтр("ru='Настройка синхронизации данных через универсальный формат';uk='Настройка синхронізації даних через універсальний формат'"));
		Настройки.Вставить("ЗаголовокУзлаПланаОбмена",                       НСтр("ru='Синхронизация данных через универсальный формат';uk='Синхронізація даних через універсальний формат'"));
		Настройки.Вставить("НаименованиеКонфигурацииКорреспондента",         НСтр("ru='Другая программа';uk='Інша програма'"));
	Иначе
		Настройки.Вставить("НаименованиеКонфигурацииКорреспондента",         НСтр("ru='Через универсальный формат обмена';uk='Через універсальний формат обміну'"));
	КонецЕсли;
	
	Настройки.Вставить("ЭтоПланОбменаXDTO", Истина);
	
КонецПроцедуры

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат НСтр("ru='Синхронизация данных через универсальный формат';uk='Синхронізація даних через універсальний формат'");
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

//Возвращает возможность использование данного плана обмена в модели сервсиа
 //
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	Возврат "РежимВыгрузкиПриНеобходимости";
	
КонецФункции

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат ОбменДаннымиУТУП.ИмяКонфигурацииИсточника();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ПолучитьПредставлениеКонфигурацииКорреспондента(КраткоеИмяКонфигурации) Экспорт
	КраткоеИмяКонфигурации = СокрЛП(КраткоеИмяКонфигурации);
	Если КраткоеИмяКонфигурации = "БухгалтерияПредприятия" Тогда
		Возврат НСтр("ru='Бухгалтерия предприятия, ред.3.0';uk='Бухгалтерія підприємства, ред. 3.0'");
	ИначеЕсли КраткоеИмяКонфигурации = "УправлениеТорговлей" Тогда
		Возврат НСтр("ru='Управление торговлей, ред.11';uk='Управління торгівлею, ред. 11'");
	ИначеЕсли КраткоеИмяКонфигурации = "Розница" Тогда
		Возврат НСтр("ru='Розница, ред.2.0';uk='Роздріб, ред. 2.0'");
	ИначеЕсли КраткоеИмяКонфигурации = "УправлениеНебольшойФирмой" Тогда
		Возврат НСтр("ru='Управление небольшой фирмой, ред.1.4';uk='Управління невеликою фірмою, ред. 1.4'");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ОбменЧерезФормат

Функция ФорматОбмена() Экспорт
	
	Возврат "http://v8.1c.ru/edi/edi_stnd/EnterpriseData";
	
КонецФункции

Процедура ПолучитьВерсииФорматаОбмена(ВерсииФормата) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	| СинхронизацияДанныхЧерезУниверсальныйФормат.ПутьКМенеджеруОбмена
	|ИЗ
	| ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	| СинхронизацияДанныхЧерезУниверсальныйФормат.ПутьКМенеджеруОбмена <> """"");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбработкаДляОтладки = ВнешниеОбработки.Создать(Выборка.ПутьКМенеджеруОбмена);
		ВерсииФормата.Вставить("1.6.BAS", ОбработкаДляОтладки);
	Иначе
		ВерсииФормата.Вставить("1.6.BAS", МенеджерОбменаЧерезУниверсальныйФормат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрочиеПроцедурыИФункции

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

#КонецОбласти

#Область ПереходНаУниверсальныйФормат

// Функция-обертка, выполняет подготовку параметров и вызывает основную функцию 
// (см. ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат).
// Вызывается при первом обмене по настройке синхронизации данных через универсальный формат
//  через COM-соединение.
//
// Параметры:
//  ПараметрыНастройкиСинхронизацииДанных - Структура - сведения о настройке синхронизации, с которой происходит переход: 
//  * Код - Строка, Код настройки.
//  * ВариантНастройки - Строка, вариант настройки синхронизации данных через универсальный формат базы-корреспондента.
//  * Ошибка - булево, признак ошибки при выполнении функции.
//  * СообщениеОбОшибке - строка, текст сообщения об ошибке.
//
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода),
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода)
Функция ПереходНаСинхронизациюЧерезУниверсальныйФорматВнешнееСоединение(ПараметрыНастройкиСинхронизацииДанных) Экспорт
	ВариантНастройки = ПараметрыНастройкиСинхронизацииДанных.ВариантНастройки;
	Если НЕ ЗначениеЗаполнено(ВариантНастройки) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		ТекстСообщения = НСтр("ru='Не указан вариант настройки синхронизации в базе-корреспонденте';uk='Не зазначений варіант настройки синхронізації в базі-кореспонденті'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = ТекстСообщения;
		Возврат Неопределено;
	КонецЕсли;
	ИмяПланаОбменаСтаройНастройки = ИмяПланаОбменаСтаройНастройки(ВариантНастройки);
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбменаСтаройНастройки) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru='Передан неизвестный вариант настройки синхронизации: %1.';uk='Переданий невідомий варіант настройки синхронізації: %1.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ВариантНастройки);

		Возврат Неопределено;
	КонецЕсли;
	
	Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбменаСтаройНастройки) = Неопределено Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru='Не обнаружен план обмена, соответствующий варианту настройки: %1.';uk='Не виявлено план обміну, який відповідає варіанту настройки: %1.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ВариантНастройки);
		Возврат Неопределено;
	КонецЕсли;
	
	КодНастройки = ПараметрыНастройкиСинхронизацииДанных.Код;
	НастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбменаСтаройНастройки].НайтиПоКоду(КодНастройки);
	Если НЕ ЗначениеЗаполнено(НастройкаСинхронизацииДанных) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru='Не найден узел корреспондента для плана обмена: %1, код: %2.';uk='Не знайдено вузол кореспондента для обміну плану: %1, код: %2.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
												ИмяПланаОбменаСтаройНастройки, 
												КодНастройки);

		Возврат Неопределено;
	КонецЕсли;
	Возврат ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
КонецФункции

// Функция-обертка, выполняет подготовку параметров и вызывает основную функцию 
// (см. ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат).
// Вызывается при транспорте Интернет: корреспондент выполнил переход на универсальный формат,
//  а текущая ИБ нет. 
//
// Параметры:
//  КодУзла - Строка, Код настройки.
//  Ошибка - булево, признак ошибки при выполнении функции.
//
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода),
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода)
Функция ПереходНаСинхронизациюЧерезУниверсальныйФорматИнтернет(КодУзла, Ошибка) Экспорт
	ИмяПланаОбменаСтаройНастройки = "";
	Если Метаданные.ПланыОбмена.Найти("ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30") <> Неопределено Тогда
		ИмяПланаОбменаДляПерехода = "ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30";
	ИначеЕсли Метаданные.ПланыОбмена.Найти("ОбменУправлениеТорговлейБухгалтерияПредприятия30") <> Неопределено Тогда
		ИмяПланаОбменаДляПерехода = "ОбменУправлениеТорговлейБухгалтерияПредприятия30";
	КонецЕсли;
	НастройкаСинхронизацииЧерезУниверсальныйФормат = Неопределено;
	Если ИмяПланаОбменаДляПерехода <> "" Тогда
		НастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбменаДляПерехода].НайтиПоКоду(КодУзла);
		Если НЕ НастройкаСинхронизацииДанных.Пустая() Тогда
			ПланОбменаМенеджер = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат;
			Попытка
				НастройкаСинхронизацииЧерезУниверсальныйФормат = 
					ПланОбменаМенеджер.ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
				УзелНеНайден = Ложь;
			Исключение
				Ошибка = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат НастройкаСинхронизацииЧерезУниверсальныйФормат;
КонецФункции

// Функция возвращает имя плана обмена старой настройки,
//  соответствующее варианту настройки в синхронизации данных через универсальный формат
//
// Параметр: ВариантНастройки (строка)
// Возвращаемое значение - строка (имя плана обмена)
Функция ИмяПланаОбменаСтаройНастройки(ВариантНастройки) Экспорт
	Если СокрЛП(ВариантНастройки) = "ОбменБП30" Тогда
		Возврат "ОбменУправлениеТорговлейБухгалтерияПредприятия30";
	ИначеЕсли СокрЛП(ВариантНастройки) = "ОбменБПКОРП30" Тогда
		Возврат "ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30";
	КонецЕсли;
	Возврат "";
КонецФункции

// Функция выполняет переход с существующей настройки синхронизации данных 
//  на настройку синхронизации данных через универсальный формат.
//
// Параметры:
//  НастройкаСинхронизацииДанных - Ссылка на настройку синхронизации данных, с которой выполняется переход.
// 
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода).
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода).
Функция ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных) Экспорт
	НастройкаСинхронизацииЧерезУниверсальныйФормат = Неопределено;
	КодНастройки = НастройкаСинхронизацииДанных.Код;
	ИмяПланаОбменаСтаройНастройки = НастройкаСинхронизацииДанных.Метаданные().Имя;
	
	ОбновитьПовторноИспользуемыеЗначения();
	// Поиск или создание настройки синхронизации через универсальный формат.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
	|ИЗ 
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ 
	|	НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел 
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.Код = &КодНастройки";
	Запрос.УстановитьПараметр("КодНастройки", КодНастройки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат';uk='Перехід на синхронізацію даних через універсальний формат'");
	Сообщение = НСтр("ru='Начало перехода';uk='Початок переходу'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	НачатьТранзакцию();
	
	Сообщение = НСтр("ru='Создание новой настройки синхронизации данных';uk='Створення нової настройки синхронізації даних'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НоваяНастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		// Создание новой настройки.
		НоваяНастройкаОбъект = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СоздатьУзел();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяНастройкаОбъект, НастройкаСинхронизацииДанных,,
							"НомерОтправленного, НомерПринятого, ПометкаУдаления");
	
	ВариантНастройки = "";
	Если ИмяПланаОбменаСтаройНастройки = "ОбменУправлениеТорговлейБухгалтерияПредприятия30" Тогда
		ВариантНастройки = "ОбменБП30";
	ИначеЕсли ИмяПланаОбменаСтаройНастройки = "ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП30" Тогда
		ВариантНастройки = "ОбменБПКОРП30";
	КонецЕсли;
	НоваяНастройкаОбъект.ВариантНастройки = ВариантНастройки;
	
	ЕстьОрганизации = Ложь;
	МетаданныеСтаройНастройки = Метаданные.ПланыОбмена[ИмяПланаОбменаСтаройНастройки];
	Если МетаданныеСтаройНастройки.ТабличныеЧасти.Найти("Организации") <> Неопределено Тогда
		НоваяНастройкаОбъект.Организации.Очистить();
		Для Каждого СтрокаОрганизации Из НастройкаСинхронизацииДанных.Организации Цикл
			НоваяСтрокаОрганизации = НоваяНастройкаОбъект.Организации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОрганизации, СтрокаОрганизации);
		КонецЦикла;
	КонецЕсли;
	НоваяНастройкаОбъект.ВыгружатьАналитикуПоСкладам = Истина;
	Если МетаданныеСтаройНастройки.Реквизиты.Найти("ОбобщенныйСклад") <> Неопределено Тогда
		Если ЗначениеЗаполнено(НастройкаСинхронизацииДанных.ОбобщенныйСклад) Тогда
			НоваяНастройкаОбъект.ВыгружатьАналитикуПоСкладам = Ложь;
		КонецЕсли;
	КонецЕсли;
	ДоступныеВерсииФормата = Новый Соответствие;
	ПолучитьВерсииФорматаОбмена(ДоступныеВерсииФормата);
	Для Каждого КлючИЗначение Из ДоступныеВерсииФормата Цикл
		НоваяНастройкаОбъект.ВерсияФорматаОбмена = КлючИЗначение.Ключ;
	КонецЦикла;
	НоваяНастройкаОбъект.Записать();
	НастройкаСинхронизацииЧерезУниверсальныйФормат = НоваяНастройкаОбъект.Ссылка;
	
	// Регистрация изменений.
	ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат';uk='Перехід на синхронізацію даних через універсальний формат'");
	Сообщение = НСтр("ru='Регистрация изменений';uk='Реєстрація змін'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	ВыполнитьРегистрациюИзменений(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
	
	// Настройки транспорта.
	ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат';uk='Перехід на синхронізацію даних через універсальний формат'");
	Сообщение = НСтр("ru='Заполнение настроек транспорта сообщений';uk='Заповнення настройок транспорту повідомлень'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	ВыгружатьСообщениеПослеПерехода = Ложь;
	ОбработатьНастройкиТранспортаСообщенийОбмена(НастройкаСинхронизацииДанных, 
										НастройкаСинхронизацииЧерезУниверсальныйФормат, 
										ВыгружатьСообщениеПослеПерехода);
	
	// Дата запрета изменения.
	ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат';uk='Перехід на синхронізацію даних через універсальний формат'");
	Сообщение = НСтр("ru='Заполнение настроек запрета изменения данных';uk='Заповнення настройок заборони зміни даних'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	ОбработатьДатыЗапретаИзменения(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
	
	// Сценарии обменов данными.
	ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат';uk='Перехід на синхронізацію даних через універсальний формат'");
	Сообщение = НСтр("ru='Заполнение сценариев обмена данными';uk='Заповнення сценаріїв обміну даними'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	ОбработатьСценарииОбменовДанными(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
	
	//  ПубличныеИдентификаторыСинхронизируемыхОбъектов и ДанныеОбъектовДляРегистрацииВОбменах.
	ОбработатьСоответствияОбъектовИнформационныхБаз(НастройкаСинхронизацииДанных, 
													НастройкаСинхронизацииЧерезУниверсальныйФормат);
	
	// Заполнение настроек главного узла.
	ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат';uk='Перехід на синхронізацію даних через універсальний формат'");
	Сообщение = НСтр("ru='Заполнение настроек главного узла';uk='Заповнення настройок головного вузла'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	ЭтотУзелСсылка = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел();
	КодЭтогоУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзелСсылка, "Код");
	Если НЕ ЗначениеЗаполнено(КодЭтогоУзла) Тогда
		СтарыйГлавныйУзел = ПланыОбмена[ИмяПланаОбменаСтаройНастройки].ЭтотУзел();
		НовыйГлавныйУзел = ЭтотУзелСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НовыйГлавныйУзел, СтарыйГлавныйУзел,,
								"НомерОтправленного, НомерПринятого, ПометкаУдаления");
		Если МетаданныеСтаройНастройки.ТабличныеЧасти.Найти("Организации") <> Неопределено Тогда
			НовыйГлавныйУзел.Организации.Очистить();
			Для Каждого СтрокаОрганизации Из СтарыйГлавныйУзел.Организации Цикл
				НоваяСтрокаОрганизации = НовыйГлавныйУзел.Организации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОрганизации, СтрокаОрганизации);
			КонецЦикла;
		КонецЕсли;
		НовыйГлавныйУзел.Записать();
	КонецЕсли;
	
	ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат';uk='Перехід на синхронізацію даних через універсальний формат'");
	Сообщение = НСтр("ru='Заполнение результатов обмена данными';uk='Заповнення результатів обміну даними'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	ОбработатьРезультатыОбменаДанными(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
	
	Если НЕ НастройкаСинхронизацииДанных.ПометкаУдаления Тогда
		Сообщение = НСтр("ru='Пометка на удаление старой настройки';uk='Позначка на вилучення старої настройки'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		НастройкаСинхронизацииДанных.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(НастройкаСинхронизацииДанных);
	
	ЗафиксироватьТранзакцию();
	
	// Обновление правил обмена при необходимости.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
	|ИЗ 
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ 
	|	НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел";
	Если Запрос.Выполнить().Выгрузить().Количество() < 2 Тогда
		// Была создана первая настройка для этого плана обмена, правила еще не актуализированы.
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
	КонецЕсли;
	
	Если ВыгружатьСообщениеПослеПерехода Тогда
		// Выгрузка сообщения по новой настройке обмена.
		Отказ = Ложь;
		ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, 
											НастройкаСинхронизацииЧерезУниверсальныйФормат,
											Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
		Если Отказ Тогда
			Сообщение = НСтр("ru='Выгрузка данных через универсальный формат не выполнена.';uk='Вивантаження даних через універсальний формат не виконано.'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		Иначе
			Сообщение = НСтр("ru='Выгрузка данных через универсальный формат.';uk='Вивантаження даних через універсальний формат.'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	Сообщение = НСтр("ru='Окончание перехода';uk='Закінчення переходу'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	Возврат НастройкаСинхронизацииЧерезУниверсальныйФормат;
КонецФункции

// Процедура копирует регистрацию изменений с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ВыполнитьРегистрациюИзменений(СтарыйУзел, НовыйУзел)
	СоставНовогоПланаОбмена = Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Состав;
	НомерСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтарыйУзел, "НомерОтправленного");
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтарыйУзел, НомерСообщения);
	Пока ВыборкаИзменений.Следующий() Цикл
		ОбъектРегистрации = ВыборкаИзменений.Получить();
		
		Если ОбъектРегистрации = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ОбъектРегистрации) = Тип("УдалениеОбъекта") Тогда
			Если НЕ СоставНовогоПланаОбмена.Содержит(ОбъектРегистрации.Ссылка.Метаданные()) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли НЕ СоставНовогоПланаОбмена.Содержит(ОбъектРегистрации.Метаданные()) Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(НовыйУзел, ОбъектРегистрации);
	КонецЦикла;
КонецПроцедуры

// Процедура переносит сведения о дате запрета изменения с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ОбработатьДатыЗапретаИзменения(СтарыйУзел, НовыйУзел)
	ДатыЗапрета = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	ДатыЗапрета.Отбор.Пользователь.Установить(СтарыйУзел);
	ДатыЗапрета.Прочитать();
	
	ДатыЗапретаНовый = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	ДатыЗапретаНовый.Отбор.Пользователь.Установить(НовыйУзел);

	Для Каждого ДатаЗапрета Из ДатыЗапрета Цикл
		ЗаписьНовая = ДатыЗапретаНовый.Добавить();
		ЗаписьНовая.Пользователь = НовыйУзел;
		ЗаполнитьЗначенияСвойств(ЗаписьНовая, ДатаЗапрета,,"Пользователь");
	КонецЦикла;
	ДатыЗапрета.Очистить();
	ДатыЗапрета.Записать();
	ДатыЗапретаНовый.Записать();
КонецПроцедуры

// Процедура переносит сведения о сценариях обменов данными с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ОбработатьСценарииОбменовДанными(СтарыйУзел, НовыйУзел)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ссылка
	|ИЗ 
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена
	|ГДЕ 
	|	УзелИнформационнойБазы = &НастройкаСинхронизации
	|	И НЕ Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СценарийОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтруктураПоиска = Новый структура("УзелИнформационнойБазы", СтарыйУзел);
		СтрокиИсточникДанных = СценарийОбменаОбъект.НастройкиОбмена.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаИсточникДанных Из СтрокиИсточникДанных Цикл
			СтрокаИсточникДанных.УзелИнформационнойБазы = НовыйУзел;
		КонецЦикла;
		
		СценарийОбменаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура переносит сведения о соответствиях объектов информационных баз с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ОбработатьСоответствияОбъектовИнформационныхБаз(СтарыйУзел, НовыйУзел)
	// Заполнение ДанныеОбъектовДляРегистрацииВОбменах
	ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат. Данные для регистрации в обменах';uk='Перехід на синхронізацію даних через універсальний формат. Дані для реєстрації в обмінах'");
	Сообщение = НСтр("ru='Заполнение данных для регистрации в обменах';uk='Заповнення даних для реєстрації в обмінах'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УникальныйИдентификаторИсточника КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
	|ГДЕ 
	|	УзелИнформационнойБазы = &НастройкаСинхронизации";
	Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
	НаборЗаписейДанныеОбъектов = РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.СоздатьНаборЗаписей();
	НаборЗаписейДанныеОбъектов.Отбор.УзелИнформационнойБазы.Установить(НовыйУзел);
	НаборЗаписейДанныеОбъектов.Прочитать();
	НаборЗаписейДанныеОбъектов.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗаписьДанныеОбъектов = НаборЗаписейДанныеОбъектов.Добавить();
		НоваяЗаписьДанныеОбъектов.Ссылка = Выборка.Ссылка;
		НоваяЗаписьДанныеОбъектов.УзелИнформационнойБазы = НовыйУзел;
	КонецЦикла;
	НаборЗаписейДанныеОбъектов.Записать();
	
	// ПубличныеИдентификаторыСинхронизируемыхОбъектов - заполняются только на стороне БП,
	// так как их надо заполнить только для одного из корреспондентов.
	Если Найти(НРЕГ(Метаданные.Имя), "бухгалтерия") > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УникальныйИдентификаторИсточника КАК УИДИсточника,
		|	Количество(УникальныйИдентификаторПриемника) КАК КоличествоСсылок
		|ПОМЕСТИТЬ СоответствияОбъектовСОтбором
		|ИЗ 
		|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
		|ГДЕ УзелИнформационнойБазы = &НастройкаСинхронизации 
		|	И УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
		|СГРУППИРОВАТЬ ПО УникальныйИдентификаторИсточника
		|;
		|ВЫБРАТЬ 
		|	СоответствияОбъектовСОтбором.УИДИсточника КАК УникальныйИдентификаторИсточника,
		|	СоответствияОбъектовИБ.УникальныйИдентификаторПриемника,
		|	СоответствияОбъектовИБ.ТипПриемника
		|ИЗ 
		|	СоответствияОбъектовСОтбором
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИБ 
		|ПО 
		|	СоответствияОбъектовИБ.УникальныйИдентификаторИсточника = СоответствияОбъектовСОтбором.УИДИсточника
		|	И СоответствияОбъектовИБ.УзелИнформационнойБазы = &НастройкаСинхронизации
		|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
		|ГДЕ 
		|	СоответствияОбъектовСОтбором.КоличествоСсылок > 1 
		|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
		|;
		|ВЫБРАТЬ 
		|	СоответствияОбъектовСОтбором.УИДИсточника КАК Ссылка,
		|	СоответствияОбъектовИБ.УникальныйИдентификаторПриемника КАК Идентификатор
		|ИЗ 
		|	СоответствияОбъектовСОтбором
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИБ 
		|ПО 
		|	СоответствияОбъектовИБ.УникальныйИдентификаторИсточника = СоответствияОбъектовСОтбором.УИДИсточника
		|	И СоответствияОбъектовИБ.УзелИнформационнойБазы = &НастройкаСинхронизации
		|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
		|ГДЕ СоответствияОбъектовСОтбором.КоличествоСсылок = 1
		|";
		Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат.Заполнение публичных идентификаторов';uk='Перехід на синхронізацію даних через універсальний формат.Заповнення публічних ідентифікаторів'");
		Сообщение = НСтр("ru='Формирование публичных идентификаторов - начало';uk='Формування публічних ідентифікаторів - початок'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		// Отображение ссылок "один ко многим"
		Если НЕ РезультатЗапроса[1].Пустой() Тогда
			Сообщение = НСтр("ru='Обнаружены записи, в которых одной ссылке на источник соответствуют несколько приемников';uk='Виявлено записи, в яких одному посиланню на джерело відповідають кілька приймачів'") 
						+ Символы.ПС + НСтр("ru='Эти записи обработаны не будут.';uk='Ці записи не будуть оброблені.'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);

			Выборка = РезультатЗапроса[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				НСтрока = НСтр("ru='Уникальный идентификатор источника: %1, Уникальный идентификатор приемника: %2, Тип приемника: %3';uk='Унікальний ідентифікатор джерела: %1, Унікальний ідентифікатор приймача: %2, Тип приймача: %3'");
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
																Выборка.УникальныйИдентификаторИсточника, 
																Выборка.УникальныйИдентификаторПриемника, 
																Выборка.ТипПриемника);

				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
			КонецЦикла;
		КонецЕсли;
		// Формирование записей в регистр Публичные идентификаторы
		СчетчикЗаписей = 0;
		Выборка = РезультатЗапроса[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Проверка равенства идентификаторов
			ИдентификаторИсточникаСтрокой = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			Если ИдентификаторИсточникаСтрокой = СокрЛП(Выборка.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикЗаписей = СчетчикЗаписей + 1;
			СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, Ссылка, Идентификатор", 
												НовыйУзел, Выборка.Ссылка, Выборка.Идентификатор);
			ОбменДаннымиСервер.ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, 
														"ПубличныеИдентификаторыСинхронизируемыхОбъектов", Ложь);
		КонецЦикла;
		Сообщение = НСтр("ru='Формирование публичных идентификаторов завершено. Количество записей:';uk='Формування публічних ідентифікаторів завершено. Кількість записів:'") 
					+ СчетчикЗаписей;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	КонецЕсли;
	// Очистка регистра СоответствиеОбъектовИнформационныхБаз
	НаборЗаписейСоответствиеОбъектов = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейСоответствиеОбъектов.Отбор.УзелИнформационнойБазы.Установить(СтарыйУзел);
	НаборЗаписейСоответствиеОбъектов.Записать();
	Сообщение = НСтр("ru='Соответствие объектов информационных баз очищен';uk='Відповідність об''єктів інформаційних баз очищений'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

КонецПроцедуры

// Процедура переносит сведения о настройках транспорта сообщений с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
//  ВыгружатьСообщениеПослеПерехода - булево, признак того что после завершения перехода следует выгрузить
//   сообщение обмена по новой настройке. Устанавливается в ходе выполнения процедуры, если
//   вид транспорта по умолчанию - файловый ресурс, ftp или email.
Процедура ОбработатьНастройкиТранспортаСообщенийОбмена(СтарыйУзел, НовыйУзел, ВыгружатьСообщениеПослеПерехода)
	НастройкиТранспортаОбменаНовогоУзла = РегистрыСведений.НастройкиТранспортаОбмена.СоздатьНаборЗаписей();
	НастройкиТранспортаОбменаНовогоУзла.Отбор.Узел.Установить(НовыйУзел);
	НастройкиТранспортаОбменаНовогоУзла.Прочитать();
	НастройкиТранспортаОбменаНовогоУзла.Очистить();
	НастройкиТранспортаОбменаСтарогоУзла = РегистрыСведений.НастройкиТранспортаОбмена.СоздатьНаборЗаписей();
	НастройкиТранспортаОбменаСтарогоУзла.Отбор.Узел.Установить(СтарыйУзел);
	НастройкиТранспортаОбменаСтарогоУзла.Прочитать();
	
	МассивДоступныеТранспортыСообщений = ИспользуемыеТранспортыСообщенийОбмена();
	Если НастройкиТранспортаОбменаСтарогоУзла.Количество()>0 Тогда
		НастройкиТранспортаОбменаНовогоУзла.Загрузить(НастройкиТранспортаОбменаСтарогоУзла.Выгрузить());
		Для Каждого НастройкаУзла Из НастройкиТранспортаОбменаНовогоУзла Цикл
			НастройкаУзла.Узел = НовыйУзел;
			ВидТранспортаПоУмолчанию = НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию;
			Если ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE
				ИЛИ ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL
				ИЛИ ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
				ВыгружатьСообщениеПослеПерехода = Истина;
			КонецЕсли;
			Если МассивДоступныеТранспортыСообщений.Найти(ВидТранспортаПоУмолчанию) = Неопределено Тогда
				// Переопределение вида транспорта по умолчанию
				ВидПоУмолчанию = Неопределено;
				Если ЗначениеЗаполнено(НастройкаУзла.FILEКаталогОбменаИнформацией) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
				ИначеЕсли ЗначениеЗаполнено(НастройкаУзла.FTPСоединениеПуть) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
				ИначеЕсли ЗначениеЗаполнено(НастройкаУзла.EMAILУчетнаяЗапись) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
				КонецЕсли;
				НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию = ВидПоУмолчанию;
				ИмяСобытияЖурналРегистрации = НСтр("ru='Переход на синхронизацию данных через универсальный формат. Заполнение настроек транспорта сообщений';uk='Перехід на синхронізацію даних через універсальний формат. Заповнення настройок транспорту повідомлень'");
				НСтрока = НСтр("ru='Используемое ранее подключение по умолчанию недоступно для синхронизации данных через универсальный формат (%1)';uk='Використовуване раніше по умовчанню підключення недоступне для синхронізації даних через універсальний формат (%1)'");
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ВидТранспортаПоУмолчанию);

				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
				Если ЗначениеЗаполнено(НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию) Тогда
					НСтрока = НСтр("ru='Взамен назначено подключение по умолчанию: %1. Необходимо проверить корректность настроек транспорта сообщений';uk='Натомість призначено  підключення по умовчанню: %1. Необхідно перевірити коректність настройок транспорту повідомлень'");
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
																НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию);

				Иначе
					Сообщение = НСтр("ru='Подключение по умолчанию очищено. Необходимо выполнить настройку транспорта сообщений вручную';uk='Підключення по умовчанню  очищено. Необхідно виконати настройку транспорту повідомлень вручну'");
				КонецЕсли;
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
			КонецЕсли;
		КонецЦикла;
		
		НастройкиТранспортаОбменаСтарогоУзла.Очистить();
		НастройкиТранспортаОбменаСтарогоУзла.Записать();
		НастройкиТранспортаОбменаНовогоУзла.Записать();
	КонецЕсли;
	
	НастройкиУзловИБНовогоУзла = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СоздатьНаборЗаписей();
	НастройкиУзловИБНовогоУзла.Отбор.УзелИнформационнойБазы.Установить(НовыйУзел);
	НастройкиУзловИБНовогоУзла.Прочитать();
	НастройкиУзловИБНовогоУзла.Очистить();

	НастройкиУзловИБСтарогоУзла = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СоздатьНаборЗаписей();
	НастройкиУзловИБСтарогоУзла.Отбор.УзелИнформационнойБазы.Установить(СтарыйУзел);
	НастройкиУзловИБСтарогоУзла.Прочитать();
	
	Если НастройкиУзловИБСтарогоУзла.Количество()>0 Тогда
		НастройкиУзловИБНовогоУзла.Загрузить(НастройкиУзловИБСтарогоУзла.Выгрузить());
		Для Каждого НастройкаУзла Из НастройкиУзловИБНовогоУзла Цикл
			НастройкаУзла.УзелИнформационнойБазы = НовыйУзел;
		КонецЦикла;
		
		НастройкиУзловИБСтарогоУзла.Очистить();
		НастройкиУзловИБСтарогоУзла.Записать();
		НастройкиУзловИБНовогоУзла.Записать();
	КонецЕсли;
КонецПроцедуры

// Процедура переносит сведения о результатах обмена данными с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ОбработатьРезультатыОбменаДанными(СтарыйУзел, НовыйУзел)
	РезультатыОбмена = РегистрыСведений.РезультатыОбменаДанными.СоздатьНаборЗаписей();
	РезультатыОбмена.Прочитать();
	
	Для Каждого РезультатОбмена Из РезультатыОбмена Цикл
		Если РезультатОбмена.УзелИнформационнойБазы <> СтарыйУзел Тогда
			Продолжить;
		КонецЕсли;
		Если РезультатОбмена.Пропущена Тогда
			РезультатыОбмена.Удалить(РезультатОбмена);
			Продолжить;
		КонецЕсли;
		РезультатОбмена.УзелИнформационнойБазы = НовыйУзел;
	КонецЦикла;
	РезультатыОбмена.Записать();
КонецПроцедуры

// Процедура выполняет попытку перехода на новый обмен с существующего обмена.
//  Вызывается, если в ходе синхронизации данных получено сообщение не соответствующее формату "старого" обмена.
//
// Параметры:
//  НастройкаСинхронизацииДанных - ссылка на узел плана обмена, с которого выполняется переход на новый обмен
//  ОбменЧерезВнешнееСоединение - булево, признак того что текущий обмен выполняется через внешнее соединение
Процедура ВыполнитьПереходНаНовыйОбмен(НастройкаСинхронизацииДанных, ОбменЧерезВнешнееСоединение = Ложь) Экспорт
	Попытка
		НастройкаСинхронизацииЧерезУниверсальныйФормат = 
			ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
	Исключение
	КонецПопытки;
	// Передача сведений для обработки ВыполнениеОбменовДанными и ПомощникИнтерактивногоОбменаДанными.
	ПередаваемоеЗначение = Новый Структура;
	ИмяПланаОбменаДляПереходаНаНовыйОбмен = НастройкаСинхронизацииЧерезУниверсальныйФормат.Метаданные().Имя;
	ПередаваемоеЗначение.Вставить("ИмяПланаОбменаДляПереходаНаНовыйОбмен", ИмяПланаОбменаДляПереходаНаНовыйОбмен);
	ПередаваемоеЗначение.Вставить("Код", НастройкаСинхронизацииЧерезУниверсальныйФормат.Код);
	
	ПередаваемыйТекст = "{ВыполненПереходНаНовыйОбмен}"+ОбщегоНазначения.ЗначениеВСтрокуXML(ПередаваемоеЗначение);
	ПолучитьСообщенияПользователю(Истина); // Удаление предыдущих сообщений.
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПередаваемыйТекст);
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#КонецЕсли
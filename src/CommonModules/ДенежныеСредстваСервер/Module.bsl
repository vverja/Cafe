
#Область ПрограммныйИнтерфейс

#Область УправлениеИнтерфейснымиЭлементами

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьВидимостьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭлементовПоМассиву()

// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме
//	ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//	ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части
//
Процедура УстановитьВидимостьЭлементовПоМассивуРасширенный(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов,
	Знач ИмяТЧ, Знач ИмяЗаменыТЧ) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(СтрЗаменить(ЭлементМассива, ИмяТЧ, ИмяЗаменыТЧ), ".", "");
		
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
			И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается доступность.
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть доступны на форме.
//
Процедура УстановитьДоступностьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ДоступностьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Доступность <> ДоступностьРеквизита Тогда
			Элементы[ИмяРеквизита].Доступность = ДоступностьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьЭлементовПоМассиву()

// Процедура устанавливает видимость подбора по остаткам расчетов в форме.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Кнопка - КнопкаФормы - Кнопка формы для открытия подбора
//
Процедура УстановитьВидимостьПодбораПоОстаткамРасчетов(ХозяйственнаяОперация, Кнопка) Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	
	Кнопка.Видимость = (МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено);
	
КонецПроцедуры // УстановитьВидимостьПодбораПоОстаткамРасчетов()

// Возвращает форматированный текст представления записи книги покупок в документе
//
// Параметры:
//    Основание - ДокументСсылка - Документ, на основании которого вводится запись книги покупок
//
// Возвращаемое значение:
//    Строка - Представление записи книги покупок
//
Функция ПредставлениеЗаписиКнигиПокупокВАвансовомОтчете(Основание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтрок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата
	|
	|ИЗ
	|	Документ.ЗаписьКнигиПокупок КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументРасчетов = &Основание
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		СтрокаГиперссылки = Новый ФорматированнаяСтрока(
			НСтр("ru='Оформить запись книги покупок';uk='Оформити запис книги покупок'"), ,
			ЦветаСтиля.ЦветГиперссылки, ,
			"ВвестиНовуюЗаписьКнигиПокупок");
		
		МассивСтрок.Добавить(СтрокаГиперссылки);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() > 1 Тогда
			
			ТекстЗаписьКнигиПокупок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Записи книги покупок (%1)';uk='Записи книги покупок (%1)'"), Строка(Выборка.Количество()));
			
			СтрокаГиперссылки = Новый ФорматированнаяСтрока(
				ТекстЗаписьКнигиПокупок, ,
				ЦветаСтиля.ЦветГиперссылки, ,
				"ОткрытьСписокЗаписейКнигиПокупок");
			
		Иначе
			
			Выборка.Следующий();
			
			СтрокаГиперссылки = Новый ФорматированнаяСтрока(
				НСтр("ru='Запись книги покупок';uk='Запис книги покупок'") + ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Выборка), ,
				ЦветаСтиля.ЦветГиперссылки, ,
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
				
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаГиперссылки);
		
		МассивСтрок.Добавить("   ");
		
		СтрокаГиперссылкиДобавить = Новый ФорматированнаяСтрока(
			НСтр("ru='Добавить';uk='Додати'"), ,
			ЦветаСтиля.ЦветГиперссылки, ,
			"ДобавитьЗаписьКнигиПокупок");
			
		МассивСтрок.Добавить(СтрокаГиперссылкиДобавить);
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

#Область ВидимостьОпераций

// Процедура устанавливает видимость выбора оплаты платежной картой в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора формы оплаты
//
Процедура УстановитьВидимостьОплатыПлатежнойКартой(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению("ПлатежнаяКарта");
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции поступления из другой кассы
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПередачиМеждуКассами(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции перечисления на другой счет
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПеречисленияНаДругойСчет(Поле) Экспорт
	
	ИспользоватьНесколькоРасчетныхСчетов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	
	Если Не ИспользоватьНесколькоРасчетныхСчетов Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций с кассами ККМ в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийСКассамиККМ(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС в другую организацию в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПередачиМеждуОрганизациями(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций внутренней передачи ДС в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийВнутреннейПередачи(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции оплаты таможенного платежа в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПеречислениеТаможне(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций оплаты ДС по договорам кредитов и депозитов.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаКредитовИДепозитов);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыНаличные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииКонвертацияВалютыБезналичные(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииКонвертацияВалюты(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций по зарплате в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПоЗарплате(Поле) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		
		МассивОперацийПоЗарплате = Новый Массив;
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		МассивОперацийПоЗарплате.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
		
		Для Каждого Элемент Из МассивОперацийПоЗарплате Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Элемент);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций эквайринга в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийЭквайринга(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций выдачи и погашения займов сотрудникам в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийЗаймамСотрудникам(Поле) Экспорт
	
	ОперацииПоЗаймамНеДоступны = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	
	Если ОперацииПоЗаймамНеДоступны Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Конвертация валюты" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииОплатаЛизингодателю(Поле) Экспорт
	
	ИспользоватьЛизинг = Ложь;
	Если НЕ ИспользоватьЛизинг Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ОплатаЛизингодателю);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочееПоступлениеДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПрочееПоступлениеДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "ПрочаяВыдачаДенежныхСредств" в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьУстаревшихОпераций(Поле, Значение, УправлениеТорговлей) Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПокупкаВалюты);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПродажаВалюты);
	
	Если Не УправлениеТорговлей Тогда
		// в ERP не должны быть видимы никогда
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
	Иначе 
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
			// Операцию которая уже есть оставляем ... 
			Если Значение = ХозяйственнаяОперация Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость статьи декларации по единому налогу в форме.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	Элемент - ПолеВвода - Элемент формы
//
Процедура УстановитьВидимостьСтатьиДекларацииПоЕдиномуНалогу(Объект, Элемент) Экспорт
	
	Элемент.Видимость = Справочники.Организации.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	
КонецПроцедуры // УстановитьВидимостьСтатьиДекларацииПоЕдиномуНалогу()

// Процедура устанавливает видимость суммы дохода по единому налогу в форме.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	Элемент - ПолеВвода - Элемент формы
//
Процедура УправлениеЭлементомСуммаПоЕдиномуНалогу(Объект, Элемент) Экспорт
	
	Элемент.Родитель.Видимость = Справочники.Организации.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата);
	Элемент.КнопкаСпискаВыбора = Справочники.Организации.ПлательщикНДС(Объект.Организация, Объект.Дата)
	
КонецПроцедуры // УправлениеЭлементомСуммаПоЕдиномуНалогу()

#КонецОбласти

// Процедура устанавливает заголовок колонки "Сумма платежа".
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//	Элементы - ВсеЭлементыФормы - Коллекция элементов управляемой формы.
//
Процедура УстановитьЗаголовокСуммыПлатежа(Валюта, Элементы) Экспорт
	
	Элементы.РасшифровкаПлатежаСумма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сумма (%1)';uk='Сума (%1)'"),
		Строка(Валюта));
	
КонецПроцедуры // УстановитьЗаголовокСуммыПлатежа()

// Подмена префикса организации префиксом кассовой книги
//
//Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
//    Префикс - Строка - префикс объекта, который нужно изменить
//
Процедура УстановитьПрефиксИнформационнойБазыИКассовойКнигиНомеруДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

// Сброс номера документа при необходимости его изменения
//
// Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    Отказ - Булево - флаг отказа
//    РежимЗаписи - РежимЗаписиДокумента
//    РежимПроведения - РежимПроведенияДокумента
// 
Процедура ПроверитьНомерДокументаПоДатеОрганизацииКассовойКнигеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПрефиксацияОбъектовСобытия.ПроверитьНомерДокументаПоДатеИОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для кассы.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементКасса - ПолеФормы - Поле для ввода кассы.
//
Процедура УстановитьПараметрыВыбораКассы(Объект, ЭлементКасса) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.Касса)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
		 И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	КонецЕсли;
	
	ЭлементКасса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораКассы()

// Процедура устанавливает параметры выбора для банковского счета.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчета(Объект, ЭлементБанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
		 И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Константы.ВалютаРегламентированногоУчета.Получить()));
	КонецЕсли;
	
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчета()

// Процедура устанавливает параметры выбора для банковского счета получателя.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаПолучателя(Объект, ЭлементБанковскийСчет) Экспорт
	
	МассивСвязиПараметров = Новый Массив;
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		Если ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаКонвертации"));
		КонецЕсли;
	Иначе
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) Тогда
		
		Если Объект.Свойство("ОрганизацияПолучатель") И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОрганизацияПолучатель"));
		Иначе
			СписокОрганизаций = Новый СписокЗначений;
			ПараметрыВыбораОрганизации = Новый Структура;
			ПараметрыВыбораОрганизации.Вставить("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные");
			ПараметрыВыбораОрганизации.Вставить("Организация", Объект.Организация);
			ПараметрыВыбораОрганизации.Вставить("СтрокаПоиска", Неопределено);
			СтандартнаяОбработка = Ложь;
			ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(СписокОрганизаций, ПараметрыВыбораОрганизации, СтандартнаяОбработка);
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(СписокОрганизаций.ВыгрузитьЗначения())));
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация))));
	КонецЕсли;
	
	ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязиПараметров);
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаПолучателя()

// Процедура устанавливает параметры выбора для эквайрингового терминала.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЭквайринговыйТерминал - ПолеФормы - Поле для ввода эквайрингового терминала.
//
Процедура УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, ЭлементЭквайринговыйТерминал) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
		 ИЛИ ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
			ЭлементЭквайринговыйТерминал.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбораЭквайринговогоТерминала()

// Процедура устанавливает параметры выбора для партнера.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементПартнер - ПолеФормы - Поле для ввода партнера.
//
Процедура УстановитьПараметрыВыбораПартнера(Объект, ЭлементПартнер) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	ЭлементПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораПартнера()

// Процедура устанавливает параметры выбора для банковского счета контрагента.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчетКонтрагента - ПолеФормы - Поле для ввода банковского счета контрагента.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, ЭлементБанковскийСчетКонтрагента) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо"));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	КонецЕсли;
	
	ЭлементБанковскийСчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента()

// Процедура устанавливает параметры выбора для заявки на расходование денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЗаявка - ПолеФормы - Поле для ввода заявки на расходование денежных средств.
//
Процедура УстановитьПараметрыВыбораЗаявки(Объект, ЭлементЗаявка) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате", "Объект.ХозяйственнаяОперация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком
		Или  Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация", РежимИзмененияСвязанногоЗначения.НеИзменять));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Получатель", "Объект.ПодотчетноеЛицо"));
	КонецЕсли;
	
	ЭлементЗаявка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	ЭлементЗаявка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораЗаявки()

// Процедура устанавливает параметры выбора для списания денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСписание - ПолеФормы - Поле для ввода списания денежных средств.
//
Процедура УстановитьПараметрыВыбораСписанияДенежныхСредств(Объект, ЭлементСписание) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Новый ФиксированныйМассив(МассивОпераций));
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.БанковскийСчет", "Объект.БанковскийСчет"));
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
	Иначе
		
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаКонвертации", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ПодотчетноеЛицо", "Объект.ПодотчетноеЛицо"));
		
	КонецЕсли;
	
	ЭлементСписание.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	ЭлементСписание.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи движения денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи движения денежных средств.
//
Процедура УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, ЭлементСтатья) Экспорт
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		МассивПараметров.Добавить(
			Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперацияПоЗарплате",
				РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
	КонецЕсли;
	ЭлементСтатья.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи расходов
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи расходов.
//
Процедура УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элемент) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	
	Если (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"))
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	Иначе
		
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина);
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
	КонецЕСли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Функция возвращает параметры выбора для статьи движения денежных средств.
//
// Параметры:
//    Объект - ДанныеФормыСтруктура - Текущий объект
//    ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение
//    Параметры - ФиксированныйМассив - массив параметров выбора
//
Функция ПолучитьПараметрыВыбораСтатьиДДС(Объект, ДополнительныеПараметры) Экспорт
	
	МассивПараметров = Новый Массив;
	
	ДоговорКредитаДепозита = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ДоговорКредитаДепозита", ДоговорКредитаДепозита);
	КонецЕсли;
	
	ОплатаПоКредитам = Новый Массив;
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	ОплатаПоКредитам.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
	
	ПоступленияПоКредитамДепозитам = Новый Массив;
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
	ПоступленияПоКредитамДепозитам.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
	
	Если ОплатаПоКредитам.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		СтрокаРеквизитов = "ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПроцентов,СтатьяДДСКомиссии,СтатьяДДСПоступленияВыдачи";
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКредитаДепозита, СтрокаРеквизитов);
		МассивСтатей = Новый Массив;
		Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСОсновногоДолга);
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПроцентов);
			Если ЗначениеЗаполнено(Реквизиты.СтатьяДДСКомиссии) Тогда
				МассивСтатей.Добавить(Реквизиты.СтатьяДДСКомиссии);
			КонецЕсли;
		Иначе
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПоступленияВыдачи);
		КонецЕсли;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивСтатей));
		
	ИначеЕсли ПоступленияПоКредитамДепозитам.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		СтрокаРеквизитов = "ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПроцентов,СтатьяДДСПоступленияВыдачи";
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКредитаДепозита, СтрокаРеквизитов);
		МассивСтатей = Новый Массив;
		Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПоступленияВыдачи);
		Иначе
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСОсновногоДолга);
			МассивСтатей.Добавить(Реквизиты.СтатьяДДСПроцентов);
		КонецЕсли;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивСтатей)));
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

// Процедура устанавливает параметры выбора договора кредита(депозита, займа)
// и очищает договора кредита (депозита, займа) не соотвествующие текущей хозяйственной операции, организации.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//  ЭлементРасшифровкаПлатежаДоговор - ПолеФормы - Поле для ввода договора кредита (депозита)
//  ОчиститьДоговора - Булево - Если истина тогда очищать в таб.части расшифровка платежа договора кредита (депозита) 
//								не соотвествующие текущей хозяйственной операции
//
Процедура УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, ЭлементРасшифровкаПлатежаДоговор, ОчиститьДоговора = Ложь) Экспорт
	
	ХарактерДоговора = Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация);
	Если ХарактерДоговора = Неопределено Тогда// это не кредитно\депозитная хоз.операция
		Возврат;
	КонецЕсли;
	
	// Определим параметры выбора
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора", ХарактерДоговора));
	
	// Определимся с отбором по организации
	Организация = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		Если НЕ Объект.БанковскийСчет.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчет,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Если НЕ Объект.Касса.Пустая() Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Касса,"ВалютаДенежныхСредств,Владелец");
			Организация = Реквизиты.Владелец;
			Валюта = Реквизиты.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Объект.Организация) Тогда
		Организация = Объект.Организация;
	КонецЕсли;
	
	// Определимся с отбором по валюте
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДоговора.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
	|ГДЕ
	|	НЕ ДанныеДоговора.ПометкаУдаления
	|	И (ДанныеДоговора.Организация = &Организация ИЛИ &ЛюбаяОрганизация)
	|	И (ДанныеДоговора.Контрагент = &Контрагент ИЛИ &ЛюбойКонтрагнет)
	|	И ДанныеДоговора.ХарактерДоговора = &ХарактерДоговора
	|	И ДанныеДоговора.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДанныеДоговора.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах)");
	Запрос.УстановитьПараметр("Организация"     , Организация);
	Запрос.УстановитьПараметр("ЛюбаяОрганизация", НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Контрагент"      , Объект.Контрагент);
	Запрос.УстановитьПараметр("ЛюбойКонтрагнет" , НЕ ЗначениеЗаполнено(Объект.Контрагент));
	Запрос.УстановитьПараметр("ХарактерДоговора", ХарактерДоговора);
	
	ИмеютсяРасчетыВВалютеОплатаВГривнах = Запрос.Выполнить().Выбрать().Следующий();
	Если НЕ ИмеютсяРасчетыВВалютеОплатаВГривнах Тогда
		Если НЕ ЗначениеЗаполнено(Валюта) И ЗначениеЗаполнено(Объект.Валюта) Тогда
			Валюта = Объект.Валюта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Валюта) Тогда
			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Валюта));
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора
	ЭлементРасшифровкаПлатежаДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Определим связей параметров выбора
	МассивСвязей = Новый Массив;
	ОчищатьДоговор = РежимИзмененияСвязанногоЗначения.Очищать;
	Если НЕ Объект.Организация.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", ОчищатьДоговор));
	КонецЕсли;
	
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент","Объект.Контрагент", ОчищатьДоговор));
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер","Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер", ОчищатьДоговор));
	КонецЕсли;
	ЭлементРасшифровкаПлатежаДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
	// Очистим договора не соотвествующие текущей хозяйственной операции
	Если ОчиститьДоговора Тогда
		МассивДоговоров = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("ДоговорКредитаДепозита");
		РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоговоров, "Организация,ХарактерДоговора");
		Если РеквизитыДоговоров.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				Если РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].Организация <> Организация
					ИЛИ РеквизитыДоговоров[СтрокаТаблицы.ДоговорКредитаДепозита].ХарактерДоговора <> ХарактерДоговора Тогда
					СтрокаТаблицы.ДоговорКредитаДепозита = Неопределено;
					СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;// есть что очищать
	КонецЕсли;// Необходимо очистить договора кредитов (депозитов)
	
КонецПроцедуры

// Процедура список выбора типов сумм текущей хозяйственной операции.
//
// Параметры:
//	Список - СписокЗначений - список выбора элемента формы
//  ХозОперация - Перечисления.ХозяйственныеОперации - текщая хозяйственная операция
//
Процедура ЗаполнитьСписокТиповСуммКредитовДепозитов(Список, ХозОперация) Экспорт
	
	ТипыСумм = Перечисления.ТипыСуммГрафикаКредитовИДепозитов;
	Список.Очистить();
	Список.Добавить(ТипыСумм.ОсновнойДолг);
	Список.Добавить(ТипыСумм.Проценты);
	Если ХозОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		Список.Добавить(ТипыСумм.Комиссия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокПериодовВозникновенияРасходов(Список, Знач Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Список.Очистить();
	Список.Добавить(НачалоДня(Дата), НСтр("ru='Текущий день';uk='Поточний день'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), -1), НСтр("ru='Прошлый месяц';uk='Минулий місяць'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), -1), НСтр("ru='Прошлый квартал';uk='Минулий квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), -1), НСтр("ru='Прошлый год';uk='Минулий рік'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), 1), НСтр("ru='Следующий месяц';uk='Наступний місяць'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), 3), НСтр("ru='Следующий квартал';uk='Наступний квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), 12), НСтр("ru='Следущий год';uk='Наступний рік'"));
	
КонецПроцедуры

// Процедура заполняет организацию владельца объекта расчета в табличной части.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - Текущий объект
//  ИмяДокумента - Строка - Имя документа как в метаданных
//  ИмяТаблицы - Строка - Имя табличной части как в метаданных
//                        В табличной части объект расчетов должен содержаться в поле "Заказа"
//                        Необходимо наличие поля "Организация"
//
Процедура ЗаполнитьВладельцаОбъектаРасчета(Объект, ИмяТаблицы = "РасшифровкаПлатежа") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки-1 КАК ИндексСтроки,
	|	Таблица.Заказ КАК Заказ
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ИндексСтроки КАК ИндексСтроки,
	|	ЕСТЬNULL(Таблица.Заказ.Организация, &Организация) КАК Организация
	|ИЗ
	|	вт КАК Таблица";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Объект[ИмяТаблицы].Выгрузить());
	Если ИмяТаблицы = "КредиторскаяЗадолженность" 
		И (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями) Тогда
	
		Запрос.УстановитьПараметр("Организация", Объект.ОрганизацияКредитор);
	
	Иначе
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект[ИмяТаблицы][Выборка.ИндексСтроки].Организация = Выборка.Организация;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ФункцииЗаполненияДокументов

// Функция определяет партнера, соответствующего выбранному контрагенту.
//
// Возвращает ссылку на партнера или Неопределено, если заданный для контрагента партнер не удовлетворяет условиям отбора
//
// Параметры
//    Контрагент - СправочникСсылка.Контрагенты - контрагент, партнера которого нужно найти
//    ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - необязательное ограничение по хозяйственной операции
//
Функция ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|	И (ВЫБОР КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту))
	|	ТОГДА
	|		Контрагенты.Партнер.Клиент
	|	КОГДА &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов))
	|	ТОГДА
	|		Контрагенты.Партнер.ПрочиеОтношения
	|	ИНАЧЕ
	|		Контрагенты.Партнер.Поставщик
	|	КОНЕЦ
	|		ИЛИ &ХозяйственнаяОперация = НЕОПРЕДЕЛЕНО
	|		ИЛИ &ИспользоватьПартнеровКакКонтрагентов)
	|";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Партнер = Выборка.Партнер;
	Иначе
		Партнер = Неопределено;
	КонецЕсли;
	
	Возврат Партнер;

КонецФункции // ПолучитьПартнераПоКонтрагенту()

// Процедура заполняет значения полей "МФО" и "КоррСчет".
//
Процедура ЗаполнитьМФОиКоррСчет(Банк, МФО, КоррСчет) Экспорт

	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Код КАК МФО,
	|	КоррСчет КАК КоррСчет
	|ИЗ
	|	Справочник.КлассификаторБанков КАК Банки
	|ГДЕ
	|	Банки.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		МФО = Выборка.МФО;
		КоррСчет = Выборка.КоррСчет;
	КонецЕсли;

КонецПроцедуры

// Процедура получает банк по указанному МФО банка или корреспондентскому счету.
//
// Параметры:
//	Поле - Строка - Имя поля, в котором произведен выбор значения.
//	Значение - Строка - Значение, выбранное в поле.
//	Банк - СправочникСсылка.КлассификаторБанков - Значение поля для указания банка
//	МФОБанка - Строка - МФО банка
//	КоррСчет - Строка - Корреспондентский счет банка
//
// Возвращаемое значение:
//	СписокЗначений - Список банков для интерактивного выбора.
//
Функция ПолучитьСписокБанковПоРеквизитам(Поле, Значение, Банк, МФО, КоррСчет) Экспорт	

	СписокБанков = Новый СписокЗначений;
	
	// Если значение не выбрано, очистим значение банка.
	Если ПустаяСтрока(Значение) Тогда
	
		Банк = Справочники.КлассификаторБанков.ПустаяСсылка();
		МФО = "";
		КоррСчет = "";
		
		Возврат СписокБанков;
		
	КонецЕсли;
		
	ТаблицаБанков = Новый ТаблицаЗначений;
	Колонки = ТаблицаБанков.Колонки;
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("КоррСчет");
	
	ЭтоМФО = Ложь;
	ЭтоКоррСчет = Ложь;
	Если Найти(Поле, "МФО") <> 0 Тогда
		ЭтоМФО = Истина;
	ИначеЕсли СтрНайти(Поле, "КоррСчет") <> 0 Тогда
		ЭтоКоррСчет = Истина;
	КонецЕсли;
	
	Если (ЭтоМФО И СтрДлина(СокрЛП(Значение)) = 6)
	 ИЛИ (ЭтоКоррСчет И СтрДлина(СокрЛП(Значение)) >= 11)
	Тогда
		
		Если ЭтоМФО Тогда	
		
			СтруктураОтбора = Новый Структура("Код", СокрЛП(Значение));
			
		ИначеЕсли ЭтоКоррСчет Тогда
			СтруктураОтбора = Новый Структура("КоррСчет", СокрЛП(Значение));
			
		КонецЕсли;
		
		Выборка = Справочники.КлассификаторБанков.Выбрать(,, СтруктураОтбора, "Код Возр");
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
				
	КонецЕсли;
	
	Если ТаблицаБанков.Количество() = 1 Тогда
		ДанныеБанка = ТаблицаБанков[0];
		
		Банк = ДанныеБанка.Ссылка;
		МФО = ДанныеБанка.Код;
		КоррСчет = ДанныеБанка.КоррСчет;
		СписокБанков.Добавить(Банк);
		
	ИначеЕсли ТаблицаБанков.Количество() > 1 Тогда
		МассивБанков = ТаблицаБанков.ВыгрузитьКолонку("Ссылка");
		СписокБанков.ЗагрузитьЗначения(МассивБанков);
		
	КонецЕсли;
	
	Возврат СписокБанков;
	
КонецФункции


// Функция помещает расшифровку платежа во временное хранилище и возвращает адрес.
//
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа, УникальныйИдентификатор) Экспорт

	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		РасшифровкаПлатежа.Выгрузить(),
		УникальныйИдентификатор);
		
	Возврат АдресПлатежейВХранилище;
	
КонецФункции // ПоместитьРасшифровкуПлатежаВХранилище()

// Процедура заполняет кассу, банковский счет или эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты заявки
//	ДанныеЗаполнения - Структура - Данные для заполнения документа
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, ВалютаПлатежа = Неопределено) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты = ФормаОплаты;
		СтруктураПараметров.Касса 		= ДанныеЗаполнения.Касса;
		СтруктураПараметров.Валюта 		= ВалютаПлатежа;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		Если Не ЗначениеЗаполнено(Касса) Тогда
			ТекущаяКасса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.Кассы.ПолучитьРеквизитыКассы(ТекущаяКасса).Организация
				Тогда
					Касса = ТекущаяКасса;
				КонецЕсли;
			Иначе
				Касса = ТекущаяКасса;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			ДанныеЗаполнения.Вставить("Касса", Касса);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		
		СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты    = ФормаОплаты;
		СтруктураПараметров.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		СтруктураПараметров.Валюта 		   = ВалютаПлатежа;
		
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			ТекущийБанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ТекущийБанковскийСчет).Организация
				Тогда
					БанковскийСчет = ТекущийБанковскийСчет;
				КонецЕсли;
			Иначе
				БанковскийСчет = ТекущийБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
		
		ЭквайринговыйТерминал =
			Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(ДанныеЗаполнения.Организация);
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ТекущийЭквайринговыйТерминал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийЭквайринговыйТерминал", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ТекущийЭквайринговыйТерминал).Организация
				Тогда
					ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
				КонецЕсли;
			Иначе
				ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Реквизиты = Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("Валюта", Реквизиты.Валюта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыДокументаПоФормеОплаты()

// Процедура заполняет документ на основании заявки на расходование денежных средств.
//
// Параметры:
//	Заявка - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты (зависит от вводимого документа оплаты)
//  ХозяйственнаяОперация - Перечисление.ХозяйственныеОпрервции - Хозяйственная операция заполняемого документа
//
Процедура ЗаполнитьДокументПоЗаявкеНаРасходованиеДенежныхСредств(
	Знач Заявка,
	Знач ВалютаДокумента,
	ДанныеЗаполнения,
	РасшифровкаПлатежа,
	ФормаОплаты,
	ТаблицаВедомостей = Неопределено,
	ХозяйственнаяОперация = Неопределено
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Заявка.Организация КАК Организация,
	|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|		Заявка.ХозяйственнаяОперацияПоЗарплате
	|	ИНАЧЕ
	|		Заявка.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВыплатаЗарплаты,
	|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Заявка.Подразделение КАК Подразделение,
	|	Заявка.Контрагент КАК Контрагент,
	|	Заявка.Контрагент.Наименование КАК КонтрагентНаименование,
	|	Заявка.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	Заявка.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	Заявка.ПодотчетноеЛицо.Наименование КАК ПодотчетноеЛицоНаименование,
	|	Заявка.ДатаАвансовогоОтчета КАК ДатаАвансовогоОтчета,
	|	Заявка.Валюта КАК ВалютаЗаявки,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.ПланированиеСуммы КАК ПланированиеСуммы,
	|	&Ссылка КАК ДокументОснование,
	|	Заявка.ВалютаКонвертации КАК ВалютаКонвертации,
	|	Заявка.КурсКонвертации КАК КурсКонвертации,
	|	Заявка.СуммаПослеКонвертации КАК СуммаПослеКонвертации,
	|	Заявка.Статус КАК Статус,
	|	Заявка.Проведен КАК ЗаявкаПроведена,
	|
	|	Заявка.Касса КАК Касса,
	|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
	|	ТОГДА
	|		Заявка.КассаПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КассаПолучатель,
	|	Заявка.БанковскийСчет КАК БанковскийСчет,
	|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
	|	ТОГДА
	|		Заявка.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|	Заявка.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ЕСТЬNULL(-ДенежныеСредства.СуммаОстаток, 0) КАК СуммаДокумента,
	|	Заявка.НомерВедомостиНаВыплатуЗарплаты КАК НомерВедомостиНаВыплатуЗарплаты,
	|	Заявка.ДатаВедомостиНаВыплатуЗарплаты КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	Заявка.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов,
	|	Заявка.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов
	|	
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки() КАК ДенежныеСредства
	|	ПО
	|		Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	Заявка.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Заявка);

	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	КонецЕсли;
	
	Если Не Выборка.ЗаявкаПроведена Тогда
		Текст = НСтр("ru='Заявка на расходование денежных средств не проведена. Ввод на основании непроведенного документа запрещен';uk='Заявка на витрачання грошових коштів не проведена. Введення на підставі непроведенного документа заборонене'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если Выборка.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате Тогда
		Текст = НСтр("ru='Заявка на расходование денежных средств не утверждена к оплате';uk='Заявка на витрачання грошових коштів не затверджена до оплати'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ФормаОплатыЗаявки)
		И ФормаОплаты <> Выборка.ФормаОплатыЗаявки Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Форма оплаты ""%1"" вводимого документа отличается от формы оплаты ""%2"" заявки';uk='Форма оплати ""%1"" документу, що вводиться, відрізняється від форми оплати ""%2"" заявки'"),
			ФормаОплаты,
			Выборка.ФормаОплатыЗаявки);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
			ИЛИ Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
				Текст = НСтр("ru='Перечисления в бюджет и перечисления таможне следует осуществлять безналичным платежом';uk='Перерахування в бюджет і перерахування митниці слід здійснювати безготівковим платежем'");
				ВызватьИсключение Текст;
			КонецЕсли;
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта
		И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Текст = НСтр("ru='Выбранная операция не соответствует операции возврата оплаты клиенту, для которой предусмотрен эквайринговый платеж';uk='Вибрана операція не відповідає операції повернення оплати клієнту, для якої передбачено еквайрінговий платіж'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ОплатаПоЗаявкам", Истина);
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		ДанныеЗаполнения.Вставить("Выдать", Выборка.ПодотчетноеЛицоНаименование);
		ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(Выборка.ПодотчетноеЛицо).Представление;
		Если НЕ ЗначениеЗаполнено(ДокументФизическогоЛица) Тогда
			ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(
				Выборка.ПодотчетноеЛицо,
				Справочники.ВидыДокументовФизическихЛиц.Паспорт).Представление;
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ПоДокументу", ДокументФизическогоЛица);
	ИначеЕсли Не ПустаяСтрока(Выборка.КонтрагентНаименованиеПолное) Тогда
		ДанныеЗаполнения.Вставить("Выдать", Выборка.КонтрагентНаименованиеПолное);
	Иначе
		ДанныеЗаполнения.Вставить("Выдать", Выборка.КонтрагентНаименование);
	КонецЕсли;
	
	// Заполним кассу, банковский счет или эквайринговый терминал.
	Если Выборка.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения);
	Иначе
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, Выборка.Валюта);
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Выборка.ВалютаЗаявки,
		?(ЗначениеЗаполнено(ВалютаДокумента), ВалютаДокумента, ДанныеЗаполнения.Валюта),
		ТекущаяДата());
		
	// Заполним табличную часть документа.
	Если Не Выборка.ЭтоВыплатаЗарплаты Тогда
		
		ТабличнаяЧасть = РасшифровкаПлатежа;
		// Заполним табличную часть документа.
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ тчРасшифровкаПлатежа.Комментарий) > 1
		|			ТОГДА """"
		|		ИНАЧЕ МИНИМУМ(тчРасшифровкаПлатежа.Комментарий)
		|	КОНЕЦ КАК Комментарий,
		|	тчРасшифровкаПлатежа.Ссылка,
		|	тчРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|	тчРасшифровкаПлатежа.Партнер,
		|	тчРасшифровкаПлатежа.Заказ,
		|	тчРасшифровкаПлатежа.ДоговорКредитаДепозита,
		|	тчРасшифровкаПлатежа.ТипСуммыКредитаДепозита,
		|	тчРасшифровкаПлатежа.ДоговорЗаймаСотруднику,
		|	тчРасшифровкаПлатежа.ДоговорЛизинга,
		|	тчРасшифровкаПлатежа.ТипПлатежаПоЛизингу,
		|	тчРасшифровкаПлатежа.СтатьяРасходов,
		|	тчРасшифровкаПлатежа.АналитикаРасходов,
		|	тчРасшифровкаПлатежа.АналитикаАктивовПассивов
		|
		|ПОМЕСТИТЬ РасшифровкаПлатежа
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК тчРасшифровкаПлатежа
		|	
		|ГДЕ
		|	тчРасшифровкаПлатежа.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	тчРасшифровкаПлатежа.Ссылка,
		|	тчРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|	тчРасшифровкаПлатежа.Партнер,
		|	тчРасшифровкаПлатежа.Заказ,
		|	тчРасшифровкаПлатежа.ДоговорКредитаДепозита,
		|	тчРасшифровкаПлатежа.ТипСуммыКредитаДепозита,
		|	тчРасшифровкаПлатежа.ДоговорЗаймаСотруднику,
		|	тчРасшифровкаПлатежа.ДоговорЛизинга,
		|	тчРасшифровкаПлатежа.ТипПлатежаПоЛизингу,
		|	тчРасшифровкаПлатежа.СтатьяРасходов,
		|	тчРасшифровкаПлатежа.АналитикаРасходов,
		|	тчРасшифровкаПлатежа.АналитикаАктивовПассивов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Аналитика.Партнер КАК Партнер,
		|	ДенежныеСредства.Заказ КАК Заказ,
		|	ДенежныеСредства.СтатьяРасходов КАК СтатьяРасходов,
		|	ДенежныеСредства.АналитикаРасходов КАК АналитикаРасходов,
		|	ДенежныеСредства.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК Ведомость,
		|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	&Подразделение КАК Подразделение,
		|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств,
		|	ДенежныеСредства.ДоговорКредитаДепозита,
		|	ДенежныеСредства.ТипСуммыКредитаДепозита,
		|	ДенежныеСредства.ДоговорЗаймаСотруднику,
		|	СУММА(ВЫБОР
		|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ДенежныеСредства.Сумма
		|			ИНАЧЕ ДенежныеСредства.Сумма
		|		КОНЕЦ) * &КоэффициентПересчетаВВалютуДокумента КАК Сумма,
		|	ВЫБОР КОГДА ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
		|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
		|	КОНЕЦ КАК ВалютаВзаиморасчетов,
		|	ДенежныеСредства.ДоговорЛизинга КАК ДоговорЛизинга,
		|	ДенежныеСредства.ТипПлатежаПоЛизингу КАК ТипПлатежаПоЛизингу,
		|	РасшифровкаПлатежа.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО ДенежныеСредства.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ПО ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = РасшифровкаПлатежа.Ссылка
		|			И ДенежныеСредства.СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
		|			И Аналитика.Партнер = РасшифровкаПлатежа.Партнер
		|			И ДенежныеСредства.Заказ = РасшифровкаПлатежа.Заказ
		|			И ДенежныеСредства.ДоговорКредитаДепозита = РасшифровкаПлатежа.ДоговорКредитаДепозита
		|			И ДенежныеСредства.ТипСуммыКредитаДепозита = РасшифровкаПлатежа.ТипСуммыКредитаДепозита
		|			И ДенежныеСредства.ДоговорЗаймаСотруднику = РасшифровкаПлатежа.ДоговорЗаймаСотруднику
		|			И ДенежныеСредства.ДоговорЛизинга = РасшифровкаПлатежа.ДоговорЛизинга
		|			И ДенежныеСредства.ТипПлатежаПоЛизингу = РасшифровкаПлатежа.ТипПлатежаПоЛизингу
		|			И ДенежныеСредства.СтатьяРасходов = РасшифровкаПлатежа.СтатьяРасходов
		|			И ДенежныеСредства.АналитикаРасходов = РасшифровкаПлатежа.АналитикаРасходов
		|			И ДенежныеСредства.АналитикаАктивовПассивов = РасшифровкаПлатежа.АналитикаАктивовПассивов
		|ГДЕ
		|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Аналитика.Партнер,
		|	ДенежныеСредства.Заказ,
		|	ДенежныеСредства.СтатьяРасходов,
		|	ДенежныеСредства.АналитикаРасходов,
		|	ДенежныеСредства.АналитикаАктивовПассивов,
		|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств,
		|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств,
		|	ДенежныеСредства.ДоговорКредитаДепозита,
		|	ДенежныеСредства.ТипСуммыКредитаДепозита,
		|	ДенежныеСредства.ДоговорЗаймаСотруднику,
		|	ДенежныеСредства.ДоговорЛизинга,
		|	ДенежныеСредства.ТипПлатежаПоЛизингу,
		|	ВЫБОР КОГДА ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
		|		ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Валюта
		|	КОНЕЦ,
		|	РасшифровкаПлатежа.Комментарий,
		|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
		|";
		
		Запрос.УстановитьПараметр("Подразделение", ДанныеЗаполнения.Подразделение);
		Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуДокумента", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
		
		ТабличнаяЧасть.Очистить();
		
		ВыборкаТабличнаяЧасть = Запрос.Выполнить().Выбрать();
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
		Пока ВыборкаТабличнаяЧасть.Следующий() Цикл
			Если ВыборкаТабличнаяЧасть.Сумма > 0 Тогда
				Сумма = Мин(ВыборкаТабличнаяЧасть.Сумма, СуммаДокумента);
				СуммаДокумента = СуммаДокумента - Сумма;
				Если Сумма > 0 Тогда
					НоваяСтрока = ТабличнаяЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТабличнаяЧасть);
					НоваяСтрока.Сумма = Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
		
	КонецЕсли;
	
	
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ДанныеЗаполнения.КурсКонвертации <> 0
		И ДанныеЗаполнения.СуммаПослеКонвертации = 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаПослеКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоЗаявкеНаРасходованиеДенежныхСредств()

// Процедура заполняет документ на основании списка заявок на расходование денежных средств.
//
// Параметры:
//	Заявки - Массив - список документов ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты (зависит от вводимого документа оплаты)
//  ХозяйственнаяОперация - Перечисление.ХозяйственныеОпрервции - Хозяйственная операция заполняемого документа
//
Процедура ЗаполнитьДокументПоСпискуЗаявокНаРасходованиеДенежныхСредств(
	Знач Заявки,
	Знач ВалютаДокумента,
	ДанныеЗаполнения,
	РасшифровкаПлатежа,
	ФормаОплаты,
	ТаблицаВедомостей = Неопределено,
	ХозяйственнаяОперация = Неопределено
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки)
		И ФормаОплаты <> ДанныеЗаполнения.ФормаОплатыЗаявки Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Форма оплаты ""%1"" вводимого документа отличается от формы оплаты ""%2"" выделенных заявок';uk='Форма оплати ""%1"" документу, що вводиться, відрізняється від форми оплати ""%2"" виділених заявок'"),
			ФормаОплаты,
			ДанныеЗаполнения.ФормаОплатыЗаявки);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	// Заполним кассу, банковский счет или эквайринговый терминал.
	ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, ДанныеЗаполнения.Валюта);
	
	ТабличнаяЧасть = РасшифровкаПлатежа;
	
	// Заполним табличную часть документа
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|	ВЫБРАТЬ
	|		КурсВалюты.Валюта КАК Валюта,
	|		КурсВалюты.Курс * КурсВалютыОтчета.Кратность / (КурсВалюты.Кратность * КурсВалютыОтчета.Курс) КАК КоэффициентПересчета
	|	ПОМЕСТИТЬ КурсыВалют
	|	ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсВалютыОтчета
	|		ПО (ИСТИНА)
	|	ГДЕ
	|		КурсВалюты.Кратность <> 0
	|		И КурсВалютыОтчета.Курс <> 0
	|;
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасшифровкаПлатежа.Комментарий) > 1 ТОГДА
	|		""""
	|	ИНАЧЕ
	|		МИНИМУМ(РасшифровкаПлатежа.Комментарий)
	|	КОНЕЦ КАК Комментарий,
	|	РасшифровкаПлатежа.Ссылка, 
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов
	|
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ 
	|	РасшифровкаПлатежа.Ссылка В (&МассивСсылок)
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Ссылка, 
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов
	|;
	|
	|ВЫБРАТЬ
	|	Аналитика.Партнер КАК Партнер,
	|	ДенежныеСредства.Заказ КАК Заказ,
	|	ДенежныеСредства.СтатьяРасходов КАК СтатьяРасходов,
	|	ДенежныеСредства.АналитикаРасходов КАК АналитикаРасходов,
	|	ДенежныеСредства.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК Ведомость,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	&Подразделение КАК Подразделение,
	|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.ДоговорКредитаДепозита,
	|	СУММА(
	|		ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-ДенежныеСредства.Сумма
	|		ИНАЧЕ
	|			ДенежныеСредства.Сумма
	|		КОНЕЦ * КурсыВалют.КоэффициентПересчета) КАК Сумма,
	|	РасшифровкаПлатежа.Комментарий КАК Комментарий
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Валюта = КурсыВалют.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО ДенежныеСредства.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ПО ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = РасшифровкаПлатежа.Ссылка
	|		И ДенежныеСредства.СтатьяДвиженияДенежныхСредств    = РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|		И Аналитика.Партнер                                 = РасшифровкаПлатежа.Партнер
	|		И ДенежныеСредства.Заказ                            = РасшифровкаПлатежа.Заказ
	|		И ДенежныеСредства.ДоговорКредитаДепозита           = РасшифровкаПлатежа.ДоговорКредитаДепозита
	|		И ДенежныеСредства.СтатьяРасходов                   = РасшифровкаПлатежа.СтатьяРасходов
	|		И ДенежныеСредства.АналитикаРасходов                = РасшифровкаПлатежа.АналитикаРасходов
	|		И ДенежныеСредства.АналитикаАктивовПассивов         = РасшифровкаПлатежа.АналитикаАктивовПассивов
	|
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В (&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Партнер,
	|	ДенежныеСредства.Заказ,
	|	ДенежныеСредства.СтатьяРасходов,
	|	ДенежныеСредства.АналитикаРасходов,
	|	ДенежныеСредства.АналитикаАктивовПассивов,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.Комментарий
	|";
	
	Запрос.УстановитьПараметр("Валюта", ДанныеЗаполнения.Валюта);
	Запрос.УстановитьПараметр("Подразделение", ДанныеЗаполнения.Подразделение);
	Запрос.УстановитьПараметр("МассивСсылок", Заявки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ТабличнаяЧасть.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	 И ДанныеЗаполнения.КурсКонвертации <> 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаПослеКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоЗаявкеНаРасходованиеДенежныхСредств()



// Заполняет таблицу остатками денежных средств к выплате по заявкам
//
// Параметры:
//    ДанныеОтбора - Структура - содержит значения отбора заявок
//    ТабличнаяЧасть - ДанныеФормыКоллекция - заполняемая таблица
//
Процедура ЗаполнитьПоОстаткамЗаявокНаРасходованиеДенежныхСредств(ДанныеОтбора, ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыОтчета.Кратность / (КурсВалюты.Кратность * КурсВалютыОтчета.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсВалютыОтчета
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыОтчета.Курс <> 0
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасшифровкаПлатежа.Комментарий) > 1 ТОГДА
	|		""""
	|	ИНАЧЕ
	|		МИНИМУМ(РасшифровкаПлатежа.Комментарий)
	|	КОНЕЦ КАК Комментарий,
	|	РасшифровкаПлатежа.Ссылка, 
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Ссылка, 
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов
	|;
	|
	|ВЫБРАТЬ
	|	Аналитика.Партнер                                                       КАК Партнер,
	|	ДенежныеСредства.Заказ                                                  КАК Заказ,
	|	ДенежныеСредства.СтатьяРасходов                                         КАК СтатьяРасходов,
	|	ДенежныеСредства.АналитикаРасходов                                      КАК АналитикаРасходов,
	|	ДенежныеСредства.АналитикаАктивовПассивов                               КАК АналитикаАктивовПассивов,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств                    КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Номер              КАК НомерЗаявки,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Дата               КАК ДатаЗаявки,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Подразделение      КАК Подразделение,
	|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств                          КАК СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.ДоговорКредитаДепозита                                 КАК ДоговорКредитаДепозита,
	|	ДенежныеСредства.ДоговорЗаймаСотруднику                                 КАК ДоговорЗаймаСотруднику,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Валюта             КАК ВалютаЗаявки,
	|	СУММА(
	|		ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-ДенежныеСредства.Сумма
	|		ИНАЧЕ
	|			ДенежныеСредства.Сумма
	|		КОНЕЦ) КАК СуммаВВалюте,
	|	СУММА(
	|		ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-ДенежныеСредства.Сумма
	|		ИНАЧЕ
	|			ДенежныеСредства.Сумма
	|		КОНЕЦ * КурсыВалют.КоэффициентПересчета) КАК Сумма,
	|	МИНИМУМ(РасшифровкаПлатежа.Комментарий) КАК Комментарий
	|
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|	ПО ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Валюта = КурсыВалют.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО ДенежныеСредства.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики,
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ПО ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств  = РасшифровкаПлатежа.Ссылка
	|		И ДенежныеСредства.СтатьяДвиженияДенежныхСредств     = РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|		И Аналитика.Партнер                                  = РасшифровкаПлатежа.Партнер
	|		И ДенежныеСредства.Заказ                             = РасшифровкаПлатежа.Заказ
	|		И ДенежныеСредства.ДоговорКредитаДепозита            = РасшифровкаПлатежа.ДоговорКредитаДепозита
	|		И ДенежныеСредства.ДоговорЗаймаСотруднику            = РасшифровкаПлатежа.ДоговорЗаймаСотруднику
	|		И ДенежныеСредства.СтатьяРасходов                    = РасшифровкаПлатежа.СтатьяРасходов
	|		И ДенежныеСредства.АналитикаРасходов                 = РасшифровкаПлатежа.АналитикаРасходов
	|		И ДенежныеСредства.АналитикаАктивовПассивов          = РасшифровкаПлатежа.АналитикаАктивовПассивов
	|	
	|ГДЕ
	|	
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|	И ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	
	|	И Аналитика.Организация = &Организация
	|	И Аналитика.Контрагент = &Контрагент
	|	И ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.ПодотчетноеЛицо = &ПодотчетноеЛицо
	|	
	|	И (ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.ФормаОплатыЗаявки = &ФормаОплаты
	|		ИЛИ ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка))
	|	И (ВЫБОР КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|		ТОГДА ВЫБОР КОГДА ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Касса = &БанковскийСчетКасса
	|			ИЛИ ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Касса = ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|		КОГДА &ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|		ТОГДА ВЫБОР КОГДА ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.БанковскийСчет = &БанковскийСчетКасса
	|			ИЛИ ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	КОНЕЦ)
	|	И (ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.Валюта = &Валюта
	|		ИЛИ ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов))
	|	
	|
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Партнер,
	|	ДенежныеСредства.Заказ,
	|	ДенежныеСредства.СтатьяРасходов,
	|	ДенежныеСредства.АналитикаРасходов,
	|	ДенежныеСредства.АналитикаАктивовПассивов,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.ДоговорКредитаДепозита,
	|	ДенежныеСредства.ДоговорЗаймаСотруднику
	|";
	
	Для каждого ЭлементОтбора из ДанныеОтбора Цикл
		Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	
	Если ДанныеОтбора.Свойство("Дата") Тогда
		Запрос.УстановитьПараметр("ГраницаПериод", Новый Граница(КонецДня(ДанныеОтбора.Дата), ВидГраницы.Включая));
	КонецЕсли;
	
	ТабличнаяЧасть.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сумма > 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ПредставлениеЗаявки = Выборка.НомерЗаявки + " от " + Формат(Выборка.ДатаЗаявки, "ДФ=дд.ММ.гг");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет документ на основании распоряжения на перемещение денежных средств.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств - Документ - основание
//	ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть "Расшифровка платежа" документа
//
Процедура ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств(
	Знач ДокументОснование,
	ДокументОбъект,
	ДанныеЗаполнения,
	РасшифровкаПлатежа = Неопределено
	) Экспорт
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК РаспоряжениеНаПеремещениеДенежныхСредств,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Статус КАК Статус,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.Касса
	|	КОНЕЦ КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|		) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КассаПолучатель,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк)
	|		) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	(-ДенежныеСредства.СуммаОстаток) КАК СуммаДокумента
	|ИЗ
	|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|			ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|		) КАК ДенежныеСредства
	|	ПО 
	|		Истина
 	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (&МассивОпераций)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	МассивОпераций = Новый Массив;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
		ПредставлениеДокумента = НСтр("ru='Приходный кассовый ордер';uk='Прибутковий касовий ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		ПредставлениеДокумента = НСтр("ru='Расходный кассовый ордер';uk='Видатковий касовий ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru='Списание безналичных ДС';uk='Списання безготівкових ГК'");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить %1 на основании документа %2';uk='Не потрібно вводити %1 на підставі документа %2'"),
			ПредставлениеДокумента,
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Выборка.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			Текст = НСтр("ru='Распоряжение на перемещение денежных средств не утверждено к оплате';uk='Розпорядження на переміщення грошових коштів не затверджено до оплати'");
			ВызватьИсключение Текст;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств()

// Процедура заполняет статью ДДС в шапке документа по хозяйственной операции.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура
//
Процедура ЗаполнитьСтатьюДвиженияДенежныхСредств(ДокументОбъект, ДанныеЗаполнения, ХозяйственнаяОперация) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			
			Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты 
				И ДанныеЗаполнения.Свойство("ХозяйственнаяОперацияПоЗарплате") Тогда
				
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате));
					
			Иначе
					
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",
					ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация));
					
			КонецЕсли;
			
		Иначе
			ДокументОбъект.СтатьяДвиженияДенежныхСредств =
				ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьюДвиженияДенежныхСредств()

// Процедура заполняет статью декларации по единому налогу в шапке документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
Процедура ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу(Объект) Экспорт
	
	Объект.СтатьяДекларацииПоЕдиномуНалогу = Неопределено;
	
	Если НЕ Справочники.Организации.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата) Тогда
		Возврат;
	КонецЕсли;

	ТипДокумента = ТипЗнч(Объект.Ссылка);
	// Типы должны проверяться в начале, т.к. не у всех документов есть реквизит ХозяйственнаяОперация
	Если ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничнойВыручке")
	 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
	 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга") Тогда
	 
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыРеализация;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыРеализация;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыВозвраты;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	      ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
			
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ЗатратыЗатратыСвязанныеСПриобретением;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтатьяДекларацииПоЕдиномуНалогу)
	   И Объект.СтатьяДекларацииПоЕдиномуНалогу.ПринадлежитЭлементу(Справочники.СтатьиНалоговыхДеклараций.ЕННК_Затраты)
	   И НЕ НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Объект.Организация, Объект.Дата) Тогда
		Объект.СтатьяДекларацииПоЕдиномуНалогу = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу


// Функция возвращает данные расшифровки платежа в разрезе ставок НДС.
//
// Параметры:
// Возвращаемые значение:
//  СуммаДокумента - Число - Общая сумма документа
//  ВалютаДокумента - СправочникСсылка.Валюты - Валюта для пересчета суммы НДС
//  МассивДокументов - Массив - Массив документов для определения суммы НДС
//  ОплатаОтКлиента - Булево - Признак оплаты от клиента
//
// Возвращаемое значение:
//  РасшифровкаПлатежаНДС - Таблица значений - Данные расшифровки платежа в разрезе ставок НДС
//
Функция ПолучитьРасшифровкуПлатежаНДС(СуммаДокумента, ВалютаДокумента, МассивДокументов, ОплатаОтКлиента = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ПОМЕСТИТЬ ТаблицаСуммНДС
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|	
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом.Товары КАК ТаблицаДокумента
	|	
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата             КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата             КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаВознаграждения     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДСВознаграждения  КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта           КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата             КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	И НЕ &ОплатаОтКлиента
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов.Расходы КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаДокумента
	|	
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СтавкаНДС     КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаСНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.СуммаНДС      КАК СуммаНДС,
	|	ТаблицаДокумента.Ссылка.Валюта КАК Валюта,
	|	ТаблицаДокумента.Ссылка.Дата   КАК Дата
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&МассивДокументов)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммНДС.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаСуммНДС.Валюта КАК Валюта,
	|	НАЧАЛОПЕРИОДА(ТаблицаСуммНДС.Дата, ДЕНЬ) КАК Дата,
	|	СУММА(ТаблицаСуммНДС.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(ТаблицаСуммНДС.СуммаНДС) КАК СуммаНДС
	|
	|ИЗ
	|	ТаблицаСуммНДС КАК ТаблицаСуммНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуммНДС.СтавкаНДС,
	|	ТаблицаСуммНДС.Валюта,
	|	НАЧАЛОПЕРИОДА(ТаблицаСуммНДС.Дата, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС
	|
	|ИТОГИ ПО
	|	Валюта
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ОплатаОтКлиента", ОплатаОтКлиента);
	
	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаНДС.Колонки.Добавить("СуммаСНДС");
	ТаблицаНДС.Колонки.Добавить("СуммаНДС");
	
	ВыборкаПоВалютам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВалютам.Следующий() Цикл
		
		Если ВыборкаПоВалютам.Валюта <> ВалютаДокумента Тогда
			КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ВыборкаПоВалютам.Валюта, ВалютаДокумента, ТекущаяДата());
		Иначе
			КоэффициентПересчета = 1;
		КонецЕсли;
		
		Выборка = ВыборкаПоВалютам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаНДС.Добавить();
			НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
			НоваяСтрока.СуммаСНДС = Выборка.СуммаСНДС * КоэффициентПересчета;
			НоваяСтрока.СуммаНДС  = Выборка.СуммаНДС  * КоэффициентПересчета;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНДС.Свернуть("СтавкаНДС", "СуммаСНДС, СуммаНДС");
	СуммаСНДСВсего = ТаблицаНДС.Итог("СуммаСНДС");
	СуммаКРаспределению = СуммаДокумента;
	УчтеноБазыРаспределения = 0;
	УжеРаспределено = 0;
	
	Для Каждого Строка Из ТаблицаНДС Цикл
		
		КоэффициентНДС = ?(Строка.СуммаСНДС <> 0, Строка.СуммаНДС / Строка.СуммаСНДС, 0);
		
		Строка.СуммаСНДС = ?(СуммаСНДСВсего <> 0, Окр(СуммаКРаспределению * (УчтеноБазыРаспределения + Строка.СуммаСНДС) / СуммаСНДСВсего, 2) - УжеРаспределено, 0);
		Строка.СуммаНДС = Строка.СуммаСНДС * КоэффициентНДС;
		
	КонецЦикла;
	
	Возврат ТаблицаНДС;
	
КонецФункции

// Функция формирует текст строки "В том числе НДС" платежа.
//
// Параметры:
// Возвращаемое значение:
//	СуммаДокумента - Число - Общая сумма документа
//	МассивДокументов - Массив - Массив документов для определения суммы НДС
//	ДобавлятьТекстВТомЧисле - Булево - Добавлять строку "В т.ч." в текст платежа
//  ОплатаОтКлиента - Булево - Признак оплаты от клиента
//
// Возвращаемое значение:
//	Строка - Текст суммы НДС платежа
//
Функция ТекстСуммаНДСПлатежа(СуммаДокумента, ВалютаДокумента, МассивДокументов, ДобавлятьТекстВТомЧисле, ОплатаОтКлиента = Ложь) Экспорт
	
	ТаблицаНДС = ПолучитьРасшифровкуПлатежаНДС(СуммаДокумента, ВалютаДокумента, МассивДокументов, ОплатаОтКлиента);
	
	Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ПредставлениеВалюты = "грн.";
	Иначе
		ПредставлениеВалюты = СокрЛП(ВалютаДокумента);
	КонецЕсли;
	
	Если ТаблицаНДС.Количество() > 0 Тогда
		
		ТекстНазначениеПлатежаНДС = "";
		
		Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
			ТекстНазначениеПлатежаНДС = ТекстНазначениеПлатежаНДС
				+ ?(ПустаяСтрока(ТекстНазначениеПлатежаНДС), "", ", ")
				+ "ПДВ (" + СтрокаТаблицы.СтавкаНДС + ") "
				+ Формат(СтрокаТаблицы.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=") + " " + ПредставлениеВалюты;
		КонецЦикла;
		
		Если ДобавлятьТекстВТомЧисле Тогда
			ТекстНазначениеПлатежаНДС = "В т.ч. " + ТекстНазначениеПлатежаНДС;
		КонецЕсли;
		
	Иначе
		ТекстНазначениеПлатежаНДС = "Без податку (ПДВ)";
	КонецЕсли;
	
	Возврат ТекстНазначениеПлатежаНДС;
	
КонецФункции

// Процедура формирует текст назначения платежа, в соответствии с выбранным вариантом.
//
// Параметры: Объект - ДокументСсылка - Документ оплаты.
//			  Действие - Строка - Идентификатор варианта заполнения.
//
Процедура ВставитьТекстНазначенияПлатежа(Объект, ВыделенныйТекст, Действие) Экспорт
	
	
	Если Действие = "СписокДокументов" Тогда
		
		ТекстНазначенияПлатежа = ПолучитьСписокДокументовДляНазначенияПлатежа(Объект);
		
	ИначеЕсли Действие = "НДС20" Тогда
		
			СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.2) * 0.2, 2);
			ТекстНазначенияПлатежа = "ПДВ (20%) " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=");
		
    ИначеЕсли Действие = "НДС14" Тогда
    	
    		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.14) * 0.14, 2);
    		ТекстНазначенияПлатежа = "ПДВ (14%) " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=");
		
	ИначеЕсли Действие = "НДС7" Тогда
		
			СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.07) * 0.07, 2);
			ТекстНазначенияПлатежа = "ПДВ (7%) " + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=");
            
	ИначеЕсли Действие = "НДС0" Тогда
		
			ТекстНазначенияПлатежа = "ПДВ (0%) 0,00 ";
		
	ИначеЕсли Действие = "БезНДС" Тогда
		
			ТекстНазначенияПлатежа = "ПДВ (звільнення від ПДВ) 0,00 ";
		
	ИначеЕсли Действие = "НеНДС" Тогда
		
			ТекстНазначенияПлатежа = "ПДВ (звільнення від ПДВ) 0,00 ";
		
	ИначеЕсли Действие = "ИзСчетаПолучателя" Тогда
		
		Реквизиты = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента);
		ТекстНазначенияПлатежа = Реквизиты.ТекстНазначения;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНазначенияПлатежа) Тогда
		ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет документ на основании договора кредита (депозита).
//
// Параметры:
//	ДоговорКредитаДепозита - СправочникСсылка.ДоговорыКредитовИДепозитов - Договор - основание
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//  ЭтоПоступление - Булево - вид движения денежных средств
//
Процедура ЗаполнитьПоДоговоруКредитаДепозита(Знач ДоговорКредитаДепозита, ДанныеЗаполнения, РасшифровкаПлатежа, ЭтоПоступление) Экспорт
	
	ДанныеЗаполнения = Справочники.ДоговорыКредитовИДепозитов.ДанныеЗаполненияДокументаДДС(ДоговорКредитаДепозита, ЭтоПоступление);
	РасшифровкаПлатежа.Загрузить(ДанныеЗаполнения.РасшифровкаПлатежа);
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

// Очищает банковский счет организации, если он принадлежит другой организации.
// Заполняет по умолчанию, если банковский счет не заполнен.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Проверяемый банковский счет
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности
//
Процедура ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Знач Организация, БанковскийСчет, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецСчета = Неопределено;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецСчета Тогда
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры

// Очищает кассу организации, если она принадлежит другой организации.
// Заполняет по умолчанию, если касса не заполнена.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Касса - СправочникСсылка.Кассы - Проверяемая касса
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности
//
Процедура ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Знач Организация, Касса, ФормаОплаты = Неопределено, НаправлениеДеятельности = Неопределено) Экспорт
	
	ВладелецКассы = Неопределено;
	Если ЗначениеЗаполнено(Касса) Тогда
		ВладелецКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Организация <> ВладелецКассы Тогда
		Касса = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
	СтруктураПараметров.Касса 					= Касса;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
КонецПроцедуры


// Процедура пересчитывает сумму дохода по единому налогу при изменении суммы в шапке документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	СуммаДокумента - Число - Сумма документа
//
Процедура ПересчетСуммыПоЕдиномуНалогу(Объект, СуммаДокумента) Экспорт
	
    // Заполняем сумму ЕН только для плательщиков ЕН и не плательщиков НДС одновременно
	Если НЕ Справочники.Организации.ПлательщикЕдиногоНалога(Объект.Организация, Объект.Дата) 
	 ИЛИ Справочники.Организации.ПлательщикНДС(Объект.Организация, Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Объект.Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничнойВыручке") Тогда
		Объект.СуммаПоЕдиномуНалогу = ?(СуммаДокумента < 0, СуммаДокумента*(-1), СуммаДокумента) - Объект.СуммаОплатыПлатежнымиКартами;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Объект.СуммаПоЕдиномуНалогу = ?(СуммаДокумента < 0, СуммаДокумента*(-1), СуммаДокумента) - Объект.ОплатаПлатежнымиКартами.Итог("Сумма");
		
	Иначе
		Объект.СуммаПоЕдиномуНалогу = СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчетСуммыПоЕдиномуНалогу()

#КонецОбласти

#Область ЗапросыДинамическихСписков

// Формирует текст запроса для динамического списка заказов к поступлению денежных средств
//
// Возвращаемое значение:
//    Строка - Текст запроса
//
Функция ТекстЗапросаЗаказыКПоступлению() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.ЗаказКлиента КАК Ссылка,
	|	РасчетыСКлиентами.ЗаказКлиента.Дата КАК Дата,
	|	РасчетыСКлиентами.ЗаказКлиента.Номер КАК Номер,
	|	ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) КАК Тип,
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) = ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями)
	|		И НЕ ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями)
	|		И НЕ ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента КАК Документ.ПередачаТоваровМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	
	|	&ПоступлениеОплатыОтКлиента КАК ХозяйственнаяОперацияПредставление,
	|	КлючиАналитики.Партнер КАК Плательщик,
	|	КлючиАналитики.Партнер.Наименование КАК ПлательщикПредставление,
	|	КлючиАналитики.Контрагент КАК Контрагент,
	|	КлючиАналитики.Контрагент.Наименование КАК КонтрагентПредставление,
	|	КлючиАналитики.Организация КАК Организация,
	|	РасчетыСКлиентами.ЗаказКлиента.Менеджер КАК Ответственный,
	|	РасчетыСКлиентами.ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	РасчетыСКлиентами.ЗаказКлиента.Валюта КАК ВалютаДокумента,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В
	|			(ТИП(Документ.РеализацияТоваровУслуг), ТИП(Документ.ПередачаТоваровМеждуОрганизациями), ТИП(Документ.АктВыполненныхРабот)) ТОГДА
	|		ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.БанковскийСчетОрганизации, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
	|	ИНАЧЕ
	|		ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
	|	КОНЕЦ КАК БанковскийСчет,
	|	ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.Касса, ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)) КАК Касса,
	|	РасчетыСКлиентами.КОплатеОстаток КАК СуммаКОплате
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаПлатежа, ЗаказКлиента <> НЕОПРЕДЕЛЕНО) КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|ГДЕ
	|	РасчетыСКлиентами.КОплатеОстаток > 0
	|	И &ВыводитьДокументыРасчетов
	|{ГДЕ
	|	КлючиАналитики.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|}
	
	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Дата,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Номер,
	|	ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику),
	|	РасчетыСПоставщиками.Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|	&ВозвратОтПоставщика,
	|	КлючиАналитики.Партнер,
	|	КлючиАналитики.Партнер.Наименование,
	|	КлючиАналитики.Контрагент,
	|	КлючиАналитики.Контрагент.Наименование КАК КонтрагентПредставление,
	|	КлючиАналитики.Организация,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Менеджер,
	|	РасчетыСПоставщиками.ЗаказПоставщику.СуммаДокумента,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Валюта,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)),
	|	ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.Касса, ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)) КАК Касса,
	|	РасчетыСПоставщиками.КОплатеОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа, ЗаказПоставщику ССЫЛКА Документ.ВозвратТоваровПоставщику) КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|ГДЕ
	|	РасчетыСПоставщиками.КОплатеОстаток > 0
	|	И &ВыводитьВозвратыОтПоставщиков
	|{ГДЕ
	|	КлючиАналитики.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|}

	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	ДАТАВРЕМЯ(1,1,1) КАК Дата,
	|	"""" КАК Номер,
	|	ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Документ.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка)),
	|	ДенежныеСредства.Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника),
	|	&ВозвратОтПодотчетника,
	|	ДенежныеСредства.ПодотчетноеЛицо,
	|	ДенежныеСредства.ПодотчетноеЛицо.Наименование,
	|	ДенежныеСредства.ПодотчетноеЛицо,
	|	ДенежныеСредства.ПодотчетноеЛицо.Наименование,
	|	ДенежныеСредства.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ДенежныеСредства.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ДатаПлатежа, ) КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.СуммаОстаток > 0
	|	И &ВыводитьВозвратыОтПодотчетников
	|{ГДЕ
	|	ДенежныеСредства.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|}
	
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	Распоряжение.Ссылка,
	|	Распоряжение.Дата,
	|	Распоряжение.Номер,
	|	ТИПЗНАЧЕНИЯ(Распоряжение.Ссылка),
	|	Распоряжение.Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
	|	""Распоряжение на перемещение"",
	|	Распоряжение.Касса,
	|	Распоряжение.Касса.Наименование,
	|	Распоряжение.Организация,
	|	Распоряжение.Организация.Наименование,
	|	Распоряжение.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	Распоряжение.СуммаДокумента,
	|	Распоряжение.Валюта,
	|	Распоряжение.БанковскийСчетПолучатель,
	|	Распоряжение.КассаПолучатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаОстаток, 0) < 0
	|			ТОГДА -ЕСТЬNULL(ДенежныеСредства.СуммаОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК Распоряжение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКВыплате.Остатки КАК ДенежныеСредства
	|		ПО Распоряжение.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	Распоряжение.Проведен
	|	И Распоряжение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате)
	|	И Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
	|	И ВЫБОР
	|		КОГДА Распоряжение.Проведен
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаОстаток, 0) < 0
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И &ВыводитьРаспоряженияНаПеремещение
	|{ГДЕ
	|	Распоряжение.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|}
	
	|ОБЪЕДИНИТЬ ВСЕ
	
	|ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка,
	|	СчетНаОплатуКлиенту.Дата,
	|	СчетНаОплатуКлиенту.Номер,
	|	ТИПЗНАЧЕНИЯ(СчетНаОплатуКлиенту.Ссылка),
	|	СчетНаОплатуКлиенту.Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|	&ПоступлениеОплатыОтКлиента,
	|	СчетНаОплатуКлиенту.Партнер,
	|	СчетНаОплатуКлиенту.Партнер.Наименование,
	|	СчетНаОплатуКлиенту.Контрагент,
	|	СчетНаОплатуКлиенту.Контрагент.Наименование,
	|	СчетНаОплатуКлиенту.Организация,
	|	СчетНаОплатуКлиенту.Менеджер,
	|	СчетНаОплатуКлиенту.СуммаДокумента,
	|	СчетНаОплатуКлиенту.Валюта,
	|	СчетНаОплатуКлиенту.БанковскийСчет,
	|	СчетНаОплатуКлиенту.Касса,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ИЛИ СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|		КОГДА СчетНаОплатуКлиенту.СуммаДокумента > ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)
	|			ТОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)
	|		КОГДА СчетНаОплатуКлиенту.СуммаДокумента > ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|			ТОГДА СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				РасчетыСКлиентами.СчетНаОплату КАК СчетНаОплату,
	|				СУММА(РасчетыСКлиентами.Сумма) КАК СуммаОплаты
	|			ИЗ
	|				РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ГДЕ
	|				РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И РасчетыСКлиентами.СчетНаОплату.Проведен
	|				И НЕ РасчетыСКлиентами.СчетНаОплату.Аннулирован
	|			{ГДЕ
	|				РасчетыСКлиентами.СчетНаОплату.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|			}
	|		
	|			СГРУППИРОВАТЬ ПО
	|				РасчетыСКлиентами.СчетНаОплату) КАК РасчетыСКлиентами
	|		ПО СчетНаОплатуКлиенту.Ссылка = РасчетыСКлиентами.СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаПлатежа, ) КАК РасчетыСКлиентамиОстатки
	|		ПО СчетНаОплатуКлиенту.ДокументОснование = РасчетыСКлиентамиОстатки.ЗаказКлиента
	|ГДЕ
	|	СчетНаОплатуКлиенту.Проведен
	|	И НЕ СчетНаОплатуКлиенту.Аннулирован
	|	И ВЫБОР
	|			КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Справочник.ДоговорыКонтрагентов
	|					ИЛИ СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|				ТОГДА ВЫБОР
	|						КОГДА СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0) = 0
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			КОГДА СчетНаОплатуКлиенту.СуммаДокумента <= ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|					ИЛИ ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) <= 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И &ВыводитьСчетаНаОплату
	|{ГДЕ
	|	СчетНаОплатуКлиенту.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|}
	
	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	ДАТАВРЕМЯ(1,1,1) КАК Дата,
	|	"""" КАК Номер,
	|	
	|	ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Документ.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка)),
	|	
	|	ДенежныеСредства.Валюта,
	|	ВЫБОР КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте)
	|	КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ИнкассацияВБанк) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет)
	|	КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПеречислениеНаДругойСчет) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета)
	|	КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПриобретениеВалюты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.РеализацияВалюты))
	|	ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу) ТОГДА
	|		""Поступление ДС по эквайрингу""
	|	КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ИнкассацияВБанк) ТОГДА
	|		""Инкассация в банк""
	|	КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПеречислениеНаДругойСчет) ТОГДА
	|		""Перечисление ДС на другой счет""
	|	КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПриобретениеВалюты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.РеализацияВалюты))
	|	ТОГДА
	|		""Конвертация валюты""
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПриобретениеВалюты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.РеализацияВалюты))
	|	ТОГДА
	|		ДенежныеСредства.Контрагент
	|	ИНАЧЕ
	|		ДенежныеСредства.Отправитель
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПриобретениеВалюты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.РеализацияВалюты))
	|	ТОГДА
	|		ДенежныеСредства.Контрагент.Наименование
	|	ИНАЧЕ
	|		ДенежныеСредства.Отправитель.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПриобретениеВалюты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.РеализацияВалюты))
	|	ТОГДА
	|		ДенежныеСредства.Контрагент
	|	ИНАЧЕ
	|		ДенежныеСредства.Отправитель
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ДенежныеСредства.ВидПереводаДенежныхСредств В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПриобретениеВалюты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.РеализацияВалюты))
	|	ТОГДА
	|		ДенежныеСредства.Контрагент.Наименование
	|	ИНАЧЕ
	|		ДенежныеСредства.Отправитель.Наименование
	|	КОНЕЦ,
	|	ДенежныеСредства.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	0 КАК СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДокумента,
	|	ВЫРАЗИТЬ(ДенежныеСредства.Получатель КАК Справочник.БанковскиеСчетаОрганизаций) КАК БанковскийСчет,
	|	ВЫРАЗИТЬ(ДенежныеСредства.Получатель КАК Справочник.Кассы) КАК Касса,
	|	ДенежныеСредства.СуммаОстаток КАК СуммаКОплате
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваВПути.Остатки(&ДатаПлатежа,
	|		ТИПЗНАЧЕНИЯ(Получатель) В (&ТипыПолучателейДенежныхСредствВПути)
	|		) КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.СуммаОстаток > 0
	|	И &ВыводитьДенежныеСредстваВПути
	|{ГДЕ
	|	ДенежныеСредства.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для динамического списка заказов к оплате
//
// Возвращаемое значение:
//    Строка - Текст запроса
//
Функция ТекстЗапросаЗаказыКОплате() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыСПоставщиками.ЗаказПоставщику                                       КАК Ссылка,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Дата                                  КАК Дата,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Номер                                 КАК Номер,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Проведен                              КАК Проведен,
	|	
	|	ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику)                          КАК Тип,
	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) = ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями)
	|		И НЕ ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями)
	|		И НЕ ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику КАК Документ.ПередачаТоваровМеждуОрганизациями).РасчетыЧерезОтдельногоКонтрагента ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	
	|	РасчетыСПоставщиками.Валюта                                                КАК Валюта,
	|	
	|	РегистрАналитикаУчетаПоПартнерам.Партнер                                   КАК Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент                                КАК Контрагент,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент.Наименование                   КАК КонтрагентПредставление,
	|	РегистрАналитикаУчетаПоПартнерам.Организация                               КАК Организация,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Подразделение                         КАК Подразделение,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Менеджер                              КАК Менеджер,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Приоритет                             КАК Приоритет,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.Статус, НЕОПРЕДЕЛЕНО)        КАК Статус,
	|	
	|	ИСТИНА                                                                     КАК ТребуетсяОплата,
	|	-РасчетыСПоставщиками.КОплатеОстаток
	|		+ РасчетыСПоставщиками.ОплачиваетсяОстаток                             КАК СуммаКОплате,
	|	РасчетыСПоставщиками.ЗаказПоставщику.СуммаДокумента                        КАК СуммаДокумента,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Валюта                                КАК ВалютаДокумента,
	|	РасчетыСПоставщиками.ЗаказПоставщику.ФормаОплаты                           КАК ФормаОплаты,
	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) = ТИП(Документ.ПоступлениетоваровУслуг) ТОГДА
	|		ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику КАК Документ.ПоступлениетоваровУслуг).БанковскийСчетОрганизации
	|	ИНАЧЕ
	|		ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.БанковскийСчет,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
	|	КОНЕЦ КАК БанковскийСчет,
	
	|	ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.Касса,
	|		ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка))                               КАК Касса,
	|	
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания)
	|			ТОГДА 0
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КартинкаПриоритета
	|	
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа, ЗаказПоставщику <> НЕОПРЕДЕЛЕНО) КАК РасчетыСПоставщиками
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(, ЗаказПоставщику <> НЕОПРЕДЕЛЕНО) КАК ОстаткиЗадолженности
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = ОстаткиЗадолженности.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщиками.ЗаказПоставщику = ОстаткиЗадолженности.ЗаказПоставщику
	|			И РасчетыСПоставщиками.Валюта = ОстаткиЗадолженности.Валюта
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	
	|ГДЕ
	|	(РасчетыСПоставщиками.КОплатеОстаток - РасчетыСПоставщиками.ОплачиваетсяОстаток) < 0
	|	И &ВыводитьДокументыРасчетов
	|	
	|{ГДЕ
	|	РегистрАналитикаУчетаПоПартнерам.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|}
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	
	|	РасчетыСКлиентами.ЗаказКлиента                                          КАК Ссылка,
	|	РасчетыСКлиентами.ЗаказКлиента.Дата                                     КАК Дата,
	|	РасчетыСКлиентами.ЗаказКлиента.Номер                                    КАК Номер,
	|	РасчетыСКлиентами.ЗаказКлиента.Проведен                                 КАК Проведен,
	|	
	|	ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента)                             КАК Тип,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)    КАК ХозяйственнаяОперация,
	|	РасчетыСКлиентами.Валюта                                                КАК Валюта,
	|	
	|	РегистрАналитикаУчетаПоПартнерам.Партнер                                КАК Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент                             КАК Контрагент,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент.Наименование                КАК КонтрагентПредставление,
	|	РегистрАналитикаУчетаПоПартнерам.Организация                            КАК Организация,
	|	РасчетыСКлиентами.ЗаказКлиента.Подразделение                            КАК Подразделение,
	|	РасчетыСКлиентами.ЗаказКлиента.Менеджер                                 КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО                                                            КАК Приоритет,
	|	НЕОПРЕДЕЛЕНО                                                            КАК Статус,
	|	
	|	ИСТИНА                                                                  КАК ТребуетсяОплата,
	|	-РасчетыСКлиентами.КОплатеОстаток                                       КАК СуммаКОплате,
	|	РасчетыСКлиентами.ЗаказКлиента.СуммаДокумента                           КАК СуммаДокумента,
	|	РасчетыСКлиентами.ЗаказКлиента.Валюта                                   КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)                         КАК ФормаОплаты,
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)            КАК БанковскийСчет,
	|	ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)                                 КАК Касса,
	|	
	|	НЕОПРЕДЕЛЕНО КАК КартинкаПриоритета
	|	
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(РасчетыСКлиентами.ЗаказКлиента КАК Документ.ВозвратТоваровОтКлиента) КАК ЗаказКлиента,
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентами.Валюта КАК Валюта,
	|		РасчетыСКлиентами.КОплатеОстаток КАК КОплатеОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаПлатежа, ЗаказКлиента ССЫЛКА Документ.ВозвратТоваровОтКлиента) КАК РасчетыСКлиентами
	|	ГДЕ
	|		РасчетыСКлиентами.КОплатеОстаток < 0
	|		И РасчетыСКлиентами.ЗаказКлиента.СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства)
	|		И &ВыводитьВозвратыОтКлиентов
	|	) КАК РасчетыСКлиентами
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	
	|{ГДЕ
	|	РегистрАналитикаУчетаПоПартнерам.Организация В (&РазрешенныеЗначенияПоляОрганизация)
	|}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции


// Проверяет принадлежность хозяйственной операции к множеству операций по зарплате.
//
// Возвращаемое значение:
//    Булево
//
Функция ОперацияПоЗарплате(ХозяйственнаяОперация) Экспорт
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	
	Если МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область НазначениеПлатежа

// Возвращает строку с перечислением документов из расшифровки платежа.
//
// Параметры: Объект - ДокументСсылка - Документ, содержащий расшифровку платежа.
//
// Возвращаемое значение: Строка.
//
Функция ПолучитьСписокДокументовДляНазначенияПлатежа(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить(,"Заказ, Сумма");
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов(Документы.ТипВсеСсылки(), "СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокументов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для Сч = 1 По РасшифровкаПлатежа.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла;
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"), "Документ");
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Сумма"), "Сумма");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Документ КАК Документ,
	|	ИсходнаяТаблица.Сумма	 КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента		  КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента		  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента		  КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента		  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.НомерВходящегоДокумента		  КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента		  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер				  		  КАК Номер,
	|	НЕОПРЕДЕЛЕНО								  КАК Дата,
	|	СУММА(ТаблицаДокументов.Сумма)				  КАК Сумма
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.Префикс,
	|	ДанныеДокумента.Номер
	|");
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаКРаспределению = Объект.РасшифровкаПлатежа.Итог("Сумма");
	ТекстНазначенияПлатежа = "";
	ПредставленияДокументов = ПолучитьПредставленияДокументов();
	РеквизитыВалюты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Валюта, "Код, Наименование");
	ВалютаДляПечати = СокрЛП(РеквизитыВалюты.Наименование);
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "НаименованиеДляПечати")
			+ " " + Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=")
			+ " " + ВалютаДляПечати;
		Иначе
			ВидДокумента = "";
			ПредставленияДокументов.Свойство(Выборка.Документ.Метаданные().Имя, ВидДокумента);
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ПредставлениеДляПечати = НСтр("ru='%Вид% №%Номер% от %Дата% %Сумма% %Валюта%';uk='%Вид% №%Номер% від %Дата% %Сумма% %Валюта%'");
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Вид%", ВидДокумента);
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Номер%",
					ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Ложь, Истина));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Дата%", Формат(Выборка.Дата, "ДЛФ=D"));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Сумма%",
					Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ="));
				ПредставлениеДляПечати = СтрЗаменить(ПредставлениеДляПечати, "%Валюта%", ВалютаДляПечати);
				ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", " + ПредставлениеДляПечати;
			КонецЕсли;
		КонецЕсли; 
		СуммаКРаспределению = СуммаКРаспределению - Выборка.Сумма;
	КонецЦикла;
	Если СуммаКРаспределению > 0 Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ", "
			+ "без вказівки призначення"
			+ " " + Формат(СуммаКРаспределению, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=")
			+ " " + ВалютаДляПечати;
	КонецЕсли;
	ТекстНазначенияПлатежа = "Оплата по" + Сред(ТекстНазначенияПлатежа, 2);
	Если Прав(ТекстНазначенияПлатежа, 1) <> "." Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ".";
	КонецЕсли;
	ДлинаТекстаДокументов = СтрДлина(ТекстНазначенияПлатежа);
	
	ТекстСуммаНДС = ТекстСуммаНДСПлатежа(
		Объект.РасшифровкаПлатежа.Итог("Сумма"),
		Объект.Валюта,
		РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"),
		Истина);
	ДлинаТекстаНДС = СтрДлина(ТекстСуммаНДС);
	
	Если ДлинаТекстаДокументов + ДлинаТекстаНДС > 210 Тогда
		ДлинаТекстаДокументов = 207 - ДлинаТекстаНДС;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ДлинаТекстаДокументов);
		ТекстПоискаПоследнегоДокумента = ТекстНазначенияПлатежа;
		ПозицияПоследнейЗапятой = 0;
		ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		Пока НЕ ПозицияЗапятой = 0 Цикл
			ПозицияПоследнейЗапятой = ПозицияПоследнейЗапятой + ПозицияЗапятой;
			ТекстПоискаПоследнегоДокумента = Сред(ТекстПоискаПоследнегоДокумента, ПозицияЗапятой + 1);
			ПозицияЗапятой = СтрНайти(ТекстПоискаПоследнегоДокумента, ",");
		КонецЦикла;
		ТекстНазначенияПлатежа = Лев(ТекстНазначенияПлатежа, ПозицияПоследнейЗапятой - 1) + "...";
	КонецЕсли;
	ТекстНазначенияПлатежа = СокрЛП(ТекстНазначенияПлатежа) + Символы.ПС + СокрЛП(ТекстСуммаНДС);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТекстНазначенияПлатежа;
КонецФункции

// Возвращает перечень документов с их синонимами для назначения платежа
//
// Возвращаемое значение: Структура, в ключах которой - имена документов, в значениях - синонимы.
//
Функция ПолучитьПредставленияДокументов()

	ВидыДокументовКонтрагента = Новый Структура;

	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 						   НСтр("ru='заказу';uk='замовлення'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 					   НСтр("ru='заказу';uk='замовлення'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента",	   НСтр("ru='заявке на возврат товаров';uk='заявки на повернення товарів'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",					   НСтр("ru='отчету комитенту';uk='звіту комітенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",					   НСтр("ru='отчету комитенту';uk='звіту комітенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",			   НСтр("ru='отчету комитенту';uk='звіту комітенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",    НСтр("ru='отчету комитенту';uk='звіту комітенту'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",    НСтр("ru='накладной';uk='накладної'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеТоваровУслуг",			   НСтр("ru='накладной';uk='накладної'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеУслугПрочихАктивов",		   НСтр("ru='акту';uk='акту'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 			   НСтр("ru='накладной';uk='накладної'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 		   НСтр("ru='декларации на товары';uk='декларації на товари'"));

	Возврат ВидыДокументовКонтрагента;
	
КонецФункции // ПолучитьПредставленияДокументов()

// Выделяет в назначении платежа фиксированную часть без служебных символов, слов менее 2 символов, чисел
//
// Параметры:
//    ВремСтрока - Строка - Преобразуемая строка
//
Функция ФорматироватьНазначениеПлатежа(Знач ВремСтрока) Экспорт
	
	НедопустимыеСимволы = "0123456789""/\[]:;|=?*<>.,-_(){}+-=№@";
	
	Для Позиция = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ВремСтрока = СтрЗаменить(ВремСтрока, Сред(НедопустимыеСимволы, Позиция, 1), " ");
	КонецЦикла;
	
	МассивСлов = РазложитьСтрокуНазначенияВМассивСлов(ВремСтрока);
	
	СтрокаРезультат = "";
	Для каждого Слово из МассивСлов Цикл
		СтрокаРезультат = СтрокаРезультат + " " + Слово;
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаРезультат);
	
КонецФункции

Функция РазложитьСтрокуНазначенияВМассивСлов(Знач Строка)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		ОчСимвол = Сред(Строка, Позиция, 1);
		Если ОчСимвол = " " Тогда
			Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова И Позиция - НачалоСлова > 2 Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполненияДокументов

// Функция формирует запрос по табличной части "Расшифровка платежа".
//
//	РасшифровкаПлатежа - Табличная часть документа
//	Организация - СправочникСсылка.Организации - Организация документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
// Возвращаемое значение:
//	Запрос - запрос по табличной части
//
Функция ЗапросПоТабличнойЧастиРасшифровкаПлатежа(РасшифровкаПлатежа, Организация, ХозяйственнаяОперация = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ПроверкаСчетаНаОплату
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ВЫБОР
	|	КОГДА ТаблицаДокумента.Заказ ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями ТОГДА
	|		ТаблицаДокумента.Заказ.Организация НЕ В (&Организация) И ТаблицаДокумента.Заказ.ОрганизацияПолучатель НЕ В (&Организация)
	|	КОГДА ТаблицаДокумента.Заказ ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями ТОГДА
	|		ТаблицаДокумента.Заказ.Организация НЕ В (&Организация)
	|		 И ТаблицаДокумента.Заказ.Комиссионер НЕ В (&Организация)
	|	КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		ВЫБОР КОГДА ТаблицаДокумента.СчетНаОплату.Организация ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ТаблицаДокумента.СчетНаОплату.Организация НЕ В(&Организация)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ТаблицаДокумента.Заказ.Организация ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ТаблицаДокумента.Заказ.Организация НЕ В(&Организация)
	|		КОНЕЦ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = РасшифровкаПлатежа.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	КолонкаЗаказИзДокумента = ТаблицаДокумента.Колонки.Найти("Заказ");
	КолонкаЗаказИзДокумента.Имя = "ЗаказИзДокумента";
	МассивДобавляемыхТипов = Новый Массив;
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	ТаблицаДокумента.Колонки.Добавить("Заказ", Новый ОписаниеТипов(КолонкаЗаказИзДокумента.ТипЗначения, МассивДобавляемыхТипов));
	ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку(КолонкаЗаказИзДокумента), "Заказ");
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьСчетаНаОплатуКлиентам", ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам"));
	
	ДоступныеОрганизации = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЗапросПоДоступнымОрганизациям = Новый Запрос("ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		ЗапросПоДоступнымОрганизациям.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = ЗапросПоДоступнымОрганизациям.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	Возврат Запрос;
	
КонецФункции // ЗапросПоТабличнойЧастиРасшифровкаПлатежа()

// Процедура проверяет заполнение табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - Документ
//	СуммаДокумента - Число - Общая сумма документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьЗаполнениеРасшифровкиПлатежа(
	ДокументОбъект,
	СуммаДокумента,
	ХозяйственнаяОперация,
	Отказ,
	ОшибкиЗаполнения = ""
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	
	Если МассивНепроверяемыхОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие сумм документа и табличной части.
	Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0
	   И СуммаДокумента <> ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма")
	Тогда
		Текст = НСтр("ru='Сумма по строкам в табличной части должна равняться сумме документа';uk='Сума за рядками у табличній частині повинна дорівнювати сумі документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"РасшифровкаПлатежа[0].Сумма",
			,
			Отказ);
	КонецЕсли;
	
	// Проверим соответствие организации в шапке документа и в табличной части.
	Запрос = ЗапросПоТабличнойЧастиРасшифровкаПлатежа(
		ДокументОбъект.РасшифровкаПлатежа,
		ДокументОбъект.Организация,
		ХозяйственнаяОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ПроверкаСчетаНаОплату Тогда
			ТекстДокумент = НСтр("ru='счете на оплату';uk='рахунку на оплату'");
			ИмяПоля = "СчетНаОПлату";
		Иначе
			ТекстДокумент = НСтр("ru='заказе';uk='замовленні'");
			ИмяПоля = "Заказ";
		КонецЕсли;
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Организация в %1 в строке %2 списка ""Расшифровка платежа"" не соответствует организации документа %3';uk='Організація в %1 в рядку %2 списку ""Розшифровка платежу"" не відповідає організації документа %3'"),
			ТекстДокумент,
			Выборка.НомерСтроки,
			ДокументОбъект.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"РасшифровкаПлатежа[" + (Выборка.НомерСтроки - 1) + "]." + ИмяПоля,
			,
			Отказ);
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРасшифровкиПлатежа()

// Процедура проверки заявки на расходование денежных средств, указанной в документе.
//
// Параметры:
//	ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьЗаявкуНаРасходованиеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
		И МассивНепроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) = Неопределено Тогда
		
		Если Не ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда
			
			Если Не ДокументОбъект.ОплатаПоЗаявкам Тогда
				Возврат;
			КонецЕсли;
		
			МассивЗаявок = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ЗаявкаНаРасходованиеДенежныхСредств");
			
			Если Не МассивЗаявок.Количество() Тогда
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Представление(ДанныеДокумента.Ссылка) КАК Заявка,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Организация <> &Организация ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЕстьОтличияВОрганизации,
			|	
			|	ВЫБОР КОГДА ДанныеДокумента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) ТОГДА
			|		1
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ЗаявкаНеУтвержденаКоплате
			|	
			|ИЗ
			|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В (&МассивЗаявок)
			|");
		
			Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
			Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
			Запрос.УстановитьПараметр("ДокументОплатыСсылка", ДокументОбъект.Ссылка);
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				БанковскийСчетКасса = ДокументОбъект.Касса;
			ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
				БанковскийСчетКасса = ДокументОбъект.БанковскийСчет;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("БанковскийСчетКасса", БанковскийСчетКасса);
			
			ТаблицаПроверки = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаПроверки из ТаблицаПроверки Цикл
				
				Если СтрокаПроверки.ЕстьОтличияВОрганизации Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Организация документа %1 не соответствует организации в %2';uk='Організація документа %1 не відповідає організації в %2'"),
						ДокументОбъект.Организация,
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
				Если СтрокаПроверки.ЗаявкаНеУтвержденаКоплате Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 не утверждена к оплате';uk='%1 не затверджена до оплати'"),
						СтрокаПроверки.Заявка);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументОбъект,
						"",
						,
						Отказ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаявкуНаРасходованиеДенежныхСредств()

// Выводит сообщения об ошибках при вводе оплаты на основании заявок на расходование денежных средств
//
// Параметры:
// ВыборкаРеквизитыШапки - Выборка из результата запроса
//
// Возвращаемое значение:
// Булево - Истина, если отказ от ввода на основании
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияОплаты(ВыборкаРеквизитыШапки) Экспорт
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных заявок на расходование денежных средств отличается поле ""%ПредставлениеПоля%""';uk='У виділених заявок на витрачання грошових коштів відрізняється поле ""%ПредставлениеПоля%""'");
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияФормаОплаты Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Форма оплаты';uk='Форма оплати'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперация Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Хозяйственная операция';uk='Господарська операція'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВалютаОплаты Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Валюта';uk='Валюта'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОрганизация Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Организация';uk='Організація'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияКонтрагент Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Контрагент';uk='Контрагент'")),,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПодотчетноеЛицо Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Подотчетное лицо';uk='Підзвітна особа'")),,,, Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Процедура проверки распоряжения на перемещение денежных средств, указанного в документе.
//
// Параметры:
//	ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивПроверяемыхОпераций = Новый Массив;
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств")
	   И МассивПроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств)
	Тогда
	
		Реквизиты = Документы.РаспоряжениеНаПеремещениеДенежныхСредств.РеквизитыДокумента(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств);
		Если Реквизиты.Организация <> ДокументОбъект.Организация Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Организация в распоряжении не соответствует организации документа %1';uk='Організація в розпорядженні не відповідає організації документа %1'"),
				ДокументОбъект.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
			
			Текст = НСтр("ru='Распоряжение на перемещение денежных средств не утверждено к оплате';uk='Розпорядження на переміщення грошових коштів не затверджено до оплати'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
		Если Реквизиты.Валюта <> ДокументОбъект.Валюта Тогда
			
			Текст = НСтр("ru='Валюта распоряжения не соответствует валюте документа';uk='Валюта розпорядження не відповідає валюті документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств()

// Процедура проверяет кассу получателя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуПолучателя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		   И ЗначениеЗаполнено(ДокументОбъект.Касса)
		   И ДокументОбъект.Касса = ДокументОбъект.КассаПолучатель Тогда
		   
			Текст = НСтр("ru='Одна и та же касса не может являться отправителем и получателем одновременно';uk='Одна і та ж каса не може бути відправником і одержувачем одночасно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе 
		
			РеквизитыКассы = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.КассаПолучатель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			 И ДокументОбъект.Организация <> РеквизитыКассы.Организация Тогда
				Текст = НСтр("ru='Организация кассы получателя не соответствует организации документа';uk='Організація каси отримувача не відповідає організації документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.Валюта Тогда
				Текст = НСтр("ru='Валюта кассы получателя не соответствует валюте документа';uk='Валюта каси отримувача не відповідає валюті документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
			 И ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
			 	
			 	Запрос = Новый Запрос("
			 	|ВЫБРАТЬ
			 	|	ПолучателиПлатежейПриПеремещенииДС.ПолучательПлатежа КАК КассаПолучатель
			 	|ИЗ
			 	|	Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК ПолучателиПлатежейПриПеремещенииДС
			 	|ГДЕ
			 	|	ПолучателиПлатежейПриПеремещенииДС.Ссылка = &Касса");
			 	Запрос.УстановитьПараметр("Касса", ДокументОбъект.Касса);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой()
				 И РезультатЗапроса.Выгрузить().Найти(ДокументОбъект.КассаПолучатель) = Неопределено Тогда
					Текст = НСтр("ru='Касса получатель недоступна для перемещения денежных средств из кассы документа';uk='Каса одержувач недоступна для переміщення грошових коштів з каси документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ);
				КонецЕсли; 
			
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Организация) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.';uk='Організація каси одержувача повинна бути взаємопов''язана з організацією каси відправника за організаційною структурою.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Организация) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.';uk='Організація каси одержувача не повинна бути взаємопов''язана з організацією каси відправника за організаційною структурою.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуПолучателя()

// Процедура проверяет кассу отправителя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуОтправителя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаОтправитель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		   И ЗначениеЗаполнено(ДокументОбъект.Касса)
		   И ДокументОбъект.Касса = ДокументОбъект.КассаОтправитель Тогда
		   
			Текст = НСтр("ru='Одна и та же касса не может являться отправителем и получателем одновременно';uk='Одна і та ж каса не може бути відправником і одержувачем одночасно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ);
		Иначе 
		
			РеквизитыКассы = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.КассаОтправитель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И ДокументОбъект.Организация <> РеквизитыКассы.Организация Тогда
				
					Текст = НСтр("ru='Организация кассы отправителя не соответствует организации документа';uk='Організація каси відправника не відповідає організації документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			ИначеЕсли (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
				Или ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
				И ДокументОбъект.Организация = РеквизитыКассы.Организация Тогда
				
					Текст = НСтр("ru='Организация кассы отправителя должна отличаться от организации документа';uk='Організація каси відправника повинна відрізнятися від організації документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаОтправитель",
						,
						Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.Валюта Тогда
				Текст = НСтр("ru='Валюта кассы отправителя не соответствует валюте документа';uk='Валюта каси відправника не відповідає валюті документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Организация) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.';uk='Організація каси одержувача повинна бути взаємопов''язана з організацією каси відправника за організаційною структурою.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Организация) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.';uk='Організація каси одержувача не повинна бути взаємопов''язана з організацією каси відправника за організаційною структурою.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаОтправитель",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуОтправителя()

// Процедура проверяет кассу ККМ, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуККМ(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(ДокументОбъект.КассаККМ);
		Если ДокументОбъект.Организация <> РеквизитыКассыККМ.Организация Тогда
			Текст = НСтр("ru='Организация кассы ККМ не соответствует организации документа';uk='Організація каси ККМ не відповідає організації документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		Если ДокументОбъект.Валюта <> РеквизитыКассыККМ.Валюта Тогда
			Текст = НСтр("ru='Валюта кассы ККМ не соответствует валюте документа';uk='Валюта каси ККМ не відповідає валюті документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуККМ()

// Процедура проверяет банковский счет получатель, указанный в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьБанковскийСчетПолучатель(ДокументОбъект, Отказ, ОшибкиЗаполнения = "") Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)
		   И ДокументОбъект.БанковскийСчет = ДокументОбъект.БанковскийСчетПолучатель Тогда
		   
			Текст = НСтр("ru='Один и тот же банковский счет не может являться отправителем и получателем одновременно';uk='Один і той же банківський рахунок не може бути відправником і одержувачем одночасно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"БанковскийСчетПолучатель",
				,
				Отказ);
		Иначе
			
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчетПолучатель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			 И ДокументОбъект.Организация <> РеквизитыСчета.Организация Тогда
				Текст = НСтр("ru='Организация счета получателя не соответствует организации документа';uk='Організація рахунку отримувача не відповідає організації документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
				Текст = НСтр("ru='Валюта счета получателя не соответствует валюте документа';uk='Валюта рахунку отримувача не відповідає валюті документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ);
			КонецЕсли;
			
			// Проверка взаимосвязанности организации счета получателя с организацией кассы отправителя по организационной структуре
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя должна быть взаимосвязана с организацией счета отправителя по организационной структуре.';uk='Організація рахунку одержувача повинна бути взаємопов''язана з організацією рахунку відправника за організаційною структуоюі.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя не должна быть взаимосвязана с организацией счета отправителя по организационной структуре.';uk='Організація рахунку одержувача не повинна бути взаємопов''язана з організацією рахунку відправника за організаційною структурою.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетПолучатель()

// Процедура проверяет банковский счет контрагента, указанный в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	МассивНепроверяемыхРеквизитов - Массив - Реквизиты, не используемые для операции документа
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьБанковскийСчетКонтрагента(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ОшибкиЗаполнения = "") Экспорт
	
	Если МассивНепроверяемыхРеквизитов.Найти("БанковскийСчетКонтрагента") = Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(ДокументОбъект.БанковскийСчетКонтрагента);
			
		Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
			Текст = НСтр("ru='Валюта банковского счета не соответствует валюте документа';uk='Валюта рахунку не відповідає валюті документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"БанковскийСчетКонтрагента",
				,
				Отказ);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетКонтрагента()

// Процедура проверяет валюту конвертации, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьВалютуКонвертации(ДокументОбъект, Отказ, ОшибкиЗаполнения = "") Экспорт
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	   И ЗначениеЗаполнено(ДокументОбъект.Валюта)
	   И ЗначениеЗаполнено(ДокументОбъект.ВалютаКонвертации)
	Тогда
		
		Если ДокументОбъект.Валюта = ДокументОбъект.ВалютаКонвертации Тогда
			
			Текст = НСтр("ru='Валюта конвертации должна отличаться от валюты документа';uk='Валюта конвертації повинна відрізнятися від валюти документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"ВалютаКонвертации",
				,
				Отказ);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет сумму дохода по единому налогу, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьСуммуПоЕдиномуНалогу(ДокументОбъект, Отказ, СуммаДляКонтроля = 0) Экспорт
	
	Если СуммаДляКонтроля = 0 Тогда
		СуммаДляКонтроля = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если СуммаДляКонтроля < 0 Тогда
		СуммаДляКонтроля = (-1) * СуммаДляКонтроля;
	КонецЕсли;
	
	Если ДокументОбъект.СуммаПоЕдиномуНалогу > СуммаДляКонтроля Тогда
		
	    Текст = НСтр("ru='Сумма дохода по единому налогу больше, чем сумма документа';uk='Сума доходу по єдиному податку більше, ніж сума документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"СуммаПоЕдиномуНалогу",
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.СтатьяДекларацииПоЕдиномуНалогу)
	   И ДокументОбъект.СтатьяДекларацииПоЕдиномуНалогу <> Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыДоходомНеПризнается
	   И ДокументОбъект.СуммаПоЕдиномуНалогу = 0 Тогда
	   
	    Текст = НСтр("ru='Указана статья декларации по единому налогу, но не заполнена сумма дохода';uk='Зазначена стаття декларації по єдиному податку, але не заповнена сума доходу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"СуммаПоЕдиномуНалогу",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСуммуПоЕдиномуНалогу()

// Определяет, разрешены ли платежи без указания заявок на расходование денежных средств.
//
// Параметры: ДокументОбъект - документ, для которого выполняется проверка.
//
// Возвращаемое значение: Булево.
//
Функция РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Реквизиты = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.Касса);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		Реквизиты =
			Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчет);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		
		Реквизиты =
			Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ДокументОбъект.ЭквайринговыйТерминал);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции // РазрешеныПлатежиБезУказанияЗаявок() 

// Процедура очищает неиспользуемые для хозяйственной операции реквизиты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов документа, которые необходимо очищать
//	МассивРеквизитовОперации - Массив - Массив реквизитов документа, которые относятся к хозяйственной операции документа
//
Процедура ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, Знач МассивВсехРеквизитов, Знач МассивРеквизитовОперации) Экспорт
	
	// Удалим из массива реквизиты, относящиеся к хозяйственной операции.
	Для Каждого ЭлементМассива Из МассивРеквизитовОперации Цикл
		
		Номер = МассивВсехРеквизитов.Найти(ЭлементМассива);
		Если Номер <> Неопределено Тогда
			МассивВсехРеквизитов.Удалить(Номер);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТабличныхЧастей = Новый Структура;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Позиция = СтрНайти(ЭлементМассива, ".");
		
		// Реквизит табличной части.
		Если Позиция <> 0 Тогда
			ИмяТабличнойЧасти = Лев(ЭлементМассива, Позиция - 1);
			РеквизитыТабличнойЧасти = Неопределено;
			Если Не СтруктураТабличныхЧастей.Свойство(ИмяТабличнойЧасти, РеквизитыТабличнойЧасти) Тогда
				СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Новый Массив);
				РеквизитыТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
			КонецЕсли;
			РеквизитыТабличнойЧасти.Добавить(Сред(ЭлементМассива, Позиция + 1));
			
		// Для табличной части ничего не делаем.	
		ИначеЕсли ЭлементМассива = "РасшифровкаПлатежа"
		 ИЛИ ЭлементМассива = "ВедомостиНаВыплатуЗарплаты"
		 ИЛИ ЭлементМассива = "ВыплатаЗаработнойПлаты" Тогда
			Продолжить;
			
		// Реквизит шапки.	
		Иначе
			Если ЗначениеЗаполнено(ДокументОбъект[СокрЛП(ЭлементМассива)]) Тогда
				ДокументОбъект[СокрЛП(ЭлементМассива)] = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Очистим необходимые реквизиты табличной части.
	Если СтруктураТабличныхЧастей.Количество() > 0 Тогда
		
		Для Каждого ТабличнаяЧасть ИЗ СтруктураТабличныхЧастей Цикл
			
			Для Каждого СтрокаТаблицы Из ДокументОбъект[ТабличнаяЧасть.Ключ] Цикл
				
				Для Каждого ЭлементМассива Из ТабличнаяЧасть.Значение Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[СокрЛП(ЭлементМассива)]) Тогда
						СтрокаТаблицы[СокрЛП(ЭлементМассива)] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизиты()

// Процедура очищает неиспользуемые реквизиты для указанной в документе формы оплаты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//	ОчищатьДляПустойФормыОплаты - Булево - очищать реквизиты, если форма оплаты не указана (при любой форме оплаты)
//
Процедура ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ДокументОбъект, ФормаОплаты, ОчищатьДляПустойФормыОплаты = Ложь) Экспорт
	
	Если Не (ЗначениеЗаполнено(ФормаОплаты) Или ОчищатьДляПустойФормыОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Безналичная Тогда
		МассивРеквизитов.Добавить("БанковскийСчет");
	КонецЕсли;
	
	ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизитыФормыОплаты()


Процедура ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(ДокументОбъект, МассивНепроверяемыхРеквизитов, ХозяйственнаяОперацияПоЗарплате = Ложь) Экспорт
	
	Если ОперацияПоЗарплате(ДокументОбъект.ХозяйственнаяОперация) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяАктивовПассивов");
		МассивНепроверяемыхРеквизитов.Добавить("АналитикаАктивовПассивов");
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить()
			И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
		КонецЕсли;
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			МассивНепроверяемыхРеквизитов.Добавить("ВедомостиНаВыплатуЗарплаты");
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			МассивНепроверяемыхРеквизитов.Добавить("ВедомостиНаВыплатуЗарплаты");
			
		КонецЕсли;
		
		Если ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			
		ИначеЕсли ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда 
			
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			МассивНепроверяемыхРеквизитов.Добавить("ФизическоеЛицо");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевойСчет");
			
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
			
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку к имеющимся
//
// Параметры
//    ОшибкиЗаполнения - Строка - Накопленное описание ошибок
//    ТекстОшибки - Строка - Описание очередной ошибки
//
Процедура ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ОшибкиЗаполнения = ОшибкиЗаполнения + "
	|" + ТекстОшибки;
	
КонецПроцедуры

// Выполняет проверку заполнения реквизитов вместо платформы. Ошибки записываются, а не выводятся на экран
//
// Параметры
//    ДокументОбъект - ДокументОбъект - Объект документа
//    ПроверяемыеРеквизиты - Массив - Реквизиты, требующие проверки заполненности
//    ОшибкиЗаполнения - Строка - Описание ошибок заполнения
//
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты, ОшибкиЗаполнения) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	РеквизитыДокумента = МетаданныеДокумента.Реквизиты;
	ТабличныеЧасти = МетаданныеДокумента.ТабличныеЧасти;
	
	Для каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		
		ПозТочки = СтрНайти(ИмяРеквизита, ".");
		Если ПозТочки = 0 Тогда
			Если ИмяРеквизита = "Дата" Тогда
				Реквизит = МетаданныеДокумента.СтандартныеРеквизиты.Дата;
			Иначе
				Реквизит = РеквизитыДокумента.Найти(ИмяРеквизита);
			КонецЕсли;
			
			Если Реквизит <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'"),
						Реквизит.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ТабЧастьДокумента = ТабличныеЧасти.Найти(ИмяРеквизита);
			Если ТабЧастьДокумента <> Неопределено Тогда
				Если Не ДокументОбъект[ИмяРеквизита].Количество() Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не введено ни одной строки в список ""%1""';uk='Не введено жодного рядка в список ""%1""'"),
						ТабЧастьДокумента.Синоним);
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ИмяТабЧасти = Лев(ИмяРеквизита, ПозТочки - 1);
			ИмяРеквизита = Сред(ИмяРеквизита, ПозТочки + 1);
			
			ТабЧастьДокумента = ТабличныеЧасти[ИмяТабЧасти];
			Если ТабЧастьДокумента <> Неопределено Тогда
				Реквизит = ТабЧастьДокумента.Реквизиты.Найти(ИмяРеквизита);
				Если Реквизит <> Неопределено Тогда
					Для каждого СтрокаТабЧасти Из ДокументОбъект[ИмяТабЧасти] Цикл
						Если Не ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3""';uk='Не заповнена колонка ""%1"" у рядку %2 списку ""%3""'"),
								Реквизит.Синоним,
								СтрокаТабЧасти.НомерСтроки,
								ТабЧастьДокумента.Синоним);
							ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку заполнения однострочной расшифровки платежа
//
// Параметры
//    ДокументОбъект - ДокументОбъект - Проверяемый документ
//    ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты документа
//    ИмяТЧ - Строка - Имя табличной части, текущая строка которой выводится в виде отдельных реквизитов
//    ИмяЗаменыТЧ - Строка - Наименование подстроки замены наименования реквизитов табличной части
//    Отказ - Булево - Признак отказа от операции
//
Процедура ПроверитьЗаполнениеРасшифровкиБезРазбиения(ДокументОбъект, ПроверяемыеРеквизиты, ИмяТЧ, ИмяЗаменыТЧ, Отказ) Экспорт
	
	Если Не ДокументОбъект[ИмяТЧ].Количество() Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ТабличныеЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти;
	ТабЧастьДокумента = ТабличныеЧасти[ИмяТЧ];
	
	ШаблонОшибки = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		
		Если СтрНайти(ПроверяемыйРеквизит, ИмяТЧ) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозТочки = СтрНайти(ПроверяемыйРеквизит, ".");
		Если ПозТочки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Сред(ПроверяемыйРеквизит, ПозТочки + 1);
		ИмяЭлемента = ИмяЗаменыТЧ + ИмяРеквизита;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект[ИмяТЧ][0][ИмяРеквизита]) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ШаблонОшибки, ТабЧастьДокумента.Реквизиты[ИмяРеквизита].Синоним),
				,
				"Элементы." + ИмяТЧ + ".ТекущиеДанные." + ИмяРеквизита,
				,
				Отказ);
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить(ПроверяемыйРеквизит);
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры


// Проверяет заполнения реквизита Партнер в ТЧ РасшифровкаПлатежа
//
// Параметры:
//	Объект                - ДокументОбъект - Деженжный документ.
//	ХозяйственнаяОперация - Справочник.ХозяйственныеОперация - хозяйственная операция объекта
//	МассивНепроверяемыхРеквизитов - Массив - Непроверяемые реквизиты документа
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьЗаполнениеПартнера(Объект, ХозяйственнаяОперация, МассивНепроверяемыхРеквизитов, РасшифровкаБезРазбиения, Отказ) Экспорт
	
	Если МассивНепроверяемыхРеквизитов.Найти("РасшифровкаПлатежа.Партнер") = Неопределено Тогда
		ПредставлениеРеквизитаПартнер = ПартнерыИКонтрагенты.ЗаголовокРеквизитаПартнерВЗависимостиОтХозяйственнойОперации( ХозяйственнаяОперация);
		СинонимРеквизитаПартнера      = Объект.Метаданные().ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Партнер.Синоним;
		Если ПредставлениеРеквизитаПартнер <> СинонимРеквизитаПартнера Тогда
			МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Партнер");
			Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
				Если Не ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.Партнер) Тогда
					
					Если РасшифровкаБезРазбиения Тогда
						ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Партнер";
						КлючДанных = Неопределено;
					Иначе
						ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровкаПлатежа.НомерСтроки, "Партнер");
						КлючДанных = Объект;
					КонецЕсли;
					
					ТекстОшибки = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПредставлениеРеквизитаПартнер);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, ИмяПоля, , Отказ);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ЗаполнениеСправочников

// Заполнение общих реквизитов справочников
//
// Параметры:
//    Объект - СправочникОбъект - объект
Процедура ОбработкаЗаполненияСправочников(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Владелец")
		И Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		Объект.Владелец = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Владелец);
		Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru='Не удалось определить принадлежность элемента к определенной ""Организации"". В информационной базе введено несколько организаций,
                                             |Включите функциональную опцию ""Использовать несколько организаций""!'
                                             |;uk='Не вдалося визначити належність елемента до певної ""Організації"". В інформаційній базі введено кілька організацій,
                                             |Увімкніть функціональну опцію ""Використовувати кілька організацій""!'");
			Иначе
				ВызватьИсключение НСтр("ru='Не удалось определить принадлежность элемента к определенной ""Организации"". Возможно, в информационной базе не введено ни одной организации!';uk='Не вдалося визначити належність елемента до певної ""Організації"". Можливо, в інформаційній базі не введено жодної організації!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвиженийПоДенежнымСредствам

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваНаличные()

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВКассахККМ;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваВКассахККМ;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваВКассахККМ()

// Процедура формирования движений по регистру "Денежные средства (безналичные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваБезналичные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваБезналичные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваБезналичные()

// Процедура формирования движений по регистру "Денежные средства в пути"
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваВПути(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВПути;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваВПути;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваБезналичные()

// Процедура формирования движений по регистру "Денежные средства у подотчетных лиц".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваУПодотчетныхЛиц;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваУПодотчетныхЛиц;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваУПодотчетныхЛиц()

// Процедура формирования движений по регистру "Денежные средства к выплате".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКВыплате;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКВыплате;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКВыплате()

// Процедура формирования движений по регистру "Расчеты по эквайрингу".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоЭквайрингу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоЭквайрингу.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.РасчетыПоЭквайрингу;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоЭквайрингу);
	
КонецПроцедуры // ОтразитьРасчетыПоЭквайрингу()

// Процедура формирования движений по регистру "Книга доходов и расходов по единому налогу".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьКнигаДоходовИРасходовПоЕдиномуНалогу(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКнигаДоходовРасходовПоЕдиномуНалогу;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.КнигаДоходовРасходовПоЕдиномуНалогу;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	ЗаполнитьНомерПлатежногоДокументаЕдиныйНалог(ДвиженияРасчеты);
	
КонецПроцедуры // ОтразитьКнигаДоходовИРасходовПоЕдиномуНалогу()

// Процедура формирования движений по регистру "Лимиты расхода денежных средств".
//
Процедура ОтразитьЛимитыРасходаДенежныхСредств(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЛимиты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЛимитыРасходаДенежныхСредств;
	
	Если Отказ ИЛИ ТаблицаЛимиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЛимитыРасходаДенежныхСредств = Движения.ЛимитыРасходаДенежныхСредств;
	ДвиженияЛимитыРасходаДенежныхСредств.Записывать = Истина;
	ДвиженияЛимитыРасходаДенежныхСредств.Загрузить(ТаблицаЛимиты);
	
КонецПроцедуры // ОтразитьЛимитыРасходаДенежныхСредств()


// Функция проверяет возможность формирования документа "Списание безналичных ДС"
// на основании нескольких документов. 
//
// Параметры
//  МассивСсылок  - Массив - заказы поставщикам, по которым необходимо ввести реализацию
//
// Возвращаемое значение:
//   Булево   - Истина, если формирование возможно.
//
Функция СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам(МассивСсылок) Экспорт

	Отказ = Ложь;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Контрагент) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Организация) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ТипДокумента) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияТип
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Организация КАК Организация,
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|		""А"" КАК ТипДокумента
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеУслугПрочихАктивов.Организация,
	|		ПоступлениеУслугПрочихАктивов.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ПоступлениеУслугПрочихАктивов КАК ПоступлениеУслугПрочихАктивов
	|	ГДЕ
	|		ПоступлениеУслугПрочихАктивов.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Организация,
	|		ЗаказПоставщику.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитенту.Организация,
	|		ОтчетКомитенту.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ГДЕ
	|		ОтчетКомитенту.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОСписании.Организация,
	|		ОтчетКомитентуОСписании.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ГДЕ
	|		ОтчетКомитентуОСписании.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионера.Организация,
	|		ОтчетКомиссионера.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ГДЕ
	|		ОтчетКомиссионера.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаТоваровМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ГДЕ
	|		ПередачаТоваровМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетПоКомиссииМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ГДЕ
	|		ОтчетПоКомиссииМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаможеннаяДекларацияИмпорт.Организация,
	|		ТаможеннаяДекларацияИмпорт.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка В(&МассивСсылок)
	|	
	|	) КАК ВложенныйЗапрос
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат Отказ;
	КонецЕсли;
		
	Если СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка) Тогда
	
		ТекстОшибки = НСтр("ru='Ввод одного документа Списание безналичных ДС на основании выделенных распоряжений невозможен';uk='Введення одного документа Списання безготівкових ГК на підставі виділених розпоряджень неможливе'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
	КонецЕсли;

	Возврат НЕ Отказ;
	
КонецФункции // СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам()

// Выводит сообщения об ошибках при вводе списания безналичных ДС на основании 
// нескольких документов.
//
// Параметры
//  Выборка  - Выборка из результата запроса
//
// Возвращаемое значение:
//   Булево   - Истина, если отказ от ввода на основании
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка)

	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных документов отличается %ПредставлениеПоля%';uk='У виділених документів відрізняється %ПредставлениеПоля%'");
	
	Если Выборка.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Контрагент""';uk='поле ""Контрагент""'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Организация""';uk='поле ""Організація""'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияТип Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='тип документов';uk='тип документів'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
    Возврат Отказ;
	
КонецФункции // СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС()

// Процедура выполняет пересчет сумм документа в новую валюту.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта
//
Процедура ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, НоваяВалюта) Экспорт
	
	КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		НоваяВалюта,
		Объект.Дата);
	
	// Пересчитаем сумму документа в новую валюту.
	Объект.СуммаДокумента = Окр(КоэффициентПересчета * Объект.СуммаДокумента, 2, 1);
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("РасшифровкаПлатежа");
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
			
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
				
		Если Объект.Свойство(ТабличнаяЧасть) Тогда
			
			ИтогСумма = Объект[ТабличнаяЧасть].Итог("Сумма");
			СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
							
			// Пересчитаем суммы в табличной части документа.
			Если ИтогСумма <> 0 Тогда
				
				Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл
					
					Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
					ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
					СуммаДокумента = СуммаДокумента - Сумма;
					СтрокаТаблицы.Сумма = Сумма;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты по договорам кредитов и депозитов".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыПоДоговорамКредитовИДепозитов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоДоговорамКредитовИДепозитов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоДоговорамКредитовИДепозитов;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоДоговорамКредитовИДепозитов.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.РасчетыПоДоговорамКредитовИДепозитов;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоДоговорамКредитовИДепозитов);
	
КонецПроцедуры // ОтразитьРасчетыПоДоговорамКредитовИДепозитов()

// Возвращает договор по умолчанию, являющийся объектом расчетов.
//
Функция ДоговорПоУмолчанию(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации
	) Экспорт
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

#КонецОбласти



#Область НаименованиеОрганизации

// Формирует варианты наименования юридического лица в соответствии с его организационно-правовой формой
//
// Параметры:
//    Наименование - Строка - Наименование юр. лица
//
// Возвращаемое значение - Структура - Наименование, РабочееНаименование, ПолноеНаименование
//
Функция НаименованиеОрганизации(Знач Наименование) Экспорт
	
	Наименование = СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО';uk='ТОВ'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью';uk='Товариство з обмеженою відповідальністю'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО';uk='ТОВ'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО';uk='ВАТ'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество';uk='Відкрите акціонерне товариство'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО';uk='ВАТ'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО';uk='ЗАТ'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество';uk='Закрите акціонерне товариство'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО';uk='ЗАТ'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ИП';uk='ІП'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель';uk='Індивідуальний підприємець'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП';uk='ІП'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью';uk='Товариство з обмеженою відповідальністю'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью';uk='Товариство з обмеженою відповідальністю'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО';uk='ТОВ'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество';uk='Відкрите акціонерне товариство'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество';uk='Відкрите акціонерне товариство'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО';uk='ВАТ'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество';uk='Закрите акціонерне товариство'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество';uk='Закрите акціонерне товариство'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО';uk='ЗАТ'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Индивидуальный предприниматель';uk='Індивідуальний підприємець'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Индивидуальный предприниматель';uk='Індивідуальний підприємець'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ИП';uk='ІП'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки = СтрНайти(Наименование, """");
			ПозицияПоследнейКавычки = 0;
			
			ВремНаименование = Наименование;
			
			ПозицияКавычки = ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки = ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование = Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки = СтрНайти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование = Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование = Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизационноПравоваяФорма) Тогда
		ПолноеНаименование = Наименование;
	Иначе
		ПолноеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
			ОрганизационноПравоваяФорма, Наименование);
	КонецЕсли;
	
	СокращенноеНаименование = Наименование + ?(ПустаяСтрока(ОрганизационноПравоваяФормаСокращенно), "", " ")
		+ ОрганизационноПравоваяФормаСокращенно;
	
	СтруктураНаименования = Новый Структура("Наименование, СокращенноеНаименование, ПолноеНаименование",
		Наименование, СокращенноеНаименование, ПолноеНаименование);
	
	Возврат СтруктураНаименования;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументов

//Возвращает параметры вызова фукнции ПолучитьБанковскийСчетОрганизацииПоУмолчанию
//	
// Возвращаемое значение
// СтруктураПараметров - Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* БанковскийСчет 		  - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета
//
Функция ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("БанковскийСчет");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

//Возвращает параметры вызова фукнции ПолучитьКассуОрганизацииПоУмолчанию
//	
// Возвращаемое значение
// СтруктураПараметров - Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* Касса					  - СправочникСсылка.Кассы - Касса, которую нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета
//
Функция ПараметрыЗаполненияКассыОрганизацииПоУмолчанию() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("Касса");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет наличие заказа в табличной части "Расшифровка платежа" документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//
// Возвращаемое значение:
//	Булево - Истина - заказ указан в строке табличной части
//
Функция УказанЗаказВРасшифровкеПлатежа(Объект)
	
	ЗаказУказан = Ложь;
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			ЗаказУказан = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаказУказан;
	
КонецФункции // УказанЗаказВРасшифровкеПлатежа()

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат = Ложь;
	
	Наименование = СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#Область ПроцедурыИФункцииДляНумерации

// Формирует числовой номер
Процедура СформироватьЧисловойНомерДокумента(СтруктураПараметров, СформированныйНомер) 

	УстановитьПривилегированныйРежим(Истина);

	ПодготовитьСтруктуруПараметров(СтруктураПараметров);

	// автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		СтруктураПараметров.Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации", СтруктураПараметров.ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	СтруктураПараметров.Организация);
		ЭлементБлокировки.УстановитьЗначение("БанковскийСчет", 	СтруктураПараметров.БанковскийСчет);
		ЭлементБлокировки.УстановитьЗначение("Валюта", 	        СтруктураПараметров.Валюта);
		ЭлементБлокировки.УстановитьЗначение("ОбособленноеПодразделение", 	СтруктураПараметров.ОбособленноеПодразделение);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураПараметров).ТекущийНомер;
		СформированныйНомер = ТекущийНомер + 1;
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры // СформироватьЧисловойНомерДокумента

// Формирует строковый номер
Процедура СформироватьСтроковыйНомерДокумента(СтруктураПараметров, СформированныйНомер) Экспорт

	Если СформированныйНомер = "" Тогда
		ЧисловойНомер = 0;
	Иначе
		ЧисловойНомер = Число(СформированныйНомер);
	КонецЕсли;

	СформироватьЧисловойНомерДокумента(СтруктураПараметров, ЧисловойНомер);

	СформированныйНомер = Формат(ЧисловойНомер, "ЧГ=0");

КонецПроцедуры // СформироватьСтроковыйНомерДокумента

// Увеличивает очередной номер (при записи документа)
Процедура ЗаписатьОчереднойНомер(СтруктураПараметров, СформированныйНомер) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ПодготовитьСтруктуруПараметров(СтруктураПараметров);

	ЧисловойНомер = Число(СформированныйНомер);

	ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураПараметров).ТекущийНомер;

	Если ЧисловойНомер > ТекущийНомер Тогда
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Нумератор 		= СтруктураПараметров.Нумератор;
		МенеджерЗаписи.ПериодНумерации 	= СтруктураПараметров.ПериодНумерации;
		МенеджерЗаписи.Организация	 	= СтруктураПараметров.Организация;
		МенеджерЗаписи.БанковскийСчет   = СтруктураПараметров.БанковскийСчет;
		МенеджерЗаписи.Валюта	 	    = СтруктураПараметров.Валюта;
		МенеджерЗаписи.ОбособленноеПодразделение = СтруктураПараметров.ОбособленноеПодразделение;
		МенеджерЗаписи.ТекущийНомер 	= ЧисловойНомер;
		МенеджерЗаписи.Записать();
	КонецЕсли;	

КонецПроцедуры // ЗаписатьОчереднойНомер

Процедура ПодготовитьСтруктуруПараметров(СтруктураПараметров)

	Если НЕ СтруктураПараметров.Свойство("БанковскийСчет") Тогда
		СтруктураПараметров.Вставить("БанковскийСчет", Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("Валюта") Тогда
		СтруктураПараметров.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ОбособленноеПодразделение") Тогда
		СтруктураПараметров.Вставить("ОбособленноеПодразделение", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ПериодНумерации") Тогда
		ПериодНумерации = НачалоПериодаНумерации(СтруктураПараметров.Дата);
		СтруктураПараметров.Вставить("ПериодНумерации", ПериодНумерации);
		СтруктураПараметров.Удалить("Дата");
	КонецЕсли;

КонецПроцедуры

// Вычисляет начало периода нумерации
Функция НачалоПериодаНумерации(Дата) Экспорт

	ПериодНумерации = НачалоГода(Дата);
		
	Возврат ПериодНумерации;

КонецФункции // НачалоПериодаНумерации

#КонецОбласти

Процедура ЗаполнитьНомерПлатежногоДокументаЕдиныйНалог(НаборЗаписей) Экспорт
	
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	МетаданныеРегистратора = Регистратор.Метаданные();
	ТипРегистратора = МетаданныеРегистратора.Имя;
	
	ОписаниеДокумента = Новый Структура("Префикс, Номер, НомерПервичногоДокумента", "ПД");
	РеквизитыНумерации = Новый Структура("Номер");
	
	Если ТипРегистратора = "ПриходныйКассовыйОрдер" Тогда
		ОписаниеДокумента.Префикс = "ПКО";
	ИначеЕсли ТипРегистратора = "РасходныйКассовыйОрдер" Тогда
		ОписаниеДокумента.Префикс = "ВКО";
	ИначеЕсли ТипРегистратора = "ОтчетОРозничнойВыручке" 
		ИЛИ ТипРегистратора = "ОтчетОРозничныхПродажах" Тогда 
		ОписаниеДокумента.Префикс = "РП";
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерОрдера", МетаданныеРегистратора) Тогда
		РеквизитыНумерации.Вставить("НомерПервичногоДокумента", "НомерОрдера");
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеРегистратора) Тогда
		РеквизитыНумерации.Вставить("НомерПервичногоДокумента", "НомерВходящегоДокумента");
	КонецЕсли;
	
	ДанныеНумерации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, РеквизитыНумерации);
	ЗаполнитьЗначенияСвойств(ОписаниеДокумента, ДанныеНумерации);
	
	НомерПД = ОписаниеДокумента.Префикс + " " 
		+ СокрЛП(?(ЗначениеЗаполнено(ОписаниеДокумента.НомерПервичногоДокумента), ОписаниеДокумента.НомерПервичногоДокумента, 
		ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ОписаниеДокумента.Номер, Истина, Истина)));

	Для каждого Запись Из НаборЗаписей Цикл
		Запись.НомерПлатежногоДокумента = НомерПД;	
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы



// Заполняет реквизит "ТипСуммыКредитовИДепозитов" в таб. части "РасшифровкаПлатежа" платежных документов
Процедура ЗаполнитьТипСуммыДляКредитовДепозитовЗаймов(Параметры) Экспорт
	
	Запрос = Новый Запрос(Параметры.ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
					Параметры.Очередь, Параметры.ПолноеИмяОбъекта, Запрос.МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		Регистратор = ВыборкаПоДокументу.Ссылка;
		НачатьТранзакцию();
		
		Попытка
			
			ОбъектДокумента = Регистратор.ПолучитьОбъект();
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(Параметры.ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
			Блокировка.Заблокировать();
			
			// Заполнить табличную часть
			ВыборкаТабЧасть = ВыборкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТабЧасть.Следующий() Цикл
				ТабЧасть = ОбъектДокумента[ВыборкаТабЧасть.ИмяТабличнойЧасти];
				Выборка = ВыборкаТабЧасть.Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТабЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
					НоваяСтрока.ТипСуммыКредитаДепозита = Выборка.ТипСуммыКредитаДепозита;
				КонецЦикла;// по строкам табличной части
			КонецЦикла;// по табличным частям документа
			
			Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
				Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьФорматированноеНазначениеПлатежаПриОбновлении(
					ОбъектДокумента);
			ИначеЕсли ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
				Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьФорматированноеНазначениеПлатежаПриОбновлении(
					ОбъектДокумента);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ТекстСообщения = НСтр("ru='Не удалось обработать %Документ% по причине: %Причина%';uk='Не вдалося обробити %Документ% з причини: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,
									Регистратор.Метаданные(),
									Регистратор,
									ТекстСообщения);
			ОтменитьТранзакцию();
			
		КонецПопытки;
	
	КонецЦикла;// по документам
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, Параметры.ПолноеИмяОбъекта);
	
КонецПроцедуры

// Отмечает к обработке документы в которых необходимо заполнить реквизит "ТипСуммыКредитовИДепозитов" в таб. части "РасшифровкаПлатежа" 
Процедура ОтметитьКЗаполнениюТипаСуммКредитовДепозитовЗаймов(Параметры, ПолноеИмяОбъекта, ХозяйственныеОперации) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	#Таблица КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ТипСуммыКредитаДепозита = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка)
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация В(&ХозяйственныеОперации)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Таблица", ПолноеИмяОбъекта + ".РасшифровкаПлатежа");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ХозяйственныеОперации", ХозяйственныеОперации);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Функция ТекстЗапросаТиповСуммКредитовДепозитовЗаймов(ИмяДокумента) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Регистраторы.Ссылка КАК Ссылка,
	|	Регистраторы.Организация КАК Организация
	|ПОМЕСТИТЬ втРегистраторы
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДляОбработкиПоступлениеБезналичныхДенежныхСредств КАК Фильтр
	|		ПО Регистраторы.Ссылка = Фильтр.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРасшифровки.Ссылка,
	|	""РасшифровкаПлатежа"" КАК ИмяТабличнойЧасти,
	|	ДанныеРасшифровки.Ссылка.МоментВремени КАК МоментВремени,
	|	ДанныеРасшифровки.НомерСтроки,
	|	ДанныеРасшифровки.Партнер,
	|	ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРасшифровки.Сумма,
	|	ДанныеРасшифровки.ВалютаВзаиморасчетов,
	|	ДанныеРасшифровки.СуммаВзаиморасчетов,
	|	ДанныеРасшифровки.ДоговорКредитаДепозита,
	|	ВЫБОР
	|		КОГДА ДанныеДоговора.СтатьяДДСПоступленияВыдачи = ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств
	|				ИЛИ ДанныеДоговора.СтатьяДДСОсновногоДолга = ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|		КОГДА ДанныеДоговора.СтатьяДДСПроцентов = ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		КОГДА ДанныеДоговора.СтатьяДДСКомиссии = ДанныеРасшифровки.СтатьяДвиженияДенежныхСредств
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|	КОНЕЦ КАК ТипСуммыКредитаДепозита,
	|	ДанныеРасшифровки.ИдентификаторСтроки
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРегистраторы КАК Регистраторы
	|		ПО ДанныеРасшифровки.Ссылка = Регистраторы.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
	|		ПО ДанныеРасшифровки.ДоговорКредитаДепозита = ДанныеДоговора.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ,
	|	ИмяТабличнойЧасти,
	|	ДанныеРасшифровки.НомерСтроки
	|ИТОГИ ПО
	|	ДанныеРасшифровки.Ссылка,
	|	ИмяТабличнойЧасти";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоступлениеБезналичныхДенежныхСредств", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТипСуммКредитовДепозитовЗаймовЗаполнен(Данные, МетаданныеИОтбор) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДоговорКредитаДепозита = &ДоговорКредитаДепозита
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДоговорКредитаДепозита = &ДоговорКредитаДепозита
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДоговорКредитаДепозита = &ДоговорКредитаДепозита
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДоговорКредитаДепозита = &ДоговорКредитаДепозита");
	
	Запрос.УстановитьПараметр("ДоговорКредитаДепозита", Данные.Ссылка);
	ДокументыДоговора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Объекты = Новый Массив;
	Объекты.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	Объекты.Добавить("Документ.ПриходныйКассовыйОрдер");
	Объекты.Добавить("Документ.РасходныйКассовыйОрдер");
	Объекты.Добавить("Документ.СписаниеБезналичныхДенежныхСредств");
	
	Возврат НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, Объекты, ДокументыДоговора);
	
КонецФункции


#КонецОбласти
	
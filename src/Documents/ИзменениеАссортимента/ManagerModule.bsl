#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	Документы.ИзменениеАссортимента.ДобавитьКомандуСоздатьНаОснованииСоздатьЗаказНаВнутреннееПотребление(КомандыСоздатьНаОсновании);
	
	Документы.ИзменениеАссортимента.ДобавитьКомандуСоздатьНаОснованииСоздатьЗаказНаПеремещение(КомандыСоздатьНаОсновании);

	Обработки.ПараметрыОбеспеченияПотребностей.ДобавитьКомандуУстановитьПараметрыОбеспеченияПотребностей(КомандыСоздатьНаОсновании);
	
	Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	Документы.УстановкаЦенНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);


КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ИзменениеАссортимента) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ИзменениеАссортимента.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ИзменениеАссортимента);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьАссортимент";
		
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ДобавитьКомандуСоздатьНаОснованииСоздатьЗаказНаВнутреннееПотребление(КомандыСоздатьНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаВнутреннееПотребление) и ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.СоздатьЗаказНаВнутреннееПотребление";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьЗаказНаВнутреннееПотребление";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Заказ на внутреннее потребление';uk='Замовлення на внутрішнє споживання'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыНаВнутреннееПотребление";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ДобавитьКомандуСоздатьНаОснованииСоздатьЗаказНаПеремещение(КомандыСоздатьНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение) и ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.СоздатьЗаказНаПеремещение";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьЗаказНаПеремещение";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Заказ на перемещение';uk='Замовлення на переміщення'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыНаПеремещение";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Загрузка из файла.

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки;
//     * остальные колонки сооответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов.
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляСопоставления.Штрихкод,
	|	ДанныеДляСопоставления.Код,
	|	ДанныеДляСопоставления.Артикул,
	|	ДанныеДляСопоставления.Номенклатура,
	|	ДанныеДляСопоставления.ВидЦены,
	|	ДанныеДляСопоставления.РейтингПродаж,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК НоменклатураСсылка,
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоШтрихкоду
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ДанныеДляСопоставления.Штрихкод)
	|ГДЕ
	|	НЕ ШтрихкодыНоменклатуры.Номенклатура ЕСТЬ NULL 
	|	И ВЫБОР
	|			КОГДА &ИспользоватьУправлениеКоллекциями
	|				ТОГДА ШтрихкодыНоменклатуры.Номенклатура.КоллекцияНоменклатуры = &КоллекцияНоменклатуры
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляСопоставления.Код,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставленияПоКоду
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
	|		ПО (ДанныеДляСопоставления.Штрихкод ПОДОБНО СопоставленнаяНоменклатураПоШтрихкоду.Штрихкод)
	|ГДЕ
	|	СопоставленнаяНоменклатураПоШтрихкоду.Штрихкод ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК НоменклатураСсылка,
	|	СпрНоменклатура.Код,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ СопоставленнаяНоменклатураПоКоду
	|ИЗ
	|	ДанныеДляСопоставленияПоКоду КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (СпрНоменклатура.Код ПОДОБНО ДанныеДляСопоставления.Код)
	|ГДЕ
	|	НЕ СпрНоменклатура.Ссылка ЕСТЬ NULL 
	|	И ВЫБОР
	|			КОГДА &ИспользоватьУправлениеКоллекциями
	|				ТОГДА СпрНоменклатура.КоллекцияНоменклатуры = &КоллекцияНоменклатуры
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляСопоставления.Номенклатура,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставленияПоНаименованию
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
	|		ПО (ДанныеДляСопоставления.Штрихкод ПОДОБНО СопоставленнаяНоменклатураПоШтрихкоду.Штрихкод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленнаяНоменклатураПоКоду КАК СопоставленнаяНоменклатураПоКоду
	|		ПО (ДанныеДляСопоставления.Код ПОДОБНО СопоставленнаяНоменклатураПоКоду.Код)
	|ГДЕ
	|	СопоставленнаяНоменклатураПоШтрихкоду.Штрихкод ЕСТЬ NULL 
	|	И СопоставленнаяНоменклатураПоКоду.Код ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СпрНоменклатура.Ссылка) КАК НоменклатураСсылка,
	|	ДанныеДляСопоставленияПоНаименованию.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставленияПоНаименованию.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставленияПоНаименованию КАК ДанныеДляСопоставленияПоНаименованию
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (СпрНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставленияПоНаименованию.Номенклатура)
	|ГДЕ
	|	НЕ СпрНоменклатура.Ссылка ЕСТЬ NULL 
	|	И ВЫБОР
	|			КОГДА &ИспользоватьУправлениеКоллекциями
	|				ТОГДА СпрНоменклатура.КоллекцияНоменклатуры = &КоллекцияНоменклатуры
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставленияПоНаименованию.Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(СопоставленнаяНоменклатураПоШтрихкоду.НоменклатураСсылка),
	|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор,
	|	КОЛИЧЕСТВО(СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор)
	|ИЗ
	|	СопоставленнаяНоменклатураПоШтрихкоду КАК СопоставленнаяНоменклатураПоШтрихкоду
	|
	|СГРУППИРОВАТЬ ПО
	|	СопоставленнаяНоменклатураПоШтрихкоду.Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(СопоставленнаяНоменклатураПоКоду.НоменклатураСсылка),
	|	СопоставленнаяНоменклатураПоКоду.Идентификатор,
	|	КОЛИЧЕСТВО(СопоставленнаяНоменклатураПоКоду.Идентификатор)
	|ИЗ
	|	СопоставленнаяНоменклатураПоКоду КАК СопоставленнаяНоменклатураПоКоду
	|
	|СГРУППИРОВАТЬ ПО
	|	СопоставленнаяНоменклатураПоКоду.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВидыЦен.Ссылка) КАК ВидЦеныСсылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО (ВидыЦен.ИспользоватьПриПродаже)
	|			И (ВидыЦен.Наименование ПОДОБНО ДанныеДляСопоставления.ВидЦены)
	|ГДЕ
	|	НЕ ВидыЦен.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РейтингиПродажНоменклатуры.Ссылка) КАК РейтингПродажСсылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РейтингиПродажНоменклатуры КАК РейтингиПродажНоменклатуры
	|		ПО (РейтингиПродажНоменклатуры.Наименование ПОДОБНО ДанныеДляСопоставления.РейтингПродаж)
	|ГДЕ
	|	НЕ РейтингиПродажНоменклатуры.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	Если ЗагружаемыеДанные.Колонки.Найти("ВидЦены") = Неопределено 
		ИЛИ ЗагружаемыеДанные.Колонки.Найти("РейтингПродаж") = Неопределено Тогда
	
		ДанныеДляСопоставления = ЗагружаемыеДанные.Скопировать();
		Если ЗагружаемыеДанные.Колонки.Найти("ВидЦены") = Неопределено Тогда
			ДанныеДляСопоставления.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		Если ЗагружаемыеДанные.Колонки.Найти("РейтингПродаж") = Неопределено Тогда
			ДанныеДляСопоставления.Колонки.Добавить("РейтингПродаж", Новый ОписаниеТипов("Строка")); 
		КонецЕсли;
	Иначе
		ДанныеДляСопоставления = ЗагружаемыеДанные;
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ДанныеДляСопоставления);
	Запрос.УстановитьПараметр("ИспользоватьУправлениеКоллекциями", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеКоллекциями"));
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", ДополнительныеПараметры.КоллекцияНоменклатуры);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатыЗапросов[5].Выгрузить();
	ТаблицаВидыЦен = РезультатыЗапросов[6].Выгрузить();
	ТаблицаРейтингиПродаж = РезультатыЗапросов[7].Выгрузить();
	
	РолиАссортимента = Новый Соответствие;
	РолиАссортимента.Вставить(НСтр("ru='Постоянный ассортимент';uk='Постійний асортимент'"), Перечисления.РолиАссортимента.ПостоянныйАссортимент);
	РолиАссортимента.Вставить("ПостоянныйАссортимент", Перечисления.РолиАссортимента.ПостоянныйАссортимент);
	РолиАссортимента.Вставить(НСтр("ru='Дополнительный ассортимент';uk='Додатковий асортимент'"), Перечисления.РолиАссортимента.ДополнительныйАссортимент);
	РолиАссортимента.Вставить("ДополнительныйАссортимент", Перечисления.РолиАссортимента.ДополнительныйАссортимент);
	РолиАссортимента.Вставить(НСтр("ru='Пробный ассортимент';uk='Пробний асортимент'"), Перечисления.РолиАссортимента.ПробныйАссортимент);
	РолиАссортимента.Вставить("ПробныйАссортимент", Перечисления.РолиАссортимента.ПробныйАссортимент);
	
	ИспользоватьНесколькоВидовЦен = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл 
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Идентификатор = СтрокаТаблицы.Идентификатор;
		НоваяСтрока.РольАссортимента = РолиАссортимента.Получить(СокрЛП(СтрокаТаблицы.РольАссортимента));
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				НоваяСтрока.Номенклатура  = СтрокаНоменклатура.НоменклатураСсылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда 
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьНесколькоВидовЦен Тогда
			
			СтрокаВидаЦен = ТаблицаВидыЦен.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
			Если СтрокаВидаЦен <> Неопределено Тогда 
				Если СтрокаВидаЦен.Количество = 1 Тогда 
					НоваяСтрока.ВидЦены  = СтрокаВидаЦен.ВидЦеныСсылка;
				ИначеЕсли СтрокаВидаЦен.Количество > 1 Тогда 
					ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
					ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
					ЗаписьОНеоднозначности.Колонка = "ВидЦены";
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли; 
		
		СтрокаРейтингПродаж = ТаблицаРейтингиПродаж.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаРейтингПродаж <> Неопределено Тогда 
			Если СтрокаРейтингПродаж.Количество = 1 Тогда 
				НоваяСтрока.РейтингПродаж  = СтрокаРейтингПродаж.РейтингПродажСсылка;
			ИначеЕсли СтрокаРейтингПродаж.Количество > 1 Тогда 
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "РейтингПродаж";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возврашает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - имя колонки, в который возника неоднозначность 
//  СписокНеоднозначностей    - ТаблицаЗначений - Список для заполения с неоднозначными данными
//     * Идентификатор        - Число  - Уникальный идентификатор строки
//     * Колонка              - Строка -  Имя колонки с возникшей неоднозначностью 
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 
	
	Если ИмяКолонки = "Номенклатура" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);  
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяКолонки = "РейтингПродаж" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РейтингиПродаж.Ссылка
		|ИЗ
		|	Справочник.РейтингиПродажНоменклатуры КАК РейтингиПродаж
		|ГДЕ
		|	РейтингиПродаж.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.РейтингПродаж);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);  
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяКолонки = "ВидЦены" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЦен.Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Наименование = &Наименование
		|	И ВидыЦен.ИспользоватьПриПродаже";
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ВидЦены);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);  
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаАссортимент(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаАссортимент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Ассортимент";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Ссылка.Дата КАК Период,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Ссылка.ОбъектПланирования КАК ОбъектПланирования,
	|	Товары.РольАссортимента КАК РольАссортимента,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.Стадия = ЗНАЧЕНИЕ(Перечисление.СтадииАссортимента.РазрешеныТолькоЗакупки)
	|			ТОГДА ИСТИНА
	|		КОГДА Товары.Ссылка.Стадия = ЗНАЧЕНИЕ(Перечисление.СтадииАссортимента.РазрешеныЗакупкиИПродажи)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеныЗакупки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.Стадия = ЗНАЧЕНИЕ(Перечисление.СтадииАссортимента.РазрешеныТолькоПродажи)
	|			ТОГДА ИСТИНА
	|		КОГДА Товары.Ссылка.Стадия = ЗНАЧЕНИЕ(Перечисление.СтадииАссортимента.РазрешеныЗакупкиИПродажи)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеныПродажи,
	|	Товары.ВидЦены КАК ВидЦены,
	|	Товары.РейтингПродаж КАК РейтингПродаж,
	|	Товары.Ссылка.КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|ИЗ
	|	Документ.ИзменениеАссортимента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИзмененияАссортимента.ИзменениеВАссортименте)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка.ДатаНачалаЗакупок,
	|	Товары.Номенклатура,
	|	Товары.Ссылка.ОбъектПланирования,
	|	Товары.РольАссортимента,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ДатаНачалаЗакупок = Товары.Ссылка.ДатаНачалаПродаж
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Товары.ВидЦены,
	|	Товары.РейтингПродаж КАК РейтингПродаж,
	|	Товары.Ссылка.КоллекцияНоменклатуры
	|ИЗ
	|	Документ.ИзменениеАссортимента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИзмененияАссортимента.УправлениеКоллекцией)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка.ДатаНачалаПродаж,
	|	Товары.Номенклатура,
	|	Товары.Ссылка.ОбъектПланирования,
	|	Товары.РольАссортимента,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ДатаЗапретаЗакупки > Товары.Ссылка.ДатаНачалаПродаж
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ИСТИНА,
	|	Товары.ВидЦены,
	|	Товары.РейтингПродаж КАК РейтингПродаж,
	|	Товары.Ссылка.КоллекцияНоменклатуры
	|ИЗ
	|	Документ.ИзменениеАссортимента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИзмененияАссортимента.УправлениеКоллекцией)
	|	И Товары.Ссылка.ДатаНачалаЗакупок <> Товары.Ссылка.ДатаНачалаПродаж
	|			И Товары.Ссылка.ДатаЗапретаЗакупки <> Товары.Ссылка.ДатаНачалаПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка.ДатаЗапретаЗакупки,
	|	Товары.Номенклатура,
	|	Товары.Ссылка.ОбъектПланирования,
	|	Товары.РольАссортимента,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ДатаЗапретаЗакупки < Товары.Ссылка.ДатаЗапретаПродажи
	|				И Товары.Ссылка.ДатаЗапретаЗакупки >= Товары.Ссылка.ДатаНачалаПродаж
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	Товары.ВидЦены,
	|	Товары.РейтингПродаж КАК РейтингПродаж,
	|	Товары.Ссылка.КоллекцияНоменклатуры
	|ИЗ
	|	Документ.ИзменениеАссортимента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИзмененияАссортимента.УправлениеКоллекцией)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка.ДатаЗапретаПродажи,
	|	Товары.Номенклатура,
	|	Товары.Ссылка.ОбъектПланирования,
	|	Товары.РольАссортимента,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ДатаЗапретаЗакупки > Товары.Ссылка.ДатаЗапретаПродажи
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	Товары.ВидЦены,
	|	Товары.РейтингПродаж КАК РейтингПродаж,
	|	Товары.Ссылка.КоллекцияНоменклатуры
	|ИЗ
	|	Документ.ИзменениеАссортимента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИзмененияАссортимента.УправлениеКоллекцией)
	|	И Товары.Ссылка.ДатаЗапретаЗакупки <> Товары.Ссылка.ДатаЗапретаПродажи
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Номенклатура,
	|	ОбъектПланирования";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
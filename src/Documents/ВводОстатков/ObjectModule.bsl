#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ДополнительныеСвойства.Вставить("ОчищатьДвиженияНДСРасчетНалоговогоКредита");
	
    Если НЕ ДополнительныеСвойства.Свойство("ЗагрузкаИзУПП") Тогда
    	ИспользоватьРаздельныйУчетПоНалогообложению = ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению");
    	ОрганизацияПлательщикНДС          = Справочники.Организации.ПлательщикНДС(Организация, Дата);
    	ОрганизацияНалоговоеНазначениеНДС = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);
    	
        Если (НЕ ИспользоватьРаздельныйУчетПоНалогообложению) ИЛИ (НЕ ОрганизацияПлательщикНДС) ИЛИ (НЕ ЗначениеЗаполнено(НалоговоеНазначение)) Тогда
    		НалоговоеНазначение = ОрганизацияНалоговоеНазначениеНДС;	
        КонецЕсли; 
    КонецЕсли;    
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство Тогда
		ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	КонецЕсли;
	
	СформироватьСписокЗависимыхЗаказов();
	
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений Тогда
		
		Организация = Справочники.Организации.УправленческаяОрганизация;
		
	КонецЕсли;
	
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		
		Для Каждого ТекСтрока Из Товары Цикл
			ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЦикла;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		                                                                    
		
		ИмяТЧРасчетов = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(ЭтотОбъект.ТипОперации);
		ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
		ИспользоватьКартыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
		
		Если ИмяТЧРасчетов = "РасчетыСПартнерами"
		 ИЛИ ИмяТЧРасчетов = "РасчетыМеждуОрганизациями" Тогда
			СоздатьДокументыРасчетовСПартнерами(ИмяТЧРасчетов, Отказ);
		ИначеЕсли ЗначениеЗаполнено(ИмяТЧРасчетов) Тогда
			СоздатьДокументыРасчетов(ИмяТЧРасчетов,Отказ);
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПодарочныеСертификаты Тогда
			СоздатьПодарочныеСертификаты(Отказ);
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
			МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ТипОперации, Склад, Подразделение, Партнер);
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
			ЗаполнитьВидыЗапасов();
			Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам Тогда
				ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
			КонецЕсли;
	
			Если Не ИспользоватьСоглашенияСКлиентами Тогда
					УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
						Партнер,
						Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение, ХозяйственнаяОперация",
							Истина,
							СоглашениеСКомиссионером,
							Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию));
				
				Если УсловияПродажПоУмолчанию <> Неопределено Тогда
					СоглашениеСКомиссионером = УсловияПродажПоУмолчанию.Соглашение;
				Иначе
					СоглашениеСКомиссионером = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам Тогда
			МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ТипОперации, Склад, Подразделение, Партнер);
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
			ЗаполнитьВидыЗапасов();
			ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство Тогда
			МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ТипОперации, Склад, Подразделение, Партнер);
			МестаУчета.Произвольный = Подразделение;
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
			ЗаполнитьВидыЗапасов();
			ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов Тогда
			ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды Тогда
			МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ТипОперации, Склад, Подразделение, Партнер);
			СтруктураПолей = Новый Структура(
				"Номенклатура, Характеристика, АналитикаУчетаНоменклатуры, Произвольный",
				"Номенклатура", "Характеристика", "АналитикаУчетаНоменклатуры", "");
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ОптовыеПродажи, МестаУчета, СтруктураПолей);
			ЗаполнитьВидыЗапасов();
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
			Если ИспользоватьКартыЛояльности Тогда
				СоздатьКартыЛояльностиИЗаполнитьАналитикуУчетаПоПартнерам();
			Иначе
				ЗаполнитьАналитикуУчетаПоПартнерам();
			КонецЕсли;
			МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ТипОперации, Склад, Подразделение, Партнер);
			СтруктураПолей = Новый Структура(
				"Номенклатура, Характеристика, АналитикаУчетаНоменклатуры, Произвольный",
				"Номенклатура", "Характеристика", "АналитикаУчетаНоменклатуры", "");
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(РозничныеПродажи, МестаУчета, СтруктураПолей);
			ЗаполнитьВидыЗапасов();
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ЗапасыСервер.ОчиститьАналитикуУчетаПартийВТабличнойЧасти(Товары);
		ЗапасыСервер.ОчиститьАналитикуУчетаПартийВТабличнойЧасти(ПрочиеРасходы);
		
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам Тогда
		НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВводОстатков));
	КонецЕсли;
	
	ОчиститьНеиспользуемыеНомераГТД();
	
	//
	
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
		Справочники.ПартииТМЦВЭксплуатации.ЗаполнитьПартии(ЭтотОбъект, Отказ);	
	Иначе
		ТМЦВЭксплуатации.Очистить();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ВводОстатков.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Остатки товаров.
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьДатыПередачиТоваровНаКомиссию(ДополнительныеСвойства,Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПереданныеПереработчику(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьТоварыВЯчейках(ДополнительныеСвойства, Движения, Отказ);
	
	// Остатки в кассах.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ);
	
	// Остатки на банковских счетах.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ);
	
	// Остатки денежных средств в пути.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваВПути(ДополнительныеСвойства, Движения, Отказ);
	
	// Остатки расчетов с клиентами.
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	// Остатки расчетов с поставщиками.
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	// Остатки товаров, переданных на комиссию.
	ЗапасыСервер.ОтразитьТоварыПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);
	
	// Остатки возвратной тары
	МногооборотнаяТараСервер.ОтразитьПринятуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
	МногооборотнаяТараСервер.ОтразитьПереданнуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыПоДоговорамКредитовИДепозитов(ДополнительныеСвойства, Движения, Отказ);
	
	НДСВходящийСервер.ОтразитьНДСРасчетНалоговогоКредита(ДополнительныеСвойства, Движения, Отказ);
	
	//Партионный учет товаров
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по прочим расходам, прочим активам и пассивам, финансовым результатам за прошлые периоды.
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьФинансовыеРезультатыЗаПрошлыеПериоды(ДополнительныеСвойства, Движения, Отказ);
	
	// Подарочные сертификаты
	ПодарочныеСертификатыСервер.ОтразитьПодарочныеСертификаты(ДополнительныеСвойства, Движения, Отказ);
	ПодарочныеСертификатыСервер.ОтразитьИсториюПодарочныхСертификатов(ДополнительныеСвойства, Движения, Отказ);
	
	// ТМЦ в эксплуатации
	ПроведениеСервер.ОтразитьДвижения(
		ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТМЦВЭксплуатации,
		Движения.ТМЦВЭксплуатации,
		Отказ);
		
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		ПроверитьОрганизации(Отказ);
    КонецЕсли;
    
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение, Дата);

	МассивНепроверяемыхРеквизитов = Новый Массив;

	
	МассивНепроверяемыхРеквизитов.Добавить("Контрагент");

	Если (ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
			Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе)
		И ИспользоватьАдресноеХранение
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Упаковка");
		
		ТекстСообщения = НСтр("ru='В настройках программы не включено использование упаковок номенклатуры, 
        |поэтому нельзя оформить документ по складу (помещению) с адресным хранением остатков. Обратитесь к администратору'
        |;uk='У настройках програми не включено використання упаковок номенклатури, 
        |тому не можна оформити документ по складу (приміщення) з адресним зберіганням решток. Зверніться до адміністратора'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;

	Если (ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе)
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство
		Или Не СкладыСервер.ИспользоватьСкладскиеПомещения(Склад,Дата) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Помещение");
	КонецЕсли;

	Если ((ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров 
				ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
				ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков)
			И ИспользоватьАдресноеХранение)
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков Тогда
		НоменклатураСервер.ПроверитьЗаполнениеУпаковок(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ЗонаПриемки");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Упаковка");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.Упаковка");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.Упаковка");
	КонецЕсли;
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство Тогда
		ПараметрыПроверки.ПроверитьВозможностьОкругления = Ложь;
	КонецЕсли;
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаРегл");
	КонецЕсли;
	
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
			Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
				Если Товары[ТекИндекс].ПредусмотренЗалогЗаТару Тогда
					Если НЕ ЗначениеЗаполнено(Товары[ТекИндекс].Цена) Тогда
						ТекстОшибки = НСтр("ru='Не заполнена колонка ""Цена"" в строке %НомерСтроки% табличной части ""Товары""';uk='Не заповнена колонка ""Ціна"" у рядку %НомерСтроки% табличної частини ""Товари""'");
						ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстОшибки,
							ЭтотОбъект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "Цена"),
							,
							Отказ);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Товары[ТекИндекс].Сумма) Тогда
						ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма"" в строке %НомерСтроки% табличной части ""Товары""';uk='Не заповнена колонка ""Сума"" в рядку %НомерСтроки% табличної частини ""Товари""'");
						ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстОшибки,
							ЭтотОбъект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "Сумма"),
							,
							Отказ);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Товары[ТекИндекс].СуммаРегл) Тогда
						ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма(регл)"" в строке %НомерСтроки% табличной части ""Товары""';uk='Не заповнена колонка ""Сума(регл)"" в рядку %НомерСтроки% табличної частини ""Товари""'");
						ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстОшибки,
							ЭтотОбъект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "СуммаРегл"),
							,
							Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
	КонецЕсли;

	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;

	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		
		ПроверитьРазрядностьНомеровОбъектовРасчета(Отказ);
		
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВКассах Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Кассы");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КассыККМ");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскиеСчета");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами");
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.ДатаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.ДатаРасчетногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.НомерРасчетногоДокумента");
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ);
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.ДатаРасчетногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.НомерРасчетногоДокумента");
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ);
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями");
		МассивНепроверяемыхРеквизитов.Добавить("ОрганизацияПолучатель");
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.ДатаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.ДатаРасчетногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.НомерРасчетногоДокумента");
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ);
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.ДатаРасчетногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.НомерРасчетногоДокумента");
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ);
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетниками");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.СторноОтчетовПоЭквайрингу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЭквайрингу");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоДоговорамКредитовИДепозитов");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе 
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды
		Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
	КонецЕсли;

	Если (ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство)
		ИЛИ
		ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(НалоговоеНазначение) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначение");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СоглашениеСКомиссионером");
	КонецЕсли;

	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПодарочныеСертификаты Тогда
		
		ПодарочныеСертификатыСервер.ПроверитьЗаполнениеПодарочныхСертификатов(ЭтотОбъект, Отказ);
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПодарочногоСертификата, "ТипКарты");
		Если ЗначенияРеквизитов.ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПодарочныеСертификаты.Штрихкод");
		ИначеЕсли ЗначенияРеквизитов.ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПодарочныеСертификаты.МагнитныйКод");
		КонецЕсли;
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ВидПодарочногоСертификата");
		МассивНепроверяемыхРеквизитов.Добавить("ПодарочныеСертификаты");
		МассивНепроверяемыхРеквизитов.Добавить("ПодарочныеСертификаты.Штрихкод");
		МассивНепроверяемыхРеквизитов.Добавить("ПодарочныеСертификаты.МагнитныйКод");
	КонецЕсли;
	
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
		
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект, Новый Структура("ТМЦВЭксплуатации"), МассивНепроверяемыхРеквизитов, Отказ);
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "ТМЦВЭксплуатации";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ТМЦВЭксплуатации");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихАктивовПассивов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеАктивыПассивы");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ФинансовыйРезультатЗаПрошлыеПериоды Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатРасходы");
		МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатРасходы.СтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатРасходы.АналитикаРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатРасходы.ДатаОтражения");
		МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатДоходы");
		МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатДоходы.СтатьяДоходов");
		МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатДоходы.АналитикаДоходов");
		МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатДоходы.ДатаОтражения");
	Иначе
		Если ФинансовыйРезультатРасходы.Количество() > 0 И ФинансовыйРезультатДоходы.Количество() = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатДоходы");
			МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатДоходы.СтатьяДоходов");
			МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатДоходы.АналитикаДоходов");
			МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатДоходы.ДатаОтражения");
		ИначеЕсли ФинансовыйРезультатРасходы.Количество() = 0 И ФинансовыйРезультатДоходы.Количество() > 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатРасходы");
			МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатРасходы.СтатьяРасходов");
			МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатРасходы.АналитикаРасходов");
			МассивНепроверяемыхРеквизитов.Добавить("ФинансовыйРезультатРасходы.ДатаОтражения");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.СтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.АналитикаРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.СтавкаНДС");
	Иначе
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтотОбъект, Новый Структура("ПрочиеРасходы"), МассивНепроверяемыхРеквизитов, Отказ);
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.ДатаОтражения");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.Упаковка");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("ОптовыеПродажи.Цена");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.ВидКартыЛояльности");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.КартаЛояльности");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.ДатаОтражения");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.Упаковка");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("РозничныеПродажи.Цена");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗаказПереработчику");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	КонецЕсли;
	
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды Тогда
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("ИмяТЧ", "ОптовыеПродажи");
		ПараметрыПроверки.Вставить("СуффиксДопРеквизита", "");	
		ПараметрыПроверки.Вставить("СписокСтрок", Неопределено);
		ПараметрыПроверки.Вставить("ВыводитьНомераСтрок", Истина);
		ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок", Новый Структура);
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ, ПараметрыПроверки);
		Для ТекИндекс = 0 По ОптовыеПродажи.Количество()-1 Цикл
			Если ОптовыеПродажи[ТекИндекс].ДатаОтражения > Дата Тогда
				ТекстОшибки = НСтр("ru='Значение колонки ""Период"" в строке %НомерСтроки% не должно быть больше даты документа';uk='Значення колонки ""Період"" у рядку %НомерСтроки% не повинно бути більше дати документа'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ОптовыеПродажи[ТекИндекс].НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОптовыеПродажи", ОптовыеПродажи[ТекИндекс].НомерСтроки, "ДатаОтражения"),
					,
					Отказ);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("ИмяТЧ", "РозничныеПродажи");
		ПараметрыПроверки.Вставить("СуффиксДопРеквизита", "");	
		ПараметрыПроверки.Вставить("СписокСтрок", Неопределено);
		ПараметрыПроверки.Вставить("ВыводитьНомераСтрок", Истина);
		ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок", Новый Структура);
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ, ПараметрыПроверки);
		Для ТекИндекс = 0 По РозничныеПродажи.Количество()-1 Цикл
			Если РозничныеПродажи[ТекИндекс].ДатаОтражения > Дата Тогда
				ТекстОшибки = НСтр("ru='Значение колонки ""Период"" в строке %НомерСтроки% не должно быть больше даты документа';uk='Значення колонки ""Період"" у рядку %НомерСтроки% не повинно бути більше дати документа'");
				ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", РозничныеПродажи[ТекИндекс].НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РозничныеПродажи", РозничныеПродажи[ТекИндекс].НомерСтроки, "ДатаОтражения"),
					,
					Отказ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам Тогда
		НоменклатураСервер.ПроверитьЗаполнениеСерий(
			ЭтотОбъект,
			НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВводОстатков),
			Отказ,
			МассивНепроверяемыхРеквизитов);
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	Если ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД")
		И Товары.Количество() > 0
		И (ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
			ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
			ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков) Тогда
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров 
		ИЛИ НЕ ВПодразделенииВедетсяОбособленныйУчетПоМенеджерам(Подразделение) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Менеджер");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ДанныеЗаполнения <> Неопределено И ДанныеЗаполнения.Свойство("ТипОперации") Тогда
		
		ДействующаяОперация = Неопределено;
		
		Если ДанныеЗаполнения.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе Тогда 
			ДействующаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров;	
		ИначеЕсли ДанныеЗаполнения.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе Тогда
			ДействующаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию;	
		ИначеЕсли ДанныеЗаполнения.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
			ДействующаяОперация = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков;	
		КонецЕсли;
			
		Если НЕ ДействующаяОперация = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Операция ввода остатков ""%АрхивнаяОперация%"" является архивной. Для ввода остатков можно воспользоваться операцией ""%ДействующаяОперация%"".';uk='Операція введення залишків ""%АрхивнаяОперация%"" є архівною. Для введення залишків можна скористатися операцією ""%ДействующаяОперация%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АрхивнаяОперация%", 	  ДанныеЗаполнения.ТипОперации);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДействующаяОперация%", ДействующаяОперация);
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
	КонецЕсли;
			
	Ответственный = Пользователи.ТекущийПользователь();
	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Серии.Очистить();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДанныеЭквайринга() Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыПоЭквайрингу.ТипДенежныхСредств,
	|	РасчетыПоЭквайрингу.Валюта,
	|	РасчетыПоЭквайрингу.ЭквайринговыйТерминал,
	|	РасчетыПоЭквайрингу.НомерПлатежнойКарты,
	|	РасчетыПоЭквайрингу.ДатаПлатежа КАК ДатаПлатежа,
	|	(-РасчетыПоЭквайрингу.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоЭквайрингу.Остатки(, Организация = &Организация) КАК РасчетыПоЭквайрингу
	|ГДЕ
	|	РасчетыПоЭквайрингу.СуммаОстаток < 0
	|	И РасчетыПоЭквайрингу.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.ПоступлениеПоПлатежнойКарте)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоЭквайрингу.ТипДенежныхСредств,
	|	РасчетыПоЭквайрингу.Валюта,
	|	РасчетыПоЭквайрингу.ЭквайринговыйТерминал,
	|	РасчетыПоЭквайрингу.НомерПлатежнойКарты,
	|	РасчетыПоЭквайрингу.ДатаПлатежа КАК ДатаПлатежа,
	|	РасчетыПоЭквайрингу.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоЭквайрингу.Остатки(, Организация = &Организация) КАК РасчетыПоЭквайрингу
	|ГДЕ
	|	РасчетыПоЭквайрингу.СуммаОстаток > 0
	|	И РасчетыПоЭквайрингу.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.СписаниеПоПлатежнойКарте)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|");

	Запрос.УстановитьПараметр("Организация", Организация);
	РасчетыПоЭквайрингу.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли;
	Если ДанныеЗаполнения <> Неопределено И ДанныеЗаполнения.Свойство("ТипОперации") Тогда
		ТипОперации = ДанныеЗаполнения.ТипОперации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ГруппаПродукции КАК ГруппаПродукции
	|ПОМЕСТИТЬ ТаблицаТоваровВрем
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.НомерСтроки,
	|	Т.Номенклатура,
	|	Т.ГруппаПродукции
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровВрем КАК Т
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО Т.Номенклатура = СпрНоменклатура.Ссылка
	|		И ВЫБОР
	|			КОГДА &ТипОперации В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды))
	|			ТОГДА
	|				СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|				ИЛИ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	РеквизитыВидаЗапасов.Подразделение КАК Подразделение,
	|	РеквизитыВидаЗапасов.Менеджер КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	РеквизитыВидаЗапасов.Организация КАК Организация,
	|	РеквизитыВидаЗапасов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеквизитыВидаЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	РеквизитыВидаЗапасов.Соглашение КАК Соглашение,
	|	РеквизитыВидаЗапасов.Валюта КАК Валюта,
	|	РеквизитыВидаЗапасов.НалоговоеНазначение КАК НалоговоеНазначение,
	|	РеквизитыВидаЗапасов.Поставщик КАК Поставщик,
	|	РеквизитыВидаЗапасов.Контрагент КАК Контрагент,
	|	РеквизитыВидаЗапасов.Договор КАК Договор,
	|	РеквизитыВидаЗапасов.НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|	ТаблицаТоваров.ГруппаПродукции КАК ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|	(ВЫБРАТЬ
	|		&Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОприходованиеТоваров) КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|		&Подразделение КАК Подразделение,
	|		&Менеджер КАК Менеджер,
	|		ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|		&НалоговоеНазначение КАК НалоговоеНазначение,
	|		&Партнер КАК Поставщик,
	|		&Контрагент КАК Контрагент,
	|		&Договор КАК Договор,
	|		&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации
	|	
	|	ГДЕ
	|		&ТипОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОприходованиеТоваров) КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|		ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|		&НалоговоеНазначение КАК НалоговоеНазначение,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Поставщик,
	|		&Контрагент КАК Контрагент,
	|		&Договор КАК Договор,
	|		&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации
	|
	|	ГДЕ
	|		&ТипОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) КАК ТипЗапасов,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|		&Соглашение КАК Соглашение,
	|		&Валюта КАК Валюта,
	|		&НалоговоеНазначение КАК НалоговоеНазначение,	
	|		&Партнер КАК Поставщик,
	|		&Контрагент КАК Контрагент,
	|		&Договор КАК Договор,
	|		&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации
	|
	|	ГДЕ
	|		&ТипОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПереработчику) КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|		&Соглашение КАК Соглашение,
	|		&Валюта КАК Валюта,
	|		&НалоговоеНазначение КАК НалоговоеНазначение,	
	|		&Партнер КАК Поставщик,
	|		&Контрагент КАК Контрагент,
	|		&Договор КАК Договор,
	|		&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации
	|
	|	ГДЕ
	|		&ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство) КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|		&Соглашение КАК Соглашение,
	|		&Валюта КАК Валюта,
	|		&НалоговоеНазначение КАК НалоговоеНазначение,	
	|		&Партнер КАК Поставщик,
	|		&Контрагент КАК Контрагент,
	|		&Договор КАК Договор,
	|		&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации
	|
	|	ГДЕ
	|		&ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|		&Подразделение КАК Подразделение,
	|		&Менеджер КАК Менеджер,
	|		&Соглашение КАК Соглашение,
	|		&Валюта КАК Валюта,
	|		&НалоговоеНазначение КАК НалоговоеНазначение,	
	|		&Партнер КАК Поставщик,
	|		&Контрагент КАК Контрагент,
	|		&Договор КАК Договор,
	|		&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации
	|
	|	ГДЕ
	|		&ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВРозницу) КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|		&Подразделение КАК Подразделение,
	|		&Менеджер КАК Менеджер,
	|		&Соглашение КАК Соглашение,
	|		&Валюта КАК Валюта,
	|		&НалоговоеНазначение КАК НалоговоеНазначение,	
	|		&Партнер КАК Поставщик,
	|		&Контрагент КАК Контрагент,
	|		&Договор КАК Договор,
	|		&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации
	|
	|	ГДЕ
	|		&ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды)) КАК РеквизитыВидаЗапасов
	|	ПО
	|		ИСТИНА
	|;
	|////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТоваровВрем;
	|УНИЧТОЖИТЬ ТаблицаТоваров
	|");

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды Тогда
		ТаблицаТоваров = ОптовыеПродажи.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов");
		ТаблицаТоваров.Колонки.Добавить("ГруппаПродукции", Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
		ТаблицаТоваров = РозничныеПродажи.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов");
		ТаблицаТоваров.Колонки.Добавить("ГруппаПродукции", Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры"));
	Иначе
		ТаблицаТоваров = Товары.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, ГруппаПродукции");
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды Тогда
		Запрос.УстановитьПараметр("Соглашение", СоглашениеСКомитентом);
	Иначе
		Запрос.УстановитьПараметр("Соглашение", СоглашениеСКлиентом);
	КонецЕсли;
	Запрос.УстановитьПараметр("НалоговоеНазначение", НалоговоеНазначение);
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата));

	Запрос.Выполнить();
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды Тогда
		ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ОптовыеПродажи);
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
		ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, РозничныеПродажи);
	Иначе
		ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ)

	Для Каждого СтрокаТаблицы Из РасчетыСПартнерами Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент)
		 И ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) <> Тип("СправочникСсылка.ДоговорыКонтрагентов")
		 И ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) <> Тип("ПеречислениеСсылка.ТипыДоговоров")
		 И СтрокаТаблицы.РасчетныйДокумент <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаРасчетногоДокумента) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""Дата"" в строке %1 списка ""Расчеты с партнерами""';uk='Не заповнена колонка ""Дата"" в рядку %1 списку ""Розрахунки з партнерами""'"),
					СтрокаТаблицы.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасчетыСПартнерами[" + (СтрокаТаблицы.НомерСтроки - 1) + "].ДатаРасчетногоДокумента",
					,
					Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерРасчетногоДокумента) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""Номер"" в строке %1 списка ""Расчеты с партнерами""';uk='Не заповнена колонка ""Номер"" в рядку %1 списку ""Розрахунки з партнерами""'"),
					СтрокаТаблицы.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасчетыСПартнерами[" + (СтрокаТаблицы.НомерСтроки - 1) + "].НомерРасчетногоДокумента",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из РасчетыМеждуОрганизациями Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент)
			И СтрокаТаблицы.РасчетныйДокумент <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаРасчетногоДокумента) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""Дата"" в строке %1 списка ""Расчеты между организациями""';uk='Не заповнена колонка ""Дата"" в рядку %1 списку ""Розрахунки між організаціями""'"),
					СтрокаТаблицы.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасчетыСПартнерами[" + (СтрокаТаблицы.НомерСтроки - 1) + "].ДатаРасчетногоДокумента",
					,
					Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерРасчетногоДокумента) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""Номер"" в строке %1 списка ""Расчеты между организациями""';uk='Не заповнена колонка ""Номер"" в рядку %1 списку ""Розрахунки між організаціями""'"),
					СтрокаТаблицы.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасчетыСПартнерами[" + (СтрокаТаблицы.НомерСтроки - 1) + "].НомерРасчетногоДокумента",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьКартыЛояльностиИЗаполнитьАналитикуУчетаПоПартнерам();
	
	СтруктураДанныхКартыЛояльности = КартыЛояльностиСервер.ПолучитьСтруктуруДанныхКартыЛояльности();
	Для Каждого ТекСтрока Из РозничныеПродажи Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.КартаЛояльности) И ЗначениеЗаполнено(ТекСтрока.ВидКартыЛояльности) Тогда
			Результат = КартыЛояльностиСервер.НайтиКартыЛояльности(ТекСтрока.ШтрихКод, Перечисления.ТипыКодовКарт.Штрихкод);
			Для Каждого Стр Из Результат.ЗарегистрированныеКартыЛояльности Цикл
				Если Стр.МагнитныйКод = ТекСтрока.МагнитныйКод И Стр.ВидКарты = ТекСтрока.ВидКартыЛояльности Тогда
					ТекСтрока.КартаЛояльности = Стр.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(ТекСтрока.КартаЛояльности) Тогда
				СтруктураДанныхКартыЛояльности.ВидКарты = ТекСтрока.ВидКартыЛояльности;
				СтруктураДанныхКартыЛояльности.Штрихкод = ТекСтрока.ШтрихКод;
				СтруктураДанныхКартыЛояльности.МагнитныйКод = ТекСтрока.МагнитныйКод;
				НоваяКарта = КартыЛояльностиСервер.СоздатьПартнераИЗарегистрироватьКартуЛояльности(СтруктураДанныхКартыЛояльности);
				ТекСтрока.КартаЛояльности = НоваяКарта.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Организация", Организация);
		Реквизиты.Вставить("Партнер", КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(ТекСтрока.КартаЛояльности).Партнер);
		Реквизиты.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		Реквизиты.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Реквизиты.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
		ТекСтрока.АналитикаУчетаПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуУчетаПоПартнерам()
	
	Для Каждого ТекСтрока Из РозничныеПродажи Цикл
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Организация", Организация);
		Реквизиты.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Реквизиты.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		Реквизиты.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Реквизиты.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
		ТекСтрока.АналитикаУчетаПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыРасчетов(ИмяТЧ,Отказ)

	УстановитьПривилегированныйРежим(Истина);
	ПустаяСсылкаНаДокумент = Документы.ВводОстатков.ТипДокументаРасчетовПоТипуОперации(ТипОперации);
	Если ПустаяСсылкаНаДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТипаДокументов = ПустаяСсылкаНаДокумент.Метаданные().Имя;
	МассивСтрокСНовымиРасчетнымиДокументами = Новый Массив;

	Для Каждого СтрТабл из ЭтотОбъект[ИмяТЧ] Цикл
		СтрТабл.НомерРасчетногоДокумента = СокрЛП(СтрТабл.НомерРасчетногоДокумента);
		Если Не ЗначениеЗаполнено(СтрТабл.РасчетныйДокумент)
		 И ЗначениеЗаполнено(СтрТабл.НомерРасчетногоДокумента)
		 И ЗначениеЗаполнено(СтрТабл.ДатаРасчетногоДокумента) Тогда
			Документы.ВводОстатков.ПодобратьДокументРасчетов(ЭтотОбъект, СтрТабл, Отказ);
			Если Отказ
				Или ЗначениеЗаполнено(СтрТабл.РасчетныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			НовыйОбъект = Документы[ИмяТипаДокументов].СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрТабл);
			НовыйОбъект.Дата		= СтрТабл.ДатаРасчетногоДокумента;
			НовыйОбъект.Номер		= СокрЛП(СтрТабл.НомерРасчетногоДокумента);
			НовыйОбъект.Организация = Организация;
			ТекстКомментария = НСтр("ru='Документ сгенерирован автоматически при вводе остатков %ТекущаяДата%';uk='Документ згенерований автоматично при введенні залишків %ТекущаяДата%'");
			ТекстКомментария = СтрЗаменить(ТекстКомментария,"%ТекущаяДата%", Формат(ТекущаяДата(),"ДЛФ=D"));
			НовыйОбъект.Комментарий = ТекстКомментария; 
			Если ИмяТЧ = "РасчетыСПодотчетниками" И ИмяТипаДокументов <> "АвансовыйОтчет" Тогда
				НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику;
			КонецЕсли;
			НовыйОбъект.Заполнить(Неопределено);
			Если ИмяТЧ = "РасчетыСПодотчетниками" Тогда
				НовыйОбъект.Валюта = СтрТабл.Валюта;
				Если ИмяТипаДокументов <> "АвансовыйОтчет" Тогда
					НовыйОбъект.СуммаДокумента = СтрТабл.Сумма;
				КонецЕсли;
			КонецЕсли;
			Попытка
				НовыйОбъект.Записать();
				СтрТабл.РасчетныйДокумент = НовыйОбъект.Ссылка;
				МассивСтрокСНовымиРасчетнымиДокументами.Добавить(СтрТабл);
			Исключение
				ТекстСообщения = НСтр("ru='Ошибка создания расчетного документа: ""%ОписаниеОшибки%""';uk='Помилка створення розрахункового документу: ""%ОписаниеОшибки%""'");
				Информация = ИнформацияОбОшибке();
				Если Информация.Причина <> Неопределено Тогда
					ТекстОшибки = Информация.Причина.Описание;
				Иначе
					ТекстОшибки = ПодробноеПредставлениеОшибки(Информация);
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОписаниеОшибки%",ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект."+ИмяТЧ+"["+Формат(СтрТабл.НомерСтроки-1,"ЧГ=0")+"].НомерРасчетногоДокумента",,Отказ);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		Для Каждого СтрМас из МассивСтрокСНовымиРасчетнымиДокументами Цикл
			СтрМас.РасчетныйДокумент = Неопределено;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьДокументыРасчетовСПартнерами(ИмяТабличнойЧасти, Отказ)

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл

		СтрокаТаблицы.НомерРасчетногоДокумента = СокрЛП(СтрокаТаблицы.НомерРасчетногоДокумента);
		
		Если (Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) И СтрокаТаблицы.РасчетныйДокумент <> Неопределено)
			 ИЛИ ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
			
			Документы.ВводОстатков.ПодобратьДокументРасчетов(ЭтотОбъект, СтрокаТаблицы, Отказ);
			
			Если Отказ ИЛИ
				(ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент)
				И ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) <> Тип("ПеречислениеСсылка.ТипыДоговоров")) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
				ИЛИ ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
				
				НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				НовыйОбъект.Дата				= СтрокаТаблицы.ДатаРасчетногоДокумента;
				НовыйОбъект.ДатаНачалаДействия	= СтрокаТаблицы.ДатаРасчетногоДокумента;
				НовыйОбъект.Номер				= СокрЛП(СтрокаТаблицы.НомерРасчетногоДокумента);
				НовыйОбъект.Организация			= Организация;
				Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ПеречислениеСсылка.ТипыДоговоров") Тогда
					НовыйОбъект.ХозяйственнаяОперация = ХозяйственнаяОперацияПоТипуДоговора(СтрокаТаблицы.РасчетныйДокумент);
				Иначе
					НовыйОбъект.ХозяйственнаяОперация = Документы.ВводОстатков.ХозяйственнаяОперацияДоговораПоТипуОперации(ТипОперации);
				КонецЕсли;
				НовыйОбъект.ВалютаВзаиморасчетов = СтрокаТаблицы.ВалютаВзаиморасчетов;
				НовыйОбъект.ПорядокОплаты		 = Документы.ВводОстатков.ПорядокОплатыДоговораПоВалюте(СтрокаТаблицы.ВалютаВзаиморасчетов);
				НовыйОбъект.Статус				 = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
				НовыйОбъект.ПорядокРасчетов		 = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
				ЗаполнитьЗначенияСвойств(НовыйОбъект,СтрокаТаблицы);
				НовыйОбъект.ИнициализироватьСправочник();
				НовыйОбъект.Менеджер = Ответственный;
				НовыйОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Элемент справочника сгенерирован автоматически при вводе остатков %1';uk='Елемент довідника згенерований автоматично при введенні залишків %1'"),
					Формат(ТекущаяДата(),"ДЛФ=D"));

				Если НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
					ТипДоговораСтрокой = НСтр("ru='с клиентом';uk='з клієнтом'");
				ИначеЕсли НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
					ТипДоговораСтрокой = НСтр("ru='с комиссионером';uk='з комісіонером'");
				ИначеЕсли НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
						ИЛИ НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
					ТипДоговораСтрокой = НСтр("ru='с поставщиком';uk='з постачальником'");
				ИначеЕсли НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
					ТипДоговораСтрокой = НСтр("ru='с комитентом';uk='з комітентом'");
				Иначе
					ТипДоговораСтрокой = "";
				КонецЕсли;

				Если ЗначениеЗаполнено(НовыйОбъект.Дата)
				 И ЗначениеЗаполнено(НовыйОбъект.Номер) Тогда
					ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Договор %1 № %2 от %3';uk='Договір %1 № %2 %3'"),
						ТипДоговораСтрокой,
						НовыйОбъект.Номер,
						Формат(НовыйОбъект.Дата,"ДЛФ=D"));
				ИначеЕсли ЗначениеЗаполнено(НовыйОбъект.Номер) Тогда
					ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Договор %1 № %2';uk='Договір %1 № %2'"),
						ТипДоговораСтрокой,
						НовыйОбъект.Номер);
				ИначеЕсли ЗначениеЗаполнено(НовыйОбъект.Дата) Тогда
					ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Договор %1 от %2';uk='Договір %1 від %2'"),
						ТипДоговораСтрокой,
						Формат(НовыйОбъект.Дата,"ДЛФ=D"));
				Иначе
					ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Договор %1 от %2';uk='Договір %1 від %2'"),
						ТипДоговораСтрокой);
				КонецЕсли;

				НовыйОбъект.Наименование			= ТекстНаименования;
				НовыйОбъект.НаименованиеДляПечати	= ТекстНаименования;
			Иначе
				МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТаблицы.РасчетныйДокумент));
				НовыйОбъект = Документы[МетаданныеДокумента.Имя].СоздатьДокумент();
				НовыйОбъект.Заполнить(Неопределено);
				ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаТаблицы);
				НовыйОбъект.Дата		= СтрокаТаблицы.ДатаРасчетногоДокумента;
				НовыйОбъект.Номер		= СокрЛП(СтрокаТаблицы.НомерРасчетногоДокумента);
				НовыйОбъект.Организация = Организация;
				Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					НовыйОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
				ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					НовыйОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
				ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
					НовыйОбъект.ОрганизацияПолучатель = ОрганизацияПолучатель;
				ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
					НовыйОбъект.Комиссионер = ОрганизацияПолучатель;
				КонецЕсли;
				НовыйОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ сгенерирован автоматически при вводе остатков %1';uk='Документ згенерований автоматично при введенні залишків %1'"),
					Формат(ТекущаяДата(),"ДЛФ=D"));
			КонецЕсли;

			Попытка
				НовыйОбъект.Записать();
				СтрокаТаблицы.РасчетныйДокумент = НовыйОбъект.Ссылка;
			Исключение
				Информация = ИнформацияОбОшибке();
				Если Информация.Причина <> Неопределено Тогда
					ТекстОшибки = Информация.Причина.Описание;
				Иначе
					ТекстОшибки = ПодробноеПредставлениеОшибки(Информация);
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка создания расчетного документа: ""%1""';uk='Помилка створення розрахункового документу: ""%1""'"),
					ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"Объект.РасчетыСПартнерами[" + Формат(СтрокаТаблицы.НомерСтроки - 1,"ЧГ=0") + "].НомерРасчетногоДокумента",
					,
					Отказ);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьПодарочныеСертификаты(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	НовыеЭлементы = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.Штрихкод КАК Штрихкод,
	|	Таблица.МагнитныйКод КАК МагнитныйКод,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&ПодарочныеСертификаты КАК Таблица
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(СправочникПодарочныеСертификатыПоШтрихкоду.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоШтрихкоду,
	|	ЕСТЬNULL(СправочникПодарочныеСертификатыПоМагнитномуКоду.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоМагнитномуКоду,
	|	ЕСТЬNULL(СправочникПодарочныйСертификатПоСерийномуНомеру.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоСерийномуНомеру
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныеСертификатыПоШтрихкоду
	|		ПО СправочникПодарочныеСертификатыПоШтрихкоду.Штрихкод = Таблица.Штрихкод
	|		И СправочникПодарочныеСертификатыПоШтрихкоду.Владелец = &ВидПодарочногоСертификата
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныеСертификатыПоМагнитномуКоду
	|		ПО СправочникПодарочныеСертификатыПоМагнитномуКоду.МагнитныйКод = Таблица.МагнитныйКод
	|		И СправочникПодарочныеСертификатыПоМагнитномуКоду.Владелец = &ВидПодарочногоСертификата
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныйСертификатПоСерийномуНомеру
	|		ПО СправочникПодарочныйСертификатПоСерийномуНомеру.Код = Таблица.СерийныйНомер
	|");
	
	Запрос.УстановитьПараметр("ВидПодарочногоСертификата", ВидПодарочногоСертификата);
	Запрос.УстановитьПараметр("ПодарочныеСертификаты", ПодарочныеСертификаты.Выгрузить());
	
	Таблица = Запрос.Выполнить().Выгрузить();
	ТипКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПодарочногоСертификата, "ТипКарты");
	
	Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ПодарочныйСертификат) Тогда
			
			НайденнаяСтрока = Таблица.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки))[0];
			
			Если ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
				
				Если ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру)
					И ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду)
					И НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру = НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду Тогда
					СтрокаТЧ.ПодарочныйСертификат = НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру;
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
				
				Если ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру)
					И ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду)
					И НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру = НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду Тогда
					СтрокаТЧ.ПодарочныйСертификат = НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру;
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру)
					И ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду)
					И ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду)
					И НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру = НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду
					И НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру = НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду Тогда
					СтрокаТЧ.ПодарочныйСертификат = НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Попытка
				
				СтруктураДанныхПодарочногоСертификата = ПодарочныеСертификатыВызовСервера.ПолучитьСтруктуруДанныхПодарочногоСертификата();
				СтруктураДанныхПодарочногоСертификата.ВидПодарочногоСертификата = ВидПодарочногоСертификата;
				СтруктураДанныхПодарочногоСертификата.МагнитныйКод = СтрокаТЧ.МагнитныйКод;
				СтруктураДанныхПодарочногоСертификата.Штрихкод = СтрокаТЧ.Штрихкод;
				СтруктураДанныхПодарочногоСертификата.СерийныйНомер = СтрокаТЧ.СерийныйНомер;
				СтрокаТЧ.ПодарочныйСертификат = ПодарочныеСертификатыСервер.ЗарегистрироватьПодарочныйСертификат(СтруктураДанныхПодарочногоСертификата);
				
				НовыеЭлементы.Добавить(СтрокаТЧ);
				
			Исключение
				
				ТекстСообщения = НСтр("ru='Ошибка создания подарочного сертификата: ""%ОписаниеОшибки%""';uk='Помилка створення подарункового сертифікату: ""%ОписаниеОшибки%""'");
				Информация = ИнформацияОбОшибке();
				Если Информация.Причина <> Неопределено Тогда
					ТекстОшибки = Информация.Причина.Описание;
				Иначе
					ТекстОшибки = ПодробноеПредставлениеОшибки(Информация);
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОписаниеОшибки%",ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"Объект.ПодарочныеСертификаты" + "[" + Формат(СтрокаТЧ.НомерСтроки - 1,"ЧГ=0") + "].СерийныйНомер",
					,
					Отказ);
				Прервать;
				
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		Для Каждого СтрокаТЧ из НовыеЭлементы Цикл
			НовыеЭлементы.ПодарочныйСертификат = Неопределено;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ХозяйственнаяОперацияПоТипуДоговора(ТипДоговора)

	Если ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
		Возврат Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
		Возврат Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
	ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
		Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
		Возврат Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом Тогда
		Возврат Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	ИначеЕсли ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
		Возврат Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	&Поставщик КАК Поставщик,
	|	&Контрагент КАК Контрагент,
	|	&НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТаблицаТоваров.АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитики
	|	ПО
	|		ТаблицаТоваров.АналитикаУчетаПартий = КлючиАналитики.Ссылка
	|
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|	И НЕ &ЭтоОстаткиПрочихРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	&Поставщик КАК Поставщик,
	|	&Контрагент КАК Контрагент,
	|	&НалоговоеНазначение,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий
	|
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиПоФакту
	|	ПО
	|		ТаблицаТоваров.СтатьяРасходов = СтатьиПоФакту.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК Аналитики
	|	ПО
	|		ТаблицаТоваров.АналитикаУчетаПартий = Аналитики.КлючАналитики
	|
	|ГДЕ
	|	Аналитики.КлючАналитики ЕСТЬ NULL
	|	И &ЭтоОстаткиПрочихРасходов
	|");

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов Тогда
		ТаблицаТоваров = ПрочиеРасходы.Выгрузить(,"НомерСтроки, СтатьяРасходов, СтавкаНДС, АналитикаУчетаПартий");
		ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		Запрос.УстановитьПараметр("ЭтоОстаткиПрочихРасходов", Истина);
	Иначе
		ТаблицаТоваров = Товары.Выгрузить(,"НомерСтроки, Номенклатура, СтавкаНДС, АналитикаУчетаПартий");
		ТаблицаТоваров.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		Запрос.УстановитьПараметр("ЭтоОстаткиПрочихРасходов", Ложь);
	КонецЕсли;
	Запрос.УстановитьПараметр("Поставщик", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НалоговоеНазначение", НалоговоеНазначение);

	Запрос.Выполнить();

	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов Тогда
		ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ПрочиеРасходы);
	Иначе
		ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	Массив = Новый Массив;
	// Приходы в регистр контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.ЗаказКлиента
	|ИЗ (
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(ВЫБРАТЬ
	|			РасчетыСПартнерами.РасчетныйДокумент
	|		ИЗ
	|			Документ.ВводОстатков.РасчетыСПартнерами КАК РасчетыСПартнерами
	|		ГДЕ
	|			РасчетыСПартнерами.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСПартнерами.РасчетныйДокумент)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(ВЫБРАТЬ
	|			РасчетыСПартнерами.РасчетныйДокумент
	|		ИЗ
	|			Документ.ВводОстатков.РасчетыСПартнерами КАК РасчетыСПартнерами
	|		ГДЕ
	|			РасчетыСПартнерами.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСПартнерами.РасчетныйДокумент)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|) КАК Таб
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.ЗаказПоставщику
	|ИЗ (
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивЗаказов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(ВЫБРАТЬ
	|			РасчетыСПартнерами.РасчетныйДокумент
	|	ИЗ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК РасчетыСПартнерами
	|	ГДЕ
	|		РасчетыСПартнерами.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСПартнерами.РасчетныйДокумент)
	|	) КАК Таб
	|	
	|СГРУППИРОВАТЬ ПО
	|	Таб.ЗаказПоставщику
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.РасчетыСПартнерами.ВыгрузитьКолонку("РасчетныйДокумент"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	МассивЗависимыхЗаказов = Результат[0].Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
	МассивЗависимыхЗаказов = Результат[1].Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовПоставщикам", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Процедура ОтразитьФинансовыеРезультатыЗаПрошлыеПериоды(ДополнительныеСвойства, Движения, Отказ)
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыеРезультаты;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.ФинансовыеРезультаты;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

Процедура ПроверитьОрганизации(Отказ)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
		
		Если Организация = ОрганизацияПолучатель Тогда
			
			Текст = НСтр("ru='Одна и та же организация не может являться отправителем и получателем одновременно';uk='Одна і та ж організація не може бути відправником і одержувачем одночасно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Организация",
				,
				Отказ);
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
			И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
			
			Текст = НСтр("ru='Организация-получатель не должна быть взаимосвязана с организацией-отправителем по организационной структуре.';uk='Організація-одержувач не повинна бути взаємопов''язана з організацією-відправником за організаційною структурою.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ОрганизацияПолучатель",
				,
				Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазрядностьНомеровОбъектовРасчета(Отказ)
	
	ШаблонСообщения = НСтр("ru='Длина номера объекта расчетов превышает допустимую длину (%Длина%) для выбранного объекта расчетов в строке %НомерСтроки%.';uk='Довжина номера об''єкта розрахунків перевищує допустиму довжину (%Длина%) для вибраного об''єкта розрахунків в рядку %НомерСтроки%.'");
	ТабЧасть = "";
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		ТабЧасть = "РасчетыСПартнерами";
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		ТабЧасть = "РасчетыМеждуОрганизациями";
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект[ТабЧасть] Цикл
		Если СтрокаТаблицы.РасчетныйДокумент <> Неопределено Тогда
			ТипОбъектаРасчетов = ТипЗнч(СтрокаТаблицы.РасчетныйДокумент);
			ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипОбъектаРасчетов);
			ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипОбъектаРасчетов);
			ДлинаНомера = 0;
			МетаданныеОбъектаРасчетов = Метаданные.НайтиПоТипу(ТипОбъектаРасчетов);
			Если ЭтоСправочник И МетаданныеОбъектаРасчетов <> Неопределено Тогда
				ДлинаНомера = МетаданныеОбъектаРасчетов.ДлинаКода;
			ИначеЕсли ЭтоДокумент И МетаданныеОбъектаРасчетов <> Неопределено Тогда
				ДлинаНомера = МетаданныеОбъектаРасчетов.ДлинаНомера;
			Иначе
				Возврат;
			КонецЕсли;
			Если (СтрДлина(СтрокаТаблицы.НомерРасчетногоДокумента) > ДлинаНомера)
				И ДлинаНомера > 0 Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Длина%", ДлинаНомера);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТаблицы.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ТабЧасть, СтрокаТаблицы.НомерСтроки, "НомерРасчетногоДокумента"),
				,
				Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВПодразделенииВедетсяОбособленныйУчетПоМенеджерам(Подразделение)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК Т
		|ГДЕ
		|	Т.Ссылка = &Подразделение
		|	И Т.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
		|");
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции


Процедура ОчиститьНеиспользуемыеНомераГТД()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.НомерГТД
	|ПОМЕСТИТЬ
	|	ТоварыСГТД
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|;
	|ВЫБРАТЬ
	|	Товары.НомерСтроки
	|ИЗ
	|	ТоварыСГТД КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = Товары.Номенклатура
	|ГДЕ
	|	НЕ СпрНоменклатура.ВестиУчетПоГТД
	|");
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, "НомерСтроки, Номенклатура, НомерГТД"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Товары[Выборка.НомерСтроки - 1];
		Строка.НомерГТД = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ОткрытиеИзСписка") Тогда
		Если РаботаСКурсамиВалют.КурсыАктуальны() Тогда
			СообщитьЧтоКурсыАктуальны = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВалюты();
	
	// Начало и окончание периода загрузки курсов.
	Объект.ОкончаниеПериодаЗагрузки = НачалоДня(ТекущаяДатаСеанса());
	Объект.НачалоПериодаЗагрузки = Объект.ОкончаниеПериодаЗагрузки;
	МинимальнаяДата = НачалоГода(Объект.ОкончаниеПериодаЗагрузки);
	Для Каждого Валюта Из Объект.СписокВалют Цикл
		Если ЗначениеЗаполнено(Валюта.ДатаКурса) И Валюта.ДатаКурса < Объект.НачалоПериодаЗагрузки Тогда
			Если Валюта.ДатаКурса < МинимальнаяДата Тогда
				Объект.НачалоПериодаЗагрузки = МинимальнаяДата;
				Прервать;
			КонецЕсли;
			Объект.НачалоПериодаЗагрузки = Валюта.ДатаКурса;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.НадписьДата.Заголовок = "За " + Формат(ТекущаяДата(), "ДЛФ=ДД");
	
	УстановитьВидимость();
	
	Если НЕ Объект.ИсточникДанных Тогда // Интернет
		КодКорректен = КодДоступаКорректный();
		УстановитьВидимостьЭлементовКодаДоступа(КодКорректен);
	Иначе // Диск ИТС	
		УстановитьВидимостьЭлементовКодаДоступа(Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если СообщитьЧтоКурсыАктуальны Тогда
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыАктуальны();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьСписокЗагружаемыхВалют", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокВалют

&НаКлиенте
Процедура СписокВалютВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПереключитьЗагрузку();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьКурсыВалют()
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериодаЗагрузки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не задана дата начала периода загрузки.';uk='Не задана дата початку періоду завантаження.'"),
			,
			"Объект.НачалоПериодаЗагрузки");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ОкончаниеПериодаЗагрузки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не задана дата окончания периода загрузки.';uk='Не задана дата закінчення періоду завантаження.'"),
			,
			"Объект.ОкончаниеПериодаЗагрузки");
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуКурсов();
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗагрузкиКурсов", 1, Истина);
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполняетсяЗагрузкаКурсов;
	Элементы.КоманднаяПанель.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВалюты(Команда)
	УстановитьВыбор(Истина);
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыбор(Команда)
	УстановитьВыбор(Ложь);
	УстановитьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьСайтФинансУа() Экспорт
	ЗапуститьПриложение("http://1c.finance.ua");
КонецПроцедуры

&НаКлиенте
Процедура ПолеКартинкиФинансУаНажатие(Элемент)
	ОткрытьСайтФинансУа();
КонецПроцедуры

&НаКлиенте
Процедура НадписьПолучитьКодНажатие(Элемент)
	ОткрытьСайтФинансУа();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	Элементы.БукваДиска.Видимость = (Объект.ИсточникДанных = Истина); // Источник данных = Диск ИТС
	Элементы.КодДоступа.Видимость = (Объект.ИсточникДанных = Ложь);   // Источник данных = Интернет
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовКодаДоступа(КодКорректен = Истина)

	Элементы.НадписьПояснение.Видимость = НЕ КодКорректен;
	Элементы.НадписьПолучитьКод.Видимость = НЕ КодКорректен;	
	Элементы.ГруппаЗаДень.Видимость = НЕ КодКорректен;
	Элементы.ГруппаЗаПериод.Видимость = КодКорректен;
	
КонецПроцедуры

&НаСервере
Функция КодДоступаКорректный()

	КодКорректен = Истина;
	
	КодДоступа = Объект.КодДоступа;
	
	Если НЕ ПустаяСтрока(КодДоступа) Тогда
	
		Если НЕ (СтрДлина(СокрЛП(КодДоступа)) = 32) Тогда
			КодКорректен = Ложь;
		Иначе
			Для ном=0 По СтрДлина(КодДоступа)-1 Цикл
				Символ = Сред(КодДоступа,ном,1);
				Если  Символ <> "a" И Символ <> "b" И Символ <> "c" И Символ <> "d" И Символ <> "e" И Символ <> "f"
					И Символ <> "0" И Символ <> "1" И Символ <> "2" И Символ <> "3" И Символ <> "4" И Символ <> "5"
					И Символ <> "6" И Символ <> "7" И Символ <> "8" И Символ <> "9" Тогда
						КодКорректен = Ложь;
						Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе	
		
	    КодКорректен = Ложь;
		
	КонецЕсли; 
	
	Если НЕ КодКорректен Тогда
		Объект.НачалоПериодаЗагрузки = НачалоДня(ТекущаяДата());
		Объект.ОкончаниеПериодаЗагрузки = НачалоДня(ТекущаяДата());
	КонецЕсли;	
	
	Возврат КодКорректен;
	
КонецФункции

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если НЕ Объект.ИсточникДанных Тогда // Интернет
		КодКорректен = КодДоступаКорректный();
		УстановитьВидимостьЭлементовКодаДоступа(КодКорректен);
	Иначе // Диск ИТС	
		УстановитьВидимостьЭлементовКодаДоступа(Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КодДоступаПриИзменении(Элемент)
	
	КодКорректен = КодДоступаКорректный();
	
	УстановитьВидимостьЭлементовКодаДоступа(КодКорректен);
	
	Если НЕ КодКорректен И НЕ ПустаяСтрока(Объект.КодДоступа) Тогда
		Сообщить(НСтр("ru='Введен некорректный код доступа!';uk='Введено некоректний код доступу!'"));
		Сообщить(НСтр("ru='Попробуйте ввести код еще раз.';uk='Спробуйте ввести код ще раз.'"));
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаКурса.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СписокВалют.ДатаКурса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала(Дата('19800101000000'));

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбор(Выбор)
	Для Каждого Валюта Из Объект.СписокВалют Цикл
		Валюта.Загружать = Выбор;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалюты()
	
	// Заполнение табличной части списком валют, курс которых не зависит от курса других валют.
	ОкончаниеПериодаЗагрузки = Объект.ОкончаниеПериодаЗагрузки;
	СписокВалют = Объект.СписокВалют;
	СписокВалют.Очистить();
	
	ЗагружаемыеВалюты = РаботаСКурсамиВалют.ПолучитьМассивЗагружаемыхВалют();
	
	Для Каждого ЭлементВалюта Из ЗагружаемыеВалюты Цикл
		ДобавитьВалютуВСписок(ЭлементВалюта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВалютуВСписок(Валюта)
	
	// Добавление записи в список валют.
	НоваяСтрока = Объект.СписокВалют.Добавить();
	
	// Заполнение информации о курсе на основе ссылки валюты.
	ЗаполнитьДанныеСтрокиТаблицыНаОсновеВалюты(НоваяСтрока, Валюта);
	
	НоваяСтрока.Загружать = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияВСпискеВалют()
	
	// Обновление записей о курсах валют в списке.
	
	Для Каждого СтрокаДанных Из Объект.СписокВалют Цикл
		СсылкаНаВалюту = СтрокаДанных.Валюта;
		ЗаполнитьДанныеСтрокиТаблицыНаОсновеВалюты(СтрокаДанных, СсылкаНаВалюту);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиТаблицыНаОсновеВалюты(СтрокаТаблицы, Валюта);
	
	СведенияОВалюте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "НаименованиеПолное,Код,Наименование");
	
	СтрокаТаблицы.Валюта = Валюта;
	СтрокаТаблицы.КодВалюты = СведенияОВалюте.Код;
	СтрокаТаблицы.СимвольныйКод = СведенияОВалюте.Наименование;
	СтрокаТаблицы.Представление = СведенияОВалюте.НаименованиеПолное;
	
	ДанныеКурса = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(Валюта);
	
	Если ТипЗнч(ДанныеКурса) = Тип ("Структура") Тогда
		СтрокаТаблицы.ДатаКурса = ДанныеКурса.ДатаКурса;
		СтрокаТаблицы.Курс      = ДанныеКурса.Курс;
		СтрокаТаблицы.Кратность = ДанныеКурса.Кратность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСписокЗагружаемыхВалют()
	Если Объект.СписокВалют.Количество() = 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСписокЗагружаемыхВалютЗавершение", ЭтотОбъект);
		ТекстПредупреждения = НСтр("ru='В справочнике валют отсутствуют валюты, курсы которых можно загружать из сети Интернет.';uk='У довіднику валют відсутні валюти, курси яких можна завантажувати з мережі Інтернет.'");
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСписокЗагружаемыхВалютЗавершение(ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	ЕстьВыбранныеВалюты = Объект.СписокВалют.НайтиСтроки(Новый Структура("Загружать", Истина)).Количество() > 0;
	Элементы.ФормаЗагрузитьКурсыВалют.Доступность = ЕстьВыбранныеВалюты;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьЗагрузкуКурсаВыбраннойВалютыИзИнтернета(Команда)
	ТекущиеДанные = Элементы.СписокВалют.ТекущиеДанные;
	СнятьПризнакЗагрузкиИзИнтернета(ТекущиеДанные.Валюта);
	Объект.СписокВалют.Удалить(ТекущиеДанные);
КонецПроцедуры

&НаСервере
Процедура СнятьПризнакЗагрузкиИзИнтернета(ВалютаСсылка)
	ВалютаОбъект = ВалютаСсылка.ПолучитьОбъект();
	ВалютаОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
	ВалютаОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЗагрузку()
	Элементы.СписокВалют.ТекущиеДанные.Загружать = Не Элементы.СписокВалют.ТекущиеДанные.Загружать;
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуКурсов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	Отбор = Новый Структура;   
	ИмяМетода = "РаботаСКурсамиВалют.ЗагрузитьАктуальныйКурсФинансУА";
	Отбор.Вставить("ИмяМетода", ИмяМетода);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФоновыеЗаданияЗагрузки = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФоновыеЗаданияЗагрузки.Количество() > 0 Тогда
		ИдентификаторФоновогоЗадания = ФоновыеЗаданияЗагрузки[0].УникальныйИдентификатор;
	Иначе
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		НаименованиеФоновогоЗадания = НСтр("ru='Загрузка курсов валют finance.ua';uk='Завантаження курсів валют finance.ua'");
		
		ПараметрыЗагрузки = Новый Структура;
		ПараметрыЗагрузки.Вставить("НачалоПериода", Объект.НачалоПериодаЗагрузки);
		ПараметрыЗагрузки.Вставить("КонецПериода", Объект.ОкончаниеПериодаЗагрузки);
		ПараметрыЗагрузки.Вставить("ИсточникДанных", Объект.ИсточникДанных);
		ПараметрыЗагрузки.Вставить("КодДоступа",     Объект.КодДоступа);
		ПараметрыЗагрузки.Вставить("БукваДиска",     Объект.БукваДиска);
		ПараметрыЗагрузки.Вставить("СписокВалют", ОбщегоНазначения.ТаблицаЗначенийВМассив(Объект.СписокВалют.Выгрузить(
			Объект.СписокВалют.НайтиСтроки(Новый Структура("Загружать", Истина)), "КодВалюты,Валюта")));
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ПараметрыЗагрузки);
		ПараметрыЗадания.Добавить(АдресРезультата);
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(  
			ИмяМетода,
			ПараметрыЗадания,
			,
			НаименованиеФоновогоЗадания);
			
		ИдентификаторФоновогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗагрузкиКурсов()
	
	ПолучитьСообщенияПользователюИзФоновогоЗадания();
	
	Попытка
		ЗаданиеВыполнено = ЗаданиеВыполнено(ИдентификаторФоновогоЗадания);
	Исключение
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокВалют;
		Элементы.КоманднаяПанель.Доступность = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокВалют;
		Элементы.КоманднаяПанель.Доступность = Истина;
		ОбработатьРезультатЗагрузки();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗагрузкиКурсов", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСообщенияПользователюИзФоновогоЗадания()
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторФоновогоЗадания);
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияПользователю = Задание.ПолучитьСообщенияПользователю(Истина);
	Если Не ЗначениеЗаполнено(СообщенияПользователю) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		Сообщение.Сообщить();
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузки()
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ЕстьУспешноЗагруженныеКурсы = Ложь;
	БезОшибок = Истина;
	
	КоличествоОшибок = 0;
	
	СписокОшибок = Новый ТекстовыйДокумент;
	Для Каждого СостояниеЗагрузки Из РезультатЗагрузки Цикл
		Если СостояниеЗагрузки.СтатусОперации Тогда
			ЕстьУспешноЗагруженныеКурсы = Истина;
		Иначе
			БезОшибок = Ложь;
			КоличествоОшибок = КоличествоОшибок + 1;
			СписокОшибок.ДобавитьСтроку(СостояниеЗагрузки.Сообщение + Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьУспешноЗагруженныеКурсы Тогда
		ОбновитьСведенияВСпискеВалют();
		ПараметрыЗаписи = Неопределено;
		МассивОбновляемыхВалют = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.СписокВалют Цикл
			МассивОбновляемыхВалют.Добавить(СтрокаТаблицы.Валюта);
		КонецЦикла;
		Оповестить("Запись_ЗагрузкаКурсовВалют", ПараметрыЗаписи, МассивОбновляемыхВалют);
		РаботаСКурсамиВалютКлиент.ОповеститьКурсыУспешноОбновлены();
	КонецЕсли;
	
	Если БезОшибок Тогда
		Закрыть();
	Иначе
		ПредставлениеОшибки = СокрЛП(СписокОшибок.ПолучитьТекст());
		Если КоличествоОшибок > 1 Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Подробнее", НСтр("ru='Подробнее...';uk='Докладніше...'"));
			Кнопки.Добавить("Продолжить", НСтр("ru='Продолжить';uk='Продовжити'"));
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось загрузить курсы валют (%1).';uk='Не вдалося завантажити курси валют (%1).'"), КоличествоОшибок);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗагрузкиПриОтветеНаВопрос", ЭтотОбъект, ПредставлениеОшибки);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		Иначе
			ПоказатьПредупреждение(, ПредставлениеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузкиПриОтветеНаВопрос(РезультатВопроса, ПредставлениеОшибки) Экспорт
	Если РезультатВопроса <> "Подробнее" Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалютФинансУА.Форма.СообщенияОбОшибках", Новый Структура("Текст", ПредставлениеОшибки));	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторФоновогоЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторФоновогоЗадания);
КонецФункции

&НаКлиенте
Процедура ЗагружатьПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти


#Область ПрограммныйИнтерфейс

// Осуществляет расчет вычисляемых цен
//
// Параметры:
//  Форма - Форма, в которой необходимо рассчитать цены
//  ДанныеДляРасчетаВычисляемыхЦенНаКлиенте - Структура, данные для расчета
//
Процедура РассчитатьВычисляемыеЦены(Форма, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Для Каждого СтрокаНоменклатура Из Форма.ДеревоЦен.ПолучитьЭлементы() Цикл
		Соответствие.Вставить(
			Строка(СтрокаНоменклатура.Номенклатура.УникальныйИдентификатор()),
			СтрокаНоменклатура);
		Для Каждого СтрокаХарактеристика Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
			Соответствие.Вставить(
				Строка(СтрокаНоменклатура.Номенклатура.УникальныйИдентификатор())
				+ Строка(СтрокаХарактеристика.Характеристика.УникальныйИдентификатор()),
				СтрокаХарактеристика);
		КонецЦикла;
	КонецЦикла;
	
	РассчитыватьПоФормуламОтДругихВидовЦен = ПредопределенноеЗначение(
		"Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен");
	НаценкаНаДругойВидЦен = ПредопределенноеЗначение(
		"Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен");
	
	Для Каждого СтрокаМассива Из ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.СтрокиТаблицыЦен Цикл
		
		Если ЗначениеЗаполнено(СтрокаМассива.Характеристика) Тогда
			Ключ = Строка(СтрокаМассива.Номенклатура.УникальныйИдентификатор())
			     + Строка(СтрокаМассива.Характеристика.УникальныйИдентификатор());
		Иначе
			Ключ = Строка(СтрокаМассива.Номенклатура.УникальныйИдентификатор());
		КонецЕсли;

		СтрокаТаблицыЦен = Соответствие.Получить(Ключ);
		
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
		
		Для Каждого ВидЦеныСсылка Из ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.ВидыЦен Цикл
			
			ВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, ВидЦеныСсылка);
			
			Если ВидЦены.СпособЗаданияЦены = РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ ВидЦены.СпособЗаданияЦены = НаценкаНаДругойВидЦен Тогда
				
				Если Не ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.ТолькоНезаполенные Тогда
					СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = 0;
				КонецЕсли;
				
				ТекущаяЦена = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки];
				Если ТекущаяЦена = 0 Или Не ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.ТолькоНезаполенные Тогда
					
					ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
						Если ВидЦены.СпособЗаданияЦены = РассчитыватьПоФормуламОтДругихВидовЦен Тогда
							Формула = ЦеновыеГруппыАлгоритмов[0].Формула;
						Иначе
							Формула = "["
							        + ЦеновыеГруппыАлгоритмов[0].БазовыйВидЦены
							        + "]*"
							        + Формат((ЦеновыеГруппыАлгоритмов[0].Наценка/100)+1,"ЧРД=.; ЧРГ=' '; ЧГ=0");
						КонецЕсли;
					Иначе
						Если ВидЦены.СпособЗаданияЦены = РассчитыватьПоФормуламОтДругихВидовЦен Тогда
							Формула = ВидЦены.Формула;
						Иначе
							Формула = "[" + ВидЦены.БазовыйВидЦены + "]*" + Формат((ВидЦены.Наценка/100)+1,"ЧРД=.; ЧРГ=' '; ЧГ=0");
						КонецЕсли;
					КонецЕсли;
					
					ЦеновыеГруппыПорогов = ВидЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
						ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
					Иначе
						ПорогСрабатывания = ВидЦены.ПорогСрабатывания;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Формула) Тогда
						
						Для Каждого БазоваяЦена Из ВидЦены.ВлияющиеЦены Цикл
							
							СтрокаБазовойЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(
								Форма.ВыбранныеЦены,
								БазоваяЦена.Значение);
							
							СтрокаПересчетаВалюты   = УстановкаЦенКлиентСервер.СтрокаПересчетаВалюты(
								СтрокаБазовойЦены.Валюта,
								ВидЦены.Валюта,
								ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.КурсыВалют);
								
							Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
								СтрокаПересчетаУпаковок = УстановкаЦенКлиентСервер.СтрокаПересчетаУпаковок(
									СтрокаТаблицыЦен,
									СтрокаБазовойЦены,
									ВидЦены,
									ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.СоответствиеКоэффициентовУпаковокНоменклатуры);
							Иначе
								СтрокаПересчетаУпаковок = "";
							КонецЕсли;
							СтрокаЗамены = " СтрокаТаблицыЦен."
							             + СтрокаБазовойЦены.ИмяКолонки
										 + " " + СтрокаПересчетаУпаковок
										 + СтрокаПересчетаВалюты;
							Формула = СтрЗаменить(Формула, "[" + СтрокаБазовойЦены.Идентификатор + "]", СтрокаЗамены);
							
						КонецЦикла;
						
						Попытка
							
							ЗначениеЦены = УстановкаЦенКлиентСервер.ОкруглитьЦену(Вычислить(Формула), ВидЦены);
							
							СтараяЦена = СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
							Если СтараяЦена <> 0 Тогда
								ПроцентИзменения = Окр(
									100*(ЗначениеЦены - СтараяЦена)/СтараяЦена,
									5,2);
							Иначе
								ПроцентИзменения = 0;
							КонецЕсли;
							
							Если    ПорогСрабатывания = 0
								ИЛИ СтараяЦена = 0
								ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
								
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = ЗначениеЦены;
								Если СтараяЦена <> 0 Тогда
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = ПроцентИзменения;
								Иначе
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
								КонецЕсли;
								
							Иначе
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = СтараяЦена;
								СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
							КонецЕсли;
							
							СтрокаТаблицыЦен["ИзмененаВручную" + ВидЦены.ИмяКолонки] = Ложь;
							
						Исключение
							
							Если ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" с характеристикой ""%Характеристика%""
                                                          |не рассчитана цена по виду цен ""%ВидЦены%"" 
                                                          |по причине: %ОписаниеОшибки%'
                                                          |;uk='Для номенклатури ""%Номенклатура%"" з характеристикою ""%Характеристика%""
                                                          |не розрахована ціна за видом цін ""%ВидЦены%"" 
                                                          |через: %ОписаниеОшибки%'");
							Иначе
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" не рассчитана цена 
                                                          |по виду цен ""%ВидЦены%""
                                                          |по причине: %ОписаниеОшибки%'
                                                          |;uk='Для номенклатури ""%Номенклатура%"" не розрахована ціна 
                                                          |по виду цін ""%ВидЦены%""
                                                          |через: %ОписаниеОшибки%'");
							КонецЕсли;
							
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦены%"       , ВидЦены.Ссылка);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%"  , СтрокаТаблицыЦен.Номенклатура);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристика%", СтрокаТаблицыЦен.Характеристика);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения,
								Форма.Объект.Ссылка,
								"ДеревоЦен");
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполненность обязательных параметров схем компоновки данных,
// используемых для расчета цен
//
// Параметры:
//  Форма - Форма, в которой необходимо рассчитать цены
//
// Возвращаемое значение:
//  Булево, наличие ошибок
//
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(Форма) Экспорт
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из Форма.ВыбранныеЦены Цикл
		Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.НайденыОбязательныеПараметры Тогда
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Ошибки = УстановкаЦенВызовСервера.ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(
		ВидыЦен,
		Форма.АдресХранилищаНастройкиКомпоновкиДанных,
		Форма.АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
		
	Для Каждого СтруктураОшибки Из Ошибки Цикл
		СтрокаВидЦены = УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(Форма.ВыбранныеЦены, СтруктураОшибки.ВидЦены);
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтруктураОшибки.Описание,
				Форма.Объект.Ссылка,
				"ВыбранныеЦены[" + Форма.ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтруктураОшибки.Описание,
				,
				"ВыбранныеЦены[" + Форма.ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

// Выгружает дерево цен в Excel
//
// Параметры:
//  Форма - Форма, в которой необходимо рассчитать цены
//  ПараметрыПечати - Структура, параметры печати, используемые при формировании печатной формы
//
// Возвращаемое значение:
//  Файл, результат выгрузки
//
Процедура ВыгрузитьВExcel(Форма, ПараметрыПечати, ПараметрыВывода) Экспорт
 
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
		COMОбъект = 0;
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось выгрузить цены в Excel.
                                       |Убедитесь, что на компьютере установлена программа Microsoft Excel.
                                       |Подробности:'
                                       |;uk='Не вдалося вивантажити ціни в Excel.
                                       |Переконайтеся, що на комп''ютері встановлена програма Microsoft Excel.
                                       |Подробиці:'") + " "
		                  + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ВыводитьКоды = ?(ЗначениеЗаполнено(Форма.ИмяДополнительнойКолонки), Истина, Ложь);
	
	МассивДокументов = Новый Массив;
	Если Форма.КодФормы = "Прайс-лист" Тогда
		Для Каждого СтрокаТЧ Из Форма.СохраненныеДокументы Цикл
			МассивДокументов.Добавить(СтрокаТЧ.Ссылка);
		КонецЦикла;
	Иначе
		МассивДокументов.Добавить(Форма.Объект.Ссылка);
	КонецЕсли;
	
	МассивИнформации = УстановкаЦенВызовСервера.ВыгрузитьВExcel(
		МассивДокументов,
		Форма.УникальныйИдентификатор,
		ПараметрыПечати,
		ПараметрыВывода);
		
	Если МассивИнформации = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Не удалось выгрузить цены в Excel.';uk='Не вдалося вивантажити ціни в Excel.'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	ДополнительныеПараметры = 
		Новый Структура("Форма, ПараметрыПечати, ВыводитьКоды", Форма, ПараметрыПечати, ВыводитьКоды);
		
	Для Каждого Информация Из МассивИнформации Цикл
	
		ДополнительныеПараметры.Вставить("Информация", Информация);
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыгрузитьВExcelПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПрисоединенныеФайлыКлиент.ПолучитьПрисоединенныйФайл(
			Оповещение,
			Информация.Файл,
			Форма.УникальныйИдентификатор,
			Новый Структура("ДанныеФайла, ДляРедактирования", Информация.ДанныеФайла, Истина));
		
	КонецЦикла;
		
КонецПроцедуры

// Загружает данные из Excel в дерево цен формы
//
// Параметры:
//  Форма - Форма, в которую необходимо загрузить данные из Excel
//  ПрисоединенныйФайл - Ссылка на присоединенный файл Excel
//
Процедура ЗагрузитьИзExcel(Форма, ПрисоединенныйФайл) Экспорт
	
	ДанныеФайла = ПрисоединенныеФайлыКлиент.ПолучитьДанныеФайла(
		ПрисоединенныйФайл,
		Форма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = 
		Новый Структура("Форма, ПрисоединенныйФайл", Форма, ПрисоединенныйФайл);
	
	Если Не ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗагрузитьИзExcelПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПрисоединенныеФайлыКлиент.ПолучитьПрисоединенныйФайл(
			Оповещение,
			ПрисоединенныйФайл,
			Форма.УникальныйИдентификатор,
			Новый Структура("ДанныеФайла, ДляРедактирования", ДанныеФайла, Ложь));
		
	Иначе
		
		// Не надо получать файл на диск чтобы не затереть несохраненные изменения
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ИмяВременногоФайла         = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		ЗагрузитьИзExcelПродолжение(
			Новый Структура("ОписаниеОшибки, ПолноеИмяФайла", "", ИмяВременногоФайла),
			ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#Если Не ВебКлиент Тогда

// Выгружает дерево цен в Excel
//
// Параметры:
//  Форма - Форма, в которой необходимо рассчитать цены
//  ПараметрыПечати - Структура, параметры печати, используемые при формировании печатной формы
//
// Возвращаемое значение:
//  Файл, результат выгрузки
//
Процедура ВыгрузитьВExcelБезСсылки(Форма, ПараметрыПечати) Экспорт
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось выгрузить цены в Excel.
                                       |Убедитесь, что на компьютере установлена программа Microsoft Excel.
                                       |Подробности:'
                                       |;uk='Не вдалося вивантажити ціни в Excel.
                                       |Переконайтеся, що на комп''ютері встановлена програма Microsoft Excel.
                                       |Подробиці:'") + " "
		                  + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	АдресФайлаВоВременномХранилище = УстановкаЦенВызовСервера.ВыгрузитьВExcelБезСсылки(
		ПредопределенноеЗначение("Документ.УстановкаЦенНоменклатуры.ПустаяСсылка"),
		Форма.УникальныйИдентификатор,
		ПараметрыПечати,
		Неопределено);
 		
		
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(,АдресФайлаВоВременномХранилище));
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Расширение = "xls";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыПечати", ПараметрыПечати);
	ДополнительныеПараметры.Вставить("COMОбъект", COMОбъект);
	НачатьПолучениеФайлов(
		Новый ОписаниеОповещения("ВыгрузитьВExcelБезСсылкиНачатьПолучениеФайловЗавершение", УстановкаЦенКлиент, ДополнительныеПараметры),
		ПолучаемыеФайлы,
		ДиалогВыбораФайла,
		Истина);
	
КонецПроцедуры

Процедура ВыгрузитьВExcelБезСсылкиНачатьПолучениеФайловЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма           = ДополнительныеПараметры.Форма;
	ПараметрыПечати = ДополнительныеПараметры.ПараметрыПечати;
	COMОбъект       = ДополнительныеПараметры.COMОбъект;
	
	ВыводитьКоды = ?(ЗначениеЗаполнено(Форма.ИмяДополнительнойКолонки), Истина, Ложь);
	
	Попытка
		
		НомерКолонки = 5 + ?(ВыводитьКоды,1,0);
		НомерСтроки  = 1;
		
		Workbook = COMОбъект.Workbooks.Open(ПолученныеФайлы[0].Имя);
		Sheet = Workbook.Worksheets(1);
		
		// Установка автофильтра на колонки цен
		Sheet.Range(Sheet.Cells(2, 1), Sheet.Cells(2, 256)).AutoFilter();
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик
		Sheet.Columns(2 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		Sheet.Columns(3 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		
		// Создание служебной таблицы для обратной загрузки
		SettingsSheet = Workbook.Worksheets.Add();
		SettingsSheet.Cells(НомерСтроки, 1).Value = НСтр("ru='Уникальный идентификатор';uk='Унікальний ідентифікатор'");
		SettingsSheet.Cells(НомерСтроки, 2).Value = НСтр("ru='Вид цены';uk='Вид ціни'");
		SettingsSheet.Cells(НомерСтроки, 3).Value = НСтр("ru='Номер колонки ""Старая цена""';uk='Номер колонки ""Стара ціна""'");
		SettingsSheet.Cells(НомерСтроки, 4).Value = НСтр("ru='Номер колонки ""Процент изменения""';uk='Номер колонки ""Відсоток зміни""'");
		SettingsSheet.Cells(НомерСтроки, 5).Value = НСтр("ru='Номер колонки ""Цена""';uk='Номер колонки ""Ціна""'");
		SettingsSheet.Cells(НомерСтроки, 6).Value = НСтр("ru='Номер колонки ""Единица измерения""';uk='Номер колонки ""Одиниця вимірювання""'");
		SettingsSheet.Cells(НомерСтроки, 7).Value = НСтр("ru='Номер колонки ""Уникальный идентификатор""';uk='Номер колонки ""Унікальний ідентифікатор""'");
		
		НомерСтроки = НомерСтроки + 1;
		ДеревоНастроек = ПолучитьИзВременногоХранилища(ПараметрыПечати.ДеревоНастроекДляКлиента);
		Для Каждого ВидЦены Из ДеревоНастроек.Строки Цикл
			Если ВидЦены.ВыводитьНаПечать Тогда
				
				ВыводитьСтаруюЦену = Ложь;
				ВыводитьПроцентИзменения = Ложь;
				Для Каждого Колонка Из ВидЦены.Строки Цикл
					Если Колонка.Параметр = "СтараяЦена" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСтаруюЦену = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "ПроцентИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьПроцентИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				SettingsSheet.Cells(НомерСтроки, 1).Value = Строка(ВидЦены.Параметр.УникальныйИдентификатор());
				SettingsSheet.Cells(НомерСтроки, 2).Value = Строка(ВидЦены.Параметр); // Наименование вида цены
				
				Если ВыводитьСтаруюЦену Тогда
					SettingsSheet.Cells(НомерСтроки, 3).Value = НомерКолонки; // Старая цена
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 3).Value = 0;
				КонецЕсли;
				
				Если ВыводитьПроцентИзменения Тогда
					SettingsSheet.Cells(НомерСтроки, 4).Value = НомерКолонки; // Процент изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 4).Value = 0;
				КонецЕсли;
				
				SettingsSheet.Cells(НомерСтроки, 5).Value = НомерКолонки; // Цена
				НомерКолонки = НомерКолонки + 1;
				
				SettingsSheet.Cells(НомерСтроки, 6).Value = НомерКолонки; // Единица измерения
				НомерКолонки = НомерКолонки + 1;
				
				Sheet.Columns(НомерКолонки).Hidden = Истина;
				SettingsSheet.Cells(НомерСтроки, 7).Value = НомерКолонки; // Уникальный идентификатор упаковки
				НомерКолонки = НомерКолонки + 1;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		ВидыЦен = Новый Массив;
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("НомерКолонкиСтараяЦена, НомерКолонкиПроцентИзменения, НомерКолонкиЦена");
			НоваяСтрока.НомерКолонкиСтараяЦена       = SettingsSheet.Cells(НомерСтроки, 3).Value;
			НоваяСтрока.НомерКолонкиПроцентИзменения = SettingsSheet.Cells(НомерСтроки, 4).Value;
			НоваяСтрока.НомерКолонкиЦена             = SettingsSheet.Cells(НомерСтроки, 5).Value;
			ВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ШаблонФормулы = "=IF(RC[СтараяЦен]<>0,ROUND((RC[НомерКолонкиЦена]-RC[СтараяЦен])/RC[СтараяЦен]*100,2),0)";
		
		Если ВидыЦен.Количество() > 0 Тогда
			
			НомерСтроки = 3;
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 3).Value) Цикл
				
				Для Каждого СтрокаТЧ Из ВидыЦен Цикл
					
					Если СтрокаТЧ.НомерКолонкиСтараяЦена <> 0
						И СтрокаТЧ.НомерКолонкиПроцентИзменения <> 0
						И СтрокаТЧ.НомерКолонкиЦена <> 0 Тогда
						
						Формула = СтрЗаменить(ШаблонФормулы, "[СтараяЦен]", СтрокаТЧ.НомерКолонкиСтараяЦена);
						Формула = СтрЗаменить(Формула, "[НомерКолонкиЦена]", СтрокаТЧ.НомерКолонкиЦена);
						
						Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиПроцентИзменения).Formula = Формула;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Установка защиты на ячейки
		Sheet.Protection.AllowEditRanges.Add(
			НСтр("ru='Цены номенклатуры';uk='Ціни номенклатури'"),                                           // Title
			Sheet.Range(Sheet.Cells(3, 1), Sheet.Cells(НомерСтроки-1, НомерКолонки-1)), // Range
			                                                                            // Password
		);
		
		Sheet.Protect(,//Password
				Ложь,  //DrawingObjects
				Истина,//Contents
				Истина,//Scenarios
				Ложь,  //UserInterfaceOnly
				Истина,//AllowFormattingCells
				Истина,//AllowFormattingColumns
				Истина,//AllowFormattingRows
				Ложь,  //AllowInsertingColumns
				Ложь,  //AllowInsertingRows
				Истина,//AllowInsertingHyperlinks
				Ложь,  //AllowDeletingColumns
				Ложь,  //AllowDeletingRows
				Истина,//AllowSorting
				Истина,//AllowFiltering
				Истина); //AllowUsingPivotTables
		
		SettingsSheet.Visible = Ложь;
		Workbook.Save();
		
		COMОбъект.Application.Visible = Истина;
		Workbook.Activate();
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru='Не удалось записать данные в файл. Подробности:';uk='Не вдалося записати дані у файл. Подробиці:'") + " "
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

// Загружает данные из Excel в дерево цен формы
//
// Параметры:
//  Форма - Форма, в которую необходимо загрузить данные из Excel
//  ПрисоединенныйФайл - Ссылка на присоединенный файл Excel
//
Процедура ЗагрузитьИзExcelБезСсылки(Форма) Экспорт
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось загрузить цены из файла Excel.
                                       |Убедитесь, что на сервере установлена программа Microsoft Excel.
                                       |Подробности:'
                                       |;uk='Не вдалося завантажити ціни з файлу Excel.
                                       |Переконайтеся, що на сервері встановлена програма Microsoft Excel.
                                       |Подробиці:'")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("COMОбъект", COMОбъект);
	
	ИмяВременногоФайла = Неопределено;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("ЗагрузитьИзExcelБезСсылкиДиалогВыбораФайлаЗавершение",
			УстановкаЦенКлиент,
			ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ЗагрузитьИзExcelБезСсылкиДиалогВыбораФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма           = ДополнительныеПараметры.Форма;
	COMОбъект       = ДополнительныеПараметры.COMОбъект;
	
	Попытка
		Workbook      = COMОбъект.Workbooks.Open(ВыбранныеФайлы[0],,Истина,,,,,,,,Ложь);
		SettingsSheet = Workbook.Worksheets(1);
		Sheet         = Workbook.Worksheets(2);
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru='Файл не может быть загружен.
                       |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
                       |Подробности: %1'
                       |;uk='Файл не може бути завантажений.
                       |Завантажуватися можуть тільки файли, вивантажені за допомогою команди ""Excel -> Вивантажити..."".
                       |Подробиці: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	// Массивы структур
	МассивСтруктурВидыЦен = Новый Массив;
	МассивСтруктурТовары  = Новый Массив;
	
	ЕстьДополнительнаяКолонка = Ложь;
	
	// Загрузка данных
	Попытка
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("ИдентификаторВидЦены, НомерКолонкиЦена, НомерКолонкиУпаковка");
			НоваяСтрока.ИдентификаторВидЦены = SettingsSheet.Cells(НомерСтроки, 1).Value;
			НоваяСтрока.НомерКолонкиЦена     = SettingsSheet.Cells(НомерСтроки, 5).Value;
			НоваяСтрока.НомерКолонкиУпаковка = SettingsSheet.Cells(НомерСтроки, 7).Value;
			МассивСтруктурВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если МассивСтруктурВидыЦен.Количество() > 0 Тогда
			
			// Загрузка цен номенклатуры
			НомерСтроки = 3;
			ЕстьДополнительнаяКолонка = (СтрДлина(Sheet.Cells(НомерСтроки, 2).Value) <> 36);
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value) Цикл
				
				Для Каждого СтрокаТЧ Из МассивСтруктурВидыЦен Цикл
					
					НоваяСтрока = Новый Структура(
						"ИдентификаторНоменклатура,
						|ИдентификаторХарактеристика,
						|ИдентификаторУпаковка,
						|ИдентификаторВидЦены,
						|Цена");
					НоваяСтрока.ИдентификаторНоменклатура   = Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					НоваяСтрока.ИдентификаторХарактеристика = Sheet.Cells(НомерСтроки, 3 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					НоваяСтрока.ИдентификаторУпаковка       = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиУпаковка).Value;
					НоваяСтрока.ИдентификаторВидЦены        = СтрокаТЧ.ИдентификаторВидЦены;
					НоваяСтрока.Цена                        = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиЦена).Value;
					МассивСтруктурТовары.Добавить(НоваяСтрока);
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Workbook.Close(0);
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru='Файл не может быть загружен.
                       |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
                       |Подробности: %1'
                       |;uk='Файл не може бути завантажений.
                       |Завантажуватися можуть тільки файли, вивантажені за допомогою команди ""Excel -> Вивантажити..."".
                       |Подробиці: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	COMОбъект.Quit();
	COMОбъект = 0;
	
	Данные = Новый Структура(
		"ФормаВладелец, ВидыЦен, Товары", 
		Форма.УникальныйИдентификатор, МассивСтруктурВидыЦен, МассивСтруктурТовары);
	
	Оповестить("ЗагрузитьИзExcel", Данные);
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьИзExcelПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось загрузить цены из файла Excel.
                                       |Убедитесь, что на сервере установлена программа Microsoft Excel.
                                       |Подробности:'
                                       |;uk='Не вдалося завантажити ціни з файлу Excel.
                                       |Переконайтеся, що на сервері встановлена програма Microsoft Excel.
                                       |Подробиці:'")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ИмяВременногоФайла 		 = Результат.ПолноеИмяФайла;
	Форма 		 			 = ДополнительныеПараметры.Форма;
	ПрисоединенныйФайл 		 = ДополнительныеПараметры.ПрисоединенныйФайл;
	
	Попытка
		Workbook      = COMОбъект.Workbooks.Open(ИмяВременногоФайла,,Истина,,,,,,,,Ложь);
		SettingsSheet = Workbook.Worksheets(1);
		Sheet         = Workbook.Worksheets(2);
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru='Файл не может быть загружен.
                       |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
                       |Подробности: %1'
                       |;uk='Файл не може бути завантажений.
                       |Завантажуватися можуть тільки файли, вивантажені за допомогою команди ""Excel -> Вивантажити..."".
                       |Подробиці: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	// Массивы структур
	МассивСтруктурВидыЦен = Новый Массив;
	МассивСтруктурТовары  = Новый Массив;
	
	ЕстьДополнительнаяКолонка = Ложь;
	
	// Загрузка данных
	Попытка
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("ИдентификаторВидЦены, НомерКолонкиЦена, НомерКолонкиУпаковка");
			НоваяСтрока.ИдентификаторВидЦены = SettingsSheet.Cells(НомерСтроки, 1).Value;
			НоваяСтрока.НомерКолонкиЦена     = SettingsSheet.Cells(НомерСтроки, 5).Value;
			НоваяСтрока.НомерКолонкиУпаковка = SettingsSheet.Cells(НомерСтроки, 7).Value;
			МассивСтруктурВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если МассивСтруктурВидыЦен.Количество() > 0 Тогда
			
			// Загрузка цен номенклатуры
			НомерСтроки = 3;
			ЕстьДополнительнаяКолонка = (СтрДлина(Sheet.Cells(НомерСтроки, 2).Value) <> 36);
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value) Цикл
				
				Для Каждого СтрокаТЧ Из МассивСтруктурВидыЦен Цикл
					
					НоваяСтрока = Новый Структура(
						"ИдентификаторНоменклатура,
						|ИдентификаторХарактеристика,
						|ИдентификаторУпаковка,
						|ИдентификаторВидЦены,
						|Цена");
					НоваяСтрока.ИдентификаторНоменклатура   = Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					НоваяСтрока.ИдентификаторХарактеристика = Sheet.Cells(НомерСтроки, 3 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					НоваяСтрока.ИдентификаторУпаковка       = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиУпаковка).Value;
					НоваяСтрока.ИдентификаторВидЦены        = СтрокаТЧ.ИдентификаторВидЦены;
					НоваяСтрока.Цена                        = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиЦена).Value;
					МассивСтруктурТовары.Добавить(НоваяСтрока);
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Workbook.Close(0);
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru='Файл не может быть загружен.
                       |Загружаться могут только файлы, выгруженные с помощью команды ""Excel -> Выгрузить..."".
                       |Подробности: %1'
                       |;uk='Файл не може бути завантажений.
                       |Завантажуватися можуть тільки файли, вивантажені за допомогою команди ""Excel -> Вивантажити..."".
                       |Подробиці: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	COMОбъект.Quit();
	COMОбъект = 0;
	
	Данные = Новый Структура(
		"ФормаВладелец, ВидыЦен, Товары", 
		Форма.УникальныйИдентификатор, МассивСтруктурВидыЦен, МассивСтруктурТовары);
	
	Оповестить("ЗагрузитьИзExcel", Данные);
	
КонецПроцедуры

Процедура ВыгрузитьВExcelПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось выгрузить цены в Excel.
                                       |Убедитесь, что на компьютере установлена программа Microsoft Excel.
                                       |Подробности:'
                                       |;uk='Не вдалося вивантажити ціни в Excel.
                                       |Переконайтеся, що на комп''ютері встановлена програма Microsoft Excel.
                                       |Подробиці:'") + " "
		                  + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ИмяВременногоФайла = Результат.ПолноеИмяФайла;
	Форма 			   = ДополнительныеПараметры.Форма;
	ПараметрыПечати    = ДополнительныеПараметры.ПараметрыПечати;
	ВыводитьКоды 	   = ДополнительныеПараметры.ВыводитьКоды;
	Информация 		   = ДополнительныеПараметры.Информация;
	
	Попытка
		
		НомерКолонки = 5 + ?(ВыводитьКоды,1,0);
		НомерСтроки  = 1;
		
		Workbook = COMОбъект.Workbooks.Open(ИмяВременногоФайла);
		Sheet = Workbook.Worksheets(1);
		
		// Установка автофильтра на колонки цен
		Sheet.Range(Sheet.Cells(2, 1), Sheet.Cells(2, 256)).AutoFilter();
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик
		Sheet.Columns(2 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		Sheet.Columns(3 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		
		// Создание служебной таблицы для обратной загрузки
		SettingsSheet = Workbook.Worksheets.Add();
		SettingsSheet.Cells(НомерСтроки, 1).Value = НСтр("ru='Уникальный идентификатор';uk='Унікальний ідентифікатор'");
		SettingsSheet.Cells(НомерСтроки, 2).Value = НСтр("ru='Вид цены';uk='Вид ціни'");
		SettingsSheet.Cells(НомерСтроки, 3).Value = НСтр("ru='Номер колонки ""Старая цена""';uk='Номер колонки ""Стара ціна""'");
		SettingsSheet.Cells(НомерСтроки, 4).Value = НСтр("ru='Номер колонки ""Процент изменения""';uk='Номер колонки ""Відсоток зміни""'");
		SettingsSheet.Cells(НомерСтроки, 5).Value = НСтр("ru='Номер колонки ""Цена""';uk='Номер колонки ""Ціна""'");
		SettingsSheet.Cells(НомерСтроки, 6).Value = НСтр("ru='Номер колонки ""Единица измерения""';uk='Номер колонки ""Одиниця вимірювання""'");
		SettingsSheet.Cells(НомерСтроки, 7).Value = НСтр("ru='Номер колонки ""Уникальный идентификатор""';uk='Номер колонки ""Унікальний ідентифікатор""'");
		
		НомерСтроки = НомерСтроки + 1;
		ДеревоНастроек = ПолучитьИзВременногоХранилища(ПараметрыПечати.ДеревоНастроекДляКлиента);
		Для Каждого ВидЦены Из ДеревоНастроек.Строки Цикл
			Если ВидЦены.ВыводитьНаПечать Тогда
				
				ВыводитьСтаруюЦену = Ложь;
				ВыводитьПроцентИзменения = Ложь;
				Для Каждого Колонка Из ВидЦены.Строки Цикл
					Если Колонка.Параметр = "СтараяЦена" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСтаруюЦену = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "ПроцентИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьПроцентИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				SettingsSheet.Cells(НомерСтроки, 1).Value = Строка(ВидЦены.Параметр.УникальныйИдентификатор());
				SettingsSheet.Cells(НомерСтроки, 2).Value = Строка(ВидЦены.Параметр); // Наименование вида цены
				
				Если ВыводитьСтаруюЦену Тогда
					SettingsSheet.Cells(НомерСтроки, 3).Value = НомерКолонки; // Старая цена
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 3).Value = 0;
				КонецЕсли;
				
				Если ВыводитьПроцентИзменения Тогда
					SettingsSheet.Cells(НомерСтроки, 4).Value = НомерКолонки; // Процент изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 4).Value = 0;
				КонецЕсли;
				
				SettingsSheet.Cells(НомерСтроки, 5).Value = НомерКолонки; // Цена
				НомерКолонки = НомерКолонки + 1;
				
				SettingsSheet.Cells(НомерСтроки, 6).Value = НомерКолонки; // Единица измерения
				НомерКолонки = НомерКолонки + 1;
				
				Sheet.Columns(НомерКолонки).Hidden = Истина;
				SettingsSheet.Cells(НомерСтроки, 7).Value = НомерКолонки; // Уникальный идентификатор упаковки
				НомерКолонки = НомерКолонки + 1;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		ВидыЦен = Новый Массив;
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("НомерКолонкиСтараяЦена, НомерКолонкиПроцентИзменения, НомерКолонкиЦена");
			НоваяСтрока.НомерКолонкиСтараяЦена       = SettingsSheet.Cells(НомерСтроки, 3).Value;
			НоваяСтрока.НомерКолонкиПроцентИзменения = SettingsSheet.Cells(НомерСтроки, 4).Value;
			НоваяСтрока.НомерКолонкиЦена             = SettingsSheet.Cells(НомерСтроки, 5).Value;
			ВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ШаблонФормулы = "=IF(RC[СтараяЦен]<>0,ROUND((RC[НомерКолонкиЦена]-RC[СтараяЦен])/RC[СтараяЦен]*100,2),0)";
		
		Если ВидыЦен.Количество() > 0 Тогда
			
			НомерСтроки = 3;
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 3).Value) Цикл
				
				Для Каждого СтрокаТЧ Из ВидыЦен Цикл
					
					Если СтрокаТЧ.НомерКолонкиСтараяЦена <> 0
						И СтрокаТЧ.НомерКолонкиПроцентИзменения <> 0
						И СтрокаТЧ.НомерКолонкиЦена <> 0 Тогда
						
						Формула = СтрЗаменить(ШаблонФормулы, "[СтараяЦен]", СтрокаТЧ.НомерКолонкиСтараяЦена);
						Формула = СтрЗаменить(Формула, "[НомерКолонкиЦена]", СтрокаТЧ.НомерКолонкиЦена);
						
						Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиПроцентИзменения).Formula = Формула;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Установка защиты на ячейки
		Sheet.Protection.AllowEditRanges.Add(
			НСтр("ru='Цены номенклатуры';uk='Ціни номенклатури'"),                                           // Title
			Sheet.Range(Sheet.Cells(3, 1), Sheet.Cells(НомерСтроки-1, НомерКолонки-1)), // Range
			                                                                            // Password
		);
		
		Sheet.Protect(,//Password
				Ложь,  //DrawingObjects
				Истина,//Contents
				Истина,//Scenarios
				Ложь,  //UserInterfaceOnly
				Истина,//AllowFormattingCells
				Истина,//AllowFormattingColumns
				Истина,//AllowFormattingRows
				Ложь,  //AllowInsertingColumns
				Ложь,  //AllowInsertingRows
				Истина,//AllowInsertingHyperlinks
				Ложь,  //AllowDeletingColumns
				Ложь,  //AllowDeletingRows
				Истина,//AllowSorting
				Истина,//AllowFiltering
				Истина); //AllowUsingPivotTables
		
		SettingsSheet.Visible = Ложь;
		Workbook.Save();
		Workbook.Close(0);
		
		COMОбъект.Quit();
		COMОбъект = 0;
		
		Оповещение = Новый ОписаниеОповещения(
			"ВыгрузитьВExcelОкончание",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПрисоединенныеФайлыКлиент.ПоместитьПрисоединенныйФайл(
			Оповещение,
			Информация.Файл,
			Форма.УникальныйИдентификатор);
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru='Не удалось записать данные в файл. Подробности:';uk='Не вдалося записати дані у файл. Подробиці:'") + " "
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыгрузитьВExcelОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Информация = ДополнительныеПараметры.Информация;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Информация.Файл);
	
КонецПроцедуры

#КонецОбласти

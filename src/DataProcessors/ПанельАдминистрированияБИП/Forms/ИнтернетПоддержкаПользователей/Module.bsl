&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);

	НастроитьОтображениеФормы();
	ЗаполнитьДанныеФормы();
	
	// Состояние подключения Интернет-поддержки
	Если Элементы.ГруппаПодключениеИПП.Видимость Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено И Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ДанныеАутентификации.Пароль = "";
		КонецЕсли;
		ОтобразитьСостояниеПодключенияИПП();
	КонецЕсли;
	// Конец Состояние подключения Интернет-поддержки
	
    ЭтоАдминистраторСистемы   = Пользователи.ЭтоПолноправныйПользователь(, Истина);
	РазделениеВключено        = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначенияПовтИсп.ЭтоАвтономноеРабочееМесто();

	Если НЕ Пользователи.РолиДоступны("НСИСНастройка") Тогда
		Элементы.НСИСГруппаНастройки.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияРасписаниеЗапускЗагрузкиНСИС.Видимость = Не РазделениеВключено
			И Не ЭтоАвтономноеРабочееМесто
			И ЭтоАдминистраторСистемы;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияЛогинИППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки("/software?needAccessToken=true"),
		НСтр("ru='Личный кабинет пользователя';uk='Особистий кабінет користувача'"),
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль);
	
КонецПроцедуры


// ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы

&НаКлиенте
Процедура АвтоматическаяПроверкаОбновленийПриИзменении(Элемент)

	Элементы.ДекорацияРасписание.Доступность = (АвтоматическаяПроверкаОбновлений = 2);

	НастройкиОбновления = ПолучениеОбновленийПрограммыКлиент.ГлобальныеНастройкиОбновления();
	НастройкиОбновления.СпособАвтоматическойПроверки = АвтоматическаяПроверкаОбновлений;
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьНастройкиОбновления(НастройкиОбновления);

	Если ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения("ИДЗадания") = Неопределено Тогда
		// Если выполняется задание проверки, тогда после завершения очередной проверки
		// настройки будут применены автоматически
		Если АвтоматическаяПроверкаОбновлений <> 2 Тогда
			ПолучениеОбновленийПрограммыКлиент.ОтключитьПроверкуПоРасписанию();
		Иначе
			ПолучениеОбновленийПрограммыКлиент.ПодключитьПроверкуПоРасписанию();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеНажатие(Элемент)

	НастройкиОбновления = ПолучениеОбновленийПрограммыКлиент.ГлобальныеНастройкиОбновления();
	РасписаниеПроверки = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(НастройкиОбновления.Расписание);
	ДиалогРасписание = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеПроверки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииРасписания", ЭтотОбъект);
	ДиалогРасписание.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура КаталогДистрибутиваПлатформыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	#Если Не ВебКлиент Тогда
	ЗапуститьПриложение(КаталогДистрибутиваПлатформы);
	#КонецЕсли

КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы


// СтандартныеПодсистемы.ОбновлениеВерсииИБ
&НаКлиенте
Процедура ДетализироватьОбновлениеИБВЖурналеРегистрацииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

// ИнтернетПоддержкаПользователей.Новости
&НаКлиенте
Процедура РазрешенаРаботаСНовостямиПриИзменении(Элемент)

	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина); // Обновить интерфейс
	// ГруппаНастройкиНовостей исчезнет / появится при изменении функциональной опции
	//Элементы.ГруппаНастройкиНовостей.Доступность = НаборКонстант.РазрешенаРаботаСНовостями;

КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.Новости

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВойтиИлиВыйтиИПП(Команда)
	
	Если ДанныеАутентификации = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеЗавершение", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			ОписаниеОповещения,
			ЭтотОбъект);
		
	Иначе
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриОтветеНаВопросОВыходеИзИнтернетПоддержки", ЭтотОбъект),
			НСтр("ru='Логин и пароль для подключения к сервисам Интернет-поддержки пользователей будут удалены из программы.
                |Отключить Интернет-поддержку?'
                |;uk='Логін і пароль для підключення до сервісів Інтернет-підтримки користувачів будуть вилучені з програми.
                |Відключити Інтернет-підтримку?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru='Выход из Интернет-поддержки пользователей';uk='Вихід з Інтернет-підтримки користувачів'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеВТехПоддержку(Команда)
	
	Если ДанныеАутентификации = Неопределено Тогда
		Логин  = Неопределено;
		Пароль = Неопределено;
	Иначе
		Логин  = ДанныеАутентификации.Логин;
		Пароль = ДанныеАутентификации.Пароль;
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейКлиент.СлужебнаяОтправитьСообщениеВТехПоддержку(
		НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"),
		НСтр("ru='<Заполните текст сообщения>';uk='<Заповніть текст повідомлення>'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиСоединенияССервером(Команда)

	ПараметрыОткрытия = Новый Структура;
	ОткрытьФорму(
		"ОбщаяФорма.НастройкиСоединенияССерверомИнтернетПоддержки",
		ПараметрыОткрытия,
		ЭтотОбъект,
		"",
		ВариантОткрытияОкна.ОтдельноеОкно,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки
&НаКлиенте
Процедура КомандаМониторИнтернетПоддержки(Команда)

	МониторИнтернетПоддержкиКлиент.ОткрытьМониторИнтернетПоддержки();

КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки

&НаКлиенте
Процедура КомандаПереходНаНовуюВерсиюПлатформы(Команда)

	ОткрытьФорму("Обработка.ПереходНаНовуюВерсиюПлатформы1СПредприятие.Форма.Форма",
		Новый Структура("ОбновитьИнформацию", Истина),
		ЭтотОбъект);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.Новости
&НаКлиенте
Процедура КомандаУправлениеНовостями(Команда)

	ПараметрыОткрытия = Новый Структура;
	ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма",
		ПараметрыОткрытия,
		ЭтотОбъект,
		"",
		ВариантОткрытияОкна.ОтдельноеОкно,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.Новости

// СтандартныеПодсистемы.ОбновлениеКонфигурации
&НаКлиенте
Процедура НастройкаОбновленияПрограммы(Команда)

	ОткрытьФорму("Обработка.ПоискИУстановкаОбновлений.Форма.НастройкаРасписания");

КонецПроцедуры
// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации

// СтандартныеПодсистемы.ОбновлениеВерсииИБ
&НаКлиенте
Процедура ОтложеннаяОбработкаДанных(Команда)
	ПараметрыФормы = Новый Структура("ОткрытиеИзПанелиАдминистрирования", Истина);
	ОткрытьФорму("Обработка.РезультатыОбновленияПрограммы.Форма.ИндикацияХодаОтложенногоОбновленияИБ", ПараметрыФормы);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьОтображениеФормы()
	
	Элементы.ГруппаПодключениеИПП.Видимость = ИнтернетПоддержкаПользователейВызовСервера.ДоступноПодключениеИнтернетПоддержки();
	Элементы.ГруппаОбращениеВТехПоддержку.Видимость = Не ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Элементы.ГруппаНастройкиСоединенияССервером.Видимость = ИнтернетПоддержкаПользователейВызовСервера.ДоступнаНастройкаПараметровПодключенияКИнтернетПоддержке();
	
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	Элементы.ГруппаОбновлениеИОписаниеИзмененийПерваяСтрока.Видимость      = РежимРаботы.Локальный И РежимРаботы.ЭтоАдминистраторСистемы И Не РежимРаботы.ЭтоLinuxКлиент;
	Элементы.ГруппаДетализироватьОбновлениеИБВЖурналеРегистрации.Видимость = РежимРаботы.ЭтоАдминистраторСистемы;
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	
	
	// ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		ДоступноИспользованиеПолученияОбновленийПлатформы =
			ПолучениеОбновленийПрограммы.ДоступноИспользованиеПолученияОбновленийПлатформы();
		Элементы.ГруппаОбновлениеПлатформы.Видимость = ДоступноИспользованиеПолученияОбновленийПлатформы;
		Если ДоступноИспользованиеПолученияОбновленийПлатформы Тогда
			Элементы.ГруппаОбновлениеПлатформы_Настройки.Видимость =
				НЕ ПолучениеОбновленийПрограммы.ПоказыватьОповещенияВТекущихДелах();
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаОбновлениеПлатформы.Видимость = Ложь;
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы
	
	// ИнтернетПоддержкаПользователей.Новости
	Элементы.ГруппаУправлениеНовостями.Видимость = Ложь;
	// Конец ИнтернетПоддержкаПользователей.Новости
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы()
	
	// ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы
	Если Элементы.ГруппаОбновлениеПлатформы.Видимость Тогда

		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		НастройкиОбновления = ОбщийМодуль.НастройкиАвтоматическогоОбновления();
		АвтоматическаяПроверкаОбновлений = НастройкиОбновления.СпособАвтоматическойПроверки;
		Элементы.ДекорацияРасписание.Доступность = (АвтоматическаяПроверкаОбновлений = 2);
		Элементы.ДекорацияРасписание.Заголовок = ПредставлениеРасписания(НастройкиОбновления.Расписание);

		КаталогДистрибутиваПлатформы = ПолучениеОбновленийПрограммы.КаталогСохраненияПоследнегоПолученногоДистрибутива();
		Элементы.КаталогДистрибутиваПлатформы.Видимость = НЕ ПустаяСтрока(КаталогДистрибутиваПлатформы);

	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы

КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеПодключенияИПП()
	
	Если ДанныеАутентификации = Неопределено Тогда
		Элементы.ДекорацияЛогинИПП.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			НСтр("ru='Подключение к Интернет-поддержке не выполнено.';uk='Підключення до Інтернет-підтримки не виконано.'"));
		Элементы.ВойтиИлиВыйтиИПП.Заголовок = НСтр("ru='Подключить';uk='Підключити'");
		Элементы.ВойтиИлиВыйтиИПП.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		ШаблонЗаголовка = ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьДомен(
			НСтр("ru='<body>Подключена Интернет-поддержка для пользователя <a href=""action:openUsersSite"">%1</body>';uk='<body>Підключена Інтернет-підтримка для користувача <a href=""action:openUsersSite"">%1</body>'"));
		Элементы.ДекорацияЛогинИПП.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка,
				ДанныеАутентификации.Логин));
		Элементы.ВойтиИлиВыйтиИПП.Заголовок = НСтр("ru='Отключить';uk='Відключити'");
		Элементы.ВойтиИлиВыйтиИПП.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеЗавершение(ВведенныеДанныеАутентификации, ДопПараметры) Экспорт
	
	Если ВведенныеДанныеАутентификации <> Неопределено Тогда
		ДанныеАутентификации = ВведенныеДанныеАутентификации;
		ОтобразитьСостояниеПодключенияИПП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОВыходеИзИнтернетПоддержки(КодВозврата, ДопПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ВыйтиИзИППСервер();
		ДанныеАутентификации = Неопределено;
		ОтобразитьСостояниеПодключенияИПП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыйтиИзИППСервер()
	
	// Проверка права записи данных
	Если Не ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП() Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для записи данных аутентификации Интернет-поддержки.';uk='Недостатньо прав для запису даних аутентифікації Інтернет-підтримки.'");
	КонецЕсли;
	
	// Запись данных
	УстановитьПривилегированныйРежим(Истина);
	ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, НеобходимоОбновлятьИнтерфейс = Истина)

	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);

	Если НеобходимоОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		#Если Не ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		#КонецЕсли
	КонецЕсли;

	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);

КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)

	Результат = Новый Структура;
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;

	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);

	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();

	Возврат Результат;
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)

	// Сохранение значений реквизитов, не связанных с константами напрямую.
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;

	// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
	// Используется для тех реквизитов формы, которые связаны с константами напрямую.

	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];

		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;

		СтандартныеПодсистемыКлиентСервер.ОповеститьОткрытыеФормы(Результат, "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")

	Если Не РежимРаботы.ЭтоАдминистраторСистемы Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()

	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;

КонецПроцедуры

// ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы
&НаКлиенте
Процедура ПриИзмененииРасписания(Расписание, ДопПараметры) Экспорт

	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если АвтоматическаяПроверкаОбновлений = 2
		И ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 300 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru='Интервал проверки не может быть задан чаще, чем один раз 5 минут.';uk='Інтервал перевірки не може бути заданий частіше, ніж один раз 5 хвилин.'"));
		Возврат;
	КонецЕсли;

	Элементы.ДекорацияРасписание.Заголовок = ПредставлениеРасписания(Расписание);

	НастройкиОбновления = ПолучениеОбновленийПрограммыКлиент.ГлобальныеНастройкиОбновления();
	НастройкиОбновления.Расписание = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание);
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьНастройкиОбновления(НастройкиОбновления);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРасписания(Расписание)

	Если Расписание = Неопределено Тогда
		Возврат НСтр("ru='Настроить расписание';uk='Настроїти розклад'");
	Иначе
		Если ТипЗнч(Расписание) = Тип("Структура") Тогда
			Возврат Строка(ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(Расписание));
		Иначе
			Возврат Строка(Расписание);
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Конец ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы

&НаСервере
Функция ПолучитьРегламентноеЗаданиеНСИС()
	РЗ = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.НСИСОбновлениеДанных);
	Возврат РЗ.УникальныйИдентификатор;
КонецФункции

&НаКлиенте
Процедура ДекорацияРасписаниеЗапускЗагрузкиНСИСНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ПолучитьРегламентноеЗаданиеНСИС());
	ПараметрыФормы.Вставить("Действие",      "Изменить");
		
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиНСИСНажатие(Элемент)
	ОткрытьФорму("Обработка.НСИСНастройка.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиПактумКонтрагентНажатие(Элемент)
	
	ОткрытьФорму("Обработка.Пактум_Настройка.Форма");
	
КонецПроцедуры

#КонецОбласти

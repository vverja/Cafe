#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	//Получить параметры периода
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;

	ДатаНачала = Дата(1,1,1);
	ДатаОкончания = Дата(1,1,1);
	
	УстановитьДату("ДатаНачала", ДатаНачала);
	УстановитьДату("ДатаОкончания", ДатаОкончания);

	//Получить список сегментов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СегментыПартнеров.Ссылка КАК Сегмент,
		|	СегментыПартнеров.СпособФормирования,
		|	СегментыПартнеров.Ответственный
		|ИЗ
		|	Справочник.СегментыПартнеров КАК СегментыПартнеров");

	//Сформировать таблицу результата
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("КоличествоПартнеров");
	ТаблицаРезультата.Колонки.Добавить("КоличествоНезавершенныхСделок");
	ТаблицаРезультата.Колонки.Добавить("КоличествоПроигранныхСделок");
	ТаблицаРезультата.Колонки.Добавить("КоличествоВыигранныхСделок");
	ТаблицаРезультата.Колонки.Добавить("ПотенциалНезавершенныхСделок");
	ТаблицаРезультата.Колонки.Добавить("ПотерянныйПотенциал");
	ТаблицаРезультата.Колонки.Добавить("СохраненныйПотенциал");
	ТаблицаРезультата.Колонки.Добавить("ОбъемПродаж");
	ТаблицаРезультата.Колонки.Добавить("УдельноеКоличествоНезавершенныхСделок");
	ТаблицаРезультата.Колонки.Добавить("УдельноеКоличествоПроигранныхСделок");
	ТаблицаРезультата.Колонки.Добавить("УдельноеКоличествоВыигранныхСделок");
	ТаблицаРезультата.Колонки.Добавить("УдельныйПотенциалНезавершенныхСделок");
	ТаблицаРезультата.Колонки.Добавить("УдельныйПотерянныйПотенциал");
	ТаблицаРезультата.Колонки.Добавить("УдельныйСохраненныйПотенциал");
	ТаблицаРезультата.Колонки.Добавить("УдельныйОбъемПродаж");
	
	//подготовить запрос статистики сделок и объемов продаж
	Запрос = Новый Запрос(
		ТекстЗапросаСтатистикиСделок(ДатаНачала,ДатаОкончания) +
		ТекстЗапросаОбъемаПродаж(ДатаНачала,ДатаОкончания));
	Если ДатаНачала    <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	КонецЕсли;
	Если ДатаОкончания <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	КонецЕсли;

	//Заполнить таблицу результата
	колСегментов = ТаблицаРезультата.Количество() - 1;
	Для счСегментов = 0 По колСегментов Цикл
		СтрокаСегмента = ТаблицаРезультата.Получить(счСегментов);

		//Получить список партнеров сегмента
		мПартнеры = СегментыСервер.МассивЭлементов(СтрокаСегмента.Сегмент);

		СтрокаСегмента.КоличествоПартнеров = мПартнеры.Количество();
		
		//Заполнить информацию по сделкам и объему продаж
		Если мПартнеры.Количество() > 0 Тогда
			
			Запрос.УстановитьПараметр("Партнер", мПартнеры);
			МассивРезультатов = Запрос.ВыполнитьПакет();
			
			//Получить информацию по сделкам сегмента
			ИнфСделки = МассивРезультатов[0].Выбрать();
			Если ИнфСделки.Следующий() Тогда
				СтрокаСегмента.КоличествоНезавершенныхСделок = ИнфСделки.КоличествоСделокВРаботе;
				СтрокаСегмента.КоличествоВыигранныхСделок    = ИнфСделки.КоличествоВыигранныхСделок;
				СтрокаСегмента.КоличествоПроигранныхСделок   = ИнфСделки.КоличествоПроигранныхСделок;
				СтрокаСегмента.ПотенциалНезавершенныхСделок  = ИнфСделки.ПотенциалВРаботе;
				СтрокаСегмента.СохраненныйПотенциал          = ИнфСделки.ВыигранныйПотенциал;
				СтрокаСегмента.ПотерянныйПотенциал           = ИнфСделки.ПроигранныйПотенциал;
				СтрокаСегмента.УдельноеКоличествоНезавершенныхСделок =
					СтрокаСегмента.КоличествоНезавершенныхСделок/СтрокаСегмента.КоличествоПартнеров;
				СтрокаСегмента.УдельноеКоличествоВыигранныхСделок    =
					СтрокаСегмента.КоличествоВыигранныхСделок/СтрокаСегмента.КоличествоПартнеров;
				СтрокаСегмента.УдельноеКоличествоПроигранныхСделок   =
					СтрокаСегмента.КоличествоПроигранныхСделок/СтрокаСегмента.КоличествоПартнеров;
				СтрокаСегмента.УдельныйПотенциалНезавершенныхСделок  =
					СтрокаСегмента.ПотенциалНезавершенныхСделок/СтрокаСегмента.КоличествоПартнеров;
				СтрокаСегмента.УдельныйСохраненныйПотенциал          =
					СтрокаСегмента.СохраненныйПотенциал/СтрокаСегмента.КоличествоПартнеров;
				СтрокаСегмента.УдельныйПотерянныйПотенциал           =
					СтрокаСегмента.ПотерянныйПотенциал/СтрокаСегмента.КоличествоПартнеров;
			КонецЕсли; //Получить информацию по сделкам сегмента

			//Получить объем продаж сегмента
			ИнфОбъем = МассивРезультатов[1].Выбрать();
			Если ИнфОбъем.Следующий() Тогда
				СтрокаСегмента.ОбъемПродаж = ИнфОбъем.ОбъемПродаж;
				СтрокаСегмента.УдельныйОбъемПродаж =
					СтрокаСегмента.ОбъемПродаж/СтрокаСегмента.КоличествоПартнеров;
			КонецЕсли; //Получить объем продаж сегмента

		КонецЕсли; //Заполнить информацию по сделкам и объему продаж
	КонецЦикла; //Заполнить таблицу результата

	//Заполнить документ-результат
	ДокументРезультат.Очистить();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		КомпоновщикНастроек.ПолучитьНастройки(),
		ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		Новый Структура("Сегменты", ТаблицаРезультата),
		ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	ПроцессорВывода.ЗакончитьВывод();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаИнтервалДат(ДатаНачала, ДатаОкончания)
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекстИнтервала = "
		|		И СделкиСКлиентами.ДатаОкончания >= &ДатаНачала";
	Иначе
		ТекстИнтервала = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстИнтервала = ТекстИнтервала + "
		|		И СделкиСКлиентами.ДатаОкончания <= &ДатаОкончания
		|		И СделкиСКлиентами.ДатаОкончания ЕСТЬ НЕ NULL";
	КонецЕсли;
	Возврат ТекстИнтервала;
	
КонецФункции

Функция ТекстЗапросаОбъемаПродаж(ДатаНачала, ДатаОкончания)

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот), 0) КАК ОбъемПродаж
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(";
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекстЗапроса = ТекстЗапроса + "&ДатаНачала";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ", ";
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстЗапроса = ТекстЗапроса + "&ДатаОкончания";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ", Авто, ) КАК ВыручкаИСебестоимостьПродажОбороты
	|		ПО АналитикаУчета.КлючАналитики = ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчета.Партнер В(&Партнер)";
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСтатистикиСделок(ДатаНачала, ДатаОкончания)

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВложенныйЗапрос.КоличествоСделокВРаботе) КАК КоличествоСделокВРаботе,
		|	СУММА(ВложенныйЗапрос.КоличествоПроигранныхСделок) КАК КоличествоПроигранныхСделок,
		|	СУММА(ВложенныйЗапрос.КоличествоВыигранныхСделок) КАК КоличествоВыигранныхСделок,
		|	СУММА(ВложенныйЗапрос.ПотенциалВРаботе) КАК ПотенциалВРаботе,
		|	СУММА(ВложенныйЗапрос.ПроигранныйПотенциал) КАК ПроигранныйПотенциал,
		|	СУММА(ВложенныйЗапрос.ВыигранныйПотенциал) КАК ВыигранныйПотенциал
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(*) КАК КоличествоСделокВРаботе,
		|		0 КАК КоличествоПроигранныхСделок,
		|		0 КАК КоличествоВыигранныхСделок,
		|		ЕСТЬNULL(СУММА(СделкиСКлиентами.ПотенциальнаяСуммаПродажи), 0) КАК ПотенциалВРаботе,
		|		0 КАК ПроигранныйПотенциал,
		|		0 КАК ВыигранныйПотенциал
		|	ИЗ
		|		Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|	ГДЕ
		|		СделкиСКлиентами.Партнер В(&Партнер)
		|		И СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.ВРаботе)";

		//Установить период для незавершенных сделок
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|		И СделкиСКлиентами.ДатаНачала <= &ДатаОкончания
			|		И (СделкиСКлиентами.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|		ИЛИ СделкиСКлиентами.ДатаОкончания > &ДатаОкончания)";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|		И СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.ВРаботе)";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		КОЛИЧЕСТВО(*),
		|		0,
		|		0,
		|		ЕСТЬNULL(СУММА(СделкиСКлиентами.ПотенциальнаяСуммаПродажи), 0),
		|		0
		|	ИЗ
		|		Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|	ГДЕ
		|		СделкиСКлиентами.Партнер В(&Партнер)";
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаИнтервалДат(ДатаНачала,ДатаОкончания);
	ТекстЗапроса = ТекстЗапроса + "
		|		И СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.Проиграна)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		КОЛИЧЕСТВО(*),
		|		0,
		|		0,
		|		ЕСТЬNULL(СУММА(СделкиСКлиентами.ПотенциальнаяСуммаПродажи), 0)
		|	ИЗ
		|		Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|	ГДЕ
		|		СделкиСКлиентами.Партнер В(&Партнер)";
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаИнтервалДат(ДатаНачала,ДатаОкончания);
	ТекстЗапроса = ТекстЗапроса + "
		|		И СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.Выиграна)) КАК ВложенныйЗапрос
		|;
		|///////////////////////////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

Процедура УстановитьДату(Параметр, Дата)

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Параметр);
	
	Если ТипЗнч(Параметр.Значение) = Тип("Дата") Тогда
		Дата = ?(
			Параметр.Использование И ЗначениеЗаполнено(Параметр.Значение),
			Параметр.Значение,
			Неопределено);
	Иначе
		Дата = ?(
			Параметр.Использование И ЗначениеЗаполнено(Параметр.Значение.Дата),
			Параметр.Значение.Дата,
			Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли

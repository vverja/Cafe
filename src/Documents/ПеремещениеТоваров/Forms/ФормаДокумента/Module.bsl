&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; //используется для отвязки строки перемещения от строки заказа

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		Элементы.КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		Элементы.КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
		
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
		
		ПерезаполнитьПоОрдерам(Параметры.ЗначенияЗаполнения.МассивЗаказов);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	УстановитьВидимостьОпераций();
	УстановитьДоступностьКомандБуфераОбмена();
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС1);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо1);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УправлениеЭлементамиФормы();
	
	// Кеширование значений функциональных опций.
	ИспользоватьПеремещениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам");
	ИспользоватьЗаказыНаПеремещение = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение");
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками");
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОрдернаяСхемаПриОтгрузке = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.СкладОтправитель, Объект.Дата);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭтоРаспоряжениеНакладная = ЭтоРаспоряжениеНакладная(Объект.Ссылка, ОрдернаяСхемаПриОтгрузке);
	Если Параметры.Свойство("РезультатыПроверки") И Параметры.РезультатыПроверки.ЕстьПредупреждения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Параметры.РезультатыПроверки.ТекстПредупреждения);
	КонецЕсли;

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров));
	Элементы.ГруппаИнформацияНеобходимыСтатусы.Видимость = ВыводитьСообщениеПоИспользованиюСтатусов();
	УстановитьВидимостьЭлементовСерий();
	
	ОбновитьИнформациюПоЗаказам();
	ОбновитьОтклоненияОтЗаказа();
	
	Элементы.КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
	Элементы.КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
	
	Если Не ИспользоватьЗаказыНаПеремещение Тогда
		Элементы.КартинкаРасхождениеЗаказ.Видимость = Ложь;
		Элементы.КартинкаРасхождениеЗаказы.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Сделка.Видимость = Не (ИспользоватьПеремещениеПоНесколькимЗаказам И Объект.ПеремещениеПоЗаказам);
	Элементы.ТоварыСделка.Видимость = ИспользоватьПеремещениеПоНесколькимЗаказам И Объект.ПеремещениеПоЗаказам;
	НастроитьКомандуПодобратьПоЗаказамОрдерам();
	
	УстановитьВидимостьЭлементовСверхЗаказа(Элементы, Объект.ПеремещениеПоЗаказам);
	
	СкладОтправитель = Объект.СкладОтправитель;
	СкладПолучатель  = Объект.СкладПолучатель;
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы,Объект, Объект.ПеремещениеПоЗаказам);
	
	ТекущийСпособДоставки = Объект.СпособДоставки;
	
	ПолучитьОбновитьИнформациюТранспортныхНакладных();
	
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	// Подсистема "Свойства"
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем ВыполняемаяОперация;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда

		Если ВРег(ВыполняемаяОперация) = ВРег("ПодборТоваровИзЗаказа") Тогда

			ОбработкаПодбораТоваровИзЗаказа(ВыбранноеЗначение.АдресВХранилище);

		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда

		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		Объект.ВидыЗапасовУказаныВручную = ИсточникВыбора.ВидыЗапасовУказаныВручную;
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ТранспортнаяНакладная.Форма.ФормаВыбора" Тогда
		
		ДанныеТранспортныхНакладных = ОбработкаВыбораТранспортнойНакладной(ВыбранноеЗначение);
		ОбновитьИнформациюТранспортныхНакладных(ДанныеТранспортныхНакладных, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	СообщитьОРезультатахЗаполнения();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПредыдущиеРеквизитыСтроки = Новый Структура(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|Склад,
		|ТипНоменклатуры,
		|ХарактеристикиИспользуются,
		|Артикул,
		|ЗаказНаПеремещение,
		|КодСтроки");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьОтклоненияОтЗаказа();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	Документы.ТранспортнаяНакладная.СравнитьРеквизитыТТНПослеЗаписи(ЭтаФорма);
	ТекущийСпособДоставки = ТекущийОбъект.СпособДоставки;
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ТранспортнаяНакладная" Тогда
		ПолучитьОбновитьИнформациюТранспортныхНакладных();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_РасходныйОрдерНаТовары" Тогда
		ЭтоРаспоряжениеНакладная = ЭтоРаспоряжениеНакладная(Объект.Ссылка, ОрдернаяСхемаПриОтгрузке);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОповеститьОПроведенииДокумента(ПараметрыЗаписи);
	
	Если ЗначениеЗаполнено(ИзмененныеРеквизитыТТНСтрока) Тогда		
		Если СтрНайти(ИзмененныеРеквизитыТТНСтрокаСинонимов, ",") <> 0 Тогда  		
			ТекстВопроса = НСтр("ru='Реквизиты %ИзмененныеРеквизиты% были изменены. Изменить их значения в транспортных накладных, в которых числится текущий документ?';uk='Реквізити %ИзмененныеРеквизиты% були змінені. Змінити їх значення в транспортних накладних, у яких значиться поточний документ?'");
		Иначе
			ТекстВопроса = НСтр("ru='Реквизит %ИзмененныеРеквизиты% был изменен. Изменить его значение в транспортных накладных, в которых числится текущий документ?';uk='Реквізит %ИзмененныеРеквизиты% був змінений. Змінити його значення в транспортних накладних, у яких значиться поточний документ?'");
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзмененныеРеквизиты%", ИзмененныеРеквизитыТТНСтрокаСинонимов);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Изменить';uk='Змінити'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Не изменять';uk='Не змінювати'"));
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)), 
			ТекстВопроса, СписокКнопок);
		Возврат;
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.ОК Тогда 
        ОбновитьРеквизитыТранспортныхНакладныхНаСервере();
    КонецЕсли;
    ЗапретНаЗакрытиеФормы = Ложь;
	ИзмененныеРеквизитыТТНСтрока = "";
	ИзмененныеРеквизитыТТНСтрокаСинонимов = "";
    
    МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И Не Объект.ПеремещениеПоЗаказам Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Товары",
			"Номенклатура,Характеристика,Количество",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Документы.ТранспортнаяНакладная.СохранитьРеквизитыТТНПередЗаписью(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗапретНаЗакрытиеФормы Тогда
		
		Отказ = Истина;
		
	Иначе
		
		ПринудительноЗакрытьФорму = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	ОчищатьСтроки = Ложь;
	ОтвязатьВсеСтрокиОтЗаказа = Ложь;
	
	Если СкладПолучатель <> Объект.СкладПолучатель Тогда
		
		Если Объект.ПеремещениеПоЗаказам
			И Объект.Товары.Количество() > 0 Тогда
			
			СписокКнопок = Новый СписокЗначений();
			
			СписокКнопок.Добавить("Продолжить", НСтр("ru='Очистить товары';uk='Очистити товари'"));
			СписокКнопок.Добавить("Отвязать", НСтр("ru='Отвязать от заказа';uk='Відв''язати від замовлення'"));
			ТекстВопроса = НСтр("ru='При изменении склада список ""Товары"" необходимо очистить, либо отвязать строки от заказа. Продолжить?';uk='При зміні складу список ""Товари"" необхідно очистити, або відв''язати рядки від замовлення. Продовжити?'");
			
			СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СкладПолучательПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ОтвязатьВсеСтрокиОтЗаказа", ОтвязатьВсеСтрокиОтЗаказа)), ТекстВопроса, СписокКнопок);
			
		Иначе
			СкладПолучательПриИзмененииСервер(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтвязатьВсеСтрокиОтЗаказа = ДополнительныеПараметры.ОтвязатьВсеСтрокиОтЗаказа;
	Ответ = РезультатВопроса;
	Если Ответ = "Отмена" Тогда
		Объект.СкладПолучатель = СкладПолучатель;
		Возврат;
	ИначеЕсли Ответ = "Отвязать" Тогда
		ОтвязатьВсеСтрокиОтЗаказа = Истина;
		ОчищатьСтроки = Ложь;
	Иначе
		ОчищатьСтроки = Истина;
	КонецЕсли;
	
	СкладПолучательПриИзмененииСервер(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	ОчищатьСтроки = Ложь;
	ОтвязатьВсеСтрокиОтЗаказа = Ложь;
	
	Если СкладОтправитель <> Объект.СкладОтправитель Тогда
		
		Если Объект.ПеремещениеПоЗаказам
			И Объект.Товары.Количество() > 0 Тогда
			
			СписокКнопок = Новый СписокЗначений();
			
			СписокКнопок.Добавить("Продолжить", НСтр("ru='Очистить товары';uk='Очистити товари'"));
			СписокКнопок.Добавить("Отвязать", НСтр("ru='Отвязать от заказа';uk='Відв''язати від замовлення'"));
			ТекстВопроса = НСтр("ru='При изменении склада список ""Товары"" необходимо очистить, либо отвязать строки от заказа. Продолжить?';uk='При зміні складу список ""Товари"" необхідно очистити, або відв''язати рядки від замовлення. Продовжити?'");
			
			СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СкладОтправительПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ОтвязатьВсеСтрокиОтЗаказа", ОтвязатьВсеСтрокиОтЗаказа)), ТекстВопроса, СписокКнопок);
			
		Иначе
			СкладОтправительПриИзмененииСервер(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтвязатьВсеСтрокиОтЗаказа = ДополнительныеПараметры.ОтвязатьВсеСтрокиОтЗаказа;
	Ответ = РезультатВопроса;
	Если Ответ = "Отмена" Тогда
		Объект.СкладОтправитель = СкладОтправитель;
		Возврат;
	ИначеЕсли Ответ = "Отвязать" Тогда
		ОтвязатьВсеСтрокиОтЗаказа = Истина;
		ОчищатьСтроки = Ложь;
	Иначе
		ОчищатьСтроки = Истина;
	КонецЕсли;
	
	СкладОтправительПриИзмененииСервер(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		ЗаполнитьСерииПоОтгрузке = Ложь;
		
		Если МожноЗаполнитьСерииПоОтгрузке
			И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Принято") Тогда
			ТекстВопроса = НСтр("ru='Заполнить серии по данным расходных ордеров?';uk='Заповнити серії за даними видаткових ордерів?'");
			
			Ответ = Неопределено;

			
			ПоказатьВопрос(Новый ОписаниеОповещения("СтатусПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
            Возврат;
		КонецЕсли;
		
		СтатусПриИзмененииСервер(ЗаполнитьСерииПоОтгрузке);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	ЗаполнитьСерииПоОтгрузке = Ложь;
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьСерииПоОтгрузке = Истина;
    КонецЕсли;
    
    СтатусПриИзмененииСервер(ЗаполнитьСерииПоОтгрузке);

КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокЗаказов,
			НСтр("ru='Заказы на перемещение (%КоличествоДокументов%)';uk='Замовлення на переміщення (%КоличествоДокументов%)'")
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеПоЗаказуПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Элемент.НакладанаяПоЗаказу.ПриИзменении");
	
	УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	
	Если Объект.ПеремещениеПоЗаказам И ЭтоРаспоряжениеНакладная Тогда
		
		ТекстПредупреждения = НСтр("ru='Перемещение со склада-отправителя уже начато. Установка признака невозможна.';uk='Переміщення зі складу-відправника вже розпочато. Встановлення ознаки неможливе.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Объект.ПеремещениеПоЗаказам = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ПеремещениеПоЗаказам Тогда
		
		Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
			
			Если Объект.Товары.Количество() = 0 Тогда
				ТекстВопроса = НСтр("ru='Список Товары будет перезаполнен остатками неоформленных товаров по заказам. Продолжить?';uk='Список Товари буде перезаповнений залишками неоформлених товарів по замовленнях. Продовжити?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Товары будут привязаны к строкам заказов. Продолжить?';uk='Рядки в списку Товари будуть прив''язані до рядків замовлень. Продовжити?'");
			КонецЕсли;
			
		Иначе
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Организация",      Объект.Организация);
			ПараметрыОтбора.Вставить("Подразделение",    Объект.Подразделение);
			ПараметрыОтбора.Вставить("СкладОтправитель", Объект.СкладОтправитель);
			ПараметрыОтбора.Вставить("СкладПолучатель",  Объект.СкладПолучатель);
			
			ПараметрыФормы = Новый Структура("Отбор, Регистратор", ПараметрыОтбора, Объект.Ссылка);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеремещениеПоЗаказуУстановленоЗаказВыбран", ЭтотОбъект); //производит заполнение списка "Товары"
			ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаВыбораРаспоряжения",
				ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.Товары.Количество() > 0 Тогда
			Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
				ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказов. Продолжить?';uk='Рядки в списку Товари перестануть бути зв''язаними з рядками замовлень. Продовжити?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказа. Продолжить?';uk='Рядки в списку Товари перестануть бути зв''язаними з рядками замовлення. Продовжити?'");
			КонецЕсли;
		Иначе
			
			ПриИзмененииПеремещенияПоНесколькимЗаказам(КэшированныеЗначения);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПеремещениеПоЗаказуПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ТекущаяОрганизация <> Объект.Организация Тогда
		
		ОрганизацияПриИзмененииСервер();
		ТекущаяОрганизация = Объект.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	НужноЗадатьВопрос = Ложь;
	ТекстВопроса = "";
	
	Если КоличествоТранспортныхНакладных > 0
		И (ТекущийСпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз")
			ИЛИ ТекущийСпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика"))
		И (Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
			ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу")) Тогда
				
		НужноЗадатьВопрос = Истина;	
		ТекстВопроса = НСтр("ru='По текущему распоряжению имеются оформленные ТТН. Для выбранного способа доставки транспортные накладные можно будет оформить из задания на перевозку. Информация о ТТН будет очищена без возможности возврата.';uk='За поточним розпорядженням є оформлені ТТН. Для обраного способу доставки транспортні накладні можна буде оформити з завдання на перевезення. Інформація про ТТН буде видалено без можливості повернення.'");
		
	КонецЕсли;	
	
	Если КоличествоТранспортныхНакладных > 0
		И (Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз")
				ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика"))
		И (ТекущийСпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
				ИЛИ ТекущийСпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу")) Тогда
	
		НужноЗадатьВопрос = Истина;	
		ТекстВопроса = НСтр("ru='По распоряжению имеются оформленные ТТН. Для выбранного способа доставки транспортные накладные можно будет оформить из текущего документа. Информация о ТТН будет очищена без возможности возврата.';uk='За розпорядженням є оформлені ТТН. Для вибраного способу доставки транспортні накладні можна буде оформити з поточного документа. Інформація про ТТН буде видалена без можливості повернення.'");
		
	КонецЕсли;
	
	Если НужноЗадатьВопрос Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("СпособМестоДоставкиПриИзмененииЗавершение", ЭтаФорма, Элемент);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Продолжить';uk='Продовжити'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить изменение';uk='Скасувати зміну'"));
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, СписокКнопок);		
	Иначе
		ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);	
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортнаяНакладнаяТекстНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ТранспортнаяНакладная);
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.ФормаДокумента", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.ПеремещениеПоЗаказам 
		И ТекущаяСтрока <> Неопределено Тогда 
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.ПеремещениеПоЗаказам);
		
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
			Объект.Товары,
			НадписьРасхождениеЗаказ,
			Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеПриИзменении(Элемент)

	ОбновитьНазначениеОтправителя();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеОчистка(Элемент, СтандартнаяОбработка)

	ОбновитьНазначениеОтправителя();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		ОбновитьИнформациюПоЗаказам();
	КонецЕсли;
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ТоварыЗаказНаПеремещение Тогда
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ЗаказНаПеремещение) Тогда
			ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.ЗаказНаПеремещение);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ТоварыСделка Тогда
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Сделка) Тогда
			ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.Сделка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказНаПеремещениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Организация",      Объект.Организация);
		ПараметрыОтбора.Вставить("Подразделение",    Объект.Подразделение);
		ПараметрыОтбора.Вставить("СкладОтправитель", Объект.СкладОтправитель);
		ПараметрыОтбора.Вставить("СкладПолучатель",  Объект.СкладПолучатель);
		
		ПараметрыФормы = Новый Структура("Отбор, Регистратор", ПараметрыОтбора, Объект.Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыЗаказНаПеремещениеНачалоВыбораЗавершение", ЭтотОбъект); //производит заполнение списка "Товары"
		ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаВыбораРаспоряжения",
			ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		Возврат;
		
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказНаПеремещениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаказНаПеремещение = Результат;
	
	Элементы.Товары.ТекущиеДанные.ЗаказНаПеремещение = ЗаказНаПеремещение;
	
	ОбновитьИнформациюПоЗаказам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		НоваяСтрока.ЗаказНаПеремещение = ЗаказВСтрокеСверхЗаказа(Объект.ПеремещениеПоЗаказам, Объект.ЗаказНаПеремещение);
		ОбновитьОтклоненияОтЗаказаВСтроке(НоваяСтрока, Объект.ПеремещениеПоЗаказам);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
	ФинансыКлиент.ОткрытьВидыЗапасов(
		Объект,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		ЭтаФорма,
		, // Редактировать виды запасов
		, // Отображать документ реализации
		Объект.СкладОтправитель
		);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Команда.ПодобратьТовары");
	
	Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Склад"" не заполнено';uk='Поле ""Склад"" не заповнено'"), Объект.Ссылка, "Объект.СкладОтправитель");
		Возврат;
		
	КонецЕсли;
	
	ОткрытьПодборТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыПоЗаказамОрдерам(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Команда.ПодобратьТоварыПоЗаказамОрдерам");
	
	ОткрытьПодборТоваровПоЗаказамОрдерам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Команда.ЗагрузитьДанныеИзТСД");
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
	
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFO(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Команда.ЗаполнитьСерииПоFEFO");
	
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокТранспортныхНакладных(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументОснование", Объект.Ссылка));
	ОткрытьФорму("Документ.ТранспортнаяНакладная.ФормаСписка",
				ПараметрыФормы,
				ЭтаФорма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТранспортнуюНакладную(Команда)
	
	ОчиститьСообщения();
	
	ПроверитьВозможностьСозданияТранспортнойНакладной();

КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Команда.ПровестиИЗакрыть");
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Команда.ОтвязатьОтЗаказа");
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()>0 Тогда
		ОтвязатьОтЗаказаСервер(КэшированныеЗначения, Ложь);
		ОповеститьОбОкончанииОтвязкиСтрок(ВыделенныеСтроки.Количество());
	Иначе
		ТекстПредупреждения = НСтр("ru='Выберите строки, которые необходимо отвязать от заказа.';uk='Виділіть рядки, які необхідно відв''язати від замовлення.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли; 
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПеремещениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказНаПеремещение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказНаПеремещение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСделка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Сделка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСделка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПеремещениеПоНесколькимЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказНаПеремещение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказНаПеремещение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказНаПеремещение.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказНаПеремещение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказНаПеремещение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказНаПеремещение.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказНаПеремещение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПеремещениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказНаПеремещение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказНаПеремещение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказНаПеремещение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Сверх заказа, заказ не выбран';uk='Понад замовлення, замовлення не вибрано'"));

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);	
		
	//
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СкладОтправительПриИзмененииСервер(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОрдернаяСхемаПриОтгрузке = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.СкладОтправитель, Объект.Дата);
	ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();

	СкладОтправитель = Объект.СкладОтправитель;
	
	ОчиститьТабличнуюЧастьТоварыПриИзмененииСклада(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СкладПолучательПриИзмененииСервер(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения)
	
	ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();
	
	Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.СкладПолучатель);

	СкладПолучатель = Объект.СкладПолучатель;

	ОчиститьТабличнуюЧастьТоварыПриИзмененииСклада(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения);
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("СкладПолучатель");
	

КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер(ЗаполнитьСерииПоОтгрузке)

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров));
	Элементы.ГруппаИнформацияНеобходимыСтатусы.Видимость = ВыводитьСообщениеПоИспользованиюСтатусов();
	
	Если ЗаполнитьСерииПоОтгрузке Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьСерииПоОтгрузке(Объект);
	КонецЕсли;

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Объект.Организация;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель)
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель) Тогда
		Объект.ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров Тогда
		
		Если Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) 
			И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель)
			ИЛИ Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.ОрганизацияПолучатель) Тогда
			Объект.ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ОрдернаяСхемаПриОтгрузке = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.СкладОтправитель, Объект.Дата);
	ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(АдресВХранилище)

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ЗаполнитьТоварыПодобраннымиИзЗаказа(СтруктураДанных.Товары);

КонецПроцедуры

&НаСервере
Функция ТаблицыСерииОтправителяИСерииПолучателя(Таблица)
	
	Таблица.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Для Индекс = 0 По Таблица.Количество() - 1 Цикл
		Таблица[Индекс].Индекс = Индекс;
	КонецЦикла;
	
	Результат = Новый Структура("ТаблицаСерииОтправителя, ТаблицаСерииПолучателя",
		Таблица.СкопироватьКолонки(), Таблица.СкопироватьКолонки());
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("СкладОтправитель", Объект.СкладОтправитель);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Индекс       КАК Индекс,
		|	Таблица.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Индекс КАК Индекс,
		|	ВЫБОР КОГДА ПолитикиУчетаСерий.Ссылка ЕСТЬ NULL ТОГДА
		|				ЛОЖЬ
		|			ИНАЧЕ
		|				ИСТИНА
		|		КОНЕЦ КАК УказываютсяСерииОтправителя
		|ИЗ
		|	ВтТовары КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО Таблица.Номенклатура = СпрНоменклатура.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
		|		ПО ПолитикиУчетаСерий.Ссылка = СпрНоменклатура.ВидНоменклатуры.Ссылка
		|		 И ПолитикиУчетаСерий.Склад = &СкладОтправитель
		|		 И (ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|			ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям)";
	
	Индексы = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаИндекса Из Индексы Цикл
		
		Если СтрокаИндекса.УказываютсяСерииОтправителя Тогда
			ЗаполнитьЗначенияСвойств(Результат.ТаблицаСерииОтправителя.Добавить(), Таблица[СтрокаИндекса.Индекс]);
		Иначе
			ЗаполнитьЗначенияСвойств(Результат.ТаблицаСерииПолучателя.Добавить(), Таблица[СтрокаИндекса.Индекс]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыПодобраннымиИзЗаказа(Таблица)
	
	СтруктураТаблиц = ТаблицыСерииОтправителяИСерииПолучателя(Таблица);
	ЗаполнитьТоварыПодобраннымиИзЗаказаСУчетомСерий(СтруктураТаблиц.ТаблицаСерииОтправителя, Истина);
	ЗаполнитьТоварыПодобраннымиИзЗаказаСУчетомСерий(СтруктураТаблиц.ТаблицаСерииПолучателя,  Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПодобраннымиИзЗаказаСУчетомСерий(Таблица, УчитыватьСерию);

	Если Таблица.Колонки.Найти("ОтвязатьОтЗаказа") = Неопределено Тогда
		Таблица.Колонки.Добавить("ОтвязатьОтЗаказа", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	ИменаПолей = "КодСтроки, Номенклатура, Характеристика, Назначение, ЗаказНаПеремещение" + ?(УчитыватьСерию, ", Серия", "");

	СтруктураПоиска = Новый Структура(ИменаПолей);
	Таблица.Сортировать(ИменаПолей);
	
	// Группировка таблицы по ключам строк.
	ДеревоСтрок = Новый Массив();
	ПустойЗаказ = Документы.ЗаказНаПеремещение.ПустаяСсылка();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если ТипЗнч(СтрокаТаблицы.ЗаказНаПеремещение) = Тип("ДокументСсылка.ПеремещениеТоваров")
			Или Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказНаПеремещение) Тогда
			СтрокаТаблицы.ЗаказНаПеремещение = ПустойЗаказ;
		КонецЕсли;
		
		Если ОбеспечениеКлиентСервер.ИзменилсяКлюч(СтруктураПоиска, СтрокаТаблицы) Тогда
			
			МассивСтрок = Новый Массив();
			ДеревоСтрок.Добавить(МассивСтрок);
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	ПоляСвязиСЗаказом = Новый Структура("КодСтроки, ЗаказНаПеремещение", 0, ПустойЗаказ);
	ДобавленныеСтроки = НакладныеСервер.ЗаполнитьТоварыПодобраннымиИзЗаказа(
		ДеревоСтрок, ИменаПолей, Объект.Товары, ПоляСвязиСЗаказом, ?(УчитыватьСерию, "", "Серия"));
	Для Каждого СтрокаТовары Из ДобавленныеСтроки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.ЗаказНаПеремещение) Тогда
			Объект.ПеремещениеПоЗаказам = Истина;
			Если Не ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
				Объект.ЗаказНаПеремещение = СтрокаТовары.ЗаказНаПеремещение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьНазначениеОтправителяВТаблицеТовары();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОбновитьИнформациюПоЗаказам();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
        ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, Серия");

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваровПоЗаказамОрдерам()
	
	РеквизитыШапки = Новый Структура("Организация, СкладОтправитель, СкладПолучатель, Ссылка");
	ЗаполнитьЗначенияСвойств(РеквизитыШапки, Объект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РеквизитыШапки",           РеквизитыШапки);
	ПараметрыФормы.Вставить("Заказ",                    Объект.ЗаказНаПеремещение);
	ПараметрыФормы.Вставить("ОрдернаяСхемаПриОтгрузке", ОрдернаяСхемаПриОтгрузке);
	ПараметрыФормы.Вставить("НакладнаяПоЗаказам",       Объект.ПеремещениеПоЗаказам);
	ПараметрыФормы.Вставить("АдресТовары",              АдресТоварыНакладной());
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаПодбораТоваровИзЗаказа",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru='Подбор товаров';uk='Підбір товарів'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                    ПараметрыУказанияСерий);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Функция АдресТоварыНакладной()
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыНакладной());
	
КонецФункции

&НаСервере
Функция ТоварыНакладной()
	
	Колонки = "Количество, НомерСтроки, Номенклатура, Характеристика,
	          |НазначениеОтправителя, Назначение, Серия, КодСтроки, Упаковка , ЗаказНаПеремещение, Сделка";
	Таблица = Объект.Товары.Выгрузить(Новый Массив(),).СкопироватьКолонки(Колонки);
	Для Каждого Строка Из Объект.Товары Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если Строка.СтатусУказанияСерийОтправитель <> 10 И Строка.СтатусУказанияСерийОтправитель <> 14 Тогда
			НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, Серия, СтатусУказанияСерий, ТипНоменклатуры");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, Серия, СтатусУказанияСерий, ТипНоменклатуры", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
				СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ПеремещениеТоваров.ФормаДокумента.Команда.ПроверитьКоличествоВДокументе");
	
	ПараметрыУказанияСерийВрем = Новый Структура(ПараметрыУказанияСерий);
	ПараметрыУказанияСерийВрем.ИмяПоляСклад = "Склад";
	ПараметрыУказанияСерийПроверкаКоличества = Новый ФиксированнаяСтруктура(ПараметрыУказанияСерийВрем);

	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Принято") Тогда
		Склад = Объект.СкладПолучатель;
	Иначе	
		Склад = Объект.СкладОтправитель;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище",            ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества());
	ПараметрыОткрытия.Вставить("ИмяТабличнойЧасти",                    "Товары");
	ПараметрыОткрытия.Вставить("Ссылка",                               Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПревышениеКоличестваТоваровРазрешено", Не Объект.ПеремещениеПоЗаказам);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",               ПараметрыУказанияСерийПроверкаКоличества);
	ПараметрыОткрытия.Вставить("Склад",                                Склад);
	ПараметрыОткрытия.Вставить("ПеремещениеПоЗаказам",                 Объект.ПеремещениеПоЗаказам);
	ПараметрыОткрытия.Вставить("Статус",                               Объект.Статус);
	
	ВозвращаемыеПараметры = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ПроверитьКоличествоВДокументеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВозвращаемыеПараметры = Результат;
    Если ВозвращаемыеПараметры <> Неопределено Тогда
        ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
        
        Модифицированность = Истина;
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не Объект.ПеремещениеПоЗаказам;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	Элементы.ТоварыСтатусУказанияСерий.Видимость  = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость         = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	Элементы.ТоварыЗаполнитьСерииПоFEFO.Видимость = 
		ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Объект.СкладОтправитель))
		И Не ОрдернаяСхемаПриОтгрузке;
	
	УстановитьПривилегированныйРежим(Истина);
	ОрдернаяСхемаСкладПоступлении = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.СкладПолучатель,
		                                                                                           Объект.Дата);
	МожноЗаполнитьСерииПоОтгрузке = ОрдернаяСхемаПриОтгрузке
		И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад", Объект.СкладОтправитель))
		И Не ОрдернаяСхемаСкладПоступлении
		И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад", Объект.СкладПолучатель));
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
		
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.Товары) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий);	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.Товары);

КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст, ТекущиеДанные)Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;

		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = Неопределено;

		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Функция ВыводитьСообщениеПоИспользованиюСтатусов()
	ВыводитьСообщениеПоИспользованиюСтатусов = Ложь;
	
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры 
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПолитикиУчетаСерийСкладОтправитель = СкладыСервер.ИспользованиеСерийНаСкладеПоПолитикамУчета(Объект.СкладОтправитель);
		ПолитикиУчетаСерийСкладПолучатель  = СкладыСервер.ИспользованиеСерийНаСкладеПоПолитикамУчета(Объект.СкладПолучатель);
		ИспользоватьОрдернуюСхемуПолучатель  = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.СкладПолучатель, Объект.Дата, Ложь);
		ИспользоватьОрдернуюСхемуОтправитель = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.СкладОтправитель, Объект.Дата);
		ПараметрыСерийСкладаОтправитель = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.СкладОтправитель, Ложь);
		ПараметрыСерийСкладаПолучатель  = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.СкладПолучатель, Ложь);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ИспользоватьОрдернуюСхемуОтправитель Тогда
			
			Если ИспользоватьОрдернуюСхемуПолучатель Тогда
				
				Если НЕ ПолитикиУчетаСерийСкладОтправитель.УказыватьПриПланированииОтгрузки 
					И ПолитикиУчетаСерийСкладПолучатель.УчитыватьСебестоимостьПоСериям Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
				Если Не ПараметрыСерийСкладаОтправитель.ИспользоватьСерииНоменклатуры
					И ПолитикиУчетаСерийСкладПолучатель.УчитыватьСебестоимостьПоСериям Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
			Иначе
				
				Если НЕ ПолитикиУчетаСерийСкладОтправитель.УказыватьПриПланированииОтгрузки 
					И ПолитикиУчетаСерийСкладПолучатель.УчитыватьСебестоимостьПоСериям Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
				Если НЕ ПолитикиУчетаСерийСкладОтправитель.УказыватьПриПланированииОтгрузки 
					И ПараметрыСерийСкладаПолучатель.ИспользоватьСерииНоменклатуры Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
				Если Не ПараметрыСерийСкладаОтправитель.ИспользоватьСерииНоменклатуры
					И ПолитикиУчетаСерийСкладПолучатель.УчитыватьСебестоимостьПоСериям Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
				Если Не ПараметрыСерийСкладаОтправитель.ИспользоватьСерииНоменклатуры
					И ПараметрыСерийСкладаПолучатель.ИспользоватьСерииНоменклатуры Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ИспользоватьОрдернуюСхемуПолучатель Тогда
				
				Если Не ПараметрыСерийСкладаОтправитель.ИспользоватьСерииНоменклатуры
					И ПолитикиУчетаСерийСкладПолучатель.УчитыватьСебестоимостьПоСериям Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
			Иначе
				
				Если Не ПараметрыСерийСкладаОтправитель.ИспользоватьСерииНоменклатуры
					И ПолитикиУчетаСерийСкладПолучатель.УчитыватьСебестоимостьПоСериям Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
				Если Не ПараметрыСерийСкладаОтправитель.ИспользоватьСерииНоменклатуры
					И ПараметрыСерийСкладаПолучатель.ИспользоватьСерииНоменклатуры Тогда
					
					ВыводитьСообщениеПоИспользованиюСтатусов = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыводитьСообщениеПоИспользованиюСтатусов;
	
КонецФункции

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПеремещениеТоваров.ПолучитьМассивыРеквизитов(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров);
	
	Элементы.Организация.Заголовок =
		?(ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями, НСтр("ru='Организация-отправитель';uk='Організація-відправник'"),
		                                                       НСтр("ru='Организация';uk='Організація'"));

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоЗаказуПоОрдеру

&НаКлиенте
Процедура ПеремещениеПоЗаказуУстановленоЗаказВыбран(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Объект.ПеремещениеПоЗаказам = Ложь;
	Иначе
		
		Если Объект.Товары.Количество() = 0 Тогда
			ТекстВопроса = СтрЗаменить(НСтр("ru='Список Товары будет заполнен остатками неоформленных товаров по документу %ЗаказНаПеремещение%. Продолжить?';uk='Список Товари буде заповнений залишками неоформлених товарів по документу %ЗаказНаПеремещение%. Продовжити?'"), "%ЗаказНаПеремещение%", Результат);
		Иначе
			ТекстВопроса = СтрЗаменить(НСтр("ru='Строки в списке Товары будут привязаны к строкам документа %ЗаказНаПеремещение%. Строки, которые невозможно привязать к строкам заказа, будут удалены.  Продолжить?';uk='Рядки в списку Товари будуть прив''язані до рядків документа %ЗаказНаПеремещение%. Рядки, які неможливо прив''язати до рядків замовлення, будуть вилучені. Продовжити?'"), "%ЗаказНаПеремещение%", Результат);
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеремещениеПоЗаказуУстановленоЗаказВыбранЗавершение", ЭтотОбъект, Новый Структура("ЗаказНаПеремещение", Результат)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОтвязкеСтрокОтЗаказов()
	
	Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		ТекстОповещения = НСтр("ru='Строки в списке ""Товары"" отвязаны от строк заказов.';uk='Рядки в списку ""Товари"" відв''язані від рядків замовлень.'");
	Иначе
		ТекстОповещения = НСтр("ru='Строки в списке ""Товары"" отвязаны от строк заказа.';uk='Рядки в списку ""Товари"" відв''язані від рядків замовлення.'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru='Обработка списка ""Товары""';uk='Обробка списку ""Товари""'"),, ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОПривязкеСтрокКЗаказам(ЗаказСсылка = Неопределено)
	
	Если ЗаказСсылка <> Неопределено Тогда
		
		ШаблонТекста = НСтр("ru='Строки в списке ""Товары"" привязаны к строкам документа %Заказ%.
            |Строки, которые неудалось привязать к строкам заказа - удалены.'
            |;uk='Рядки в списку ""Товари"" прив''язані до рядків документу %Заказ%.
            |Рядки, які не вдалося прив''язати до рядків замовлення - вилучені.'");
		ТекстОповещения = СтрЗаменить(ШаблонТекста, "%Заказ%", ЗаказСсылка);
		
	Иначе
		
		ТекстОповещения = НСтр("ru='Строки в списке ""Товары"" привязаны к строкам неоформленных заказов.
            |Строки, которые неудалось привязать к строкам заказов - удалены.'
            |;uk='Рядки в списку ""Товари"" прив''язані до рядків неоформлених замовлень.
            |Рядки, які не вдалося прив''язати до рядків замовлень - вилучені.'");
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru='Обработка списка ""Товары""';uk='Обробка списку ""Товари""'"),, ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗаполненииПоОстаткамЗаказов(ЗаказСсылка = Неопределено)
	
	Если Объект.Товары.Количество() > 0 Тогда
	
		Если ЗаказСсылка <> Неопределено Тогда
		
			ШаблонТекста = НСтр("ru='Список ""Товары"" заполнен остатками неоформленных товаров по документу %Заказ%.';uk='Список ""Товари"" заповнений залишками неоформлених товарів по документу %Заказ%.'");
			ТекстОповещения = СтрЗаменить(ШаблонТекста, "%Заказ%", ЗаказСсылка);
			
		Иначе
			
			ТекстОповещения = НСтр("ru='Список ""Товары"" заполнен остатками неоформленных товаров по заказам.';uk='Список ""Товари"" заповнений залишками неоформлених товарів по замовленнях.'");
			
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru='Обработка списка ""Товары""';uk='Обробка списку ""Товари""'"),, ТекстОповещения);
		
	Иначе
		
		Если ЗаказСсылка <> Неопределено Тогда
		
			ШаблонТекста = НСтр("ru='Нет неоформленных товаров по документу %Заказ%.';uk='Немає неоформлених товарів по документу %Заказ%.'");
			ТекстОповещения = СтрЗаменить(ШаблонТекста, "%Заказ%", ЗаказСсылка);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
				ТекстОповещения = НСтр("ru='Не заполнен склад-отправитель.';uk='Не заповнений склад-відправник.'");
			ИначеЕсли Не ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
				ТекстОповещения = НСтр("ru='Не заполнен склад-получатель.';uk='Не заповнений склад-одержувач.'");
			ИначеЕсли Не ЗначениеЗаполнено(Объект.Организация) Тогда
				ТекстОповещения = НСтр("ru='Не заполнена организация.';uk='Не заповнена організація.'");
			ИначеЕсли ИспользоватьНесколькоОрганизаций И ИспользоватьПодразделения Тогда
				Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
					ШаблонТекста = НСтр("ru='Нет неоформленных товаров по заказам на перемещение
                                            |со склада ""%1"" на склад ""%2"" в подразделении ""%3"" в организации ""%4""'
                                            |;uk='Немає неоформлених товарів по замовленнях на переміщення
                                            |зі складу ""%1"" на склад ""%2"" в підрозділі ""%3"" в організації ""%4""'");
				Иначе
					ШаблонТекста = НСтр("ru='Нет неоформленных товаров по заказам на перемещение
                                            |со склада ""%1"" на склад ""%2"" без указания подразделения в организации ""%4""'
                                            |;uk='Немає неоформлених товарів по замовленнях на переміщення
                                            |зі складу ""%1"" на склад ""%2"" без зазначення підрозділу в організації ""%4""'");
				КонецЕсли;
				ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
					Объект.СкладОтправитель, Объект.СкладПолучатель, Объект.Подразделение, Объект.Организация);
			ИначеЕсли ИспользоватьНесколькоОрганизаций Тогда
				ШаблонТекста = НСтр("ru='Нет неоформленных товаров по заказам на перемещение
                                        |со склада ""%1"" на склад ""%2"" в организации ""%3""'
                                        |;uk='Немає неоформлених товарів по замовленнях на переміщення
                                        |зі складу ""%1"" на склад ""%2"" в організації ""%3""'");
				ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
					Объект.СкладОтправитель, Объект.СкладПолучатель, Объект.Организация);
			ИначеЕсли ИспользоватьПодразделения Тогда
				Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
					ШаблонТекста = НСтр("ru='Нет неоформленных товаров по заказам на перемещение
                                            |со склада ""%1"" на склад ""%2"" в подразделении ""%3""'
                                            |;uk='Немає неоформлених товарів по замовленнях на переміщення
                                            |зі складу ""%1"" на склад ""%2"" в підрозділі ""%3""'");
				Иначе
					ШаблонТекста = НСтр("ru='Нет неоформленных товаров по заказам на перемещение
                                            |со склада ""%1"" на склад ""%2"" без указания подразделения'
                                            |;uk='Немає неоформлених товарів по замовленнях на переміщення
                                            |зі складу ""%1"" на склад ""%2"" без зазначення підрозділу'");
				КонецЕсли;
				ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
					Объект.СкладОтправитель, Объект.СкладПолучатель, Объект.Подразделение);
			Иначе
				ШаблонТекста = НСтр("ru='Нет неоформленных товаров по заказам на перемещение
                                        |со склада ""%1"" на склад ""%2""'
                                        |;uk='Немає неоформлених товарів по замовленнях на переміщення
                                        |зі складу ""%1"" на склад ""%2""'");
				ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
					Объект.СкладОтправитель, Объект.СкладПолучатель);
			КонецЕсли;
			
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПеремещенияПоНесколькимЗаказам(КэшированныеЗначения)
	
	Если Объект.ПеремещениеПоЗаказам Тогда
		
		Если Объект.Товары.Количество() = 0 Тогда
			ЗаполнитьПоЗаказуСервер();
		Иначе
			ПривязатьСтрокиКЗаказамНаПеремещение(Не ИспользоватьПеремещениеПоНесколькимЗаказам);
		КонецЕсли;
		
		Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
			Объект.Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
		КонецЕсли;
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	Иначе
		
		Объект.ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.ПустаяСсылка();
		ОтвязатьОтЗаказаСервер(КэшированныеЗначения, Истина);
		СписокЗаказов.Очистить();
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
		
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказам();
	ОбновитьОтклоненияОтЗаказа();
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
	Элементы.Сделка.Видимость = Не (ИспользоватьПеремещениеПоНесколькимЗаказам И Объект.ПеремещениеПоЗаказам);
	Элементы.ТоварыСделка.Видимость = ИспользоватьПеремещениеПоНесколькимЗаказам И Объект.ПеремещениеПоЗаказам;
	НастроитьКомандуПодобратьПоЗаказамОрдерам(Ложь);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сделка", "Видимость", Не (ИспользоватьПеремещениеПоНесколькимЗаказам И Объект.ПеремещениеПоЗаказам));
	
	УстановитьВидимостьЭлементовСверхЗаказа(Элементы, Объект.ПеремещениеПоЗаказам);
	
	ДоставкаТоваров.ПриИзмененииФлагаПоЗаказам(Элементы, Объект, Объект.ПеремещениеПоЗаказам);
	
КонецПроцедуры

&НаСервере
Функция ПривязатьСтрокиКЗаказамНаПеремещение(ОтобратьПоЗаказу = Ложь) Экспорт
	
	Если Не ИспользоватьЗаказыНаПеремещение Или
		Не ИспользоватьПеремещениеПоНесколькимЗаказам И Не ЗначениеЗаполнено(Объект.ЗаказНаПеремещение) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.КодСтроки = 0
	|	И Товары.ЗаказНаПеремещение = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказы.ЗаказНаПеремещение.Сделка КАК Сделка,
	|	ТаблицаЗаказы.ЗаказНаПеремещение        КАК ЗаказНаПеремещение,
	|	ТаблицаЗаказы.Номенклатура              КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика            КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки                 КАК КодСтроки,
	|	СУММА(ТаблицаЗаказы.КОформлению)        КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыНаПеремещение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заказы.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|		Заказы.Номенклатура КАК Номенклатура,
	|		Заказы.Характеристика КАК Характеристика,
	|		Заказы.КодСтроки КАК КодСтроки,
	|		Заказы.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
	|			ВЫБОР
	|				КОГДА &ОтобратьПоЗаказу
	|					ТОГДА ЗаказНаПеремещение = &Заказ
	|				ИНАЧЕ
	|					ЗаказНаПеремещение.Организация = &Организация
	|					И ЗаказНаПеремещение.СкладОтправитель = &СкладОтправитель
	|					И ЗаказНаПеремещение.СкладПолучатель = &СкладПолучатель
	|				КОНЕЦ
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура КАК Номенклатура,
	|						Товары.Характеристика КАК Характеристика
	|					ИЗ
	|					Товары КАК Товары)) КАК Заказы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Заказы.ЗаказНаПеремещение,
	|		Заказы.Номенклатура,
	|		Заказы.Характеристика,
	|		Заказы.КодСтроки,
	|		ВЫБОР
	|			КОГДА Заказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Заказы.КОформлению
	|			ИНАЧЕ Заказы.КОформлению
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение КАК Заказы
	|	ГДЕ
	|		Заказы.Регистратор = &Регистратор
	|		И ВЫБОР
	|			КОГДА &ОтобратьПоЗаказу
	|				ТОГДА ЗаказНаПеремещение = &Заказ
	|			ИНАЧЕ
	|				ЗаказНаПеремещение.Организация = &Организация
	|				И ЗаказНаПеремещение.СкладОтправитель = &СкладОтправитель
	|				И ЗаказНаПеремещение.СкладПолучатель = &СкладПолучатель
	|		КОНЕЦ
	|		И Заказы.Активность
	|		И (Номенклатура, Характеристика) В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура КАК Номенклатура,
	|				Товары.Характеристика КАК Характеристика
	|			ИЗ
	|				Товары КАК Товары)
	|		) КАК ТаблицаЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.Номенклатура,
	|	ТаблицаЗаказы.Характеристика,
	|	ТаблицаЗаказы.КодСтроки,
	|	ТаблицаЗаказы.ЗаказНаПеремещение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.КОформлению) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДублей,
	|	ЗаказыНаПеремещение.Номенклатура КАК Номенклатура,
	|	ЗаказыНаПеремещение.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДублиТоваров
	|ИЗ
	|	ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаПеремещение.Номенклатура,
	|	ЗаказыНаПеремещение.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Сделка КАК Сделка,
	|	Заказы.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.КодСтроки КАК КодСтроки,
	|	ВЫБОР КОГДА ЗаказТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
	|		
	|				ВЫБОР КОГДА ЗаказТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|							Заказы.ЗаказНаПеремещение.Назначение
	|						ИНАЧЕ
	|							ЗаказТовары.Назначение
	|					КОНЕЦ
	|		
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			
	|	КОНЕЦ                   КАК НазначениеОтправителя,
	|
	|	ЗаказТовары.Назначение          КАК Назначение,
	|	Заказы.КОформлениюОстаток КАК КОформлениюОстаток,
	|	0 КАК Распределено,
	|	ДублиТоваров.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ЗаказыНаПеремещение КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДублиТоваров КАК ДублиТоваров
	|		ПО Заказы.Номенклатура = ДублиТоваров.Номенклатура
	|			И Заказы.Характеристика = ДублиТоваров.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказТовары
	|		ПО (ЗаказТовары.Ссылка = Заказы.ЗаказНаПеремещение)
	|			И (ЗаказТовары.КодСтроки = Заказы.КодСтроки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказТовары.Номенклатура,
	|	ЗаказТовары.Характеристика,
	|	ЗаказТовары.НачалоОтгрузки,
	|	ЗаказТовары.Ссылка,
	|	ЗаказТовары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Заказ",            Объект.ЗаказНаПеремещение);
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("СкладОтправитель", Объект.СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель",  Объект.СкладПолучатель);
	Запрос.УстановитьПараметр("Регистратор",      Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу", ОтобратьПоЗаказу);
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(,"КодСтроки,Номенклатура,Характеристика,ЗаказНаПеремещение"));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	ТаблицаНераспределенныхТоваров = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Характеристика");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("ЗаказНаПеремещение");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Назначение");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("НазначениеОтправителя");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Количество");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Сделка");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("КодСтроки",      0);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличество = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной
		Если Выборка.КоличествоДублей < 2 Тогда
		
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказНаПеремещение,Назначение,НазначениеОтправителя,Сделка");
				НераспределенноеКоличество = НераспределенноеКоличество - ТекСтрока.Количество;
				
				Если НераспределенноеКоличество <= 0 Тогда
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают
			
			НайденаПодходящаяСтрока = Ложь;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ТекСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказНаПеремещение,Назначение,НазначениеОтправителя,Сделка");
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли товаров, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхТоваров.Количество() > 0 Тогда
	
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("КодСтроки", 0);
		СтруктураПоиска.Вставить("ЗаказНаПеремещение", Документы.ЗаказНаПеремещение.ПустаяСсылка());
		
		СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовары Из СтрокиТовары Цикл
			
			// Найдем нужные строки в таблице нераспределенных товаров
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТовары.Характеристика);
			
			НайденныеСтроки = ТаблицаНераспределенныхТоваров.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТекСтрока.Номенклатура = СтрокаТовары.Номенклатура И
					ТекСтрока.Характеристика = СтрокаТовары.Характеристика И
					ТекСтрока.Количество > 0 Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, ТекСтрока, "КодСтроки,ЗаказНаПеремещение,Назначение,НазначениеОтправителя,Сделка");
					
					// Уменьшим нераспределенное количество в таблице
					ТекСтрока.Количество = ТекСтрока.Количество - СтрокаТовары.Количество;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим строки, которые не удалось привязать к заказам
	МассивУдаляемыхСтрок = Новый Массив();
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.КодСтроки) Или Не ЗначениеЗаполнено(ТекСтрока.ЗаказНаПеремещение) Тогда
			МассивУдаляемыхСтрок.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЭлемент Из МассивУдаляемыхСтрок Цикл
		Объект.Товары.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьПоОрдерам(МассивЗаказов)
	
	ПараметрыЗаполнения = Документы.ПеремещениеТоваров.ПараметрыЗаполненияДокумента();
	ПараметрыЗаполнения.Вставить("ФормаОткрыта", Истина);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", Истина);
	
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	ТаблицаНакладная = Документы.ПеремещениеТоваров.ДанныеТаблицыТоварыДокумента(Объект.Ссылка);
	
	КлючевыеПоля = ПараметрыЗаполнения.КлючевыеПоля;
	
	// Таблица с кодами строк
	ТаблицаКОформлениюОстаток = РегистрыНакопления.ЗаказыНаПеремещение.КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов, Объект.Ссылка);
	ТаблицаКОформлениюОстаток.Индексы.Добавить(КлючевыеПоля);
	
	// Таблица отгружено
	ТаблицаОформлено = РегистрыНакопления.ТоварыКОтгрузке.ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, Объект.Ссылка, СкладОтправитель);
	
	ТаблицаОтгружено = РегистрыНакопления.ТоварыКОтгрузке.ОтгруженоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, СкладОтправитель);
	
	КлючевыеПоля = "Распоряжение, " + КлючевыеПоля;
	
	// Получение разницы между ОтгруженоОрдерами и Накладными (кроме текущей)
	ТаблицаОтгруженоОстаток = НакладныеСервер.ВычестьТаблицу(ТаблицаОтгружено, ТаблицаОформлено, КлючевыеПоля);
	ТаблицаОтгруженоОстаток.Индексы.Добавить(КлючевыеПоля);
	
	// Таблица принято
	ТаблицаОформленоПоПриемке = РегистрыНакопления.ТоварыКОформлениюПоступления.ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, Объект.Ссылка, СкладПолучатель);
	
	ТаблицаПринято = РегистрыНакопления.ТоварыКОформлениюПоступления.ПринятоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, СкладПолучатель);
	
	// Получение разницы между ОтгруженоОрдерами и Накладными (кроме текущей)
	ТаблицаПринятоОстаток = НакладныеСервер.ВычестьТаблицу(ТаблицаПринято, ТаблицаОформленоПоПриемке, КлючевыеПоля);
	ТаблицаПринятоОстаток.Индексы.Добавить(КлючевыеПоля);
	
	ТаблицаОтгруженоОстаток.Колонки.Распоряжение.Имя = "ЗаказНаПеремещение";
	ТаблицаПринятоОстаток.Колонки.Распоряжение.Имя = "ЗаказНаПеремещение";
	
	МассивНазначенийЗаказа = Новый Массив();
	Для Каждого Заказ Из МассивЗаказов Цикл
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			НазначениеЗаказа = Документы.КорректировкаНазначенияТоваров.ПолучитьНазначениеЗаказа(Заказ);
			Если ЗначениеЗаполнено(НазначениеЗаказа) Тогда
				МассивНазначенийЗаказа.Добавить(НазначениеЗаказа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОтгруженоОстаток.Колонки.Назначение.Имя = "НазначениеОтправителя";
	ТаблицаОтгруженоОстаток.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаОтгруженоОстаток.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
	
	ТаблицаОтгруженоСобственныхНазначений = ТаблицаОтгруженоОстаток.СкопироватьКолонки();
	ТаблицаОтгруженоСтороннихНазначений = ТаблицаОтгруженоОстаток.СкопироватьКолонки();
	ТаблицаОтгруженоНеОбособленно = ТаблицаОтгруженоОстаток.СкопироватьКолонки();
	
	Для Каждого Строка Из ТаблицаОтгруженоОстаток Цикл
		Если Не ЗначениеЗаполнено(Строка.НазначениеОтправителя) Тогда
			// Назначение получателя может быть как заполнено так и нет
			НоваяСтрока = ТаблицаОтгруженоНеОбособленно.Добавить();
		ИначеЕсли МассивНазначенийЗаказа.Найти(Строка.НазначениеОтправителя) <> Неопределено Тогда
			// Назначение получателя должно быть пустой ссылкой
			НоваяСтрока = ТаблицаОтгруженоСобственныхНазначений.Добавить();
		Иначе
			// Назначение получателя должно быть равно текущему назначению
			НоваяСтрока = ТаблицаОтгруженоСтороннихНазначений.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	// Вычитание количества из таблицы ТаблицаПринятоОстаток которое можно сопоставить с таблицей ТаблицаОтгруженоСтороннихНазначений
	Для Каждого Строка Из ТаблицаОтгруженоСтороннихНазначений Цикл
		Строка.Назначение = Строка.НазначениеОтправителя;
	КонецЦикла;
		
	РаспределениеПриемкиНаСторонниеНазначения = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоСтороннихНазначений, 
		ТаблицаПринятоОстаток, 
		"Номенклатура, Характеристика, Назначение", 
		"Назначение");
	
	ТаблицаОтгруженоСтороннихНазначенийСНазначениями = РаспределениеПриемкиНаСторонниеНазначения.РаспределенноеКоличество;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РаспределениеПриемкиНаСторонниеНазначения.НеРаспределенноеКоличество, ТаблицаОтгруженоСтороннихНазначенийСНазначениями);
	
	// Заполнение поля "Назначение" в таблице ТаблицаОтгруженоНеОбособленно, из оставшихся строк таблицы ТаблицаПринятоОстаток
	// ТаблицаПринятоОстаток должна содержать только заполненные назначения
	КоличествоСтрок = ТаблицаПринятоОстаток.Количество() - 1;
	Для н = 0 По КоличествоСтрок Цикл
		ТекущийИндекс = КоличествоСтрок - н;
		Если Не ЗначениеЗаполнено(ТаблицаПринятоОстаток[ТекущийИндекс].Назначение) Тогда
			ТаблицаПринятоОстаток.Удалить(ТекущийИндекс);
		КонецЕсли;
	КонецЦикла;
	
	РаспределениеПриемкиНаНеОбособленнуюОтгрузку = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоНеОбособленно, 
		ТаблицаПринятоОстаток, 
		"Номенклатура, Характеристика", 
		"Назначение");
		
	ТаблицаОтгруженоНеОбособленноСНазначениями = РаспределениеПриемкиНаНеОбособленнуюОтгрузку.РаспределенноеКоличество;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РаспределениеПриемкиНаНеОбособленнуюОтгрузку.НеРаспределенноеКоличество, ТаблицаОтгруженоНеОбособленноСНазначениями);
	
	// Заполнение кодов строк
	
	ПоляОтбора = "ЗаказНаПеремещение, Номенклатура, Характеристика, Назначение, НазначениеОтправителя";
	ЗаполняемоеПоле = "КодСтроки";
	
	РезультатРаспределенияСобственныхНазначений	 = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоСобственныхНазначений, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
	РезультатРаспределенияСтороннихНазначений	 = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоСтороннихНазначенийСНазначениями, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
	РезультатРаспределенияНеОбособленно			 = НакладныеСервер.РаспределитьОстаткиНаТаблицу(ТаблицаОтгруженоНеОбособленноСНазначениями, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
	
	ПоляОтбора = "ЗаказНаПеремещение, Номенклатура, Характеристика";
	
	ДораспределениеСтороннихНазначений 	= НакладныеСервер.РаспределитьОстаткиНаТаблицу(РезультатРаспределенияСтороннихНазначений.НеРаспределенноеКоличество, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
	ДораспределениеНеОбособленно 		= НакладныеСервер.РаспределитьОстаткиНаТаблицу(РезультатРаспределенияНеОбособленно.НеРаспределенноеКоличество, 
		ТаблицаКОформлениюОстаток, 
		ПоляОтбора, 
		ЗаполняемоеПоле);
	
	// Объединение результатов таблиц
	
	ТаблицаОтгруженоСДаннымиПриемки = РезультатРаспределенияСобственныхНазначений.РаспределенноеКоличество;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРаспределенияСобственныхНазначений.НеРаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРаспределенияСтороннихНазначений.РаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДораспределениеСтороннихНазначений.РаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДораспределениеСтороннихНазначений.НеРаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРаспределенияНеОбособленно.РаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДораспределениеНеОбособленно.РаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДораспределениеНеОбособленно.НеРаспределенноеКоличество, ТаблицаОтгруженоСДаннымиПриемки);
	
	// ТаблицаОтгруженоОстаток будет уменьшена на количество из ТаблицаНакладная
	КлючевыеПоля = "ЗаказНаПеремещение, " + ПараметрыЗаполнения.КлючевыеПоля;
	ТаблицаСуществующихСтрок = НакладныеСервер.МинимумТаблиц(ТаблицаОтгруженоСДаннымиПриемки, ТаблицаНакладная, КлючевыеПоля);
	
	// Оставшиеся строки
	ТаблицаНовыхСтрок = Документы.ПеремещениеТоваров.ДополнитьСтрокиТаблицыПерезаполненияПоЗаказу(ТаблицаОтгруженоСДаннымиПриемки);
		
	ТЧПерезаполнена = РегистрыСведений.ДанныеВнутреннихДокументов.ПерезаполнитьТоварыНакладной(
		ТаблицаСуществующихСтрок, ТаблицаНовыхСтрок, Объект.Товары, 
			ПараметрыЗаполнения.КлючевыеПоля + ", " + ПараметрыЗаполнения.ДополнительныеПоляТаблицыДокумента);
	
	Если ТЧПерезаполнена Тогда
		// Пересчет поля КоличествоУпаковок
		Документы.ПеремещениеТоваров.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Объект.Товары, ПараметрыЗаполнения);
		
		// Постобработка индивидуальная для документа
		ОбновитьНазначениеОтправителяВТаблицеТовары();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
		ОбновитьИнформациюПоЗаказам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОРезультатахЗаполнения()
	
	Если РезультатыЗаполнения <> Неопределено Тогда
		
		Если РезультатыЗаполнения.ЕстьНесобранные Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru='Количество перезаполнено';uk='Кількість перезаповнено'"),,
				НСтр("ru='В строках перезаполнено количество с учетом собирающихся на складе товаров.';uk='У рядках перезаповнена кількість з урахуванням на складі товарів, що збираються.'"),
				БиблиотекаКартинок.Информация32);
			
		Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru='Количество перезаполнено';uk='Кількість перезаповнено'"),,
				НСтр("ru='В строках перезаполнено количество.';uk='У рядках перезаповнено кількість.'"),
			БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТовар, Объект.ПеремещениеПоЗаказам);
	КонецЦикла;
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
	
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,
		Объект.ВидыЗапасов,
		УникальныйИдентификатор,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомандуПодобратьПоЗаказамОрдерам(УстанавливатьДоступность = Истина)
	
	СтруктураПараметров = Новый Структура("ОрдернаяСхемаПриОтгрузке, ИспользоватьЗаказы, ИспользоватьНакладныеПоНесколькимЗаказам",
		ОрдернаяСхемаПриОтгрузке, ИспользоватьЗаказыНаПеремещение, ИспользоватьПеремещениеПоНесколькимЗаказам);
	
	НакладныеСервер.НастроитьКомандуПодобратьПоЗаказамОрдерам(
		Элементы.ТоварыПодобратьТоварыПоЗаказамОрдерам, СтруктураПараметров, УстанавливатьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы);
		
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(
		СписокЗаказов,
		Объект.ЗаказНаПеремещение,
		НадписьЗаголовокЗаказы,
		Элементы,
		Элементы.ТоварыГруппаЗаказНаПеремещение,
		Объект.Товары,
		"ЗаказНаПеремещение",
		ИспользоватьПеремещениеПоНесколькимЗаказам);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоЗаказуСервер()
	
	Объект.Товары.Очистить();
	
	МассивЗаказов = Новый Массив();
	Если Не ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		МассивЗаказов.Добавить(Объект.ЗаказНаПеремещение);
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура("Организация, Подразделение, СкладОтправитель, СкладПолучатель, Ссылка");
	ЗаполнитьЗначенияСвойств(РеквизитыШапки, Объект);
	
	ДанныеОтбора = Новый Структура("МассивЗаказов, РеквизитыШапки", МассивЗаказов, РеквизитыШапки);
	
	ПорядокОформления    = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить();
	ПорядокСначалаОрдера = ПорядокОформления = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера;
	ДанныеОтбора.Вставить("ЗаполнятьПоОрдеру", ОрдернаяСхемаПриОтгрузке И ПорядокСначалаОрдера);
	РезультатЗапроса = Документы.ПеремещениеТоваров.РезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, "ЗаполнениеПоЗаказам");
	
	Если ДанныеОтбора.ЗаполнятьПоОрдеру Тогда
		
		ПоляКлюча = "ЗаказНаПеремещение, Номенклатура, Характеристика, НазначениеОтправителя, Серия";
		НакладныеСервер.ЗаполнитьПоказательКоличествоПоОрдерам(РезультатЗапроса.ТаблицаОформить, РезультатЗапроса.ТаблицаОтгружено, ПоляКлюча);
		УдалитьСтрокиСверхЗаказа(РезультатЗапроса.ТаблицаОформить);
		НакладныеСервер.ЗаполнитьПоВарианту(Объект.Товары, РезультатЗапроса.ТаблицаОформить, "ЗаполнятьПоОрдеру");
		
	Иначе
		
		НакладныеСервер.ЗаполнитьПоВарианту(Объект.Товары, РезультатЗапроса.ТаблицаОформить, "ЗаполнятьПоЗаказу");
		
	КонецЕсли;
	
	ОбновитьНазначениеОтправителяВТаблицеТовары();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();

КонецФункции

&НаСервере
Функция УдалитьСтрокиСверхЗаказа(Таблица)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаказНаПеремещение) И Не ЗначениеЗаполнено(СтрокаТаблицы.КодСтроки) Тогда
			Таблица.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
КонецФункции

&НаКлиенте
Процедура ОповеститьОПроведенииДокумента(ПараметрыЗаписи)

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимЗаписи",      ПараметрыЗаписи.РежимЗаписи);
	ПараметрыОповещения.Вставить("ЕстьРаспоряжение", Объект.ПеремещениеПоЗаказам);

	Оповестить("Запись_ПеремещениеТоваров", ПараметрыОповещения, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличнуюЧастьТоварыПриИзмененииСклада(ОтвязатьВсеСтрокиОтЗаказа, ОчищатьСтроки, КэшированныеЗначения)
	
	Если Объект.ПеремещениеПоЗаказам И Объект.Товары.Количество() > 0 И ОчищатьСтроки Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Если ОтвязатьВсеСтрокиОтЗаказа Тогда
		ОтвязатьОтЗаказаСервер(КэшированныеЗначения);
	КонецЕсли;
	
	Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		ОбновитьИнформациюПоЗаказам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийИзмененныеСтроки);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНазначениеОтправителяВТаблицеТовары()

	Если Не Объект.ПеремещениеПоЗаказам Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.НазначениеОтправителя = СтрокаТовары.Назначение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНазначениеОтправителя()

	Если Не Объект.ПеремещениеПоЗаказам Тогда
		СтрокаТовары = Элементы.Товары.ТекущиеДанные;
		СтрокаТовары.НазначениеОтправителя = СтрокаТовары.Назначение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаКлиенте
Процедура СпособМестоДоставкиПриИзмененииЗавершение(КодВозврата, Элемент) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		УдалитьРаспоряжениеИзТранспортныхНакладных();		
	Иначе
		Объект.СпособДоставки = ТекущийСпособДоставки;
	КонецЕсли;
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
		
КонецПроцедуры

#КонецОбласти

#Область ТранспортнаяНакладная

&НаСервере
Функция ОбработкаВыбораТранспортнойНакладной(ВыбраннаяТранспортнаяНакладная)
	
	Если ЗначениеЗаполнено(ВыбраннаяТранспортнаяНакладная) Тогда
		
		ТранспортнаяНакладнаяОбъект = ВыбраннаяТранспортнаяНакладная.ПолучитьОбъект();
		НоваяСтрока = ТранспортнаяНакладнаяОбъект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Объект.Ссылка;
		Попытка
			ТранспортнаяНакладнаяОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки; 		
		
	КонецЕсли;
	
	ДанныеТранспортныхНакладных = ПолучитьИнформациюТранспортныхНакладных();
	
	Возврат ДанныеТранспортныхНакладных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформациюТранспортныхНакладных(Параметры, Форма)
	
	Форма.КоличествоТранспортныхНакладных = Параметры.КоличествоТранспортныхНакладных;
		
	Если Форма.КоличествоТранспортныхНакладных = 0 Тогда
		Форма.Элементы.ГруппаТранспортныеНакладныеСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаНетТранспортныхНакладных;
	ИначеЕсли Форма.КоличествоТранспортныхНакладных = 1 Тогда
		Форма.Элементы.ГруппаТранспортныеНакладныеСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаОднаТранспортнаяНакладная;
		Форма.ТранспортнаяНакладная = Параметры.ТранспортнаяНакладная;
		Форма.ТранспортнаяНакладнаяТекст = НСтр("ru='ТТН';uk='ТТН'") + " " + Параметры.СокращенноеНаименованиеТранспортнойНакладной;
	Иначе
		Форма.Элементы.ГруппаТранспортныеНакладныеСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаНесколькоТранспортныхНакладных;
		ЗаголовокКоманды = НСтр("ru='ТТН (%КоличествоТранспортныхНакладных%)';uk='ТТН (%КоличествоТранспортныхНакладных%)'");
		ЗаголовокКоманды = СтрЗаменить(ЗаголовокКоманды, "%КоличествоТранспортныхНакладных%", Форма.КоличествоТранспортныхНакладных);
		Форма.Элементы.ОткрытьСписокТН.Заголовок = ЗаголовокКоманды;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбновитьИнформациюТранспортныхНакладных()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда 
		ДанныеТранспортныхНакладных = ПолучитьИнформациюТранспортныхНакладных();
		ОбновитьИнформациюТранспортныхНакладных(ДанныеТранспортныхНакладных, ЭтаФорма);
	Иначе
		Элементы.ГруппаТранспортныеНакладныеСтраницы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюТранспортныхНакладных()
	
	Возврат Документы.ТранспортнаяНакладная.ПолучитьИнформациюТранспортныхНакладных(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура УдалитьРаспоряжениеИзТранспортныхНакладных()
	Документы.ТранспортнаяНакладная.УдалитьРаспоряжениеИзТранспортныхНакладных(Объект.Ссылка);
	ПолучитьОбновитьИнформациюТранспортныхНакладных();
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыТранспортныхНакладныхНаСервере()
	Документы.ТранспортнаяНакладная.ОбновитьРеквизитыТранспортныхНакладных(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьСозданияТранспортнойНакладной()
	
	МожноСоздатьТТН = Истина;
	
	// Проверка способов доставки заказов
	
	Если Объект.ПеремещениеПоЗаказам Тогда
		
		ПроверитьСпособыДоставкиЗаказов(МожноСоздатьТТН);
		
	Иначе
		
		СпособыДоставкиСНашимУчастием = ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками);
		
		Если СпособыДоставкиСНашимУчастием.Найти(Объект.СпособДоставки) <> Неопределено Тогда	
			ТекстСообщения = НСтр("ru='Невозможно создать транспортную накладную, т.к. используется способ доставки ""%СпособДоставки%"". Транспортные накладные в этом случае создаются при оформлении задания на перевозку.';uk='Неможливо створити транспортну накладну, оскільки використовується спосіб доставки ""%СпособДоставки%"". Транспортні накладні в цьому випадку створюються при оформленні завдання на перевезення.'");
			Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента") Тогда 
				СпособДоставки = НСтр("ru='До склада-получателя';uk='До складу-одержувача'");
			Иначе
				СпособДоставки = Объект.СпособДоставки;
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособДоставки%", СпособДоставки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.СпособДоставки");	
			МожноСоздатьТТН = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
		
	Если МожноСоздатьТТН И
		(НЕ ЗначениеЗаполнено(Объект.Ссылка)
			ИЛИ НЕ Объект.Проведен
			ИЛИ Модифицированность) Тогда 
		
		ТекстВопроса = НСтр("ru='Ввод транспортных накладных возможен только после проведения документа.';uk='Введення транспортних накладних можливе тільки після проведення документа.'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Провести';uk='Провести'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена';uk='Відмінити'"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьВозможностьСозданияТранспортнойНакладнойОбработкаОтвета", ЭтотОбъект), ТекстВопроса, СписокКнопок);
		Возврат;
	КонецЕсли;
		
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(МожноСоздатьТТН);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСпособыДоставкиЗаказов(МожноСоздатьТТН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.ЗаказНаПеремещение КАК Заказ
	|ПОМЕСТИТЬ ТаблицаЗаказы
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.Заказ КАК Заказ,
	|	ТаблицаЗаказы.Заказ.СпособДоставки КАК СпособДоставки
	|ИЗ
	|	ТаблицаЗаказы КАК ТаблицаЗаказы
	|ГДЕ
	|	ТаблицаЗаказы.Заказ.СпособДоставки В (&СпособыДоставкиСНашимУчастием)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаЗаказы.Заказ) КАК Количество
	|ИЗ
	|	ТаблицаЗаказы КАК ТаблицаЗаказы";	
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СпособыДоставкиСНашимУчастием", ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками));
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаЗаказы = Результаты[1].Выбрать();
	ВыборкаКоличество = Результаты[2].Выбрать();
	
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru='В заказе ""%Заказ%"" указан способ доставки ""%СпособДоставки%"". Транспортные накладные в этом случае создаются при оформлении задания на перевозку.';uk='У замовленні ""%Заказ%"" вказаний спосіб доставки ""%СпособДоставки%"". Транспортні накладні в цьому випадку створюються при оформленні завдання на перевезення.'");
		Если ВыборкаЗаказы.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента") Тогда
			СпособДоставки = НСтр("ru='До склада-получателя';uk='До складу-одержувача'");
		Иначе 
			СпособДоставки = ВыборкаЗаказы.СпособДоставки;
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособДоставки%", СпособДоставки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%",          ВыборкаЗаказы.Заказ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
	ВыборкаКоличество.Следующий();
	
	// Если выше мы поругались на все заказы из ТЧ Товары, то создать ТТН невозможно вообще.
	Если ВыборкаКоличество.Количество = ВыборкаЗаказы.Количество() Тогда 
		МожноСоздатьТТН = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(МожноСоздатьТТН)
	
	Если Не МожноСоздатьТТН Тогда
		Возврат; // Проверки не были пройдены, продолжать создание ТТН не нужно
	КонецЕсли;
	
	Если ПроверитьНаличиеТранспортныхНакладных() Тогда
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Оформить';uk='Оформити'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Дополнить';uk='Доповнити'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена';uk='Відмінити'"));
		
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТранспортнуюНакладнуюЗавершение", ЭтотОбъект), НСтр("ru='Оформить новую ТТН или дополнить существующую?';uk='Оформити нову ТТН або доповнити існуючу?'"), СписокКнопок);
	Иначе
		ОформитьТранспортнуюНакладную();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт 
	
	Результат = Истина;
	
	Если КодОтвета = КодВозвратаДиалога.ОК И ПроверитьЗаполнение() Тогда
		Попытка
			Результат = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Исключение
			ПоказатьПредупреждение(,НСтр("ru='Не удалось выполнить проведение документа';uk='Не вдалося виконати проведення документа'"));
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТранспортнуюНакладнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОформитьТранспортнуюНакладную();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВыбратьТранспортнуюНакладную();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОформитьТранспортнуюНакладную()
	
	СозданныеТТН = ОформитьТранспортныеНакладныеНаСервере();
	
	Если СозданныеТТН.Количество() = 1 Тогда 
		ПоказатьЗначение(, СозданныеТТН[0]);
	ИначеЕсли СозданныеТТН.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТранспортныеНакладные", СозданныеТТН);
		ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.СозданныеТранспортныеНакладные", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТранспортнуюНакладную()
	
	АдресХранилища = ПолучитьАдресХранилищаСПараметрамиОтбораТТН();
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыОтбора.Вставить("ДатаНачала", Объект.Дата - 14 * 24 * 60 * 60);
	ПараметрыОтбора.Вставить("АдресХранилища", АдресХранилища);
		
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.ФормаВыбора", 
				ПараметрыФормы, 
				ЭтаФорма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
				
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХранилищаСПараметрамиОтбораТТН()
	
	ТаблицаПараметровОтбора = Документы.ТранспортнаяНакладная.ПолучитьПараметрыОтбораТТН(Объект.Ссылка);
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПараметровОтбора);
	
КонецФункции	

&НаСервере
Функция ПроверитьНаличиеТранспортныхНакладных()

	Отбор = Новый Структура("ДокументОснование, Дата",Объект.Ссылка,Объект.Дата);
	
	Возврат Документы.ТранспортнаяНакладная.ПроверитьНаличиеОформленныхТранспортныхНакладных(Отбор);

КонецФункции

&НаСервере
Функция ОформитьТранспортныеНакладныеНаСервере()
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	СозданныеТТН = Документы.ТранспортнаяНакладная.СоздатьТранспортныеНакладные(МассивОбъектов);
	
	Если СозданныеТТН.Количество() <> 0 Тогда 
		ПолучитьОбновитьИнформациюТранспортныхНакладных();
	КонецЕсли;
	
	Возврат СозданныеТТН;
	
КонецФункции
#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);

		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.ПеремещениеПоЗаказам);
		ТекущаяСтрока.ЗаказНаПеремещение = ЗаказВСтрокеСверхЗаказа(Объект.ПеремещениеПоЗаказам, Объект.ЗаказНаПеремещение);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	ОбновитьНазначениеОтправителяВТаблицеТовары();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов, 
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки") И НЕ ЗначениеЗаполнено(Объект.ЗаказНаПеремещение));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ЗначениеЗаполнено(Объект.ЗаказНаПеремещение));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУстановитьВидимостьСерийДоступностьПерезаполнитьПоОтгрузке()
	
	НастроитьКомандуПодобратьПоЗаказамОрдерам();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров));
	Элементы.ГруппаИнформацияНеобходимыСтатусы.Видимость = ВыводитьСообщениеПоИспользованиюСтатусов();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	УстановитьВидимостьЭлементовСерий();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоРаспоряжениеНакладная(Ссылка, ОрдернаяСхемаПриОтгрузке)
	
	Возврат ОрдернаяСхемаПриОтгрузке И НакладныеСервер.ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Ссылка);
	
КонецФункции

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеПоЗаказуПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.ПеремещениеПоЗаказам = Не Объект.ПеремещениеПоЗаказам;
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПеремещенияПоНесколькимЗаказам(КэшированныеЗначения);
	
	Если Не Объект.ПеремещениеПоЗаказам
		И Объект.Товары.Количество() > 0 Тогда
		ОповеститьОбОтвязкеСтрокОтЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
		СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеПоЗаказуУстановленоЗаказВыбранЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.ПеремещениеПоЗаказам = Не Объект.ПеремещениеПоЗаказам;
		Возврат;
	КонецЕсли;
	
	ЗаказНаПеремещение = ДополнительныеПараметры.ЗаказНаПеремещение;
	
	Объект.ЗаказНаПеремещение = ЗаказНаПеремещение;
	
	ЕстьСтрокиДоЗаполнения = Объект.Товары.Количество() > 0;
	
	ПриИзмененииПеремещенияПоНесколькимЗаказам(КэшированныеЗначения);
	
	Если ЕстьСтрокиДоЗаполнения Тогда
		ОповеститьОПривязкеСтрокКЗаказам(ЗаказНаПеремещение);
	Иначе
		ОповеститьОЗаполненииПоОстаткамЗаказов(ЗаказНаПеремещение);
		Объект.ПеремещениеПоЗаказам = Объект.Товары.Количество() > 0;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовСверхЗаказа(Элементы, Объект.ПеремещениеПоЗаказам);
	
КонецПроцедуры

&НаСервере
Процедура ОтвязатьОтЗаказаСервер(КэшированныеЗначения, ВсеСтроки = Истина)
	
	Если ВсеСтроки Тогда
		КоллекцияСтрок = Объект.Товары;
	Иначе
		КоллекцияСтрок = Элементы.Товары.ВыделенныеСтроки;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из КоллекцияСтрок Цикл
		
		Если ВсеСтроки Тогда
			СтрокаТаблицы = ИдентификаторСтроки;
			ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
		Иначе
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		КонецЕсли;
		
		НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(СтрокаТаблицы, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		СтрокаТаблицы.КодСтроки = 0;
		СтрокаТаблицы.РасхождениеЗаказ = 1;
		СтрокаТаблицы.Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
		СтрокаТаблицы.НазначениеОтправителя = Справочники.Назначения.ПустаяСсылка();
		СтрокаТаблицы.Назначение = Справочники.Назначения.ПустаяСсылка();
		СтрокаТаблицы.ЗаказНаПеремещение = ЗаказВСтрокеСверхЗаказа(Объект.ПеремещениеПоЗаказам, Объект.ЗаказНаПеремещение);
		
		// Переподчиним строки серий
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,ПараметрыУказанияСерий,ИдентификаторСтроки, КэшированныеЗначения);
		
	КонецЦикла;
	
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаказВСтрокеСверхЗаказа(ПеремещениеПоЗаказам, ЗаказНаПеремещение)
	
	Возврат ?(ПеремещениеПоЗаказам И ЗначениеЗаполнено(ЗаказНаПеремещение), ЗаказНаПеремещение, Неопределено);
	
КонецФункции

&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу()
	
	Если Объект.Товары.Количество() = 0 
		ИЛИ НЕ Объект.ПеремещениеПоЗаказам
		ИЛИ НЕ ИспользоватьЗаказыНаПеремещение Тогда
		
		Элементы.КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		Элементы.КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
		НадписьРасхождениеЗаказ = "";
		
		Если Объект.Товары.Количество() > 0 Тогда
			Для каждого СтрокаТовары Из Объект.Товары Цикл
				СтрокаТовары.РасхождениеЗаказ = 0;
			КонецЦикла;
		КонецЕсли;
		
		КоличествоРасхождений = 0;
		
		Возврат;
	КонецЕсли;
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Товары, НадписьРасхождениеЗаказ, ЭлементыФормы)
	КоличествоРасхождений = Товары.Итог("РасхождениеЗаказ");
	
	Если КоличествоРасхождений > 0 Тогда
		ЭлементыФормы.КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		ЭлементыФормы.КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		НадписьРасхождениеЗаказ = СтрЗаменить(НСтр("ru='Строк сверх заказа';uk='Рядків понад замовлення'") + НСтр("ru=': %КоличествоРасхождений%';uk=': %КоличествоРасхождений%'"), "%КоличествоРасхождений%", КоличествоРасхождений);
	Иначе
		ЭлементыФормы.КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		ЭлементыФормы.КартинкаРасхождениеЗаказы.Картинка = Новый Картинка();
		НадписьРасхождениеЗаказ = "";
		КоличествоРасхождений = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовСверхЗаказа(Элементы, ПеремещениеПоЗаказам)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ТоварыОтвязатьОтЗаказа");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюОтвязатьОтЗаказа");
	МассивЭлементов.Добавить("ТоварыГруппаЗаказКлиента");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ПеремещениеПоЗаказам);

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)

	Если СтрокиОтвязаны Тогда
		ТекстОповещения = НСтр("ru='В документе от заказов отвязано строк (%%Количество%%).';uk='В документі від замовлень відв''язано рядків (%%Количество%%).'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Количество%%", КоличествоОтработанныхСтрок);
		ПоказатьОповещениеПользователя(
			НСтр("ru='Строки отвязаны';uk='Рядки відв''язані'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='Строки не отвязаны';uk='Рядки не відв''язані'"),
			,
			НСтр("ru='Ни одна строка не была отвязана.';uk='Жоден рядок не був відв''язаний.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтклоненияОтЗаказа()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекСтрока, Объект.ПеремещениеПоЗаказам);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ПеремещениеПоЗаказам)
	
	Если ПеремещениеПоЗаказам Тогда
		Если ТекущаяСтрока.КодСтроки = 0 Тогда
			ТекущаяСтрока.РасхождениеЗаказ = 1;
		Иначе
			ТекущаяСтрока.РасхождениеЗаказ = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока)
	
	// Если текущая строка не связана с заказом
	Если ТекущаяСтрока.КодСтроки = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	// Если ни один из ключевых реквизитов не изменился
	Если ТекущаяСтрока.Номенклатура = ПредыдущиеРеквизитыСтроки.Номенклатура
		И ТекущаяСтрока.Характеристика = ПредыдущиеРеквизитыСтроки.Характеристика Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ТекстВопроса = НСтр("ru='Редактируемая строка перестанет быть связанной со строкой заказа. Продолжить?';uk='Редагований рядок перестане бути пов''язаним з рядком замовлення. Продовжити?'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	// Если пользователь потвердил изменение значения ключевого реквизита
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КодСтроки = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ДополнительныеПараметры.ТекущаяСтрока, Объект.ПеремещениеПоЗаказам);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	Иначе
		
		// Если пользователь отказался менять связанную строку, возвращем старые значения
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущаяСтрока, ПредыдущиеРеквизитыСтроки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
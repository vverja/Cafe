
#Область ПрограммныйИнтерфейс

#Область ПроцедурыВнесенияИВыемкиДС

// Создает документ ВнесениеДенежныхСредствВКассуККМ
//
// Параметры:
//  ВходныеДанные  - Структура - Структура данных с реквизитами создаваемого документа
//  ОписаниеОшибки - Строка - возвращаемое описание ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если создание документа выполнено успешно.
//
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Попытка
	
		НовыйДокумент = Документы.ВнесениеДенежныхСредствВКассуККМ.СоздатьДокумент();
		
		НовыйДокумент.Дата              = ВходныеДанные.Дата;
		НовыйДокумент.Организация       = ВходныеДанные.Организация;
		НовыйДокумент.Касса             = ВходныеДанные.Касса;
		НовыйДокумент.КассаККМ          = ВходныеДанные.КассаККМ;
		НовыйДокумент.СуммаДокумента    = ВходныеДанные.СуммаВнесения;
		НовыйДокумент.Валюта            = ВходныеДанные.Валюта;
		НовыйДокумент.ДокументОснование = ВходныеДанные.РасходныйКассовыйОрдер;
		НовыйДокумент.Кассир            = Пользователи.ТекущийПользователь();
		
		НовыйДокумент.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(НовыйДокумент.Организация);
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		
		Результат = Ложь;
		
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Создает документ ВыемкаДенежныхСредствИзКассыККМ
//
// Параметры:
//  ВходныеДанные  - Структура - Структура данных с реквизитами создаваемого документа
//  ОписаниеОшибки - Строка - возвращаемое описание ошибки
//
// Возвращаемое значение:
//   Булево - Истина, если создание документа выполнено успешно.
//
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Попытка
		
		НовыйДокумент = Документы.ВыемкаДенежныхСредствИзКассыККМ.СоздатьДокумент();
		
		Реквизиты = Справочники.КассыККМ.РеквизитыКассыККМ(ВходныеДанные.КассаККМ);
		
		НовыйДокумент.Дата           = ВходныеДанные.Дата;
		НовыйДокумент.Организация    = Реквизиты.Организация;
		НовыйДокумент.Валюта         = Реквизиты.Валюта;
		НовыйДокумент.КассаККМ       = ВходныеДанные.КассаККМ;
		НовыйДокумент.СуммаДокумента = ВходныеДанные.СуммаВнесения;
		НовыйДокумент.Кассир         = Пользователи.ТекущийПользователь();
		
		НовыйДокумент.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(НовыйДокумент.Организация);
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		Результат = Ложь;
		
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ДобавитьЭлемент(Форма, ИмяКоманды, Родитель, Индекс)
	
	НоваяКнопка = Форма.Элементы.Добавить(ИмяКоманды + "Дубль", Тип("КнопкаФормы"), Форма.Элементы[Родитель + Индекс]);
	
	Возврат НоваяКнопка;
	
КонецФункции

Процедура ПерегруппироватьКнопкиФормы(Форма, ЭлементыНаПерегруппировку) Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельОперацииНадЧеком",   Новый Массив);
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельКонтекстныеКоманды", Новый Массив);
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельОплата",             Новый Массив);
	
	Для Каждого Элемент Из ЭлементыНаПерегруппировку Цикл
		Для Каждого КлючИЗначение Из Соответствие Цикл
			Если Найти(Элемент.Родитель.Имя, КлючИЗначение.Ключ) Тогда
				КлючИЗначение.Значение.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		// Удаление добавленных ранее элементов формы
		Дубль = Форма.Элементы.Найти(Элемент.Имя + "Дубль");
		Если Дубль <> Неопределено Тогда
			Форма.Элементы.Удалить(Дубль);
		КонецЕсли;
		Декорация = Форма.Элементы.Найти(Элемент.Имя + "Декорация" + "Дубль");
		Если Декорация <> Неопределено Тогда
			Форма.Элементы.Удалить(Декорация);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Соответствие Цикл
	
		Индекс = 0;
		НомерГруппы = 1;
		ИзмененыЭлементы = Ложь;
		Для Каждого Элемент Из КлючИЗначение.Значение Цикл
			
			Если Не Элемент.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			Если Индекс = 2  Тогда
				НомерГруппы = НомерГруппы + 1;
				Индекс = 0;
			КонецЕсли;
			
			СозданныйЭлемент = ДобавитьЭлемент(Форма, Элемент.Имя, КлючИЗначение.Ключ, НомерГруппы);
			СозданныйЭлемент.ИмяКоманды = Элемент.ИмяКоманды;
			СозданныйЭлемент.Ширина = Элемент.Ширина;
			СозданныйЭлемент.Высота = Элемент.Высота;
			СозданныйЭлемент.ЦветФона = Элемент.ЦветФона;
			СозданныйЭлемент.Видимость = Элемент.Видимость;
			
			Элемент.Видимость = Ложь;
			
			ИзмененыЭлементы = Истина;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Если ИзмененыЭлементы И Индекс < 2 Тогда
			СозданныйЭлемент = ДобавитьЭлемент(Форма, Элемент.Имя + "Декорация", КлючИЗначение.Ключ, НомерГруппы);
			СозданныйЭлемент.ИмяКоманды = Элемент.ИмяКоманды;
			СозданныйЭлемент.Ширина = Элемент.Ширина;
			СозданныйЭлемент.Высота = Элемент.Высота;
			СозданныйЭлемент.ЦветФона = Элемент.ЦветФона;
			СозданныйЭлемент.Видимость = Истина;
			СозданныйЭлемент.Доступность = Ложь;
			СозданныйЭлемент.Заголовок = " ";
		КонецЕсли;
		
		Если Не ИзмененыЭлементы Тогда
			Дельта = 0;
		Иначе
			Дельта = 1;
		КонецЕсли;
		
		Если НомерГруппы < 4 Тогда
			Для Индекс = НомерГруппы + Дельта По 4 Цикл
				ИмяЭлемента = КлючИЗначение.Ключ + Индекс;
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
					Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НомерГруппы + Дельта = 1 Тогда
			ИмяЭлемента = "Разделитель" + КлючИЗначение.Ключ;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
				Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьКомандыПечати(Форма) Экспорт
	
	Для Каждого КнопкаПечати Из Форма.Элементы.ПодменюПечать.ПодчиненныеЭлементы Цикл
		КнопкаПечати.ТолькоВоВсехДействиях = Истина;
	КонецЦикла;
	
	КомандыПечати = Новый Массив;
	Для Каждого КнопкаПечати Из Форма.Элементы.ПодменюПечать.ПодчиненныеЭлементы Цикл
		КомандыПечати.Добавить(
			Новый Структура("Заголовок, ИмяКоманды", Форма.Команды[КнопкаПечати.ИмяКоманды].Заголовок, КнопкаПечати.ИмяКоманды));
	КонецЦикла;
	Форма.АдресКомандПечатиВоВременномХранилище = ПоместитьВоВременноеХранилище(КомандыПечати, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура НастроитьБыстрыеТоварыИГорячиеКлавиши(Форма, Выборка) Экспорт
	
	Если Форма.ГорячиеКлавишиНастроены Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "БыстрыеТовары")
		И Форма.БыстрыеТовары.Количество() = 0 Тогда
		
		БыстрыеТовары = Выборка.БыстрыеТовары.Получить();
		
		Если БыстрыеТовары.Количество() > 0 Тогда
			
			Для Каждого СтрокаТЧ Из БыстрыеТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					
					ИмяКнопки = "БыстрыйТовар_" + БыстрыеТовары.Индекс(СтрокаТЧ);
					
					НоваяКоманда = Форма.ЭтотОбъект.Команды.Добавить(ИмяКнопки);
					НоваяКоманда.Действие = "ВыбранБыстрыйТовар";
					Если ЗначениеЗаполнено(СтрокаТЧ.Заголовок) Тогда
						НоваяКоманда.Заголовок = СтрокаТЧ.Заголовок;
					Иначе
						НоваяКоманда.Заголовок = Строка(СтрокаТЧ.Номенклатура);
					КонецЕсли;
					НоваяКоманда.Отображение               = ОтображениеКнопки.Текст;
					НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
					НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша[СтрокаТЧ.Клавиша], СтрокаТЧ.Alt, СтрокаТЧ.Ctrl, СтрокаТЧ.Shift);
					
					НоваяКнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Форма.Элементы.ФормаГорячиеКлавишиБыстрыеТовары);
					НоваяКнопка.ТолькоВоВсехДействиях = Истина;
					НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
					
					НовыйТовар = Форма.БыстрыеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйТовар, СтрокаТЧ);
					НовыйТовар.ИмяКоманды = НоваяКоманда.Имя;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗапросДополнительныеДанныеОБыстрыхТоварах = Новый Запрос(
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка");
			
			ЗапросДополнительныеДанныеОБыстрыхТоварах.УстановитьПараметр("Товары", Форма.БыстрыеТовары.Выгрузить(,"Номенклатура"));
			
			ВыборкаДополнительныеДанныеОБыстрыхТоварах = ЗапросДополнительныеДанныеОБыстрыхТоварах.Выполнить().Выбрать();
			
			Пока ВыборкаДополнительныеДанныеОБыстрыхТоварах.Следующий() Цикл
				
				Отбор = Новый Структура("Номенклатура", ВыборкаДополнительныеДанныеОБыстрыхТоварах.Номенклатура);
				НайденныеСтрокиБыстрыеТовары = Форма.БыстрыеТовары.НайтиСтроки(Отбор);
				Для Каждого СтрокаБыстрогоТовара Из НайденныеСтрокиБыстрыеТовары Цикл
					СтрокаБыстрогоТовара.ТипНоменклатуры = ВыборкаДополнительныеДанныеОБыстрыхТоварах.ТипНоменклатуры;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормыСКомандами = Новый ТаблицаЗначений;
	ЭлементыФормыСКомандами.Колонки.Добавить("Элемент");
	ЭлементыФормыСКомандами.Колонки.Добавить("ИмяКоманды");
	Для каждого ЭлементФормы Из Форма.Элементы Цикл
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ЭлементФормы, "ИмяКоманды") И ЗначениеЗаполнено(ЭлементФормы.ИмяКоманды) Тогда
			НоваяСтрока = ЭлементыФормыСКомандами.Добавить();
			НоваяСтрока.Элемент = ЭлементФормы;
			НоваяСтрока.ИмяКоманды = ЭлементФормы.ИмяКоманды;
		КонецЕсли;
	КонецЦикла;
	
	КомандыФормы = Выборка.КомандыФормы.Получить();
	Для Каждого СтрокаТЧ Из КомандыФормы Цикл
		
		Команда = Форма.Команды.Найти(СтрокаТЧ.Команда);
		Если Команда = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеСочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[СтрокаТЧ.Клавиша], СтрокаТЧ.Alt, СтрокаТЧ.Ctrl, СтрокаТЧ.Shift);
		СтароеСочетаниеКлавишПредставление = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(Команда.СочетаниеКлавиш);
		НовоеСочетаниеКлавишПредставление  = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(НовоеСочетаниеКлавиш);
		
		НоваяКоманда = Команда;
		Если НовоеСочетаниеКлавишПредставление <> СтароеСочетаниеКлавишПредставление Тогда
			
			НоваяКоманда = Форма.ЭтотОбъект.Команды.Добавить(СтрокаТЧ.Команда + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_"));
			НоваяКоманда.Действие                  = Команда.Действие;
			НоваяКоманда.ИзменяетСохраняемыеДанные = Команда.ИзменяетСохраняемыеДанные;
			НоваяКоманда.Картинка                  = Команда.Картинка;
			НоваяКоманда.Отображение               = Команда.Отображение;
			НоваяКоманда.Подсказка                 = Команда.Подсказка;
			НоваяКоманда.Заголовок                 = СтрЗаменить(Команда.Заголовок, СтароеСочетаниеКлавишПредставление, НовоеСочетаниеКлавишПредставление);
			НоваяКоманда.СочетаниеКлавиш           = НовоеСочетаниеКлавиш;
			
			НайденныеЭлементыФормы = ЭлементыФормыСКомандами.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
			Для Каждого ЭлементФормы Из НайденныеЭлементыФормы Цикл
				ЭлементФормы.ИмяКоманды = НоваяКоманда.Имя;
				ЭлементФормы.Элемент.ИмяКоманды = НоваяКоманда.Имя;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаТЧ.Скрывать Тогда
			
			НайденныеЭлементыФормы = ЭлементыФормыСКомандами.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
			Для Каждого ЭлементФормы Из НайденныеЭлементыФормы Цикл
				ЭлементФормы.Элемент.Видимость = Ложь;
			КонецЦикла;
			
			ИмяКнопки = "ГорячаяКлавиша_" + КомандыФормы.Индекс(СтрокаТЧ);
			
			НоваяКнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Форма.Элементы.ФормаГорячиеКлавиши);
			НоваяКнопка.ТолькоВоВсехДействиях = Истина;
			НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
			НоваяКоманда.Заголовок = СтрЗаменить(Команда.Заголовок, СтароеСочетаниеКлавишПредставление, "");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ГорячиеКлавишиНастроены = Истина;
	
КонецПроцедуры

Процедура ПодписатьГорячиеКлавишиНаКнопках(Форма) Экспорт
	
	Для каждого Команда Из Форма.Команды Цикл
		ПредставлениеСочетанияКлавиш = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(Команда.СочетаниеКлавиш);
		Если СтрНайти(Команда.Заголовок, ПредставлениеСочетанияКлавиш) = 0 Тогда
			Команда.Заголовок = Команда.Заголовок + Символы.ПС + ПредставлениеСочетанияКлавиш;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает документ ВыемкаДенежныхСредствИзКассыККМ
//
// Параметры:
//  ЧекККМ  - ДокументСсылка.ЧекККМ - Чек ККМ, для которого требуется получить отчет о розничных продажах
//
// Возвращаемое значение:
//   ДокументСсылка.ОтчетОРозничныхПродажах - Найденный документ или пустая ссылка на отчет о розничных продажах.
//
Функция ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ЧекККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ЧекККМ.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЧекККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументРеализации;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьКорректностьЗаполненияАкцизныхМарок(Объект, Отказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ШтрихкодАкцизнойМарки,
	|	Т.ИдентификаторСтроки
	|ПОМЕСТИТЬ АкцизныеМарки
	|ИЗ
	|	&АкцизныеМарки КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ШтрихкодАкцизнойМарки,
	|	КОЛИЧЕСТВО(АкцизныеМарки.ИдентификаторСтроки) КАК Количество
	|ПОМЕСТИТЬ ДублиАкцизныхМарок
	|ИЗ
	|	АкцизныеМарки КАК АкцизныеМарки
	|
	|СГРУППИРОВАТЬ ПО
	|	АкцизныеМарки.ШтрихкодАкцизнойМарки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(АкцизныеМарки.ИдентификаторСтроки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублиАкцизныхМарок.ШтрихкодАкцизнойМарки КАК ШтрихкодАкцизнойМарки,
	|	ДублиАкцизныхМарок.Количество       	 КАК Количество,
	|	АкцизныеМарки.ИдентификаторСтроки        КАК ИдентификаторСтроки
	|ИЗ
	|	ДублиАкцизныхМарок КАК ДублиАкцизныхМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АкцизныеМарки КАК АкцизныеМарки
	|		ПО (АкцизныеМарки.ШтрихкодАкцизнойМарки = ДублиАкцизныхМарок.ШтрихкодАкцизнойМарки)
	|ИТОГИ ПО
	|	ШтрихкодАкцизнойМарки");
	Запрос.УстановитьПараметр("АкцизныеМарки", Объект.АкцизныеМарки.Выгрузить());
	ВыборкаШтрихкодАкцизнойМарки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаШтрихкодАкцизнойМарки.Следующий() Цикл
		
		НомерСтроки = Неопределено;
		НомераСтрок = Новый Массив;
		ВыборкаИдентификаторыСтрок = ВыборкаШтрихкодАкцизнойМарки.Выбрать();
		Пока ВыборкаИдентификаторыСтрок.Следующий() Цикл
			
			ОтборСтрок = Новый Структура("ИдентификаторСтроки", ВыборкаИдентификаторыСтрок.ИдентификаторСтроки);
			НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтрок);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НомерСтроки = НайденнаяСтрока.НомерСтроки;
				НомераСтрок.Добавить(НомерСтроки);
			КонецЦикла;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Акцизная марка %1 дублируется в строках %2 табличной части ""Товары"".';uk='Акцизна марка %1 дублюється у рядках %2 табличної частини ""Товари"".'"),
				ВыборкаШтрихкодАкцизнойМарки.ШтрихкодАкцизнойМарки,
				СтрСоединить(НомераСтрок, ", ")),
			Объект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, "Номенклатура"),
			,
			Отказ);
		
	КонецЦикла;
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТЧАкцизныеМарки = Объект.АкцизныеМарки.Выгрузить();
	ТЧАкцизныеМарки.Индексы.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
		
		МассивШтрихкодыАкцизныхМарок = Новый Массив;
		НайденныеСтроки = ТЧАкцизныеМарки.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл       
			МассивШтрихкодыАкцизныхМарок.Добавить(НайденнаяСтрока.ШтрихкодАкцизнойМарки);
		КонецЦикла;
		
		Если СтрокаТЧ.Номенклатура.УказыватьШтрихкодАкцизнойМаркиПриПечатиЧека 
				И (СтрокаТЧ.Количество <> МассивШтрихкодыАкцизныхМарок.Количество()) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Не корректно заполнены акцизные марки для %1 в строке %2 списка ""Товары"".';uk='Не коректно заповнені акційні марки для %1 у рядку %2 списку ""Товари"".'"),
						СтрокаТЧ.Номенклатура,
						СтрокаТЧ.НомерСтроки),
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ИндексАкцизнойМарки"),
					,
					Отказ);

		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура АрхивированиеЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.СтатусКассовойСмены = &СтатусКассовойСмены
	|	И КассоваяСмена.КассаККМ.ТипКассы = &ТипКассыФискальныйРегистратор";
	
	Запрос.УстановитьПараметр("СтатусКассовойСмены", Перечисления.СтатусыКассовойСмены.Закрыта);
	Запрос.УстановитьПараметр("ТипКассыФискальныйРегистратор", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Архивирование чеков ККМ';uk='Архівування чеків ККМ'"),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Начато регламентное архивирование чеков ККМ.';uk='Розпочато регламентне архівування чеків ККМ.'"));
			
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ЗаписыватьВЖурналРегистрации", Истина);
		ПараметрыЗадания.Вставить("КассоваяСмена", Результат.Выгрузить().ВыгрузитьКолонку("КассоваяСмена"));
		ПараметрыЗадания.Вставить("ОбработкаВыполнена", Ложь);
		
		ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания);
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Архивирование чеков ККМ';uk='Архівування чеків ККМ'"),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Закончено регламентное архивирование чеков ККМ.';uk='Закінчено регламентне архівування чеків ККМ.'"));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Дата < &ДатаХраненияЧеков
	|	И КассоваяСмена.СтатусКассовойСмены <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)";
	
	КоличествоДнейХраненияЧеков = Константы.КоличествоДнейХраненияЗаархивированныхЧеков.Получить() * 86400;
	ДатаХраненияЧеков = ТекущаяДатаСеанса() - КоличествоДнейХраненияЧеков;
	
	Запрос.УстановитьПараметр("ДатаХраненияЧеков", ДатаХраненияЧеков);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Удаление чеков ККМ';uk='Вилучення чеків ККМ'"),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Начато регламентное удаление чеков ККМ.';uk='Розпочато регламентне вилучення чеків ККМ.'"));
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ЗаписыватьВЖурналРегистрации", Истина);
		ПараметрыЗадания.Вставить("КассоваяСмена", Результат.Выгрузить().ВыгрузитьКолонку("КассоваяСмена"));
		ПараметрыЗадания.Вставить("ОбработкаВыполнена", Ложь);
		
		ВыполнитьУдалениеЧековККМ(ПараметрыЗадания);
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Удаление чеков ККМ';uk='Вилучення чеків ККМ'"),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru='Закончено регламентное удаление чеков ККМ.';uk='Закінчено регламентне вилучення чеків ККМ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеОтложенныхЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Удаление отложенных чеков ККМ';uk='Вилучення відкладених чеків ККМ'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru='Начато регламентное удаление отложенных чеков ККМ.';uk='Розпочато регламентне вилучення відкладених чеків ККМ.'"));
	
	НачатьТранзакцию();
	
	Выборка = ВыбратьОтложенныеЧекиККМДляУдаления();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеОшибки = "";
		
		Попытка
			
			ЧекККМОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			Результат = Ложь;
			
			ЗаписьЖурналаРегистрации(НСтр("ru='Удаление отложенных чеков ККМ';uk='Вилучення відкладених чеків ККМ'"),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         НСтр("ru='Во время регламентного удаления отложенных чеков ККМ произошла ошибка.';uk='Під час регламентного вилучення відкладених чеків ККМ сталася помилка.'")
			                         + Символы.ПС + ОписаниеОшибки);
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Удаление отложенных чеков ККМ';uk='Вилучення відкладених чеків ККМ'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru='Закончено регламентное удаление отложенных чеков ККМ.';uk='Закінчено регламентне вилучення відкладених чеків ККМ.'"));
	
КонецПроцедуры

// Выполняет архивацию чеков ККМ по кассовой смене.
//
// Параметры:
//  ПараметрыЗадания  - Структура - Параметры регламентного задания
//  АдресХранилища - Строка - Адрес во временном хранилище
//
Процедура ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания, АдресХранилища="") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.КассоваяСмена КАК КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.Архивный
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.НомерЧекаККМ <> ""0""
	|	И ЧекККМ.НомерЧекаККМ <> """"
	|	И ЧекККМ.КассоваяСмена В(&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.Архивный
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМ.НомерЧекаККМ <> ""0""
	|	И ЧекККМ.НомерЧекаККМ <> """"
	|	И ЧекККМВозврат.КассоваяСмена В(&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) КАК Ссылка,
	|	ДокументКассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК ДокументКассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ДокументКассоваяСмена.Ссылка = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ДокументКассоваяСмена.Ссылка В (&КассоваяСмена)
	|
	|ИТОГИ ПО
	|	КассоваяСмена");
	
	Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыЗадания.КассоваяСмена);
	ВыборкаКассовыхСмен = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКассовыхСмен.Следующий() Цикл
		Попытка
			
			НачатьТранзакцию();
			
			Отказ = Ложь;
			
			// Первый этап. Статус смены - Закрыта, чеки заархивированы.
			КассоваяСменаОбъект = ВыборкаКассовыхСмен.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы;
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			// Второй этап. Архивирование чеков и полное проведение отчета о розничных продажах.
			ВыборкаДокументов = ВыборкаКассовыхСмен.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				Если НЕ ВыборкаДокументов.Ссылка.Пустая() Тогда
					ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
					Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ")
						ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
						
						ДокументОбъект.Архивный = Истина;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						
					ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
						ДокументОбъект.ПометкаУдаления = Ложь;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				Иначе
					Отказ = Истина;
					ОписаниеОшибки = НСтр("ru='По кассовой смене %КассоваяСмена% не создан Отчет о розничных продажах';uk='По касовій зміні %КассоваяСмена% не створений Звіт про роздрібні продажі'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КассоваяСмена%", ВыборкаДокументов.КассоваяСмена);
					Если ПараметрыЗадания.Свойство("ЗаписыватьВЖурналРегистрации") И ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
						ЗаписьЖурналаРегистрации(НСтр("ru='Архивирование чеков ККМ';uk='Архівування чеків ККМ'"),
							УровеньЖурналаРегистрации.Ошибка, , ,
							НСтр("ru='Во время регламентного архивирования чеков ККМ произошла ошибка.';uk='Під час регламентного архівування чеків ККМ сталася помилка.'")
							+ Символы.ПС + ОписаниеОшибки);
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					КонецЕсли;
				КонецЕсли
			КонецЦикла;
			
			Если НЕ Отказ Тогда
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
				Результат = Ложь;
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru='При архивации чеков ККМ произошла ошибка.
                                  |Архивация чеков ККМ не выполнена.
                                  |Дополнительное описание:
                                  |%ДополнительноеОписание%'
                                  |;uk='При архівації чеків ККМ сталася помилка.
                                  |Архівація чеків ККМ не виконана.
                                  |Додатковий опис:
                                  |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
			Если ПараметрыЗадания.Свойство("ЗаписыватьВЖурналРегистрации") И ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru='Архивирование чеков ККМ';uk='Архівування чеків ККМ'"),
					УровеньЖурналаРегистрации.Ошибка, , ,
					НСтр("ru='Во время регламентного архивирования чеков ККМ произошла ошибка.';uk='Під час регламентного архівування чеків ККМ сталася помилка.'")
					+ Символы.ПС + ОписаниеОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	ПараметрыЗадания.ОбработкаВыполнена = Результат;
	
	Если НЕ ПустаяСтрока(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление чеков ККМ по кассовой смене.
//
// Параметры:
//  ПараметрыЗадания  - Структура - Параметры регламентного задания
//  АдресХранилища - Строка - Адрес во временном хранилище
//
Процедура ВыполнитьУдалениеЧековККМ(ПараметрыЗадания, АдресХранилища = "") Экспорт
	
	ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания, АдресХранилища);
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалениеВыполнено = ПараметрыЗадания.ОбработкаВыполнена;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка,
		|	ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена.СтатусКассовойСмены = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
		|	ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена.СтатусКассовойСмены = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.КассоваяСмена В(&КассоваяСмена)
		|	И ОтчетОРозничныхПродажах.КассоваяСмена.СтатусКассовойСмены = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМ.Ссылка КАК Ссылка,
		|	ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Проведен
		|	И ЧекККМ.НомерЧекаККМ <> ""0""
		|	И ЧекККМ.НомерЧекаККМ <> """"
		|	И ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ЧекККМ.КассоваяСмена.СтатусКассовойСмены = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.Ссылка,
		|	ЧекККМВозврат.КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	ЧекККМВозврат.Проведен
		|	И ЧекККМ.НомерЧекаККМ <> ""0""
		|	И ЧекККМ.НомерЧекаККМ <> """"
		|	И ЧекККМВозврат.КассоваяСмена В(&КассоваяСмена)
		|	И ЧекККМВозврат.КассоваяСмена.СтатусКассовойСмены = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
		|ИТОГИ ПО
		|	КассоваяСмена");

	Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыЗадания.КассоваяСмена);
	Результат = Запрос.Выполнить();
	
	ВыборкаКассовыхСмен =Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКассовыхСмен.Следующий() Цикл
		Попытка
			
			НачатьТранзакцию();
			
			// Первый этап. Удаление чеков, отчетов о розничных продажах, чеков из возвратов.
			ВыборкаДокументов = ВыборкаКассовыхСмен.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") ТОгда
					
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ЧекККМ = Неопределено;
					ДокументОбъект.Записать();
					
				ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
					
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.КассоваяСмена = Неопределено;
					ДокументОбъект.Записать();
					
				ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") 
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМВозврат") Тогда
					
					ДокументОбъект.Удалить();
					
				КонецЕсли;
			КонецЦикла;
			
			// Второй этап. Удаление кассовых смен.
			КассоваяСменаОбъект = ВыборкаКассовыхСмен.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.Удалить();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОписаниеОшибки = НСтр("ru='При удалении чеков ККМ произошла ошибка.
                                  |Удаление чеков ККМ не выполнено.
                                  |Дополнительное описание:
                                  |%ДополнительноеОписание%'
                                  |;uk='При вилученні чеків ККМ сталася помилка.
                                  |Вилучення чеків ККМ не виконано.
                                  |Додатковий опис:
                                  |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
			Если ПараметрыЗадания.Свойство("ЗаписыватьВЖурналРегистрации") И ПараметрыЗадания.ЗаписыватьВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru='Удаление чеков ККМ';uk='Вилучення чеків ККМ'"),
					УровеньЖурналаРегистрации.Ошибка, , ,
					НСтр("ru='Во время регламентного удаления чеков ККМ произошла ошибка.';uk='Під час регламентного вилучення чеків ККМ сталася помилка.'")
					+ Символы.ПС + ОписаниеОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
			УдалениеВыполнено = Ложь;
			
		КонецПопытки;
	КонецЦикла;
	
	ПараметрыЗадания.ОбработкаВыполнена = УдалениеВыполнено;
	
	Если НЕ ПустаяСтрока(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОткрытияИЗакрытияКассовойСмены

// Выполняет открытие кассовой смены.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Параметры регламентного задания
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  Булево - Истина, Если операция выполнена успешно
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если СтруктураСостояниеКассовойСмены.Ошибка24Часа Тогда
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = ОписаниеОшибки24Часа();
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		НоваяКассоваяСмена.Заполнить(Новый Структура("КассаККМ", КассаККМ));
		
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.СтатусКассовойСмены    = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		НоваяКассоваяСмена.Кассир                 = Пользователи.ТекущийПользователь();
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = ПолучитьТекстОшибкиЗаполненияОтчета();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет закрытие кассовой смены.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Параметры регламентного задания
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  Структура - Структура состояния кассовой смены, если операция выполнена успешно. Иначе - Неопределено
//
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		Если СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса <= ТекущаяДатаСеанса() Тогда
		
			КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.Дата                   = ТекущаяДатаСеанса();
			КассоваяСменаОбъект.СтатусКассовойСмены    = Перечисления.СтатусыКассовойСмены.Закрыта;
			КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;
			Попытка
				КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				Результат = Ложь;
				
				ОписаниеОшибки = НСтр("ru='При закрытии кассовой смены произошла ошибка.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При закриття касової зміни сталася помилка.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
				
			КонецПопытки;
			
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = НСтр("ru='При закрытии кассовой смены произошла ошибка.
                                        |Дополнительное описание:
                                        |Дата закрытия кассовой смены меньше даты открытия кассовой смены.'
                                        |;uk='При закритті касової зміни виникла помилка.
                                        |Додатковий опис:
                                        |Дата закриття касової зміни менше дати відкриття касової зміни.'");
		КонецЕсли;
		
	Иначе
		
		// Смена не открыта.
		
	КонецЕсли;
	
	Возврат ?(Результат, СтруктураСостояниеКассовойСмены.КассоваяСмена, Неопределено);
	
КонецФункции

// Выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
// Параметры:
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Кассовая смена
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхПродажах - Ссылка на отчет, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск отчета о розничных продажах
	ОтчетОРозничныхПродажах = НайтиОтчетОРозничныхПродажах(КассоваяСмена);
	Если ОтчетОРозничныхПродажах = Неопределено Тогда
		ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Иначе
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, КассоваяСмена, ОписаниеОшибки);
	
КонецФункции

// Выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
// Параметры:
//  ОтчетОРозничныхПродажахОбъект - ДокументОбъект.ОтчетОРозничныхПродажах - Заполняемый документ
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Кассовая смена
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхПродажах - Ссылка на отчет, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение отчета о розничных продажах
	Попытка
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Подготовка данных.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка                    КАК Ссылка,
		|	ЧекККМТовары.КлючСвязи                 КАК КлючСвязи,
		|	ЧекККМТовары.Номенклатура              КАК Номенклатура,
		|	ЧекККМТовары.Характеристика            КАК Характеристика,
		|	ЧекККМТовары.Серия                     КАК Серия,
		|	ЧекККМТовары.Упаковка                  КАК Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА
		|			ЧекККМТовары.СуммаРучнойСкидки + ЧекККМТовары.СуммаАвтоматическойСкидки = 0
		|			ИЛИ ЧекККМТовары.КоличествоУпаковок = 0
		|		ТОГДА
		|			ЧекККМТовары.Цена
		|		ИНАЧЕ
		|			ЧекККМТовары.Сумма / ЧекККМТовары.КоличествоУпаковок
		|	КОНЕЦ КАК Число(15,2)) КАК Цена,
		|	ЧекККМТовары.СтавкаНДС                 КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок        КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество                КАК Количество,
		|	ЧекККМТовары.Сумма                     КАК Сумма,
		|	ЧекККМТовары.Ссылка.ПодакцизныеТоварыДляКоммерческогоИспользования КАК ПодакцизныеТоварыДляКоммерческогоИспользования,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыВозвратовЧерезКассу.ВозвратВТекущуюСмену) КАК ВидВозвратаЧерезКассу,
		|	ЧекККМТовары.Ссылка.Склад              КАК Склад,
		|	ЧекККМТовары.Ссылка.Партнер            КАК Партнер,
		|	ЧекККМТовары.Помещение                 КАК Помещение,
		|	ЧекККМТовары.Продавец                  КАК Продавец,
		|	ЧекККМТовары.Ссылка.Валюта             КАК Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены            КАК ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ           КАК КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация        КАК Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС
		|	
		|ПОМЕСТИТЬ Товары
		|	
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.НомерЧекаККМ > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка,
		|	0,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Серия,
		|	ЧекККМТовары.Упаковка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.СтавкаНДС,
		|	-ЧекККМТовары.КоличествоУпаковок,
		|	-ЧекККМТовары.Количество,
		|	-ЧекККМТовары.Сумма,
		|	ЧекККМТовары.Ссылка.ПодакцизныеТоварыДляКоммерческогоИспользования,
		|	ЧекККМТовары.Ссылка.ВидВозвратаЧерезКассу,
		|	ЧекККМТовары.Ссылка.Склад,
		|	ЧекККМТовары.Ссылка.Партнер,
		|	ЧекККМТовары.Помещение,
		|	ЧекККМТовары.Продавец,
		|	ЧекККМТовары.Ссылка.Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.НомерЧекаККМ > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка             КАК Ссылка,
		|	ЧекККМТовары.Номенклатура       КАК Номенклатура,
		|	ЧекККМТовары.Характеристика     КАК Характеристика,
		|	ЧекККМТовары.Серия              КАК Серия,
		|	ЧекККМТовары.Упаковка           КАК Упаковка,
		|	ЧекККМТовары.Цена               КАК Цена,
		|	ЧекККМТовары.СтавкаНДС          КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество         КАК Количество,
		|	ЧекККМТовары.Сумма              КАК Сумма,
		|	ЧекККМТовары.ПодакцизныеТоварыДляКоммерческогоИспользования КАК ПодакцизныеТоварыДляКоммерческогоИспользования,
		|	ЧекККМТовары.ВидВозвратаЧерезКассу КАК ВидВозвратаЧерезКассу,
		|	ЧекККМТовары.Склад              КАК Склад,
		|	ЧекККМТовары.Партнер            КАК Партнер,
		|	ЧекККМТовары.Помещение          КАК Помещение,
		|	ЧекККМТовары.Продавец           КАК Продавец,
		|	ЧекККМТовары.Валюта             КАК Валюта,
		|	ЧекККМТовары.ВидЦены            КАК ВидЦены,
		|	ЧекККМТовары.КассаККМ           КАК КассаККМ,
		|	ЧекККМТовары.Организация        КАК Организация,
		|	ЧекККМТовары.НалогообложениеНДС КАК НалогообложениеНДС
		|	
		|ПОМЕСТИТЬ СписокТоваров
		|ИЗ
		|	Товары КАК ЧекККМТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЧекиККМ
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекиККМ.Ссылка КАК Ссылка
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|	СписокТоваров.Склад КАК Склад
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Серия КАК Серия,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.ПодакцизныеТоварыДляКоммерческогоИспользования КАК ПодакцизныеТоварыДляКоммерческогоИспользования,
		|	СписокТоваров.ВидВозвратаЧерезКассу КАК ВидВозвратаЧерезКассу,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
		|Из
		|	Документ.КассоваяСмена КАК КассоваяСмена
		|ГДЕ КассоваяСмена.Ссылка = &КассоваяСмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекиККМРеализации.ЧекККМ КАК ЧекККМ,
		|	МАКСИМУМ(ОтчетОРозничныхПродажах.Ссылка) КАК ДокументРеализации
		|	
		|ПОМЕСТИТЬ ДокументыРеализации
		|
		|ИЗ	
		|	(ВЫБРАТЬ
		|		ЧекиККМ.Ссылка КАК ЧекККМ,
		|		ЧекиККМ.Ссылка.ЧекККМ.КассоваяСмена КАК КассоваяСменаРеализации
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|	ГДЕ
		|		ЧекиККМ.Ссылка ССЫЛКА Документ.ЧекККМВозврат) КАК ЧекиККМРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|			ПО ЧекиККМРеализации.КассоваяСменаРеализации = ОтчетОРозничныхПродажах.КассоваяСмена
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекиККМРеализации.ЧекККМ
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Формирование таблиц индексов по аналитике и номенклатуре
		ТаблицаИндексовПоАналитике = МассивРезультатов[4].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоАналитике,"Индекс");
		
		ТаблицаИндексовПоНоменклатуре = МассивРезультатов[5].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоНоменклатуре,"Индекс");
		
		ВыборкаРеквизитыКассовойСмены = МассивРезультатов[6].Выбрать();
		ВыборкаРеквизитыКассовойСмены.Следующий();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоАналитике,
		|	ТаблицаИндексов.Валюта КАК Валюта,
		|	ТаблицаИндексов.ВидЦены КАК ВидЦены,
		|	ТаблицаИндексов.КассаККМ КАК КассаККМ,
		|	ТаблицаИндексов.Организация КАК Организация,
		|	ТаблицаИндексов.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ТаблицаИндексов.Склад КАК Склад
		|ПОМЕСТИТЬ ИндексыПоАналитике
		|ИЗ
		|	&ТаблицаИндексовПоАналитике КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта,
		|	ВидЦены,
		|	КассаККМ,
		|	Организация,
		|	НалогообложениеНДС,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоНоменклатуре,
		|	ТаблицаИндексов.Номенклатура КАК Номенклатура,
		|	ТаблицаИндексов.Характеристика КАК Характеристика,
		|	ТаблицаИндексов.Серия КАК Серия,
		|	ТаблицаИндексов.Упаковка КАК Упаковка,
		|	ТаблицаИндексов.Цена КАК Цена,
		|	ТаблицаИндексов.ПодакцизныеТоварыДляКоммерческогоИспользования КАК ПодакцизныеТоварыДляКоммерческогоИспользования,
		|	ТаблицаИндексов.ВидВозвратаЧерезКассу КАК ВидВозвратаЧерезКассу,
		|	ТаблицаИндексов.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ИндексыПоНоменклатуре
		|ИЗ
		|	&ТаблицаИндексовПоНоменклатуре КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Упаковка,
		|	Цена,
		|	ПодакцизныеТоварыДляКоммерческогоИспользования,
		|	ВидВозвратаЧерезКассу,
		|	СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Серия КАК Серия,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.Партнер КАК Партнер,
		|	СписокТоваров.Помещение КАК Помещение,
		|	СписокТоваров.Продавец КАК Продавец,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(СписокТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(СписокТоваров.Количество) КАК Количество,
		|	СУММА(СписокТоваров.Сумма) КАК Сумма,
		|	СписокТоваров.СтатьяДекларацииПоАкцизномуНалогу КАК СтатьяДекларацииПоАкцизномуНалогу,
		|	СписокТоваров.ПодакцизныеТоварыДляКоммерческогоИспользования КАК ПодакцизныеТоварыДляКоммерческогоИспользования,
		|	СписокТоваров.ВидВозвратаЧерезКассу КАК ВидВозвратаЧерезКассу,
		|	СписокТоваров.ДокументРеализации КАК ДокументРеализации,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре КАК ИндексПоНоменклатуре,
		|	СписокТоваров.Склад КАК Склад,
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокТоваров.Номенклатура КАК Номенклатура,
		|		СписокТоваров.Характеристика КАК Характеристика,
		|		СписокТоваров.Серия КАК Серия,
		|		СписокТоваров.Упаковка КАК Упаковка,
		|		СписокТоваров.Цена КАК Цена,
		|		СписокТоваров.Партнер КАК Партнер,
		|		СписокТоваров.Помещение КАК Помещение,
		|		СписокТоваров.Продавец КАК Продавец,
		|		СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|		СписокТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
		|		СписокТоваров.Количество КАК Количество,
		|		СписокТоваров.Сумма КАК Сумма,
		|	    СписокТоваров.Номенклатура.СтатьяДекларацииПоАкцизномуНалогу КАК СтатьяДекларацииПоАкцизномуНалогу,
		|	    СписокТоваров.ПодакцизныеТоварыДляКоммерческогоИспользования КАК ПодакцизныеТоварыДляКоммерческогоИспользования,
		|		СписокТоваров.ВидВозвратаЧерезКассу КАК ВидВозвратаЧерезКассу,
		|		ЕстьNULL(ДокументыРеализации.ДокументРеализации, НЕОПРЕДЕЛЕНО) КАК ДокументРеализации,
		|		СписокТоваров.Склад КАК Склад,
		|		СписокТоваров.Валюта КАК Валюта,
		|		СписокТоваров.ВидЦены КАК ВидЦены,
		|		СписокТоваров.КассаККМ КАК КассаККМ,
		|		СписокТоваров.Организация КАК Организация,
		|		СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС
		|	ИЗ
		|		СписокТоваров КАК СписокТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыРеализации КАК ДокументыРеализации
		|		ПО СписокТоваров.Ссылка = ДокументыРеализации.ЧекККМ) КАК СписокТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО СписокТоваров.Склад = ИндексыПоАналитике.Склад
		|			И СписокТоваров.Валюта = ИндексыПоАналитике.Валюта
		|			И СписокТоваров.ВидЦены = ИндексыПоАналитике.ВидЦены
		|			И СписокТоваров.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И СписокТоваров.Организация = ИндексыПоАналитике.Организация
		|			И СписокТоваров.НалогообложениеНДС = ИндексыПоАналитике.НалогообложениеНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоНоменклатуре КАК ИндексыПоНоменклатуре
		|		ПО СписокТоваров.Номенклатура = ИндексыПоНоменклатуре.Номенклатура
		|			И СписокТоваров.Характеристика = ИндексыПоНоменклатуре.Характеристика
		|			И СписокТоваров.Серия = ИндексыПоНоменклатуре.Серия
		|			И СписокТоваров.Упаковка = ИндексыПоНоменклатуре.Упаковка
		|			И СписокТоваров.Цена = ИндексыПоНоменклатуре.Цена
		|			И СписокТоваров.ПодакцизныеТоварыДляКоммерческогоИспользования = ИндексыПоНоменклатуре.ПодакцизныеТоварыДляКоммерческогоИспользования
		|			И СписокТоваров.ВидВозвратаЧерезКассу = ИндексыПоНоменклатуре.ВидВозвратаЧерезКассу
		|			И СписокТоваров.СтавкаНДС = ИндексыПоНоменклатуре.СтавкаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокТоваров.Номенклатура,
		|	СписокТоваров.Характеристика,
		|	СписокТоваров.Серия,
		|	СписокТоваров.СтавкаНДС,
		|	СписокТоваров.Упаковка,
		|	СписокТоваров.Цена,
		|	СписокТоваров.Партнер,
		|	СписокТоваров.Помещение,
		|	СписокТоваров.Продавец,
		|	ИндексыПоНоменклатуре.СтавкаНДС,
		|	СписокТоваров.СтатьяДекларацииПоАкцизномуНалогу,
		|	СписокТоваров.ПодакцизныеТоварыДляКоммерческогоИспользования,
		|	СписокТоваров.ВидВозвратаЧерезКассу,
		|	СписокТоваров.ДокументРеализации,
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре,
		|	СписокТоваров.Склад,
		|	СписокТоваров.Валюта,
		|	СписокТоваров.ВидЦены,
		|	СписокТоваров.КассаККМ,
		|	СписокТоваров.Организация,
		|	СписокТоваров.НалогообложениеНДС
		|ИТОГИ
		|	МАКСИМУМ(Номенклатура),
		|	МАКСИМУМ(Характеристика),
		|	МАКСИМУМ(Серия),
		|	МАКСИМУМ(Упаковка),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Партнер),
		|	МАКСИМУМ(Помещение),
		|	МАКСИМУМ(Продавец),
		|	МАКСИМУМ(СтавкаНДС),
		|	МАКСИМУМ(КоличествоУпаковок),
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(ПодакцизныеТоварыДляКоммерческогоИспользования),
		|	МАКСИМУМ(СтатьяДекларацииПоАкцизномуНалогу),
		|	МАКСИМУМ(ВидВозвратаЧерезКассу),
		|	МАКСИМУМ(Склад),
		|	МАКСИМУМ(Валюта),
		|	МАКСИМУМ(ВидЦены),
		|	МАКСИМУМ(КассаККМ),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(НалогообложениеНДС)
		|ПО
		|	ИндексПоАналитике,
		|	ИндексПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.КодАвторизации КАК КодАвторизации,
		|	ОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|		ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|		ЧекККМОплатаПлатежнымиКартами.КодАвторизации КАК КодАвторизации,
		|		ЧекККМОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Организация КАК Организация,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Склад КАК Склад,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Валюта КАК Валюта,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВидЦены КАК ВидЦены
		|	ИЗ
		|		Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ЧекККМОплатаПлатежнымиКартами
		|	ГДЕ
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.КодАвторизации,
		|		-ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассаККМ,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Организация,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Склад,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Валюта,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВидЦены
		|	ИЗ
		|		Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК ЧекККМВозвратОплатаПлатежнымиКартами
		|	ГДЕ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ОплатаОтменена
		|		И ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)) КАК ОплатаПлатежнымиКартами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО ОплатаПлатежнымиКартами.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И ОплатаПлатежнымиКартами.Организация = ИндексыПоАналитике.Организация
		|			И ОплатаПлатежнымиКартами.Склад = ИндексыПоАналитике.Склад
		|			И ОплатаПлатежнымиКартами.Валюта = ИндексыПоАналитике.Валюта
		|			И ОплатаПлатежнымиКартами.ВидЦены = ИндексыПоАналитике.ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Помещение                      КАК Помещение,
		|	Серии.Серия                          КАК Серия,
		|	Серии.Номенклатура                   КАК Номенклатура,
		|	Серии.Характеристика                 КАК Характеристика,
		|	Серии.ВидВозвратаЧерезКассу          КАК ВидВозвратаЧерезКассу,
		|	СУММА(Серии.Количество)              КАК Количество,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМСерии.Помещение КАК Помещение,
		|		ЧекККМСерии.Серия КАК Серия,
		|		ЧекККМСерии.Номенклатура КАК Номенклатура,
		|		ЧекККМСерии.Характеристика КАК Характеристика,
		|		ЗНАЧЕНИЕ(Перечисление.ВидыВозвратовЧерезКассу.ВозвратВТекущуюСмену) КАК ВидВозвратаЧерезКассу,
		|		ЧекККМСерии.Количество КАК Количество,
		|		ЧекККМСерии.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМСерии.Ссылка.Организация КАК Организация,
		|		ЧекККМСерии.Ссылка.Склад КАК Склад,
		|		ЧекККМСерии.Ссылка.Валюта КАК Валюта,
		|		ЧекККМСерии.Ссылка.ВидЦены КАК ВидЦены
		|	ИЗ
		|		Документ.ЧекККМ.Серии КАК ЧекККМСерии
		|	ГДЕ
		|		ЧекККМСерии.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратСерии.Помещение,
		|		ЧекККМВозвратСерии.Серия,
		|		ЧекККМВозвратСерии.Номенклатура,
		|		ЧекККМВозвратСерии.Характеристика,
		|		ЧекККМВозвратСерии.Ссылка.ВидВозвратаЧерезКассу,
		|		ВЫБОР
		|			КОГДА ЧекККМВозвратСерии.Ссылка.ВидВозвратаЧерезКассу = ЗНАЧЕНИЕ(Перечисление.ВидыВозвратовЧерезКассу.ВозвратНеЭтойСмены)
		|				ТОГДА ЧекККМВозвратСерии.Количество
		|			ИНАЧЕ -ЧекККМВозвратСерии.Количество
		|		КОНЕЦ,
		|		ЧекККМВозвратСерии.Ссылка.КассаККМ,
		|		ЧекККМВозвратСерии.Ссылка.Организация,
		|		ЧекККМВозвратСерии.Ссылка.Склад,
		|		ЧекККМВозвратСерии.Ссылка.Валюта,
		|		ЧекККМВозвратСерии.Ссылка.ВидЦены
		|	ИЗ
		|		Документ.ЧекККМВозврат.Серии КАК ЧекККМВозвратСерии
		|	ГДЕ
		|		ЧекККМВозвратСерии.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)) КАК Серии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО Серии.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И Серии.Организация = ИндексыПоАналитике.Организация
		|			И Серии.Склад = ИндексыПоАналитике.Склад
		|			И Серии.Валюта = ИндексыПоАналитике.Валюта
		|			И Серии.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	Серии.Помещение,
		|	Серии.Серия,
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.ВидВозвратаЧерезКассу,
		|	ИндексыПоАналитике.ИндексПоАналитике
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодарочныеСертификаты.ПодарочныйСертификат           КАК ПодарочныйСертификат,
		|	СУММА(ПодарочныеСертификаты.Количество)              КАК Количество,
		|	СУММА(ПодарочныеСертификаты.Сумма)                   КАК Сумма,
		|	СУММА(ПодарочныеСертификаты.СуммаВВалютеСертификата) КАК СуммаВВалютеСертификата,
		|	ИндексыПоАналитике.ИндексПоАналитике                 КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМПодарочныеСертификаты.ПодарочныйСертификат    КАК ПодарочныйСертификат,
		|		1                                                   КАК Количество,
		|		ЧекККМПодарочныеСертификаты.Сумма                   КАК Сумма,
		|		ЧекККМПодарочныеСертификаты.СуммаВВалютеСертификата КАК СуммаВВалютеСертификата,
		|		ЧекККМПодарочныеСертификаты.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМПодарочныеСертификаты.Ссылка.Организация КАК Организация,
		|		ЧекККМПодарочныеСертификаты.Ссылка.Склад КАК Склад,
		|		ЧекККМПодарочныеСертификаты.Ссылка.Валюта КАК Валюта,
		|		ЧекККМПодарочныеСертификаты.Ссылка.ВидЦены КАК ВидЦены
		|	ИЗ
		|		Документ.ЧекККМ.ПодарочныеСертификаты КАК ЧекККМПодарочныеСертификаты
		|	ГДЕ
		|		ЧекККМПодарочныеСертификаты.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)) КАК ПодарочныеСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО ПодарочныеСертификаты.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И ПодарочныеСертификаты.Организация = ИндексыПоАналитике.Организация
		|			И ПодарочныеСертификаты.Склад = ИндексыПоАналитике.Склад
		|			И ПодарочныеСертификаты.Валюта = ИндексыПоАналитике.Валюта
		|			И ПодарочныеСертификаты.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ПодарочныеСертификаты.ПодарочныйСертификат,
		|	ИндексыПоАналитике.ИндексПоАналитике
		|ИМЕЮЩИЕ(СУММА(ПодарочныеСертификаты.Количество) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике          КАК ИндексПоАналитике,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности     КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления                  КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                    КАК ДатаСписания,
		|	БонусныеБаллы.Партнер                         КАК Партнер,
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов)      КАК СуммаБонусныхБаллов
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	БонусныеБаллы.Ссылка.КассаККМ    КАК КассаККМ,
		|	БонусныеБаллы.Ссылка.Организация КАК Организация,
		|	БонусныеБаллы.Ссылка.Склад       КАК Склад,
		|	БонусныеБаллы.Ссылка.Валюта      КАК Валюта,
		|	БонусныеБаллы.Ссылка.ВидЦены     КАК ВидЦены,
		|	БонусныеБаллы.Ссылка.Партнер     КАК Партнер,
		
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления              КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                КАК ДатаСписания,
		|	БонусныеБаллы.СуммаБонусныхБаллов         КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМ.БонусныеБаллы КАК БонусныеБаллы
		|ГДЕ
		|	БонусныеБаллы.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БонусныеБаллы.Ссылка.КассаККМ    КАК КассаККМ,
		|	БонусныеБаллы.Ссылка.Организация КАК Организация,
		|	БонусныеБаллы.Ссылка.Склад       КАК Склад,
		|	БонусныеБаллы.Ссылка.Валюта      КАК Валюта,
		|	БонусныеБаллы.Ссылка.ВидЦены     КАК ВидЦены,
		|	БонусныеБаллы.Ссылка.Партнер     КАК Партнер,
		
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления              КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                КАК ДатаСписания,
		|	-БонусныеБаллы.СуммаБонусныхБаллов        КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМВозврат.БонусныеБаллы КАК БонусныеБаллы
		|ГДЕ
		|	БонусныеБаллы.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|) КАК БонусныеБаллы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО БонусныеБаллы.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И БонусныеБаллы.Организация = ИндексыПоАналитике.Организация
		|			И БонусныеБаллы.Склад = ИндексыПоАналитике.Склад
		|			И БонусныеБаллы.Валюта = ИндексыПоАналитике.Валюта
		|			И БонусныеБаллы.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	БонусныеБаллы.ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.Партнер
		|ИМЕЮЩИЕ
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике          КАК ИндексПоАналитике,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности     КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаОплаты                  КАК ДатаОплаты,
		|	БонусныеБаллы.Партнер                         КАК Партнер,
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов)      КАК СуммаБонусныхБаллов
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	Таблица.Ссылка.КассаККМ    КАК КассаККМ,
		|	Таблица.Ссылка.Организация КАК Организация,
		|	Таблица.Ссылка.Склад       КАК Склад,
		|	Таблица.Ссылка.Валюта      КАК Валюта,
		|	Таблица.Ссылка.ВидЦены     КАК ВидЦены,
		|	Таблица.Ссылка.Партнер     КАК Партнер,
		|
		|	Таблица.Ссылка.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	Таблица.Ссылка.Дата                                                 КАК ДатаОплаты,
		|	Таблица.СуммаБонусныхБалловКСписанию                                КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.КассаККМ    КАК КассаККМ,
		|	ЧекККМВозврат.Организация КАК Организация,
		|	ЧекККМВозврат.Склад       КАК Склад,
		|	ЧекККМВозврат.Валюта      КАК Валюта,
		|	ЧекККМВозврат.ВидЦены     КАК ВидЦены,
		|	ЧекККМВозврат.Партнер     КАК Партнер,
		
		|	ЧекККМВозврат.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	ЧекККМВозврат.Дата                                                 КАК ДатаОплаты,
		|	-ЧекККМВозврат.СуммаБонусныхБалловКВозврату                        КАК СуммаБонусныхБаллов
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	БонусныеБаллы.Ссылка В
		|			(ВЫБРАТЬ
		|				ЧекиККМ.Ссылка
		|			ИЗ
		|				ЧекиККМ КАК ЧекиККМ)
		|
		|) КАК БонусныеБаллы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО БонусныеБаллы.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И БонусныеБаллы.Организация = ИндексыПоАналитике.Организация
		|			И БонусныеБаллы.Склад = ИндексыПоАналитике.Склад
		|			И БонусныеБаллы.Валюта = ИндексыПоАналитике.Валюта
		|			И БонусныеБаллы.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	БонусныеБаллы.ДатаОплаты,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.Партнер
		|ИМЕЮЩИЕ
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов) <> 0
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаИндексовПоАналитике", ТаблицаИндексовПоАналитике);
		Запрос.УстановитьПараметр("ТаблицаИндексовПоНоменклатуре", ТаблицаИндексовПоНоменклатуре);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ОплатаПлатежнымиКартами = Результат[3].Выгрузить();
		Серии                   = Результат[4].Выгрузить();
		ПодарочныеСертификаты   = Результат[5].Выгрузить();
		БонусныеБаллы           = Результат[6].Выгрузить();
		ОплатаБонуснымиБаллами  = Результат[7].Выгрузить();
		
		ОплатаПлатежнымиКартами.Индексы.Добавить("ИндексПоАналитике");
		Серии.Индексы.Добавить("ИндексПоАналитике");
		ПодарочныеСертификаты.Индексы.Добавить("ИндексПоАналитике");
		БонусныеБаллы.Индексы.Добавить("ИндексПоАналитике");
		ОплатаБонуснымиБаллами.Индексы.Добавить("ИндексПоАналитике");
		
		ВыборкаПоАналитике = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоАналитике.Количество() > 1 Тогда
			ВызватьИсключение НСтр("ru='По кассовой смене зарегистрировано несколько аналитик. Создание отчета о розничных продажах невозможно';uk='По касовій зміні зареєстровано кілька аналітик. Створення звіту про роздрібні продажі неможливо'");
		КонецЕсли;
		
		// Очистим табличные части документа.
		ОтчетОРозничныхПродажахОбъект.Товары.Очистить();
		ОтчетОРозничныхПродажахОбъект.Серии.Очистить();
		ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Очистить();
		ОтчетОРозничныхПродажахОбъект.ВидыЗапасов.Очистить();
		ОтчетОРозничныхПродажахОбъект.ПодарочныеСертификаты.Очистить();
		ОтчетОРозничныхПродажахОбъект.НачислениеБонусныхБаллов.Очистить();
		ОтчетОРозничныхПродажахОбъект.ОплатаБонуснымиБаллами.Очистить();
		
		Пока ВыборкаПоАналитике.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажахОбъект, ВыборкаПоАналитике);
			
			ВыборкаПоАналитикеНоменклатуры = ВыборкаПоАналитике.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоАналитикеНоменклатуры.Следующий() Цикл
				
				ВыборкаДетальныеЗаписи = ВыборкаПоАналитикеНоменклатуры.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.Количество <> 0 Тогда
						
						СтрокаТабличнойЧастиТовары = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТовары, ВыборкаДетальныеЗаписи);
						СтрокаТабличнойЧастиТовары.Цена = Окр(СтрокаТабличнойЧастиТовары.Сумма / СтрокаТабличнойЧастиТовары.КоличествоУпаковок, 15, 2);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Заполнение табличной части "Оплата платежными картами".
			МассивСтрок = ОплатаПлатежнымиКартами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "Серии".
			МассивСтрок = Серии.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Количество <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "Подарочные сертификаты".
			МассивСтрок = ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ПодарочныеСертификаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "БонусныеБаллы".
			МассивСтрок = БонусныеБаллы.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.НачислениеБонусныхБаллов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			// Заполнение табличной части "ОплатаБонуснымиБаллами".
			МассивСтрок = ОплатаБонуснымиБаллами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаБонуснымиБаллами.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			ОтчетОРозничныхПродажахОбъект.Дата            = ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены;
			ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС = ОтчетОРозничныхПродажахОбъект.ВидЦены.ЦенаВключаетНДС;
			ОтчетОРозничныхПродажахОбъект.КассоваяСмена   = КассоваяСмена;
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДСиАкцизногоНалога", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОтчетОРозничныхПродажахОбъект));
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОтчетОРозничныхПродажахОбъект.Товары, СтруктураДействий, Неопределено);
			ОтчетОРозничныхПродажахОбъект.СуммаДокумента  = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажахОбъект.Товары, ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС);
			
			ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОтчетОРозничныхПродажахОбъект);
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
				ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
				ОтчетОРозничныхПродажахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхПродажахОбъект.Ответственный, ОтчетОРозничныхПродажахОбъект.Подразделение);
			КонецЕсли;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект, ПараметрыУказанияСерий);
			
        	ДенежныеСредстваСервер.ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу(ОтчетОРозничныхПродажахОбъект);
			ДенежныеСредстваСервер.ПересчетСуммыПоЕдиномуНалогу(ОтчетОРозничныхПродажахОбъект, ОтчетОРозничныхПродажахОбъект.СуммаДокумента);
			
			Если ОтчетОРозничныхПродажахОбъект.Проведен Тогда
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
		
		// По кассовой смене не продано товара
		Если ВыборкаПоАналитике.Количество() = 0 Тогда
			
			ОтчетОРозничныхПродажахОбъект.Дата           = ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены;
			ОтчетОРозничныхПродажахОбъект.КассоваяСмена  = КассоваяСмена;
			
			ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОтчетОРозничныхПродажахОбъект);
			
			// Заполняет отчет о розничных продажах данными по текущей кассовой смене.
			СтруктуруСостояниеКассовойСмены = ПолучитьРеквизитыКассовойСменыНаДату(КассоваяСмена.КассаККМ, ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены);
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажахОбъект, СтруктуруСостояниеКассовойСмены, , "КассоваяСмена");
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
				ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
				ОтчетОРозничныхПродажахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхПродажахОбъект.Ответственный, ОтчетОРозничныхПродажахОбъект.Подразделение);
			КонецЕсли;
			
			ОтчетОРозничныхПродажахОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажахОбъект.Товары, ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС);
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект, ПараметрыУказанияСерий);
			
			// Документ вводится для технических целей. Закрывается кассовая смена. Дохода по ЕН быть не может
			ОтчетОРозничныхПродажахОбъект.СтатьяДекларацииПоЕдиномуНалогу = Неопределено;
			ОтчетОРозничныхПродажахОбъект.СуммаПоЕдиномуНалогу = 0;
			
			Если ОтчетОРозничныхПродажахОбъект.Проведен Тогда
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ОтчетОРозничныхПродажахОбъект.Ссылка;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru='При создании отчета о розничных продажах произошла ошибка.
                                    |Дополнительное описание:
                                    |%ДополнительноеОписание%'
                                    |;uk='При створенні звіту про роздрібні продажі сталася помилка.
                                    |Додатковий опис:
                                    |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		Возврат ?(ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ссылка), ОтчетОРозничныхПродажахОбъект.Ссылка, Неопределено);
		
	КонецПопытки;
	
КонецФункции 

// Выполняет закрытие кассовой смены.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ
//  ОшибкаПриСнятииZОтчета - Булево - Флаг, при закрытии смены возникла ошибка
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  Массив - Массив созданных отчетов о розничных продажах
//
Функция ВыполнитьОперациюЗакрытияКассовойСмены(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "") Экспорт
	
	МассивДокументов = Новый Массив;
	
	// Закрытие кассовой смены
	НачатьТранзакцию();
	КассоваяСмена = ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	Если КассоваяСмена = Неопределено Тогда
		Возврат МассивДокументов;
	КонецЕсли;
	
	Если ВыполнитьАвтоматическуюИнкассациюДС(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки) Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		Возврат МассивДокументов;
	КонецЕсли;
	
	// Удаление отложенных и чеков, по которым был зарезервирован товар.
	УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки);
	
	// Заполнение отчета о розничных продажах
	ОтчетОРозничныхПродажах = ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки);
	Если ОтчетОРозничныхПродажах = Неопределено Тогда
		Возврат МассивДокументов;
	КонецЕсли;
	
	// Архивация чеков ККМ
	Если Константы.ОперацияПриЗакрытииКассовойСмены.Получить() = Перечисления.ОперацииПриЗакрытииКассовойСмены.АрхивацияЧековККМ Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("КассоваяСмена", КассоваяСмена);
		ПараметрыЗадания.Вставить("ОбработкаВыполнена", Ложь);
		
		ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания);
	КонецЕсли;
	
	// Удаление чеков ККМ
	Если Константы.ОперацияПриЗакрытииКассовойСмены.Получить() = Перечисления.ОперацииПриЗакрытииКассовойСмены.УдалениеЧековККМ Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("КассоваяСмена", КассоваяСмена);
		ПараметрыЗадания.Вставить("ОбработкаВыполнена", Ложь);
		
		ВыполнитьУдалениеЧековККМ(ПараметрыЗадания);
	КонецЕсли;
	
	МассивДокументов.Добавить(ОтчетОРозничныхПродажах);
	Возврат МассивДокументов;
	
КонецФункции

#КонецОбласти

#Область ФункцииПроверкиСостоянияКассовойСмены

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Ссылка на кассу ККМ
//
// Возвращаемое значение:
//  Структура - Структура описания кассовой смены.
//
Функция ПолучитьСостояниеКассовойСмены(КассаККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	 	// ВебЧек ПРРО +
	 //в запрос добавлена строка 
	// КассоваяСмена.Кассир.ФизическоеЛицо.КодПоДРФО  КАК КассирФизическоеЛицоИНН,

	// ВебЧек ПРРО +

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер               КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка              КАК КассоваяСмена,
	|	КассоваяСмена.СтатусКассовойСмены КАК СтатусКассовойСмены,
	|	
	|	КассоваяСмена.КассаККМ               КАК КассаККМ,
	|	КассоваяСмена.КассаККМ.СерийныйНомер КАК СерийныйНомерККМ,
	|	КассоваяСмена.Валюта                 КАК Валюта,
	|	КассоваяСмена.Валюта.Представление   КАК ВалютаПредставление,
	|	КассоваяСмена.ВидЦены                КАК ВидЦены,
	|	КассоваяСмена.Организация            КАК Организация,
	|	КассоваяСмена.Кассир                 КАК Кассир,
	|	КассоваяСмена.Кассир.ФизическоеЛицо  КАК КассирФизическоеЛицо,
	|	КассоваяСмена.Кассир.ФизическоеЛицо.КодПоДРФО  КАК КассирКодПоДРФО,
	|	КассоваяСмена.Склад                  КАК Склад,
	|	КассоваяСмена.ЦенаВключаетНДС        КАК ЦенаВключаетНДС,
	|	КассоваяСмена.НалогообложениеНДС     КАК НалогообложениеНДС,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	
	|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
	|	
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
	|		ПО КассоваяСмена.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
	|	
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		
		ОписаниеКассовойСмены.СведенияООрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, ТекущаяДатаСеанса());
		ОписаниеКассовойСмены.АдресСклада          = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Склад, Справочники.ВидыКонтактнойИнформации.АдресСклада);
		ОписаниеКассовойСмены.ПлательщикНДС		   = УчетнаяПолитика.ПлательщикНДС(Выборка.Организация, Выборка.ДатаИзмененияСтатуса);
		
		Если ОписаниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта
			И ТекущаяДата() - ОписаниеКассовойСмены.ДатаИзмененияСтатуса >= 86400 Тогда
			ОписаниеКассовойСмены.Ошибка24Часа = Истина;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе,
		|	КассыККМ.ВалютаДенежныхСредств                              КАК Валюта,
		|	КассыККМ.ВалютаДенежныхСредств.Представление                КАК ВалютаПредставление,
		|	КассыККМ.Склад                                  КАК Склад,
		|	КассыККМ.Склад.РозничныйВидЦены                 КАК ВидЦены,
		|	КассыККМ.Склад.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	КассыККМ.Владелец                               КАК Организация
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО (ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОписаниеКассовойСмены.КассаККМ            = КассаККМ;
		ОписаниеКассовойСмены.Склад               = Выборка.Склад;
		ОписаниеКассовойСмены.ВидЦены             = Выборка.ВидЦены;
		ОписаниеКассовойСмены.ЦенаВключаетНДС     = Выборка.ЦенаВключаетНДС;
		ОписаниеКассовойСмены.Организация         = Выборка.Организация;
		ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
		ОписаниеКассовойСмены.Валюта              = Выборка.Валюта;
		ОписаниеКассовойСмены.ВалютаПредставление = Выборка.ВалютаПредставление;
		ОписаниеКассовойСмены.ПлательщикНДС		  = УчетнаяПолитика.ПлательщикНДС(Выборка.Организация, ТекущаяДата());
		
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция возвращает структуру, характеризующую состояние кассовой смены на дату.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Ссылка на кассу ККМ
//  ДатаВремя - Дата - Дата, на которую необходимо получить описание кассовой смены
//
// Возвращаемое значение:
//  Структура - Структура описания кассовой смены.
//
Функция ПолучитьРеквизитыКассовойСменыНаДату(КассаККМ, ДатаВремя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер               КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка              КАК КассоваяСмена,
	|	КассоваяСмена.СтатусКассовойСмены КАК СтатусКассовойСмены,
	|	
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.Валюта               КАК Валюта,
	|	КассоваяСмена.Валюта.Представление КАК ВалютаПредставление,
	|	КассоваяСмена.ВидЦены              КАК ВидЦены,
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.Кассир               КАК Кассир,
	|	КассоваяСмена.Склад                КАК Склад,
	|	КассоваяСмена.ЦенаВключаетНДС      КАК ЦенаВключаетНДС,
	|	КассоваяСмена.НалогообложениеНДС   КАК НалогообложениеНДС,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	
	|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
	|	
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ) КАК ДатаИзмененияСтатуса,
	|		КассоваяСмена.КассаККМ КАК КассаККМ
	|	ИЗ
	|		Документ.КассоваяСмена КАК КассоваяСмена
	|	ГДЕ
	|		КассоваяСмена.Проведен
	|		И КассоваяСмена.КассаККМ = &КассаККМ
	|		И ВЫБОР
	|				КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ <= &ДатаВремя
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КассоваяСмена.КассаККМ) КАК КассовыеСмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО КассовыеСмены.КассаККМ = КассоваяСмена.КассаККМ
	|			И КассоваяСмена.Проведен 
	|			И (КассовыеСмены.ДатаИзмененияСтатуса = ВЫБОР
	|				КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&ДатаВремя, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
	|		ПО КассовыеСмены.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
	|
	|";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ДатаВремя", ДатаВремя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе,
		|	КассыККМ.ВалютаДенежныхСредств                              КАК Валюта,
		|	КассыККМ.ВалютаДенежныхСредств.Представление                КАК ВалютаПредставление
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО (ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
		ОписаниеКассовойСмены.Валюта              = Выборка.Валюта;
		ОписаниеКассовойСмены.ВалютаПредставление = Выборка.ВалютаПредставление;
		
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Ссылка на кассу ККМ
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Ссылка на кассовую смену,
//                если указана, то проверяется наличие любой другой кассовой смены
//  НачалоКассовойСмены - Дата - Дата начала кассовой смены
//  ОкончаниеКассовойСмены - Дата - Дата окончания кассовой смены
//
// Возвращаемое значение:
//  ДокументСсылка.КассоваяСмена - Открытая кассовая смена на заданный период. Или неопределено если открытой смены нет.
//
Функция ПолучитьОткрытуюКассовуюСмену(КассаККМ, КассоваяСмена = Неопределено, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
// Параметры:
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Ссылка на кассовую смену
//  Дата - Дата - Дата проверки
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  Булево - Истина, если на указанную дату кассовая смена открыта.
//
Функция СменаОткрыта(КассоваяСмена, Дата, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.СтатусКассовойСмены    КАК СтатусКассовойСмены,
	|	КассоваяСмена.НачалоКассовойСмены    КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = ОписаниеОшибки24Часа();
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтатусКассовойСмены) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru='Кассовая смена закрыта.';uk='Касова зміна закрита.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru='Кассовая смена не открыта.';uk='Касова зміна не відкрита.'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыВнесенияИВыемкиДс

Функция ВыполнитьАвтоматическуюИнкассациюДС(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "")
	
	Результат = Истина;
	
	Если Не ОшибкаПриСнятииZОтчета Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиРМККассыККМ.АвтоматическаяИнкассация               КАК АвтоматическаяИнкассация,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК ИзымаемаяСумма
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК НастройкиРМККассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО ДенежныеСредстваВКассахККМОстатки.КассаККМ = НастройкиРМККассыККМ.КассаККМ
		|ГДЕ
		|	НастройкиРМККассыККМ.КассаККМ = &КассаККМ
		|	И НастройкиРМККассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() И Выборка.АвтоматическаяИнкассация И Выборка.ИзымаемаяСумма > 0 Тогда
			Попытка
				СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Новый Структура("КассаККМ, СуммаВнесения, Дата", КассаККМ, Выборка.ИзымаемаяСумма, ТекущаяДатаСеанса()));
			Исключение
				
				Результат = Ложь;
				
				ОписаниеОшибки = НСтр("ru='При инкассации ДС произошла ошибка.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При інкасації ГК сталася помилка.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОткрытияИЗакрытияКассовойСмены

// Функция возвращает текст описания ошибки заполнения отчета о розничных продажах.
//
Функция ПолучитьТекстОшибкиЗаполненияОтчета()
	
	Возврат НСтр("ru='Проверьте настройки розничного склада и кассы ККМ.';uk='Перевірте настройки роздрібного складу та каси ККМ.'");
	
КонецФункции

// Функция выполняет поиск отчета о розничных продажах по кассовой смене.
//
Функция НайтиОтчетОРозничныхПродажах(КассоваяСмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетОРозничныхПродажах = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетОРозничныхПродажах = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ОтчетОРозничныхПродажах;
	
КонецФункции

// Функция выполняет удаление отложенных чеков.
//
Функция УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	НачатьТранзакцию();
	
	ВыборкаЧековККМ = ВыбратьОтложенныеЧекиККМДляУдаления(КассоваяСмена);
	
	Попытка
		
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат = Ложь;
		
		ОписаниеОшибки = НСтр("ru='При удалении отложенных чеков произошла ошибка.
                                    |Дополнительное описание:
                                    |%ДополнительноеОписание%'
                                    |;uk='При вилученні відкладених чеків виникла помилка.
                                    |Додатковий опис:
                                    |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФункцииПроверкиСостоянияКассовойСмены

// Возвращает пустую структуру состояния кассовой смены.
//
Функция ПолучитьСтруктуруОписанияКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	СостояниеКассовойСмены.Вставить("Ошибка24Часа", Ложь);
	СостояниеКассовойСмены.Вставить("ОписаниеОшибки", "");
	
	// Описание реквизитов кассовой смены
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("Валюта");
	СостояниеКассовойСмены.Вставить("ВалютаПредставление");
	СостояниеКассовойСмены.Вставить("ВидЦены");
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("Кассир");
	СостояниеКассовойСмены.Вставить("Склад");
	СостояниеКассовойСмены.Вставить("АдресСклада", "");
	СостояниеКассовойСмены.Вставить("ЦенаВключаетНДС");
	СостояниеКассовойСмены.Вставить("НалогообложениеНДС");
	СостояниеКассовойСмены.Вставить("ПлательщикНДС");

	
	// Прочее
	СостояниеКассовойСмены.Вставить("СведенияООрганизации", "");
	СостояниеКассовойСмены.Вставить("КассирФизическоеЛицо", "");
	СостояниеКассовойСмены.Вставить("СерийныйНомерККМ",     "");
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции

Функция ОписаниеОшибки24Часа() Экспорт
	
	Возврат НСтр("ru='С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены.';uk='З моменту відкриття касової зміни минуло більше 24 годин. Необхідно виконати закриття касової зміни.'");
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ВыбратьОтложенныеЧекиККМДляУдаления(КассоваяСмена = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.ОтложенДо КАК ОтложенДо,
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Дата,
	|	Документ.КассоваяСмена.ОкончаниеКассовойСмены,
	|	Документ.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ОтложенДо <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЧекККМ.ОтложенДо < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение > 0
	|	И ДОБАВИТЬКДАТЕ(ЧекККМ.Дата, ДЕНЬ, КоличествоДнейХраненияОтложенныхЧеков.Значение) < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение = 0
	|	И ЧекККМ.КассоваяСмена.СтатусКассовойСмены <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)");
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	Запрос.УстановитьПараметр("ТекущееВремя",  ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции

Функция ПредставлениеУстройства(СтрокаТЧ)
	
	Представление = "";
	
	Если СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Представление = НСтр("ru='Весы с печатью этикеток';uk='Ваги з друком етикеток'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя Тогда
		Представление = НСтр("ru='Дисплей покупателя';uk='Дисплей покупця'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМOffline Тогда
		Представление = НСтр("ru='ККМ Offline';uk='ККМ Offlіne'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода Тогда
		Представление = НСтр("ru='Сканер штрихкода';uk='Сканер штрихкода'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт Тогда
		Представление = НСтр("ru='Считыватель магнитных карт';uk='Зчитувач магнітних карт'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных Тогда
		Представление = НСтр("ru='Терминал сбора данных';uk='Термінал збору даних'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
		Представление = НСтр("ru='Фискальный регистратор';uk='Фіскальний реєстратор'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
		Представление = НСтр("ru='Эквайринговый терминал';uk='Еквайринговий термінал'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы Тогда
		Представление = НСтр("ru='Электронные весы';uk='Електронні ваги'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Процедура ЗаполнитьТаблицуОборудование(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ТипыПО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоддерживаемыеТипыПодключаемогоОборудования, ",", Истина, Истина);
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	СписокОборудования = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(
		ТипыПО,
		Неопределено,
		РабочееМесто);
	
	Для Каждого СтрокаТЧ Из СписокОборудования Цикл
		Если СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Форма.Оборудование.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Подключено    = 1;
		НоваяСтрока.Представление = ПредставлениеУстройства(НоваяСтрока);
	КонецЦикла;
	
	Если ТипыПО.Найти("ФискальныйРегистратор") <> Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КассыККМ.КассаККМ КАК Объект,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
		|	КассыККМ.ПодключаемоеОборудование КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|	И КассыККМ.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
		|	И Не КассыККМ.ИспользоватьБезПодключенияОборудования
		|");
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Форма.Оборудование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Подключено    = 1;
			НоваяСтрока.Представление = ПредставлениеУстройства(НоваяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//Вычисляет отгруженное количество, согласно данных регистра накопления "Товары к отгрузке", которое
//необходимо распределить между строками заказа.
//Параметры:
// Ссылка - ДокументСсылка - заказ,
// Коррекировка - ТаблицаЗначений.
//
//Возвращаемое значение:
// ТаблицаЗначений - таблица.
//
Функция ТаблицаОформлено(Отбор, Корректировка) Экспорт

	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыКОтгрузке;
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОтбора.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОтбора.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаОтбора.Колонки.Добавить("Назначение",     Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаОтбора.Колонки.Добавить("Серия",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаОтбора.Колонки.Добавить("Ссылка",         МетаданныеРегистра.Измерения.ДокументОтгрузки.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Отбор, ТаблицаОтбора);

	Запрос = Новый Запрос();

	//Запрос оформленного количества по заказу.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Назначение     КАК Назначение,
		|	Таблица.Серия          КАК Серия,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Ссылка         КАК ДокументОтгрузки
		|ПОМЕСТИТЬ ВТОтбор
		|ИЗ
		|	&Отбор КАК Таблица
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура     КАК Номенклатура,
		|	Таблица.Характеристика   КАК Характеристика,
		|	Таблица.Назначение       КАК Назначение,
		|	Таблица.Серия            КАК Серия,
		|	Таблица.Склад            КАК Склад,
		|	Таблица.КОтгрузке        КАК Количество
		|ПОМЕСТИТЬ ВТКорректировка
		|ИЗ
		|	&Корректировка КАК Таблица
		|ГДЕ
		|	Таблица.КОтгрузке <> 0
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.ТипНоменклатуры   КАК ТипНоменклатуры,
		|	Набор.Характеристика    КАК Характеристика,
		|	Набор.Назначение        КАК Назначение,
		|	Набор.Серия             КАК Серия,
		|	Набор.Склад             КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ИЗ
		|(ВЫБРАТЬ
		|	Таблица.Номенклатура     КАК Номенклатура,
		|	Таблица.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Таблица.Характеристика   КАК Характеристика,
		|	Таблица.Назначение       КАК Назначение,
		|	Таблица.Серия            КАК Серия,
		|	Таблица.Склад            КАК Склад,
		|
		|	ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|				Таблица.КОтгрузке
		|				- Таблица.Собирается - Таблица.Собрано
		|			ИНАЧЕ
		|				Таблица.Собирается + Таблица.Собрано
		|		КОНЕЦ                КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОтбор КАК Фильтр
		|		ПО Таблица.Номенклатура   = Фильтр.Номенклатура
		|		 И Таблица.Характеристика = Фильтр.Характеристика
		|		 И Таблица.Склад          = Фильтр.Склад
		|		 И Таблица.Назначение     = Фильтр.Назначение
		|		 И Таблица.Серия          = Фильтр.Серия
		|		 И Таблица.ДокументОтгрузки = Фильтр.ДокументОтгрузки
		|ГДЕ
		|	Таблица.Активность
		|	И (Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			И Таблица.КОтгрузке <> 0
		|		ИЛИ Таблица.Собирается <> 0
		|		ИЛИ Таблица.Собрано <> 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура     КАК Номенклатура,
		|	Таблица.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Таблица.Характеристика   КАК Характеристика,
		|	Таблица.Назначение       КАК Назначение,
		|	Таблица.Серия            КАК Серия,
		|	Таблица.Склад            КАК Склад,
		|	-Таблица.Количество      КАК Количество
		|
		|ИЗ
		|	ВтКорректировка КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОтбор КАК Фильтр
		|		ПО Таблица.Номенклатура   = Фильтр.Номенклатура
		|		 И Таблица.Характеристика = Фильтр.Характеристика
		|		 И Таблица.Склад          = Фильтр.Склад
		|		 И Таблица.Назначение     = Фильтр.Назначение
		|		 И Таблица.Серия          = Фильтр.Серия) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.ТипНоменклатуры, Набор.Характеристика, Набор.Назначение, Набор.Склад, Набор.Серия
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0
		|";

	Запрос.УстановитьПараметр("Корректировка", Корректировка);
	Запрос.УстановитьПараметр("Отбор",         ТаблицаОтбора);

	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Таблица.Индексы.Добавить("Номенклатура, Характеристика, Склад, Назначение");

	Возврат Таблица;

КонецФункции

//Получает текст запроса для сторнирования движений документа.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаСторноЗаписейЗаказа() Экспорт

	Текст =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура     КАК Номенклатура,
		|	Таблица.Характеристика   КАК Характеристика,
		|	Таблица.Назначение       КАК Назначение,
		|	Таблица.Склад            КАК Склад,
		|
		|	- Таблица.ВРезерве       КАК ВРезерве,
		|	- Таблица.КОтгрузке      КАК КОтгрузке
		|
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК Таблица
		|
		|ГДЕ
		|	Таблица.Активность
		|	И Таблица.Регистратор В(&Ссылка)
		|	И (Таблица.ВРезерве <> 0 ИЛИ Таблица.КОтгрузке <> 0)
		|	И &Отбор
		|;
		|
		|//////////////////////////////////////////////////
		|";

	Возврат Текст;

КонецФункции

// Возвращает незакрытые (не полностью отгруженные) заказы и накладные
//
// Параметры:
//  ТипыЗаказов					 - Массив - Массив типов заказов для отбора по типам
//  ТипыНакладных				 - Массив - Массив типов накладных для отбора по типам
//  ДатаПроверкиОрдерногоСклада	 - Дата - Дата начала применения ордерной схемы на складе
//  Склад						 - СправочникСсылка.Склады - Склад
//  
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция РаспоряженияРМВнутреннееТовародвижение(ТипыЗаказов, ТипыНакладных, Склад = Неопределено, РаспоряженияДляПересчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Склад            КАК Склад,
	|	
	|	Таблица.Номенклатура       КАК Номенклатура,
	|	Таблица.Характеристика     КАК Характеристика,
	|	Таблица.Серия              КАК Серия,
	|	Таблица.Назначение         КАК Назначение,
	|	Таблица.КОформлениюОстаток КАК КОформлениюОстаток,
	|	Таблица.КОтгрузкеОстаток   КАК КОтгрузкеОстаток,
	|	Таблица.СобраноОстаток     КАК СобраноОстаток
	|
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(,
	|		ТИПЗНАЧЕНИЯ(ДокументОтгрузки) В (&ТипыНакладныхИЗаказов)
	|		//%Отборы%
	|		) КАК Таблица
	|;
	|
	|/////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Склад            КАК Склад
	|ПОМЕСТИТЬ ВтДокументыОтгрузки
	|ИЗ
	|	ВтОстатки КАК Таблица
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Склад            КАК Склад
	|ПОМЕСТИТЬ ВтЕстьОрдера
	|ИЗ
	|	ВтДокументыОтгрузки КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = Таблица.ДокументОтгрузки
	|		 И ТоварыКОтгрузке.Склад = Таблица.Склад
	|		 И ТоварыКОтгрузке.Активность
	|ГДЕ
	|	(ТоварыКОтгрузке.КОтгрузке > 0
	|			И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|		ИЛИ ТоварыКОтгрузке.Собрано > 0
	|			И ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход))
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки, Склад
	|;
	|
	|////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ДокументОтгрузки КАК Ссылка,
	|	Таблица.Склад            КАК Склад,
	|	
	|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаЕстьОрдера.ДокументОтгрузки ЕСТЬ NULL И НЕ СпрСклады.Ссылка ЕСТЬ NULL ТОГДА
	|				1
	|			КОГДА Таблица.КОтгрузкеОстаток - Таблица.СобраноОстаток = Таблица.КОформлениюОстаток ТОГДА
	|				0
	|			ИНАЧЕ
	|				3
	|		КОНЕЦ)               КАК СостояниеОрдера,
	|		
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументОтгрузки) КАК Тип
	|ИЗ
	|	ВтОстатки КАК Таблица
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьОрдера КАК ТаблицаЕстьОрдера
	|		ПО ТаблицаЕстьОрдера.ДокументОтгрузки = Таблица.ДокументОтгрузки
	|		 И ТаблицаЕстьОрдера.Склад            = Таблица.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО СпрСклады.Ссылка = Таблица.Склад
	|		 И СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|		 И СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня
	|		
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ДокументОтгрузки,
	|	Таблица.Склад
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаЕстьОрдера.ДокументОтгрузки ЕСТЬ NULL И НЕ СпрСклады.Ссылка ЕСТЬ NULL ТОГДА
	|				1
	|			КОГДА Таблица.КОтгрузкеОстаток - Таблица.СобраноОстаток = Таблица.КОформлениюОстаток ТОГДА
	|				0
	|			ИНАЧЕ
	|				3
	|		КОНЕЦ) > 0";
	
	ТекстУсловийЗапроса = "";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстУсловия = " И Склад = &Склад";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ТекстУсловия;
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловия = " И ДокументОтгрузки В (&Распоряжения)";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ТекстУсловия;
		Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийЗапроса) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Отборы%", ТекстУсловийЗапроса);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	ТипыНакладныхИЗаказов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыНакладныхИЗаказов, ТипыЗаказов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыНакладныхИЗаказов, ТипыНакладных);
	Запрос.УстановитьПараметр("ТипыНакладныхИЗаказов", ТипыНакладныхИЗаказов);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу оформленных товаров переданного массив заказов, исключая записи переданной накладной
//
// Параметры:
//  МассивЗаказов	 - Массив - 
//  Накладная		 - ДокументСсылка.ВнутреннееПотреблениеТоваров, ДокументСсылка.ПеремещениеТоваров,
//  ДокументСсылка.СборкаТоваров, ДокументСсылка.ПередачаМатериаловВПроизводство - 
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ОформленоНакладнымиИсключаяТекущуюРМВнутреннееТовародвижение(МассивЗаказов, Накладная, Склад = Неопределено) Экспорт

	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Назначение,
	|	ТоварыКОтгрузке.Склад,
	|	ТоварыКОтгрузке.Серия,
	|	СУММА(ТоварыКОтгрузке.КОформлению) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТоварыКОтгрузке.Регистратор <> &ИсключаемаяНакладная
	|	И ТоварыКОтгрузке.ДокументОтгрузки В(&Заказы)
	|	И ТоварыКОтгрузке.КОформлению > 0
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Назначение,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Склад";
	
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("ИсключаемаяНакладная", Накладная);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", "И Склад = &Склад");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу отгруженных товаров переданного массива заказов, с указанием отгруженного ордерами количества
//
// Параметры:
//  МассивЗаказов	 - Массив - 
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ОтгруженоОрдерамиРМВнутреннееТовародвижение(МассивЗаказов, Склад = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Назначение,
	|	ТоварыКОтгрузке.Склад,
	|	ТоварыКОтгрузке.Серия,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ТоварыКОтгрузке.КОтгрузке
	|			ИНАЧЕ ТоварыКОтгрузке.Собрано
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.ДокументОтгрузки В(&Заказы)
	|	//&Отбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.ДокументОтгрузки,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Назначение,
	|	ТоварыКОтгрузке.Склад,
	|	ТоварыКОтгрузке.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ТоварыКОтгрузке.КОтгрузке
	|			ИНАЧЕ ТоварыКОтгрузке.Собрано
	|		КОНЕЦ) > 0";
	
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", "И Склад = &Склад");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


Процедура ИсправитьДвижения_ДанныеДляОбновления(Параметры) Экспорт 
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыКОтгрузке";
	ИмяРегистра       = "ТоварыКОтгрузке";
	
#Область ВнутреннееПотреблениеТоваров
	ТекстЗапросаАдаптированный = Документы.ВнутреннееПотреблениеТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ВнутреннееПотреблениеТоваров"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);

	// ЗаполнитьЗаказНаВнутреннееПотреблениеВСтрокахСверхЗаказаОтложенно
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТЧДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ШапкаДокумента
	|		ПО ТЧДокумента.Ссылка = ШапкаДокумента.Ссылка
	|ГДЕ
	|	ШапкаДокумента.Проведен
	|	И ТЧДокумента.КодСтроки = 0
	|	И ТЧДокумента.ЗаказНаВнутреннееПотребление В(&ПустыеЗначенияЗаказов)
	|	И ШапкаДокумента.ПотреблениеПоЗаказам";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияЗаказов", Документы.ВнутреннееПотреблениеТоваров.ПустыеЗначенияЗаказов());
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
#КонецОбласти

#Область ВозвратТоваровПоставщику
	ТекстЗапросаАдаптированный = Документы.ВозвратТоваровПоставщику.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ВозвратТоваровПоставщику"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказКлиента
	ТекстЗапросаАдаптированный = Документы.ЗаказКлиента.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ЗаказКлиента"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    
    Документы.ЗаказКлиента.ИсправлениеДвиженийТоварыКОтгрузкеЗарегистрироватьДанныеДляКОбработке(Параметры);
#КонецОбласти

#Область ЗаказНаВнутреннееПотребление
	ТекстЗапросаАдаптированный = Документы.ЗаказНаВнутреннееПотребление.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ЗаказНаВнутреннееПотребление"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказНаПеремещение
	ТекстЗапросаАдаптированный = Документы.ЗаказНаПеремещение.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ЗаказНаПеремещение"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказНаСборку
	ТекстЗапросаАдаптированный = Документы.ЗаказНаСборку.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ЗаказНаСборку"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Регистраторы = Документы.ЗаказНаСборку.ЗаказыНаРазборкуКоторыеНужноРазбитьПередЗаполнениемСерий();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноРазбитьПоВариантуОбеспечения();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаявкаНаВозвратТоваровОтКлиента
	ТекстЗапросаАдаптированный = Документы.ЗаявкаНаВозвратТоваровОтКлиента.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ЗаявкаНаВозвратТоваровОтКлиента"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    Документы.ЗаявкаНаВозвратТоваровОтКлиента.ИсправлениеДвиженийТоварыКОтгрузкеЗарегистрироватьДанныеДляКОбработке(Параметры);
#КонецОбласти

#Область ПеремещениеТоваров
	ТекстЗапросаАдаптированный = Документы.ПеремещениеТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.ПеремещениеТоваров"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваровТовары.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|		ПО ПеремещениеТоваровТовары.КодСтроки = ЗаказНаПеремещениеТовары.КодСтроки
	|			И ПеремещениеТоваровТовары.ЗаказНаПеремещение = ЗаказНаПеремещениеТовары.Ссылка
	|ГДЕ
	|	ЗаказНаПеремещениеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|	И ПеремещениеТоваровТовары.НазначениеОтправителя = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область РасходныйОрдерНаТовары
	ТекстЗапросаАдаптированный = Документы.РасходныйОрдерНаТовары.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.РасходныйОрдерНаТовары"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область РеализацияТоваровУслуг
	ТекстЗапросаАдаптированный = Документы.РеализацияТоваровУслуг.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.РеализацияТоваровУслуг"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область СборкаТоваров
	ТекстЗапросаАдаптированный = Документы.СборкаТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
        ТекстЗапросаАдаптированный,
		ПолноеИмяРегистра,
		"Документ.СборкаТоваров"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти		

#Область АктОРасхожденияхПослеПеремещения
	ТекстЗапросаМеханизмаПроведения = Документы.АктОРасхожденияхПослеПеремещения.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.АктОРасхожденияхПослеПеремещения"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти		    

#Область АктОРасхожденияхПослеОтгрузки	
	ТекстЗапросаМеханизмаПроведения = Документы.АктОРасхожденияхПослеОтгрузки.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.АктОРасхожденияхПослеОтгрузки"
    );
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти		    

КонецПроцедуры

Процедура ИсправитьДвижения(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
    
    Регистраторы.Добавить("Документ.АктОРасхожденияхПослеОтгрузки");
	Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	Регистраторы.Добавить("Документ.ВнутреннееПотреблениеТоваров");
	Регистраторы.Добавить("Документ.ВозвратТоваровПоставщику");
	Регистраторы.Добавить("Документ.ЗаказКлиента");
	Регистраторы.Добавить("Документ.ЗаказНаВнутреннееПотребление");
	Регистраторы.Добавить("Документ.ЗаказНаПеремещение");
	Регистраторы.Добавить("Документ.ЗаказНаСборку");
	Регистраторы.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.РасходныйОрдерНаТовары");
	Регистраторы.Добавить("Документ.РеализацияТоваровУслуг");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
		"РегистрНакопления.ТоварыКОтгрузке",
		Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры







#КонецОбласти

#КонецОбласти

#КонецЕсли

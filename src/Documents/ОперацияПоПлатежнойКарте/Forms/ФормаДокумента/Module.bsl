

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		Если Параметры.Свойство("Основание") Тогда
			Основание = Параметры.Основание;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтметкуНезаполненного();
	
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание);
	КонецЕсли;
		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(
			ЭтаФорма,
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОперацияПоПлатежнойКарте", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ПереключательРасшифровки Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("РасшифровкаБезРазбиения", Истина);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	СтруктураРеквизитов = ПолучитьРеквизитыЭквайринговогоТерминала(Объект.ЭквайринговыйТерминал);
	
	РазрешеныПлатежиБезУказанияЗаявок = СтруктураРеквизитов.РазрешитьПлатежиБезУказанияЗаявок;
	
	// запрещено изменение валюты взаиморасчетов относительно валюты документа оплаты (кроме упр. организации)
	Если СтруктураРеквизитов.Валюта <> Объект.Валюта Тогда
		
		
		Если Объект.Организация <> ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация") Тогда
			
			Если Объект.РасшифровкаПлатежа.Количество() <> 0 Тогда
			
				ТекстВопроса = НСтр("ru='Валюта кассы/счета не совпадает с валютой взаиморасчетов в табличной части.
                            |Табличная часть будет очищена, продолжить?'
                            |;uk='Валюта каси/рахунку не співпадає з валютою взаєморозрахунків у табличній частині.
                            |Таблична частина буде очищена, продовжити?'");
							
				ОповещениеОЗавершении = Новый ОписаниеОповещения("ЭквайринговыйТерминалПриИзмененииЗавершение", ЭтотОбъект, СтруктураРеквизитов);
				ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
		КонецЕсли;	 			
	КонецЕсли;
	
	ПроверитьНеобходимостьПересчетаВВалюту(СтруктураРеквизитов);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзмененииЗавершение(ОтветПользователя, СтруктураРеквизитов) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		Объект.РасшифровкаПлатежа.Очистить(); 
		
		ПроверитьНеобходимостьПересчетаВВалюту(СтруктураРеквизитов);
		
		ПереключательРасшифровкиПриИзменении(Неопределено);
	Иначе
		Объект.ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПересчетаВВалюту(СтруктураРеквизитов)
	
	Если НЕ ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктураРеквизитов.Валюта) Тогда
		
		ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураРеквизитов, Ложь);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		
	Иначе
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Пересчитать суммы в документе в валюту %1?';uk='Перерахувати суми в документі у валюту %1?'"),
			СтруктураРеквизитов.Валюта);
		
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Пересчитать';uk='Перерахувати'"));
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена,  НСтр("ru='Отменить';uk='Скасувати'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешенПересчетВВалюту", ЭтотОбъект, Новый Структура("СтруктураРеквизитов", СтруктураРеквизитов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиДиалогаВопрос);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РазрешенПересчетВВалюту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		ЭквайринговыйТерминалПриИзмененииНаСервере(ДополнительныеПараметры.СтруктураРеквизитов, Истина);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
	Иначе
		
		Объект.ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	Если Не ПереключательРасшифровки Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!';uk='Перемикання в режим без розбиття неможливе, якщо в розшифровці платежу введено більше одного рядка!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаВзаиморасчетов)
		И СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта
		И СтрокаТаблицы.СуммаВзаиморасчетов <> СтрокаТаблицы.Сумма Тогда
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		
		ЗначенияОтбора = Новый Структура;
		ЗначенияОтбора.Вставить("Организация", Объект.Организация);
		ЗначенияОтбора.Вставить("Контрагент",  Объект.Контрагент);
		ЗначенияОтбора.Вставить("Валюта",  Объект.Валюта);
		
		ЭтоРасчетыСклиентами = ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация);
		
		НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
		НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
		НастройкиВыбора.ЭтоРасчетыСКлиентами  = ЭтоРасчетыСклиентами;
		
		ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
		СтрокаТаблицы.Заказ = Неопределено;
		ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, 
			ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация));
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация", Объект.Организация);
	ЗначенияОтбора.Вставить("Контрагент",  Объект.Контрагент);
	ЗначенияОтбора.Вставить("Валюта",  Объект.Валюта);	
	
	ЭтоРасчетыСклиентами = ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.ВыборОснованияПлатежа = Истина;
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = ЭтоРасчетыСклиентами;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора,
			Объект.Организация,
			Объект.Контрагент,
			Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора,
			Объект.Организация,
			Объект.Контрагент,
			Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ИсключаемыеСвойства = "";
		Если ВыбранноеЗначение.Свойство("СтатьяДвиженияДенежныхСредств")
			И НЕ ЗначениеЗаполнено(ВыбранноеЗначение.СтатьяДвиженияДенежныхСредств) Тогда
			ИсключаемыеСвойства = "СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение, , ИсключаемыеСвойства);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОчистка(Элемент, СтандартнаяОбработка)
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияОснованиеПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РасшифровкаПлатежаОснованиеПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭквайринговыйТерминал", НСтр("ru='Эквайринговый терминал';uk='Еквайринговий термінал'"));
	СтруктураРеквизитов.Вставить("Контрагент", НСтр("ru='Контрагент';uk='Контрагент'"));
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", НСтр("ru='Операция';uk='Операція'"));
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартой(Команда)

	ОчиститьСообщения();
	
	Если Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для данного документа уже выполнена оплата платежной картой.';uk='Для даного документа вже виконана оплата платіжною картою.'"));
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(
		Новый ОписаниеОповещения("ОплатитьКартойПредложитьВыбратьЭквайринговыйТерминалЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		"ЭквайринговыйТерминал",
		НСтр("ru='Выберите эквайринговый терминал';uk='Виберіть еквайрінговий термінал'"),
		НСтр("ru='Эквайринговый терминал не подключен';uk='Еквайринговий термінал не підключений'"));

КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторУстройстваФР = ДополнительныеПараметры.ИдентификаторУстройстваФР;
	ИдентификаторУстройстваЭТ = ДополнительныеПараметры.ИдентификаторУстройстваЭТ;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(Результат.Сумма);
		ВходныеПараметры.Добавить(Результат.ДанныеКарты);
		
		СуммаОперации = Результат.Сумма;
		ПозицияРазделителя = СтрНайти(Результат.ДанныеКарты, "=");
		Если ПозицияРазделителя > 16 Тогда
			НомерКарты = "";
			Для Счетчик = 1 По ПозицияРазделителя - 6 Цикл
				НомерКарты = НомерКарты + "*";
			КонецЦикла;
			НомерКарты = НомерКарты
			+ Сред(Результат.ДанныеКарты, ПозицияРазделителя - 5, 4);
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = 
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
			// Выполнение операции на ЭТ
			РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
				"AuthorizeSales",
				ВходныеПараметры,
				ВыходныеПараметры);
		Иначе
			// Выполнение операции на ЭТ
			РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
				"AuthorizeRefund",
				ВходныеПараметры,
				ВыходныеПараметры);
		КонецЕсли;
		
		Если Не РезультатЭТ Тогда
			ТекстСообщения = НСтр("ru='При выполнении операции возникла ошибка:
                |""%ОписаниеОшибки%"".
                |Оплата по карте не была произведена.'
                |;uk='При виконанні операції виникла помилка:
                |""%ОписаниеОшибки%"".
                |Оплата по карті не була виконана.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
				"%ОписаниеОшибки%",
				ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Если Не ПустаяСтрока(ВыходныеПараметры[3][1]) Тогда
				глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[3][1]);
			КонецЕсли;
			
			НомерКарты          = ?(Не ПустаяСтрока(НомерКарты)
			И ПустаяСтрока(СтрЗаменить(СокрЛП(ВыходныеПараметры[0]), "*", "")),
			НомерКарты, ВыходныеПараметры[0]);
			НомерСсылкиОперации = ВыходныеПараметры[1];
			НомерЧекаЭТ         = ВыходныеПараметры[2];
			СтрокаСлипЧека      = ВыходныеПараметры[3][1];
			Если ВыходныеПараметры.Количество() >= 5 Тогда
				КодАвторизации  = ВыходныеПараметры[4];
			Иначе
				КодАвторизации  = "";
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
				ВходныеПараметры  = Новый Массив();
				ВходныеПараметры.Добавить(СтрокаСлипЧека);
				ВыходныеПараметры = Неопределено;
				
				РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
					"PrintText",
					ВходныеПараметры,
					ВыходныеПараметры);
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатЭТ И Не РезультатФР Тогда
			ОписаниеОшибкиФР = ВыходныеПараметры[1];
			
			ВходныеПараметры  = Новый Массив();
			ВыходныеПараметры = Неопределено;
			
			ВходныеПараметры.Добавить(СуммаОперации);
			ВходныеПараметры.Добавить(НомерСсылкиОперации);
			ВходныеПараметры.Добавить(НомерЧекаЭТ);
			
			// Выполнение операции на ЭТ
			МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
				"EmergencyVoid",
				ВходныеПараметры,
				ВыходныеПараметры);
			
			ТекстСообщения = НСтр("ru='При печати слип-чека возникла ошибка:
                |""%ОписаниеОшибки%"".
                |Операция по карте была отменена.'
                |;uk='При друку сліп-чека виникла помилка:
                |""%ОписаниеОшибки%"".
                |Операція по карті була скасована.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
				"%ОписаниеОшибки%",
				ОписаниеОшибкиФР);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли РезультатЭТ Тогда
			Объект.НомерПлатежнойКарты = НомерКарты;
			Объект.КодАвторизации      = КодАвторизации;
			Объект.ОплатаВыполнена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Отключение устройства ФР
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
		ИдентификаторУстройстваФР);
	// Отключение устройства ЭТ
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
		ИдентификаторУстройстваЭТ);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	ПечатьЧека();
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаЗаказ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОснованиеПлатежа");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<совпадает с основанием платежа>';uk='<збігається з підставою платежу>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаВалютаВзаиморасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	УстановитьВидимость();
	УстановитьВозможностьРедактированияЗаказа();
	
	СтатьяДДСПоХО =
		Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	КонецЦикла;
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураРеквизитов, ПересчитыватьСуммы)
	
	ТекущийЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
	
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов, "Организация");
		ПолучитьДоговорПоУмолчаниюСервер();
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктураРеквизитов.Валюта;
	
	Если ПересчитыватьСуммы Тогда
		ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
	УстановитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТЧ.Партнер = Партнер;
	КонецЦикла;
	ПолучитьДоговорПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Организация, Контрагент, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора,
		Текст,
		Новый Структура("Организация, Контрагент", Организация, Контрагент));
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	СписокТерминалов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭквайринговыйТерминал");
	Если СписокТерминалов.Количество() = 1 Тогда
		ЭквайринговыйТерминал = СписокТерминалов[0].Ссылка;
	КонецЕсли;
	
	ЕстьПодключенноеОборудование = СписокТерминалов.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьВозможностьРедактированияЗаказа();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, Элементы.ЭквайринговыйТерминал);
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ОперацияПоПлатежнойКарте.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	Если НЕ ПереключательРасшифровки Тогда
		ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассивуРасширенный(
			Элементы,
			МассивВсехРеквизитов,
			МассивРеквизитовОперации,
			"РасшифровкаПлатежа",
			"РасшифровкаБезРазбиения");
	Иначе
		ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
			Элементы,
			МассивВсехРеквизитов,
			МассивРеквизитовОперации);
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = ИспользоватьНесколькоВалют;
	Элементы.НадписьВалюта.Видимость = Не ИспользоватьНесколькоВалют;
	
	Если ПереключательРасшифровки Тогда
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаСписком;
	Иначе
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаБезРазбиения;
	КонецЕсли;
	Если НЕ ПереключательРасшифровки Тогда
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;
	
	Элементы.ОплатитьКартой.Видимость = ЕстьПодключенноеОборудование;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного()
	
	Если РазрешеныПлатежиБезУказанияЗаявок Тогда
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения()
	
	Если Объект.РасшифровкаПлатежа.Количество() Тогда
		
		ТекущиеДанные = Объект.РасшифровкаПлатежа[0];
		
		ТолькоПросмотрПартнераВалюты = (ЗначениеЗаполнено(ТекущиеДанные.Заказ) И ТипЗнч(ТекущиеДанные.Заказ) <> Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		Элементы.РасшифровкаБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.РасшифровкаБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор);
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер()
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер, ХозяйственнаяОперация)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаказа()
	
	ЭтоВозвратОплатыКлиенту = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	
	Элементы.РасшифровкаПлатежаЗаказ.КнопкаВыбора              = ЭтоВозвратОплатыКлиенту;
	Элементы.РасшифровкаПлатежаЗаказ.РедактированиеТекста      = ЭтоВозвратОплатыКлиенту;
	Элементы.РасшифровкаБезРазбиенияЗаказ.КнопкаВыбора         = ЭтоВозвратОплатыКлиенту;
	Элементы.РасшифровкаБезРазбиенияЗаказ.РедактированиеТекста = ЭтоВозвратОплатыКлиенту;
	Элементы.РасшифровкаБезРазбиенияЗаказ.ТолькоПросмотр       = Не ЭтоВозвратОплатыКлиенту;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал)
	
	Возврат Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
		
КонецФункции

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта);
	
КонецПроцедуры

&НаСервере
Функция ТипЧекаПоХозяйственнойОперацииДокумента()

	Возврат ?(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента, 0, 1);

КонецФункции // ТипЧекаПоХозяйственнойОперацииДокумента()

&НаКлиенте
Процедура ПечатьЧека()

	ОчиститьСообщения();
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru='Чек уже пробит на фискальном регистраторе!';uk='Чек вже пробитий на фіскальному реєстраторі!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		Возврат;
	КонецЕсли;

	Если НЕ Объект.Проведен
		ИЛИ Модифицированность Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, Новый Структура("ДокументПроведен", Ложь));
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Операция возможна только после проведения документа, провести документ?';uk='Операція можлива тільки після проведення документа, провести документ?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПечатьЧекаЗавершение(КодВозвратаДиалога.Да, Новый Структура("ДокументПроведен", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПечататьЧек = Истина;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ ДополнительныеПараметры.ДокументПроведен Тогда
			
			Попытка
				Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
					ПечататьЧек = Ложь;
				КонецЕсли;
			Исключение
				ПоказатьПредупреждение(Неопределено, НСтр("ru='Не удалось выполнить проведение документа';uk='Не вдалося виконати проведення документа'"));
				ПечататьЧек = Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		ПечататьЧек = Ложь;
	КонецЕсли;
	
	Если ПечататьЧек Тогда

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(
				Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				"ФискальныйРегистратор",
				НСтр("ru='Выберите фискальный регистратор';uk='Виберіть фіскальний реєстратор'"),
				НСтр("ru='Фискальный регистратор не подключен';uk='Фіскальний реєстратор не підключений'"));
			
		Иначе
			ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце зовнішнього обладнання поточного сеансу.'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	ТекущийЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
	РазрешеныПлатежиБезУказанияЗаявок =
		Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ТекущийЭквайринговыйТерминал).РазрешитьПлатежиБезУказанияЗаявок;

	ПолучитьСсылкиНаОборудование();
	
	ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	ПолучитьДоговорПоУмолчаниюСервер();
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	Иначе
		ПереключательРасшифровки = 1;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокументаПоРасшифровкеПлатежаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИмяТабличнойЧасти") Тогда
		ТабличнаяЧасть = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		ОтветПередЗаписью = Истина;
		Объект.СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	ПараметрыПодбора = Новый Структура("
		|АдресПлатежейВХранилище, 
		|Организация, 
		|Контрагент,
		|Валюта,
		|СуммаДокумента,
		|ДатаДокумента,
		|ХозяйственнаяОперация",
		АдресПлатежейВХранилище,
		Объект.Организация, 
		Объект.Контрагент,
		Объект.Валюта,
		Объект.СуммаДокумента,
		Объект.Дата,
		Объект.ХозяйственнаяОперация);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора, 
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойПредложитьВыбратьЭквайринговыйТерминалЗавершение(ИдентификаторУстройстваЭТ, ДополнительныеПараметры) Экспорт
	
	Если ИдентификаторУстройстваЭТ <> Неопределено Тогда
		
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(
			Новый ОписаниеОповещения("ОплатитьКартойПредложитьВыбратьФискальныйРегистраторЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			"ФискальныйРегистратор",
			НСтр("ru='Выберите фискальный регистратор';uk='Виберіть фіскальний реєстратор'"),
			НСтр("ru='Фискальный регистратор не подключен';uk='Фіскальний реєстратор не підключений'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойПредложитьВыбратьФискальныйРегистраторЗавершение(ИдентификаторУстройстваФР, ДополнительныеПараметры) Экспорт
	
	ИдентификаторУстройстваЭТ = ДополнительныеПараметры.ИдентификаторУстройстваЭТ;
	
	ОписаниеОшибки = "";
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		// Подключение устройства ЭТ
		РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
		                                                                                ИдентификаторУстройстваЭТ,
		                                                                                ОписаниеОшибки);

		Если РезультатЭТ Тогда
			
			// Подключение устройства ФР
			РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                                ИдентификаторУстройстваФР,
			                                                                                ОписаниеОшибки);

			Если РезультатФР Тогда

				// Предварительно авторизуем операцию
				ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Объект.СуммаДокумента, Объект.СуммаДокумента);

				ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, 
					Новый ОписаниеОповещения("ОплатитьКартойЗавершение", ЭтотОбъект, 
					Новый Структура("ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ", ИдентификаторУстройстваФР, ИдентификаторУстройстваЭТ)), 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ТекстСообщения = НСтр("ru='При подключении фискального регистратора произошла ошибка:
                |""%ОписаниеОшибки%"".
                |Операция по карте не была выполнена.'
                |;uk='При підключенні фіскального реєстратора сталася помилка:
                |""%ОписаниеОшибки%"".
                |Операція по карті не була виконана.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='При подключении эквайрингового терминала произошла ошибка:
                |""%ОписаниеОшибки%"".
                |Операция по карте не была выполнена.'
                |;uk='При підключенні еквайрингового терміналу сталася помилка:
                |""%ОписаниеОшибки%"".
                |Операція по карті не була виконана.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьВыбратьУстройствоЗавершение(ИдентификаторУстройства, ДополнительныеПараметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ИдентификаторУстройства <> Неопределено Тогда
		// Подключаем ФР
		Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
		                                                                              ИдентификаторУстройства,
		                                                                              ОписаниеОшибки);
		Если Результат Тогда
			//Готовим данные
			ВходныеПараметры  = Новый Массив();
			ВыходныеПараметры = Неопределено;

			НомерСекции = 2;

			// Подготовка таблицы товаров
			ТаблицаТоваров = Новый Массив();

			СтрокаТаблицыТоваров = Новый СписокЗначений();
			
			ПринятоОт = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное");
			СтрокаТаблицыТоваров.Добавить(НСтр("ru='Оплата от:';uk='Оплата від:'") + " " + ПринятоОт + Символы.ПС
			+ НСтр("ru='Основание:';uk='Підстава:'") + " ");                     //  1 - Наименование
			СтрокаТаблицыТоваров.Добавить("");                     //  2 - Штрихкод
			СтрокаТаблицыТоваров.Добавить("");                     //  3 - Артикул
			СтрокаТаблицыТоваров.Добавить(НомерСекции);            //  4 - Номер отдела
			СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  //  5 - Цена за позицию без скидки
			СтрокаТаблицыТоваров.Добавить(1);                      //  6 - Количество
			СтрокаТаблицыТоваров.Добавить("");                     //  7 - Наименование скидки/наценки
			СтрокаТаблицыТоваров.Добавить(0);                      //  8 - Сумма скидки/наценки
			СтрокаТаблицыТоваров.Добавить(0);                      //  9 - Процент скидки/наценки
			СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  // 10 - Сумма позиции со скидкой
			СтрокаТаблицыТоваров.Добавить(0);                      // 11 - Номер налога (1)
			СтрокаТаблицыТоваров.Добавить(0);                      // 12 - Сумма налога (1)
			СтрокаТаблицыТоваров.Добавить(0);                      // 13 - Процент налога (1)
			СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
			СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
			СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
			СтрокаТаблицыТоваров.Добавить("");                     // 17 - Наименование секции форматирования товарной строки

			ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);

			// Подготовка таблицы оплат
			ТаблицаОплат = Новый Массив();

			СтрокаОплаты = Новый СписокЗначений();
			СтрокаОплаты.Добавить(1); // Безналичная оплата.
			СтрокаОплаты.Добавить(Объект.СуммаДокумента);
			СтрокаОплаты.Добавить("");
			СтрокаОплаты.Добавить("");

			ТаблицаОплат.Добавить(СтрокаОплаты);

			// Подготовка таблицы общих параметров
			ОбщиеПараметры = Новый Массив();
			 
			ОбщиеПараметры.Добавить(ТипЧекаПоХозяйственнойОперацииДокумента()); //  1 - Тип чека
			ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
			ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
			ОбщиеПараметры.Добавить(Объект.СуммаДокумента);  //  4 - Сумма по чеку без скидок/наценок
			ОбщиеПараметры.Добавить(Объект.СуммаДокумента);  //  5 - Сумма по чеку с учетом всех скидок/наценок
			ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
			ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
			ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
			ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
			ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
			ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
			ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
			ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
			ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала

			ВходныеПараметры.Добавить(ТаблицаТоваров);
			ВходныеПараметры.Добавить(ТаблицаОплат);
			ВходныеПараметры.Добавить(ОбщиеПараметры);

			// Печатаем чек.
			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
																	"PrintReceipt",
																	ВходныеПараметры,
																	ВыходныеПараметры);

			Если Результат Тогда
				// Установить полученное значение номера чека реквизиту документа.
				Объект.НомерЧекаККМ = ВыходныеПараметры[1];
				Модифицированность = Истина;
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			Иначе
				ТекстСообщения = НСтр("ru='При печати чека произошла ошибка.
                                            |Чек не напечатан на фискальном регистраторе.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При друку чека виникла помилка.
                                            |Чек не надрукований на фіскальному реєстраторі.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,
				                             "%ДополнительноеОписание%",
				                             ВыходныеПараметры[1]);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

			// Отключаем ФР
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, 
			                                                                 ИдентификаторУстройства);
		Иначе
			ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                        |Чек не напечатан на фискальном регистраторе.
                                        |Дополнительное описание:
                                        |%ДополнительноеОписание%'
                                        |;uk='При підключенні пристрою сталася помилка.
                                        |Чек не надрукований на фіскальному реєстраторі.
                                        |Додатковий опис:
                                        |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

ОтветПередЗаписью = Ложь;
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов";
	
	Объект.Дата = КонецДня(ТекущаяДатаСеанса());
	
	ИспользоватьНоменклатуруПоставщиков    = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ТипДанныхЗаполнения = ТипЗнч(Параметры.Основание);
	Объект.Партнер = Параметры.Партнер;
	
	Если Параметры.БлокироватьИзменениеОтбораПоПоставщику Тогда
		Элементы.Партнер.ТолькоПросмотр = Параметры.БлокироватьИзменениеОтбораПоПоставщику;
	КонецЕсли;
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтаФорма);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		СтрокаТЧ.Выбрана = Параметры.ВидыЦен.Найти(СтрокаТЧ.Ссылка) <> Неопределено;
	КонецЦикла;
	
	ЗаполнитьСлужебныеКолонкиВидовЦен();
	
	УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтаФорма);
	ИнициализироватьТабличныйДокумент();
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		СопоставлятьСправочники = Истина;
	КонецЕсли;

	Если Не ИспользоватьНоменклатуруПоставщиков Тогда
		Элементы.ДеревоЦенНоменклатура.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьКолонкиВидовЦен(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПринудительноЗакрытьФорму Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Готово И Модифицированность Тогда
		
		Отказ = Истина;
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru='Закрыть';uk='Закрити'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru='Не закрывать';uk='Не закривати'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
			НСтр("ru='Работа помощника будет завершена,
                       |все введенные данные будут потеряны. Закрыть помощник?'
                       |;uk='Робота помічника буде завершена,
                       |усі введені дані будуть втрачені. Закрити помічник?'"),
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = "Закрыть" Тогда
		ПринудительноЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика");
	
	Если НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика Тогда
		Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтаФорма);
	
	НомерКолонки = 3;
	Для Каждого СтрокаТЧ Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
		
		СтрокаТЧ.НаименованиеПоиск = ВРег(СтрЗаменить(СтрокаТЧ.Наименование, " ", ""));
		СтрокаТЧ.ИмяКолонкиMXL = НомерКолонки;
		СтрокаТЧ.Выбрана = Истина;
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
	
	УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтаФорма);
	
	ИнициализироватьТабличныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзменении(Элемент)
	
	СопоставлятьСправочники = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияНоменклатурыПриИзменении(Элемент)
	
	УстановитьОтборПоТоварам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоНоменклатурыДляВыбора = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатурыПоставщика = Новый Массив();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Артикул) Тогда
		
		НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(
			Новый Структура("АртикулПоиск", ВРег(СтрЗаменить(ТекущиеДанные.Артикул, " ", ""))));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНаименование) Тогда
		
		НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(
			Новый Структура("Наименование", ВРег(СтрЗаменить(ТекущиеДанные.НоменклатураНаименование, " ", ""))));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если МассивНоменклатурыПоставщика.Найти(НайденнаяСтрока) = Неопределено Тогда
				МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИспользоватьНоменклатуруПоставщиков Тогда
		ЭлементФормы = Элементы.ДеревоЦенНоменклатураПоставщика;
	Иначе
		ЭлементФормы = Элементы.ДеревоЦенНоменклатура;
	КонецЕсли;
	
	ЭлементФормы.СписокВыбора.Очистить();
	
	Если МассивНоменклатурыПоставщика.Количество() > 0 Тогда
		
		Для Каждого ТекЭлемент Из МассивНоменклатурыПоставщика Цикл
			ЭлементФормы.СписокВыбора.Добавить(ТекЭлемент.Ссылка, ТекЭлемент.Наименование + " " + "(" + ТекЭлемент.Артикул + ")");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДеревоЦенНоменклатураПриИзмененииСервер(
		Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор())
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДеревоЦен

&НаКлиенте
Процедура ДеревоЦенНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка, Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ТекущаяСтрока.СтрокаСопоставлена = ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка, Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка,Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ТекущаяСтрока.СтрокаСопоставлена = ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенЦенаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки  = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
	Если СтрНайти(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = Окр(
			ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки]
			*((ТекущиеДанные["ПроцентИзменения" + ИмяТекущейКолонки] / 100) + 1), 15, 2);
	КонецЕсли;
	
	ИмяКолонкиУпаковка = СтрЗаменить(
		СтрЗаменить(Элемент.Имя, "ПроцентИзмененияВидЦены", "ВидЦены"), "ДеревоЦенВидЦены", "УпаковкаВидЦены");
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
	
	Если ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
			100 * (ТекущиеДанные[ИмяТекущейКолонки]
			       - ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки]) / ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки],5,2);
	Иначе
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");

	ДеревоЦенУпаковкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТекущейКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенУпаковкаПриИзмененииНаСервере(Идентификатор, ИмяТекущейКолонки)
	УстановкаЦенСервер.ДеревоЦенУпаковкаПриИзменении(ЭтаФорма, Идентификатор, ИмяТекущейКолонки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоЦенЦенаПриИзменении(Элемент)
	
	ИзмененаЦена = Истина;
	ДеревоЦенЦенаПриИзмененииКлиент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоЦенУпаковкаПриИзменении(Элемент)

	ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		
		Попытка
			ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
				                           Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Не ЗаполненаНоменклатураАртикул Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Необходимо скопировать колонки в таблицу из внешнего файла.';uk='Необхідно скопіювати колонки у таблицю із зовнішнього файлу.'"));
			Возврат;
		КонецЕсли;
		
		Если СопоставлятьСправочники Тогда
			ОчиститьСообщения();
			Состояние(НСтр("ru='Осуществляется сопоставление введенных данных
                                 |с данными информационной базы. Пожалуйста подождите...'
                                 |;uk='Здійснюється співставлення введених даних
                                 |з даними інформаційної бази. Будь ласка, зачекайте...'"),,,БиблиотекаКартинок.Информация32);
			СопоставитьДанныеТабличногоДокументаСНоменклатуройПоставщика();
		КонецЕсли;
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		
		ОчиститьСообщения();
		
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			ЗаписатьНоменклатуруПоставщика();
		КонецЕсли;
	
		Если ПроверитьЗаполнение() Тогда
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ЗавершитьРаботуПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦен(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Партнер", Объект.Партнер);
	ПараметрыОткрытия.Вставить("ВыбранныеВидыЦен", УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтаФорма));
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаЦенПоставщикаИзВнешнихФайлов.Форма.ФормаВыбораВидовЦенПоставщика",
		ПараметрыОткрытия,
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПоставщика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураПоставщика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.КоличествоНоменклатурыДляВыбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<будет создана при загрузке>';uk='<буде створена при завантаженні>'"));

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
	
		//

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПоставщика.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураПоставщика");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.КоличествоНоменклатурыДляВыбора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Необходимо сопоставить вручную>';uk='<Необхідно співіставити вручну>'"));

	Иначе
		
		//

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатура.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Номенклатура");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Необходимо сопоставить вручную>';uk='<Необхідно співіставити вручну>'"));
		
	КонецЕсли;
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПоставщика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНаименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураНаименованиеОтличается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.LightGoldenRod);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПоставщика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенАртикул.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.АртикулОтличается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.LightGoldenRod);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, "ДеревоЦенХарактеристика", "ДеревоЦен.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНоменклатуруПоставщиков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<пропущена при регистрации>';uk='<пропущена при реєстрації>'"));
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьКолонкиВидовЦен(ВыбранноеЗначение)
	
	УстановкаЦенСервер.ПеречитатьВыбранныеЦены(ЭтаФорма);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		СтрокаТЧ.Выбрана = НЕ ВыбранноеЗначение.Найти(СтрокаТЧ.Ссылка) = Неопределено;
	КонецЦикла;
	
	ЗаполнитьСлужебныеКолонкиВидовЦен();
	
	ИнициализироватьТабличныйДокумент();
	УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеКолонкиВидовЦен()

	НомерКолонки = 3;
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		
		СтрокаТЧ.НаименованиеПоиск = ВРег(СтрЗаменить(СтрокаТЧ.Наименование, " ", ""));
		Если СтрокаТЧ.Выбрана Тогда
			СтрокаТЧ.ИмяКолонкиMXL = НомерКолонки;
			НомерКолонки = НомерКолонки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	Макет = Документы.РегистрацияЦенНоменклатурыПоставщика.ПолучитьМакет("ЗагрузкаЦен");
	
	ТабличныйДокумент.Очистить();
	
	ОбластьТовар = Макет.ПолучитьОбласть("Товар");
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		Если Не СтрокаТЧ.Выбрана Тогда
			Продолжить;
		КонецЕсли;
		ОбластьВидЦены = Макет.ПолучитьОбласть("ВидЦены");
		ОбластьВидЦены.Параметры.ВидЦены = СтрокаТЧ.Ссылка;
		ТабличныйДокумент.Присоединить(ОбластьВидЦены);
	КонецЦикла;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТоварам()
	
	Элементы.ДеревоЦен.ОтборСтрок = Неопределено;
	
	Если ВариантОтображенияНоменклатуры = 1 Тогда
		Элементы.ДеревоЦен.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаСопоставлена", Ложь);
	Иначе
		Элементы.ДеревоЦен.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвязатьНоменклатуруСНоменклатуройПоставщикаСервер(Отказ)
	
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Объект.Товары, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощника()
	
	Состояние(НСтр("ru='Осуществляется создание документа
                         |регистрации цен поставщика. Пожалуйста подождите...'
                         |;uk='Здійснюється створення документа
                         |реєстрації цін постачальника. Будь ласка, зачекайте...'"),,,БиблиотекаКартинок.Информация32);
	
	Объект.Товары.Очистить();
	
	Для Каждого СтрокаТЧ Из ДеревоЦен Цикл
		
		Для Каждого ВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
			
			НоваяЦена = СтрокаТЧ[ВидЦены.ИмяКолонки];
			ПроцентИзменения = СтрокаТЧ["ПроцентИзменения" + ВидЦены.ИмяКолонки];
			
			Если НоваяЦена = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если РегистрироватьИзмененныеЦены И ПроцентИзменения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка = СтрокаТЧ["Упаковка" + ВидЦены.ИмяКолонки];
			КонецЕсли;
			НоваяСтрока.НоваяЦена = НоваяЦена;
			НоваяСтрока.ВидЦеныПоставщика = ВидЦены.Ссылка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДокументОбъект = Новый Структура();
	ДокументОбъект.Вставить("Партнер", Объект.Партнер);
	ДокументОбъект.Вставить("Ссылка",  ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"));
	ДокументОбъект.Вставить("Товары",  Объект.Товары);
	
	ЗакупкиКлиент.ПроверитьСопоставленнуюНоменклатуруПоставщика(
		ДокументОбъект,
		Новый ОписаниеОповещения("ЗавершитьРаботуПомощникаПроверитьСопоставленнуюНоменклатуруПоставщикаЗавершение", ЭтотОбъект),
		НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощникаПроверитьСопоставленнуюНоменклатуруПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Нет Тогда
		
		СвязатьНоменклатуруСНоменклатуройПоставщикаСервер(Ложь);
		
		ДокументРегистрацииЦен = СоздатьДокументРегистрацииЦенНоменклатурыПоставщика();
		Если ДокументРегистрацииЦен <> Неопределено Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДокументРегистрацииЦен);
			ПоказатьОповещениеПользователя(
				НСтр("ru='Создан документ';uk='Створений документ'"),
				НавигационнаяСсылка,
				ДокументРегистрацииЦен,
				БиблиотекаКартинок.Информация32);
			Оповестить("Запись_РегистрацияЦенНоменклатурыПоставщика",, ДокументРегистрацииЦен);
			Готово = Истина;
			Закрыть();
		Иначе
			ОбновитьСтарыеЦеныНоменклатурыНаСервере();
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Не удалось создать документ регистрации цен поставщика';uk='Не вдалося створити документ реєстрації цін постачальника'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуПанелиНавигации()
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияНачало;
		Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияОкончание;
		Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияПродолжение;
		Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтарыеЦеныНоменклатурыНаСервере()
	
	КэшДанных = Неопределено;
	
	ТаблицаНоменклатуры = УстановкаЦенСервер.ТаблицаТовары(ЭтаФорма, КэшДанных);
	УстановкаЦенСервер.ЗагрузитьСтарыеЦеныНоменклатурыПоставщика(ЭтаФорма, ТаблицаНоменклатуры, КэшДанных);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма);
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИмяКолонки         = ВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		Если ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонкиУпаковка]) Тогда
			ТекущаяСтрока[ИмяКолонкиУпаковка] = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Артикул          КАК Артикул,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик
		|		В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|		   ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|		   ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|		ТОГДА Истина
		|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура
		|");
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика    КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦеныПоставщика КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка          КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаДокумента,
			|	                                                          Номенклатура = &Номенклатура
			|	                                                          И ВидЦеныПоставщика В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
			Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтаФорма));
			Запрос.УстановитьПараметр("ДатаДокумента", УстановкаЦенКлиентСервер.ДатаДокумента(Объект.Дата) - 1);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаНоменклатура = МассивРезультатов[0].Выбрать();
		
		Если ВыборкаНоменклатура.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНоменклатура,,"Артикул");
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ВыборкаУпаковки = МассивРезультатов[1].Выбрать();
			Пока ВыборкаУпаковки.Следующий() Цикл
				ТекущаяСтрока["Упаковка" + УстановкаЦенСервер.ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = УстановкаЦенСервер.СоздатьТаблицуТовары();
	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
		
		ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НоменклатураПоставщика = ТекущаяСтрока.НоменклатураПоставщика;
		НоваяСтрока.Номенклатура           = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.Характеристика         = ТекущаяСтрока.Характеристика;
		НоваяСтрока.ВидЦены                = СтрокаВидЦены.Ссылка;
		НоваяСтрока.Цена                   = ТекущаяСтрока[ИмяКолонки];
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			НоваяСтрока.Упаковка = ТекущаяСтрока[ИмяКолонкиУпаковка];
		КонецЕсли;
		
	КонецЦикла;
	
	УстановкаЦенСервер.ЗагрузитьСтарыеЦеныНоменклатуры(ЭтаФорма, ТаблицаЗначений, КэшДанных);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументРегистрацииЦенНоменклатурыПоставщика()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ДокументРегистрацииЦен = ОбработкаОбъект.СоздатьДокументРегистрацииЦенНоменклатурыПоставщика(РегистрироватьИзмененныеЦены);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	Возврат ДокументРегистрацииЦен;
	
КонецФункции

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСНоменклатуройПоставщика()
	
	ДеревоЦен.Очистить();
	
	// Подготовка таблицы товаров для сопоставления
	Если ИспользоватьНоменклатуруПоставщиков Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Т.Артикул      КАК Артикул,
		|	Т.Артикул      КАК АртикулПоиск,
		|	Т.Наименование КАК Наименование,
		|	Т.Наименование КАК НаименованиеПоиск,
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Ссылка         КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК Т
		|ГДЕ
		|	НЕ Т.ЭтоГруппа
		|	И НЕ Т.ПометкаУдаления
		|	И Т.Владелец = &Партнер
		|");
		
		Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Т.Артикул      КАК Артикул,
		|	Т.Артикул      КАК АртикулПоиск,
		|	Т.Наименование КАК Наименование,
		|	Т.Наименование КАК НаименованиеПоиск,
		|	Т.Ссылка       КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	НЕ Т.ЭтоГруппа
		|	И НЕ Т.ПометкаУдаления
		|");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", "Справочник.Номенклатура");
	КонецЕсли;
	
	НоменклатураПоставщика.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого ТекСтрока Из НоменклатураПоставщика Цикл
		
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.Наименование, " ", ""));
		
	КонецЦикла;
	
	// Сопоставление данных прайс-листа с данными информационной базы
	КолонкаАртикул      = "C1";
	КолонкаНоменклатура = "C2";
	
	НомерСтроки = 2;
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаАртикул).Текст)
	                               Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаНоменклатура).Текст);
	
	Пока ЗаполненаНоменклатураАртикул Цикл
		
		НоваяСтрока = ДеревоЦен.Добавить();
		
		Попытка
			// 100 - Длина наименования номенклатуры поставщика;
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаАртикул).Текст;
			НоваяСтрока.НоменклатураНаименование = Лев(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаНоменклатура).Текст, 100);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Для Каждого СтрокаТЧ Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
			ЦенаНоменклатуры = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + СтрокаТЧ.ИмяКолонкиMXL).Текст;
			НоваяСтрока[СтрокаТЧ.ИмяКолонки] = ЦенаНоменклатуры;
		КонецЦикла;
		
		МассивНоменклатурыПоставщика = Новый Массив();
		
		Если  ЗначениеЗаполнено(НоваяСтрока.Артикул)
			И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(
				Новый Структура(
					"АртикулПоиск, НаименованиеПоиск",
					ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")),
					ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул)
			 И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(
				Новый Структура(
					"АртикулПоиск",
					ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) 
			       И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(
				Новый Структура(
					"НаименованиеПоиск",
					ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если МассивНоменклатурыПоставщика.Найти(НайденнаяСтрока) = Неопределено Тогда
					МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если МассивНоменклатурыПоставщика.Количество() = 1 Тогда
			
			НоваяСтрока.КоличествоНоменклатурыДляВыбора = 1;
			
			Если ИспользоватьНоменклатуруПоставщиков Тогда
				НоваяСтрока.НоменклатураПоставщика = МассивНоменклатурыПоставщика[0].Ссылка;
				НоваяСтрока.Номенклатура = МассивНоменклатурыПоставщика[0].Номенклатура;
				НоваяСтрока.Характеристика = МассивНоменклатурыПоставщика[0].Характеристика;
			Иначе
				НоваяСтрока.Номенклатура = МассивНоменклатурыПоставщика[0].Ссылка;
			КонецЕсли;
			НоваяСтрока.НоменклатураСопоставленаАвтоматически = Истина;
			
			Если НоваяСтрока.НоменклатураНаименование <> МассивНоменклатурыПоставщика[0].Наименование Тогда
				НоваяСтрока.НоменклатураНаименованиеОтличается = Истина;
			КонецЕсли;
			
			Если НоваяСтрока.Артикул <> МассивНоменклатурыПоставщика[0].Артикул Тогда
				НоваяСтрока.АртикулОтличается = Истина;
			КонецЕсли;
			
		ИначеЕсли МассивНоменклатурыПоставщика.Количество() > 1 Тогда
			
			НоваяСтрока.КоличествоНоменклатурыДляВыбора = МассивНоменклатурыПоставщика.Количество();
			
			Для Каждого ТекЭлемент Из МассивНоменклатурыПоставщика Цикл
				
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("АртикулПоиск",      ТекЭлемент.Артикул);
				ПараметрыОтбора.Вставить("НаименованиеПоиск", ТекЭлемент.Наименование);
				ПараметрыОтбора.Вставить("Артикул",           НоваяСтрока.Артикул);
				ПараметрыОтбора.Вставить("Наименование",      НоваяСтрока.НоменклатураНаименование);
				ПараметрыОтбора.Вставить("Ссылка",            ТекЭлемент.Ссылка);
				
				НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НоваяНоменклатураПоставщика = НоменклатураПоставщика.Добавить();
					НоваяНоменклатураПоставщика.НаименованиеПоиск = ТекЭлемент.Наименование;
					НоваяНоменклатураПоставщика.АртикулПоиск      = ТекЭлемент.Артикул;
					НоваяНоменклатураПоставщика.Наименование      = НоваяСтрока.НоменклатураНаименование;
					НоваяНоменклатураПоставщика.Артикул           = НоваяСтрока.Артикул;
					НоваяНоменклатураПоставщика.Ссылка            = ТекЭлемент.Ссылка;
					
					Если ИспользоватьНоменклатуруПоставщиков Тогда
						НоваяНоменклатураПоставщика.Номенклатура   = ТекЭлемент.Номенклатура;
						НоваяНоменклатураПоставщика.Характеристика = ТекЭлемент.Характеристика;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если     НоваяСтрока.НоменклатураСопоставленаАвтоматически
			И Не НоваяСтрока.АртикулОтличается И
			  Не НоваяСтрока.НоменклатураНаименованиеОтличается Тогда
			
			НоваяСтрока.СтрокаСопоставлена = Истина;
			
		КонецЕсли;
		
		НоваяСтрока.ХарактеристикиИспользуются = ЗначениеЗаполнено(НоваяСтрока.Характеристика);
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаАртикул).Текст)
			                               Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаНоменклатура).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ОбновитьСтарыеЦеныНоменклатурыНаСервере();
	
	УстановитьОтборПоТоварам();
	
	СопоставлятьСправочники = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНоменклатуруПоставщика()
	
	Отказ = Ложь;
	
	Для Каждого ТекСтрока Из ДеревоЦен Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И Не ЗначениеЗаполнено(ТекСтрока.НоменклатураНаименование) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено наименование номенклатуры в строке %НомерСтроки%';uk='Не заповнене найменування номенклатури в рядку %НомерСтроки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ДеревоЦен.Индекс(ТекСтрока) + 1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", ДеревоЦен.Индекс(ТекСтрока)+1, "НоменклатураНаименование"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДеревоЦен Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) Тогда
			
			НоваяНоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
			НоваяНоменклатураПоставщика.Владелец = Объект.Партнер;
			НоваяНоменклатураПоставщика.Наименование = ТекСтрока.НоменклатураНаименование;
			НоваяНоменклатураПоставщика.Артикул = ТекСтрока.Артикул;
			НоваяНоменклатураПоставщика.УстановитьНовыйКод();
			
			Попытка
				НоваяНоменклатураПоставщика.Записать();
				ТекСтрока.НоменклатураПоставщика = НоваяНоменклатураПоставщика.Ссылка;
				ТекСтрока.НоменклатураСопоставленаАвтоматически = Истина;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		Иначе
			
			ТекСтрока.НоменклатураСопоставленаАвтоматически = Истина;
			
		КонецЕсли;
		
		Если (ТекСтрока.НоменклатураНаименованиеОтличается Или ТекСтрока.АртикулОтличается)
			И ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) Тогда
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(ТекСтрока.НоменклатураПоставщика);
				НоменклатураПоставщикаОбъект = ТекСтрока.НоменклатураПоставщика.ПолучитьОбъект();
				НоменклатураПоставщикаОбъект.Наименование = ТекСтрока.НоменклатураНаименование;
				НоменклатураПоставщикаОбъект.Артикул      = ТекСтрока.Артикул;
				НоменклатураПоставщикаОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	КэшДанных = Неопределено;
	ТаблицаТовары = УстановкаЦенСервер.ТаблицаТовары(ЭтаФорма, КэшДанных, Ложь);
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "НомерСтроки");
	
	Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика(
		ЭтаФорма.Объект, ТаблицаТовары, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	ИнициализироватьДерево();
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаПодписать.Заголовок = НСтр("ru='Подписать';uk='Підписати'");
		Элементы.СформироватьПодписатьИОтправить.Заголовок = НСтр("ru='Утвердить и подписать';uk='Затвердити і підписати'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru='Утвердить, подписать и подготовить к отправке
                                                                    |выделенные электронные документы'
                                                                    |;uk='Затвердити, підписати і підготувати до відправки
                                                                    |виділені електронні документи'");
		Если НЕ ИспользоватьЭП Тогда
			Элементы.СформироватьПодписатьИОтправить.Заголовок = НСтр("ru='Утвердить';uk='Затвердити'");
			Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru='Утвердить и подготовить к отправке
                                                                        |выделенные электронные документы'
                                                                        |;uk='Затвердити і підготувати до відправки
                                                                        |виділені електронні документи'");
		КонецЕсли;
	ИначеЕсли НЕ ИспользоватьЭП Тогда
		Элементы.СформироватьПодписатьИОтправить.Заголовок = НСтр("ru='Утвердить и отправить';uk='Затвердити та відправити'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru='Утвердить и отправить
                                                                    |выделенные электронные документы'
                                                                    |;uk='Затвердити та відправити
                                                                    |виділені електронні документи'");
	КонецЕсли;

	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	СформироватьТаблицуБыстрогоОтбора();
	
	Элементы.СтраницаПодписать.Видимость = ИспользоватьЭП;
		
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Для Каждого ЭлементКоллекции Из БыстрыеОтборы Цикл
			Если ЭлементОтбора.Параметр = ЭлементКоллекции.Параметр Тогда
				ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Отборы.Количество() > 0 Тогда
		УстановитьОтборыДинамическихСписков(ЭтотОбъект, Отборы);
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь) Тогда
		Элементы.ОтправитьПакеты.Видимость                              = Ложь;
		Элементы.КомандаПодписать.Видимость                             = Ложь;
		Элементы.КомандаУтвердитьЭД.Видимость                           = Ложь;
		Элементы.ОтправитьИПолучитьЭД.Видимость                         = Ложь;
		Элементы.ТаблицаСформироватьЭД.Видимость                        = Ложь;
		Элементы.РаспаковатьВыделенныеПакеты.Видимость                  = Ложь;
		Элементы.СформироватьПодписатьИОтправить.Видимость              = Ложь;
		Элементы.СформироватьЗакрытьПринудительно.Видимость             = Ложь;
		Элементы.ПодписатьУстановитьОтветственного.Видимость            = Ложь;
		Элементы.УтвердитьУстановитьОтветственного.Видимость            = Ложь;
		Элементы.ОбработатьУстановитьОтветственного.Видимость           = Ложь;
		Элементы.НаКонтролеУстановитьОтветственного.Видимость           = Ложь;
		Элементы.НаИсправленииУстановитьОтветственного.Видимость        = Ложь;
		Элементы.КомандаСформироватьПодписатьИОтправить.Видимость       = Ложь;
		Элементы.НеизвестныеПакетыУстановитьСтатусОтменен.Видимость     = Ложь;
		Элементы.НеотправленныеПакетыУстановитьСтатусОтменен.Видимость  = Ложь;
		Элементы.НераспакованныеПакетыУстановитьСтатусОтменен.Видимость = Ложь;
	КонецЕсли;
	
	МассивТиповДокументов = Метаданные.РегистрыСведений.СостоянияЭД.Измерения.СсылкаНаОбъект.Тип.Типы();
	ИмяПлатежногоПоручения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"ПлатежноеПоручениеВМетаданных");
	ИмяПлатежногоТребования = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"ПлатежноеТребованиеВМетаданных");
	РегистрацияЦенНоменклатурыПоставщика = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"РегистрацияЦенНоменклатурыПоставщика");

	ИсключаемыеТипы = Новый Структура;
	ИсключаемыеТипы.Вставить("ПроизвольныйЭД");
	ИсключаемыеТипы.Вставить("ПакетЭД");
	ИсключаемыеТипы.Вставить("СоглашенияОбИспользованииЭД");
	Если ЗначениеЗаполнено(ИмяПлатежногоПоручения) Тогда
		ИсключаемыеТипы.Вставить(ИмяПлатежногоПоручения);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяПлатежногоТребования) Тогда
		ИсключаемыеТипы.Вставить(ИмяПлатежногоТребования);
	КонецЕсли;
	Если ЗначениеЗаполнено(РегистрацияЦенНоменклатурыПоставщика) Тогда
		ИсключаемыеТипы.Вставить(РегистрацияЦенНоменклатурыПоставщика);
	КонецЕсли;
	
	МассивДоступныхДокументов = Новый Массив;
	
	Для Каждого Элемент Из МассивТиповДокументов Цикл
		ДокументСсылка = Новый(Элемент);
		Имя = ДокументСсылка.Метаданные().Имя;
		Если ИсключаемыеТипы.Свойство(Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если ПравоДоступа("Просмотр", Метаданные.Документы[Имя]) Тогда
			МассивДоступныхДокументов.Добавить(Имя);
		КонецЕсли;
	КонецЦикла;
	
	ИмяКоммерческогоПредложения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"КоммерческоеПредложениеКлиенту");
	
	Если МассивДоступныхДокументов.Количество() > 0 Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияЭД.СсылкаНаОбъект КАК Документ,
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.Организация КАК Организация,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПРАВОЕ СОЕДИНЕНИЕ (&Подзапрос) КАК ВложенныйЗапрос
		|		ПО СостоянияЭД.СсылкаНаОбъект = ВложенныйЗапрос.Ссылка
		|ГДЕ
		|	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)";
		
		ТекстПодзапроса = "";
		ПервыйЭлемент = Истина;
		Для Каждого ТипДокумента Из МассивДоступныхДокументов Цикл
			
			ШаблонТекстПодзапроса =
			"ВЫБРАТЬ
			|	ТипДокумента.Ссылка КАК Ссылка,
			|	ТипДокумента.Организация КАК Организация,
			|	ТипДокумента.Контрагент КАК Контрагент,
			|	ТипДокумента.СуммаДокумента КАК СуммаДокумента,
			|	ТипДокумента.Дата КАК Дата
			|ИЗ
			|	Документ.ТипДокумента КАК ТипДокумента
			|ГДЕ
			|	НЕ ТипДокумента.ПометкаУдаления";
			
			Если Не ПервыйЭлемент Тогда
				ТекстПодзапроса = ТекстПодзапроса + "
				| ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			ПервыйЭлемент = Ложь;
			
			ПрикладноеПредставлениеОрганизация = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				ТипДокумента + "." + "Организация");
			Если ЗначениеЗаполнено(ПрикладноеПредставлениеОрганизация) Тогда
				ШаблонТекстПодзапроса = СтрЗаменить(
					ШаблонТекстПодзапроса, "ТипДокумента.Организация", ПрикладноеПредставлениеОрганизация);
			КонецЕсли;
			
			ПрикладноеПредставлениеКонтрагент = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				ТипДокумента + "." + "Контрагент");
			Если ЗначениеЗаполнено(ПрикладноеПредставлениеКонтрагент) Тогда
				ШаблонТекстПодзапроса = СтрЗаменить(
					ШаблонТекстПодзапроса, "ТипДокумента.Контрагент", ПрикладноеПредставлениеКонтрагент);
			КонецЕсли;
				
			ПрикладноеПредставлениеСуммаДокумента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				ТипДокумента + "." + "СуммаДокумента");
			Если ЗначениеЗаполнено(ПрикладноеПредставлениеСуммаДокумента) Тогда
				ШаблонТекстПодзапроса = СтрЗаменить(
					ШаблонТекстПодзапроса, "ТипДокумента.СуммаДокумента", ПрикладноеПредставлениеСуммаДокумента);
			КонецЕсли;
			
			ТекстПодзапроса = ТекстПодзапроса + СтрЗаменить(ШаблонТекстПодзапроса, "ТипДокумента", ТипДокумента);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Подзапрос", ТекстПодзапроса);
		Сформировать.ТекстЗапроса = ТекстЗапроса;
	
	КонецЕсли;

	Для Каждого Страница Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		НазваниеСписка = СтрЗаменить(Страница.Имя, "Страница", "");
		Запросы.Добавить(НазваниеСписка, ЭтотОбъект[НазваниеСписка].ТекстЗапроса);
		
	КонецЦикла;
	
	ОбновитьДанныеДерева(Запросы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ПоказатьСкрытьБыстрыйПоиск();
	ПриИзмененииОтбора();
	ОбменСКонтрагентамиСлужебныйКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьОтборы(ИмяФормы, "Отборы", БыстрыеОтборы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	УстановитьОтборы();
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		ДанныеВыбора = СписокАктуальныхВидовЭД();
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораНажатие(Элемент)
	
	ПоказатьБыстрыйПоиск = Не ПоказатьБыстрыйПоиск;
	ПоказатьСкрытьБыстрыйПоиск();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + Элемент.ТекущиеДанные.Значение];
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + Элемент.ТекущиеДанные.Значение];
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ТекущийЭлемент = Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")];
	ОбновитьДинамическиеСписки(Ложь);
	ТекущийЭлемент = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	УстановитьОтборы();
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Утвердить

&НаКлиенте
Процедура УтвердитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Исправить

&НаКлиенте
Процедура ИсправитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Подписать

&НаКлиенте
Процедура ПодписатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Обработать

&НаКлиенте
Процедура ОбработатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Сформировать

&НаКлиенте
Процедура СформироватьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НаКонтроле

&НаКлиенте
Процедура НаКонтролеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(ВыбраннаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Приглашения

&НаКлиенте
Процедура ПриглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТребуетсяПригласить

&НаКлиенте
Процедура ТребуетсяПригласитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЖдемСогласие

&НаКлиенте
Процедура ЖдемСогласияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТребуетсяСогласие

&НаКлиенте
Процедура ТребуетсяСогласиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьПолучитьОбменСКонтрагентами();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокумент(Команда)
	
	Если Элементы.Сформировать.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.Сформировать.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеотправленныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Отправить.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНераспакованныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Распаковать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеизвестныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Разобрать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.РаспаковатьПакетыЭДНаКлиенте(Элементы.Распаковать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьИОтправить(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.Сформировать.ВыделенныеСтроки);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьУтвердитьПодписатьОтправить");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭД(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.Сформировать.ВыделенныеСтроки);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьПоказать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	МассивСсылок = МассивСсылокНаВладельцевЭД(Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")].ВыделенныеСтроки);
	ОбменСКонтрагентамиКлиент.ЗакрытьПринудительноЭДО(МассивСсылок);
	
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	МассивСсылок = Элементы.Утвердить.ВыделенныеСтроки;
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(Неопределено, "УтвердитьОтправить", , МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	ПодписатьИОтправить(Элементы.Подписать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправить(Команда)
	
	ПодписатьИОтправить(Элементы.Обработать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакеты(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронноеВзаимодействиеПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																										"РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивЭД", Элементы.Отправить.ВыделенныеСтроки);
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтправитьПакетыОповещение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьСоответствиеСоглашенийИПараметровСертификатов(ОбработчикОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Организации" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборы();
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ТребуетсяПригласить.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОтправитьПриглашениеОповещение", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьСоответствиеСоглашенийИПараметровСертификатов(ОбработкаОповещения, МассивПрофилейНастроекЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ТребуетсяСогласие.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПринятьПриглашенияОповещение", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьСоответствиеСоглашенийИПараметровСертификатов(ОбработкаОповещения, МассивПрофилейНастроекЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ТребуетсяСогласие.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОтклонитьПриглашенияОповещение", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьСоответствиеСоглашенийИПараметровСертификатов(ОбработкаОповещения, МассивПрофилейНастроекЭДО);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭДО(Команда)
	
	ОбменСКонтрагентамиКлиент.ОткрытьФормуНастроекЭДОСКонтрагентами();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивЭДО(Команда)
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.АрхивЭлектронныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ОбработатьПредложениеОбАннулировании(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОбработатьПредложениеОбАннулировании(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ТекущаяТаблица = Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")];
	Если ТипЗнч(ТекущаяТаблица) = Тип("ТаблицаФормы")
		И ТекущаяТаблица.ВыделенныеСтроки.Количество() > 0 Тогда
		УстановитьОтветственного(ТекущаяТаблица.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьИнструкциюПо1СБухфон();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	МассивСсылок = Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")].ВыделенныеСтроки;
	Для Каждого ЭД Из МассивСсылок Цикл
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(ЭД, ОтклонитьАннулирование);
	КонецЦикла;
	Если МассивСсылок.Количество() > 0 Тогда
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДополнительнойИнформацииВСписке(Отбор, Значение, ИспользоватьОтбор)
	
	ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Отбор.Элементы, "Доп. информация", ТипГруппы);
	ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Содержит;
	ИмяПоля = "ДополнительнаяИнформация";
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, ИмяПоля, ВидСравненияЭлементаОтбора,
		Значение,, ИспользоватьОтбор);
	ИмяПоля = "ПричинаОтклонения";
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли, ИмяПоля, ВидСравненияЭлементаОтбора,
		Значение,, ИспользоватьОтбор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСсылокНаВладельцевЭД(Знач МассивВыделенныхСтрок)
	
	МассивСсылок = Новый Массив;
	Для Каждого Запись Из МассивВыделенныхСтрок Цикл
		Если ТипЗнч(Запись) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			МассивСсылок.Добавить(Запись.ВладелецФайла);
		Иначе
			МассивСсылок.Добавить(Запись.СсылкаНаОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;

КонецФункции

&НаСервереБезКонтекста
Функция МассивДокументов(Знач МассивКлючей)
	
	МассивВозврата = Новый Массив;
	Для Каждого Запись Из МассивКлючей Цикл
		МассивВозврата.Добавить(Запись.СсылкаНаОбъект);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСумме(Форма, Значение, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Сформировать.Отбор,
		"СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.НаКонтроле.Отбор,
		"СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Утвердить.Отбор,
		"СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Обработать.Отбор,
		"СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Подписать.Отбор,
		"СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Исправить.Отбор,
		"СуммаДокумента", ВидСравнения, Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Аннулировать.Отбор,
		"СуммаДокумента", ВидСравнения, Значение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДате(Форма, Значение, ВидСравнения)

	ИспользоватьОтбор = ЗначениеЗаполнено(Значение);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Подписать.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Исправить.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Аннулировать.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Обработать.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Утвердить.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Разобрать.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.НаКонтроле.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Отправить.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Распаковать.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Сформировать.Отбор,
		"Дата", ВидСравнения, Значение,, ИспользоватьОтбор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственному(Форма, Значение)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Утвердить.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписать.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Исправить.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Аннулировать.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Обработать.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.НаКонтроле.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Распаковать.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отправить.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Разобрать.Отбор,
		"Ответственный", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоКонтрагенту(Форма, Значение)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Сформировать.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Утвердить.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписать.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Исправить.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Аннулировать.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Обработать.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.НаКонтроле.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отправить.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Распаковать.Отбор,
		"Контрагент", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОрганизации(Форма, Значение)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Сформировать.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Утвердить.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписать.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Исправить.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Аннулировать.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Обработать.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.НаКонтроле.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отправить.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Распаковать.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Разобрать.Отбор,
		"Организация", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоВидуЭД(Форма, Значение)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Утвердить.Отбор,
		"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписать.Отбор,
		"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Исправить.Отбор,
		"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Аннулировать.Отбор,
		"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Обработать.Отбор,
		"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.НаКонтроле.Отбор,
		"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Распаковать.Отбор,
		"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Разобрать.Отбор,
		"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоНаправлениюЭД(Форма, Значение)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Утвердить.Отбор,
		"НаправлениеЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Подписать.Отбор,
		"НаправлениеЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Исправить.Отбор,
		"НаправлениеЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Аннулировать.Отбор,
		"НаправлениеЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Обработать.Отбор,
		"НаправлениеЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.НаКонтроле.Отбор,
		"НаправлениеЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Распаковать.Отбор,
		"НаправлениеЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Разобрать.Отбор,
		"НаправлениеЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДополнительнойИнформации(Форма, Значение)

	ИспользоватьОтбор = ЗначениеЗаполнено(Значение);
	
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Утвердить.Отбор,    Значение, ИспользоватьОтбор);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Исправить.Отбор,    Значение, ИспользоватьОтбор);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Подписать.Отбор,    Значение, ИспользоватьОтбор);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Обработать.Отбор,   Значение, ИспользоватьОтбор);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.НаКонтроле.Отбор,   Значение, ИспользоватьОтбор);
	УстановитьОтборПоДополнительнойИнформацииВСписке(Форма.Аннулировать.Отбор, Значение, ИспользоватьОтбор);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеСписки(ПеречитыватьДанные = Истина)
	
	ИмяСписка = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	
	Если ПеречитыватьДанные Тогда
		Элементы[ИмяСписка].Обновить();
	Иначе
		Элементы[ИмяСписка].ТекущаяСтрока = Элементы[ИмяСписка].ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДереваДействий(Знач ДеревоДействий, Запросы)
	
	Дерево = РеквизитФормыВЗначение("ДеревоДействий", Тип("ДеревоЗначений"));
	Массив = КоличествоДанныхДляСчетчиков();
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Сформировать",       НСтр("ru='Создать';uk='Створити'"),              Массив[0]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Обработать",         НСтр("ru='Обработать';uk='Обробити'"),           Массив[1]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Утвердить",          НСтр("ru='Утвердить';uk='Затвердити'"),            Массив[2]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Подписать",          НСтр("ru='Подписать';uk='Підписати'"),            Массив[3]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Исправить",          НСтр("ru='Исправить';uk='Виправити'"),            Массив[4]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Аннулировать",       НСтр("ru='Аннулировать';uk='Анулювати'"),         Массив[5]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "НаКонтроле",         НСтр("ru='На контроле';uk='На контролі'"),          Массив[6]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Отправить",          НСтр("ru='Отправить';uk='Відправити'"),            Массив[7]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Распаковать",        НСтр("ru='Распаковать';uk='Розпакувати'"),          Массив[8]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Разобрать",          НСтр("ru='Разобрать';uk='Розібрати'"),            Массив[9]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "Приглашения",        НСтр("ru='Приглашения';uk='Запрошення'"),          Массив[10]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "ТребуетсяПригласить",НСтр("ru='Требуется пригласить';uk='Потрібно запросити'"), Массив[11]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "ЖдемСогласия",       НСтр("ru='Ждем согласия';uk='Чекаємо згоди'"),        Массив[12]);
	УстановитьПредставлениеСтрокРекурсивно(Дерево, "ТребуетсяСогласие",  НСтр("ru='Требуется согласие';uk='Потрібна згода'"),   Массив[13]);
	
	Возврат Дерево;

КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатусПакетов(Знач МассивЭД, Знач СтатусПакета, КоличествоИзмененных)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивЭД Цикл
		Попытка
			Пакет = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Пакет.СтатусПакета = СтатусПакета;
			Пакет.Записать();
			КоличествоИзмененных = КоличествоИзмененных + 1;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОперации  = НСтр("ru='изменение статуса пакетов ЭД';uk='зміна статусу пакетів ЕД'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстОперации, ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()

	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Сформировать";
	СтрокаОбработать = Дерево.Строки.Добавить();
	СтрокаОбработать.Значение = "Обработать";
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Утвердить";
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаОбработать.Строки.Добавить();
		НовЗапись.Значение = "Подписать";
	КонецЕсли;
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Исправить";
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Аннулировать";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Отправить";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Распаковать";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "НаКонтроле";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Разобрать";
	СтрокаПриглашения = Дерево.Строки.Добавить();
	СтрокаПриглашения.Значение = "Приглашения";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ТребуетсяПригласить";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ЖдемСогласия";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ТребуетсяСогласие";
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПредставлениеСтрокРекурсивно(Дерево, Значение, Представление, Количество)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			УстановитьПредставлениеСтрокРекурсивно(Строка, Значение, Представление, Количество);
		КонецЕсли;
		
		Если Строка.Значение = Значение Тогда
			Строка.Представление = Представление + ?(Количество > 0, " (" + Количество + ")", "");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Организация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Организация:';uk='Організація:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
	НоваяСтрока.Значение = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Организации");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Контрагент:';uk='Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Дата с:';uk='Дата з:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Дата по:';uk='Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Сумма с:';uk='Сума з:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Сумма по:';uk='Сума по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Вид документа:';uk='Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "НаправлениеЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Направление:';uk='Напрям:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭД";
	НоваяСтрока.Значение = Перечисления.НаправленияЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Доп. информация:';uk='Дод. інформація:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Ответственный";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru='Ответственный:';uk='Відповідальний:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = Пользователи.АвторизованныйПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	УдалитьОтборыПоСумме();
	УдалитьОтборыПоДате();
	УстановитьОтборыДинамическихСписков(ЭтотОбъект, БыстрыеОтборы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыДинамическихСписков(Форма, Отборы)
	
	Для Каждого СтрокаОтбора Из Отборы Цикл
		Если СтрокаОтбора.Параметр = "Ответственный" Тогда
			УстановитьОтборПоОтветственному(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Контрагент" Тогда
			УстановитьОтборПоКонтрагенту(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Организация" Тогда
			УстановитьОтборПоОрганизации(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "НаправлениеЭД" Тогда
			УстановитьОтборПоНаправлениюЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "ВидЭД" Тогда
			УстановитьОтборПоВидуЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_С"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_По"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_С" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, НачалоДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_По" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, КонецДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "ДополнительнаяИнформация" Тогда
			УстановитьОтборПоДополнительнойИнформации(Форма, СтрокаОтбора.Значение);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыПоСумме()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Сформировать.Отбор, "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Обработать.Отбор,   "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(НаКонтроле.Отбор,   "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Подписать.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Утвердить.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Исправить.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Аннулировать.Отбор, "СуммаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыПоДате()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Сформировать.Отбор, "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Распаковать.Отбор,  "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Обработать.Отбор,   "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(НаКонтроле.Отбор,   "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Отправить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Разобрать.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Утвердить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Исправить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Подписать.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Аннулировать.Отбор, "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)
	
	Количество = 0;
	УстановитьСтатусПакетов(МассивЭД, ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отменен"), Количество);
	ТекстОповещения = НСтр("ru='Изменен статус пакетов на ""Отменен"": (%1)';uk='Змінено статус пакетів на ""Скасовано"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru='Обмен электронными документами';uk='Обмін електронними документами'"), , ТекстОповещения);
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(МассивЭД)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("УстановитьОтветственногоОповещение", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.ИзменитьОтветственного(МассивЭД, ОбработкаОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАктуальныхВидовЭД()
	
	МассивАктуальныхЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивАктуальныхЭД);
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
			Прервать;
		КонецЕсли
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеДерева(Знач Запросы)
	
	Дерево = ДанныеДереваДействий(ДеревоДействий, Запросы);
	Коллекция = ДеревоДействий.ПолучитьЭлементы();
	Коллекция.Очистить();
	Для Каждого Строка Из Дерево.Строки Цикл
		ЗаполнитьСтрокиРекурсивно(Коллекция, Строка);
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиРекурсивно(Приемник, Знач Источник);
	
	НовСтрокаКоллекции = Приемник.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрокаКоллекции, Источник);
	Если Источник.Строки.Количество() > 0 Тогда
		Для Каждого Строка Из Источник.Строки Цикл
			ЗаполнитьСтрокиРекурсивно(НовСтрокаКоллекции.ПолучитьЭлементы(), Строка);
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоДанныхДляСчетчиков()
	
	Если ТекстЗапросаСчетчиков = "" Тогда
		Для Каждого ТекстЗапроса Из Запросы Цикл
			ПозицияИЗ = Найти(ТекстЗапроса, "ИЗ");
			ТекстЗапроса = Символы.ПС + "ВЫБРАТЬ РАЗРЕШЕННЫЕ СУММА(1) КАК КОЛИЧЕСТВО" + Символы.ПС + Сред(ТекстЗапроса, ПозицияИЗ);
			ТекстЗапросаСчетчиков = ТекстЗапросаСчетчиков + ТекстЗапроса + Символы.ПС + ";" + Символы.ПС;
		КонецЦикла;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСчетчиков;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивРезультатов = Новый Массив;
	
	Для Каждого Выборка Из РезультатЗапроса Цикл
		ВыборкаПодзапроса = Выборка.Выбрать();
		Если ВыборкаПодзапроса.Следующий() И ВыборкаПодзапроса.Количество <> NULL Тогда
			МассивРезультатов.Добавить(ВыборкаПодзапроса.Количество);
		Иначе
			МассивРезультатов.Добавить(0);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеДереваНаКлиенте()
	
	ТекущаяСтрока = Элементы.ДеревоДействий.ТекущиеДанные.Значение;
	ОбновитьДанныеДерева(Запросы);
	ЭлементыДерева = ДеревоДействий.ПолучитьЭлементы();
	ТекущаяСтрокаУстановлена = Ложь;
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.Значение = "Обработать" Тогда
			Элементы.ДеревоДействий.Развернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		Если Не ТекущаяСтрокаУстановлена Тогда
			Если Элемент.Значение = ТекущаяСтрока Тогда
				Элементы.ДеревоДействий.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
				ТекущаяСтрокаУстановлена = Истина;
			Иначе
				ПодчиненныеЭлементыСтроки = Элемент.ПолучитьЭлементы();
				Если ПодчиненныеЭлементыСтроки.Количество() > 0 Тогда
					Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыСтроки Цикл
						Если ПодчиненныйЭлемент.Значение = ТекущаяСтрока Тогда
							Элементы.ДеревоДействий.ТекущаяСтрока = ПодчиненныйЭлемент.ПолучитьИдентификатор();
							ТекущаяСтрокаУстановлена = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОРезультатах(КоличествоПодписанных, КолПодготовленных, КолОтправленных)
	
	ТекстСостояния = НСтр("ru='Произвольные ЭД:
        | подписано: (%1)'
        |;uk='Довільні ЕД:
        |підписано: (%1)'");
	Количество = 0;
	Если КолОтправленных > 0 Тогда
		ТекстСостояния = ТекстСостояния + Символы.ПС + НСтр("ru=' отправлено: (%2)';uk=' відправлено: (%2)'");
		Количество = КолОтправленных;
	ИначеЕсли КолПодготовленных > 0 Тогда
		ТекстСостояния = НСтр("ru=' подготовлено к отправке: (%2)';uk=' підготовлено до відправки: (%2)'");
		Количество = КолПодготовленных;
	КонецЕсли;
	
	Если КолОтправленных > 0 Или КолПодготовленных > 0 Тогда
		ТекстЗаголовка = НСтр("ru='Обмен электронными документами';uk='Обмін електронними документами'");
		КолПодписанныхВсего = КоличествоПодписанных;
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, КолПодписанныхВсего, Количество);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(ПараметрКоманды)
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Неопределено, МассивСсылок);
		ОбновитьДанныеДереваНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПриглашенияСервер(ОтправленоПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам)
	
	// Готовим таблицу с реквизитами контрагентов
	ТаблицаПриглашений = Новый ТаблицаЗначений;
	ТаблицаПриглашений.Колонки.Добавить("ПрофильНастроекЭДО");
	ТаблицаПриглашений.Колонки.Добавить("НастройкаЭДО");
	ТаблицаПриглашений.Колонки.Добавить("Получатель");
	ТаблицаПриглашений.Колонки.Добавить("Наименование");
	ТаблицаПриглашений.Колонки.Добавить("НаименованиеДляСообщенияПользователю");
	ТаблицаПриглашений.Колонки.Добавить("ИНН");
	ТаблицаПриглашений.Колонки.Добавить("КПП");
	ТаблицаПриглашений.Колонки.Добавить("АдресЭП");
	ТаблицаПриглашений.Колонки.Добавить("ТекстПриглашения");
	ТаблицаПриглашений.Колонки.Добавить("ВнешнийКод");
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагента");
	ИмяРеквизитаВнешнийКодКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ВнешнийКодКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагентаДляСообщенияПользователю");
	
	Для каждого НастройкаЭДО Из Элементы.ТребуетсяПригласить.ВыделенныеСтроки Цикл
		
		СтруктураПараметровНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО,
			"ЭлектроннаяПочтаДляПриглашения, Контрагент, ТекстПриглашения, ПрофильНастроекЭДО");
		
		Если Не ЗначениеЗаполнено(СтруктураПараметровНастройкиЭДО.ЭлектроннаяПочтаДляПриглашения) Тогда
			ШаблонСообщения = НСтр("ru='Для отправки приглашения к обмену ЭД для получателя %1
                                        |необходимо заполнить электронную почту.'
                                        |;uk='Для відправлення запрошення до обміну ЕД для одержувача %1
                                        |необхідно заповнити електронну пошту.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПараметровНастройкиЭДО.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметровКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметровНастройкиЭДО.Контрагент,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента + ", " + ИмяРеквизитаНаименованиеКонтрагента + ", "
			+ ИмяРеквизитаВнешнийКодКонтрагента + ", " + ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю);
	
		Если Не ЗначениеЗаполнено(СтруктураПараметровКонтрагента[ИмяРеквизитаИННКонтрагента]) Тогда
			ШаблонСообщения = НСтр("ru='Для отправки приглашения к обмену ЭД для получателя %1
                                        |необходимо заполнить ИНН.'
                                        |;uk='Для відправлення запрошення до обміну ЕД для одержувача %1
                                        |необхідно заповнити ІПН.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПараметровНастройкиЭДО.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриглашений.Добавить();
		НоваяСтрока.ПрофильНастроекЭДО = СтруктураПараметровНастройкиЭДО.ПрофильНастроекЭДО;
		НоваяСтрока.НастройкаЭДО       = НастройкаЭДО;
		НоваяСтрока.Получатель         = СтруктураПараметровНастройкиЭДО.Контрагент;
		НоваяСтрока.ТекстПриглашения   = СтруктураПараметровНастройкиЭДО.ТекстПриглашения;
		НоваяСтрока.АдресЭП            = СтруктураПараметровНастройкиЭДО.ЭлектроннаяПочтаДляПриглашения;
		
		НоваяСтрока.Наименование       = СтруктураПараметровКонтрагента[ИмяРеквизитаНаименованиеКонтрагента];
		НоваяСтрока.НаименованиеДляСообщенияПользователю = СтруктураПараметровКонтрагента[ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю];
		НоваяСтрока.ИНН                = СтруктураПараметровКонтрагента[ИмяРеквизитаИННКонтрагента];
		НоваяСтрока.КПП                = СтруктураПараметровКонтрагента[ИмяРеквизитаКППКонтрагента];
		НоваяСтрока.ВнешнийКод         = СтруктураПараметровКонтрагента[ИмяРеквизитаВнешнийКодКонтрагента];
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаПриглашений) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СоответствиеПрофилейНастроекЭДОМаркерам Цикл
		ПрофильНастроекЭДО = КлючИЗначение.Ключ;
		СтруктураСертификата = КлючИЗначение.Значение;
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПриглашений = Новый Структура;
		ОтборПриглашений.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
		
		ТаблицаПриглашенийДляОтправки = ТаблицаПриглашений.Скопировать(ОтборПриглашений);
		
		ДопПараметры = Новый Структура;
		ИмяФайла = Неопределено;
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		
		ПутьДляПриглашений = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("invite", Новый УникальныйИдентификатор);
		ИмяФайлаПриглашения = ПутьДляПриглашений + "SendContacts.xml";
		КопироватьФайл(ИмяФайла, ИмяФайлаПриглашения);
		РезультатОтправки = ОбменСКонтрагентамиВнутренний.ОтправитьЧерезОператораЭДО(
			Маркер,
			ПутьДляПриглашений,
			"SendContacts",
			ПрофильНастроекЭДО);
		УдалитьФайлы(ПутьДляПриглашений);
		
		Если РезультатОтправки <> 0 Тогда
			Для каждого СтрокаТаблицы Из ТаблицаПриглашений Цикл
				ИскомаяНастройкаЭДО = НастройкаЭДО.ПолучитьОбъект();
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
				ИскомаяНастройкаЭДО.ОписаниеОшибки = "";
				ИскомаяНастройкаЭДО.Записать();
			КонецЦикла;
			ОтправленоПриглашений = ТаблицаПриглашений.Количество();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам, ПриглашениеПринято)
	
	Для каждого НастройкаЭДО Из Элементы.ТребуетсяСогласие.ВыделенныеСтроки Цикл
		СтруктураСертификата = СоответствиеПрофилейНастроекЭДОМаркерам.Получить(НастройкаЭДО.ПрофильНастроекЭДО);
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Ложь;
		
		ИскомаяНастройкаЭДО = НастройкаЭДО.ПолучитьОбъект();
		Если ИскомаяНастройкаЭДО.НастройкаЭДОУникальна() Тогда
			//Вставить код принятия отклонения контакта через ЭДО
			Результат = Ложь;
		КонецЕсли;
		Если Результат Тогда
			Если ПриглашениеПринято Тогда
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
			Иначе
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			ИскомаяНастройкаЭДО.Записать();
			
			КоличествоПринятыхПриглашений = КоличествоПринятыхПриглашений + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрофилиНастроекЭДО(Знач МассивНастроекЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.Ссылка В(&МассивНастроекЭДО)";
	
	Запрос.УстановитьПараметр("МассивНастроекЭДО", МассивНастроекЭДО);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица.ВыгрузитьКолонку("ПрофильНастроекЭДО");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСкрытьБыстрыйПоиск()
	
	Элементы.ЗаголовокОтбора.Заголовок = "Быстрый поиск" + ?(ПоказатьБыстрыйПоиск," (скрыть)", " (показать)");
	Элементы.БыстрыеОтборы.Видимость = ПоказатьБыстрыйПоиск;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ПослеОтправкиПЭД(Результат, ДополнительныеПараметры) Экспорт
	
	КолПодписанных = 0;
	КолПодготовленных = 0;
	КолОтправленных = 0;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если НЕ(Результат.Свойство("КолПодготовленных", КолПодготовленных)
				И ТипЗнч(КолПодготовленных) = Тип("Число")) Тогда
			КолПодготовленных = 0;
		КонецЕсли;
		Если НЕ(Результат.Свойство("КолОтправленных", КолОтправленных)
				И ТипЗнч(КолОтправленных) = Тип("Число")) Тогда
			
			КолОтправленных = 0;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Число") Тогда
		КолПодписанных = ДополнительныеПараметры;
	КонецЕсли;
	
	ОповеститьОРезультатах(КолПодписанных, КолПодготовленных, КолОтправленных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашенияОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстЗаголовка = НСтр("ru='Отклоняются приглашения';uk='Відхиляються запрошення'");
		
		КоличествоОтклоненныхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоОтклоненныхПриглашений, СоответствиеПрофилейИПараметровСертификатов, Ложь);
		
		ШаблонСообщения = НСтр("ru='Отклонено приглашений: %1';uk='Відхилено запрошень: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоОтклоненныхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru='При отклонении приглашений возникли ошибки.
            |Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'
            |;uk='При відхиленні запрошень виникли помилки.
            |Необхідно виконати тест настройок ЕДО з зазначеними контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашенияОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстЗаголовка = НСтр("ru='Принимаются приглашения';uk='Приймаються запрошення'");
		
		КоличествоПринятыхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, СоответствиеПрофилейИПараметровСертификатов, Истина);
		
		ШаблонСообщения = НСтр("ru='Принято приглашений: %1';uk='Прийнято запрошень: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПринятыхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru='При принятии приглашений возникли ошибки.
            |Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'
            |;uk='При прийнятті запрошень виникли помилки.
            |Необхідно виконати тест настройок ЕДО з зазначеними контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашениеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстЗаголовка = НСтр("ru='Отправка приглашений получателям';uk='Відправлення запрошень одержувачам'");
		
		ОтправленоПриглашений = 0;
		ОтправитьПриглашенияСервер(ОтправленоПриглашений, СоответствиеПрофилейИПараметровСертификатов);
		
		ШаблонСообщения = НСтр("ru='Отправлено приглашений: %1';uk='Відправлено запрошень: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОтправленоПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
	Иначе
		ТекстОшибки = НСтр("ru='При отправке приглашений возникли ошибки.
            |Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'
            |;uk='При відправці запрошення виникли помилки.
            |Необхідно виконати тест настройок ЕДО з зазначеними контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакетыОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = Результат.СоответствиеПрофилейИПараметровСертификатов;
	
	МассивЭД = ДополнительныеПараметры.МассивЭД;
	
	КоличествоОтправленных = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивЭД, СоответствиеПрофилейИПараметровСертификатов);

	ШаблонОповещения = НСтр("ru='Отправлено пакетов: (%1).';uk='Відправлено пакетів: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru='Отправка электронных документов';uk='Відправлення електронних документів'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоОповещение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДинамическиеСписки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область КомандыЭДО

Процедура ВыполнитьКомандуФормыДокумента(Объект, Форма, ИмяКоманды) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПроверки = Неопределено;
		ОбменСКонтрагентамиКлиентПереопределяемый.ОбъектМодифицирован(Объект, Форма, РезультатПроверки);
		Если РезультатПроверки = Неопределено Тогда
			
			Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
				СтрПроведен = ?(Проведен, НСтр("ru='записать и провести.
                |Записать и провести?'
                |;uk='записати i провести.
                |Записати і провести?'"), НСтр("ru='записать.
                |Записать?'
                |;uk='записати.
                |Записати?'"));
				
				ШаблонСообщения = НСтр("ru='Документ изменен. Для формирования электронного документа его необходимо %1';uk='Документ змінено. Для формування електронного документа його необхідно %1'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрПроведен);
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("СсылкаНаОбъект", Объект.Ссылка);
				ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
				ДополнительныеПараметры.Вставить("Форма", Форма);
				ДополнительныеПараметры.Вставить("Проведен", Проведен);
				
				Обработчик = Новый ОписаниеОповещения( "ЗаписатьВФорме", ЭтотОбъект, ДополнительныеПараметры);
				
				ПоказатьВопрос( Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена,
					НСтр("ru='Документ изменен.';uk='Документ змінено.'"));
				
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	ВыполнитьКомандуЭДО(Объект.Ссылка, ИмяКоманды);
	
КонецПроцедуры

Процедура ЗаписатьВФорме(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		Проведен = ДополнительныеПараметры.Проведен;
		Форма = ДополнительныеПараметры.Форма;
		
		Если Проведен Тогда
			Попытка
				Отказ = Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			Исключение
				ПоказатьПредупреждение(, НСтр("ru='Операция не выполнена!';uk='Операція не виконана!'"));
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Не Форма.ЗаписатьВФорме();
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = ДополнительныеПараметры.СсылкаНаОбъект;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	ВыполнитьКомандуЭДО(СсылкаНаОбъект, ИмяКоманды);
	
	
КонецПроцедуры

// Открывает форму с деревом электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра дерева электронных документов.
//  ЭД - ссылка на электронный документ, используется для позиционирования текущей строки дерева на переданном ЭД
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено, ЭД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДОПоДокументу(СсылкаНаОбъект) Тогда
		
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия, ЭД);
	Иначе
		
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает нажатие на рекламную ссылку на форме печати БСП.
//
// Параметры:
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - текст навигационной ссылки;
//  МассивСсылок - Массив - ссылка на объекты ИБ, которые передали на печать.
//
Процедура ОбработкаНавигационнойСсылкиВФормеПечатиБСП(НавигационнаяСсылкаФорматированнойСтроки, МассивСсылок) Экспорт
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(МассивСсылок[0]);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает, подписывает и отправляет электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить", , ЭД);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура СформироватьНовыйЭД(ПараметрКоманды, Показывать=Истина) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Показывать Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьПоказать");
	Иначе
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Сформировать");
	КонецЕсли;
	
КонецПроцедуры

// Процедура отправляет повторно электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура ОтправитьПовторноЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "ОтправитьПовторно", , ЭД);
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
//
//
Процедура ОтправитьПолучитьОбменСКонтрагентами() Экспорт
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьПолучитьОбменСКонтрагентами();
	
КонецПроцедуры

// Процедура открывает форму администрирования обмена электронными документами.
//
// Параметры:
//  ПараметрКоманды - ссылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьФормуОбменаЭлектроннымиДокументами(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ИмяФормы = "ОбменЭлектроннымиДокументами";
	
	ПараметрыФормы = Новый Структура("ТекущийРаздел", ИмяФормы);
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияЭДО.Форма.ОбменЭлектроннымиДокументами",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открывается форма списка только с закладкой Настройки ЭДО с контрагентами.
//
Процедура ОткрытьФормуНастроекЭДОСКонтрагентами() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиЭДОСКонтрагентами", Истина);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

// Запускает обработку "Текущие дела ЭДО".
//
Процедура ОткрытьТекущиеДелаЭДО() Экспорт
	
	ОткрытьФорму("Обработка.ТекущиеДелаПоЭДО.Форма");
	
КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ
//
// Параметры:
//  ПараметрКоманды - ссылка на документ ИБ;
//  Источник - управляемая форма;
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, Источник = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
		Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
				
				ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД,
																		  ПараметрыОткрытия,
																		  ПараметрыОткрытия.Источник,
																		  Истина);
			Иначе
				ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД, , Источник, Истина);
			КонецЕсли;
			
		Иначе
			ТекстШаблона = НСтр("ru='%1. Электронный документ не найден.';uk='%1. Електронний документ не знайдений.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ТекЭл);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура принудительно закрывает электронный документооборот для массива ссылок на документы.
//
// Параметры:
//   МассивВладельцевЭД - Массив - содержит ссылки на документы ИБ, для которых требуется закрыть
//      электронный документооборот.
//
Процедура ЗакрытьПринудительноЭДО(МассивВладельцевЭД) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(МассивВладельцевЭД);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСсылок", МассивСсылок);
	
	Обработчик = Новый ОписаниеОповещения("ЗакрытьПринудительноРезультатВводаСтроки", ЭтотОбъект, ДополнительныеПараметры);
	
	ПричинаЗакрытия = "";
	ПоказатьВводСтроки(Обработчик, ПричинаЗакрытия, НСтр("ru='Укажите причину закрытия документооборота';uk='Вкажіть причину закриття документообігу'"),,Истина);
	
	
КонецПроцедуры

// Продолжение процедуры ЗакрытьПринудительноЭДО.
Процедура ЗакрытьПринудительноРезультатВводаСтроки(ПричинаЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПричинаЗакрытия) Тогда
		
		ТекстСообщения = НСтр("ru='Для закрытия документооборота по выбранным ЭД необходимо указать причину закрытия!';uk='Для закриття документообігу за обраним ЕД необхідно зазначити причину закриття!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	МассивСсылок = ДополнительныеПараметры.МассивСсылок;
	КоличествоОбработанныхЭД = 0;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(МассивСсылок, ПричинаЗакрытия, КоличествоОбработанныхЭД);
	
	ТекстОповещения = НСтр("ru='Изменено состояние ЭД документов на ""Закрыт принудительно"": (%1)';uk='Змінено стан ЕД документів на ""Закритий примусово"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", КоличествоОбработанныхЭД);
	ПоказатьОповещениеПользователя(НСтр("ru='Обработка документов';uk='Обробка документів'"), , ТекстОповещения);
	Если КоличествоОбработанныхЭД > 0 Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыЭДОБыстрыйОбмен

// Открывает форму выгрузки ЭД в файл
// ПараметрыЭД - структура
// Ключ - "ВыгрузитьВФайл" - обязательный параметр, определяет режим открытия формы выгрузи документа
// ЗначениеКлюча - СтруктураЭД - структура.
// Поля "СтруктураЭД"
//  ВидЭД -  перечисление ВидыЭД (файл быстрого обмена формируется только для ЭД ПрайсЛист);
//  АдесТаблицыЦен - адрес во временном хранилище, по которому находится таблица значений, источник данных.
//  ДатаФормирования - дата формирования ЭД
//  ВладелецЭД - организация которой принадлежит ЭД
//  Организация - организация от имени которой формируется ЭД
//
Процедура СформироватьФайлБыстрогоОбмена(ПараметрыЭД) Экспорт
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаВыгрузкаЭДВФайл", ПараметрыЭД);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", МассивСсылок);
	ФормаПросмотраЭД = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаВыгрузкаЭДВФайл", Параметры);
	
КонецПроцедуры

// Процедура создает новый электронный каталог.
//
Процедура БыстрыйОбменСформироватьНовыйЭДКаталог() Экспорт
	
	НазваниеСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	
	Обработчик = Новый ОписаниеОповещения("СформироватьНовыйЭДКаталог", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник." + НазваниеСправочникаОрганизации + ".ФормаВыбора",,,,,, Обработчик, Режим);
	
КонецПроцедуры

// Описание оповещения для процедуры "БыстрыйОбменСформироватьНовыйЭДКаталог"
Процедура СформироватьНовыйЭДКаталог(Организация, ДополнительныеПараметры) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Организация", Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СформироватьНовыйЭДКаталогЗавершить", ОбменСКонтрагентамиСлужебныйКлиент, ДопПараметры);
	ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуПодбораТоваров(Новый УникальныйИдентификатор(),
		ОписаниеОповещения);
	
КонецПроцедуры

// Загружает файл электронного документа в данные ИБ, используется для вывода команды в интерфейсы.
//
Процедура БыстрыйОбменЗагрузитьЭДИзФайла() Экспорт
	
	БыстрыйОбменЗагрузитьЭД();
	
КонецПроцедуры

// Загружает файл электронного документа в документ ИБ.
//
// Параметры:
//  СсылкаНаДокумент - Ссылка на объект ИБ, данные которого необходимо перезаполнить.
//
Процедура БыстрыйОбменЗагрузитьЭД(СсылкаНаДокумент = Неопределено) Экспорт
	
	Файл = Неопределено;
	АдресВХранилище = Неопределено;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, Файл, Истина, УникальныйИдентификатор);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПомощникиПодключенияЭДО

// Запускает мастер-помощник по подключению организации к сервису 1С-ЭДО.
//
Процедура ПомощникПодключенияКСервису1СЭДО() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает мастер-помощник по подключению организации к прямому обмену с контрагентами.
//
Процедура ПомощникПодключенияКПрямомуОбмену() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПерезаполнениеДокументаИБДаннымиЭД

// Перезаполняет документ ИБ на основании актуального ЭД.
//
// Параметры:
//  ПараметрКоманды - Массив, Ссылка - объекты информационной базы.
//  Источник - УправляемаяФорма - форма объекта.
//
Процедура ПерезаполнитьДокумент(ПараметрКоманды, Источник = Неопределено, СопоставлениеУжеВыполнено = Ложь, ЭД = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПроведенныхДокументов = ОбменСКонтрагентамиСлужебныйВызовСервера.МассивПроведенныхДокументов(МассивСсылок);
	Шаблон = НСтр("ru='Перезаполнение документа %1.
                        |Операция возможна только для непроведенных документов!'
                        |;uk='Перезаповнення документа %1.
                        |Операція можлива тільки для непроведених документів!'");
	Для Каждого Документ Из МассивПроведенныхДокументов Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСсылок, МассивПроведенныхДокументов);
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлятьНоменклатуруПередЗаполнениемДокумента = Ложь;
	ОбменСКонтрагентамиКлиентПереопределяемый.СопоставлятьНоменклатуруПередЗаполнениемДокумента(СопоставлятьНоменклатуруПередЗаполнениемДокумента);
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		СоответствиеВладельцевИЭД = Новый Соответствие;
		СоответствиеВладельцевИЭД.Вставить(ПараметрКоманды, ЭД);
	Иначе
		СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	КонецЕсли;
	
	Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			Шаблон = НСтр("ru='Электронный документ для %1 не найден';uk='Електронний документ для %1 не знайдено'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхВладельцев = Новый Массив;
	
	Для каждого ТекущаяСтрока Из СоответствиеВладельцевИЭД Цикл
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда
			Возврат;
		КонецЕсли;
		
		ДокументИБ = ТекущаяСтрока.Ключ;
		СсылкаНаЭД = ТекущаяСтрока.Значение;
	
		Если Не ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектМетаданных = "";
		ДокументЗагружен = Ложь;
		
		// Форма сопоставления открывается только для одного выбранного документа.
		Если СоответствиеВладельцевИЭД.Количество() = 1 Тогда
			Если СопоставлятьНоменклатуруПередЗаполнениемДокумента И Не СопоставлениеУжеВыполнено Тогда
				СтруктураПараметров = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
					СсылкаНаЭД);
				Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
					ОткрытьФорму(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы, Источник);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.ПерезаполнитьДокументыИБПоЭД(
			ДокументИБ,
			СсылкаНаЭД,
			ОбъектМетаданных,
			ДокументЗагружен);
		
		Если ДокументЗагружен Тогда
				
			МассивИзмененныхВладельцев.Добавить(ДокументИБ);
			
			МассивДокументовОбновления = Новый Массив;
			МассивДокументовОбновления.Добавить(ДокументИБ);
			Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивДокументовОбновления);
			
			// Форма сопоставления открывается только для одного выбранного документа.
			Если СоответствиеВладельцевИЭД.Количество() = 1 Тогда
				Если НЕ СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
					СтруктураПараметров = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
					Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
						ДопПараметры = Новый Структура;
						ДопПараметры.Вставить("ОбъектМетаданных", ОбъектМетаданных);
						ДопПараметры.Вставить("КлючФормы", ДокументИБ);
						Обработчик = Новый ОписаниеОповещения("ЗаполнитьДокументПоЭД", ЭтотОбъект, ДопПараметры);
						Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
						ОткрытьФорму(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы,,,,,Обработчик, Режим);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если МассивИзмененныхВладельцев.Количество() > 0 Тогда
		
		Если МассивИзмененныхВладельцев.Количество() = 1 Тогда
			ТекстСостоянияВывод = НСтр("ru='Документ перезаполнен.';uk='Документ перезаповнен.'");
		Иначе
			ТекстСостоянияВывод = НСтр("ru='Документы перезаполнены (%1).';uk='Документи перезаповнені (%1).'");
			ТекстСостоянияВывод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостоянияВывод, 
				МассивИзмененныхВладельцев.Количество());
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru='Обмен электронными документами';uk='Обмін електронними документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостоянияВывод);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументПоЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = ДополнительныеПараметры.ОбъектМетаданных;
	КлючФормы = ДополнительныеПараметры.КлючФормы;
	
	ФормаДокумента = ПолучитьФорму(ОбъектМетаданных + ".ФормаОбъекта", Новый Структура("Ключ", КлючФормы));
	
	Если ТипЗнч(ФормаДокумента) = Тип("УправляемаяФорма") Тогда
		ДанныеФормы = ФормаДокумента.Объект;
	Иначе
		ДанныеФормы = ФормаДокумента.ДокументОбъект;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаполнитьИсточник(ДанныеФормы, Результат);
	
	Если ТипЗнч(ФормаДокумента) = Тип("УправляемаяФорма") Тогда
		КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
	Иначе
		ФормаДокумента.ДокументОбъект = ДанныеФормы;
	КонецЕсли;
	
	ФормаДокумента.Открыть();
	ФормаДокумента.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не ВыборВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	Расширение = Прав(ВыбранноеИмяФайла, 3);
	СсылкаНаДокумент = ДополнительныеПараметры.СсылкаНаДокумент;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	
	Если Не (ВРег(Расширение) = ВРег("zip") Или ВРег(Расширение) = ВРег("xml")) Тогда
		ТекстСообщения = НСтр("ru='Не корректный формат файла.
        |Выберите файл с расширением ""zip"" или ""xml"".'
        |;uk='Не коректний формат файлу.
        |Виберіть файл з розширенням ""zip"" або ""xml"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураОбмена = Новый Структура();
	СтруктураОбмена.Вставить("НаправлениеЭД",           ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
	СтруктураОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	СтруктураОбмена.Вставить("АдресХранилища",          АдресФайла);
	СтруктураОбмена.Вставить("СсылкаНаДокумент",        СсылкаНаДокумент);
	СтруктураОбмена.Вставить("ИмяФайла",                ВыбранноеИмяФайла);
	СтруктураОбмена.Вставить("ФайлАрхива",              ВРег(Расширение) = ВРег("zip"));
	
	Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормаЗагрузкиПросмотраЭД", Параметры, ,
		СтруктураОбмена.УникальныйИдентификатор);
	
	
КонецПроцедуры

#КонецОбласти

#Область РекламаЭДО

// Открывает рекламную форму ЭДО.
//
Процедура ПредложениеОформитьЗаявлениеНаПодключение(Контрагент = Неопределено, Организация = Неопределено, ДополнительныеПараметры = Неопределено, ОбработчикЗакрытияФормы = Неопределено) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеМетоды
// Устарела. Следует использовать процедуру ОткрытьДеревоЭД
// Открывает форму со списком электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть.
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра списка электронных документов.
//
Процедура ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДОПоДокументу(СсылкаНаОбъект) Тогда
		
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
			Возврат;
		КонецЕсли;
	
		ПараметрыЭД = Неопределено;
		ОткрытьФормуСоглашения = Ложь;
		ПроверятьДляСоглашения = (ПараметрыОткрытия = Неопределено);
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.МожноОткрытьВФормеДереваЭД(СсылкаНаОбъект, ПроверятьДляСоглашения,
			ОткрытьФормуСоглашения, ПараметрыЭД) Тогда
			
			ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия, Ложь);
		Иначе
			ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
			Если ПараметрыОткрытия = Неопределено Тогда
				ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СписокЭД", ПараметрыФормы);
			Иначе
				Окно = Неопределено;
				Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
					Окно = ПараметрыОткрытия.Окно;
				КонецЕсли;
				ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СписокЭД", ПараметрыФормы,
					СсылкаНаОбъект, Ложь, Окно);
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьКомандуЭДО(СсылкаНаОбъект, ИмяКоманды)
	
	Если ИмяКоманды = "СформироватьПодписатьОтправитьЭД" Тогда
		СформироватьПодписатьОтправитьЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "СформироватьНовыйЭД" Тогда
		СформироватьНовыйЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "ОтправитьПовторно" Тогда
		ОтправитьПовторноЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "ОткрытьАктуальныйЭД" Тогда
		ОткрытьАктуальныйЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "БыстрыйОбменСформироватьНовыйЭД" Тогда
		 БыстрыйОбменСформироватьНовыйЭД(СсылкаНаОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает нажатие на рекламную ссылку на форме объекта.
//
// Параметры:
//  СсылкаНаОбъект - СсылкаНаОбъект - ссылка на объект ИБ, на форме которого была активирована гиперссылка с рекламным текстом.
//
Процедура ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект) Экспорт
	
	Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоНастройкиЭДО(Ложь) = Ложь Тогда
		ТекстСообщения = НСтр("ru='Недостаточно прав для настройки ЭДО с контрагентом.
                                    |Обратитесь к администратору.'
                                    |;uk='Недостатньо прав для налаштування ЕДО з контрагентом.
                                    |Зверніться до адміністратора.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыЭД = Неопределено;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД);
	
	Если ПараметрыЭД.Свойство("НастройкаЭДО") И ЗначениеЗаполнено(ПараметрыЭД.НастройкаЭДО) Тогда
		
		Если ПараметрыЭД.Свойство("СтатусПодключения") И ЗначениеЗаполнено(ПараметрыЭД.СтатусПодключения)
			И ПараметрыЭД.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НастройкаЭДО", ПараметрыЭД.НастройкаЭДО);
			ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
			ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", ПараметрыЭД.НастройкаЭДО);
			
			ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
			
		КонецЕсли;
	Иначе
		ПредложениеОформитьЗаявлениеНаПодключение(ПараметрыЭД.Контрагент, ПараметрыЭД.Организация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НовыеМетоды

#КонецОбласти


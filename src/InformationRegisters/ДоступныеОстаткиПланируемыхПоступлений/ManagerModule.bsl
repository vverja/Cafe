#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Производит расчет доступных остатков планируемых поступлений и записывает их в одноименный регистр сведений.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит таблицу "ВтТовары", содержащую товары
//  для которых необходимо рассчитать доступные остатки.
//
Процедура РассчитатьОстаткиГрафикаДвиженияТоваров(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.Текст = ТекстРасчетаДоступныхОстатков();

	ПакетРезультатов = Запрос.ВыполнитьПакет();

	МенеджерВременныхТаблиц.Закрыть();

	ЗаписиРегистра = ПакетРезультатов[ПакетРезультатов.Количество() - 1].Выгрузить();
	ВсегоЗаписей = ЗаписиРегистра.Количество();
	Индекс = 0;

	ДоступныеОстатки = РегистрыНакопления.ГрафикПоступленияТоваров.ТаблицаДоступныеОстатки(
		ПакетРезультатов[ПакетРезультатов.Количество() - 2].Выбрать());

	КлючЗаписи = Новый Структура("Номенклатура, Характеристика, Склад");

	НаборЗаписей = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
	Для Каждого Запись Из ДоступныеОстатки Цикл

		Если КлючИзменился(КлючЗаписи, Запись) Тогда

			Пока Индекс < ВсегоЗаписей И Не КлючИзменился(КлючЗаписи, ЗаписиРегистра[Индекс]) Цикл

				ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, ЗаписиРегистра[Индекс], "Удаление");
				Индекс = Индекс + 1;

			КонецЦикла;

			ЗаполнитьЗначенияСвойств(КлючЗаписи, Запись);

		КонецЕсли;

		Пока Индекс < ВсегоЗаписей И Не КлючИзменился(КлючЗаписи, ЗаписиРегистра[Индекс])
			И ЗаписиРегистра[Индекс].ДатаДоступности > Запись.ДатаДоступности Цикл

				ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, ЗаписиРегистра[Индекс], "Удаление");
				Индекс = Индекс + 1;

			КонецЦикла;
		
		Если Индекс < ВсегоЗаписей И Не КлючИзменился(КлючЗаписи, ЗаписиРегистра[Индекс])
			И Запись.ДатаДоступности = ЗаписиРегистра[Индекс].ДатаДоступности Тогда

			Если Запись.Количество = ЗаписиРегистра[Индекс].Количество Тогда
					Индекс = Индекс + 1;
				Продолжить;
			Иначе
				ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, Запись, "Запись");
				Индекс = Индекс + 1;
			КонецЕсли;

		Иначе

			ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, Запись, "Запись");

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстРасчетаДоступныхОстатков()
	
	Текст =
		РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОборотов(Ложь)
		+ РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОстатков(Ложь)
		+ "ВЫБРАТЬ
		|	Т.Номенклатура                                КАК Номенклатура,
		|	Т.Характеристика                              КАК Характеристика,
		|	Т.Склад                                       КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)  КАК Назначение,
		|	ЕСТЬNULL(ОборотыГрафика.Период,
		|		ДАТАВРЕМЯ(1,1,1))                         КАК Период,
		|	ЕСТЬNULL(ОборотыГрафика.Количество,0)         КАК Оборот,
		|	ЕСТЬNULL(ОстаткиГрафика.Количество,0)         КАК Остаток
		|ИЗ
		|	ВтТовары КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиГрафика КАК ОстаткиГрафика
		|		ПО Т.Номенклатура   = ОстаткиГрафика.Номенклатура
		|		 И Т.Характеристика = ОстаткиГрафика.Характеристика
		|		 И Т.Склад          = ОстаткиГрафика.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОборотыГрафика КАК ОборотыГрафика
		|		ПО Т.Номенклатура   = ОборотыГрафика.Номенклатура
		|		 И Т.Характеристика = ОборотыГрафика.Характеристика
		|		 И Т.Склад          = ОборотыГрафика.Склад
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад,
		|	Период Убыв
		|;
		|
		|/////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура                                КАК Номенклатура,
		|	Т.Характеристика                              КАК Характеристика,
		|	Т.Склад                                       КАК Склад,
		|	ДоступныеОстаткиДоИзменения.ДатаДоступности   КАК ДатаДоступности,
		|	ДоступныеОстаткиДоИзменения.Количество        КАК Количество
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиДоИзменения
		|		ПО Т.Номенклатура   = ДоступныеОстаткиДоИзменения.Номенклатура
		|		 И Т.Характеристика = ДоступныеОстаткиДоИзменения.Характеристика
		|		 И Т.Склад          = ДоступныеОстаткиДоИзменения.Склад
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад,
		|	ДатаДоступности Убыв";
	
	Возврат Текст;
	
КонецФункции

Процедура ЗаписатьНаборВРегистрДоступныеОстатки(НаборЗаписей, ДанныеЗаполнения, Операция)

	НаборЗаписей.Отбор.Номенклатура.Значение    = ДанныеЗаполнения.Номенклатура;
	НаборЗаписей.Отбор.Характеристика.Значение  = ДанныеЗаполнения.Характеристика;
	НаборЗаписей.Отбор.Склад.Значение           = ДанныеЗаполнения.Склад;
	НаборЗаписей.Отбор.ДатаДоступности.Значение = ДанныеЗаполнения.ДатаДоступности;

	НаборЗаписей.Отбор.Номенклатура.Использование    = Истина;
	НаборЗаписей.Отбор.Характеристика.Использование  = Истина;
	НаборЗаписей.Отбор.Склад.Использование           = Истина;
	НаборЗаписей.Отбор.ДатаДоступности.Использование = Истина;

	НаборЗаписей.Очистить();

	Если Операция = "Запись" Тогда
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДанныеЗаполнения);
	КонецЕсли;

	НаборЗаписей.Записать();

КонецПроцедуры

Функция КлючИзменился(Ключ, НовыйКлюч)

	Возврат Ключ.Номенклатура   <> НовыйКлюч.Номенклатура
		Или Ключ.Характеристика <> НовыйКлюч.Характеристика
		Или Ключ.Склад          <> НовыйКлюч.Склад;

КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ИсправитьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	// Алгоритм вычисления номенклатуры, характеристики и склада, по которым необходимо пересчитать "Доступные остатки планируемых поступлений":
	// - позиции распоряжений, по которым в текущей версии обновляется "Движение товаров" (могут появиться или исчезнуть из графика, могут быть в остатках планируемых поступлений)
	// - позиции, по которым есть обороты по регистру "Движение товаров" (должны быть в графике, могут быть в остатках планируемых поступлений).
	// - позиции, по которым есть движения по регистру "График поступления товаров" (есть в графике по факту, могут быть в остатках планируемых поступлений).
	// - позиции регистраторов, по которым в текущей версии обновляется "График отгрузки товаров" (могут появиться или исчезнуть из графика, могут быть в остатках планируемых поступлений)
	// - позиции, по которым есть движения по регистру "График отгрузки по факту" (есть в графике по факту, могут быть в остатках планируемых поступлений).
	// - позиции, по которым есть записи по регистру "Доступные остатки планируемых поступлений" (есть в остатках планируемых поступлений по факту).
	
#Область РегистрацияПозицийИзОбновленияРегистраДвижениеТоваров

	ПолноеИмяРегистраДвижениеТоваров = "РегистрНакопления.ДвижениеТоваров";
	ИмяРегистраДвижениеТоваров = "ДвижениеТоваров";
    
// #Область УдалениеИнформацииОПланируемойОтгрузке
	Запрос = Новый Запрос();
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	ВЫБОР 
    |       КОГДА ТаблицаВозвращаемыеТовары.Порча И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) 
    |           ТОГДА ТаблицаВозвращаемыеТовары.НоменклатураОприходование
    |		ИНАЧЕ
    |           ТаблицаВозвращаемыеТовары.Номенклатура
    |		КОНЕЦ КАК Номенклатура,
    |	ВЫБОР 
    |       КОГДА ТаблицаВозвращаемыеТовары.Порча И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) 
    |           ТОГДА ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
    |		ИНАЧЕ
    |			ТаблицаВозвращаемыеТовары.Характеристика
    |		КОНЕЦ КАК Характеристика,
    |	ТаблицаВозвращаемыеТовары.Ссылка.Склад КАК Склад
    |ИЗ
    |	РегистрНакопления.ДвижениеТоваров КАК Таблица
    |	    ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
    |		ПО ТаблицаВозвращаемыеТовары.Ссылка = Таблица.Регистратор
    |ГДЕ
    |	Таблица.Регистратор ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
    |	// Старые записи о планируемой отгрузке, не нужны, так как ресурсы были удалены.
    |	И Таблица.ПланируемоеПоступление = 0 И Таблица.ПланируемоеПоступлениеПодЗаказ = 0
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ТаблицаТовары.Номенклатура КАК Номенклатура,
    |	ТаблицаТовары.Характеристика КАК Характеристика,
    |	ТаблицаТовары.Ссылка.СкладПолучатель КАК Склад
    |ИЗ
    |	РегистрНакопления.ДвижениеТоваров КАК Таблица
    |	    ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
    |		ПО ТаблицаТовары.Ссылка = Таблица.Регистратор
    |ГДЕ
    |	Таблица.Регистратор ССЫЛКА Документ.ЗаказНаПеремещение
    |
    |	// Старые записи о планируемой отгрузке, не нужны, так как ресурсы были удалены.
    |	И Таблица.ПланируемоеПоступление = 0 И Таблица.ПланируемоеПоступлениеПодЗаказ = 0
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ТаблицаТовары.Номенклатура КАК Номенклатура,
    |	ТаблицаТовары.Характеристика КАК Характеристика,
    |	ТаблицаТовары.Ссылка.Склад КАК Склад
    |ИЗ
    |	РегистрНакопления.ДвижениеТоваров КАК Таблица
    |	    ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
    |		ПО ТаблицаТовары.Ссылка = Таблица.Регистратор
    |ГДЕ
    |	Таблица.Регистратор ССЫЛКА Документ.ЗаказНаСборку
    |
    |	// Старые записи о планируемой отгрузке, не нужны, так как ресурсы были удалены.
    |	И Таблица.ПланируемоеПоступление = 0 И Таблица.ПланируемоеПоступлениеПодЗаказ = 0
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ТаблицаТовары.Номенклатура КАК Номенклатура,
    |	ТаблицаТовары.Характеристика КАК Характеристика,
    |	ТаблицаТовары.Ссылка.СкладПолучатель КАК Склад
    |ИЗ
    |	РегистрНакопления.ДвижениеТоваров КАК Таблица
    |	    ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
    |		ПО ТаблицаТовары.Ссылка = Таблица.Регистратор
    |ГДЕ
    |	Таблица.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
    |
    |	// Старые записи о планируемой отгрузке, не нужны, так как ресурсы были удалены.
    |	И Таблица.ПланируемоеПоступление = 0 И Таблица.ПланируемоеПоступлениеПодЗаказ = 0
    |
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ТаблицаТовары.Номенклатура КАК Номенклатура,
    |	ТаблицаТовары.Характеристика КАК Характеристика,
    |	ТаблицаТовары.Ссылка.Склад КАК Склад
    |ИЗ
    |	РегистрНакопления.ДвижениеТоваров КАК Таблица
    |	    ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Товары КАК ТаблицаТовары
    |		ПО ТаблицаТовары.Ссылка = Таблица.Регистратор
    |ГДЕ
    |	Таблица.Регистратор ССЫЛКА Документ.СборкаТоваров
    |
    |	// Старые записи о планируемой отгрузке, не нужны, так как ресурсы были удалены.
    |	И Таблица.ПланируемоеПоступление = 0 И Таблица.ПланируемоеПоступлениеПодЗаказ = 0
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |//Отклоненные заявки на возврат
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	ВЫБОР 
    |       КОГДА ТаблицаВозвращаемыеТовары.Порча И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) 
    |           ТОГДА ТаблицаВозвращаемыеТовары.НоменклатураОприходование
    |		ИНАЧЕ
    |           ТаблицаВозвращаемыеТовары.Номенклатура
    |		КОНЕЦ КАК Номенклатура,
    |	ВЫБОР 
    |       КОГДА ТаблицаВозвращаемыеТовары.Порча И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) 
    |           ТОГДА ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
    |		ИНАЧЕ
    |			ТаблицаВозвращаемыеТовары.Характеристика
    |		КОНЕЦ КАК Характеристика,
    |	ТаблицаВозвращаемыеТовары.Ссылка.Склад КАК Склад
    |ИЗ
    |	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеТоваров КАК РегистрДвижениеТоваров
    |		ПО ЗаявкаНаВозврат.Ссылка = РегистрДвижениеТоваров.Регистратор
    |	    ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
    |		ПО ТаблицаВозвращаемыеТовары.Ссылка = ЗаявкаНаВозврат.Ссылка
    |ГДЕ
    |	ЗаявкаНаВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
    |	И НЕ РегистрДвижениеТоваров.Регистратор ЕСТЬ NULL
    |";
    
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
    КонецЦикла;
    
// #Область СборкаТоваров
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноПривязатьКНовымЗаказамПослеРазбиенияЗаказов();

	Запрос = Новый Запрос();
	Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура     КАК Номенклатура,
	|	Товары.Характеристика   КАК Характеристика,
	|	Товары.Ссылка.Склад     КАК Склад
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&Регистраторы)
    |";
        
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
    
// #Область ЗаказНаСборку
	Регистраторы = Документы.ЗаказНаСборку.ЗаказыНаРазборкуКоторыеНужноРазбитьПередЗаполнениемСерий();
	Запрос = Новый Запрос();
	Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура     КАК Номенклатура,
	|	Товары.Характеристика   КАК Характеристика,
	|	Товары.Ссылка.Склад     КАК Склад
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&Регистраторы)
    |";
        
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
    
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноРазбитьПоВариантуОбеспечения();
	Запрос = Новый Запрос();
	Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура     КАК Номенклатура,
	|	Товары.Характеристика   КАК Характеристика,
	|	Товары.Ссылка.Склад     КАК Склад
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&Регистраторы)
    |";
        
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
    
// #Область АктОРасхожденияхПослеПеремещения    
	ТекстЗапросаМеханизмаПроведения = Документы.АктОРасхожденияхПослеПеремещения.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистраДвижениеТоваров);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистраДвижениеТоваров,
		"Документ.АктОРасхожденияхПослеПеремещения"
    );
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	ТоварыАкта.Номенклатура           КАК Номенклатура,
    |	ТоварыАкта.Характеристика         КАК Характеристика,
    |	ТоварыАкта.Ссылка.СкладПолучатель КАК Склад
    |ИЗ
    |	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК ТоварыАкта
    |ГДЕ
    |	ТоварыАкта.Ссылка В(&Регистраторы)";
    
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
	
#КонецОбласти
	
#Область РегистрацияПозицийИзОборотовРегистраДвижениеТоваров
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Распоряжение   КАК Распоряжение,
		|		Таблица.Номенклатура   КАК Номенклатура,
		|		Таблица.Характеристика КАК Характеристика,
		|		Таблица.Склад          КАК Склад,
		|		СУММА(Таблица.ПланируемоеПоступление) КАК ПланируемоеПоступление
		|	ИЗ(
		|		ВЫБРАТЬ
		|			ДвижениеТоваров.Распоряжение   КАК Распоряжение,
		|			ДвижениеТоваров.Номенклатура   КАК Номенклатура,
		|			ДвижениеТоваров.Характеристика КАК Характеристика,
		|			ДвижениеТоваров.Склад          КАК Склад,
		|			
		|			ВЫБОР КОГДА ДвижениеТоваров.Корректировка ТОГДА
		|						-ДвижениеТоваров.ПланируемоеПоступление
		|					ИНАЧЕ
		|						ДвижениеТоваров.ПланируемоеПоступление
		|				КОНЕЦ КАК ПланируемоеПоступление
		|		ИЗ
		|			РегистрНакопления.ДвижениеТоваров КАК ДвижениеТоваров
		|		ГДЕ
		|			ДвижениеТоваров.Активность И ДвижениеТоваров.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Таблица
		|		
		|	СГРУППИРОВАТЬ ПО
		|		Таблица.Распоряжение, Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад
		|	ИМЕЮЩИЕ
		|		СУММА(Таблица.ПланируемоеПоступление) > 0) КАК Таблица";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
	
#КонецОбласти
	
#Область РегистрацияПозицийИзДвиженийРегистраГрафикПоступленияТоваров
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикПоступленияТоваров.Номенклатура   КАК Номенклатура,
		|	ГрафикПоступленияТоваров.Характеристика КАК Характеристика,
		|	ГрафикПоступленияТоваров.Склад          КАК Склад
		|ИЗ
		|	РегистрНакопления.ГрафикПоступленияТоваров КАК ГрафикПоступленияТоваров
		|ГДЕ
		|	ГрафикПоступленияТоваров.Активность И ГрафикПоступленияТоваров.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
	
#КонецОбласти
	
#Область РегистрацияПозицийИзРегистраГрафикОтгрузкиТоваров
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикОтгрузкиТоваров.Номенклатура   КАК Номенклатура,
		|	ГрафикОтгрузкиТоваров.Характеристика КАК Характеристика,
		|	ГрафикОтгрузкиТоваров.Склад          КАК Склад
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров КАК ГрафикОтгрузкиТоваров
		|ГДЕ
		|	ГрафикОтгрузкиТоваров.Активность
		|	И ГрафикОтгрузкиТоваров.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И ГрафикОтгрузкиТоваров.КоличествоИзЗаказов <> 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
	
#КонецОбласти

#Область РегистрацияПозицийИзРегистраДоступныеОстаткиПланируемыхПоступлений
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоступныеОстаткиПланируемыхПоступлений.Номенклатура   КАК Номенклатура,
		|	ДоступныеОстаткиПланируемыхПоступлений.Характеристика КАК Характеристика,
		|	ДоступныеОстаткиПланируемыхПоступлений.Склад          КАК Склад
		|ИЗ
		|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Склад.Установить(Выборка.Склад);
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Набор);
		
	КонецЦикла;
	
#КонецОбласти
	
КонецПроцедуры

Процедура ИсправитьДвижения(Параметры) Экспорт
	
	// Обработка возможна только когда полностью обновлены читаемые данные
	// (регистры "График отгрузки товаров" и "График поступления товаров").
	ГрафикОтгрузкиТоваровЗаблокирован = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
		"РегистрНакопления.ГрафикОтгрузкиТоваров");
	ГрафикПоступленияТоваровЗаблокирован = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
		"РегистрНакопления.ГрафикПоступленияТоваров");

	Если ГрафикОтгрузкиТоваровЗаблокирован Или ГрафикПоступленияТоваровЗаблокирован Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	// Получение порции измерений для обработки".
	ПолноеИмяРегистра = "РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений";
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// 4) Управляемая блокировка для ответственного чтения данных.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыНакопления.ГрафикОтгрузкиТоваров.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыНакопления.ГрафикПоступленияТоваров.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			// 5) Управляемая блокировка для последующей записи.
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура",   Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад",          Выборка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		// Все проверки выполнены, можно обрабатывать консистентно.
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&Номенклатура   КАК Номенклатура,
			|	&Характеристика КАК Характеристика,
			|	&Склад          КАК Склад
			|ПОМЕСТИТЬ ВтТовары
			|;
			|
			|///////////////////////////
			|"
			+ РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОборотов(Ложь)
			+ РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОстатков(Ложь)
			+ "ВЫБРАТЬ
			|	Т.Номенклатура                                КАК Номенклатура,
			|	Т.Характеристика                              КАК Характеристика,
			|	Т.Склад                                       КАК Склад,
			|	ЕСТЬNULL(ОборотыГрафика.Период,
			|		ДАТАВРЕМЯ(1,1,1))                         КАК Период,
			|	ЕСТЬNULL(ОборотыГрафика.Количество,0)         КАК Оборот,
			|	ЕСТЬNULL(ОстаткиГрафика.Количество,0)         КАК Остаток
			|ИЗ
			|	ВтТовары КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиГрафика КАК ОстаткиГрафика
			|		ПО Т.Номенклатура   = ОстаткиГрафика.Номенклатура
			|		 И Т.Характеристика = ОстаткиГрафика.Характеристика
			|		 И Т.Склад          = ОстаткиГрафика.Склад
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОборотыГрафика КАК ОборотыГрафика
			|		ПО Т.Номенклатура   = ОборотыГрафика.Номенклатура
			|		 И Т.Характеристика = ОборотыГрафика.Характеристика
			|		 И Т.Склад          = ОборотыГрафика.Склад
			|УПОРЯДОЧИТЬ ПО
			|	Номенклатура, Характеристика, Склад,
			|	Период Убыв";
		
		Запрос.УстановитьПараметр("Номенклатура",   Выборка.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Выборка.Характеристика);
		Запрос.УстановитьПараметр("Склад",          Выборка.Склад);
		Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
		
		ВыборкаОстаткиИОбротыГрафика = Запрос.Выполнить().Выбрать();
		ДоступныеОстатки = РегистрыНакопления.ГрафикПоступленияТоваров.ТаблицаДоступныеОстатки(ВыборкаОстаткиИОбротыГрафика);
		
		НаборЗаписей = РегистрыСведений.ДоступныеОстаткиПланируемыхПоступлений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Использование    = Истина;
		НаборЗаписей.Отбор.Характеристика.Использование  = Истина;
		НаборЗаписей.Отбор.Склад.Использование           = Истина;
		
		НаборЗаписей.Отбор.Номенклатура.Значение    = Выборка.Номенклатура;
		НаборЗаписей.Отбор.Характеристика.Значение  = Выборка.Характеристика;
		НаборЗаписей.Отбор.Склад.Значение           = Выборка.Склад;
		
		Для Каждого Запись Из ДоступныеОстатки Цикл
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Запись);
		КонецЦикла;
		
		Если ЕстьИзмененияНабора(Выборка, НаборЗаписей) Тогда
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		Иначе
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры


Функция ЕстьИзмененияНабора(Выборка, НаборЗаписей)
	
	Таблица = НаборЗаписей.Выгрузить();
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.ДатаДоступности КАК ДатаДоступности,
		|	Таблица.Количество      КАК Количество
		|ПОМЕСТИТЬ ВтТаблицаИзменений
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|///////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаИзменений.ДатаДоступности КАК ДатаДоступности,
		|		ТаблицаИзменений.Количество      КАК Количество
		|	ИЗ
		|		ВтТаблицаИзменений КАК ТаблицаИзменений
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДоступныеОстаткиПланируемыхПоступлений.ДатаДоступности КАК ДатаДоступности,
		|		-ДоступныеОстаткиПланируемыхПоступлений.Количество     КАК КоличествоПодЗаказ
		|	ИЗ
		|		РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ДоступныеОстаткиПланируемыхПоступлений
		|	ГДЕ
		|		ДоступныеОстаткиПланируемыхПоступлений.Номенклатура     = &Номенклатура
		|		И ДоступныеОстаткиПланируемыхПоступлений.Характеристика = &Характеристика
		|		И ДоступныеОстаткиПланируемыхПоступлений.Склад          = &Склад) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.ДатаДоступности
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) <> 0";
		
	Запрос.УстановитьПараметр("Таблица",     НаборЗаписей.Выгрузить());
	Запрос.УстановитьПараметр("Номенклатура",   Выборка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Выборка.Характеристика);
	Запрос.УстановитьПараметр("Склад",          Выборка.Склад);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти


#КонецЕсли

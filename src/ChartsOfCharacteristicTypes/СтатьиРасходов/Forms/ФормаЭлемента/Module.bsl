
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	УправлениеТорговлей = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	Если УправлениеТорговлей ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		Элементы.СтраницаНаПроизводственныеЗатраты.Видимость = Ложь;
	КонецЕсли;
	
	Если УправлениеТорговлей Тогда
		Элементы.ГруппаСтраницаРеглУчет.Видимость = Ложь;
		Элементы.СебестоимостьРеализации.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		СписокВыбора = Элементы.ТипЗначенияНаРасходыБудущихПериодов.СписокВыбора;
		ЗначениеОбъектЭксплуатации = СписокВыбора.НайтиПоЗначению("СправочникСсылка.ОбъектыЭксплуатации");
		Если ЗначениеОбъектЭксплуатации <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеОбъектЭксплуатации);
		КонецЕсли;
		ЗначениеНМА = СписокВыбора.НайтиПоЗначению("СправочникСсылка.НематериальныеАктивы");
		Если ЗначениеНМА <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеНМА);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		СписокВыбора = Элементы.ТипЗначенияНаПроизводственныеЗатраты.СписокВыбора;
		ЗначениеЗаказНаПроизводство = СписокВыбора.НайтиПоЗначению("ДокументСсылка.ЗаказНаПроизводство");
		Если ЗначениеЗаказНаПроизводство <> Неопределено Тогда
			СписокВыбора.Удалить(ЗначениеЗаказНаПроизводство);
		КонецЕсли;
	КонецЕсли;
	
	ЭлементСписокРБП = Элементы.ТипЗначенияНаРасходыБудущихПериодовПоУмолчанию;
	ЭлементСписокРБП.СписокВыбора.Добавить("СправочникСсылка.ПрочиеАктивыПассивы", НСтр("ru='Прочие активы';uk='Інші активи'"));
	
	Если Метаданные.ПланыСчетов.Найти("Хозрасчетный") <> Неопределено Тогда
		Элементы.КорреспондирующийСчет.Видимость = Ложь;
		Элементы.КорреспондирующийСчетПрочиеАктивы.Видимость = Ложь;
	Иначе
		ЗаполнитьСписокВыбораКорСчета();
	КонецЕсли;
	
	УстановитьВидимостьТиповЗначенийАналитики();
	
	Если Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы Тогда
		Элементы.КонтролироватьЗаполнениеАналитики.Видимость = Ложь;
		Если НЕ (Объект.ВидЦенности = Перечисления.ВидыЦенностей.ОС ИЛИ
				Объект.ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства) Тогда
			Элементы.РасходыНаРемонтОС.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	Если ТекущийОбъект.ВариантРаспределенияРасходов <> ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов") Тогда
		ТекущийОбъект.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	Если Не ПустаяСтрока(ТипЗначения) Тогда
		Если ТипЗначения = "ДокументСсылка.ЗаказКлиента"
			ИЛИ ТипЗначения = "ДокументСсылка.РеализацияТоваровУслуг"
		Тогда
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Истина;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов("
				|ДокументСсылка.АктВыполненныхРабот,
				|ДокументСсылка.РеализацияТоваровУслуг,
				|ДокументСсылка.РеализацияУслугПрочихАктивов,
				|ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
				|ДокументСсылка.ЗаказКлиента
				|");
		Иначе
			ТекущийОбъект.АналитикаРасходовЗаказРеализация = Ложь;
			ТекущийОбъект.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
		КонецЕсли;
	КонецЕсли;
	Если Объект.ВидЦенности.Пустая() Тогда
		Если Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
			Объект.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
		Иначе
			Объект.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ДоступныеХозяйственныеОперации.Очистить();
	Для Каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
		Если ЭлементСписка.Пометка Тогда
			НоваяСтрока = ТекущийОбъект.ДоступныеХозяйственныеОперации.Добавить();
			НоваяСтрока.ХозяйственнаяОперация = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПолеТипЗначения = Неопределено;
	Если Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНаНаправленияДеятельности;
	ИначеЕсли Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНаПроизводственныеЗатраты;
	ИначеЕсли Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНаРасходыБудущихПериодов;
	ИначеЕсли Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНаСебестоимостьТоваров;
	ИначеЕсли Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять Тогда
		ПолеТипЗначения = Элементы.ТипЗначенияНеРаспределять;
	КонецЕсли;
	
	Если ПолеТипЗначения <> Неопределено И ПолеТипЗначения.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
		ТекстСообщения = НСтр("ru='В поле ""Аналитика расходов"" не выбрано ни одного вида аналитики';uk='У полі ""Аналітика витрат"" не вибрано жодного виду аналітики'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			, // Ключ данных
			"ТипЗначения",
			, // Путь к данным
			Отказ);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если НЕ Объект.ОграничитьИспользование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоступныеХозяйственныеОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантРаспределенияРасходовПриИзменении(Элемент)
	
	ДоступностьКонтроляЗаполненияАналитик = Истина;
	Если Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров") Тогда
		ЭлементСтраница = Элементы.СтраницаНаСебестоимостьТоваров;
		Если Элементы.ТипЗначенияНаСебестоимостьТоваров.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
			ТипЗначения = "СправочникСсылка.Склады";
		КонецЕсли;
		Объект.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.Товары");
	ИначеЕсли Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов") Тогда
		ЭлементСтраница = Элементы.СтраницаНаРасходыБудущихПериодов;
		Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
			УстановитьТипЗначенияПоСтатьеРасходовСписания();
		КонецЕсли;
		Если Элементы.ТипЗначенияНаРасходыБудущихПериодов.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
			ТипЗначения = "СправочникСсылка.ПрочиеРасходы";
		КонецЕсли;
		Объект.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
	ИначеЕсли Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы") Тогда
		
		ЭлементСтраница = Элементы.СтраницаНаПрочиеАктивы;
		
		Если Элементы.ВидЦенности.СписокВыбора.НайтиПоЗначению(Объект.ВидЦенности) = Неопределено Тогда
			Объект.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
		КонецЕсли;
		
	ИначеЕсли Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять") Тогда
		ЭлементСтраница = Элементы.СтраницаНеРаспределять;
		Если Элементы.ТипЗначенияНеРаспределять.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
			ТипЗначения = "СправочникСсылка.ПрочиеРасходы";
		КонецЕсли;
		Объект.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
	Иначе
		ЭлементСтраница = Элементы.СтраницаНаНаправленияДеятельности;
		Если Элементы.ТипЗначенияНаНаправленияДеятельности.СписокВыбора.НайтиПоЗначению(ТипЗначения) = Неопределено Тогда
			ТипЗначения = "СправочникСсылка.Склады";
		КонецЕсли;
		Объект.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги");
	КонецЕсли;
	
	Элементы.КонтролироватьЗаполнениеАналитики.Видимость = ДоступностьКонтроляЗаполненияАналитик;
	Если ЭлементСтраница = Неопределено Тогда
		Элементы.ГруппаСтраницыОсновное.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСтраницыОсновное.Видимость = Истина;
		Элементы.ГруппаСтраницыОсновное.ТекущаяСтраница = ЭлементСтраница;
	КонецЕсли;
	
	Если Объект.ВариантРаспределенияРасходов = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы") Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;

	Если Объект.ДоступныеХозяйственныеОперации.Количество() > 0 Тогда
		ОчиститьНедоступныеХозяйственныеОперации();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияНаСебестоимостьТоваровПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьИспользованиеПриИзменении(Элемент)
	
	Элементы.ДоступныеХозяйственныеОперации.Доступность = Объект.ОграничитьИспользование;
	
	Если Не Объект.ОграничитьИспользование Тогда
		Для каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
			Если ЭлементСписка.Пометка Тогда
				ЭлементСписка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенностиПриИзменении(Элемент)
	
	Если Не Объект.ВидЦенности = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги") Тогда
		Объект.КонтролироватьЗаполнениеАналитики = Истина;
		Элементы.КонтролироватьЗаполнениеАналитики.Доступность = Ложь;
	Иначе
		Элементы.КонтролироватьЗаполнениеАналитики.Доступность = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНаРемонтОСПриИзменении(Элемент)

	Возврат; // Чтобы в УТ был не пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СебестоимостьРеализацииПриИзменении(Элемент)
	
	Возврат; // Чтобы в УТ был не пустой обработчик
	
КонецПроцедуры


&НаКлиенте
Процедура СпособРаспределенияНаПроизводственныеЗатратыПриИзменении(Элемент)
	
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРаспределенияНаПроизводственныеЗатратыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСчетаРеглУчетаПоОрганизациямИПодразделениям(Команда)
	
	
	Возврат; // Чтобы в УТ был не пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВариантРаспределенияРасходов", Объект.ВариантРаспределенияРасходов);
		ПараметрыФормы.Вставить("ЗаполненаСтатьяРасходовСписания", ЗначениеЗаполнено(Объект.СтатьяРасходов));
		Результат = Неопределено;

		ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.Форма.РазблокированиеРеквизитов", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура СтатьяРасходовПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		
		ЗаполнитьСписокВыбораТипаЗначенияПоСтатьеРасходовСписания();
		Реквизиты = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьРеквизитыСтатьиРасходов(Объект.СтатьяРасходов);
		УстановитьТипЗначения(Реквизиты.ТипЗначения);
		
	Иначе
		
		ЭлементСписокРБП = Элементы.ТипЗначенияНаРасходыБудущихПериодов;
		ЭлементСписокРБППоУмолчанию = Элементы.ТипЗначенияНаРасходыБудущихПериодовПоУмолчанию;
		
		ЭлементСписокРБП.СписокВыбора.Очистить();
		Для Каждого Элемент Из ЭлементСписокРБППоУмолчанию.СписокВыбора Цикл
			ЭлементСписокРБП.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		ТипЗначения = "СправочникСсылка.Организации";
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ВариантРаспределения = Объект.ВариантРаспределенияРасходов;
	
	Если Объект.Ссылка = ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж Тогда
		Элементы.СпособРаспределенияПоНаправлениямДеятельности.Видимость = Ложь;
	КонецЕсли;
	
	Если ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов
	 И ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		Элементы.ТипЗначенияНаРасходыБудущихПериодов.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ТипЗначенияНаРасходыБудущихПериодов.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Элементы.ДоступныеХозяйственныеОперации.Доступность = (Объект.ОграничитьИспользование И Не ТолькоПросмотр);
	
	НаПрочиеАктивы = (ВариантРаспределения = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	
	Элементы.ГруппаОтражениеВРеглУчете.Видимость = НЕ (УправлениеТорговлей ИЛИ НаПрочиеАктивы);
	Элементы.ГруппаДоступностьДляВыбораВДокументах.Видимость = НЕ НаПрочиеАктивы;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		ЭлементСписка = Элементы.ВариантРаспределенияРасходов.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Представление = НСтр("ru='На финансовый результат';uk='На фінансовий результат'");
		КонецЕсли;
	КонецЕсли;
	
	
	
	Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок = 
		НСтр("ru='Данный вариант распределения устарел, вместо статей с таким вариантом распределения в документах следует использовать статьи активов/пассивов.';uk='Даний варіант розподілу застарів, замість статей з таким варіантом розподілу в документах слід використовувати статті активів/пасивів.'");
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок = Элементы.ИнформацияНаПрочиеАктивыТекст.Заголовок 
			+ " " 
			+ НСтр("ru='Для использования статей активов/пассивов включите опцию ""Учитывать прочие активы и пассивы"" (раздел Администрирование - Финансовый результат).';uk='Для використання статей активів/пасивів увімкніть опцію ""Враховувати інші активи і пасиви"" (розділ Адміністрування - Фінансовий результат).'")
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТиповЗначенийАналитики()
	
	МассивИсключаемыхТипов = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказКлиента");
	Иначе
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	КонецЕсли;
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказПоставщику");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.СделкиСКлиентами");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ЭквайринговыеТерминалы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФиксироватьПретензииКлиентов") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ПретензииКлиентов");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.МаркетинговыеМероприятия");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ПеремещениеТоваров");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.НаправленияДеятельности");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроекты") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Проекты");
	КонецЕсли;
	
	Если УправлениеТорговлей Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ОбъектыЭксплуатации");
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.НематериальныеАктивы");
		МассивИсключаемыхТипов.Добавить("ПеречислениеСсылка.ВидыОперацийПоЗарплате");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		МассивИсключаемыхТипов.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Организации");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс") Тогда
		МассивИсключаемыхТипов.Добавить("СправочникСсылка.Кассы");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.ЗаказНаСборку");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		МассивИсключаемыхТипов.Добавить("ДокументСсылка.СборкаТоваров");
    КонецЕсли;
    
    МассивИсключаемыхТипов.Добавить("ПеречислениеСсылка.ВидыОперацийПоЗарплате");
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Элементы.ТипЗначенияНаНаправленияДеятельности);
	МассивПолей.Добавить(Элементы.ТипЗначенияНаРасходыБудущихПериодов);
	МассивПолей.Добавить(Элементы.ТипЗначенияНаСебестоимостьТоваров);
	МассивПолей.Добавить(Элементы.ТипЗначенияНаПроизводственныеЗатраты);
	МассивПолей.Добавить(Элементы.ТипЗначенияНеРаспределять);
	
	Для Каждого ИсключаемыйТип Из МассивИсключаемыхТипов Цикл
		Для Каждого Поле Из МассивПолей Цикл
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ИсключаемыйТип);
			Если ЭлементСписка <> Неопределено И ТипЗначения <> ИсключаемыйТип Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()

	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности, Элементы.СтраницаНаНаправленияДеятельности);
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров, Элементы.СтраницаНаСебестоимостьТоваров);
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов, Элементы.СтраницаНаРасходыБудущихПериодов);
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы, Элементы.СтраницаНаПрочиеАктивы);
	Соответствие.Вставить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять, Элементы.СтраницаНеРаспределять);

	ЭлементСтраница = Соответствие.Получить(Объект.ВариантРаспределенияРасходов);
	Если ЭлементСтраница = Неопределено Тогда
		Элементы.ГруппаСтраницыОсновное.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСтраницыОсновное.Видимость = Истина;
		Элементы.ГруппаСтраницыОсновное.ТекущаяСтраница = ЭлементСтраница;
	КонецЕсли;
	
	Если Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСписокВыбораТипаЗначенияПоСтатьеРасходовСписания();
	УстановитьТипЗначения(Объект.ТипЗначения);
	УстановитьТекущуюСтраницу();
	УправлениеЭлементамиФормы();
	ЗаполнитьСписокДоступныхХозяйственныхОпераций();
	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТипаЗначенияПоСтатьеРасходовСписания()
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		
		ЭлементСписокРБП = Элементы.ТипЗначенияНаРасходыБудущихПериодов;
		ЭлементСписокРБП.СписокВыбора.Очистить();
		Варианты = Перечисления.ВариантыРаспределенияРасходов;
		
		Если Объект.СтатьяРасходов.ВариантРаспределенияРасходов = Варианты.НаПрочиеАктивы Тогда
			
			ЭлементСписокРБП.СписокВыбора.Добавить("СправочникСсылка.ПрочиеАктивыПассивы", НСтр("ru='Прочие активы';uk='Інші активи'"));
			
		Иначе
			
			Списки = Новый Соответствие;
			Списки.Вставить(Варианты.НаНаправленияДеятельности, Элементы.ТипЗначенияНаНаправленияДеятельности.СписокВыбора);
			Списки.Вставить(Варианты.НаПроизводственныеЗатраты, Элементы.ТипЗначенияНаПроизводственныеЗатраты.СписокВыбора);
			Списки.Вставить(Варианты.НаСебестоимостьТоваров, Элементы.ТипЗначенияНаСебестоимостьТоваров.СписокВыбора);
			
			СписокТипов = Списки.Получить(Объект.СтатьяРасходов.ВариантРаспределенияРасходов);
			Если Не СписокТипов = Неопределено Тогда
				Для Каждого Элемент Из СписокТипов Цикл
					ЭлементСписокРБП.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.АналитикаРасходовЗаказРеализация Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
			Объект.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента");
		Иначе
			Объект.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенияПоСтатьеРасходовСписания()
	
	УстановитьТипЗначения(ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьРеквизитыСтатьиРасходов(Объект.СтатьяРасходов).ТипЗначения)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначения(ВыбранныйТипЗначения)
	
	Если ВыбранныйТипЗначения = Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
			ВыбранныйТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Иначе
			ВыбранныйТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
		КонецЕсли;
	КонецЕсли;
	
	СписокТиповЗначений = Новый СписокЗначений;
	СписокТиповЗначений.Добавить("СправочникСсылка.МаркетинговыеМероприятия");
	СписокТиповЗначений.Добавить("СправочникСсылка.НаправленияДеятельности");
	СписокТиповЗначений.Добавить("СправочникСсылка.СделкиСКлиентами");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказКлиента");
	СписокТиповЗначений.Добавить("СправочникСсылка.Склады");
	СписокТиповЗначений.Добавить("СправочникСсылка.Кассы");
	СписокТиповЗначений.Добавить("СправочникСсылка.Номенклатура");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказПоставщику");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПоступлениеТоваровУслуг");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаПеремещение");
	СписокТиповЗначений.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПеремещениеТоваров");
	СписокТиповЗначений.Добавить("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	СписокТиповЗначений.Добавить("ДокументСсылка.РеализацияТоваровУслуг");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПрочиеРасходы");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПрочиеАктивыПассивы");
	СписокТиповЗначений.Добавить("СправочникСсылка.Партнеры");
	СписокТиповЗначений.Добавить("СправочникСсылка.Организации");
	СписокТиповЗначений.Добавить("СправочникСсылка.ФизическиеЛица");
	СписокТиповЗначений.Добавить("СправочникСсылка.СтруктураПредприятия");
	СписокТиповЗначений.Добавить("СправочникСсылка.Проекты");
	СписокТиповЗначений.Добавить("СправочникСсылка.ПретензииКлиентов");
	СписокТиповЗначений.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
	СписокТиповЗначений.Добавить("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
	СписокТиповЗначений.Добавить("ДокументСсылка.ЗаказНаСборку");
	СписокТиповЗначений.Добавить("ДокументСсылка.СборкаТоваров");
	СписокТиповЗначений.Добавить("ДокументСсылка.ВводОстатков");
	Для Каждого ЭлементСписка Из СписокТиповЗначений Цикл
		Если ВыбранныйТипЗначения.СодержитТип(Тип(ЭлементСписка.Значение)) Тогда
			ТипЗначения = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНедоступныеХозяйственныеОперации()
	
	ТекущиеДоступныеХозяйственныеОперации = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(ДоступныеХозяйственныеОперации);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСписокХозяйственныхОпераций(
		ДоступныеХозяйственныеОперации,
		Объект.ВариантРаспределенияРасходов);
		
	Для Каждого ТекущийЭлементСписка Из ТекущиеДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(ТекущийЭлементСписка.Значение);
		Если ЭлементСписка = Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКорСчета()
	
	СписокВыбора = Элементы.КорреспондирующийСчет.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("23", НСтр("ru='Производство (23)';uk='Виробництво (23)'"));
	СписокВыбора.Добавить("91", НСтр("ru='Общепроизводственные затраты (91)';uk='Загальновиробничі витрати (91)'"));
	СписокВыбора.Добавить("92", НСтр("ru='Административные затраты (92)';uk='Адміністративні витрати (92)'"));
	СписокВыбора.Добавить("93", НСтр("ru='Затраты на сбыт (93)';uk='Витрати на збут (93)'"));
	СписокВыбора.Добавить("949", НСтр("ru='Другие затраты операционной деятельности (949)';uk='Інші витрати операційної діяльності (949)'"));
	
	СписокВыбора = Элементы.КорреспондирующийСчетПрочиеАктивы.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("23", НСтр("ru='Производство (23)';uk='Виробництво (23)'"));
	СписокВыбора.Добавить("91", НСтр("ru='Общепроизводственные затраты (91)';uk='Загальновиробничі витрати (91)'"));
	СписокВыбора.Добавить("92", НСтр("ru='Административные затраты (92)';uk='Адміністративні витрати (92)'"));
	СписокВыбора.Добавить("93", НСтр("ru='Затраты на сбыт (93)';uk='Витрати на збут (93)'"));
	СписокВыбора.Добавить("949", НСтр("ru='Другие затраты операционной деятельности (949)';uk='Інші витрати операційної діяльності (949)'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхХозяйственныхОпераций()
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСписокХозяйственныхОпераций(
		ДоступныеХозяйственныеОперации,
		Объект.ВариантРаспределенияРасходов);
	
	Для Каждого СтрокаТаблицы Из Объект.ДоступныеХозяйственныеОперации Цикл
		ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(СтрокаТаблицы.ХозяйственнаяОперация);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

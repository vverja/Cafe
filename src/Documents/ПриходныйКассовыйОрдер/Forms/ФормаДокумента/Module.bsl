&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		Если Параметры.Свойство("Основание") Тогда
			Если ЗначениеЗаполнено(Параметры.Основание) и ТипЗнч(Параметры.Основание) <> Тип("Структура") Тогда
				Объект.Основание = ОбщегоНазначенияУТ.ПолучитьПредставлениеДокумента(Параметры.Основание,
									ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Параметры.Основание.Номер), 
									Параметры.Основание.Дата);
			КонецЕсли; 
			Основание = Параметры.Основание;
			Параметры.Свойство("ДоверенностьВыданная", Объект.ДоверенностьВыданная);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьПоляВводаНомерОрдера();
	
	УточнитьСписокХозяйственныхОпераций();
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание);
	КонецЕсли;
		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(
			ЭтаФорма,
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПриходныйКассовыйОрдер", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа, "СтатьяДоходов, АналитикаРасходов");
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа, "СтатьяДоходов");
	
	УстановитьДоступностьПоляВводаНомерОрдера()
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ПереключательРасшифровки Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("РасшифровкаБезРазбиения", Истина);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
	СброситьУстановленныйНомерОрдера();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	СтруктурыРеквизитов = РеквизитыКассыИКассыККМ(Объект.Касса, Объект.КассаККМ);
	СтруктураРеквизитовКассы = СтруктурыРеквизитов.РеквизитыКассы;
	
	// запрещено изменение валюты взаиморасчетов относительно валюты документа оплаты (кроме упр. организации)
	Если ЗначениеЗаполнено(Объект.Валюта) И 
		 ЗначениеЗаполнено(СтруктураРеквизитовКассы.Валюта) И
		 (НЕ СтруктураРеквизитовКассы.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация")) И
		 СтруктураРеквизитовКассы.Валюта <> Объект.Валюта Тогда

		ПредставлениеТЧ = НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Табличная часть ""%1"" будет очищена, продолжить?';uk='Таблична частина ""%1"" буде очищена, продовжити?'"),
			ПредставлениеТЧ);
		ТекстВопроса = НСтр("ru='Валюта кассы не совпадает с валютой взаиморасчетов в табличной части.';uk='Валюта каси не співпадає з валютою взаєморозрахунків у табличній частині.'") + Символы.ПС + ТекстВопроса;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросВалютаНеСовпадаетЗавершение", ЭтотОбъект, Новый Структура("СтруктурыРеквизитов", СтруктурыРеквизитов)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;

	КонецЕсли;	
	
	КассаПриИзмененииФрагмент(СтруктурыРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВалютаНеСовпадаетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СтруктурыРеквизитов = ДополнительныеПараметры.СтруктурыРеквизитов;
	
	КодОтвета = РезультатВопроса;
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ПереключательРасшифровки = 0;
		ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		
		
		КассаПриИзмененииФрагмент(СтруктурыРеквизитов);
		
	Иначе
		
		Объект.Касса = ТекущаяКасса;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзмененииФрагмент(Знач СтруктурыРеквизитов)
	
	Перем КнопкиДиалогаВопрос, ОписаниеОповещения, ТекстВопроса;
	
	СтруктураРеквизитовКассы = СтруктурыРеквизитов.РеквизитыКассы;
	
	Если Не ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктураРеквизитовКассы.Валюта) Тогда
		
		КассаПриИзмененииСервер(СтруктурыРеквизитов, Ложь);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		СброситьУстановленныйНомерОрдера();
	Иначе
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Пересчитать суммы в документе в валюту %1?';uk='Перерахувати суми в документі у валюту %1?'"),
			СтруктураРеквизитовКассы.Валюта);
		
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Пересчитать';uk='Перерахувати'"));
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена,  НСтр("ru='Отменить';uk='Скасувати'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешенПересчетВВалюту", ЭтотОбъект, Новый Структура("СтруктурыРеквизитов", СтруктурыРеквизитов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиДиалогаВопрос);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазрешенПересчетВВалюту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		КассаПриИзмененииСервер(ДополнительныеПараметры.СтруктурыРеквизитов, Истина);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
		СброситьУстановленныйНомерОрдера();
	Иначе
		
		Объект.Касса = ТекущаяКасса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииСервер();
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
	Объект.ВТомЧислеНДС = "";
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПоЕдиномуНалогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФинансыКлиент.СуммаПоЕдиномуНалогуНачалоВыбора(ЭтотОбъект, Элемент, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ПодотчетноеЛицоПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииСервер()
	
КонецПроцедуры

&НаСервере
Процедура КассаККМПриИзмененииСервер()
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РаспоряжениеНаПеремещениеДенежныхСредств) Тогда
		РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаОтправительПриИзменении(Элемент)
	
	КассаОтправительПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КассаОтправительПриИзмененииСервер()
	
	ЗаполнитьОрганизациюПлательщик();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсКонвертацииПриИзменении(Элемент)
	КурсКонвертацииПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СуммаКонвертацииПриИзменении(Элемент)
	
	СуммаКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	Если Не ПереключательРасшифровки Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!';uk='Перемикання в режим без розбиття неможливе, якщо в розшифровці платежу введено більше одного рядка!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование,
		СтатьяДвиженияДенежныхСредств);
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		ПриДобавлениСтрокиРасшифровкиПлатежа(СтрокаТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
	Объект.ВТомЧислеНДС = "";
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаВзаиморасчетов)
		И СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта
		И СтрокаТаблицы.СуммаВзаиморасчетов <> СтрокаТаблицы.Сумма Тогда
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
		СтрокаТаблицы.Заказ = Неопределено;
		ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, 
			ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация));
	КонецЕсли;
	
	Объект.ВТомЧислеНДС = "";
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация",           Объект.Организация);
	ЗначенияОтбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	ОплатаМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации");
	ВозвратМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации");
	Если ОплатаМеждуОрганизациями Или ВозвратМеждуОрганизациями	Тогда
		ЗначенияОтбора.Вставить("Партнер",    ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
		ЗначенияОтбора.Вставить("Контрагент", ОрганизацияПлательщик);
	Иначе
		ЗначенияОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если НЕ Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация") Тогда
		ЗначенияОтбора.Вставить("Валюта", Объект.Валюта);
	КонецЕсли;
	
	ЭтоРасчетыСклиентами = ОплатаМеждуОрганизациями Или ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.ВыборОснованияПлатежа = Истина;
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = ЭтоРасчетыСклиентами;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора,
			Объект.Организация, 
			Объект.Контрагент,
			Объект.ХозяйственнаяОперация,
			Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора,
			Объект.Организация,
			Объект.Контрагент,
			Объект.ХозяйственнаяОперация,
			Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ИсключаемыеСвойства = "";
		Если ВыбранноеЗначение.Свойство("СтатьяДвиженияДенежныхСредств")
			И НЕ ЗначениеЗаполнено(ВыбранноеЗначение.СтатьяДвиженияДенежныхСредств) Тогда
			ИсключаемыеСвойства = "СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение, , ИсключаемыеСвойства);
		Объект.ВТомЧислеНДС = "";
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДоходовПриИзменении(Элемент)
	
	РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЭтаСтрока.СуммаВзаиморасчетов = 0;
	ЭтаСтрока.ТипСуммыКредитаДепозита = ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг");
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(
		ЭтаСтрока.ДоговорКредитаДепозита,
		ЭтаСтрока.ВалютаВзаиморасчетов,
		ЭтаСтрока.СтатьяДвиженияДенежныхСредств);
	
	Если Не ЗначениеЗаполнено(ЭтаСтрока.Партнер) Тогда
		ЭтаСтрока.Партнер = Партнер;
	КонецЕСли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	МассивПараметровВыбора = ПараметрыВыбораСтатьиДДС(ЭтаСтрока.ДоговорКредитаДепозита);
	Если ЗначениеЗаполнено(МассивПараметровВыбора) Тогда
		Элемент.ПараметрыВыбора = МассивПараметровВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяДоходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.РасшифровкаПлатежа.ТекущиеДанные.СтатьяДоходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РасшифровкаПлатежаЗаказ" Тогда
		СтрокаТЧ = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			ПоказатьЗначение(, СтрокаТЧ.Заказ);
		КонецЕсли;
	КонецЕсли;
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаТипСуммыКредитаДепозитаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ТипСуммыКредитаДепозитаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ЭтоПоступлениеИзДругойОрганизации =
		(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации"));
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Касса");
	Если ЭтоПоступлениеИзДругойОрганизации Тогда
		СтруктураРеквизитов.Вставить("КассаОтправитель", "Отправитель");
	Иначе
		СтруктураРеквизитов.Вставить("Контрагент");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма,
		Неопределено,
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЭтоПоступлениеИзДругойОрганизации =
		(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации"));
		
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	ПараметрыПодбора = Новый Структура("
		|АдресПлатежейВХранилище, 
		|Организация, 
		|Контрагент,
		|Валюта,
		|СуммаДокумента,
		|ДатаДокумента,
		|ХозяйственнаяОперация",
		АдресПлатежейВХранилище,
		Объект.Организация,
		?(ЭтоПоступлениеИзДругойОрганизации, ОрганизацияПлательщик, Объект.Контрагент),
		Объект.Валюта,
		Объект.СуммаДокумента,
		Объект.Дата,
		Объект.ХозяйственнаяОперация);
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора, 
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек()
	
	ПечатьЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДС(Команда)
	
	СписокДействий = Новый СписокЗначений;
	Для Каждого ЭлементыКонтекстногоМеню Из Элементы.ВТомЧислеНДСКонтекстноеМенюГруппаВставить.ПодчиненныеЭлементы Цикл
		Если ЭлементыКонтекстногоМеню.Видимость Тогда
			СписокДействий.Добавить(ЭлементыКонтекстногоМеню.ИмяКоманды, ЭлементыКонтекстногоМеню.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	ВыбранноеДействие = Неопределено;

	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВставитьВТомЧислеНДСЗавершение", ЭтотОбъект), СписокДействий, Элементы.ВставитьВТомЧислеНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДСЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбранноеДействие = ВыбранныйЭлемент;
    Если ВыбранноеДействие <> Неопределено Тогда
        ВставитьВТомЧислеНДССервер(ВыбранноеДействие.Значение, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
    КонецЕсли;
    
    Объект.ВТомЧислеНДС = Элементы.ВТомЧислеНДС.ТекстРедактирования;

КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДССписокДокументов(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	Объект.ВТомЧислеНДС = Элементы.ВТомЧислеНДС.ТекстРедактирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДСНДС20(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	Объект.ВТомЧислеНДС = Элементы.ВТомЧислеНДС.ТекстРедактирования;
	
КонецПроцедуры


&НаКлиенте
Процедура ВставитьВТомЧислеНДСНДС14(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	Объект.ВТомЧислеНДС = Элементы.ВТомЧислеНДС.ТекстРедактирования;
	
КонецПроцедуры


&НаКлиенте
Процедура ВставитьВТомЧислеНДСНДС7(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	Объект.ВТомЧислеНДС = Элементы.ВТомЧислеНДС.ТекстРедактирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДСНДС0(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	Объект.ВТомЧислеНДС = Элементы.ВТомЧислеНДС.ТекстРедактирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДСБезНДС(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	Объект.ВТомЧислеНДС = Элементы.ВТомЧислеНДС.ТекстРедактирования;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровкуПлатежа(Команда)
	
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным") Тогда
		ЗаполнитьРасшифровкуПлатежаПоЗаймамКонтрагенту();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ИнициализироватьРасшифровкуПлатежа();
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	КонецЦикла;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		Если Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
			Объект.Касса = Неопределено;
			Объект.Организация = Неопределено;
			ТекущаяКасса = Объект.Касса;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка)
		И НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ПолучитьБанковскийСчетПоУмолчанию();
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
			ВызватьИсключение НСтр("ru='Не удалось заполнить поле ""Банковский счет"". Возможно, в информационной базе не введено ни одного банковского счета организации!';uk='Не вдалося заповнити поле ""Банківський рахунок"". Можливо, в інформаційній базі не введено жодного банківського рахунку організації!'");
		КонецЕсли;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу(Объект);

	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер(СтруктурыРеквизитов, ПересчитыватьСуммы)
	
	ТекущаяКасса = Объект.Касса;
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		Если Объект.Организация <> СтруктурыРеквизитов.РеквизитыКассы.Организация
			ИЛИ Объект.Валюта <> СтруктурыРеквизитов.РеквизитыКассы.Валюта Тогда
			Объект.БанковскийСчет   = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
			Объект.КассаККМ         = Справочники.КассыККМ.ПустаяСсылка();
			Объект.КассаОтправитель = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;
		Объект.Организация = СтруктурыРеквизитов.РеквизитыКассы.Организация;
		ПолучитьДоговорПоУмолчаниюСервер();
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктурыРеквизитов.РеквизитыКассы.Валюта;
	
	Если ПересчитыватьСуммы Тогда
		ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
	УстановитьВозможныеЗначенияКассыОтправителя();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ПересчитатьКурсКонвертации();
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка)
		И НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ПолучитьБанковскийСчетПоУмолчанию();
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу(Объект);
	ДенежныеСредстваСервер.УстановитьВидимостьСтатьиДекларацииПоЕдиномуНалогу(Объект, Элементы.СтатьяДекларацииПоЕдиномуНалогу);
	ДенежныеСредстваСервер.УправлениеЭлементомСуммаПоЕдиномуНалогу(Объект, Элементы.СуммаПоЕдиномуНалогу);
	ДенежныеСредстваСервер.ПересчетСуммыПоЕдиномуНалогу(Объект, Объект.СуммаДокумента);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииКонвертацияВалютыНаличные(Элементы.ХозяйственнаяОперация);

	Если Объект.Организация <> Справочники.Организации.УправленческаяОрганизация Тогда
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		КонецЕсли;
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	// Проверим филиалы
	ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	Элементы.РасшифровкаПлатежаОрганизация.Видимость = ЕстьФилиалы И Элементы.РасшифровкаПлатежаЗаказ.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.ПринятоОт) Тогда
			Объект.ПринятоОт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное");
		КонецЕсли;
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
		Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.Партнер = Партнер;
		КонецЦикла;
		
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
		
		ПолучитьДоговорПоУмолчаниюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) Тогда
		Объект.ПринятоОт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПодотчетноеЛицо, "Наименование");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.РаспоряжениеНаПеремещениеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта,
		Объект.ВалютаКонвертации,
		Объект.Дата);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
	КонецЕсли;
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(КэшированныеЗначения);
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяДоходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходов, СтрокаТаблицы.Подразделение, СтрокаТаблицы.АналитикаДоходов);
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
		СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
	ИначеЕсли ТипЗнч(СтрокаТаблицы.СтатьяДоходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходов, СтрокаТаблицы.АналитикаРасходов);
		СтрокаТаблицы.АналитикаДоходов = Неопределено;
		СтрокаТаблицы.АналитикаДоходовОбязательна = Ложь;
		СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
	Иначе
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		СтрокаТаблицы.АналитикаДоходов = Неопределено;
		СтрокаТаблицы.АналитикаДоходовОбязательна = Ложь;
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаДоходовОбязательна");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна", "СтатьяДоходов, АналитикаРасходов");
	СтруктураДействий.Вставить("ЗаполнитьТипСтатьи", "СтатьяДоходов");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Организация, Контрагент, ХозяйственнаяОперация, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора,
		Текст,
		Новый Структура("Организация, Контрагент, ХозяйственнаяОперация", Организация, Контрагент, ХозяйственнаяОперация));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(Договор, Валюта, СтатьяДДС)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,"ВалютаВзаиморасчетов,ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПоступленияВыдачи");
	Валюта = Реквизиты.ВалютаВзаиморасчетов;
	Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
		СтатьяДДС = Реквизиты.СтатьяДДСПоступленияВыдачи;
	Иначе
		СтатьяДДС = Реквизиты.СтатьяДДСОсновногоДолга;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		КурсКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
	// Заполним реквизит "Партнер"
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаРасшифровки.Партнер.Пустая() Тогда
			СтрокаРасшифровки.Партнер = Партнер;
		КонецЕсли;
	КонецЦикла;
    
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником
		И Объект.СуммаДокумента > 0 Тогда
		
		РаспределитьСуммуНаСервере();
		ИнициализироватьРасшифровкуПлатежа();
		УправлениеЭлементамиФормы();
		
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ОснованиеПлатежа)
		И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Заказ) Тогда
		Объект.РасшифровкаПлатежа[0].ОснованиеПлатежа = ДоговорКонтрагента;
		Объект.РасшифровкаПлатежа[0].Заказ = ДоговорКонтрагента;
		Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
		
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПересчетСуммыПоЕдиномуНалогу(Объект, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	Если Объект.КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Объект.СуммаКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.СуммаКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.СуммаКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СуммаКонвертацииПриИзмененииСервер()
	
	Если Объект.КурсКонвертации <> 0 И Объект.СуммаДокумента = 0 Тогда
		Если Объект.ВалютаКонвертации = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Объект.СуммаДокумента = Объект.СуммаКонвертации / Объект.КурсКонвертации;
		Иначе
			Объект.СуммаДокумента = Объект.СуммаКонвертации * Объект.КурсКонвертации;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.РасшифровкаПлатежа[0].Сумма = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("РасшифровкаПлатежа"));
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("РасшифровкаПлатежа", "СтатьяДоходов, АналитикаРасходов"));
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(2); // Статьи доходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "РасшифровкаПлатежа", ТипыСтатей);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаЗаказ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОснованиеПлатежа");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<совпадает с основанием платежа>';uk='<збігається з підставою платежу>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаВалютаВзаиморасчетов.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Организации.УправленческаяОрганизация;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Аналитики

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаДоходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаДоходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаДоходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаДоходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаДоходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаАктивовПассивов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеТорговлей");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
		
	ДенежныеСредстваСервер.УстановитьВидимостьСтатьиДекларацииПоЕдиномуНалогу(Объект, Элементы.СтатьяДекларацииПоЕдиномуНалогу);
	ДенежныеСредстваСервер.УправлениеЭлементомСуммаПоЕдиномуНалогу(Объект, Элементы.СуммаПоЕдиномуНалогу);
		
	Если НЕ ПереключательРасшифровки Тогда
		ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассивуРасширенный(
			Элементы,
			МассивВсехРеквизитов,
			МассивРеквизитовОперации,
			"РасшифровкаПлатежа",
			"РасшифровкаБезРазбиения");
	Иначе
		ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
			Элементы,
			МассивВсехРеквизитов,
			МассивРеквизитовОперации);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
		Объект.ХозяйственнаяОперация,
		Элементы.РасшифровкаПлатежаПодборПоОстаткам);
		
	Элементы.СтраницаРасшифровка.Видимость = (МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") <> Неопределено);
	Если ПереключательРасшифровки Тогда
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаСписком;
	Иначе
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаБезРазбиения;
	КонецЕсли;
	Если НЕ ПереключательРасшифровки Тогда
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
			"РасшифровкаПлатежаПартнер,РасшифровкаБезРазбиенияПартнер",
			"Доступность",
			Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
			"РасшифровкаПлатежаПартнер,РасшифровкаБезРазбиенияПартнер",
			"Доступность",
			Истина);
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость И ИспользоватьНесколькоВалют;
	Элементы.НадписьВалюта.Видимость = Не ИспользоватьНесколькоВалют;
	Элементы.РасшифровкаПлатежаОрганизация.Видимость = ЕстьФилиалы И Элементы.РасшифровкаПлатежаЗаказ.Видимость;
	
	ЭтоПоступлениеОплатыОтКлиента = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Если Элементы.ВставитьВТомЧислеНДС.Видимость <> Элементы.ВТомЧислеНДС.Видимость Тогда
		Элементы.ВставитьВТомЧислеНДС.Видимость = Элементы.ВТомЧислеНДС.Видимость;
	КонецЕсли;
	
	Если Элементы.ВыводитьНаПечатьСуммуНДС.Видимость <> Элементы.ВТомЧислеНДС.Видимость Тогда
		Элементы.ВыводитьНаПечатьСуммуНДС.Видимость = Элементы.ВТомЧислеНДС.Видимость;
	КонецЕсли;
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	ЭтоПоступлениеПоДоговоруЗайма = (ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ")
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником)
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным;
		
	Элементы.РасшифровкаПлатежаЗаполнитьРасшифровкуПлатежа.Видимость = ЭтоПоступлениеПоДоговоруЗайма;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьПараметрыВыбора();
	УстановитьВозможныеЗначенияКассыОтправителя(Ложь);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();

ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаБезРазбиенияПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
	
	ДенежныеСредстваСервер.ЗаполнитьСписокТиповСуммКредитовДепозитов(Элементы.РасшифровкаПлатежаТипСуммыКредитаДепозита.СписокВыбора, Объект.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.ЗаполнитьСписокТиповСуммКредитовДепозитов(Элементы.РасшифровкаБезРазбиенияТипСуммыКредитаДепозита.СписокВыбора, Объект.ХозяйственнаяОперация);
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
		Объект.Валюта,
		Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником Тогда
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru='Сотрудник';uk='Співробітник'");
	Иначе
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru='Подотчетное лицо';uk='Підзвітна особа'");
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
		Элементы.КассаОтправитель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
		Элементы.КассаОтправитель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
		Элементы.КассаОтправитель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
		Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОпераций()
	
	ЭлементХозяйственнаяОперация = Элементы.ХозяйственнаяОперация;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочееПоступлениеДенежныхСредств(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииКонвертацияВалютыНаличные(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуКассами(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийСКассамиККМ(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементХозяйственнаяОперация);

	Если ЗначениеЗаполнено(Объект.Организация) И (Объект.Организация <> Справочники.Организации.УправленческаяОрганизация) Тогда
		ЭлементСписка = ЭлементХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения()
	
	Если Объект.РасшифровкаПлатежа.Количество() Тогда
		
		ТекСтрока = Объект.РасшифровкаПлатежа[0];
		
		ТолькоПросмотрПартнераВалюты = ЗначениеЗаполнено(ТекСтрока.Заказ);
		Элементы.РасшифровкаБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.РасшифровкаБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты ИЛИ (НЕ Объект.Организация = Справочники.Организации.УправленческаяОрганизация);
		
		ВидимостьАналитикПоХО = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Видимость =         (ТекСтрока.ТипСтатьи = 1 И ВидимостьАналитикПоХО);
		Элементы.РасшифровкаБезРазбиенияАналитикаДоходов.Видимость =          (ТекСтрока.ТипСтатьи = 2 И ВидимостьАналитикПоХО);
		Элементы.РасшифровкаБезРазбиенияАналитикаАктивовПассивов.Видимость =  (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО);
		
		Элементы.РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчете.Видимость = (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО И НЕ УправлениеТорговлей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	УправлениеТорговлей = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ТекущаяКасса = Объект.Касса;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	КонецЕсли;
	
	ИнициализироватьРасшифровкуПлатежа();
	
	ЗаполнитьОрганизациюПлательщик();
	ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	ПолучитьДоговорПоУмолчаниюСервер();
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа, "СтатьяДоходов, АналитикаРасходов");
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа, "СтатьяДоходов");
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРасшифровкуПлатежа()
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") = Неопределено Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		ПереключательРасшифровки = 0;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
		Иначе
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюПлательщик()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации")
	Тогда
		СтруктураРеквизитов = Справочники.Кассы.ПолучитьРеквизитыКассы(Объект.КассаОтправитель);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Организация) Тогда
			ОрганизацияПлательщик = СтруктураРеквизитов.Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор);
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер()
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
	КонецЕсли;
	ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора);
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьБанковскийСчетПоУмолчанию()
	
	Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.Валюта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер, ХозяйственнаяОперация)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыКассыИКассыККМ(Касса, КассаККМ)
	
	СтруктураРеквизитов = Новый Структура("РеквизитыКассы, РеквизитыКассыККМ", 
		Справочники.Кассы.ПолучитьРеквизитыКассы(Касса),
		Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ));
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ПечатьЧека()

	ОчиститьСообщения();
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru='Чек уже пробит на фискальном регистраторе!';uk='Чек вже пробитий на фіскальному реєстраторі!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Проведен
		ИЛИ Модифицированность Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, Новый Структура("ДокументПроведен", Ложь));
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Операция возможна только после проведения документа, провести документ?';uk='Операція можлива тільки після проведення документа, провести документ?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПечатьЧекаЗавершение(КодВозвратаДиалога.Да, Новый Структура("ДокументПроведен", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПечататьЧек = Истина;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если НЕ ДополнительныеПараметры.ДокументПроведен Тогда
			
			Попытка
				Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
					ПечататьЧек = Ложь;
				КонецЕсли;
			Исключение
				ПоказатьПредупреждение(Неопределено, НСтр("ru='Не удалось выполнить проведение документа';uk='Не вдалося виконати проведення документа'"));
				ПечататьЧек = Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		ПечататьЧек = Ложь;
	КонецЕсли;
	
	Если ПечататьЧек Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(
				Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				"ФискальныйРегистратор",
				НСтр("ru='Выберите фискальный регистратор';uk='Виберіть фіскальний реєстратор'"),
				НСтр("ru='Фискальный регистратор не подключен';uk='Фіскальний реєстратор не підключений'"));
			
		Иначе
			ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце зовнішнього обладнання поточного сеансу.'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредложитьВыбратьУстройствоЗавершение(ИдентификаторУстройства, ДополнительныеПараметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ИдентификаторУстройства <> Неопределено Тогда
		// Подключаем ФР
		Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
		                                                                              ИдентификаторУстройства,
		                                                                              ОписаниеОшибки);
		Если Результат Тогда
			//Готовим данные
			ВходныеПараметры  = Новый Массив();
			ВыходныеПараметры = Неопределено;

			НомерСекции = 2;

			// Подготовка таблицы товаров
			ТаблицаТоваров = Новый Массив();

			СтрокаТаблицыТоваров = Новый СписокЗначений();
			СтрокаТаблицыТоваров.Добавить(НСтр("ru='Оплата от:';uk='Оплата від:'") + " " + Объект.ПринятоОт + Символы.ПС
			+ НСтр("ru='Основание:';uk='Підстава:'") + " " + Объект.Основание); //  1 - Наименование
			СтрокаТаблицыТоваров.Добавить("");                     //  2 - Штрихкод
			СтрокаТаблицыТоваров.Добавить("");                     //  3 - Артикул
			СтрокаТаблицыТоваров.Добавить(НомерСекции);            //  4 - Номер отдела
			СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  //  5 - Цена за позицию без скидки
			СтрокаТаблицыТоваров.Добавить(1);                      //  6 - Количество
			СтрокаТаблицыТоваров.Добавить("");                     //  7 - Наименование скидки/наценки
			СтрокаТаблицыТоваров.Добавить(0);                      //  8 - Сумма скидки/наценки
			СтрокаТаблицыТоваров.Добавить(0);                      //  9 - Процент скидки/наценки
			СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  // 10 - Сумма позиции со скидкой
			СтрокаТаблицыТоваров.Добавить(0);                      // 11 - Номер налога (1)
			СтрокаТаблицыТоваров.Добавить(0);                      // 12 - Сумма налога (1)
			СтрокаТаблицыТоваров.Добавить(0);                      // 13 - Процент налога (1)
			СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
			СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
			СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
			СтрокаТаблицыТоваров.Добавить("");                     // 17 - Наименование секции форматирования товарной строки

			ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);

			// Подготовка таблицы оплат
			ТаблицаОплат = Новый Массив();

			СтрокаОплаты = Новый СписокЗначений();
			СтрокаОплаты.Добавить(0);
			СтрокаОплаты.Добавить(Объект.СуммаДокумента);
			СтрокаОплаты.Добавить("");
			СтрокаОплаты.Добавить("");

			ТаблицаОплат.Добавить(СтрокаОплаты);

			// Подготовка таблицы общих параметров
			ОбщиеПараметры = Новый Массив();
			ОбщиеПараметры.Добавить(0);                      //  1 - Тип чека
			ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
			ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
			ОбщиеПараметры.Добавить(Объект.СуммаДокумента);  //  4 - Сумма по чеку без скидок/наценок
			ОбщиеПараметры.Добавить(Объект.СуммаДокумента);  //  5 - Сумма по чеку с учетом всех скидок/наценок
			ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
			ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
			ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
			ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
			ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
			ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
			ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
			ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
			ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала

			ВходныеПараметры.Добавить(ТаблицаТоваров);
			ВходныеПараметры.Добавить(ТаблицаОплат);
			ВходныеПараметры.Добавить(ОбщиеПараметры);

			// Печатаем чек.
			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
																	"PrintReceipt",
																	ВходныеПараметры,
																	ВыходныеПараметры);

			Если Результат Тогда
				// Установить полученное значение номера чека реквизиту документа.
				Модифицированность = Истина;
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			Иначе
				ТекстСообщения = НСтр("ru='При печати чека произошла ошибка.
                                            |Чек не напечатан на фискальном регистраторе.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При друку чека виникла помилка.
                                            |Чек не надрукований на фіскальному реєстраторі.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,
											 "%ДополнительноеОписание%",
											 ВыходныеПараметры[1]);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

			// Отключаем ФР
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, 
				ИдентификаторУстройства);
		Иначе
			ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
                                        |Чек не напечатан на фискальном регистраторе.
                                        |Дополнительное описание:
                                        |%ДополнительноеОписание%'
                                        |;uk='При підключенні пристрою сталася помилка.
                                        |Чек не надрукований на фіскальному реєстраторі.
                                        |Додатковий опис:
                                        |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьВТомЧислеНДССервер(ИмяКоманды, ВыделенныйТекст)
	
	ТекстНазначенияПлатежа = "";
	
	Если Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ПредставлениеВалюты = "грн.";
	Иначе
		ПредставлениеВалюты = СокрЛП(Объект.Валюта);
	КонецЕсли;
	
	Если ИмяКоманды = "ВставитьВТомЧислеНДСБезНДС" Тогда
		
		ТекстНазначенияПлатежа = "Без податку (ПДВ)";
		
	ИначеЕсли ИмяКоманды = "ВставитьВТомЧислеНДСНДС0" Тогда
		
		СуммаНДС = 0;
		ТекстНазначенияПлатежа = НСтр("ru='ПДВ (0%) ';uk='ПДВ (0%) '");
        
    ИначеЕсли ИмяКоманды = "ВставитьВТомЧислеНДСНДС14" Тогда
    	
    	СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.14) * 0.14, 2);
    	ТекстНазначенияПлатежа = "ПДВ (14%)" + " " + 
    							Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=") + " " + 
    							ПредставлениеВалюты;
        
	ИначеЕсли ИмяКоманды = "ВставитьВТомЧислеНДСНДС7" Тогда
		
		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.07) * 0.07, 2);
		ТекстНазначенияПлатежа = "ПДВ (7%)" + " " + 
								Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=") + " " + 
								ПредставлениеВалюты;
		
	ИначеЕсли ИмяКоманды = "ВставитьВТомЧислеНДСНДС20" Тогда
		
		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.2) * 0.2, 2);
		ТекстНазначенияПлатежа = "ПДВ (20%)" + " " + 
								Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=") + " " + 
								ПредставлениеВалюты;
		
	ИначеЕсли ИмяКоманды = "ВставитьВТомЧислеНДССписокДокументов" Тогда
		
		МассивДокументов = Объект.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
		МассивДокументов.Добавить(Объект.ДокументОснование);
		ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
			Объект.СуммаДокумента,
			Объект.Валюта,
			МассивДокументов,
			Ложь, // ДобавлятьТекстВТомЧисле
			Истина); // ОплатаОтКлиента
		
	КонецЕсли;
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	
КонецПроцедуры

&НаСервере
Процедура СброситьУстановленныйНомерОрдера()
	
	Если Объект.НомерОрдера <> "" Тогда
		Объект.НомерОрдера = "";
	КонецЕсли;
	УстановитьДоступностьПоляВводаНомерОрдера();
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораСтатьиДДС(ДоговорКредитаДепозита)
	
	Возврат ДенежныеСредстваСервер.ПолучитьПараметрыВыбораСтатьиДДС(
		Объект,
		Новый Структура("ДоговорКредитаДепозита", ДоговорКредитаДепозита));
	
КонецФункции

&НаСервере
Процедура УстановитьВозможныеЗначенияКассыОтправителя(ИзменятьКассуОтправителя = Истина)
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
		И ЗначениеЗаполнено(Объект.Касса) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Получатели.ПолучательПлатежа КАК Ссылка
		|
		|ИЗ
		|	Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК Получатели
		|
		|ГДЕ
		|	Получатели.ПолучательПлатежа = &КассаПолучатель
		|");
		Запрос.УстановитьПараметр("КассаПолучатель", Объект.Касса);
		ЕстьКассыОтправители = НЕ Запрос.Выполнить().Пустой();
		
	Иначе
		
		ЕстьКассыОтправители = Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Кассы.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК ПолучателиКассыОтправителя
	|	ПО
	|		ПолучателиКассыОтправителя.Ссылка = Кассы.Ссылка
	|		И ПолучателиКассыОтправителя.ПолучательПлатежа = &КассаПолучатель
	|		И &ОтбиратьПоКассамОтправителям
	|
	|ГДЕ
	|	(Кассы.ВалютаДенежныхСредств = &Валюта ИЛИ НЕ &ОтбиратьПоВалюте)
	|	И (Кассы.Владелец В (&Владелец) ИЛИ НЕ &ОтбиратьПоВладельцу)
	|	И Кассы.Владелец НЕ В (&ФильтрВладельца)
	|	И (ПолучателиКассыОтправителя.ПолучательПлатежа ЕСТЬ НЕ NULL ИЛИ НЕ &ОтбиратьПоКассамОтправителям)
	|	И Кассы.Ссылка <> &КассаПолучатель
	|");
	Запрос.УстановитьПараметр("КассаПолучатель", Объект.Касса);
	Запрос.УстановитьПараметр("ОтбиратьПоКассамОтправителям", ЕстьКассыОтправители);
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
		
		Запрос.УстановитьПараметр("Валюта", Объект.ВалютаКонвертации);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Истина);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Истина);
		
	Иначе
		
		Запрос.УстановитьПараметр("Валюта", Неопределено);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Ложь);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Неопределено);
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты)
		И ЗначениеЗаполнено(Объект.Касса)
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Запрос.УстановитьПараметр("Владелец", Объект.Организация);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
		Запрос.УстановитьПараметр("Владелец", МассивВзаимосвязанныхОрганизаций);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
		
	Иначе
		
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Ложь);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ФильтрВладельца", Неопределено);
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
		И ЗначениеЗаполнено(Объект.Касса)
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
		МассивВзаимосвязанныхОрганизаций.Добавить(Объект.Организация);
		Запрос.УстановитьПараметр("ФильтрВладельца", МассивВзаимосвязанныхОрганизаций);
		
	КонецЕсли;
	
	МассивКасс = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.КассаОтправитель.СписокВыбора.ЗагрузитьЗначения(МассивКасс);
	
	Если ИзменятьКассуОтправителя Тогда
		Если МассивКасс.Количество() = 1 Тогда
			
			Объект.КассаОтправитель = МассивКасс[0];
			КассаОтправительПриИзмененииСервер();
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Касса)
			И МассивКасс.Найти(Объект.КассаОтправитель) = Неопределено Тогда
			
			Объект.КассаОтправитель = Справочники.Кассы.ПустаяСсылка();
			КассаОтправительПриИзмененииСервер();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ТипСуммыКредитаДепозитаПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Идентификатор);
	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
		СтатьиДДС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.ДоговорКредитаДепозита, "СтатьяДДСОсновногоДолга, СтатьяДДСПроцентов, СтатьяДДСКомиссии");
		Если ТекущиеДанные.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг Тогда
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСОсновногоДолга;
		ИначеЕсли ТекущиеДанные.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты Тогда
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСПроцентов;
		ИначеЕсли ТекущиеДанные.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия Тогда
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСКомиссии;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаймамКонтрагенту()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	ДействующиеДоговоры = Справочники.ДоговорыКредитовИДепозитов.ДействующиеДоговорыПоКонтрагенту(
		Объект.Организация,
		Объект.Контрагент,
		Перечисления.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный);
	
	Для Каждого Договор Из ДействующиеДоговоры Цикл
		
		ДанныеРасшифровки = Справочники.ДоговорыКредитовИДепозитов.ДанныеРасшифровкиПлатежаДокументаДДС(Договор, Истина, Объект.Ссылка);
		
		Для Каждого Строка Из ДанныеРасшифровки Цикл
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасшифровкиПлатежа(Строка)
	
	ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяДоходов");
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяДоходов")
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником Тогда
	КонецЕсли;
	
	СуммаКРаспределению = Объект.СуммаДокумента;
	
	СтрокиПроценты = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ТипСуммыКредитаДепозита", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты));
	Для Каждого Строка Из СтрокиПроценты Цикл
		ТекущаяСумма = Мин(Строка.Сумма, СуммаКРаспределению);
		Если ТекущаяСумма > 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Сумма = ТекущаяСумма;
			СуммаКРаспределению = СуммаКРаспределению - ТекущаяСумма;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиОсновнойДолг = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ТипСуммыКредитаДепозита", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг));
	Для Каждого Строка Из СтрокиОсновнойДолг Цикл
		ТекущаяСумма = Мин(Строка.Сумма, СуммаКРаспределению);
		Если ТекущаяСумма > 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Сумма = ТекущаяСумма;
			СуммаКРаспределению = СуммаКРаспределению - ТекущаяСумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяДоходов = Результат;
	РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.РасшифровкаБезРазбиенияСтатьяДоходов.Заголовок = НСтр("ru='Статья доходов';uk='Стаття доходів'");
		Элементы.РасшифровкаПлатежаСтатьяДоходов.Заголовок      = НСтр("ru='Статья доходов/расходов';uk='Стаття доходів/витрат'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоляВводаНомерОрдера()

	Если Объект.Касса.ИспользоватьВКассовойКниге Тогда
		Элементы.НомерОрдера.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.НомерОрдера.Подсказка =  НСтр("ru='Номер ордера. Для касс которые используются в кассовой книге номера ордеров устанавливаются автоматически';uk='Номер ордера. Для кас які використовуються в касовій книзі номери ордерів встановлюються автоматично'");
		
		Если ЗначениеЗаполнено(Объект.НомерОрдера) Тогда
			Элементы.НомерОрдера.ПредупреждениеПриРедактировании =
				НСтр("ru='Для касс которые используются в кассовой книге номера ордеров устанавливаются автоматически.';uk='Для кас які використовуються в касовій книзі номери ордерів встановлюються автоматично.'");
		Иначе
			Элементы.НомерОрдера.ПредупреждениеПриРедактировании = 
				НСтр("ru='Для касс которые используются в кассовой книге номера ордеров устанавливаются автоматически.
                         |Номер ордера будет присвоен при записи объекта.'
                         |;uk='Для кас які використовуються в касовій книзі номери ордерів встановлюються автоматично.
                         |Номер ордера буде надано при запису об''єкта.'");
			
		КонецЕсли;
	Иначе
		Элементы.НомерОрдера.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;		
		Элементы.НомерОрдера.Подсказка = НСтр("ru='Номер ордера';uk='Номер ордеру'");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВидНалоговойДекларации", Перечисления.ВидыНалоговыхДеклараций.ЕдиныйНалог));
	
	ЭтоВозврат = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика ИЛИ
	              Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника);
	ОрганизацияПлательщикНДС = НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Объект.Организация, Объект.Дата);
	
	Если ЭтоВозврат И ОрганизацияПлательщикНДС Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогРасход));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогПриход));		
	КонецЕсли;
	
	Элементы.СтатьяДекларацииПоЕдиномуНалогу.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

#КонецОбласти

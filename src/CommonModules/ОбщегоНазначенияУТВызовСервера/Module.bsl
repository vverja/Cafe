
#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииУстановкиСтатусовДляМассиваДокументов

// Устанавливает статус для списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив документов
// 		НовыйСтатус - Строка - Имя нового статуса для документов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
// 		Число - Количество документов у которых был изменен статус
//
// ВАЖНО. При использования процедуры для каждого типа документа из массива должны быть объявлены функции:
// В модуле менеджера документа:
// 		Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
// 		Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
// В модуле объекта документа:
// 		Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
//
Функция УстановитьСтатусДокументов(Знач МассивДокументов, Знач НовыйСтатус, Знач ДополнительныеПараметры=Неопределено) Экспорт
	
	// Получение шаблонов сообщений стандартных ошибок
	ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Документу %Документ% уже присвоен статус ""%Статус%""';uk='Документом %Документ% вже присвоєно статус ""%Статус%""'");
	ШаблонОшибкиНеПроведен        = НСтр("ru='Документ %Документ% не проведен. Невозможно изменить статус';uk='Документ %Документ% не проведений. Неможливо змінити статус'");
	ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %Документ% помечен на удаление. Невозможно изменить статус';uk='Документ %Документ% позначений на вилучення. Неможливо змінити статус'");
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%';uk='Не вдалося заблокувати %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%';uk='Не вдалося записати %Документ%. %ОписаниеОшибки%'");
	
	// Получение исключаемых типов
	МассивИсключаемыхТипов = Новый Массив;
	Если ДополнительныеПараметры <> Неопределено 
		И ДополнительныеПараметры.Свойство("ИсключаемыеТипы") Тогда
		
		МассивИсключаемыхТипов = ДополнительныеПараметры.ИсключаемыеТипы;
		
	КонецЕсли;
	
	// Получение соответствие типов документов из массива документов разных типов
	СоответствиеТипов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивДокументов);
	
	КоличествоОбработанных = 0;
	Для Каждого СоставДокументов Из СоответствиеТипов Цикл
		
		// Пропуск документов исключаемого типа
		Если МассивИсключаемыхТипов.Найти(СоставДокументов.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Получение менеджера документов данного типа
		МенеджерДокументов = Документы[Метаданные.НайтиПоТипу(СоставДокументов.Ключ).Имя];
		
		// Получение массива ссылок документов данного типа
		МассивСсылок = СоставДокументов.Значение;
		
		// Формирование запроса
		Запрос = МенеджерДокументов.СформироватьЗапросПроверкиПриСменеСтатуса(МассивСсылок, НовыйСтатус, ДополнительныеПараметры);
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		// Цикл обхода выборки
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Универсальные проверки
			Если Выборка.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Не Выборка.Проведен Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиНеПроведен, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Выборка.СтатусСовпадает Тогда

				ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;

			КонецЕсли;
			
			// Проверки уникальные для каждого из типов документов
			Если Не МенеджерДокументов.ПроверкаПередСменойСтатуса(Выборка, НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Захват объекта для редактирования
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
			
			// Получение объекта документа
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Установка статуса документа
			Если Не Объект.УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Запись документа
			Попытка
				Объект.Записать(?(Выборка.ЗаписьПроведением, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			КонецПопытки
			
		КонецЦикла; // выборки документов данного типа
		
	КонецЦикла; // обхода соответствия типов
	
	Возврат КоличествоОбработанных;
	
КонецФункции // УстановитьСтатусДокументов()

#КонецОбласти

// Возвращает структуру, содержащую массив ссылок на документы, подлежащие пометке к удалению
// или снятию пометки с удаления, а также признак пометки на удаление документов.
//
// Параметры:
// 		ВыделенныеСтроки - Массив - массив документов динамического списка,
// 		ПутьКСсылке - Строка - имя реквизита ссылки документа.
//
// Возвращаемое значение:
// 		Структура - содержит массив ссылок на документы и признак пометки на удаление документов.
//
Функция СсылкиОбъектовПомеченныхНаУдаление(ВыделенныеСтроки, ПутьКСсылке = "") Экспорт
	
	Если Не ПустаяСтрока(ПутьКСсылке) Тогда
		МассивСсылок = Новый Массив;
		Для каждого Строка из ВыделенныеСтроки Цикл
			МассивСсылок.Добавить(Строка[ПутьКСсылке]);
		КонецЦикла;
	Иначе
		МассивСсылок = ВыделенныеСтроки;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивСсылок", МассивСсылок);
	Результат.Вставить("ЕстьСтрокиПомеченныеНаУдаление", Ложь);
	
	ПометкиНаУдаление = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, "ПометкаУдаления");
	
	Для Каждого КлючЗначение Из ПометкиНаУдаление Цикл
		Если КлючЗначение.Значение.ПометкаУдаления Тогда
			Результат.ЕстьСтрокиПомеченныеНаУдаление = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет пометку к удалению или снятие пометки с удаления у документов.
//
// Параметры:
// 		МассивСсылок - Массив - массив ссылок на документы,
// 		ПометитьНаУдаление - Булево, Истина - установить пометку на удаление документа.
//
Процедура УстановитьПометкуУдаленияЗавершениеСервер(МассивСсылок, ПометитьНаУдаление) Экспорт
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		
		// Записать только те объекты, значение пометки удаления которых изменяется
		Если ПометитьНаУдаление
			И Не ДокументОбъект.ПометкаУдаления Тогда
			
			ДокументОбъект.ПометкаУдаления = Истина;
			
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		ИначеЕсли Не ПометитьНаУдаление
			И ДокументОбъект.ПометкаУдаления Тогда
			
			ДокументОбъект.ПометкаУдаления = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив ссылок документов динамического списка.
//
// Параметры:
// 		ВыделенныеСтроки - Массив - массив документов динамического списка.
//
// Возвращаемое значение:
// 		Структура - содержит массив ссылок на документы и признак пометки на удаление документов.
//
Функция СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		МассивСсылок.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

// Возвращает массив ссылок документов, проведение которых отменено.
//
// Параметры:
// 		МассивСсылок - Массив - массив ссылок документов.
//
// Возвращаемое значение:
// 		Массив - массив ссылок на документы, проведение которых отменено.
//
Функция СсылкиРаспроведенныхДокументов(МассивСсылок) Экспорт
	
	РаспроведенныеДокументы = Новый Массив;
	НепроведенныеДокументы = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивСсылок);
	РаспроводимыеДокументы = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСсылок, НепроведенныеДокументы);
	
	Для Каждого Ссылка Из РаспроводимыеДокументы Цикл
		ДокументОбъект = Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	
	Возврат РаспроводимыеДокументы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РеквизитыОбъекта

// см. ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

// см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта()
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// см. ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта()
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область ПраваПользователей

Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(
		Пользователь,
		ПроверятьПраваАдминистрированияСистемы,
		УчитыватьПривилегированныйРежим);
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Актуализирует значения полей КИ из ее представления.
//
//  Параметры:
//		АдресПредставление - представление КИ
//		АдресЗначенияПолей - служебная информация, значения полей КИ
//		ТипКИ			   - тип контактной информации (Перечисления.ТипыКонтактнойИнформации)
//
Процедура ЗаполнитьЗначенияПолейКИПоПредставлению(Представление, ЗначенияПолей, ТипКИ = Неопределено) Экспорт
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(Представление, ЗначенияПолей, ТипКИ);
	
КонецПроцедуры

#КонецОбласти

#Область ПолнотекствовыйПоиск
// Определяет признак использования полнотекстового поиска, исходя из значения переданной ФО
// и настройки использования для базы данных в целом
//
// Параметры
//	ИмяФОИспользованияППД - Строка - имя учитваемой функциональной опции
//
// Возвращаемое значение:
//	Булево - Истина, если используется, Ложь в обратном случае.
//
Функция ИспользуетсяПолнотекстовыйПоиск(ИмяФОИспользованияППД) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФОИспользованияППД)
		И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
	
КонецФункции

Функция БанковскийСчетОрганизацииПоУмолчанию() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию();
	
КонецФункции

Функция КассаОрганизацииПоУмолчанию() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СпискиВыбора

Процедура ПолучитьСписокВыбораПеречисления(ИмяПеречисления, ДанныеВыбора, Параметры, ИсключаемыеЗначения) Экспорт
	
	ОбщегоНазначенияУТ.ПолучитьСписокВыбораПеречисления(
			ИмяПеречисления,
			ДанныеВыбора,
			Параметры,
			ИсключаемыеЗначения);
			
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхВыбора

Процедура ОбработкаПолученияДанныхВыбораПВХСтатьиАктивовПассивов(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	
	СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейАктивовПассивов(Параметры);
	
	Запрос.Текст = СвойстваЗапроса.ТекстЗапроса;
	Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
		
	Если Параметры.Свойство("ДополнитьСтатьямиРасходов") И Параметры.ДополнитьСтатьямиРасходов Тогда
		
		СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейРасходов(Параметры);
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + СвойстваЗапроса.ТекстЗапроса;
			
		Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ДополнитьСтатьямиДоходов") И Параметры.ДополнитьСтатьямиДоходов Тогда
		
		СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейДоходов(Параметры);
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|" + СвойстваЗапроса.ТекстЗапроса;
			
		Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");

	ДанныеВыбора = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(
			Выборка.Ссылка, 
			СокрЛП(Выборка.Наименование) + " (" + СокрЛП(Выборка.Код) + ")", 
			Выборка.ПометкаУдаления);
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораПВХСтатьиРасходов(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		
		СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейРасходов(Параметры);
		
		Запрос.Текст = СвойстваЗапроса.ТекстЗапроса;
		Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
		
		Если Параметры.Свойство("ДополнитьСтатьямиАктивовПассивов") И Параметры.ДополнитьСтатьямиАктивовПассивов Тогда
			
			СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейАктивовПассивов(Параметры);
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + СвойстваЗапроса.ТекстЗапроса;
				
			Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("ДополнитьСтатьямиДоходов") И Параметры.ДополнитьСтатьямиДоходов Тогда
		
			СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейДоходов(Параметры);
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + СвойстваЗапроса.ТекстЗапроса;
				
			Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|";
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		ДанныеВыбора = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(
				Выборка.Ссылка, 
				СокрЛП(Выборка.Наименование) + " (" + СокрЛП(Выборка.Код) + ")", 
				Выборка.ПометкаУдаления);
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораПВХСтатьиДоходов(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		
		СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейДоходов(Параметры);
		
		Запрос.Текст = СвойстваЗапроса.ТекстЗапроса;
		Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
		
		Если Параметры.Свойство("ДополнитьСтатьямиАктивовПассивов") И Параметры.ДополнитьСтатьямиАктивовПассивов Тогда
			
			СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейАктивовПассивов(Параметры);
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + СвойстваЗапроса.ТекстЗапроса;
				
			Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("ДополнитьСтатьямиРасходов") И Параметры.ДополнитьСтатьямиРасходов Тогда
			
			СвойстваЗапроса = СвойстваЗапросаПолученияДанныхВыбораСтатейРасходов(Параметры);
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + СвойстваЗапроса.ТекстЗапроса;
				
			Для каждого ПараметрЗапроса Из СвойстваЗапроса.ПараметрыЗапроса Цикл
				Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|";
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		ДанныеВыбора = Новый СписокЗначений;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(
				Выборка.Ссылка, 
				СокрЛП(Выборка.Наименование) + " (" + СокрЛП(Выборка.Код) + ")", 
				Выборка.ПометкаУдаления);
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПредставления

// Формирование заголовка документа.
//
// Параметры:
// Документ - ДокументСсылка.ВводОстатков
// НомерДокумента - Строка - Номер документа ВводОстатков
// ДатаДокумента - Дата - Дата документа ВводОстатков
// ТипОперации - ПеречислениеСсылка.ТипыОперацийВводаОстатков - Тип операции документа ВводОстатков
//
// Возвращаемое значение:
//  Строка - строковое значение заголовка документа.S
//
Функция ЗаголовокДокументаВводОстатковПоТипуОперации(Документ, НомерДокумента, ДатаДокумента, ТипОперации) Экспорт
	
	Заголовок = "";
	ИспользуетсяНесколькоКасс = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	ИспользуетсяНесколькоСчетов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	
	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке
		ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВКассах Тогда
			Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
				Заголовок = ?(ИспользуетсяНесколькоКасс,
								НСтр("ru='Ввод начальных остатков в кассах %1 от %2';uk='Введення початкових залишків у касах %1 від %2'"),
								НСтр("ru='Ввод начальных остатков в кассе %1 от %2';uk='Введення початкових залишків у касі %1 від %2'"));
			Иначе
				Заголовок = ?(ИспользуетсяНесколькоКасс,
								НСтр("ru='Ввод начальных остатков в кассах (создание)';uk='Введення початкових залишків у касах (створення)'"),
								НСтр("ru='Ввод начальных остатков в кассе (создание)';uk='Введення початкових залишків у касі (створення)'"));
			КонецЕсли;
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков задолженности клиентов %1 от %2';uk='Введення початкових залишків заборгованості клієнтів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков задолженности клиентов (создание)';uk='Введення початкових залишків заборгованості клієнтів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков задолженности перед поставщиками %1 от %2';uk='Введення початкових залишків заборгованості перед постачальниками %1 від %2'"),
							НСтр("ru='Ввод начальных остатков задолженности перед поставщиками (создание)';uk='Введення початкових залишків заборгованості перед постачальниками (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетников Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков задолженности подотчетных лиц %1 от %2';uk='Введення початкових залишків заборгованості підзвітних осіб %1 від %2'"),
							НСтр("ru='Ввод начальных остатков задолженности подотчетных лиц (создание)';uk='Введення початкових залишків заборгованості підзвітних осіб (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков перерасходов подотчетных средств %1 от %2';uk='Введення початкових залишків перевитрат підзвітних коштів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков перерасходов подотчетных средств (создание)';uk='Введення початкових залишків перевитрат підзвітних коштів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах Тогда
		Если ЗначениеЗаполнено(Документ.Ссылка) Тогда
			Заголовок = ?(ИспользуетсяНесколькоСчетов,
							НСтр("ru='Ввод начальных остатков на банковских счетах %1 от %2';uk='Введення початкових залишків на банківських рахунках %1 від %2'"),
							НСтр("ru='Ввод начальных остатков на банковском счете %1 от %2';uk='Введення початкових залишків на банківському рахунку %1 від %2'"));
		Иначе
			Заголовок = ?(ИспользуетсяНесколькоСчетов,
							НСтр("ru='Ввод начальных остатков на банковских счетах (создание)';uk='Введення початкових залишків на банківських рахунках (створення)'"),
							НСтр("ru='Ввод начальных остатков на банковском счете (создание)';uk='Введення початкових залишків на банківському рахунку (створення)'"));
		КонецЕсли;
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков авансов, полученных от клиентов %1 от %2';uk='Введення початкових залишків авансів, отриманих від клієнтів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков авансов, полученных от клиентов (создание)';uk='Введення початкових залишків авансів, отриманих від клієнтів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков авансов, выданных поставщикам %1 от %2';uk='Введення початкових залишків авансів, виданих постачальникам %1 від %2'"),
							НСтр("ru='Ввод начальных остатков авансов, выданных поставщикам (создание)';uk='Введення початкових залишків авансів, виданих постачальникам (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков расчетов между организациями по авансам %1 от %2';uk='Введення початкових залишків розрахунків між організаціями за авансами %1 від %2'"),
							НСтр("ru='Ввод начальных остатков расчетов между организациями по авансам (создание)';uk='Введення початкових залишків розрахунків між організаціями за авансами (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков расчетов между организациями по реализациям %1 от %2';uk='Введення початкових залишків розрахунків між організаціями за реалізаціями %1 від %2'"),
							НСтр("ru='Ввод начальных остатков расчетов между организациями по реализациям (создание)';uk='Введення початкових залишків розрахунків між організаціями за реалізаціями (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков собственных товаров %1 от %2';uk='Введення початкових залишків власних товарів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков собственных товаров (создание)';uk='Введення початкових залишків власних товарів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиСобственныхТоваровНаАдресномСкладе Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков собственных товаров на адресных складах %1 от %2';uk='Введення початкових залишків власних товарів на адресних складах %1 від %2'"),
							НСтр("ru='Ввод начальных остатков собственных товаров на адресных складах (создание)';uk='Введення початкових залишків власних товарів на адресних складах (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков полученных на комиссию товаров %1 от %2';uk='Введення початкових залишків отриманих на комісію товарів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков полученных на комиссию товаров (создание)';uk='Введення початкових залишків отриманих на комісію товарів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков полученных на комиссию товаров на адресных складах %1 от %2';uk='Введення початкових залишків отриманих на комісію товарів на адресних складах %1 від %2'"),
							НСтр("ru='Ввод начальных остатков полученных на комиссию товаров на адресных складах (создание)';uk='Введення початкових залишків отриманих на комісію товарів на адресних складах (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков переданных на комиссию товаров %1 от %2';uk='Введення початкових залишків переданих на комісію товарів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков переданных на комиссию товаров (создание)';uk='Введення початкових залишків переданих на комісію товарів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков переданной клиентам возвратной тары %1 от %2';uk='Введення початкових залишків переданої клієнтам зворотної тари %1 від %2'"),
							НСтр("ru='Ввод начальных остатков переданной клиентам возвратной тары (создание)';uk='Введення початкових залишків переданої клієнтам зворотної тари (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков принятой от поставщиков возвратной тары %1 от %2';uk='Введення початкових залишків прийнятої від постачальників зворотної тари %1 від %2'"),
							НСтр("ru='Ввод начальных остатков принятой от поставщиков возвратной тары (создание)';uk='Введення початкових залишків прийнятої від постачальників зворотної тари (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Переход на использование адресного хранения остатков %1 от %2';uk='Перехід на використання адресного зберігання залишків %1 від %2'"),
							НСтр("ru='Переход на использование адресного хранения остатков (создание)';uk='Перехід на використання адресного зберігання залишків (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Переход на использование складских помещений %1 от %2';uk='Перехід на використання складських приміщень %1 від %2'"),
							НСтр("ru='Переход на использование складских помещений (создание)';uk='Перехід на використання складських приміщень (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков переданных переработчику материалов %1 от %2';uk='Введення початкових залишків переданих переробнику матеріалів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков переданных переработчику материалов (создание)';uk='Введення початкових залишків переданих переробнику матеріалів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков переданных в производство материалов %1 от %2';uk='Введення початкових залишків переданих у виробництво матеріалів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков переданных в производство материалов (создание)';uk='Введення початкових залишків переданих у виробництво матеріалів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.УдалитьОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков принятой от поставщиков возвратной тары на адресных складах %1 от %2';uk='Введення початкових залишків прийнятої від постачальників зворотної тари на адресних складах %1 від %2'"),
							НСтр("ru='Ввод начальных остатков принятой от поставщиков возвратной тары на адресных складах (создание)';uk='Введення початкових залишків прийнятої від постачальників зворотної тари на адресних складах (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.СторноОтчетовПоЭквайрингу Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Сторно отчетов по эквайрингу %1 от %2';uk='Сторно звітів по еквайрингу %1 від %2'"),
							НСтр("ru='Сторно отчетов по эквайрингу (создание)';uk='Сторно звітів по еквайрінгу (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихАктивовПассивов Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков прочих активов и пассивов %1 от %2';uk='Введення початкових залишків інших активів і пасивів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков прочих активов и пассивов (создание)';uk='Введення початкових залишків інших активів і пасивів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПодарочныеСертификаты Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков подарочных сертификатов %1 от %2';uk='Введення початкових залишків подарункових сертифікатів %1 від %2'"),
							НСтр("ru='Ввод начальных остатков подарочных сертификатов (создание)';uk='Введення початкових залишків подарункових сертифікатів (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоДоговорамКредитовИДепозитов Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков расчетов по кредитам, депозитам и выданным займам %1 от %2';uk='Введення початкових залишків розрахунків за кредитами, депозитами та виданими позиками %1 від %2'"),
							НСтр("ru='Ввод начальных остатков расчетов по кредитам, депозитам и выданным займам (создание)';uk='Введення початкових залишків розрахунків за кредитами, депозитами та виданими позиками (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТМЦВЭксплуатации Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков ТМЦ в эксплуатации %1 от %2';uk='Введення початкових залишків ТМЦ в експлуатації %1 від %2'"),
							НСтр("ru='Ввод начальных остатков ТМЦ в эксплуатации (создание)';uk='Введення початкових залишків ТМЦ в експлуатації (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПрочихРасходов Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Ввод начальных остатков прочих расходов %1 от %2';uk='Введення початкових залишків інших витрат %1 від %2'"),
							НСтр("ru='Ввод начальных остатков прочих расходов (создание)';uk='Введення початкових залишків інших витрат (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ФинансовыйРезультатЗаПрошлыеПериоды Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Финансовый результат за прошлые периоды %1 от %2';uk='Фінансовий результат за минулі періоди %1 від %2'"),
							НСтр("ru='Финансовый результат за прошлые периоды (создание)';uk='Фінансовий результат за минулі періоди (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОптовыеПродажиЗаПрошлыеПериоды Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Оптовые продажи за прошлые периоды %1 от %2';uk='Гуртові продажі за минулі періоди %1 від %2'"),
							НСтр("ru='Оптовые продажи за прошлые периоды (создание)';uk='Гуртові продажі за минулі періоди (створення)'"));
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.РозничныеПродажиЗаПрошлыеПериоды Тогда
			Заголовок = ?(ЗначениеЗаполнено(Документ.Ссылка),
							НСтр("ru='Розничные продажи за прошлые периоды %1 от %2';uk='Роздрібні продажі за минулі періоди %1 від %2'"),
							НСтр("ru='Розничные продажи за прошлые периоды (создание)';uk='Роздрібні продажі за минулі періоди (створення)'"));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок,
																					  НомерДокумента,
																					  ДатаДокумента);
КонецФункции

#КонецОбласти

#Область ОбновлениеИБ

// Возвращает структуру параметров, необходимых при запуске конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы программы при запуске.
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	// Для запрета обновления с неподдерживаемых версий
	Параметры.Вставить("ВерсияДанных", ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя, Истина)); 
	Параметры.Вставить("ВерсияМетаданных", СокрЛП(Метаданные.Версия)); 
	
КонецПроцедуры

Функция СвойстваЗапросаПолученияДанныхВыбораСтатейАктивовПассивов(Параметры)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтатьиАктивовПассивов.Ссылка,
	|	СтатьиАктивовПассивов.Код,
	|	СтатьиАктивовПассивов.Наименование,
	|	СтатьиАктивовПассивов.ПометкаУдаления
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
	|ГДЕ
	|	СтатьиАктивовПассивов.Наименование ПОДОБНО &СтрокаПоиска
	|	И (СтатьиАктивовПассивов.АктивПассив = &АктивПассив ИЛИ &БезОграниченийПоАктивуПассиву)
	|";
	
	ПараметрыЗапроса = Новый Структура;
	
	АктивПассив = Неопределено;
	Если Параметры.Отбор.Свойство("АктивПассив") Тогда
		Если Параметры.Отбор.АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив Тогда
			АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Актив;
		Иначе
			АктивПассив = Перечисления.ВидыСтатейУправленческогоБаланса.Пассив;
		КонецЕсли;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("АктивПассив", АктивПассив);
	ПараметрыЗапроса.Вставить("БезОграниченийПоАктивуПассиву", (АктивПассив = Неопределено));
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗапроса",     ТекстЗапроса);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваЗапросаПолученияДанныхВыбораСтатейРасходов(Параметры)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка,
	|	СтатьиРасходов.Код,
	|	СтатьиРасходов.Наименование,
	|	СтатьиРасходов.ПометкаУдаления
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	(СтатьиРасходов.Наименование ПОДОБНО &СтрокаПоиска
	|		ИЛИ СтатьиРасходов.Код ПОДОБНО &СтрокаПоиска)
	|	И НЕ СтатьиРасходов.Ссылка В (&ЗаблокированныеСтатьи)
	|	И (Не СтатьиРасходов.ОграничитьИспользование
	|		ИЛИ СтатьиРасходов.Ссылка В (
	|			ВЫБРАТЬ
	|				ДоступныеОперации.Ссылка
	|			ИЗ
	|				ПланВидовХарактеристик.СтатьиРасходов.ДоступныеХозяйственныеОперации КАК ДоступныеОперации
	|			ГДЕ
	|			ДоступныеОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|			ИЛИ &ПоВсемХозОперациям
	|		)
	|	 )
	|	И СтатьиРасходов.ВариантРаспределенияРасходов <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	И (СтатьиРасходов.ВариантРаспределенияРасходов В (&ВариантРаспределенияРасходов)
	|		ИЛИ &ПоВсемВариантамРаспределения)
	|";
	
	ПараметрыЗапроса = Новый Структура;
	
	ХозяйственнаяОперация = Неопределено;
	Если Параметры.Отбор.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = Параметры.Отбор.ХозяйственнаяОперация;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ПараметрыЗапроса.Вставить("ПоВсемХозОперациям",    ХозяйственнаяОперация = Неопределено);
	
	ВариантРаспределенияРасходов = Неопределено;
	Если Параметры.Отбор.Свойство("ВариантРаспределенияРасходов") Тогда
		ВариантРаспределенияРасходов = Параметры.Отбор.ВариантРаспределенияРасходов;
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ВариантРаспределенияРасходов", ВариантРаспределенияРасходов);
	ПараметрыЗапроса.Вставить("ПоВсемВариантамРаспределения", ВариантРаспределенияРасходов = Неопределено);
	
	ПараметрыЗапроса.Вставить("ЗаблокированныеСтатьи", ПланыВидовХарактеристик.СтатьиРасходов.ЗаблокированныеСтатьиРасходов());
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗапроса",     ТекстЗапроса);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваЗапросаПолученияДанныхВыбораСтатейДоходов(Параметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиДоходов.Ссылка КАК Ссылка,
	|	СтатьиДоходов.Код КАК Код,
	|	СтатьиДоходов.Наименование КАК Наименование,
	|	СтатьиДоходов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	СтатьиДоходов.Наименование ПОДОБНО &СтрокаПоиска
	|	И НЕ СтатьиДоходов.ЭтоГруппа
	|	И НЕ СтатьиДоходов.Ссылка В (&ЗаблокированныеСтатьи)
	|";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ЗаблокированныеСтатьи", ПланыВидовХарактеристик.СтатьиДоходов.ЗаблокированныеСтатьиДоходов());
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗапроса",     ТекстЗапроса);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

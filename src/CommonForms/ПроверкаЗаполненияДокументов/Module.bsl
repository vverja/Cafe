&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ОбработкаЗакрытия; //используется отработки закрытия формы

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	НеИспользоватьУпаковки = Параметры.НеИспользоватьУпаковки;
	
	ПревышениеКоличестваТоваровРазрешено = Параметры.ПревышениеКоличестваТоваровРазрешено;
	ОтклонениеЗапрещено                  = Параметры.ОтклонениеЗапрещено;
	Склад                                = Параметры.Склад;
	СкладГруппа                          = ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
	ПеремещениеПоЗаказам                 = Параметры.ПеремещениеПоЗаказам;
	Статус                               = Параметры.Статус;
	Ссылка                               = Параметры.Ссылка;
	ЗаказНаСборку                        = Параметры.ЗаказНаСборку;
	ТипОперации                          = Параметры.ТипОперации;
	Соглашение                           = Параметры.Соглашение;
	ПоступлениеПоЗаказам                 = Параметры.ПоступлениеПоЗаказам;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыУказанияСерий) Тогда
		
		ПараметрыУказанияСерийВрем = Новый Структура(Параметры.ПараметрыУказанияСерий);
		ПараметрыУказанияСерийВрем.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма";
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(ПараметрыУказанияСерийВрем);
		
	КонецЕсли;
	
	ПараметрыВыбораНоменклатурыВТабличнойЧасти = Ссылка.Метаданные().ТабличныеЧасти[Параметры.ИмяТабличнойЧасти].Реквизиты.Номенклатура.ПараметрыВыбора;
	Для Каждого СтрокаТЧ Из ПараметрыВыбораНоменклатурыВТабличнойЧасти Цикл
		Если СтрНайти(СтрокаТЧ.Имя, "Отбор.ТипНоменклатуры") Тогда
			Если ТипЗнч(СтрокаТЧ.Значение) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
				ТипыНоменклатуры.Добавить(СтрокаТЧ.Значение);
			Иначе
				Для Каждого ЗначениеПеречисления Из СтрокаТЧ.Значение Цикл
					ТипыНоменклатуры.Добавить(ЗначениеПеречисления);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ТипыНоменклатуры) Тогда
		Для Каждого ЗначениеПеречисления Из Перечисления.ТипыНоменклатуры Цикл
			ТипыНоменклатуры.Добавить(ЗначениеПеречисления);
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыСерия",
		"Видимость",
		ЗначениеЗаполнено(Параметры.ПараметрыУказанияСерий) И ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры);
		
	Товары.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище));
	
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ЕстьРасхождение = 1;
	КонецЦикла;
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Товары", Истина);
	
	Если НеИспользоватьУпаковки Тогда
		Элементы.Упаковка.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	ОбработкаЗакрытия = Ложь;
	ТекущийЭлемент = Элементы.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ОбработкаЗакрытия Тогда
		
		Если ОтклонениеЗапрещено Тогда
			Отмена(Неопределено);
		Иначе
			Отказ = Истина;
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
				НСтр("ru='Завершить проверку без переноса расхождений в документ?';uk='Завершити перевірку без перенесення розбіжностей у документ?'"),
				РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			
			ДанныеШтрихкодов = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			ОбработатьШтрихкоды(ДанныеШтрихкодов);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнено поле ""Номенклатура"" в строке %1 списка ""Товары""';uk='Не заповнене поле ""Номенклатура"" в рядку %1 списку ""Товари""'"), Товары.Индекс(СтрокаТЧ) + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары["+Товары.Индекс(СтрокаТЧ)+"].Номенклатура",,Отказ);
		КонецЕсли;
		Если ИспользоватьХарактеристикиНоменклатуры И Не ЗначениеЗаполнено(СтрокаТЧ.Характеристика) И СтрокаТЧ.ХарактеристикиИспользуются Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнено поле ""Характеристика"" в строке %1 списка ""Товары""';uk='Не заповнене поле ""Характеристика"" в рядку %1 списку ""Товари""'"), Товары.Индекс(СтрокаТЧ) + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары["+Товары.Индекс(СтрокаТЧ)+"].Характеристика",,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	Не ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (&ТипыНоменклатуры)
	|
	|");
	
	ТабличнаяЧасть = Товары.Выгрузить(,"Номенклатура");
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТабличнаяЧасть, "НомерСтроки");
	
	Запрос.УстановитьПараметр("ТипыНоменклатуры", ТипыНоменклатуры.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Тип номенклатуры %1 в строке %2 списка ""Товары"" отличается от допустимых типов: %3';uk='Тип номенклатури %1 в рядку %2 списку ""Товари"" відрізняється від допустимих типів: %3'"),
			Выборка.ТипНоменклатуры, 
			Выборка.НомерСтроки,
			СтрСоединить(ТипыНоменклатуры.ВыгрузитьЗначения(),","));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары["+Выборка.НомерСтроки+"].Номенклатура",,Отказ);
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Склад)
		И НЕ СкладГруппа Тогда
		ТекущаяСтрока.Склад = Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Склад)
		И ПараметрыУказанияСерий <> Неопределено Тогда
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	Иначе
		ТекущаяСтрока.СтатусУказанияСерий = 0;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРасхожденияПриИзменении(Элемент)
	УстановитьОтборПоРасхождениям();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ЕстьРасхождение = ТекущиеДанные.ЕстьРасхождение;
	ТекущиеДанные.ЕстьРасхождение = ?(ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.КоличествоУпаковокФакт, 0, 1);
	
	Если ЕстьРасхождение <> ТекущиеДанные.ЕстьРасхождение И ТолькоРасхождения Тогда
		УстановитьОтборПоРасхождениям();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ОчиститьСообщения();
	
	УдаляемыеСтроки = Новый Массив;
	НеудаляемыеСтроки = Новый Массив;
	Для Каждого Идентификатор из Элементы.Товары.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Элементы.Товары.ДанныеСтроки(Идентификатор);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.КоличествоУпаковок) Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
			Если Идентификатор = ИдентификаторТекущейСтроки Тогда
				
				// Текущая строка удаляется - нужно перепозиционироваться.
				ИдентификаторПредыдущейСтроки = Неопределено;
				НайденаТекущаяСтрока = Ложь;
				НайденаНоваяТекущаяСтрока = Ложь;
				Для Каждого СтрокаТЧ Из Товары Цикл
					Если СтрокаТЧ.ПолучитьИдентификатор() = ИдентификаторТекущейСтроки Тогда
						НайденаТекущаяСтрока = Истина;
					Иначе
						Если НайденаТекущаяСтрока Тогда
							Если УдаляемыеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
								Элементы.Товары.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
								НайденаНоваяТекущаяСтрока = Истина;
								Прервать;
							КонецЕсли;
						Иначе
							Если УдаляемыеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
								ИдентификаторПредыдущейСтроки = СтрокаТЧ.ПолучитьИдентификатор();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не НайденаНоваяТекущаяСтрока Тогда
					Элементы.Товары.ТекущаяСтрока = ИдентификаторПредыдущейСтроки;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			НеудаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ из УдаляемыеСтроки Цикл
		Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из НеудаляемыеСтроки Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строку %1 удалить нельзя, т.к. она присутствует в исходном документе.';uk='Рядок %1 неможна видалити, оскільки він присутен у вихідному документі.'"), Товары.Индекс(СтрокаТЧ) + 1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары",,Отказ);
	КонецЦикла;
	
	ИдентификаторыСтрок = Новый Массив;
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТЧ = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ИдентификаторыСтрок.Добавить(СтрокаТЧ.ИдентификаторСтроки);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		НоваяСтрока.КоличествоУпаковок     = 0;
		НоваяСтрока.КоличествоУпаковокФакт = 0;
		НоваяСтрока.КоличествоУпаковокФактИтог = 0;
		НоваяСтрока.Расхождение                = 0;
		
		Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьПроверку(Команда)
	
	ТоварыИзлишки.Очистить();
	ТоварыНедостачи.Очистить();
	ТоварыОтвязаноОтНабора.Очистить();
	ТоварыНедостачиВНаборах.Очистить();
	
	АнализНаборов();
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	МассивСтрокНовыеТовары = Новый Массив;
	МассивСтрокНедостачи   = Новый Массив;
	МассивСтрокИзлишки     = Новый Массив;
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФактИтог Тогда
			// Нет расхождений
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок = 0 И СтрокаТЧ.КоличествоУпаковокФактИтог > 0 Тогда
			// Новый товар
			МассивСтрокНовыеТовары.Добавить(СтрокаТЧ);
			
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок > СтрокаТЧ.КоличествоУпаковокФактИтог Тогда
			// Недостача
			МассивСтрокНедостачи.Добавить(СтрокаТЧ);
			
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок < СтрокаТЧ.КоличествоУпаковокФактИтог Тогда
			// Излишек
			МассивСтрокИзлишки.Добавить(СтрокаТЧ);
			
		КонецЕсли;
	КонецЦикла;
	
	РазрешеноЗавершитьПроверку = Истина;
	Если    МассивСтрокНовыеТовары.Количество() > 0
		ИЛИ МассивСтрокНедостачи.Количество()   > 0
		ИЛИ МассивСтрокИзлишки.Количество()     > 0
		ИЛИ ТоварыОтвязаноОтНабора.Количество() > 0 Тогда
		
		Если ОтклонениеЗапрещено Тогда
			РазрешеноЗавершитьПроверку = Ложь;
		КонецЕсли;
		
		Если ПревышениеКоличестваТоваровРазрешено ИЛИ (МассивСтрокИзлишки.Количество() = 0 И МассивСтрокНовыеТовары.Количество() = 0) Тогда
			Элементы.ГруппаПредупреждениеНеОтгружать.Видимость = Ложь;
		Иначе
			Элементы.ГруппаПредупреждениеНеОтгружать.Видимость = Истина;
		КонецЕсли;
		
		Если ТоварыНедостачиВНаборах.Количество() > 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаНедостачиВНаборах;
			Элементы.СтраницыКоманднаяПанель.ТекущаяСтраница = Элементы.СтраницыКоманднаяПанель.ПодчиненныеЭлементы.СтраницаКоманднаяПанельНедостачиВНаборах;
			Элементы.КоманднаяПанельНедостачиВНаборахПерейтиКРасхождениям.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРасхождения;
			Элементы.СтраницыКоманднаяПанель.ТекущаяСтраница = Элементы.СтраницыКоманднаяПанель.ПодчиненныеЭлементы.СтраницаКоманднаяПанельРасхождения;
			Элементы.КоманднаяПанельРасхожденияКнопкиЗавершить.Видимость = Истина;
			Элементы.КоманднаяПанельРасхожденияКнопкиЗавершить.КнопкаПоУмолчанию = Истина;
			Элементы.ГруппаНедостачи.Видимость = ТоварыНедостачи.Количество() > 0;
			Элементы.ГруппаИзлишки.Видимость = ТоварыИзлишки.Количество() > 0;
			
			Элементы.ДекорацияНаборы.Видимость = ТоварыНедостачиВНаборах.Количество() > 0;
			Элементы.ГруппаРазукомплектация.Видимость = ТоварыОтвязаноОтНабора.Количество() > 0;
		КонецЕсли;
		
	Иначе
		ОбработкаЗакрытия = Истина;
		Закрыть(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковокФакт = РезультатВыполнения.Вес;
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОбработкаЗакрытия = Истина;
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРасхождения Тогда
		
		Если ТоварыНедостачиВНаборах.Количество() > 0 Тогда
		
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаНедостачиВНаборах;
			Элементы.СтраницыКоманднаяПанель.ТекущаяСтраница = Элементы.СтраницыКоманднаяПанель.ПодчиненныеЭлементы.СтраницаКоманднаяПанельНедостачиВНаборах;
			Элементы.КоманднаяПанельНедостачиВНаборахПерейтиКРасхождениям.КнопкаПоУмолчанию = Истина;
		
		Иначе
		
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаПроверка;
			Элементы.СтраницыКоманднаяПанель.ТекущаяСтраница = Элементы.СтраницыКоманднаяПанель.ПодчиненныеЭлементы.СтраницаКоманднаяПанельПроверка;
			Элементы.КоманднаяПанельПроверкаЗавершить.КнопкаПоУмолчанию = Истина;
		
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаНедостачиВНаборах Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаПроверка;
		Элементы.СтраницыКоманднаяПанель.ТекущаяСтраница = Элементы.СтраницыКоманднаяПанель.ПодчиненныеЭлементы.СтраницаКоманднаяПанельПроверка;
		Элементы.КоманднаяПанельПроверкаЗавершить.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРасхождения;
		Элементы.СтраницыКоманднаяПанель.ТекущаяСтраница = Элементы.СтраницыКоманднаяПанель.ПодчиненныеЭлементы.СтраницаКоманднаяПанельРасхождения;
		Элементы.КоманднаяПанельРасхожденияКнопкиЗавершить.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзмененияВДокумент(Команда)
	
	Если РазрешеноЗавершитьПроверку Тогда
		ОбработкаЗакрытия = Истина;
		Закрыть(ЗакончитьПроверкуНаСервере());
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ЕдиницаИзмерения", 
                                                                   "Товары.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "Характеристика",
																		     "Товары.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокФакт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Товары.КоличествоУпаковокФакт");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокФакт.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Товары.КоличествоУпаковокФакт");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Red);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь,, 
																     "Товары.СтатусУказанияСерий", 
																     "Товары.ТипНоменклатуры");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номенклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Характеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Упаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокВДокументе.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)

	ТекущиеДанныеСтруктурой = Новый Структура;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Для Каждого КлючЗначение из ТоварыКешТекущейСтроки Цикл
		Если КлючЗначение.Ключ = "КоличествоУпаковокФакт" Тогда
			ТекущиеДанныеСтруктурой.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество, ТекущиеДанные[КлючЗначение.Ключ]);
		Иначе	
			ТекущиеДанныеСтруктурой.Вставить(КлючЗначение.Ключ, ТекущиеДанные[КлючЗначение.Ключ]);
		КонецЕсли;
	КонецЦикла;
	ТекущиеДанныеСтруктурой.Вставить("ИдентификаторТекущейСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст,ТекущиеДанныеСтруктурой, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Прочее

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Отмена(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад",
			Новый Структура("Склад, СкладГруппа", Склад, СкладГруппа));
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		СтруктураДляРасчетаСерий = Новый Структура("Склад,ПараметрыУказанияСерий",
				?(СкладГруппа,ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"),Склад),
				ПараметрыУказанияСерий);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус",СтруктураДляРасчетаСерий);
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус",СтруктураДляРасчетаСерий);
	КонецЕсли;
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИмяКолонкиКоличество                   = "КоличествоУпаковокФакт";
	СтруктураДействий.НеИспользоватьУпаковки                 = НеИспользоватьУпаковки;
	СтруктураДействий.БлокироватьДанныеФормы                 = Ложь;
	СтруктураДействий.ШтрихкодыВТЧ                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов = ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий);
	
		
	Если НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов Тогда
		
		Если ТекущиеДанныеИдентификатор <> Неопределено Тогда
			
			ТекущиеДанные = Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
			ОткрытьПодборСерий(,
				ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
		
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,ЭтаФорма,СтруктураПараметровДействия,КэшированныеЗначения);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ЕстьРасхождение = ?(СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФакт, 0, 1);
	КонецЦикла;
	
	УстановитьОтборПоРасхождениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция Анализ()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.КодСтроки              КАК КодСтроки,
	|	Таблица.ИдентификаторСтроки    КАК ИдентификаторСтроки,
	|	Таблица.ЗаказКлиента           КАК ЗаказКлиента,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	Таблица.Номенклатура           КАК Номенклатура,
	|	Таблица.Характеристика         КАК Характеристика,
	|	Таблица.Упаковка               КАК Упаковка,
	|	Таблица.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	|	Таблица.КоличествоУпаковок     КАК КоличествоУпаковок
	|ПОМЕСТИТЬ _СоставНабора
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ Таблица.КодСтроки = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатуры.Ссылка КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Таблица.КодСтроки            КАК КодСтроки,
	|	Таблица.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	Таблица.ЗаказКлиента         КАК ЗаказКлиента,
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Таблица.Номенклатура         КАК Номенклатура,
	|	Таблица.Характеристика       КАК Характеристика,
	|	Таблица.Упаковка             КАК Упаковка,
	|	Таблица.КоличествоУпаковокФакт   КАК КоличествоУпаковокФакт,
	|	Таблица.КоличествоУпаковок       КАК КоличествоУпаковок
	|ПОМЕСТИТЬ СоставНабора
	|ИЗ
	|	_СоставНабора КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка                          КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	0                                                            КАК КодСтроки,
	|	""""                                                         КАК ИдентификаторСтроки,
	|	Неопределено                                                 КАК ЗаказКлиента,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец       КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура          КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика        КАК Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка                  КАК Упаковка,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.КоличествоУпаковок) КАК КоличествоУпаковокПоУмолчанию,
	|	СУММА(0) КАК КоличествоУпаковокФакт,
	|	СУММА(0) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ СоставНабора КАК Т)
	|	И (ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|                                                                               ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|	ИЛИ (ВариантыКомплектацииНоменклатурыТовары.Ссылка.НоменклатураОсновногоКомпонента = ВариантыКомплектацииНоменклатурыТовары.Номенклатура И ВариантыКомплектацииНоменклатурыТовары.Ссылка.ХарактеристикаОсновногоКомпонента = ВариантыКомплектацииНоменклатурыТовары.Характеристика))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора,
	|	0,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.КодСтроки,
	|	Таблица.ИдентификаторСтроки,
	|	Таблица.ЗаказКлиента,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	0,
	|	Таблица.КоличествоУпаковокФакт,
	|	Таблица.КоличествоУпаковок
	|ИЗ
	|	СоставНабора КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.КодСтроки,
	|	Таблица.ИдентификаторСтроки,
	|	Таблица.ЗаказКлиента,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	СУММА(Таблица.КоличествоУпаковокПоУмолчанию) КАК КоличествоУпаковокПоУмолчанию,
	|	СУММА(Таблица.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт,
	|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Результат
	|ИЗ
	|	Таблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.КодСтроки,
	|	Таблица.ИдентификаторСтроки,
	|	Таблица.ЗаказКлиента,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.КодСтроки,
	|	Результат.ИдентификаторСтроки,
	|	Результат.ЗаказКлиента,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоУпаковокПоУмолчанию <> 0
	|				ТОГДА Результат.КоличествоУпаковок / Результат.КоличествоУпаковокПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК КоличествоМинимум,
	|	ВЫРАЗИТЬ(Минимум(ВЫБОР
	|			КОГДА Результат.КоличествоУпаковокПоУмолчанию <> 0
	|				ТОГДА Результат.КоличествоУпаковокФакт / Результат.КоличествоУпаковокПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК КоличествоМинимумФакт
	|ПОМЕСТИТЬ Коэффициенты
	|ИЗ
	|	Результат КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.КодСтроки,
	|	Результат.ИдентификаторСтроки,
	|	Результат.ЗаказКлиента,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.КодСтроки,
	|	Таблица.ИдентификаторСтроки,
	|	Таблица.ЗаказКлиента,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.КоличествоУпаковокПоУмолчанию,
	|	Таблица.КоличествоУпаковок,
	|	ЕСТЬNULL(Коэффициенты.КоличествоМинимум, 1) * Таблица.КоличествоУпаковокПоУмолчанию КАК КоличествоУпаковокПолныйКомплект,
	|	ЕСТЬNULL(Коэффициенты.КоличествоМинимумФакт, 1) * Таблица.КоличествоУпаковокПоУмолчанию КАК КоличествоУпаковокПолныйКомплектФакт,
	|	Таблица.КоличествоУпаковокФакт - ЕСТЬNULL(Коэффициенты.КоличествоМинимумФакт, 1) * Таблица.КоличествоУпаковокПоУмолчанию КАК Разница
	|ИЗ
	|	Результат КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Коэффициенты КАК Коэффициенты
	|		ПО Коэффициенты.НоменклатураНабора = Таблица.НоменклатураНабора
	|		 И Коэффициенты.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|		 И Коэффициенты.КодСтроки = Таблица.КодСтроки
	|		 И Коэффициенты.ИдентификаторСтроки = Таблица.ИдентификаторСтроки
	|		 И Коэффициенты.ЗаказКлиента = Таблица.ЗаказКлиента
	|ГДЕ
	|	Таблица.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|                                       ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|	ИЛИ Коэффициенты.КоличествоМинимумФакт = 0 
	|;
	|ВЫБРАТЬ
	|	Коэффициенты.КодСтроки,
	|	Коэффициенты.ИдентификаторСтроки,
	|	Коэффициенты.ЗаказКлиента,
	|	Коэффициенты.ВариантРасчетаЦеныНабора,
	|	Коэффициенты.НоменклатураНабора,
	|	Коэффициенты.ХарактеристикаНабора,
	|	Коэффициенты.КоличествоМинимум,
	|	Коэффициенты.КоличествоМинимумФакт
	|ИЗ
	|	Коэффициенты КАК Коэффициенты
	|ГДЕ
	|	Коэффициенты.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|                                            ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|	ИЛИ Коэффициенты.КоличествоМинимумФакт = 0 
	|");
	
	Запрос.УстановитьПараметр("Таблица", Товары.Выгрузить());
	РезультатЗапросаПакет = Запрос.ВыполнитьПакет();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КоэффициентыНаборов", РезультатЗапросаПакет[РезультатЗапросаПакет.Количество() - 1].Выгрузить());
	ВозвращаемоеЗначение.Вставить("ДанныеПоНаборам",     РезультатЗапросаПакет[РезультатЗапросаПакет.Количество() - 2].Выгрузить());
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция АнализНаборов()
	
	РезультатАнализа = Анализ();
	
	ДанныеПоНаборам = РезультатАнализа.ДанныеПоНаборам;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаТЧ.КоличествоУпаковокФактИтог = СтрокаТЧ.КоличествоУпаковокФакт;
		
		ОтборНаборов = Новый Структура;
		ОтборНаборов.Вставить("НоменклатураНабора", СтрокаТЧ.НоменклатураНабора);
		ОтборНаборов.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
		НайденоВАнализе = ДанныеПоНаборам.НайтиСтроки(ОтборНаборов).Количество() > 0;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НоменклатураНабора) И НайденоВАнализе Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторСтроки");
			Отбор.Вставить("КодСтроки");
			Отбор.Вставить("ЗаказКлиента");
			Отбор.Вставить("НоменклатураНабора");
			Отбор.Вставить("ХарактеристикаНабора");
			Отбор.Вставить("Номенклатура");
			Отбор.Вставить("Характеристика");
			Отбор.Вставить("Упаковка");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			НайденныеСтроки = ДанныеПоНаборам.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				КоличествоУпаковокФакт           = 0;
				КоличествоУпаковокФактОтклонение = 0;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					КоличествоУпаковокФактОтклонение = КоличествоУпаковокФактОтклонение + НайденнаяСтрока.Разница;
					КоличествоУпаковокФакт = КоличествоУпаковокФакт + НайденнаяСтрока.КоличествоУпаковокПолныйКомплектФакт;
				КонецЦикла;
				СтрокаТЧ.КоличествоУпаковокФактИтог = КоличествоУпаковокФакт;
				
				Если КоличествоУпаковокФактОтклонение <> 0 Тогда
					НоваяСтрока = ТоварыИзлишки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокФактОтклонение;
					
					НоваяСтрока = ТоварыОтвязаноОтНабора.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокФактОтклонение;
				КонецЕсли;
				
				Если СтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковокФакт > 0 Тогда
					НоваяСтрока = ТоварыНедостачиВНаборах.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковокФакт;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 И СтрокаТЧ.КоличествоУпаковокФакт > 0 Тогда
				
				НоваяСтрока = ТоварыИзлишки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФакт - СтрокаТЧ.КоличествоУпаковок;
				
			ИначеЕсли СтрокаТЧ.КоличествоУпаковок > СтрокаТЧ.КоличествоУпаковокФакт Тогда
				
				НоваяСтрока = ТоварыНедостачи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок - СтрокаТЧ.КоличествоУпаковокФакт;
				
			ИначеЕсли СтрокаТЧ.КоличествоУпаковок < СтрокаТЧ.КоличествоУпаковокФакт Тогда
				
				НоваяСтрока = ТоварыИзлишки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФакт - СтрокаТЧ.КоличествоУпаковок;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из РезультатАнализа.КоэффициентыНаборов Цикл
		Если СтрокаТЧ.КоличествоМинимум - СтрокаТЧ.КоличествоМинимумФакт > 0 Тогда
			НоваяСтрока = ТоварыНедостачи.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЧ.НоменклатураНабора;
			НоваяСтрока.Характеристика = СтрокаТЧ.ХарактеристикаНабора;
			НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоМинимум - СтрокаТЧ.КоличествоМинимумФакт;
		ИначеЕсли СтрокаТЧ.КоличествоМинимумФакт - СтрокаТЧ.КоличествоМинимум > 0 Тогда
			НоваяСтрока = ТоварыИзлишки.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЧ.НоменклатураНабора;
			НоваяСтрока.Характеристика = СтрокаТЧ.ХарактеристикаНабора;
			НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоМинимумФакт - СтрокаТЧ.КоличествоМинимум;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ЗакончитьПроверкуНаСервере()
	
	// Создаем пустую таблицу Товаров
	ТаблицаТовары = ТоварыОтвязаноОтНабора.Выгрузить(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())).СкопироватьКолонки();
	
	МассивСтрокНовыеТовары = Новый Массив;
	МассивСтрокНедостачи   = Новый Массив;
	МассивСтрокИзлишки     = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ТоварыОтвязаноОтНабора Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,,"КоличествоУпаковок,НоменклатураНабора, ХарактеристикаНабора, ИндексНабора");
		НоваяСтрока.КоличествоУпаковокФакт = СтрокаТЧ.КоличествоУпаковок;
		НоваяСтрока.КоличествоУпаковокФактИтог = СтрокаТЧ.КоличествоУпаковок;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФактИтог Тогда
			// Нет расхождений
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок = 0 И СтрокаТЧ.КоличествоУпаковокФактИтог > 0 Тогда
			// Новый товар
			МассивСтрокНовыеТовары.Добавить(СтрокаТЧ);
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок > СтрокаТЧ.КоличествоУпаковокФактИтог Тогда
			// Недостача
			МассивСтрокНедостачи.Добавить(СтрокаТЧ);
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок < СтрокаТЧ.КоличествоУпаковокФактИтог Тогда
			// Излишек
			МассивСтрокИзлишки.Добавить(СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПревышениеКоличестваТоваровРазрешено Тогда
		Для Каждого СтрокаТЧ Из МассивСтрокНовыеТовары Цикл
			НоваяСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КоличествоУпаковок");
			НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФактИтог - СтрокаТЧ.КоличествоУпаковок;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из МассивСтрокИзлишки Цикл
			НоваяСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КоличествоУпаковок");
			НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФактИтог - СтрокаТЧ.КоличествоУпаковок;
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из МассивСтрокНедостачи Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КоличествоУпаковок");
		НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФактИтог - СтрокаТЧ.КоличествоУпаковок;
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаТовары, АдресВоВременномХранилище);
	
	ПараметрыЗакрытия = новый Структура;
	ПараметрыЗакрытия.Вставить("Товары",        АдресВоВременномХранилище);
	
	Возврат ПараметрыЗакрытия;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоГруппаСкладовИСкладыИспользуютсяВТЧДокументовПродажи(Склад)
	
	Возврат Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоРасхождениям()
	Если ТолькоРасхождения Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождение", 1);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРасхождениям(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРасхождения;
	Элементы.СтраницыКоманднаяПанель.ТекущаяСтраница = Элементы.СтраницыКоманднаяПанель.ПодчиненныеЭлементы.СтраницаКоманднаяПанельРасхождения;
	Элементы.КоманднаяПанельРасхожденияКнопкиЗавершить.Видимость = Истина;
	Элементы.КоманднаяПанельРасхожденияКнопкиЗавершить.КнопкаПоУмолчанию = Истина;
	Элементы.ГруппаНедостачи.Видимость = ТоварыНедостачи.Количество() > 0;
	Элементы.ГруппаИзлишки.Видимость = ТоварыИзлишки.Количество() > 0;
	
	Элементы.ДекорацияНаборы.Видимость = ТоварыНедостачиВНаборах.Количество() > 0;
	Элементы.ГруппаРазукомплектация.Видимость = ТоварыОтвязаноОтНабора.Количество() > 0;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

ОбработкаЗакрытия = Ложь;
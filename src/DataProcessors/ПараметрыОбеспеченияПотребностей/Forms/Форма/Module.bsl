
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	//Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоПравамИФункциональнымОпциям();
	ИницализироватьРеквизитыПоУмолчанию();
	
	НастроитьФормуПоПараметрам();
	ЗагрузитьСохраняемыеРеквизиты();
	
	ИнициализироватьКомпоновщикНастроекДляОтборов();
	УстановитьОтборИзменениеАссоримента();
	Настройки = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки;
	Обработки.ПараметрыОбеспеченияПотребностей.ПриИзмененииРеквизитовОбъекта(Объект, ЭтаФорма, Истина, Настройки);
	ПроверитьУстановитьДоступностьКомандСпискаТоварыИДерева();
	ПоказаныПервые10000 = Обработки.ПараметрыОбеспеченияПотребностей.ПриИзмененииРеквизитовОбъектаПроверкаРазмерности(Объект, Настройки) > 10000;
	
	ПриИзмененииРеквизитовНастроитьЭлементыФормы();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"ТекстУстановленДляФормата",
		НСтр("ru='установленный для формата';uk='встановлений для формату'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьСохраняемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ГруппировкиТоварныхОграничений.Форма.ФормаВыбора" Тогда
		
		ПереместитьВГруппуНаСервере("Дерево", ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ОбеспечениеПотребностей.Форма.ФормаРедактированияПараметровОбеспечения" Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			ЗаполнитьМетодОбеспеченияНаСервере(ВыбранноеЗначение);
			ПоказатьОповещениеПользователя(НСтр("ru='Заполнение метода обеспечения';uk='Заповнення методу забезпечення'"), ,
			НСтр("ru='Пожалуйста, подождите. Обрабатываются выбранные строки.';uk='Будь ласка, зачекайте. Обробляються вибрані рядки.'"));
			
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.СпособыОбеспеченияПотребностей.Форма.ФормаВыбора" Тогда
		
		ЗаполнитьСпособОбеспеченияНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПараметрыОбеспеченияПотребностей.Форма.ФормаПроизвольныеОтборы" Тогда
		
		ОбработкаВыбораПроизвольныеОтборы(ВыбранноеЗначение);
		Если ПоказаныПервые10000 Тогда
			
			ТекстВопроса = НСтр("ru='Получены первые 10000 позиций списка товаров, удовлетворяющие отбору.
                |Получение всех позиций может занять длительное время. Получить все позиции?'
                |;uk='Отримані перші 10000 позицій списку товарів, що задовольняють відбору.
                |Отримання всіх позицій може зайняти тривалий час. Отримати всі позиції?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПриОткрытииЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПоказаныПервые10000 Тогда
		
		ТекстВопроса = НСтр("ru='Получены первые 10000 позиций списка товаров, удовлетворяющие отбору.
            |Получение всех позиций может занять длительное время. Получить все позиции?'
            |;uk='Отримані перші 10000 позицій списку товарів, що задовольняють відбору.
            |Отримання всіх позицій може зайняти тривалий час. Отримати всі позиції?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПриОткрытииЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФорматПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПриИзмененииРеквизитовОбъектаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПриИзмененииРеквизитовОбъектаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПриИзмененииРеквизитовОбъектаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПриИзмененииРеквизитовОбъектаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСпискаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитовНастроитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСписка

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриОкончанииРедактированияТаблицыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ТоварыПриАктивизацииСтрокиОбработчикОжидания", 1.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыНоменклатура Тогда
		
		СтандартнаяОбработка = Ложь;
		СтрокаТовары = Элементы.Товары.ТекущиеДанные;
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", СтрокаТовары.Номенклатура), ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДерева

&НаКлиенте
Процедура ДеревоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриОкончанииРедактированияТаблицыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ТоварыПриАктивизацииСтрокиОбработчикОжидания", 1.5, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Команды_Группировка

&НаКлиенте
Процедура Сгруппировать(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.Сгруппировать");
	
	СвойстваВыделенныхСтрок = СвойстваВыделенныхСтрок();
	СтруктураРезультата = ИмяНовойГруппировкиПоУмолчанию(СвойстваВыделенныхСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("СгруппироватьПослеВводаИмени", ЭтаФорма, СтруктураРезультата);
	ПоказатьВводЗначения(ОписаниеОповещения, СтруктураРезультата.Наименование, НСтр("ru='Ввод наименования группы';uk='Введення найменування групи'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВГруппу(Команда)
	
	ПараметрыФормы = Новый Структура("ОтображатьНоменклатуру, Номенклатура, НаименованиеНоменклатураСклад", Ложь);
	СвойстваВыделенныхСтрок = СвойстваВыделенныхСтрок();
	Если СвойстваВыделенныхСтрок.Номенклатура <> Неопределено
		И СвойстваВыделенныхСтрок.Склад <> Неопределено
		И СвойстваВыделенныхСтрок.ВсегоСтрок > 0 Тогда
		
		СтрокаТовары = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ВыделенныеСтроки[0]);
		Если СтрокаТовары.ИсточникНастройкиТоварныхОграничений <> "НоменклатураСклад" Тогда
			ПараметрыФормы.ОтображатьНоменклатуру = СвойстваВыделенныхСтрок.ЕстьХарактеристики;
			ПараметрыФормы.Номенклатура = СвойстваВыделенныхСтрок.Номенклатура;
			ПараметрыФормы.НаименованиеНоменклатураСклад =
				Строка(СвойстваВыделенныхСтрок.Номенклатура) + "," + Строка(СвойстваВыделенныхСтрок.Склад);
		КонецЕсли;
		
	КонецЕсли;
	ОткрытьФорму("Справочник.ГруппировкиТоварныхОграничений.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьИзГруппы(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ИсключитьИзГруппы");
	
	ИсключитьИзГруппыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Команды_Запасы

&НаКлиенте
Процедура ЗаполнитьМетодОбеспечения(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ЗаполнитьМетодОбеспечения");
	
	ТекущиеДанные = ?(ОтображениеСписка = НСтр("ru='Список';uk='Список'"), Элементы.Товары, Элементы.Дерево).ТекущиеДанные;
	КлючПотребности = Новый Структура("МетодОбеспечения", ТекущиеДанные.МетодОбеспеченияПотребностей);
	ПараметрыФормы = Новый Структура("КлючПотребности, РежимОткрытия", КлючПотребности, "ТолькоМетод");
	
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаРедактированияПараметровОбеспечения", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМаксимальныйЗапас(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ЗаполнитьМаксимальныйЗапас");
	
	ЗаполнитьРесурс("МаксимальноеКоличествоЗапаса");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМинимальныйЗапас(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ЗаполнитьМинимальныйЗапас");
	
	ЗаполнитьРесурс("МинимальноеКоличествоЗапаса");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтраховойЗапас(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ЗаполнитьСтраховойЗапас");
	
	ЗаполнитьРесурс("СтраховоеКоличествоЗапаса");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНормуПотребления(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ЗаполнитьНормуПотребления");
	
	ЗаполнитьРесурс("СреднедневноеПотребление");
КонецПроцедуры

#КонецОбласти

#Область Команды_Прочие

&НаКлиенте
Процедура Обновить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.Обновить");
	
	ОчиститьСообщения();
	ПриИзмененииРеквизитовОбъектаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпособОбеспечения(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ЗаполнитьСпособОбеспечения");
	
	ПараметрыФормы = Новый Структура("Склад", Объект.Склад);
	ОткрытьФорму("Справочник.СпособыОбеспеченияПотребностей.ФормаВыбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСпособОбеспечения(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ОчиститьСпособОбеспечения");
	
	ЗаполнитьСпособОбеспеченияНаСервере(ПредопределенноеЗначение("Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка"));
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтатистикуПотребления(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.РассчитатьСтатистикуПотребления");
	
	ПоказатьОповещениеПользователя(НСтр("ru='Расчет статистики';uk='Розрахунок статистики'"), ,
		НСтр("ru='Пожалуйста, подождите. Идет получение данных...';uk='Будь ласка, зачекайте. Йде отримання даних...'"));
		
	РассчитатьСтатистикуПотребленияНаСервере();
	
	ПоказатьОповещениеПользователя(НСтр("ru='Расчет статистики';uk='Розрахунок статистики'"), ,
		НСтр("ru='Статистика потребления расcчитана. Обработка выделенных строк завершена';uk='Статистика споживання розрахована. Обробка виділених рядків завершена'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкаРасчетаСреднедневногоПотребления(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПараметрыОбеспеченияПотребностей.Форма.Команда.ОткрытьНастройкаРасчетаСреднедневногоПотребления");
	
	ОткрытьФорму("Обработка.Классификация.Форма.НастройкаПараметровРасчетаТоварныхОграничений", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеОтборы(Команда)
	
	ПараметрыФормы = Новый Структура("Компоновщик", КомпоновщикНастроекДляОтборов);
	ОткрытьФорму("Обработка.ПараметрыОбеспеченияПотребностей.Форма.ФормаПроизвольныеОтборы", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетаданныеФормы

&НаСервере
Функция КомандыПоВладельцу(Владелец)
	
	МассивЭлементов = Новый Массив();
	
	Если Владелец = "Список" Тогда
		
		МассивЭлементов.Добавить(Элементы.СписокПереместитьВверх);
		МассивЭлементов.Добавить(Элементы.СписокПереместитьВниз);
		МассивЭлементов.Добавить(Элементы.СортироватьСписокПоВозрастанию);
		МассивЭлементов.Добавить(Элементы.СортироватьСписокПоУбыванию);
		МассивЭлементов.Добавить(Элементы.СписокНайти);
		МассивЭлементов.Добавить(Элементы.СписокОтменитьПоиск);
		
	ИначеЕсли Владелец = "Дерево" Тогда
		
		МассивЭлементов.Добавить(Элементы.ДеревоПереместитьВверх);
		МассивЭлементов.Добавить(Элементы.ДеревоПереместитьВниз);
		МассивЭлементов.Добавить(Элементы.СортироватьДеревоПоВозрастанию);
		МассивЭлементов.Добавить(Элементы.СортироватьДеревоПоУбыванию);
		
		МассивЭлементов.Добавить(Элементы.Сгруппировать);
		МассивЭлементов.Добавить(Элементы.ПеренестиВГруппу);
		МассивЭлементов.Добавить(Элементы.ИсключитьИзГруппы);
		
	ИначеЕсли Владелец = "НоменклатураТовар" Тогда
		
		МассивЭлементов.Добавить(Элементы.ЗаполнитьМетодОбеспечения);
		МассивЭлементов.Добавить(Элементы.ЗаполнитьМаксимальныйЗапас);
		МассивЭлементов.Добавить(Элементы.ЗаполнитьМинимальныйЗапас);
		МассивЭлементов.Добавить(Элементы.ЗаполнитьСтраховойЗапас);
		МассивЭлементов.Добавить(Элементы.ЗаполнитьНормуПотребления);
		МассивЭлементов.Добавить(Элементы.РассчитатьСтатистикуПотребления);
		
	КонецЕсли;
	
	Возврат МассивЭлементов;
	
КонецФункции

&НаСервере
Функция ПоляДереваПоВладельцу(Владелец)
	
	МассивЭлементов = Новый СписокЗначений();
	
	Если Владелец = "Запасы" Или Владелец = "ТоварноеОграничение" Тогда
		
		МассивЭлементов.Добавить(Элементы.ДеревоМинимальныйЗапас.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоМаксимальныйЗапас.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоНормаПотребления.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоСтраховойЗапас.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоОбеспечениеЗаказовПриПоддержанииЗапаса.Имя);
		
	ИначеЕсли Владелец = "Номенклатура" Тогда
		
		МассивЭлементов.Добавить(Элементы.ДеревоСпособОбеспечения.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоСрокИсполненияЗаказа.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоОбеспечиваемыйПериод.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоЕдиницаИзмерения.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоСклад.Имя);
		
	КонецЕсли;
	
	Если Владелец = "ТоварноеОграничение" Тогда
		
		МассивЭлементов.Добавить(Элементы.ДеревоМетодОбеспечения.Имя);
		МассивЭлементов.Добавить(Элементы.ДеревоУпаковкаЗаказа.Имя);
		
	КонецЕсли;
	
	Возврат МассивЭлементов;
	
КонецФункции

&НаСервере
Функция ПоляСпискаПоВладельцу(Владелец)
	
	МассивЭлементов = Новый СписокЗначений();
	
	Если Владелец = "Запасы" Или Владелец = "ТоварноеОграничение" Тогда
		
		МассивЭлементов.Добавить(Элементы.ТоварыМинимальныйЗапас.Имя);
		МассивЭлементов.Добавить(Элементы.ТоварыМаксимальныйЗапас.Имя);
		МассивЭлементов.Добавить(Элементы.ТоварыНормаПотребления.Имя);
		МассивЭлементов.Добавить(Элементы.ТоварыСтраховойЗапас.Имя);
		МассивЭлементов.Добавить(Элементы.ТоварыОбеспечениеЗаказовПриПоддержанииЗапаса.Имя);
		
	КонецЕсли;
	
	Если Владелец = "ТоварноеОграничение" Тогда
		
		МассивЭлементов.Добавить(Элементы.ТоварыМетодОбеспечения.Имя);
		МассивЭлементов.Добавить(Элементы.ТоварыУпаковкаЗаказа.Имя);
		
	КонецЕсли;
	
	Возврат МассивЭлементов;
	
КонецФункции

#КонецОбласти

#Область ИзменениеРеквизитов

&НаСервереБезКонтекста
Функция ПриИзмененииРеквизитовОбъектаНаСервереБезКонтекста(ПараметрыОтбора, Компоновщик)
	
	ПоказаныПервые10000 = Обработки.ПараметрыОбеспеченияПотребностей.ПриИзмененииРеквизитовОбъектаПроверкаРазмерности(
		ПараметрыОтбора, Компоновщик.ПользовательскиеНастройки) > 10000;
	Возврат ПоказаныПервые10000;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииРеквизитовОбъектаНаКлиенте()
	
	ПараметрыОтбора = Новый Структура("Склад, СпособОбеспечения, Номенклатура, Формат, ТоварнаяКатегория");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);
	Настройки = КомпоновщикНастроекДляОтборов;
	ПоказаныПервые10000 = ПриИзмененииРеквизитовОбъектаНаСервереБезКонтекста(ПараметрыОтбора, Настройки);
	Если ПоказаныПервые10000 Тогда
		
		КнопкиВопроса = Новый СписокЗначений();
		КнопкиВопроса.Добавить("ПолучитьВсе", НСтр("ru='Получить все';uk='Одержати всі'"));
		КнопкиВопроса.Добавить("ПолучитьПервые10000", НСтр("ru='Получить первые 10000 позиций';uk='Отримати перші 10000 позицій'"));
		
		ТекстВопроса = НСтр("ru='Более 10000 позиций удовлетворяет отбору.
            |Получение всех позиций может занять длительное время.'
            |;uk='Більше 10000 позицій задовольняє відбору.
            |Отримання всіх позицій може зайняти тривалий час.'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПриИзмененииРеквизитовОбъектаЗавешение", ЭтаФорма), ТекстВопроса, КнопкиВопроса);
		
	Иначе
		
		ПриИзмененииРеквизитовОбъекта(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОбъекта(ПолучатьПервые10000)
	
	Настройки = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки;
	Обработки.ПараметрыОбеспеченияПотребностей.ПриИзмененииРеквизитовОбъекта(Объект, ЭтаФорма, ПолучатьПервые10000, Настройки);
	ПроверитьУстановитьДоступностьКомандСпискаТоварыИДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриОткрытииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииРеквизитовОбъекта(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииРеквизитовОбъектаЗавешение(Результат, Параметры) Экспорт
	
	ПриИзмененииРеквизитовОбъекта(Результат = "ПолучитьПервые10000");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьФормуПоПараметрам()
	
	// Определение источника вызова формы, заполнение реквизитов формы из параметров отбора.
	Если Параметры.Источник = "ИзменениеАссортимента" Тогда
		
		Источник = "ИзменениеАссортимента";
		ДокументИзмененияАссортимента = Параметры.Отбор.Документ;
		
	ИначеЕсли Параметры.Источник = "Склад" Тогда
		
		Источник = "Склад";
		Параметры.Отбор.Свойство("Склад", Объект.Склад);
		
	ИначеЕсли ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		
		Если Параметры.Отбор.Свойство("Номенклатура", Объект.Номенклатура) Тогда
			
			Источник = "Номенклатура";
			
		ИначеЕсли Параметры.Отбор.Свойство("Склад", Объект.Склад) Тогда
			
			Источник = "ОбеспечениеПотребностей";
			
		КонецЕсли;
		
	Иначе
		
		Источник = "Раздел";
		
	КонецЕсли;
	
	// Настройка элементов формы.
	
	СкрываемыеЭлементы = Новый Массив();
	Если Источник = "Номенклатура" Тогда
		
		СкрываемыеЭлементы.Добавить(Элементы.ТоварнаяКатегория);
		СкрываемыеЭлементы.Добавить(Элементы.ГруппаСхемыОбеспеченияСклада);
		
	ИначеЕсли Источник = "Склад" Тогда
		
		СкрываемыеЭлементы.Добавить(Элементы.Формат);
		СкрываемыеЭлементы.Добавить(Элементы.ТоварыСклад);
		СкрываемыеЭлементы.Добавить(Элементы.ДеревоСклад);
		
	Иначе
		
		СкрываемыеЭлементы.Добавить(Элементы.ГруппаСхемыОбеспеченияСклада);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов(СкрываемыеЭлементы, Ложь);
	
	Элементы.СтраницыПараметрыОбеспечения.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Если Источник = "Склад" Тогда
		
		Элементы.СтраницыПараметрыОбеспечения.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Автозаголовок = Ложь;
		Шаблон = НСтр("ru='Параметры обеспечения потребностей (Cклад: ""%1"")';uk='Параметри забезпечення потреб (Склад: ""%1"")'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметры.Отбор.Склад);
		Элементы.ГруппаПараметрыОбеспечения.Заголовок = НСтр("ru='Параметры обеспечения номенклатурой';uk='Параметри забезпечення номенклатурою'");
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Склад", Объект.Склад);
		
	ИначеЕсли Источник = "Номенклатура" Тогда
		
		Автозаголовок = Ложь;
		Шаблон = НСтр("ru='Параметры обеспечения потребностей (Номенклатура: ""%1"")';uk='Параметри забезпечення потреб (Номенклатура: ""%1"")'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметры.Отбор.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравамИФункциональнымОпциям()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Элементы.ДеревоПредставление.Заголовок = НСтр("ru='Группа / Номенклатура';uk='Група / Номенклатура'");
	КонецЕсли;
	
	ПраваДоступа = Обработки.ПараметрыОбеспеченияПотребностей.ПраваДоступаНаЗаписьСпособаИлиМетода();
	ЗапускСОграниченнымДоступом = Не ПраваДоступа.ВариантыОбеспечения Или Не ПраваДоступа.ТоварныеОграничения;
	
	Если ЗапускСОграниченнымДоступом Тогда
		
		Элементы.Дерево.ТолькоПросмотр = Истина;
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.Товары.ТолькоПросмотр = Истина;
		
		СкрытьКомандыСпискаТоварыИДерева();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьКомандыСпискаТоварыИДерева()
	
	КомандыСписка = КомандыСпискаТоварыИДерева();
	Для Каждого Элемент Из КомандыСписка Цикл
		
		Элемент.Видимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьУстановитьДоступностьКомандСпискаТоварыИДерева()
	
	ДоступностьКоманд = Объект.Товары.Количество() > 0;
	
	КомандыСпискаТоварыИДерева = КомандыСпискаТоварыИДерева();
	Для Каждого Элемент Из КомандыСпискаТоварыИДерева Цикл
		
		Элемент.Доступность = ДоступностьКоманд;
		
	КонецЦикла;
	Элементы.РассчитатьСтатистикуПотребления.Доступность = ДоступностьКоманд;
	
КонецФункции

&НаСервере
Функция КомандыСпискаТоварыИДерева()
	
	КомандыСпискаТоварыИДерева = Новый Массив();
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ЗаполнитьМетодОбеспечения);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ЗаполнитьМаксимальныйЗапас);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ЗаполнитьМинимальныйЗапас);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ЗаполнитьСтраховойЗапас);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ЗаполнитьНормуПотребления);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ЗаполнитьСпособОбеспечения);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ОчиститьСпособОбеспечения);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.Сгруппировать);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ПеренестиВГруппу);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ИсключитьИзГруппы);
	КомандыСпискаТоварыИДерева.Добавить(Элементы.ЗаполнитьМаксимальныйЗапас);
	Возврат КомандыСпискаТоварыИДерева;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСохраняемыеРеквизиты()
	
	КлючНастройки = "Обработка.ПараметрыОбеспеченияПотребностей";
	ИмяНастройки = ?(Источник = "Раздел", "Основная", "Источник");
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючНастройки, ИмяНастройки);
	
	Если ТипЗнч(ЗначениеНастроек) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНастроек.Свойство("ОтображениеСписка") Тогда
		ОтображениеСписка = ЗначениеНастроек.ОтображениеСписка;
	КонецЕсли;
	
	Если ИмяНастройки = "Основная" Тогда // заполнение отборов
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСохраняемыеЗначения()
	
	КлючНастройки = "Обработка.ПараметрыОбеспеченияПотребностей";
	ИмяНастройки = ?(Источник = "Раздел", "Основная", "Источник");
	
	Если ИмяНастройки = "Основная" Тогда // заполнение отборов
		Настройки = Новый Структура("Склад, Номенклатура, СпособОбеспечения, ТоварнаяКатегория, Формат");
		ЗаполнитьЗначенияСвойств(Настройки, Объект);
	Иначе
		Настройки = Новый Структура();
	КонецЕсли;
	Настройки.Вставить("ОтображениеСписка", ОтображениеСписка);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастройки, ИмяНастройки, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ИницализироватьРеквизитыПоУмолчанию()
	
	ИндексЭлементаВыбора = 1; // иерархический список
	ОтображениеСписка = Элементы.ОтображениеСписка.СписокВыбора[ИндексЭлементаВыбора]; 
	
	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		ТекущаяДата(), ПериодКлассификации, - КоличествоПериодовКлассификации);
	ПериодКлассификацииДатаНачала    = Период.ДатаНачала;
	ПериодКлассификацииДатаОкончания = Период.ДатаОкончания;
	
	АдресГрафикаБезКалендаря = Обработки.ОбеспечениеПотребностей.СоздатьГрафикВХранилище(
		ПериодКлассификацииДатаНачала, ПериодКлассификацииДатаОкончания, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовНастроитьЭлементыФормы()
	
	КомандыСписка = КомандыПоВладельцу("Список");
	КомандыДерева = КомандыПоВладельцу("Дерево");
	
	Если ОтображениеСписка = "Список" Тогда
		
		Элементы.СтраницыСписок.ТекущаяСтраница = Элементы.СтраницыСписок.ПодчиненныеЭлементы.СтраницаРежимСписка;
		УстановитьВидимостьЭлементов(КомандыСписка, Истина);
		УстановитьВидимостьЭлементов(КомандыДерева, Ложь);
		
	Иначе // иерархический список
		
		Элементы.СтраницыСписок.ТекущаяСтраница = Элементы.СтраницыСписок.ПодчиненныеЭлементы.СтраницаРежимДерева;
		УстановитьВидимостьЭлементов(КомандыСписка, Ложь);
		УстановитьВидимостьЭлементов(КомандыДерева, Истина);
		
	КонецЕсли;
	
	Если ЗапускСОграниченнымДоступом Тогда
		СкрытьКомандыСпискаТоварыИДерева();
	КонецЕсли;
	
	СинхронизироватьВыделенныеСтрокиСписков();
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьВыделенныеСтрокиСписков()
	
	Если ОтображениеСписка = НСтр("ru='Список';uk='Список'") Тогда
		
		ТаблицаИсточник = Дерево;
		ЭлементИсточник = Элементы.Дерево;
		
		ТаблицаПриемник = Объект.Товары;
		ЭлементПриемник = Элементы.Товары;
		
	Иначе
		
		ТаблицаИсточник = Объект.Товары;
		ЭлементИсточник = Элементы.Товары;
		
		ТаблицаПриемник = Дерево;
		ЭлементПриемник = Элементы.Дерево;
		
	КонецЕсли;
	
	ЭлементПриемник.ВыделенныеСтроки.Очистить();
	
	Если ЭлементИсточник.ТекущаяСтрока <> Неопределено Тогда
		ЭлементПриемник.ТекущаяСтрока = ТаблицаИсточник.НайтиПоИдентификатору(ЭлементИсточник.ТекущаяСтрока).ИдентификаторСвязи;
	Иначе
		ЭлементПриемник.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	Для Каждого ИдентификаторИсточник Из ЭлементИсточник.ВыделенныеСтроки Цикл
		
		ЭлементПриемник.ВыделенныеСтроки.Добавить(ТаблицаИсточник.НайтиПоИдентификатору(ИдентификаторИсточник).ИдентификаторСвязи);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов(МассивЭлементов, Видимость)
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Элемент.Видимость = Видимость;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление обеспечиваемого периода.
	Элемент = ОформитьПоЗначениюПоля("Дерево.ОбеспечиваемыйПериод", 0, "ДеревоОбеспечиваемыйПериод");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='не ограничен';uk='не обмежений'"));
	
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.ОбеспечиваемыйПериод", 0, "ТоварыОбеспечиваемыйПериод");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='не ограничен';uk='не обмежений'"));
	
	// Оформление склада и метода обеспечения для работ.
	ТипНоменклатурыРабота = Перечисления.ТипыНоменклатуры.Работа;
	Элемент = ОформитьПоЗначениюПоля("Дерево.ТипНоменклатуры", ТипНоменклатурыРабота, "ДеревоСклад");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.ТипНоменклатуры", ТипНоменклатурыРабота, "ТоварыСклад");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = ОформитьПоЗначениюПоля("Дерево.ТипНоменклатуры", ТипНоменклатурыРабота, "ДеревоМетодОбеспечения");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.ТипНоменклатуры", ТипНоменклатурыРабота, "ТоварыМетодОбеспечения");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Оформление способа обеспечения.
	Элемент = ОформитьПоЗначениюПоля("Дерево.ИсточникНастройкиСпособаОбеспечения", "СхемаОбеспечения", "ДеревоСпособОбеспечения");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<из схемы обеспечения>';uk='<з схеми забезпечення>'"));
	
	Элемент = ОформитьПоЗначениюПоля("Дерево.ИсточникНастройкиСпособаОбеспечения", "Номенклатура", "ДеревоСпособОбеспечения");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<из номенклатуры>';uk='<з номенклатури>'"));
	
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.ИсточникНастройкиСпособаОбеспечения", "СхемаОбеспечения", "ТоварыСпособОбеспечения");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<из схемы обеспечения>';uk='<з схеми забезпечення>'"));
	
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.ИсточникНастройкиСпособаОбеспечения", "Номенклатура", "ТоварыСпособОбеспечения");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<из номенклатуры>';uk='<з номенклатури>'"));
	
	// Отметка незаполненного "Обеспечение заказов".
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОбеспечениеЗаказовПриПоддержанииЗапаса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ОбеспечениеЗаказовПриПоддержанииЗапаса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.МетодОбеспеченияПотребностей");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ЭтоПодчиненныйЭлемент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Поля, недоступные для элементов.
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.ИсточникНастройкиТоварныхОграничений", "Группировка", ПоляСпискаПоВладельцу("ТоварноеОграничение"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.ИсточникНастройкиТоварныхОграничений", "НоменклатураСклад", ПоляСпискаПоВладельцу("ТоварноеОграничение"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	УсловноеОформлениеЭлементовИГруппДерева();
	УсловноеОформлениеДереваПоМетодуОбеспечения();
	УсловноеОформлениеСпискаПоМетодуОбеспечения();
	
	//
	Элемент = ОформитьПоЗначениюПоля("Список.СрокПоставки", 0, "СписокСрокПоставки");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='в любой день';uk='в будь-який день'"));
	
	Элемент = ОформитьПоЗначениюПоля("Список.ОбеспечиваемыйПериод", 0, "СписокОбеспечиваемыйПериод");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='не ограничен';uk='не обмежений'"));
	
	Поля = Новый Массив();
	Поля.Добавить("СписокСпособОбеспечения");
	Поля.Добавить("СписокОбеспечиваемыйПериод");
	Поля.Добавить("СписокСрокПоставки");
	Элемент = ОформитьПоЗначениюПоля("Список.СпособОбеспечения", Справочники.СпособыОбеспеченияПотребностей.ПустаяСсылка(), Поля);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеЭлементовИГруппДерева()
	
	// Поля, недоступные для группировок.
	Элемент = ОформитьПоЗначениюПоля("Дерево.ЭлементГруппа", 1, ПоляДереваПоВладельцу("Номенклатура"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru='<для элементов>';uk='<для елементів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Единица измерения для группировок.
	Элемент = ОформитьПоЗначениюПоля("Дерево.ЭлементГруппа", 1, "ДеревоЕдиницаИзмерения");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru='единица хранения остатков';uk='одиниця зберігання залишків'"));
	
	// Поля, недоступные для элементов.
	Элемент = ОформитьПоЗначениюПоля("Дерево.ЭтоПодчиненныйЭлемент", Истина, ПоляДереваПоВладельцу("ТоварноеОграничение"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеДереваПоМетодуОбеспечения()
	
	// "Поддержание запаса по норме".
	ПоддержаниеЗапасаНаСрокПоНорме = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме;
	
	ОформляемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ДеревоМинимальныйЗапас,ДеревоМаксимальныйЗапас");
	Элемент = ОформитьПоЗначениюПоля("Дерево.МетодОбеспеченияПотребностей", ПоддержаниеЗапасаНаСрокПоНорме, ОформляемыеПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<авторасчет по норме>';uk='<авторозрахунок за нормою>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = ОформитьПоЗначениюПоля("Дерево.СреднедневноеПотребление", 0, "ДеревоНормаПотребления");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<задайте норму потребления>';uk='<задайте норму споживання>'"));
	
	// "Заказ под заказ".
	ЗаказПодЗаказ = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
	Элемент = ОформитьПоЗначениюПоля("Дерево.МетодОбеспеченияПотребностей", ЗаказПодЗаказ, ПоляДереваПоВладельцу("Запасы"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// "Поддержание запаса МинМакс".
	ПоддержаниеЗапасаМинМакс = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс;
	ОформляемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ДеревоСтраховойЗапас,ДеревоНормаПотребления");
	Элемент = ОформитьПоЗначениюПоля("Дерево.МетодОбеспеченияПотребностей", ПоддержаниеЗапасаМинМакс, ОформляемыеПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// "Поддержание запаса по статистике".
	ПоддержаниеЗапасаНаСрокПоСтатистике = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике;
	Элемент = ОформитьПоЗначениюПоля("Дерево.МетодОбеспеченияПотребностей", ПоддержаниеЗапасаНаСрокПоСтатистике, "ДеревоНормаПотребления");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ДеревоМинимальныйЗапас,ДеревоМаксимальныйЗапас");
	Элемент = ОформитьПоЗначениюПоля("Дерево.МетодОбеспеченияПотребностей", ПоддержаниеЗапасаНаСрокПоСтатистике, ОформляемыеПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<авторасчет по статистике>';uk='<авторозрахунок за статистикою>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеСпискаПоМетодуОбеспечения()
	
	// "Поддержание запаса по норме".
	ПоддержаниеЗапасаНаСрокПоНорме = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме;
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.МетодОбеспечения", ПоддержаниеЗапасаНаСрокПоНорме, "ТоварыСтраховойЗапас");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ТоварыМинимальныйЗапас,ТоварыМаксимальныйЗапас");
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.МетодОбеспеченияПотребностей", ПоддержаниеЗапасаНаСрокПоНорме, ОформляемыеПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<авторасчет по норме>';uk='<авторозрахунок за нормою>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.СреднедневноеПотребление", 0, "ТоварыНормаПотребления");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<задайте норму потребления>';uk='<задайте норму споживання>'"));
	
	// "Заказ под заказ".
	ЗаказПодЗаказ = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.МетодОбеспеченияПотребностей", ЗаказПодЗаказ, ПоляСпискаПоВладельцу("Запасы"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// "Поддержание запаса МинМакс".
	ПоддержаниеЗапасаМинМакс = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс;
	ОформляемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ТоварыСтраховойЗапас,ТоварыНормаПотребления");
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.МетодОбеспеченияПотребностей", ПоддержаниеЗапасаМинМакс, ОформляемыеПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// "Поддержание запаса по статистике".
	ПоддержаниеЗапасаНаСрокПоСтатистике = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике;
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.МетодОбеспеченияПотребностей", ПоддержаниеЗапасаНаСрокПоСтатистике, "ТоварыНормаПотребления");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ТоварыМинимальныйЗапас,ТоварыМаксимальныйЗапас");
	Элемент = ОформитьПоЗначениюПоля("Объект.Товары.МетодОбеспеченияПотребностей", ПоддержаниеЗапасаНаСрокПоСтатистике, ОформляемыеПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<авторасчет по статистике>';uk='<авторозрахунок за статистикою>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Функция ОформитьПоЗначениюПоля(ПутьКДанным, Значение, ОформляемыеПоля)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Если ТипЗнч(ОформляемыеПоля) = Тип("Строка") Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемыеПоля);
	Иначе
		Для Каждого Поле Из ОформляемыеПоля Цикл
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЦикла;
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Значение;
	
	Возврат Элемент;
	
КонецФункции

#КонецОбласти

#Область Команды_Группировка_Служебные

&НаКлиенте
Функция СвойстваВыделенныхСтрок()
	
	ОдинФормат       = Истина;
	ОднаКатегория    = Истина;
	ОднаНоменклатура = Истина;
	ОдинСклад        = Истина;
	ЕстьХарактеристики = Ложь;
	
	ФорматСтрок       = Неопределено;
	КатегорияСтрок    = Неопределено;
	НоменклатураСтрок = Неопределено;
	СкладСтрок        = Неопределено;
	
	Для Каждого Идентификатор Из Элементы.Дерево.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Дерево.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаТаблицы.ЭлементГруппа <> 1 Тогда // это элемент
			
			Если Не ЕстьХарактеристики И ЗначениеЗаполнено(СтрокаТаблицы.Характеристика) Тогда
				ЕстьХарактеристики = Истина;
			КонецЕсли;
			
			Если ОдинФормат Тогда
				
				Если ФорматСтрок = Неопределено Тогда
					ФорматСтрок = СтрокаТаблицы.Формат;
				Иначе
					ОдинФормат = ФорматСтрок = СтрокаТаблицы.Формат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОднаКатегория Тогда
				
				Если КатегорияСтрок = Неопределено Тогда
					КатегорияСтрок = СтрокаТаблицы.Категория;
				Иначе
					ОднаКатегория = КатегорияСтрок = СтрокаТаблицы.Категория;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОднаНоменклатура Тогда
				
				Если НоменклатураСтрок = Неопределено Тогда
					НоменклатураСтрок = СтрокаТаблицы.Номенклатура;
				Иначе
					ОднаНоменклатура = НоменклатураСтрок = СтрокаТаблицы.Номенклатура;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОдинСклад Тогда
				
				Если СкладСтрок = Неопределено Тогда
					СкладСтрок = СтрокаТаблицы.Склад;
				Иначе
					ОдинСклад = СкладСтрок = СтрокаТаблицы.Склад;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОдинФормат Тогда
		ФорматСтрок = Неопределено;
	КонецЕсли;
	
	Если Не ОдинСклад Тогда
		СкладСтрок = Неопределено;
	КонецЕсли;
	
	Если Не ОднаНоменклатура Тогда
		НоменклатураСтрок = Неопределено;
	КонецЕсли;
	
	Если Не ОднаКатегория Тогда
		КатегорияСтрок = Неопределено;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура("Формат, Категория, Номенклатура, Склад, ЕстьХарактеристики, ВсегоСтрок",
		ФорматСтрок, КатегорияСтрок, НоменклатураСтрок, СкладСтрок, ЕстьХарактеристики, Элементы.Дерево.ВыделенныеСтроки.Количество());
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяНовойГруппировкиПоУмолчанию(СвойстваВыделенныхСтрок)
	
	Возврат Справочники.ГруппировкиТоварныхОграничений.ИмяНовойГруппировкиПоУмолчанию(СвойстваВыделенныхСтрок);
	
КонецФункции

&НаКлиенте
Процедура СгруппироватьПослеВводаИмени(Наименование, ДополнительныеПараметры) Экспорт
	
	Если Наименование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры.Наименование = Наименование;
	СгруппироватьНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьНаСервере(РеквизитыГруппировки)
	
	Обработки.ПараметрыОбеспеченияПотребностей.Сгруппировать(Объект, ЭтаФорма, РеквизитыГруппировки);
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВГруппуНаСервере(ИмяЭлемента, Группировка)
	
	Обработки.ПараметрыОбеспеченияПотребностей.ПеренестиВГруппу(Объект, ЭтаФорма, Группировка);
	
КонецПроцедуры

&НаСервере
Процедура ИсключитьИзГруппыНаСервере()
	
	Обработки.ПараметрыОбеспеченияПотребностей.ИсключитьИзГруппы(Объект, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Команды_Запасы_Служебные

&НаСервере
Процедура ЗаполнитьМетодОбеспеченияНаСервере(ВыбранноеЗначение)

	ВыбранноеЗначение.Вставить("Действие", "ЗаполнениеМетодаОбеспечения");
	Обработки.ПараметрыОбеспеченияПотребностей.ИзменитьТоварноеОграничение(Объект, ЭтаФорма, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРесурс(Ресурс)
	Перем ЗначениеРесурса;
	
	ЗаголовокОкнаВводаЗначения =
		?(Ресурс = "МинимальноеКоличествоЗапаса",  НСтр("ru='Введите минимальный запас';uk='Введіть мінімальний запас'"),
		?(Ресурс = "МаксимальноеКоличествоЗапаса", НСтр("ru='Введите максимальный запас';uk='Введіть максимальний запас'"),
		?(Ресурс = "СтраховоеКоличествоЗапаса",    НСтр("ru='Введите страховой запас';uk='Введіть страховий запас'"),
		НСтр("ru='Введите норму потребления в день';uk='Введіть норму споживання в день'"))));
	
	ТекстОповещения =
		?(Ресурс = "МинимальноеКоличествоЗапаса",  НСтр("ru='Заполнение минимального запаса';uk='Заповнення мінімального запасу'"),
		?(Ресурс = "МаксимальноеКоличествоЗапаса", НСтр("ru='Заполнение максимального запаса';uk='Заповнення максимального запасу'"),
		?(Ресурс = "СтраховоеКоличествоЗапаса",    НСтр("ru='Заполнение страхового запаса';uk='Заповнення страхового запасу'"),
		НСтр("ru='Заполнение нормы потребления';uk='Заповнення норми споживання'"))));
		
	ТекстСообщенияОбОшибке =
		?(Ресурс = "МинимальноеКоличествоЗапаса", НСтр("ru='Заполнение минимального запаса возможно только в строках 
            |в которых установлен метод обеспечения ""Поддержание запаса (min - max)"".'
            |;uk='Заповнення мінімального запасу можливо тільки в рядках 
            |в яких встановлено метод забезпечення ""Підтримка запасу (min - max)"".'"),
		?(Ресурс = "МаксимальноеКоличествоЗапаса", НСтр("ru='Заполнение максимального запаса возможно только в строках 
            |в которых установлен метод обеспечения ""Поддержание запаса (min - max)"".'
            |;uk='Заповнення максимального запасу можливо тільки в рядках 
            |в яких встановлено метод забезпечення ""Підтримка запасу (min - max)"".'"),
		?(Ресурс = "СтраховоеКоличествоЗапаса", НСтр("ru='Заполнение страхового запаса возможно только в строках 
            |в которых установлен метод обеспечения ""Поддержание запаса (расчет по норме)"", ""Поддержание запаса (расчет по статистике)"".'
            |;uk='Заповнення страхового запасу можливо тільки в рядках 
            |в яких встановлено метод забезпечення ""Підтримка запасу (розрахунок за нормою)"", ""Підтримка запасу (розрахунок за статистикою)"".'"),
		НСтр("ru='Заполнение нормы потребления возможно только в строках 
            |в которых установлен метод обеспечения ""Поддержание запаса (расчет по норме)"".'
            |;uk='Заповнення норми споживання можливо тільки в рядках 
            |в яких встановлено метод забезпечення ""Підтримка запасу (розрахунок по нормі)"".'"))));
	
	ТекстРесурсЗаполнен =
		?(Ресурс = "МинимальноеКоличествоЗапаса",  НСтр("ru='Минимальный запас заполнен.';uk='Мінімальний запас заповнений.'"),
		?(Ресурс = "МаксимальноеКоличествоЗапаса", НСтр("ru='Максимальный запас заполнен.';uk='Максимальний запас заповнений.'"),
		?(Ресурс = "СтраховоеКоличествоЗапаса",    НСтр("ru='Страховой запас заполнен.';uk='Страховий запас заповнений.'"),
		НСтр("ru='Норма потребления заполнена.';uk='Норма споживання заповнена.'"))));
	
	ДополнительныеПараметры = Новый Структура("Ресурс, ТекстОповещения, ТекстРесурсЗаполнен, ТекстСообщенияОбОшибке",
		Ресурс, ТекстОповещения, ТекстРесурсЗаполнен, ТекстСообщенияОбОшибке);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРесурсПослеВводаЗначения", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВводЧисла(ОписаниеОповещения, ЗначениеРесурса, ЗаголовокОкнаВводаЗначения, 15, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРесурсПослеВводаЗначения(Число, ДополнительныеПараметры) Экспорт
	
	Если Число = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ресурс = ДополнительныеПараметры.Ресурс;
	ТекстОповещения = ДополнительныеПараметры.ТекстОповещения;
	ТекстРесурсЗаполнен = ДополнительныеПараметры.ТекстРесурсЗаполнен;
	ТекстСообщенияОбОшибке = ДополнительныеПараметры.ТекстСообщенияОбОшибке;
	
	ПоказатьОповещениеПользователя(ТекстОповещения, , НСтр("ru='Пожалуйста, подождите. Обрабатываются выделенные строки';uk='Будь ласка, зачекайте. Обробляються виділені рядки'"));
	ОбработаноСтрок = ЗаполнитьРесурсНаСервере(Ресурс, Число);
	
	Если ОбработаноСтрок = 0 Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке + НСтр("ru=' Заполнение не произведено';uk=' Заповнення не виконано'"));
	Иначе
		ПоказатьОповещениеПользователя(ТекстОповещения, ,
		ТекстРесурсЗаполнен + НСтр("ru=' Обработка выделенных строк завершена';uk=' Обробка виділених рядків завершена'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРесурсНаСервере(ИмяРесурса, Значение)
	
	ПараметрыДействия = Новый Структура("Действие, ИмяРесурса", "ЗаполнениеРесурса", ИмяРесурса);
	ПараметрыДействия.Вставить(ИмяРесурса, Значение);
	ОбработаноСтрок = Обработки.ПараметрыОбеспеченияПотребностей.ИзменитьТоварноеОграничение(Объект, ЭтаФорма, ПараметрыДействия);
	Возврат ОбработаноСтрок;
	
КонецФункции

#КонецОбласти

#Область Команды_РасчетСтатистики_Служебные

&НаСервере
Процедура ПриОкончанииРедактированияТаблицыНаСервере()
	
	Обработки.ПараметрыОбеспеченияПотребностей.ПриОкончанииРедактированияСтроки(Объект, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтатистикуПотребленияНаСервере()
	
	Обработки.ПараметрыОбеспеченияПотребностей.РассчитатьСтатистикуПотребления(Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтрокиОбработчикОжидания()
	
	СтрокаТовары = Неопределено;
	Если ОтображениеСписка = НСтр("ru='Список';uk='Список'") Тогда
		
		СтрокаТовары = Элементы.Товары.ТекущиеДанные;
		
	Иначе
		
		СтрокаДерева = Элементы.Дерево.ТекущиеДанные;
		Если СтрокаДерева <> Неопределено И СтрокаДерева.ЭлементГруппа = 0 Тогда
			СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаДерева.ИдентификаторСвязи);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаТовары = Неопределено Или СтрокаТовары.ПотреблениеВДеньРассчитано Тогда
		Возврат;
	КонецЕсли;
		
	КлючСтроки = Новый Структура("Склад, Номенклатура, Характеристика");
	ЗаполнитьЗначенияСвойств(КлючСтроки, СтрокаТовары);
	
	РассчитаннаяСтатистика = РассчитатьПотреблениеПоСтроке(КлючСтроки, АдресГрафикаБезКалендаря);
	ЗаполнитьЗначенияСвойств(СтрокаТовары, РассчитаннаяСтатистика);
	ЗаполнитьЗначенияСвойств(Дерево.НайтиПоИдентификатору(СтрокаТовары.ИдентификаторСвязи), РассчитаннаяСтатистика);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьПотреблениеПоСтроке(КлючСтроки, АдресГрафикаБезКалендаря)
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	НоваяСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючСтроки);
	Выборка = Обработки.ПараметрыОбеспеченияПотребностей.СтатистикаПотребления(Таблица, АдресГрафикаБезКалендаря);
	Выборка.Следующий();
	Результат = Новый Структура(
		"СреднедневноеПотреблениеРасчетное, ВариацияПотребления, ПотреблениеСтабильно, ПотреблениеВДеньРассчитано");
	Обработки.ПараметрыОбеспеченияПотребностей.ЗаполнитьСтатистикуПотребления(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Команды_Прочие_Служебные

&НаСервере
Процедура ЗаполнитьСпособОбеспеченияНаСервере(ВыбранноеЗначение)
	
	Обработки.ПараметрыОбеспеченияПотребностей.ЗаполнитьСпособОбеспечения(Объект, ЭтаФорма, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДеревоПредставление Тогда
		
		СтандартнаяОбработка = Ложь;
		СтрокаТовары = Элементы.Дерево.ТекущиеДанные;
		
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", СтрокаТовары.Номенклатура), ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыСКД

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекДляОтборов()
	
	СхемаКомпоновкиДанных = Обработки.ПараметрыОбеспеченияПотребностей.ПолучитьМакет("ОтборНоменклатуры");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроекДляОтборов.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекДляОтборов.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроекДляОтборов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПроизвольныеОтборы(ВыбранноеЗначение)
	
	КомпоновщикНастроекДляОтборов.ЗагрузитьПользовательскиеНастройки(ВыбранноеЗначение.ПользовательскиеНастройки);
	Настройки = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки;
	Обработки.ПараметрыОбеспеченияПотребностей.ПриИзмененииРеквизитовОбъекта(Объект, ЭтаФорма, Истина, Настройки);
	ПроверитьУстановитьДоступностьКомандСпискаТоварыИДерева();
	ПоказаныПервые10000 = Обработки.ПараметрыОбеспеченияПотребностей.ПриИзмененииРеквизитовОбъектаПроверкаРазмерности(Объект, Настройки) > 10000;
	
КонецПроцедуры

Процедура УстановитьОтборИзменениеАссоримента()
	
	Если Источник = "ИзменениеАссортимента" Тогда
		
		Для Каждого Элемент Из КомпоновщикНастроекДляОтборов.Настройки.Отбор.Элементы Цикл
			Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументИзмененияАссортимента") Тогда
				ИдентификаторНастройки = Элемент.ИдентификаторПользовательскойНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НастройкаОтбора = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
		НастройкаОтбора.ПравоеЗначение = Параметры.Отбор.Документ;
		НастройкаОтбора.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУпаковкаЗаказаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные.ЭлементГруппа = 1 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОповещениеОЗакрытииФормыВыбораУпаковкиЗаказа = Новый ОписаниеОповещения("ПриВыбореУпаковкиЗаказа", ЭтаФорма);
		СтрокаГруппы = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
		ЭлементыГруппы = СтрокаГруппы.ПолучитьЭлементы();
		Если ЭлементыГруппы.Количество() > 0 Тогда
			
			ПараметрыФормы = Новый Структура("Номенклатура, ДобавлятьПустуюУпаковку", ЭлементыГруппы[0].Номенклатура, Ложь);
			ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаВыбора",
				ПараметрыФормы,
				ЭтаФорма,
				УникальныйИдентификатор,
				,
				,
				ОповещениеОЗакрытииФормыВыбораУпаковкиЗаказа,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореУпаковкиЗаказа(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	ТекущиеДанные.УпаковкаЗаказа = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти














&НаКлиенте
Перем ЗаписьXML;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	#Если ВебКлиент Тогда
		ВызватьИсключение НСтр("ru='Обработка не предназначена для работы в веб-клиенте.';uk='Обробка не призначена для роботи у веб-клієнті.'");
	#КонецЕсли
	Элементы.ПредупреждениеЗакрытиеМесяца.Видимость = Не ВсеМесяцыЗакрыты();
	Элементы.ПоказатьОтчет.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РабочийКаталог = КаталогВременныхФайлов();
	НачалоРасчета = СебестоимостьМинПериод();
	НачалоРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(НачалоРасчета);
	КонецРасчета = КонецМесяца(ТекущаяДата());
	КонецРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(КонецРасчета);
	
	ИнициализироватьДанные();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Запустить(Команда)
	
	ТекущийМесяц = НачалоРасчета;
	СообщениеОбОшибке = "";
	НачалоЗамера = 0;
	КоличествоРасхождений = 0;
	
	Тестирование();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтчет(Команда)
	ДанныеТестирования = Новый ДвоичныеДанные(ПутьКФайлу);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, УникальныйИдентификатор);
	ПараметрыОтчета = Новый Структура("ПутьКФайлу", АдресХранилища);
	ОткрытьФорму("Отчет.РезультатыТестирования.Форма.ФормаОтчета", ПараметрыОтчета, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловОшибокПриИзменении(Элемент)
	ЗаполнитьПутьКФайлу();
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловОшибокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru='Выберите каталог для сохранения результатов';uk='Виберіть каталог для збереження результатів'");
	Диалог.Каталог = РабочийКаталог;
	Диалог.МножественныйВыбор = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогЗавершение(Каталог, ДополнительныеПараметры) Экспорт
	Если Каталог <> Неопределено Тогда
		РабочийКаталог= Каталог[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловОшибокОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer "+ РабочийКаталог);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗадание(Команда)
	ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
	ЗакрытиеМесяцаУТВызовСервера.ОтменитьВыполнениеЗадания("ЗакрытиеМесяца");
	ОтключитьОбработчикОжидания("ПродолжитьТестирование");
КонецПроцедуры

&НаКлиенте
Процедура НачалоРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("НачалоРасчетаВыборЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, НачалоРасчета, ЭтаФорма, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура КонецРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("КонецРасчетаВыборЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, НачалоРасчета, ЭтаФорма, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура НачалоРасчетаВыборЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	Если ВыбранныйПериод <> Неопределено Тогда
		НачалоРасчета = ВыбранныйПериод;
		НачалоРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ВыбранныйПериод);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонецРасчетаВыборЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	Если ВыбранныйПериод <> Неопределено Тогда
		КонецРасчета = ВыбранныйПериод;
		КонецРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ВыбранныйПериод);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачалоРасчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачалоРасчета = ДобавитьМесяц(НачалоРасчета, Направление);
	НачалоРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(НачалоРасчета);
КонецПроцедуры

&НаКлиенте
Процедура КонецРасчетаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КонецРасчета = ДобавитьМесяц(КонецРасчета, Направление);
	КонецРасчетаСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(КонецРасчета);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетаданныеКТестированию

&НаСервере
Функция КонтрольныеРегистры()
	Возврат Обработки.ТестированиеОперацийЗакрытийМесяца.КонтрольныеРегистры();
КонецФункции

&НаСервере
Функция РегистрыЗаданий()
	Возврат Обработки.ТестированиеОперацийЗакрытийМесяца.РегистрыЗаданий();
КонецФункции

#КонецОбласти // МетаданныеКТестированию

&НаКлиенте
Процедура ИнициализироватьДанные()
	ТекущийМесяц = НачалоРасчета;
	ЗаполнитьПутьКФайлу();
КонецПроцедуры

&НаСервере
Функция СебестоимостьМинПериод()
	Возврат Обработки.ТестированиеОперацийЗакрытийМесяца.СебестоимостьМинПериод();
КонецФункции

&НаСервере
Функция ВсеМесяцыЗакрыты()
	ВсеМесяцыЗакрыты = Истина;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонецРасчета", КонецМесяца(КонецРасчета)+1);
	РегистрыЗаданий = РегистрыЗаданий();
	Для Каждого ИмяРегистра Из РегистрыЗаданий Цикл
		ШаблонЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДД.Месяц
		|ИЗ
		|	ЗаданияКРасчету КАК ДД
		|ГДЕ
		|	ДД.Месяц < &КонецРасчета
		|";
		Запрос.Текст = СтрЗаменить(ШаблонЗапроса, "ЗаданияКРасчету", ИмяРегистра);
		Если Не Запрос.Выполнить().Пустой() Тогда
			ВсеМесяцыЗакрыты = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеМесяцыЗакрыты;
КонецФункции

&НаКлиенте
Процедура Тестирование()
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыЗадания = Новый Структура("СписокОрганизаций, Организация, МассивОпераций, ПериодРегистрации, Период, Тестирование, КонтрольныеРегистры, АдресХранилища");
	ПараметрыЗадания.СписокОрганизаций = Новый СписокЗначений;
	ПараметрыЗадания.Организация = Неопределено;
	ПараметрыЗадания.МассивОпераций = Новый Массив;
	ПараметрыЗадания.ПериодРегистрации = ТекущийМесяц;
	ПараметрыЗадания.Период = ТекущийМесяц;
	ПараметрыЗадания.Тестирование = Истина;
	ПараметрыЗадания.КонтрольныеРегистры = КонтрольныеРегистры();
	ПараметрыЗадания.АдресХранилища = АдресХранилища;
	
	ЗаданиеЗапущено = Ложь;
	
	Если НачалоЗамера = 0 Тогда
		НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	Если ТекущийМесяц <= КонецРасчета Тогда
		РасчетМесяцаНачатВ = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ЗаданиеЗапущено = ЗапуститьТестированиеВФоне(ТекущийМесяц, ПараметрыЗадания);
		Если ЗаданиеЗапущено Тогда
			ИзмененияВИнтерфейсеПриРаботеВФоне(ЗаданиеЗапущено);
			ПодключитьОбработчикОжидания("ПродолжитьТестирование", 15);
		Иначе
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru='Активно задание закрытия месяца. Невозможно запустить тестирование.';uk='Активне завдання закриття місяця. Неможливо запустити тестування.'");
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		ИзмененияВИнтерфейсеПриРаботеВФоне(ЗаданиеЗапущено);
		ЗакончитьЗаписьРасхождений();
		ВывестиСтатистику(НачалоЗамера);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьТестирование()
	Если Не ЗакрытиеМесяцаУТВызовСервера.ФоновоеЗаданиеЗакрытияМесяцаАктивно() Тогда
		ОтключитьОбработчикОжидания("ПродолжитьТестирование");
		
		// разобрать результаты расчета
		КоличествоРасхождений = ЗаписатьРасхожденияВФайл();
		
		ДлительностьМс = ТекущаяУниверсальнаяДатаВМиллисекундах() - РасчетМесяцаНачатВ;
		ВывестиРезультатРасчета(ТекущийМесяц, ДлительностьМс, КоличествоРасхождений);
		
		Если НЕ (КоличествоРасхождений > 0 И ОстанавливатьсяПриРасхождениях) Тогда
			// переход к следующему месяцу
			ТекущийМесяц = КонецМесяца(ТекущийМесяц) + 1;
			
			Тестирование();
		Иначе
			ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
			ЗакончитьЗаписьРасхождений();
			ЗаписьXML = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьЗапись()
	ЗаполнитьПутьКФайлу();
		
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Корневой");
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьЗаписьРасхождений()
	Если ЗаписьXML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Корневой
	ЗаписьXML.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияВИнтерфейсеПриРаботеВФоне(ФоновоеЗаданиеЗапущено = Ложь)
	Элементы.ФормаЗапустить.Доступность = Не ФоновоеЗаданиеЗапущено;
	Элементы.ФормаЗакрыть.Доступность = Не ФоновоеЗаданиеЗапущено;
	Если ФоновоеЗаданиеЗапущено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаФоновоеЗадание;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПараметры;
	КонецЕсли;
	Шаблон = НСтр("ru='Выполняется закрытие месяца: %МесяцГод% г...';uk='Виконується закриття місяця: %МесяцГод% р...'");
	Элементы.ЗаголовокРасчетаВФоне.Заголовок = СтрЗаменить(Шаблон, "%МесяцГод%", Формат(ТекущийМесяц, "ДФ='ММММ гггг'"));
	Элементы.ПоказатьОтчет.Доступность = Не ФоновоеЗаданиеЗапущено;
	Если Не Элементы.ПоказатьОтчет.Видимость Тогда
		Элементы.ПоказатьОтчет.Видимость = КоличествоРасхождений > 0;
	КонецЕсли;
	Элементы.ПредупреждениеЗакрытиеМесяца.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьРасхожденияВФайл()
	Расхождения = Неопределено;
	КоличествоРасхождений = 0;

	РезультатРасчета = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если РезультатРасчета = Неопределено Тогда
		Расхождения = Неопределено;
	Иначе
		РезультатРасчета.Свойство("Расхождения", Расхождения);
	КонецЕсли;
	Если ЗначениеЗаполнено(Расхождения) Тогда
		Если ЗаписьXML = Неопределено Тогда // инициализируем
			ИнициализироватьЗапись();
		КонецЕсли;
		Если Расхождения.Получить("КоличествоРасхождений") <> Неопределено Тогда
			КоличествоРасхождений = Расхождения["КоличествоРасхождений"];
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Период");
		СтрокаXML = ЗначениеВСтрокуXML(ТекущийМесяц);
		ЗаписьXML.ЗаписатьТекст(СтрокаXML);

		Для Каждого Строка Из Расхождения Цикл
			
			Если Строка.Ключ = "КоличествоРасхождений" Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			СтрокаXML = ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
			ЗаписьXML.ЗаписатьТекст(СтрокаXML);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Записи");
			ЗаписьXML.ЗаписатьТекст(Строка.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // записи

			ЗаписьXML.ЗаписатьКонецЭлемента(); // имя регистра
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента(); // Период

	КонецЕсли;
	Возврат КоличествоРасхождений;
КонецФункции

&НаКлиенте
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	#Если НЕ ВебКлиент Тогда
	ЗначениеXML = Новый ЗаписьXML;
	ЗначениеXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗначениеXML, Значение, НазначениеТипаXML.Явное);
	Возврат ЗначениеXML.Закрыть();
	#Иначе
	Возврат Неопределено;
	#КонецЕсли
КонецФункции

&НаСервере
Функция ЗапуститьТестированиеВФоне(Период, ПараметрыЗадания)
	ЗаданиеЗапущено = Ложь;
	ЗаданиеЗапущено = Обработки.ТестированиеОперацийЗакрытийМесяца.ЗапуститьТестированиеВФоне(ПараметрыЗадания);
	Возврат ЗаданиеЗапущено;
КонецФункции

&НаКлиенте
Процедура ВывестиРезультатРасчета(Период, ДлительностьМс, КоличествоРасхождений)
	
	Если АвтоТест Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЛогФайла = "";
	СтрокаЛогФайла = СтрокаЛогФайла + НСтр("ru='Выполнен расчет месяца %Период% за %Длительность%';uk='Виконаний розрахунок місяці %Период% за %Длительность%'");
	СтрокаЛогФайла = СтрЗаменить(СтрокаЛогФайла, "%Период%", Формат(Период, "ДФ='ММММ гггг'"));
	СтрокаЛогФайла = СтрЗаменить(СтрокаЛогФайла, "%Длительность%", ПеревестиМиллисекундыВДеньЧасМинутаСекунда(ДлительностьМс));
	
	Если КоличествоРасхождений > 0 Тогда
		СтрокаЛогФайла = СтрокаЛогФайла + "
		|" + НСтр("ru='Выявлено %КоличествоРасхождений%.';uk='Виявлено %КоличествоРасхождений%.'");
		СтрокаЛогФайла = СтрЗаменить(СтрокаЛогФайла, "%КоличествоРасхождений%", ЧислоРасхожденийПрописью(КоличествоРасхождений));
	Иначе
		СтрокаЛогФайла = СтрокаЛогФайла + "
		|" + НСтр("ru='Расхождений нет.';uk='Розбіжностей немає.'");
	КонецЕсли;
	СтрокаЛогФайла = СтрокаЛогФайла + "
	|";
	СообщениеОбОшибке.ДобавитьСтроку(СтрокаЛогФайла);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСтатистику(НачалоЗамера)
	Если АвтоТест Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЛогФайла = "";
	ДлительностьМс = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	СтрокаЛогФайла = СтрокаЛогФайла + "
	|===================================================
	|" + НСтр("ru='Тестирование выполнено за %Количество%';uk='Тестування виконано за %Количество%'");
	СтрокаЛогФайла = СтрЗаменить(СтрокаЛогФайла, "%Количество%", ПеревестиМиллисекундыВДеньЧасМинутаСекунда(ДлительностьМс));
	СообщениеОбОшибке.ДобавитьСтроку(СтрокаЛогФайла);
	
КонецПроцедуры

&НаКлиенте
Функция ПеревестиМиллисекундыВДеньЧасМинутаСекунда(Знач Миллисекунды)
	Результат = "";
	Часы = 0;
	Минуты = 0;
	
	Секунды = Окр(Миллисекунды / 1000, 0, РежимОкругления.Окр15как10);
	Если Секунды >= 60 Тогда
		Минуты = Окр(Секунды / 60, 0, РежимОкругления.Окр15как10);
		Секунды = Секунды - Минуты * 60;
		Результат = "" + Секунды + " "+ НСтр("ru='с.';uk='с.'");
		Если Минуты >= 60 Тогда
			Часы = Окр(Минуты / 60, 0, РежимОкругления.Окр15как10);
			Минуты = Минуты - Часы * 60;
		КонецЕсли;
		Результат = "" + Минуты + " "+ НСтр("ru='мин.';uk='хв.'") + " " + Результат;
		Если Часы > 0 Тогда
			 Результат = "" + Часы + " "+ НСтр("ru='час.';uk='година.'") + " " + Результат;
		КонецЕсли;
	ИначеЕсли Секунды < 1 Тогда
		Результат = "" + 1 + " "+ НСтр("ru='с.';uk='с.'");
	Иначе 
		Результат = "" + Секунды + " "+ НСтр("ru='с.';uk='с.'");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЧислоРасхожденийПрописью(КоличествоРасхождений)
	
	КоличествоПрописью = ЧислоПрописью(
		КоличествоРасхождений,
		"Л = ru_RU; НП = Истина; НД = Ложь; ДП = Ложь;",
		НСтр("ru='расхождение,расхождения,расхождений,с,,,,,0';uk='розбіжність,розбіжності,розбіжностей,ж,,,,,0'"));
	Поз = Найти(КоличествоПрописью, "расхождени");
	Если Поз <> 0 Тогда
		КоличествоПрописью = Сред(КоличествоПрописью, Поз);
	КонецЕсли;
	КоличествоПрописью = Строка(КоличествоРасхождений) + " " + НРег(КоличествоПрописью);
	
	Возврат КоличествоПрописью;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПутьКФайлу()
	ПутьКФайлу = "" + РабочийКаталог + Формат(ТекущаяДата(), "ДФ=dd-MM-yyyy") + ".xml";
КонецПроцедуры

#КонецОбласти

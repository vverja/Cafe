
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Объект.ПериодЗаказа.Вариант = ВариантСтандартногоПериода.ЭтаНеделя;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	ИнициализироватьКомпоновщикНастроек();
	Параметры.ИспользуемыеЗначенияРеквизитов = Новый Структура("Сценарий, ПериодЗаказа, ПериодПоступления, Подразделение");
	ЗаполнитьЗначенияСвойств(Параметры.ИспользуемыеЗначенияРеквизитов, Объект);
	
	ОтображатьЗаказыКОформлению = Истина;
	
	ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки = ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки");
	РазбиватьЗаказыПоСкладам = НЕ ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки;
	
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Подразделение", Объект.Подразделение);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Сценарий", Объект.Сценарий);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодПоступления", Объект.ПериодПоступления, ЗначениеЗаполнено(Объект.ПериодПоступления));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодЗаказа", Объект.ПериодЗаказа);
	
	ВосстановитьНастройки();
	
	УстановитьВидимостьЭлементовФормы();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки Тогда
	
		РазбиватьЗаказыПоСкладам = Настройки.Получить("РазбиватьЗаказыПоСкладам");
	
	Иначе
	
		РазбиватьЗаказыПоСкладам = Ложь;
		Настройки.Вставить("РазбиватьЗаказыПоСкладам", Ложь);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ИспользоватьЗаказыПоставщикам Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Для формирования заказов необходимо включить настройку ""Заказы поставщикам"" в ""Администрирование -> Запасы и закупки""';uk='Для формування замовлень необхідно включити настройку ""Замовлення постачальникам"" в ""Адміністрування -> Запаси і купівлі""'"));
		Отказ = Истина;
		Возврат;
	
	КонецЕсли; 
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда
		
		Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
		
		ОтборПодразделения = ЗначениеЗаполнено(Объект.Подразделение);
		
	Иначе
		
		Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
	
	КонецЕсли; 
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки()

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия", ИмяСобытия)), НСтр("ru='Заказы поставщику были изменены. Хотите обновить данные?';uk='Замовлення постачальнику були змінені. Хочете оновити дані?'"), РежимДиалогаВопрос.ДаНет,,,
		НСтр("ru='Формирование заказов поставщику по плану';uk='Формування замовлень постачальнику за планом'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
    
    
    Если ИмяСобытия = "Запись_ЗаказПоставщику" И Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2
        И РезультатВопроса = КодВозвратаДиалога.Да  Тогда
        
        ОбновитьНаСервере();
        ЗаполнитьРасчетныеКолонки();
        
    ИначеЕсли ИмяСобытия = "УстановленОтбор_ФормированиеЗаказовПоставщикуПоПлану" Тогда
        
        ОбновитьНаСервере();
        ЗаполнитьРасчетныеКолонки();
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоПростыеОтборы = Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1 
		И ЭтоПростыеОтборы
		И ОтборПодразделения = 1 
		И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Подразделение"" не заполнено';uk='Полі ""Підрозділ"" не заповнено'"),
			,
			"Объект.Подразделение",
			, 
			Отказ);
		
	КонецЕсли; 
	
	Если ЭтоПростыеОтборы 
		И ЗначениеЗаполнено(Объект.ПериодЗаказа.ДатаОкончания) 
		И Объект.ПериодЗаказа.ДатаОкончания < Объект.ПериодЗаказа.ДатаНачала Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Окончание периода заказа должно быть больше начала периода.';uk='Закінчення періоду замовлення повинно бути більше початку періоду.'"),
			,
			"Объект.ПериодЗаказа",
			, 
			Отказ);
		
	КонецЕсли; 
	
	Если ЭтоПростыеОтборы 
		И ЗначениеЗаполнено(Объект.ПериодПоступления.ДатаОкончания) 
		И Объект.ПериодПоступления.ДатаОкончания < Объект.ПериодПоступления.ДатаНачала Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Окончание периода поступления должно быть больше начала периода.';uk='Закінчення періоду надходження повинно бути більше початку періоду.'"),
			,
			"Объект.ПериодПоступления",
			, 
			Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступления.ДатаНачала, Объект.ПериодПоступления.ДатаОкончания);
	ЗаполнитьЗначенияСвойств(Объект.ПериодПоступления, ГраницыПериода);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Сценарий", Объект.Сценарий);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодПоступления", Объект.ПериодПоступления, ЗначениеЗаполнено(Объект.ПериодПоступления));
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделенияПриИзменении(Элемент)
	
	Если ОтборПодразделения = 0 Тогда
		Объект.Подразделение = Неопределено;
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Подразделение", Объект.Подразделение);
	КонецЕсли; 
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоступленияПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступления.ДатаНачала, Объект.ПериодПоступления.ДатаОкончания);
	ЗаполнитьЗначенияСвойств(Объект.ПериодПоступления, ГраницыПериода);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодПоступления", Объект.ПериодПоступления, ЗначениеЗаполнено(Объект.ПериодПоступления));
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаказаПриИзменении(Элемент)
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодЗаказа", Объект.ПериодЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(Объект.Склад);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Склад", Объект.Склад, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(Объект.Партнер);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Поставщик", Объект.Партнер, ЭтоОтборПоГруппе);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Соглашение", Объект.Соглашение, Ложь);
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Элементы.Соглашение.Доступность = Истина;
	Иначе
		Элементы.Соглашение.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Соглашение", Объект.Соглашение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(Объект.Номенклатура);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "Номенклатура", Объект.Номенклатура, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(Объект.СегментНоменклатуры);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, "СегментНоменклатуры", Объект.СегментНоменклатуры, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Подразделение", Объект.Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	НастройкаСценарий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Сценарий");
	НастройкаПериодПоступления = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "ПериодПоступления");
	
	Если НастройкаСценарий <> Неопределено и НастройкаПериодПоступления <> Неопределено Тогда
		ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(НастройкаСценарий.Значение, НастройкаПериодПоступления.Значение.ДатаНачала, НастройкаПериодПоступления.Значение.ДатаОкончания);
		ЗаполнитьЗначенияСвойств(НастройкаПериодПоступления.Значение, ГраницыПериода);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизвольныеОтборыНажатие(Элемент)
	
	Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПростыеОтборыНажатие(Элемент)
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда
		
		Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Элементы.Соглашение.Доступность = Истина;
		Иначе
			Элементы.Соглашение.Доступность = Ложь;
		КонецЕсли;
		
		ОтборПодразделения = ЗначениеЗаполнено(Объект.Подразделение);
		Элементы.Подразделение.Доступность = ОтборПодразделения = 1;
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Установлены сложные отборы, вариант использования простых отборов недоступен.';uk='Встановлені складні відбори, варіант використання простих відборів недоступний.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("НачалоПериода", 	ТекСтрока.НачалоПериодаПоступления);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ДатаПоступления));
	
	КлючСтроки.Вставить("Подразделение", 	Параметры.ИспользуемыеЗначенияРеквизитов.Подразделение);
	КлючСтроки.Вставить("Сценарий", 		Параметры.ИспользуемыеЗначенияРеквизитов.Сценарий);
	
	СписокДокументов = ПолучитьСписокПлановПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаПланаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ';uk='Виберіть документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура",             ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика",           ТекСтрока.Характеристика);
	КлючСтроки.Вставить("НачалоПериодаПоступления", ТекСтрока.НачалоПериодаПоступления);
	КлючСтроки.Вставить("ДатаПоступления",          КонецДня(ТекСтрока.ДатаПоступления));
	
	КлючСтроки.Вставить("Подразделение",            Параметры.ИспользуемыеЗначенияРеквизитов.Подразделение);
	КлючСтроки.Вставить("Партнер",                  ТекСтрока.Партнер);
	КлючСтроки.Вставить("Соглашение",               ТекСтрока.Соглашение);
	КлючСтроки.Вставить("Склад",                    ТекСтрока.Склад);
	
	СписокДокументов = ПолучитьСписокЗаказовПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаЗаказаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ';uk='Виберіть документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(ТекущаяСтрока));
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовОтметитьКЗаказуПриИзменении(Элемент)
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.ОбщийВес = ТекущаяСтрока.Вес * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() =0 Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Попытка	
		ОтметитьКЗаказу = ПараметрыПеретаскивания.Значение[0].ОтметитьКЗаказу;
	Исключение
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПартнерПриИзменении(Элемент)
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовСоглашениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	ТекущаяСтрока.Валюта = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Соглашение, "Валюта");
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(ТекущаяСтрока));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовВидЦеныПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(ТекущаяСтрока));
			
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовСкладПриИзменении(Элемент)
	
	Если РазбиватьЗаказыПоСкладам Тогда
	
		ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовДатаЗаказаПриИзменении(Элемент)
	
	Если РазбиватьЗаказыПоДатамЗаказа Тогда
	
		ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	Если Строка <> Неопределено И (Поле.Имя = "КорзинаЗаказовПартнер" ИЛИ Поле.Имя = "КорзинаЗаказовСоглашение" ИЛИ Поле.Имя = "КорзинаЗаказовДатаПоставки" ИЛИ Поле.Имя = "КорзинаЗаказовСклад") Тогда
		СтрокаКорзины = КорзинаЗаказов.НайтиПоИдентификатору(Строка);
		Если Поле.Имя = "КорзинаЗаказовПартнер" Тогда
			ИменаПолей = "Партнер";
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Назначить для выделенного товара поставщика: %1?';uk='Призначити для виділеного товару постачальника: %1?'"), СтрокаКорзины.Партнер);
		ИначеЕсли Поле.Имя = "КорзинаЗаказовСоглашение" Тогда
			ИменаПолей = "Соглашение, Партнер, Валюта";
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Назначить для выделенного товара поставщика: %1
                |и соглашение: %2?'
                |;uk='Призначити для виділеного товару постачальника: %1
                |і оферта: %2?'"),СтрокаКорзины.Партнер, СтрокаКорзины.Соглашение);
		ИначеЕсли Поле.Имя = "КорзинаЗаказовДатаПоставки" ИЛИ Поле.Имя = "КорзинаЗаказовСклад" Тогда
			ИменаПолей = "Склад";
			ТекстВопроса =СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Назначить для выделенного товара склад: %1?';uk='Призначити для виділеного товару склад: %1?'"),СтрокаКорзины.Склад);
		Иначе
			ИменаПолей= "";
			ТекстВопроса = "";
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ИменаПолей) Тогда 
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Назначить';uk='Призначити'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не назначать';uk='Не призначати'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("ИменаПолей", ИменаПолей);
			ДополнительныеПараметры.Вставить("СтрокаКорзины", СтрокаКорзины);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("КорзинаЗаказовПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.ОтметитьКЗаказу = Истина;
	КонецЦикла; 
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПеретаскиваниеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыПеретаскивания = ДополнительныеПараметры.ПараметрыПеретаскивания;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		ИменаПолей = ДополнительныеПараметры.ИменаПолей;
		СтрокаКорзины = ДополнительныеПараметры.СтрокаКорзины;
		
		ПартнерИзменен = Ложь;
		СоглашениеИзменено = Ложь;
		СоглашенияПустые = Ложь;
		
		Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
			СтароеСоглашение = СтрокаТЧ.Соглашение;
			СтароеСтарый = СтрокаТЧ.Партнер;
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаКорзины, ИменаПолей);
			
			Если СтрокаТЧ.Партнер <> СтароеСтарый Тогда
				ПартнерИзменен = Истина;
			КонецЕсли;
			Если СтрокаТЧ.Соглашение <> СтароеСоглашение Тогда
				СоглашениеИзменено = Истина;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Соглашение) Тогда
				СоглашенияПустые = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПартнерИзменен ИЛИ СоглашениеИзменено ИЛИ СоглашенияПустые Тогда
			ЗаказОбъект = Новый Структура("Партнер, Соглашение, Валюта, Склад, ДатаПоступления, ДатаЗаказа, ВидЦеныПоставщика");
			ЗаполнитьЗначенияСвойств(ЗаказОбъект, Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]));
			ЗаказОбъект.Вставить("Дата", ТекущаяДата());
			ЗаказОбъект.Вставить("ЦенаВключаетНДС", Истина);
			
			ЦеныРассчитаны = ПриИзменененииСоглашенияНаСервере(ЗаказОбъект, ПартнерИзменен ИЛИ СоглашенияПустые);
			ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл
		СтрокаТЧ.ОтметитьКЗаказу = Истина;
	КонецЦикла; 
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗаказовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() =0 Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Попытка	
		ОтметитьКЗаказу = ПараметрыПеретаскивания.Значение[0].ОтметитьКЗаказу;
	Исключение
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоммндФормы

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ФормированиеЗаказовПоставщикуПоПлану.Форма.Команда.Далее");
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		
		Если ОтразитьОтборКомпоновкиВПростыхОтборах() И НЕ ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Объект.ФормированиеЗаказов.Очистить();
		ОбновитьНаСервере();
		Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Нет утвержденного плана закупок для сценария %1, соответствующего установленным отборам. Необходимо изменить отборы.';uk='Немає затвердженого плану купівель для сценарію %1, який відповідає встановленим відборам. Необхідно змінити відбори.'"),
				Объект.Сценарий);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьРасчетныеКолонки();
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда 
		
		ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма, Истина);
		
		Если КорзинаЗаказов.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Нет заказов к оформлению. Отметьте флажком количество в колонке 
                |<К заказу> для номенклатуры которую необходимо заказать.'
                |;uk='Немає замовлень до оформлення. Відзначте прапорцем кількість в колонці 
                |<До замовлення> для номенклатури яку необхідно замовити.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		ОчиститьСообщения();
		СоздатьЗаказыНаСервере();
		
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Ссылка",
			СформированныеЗаказы,
			ВидСравненияКомпоновкиДанных.ВСписке,
			НСтр("ru='Сформированные заказы';uk='Сформовані замовлення'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг3;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Если СформированныеЗаказы.Количество() > 0 Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить заказы';uk='Вилучити замовлення'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос
				(Новый ОписаниеОповещения("НазадЗавершение", ЭтотОбъект), 
				НСтр("ru='Список созданных заказов не пуст. Созданные заказы будут удалены. Удалить заказы и продолжить?';uk='Список створених замовлень не порожній. Створені замовлення будуть видалені. Видалити замовлення та продовжити?'"),
				Кнопки);
			Возврат;
		КонецЕсли;
		
		ОчиститьСообщения();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		КорзинаЗаказов.Очистить();
		Объект.ФормированиеЗаказов.Очистить();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаказыНаСервере(СформированныеЗаказы.ВыгрузитьЗначения());
	СформированныеЗаказы.Очистить();
	
	ОчиститьСообщения();
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
	
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
		
	Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр("ru='В таблице имеются строки. При обновлении данных из планов строки будут очищены. Продолжить?';uk='В таблиці є рядки. При відновленні даних з планів рядки будуть очищені. Продовжити?'"), Режим, 0);
        Возврат;
	КонецЕсли;
	ЗаполнитьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
    
    Перем ТекстОшибки;
    
    Объект.ФормированиеЗаказов.Очистить();
    ОбновитьНаСервере();
    Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
        ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru='Нет утвержденного плана для сценария %1, соответствующего установленным отборам.';uk='Немає затвердженого плану для сценарію %1, який відповідає встановленим відборам.'"),
        Объект.Сценарий);
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
    КонецЕсли;
    
    ЗаполнитьРасчетныеКолонки();

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗаказыКОформлению(Команда)
	
	ОтображатьЗаказыКОформлению = не ОтображатьЗаказыКОформлению;
	УстановитьВидимостьЭлементовФормы();
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаказов(Команда)
	
	ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаСпискаДокументов"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеЗаказов(Команда)
	
	КорзинаЗаказов.Очистить();
	
	Объект.ФормированиеЗаказов.Очистить();
	СформированныеЗаказы.Очистить();
	
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
	УстановитьЗаголовокФормы(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщика(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Поставщик", Истина);
	СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]);
	Партнер = Неопределено;

	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", Новый Структура("Ключ, Отбор", СтрокаТаблицы.Партнер, Отбор),,,,, Новый ОписаниеОповещения("ЗаполнитьПоставщикаЗавершение", ЭтотОбъект, Новый Структура("СтрокаТаблицы", СтрокаТаблицы)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
    
    Партнер = Результат;
    
    Если НЕ ЗначениеЗаполнено(Партнер) Тогда
        Возврат;
    КонецЕсли; 
    
    Если СтрокаТаблицы.Партнер <> Партнер Тогда
        Соглашение = Неопределено;
    Иначе 
        Соглашение = СтрокаТаблицы.Соглашение;
    КонецЕсли;
    ПартнерИзменен     = Ложь;
    СоглашениеИзменено = Ложь;
    СоглашенияПустые   = Ложь;
    
    Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
        
        СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
        СтароеСоглашение = СтрокаТаблицы.Соглашение;
        
        Если СтрокаТаблицы.Партнер <> Партнер Тогда
            СтрокаТаблицы.Соглашение        = Неопределено;
            СтрокаТаблицы.ВидЦеныПоставщика = Неопределено;
            ПартнерИзменен = Истина;
        КонецЕсли;
        СтрокаТаблицы.Партнер = Партнер;
        Если ЗначениеЗаполнено(Соглашение) Тогда
            СтрокаТаблицы.Соглашение = Соглашение;
        КонецЕсли;
        Если СтрокаТаблицы.Соглашение <> СтароеСоглашение Тогда
            СоглашениеИзменено = Истина;
        КонецЕсли; 
        Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Соглашение) Тогда
            СоглашенияПустые = Истина;
        КонецЕсли; 
        
    КонецЦикла;
    
    Если ПартнерИзменен ИЛИ СоглашениеИзменено ИЛИ СоглашенияПустые Тогда
        ЗаказОбъект = Новый Структура("Партнер, Соглашение, Валюта, Склад, ДатаПоступления, ДатаЗаказа, ВидЦеныПоставщика");
        ЗаполнитьЗначенияСвойств(ЗаказОбъект, Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]));
        ЗаказОбъект.Вставить("Дата", ТекущаяДата());
        ЗаказОбъект.Вставить("ЦенаВключаетНДС", Истина);
        
        ЦеныРассчитаны = ПриИзменененииСоглашенияНаСервере(ЗаказОбъект, ПартнерИзменен ИЛИ СоглашенияПустые);
        ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
        
    Иначе
        ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦеныПоставщика(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказОбъект = Новый Структура("Партнер, Соглашение, Валюта, Склад, ДатаПоступления, ДатаЗаказа, ВидЦеныПоставщика");
	ЗаполнитьЗначенияСвойств(ЗаказОбъект, Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]));
	
	ЗаказОбъект.Вставить("ВыделенныеСтроки", Элементы.ФормированиеЗаказов.ВыделенныеСтроки);
	ЗаказОбъект.Вставить("Дата", ТекущаяДата());
	
	Если ЗакупкиКлиент.НеобходимоЗаполнениеЦенПоВидуЦенПоставщика(ЗаказОбъект, "ВыделенныеСтроки", НСтр("ru='выделенных строк';uk='виділених рядків'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗаказОбъект", ЗаказОбъект);
		ЗакупкиКлиент.ВыбратьВидЦеныПоставщика(
			Новый ОписаниеОповещения("ЗаполнитьЦеныПоВидуЦеныПоставщикаВыборВидЦеныПоставщикаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ЗаказОбъект.Партнер);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦеныПоставщикаВыборВидЦеныПоставщикаЗавершение(ВидЦеныПоставщика, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦеныПоставщика) Тогда
		
		Для Каждого Строка Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
			СтрокаЗаказа = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Строка);
			СтрокаЗаказа.Партнер = ДополнительныеПараметры.ЗаказОбъект.Партнер;
			СтрокаЗаказа.Соглашение = ДополнительныеПараметры.ЗаказОбъект.Соглашение;
		КонецЦикла;
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦеныПоставщикаСервер(ДополнительныеПараметры.ЗаказОбъект, ВидЦеныПоставщика);
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦеныПоставщика(ЦеныРассчитаны, ВидЦеныПоставщика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьЗаказыПоДатамЗаказа(Команда)
	
	РазбиватьЗаказыПоДатамЗаказа = НЕ РазбиватьЗаказыПоДатамЗаказа;
	Элементы.ФормаРазбиватьЗаказыПоДатамЗаказа.Пометка = РазбиватьЗаказыПоДатамЗаказа;
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьЗаказыПоДатамПоставки(Команда)
	
	РазбиватьЗаказыПоДатамПоставки = НЕ РазбиватьЗаказыПоДатамПоставки;
	Элементы.ФормаРазбиватьЗаказыПоДатамПоставки.Пометка = РазбиватьЗаказыПоДатамПоставки;
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьЗаказыПоСкладам(Команда)
	
	РазбиватьЗаказыПоСкладам = НЕ РазбиватьЗаказыПоСкладам;
	Элементы.ФормаРазбиватьЗаказыПоСкладам.Пометка = РазбиватьЗаказыПоСкладам;
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСклад(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ФормированиеЗаказов.ВыделенныеСтроки;
	
	СтруктураОтбора = Новый Структура("ЭтоГруппа", Ложь);
	СтруктураПараметров = Новый Структура("Отбор, ВыборГруппИЭлементов", СтруктураОтбора, ИспользованиеГруппИЭлементов.Элементы);
	ВыбранныйСклад = Неопределено;

	ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад = Результат;
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоглашение(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ФормированиеЗаказов.ВыделенныеСтроки;
	
	ПерваяСтрока = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	Партнер = ПерваяСтрока.Партнер;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		СтруктураОтбора = Новый Структура("Поставщик", Истина);
		СтруктураПараметров = Новый Структура("Отбор", СтруктураОтбора);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСоглашениеПослеВыбора", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ПерваяСтрока, СтруктураПараметров", ВыделенныеСтроки, ПерваяСтрока, СтруктураПараметров)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
	КонецЕсли; 
	ЗаполнитьСоглашениеФрагмент(ВыделенныеСтроки, Партнер, ПерваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоглашениеПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ПерваяСтрока = ДополнительныеПараметры.ПерваяСтрока;
    СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
    
    
    Партнер = Результат;
    
    ЗаполнитьСоглашениеФрагмент(ВыделенныеСтроки, Партнер, ПерваяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоглашениеФрагмент(Знач ВыделенныеСтроки, Знач Партнер, Знач ПерваяСтрока)
    
    Перем ИзмененоСоглашение, Соглашение, СтруктураОтбора, СтруктураПараметров;
    
    Если НЕ ЗначениеЗаполнено(Партнер) Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран поставщик.';uk='Не обраний постачальник.'"),,ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ФормированиеЗаказов",ПерваяСтрока.НомерСтроки, "Партнер"),"Объект");
        Возврат;
    КонецЕсли; 
    
    ИзмененоСоглашение = Ложь;
    
    СтруктураОтбора = Новый Структура("Партнер", Партнер);
    СтруктураПараметров = Новый Структура("Отбор, ДоступноДляЗакупки", СтруктураОтбора, Истина);
    Соглашение = Неопределено;
    
    ОткрытьФорму("Справочник.СоглашенияСПоставщиками.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСоглашениеЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, Партнер", ВыделенныеСтроки, Партнер)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоглашениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    Партнер = ДополнительныеПараметры.Партнер;
    
    
    Соглашение = Результат;
    Если ЗначениеЗаполнено(Соглашение) Тогда
        
        ИзмененоСоглашение = Ложь;
        
        Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл		
            СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ТекСтрока);
            Если СтрокаТаблицы.Соглашение <> Соглашение Тогда
                ИзмененоСоглашение = Истина;
            КонецЕсли; 
            СтрокаТаблицы.Партнер = Партнер;
            СтрокаТаблицы.Соглашение = Соглашение;
        КонецЦикла; 
        
        Если ИзмененоСоглашение Тогда
            ЗаказОбъект = Новый Структура("Партнер, Соглашение, Валюта, Склад, ДатаПоступления, ДатаЗаказа, ВидЦеныПоставщика");
            ЗаполнитьЗначенияСвойств(ЗаказОбъект, Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Элементы.ФормированиеЗаказов.ВыделенныеСтроки[0]));
            ЗаказОбъект.Вставить("Дата", ТекущаяДата());
            ЗаказОбъект.Вставить("ЦенаВключаетНДС", Истина);
            
            ЦеныРассчитаны = ПриИзменененииСоглашенияНаСервере(ЗаказОбъект, ИзмененоСоглашение);
            ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
            
        Иначе
            ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
        КонецЕсли; 
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//


КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.ФормаОтображатьЗаказыКОформлению.Пометка = ОтображатьЗаказыКОформлению;
	Элементы.ГруппаЗаказыКОформлению.Видимость        = ОтображатьЗаказыКОформлению;
	
	Элементы.ФормаРазбиватьЗаказыПоДатамЗаказа.Пометка   = РазбиватьЗаказыПоДатамЗаказа;
	Элементы.ФормаРазбиватьЗаказыПоДатамПоставки.Пометка = РазбиватьЗаказыПоДатамПоставки;
	Элементы.ФормаРазбиватьЗаказыПоСкладам.Пометка       = РазбиватьЗаказыПоСкладам;
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанели(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
				
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг1;
		Элементы.ДалееШаг1.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг2;
		Элементы.ДалееШаг2.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг3;
		Элементы.ЗавершитьФормированиеЗаказовШаг3.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы(Страница)
	
	Если Страница = Элементы.СтраницаШаг1 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru='Шаг 1 из 3. Отбор планов';uk='Крок 1 з 3. Відбір планів'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru='Шаг 2 из 3. Определение состава и объема заказа';uk='Крок 2 з 3. Визначення складу та обсягу замовлення'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.ПодЗаголовок.Заголовок = НСтр("ru='Шаг 3 из 3. Уточнение сформированных заказов';uk='Крок 3 з 3. Уточнення сформованих замовлень'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.Соглашение.Доступность = ЗначениеЗаполнено(Объект.Партнер);
	
	Элементы.Подразделение.Доступность = ОтборПодразделения = 1;
	
	Элементы.ПериодПоступления.Доступность = ЗначениеЗаполнено(Объект.Сценарий);

КонецПроцедуры 

&НаСервереБезКонтекста
Функция УстановитьНачалоОкончаниеПериодаПлана(Знач Сценарий, Знач ДатаНачала, Знач ДатаОкончания)

	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
	
	НоваяДатаНачала = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(ДатаНачала, Периодичность);
	НоваяДатаОкончания = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ДатаОкончания, Периодичность);
	
	Если Не ЗначениеЗаполнено(НоваяДатаНачала) Тогда
		НоваяДатаНачала = Дата("00010101");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоваяДатаОкончания) Тогда
		НоваяДатаОкончания = Дата("00010101");
	КонецЕсли;
	
	ГраницыПериода = Новый Структура();
	ГраницыПериода.Вставить("ДатаНачала", ?(ЗначениеЗаполнено(ДатаНачала), НоваяДатаНачала, ДатаНачала));
	ГраницыПериода.Вставить("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), НоваяДатаОкончания, ДатаОкончания));
	
	Возврат ГраницыПериода;
	
КонецФункции

// Процедура обновления корзины заказов по отмеченным строкам
//
// Параметры
//  <КорзинаЗаказов>  - <ТаблицаЗначений> - <описание параметра>
//                 <продолжение описания параметра>
//  <ФормированиеЗаказов>  - <ТабличнаяЧасть> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКорзинуЗаказов(КорзинаЗаказов, ФормированиеЗаказов, Форма, ОбвновитьПринудительно = Ложь)

	Если НЕ Форма.ОтображатьЗаказыКОформлению И НЕ ОбвновитьПринудительно Тогда
		Возврат;
	КонецЕсли; 
	
	КорзинаЗаказов.Очистить();
	
	Отбор = Новый Структура("ОтметитьКЗаказу", Истина);
	НайденныеСтроки = ФормированиеЗаказов.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество()>0 Тогда
		Отбор = Новый Структура("Партнер, Соглашение");
		Если Форма.РазбиватьЗаказыПоСкладам Тогда
			Отбор.Вставить("Склад");
		КонецЕсли;
		Если Форма.РазбиватьЗаказыПоДатамЗаказа Тогда
			Отбор.Вставить("ДатаЗаказа");
		КонецЕсли;
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл		
			ЗаполнитьЗначенияСвойств(Отбор, НайденнаяСтрока);
			Если Форма.РазбиватьЗаказыПоДатамПоставки Тогда
				Отбор.Вставить("ДатаПоступления", НайденнаяСтрока.НачалоПериодаПоступления);
			КонецЕсли;
			СтрокиКорзины = КорзинаЗаказов.НайтиСтроки(Отбор);
			Если СтрокиКорзины.Количество()>0 Тогда
				СтрокаКорзины = СтрокиКорзины[0];
			Иначе
				СтрокаКорзины = КорзинаЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКорзины, НайденнаяСтрока, "Партнер, Соглашение, Склад, Валюта, ДатаЗаказа");
				СтрокаКорзины.ДатаПоступления = НайденнаяСтрока.НачалоПериодаПоступления;
			КонецЕсли;
			СтрокаКорзины.Количество = СтрокаКорзины.Количество + НайденнаяСтрока.КоличествоУпаковок;
			СтрокаКорзины.ВсегоСтрок = СтрокаКорзины.ВсегоСтрок + 1;
			СтрокаКорзины.Сумма = СтрокаКорзины.Сумма + НайденнаяСтрока.Сумма;
			СтрокаКорзины.СуммаУпрУчет = СтрокаКорзины.СуммаУпрУчет + НайденнаяСтрока.СуммаСНДС;
			СтрокаКорзины.ОбщийВес = СтрокаКорзины.ОбщийВес + НайденнаяСтрока.ОбщийВес;
		
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры 

#Область ПроцедурыРаботыСНастройкамиПользователя

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных = Обработки.ФормированиеЗаказовПоставщикуПоПлану.ПолучитьМакет("МакетКомпоновки");
	
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Планы.Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка",
		"ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаВесНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"СпрНоменклатура.ЕдиницаИзмерения",
		"СпрНоменклатура"));
	СхемаКомпоновкиДанных.НаборыДанных.Планы.Запрос = ТекстЗапроса;
			
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ФормированиеЗаказовПоставщикуПоПлану", "Настройки", Настройки);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЗаказовПоставщикуПоПлану", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции
 
&НаКлиенте
Процедура ЗаполнитьРасчетныеКолонки()
	
	Для Каждого СтрокаЗаказа ИЗ Объект.ФормированиеЗаказов Цикл
		
		СтрокаЗаказа.Период.ДатаНачала 		= СтрокаЗаказа.НачалоПериодаПоступления;  
		СтрокаЗаказа.Период.ДатаОкончания 	= СтрокаЗаказа.ДатаПоступления;  
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьФлажки(Устанавливать)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Устанавливать И НЕ СтрокаТаблицы.ОтметитьКЗаказу И СтрокаТаблицы.КоличествоУпаковок > 0 Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Истина;
			
		ИначеЕсли Не Устанавливать И СтрокаТаблицы.ОтметитьКЗаказу Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ОтразитьОтборКомпоновкиВПростыхОтборах()
	
	ОтражениеНедопустимо = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			
			ОтборПоГруппеДоступен = 
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Склады") ИЛИ
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Партнеры") ИЛИ
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Номенклатура") ИЛИ
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СегментыНоменклатуры") ИЛИ
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия");
				
			ОтражениеНедопустимо = 
				НЕ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
				И НЕ (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии И ОтборПоГруппеДоступен) 
				ИЛИ ЭлементОтбора.ПравоеЗначение = Неопределено 
				ИЛИ ЭлементОтбора.ПравоеЗначение.Пустая();
				
			Если ОтражениеНедопустимо Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если Не ОтражениеНедопустимо Тогда
		Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
			
			ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
				
				ЗаполнитьПараметр(Объект.Подразделение,
					"Подразделение",
					ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);
				ЗаполнитьПараметр(Объект.Сценарий,
					"Сценарий",
					ПредопределенноеЗначение("Справочник.СценарииТоварногоПланирования.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);
				ЗаполнитьПараметр(Объект.ПериодПоступления,
					"ПериодПоступления",
					Новый СтандартныйПериод,
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);
				ЗаполнитьПараметр(Объект.ПериодЗаказа,
					"ПериодЗаказа",
					Новый СтандартныйПериод,
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);

			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
				
				ЗаполнитьПростойОтбор(
					Объект.Склад,
					"Склад",
					ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"), 
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);
				ЗаполнитьПростойОтбор(
					Объект.Партнер,
					"Поставщик",
					ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);
				ЗаполнитьПростойОтбор(
					Объект.Соглашение,
					"Соглашение",
					ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);
				ЗаполнитьПростойОтбор(
					Объект.Номенклатура,
					"Номенклатура",
					ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);
				ЗаполнитьПростойОтбор(Объект.СегментНоменклатуры,
					"СегментНоменклатуры",
					ПредопределенноеЗначение("Справочник.СегментыНоменклатуры.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Не ОтражениеНедопустимо;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПростойОтбор(РеквизитФормы, ИмяПоля, ЗначениеПоУмолчанию, ЭлементОтбора, ЭлементПользовательскойНастройки)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Если ПолеКомпоновки = ЭлементОтбора.ЛевоеЗначение Тогда
		
		Если ЭлементПользовательскойНастройки.Использование Тогда
			
			РеквизитФормы = ЭлементПользовательскойНастройки.ПравоеЗначение;
			
		Иначе 
			
			РеквизитФормы = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметр(РеквизитФормы, ИмяПараметра, ЗначениеПоУмолчанию, ЭлементПараметра, ЭлементПользовательскойНастройки)
	
	ПараметрКомпоновки = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	Если ПараметрКомпоновки = ЭлементПараметра.Параметр Тогда
		
		Если ЭлементПользовательскойНастройки.Использование Тогда
			
			РеквизитФормы = ЭлементПользовательскойНастройки.Значение;
			
		Иначе 
			
			РеквизитФормы = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаПланаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ПланЗакупок.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаЗаказаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроек, ИмяПоля, Значение, ЭтоОтборПоГруппе)

	ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
			
			ЭлементПользовательскойНастройки 
				= КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
					ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
				
				ЭлементПользовательскойНастройки.Использование = (Значение <> Неопределено) И Не Значение.Пустая();
				Если ЭлементПользовательскойНастройки.Использование Тогда
					
					ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.Равно;
					
					Если ЭтоОтборПоГруппе Тогда
						
						ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
						
					КонецЕсли;
					
					ЭлементПользовательскойНастройки.ВидСравнения  = ВариантВидаСравнения;
					ЭлементПользовательскойНастройки.ПравоеЗначение = Значение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОтборПоГруппе(Ключ)
	
	Если КэшированныеЗначения = Неопределено Тогда 
		КэшированныеЗначения = Новый Структура;
	КонецЕсли;
	Если НЕ КэшированныеЗначения.Свойство("ОтборПоГруппе") Тогда
		КэшированныеЗначения.Вставить("ОтборПоГруппе", Новый Соответствие());
	КонецЕсли;
	
	ПризнакОтбораПоГруппе = КэшированныеЗначения.ОтборПоГруппе.Получить(Ключ);
	Если ПризнакОтбораПоГруппе = Неопределено Тогда
		
		ПризнакОтбораПоГруппе = ЭтоОтборПоГруппеНаСервере(Ключ);
		КэшированныеЗначения.ОтборПоГруппе.Вставить(Ключ, ПризнакОтбораПоГруппе);
		
	КонецЕсли;
	
	Возврат ПризнакОтбораПоГруппе;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоОтборПоГруппеНаСервере(ЗначениеОтбора)
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Склады") Тогда
		ИмяСправочника = "Склады";
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяСправочника = "Номенклатура";
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.СегментыНоменклатуры") Тогда
		ИмяСправочника = "СегментыНоменклатуры";
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСправочника.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗначениеОтбора);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ЭтоГруппа;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьНаСервере()
	
	ПараметрСценарий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Сценарий");
	
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрСценарий.Значение, "Периодичность");
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", Периодичность);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений") , Ложь, );
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Если ПараметрКомпоновки.Имя = "Подразделение" Тогда
			Параметры.ИспользуемыеЗначенияРеквизитов.Вставить("Подразделение", ПараметрКомпоновки.Значение);
		КонецЕсли; 
		Если ПараметрКомпоновки.Имя = "Сценарий" Тогда
			Параметры.ИспользуемыеЗначенияРеквизитов.Вставить("Сценарий", ПараметрКомпоновки.Значение);
		КонецЕсли;
		Если ПараметрКомпоновки.Имя = "ПериодПоступления" Тогда
			Параметры.ИспользуемыеЗначенияРеквизитов.Вставить("ПериодПоступления", ПараметрКомпоновки.Значение);
		КонецЕсли;
		Если ПараметрКомпоновки.Имя = "ПериодЗаказа" Тогда
			Параметры.ИспользуемыеЗначенияРеквизитов.Вставить("ПериодЗаказа", ПараметрКомпоновки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Объект.ФормированиеЗаказов.Загрузить(ТаблицаРезультата);
	
	ЗаполнитьВалютуПоУмолчанию();
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры.ИспользуемыеЗначенияРеквизитов);
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуПоУмолчанию()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВалютуПоУмолчанию = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сценарий, 
		            "ПланЗакупокПланироватьПоСумме, ПланПродажПланироватьПоСумме");
		
		Если Не Реквизиты.ПланЗакупокПланироватьПоСумме И Не Реквизиты.ПланПродажПланироватьПоСумме Тогда
			ЗаполнитьВалютуПоУмолчанию = Истина;
		КонецЕсли; 
		
	Иначе 
		ЗаполнитьВалютуПоУмолчанию = Истина;
	КонецЕсли; 
	
	Если ЗаполнитьВалютуПоУмолчанию Тогда
		
		Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
		
		Для Каждого СтрокаФормированияЗаказа Из Объект.ФормированиеЗаказов Цикл
			Если Не ЗначениеЗаполнено(СтрокаФормированияЗаказа.Валюта) Тогда
				СтрокаФормированияЗаказа.Валюта = Валюта;
			КонецЕсли; 
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПлановПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ПланыЗакупокОбороты.КоличествоОборот) КАК Количество,
	|	ПланыЗакупокОбороты.ПланЗакупок КАК Документ,
	|	ДокПланЗакупок.МоментВремени КАК МоментВремени,
	|	ДокПланЗакупок.Дата КАК ДатаДокумента,
	|	ДокПланЗакупок.Номер КАК НомерДокумента,
	|	ПланыЗакупокОбороты.Партнер,
	|	ПланыЗакупокОбороты.Соглашение
	|ИЗ
	|	РегистрНакопления.ПланыЗакупок.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			,
	|			Сценарий = &Сценарий
	|				И Подразделение = &Подразделение
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК ПланыЗакупокОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланЗакупок КАК ДокПланЗакупок
	|		ПО ПланыЗакупокОбороты.ПланЗакупок = ДокПланЗакупок.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыЗакупокОбороты.ПланЗакупок,
	|	ДокПланЗакупок.МоментВремени,
	|	ДокПланЗакупок.Дата,
	|	ДокПланЗакупок.Номер,
	|	ПланыЗакупокОбороты.Партнер,
	|	ПланыЗакупокОбороты.Соглашение
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (№ %2 от %3) Партнер: %4 %5';uk='%1 (№ %2 від %3) Партнер: %4 %5'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"), ?(ЗначениеЗаполнено(Выборка.Партнер),Выборка.Партнер, "<Пустой>"), 
				Выборка.Соглашение);
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокЗаказовПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ЗаказПоставщику.Ссылка КАК Документ,
	|	ЗаказПоставщику.Дата КАК ДатаДокумента,
	|	ЗаказПоставщику.Номер КАК НомерДокумента,
	|	ЗаказПоставщику.Партнер,
	|	ЗаказПоставщику.Соглашение
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ТаблицаТовары.Ссылка = ЗаказПоставщику.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаТовары.Склад = &Склад
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказПоставщику.Партнер = &Партнер
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказПоставщику.Соглашение = &Соглашение
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказПоставщику.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И ТаблицаТовары.Номенклатура = &Номенклатура
	|	И ТаблицаТовары.Характеристика = &Характеристика
	|	И ТаблицаТовары.Количество <> 0
	|	И ТаблицаТовары.ДатаПоступления МЕЖДУ &НачалоПериодаПоступления И &ДатаПоступления
	|	И ЗаказПоставщику.Проведен
	|	И НЕ ТаблицаТовары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.Партнер,
	|	ЗаказПоставщику.Соглашение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщику.МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (№ %2 от %3) Партнер: %4 %5';uk='%1 (№ %2 від %3) Партнер: %4 %5'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"), ?(ЗначениеЗаполнено(Выборка.Партнер),Выборка.Партнер, "<Пустой>"), 
				Выборка.Соглашение);
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

// Расчитывает выделенные строки при изменении соглашения
//
// Параметры
//  ЗаказОбъект  - Структура - Структура шапки заказа
//  ЗаполнятьСоглашения  - Булево - Структура шапки заказа
//
// Возвращаемое значение:
//   Булево   - Истина, если цены расчиитаны
//
&НаСервере
Функция ПриИзменененииСоглашенияНаСервере(ЗаказОбъект, ЗаполнятьСоглашения = Ложь)

	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	Если ЗаполнятьСоглашения Тогда
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(ЗаказОбъект.Партнер, Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение", Истина, ЗаказОбъект.Соглашение));
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
			Для каждого СтрокаТЧ Из МассивСтрок Цикл			
				СтрокаТЧ.Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				СтрокаТЧ.Валюта = УсловияЗакупокПоУмолчанию.Валюта;
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Склад) Тогда
					СтрокаТЧ.Склад = УсловияЗакупокПоУмолчанию.Склад;
				КонецЕсли;
			КонецЦикла;
			ЗаказОбъект.Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
			ЗаказОбъект.Валюта = УсловияЗакупокПоУмолчанию.Валюта;
			Если НЕ ЗначениеЗаполнено(ЗаказОбъект.Склад) И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Склад) Тогда
				ЗаказОбъект.Склад = УсловияЗакупокПоУмолчанию.Склад;
			КонецЕсли;
			ЗаказОбъект.ЦенаВключаетНДС = УсловияЗакупокПоУмолчанию.ЦенаВключаетНДС;
		КонецЕсли; 
	
	КонецЕсли; 
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЗаказОбъект);
	
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(
		Объект.ФормированиеЗаказов,
		МассивСтрок,
		Новый Структура( // Параметры заполнения
			"ПоляЗаполнения, Дата, Валюта, Соглашение",
			"Цена, СтавкаНДС, ВидЦеныПоставщика",
			ЗаказОбъект.Дата,
			ЗаказОбъект.Валюта,
			ЗаказОбъект.Соглашение
		),
		СтруктураДействий);
	
	ОбновитьКорзинуЗаказов(КорзинаЗаказов, Объект.ФормированиеЗаказов, ЭтаФорма);
	
	Возврат ЦеныРассчитаны;

КонецФункции // ПриИзменененииСоглашенияНаСервере()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Строка) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Соглашение", Строка.Соглашение);
	СтруктураЗаполненияЦены.Вставить("Партнер",    Строка.Партнер);
	СтруктураЗаполненияЦены.Вставить("Дата",       ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта",     Строка.Валюта);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦеныПоставщикаСервер(ЗаказОбъект, ВидЦеныПоставщика)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.ФормированиеЗаказов.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	Если ТипЗнч(ЗаказОбъект) = Тип("Структура") Тогда
		ЗаказОбъект.Вставить("ЦенаВключаетНДС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦеныПоставщика, "ЦенаВключаетНДС"));
	КонецЕсли;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЗаказОбъект);
	
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(
		Объект.ФормированиеЗаказов,
		МассивСтрок,
		Новый Структура( // Параметры заполнения
			"ПоляЗаполнения, Дата, Валюта, ВидЦеныПоставщика",
			"Цена, ВидЦеныПоставщика",
			ЗаказОбъект.Дата,
			ЗаказОбъект.Валюта,
			ВидЦеныПоставщика
		),
		СтруктураДействий);
		
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	Возврат СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.ФормированиеЗаказов, МассивВыделенныхСтрок, Склад);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект = Неопределено)
	
	Если Объект = Неопределено Тогда
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	Иначе
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	КонецЕсли; 
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказыНаСервере()
	
	Отбор = Новый Структура("ОтметитьКЗаказу", Истина);
	ТаблицаЗаказов = Объект.ФормированиеЗаказов.Выгрузить(Отбор, "
		| Номенклатура, 
		| Характеристика, 
		| Склад, 
		| Партнер,
		| Соглашение, 
		| ВидЦеныПоставщика, 
		| НачалоПериодаПоступления, 
		| КоличествоУпаковок,
		| ДатаЗаказа");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗаказов.Соглашение,
	|	ТаблицаЗаказов.Партнер,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.Характеристика,
	|	ТаблицаЗаказов.Склад,
	|	ТаблицаЗаказов.КоличествоУпаковок,
	|	ТаблицаЗаказов.НачалоПериодаПоступления КАК ДатаПоступления,
	|	ТаблицаЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	ТаблицаЗаказов.ВидЦеныПоставщика
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	&ТаблицаЗаказов КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.КоличествоУпаковок > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказов.Соглашение КАК Соглашение,
	|	ТаблицаЗаказов.Партнер КАК Партнер,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.Характеристика,
	|	ТаблицаЗаказов.Склад КАК Склад,
	|	ТаблицаЗаказов.Склад.Родитель КАК СкладРодитель,
	|	СУММА(ТаблицаЗаказов.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТаблицаЗаказов.ДатаПоступления КАК ДатаПоступления,
	|	ТаблицаЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	ТаблицаЗаказов.ВидЦеныПоставщика
	|ИЗ
	|	ТаблицаЗаказов КАК ТаблицаЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказов.Соглашение,
	|	ТаблицаЗаказов.ДатаЗаказа,
	|	ТаблицаЗаказов.Номенклатура,
	|	ТаблицаЗаказов.ДатаПоступления,
	|	ТаблицаЗаказов.Склад,
	|	ТаблицаЗаказов.Партнер,
	|	ТаблицаЗаказов.ВидЦеныПоставщика,
	|	ТаблицаЗаказов.Характеристика
	|УПОРЯДОЧИТЬ ПО
	|	Партнер,
	|	Соглашение,
	|	СкладРодитель,
	|	Склад,
	|	ДатаПоступления,
	|	ДатаЗаказа";
	
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);
	
	Результат = Запрос.Выполнить();

	Партнер = Неопределено;
	Соглашение = Неопределено;
	СкладРодитель = Неопределено;
	Склад = Неопределено;
	ДатаПоступления = Неопределено;
	ДатаЗаказа = Неопределено;
	ДокументОбъект = Неопределено;
	СоздаватьЗаказ = Истина;
	
	СписокОшибок = Новый СписокЗначений;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Партнер <> ВыборкаДетальныеЗаписи.Партнер Тогда
			СоздаватьЗаказ = Истина;
		КонецЕсли; 
		Если Соглашение <> ВыборкаДетальныеЗаписи.Соглашение Тогда
			СоздаватьЗаказ = Истина;
		КонецЕсли; 
		
		Если РазбиватьЗаказыПоСкладам И Склад <> ВыборкаДетальныеЗаписи.Склад Тогда
			СоздаватьЗаказ = Истина;
		ИначеЕсли НЕ РазбиватьЗаказыПоСкладам И ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки 
			И (СкладРодитель <> ВыборкаДетальныеЗаписи.СкладРодитель 
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СкладРодитель)
				И Склад <> ВыборкаДетальныеЗаписи.Склад) Тогда
			СоздаватьЗаказ = Истина;
		КонецЕсли; 
		Если РазбиватьЗаказыПоДатамПоставки И ДатаПоступления <> ВыборкаДетальныеЗаписи.ДатаПоступления Тогда
			СоздаватьЗаказ = Истина;
		КонецЕсли; 
		Если РазбиватьЗаказыПоДатамЗаказа И ДатаЗаказа <> ВыборкаДетальныеЗаписи.ДатаЗаказа Тогда
			СоздаватьЗаказ = Истина;
		КонецЕсли;
		
		Если СоздаватьЗаказ Тогда
			 
			ЗаписатьЗаказНаСервере(ДокументОбъект, СкладРодитель, СписокОшибок);
			СоздаватьЗаказ = Ложь;
			
			ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДата();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаДетальныеЗаписи, "Партнер, Соглашение, Склад");
			ДокументОбъект.Заполнить(Неопределено);
			
			Если РазбиватьЗаказыПоДатамПоставки Тогда
				ДокументОбъект.ПоступлениеОднойДатой = Истина;
			Иначе
				ДокументОбъект.ПоступлениеОднойДатой = Ложь;
			КонецЕсли; 
		
		КонецЕсли; 
		ДокументОбъект.ДатаПоступления = Макс(ДокументОбъект.ДатаПоступления, ВыборкаДетальныеЗаписи.ДатаПоступления);
		
		Партнер = ВыборкаДетальныеЗаписи.Партнер;
		Соглашение = ВыборкаДетальныеЗаписи.Соглашение;
		СкладРодитель = ВыборкаДетальныеЗаписи.СкладРодитель;
		Склад = ВыборкаДетальныеЗаписи.Склад;
		ДатаЗаказа = ВыборкаДетальныеЗаписи.ДатаЗаказа;
		ДатаПоступления = ВыборкаДетальныеЗаписи.ДатаПоступления;
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	ЗаписатьЗаказНаСервере(ДокументОбъект, СкладРодитель, СписокОшибок);
	
	Для каждого ЭлементСписка Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭлементСписка.Представление, ЭлементСписка.Значение);
		ЭлементСписка.Значение = Неопределено;
	КонецЦикла;
	СписокОшибок = Неопределено;
	
КонецПроцедуры

// Процедура записывает документ с обработкой и заполнением стандартных полей.
//
// Параметры
//  ДокументОбъект  - ДокументОбъект.ЗаказПоставщику - документ заказа заполненный данными из плана
//
&НаСервере
Процедура ЗаписатьЗаказНаСервере(ДокументОбъект, СкладРодитель, СписокОшибок)

	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДокументОбъект.Комментарий = НСтр("ru='Сформирован автоматически обработкой ""Формирование заказов поставщику по плану"".';uk='Сформований автоматично обробкою ""Формування замовлень постачальнику за планом"".'");
	
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.Партнер) ИЛИ НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент)) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Соглашение, "Организация, Партнер, Контрагент");
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты);
	КонецЕсли;
	
	// Устанавливаем подразделение принудительно если заполнено т.к. по ним сравниваются планы, 
	// если не заполнено - получаются из настроек пользователя.
	Если ЗначениеЗаполнено(Параметры.ИспользуемыеЗначенияРеквизитов.Подразделение) Тогда
		ДокументОбъект.Подразделение = Параметры.ИспользуемыеЗначенияРеквизитов.Подразделение;
	КонецЕсли; 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам") Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	Иначе
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
	КонецЕсли;
	
	Если НЕ РазбиватьЗаказыПоСкладам 
		И Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(СкладРодитель) Тогда
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Новый Структура("Склад", ДокументОбъект.Склад));
		Если НайденныеСтроки.Количество() < ДокументОбъект.Товары.Количество() Тогда
		
			ДокументОбъект.Склад = СкладРодитель;
		
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ РазбиватьЗаказыПоДатамПоставки Тогда
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(Новый Структура("ДатаПоступления", ДокументОбъект.ДатаПоступления));
		Если НайденныеСтроки.Количество() = ДокументОбъект.Товары.Количество() Тогда
			ДокументОбъект.ПоступлениеОднойДатой = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Ложь);
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", ДокументОбъект.Партнер);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	НалогообложениеНДСПоУмолчанию = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ДокументОбъект.Соглашение, ДокументОбъект.Дата, Ложь, Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") И ЗначениеЗаполнено(ДокументОбъект.Соглашение)) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(ДокументОбъект));
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ДокументОбъект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	Склад = ДокументОбъект.Склад;
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ДокументОбъект.ЗаполнитьУсловияЗакупокПоСоглашению();
	Иначе
		ДокументОбъект.ЗаполнитьУсловияЗакупокПоУмолчанию();
	КонецЕсли; 
	Если ЗначениеЗаполнено(Склад) Тогда
		ДокументОбъект.Склад = Склад;
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
	
	ТекстОшибкиЗаписи = НСтр("ru='%1 невозможно записать документ по причине:
                                |%2'
                                |;uk='%1 неможливо записати документ з причини:
                                |%2'");
	ТекстОшибкиЗаполнения = НСтр("ru='%1 невозможно провести по причине некорректного заполнения.';uk='%1 неможливо провести через некоректне заповнення.'");
	
	Попытка
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			СписокОшибок.Добавить(ДокументОбъект,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаполнения, Строка(ДокументОбъект.Ссылка)));
		КонецЕсли;
		
		СформированныеЗаказы.Добавить(ДокументОбъект.Ссылка);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Формирование заказов поставщику по плану';uk='Формування замовлень постачальнику за планом'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ТекстОшибки = ОписаниеОшибки();
		СписокОшибок.Добавить(ДокументОбъект,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаписи, Строка(ДокументОбъект.Ссылка), ТекстОшибки));
		
	КонецПопытки; 

КонецПроцедуры
 
//Удаляет заказы на сервере с контролем ссылочной целостности.
&НаСервереБезКонтекста
Функция УдалитьЗаказыНаСервере(СсылкиНаУдаление)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	Сообщение = Новый СообщениеПользователю();
	ТекстСообщения = "ru = ""Имеются ссылки на объект %1  %2. Документ не удален""";
	Для Каждого Ссылка из ТабСсылок Цикл
		
		Если Ссылка[0] <> Ссылка[1] Тогда
			
			Сообщение.Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1])); 
			Сообщение.Сообщить();
			
			Индекс = СсылкиНаУдаление.Найти(Ссылка[0]);
			Если Индекс <> Неопределено Тогда
			
				СсылкиНаУдаление.Удалить(Индекс);
			
			КонецЕсли;
		
	КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	КлючНазначенияИспользования = СформироватьКлючНазначенияФормы();
	
	ВосстановитьНастройки();
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты,, Ложь);
	// Конец МенюОтчеты
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	ПеречитатьКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПересчитатьПредставлениеСпискаХозяйственныхОпераций();
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ВнутреннееПотреблениеТоваров"
		Или ИмяСобытия = "Запись_ВозвратМатериаловИзПроизводства" 
		Или ИмяСобытия = "Запись_ВыпускПродукции" 
		Или ИмяСобытия = "Запись_ОприходованиеИзлишковТоваров" 
		Или ИмяСобытия = "Запись_ПередачаМатериаловВПроизводство" 
		Или ИмяСобытия = "Запись_ПеремещениеТоваров" 
		Или ИмяСобытия = "Запись_ПересортицаТоваров" 
		Или ИмяСобытия = "Запись_ПорчаТоваров" 
		Или ИмяСобытия = "Запись_ПрочееОприходованиеТоваров" 
		Или ИмяСобытия = "Запись_СборкаТоваров" 
		Или ИмяСобытия = "Запись_СписаниеНедостачТоваров"
		Или ИмяСобытия = "Запись_ЗаказНаСборку"
		Или ИмяСобытия = "Запись_ЗаказНаПроизводство"
		Или ИмяСобытия = "Запись_ЗаказНаПеремещение"
		Или ИмяСобытия = "Запись_ЗаказНаВнутреннееПотребление"
		Или ИмяСобытия = "Запись_ЗаказМатериаловВПроизводство"
		Или ИмяСобытия = "Запись_РасходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_ПриходныйОрдерНаТовары" Тогда
		
		ПерезаполнитьСтраницы(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КнопкаСоздать

&НаКлиенте
Процедура СоздатьСборкуТоваров(Команда)

	СтруктураОснование = Новый Структура("Склад, ТипОперации",
		ОтборСклад, ПредопределенноеЗначение("Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих"));
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.СборкаТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРазборкуТоваров(Команда)
	
	СтруктураОснование = Новый Структура("Склад, ТипОперации",
		ОтборСклад, ПредопределенноеЗначение("Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие"));
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.СборкаТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеТоваров(Команда)
	СтруктураОснование = Новый Структура("СкладОтправитель, ХозяйственнаяОперация",
		ОтборСклад, ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеремещениеТоваров"));
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнутреннююПередачуТоваров(Команда)
	СтруктураОснование = Новый Структура("СкладОтправитель, ХозяйственнаяОперация",
		ОтборСклад, ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаТоваров"));
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПередачуВЭксплуатацию(Команда)
	
	СтруктураОснование = Новый Структура("Склад, ХозяйственнаяОперация",
		ОтборСклад, ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВЭксплуатацию"));
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеНаРасходы(Команда)
	
	СтруктураОснование = Новый Структура("Склад, ХозяйственнаяОперация",
		ОтборСклад, ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПередачуМатериаловВПроизводство(Команда)
	
	Возврат; // В УТ11 не используется
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратМатериаловИзПроизводства(Команда)
	
	Возврат; // В УТ11 не используется
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыпускПродукции(Команда)
	
	Возврат; // В УТ11 не используется
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОприходованиеИзлишковТоваров(Команда)
	
	СтруктураОснование = Новый Структура("Склад", ОтборСклад);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.ОприходованиеИзлишковТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПересортицуТоваров(Команда)
	
	СтруктураОснование = Новый Структура("Склад", ОтборСклад);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.ПересортицаТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПорчуТоваров(Команда)
	
	СтруктураОснование = Новый Структура("Склад", ОтборСклад);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.ПорчаТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеНедостачТоваров(Команда)
	
	СтруктураОснование = Новый Структура("Склад", ОтборСклад);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.СписаниеНедостачТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокОформлено);
	
КонецПроцедуры

// Прочее оприходование товаров:
&НаКлиенте
Процедура СоздатьВозвратИзЭксплуатации(Команда)
	
	Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации");
	СоздатьПрочееОприходованиеТоваров(Операция);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеИзПроизводства(Команда)
	
	Операция = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеИзПроизводства");
	СоздатьПрочееОприходованиеТоваров(Операция);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрочееПоступлениеТоваров(Команда)
	
	Возврат; // В УТ11 не используется
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСторноСписанияНаРасходы(Команда)
	Возврат; // В УТ11 не используется
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрочееОприходованиеТоваров(Операция)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", Операция);
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЗначенияЗаполнения.Вставить("Склад", ОтборСклад);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ПрочееОприходованиеТоваров.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьСписокРаспоряженияНаОформление(Команда)
	ПеречитатьКОформлению();
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокОформлено);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.СписокОформлено);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Элементы.СписокОформлено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций", ДоступныеХозяйственныеОперации), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипОчистка(Элемент, СтандартнаяОбработка)
	
	ДоступныеХозяйственныеОперации.ЗаполнитьПометки(Ложь);
	ОтборТипОчисткаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ДоступныеХозяйственныеОперации = ВыбранноеЗначение;
		
		ОтборТипОбработкаВыбораСервер();
		ПересчитатьПредставлениеСпискаХозяйственныхОпераций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)

	ПерезаполнитьСтраницы();

КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	ГруппаОтборТипыПеремещения  = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(СписокОформлено).Элементы,
		"ГруппаПериод", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ПеречитатьКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНакладнойПриИзменении(Элемент)
	
	ПеречитатьКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеОрдераПриИзменении(Элемент)
	
	ПеречитатьКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоЗаказам(Команда)
	ОформитьНакладную(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузке(Команда)
	ОформитьНакладную(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(ИнтервалОформленныхДокументов, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРаспоряженияНаОформление

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОформлено

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"РегистрСведений.ДанныеВнутреннихДокументов.ФормаСписка.Элемент.СписокОформлено.Выбор");
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзменить(Команда)
	
	ТекущиеДанные = Элементы.СписокОформлено.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ТекущиеДанные = Элементы.СписокОформлено.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Документ = ТекущиеДанные.Ссылка;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", Документ);
		
		ИмяДокумента = ИмяДокумента(Документ);
		ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьПометкуУдаления(Команда)
	
	ТекущиеДанные = Элементы.СписокОформлено.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокОформлено);
		
		ЕстьПомеченныеНаУдаление = ЕстьПомеченныеНаУдаление(ВыделенныеСтроки);
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			Документ = Элементы.СписокОформлено.ТекущиеДанные.Ссылка;
			ТекстВопроса = ?(ЕстьПомеченныеНаУдаление, НСтр("ru='Снять с ""%1"" пометку на удаление?';uk='Зняти з ""%1"" позначку на вилучення?'"),
			НСтр("ru='Пометить ""%1"" на удаление?';uk='Відмітити ""%1"" для вилучення?'"));
		Иначе
			ТекстВопроса = ?(ЕстьПомеченныеНаУдаление, НСтр("ru='Снять с выделенных элементов пометку на удаление?';uk='Зняти з виділених елементів позначку на вилучення?'"),
			НСтр("ru='Пометить выделенные элементы на удаление?';uk='Відмітити виділені елементи для вилучення?'"));
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Элементы.СписокОформлено.ТекущиеДанные.Ссылка);
		
		СписокОтветов = Новый СписокЗначений;
		СписокОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Да';uk='Так'"));
		СписокОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Нет';uk='Ні'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", 
			ЭтотОбъект, 
			Новый Структура("ВыделенныеСтроки, УстановкаПометкиУдаления", ВыделенныеСтроки, НЕ ЕстьПомеченныеНаУдаление)), 
			ТекстВопроса, 
			СписокОтветов);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокОформлено);
	РезультатПроведения = ПроведениеДокументов(ВыделенныеСтроки, Ложь);
	
	ДокументыДляОбработки = РезультатПроведения.ДокументыДляОбработки;
	НеОбработанныеДокументы = РезультатПроведения.НепроведенныеДокументы;
	
	ОповеститьПользователяОПроведенииДокументов(ДокументыДляОбработки, НеОбработанныеДокументы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокОформлено);
	РезультатПроведения = ПроведениеДокументов(ВыделенныеСтроки, Истина);
	
	ДокументыДляОбработки = РезультатПроведения.ДокументыДляОбработки;
	НеОбработанныеДокументы = РезультатПроведения.НепроведенныеДокументы;
	
	ОповеститьПользователяОПроведенииДокументов(ДокументыДляОбработки, НеОбработанныеДокументы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	СписокИзменить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	СписокУстановитьПометкуУдаления(Неопределено)
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНакладных

&НаКлиенте
Процедура ОформитьНакладную(ПоОрдерам)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	
	// Выбор варианта действия и возврат резульата в виде имени формы которую необходимо открыть и ее входящих параметров
	ПараметрыСозданныхДокументов = ОформитьНакладнуюНаСервере(ПоОрдерам, ВыделенныеСтроки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, ЭтотОбъект, ПараметрыСозданныхДокументов),
				ПараметрыСозданныхДокументов.ТекстВопросаПользователю, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru='Создано документов: %1';uk='Створено документів: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru='Создание документов';uk='Створення документів'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru='Создание документов';uk='Створення документів'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, ПараметрыСозданныхДокументов.Параметры, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОформитьНакладнуюНаСервере(ПоОрдерам, ВыделенныеСтроки)
	
	Перем СписокОшибок;
	
	СтруктураСозданныеНакладные = Новый Структура("СозданныеНакладные, ИмяФормы, ПараметрыФормы, Ошибки");
	
	МассивСтрок = Новый Массив();
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = СписокРаспоряженияНаОформление.НайтиПоИдентификатору(Идентификатор);
		МассивСтрок.Добавить(НайденнаяСтрока);
	КонецЦикла;
	
	СписокРаспоряжения = СписокРаспоряженияНаОформление.Выгрузить(МассивСтрок);
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = РегистрыСведений.ДанныеВнутреннихДокументов.РазделитьЗаказыПоТипамНакладных(СписокРаспоряжения, ПоОрдерам, СписокОшибок);
	
	Если ДокументыПоТипамНакладных.Количество() > 0 Тогда
		Если ПоОрдерам Тогда
			
			// Если выделен один документ и есть хотя бы одна накладная - открывается форма перезаполнения накладной
			// Если нет накладных и документы можно сгруппировать в одну накладную - открывается форма новой накладной
			// Если нет накладных и документы нельзя сгруппировать - открывается форма списка созданных накладных
			
			ЕстьНакладная = ЕстьНакладная(ДокументыПоТипамНакладных);
			ЕстьОрдер = ЕстьОрдер(ДокументыПоТипамНакладных);
			ЕстьЗаказ = ЕстьЗаказ(ДокументыПоТипамНакладных, ТипыЗаказов.ВыгрузитьЗначения());
			
			ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
			Если ВсегоТаблиц > 1 Тогда
				
				Если ЕстьНакладная Тогда
					// Пакетно с исключением накладных и сообщением об исключенных документах
					// Распоряжения-накладные исключаются, т.к. должны быть обработаны индивидульно - нельзя ввести новую накладную 
					// по распоряжению-накладной
					
					ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок);
					ОсталосьТаблиц = ДокументыПоТипамНакладных.Количество();
					Если ОсталосьТаблиц > 0 Тогда
						ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
					КонецЕсли;
					
					Если ОсталосьТаблиц = 0 Тогда
						ТекстОшибки = НСтр("ru='Операция не выполнена.';uk='Операція не виконана.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
					ИначеЕсли ВсегоТаблиц <> ОсталосьТаблиц Тогда
						ТекстОшибки = НСтр("ru='Операция выполнена с ошибками.';uk='Операція виконана з помилками.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
					КонецЕсли;
					
				Иначе
					// Пакетно если нет накладных
					ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
				КонецЕсли;
				
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				
				// Проверка наличия накладных
				// Если текущее распоряжение это заказ, и по нему есть накладные, открыть форму перезаполнения
				Если ЕстьНакладная И ЕстьЗаказ Тогда
					//Открытие формы перезаполнения
					ПараметрыФормы = ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
				Иначе
					// При попытке заполнить накладную по отсутствующему ордеру, накладная будет очищена - задаем вопрос пользователю
					Если ЕстьНакладная И Не ЕстьОрдер И Не РежимБезВопросов Тогда
						ТекстВопроса = НСтр("ru='Накладная будет очищена, поскольку не создано ни одного ордера. Продолжить?';uk='Накладна буде очищена, оскільки не створено жодного ордера. Продовжити?'");
						ПараметрыФормы = Новый Структура();
						ПараметрыФормы.Вставить("ПоОрдерам", ПоОрдерам);
						ПараметрыФормы.Вставить("ТекстВопросаПользователю", ТекстВопроса);
						ПараметрыФормы.Вставить("ПроцедураОбработкиОтветаПользователя", "ОчиститьНакладнуюОтветПользователя");
					Иначе
						// Если это распоряжение-накладная, или заказ без накладной - открытие формы накладной, существующей или новой
						ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// При оформлении по заказам всегда создается новая накладная
			
			// Открывается форма созданной накладной, в случае если совпали ключевые поля выделенных строк, и позволяет функциональная опция
			// В ином случае открывается форма со списком созданных накладных
			
			Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
				// Пакетно
				ПараметрыФормы = ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрано ни одного документа, который можно было бы оформить %1';uk='Не обрано жодного документа, який можна було б оформити %1'");
		
		Если ПоОрдерам Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='по отгрузке (приемке)';uk='по відвантаженню (прийманню)'"));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='по заказам';uk='по замовленнях'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	КонецЕсли;
	
	РежимБезВопросов = Ложь;
	
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьНакладная(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - накладная не создана. Остальные состояния подразумевают наличие накладной, либо накладную без заказа (состояние 4)
			Если Строка.СостояниеНакладной <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОрдер(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - ордер не создан. Остальные состояния подразумевают наличие ордера, либо что ордер не требуется (состояние 4)
			Если Строка.СостояниеОрдера <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьЗаказ(ДокументыПоТипамНакладных, ТипыЗаказов)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			ТипРаспоряжения = ТипЗнч(Строка.Ссылка);
			Если ТипыЗаказов.Найти(ТипРаспоряжения) <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОформитьРядНакладныхПоТаблицам(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СтруктураПараметров = Новый Структура();
	ПараметрыФормы = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФормы", "РегистрСведений.ДанныеВнутреннихДокументов.Форма.ФормаСозданныеДокументы");
	СозданныеДокументы = Новый СписокЗначений();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		Если ПерваяСтрока.СостояниеНакладной > 0 Тогда
			
			СоответствияОпераций = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладныхПоОперациям(ВыделенныеХозяйственныеОперации());
			НайденнаяСтрока = СоответствияОпераций.Найти(ТипЗнч(ПерваяСтрока.Ссылка), "ТипДокумента");
			МетаданныеНакладной = Метаданные.НайтиПоТипу(НайденнаяСтрока.ТипНакладной);
			МенеджерНакладной = Документы[МетаданныеНакладной.Имя];
			
			ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
			
			Заказы = Таблица.ВыгрузитьКолонку("Ссылка");
			
			РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы);
			РезультатПроверки = МенеджерНакладной.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
			Если Не РезультатПроверки.ЕстьОшибки Тогда
				
				ПараметрыЗаполнения = МенеджерНакладной.ПараметрыЗаполненияДокумента();
				ПараметрыЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
				ПараметрыЗаполнения.Вставить("ФормаОткрыта", Ложь);
				ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
				ПараметрыЗаполнения.Вставить("МассивЗаказов", Заказы);
				ПараметрыЗаполнения.Вставить("Склад", ПерваяСтрока.Склад);
				
				ДокументОбъект = МенеджерНакладной.СоздатьДокумент();
				ДокументОбъект.Заполнить(ПараметрыЗаполнения);
				
				ДокументОбъект.Дата = ТекущаяДатаСеанса();
				
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					// Добавить запись в историю работы пользователя.
					ИсторияРаботыПользователя.Добавить(ДокументОбъект.Ссылка);
					
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
					Исключение
						ТекстОшибки = НСтр("ru='Не удалось провести документ';uk='Не вдалося провести документ'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
							ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
					КонецПопытки;
					
				Иначе
					ТекстОшибки = НСтр("ru='Не удалось создать документ %1 на основании документа %2';uk='Не вдалося створити документ %1 на підставі документа %2'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, МетаданныеНакладной.Синоним, Заказы[0]);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки + " " + ДокументОбъект.Ссылка, Неопределено);
				КонецЕсли;
			Иначе
				
				Для Каждого ТекстОшибки Из РезультатПроверки.ТекстОшибки Цикл
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
						ТекстОшибки, Неопределено);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	
	СтруктураПараметров.Вставить("Параметры", ПараметрыФормы);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ТипРаспоряжения = ТипЗнч(ВыделеннаяСтрока.Ссылка);
	СоответствияОпераций = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладныхПоОперациям(ВыделенныеХозяйственныеОперации());
	НайденнаяСтрока = СоответствияОпераций.Найти(ТипРаспоряжения, "ТипДокумента");
	МетаданныеНакладной = Метаданные.НайтиПоТипу(НайденнаяСтрока.ТипНакладной);
	МенеджерНакладной = Документы[МетаданныеНакладной.Имя];
	
	ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормыНакладной);
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если ТипыНакладных.НайтиПоЗначению(ТипЗнч(Распоряжение)) <> Неопределено Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
	Если ПоОрдерам И РаспоряженияНакладные.Количество() > 0 Тогда
		// Для существующих распоряжений-накладных не перезаполняется шапка документа
		ПерезаполняемаяНакладная = РаспоряженияНакладные[0];
		ЗначенияЗаполнения = Новый Структура("ЗаполнятьПоОрдеру, МассивЗаказов", Истина, Заказы);
		
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		ПараметрыФормы.Вставить("МассивЗаказов", Заказы);
		ПараметрыФормы.Вставить("Склад", ВыделеннаяСтрока.Склад);
	Иначе
		// Требуется создать новые накладные - нужно получить данные шапки документа и проверить их
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы);
		РезультатПроверки = МенеджерНакладной.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
		
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		ПараметрыФормы.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыФормы.Вставить("МассивЗаказов", Заказы);
		ПараметрыФормы.Вставить("Склад", ВыделеннаяСтрока.Склад);
		
		Если РезультатПроверки.ЕстьОшибки Тогда
			
			Для Каждого ТекстОшибки Из РезультатПроверки.ТекстОшибки Цикл
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
					ТекстОшибки, Неопределено);
			КонецЦикла;
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Для вывода сообщения о количестве созданных документов
	СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(ПерезаполняемаяНакладная) Тогда
		ПараметрыСОснованием.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыСОснованием.Вставить("Ключ", ПерезаполняемаяНакладная);
	КонецЕсли;
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	ТипРаспоряжения = ТипЗнч(ВыделеннаяСтрока.Ссылка);
	СоответствияОпераций = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладныхПоОперациям(ВыделенныеХозяйственныеОперации());
	НайденнаяСтрока = СоответствияОпераций.Найти(ТипРаспоряжения, "ТипДокумента");
	МетаданныеНакладной = Метаданные.НайтиПоТипу(НайденнаяСтрока.ТипНакладной);
	МенеджерНакладной = Документы[МетаданныеНакладной.Имя];
	
	Если ПравоДоступа("Добавление", МетаданныеНакладной) Или ПравоДоступа("Изменение", МетаданныеНакладной) Тогда
		
		Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
		
		ИмяФормыНакладной = "Документ." + МетаданныеНакладной.Имя + ".Форма.ФормаДокумента";
		
		НастройкиФормы = НакладныеСервер.НастройкиФормыПереоформленияНакладных();
		НастройкиФормы.Заголовок = НСтр("ru='Переоформление списаний товаров по выбранным распоряжениям';uk='Переоформлення списань товарів за вибраними розпорядженнями'");
		НастройкиФормы.ИмяФормыНакладной = ИмяФормыНакладной;
		
		НастройкиФормы.ИспользоватьНакладныеПоНесколькимЗаказам = НайденнаяСтрока.ПоНесколькимЗаказам;
		НастройкиФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		
		Если НайденнаяСтрока.ТипНакладной = Тип("ДокументСсылка.СборкаТоваров") Тогда
			НастройкиФормы.НакладнаяНаПриемкуИОтгрузку = Истина;
			ТекущаяСсылка = ?(Заказы.Количество() > 0, Заказы[0], ВыделеннаяСтрока.Ссылка);
			Ключ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСсылка, "Номенклатура, Характеристика, Склад");
			ЗаполнитьЗначенияСвойств(НастройкиФормы.ОсновнойТовар.Ключ, Ключ);
		КонецЕсли;
		
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(Заказы);
		РеквизитыШапки.Склад = ВыделеннаяСтрока.Склад;
		
		ПараметрыИИмяФормы = Новый Структура("ЕстьОшибки, ИмяФормы, Параметры", Ложь);
		
		ПараметрыИИмяФормы.ИмяФормы = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
		ПараметрыИИмяФормы.Параметры = Новый Структура("Заказы, Склад, РеквизитыШапки, НастройкиФормы",
			Заказы, ВыделеннаяСтрока.Склад, РеквизитыШапки, НастройкиФормы);
		
		Возврат ПараметрыИИмяФормы;
	Иначе
		ОшибкаДоступа = НСтр("ru='Нет прав на добавление/изменение документа ';uk='Немає прав на додавання/редагування документа '") + МетаданныеНакладной.Синоним;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",
			ОшибкаДоступа, Неопределено);
			
		Возврат Новый Структура(); // Нет прав
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок)
	
	МассивКУдалению = Новый Массив();
	МассивТипыНакладных = ТипыНакладных.ВыгрузитьЗначения();
	
	ИзначальноеКоличество = ДокументыПоТипамНакладных.Количество();
	Для н = 1 По ИзначальноеКоличество Цикл
		Индекс = ИзначальноеКоличество - н;
		Таблица = ДокументыПоТипамНакладных[Индекс];
		
		Исключить = Ложь;
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			Если СтрокаТаблицы.СостояниеНакладной <> 1 И СтрокаТаблицы.СостояниеНакладной <> 4 Тогда
				Исключить = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Исключить Тогда
			
			Для Каждого Строка Из Таблица Цикл
				ТекстОшибки = НСтр("ru='Для распоряжения %1 действие не выполнено, так как по выбранным распоряжениям такой аналитики уже имеются накладные.';uk='Для розпорядження %1 дію не виконано, так як за обраним розпорядженням такої аналітики вже є накладні.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			КонецЦикла;
			
			ДокументыПоТипамНакладных.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНакладнуюОтветПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		РежимБезВопросов = Ложь;
		Возврат;
	КонецЕсли;
	
	РежимБезВопросов = Истина;
	
	ОформитьНакладную(ДополнительныеПараметры.ПоОрдерам);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	МассивМенеджеров = ПолучитьМенеджерыИспользуемыхДокументов();
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод,
		?(МассивМенеджеров.Количество() > 0, МассивМенеджеров, Неопределено));
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		
		ПараметрыОтбора = Новый Структура("Ссылка", Ссылка);
		
		Если ТипыЗаказов.НайтиПоЗначению(ТипЗнч(Ссылка)) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКОформлению;
			
			НайденныеСтроки = СписокРаспоряженияНаОформление.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = НайденныеСтроки[0];
			КонецЕсли;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОформлено;
			
			Элементы.СписокОформлено.ТекущаяСтрока = Ссылка;
		КонецЕсли;
		
		ПоказатьЗначение(, Ссылка);
		Возврат;
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьДоступныеХозяйственныеОперации()
	
	Менеджер = РегистрыСведений.ДанныеВнутреннихДокументов;
	
	ТаблицаОперацииНакладные = Менеджер.ОписаниеМетаданныхНакладных();
	
	ХозяйственныеОперации = ТаблицаОперацииНакладные.ВыгрузитьКолонку("ХозяйственнаяОперация");
	ХозяйственныеОперации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ХозяйственныеОперации);
	
	Для Каждого ХозяйственнаяОперация Из ХозяйственныеОперации Цикл
		// Список доступных операций может быть уже заполнен из сохраненных значений
		Если ДоступныеХозяйственныеОперации.НайтиПоЗначению(ХозяйственнаяОперация) = Неопределено Тогда
			ДоступныеХозяйственныеОперации.Добавить(ХозяйственнаяОперация);
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеХозяйственныеОперации.СортироватьПоЗначению();
	
	Если Параметры.РабочееМестоЕдинственнойНакладной Тогда
		
		// Устанавливаем отбор при открытии
		МассивТипДокумента = Параметры.ТипДокументаРабочегоМеста.Типы();
		ХозОперации = Менеджер.ХозяйственныеОперацииПоТипуДокумента(МассивТипДокумента[0]);
		
		Для Каждого ХозОперация Из ХозОперации Цикл
			ОперацияДляОтметки = ДоступныеХозяйственныеОперации.НайтиПоЗначению(ХозОперация);
			Если ОперацияДляОтметки <> Неопределено Тогда
				ОперацияДляОтметки.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	Если Параметры.РабочееМестоЕдинственнойНакладной Тогда
		
		// Получение массива хоз операций соответствующих первоначальному отбору
		МассивТипДокумента = Параметры.ТипДокументаРабочегоМеста.Типы();
	
		Менеджер = РегистрыСведений.ДанныеВнутреннихДокументов;
		
		ТаблицаОперацииНакладные = Менеджер.ОписаниеМетаданныхНакладных();
		ХозяйственныеОперации = ТаблицаОперацииНакладные.ВыгрузитьКолонку("ХозяйственнаяОперация");
		ХозяйственныеОперации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ХозяйственныеОперации);
		ХозОперацииПоНакладной = Менеджер.ХозяйственныеОперацииПоТипуДокумента(МассивТипДокумента[0]);
		
		// Сравнение первоначальных хоз операций с текущими
		ВыделенныеХозяйственныеОперации = ВыделенныеХозяйственныеОперации();
		
		МассивыСовпадают = Ложь;
		Если ХозОперацииПоНакладной.Количество() = ВыделенныеХозяйственныеОперации.Количество() Тогда
			МассивыСовпадают = Истина;
			Для Каждого ОжидаемаяОперация Из ХозОперацииПоНакладной Цикл
				Если ВыделенныеХозяйственныеОперации.Найти(ОжидаемаяОперация) = Неопределено Тогда
					МассивыСовпадают = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивыСовпадают Тогда
			ТипДокументаЗаголовка = МассивТипДокумента[0];
			Если ТипДокументаЗаголовка = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
				Заголовок = НСтр("ru='Внутренние потребления товаров';uk='Внутрішні споживання товарів'");
			ИначеЕсли ТипДокументаЗаголовка = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				Заголовок = НСтр("ru='Перемещения товаров';uk='Переміщення товарів'");
			ИначеЕсли ТипДокументаЗаголовка = Тип("ДокументСсылка.СборкаТоваров") Тогда
				Заголовок = НСтр("ru='Сборки (разборки) товаров';uk='Збирання (розбирання) товарів'");
			Иначе
				Заголовок = Строка(ТипДокументаЗаголовка);
			КонецЕсли;
		Иначе
			Заголовок = НСтр("ru='Внутреннее товародвижение';uk='Внутрішній рух товарів'");
		КонецЕсли;
		
	Иначе
		Заголовок = НСтр("ru='Внутреннее товародвижение';uk='Внутрішній рух товарів'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМенеджерыИспользуемыхДокументов()
	
	МассивМенеджеров = РегистрыСведений.ДанныеВнутреннихДокументов.ИспользуемыеМенеджерыДокументовПоОперациям(
		ВыделенныеХозяйственныеОперации());
		
	Возврат МассивМенеджеров;
	
КонецФункции

&НаСервере
Функция ПроведениеДокументов(ВыделенныеСтроки, Проведение = Истина)
	
	СтруктураВозврата = Новый Структура("ДокументыДляОбработки, НепроведенныеДокументы");
	
	НепроведенныеДокументы = Новый Массив();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		СтруктураВозврата.Вставить("ДокументыДляОбработки", Новый Массив());
		СтруктураВозврата.Вставить("НепроведенныеДокументы", Новый Массив());
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДокументыДляОбработки = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	Если Проведение Тогда
		НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(ДокументыДляОбработки);
	Иначе
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			Документ = Строка.Ссылка;
			ДокументОбъект = Документ.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ВыполненоУспешно = Истина;
			Исключение
				ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				НепроведенныеДокументы.Добавить(Новый Структура("Ссылка, ОписаниеОшибки", Документ, ПредставлениеОшибки));
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьСписок();
	
	СтруктураВозврата.Вставить("ДокументыДляОбработки", ДокументыДляОбработки);
	СтруктураВозврата.Вставить("НепроведенныеДокументы", НепроведенныеДокументы);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователяОПроведенииДокументов(ДокументыДляОбработки, ДанныеОНеОбработанныхДокументах, Проведение)
	
	НеОбработанныеДокументы = Новый Массив;
	
	ШаблонСообщения = ?(Проведение, 
		НСтр("ru='Документ %1 не проведен: %2';uk='Документ %1 не проведено: %2'"),
		НСтр("ru='Документ %1 не удалось сделать непроведенным: %2';uk='Документ %1 не вдалося зробити непроведеним: %2'"));
	
	Для Каждого ИнформацияОДокументе Из ДанныеОНеОбработанныхДокументах Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
			ИнформацияОДокументе.Ссылка);
		
		НеОбработанныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	Если НеОбработанныеДокументы.Количество() > 0 Тогда
		ТекстДиалога = ?(Проведение, 
				НСтр("ru='Не удалось провести один или несколько документов.';uk='Не вдалося провести один або кілька документів.'"),
				НСтр("ru='Не удалось сделать непроведенным один или несколько документов.';uk='Не вдалося зробити непроведеним один або декілька документів.'"));

		ПоказатьПредупреждение(, ТекстДиалога);
	КонецЕсли;

	ОбработанныеДокументы = ОбщегоНазначенияКлиентСервер.СократитьМассив(ДокументыДляОбработки, НеОбработанныеДокументы);
	
	Если ОбработанныеДокументы.Количество() > 0 Тогда
		
		Если ДокументыДляОбработки.Количество() > 1 Тогда
			Документ = Заголовок;
			ТекстОповещения = НСтр("ru='Изменение (%КоличествоДокументов%)';uk='Зміна (%КоличествоДокументов%)'");
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", ОбработанныеДокументы.Количество());
		Иначе
			Документ = Элементы.СписокОформлено.ТекущиеДанные.Ссылка;
			ТекстОповещения = НСтр("ru='Изменение';uk='Зміна'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЕстьПомеченныеНаУдаление(ВыделенныеСтроки)
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Документ = Строка.Ссылка;
		Если Документ.ПометкаУдаления Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкуУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		МассивСсылок = ДополнительныеПараметры.ВыделенныеСтроки;
		ПометитьНаУдаление = ДополнительныеПараметры.УстановкаПометкиУдаления;
		
		УстановитьПометкуУдаленияЗавершениеСервер(ДополнительныеПараметры);
		
		Если МассивСсылок.Количество() > 1 Тогда
			Документ = Заголовок;
			ТекстОповещения = ?(Не ПометитьНаУдаление, 
				НСтр("ru='Пометка удаления снята (%КоличествоДокументов%)';uk='Позначка вилучення знята (%КоличествоДокументов%)'"),
				НСтр("ru='Пометка удаления установлена (%КоличествоДокументов%)';uk='Позначка вилучення встановлена (%КоличествоДокументов%)'"));
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", МассивСсылок.Количество());
		Иначе
			Документ = Элементы.СписокОформлено.ТекущиеДанные.Ссылка;
			ТекстОповещения = ?(Не ПометитьНаУдаление,
				НСтр("ru='Пометка удаления снята';uk='Позначка вилучення знята'"),
				НСтр("ru='Пометка удаления установлена';uk='Позначка вилучення встановлена'"));
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаленияЗавершениеСервер(ДополнительныеПараметры)
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ПометитьНаУдаление = ДополнительныеПараметры.УстановкаПометкиУдаления;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Документ = Строка.Ссылка;
		ДокументОбъект = Документ.ПолучитьОбъект();
		
		// Запись только тех объектов, значение пометки которых меняется
		Если ПометитьНаУдаление И НЕ ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ИначеЕсли НЕ ПометитьНаУдаление И ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПредставлениеСпискаХозяйственныхОпераций()
	
	СписокОперацийПредставление = "";
	Для Каждого ЭлементСписка Из ДоступныеХозяйственныеОперации Цикл
		Если ЭлементСписка.Пометка Тогда
			Представление = ?(ПустаяСтрока(ЭлементСписка.Представление), ЭлементСписка.Значение, ЭлементСписка.Представление);
			СписокОперацийПредставление = СписокОперацийПредставление +
				?(ЗначениеЗаполнено(СписокОперацийПредставление), ", ", "") + Представление;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если ОтображатьГруппуКОформлению() Тогда
		Элементы.ГруппаКОформлению.Видимость = Истина;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОформлено;
		Элементы.ГруппаКОформлению.Видимость = Ложь;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоОтгрузке.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
	
	ОписаниеМетаданныхНакладных = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладных();
	ВыделенныеХозяйственныеОперации = ВыделенныеХозяйственныеОперации();
	
	// Перезаполнение команды "Создать"
	Для Каждого Элемент Из Элементы.СписокДокументыГруппаСоздать.ПодчиненныеЭлементы Цикл
		
		Элемент.Видимость = Ложь;
		
		Отбор = Новый Структура();
		Отбор.Вставить("КомандаСозданияФормы", Элемент.Имя);
		
		НайденныеСтроки = ОписаниеМетаданныхНакладных.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если ВыделенныеХозяйственныеОперации.Найти(Строка.ХозяйственнаяОперация) <> Неопределено
				И ПравоДоступа("Добавление", Строка.ОбъектМетаданныхДокумента) Тогда
				Элемент.Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаОформлениеОрганизация.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		Элементы.Склад.Видимость = Ложь;
		Элементы.СписокРаспоряженияНаОформлениеСклад.Видимость = Ложь;
		Элементы.ОтборСклад.Видимость = Ложь;
	КонецЕсли;
	
	// Перезаполнение списка статусов
	УстановитьСписокСтатусов();
	
	УстановитьОтборыПечать();
	
	УстановитьОтборыВводНаОсновании();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПечать()
	
	// Удаление списка печати
	УдалитьПодчиненныеЭлементыЭлементаФормы(Элементы.ПодменюПечать, Истина);
	
	// Удаление головной команды печати
	АдресКомандПечатиВоВременномХранилище = "АдресКомандПечатиВоВременномХранилище";
	КомандаФормы = Команды.Найти(АдресКомандПечатиВоВременномХранилище);
	Если КомандаФормы <> Неопределено Тогда
		Команды.Удалить(КомандаФормы);
	КонецЕсли;
	
	ИспользуемыеОбъектыМетаданных = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладныхПоОперациям(
		ВыделенныеХозяйственныеОперации());
	
	Отбор = Новый Структура("Накладная", Истина);
	НайденныеОбъектыНакладные = ИспользуемыеОбъектыМетаданных.НайтиСтроки(Отбор);
	
	ИспользуемыеНакладныеМетаданных = ИспользуемыеОбъектыМетаданных.Скопировать(НайденныеОбъектыНакладные, 
		"ОбъектМетаданныхДокумента").ВыгрузитьКолонку("ОбъектМетаданныхДокумента");
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать, ИспользуемыеНакладныеМетаданных);
	// Конец СтандартныеПодсистемы.Печать

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВводНаОсновании();
	
	// Удаление списка печати
	УдалитьПодчиненныеЭлементыЭлементаФормы(Элементы.ПодменюСоздатьНаОсновании, Истина);
	
	// Удаление головной команды печати
	АдресКомандСоздатьНаОснованииВоВременномХранилище = "АдресКомандСоздатьНаОснованииВоВременномХранилище";
	КомандаФормы = Команды.Найти(АдресКомандСоздатьНаОснованииВоВременномХранилище);
	Если КомандаФормы <> Неопределено Тогда
		Команды.Удалить(КомандаФормы);
	КонецЕсли;
	
	ИспользуемыеОбъектыМетаданных = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладныхПоОперациям(
		ВыделенныеХозяйственныеОперации());
	
	Отбор = Новый Структура("Накладная", Истина);
	НайденныеОбъектыНакладные = ИспользуемыеОбъектыМетаданных.НайтиСтроки(Отбор);
	
	ИспользуемыеНакладныеМетаданных = ИспользуемыеОбъектыМетаданных.Скопировать(НайденныеОбъектыНакладные, 
		"ОбъектМетаданныхДокумента").ВыгрузитьКолонку("ОбъектМетаданныхДокумента");
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании, ИспользуемыеНакладныеМетаданных);
	
КонецПроцедуры

&НаСервере
Функция ОтображатьГруппуКОформлению()
	
	СоответствияОпераций = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладныхПоОперациям(ВыделенныеХозяйственныеОперации());
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИспользуетсяРаспоряжение", Истина);
	
	НайденныеСтроки = СоответствияОпераций.НайтиСтроки(Отбор);
	
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьДокументыИспользующиеСтатус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокОформлено", "Дата");
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление", "СписокРаспоряженияНаОформлениеДатаДокумента");
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСтраницы(ДокументДляПересчета = Неопределено)
	
	ПеречитатьКОформлению(ДокументДляПересчета);
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	УстановитьДоступныеХозяйственныеОперации();
	ЗаполнитьДоступныеТипыЗаказовИТипыНакладных();
	РассчитатьНеобходимостьОтображенияКолонок();
	УстановитьОтборыДинамическогоСписка();
	
	ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотреблениеПоНесколькимЗаказам");
	ИспользоватьПеремещениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам");
	ИспользоватьСборкуПоНесколькимЗаказам = Ложь;
	ИпользоватьПередачуВПроизводствоПоНесколькимЗаказам = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	ЗаполнитьСписокСостоянийОформленияНакладной(Элементы.СостояниеНакладной.СписокВыбора);
	ЗаполнитьСписокСоответствияОрдеров(Элементы.СоответствиеРасходногоОрдера.СписокВыбора);
	ЗаполнитьСписокСоответствияОрдеров(Элементы.СостояниеПриходногоОрдера.СписокВыбора);
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ТипНакладной") Тогда
			
			ТаблицаОперацииНакладные = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладных();
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТипНакладной", Параметры.СтруктураБыстрогоОтбора.ТипНакладной);
			
			НайденныеСтроки = ТаблицаОперацииНакладные.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЭлементСписка = ДоступныеХозяйственныеОперации.НайтиПоЗначению(НайденнаяСтрока.ХозяйственнаяОперация);
				Если ЭлементСписка <> Неопределено Тогда
					ЭлементСписка.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьДоступныеТипыЗаказовИТипыНакладных();
			РассчитатьНеобходимостьОтображенияКолонок();
			
		КонецЕсли;
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ДатаОтгрузки") Тогда
			ОтборПериод = Параметры.СтруктураБыстрогоОтбора.ДатаОтгрузки;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьОрдернуюСхемуПриОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	ИспользоватьОрдернуюСхемуПриПоступлении = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении");
	
	Элементы.СписокРаспоряженияНаОформлениеСостояниеРасходногоОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.СписокРаспоряженияНаОформлениеСостояниеПриходногоОрдера.Видимость = ИспользоватьОрдернуюСхемуПриПоступлении;
	
	УстановитьВидимостьДоступность();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРаспоряженияПоДокументуОповещению(ДокументДляПересчета)
	
	Распоряжения = Новый Массив();
	
	Если Не ЗначениеЗаполнено(ДокументДляПересчета) Тогда
		Возврат Распоряжения;
	КонецЕсли;
	
	Если ТипЗнч(ДокументДляПересчета) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		Для Каждого Строка Из ДокументДляПересчета.ТоварыПоРаспоряжениям Цикл
			
			Распоряжение = Строка.Распоряжение;
			Если ЗначениеЗаполнено(Распоряжение) Тогда
				// Вход в рекурсию т.к. распоряжение может быть накладной (нужно вычислить до заказа)
				ДобавляемыйМассив = ПолучитьРаспоряженияПоДокументуОповещению(Распоряжение);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Распоряжения, ДобавляемыйМассив);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументДляПересчета) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		
		Распоряжение = ДокументДляПересчета.Распоряжение;
		// Вход в рекурсию т.к. распоряжение может быть накладной (нужно вычислить до заказа)
		Если ЗначениеЗаполнено(Распоряжение) Тогда
			ДобавляемыйМассив = ПолучитьРаспоряженияПоДокументуОповещению(Распоряжение);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Распоряжения, ДобавляемыйМассив);
		КонецЕсли;
		
	Иначе
		
		Если ТипыЗаказов.НайтиПоЗначению(ТипЗнч(ДокументДляПересчета)) <> Неопределено Тогда
			// Это заказ
			Распоряжения.Добавить(ДокументДляПересчета);
		Иначе
			// Это накладная
			Попытка
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументДляПересчета);
				ПараметрыЗаполнения = МенеджерДокумента.ПараметрыЗаполненияДокумента();
				
				Распоряжение = ДокументДляПересчета[ПараметрыЗаполнения.ИмяПоляЗаказ];
				Если ЗначениеЗаполнено(Распоряжение) Тогда
					Распоряжения.Добавить(Распоряжение);
				Иначе
					Распоряжения.Добавить(ДокументДляПересчета);
				КонецЕсли;
			Исключение
				// Документ не имеет метода ПараметрыЗаполненияДокумента, действия не требуются
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(Распоряжения);
	
	Возврат Распоряжения;
	
КонецФункции

&НаСервере
Процедура ПеречитатьКОформлению(ДокументДляПересчета = Неопределено)
	
	РаспоряженияДляПересчета = ПолучитьРаспоряженияПоДокументуОповещению(ДокументДляПересчета);
	
	ЧастичныйПересчет = ЗначениеЗаполнено(ДокументДляПересчета);
	
	Если ЧастичныйПересчет И РаспоряженияДляПересчета.Количество() = 0 Тогда
		Возврат; // Процедура вызвана при записи документа по которому не возможен частичный пересчет
	КонецЕсли;
	
	// Регистры заказов
	КОформлениюВнутреннееПотребление = 
		РегистрыНакопления.ЗаказыНаВнутреннееПотребление.РаспоряженияРМВнутреннееТовародвижение(ОтборСклад, РаспоряженияДляПересчета);
	
	КОформлениюЗаказыНаПеремещение = 
		РегистрыНакопления.ЗаказыНаПеремещение.РаспоряженияРМВнутреннееТовародвижение(ОтборСклад, РаспоряженияДляПересчета);
	
	КОформлениюЗаказыНаСборку = 
		РегистрыНакопления.ЗаказыНаСборку.РаспоряженияРМВнутреннееТовародвижение(ОтборСклад, РаспоряженияДляПересчета);
		
		
	МассивТипыЗаказов = ТипыЗаказов.ВыгрузитьЗначения();
	МассивТипыНакладных = ТипыНакладных.ВыгрузитьЗначения();
	
	// Регистры ордеров
	КОформлениюТоварыКОтгрузке = РегистрыНакопления.ТоварыКОтгрузке.РаспоряженияРМВнутреннееТовародвижение(МассивТипыЗаказов, 
		МассивТипыНакладных, ОтборСклад, РаспоряженияДляПересчета);
	
	КОформлениюТоварыКПоступлению = РегистрыНакопления.ТоварыКПоступлению.РаспоряженияРМВнутреннееТовародвижение(МассивТипыЗаказов, 
		МассивТипыНакладных, РаспоряженияДляПересчета);
	
	// Слияние таблиц регистров заказов в итоговую таблицу
	ТаблицаКОформлению = СписокРаспоряженияНаОформление.Выгрузить(Новый Массив(),);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КОформлениюВнутреннееПотребление, ТаблицаКОформлению);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КОформлениюЗаказыНаПеремещение, ТаблицаКОформлению);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КОформлениюЗаказыНаСборку, ТаблицаКОформлению);
	
	
	// Добавление данных таблиц ордеров в итоговую таблицу
	ДобавитьТаблицуОтгрузкиВИтоговую(КОформлениюТоварыКОтгрузке, ТаблицаКОформлению);
	ДобавитьТаблицуОтгрузкиВИтоговую(КОформлениюТоварыКПоступлению, ТаблицаКОформлению, Ложь);
	
	// Дополнение таблицы и отборы
	ТаблицаКОформлению = ЗаполнитьПоляШапкиДокументов(ТаблицаКОформлению);
	
	// Отборы по рассчитаным состояниям
	УстановитьОтборыПоСостояниям(ТаблицаКОформлению);
	
	Если ЧастичныйПересчет Тогда
		
		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("Ссылка");
		
		// Частичный пересчет таблицы
		Если ТаблицаКОформлению.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаКОформлению Цикл
				ПараметрыПоиска.Ссылка = Строка.Ссылка;
				НайденныеСтроки = СписокРаспоряженияНаОформление.НайтиСтроки(ПараметрыПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					// Пересчитывается существующая строка
					НайденнаяСтрока = НайденныеСтроки[0];
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Строка);
				Иначе
					// Добавляется новая строка
					НоваяСтрока = СписокРаспоряженияНаОформление.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Распоряжение больше не нужно отображать - к удалению
			Для Каждого Распоряжение Из РаспоряженияДляПересчета Цикл
				СтруктураПоиска = Новый Структура("Ссылка", Распоряжение);
				НайденныеСтроки = СписокРаспоряженияНаОформление.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СписокРаспоряженияНаОформление.Удалить(НайденныеСтроки[0]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// Полная загрузка таблицы
		СписокРаспоряженияНаОформление.Загрузить(ТаблицаКОформлению);
		СписокРаспоряженияНаОформление.Сортировать("Дата, Тип, Номер");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоСостояниям(ТаблицаКОформлению)
	
	Отбор = Новый Структура();
	
	Если ЗначениеЗаполнено(СостояниеНакладной) Тогда
		Отбор.Вставить("СостояниеНакладной", Число(СостояниеНакладной));
	КонецЕсли;
	Если ЗначениеЗаполнено(СостояниеОрдера) Тогда
		Отбор.Вставить("СостояниеОрдера", Число(СостояниеОрдера));
	КонецЕсли;
	Если ЗначениеЗаполнено(СостояниеПриходногоОрдера) Тогда
		Отбор.Вставить("СостояниеПриходногоОрдера", Число(СостояниеПриходногоОрдера));
	КонецЕсли;
	
	// Отбор по полям
	Если Отбор.Количество() > 0 Тогда
		НайденныеСтроки = ТаблицаКОформлению.НайтиСтроки(Отбор);
		ТаблицаКОформлению = ТаблицаКОформлению.Скопировать(НайденныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуОтгрузкиВИтоговую(ТаблицаИсточник, ТаблицаПриемник, ДобавлятьНовыеСтроки = Истина)
	
	ЕстьСостояниеОрдера = ТаблицаИсточник.Колонки.Найти("СостояниеОрдера") <> Неопределено;
	ЕстьСостояниеПриходногоОрдера = ТаблицаИсточник.Колонки.Найти("СостояниеПриходногоОрдера") <> Неопределено;
	
	Для Каждого Строка Из ТаблицаИсточник Цикл
		
		// Слияние строки с таблицей ТаблицаКОформлению
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ссылка", Строка.Ссылка);
		Если ДобавлятьНовыеСтроки Тогда
			Отбор.Вставить("Склад", Строка.Склад);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаПриемник.НайтиСтроки(Отбор);
		
		Если ЕстьСостояниеПриходногоОрдера 
			И ЗначениеЗаполнено(ОтборСклад) Тогда
			СоответствуетОтборуПоСкладу = ?(Строка.СкладПолучатель = ОтборСклад, Истина, Ложь);
		Иначе
			СоответствуетОтборуПоСкладу = Истина;
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТаблицаКОформлению = НайденныеСтроки[0];
			Если ЕстьСостояниеОрдера Тогда
				СтрокаТаблицаКОформлению.СостояниеОрдера = Строка.СостояниеОрдера;
			КонецЕсли;
			Если ЕстьСостояниеПриходногоОрдера Тогда
				СтрокаТаблицаКОформлению.СостояниеПриходногоОрдера = Строка.СостояниеПриходногоОрдера;
			КонецЕсли;
			
		ИначеЕсли ДобавлятьНовыеСтроки 
			Или (ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ЗаказНаСборку") И СоответствуетОтборуПоСкладу)
			Или (ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.СборкаТоваров") И СоответствуетОтборуПоСкладу) Тогда
			// При отсутствии заказа в ТаблицаКОформлению, считаем что накладная создана и не имеет расхождений
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			// Значения по умолчанию
			Если ТипыНакладных.НайтиПоЗначению(ТипЗнч(Строка.Ссылка)) <> Неопределено Тогда
				// Распоряжение - накладная. Заказы не используются
				НоваяСтрока.СостояниеНакладной = 4;
			Иначе
				// Распоряжение - заказ. Если не найден в существующих строках, значит нет расхождений заказ-накладная
				НоваяСтрока.СостояниеНакладной = 0;
			КонецЕсли;
			
			Если ЕстьСостояниеПриходногоОрдера 
				И Не ЗначениеЗаполнено(НоваяСтрока.Склад) Тогда
				НоваяСтрока.Склад = Строка.СкладПолучатель;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()
	
	ВыделенныеХозяйственныеОперации = ВыделенныеХозяйственныеОперации();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОформлено,
		"ХозяйственнаяОперация",
		ВыделенныеХозяйственныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОформлено,
		"Склад",
		ОтборСклад,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборСклад));
		
	СписокОформлено.Параметры.УстановитьЗначениеПараметра("НачалоПериода", ИнтервалОформленныхДокументов.ДатаНачала);
	СписокОформлено.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(ИнтервалОформленныхДокументов.ДатаОкончания),
			КонецДня(ИнтервалОформленныхДокументов.ДатаОкончания),
			ИнтервалОформленныхДокументов.ДатаОкончания));
	
КонецПроцедуры

&НаСервере
Функция ИмяДокумента(Документ)
	
	Возврат Документ.Метаданные().Имя;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписок()
	
	Элементы.СписокОформлено.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ВыделенныеХозяйственныеОперации()
	
	Массив = Новый Массив();
	
	Для Каждого Строка Из ДоступныеХозяйственныеОперации Цикл
		Если Строка.Пометка Тогда
			Массив.Добавить(Строка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Пустой массив означает отсутствие отбора. Отсутствие отбора равнозначно всем выбранным элементам
	Если Массив.Количество() = 0 Тогда
		Массив = ДоступныеХозяйственныеОперации.ВыгрузитьЗначения();
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Функция ВыбратьИзВыделенныхСтрокСпискаДокументыПоИмениМетаданных(ИмяДокумента)
	
	ВыделенныеСтроки = Элементы.СписокОформлено.ВыделенныеСтроки;
	
	ПодходящиеДокументы = Новый Массив();
	
	Тип = Тип("ДокументСсылка." + ИмяДокумента);
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СписокОформлено.ДанныеСтроки(Строка);
		
		Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип Тогда
			ПодходящиеДокументы.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодходящиеДокументы;
	
КонецФункции

&НаСервере
Процедура УдалитьПодчиненныеЭлементыЭлементаФормы(ЭлементФормы, УдалятьКоманды = Ложь)
	
	ЭлементыНаУдаление = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлементыНаУдаление, ЭлементФормы.ПодчиненныеЭлементы);
	Для ИндексЭлемента = 0 По ЭлементыНаУдаление.Количество() - 1 Цикл
		
		Элемент = ЭлементыНаУдаление[ИндексЭлемента];
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			УдалитьПодчиненныеЭлементыЭлементаФормы(Элемент, УдалятьКоманды);
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И УдалятьКоманды Тогда
			КомандаКУдалению = Команды.Найти(Элемент.ИмяКоманды);
			Если КомандаКУдалению <> Неопределено Тогда
				Команды.Удалить(КомандаКУдалению);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.Удалить(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

#Область УстановкаСтатуса

&НаСервере
Процедура УстановитьСписокСтатусов()
	
	СписокУстановитьСтатус = Элементы.УстановитьСтатус;
	
	// Очистка элементов в случае переинициализации списка статусов
	УдалитьПодчиненныеЭлементыЭлементаФормы(СписокУстановитьСтатус);
	
	СоответствиеКомандСтатусам.Очистить();
	
	СтатусыДокументов = Новый ТаблицаЗначений();
	СтатусыДокументов.Колонки.Добавить("ИмяДокумента", Новый ОписаниеТипов("Строка"));
	СтатусыДокументов.Колонки.Добавить("СинонимДокумента", Новый ОписаниеТипов("Строка"));
	СтатусыДокументов.Колонки.Добавить("СтатусСтрока", Новый ОписаниеТипов("Строка"));
	СтатусыДокументов.Колонки.Добавить("Статус");
	
	СоответствияОпераций = РегистрыСведений.ДанныеВнутреннихДокументов.ОписаниеМетаданныхНакладныхПоОперациям(
		ВыделенныеХозяйственныеОперации());
		
	СоответствияОпераций.Свернуть("ОбъектМетаданныхДокумента, ИспользуютсяСтатусы");
	
	Для Каждого СтрокаСоответствия Из СоответствияОпераций Цикл
		
		Если СтрокаСоответствия.ИспользуютсяСтатусы Тогда
			Объект = СтрокаСоответствия.ОбъектМетаданныхДокумента;
			
			СтатусыДокумента = Документы[Объект.Имя].СтатусыДокумента();
			
			Для Каждого Статус Из СтатусыДокумента Цикл
				СтрокаСтатусаДокумета = СтатусыДокументов.Добавить();
				СтрокаСтатусаДокумета.ИмяДокумента = Объект.Имя;
				СтрокаСтатусаДокумета.СинонимДокумента = Объект.Синоним;
				СтрокаСтатусаДокумета.СтатусСтрока = Статус.Ключ;
				СтрокаСтатусаДокумета.Статус = Статус.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Индекс = 0 По СтатусыДокументов.Количество() - 1 Цикл
		
		СтрокаСтатусаДокумета = СтатусыДокументов[Индекс];
		
		УникальноеИмяКнопки = СтрокаСтатусаДокумета.ИмяДокумента + Индекс;
		
		Если Команды.Найти(УникальноеИмяКнопки) = Неопределено Тогда
			Команда = Команды.Добавить(УникальноеИмяКнопки);
			Команда.Действие = "УстановитьСтатус";
		КонецЕсли;
		
		Кнопка = Элементы.Добавить(УникальноеИмяКнопки, Тип("КнопкаФормы"), СписокУстановитьСтатус);
		Кнопка.Заголовок = СтрокаСтатусаДокумета.СинонимДокумента + ": " + СтрокаСтатусаДокумета.Статус;
		Кнопка.ИмяКоманды = УникальноеИмяКнопки;
		
		СтрокаСоответствияКоманд = СоответствиеКомандСтатусам.Добавить();
		СтрокаСоответствияКоманд.ИмяКоманды = УникальноеИмяКнопки;
		СтрокаСоответствияКоманд.Статус = СтрокаСтатусаДокумета.Статус;
		СтрокаСоответствияКоманд.СтатусСтрока = СтрокаСтатусаДокумета.СтатусСтрока;
		СтрокаСоответствияКоманд.ДокументСтрока = СтрокаСтатусаДокумета.ИмяДокумента;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатус(Команда)
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИмяКоманды", Команда.Имя);
	
	НайденныйСтатус = СоответствиеКомандСтатусам.НайтиСтроки(Отбор);
	
	Если НайденныйСтатус.Количество() > 0 Тогда
		
		СтрокаСтатуса = НайденныйСтатус[0];
		
		ПредставлениеСтатуса = Строка(СтрокаСтатуса.Статус);
		
		ВыделенныеСтроки = ВыбратьИзВыделенныхСтрокСпискаДокументыПоИмениМетаданных(СтрокаСтатуса.ДокументСтрока);
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не выделено ни одного документа, для которого можно установить выбранный статус';uk='Не виділено жодного документа, для якого можна встановити вибраний статус'"));
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru='У выделенных в списке документов будет установлен статус ""%ПредставлениеСтатуса%"". Продолжить?';uk='У виділених у списку документів буде встановлено статус ""%ПредставлениеСтатуса%"". Продовжити?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ПредставлениеСтатуса%", ПредставлениеСтатуса);
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Установить';uk='Встановити'"));
		Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не устанавливать';uk='Не встановлювати'"));
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ПредставлениеСтатуса, СтатусСтрока", ВыделенныеСтроки, ПредставлениеСтатуса, СтрокаСтатуса.СтатусСтрока)), ТекстВопроса,Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ПредставлениеСтатуса = ДополнительныеПараметры.ПредставлениеСтатуса;
	СтатусСтрока = ДополнительныеПараметры.СтатусСтрока;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, СтатусСтрока);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокОформлено, КоличествоОбработанных, ВыделенныеСтроки.Количество(), ПредставлениеСтатуса);
	
КонецПроцедуры

// Заполняет список для отбора распоряжений, исходя из состояния оформления ордеров по распоряжениям.
// Используется в формах списков распоряжений на отгрузку.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен сосояниями оформления.
//
Процедура ЗаполнитьСписокСоответствияОрдеров(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Соответствуют накладным';uk='Відповідають накладним'"),    Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Не оформлены';uk='Не оформлені'"),               Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Не соответствуют накладным';uk='Не відповідають накладним'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	СписокВыбора.Добавить("4", НСтр("ru='Не используется ордерная схема';uk='Не використовується ордерна схема'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
КонецПроцедуры

// Заполняет список для отбора распоряжений, исходя из состояния оформления накладных по распоряжениям.
// Используется в формах списков распоряжений на отгрузку.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен сосояниями оформления.
//
Процедура ЗаполнитьСписокСостоянийОформленияНакладной(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Все оформлено';uk='Все оформлено'"),        Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Создать накладную';uk='Створити накладну'"),    Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2", НСтр("ru='Дооформить накладную';uk='Дооформити накладну'"), Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	СписокВыбора.Добавить("4", НСтр("ru='Не используются заказы';uk='Не використовуються замовлення'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДоступныеТипыЗаказовИТипыНакладных()
	
	ОтборТипов = Новый Структура();
	ОтборТипов.Вставить("Накладная", Ложь);
	ОтборТипов.Вставить("ИспользуетсяРаспоряжение", Истина);
	
	ВыделенныеХозяйственныеОперации = ВыделенныеХозяйственныеОперации();
	
	ТипыЗаказов.ЗагрузитьЗначения(РегистрыСведений.ДанныеВнутреннихДокументов.ИспользуемыеТипыДокументовПоОперациям(
		ВыделенныеХозяйственныеОперации, ОтборТипов));
	
	ОтборТипов = Новый Структура();
	ОтборТипов.Вставить("Накладная", Истина);
	
	ТипыНакладных.ЗагрузитьЗначения(РегистрыСведений.ДанныеВнутреннихДокументов.ИспользуемыеТипыДокументовПоОперациям(
		ВыделенныеХозяйственныеОперации, ОтборТипов));
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНеобходимостьОтображенияКолонок()
	
	ОтборТипов = Новый Структура();
	ОтборТипов.Вставить("ИспользуютсяСтатусы", Истина);
	
	ВыделенныеХозяйственныеОперации = ВыделенныеХозяйственныеОперации();
	
	ИспользуемыеТипыДокументовСоСтатусами = РегистрыСведений.ДанныеВнутреннихДокументов.ИспользуемыеТипыДокументовПоОперациям(
		ВыделенныеХозяйственныеОперации, ОтборТипов);
	
	ЕстьДокументыИспользующиеСтатус = ИспользуемыеТипыДокументовСоСтатусами.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ОтборТипОбработкаВыбораСервер()
	
	ЗаполнитьДоступныеТипыЗаказовИТипыНакладных();
	РассчитатьНеобходимостьОтображенияКолонок();
	УстановитьВидимостьДоступность();
	УстановитьЗаголовок();
	
	УстановитьОтборыДинамическогоСписка();
	ПеречитатьКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура ОтборТипОчисткаСервер()
	
	ЗаполнитьДоступныеТипыЗаказовИТипыНакладных();
	РассчитатьНеобходимостьОтображенияКолонок();
	УстановитьВидимостьДоступность();
	УстановитьЗаголовок();
	ПерезаполнитьСтраницы();
	
КонецПроцедуры

&НаСервере
Функция СформироватьКлючНазначенияФормы()
	
	КлючНазначения = "";
	Если Параметры.Свойство("КлючНазначенияФормы") Тогда
		КлючНазначения = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	Если ПустаяСтрока(КлючНазначения) Тогда
		КлючНазначения = "ВнутреннееТовародвижение";
	КонецЕсли;
	
	Возврат КлючНазначения;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегистрСведений.ДанныеВнутреннихДокументов.Форма.ФормаСписка", КлючНазначенияИспользования);
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
	
		ИнтервалОформленныхДокументов = Настройки.ИнтервалОформленныхДокументов;
		ОтборПериод = Настройки.ОтборПериод;
		ОтборСклад = Настройки.ОтборСклад;
		СостояниеНакладной = Настройки.СостояниеНакладной;
		СостояниеОрдера = Настройки.СостояниеОрдера;
		СостояниеПриходногоОрдера = Настройки.СостояниеПриходногоОрдера;
		
		Если Не Параметры.РабочееМестоЕдинственнойНакладной Тогда
			
			ДоступныеХозяйственныеОперации = Настройки.ДоступныеХозяйственныеОперации;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ИменаСохраняемыхРеквизитов =
		"ИнтервалОформленныхДокументов,
		|ОтборПериод,
		|ОтборСклад,
		|СостояниеНакладной,
		|СостояниеОрдера,
		|СостояниеПриходногоОрдера,
		|ДоступныеХозяйственныеОперации";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегистрСведений.ДанныеВнутреннихДокументов.Форма.ФормаСписка", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

#Область РаботаСКешируемымиЗначениями

&НаСервере 
Функция ЗаполнитьПоляШапкиДокументов(Таблица)
	
	// Получение полей шапки и проверка доступа RLS
	// Отборы
	
	ВыделенныеХозяйственныеОперации = ВыделенныеХозяйственныеОперации();
	ТипыДокументов = РегистрыСведений.ДанныеВнутреннихДокументов.ИспользуемыеТипыДокументовПоОперациям(ВыделенныеХозяйственныеОперации);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ХозяйственныеОперации", ВыделенныеХозяйственныеОперации);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтборПериод);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Склад", ОтборСклад);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Склад,
	|	Таблица.СостояниеНакладной,
	|	Таблица.СостояниеОрдера,
	|	Таблица.СостояниеПриходногоОрдера,
	|	Таблица.Состояние,
	|	Таблица.ЕстьРасхожденияОрдерНакладная,
	|	Таблица.СкладПолучатель,
	|	Таблица.Тип
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Таблица.Ссылка) В (&ТипыДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка,
	|	Документ.Организация,
	|	Документ.Ответственный,
	|	Документ.Подразделение,
	|	NULL КАК СкладПолучатель,
	|	NULL КАК Склад,
	|	Документ.ХозяйственнаяОперация,
	|	Документ.Комментарий,
	|	Документ.Номер,
	|	Документ.Дата
	|ПОМЕСТИТЬ ВтДанныеШапкиДокументов
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтТовары.Ссылка
	|			ИЗ
	|				ВтТовары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Организация,
	|	Документ.Ответственный,
	|	Документ.Подразделение,
	|	NULL КАК СкладПолучатель,
	|	NULL КАК Склад,
	|	Документ.ХозяйственнаяОперация,
	|	Документ.Комментарий,
	|	Документ.Номер,
	|	Документ.Дата
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление КАК Документ
	|ГДЕ
	|	Документ.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтТовары.Ссылка
	|			ИЗ
	|				ВтТовары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Организация,
	|	Документ.Ответственный,
	|	Документ.Подразделение,
	|	Документ.СкладПолучатель КАК СкладПолучатель,
	|	NULL КАК Склад,
	|	Документ.ХозяйственнаяОперация,
	|	Документ.Комментарий,
	|	Документ.Номер,
	|	Документ.Дата
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтТовары.Ссылка
	|			ИЗ
	|				ВтТовары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Организация,
	|	Документ.Ответственный,
	|	Документ.Подразделение,
	|	Документ.СкладПолучатель КАК СкладПолучатель,
	|	NULL КАК Склад,
	|	Документ.ХозяйственнаяОперация,
	|	Документ.Комментарий,
	|	Документ.Номер,
	|	Документ.Дата
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК Документ
	|ГДЕ
	|	Документ.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтТовары.Ссылка
	|			ИЗ
	|				ВтТовары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Организация,
	|	Документ.Ответственный,
	|	Документ.Подразделение,
	|	Документ.Склад КАК СкладПолучатель,
	|	Документ.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров),
	|	Документ.Комментарий,
	|	Документ.Номер,
	|	Документ.Дата
	|ИЗ
	|	Документ.СборкаТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтТовары.Ссылка
	|			ИЗ
	|				ВтТовары)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Организация,
	|	Документ.Ответственный,
	|	Документ.Подразделение,
	|	Документ.Склад КАК СкладПолучатель,
	|	Документ.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров),
	|	Документ.Комментарий,
	|	Документ.Номер,
	|	Документ.Дата
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Документ
	|ГДЕ
	|	Документ.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтТовары.Ссылка
	|			ИЗ
	|				ВтТовары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДанныеШапки.Номер,
	|	ВтДанныеШапки.Дата,
	|	Таблица.Ссылка,
	|	Таблица.Склад,
	|	ВтДанныеШапки.Организация,
	|	ВтДанныеШапки.Ответственный,
	|	ВтДанныеШапки.Комментарий,
	|	Таблица.СостояниеНакладной,
	|	ВЫБОР КОГДА СкладыОтгрузки.Ссылка ЕСТЬ NULL Тогда 
	|		4
	|	Иначе
	|		Таблица.СостояниеОрдера
	|	Конец КАК СостояниеОрдера,
	|	ВЫБОР КОГДА СкладыПолучатели.Ссылка ЕСТЬ NULL Тогда 
	|		4
	|	Иначе
	|		ВЫБОР КОГДА Таблица.СостояниеПриходногоОрдера = 0 И Таблица.СостояниеНакладной = 1 Тогда 
	|			1
	|		Иначе
	|			Таблица.СостояниеПриходногоОрдера
	|		Конец
	|	Конец КАК СостояниеПриходногоОрдера,
	|	Таблица.Состояние,
	|	Таблица.ЕстьРасхожденияОрдерНакладная,
	|	ВтДанныеШапки.ХозяйственнаяОперация,
	|	ВтДанныеШапки.СкладПолучатель,
	|	Таблица.Тип,
	|	ВтДанныеШапки.Подразделение
	|ИЗ
	|	ВтТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеШапкиДокументов КАК ВтДанныеШапки
	|		ПО Таблица.Ссылка = ВтДанныеШапки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыОтгрузки
	|		ПО ЕСТЬNULL(ВтДанныеШапки.Склад, Таблица.Склад) = СкладыОтгрузки.Ссылка
	|			И (СкладыОтгрузки.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (СкладыОтгрузки.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыПолучатели
	|		ПО ВтДанныеШапки.СкладПолучатель = СкладыПолучатели.Ссылка
	|			И (СкладыПолучатели.ИспользоватьОрдернуюСхемуПриПоступлении)
	|			И (СкладыПолучатели.ДатаНачалаОрдернойСхемыПриПоступлении <= &НачалоТекущегоДня)
	|ГДЕ
	|	НЕ ВтДанныеШапки.Ссылка ЕСТЬ NULL";
	
	Если ВыделенныеХозяйственныеОперации.Количество() < ДоступныеХозяйственныеОперации.Количество() Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И ВтДанныеШапки.ХозяйственнаяОперация В (&ХозяйственныеОперации)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПериод) Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И НАЧАЛОПЕРИОДА(ВтДанныеШапки.Дата, ДЕНЬ) <= &ДатаОкончания";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И Таблица.Склад = &Склад";
	КонецЕсли;
	
	ДополненнаяТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ДополненнаяТаблица;
	
КонецФункции

#КонецОбласти

#КонецОбласти

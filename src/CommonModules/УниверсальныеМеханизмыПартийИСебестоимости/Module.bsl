///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры для механизмов партионного учета и расчета себестоимости.
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ВременныеТаблицы

// Получает из переданного контейнера-источника данных менеджер временных таблиц.
//
Функция ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ)
	
	Если ТипЗнч(КонтейнерМенеджераВТ) = Тип("МенеджерВременныхТаблиц") Тогда
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ;
	Иначе // менеджер хранится в одноименном свойстве структуры или запроса
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Уничтожает указанные временные таблицы
//
Процедура УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИменаТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	ТекстЗапроса 	= "";
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		Если НЕ ВременнаяТаблицаСуществует(Запрос.МенеджерВременныхТаблиц, КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса 
			+ ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет существование временной таблицы с указанным именем.
//
Функция ВременнаяТаблицаСуществует(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.8.0") > 0 Тогда
		
		// Из-за ошибки Платформы №50006544 нельзя воспользоваться методом
		// МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицы)
		// Поэтому будем искать временную таблицу перебором элементов коллекции.
		
		Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
			Если НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ИмяВременнойТаблицы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// В версиях платформы младше 8.3.8 нет платформенных средств для проверки существования временной таблицы.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ТаблицаСуществует
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяВременнойТаблицы);
	
	Попытка
		Запрос.Выполнить();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область НумерацияИРазделениеНаПорцииСтрокВременнойТаблицы

// Возвращает имя колонки по умолчанию для нумерации строк временной таблицы.
//
Функция ИмяКолонкиДляНумерацииПоУмолчанию()
	Возврат "К";
КонецФункции

// Добавляет колонку для нумерации строк в таблицу значений.
//
Процедура ДобавитьКолонкуДляНумерацииСтрок(Таблица, ИмяПоляНомераСтроки = "")
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки) Тогда
		ИмяПоляНомераСтроки = ИмяКолонкиДляНумерацииПоУмолчанию();
	КонецЕсли;
	
	ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераСтроки);
	
КонецПроцедуры

// Формирует параметры нумерации строк временной таблицы.
//
Функция СформироватьПараметрыНумерацииСтрокВременнойТаблицы(ИмяПоляРазделителя,
			ИменаСуммируемыхПолей = "", ИменаПолейУпорядочивания = "", ИмяПоляНомераСтроки = "",
			ИменаПолейИндексирования = "", ИмяПоляНакопления = "") Экспорт
	
	ПараметрыНумерации = Новый Структура;
	ПараметрыНумерации.Вставить("ИмяПоляРазделителя", 		ИмяПоляРазделителя);
	ПараметрыНумерации.Вставить("ИменаСуммируемыхПолей", 	ИменаСуммируемыхПолей);
	ПараметрыНумерации.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляРазделителя, ИменаПолейУпорядочивания));
	ПараметрыНумерации.Вставить("ИмяПоляНомераСтроки", 		?(НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки), ИмяКолонкиДляНумерацииПоУмолчанию(), ИмяПоляНомераСтроки));
	ПараметрыНумерации.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыНумерации.ИмяПоляНомераСтроки, ИменаПолейИндексирования));
	ПараметрыНумерации.Вставить("ИмяПоляНакопления", 		ИмяПоляНакопления);
	
	Возврат ПараметрыНумерации;
	
КонецФункции

// Заполняет номера строк временной таблицы.
//
Процедура ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ИмяПронумерованнойТаблицы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПронумерованнойТаблицы) Тогда
		ИмяПронумерованнойТаблицы = ИмяТаблицы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РазмерПорции", ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);
	
	ПустаяТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	// Выполним группировку строк временной таблицы по всем полям, не являющимися полями суммирования.
	Если ЗначениеЗаполнено(ПараметрыНумерации.ИменаСуммируемыхПолей) Тогда
		
		СтруктураИменаСуммируемыхПолей = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);
		
		ТекстПоляТаблицы = "";
		ТекстПоляГруппировки  = "";
		
		Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
			
			Если СтруктураИменаСуммируемыхПолей.Свойство(КолонкаДанных.Имя) Тогда
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "СУММА(Т." + КолонкаДанных.Имя + ") КАК " + КолонкаДанных.Имя;
			Иначе
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя + " КАК " + КолонкаДанных.Имя;
				ТекстПоляГруппировки = ТекстПоляГруппировки + ?(ТекстПоляГруппировки = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстПоляГруппировки = ?(ТекстПоляГруппировки = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстПоляГруппировки;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%1
		|ПОМЕСТИТЬ %2ДляГруппировки
		|ИЗ
		|	%2 КАК Т
		|%3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%2ДляГруппировки КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ %2ДляГруппировки
		|";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ТекстПоляТаблицы, ИмяТаблицы, ТекстПоляГруппировки);
		Запрос.Выполнить();
		
	КонецЕсли;
		
	// Получим полный список полей для упорядочивания - одни и те же данные должны всегда сортироваться одинаково.
	// Добавим в список все остальные колонки, не указанные в списке полей упорядочивания.
	// По суммовым полям будем упорядочивать после несуммовых полей.
	ИменаСуммируемыхПолей = ПараметрыНумерации.ИменаСуммируемыхПолей;
	ИменаВсехПолейУпорядочивания = СтрЗаменить(ПараметрыНумерации.ИменаПолейУпорядочивания, "	", " ");
	
	СтруктураИсключаемыеПоля = Новый Структура(ПараметрыНумерации.ИмяПоляНомераСтроки + ", НомерСтроки, ЗапросИсточник, РасчетЗавершен");
	СтруктураИменаПолей 	 = Новый Структура(
		СтрЗаменить(СтрЗаменить(НРег(ИменаВсехПолейУпорядочивания), " возр", ""), " убыв", "")
		+ ?(ИменаСуммируемыхПолей = "", "", ", " + ИменаСуммируемыхПолей));
	
	Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
		
		Если СтруктураИсключаемыеПоля.Свойство(КолонкаДанных.Имя)  // служебное поле
		 ИЛИ СтруктураИменаПолей.Свойство(КолонкаДанных.Имя) Тогда // поле уже используется для упорядочивания
			Продолжить;
		КонецЕсли;
		
		Если КолонкаДанных.ТипЗначения.СодержитТип(Тип("Число")) Тогда // имена полей суммирования не указаны - суммируем по всем числовым полям
			ИменаСуммируемыхПолей = ИменаСуммируемыхПолей + ?(ИменаСуммируемыхПолей = "", "", ", ") + КолонкаДанных.Имя;
		Иначе
			ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания + ", " + КолонкаДанных.Имя;
		КонецЕсли;
		
		СтруктураИменаПолей.Вставить(СтруктураИменаПолей);
		
	КонецЦикла;
	
	ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания + ?(ИменаСуммируемыхПолей = "", "", ", ") + ИменаСуммируемыхПолей;
	
	// Получим перечень имен колонок таблицы.
	ДобавитьКолонкуДляНумерацииСтрок(ПустаяТаблицаДанных, ПараметрыНумерации.ИмяПоляНомераСтроки);
	
	ИменаКолонок = "";
	Для Каждого ТекКолонка Из ПустаяТаблицаДанных.Колонки Цикл
		ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + "Т." + ТекКолонка.Имя;
	КонецЦикла;
	
	// Разделим строки на порции для того, чтобы не получить слишком большую выборку, которая вызовет ошибку нехватки памяти.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.%2 КАК Разделитель,
	|	СУММА(1) КАК КоличествоСтрок
	|ПОМЕСТИТЬ ВТПорцииСтрок
	|ИЗ
	|	%1 КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.%2";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ПараметрыНумерации.ИмяПоляРазделителя);
	Запрос.Выполнить();
	
	ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
		ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ,
		"КоличествоСтрок", "Разделитель",, "Разделитель, НомерПорции");
	
	МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТПорцииСтрок");
	НомерСтроки  	= 0; // нумерация строк начинается с 0
	
	// Выберем данные исходной таблицы порциями.
	// Даже если исходная таблица не содержит строк цикл надо выполнить один раз, для формирования вспомогательных временных таблиц.
	Для НомерПорции = 1 По Макс(МаксНомерПорции, 1) Цикл
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.*
		|ИЗ
		|	%1 КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорцииСтрок КАК ПорцииСтрок
		|			ПО Т.%2 = ПорцииСтрок.Разделитель
		|			И ПорцииСтрок.НомерПорции = &НомерПорции
		|УПОРЯДОЧИТЬ ПО
		|	%3";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
			ИмяТаблицы,
			ПараметрыНумерации.ИмяПоляРазделителя,
			ИменаВсехПолейУпорядочивания);
		
		Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		// Добавим колонку номера строки если ее еще нет.
		ДобавитьКолонкуДляНумерацииСтрок(Таблица, ПараметрыНумерации.ИмяПоляНомераСтроки);
		
		// Пронумеруем строки текущей порции (нумерация сквозная для всей исходной таблицы).
		// Если требуется, то при этом в специальной колонке накопим сумму значений этой колонки в предыдущих строках.
		НакопленноеЗначение = 0;
		
		Для Каждого ТекСтр Из Таблица Цикл
			
			ТекСтр[ПараметрыНумерации.ИмяПоляНомераСтроки] = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
			
			Если ЗначениеЗаполнено(ПараметрыНумерации.ИмяПоляНакопления) Тогда
				ТекущееЗначениеНакопления = ТекСтр[ПараметрыНумерации.ИмяПоляНакопления];
				ТекСтр[ПараметрыНумерации.ИмяПоляНакопления] = НакопленноеЗначение;
				НакопленноеЗначение = НакопленноеЗначение + ТекущееЗначениеНакопления;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НомерПорции = 1 Тогда // выбрана первая порция

			Запрос.Текст =
			"ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации
			|ИЗ
			|	&Т КАК Т";
			
		Иначе // выбрана вторая или следующие порции
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации2
			|ИЗ
			|	&Т КАК Т
			|;
			|///////////////////////////
			|ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации3
			|ИЗ
			|	%1ДляНумерации КАК Т
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	%2
			|ИЗ
			|	%1ДляНумерации2 КАК Т
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации2
			|;
			|///////////////////////////
			|ВЫБРАТЬ
			|	%2
			|ПОМЕСТИТЬ %1ДляНумерации
			|ИЗ
			|	%1ДляНумерации3 КАК Т
			|;
			|///////////////////////////
			|УНИЧТОЖИТЬ %1ДляНумерации3";
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы, ИменаКолонок);
		
		Запрос.УстановитьПараметр("Т", Таблица);
		Запрос.Выполнить();
		
	КонецЦикла;
	
	// Поместим пронумерованные данные в итоговую временную таблицу.
	Запрос.Текст =
	"УНИЧТОЖИТЬ %1
	|;
	|///////////////////////////
	|ВЫБРАТЬ
	|	%3
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	%1ДляНумерации КАК Т
	|%4
	|;
	|///////////////////////////
	|УНИЧТОЖИТЬ %1ДляНумерации";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ИмяТаблицы,
		ИмяПронумерованнойТаблицы,
		ИменаКолонок,
		?(НЕ ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейИндексирования), "", "ИНДЕКСИРОВАТЬ ПО " + ПараметрыНумерации.ИменаПолейИндексирования));
	
	Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТПорцииСтрок");
	
	// Проверим корректность новой нумерации.
	РазмерТаблицыДанных = РазмерВременнойТаблицы(Запрос, ИмяПронумерованнойТаблицы);
	
	Если РазмерТаблицыДанных > 0 Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(Т.КоличествоНомеров) КАК КоличествоНомеров,
		|	СУММА(Т.МинимальныйНомер)  КАК МинимальныйНомер,
		|	СУММА(Т.МаксимальныйНомер) КАК МаксимальныйНомер
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.%2) КАК КоличествоНомеров,
		|		0 КАК МинимальныйНомер,
		|		0 КАК МаксимальныйНомер
		|	ИЗ
		|		%1 КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		МИНИМУМ(Т.%2),
		|		0
		|	ИЗ
		|		%1 КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		МАКСИМУМ(Т.%2)
		|	ИЗ
		|		%1 КАК Т) КАК Т";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
			ИмяПронумерованнойТаблицы,
			ПараметрыНумерации.ИмяПоляНомераСтроки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.КоличествоНомеров <> РазмерТаблицыДанных Тогда
			ВызватьИсключение НСтр("ru='Ошибка нумерации временной таблицы: не соблюдается уникальность нумерации.';uk='Помилка нумерації тимчасової таблиці: не дотримується унікальність нумерації.'");
		ИначеЕсли Выборка.МинимальныйНомер <> 0 Тогда
			ВызватьИсключение НСтр("ru='Ошибка нумерации временной таблицы: некорректный минимальный номер.';uk='Помилка нумерації тимчасової таблиці: некоректний мінімальний номер.'");
		ИначеЕсли Выборка.МаксимальныйНомер <> РазмерТаблицыДанных - 1 Тогда
			ВызватьИсключение НСтр("ru='Ошибка нумерации временной таблицы: некорректный максимальный номер.';uk='Помилка нумерації тимчасової таблиці: некоректний максимальний номер.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Возвращает имя колонки по умолчанию для номеров порций временных таблиц.
//
Функция ИмяКолонкиДляНомераПорцииПоУмолчанию()
	Возврат "НомерПорции";
КонецФункции

// Добавляет колонку для номеров порций в таблицу значений.
//
Процедура ДобавитьКолонкуДляНомеровПорцийСтрок(Таблица, ИмяПоляНомераПорции = "")
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции) Тогда
		ИмяПоляНомераПорции = ИмяКолонкиДляНомераПорцииПоУмолчанию();
	КонецЕсли;
	
	ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераПорции);
	
КонецПроцедуры

// Формирует параметры разделения временной таблицы на порции.
//
Функция СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(РазмерПорции, ИмяПоляВесаСтроки,
			ИменаПолейУпорядочивания = "", ИмяПоляНомераПорции = "", ИменаПолейИндексирования = "") Экспорт
	
	ПараметрыРазделения = Новый Структура;
	ПараметрыРазделения.Вставить("РазмерПорции", 		 	 РазмерПорции);
	ПараметрыРазделения.Вставить("ИмяПоляВесаСтроки", 		 ИмяПоляВесаСтроки);
	ПараметрыРазделения.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляВесаСтроки + " " + "УБЫВ", ИменаПолейУпорядочивания));
	ПараметрыРазделения.Вставить("ИмяПоляНомераПорции", 	 ?(НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции), ИмяКолонкиДляНомераПорцииПоУмолчанию(), ИмяПоляНомераПорции));
	ПараметрыРазделения.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыРазделения.ИмяПоляНомераПорции, ИменаПолейИндексирования));
	
	Возврат ПараметрыРазделения;
	
КонецФункции

// Разделяет временную таблицу на порции.
//
Функция РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, ИмяТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	// Получим пустую таблицу значений с полями, соответствующими полям временной таблицы.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяТаблицы);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	// Получим описание полей таблицы.
	ТекстПоляТаблицы = "";
		
	Для Каждого КолонкаДанных Из ТаблицаДанных.Колонки Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + КолонкаДанных.Имя + " КАК " + КолонкаДанных.Имя;
	КонецЦикла;
	
	// Добавим колонку для номера порции, к которой относится текущая строка таблицы.
	ДобавитьКолонкуДляНомеровПорцийСтрок(ТаблицаДанных, ПараметрыРазделения.ИмяПоляНомераПорции);
	
	// Поместим данные временной таблицы в таблицу значений, заполняя при этом номер порции для каждой строки.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%1
	|ИЗ
	|	%2 КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	%3";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ТекстПоляТаблицы,
		ИмяТаблицы,
		ПараметрыРазделения.ИменаПолейУпорядочивания);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерПорции = 1;
	РазмерТекущейПорции = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ТекущаяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
		ВесСтроки = ТекущаяСтрока[ПараметрыРазделения.ИмяПоляВесаСтроки];
		ВесСтроки = ?(ВесСтроки < 0, - ВесСтроки, ВесСтроки);
		
		Если РазмерТекущейПорции + ВесСтроки <= ПараметрыРазделения.РазмерПорции Тогда
			// Вес текущей строки "помещается" в текущую порцию.
			// Строка добавляется в текущую порцию.
		ИначеЕсли РазмерТекущейПорции > 0 Тогда
			// Вес текущей строки "выходит" за текущую порцию, в которой уже есть другие строки.
			// Строка добавляется первой в новую порцию.
			НомерПорции = НомерПорции + 1;
			РазмерТекущейПорции = 0;
		Иначе
			// Вес текущей строки "больше" возможного размера порции, при этом в текущей порции еще нет других строк.
			// Строка целиком помещается в отдельную порцию.
		КонецЕсли;
		
		ТекущаяСтрока[ПараметрыРазделения.ИмяПоляНомераПорции] = НомерПорции;
		
		РазмерТекущейПорции = РазмерТекущейПорции + ВесСтроки;
		
	КонецЦикла;
	
	// Уничтожим старую таблицу и поместим вместо нее новую, с заполненной колонкой номера порции.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИмяТаблицы);
	
	Запрос.УстановитьПараметр("ИсходнаяТаблицаСНомерамиПорций", ТаблицаДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	&ИсходнаяТаблицаСНомерамиПорций КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	%2";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ИмяТаблицы,
		ПараметрыРазделения.ИменаПолейИндексирования);
	
	Запрос.Выполнить();
	
	Возврат ?(ТаблицаДанных.Количество() = 0, 0, НомерПорции);
	
КонецФункции


// Добавляет числовую колонку в таблицу значений.
//
Функция ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяКолонки)
	
	Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Отладка

// Возвращает число строк во временной таблице.
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "Данные")
//
Функция РазмерВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоСтрок;
	
КонецФункции

// Возвращает нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыгрузитьВременнуюТаблицу(Запрос, "Данные")
//
Функция ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ %1
	|	Т.*
	|ИЗ
	|	%2 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?(НЕ ЗначениеЗаполнено(КоличествоСтрок), "", "ПЕРВЫЕ " + Формат(КоличествоСтрок, "ЧГ=0")),
		ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ТекстСортировки;
	КонецЕсли;
	
	ВыгруженнаяТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгруженнаяТаблица;
	
КонецФункции

// Выгружает в файл нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыгрузитьВременнуюТаблицуВФайл(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", "C:\Temp\Таблица.mxl")
//
Функция ВыгрузитьВременнуюТаблицуВФайл(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, ПолноеИмяФайла, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	ВыгруженнаяТаблица = ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок, ТекстСортировки);
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(ВыгруженнаяТаблица, ПолноеИмяФайла);
	
	Возврат ТекстОшибки;
	
КонецФункции

// Выбирает нужное количество строк из указанной временной таблицы
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыбратьСтрокиВременнойТаблицы(Запрос, "Данные", 1)
//
Функция ВыбратьСтрокиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ %1
	|	Т.*
	|ИЗ
	|	%2 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?(НЕ ЗначениеЗаполнено(КоличествоСтрок), "", "ПЕРВЫЕ " + Формат(КоличествоСтрок, "ЧГ=0")),
		ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ТекстСортировки;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Подменяет текст переданного запроса на текст из указанного файла и возвращает результат запроса.
// Выполняет запрос с указанным текстом.
// 
// Параметры:
//	ИсточникДанных - Запрос, МенеджерВременныхТаблиц, Структура (в которой хранятся ПараметрыРасчета), Неопределено
//	ПутьКФайлуСТекстомЗапроса - Строка - полное имя текстового файла, содержащего текст запроса
//
// Пример вызова: УниверсальныеМеханизмыПартийИСебестоимости.ВыполнитьЗапросСПроизвольнымТекстом(Запрос, "C:\Temp\Запрос.txt")
//
Функция ВыполнитьЗапросСПроизвольнымТекстом(ИсточникДанных, ПутьКФайлуСТекстомЗапроса) Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Файл = Новый ТекстовыйДокумент;
	
	Результат = Новый Структура;
	
	Попытка
		
		Если ТипЗнч(ИсточникДанных) = Тип("Запрос") Тогда
			Запрос = ИсточникДанных;
			Результат.Вставить("СтарыйТекстЗапроса", Запрос.Текст);
		Иначе
			Запрос = Новый Запрос;
			Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда
				Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Структура") Тогда
				Запрос.МенеджерВременныхТаблиц = ИсточникДанных.МенеджерВременныхТаблиц;
			КонецЕсли;
		КонецЕсли;
		
		Файл.Прочитать(ПутьКФайлуСТекстомЗапроса, КодировкаТекста.UTF8);
		
		Результат.Вставить("НовыйТекстЗапроса", Файл.ПолучитьТекст());
		Запрос.Текст = Результат.НовыйТекстЗапроса;
		
		Результат.Вставить("Результат", Запрос.Выполнить());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
	КонецПопытки;
	
	Если Результат.Свойство("СтарыйТекстЗапроса") Тогда // был передан запрос
		ИсточникДанных.Текст = Результат.СтарыйТекстЗапроса;
	КонецЕсли;
	
	Результат.Вставить("Время", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

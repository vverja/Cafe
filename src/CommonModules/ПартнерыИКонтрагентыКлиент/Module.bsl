
#Область ПрограммныйИнтерфейс

// Удаляет все доступные пользователю в списке партнеров и позиционируется на элементе справочника
//
// Параметры
//  Форма          -  УправляемаяФорма - форма, для которой выполняются действия
//  ПараметрВыбора - Структура - содержит данные выбора.
//  ПустыеСсылки   - Структура - содержит кэшированные значения, получаемые на сервере и необходимые на клиенте.
//
Процедура ОбработатьВыборПартнераЧерезПомощникВводаНового(Форма,ПараметрВыбора) Экспорт
	
	МассивНедоступныхОтборовУдалить = Новый Массив;
	Для каждого ЭлементОтбора Из ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если  ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сегмент") Тогда
				МассивНедоступныхОтборовУдалить.Добавить("Сегмент");
				Форма.Сегмент = ПредопределенноеЗначение("Справочник.СегментыПартнеров.ПустаяСсылка");
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поиск") Тогда
				МассивНедоступныхОтборовУдалить.Добавить("Поиск");
				Форма.СтрокаПоиска = "";
				Форма.РасширенныйПоиск = Ложь;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновнойМенеджер") И ЭлементОтбора.ПравоеЗначение <> ПараметрВыбора.ОсновнойМенеджер Тогда
				МассивНедоступныхОтборовУдалить.Добавить("ОсновнойМенеджер");
				Форма.ТолькоМои = Ложь;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БизнесРегион") И ЭлементОтбора.ПравоеЗначение <> ПараметрВыбора.ОсновнойМенеджер Тогда
				МассивНедоступныхОтборовУдалить.Добавить("БизнесРегион");
				Форма.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.ПустаяСсылка");
			КонецЕсли;
		Иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементМассива Из МассивНедоступныхОтборовУдалить Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, ЭлементМассива);
	КонецЦикла;
	
	Форма.Элементы.Список.ТекущаяСтрока = ПараметрВыбора.Партнер;
	
КонецПроцедуры

// Процедура формирует наименование партнера/контрагента на основе полного (юридического)
//
// Параметры
//  Наименование  - Строка - рабочее наименование партнера/контрагента
//  НаименованиеПолное  - Строка - полное (юридическое) наименование.
//
Процедура СокрЮрНаименованиеПриИзменении(Наименование, НаименованиеПолное) Экспорт
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		
		Наименование = "";
		Возврат;
		
	КонецЕсли;
	
	НачальнаяПозицияКавычек = 0;
	КонечнаяПозицияКавычек  = 0;
	
	МассивВидовКавычек = Новый Массив;
	МассивВидовКавычек.Добавить("""");
	МассивВидовКавычек.Добавить("'");
	МассивВидовКавычек.Добавить("«");

	Для Каждого ВидКавычки Из МассивВидовКавычек Цикл
		
		ПозицияВидаКавычки = СтрНайти(НаименованиеПолное, ВидКавычки);
		Если ПозицияВидаКавычки > 0 И (НачальнаяПозицияКавычек = 0 ИЛИ ПозицияВидаКавычки < НачальнаяПозицияКавычек) Тогда
			НачальнаяПозицияКавычек = ПозицияВидаКавычки;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивВидовКавычек[2] ="»";
	Для Каждого ВидКавычки Из МассивВидовКавычек Цикл
		
		ПозицияВидаКавычки = СтрНайти(НаименованиеПолное, ВидКавычки, НаправлениеПоиска.СКонца);
		Если ПозицияВидаКавычки > 0 И (КонечнаяПозицияКавычек = 0 ИЛИ ПозицияВидаКавычки > КонечнаяПозицияКавычек) Тогда
			КонечнаяПозицияКавычек = ПозицияВидаКавычки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НачальнаяПозицияКавычек = 0 Тогда
		Наименование = НаименованиеПолное;
	ИначеЕсли КонечнаяПозицияКавычек = 0 Тогда
		Наименование = Прав(НаименованиеПолное, СтрДлина(НаименованиеПолное) - НачальнаяПозицияКавычек);
	Иначе
		Наименование = Сред(НаименованиеПолное, НачальнаяПозицияКавычек + 1, КонечнаяПозицияКавычек - НачальнаяПозицияКавычек-1);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает диалог выбора головного контрагента для обособленного подразделения.
// Сначала будет произведена попытка найти по ИНН и предложен диалог выбора из найденных.
// Если пользователь откажется от выбора, то будет вызван диалог создания головного контрагента.
//
// Параметры
//  Форма  -  УправляемаяФорма - форма, из которой вызывается заполнения
//  ПараметрыЗаполнения  -Струкура - структура содержащая реквизиты подчиненного контрагента
//  СохранитьИзменения  - Булево - необходимость установки подобранного головного контрагента в подчиненного
//  ОповещениеЗавершения  - ОписаниеОповещения - дополнительная обработка в форме вызова
//
Процедура ЗаполнитьГоловногоКонтрагента(Форма, ПараметрыЗаполнения, СохранитьИзменения, ОповещениеЗавершения = Неопределено) Экспорт
	
	// Получение структуры параметров по умолчанию
	Параметры = Новый Структура(
		"Контрагент, ИННПлательщикаНДС, Партнер, ИспользоватьПартнеровКакКонтрагентов",
		Неопределено, "", Неопределено, Ложь);
		
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", Параметры);
	ДополнительныеПараметры.Вставить("СохранитьИзменения", СохранитьИзменения);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ВыборГоловногоКонтрагентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ВыборГоловногоКонтрагента",
		Новый Структура("ИННПлательщикаНДС, Контрагент", Параметры.ИННПлательщикаНДС, Параметры.Контрагент),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершение модального выбора головного контрагента
// если контрагент не выбран, то запускается его создание, в противном случае - переходим в процедуру завершения выбора
//
// Параметры
//  ВыбранноеЗначение  -  Справочник.Контрагенты - значение выбранного головного контрагента
//  ДополнительныеПараметры  -Структура - структура со свойствами
//   * ПараметрыЗаполнения    - Структура - данные заполнения для создания головного контрагента
//   * Форма                  - УправляемаяФорма - форма из которой запущена процедура
//   * СохранитьИзменения     - Будево - записать выбранного головного контрагента в обособленное подразделение
//   * ОповещениеЗавершения   - ОписаниеОповещения - будет вызвана при завершении процедуры.
//
Процедура ВыборГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
			Оповещение = Новый ОписаниеОповещения("СозданиеГоловногоКонтрагентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыФормы = Новый Структура;
			ЗначенияЗаполнения = Новый Структура;
			ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
			
			Если ПараметрыЗаполнения.ИспользоватьПартнеровКакКонтрагентов Тогда
				ИмяФормы = "Справочник.Партнеры.Форма.ПомощникНового";
			Иначе
				ИмяФормы = "Справочник.Контрагенты.ФормаОбъекта";
				ЗначенияЗаполнения.Вставить("Партнер", ПараметрыЗаполнения.Партнер);
			КонецЕсли;
			
			ЗначенияЗаполнения.Вставить("ИННПлательщикаНДС",       ПараметрыЗаполнения.ИННПлательщикаНДС);
			ЗначенияЗаполнения.Вставить("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
			
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ПараметрыФормы.Вставить("ОснованиеОбособленныйКонтрагент", ПараметрыЗаполнения.Контрагент);
			
			ОткрытьФорму(ИмяФормы, ПараметрыФормы,
				ДополнительныеПараметры.Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			СозданиеГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Завершение модального создания головного контрагента
// Если головной контрагент создан, то он устанавливается в реквизит подчиненного, если это указано в параметраъ
//
// Параметры
//  ВыбранноеЗначение  -  Справочник.Контрагенты - значение выбранного головного контрагента
//  ДополнительныеПараметры  -Структура - структура со свойствами
//   * ПараметрыЗаполнения    - Структура - данные заполнения для создания головного контрагента
//   * Форма                  - УправляемаяФорма - форма из которой запущена процедура
//   * СохранитьИзменения     - Будево - записать созданного головного контрагента в обособленное подразделение
//   * ОповещениеЗавершения   - ОписаниеОповещения - будет вызвана при завершении процедуры.
//
Процедура СозданиеГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
	
	Если ВыбранноеЗначение <> Неопределено И
		ДополнительныеПараметры.СохранитьИзменения И ЗначениеЗаполнено(ПараметрыЗаполнения.Контрагент) Тогда
		
		ОписаниеОшибки = "";
		
		ПартнерыИКонтрагентыВызовСервера.ИзменитьГоловногоКонтрагента(
			ПараметрыЗаполнения.Контрагент, ВыбранноеЗначение, ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ПоказатьПредупреждение(, ОписаниеОшибки);
			ВыбранноеЗначение = Неопределено;
		КонецЕсли
		
	КонецЕсли;
		
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

Процедура ФильтрыПанельНавигацииПеретаскивание(КоличествоЗаписанных, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		ПартнерыИКонтрагентыВызовСервера.ОбновитьЗначениеРеквизитаУПеретаскиваемыхПартнеров(Строка, ПараметрыПеретаскивания.Значение, КоличествоЗаписанных);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		
		МассивПартнеров = Новый Массив;
		МассивПартнеров.Добавить(ПараметрыПеретаскивания.Значение);
		ПартнерыИКонтрагентыВызовСервера.ОбновитьЗначениеРеквизитаУПеретаскиваемыхПартнеров(Строка, МассивПартнеров, КоличествоЗаписанных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФильтрыПанельНавигацииПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	Если (Строка = Неопределено) ИЛИ (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл

			Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Партнеры") Тогда
				
				Возврат;
				
			КонецЕсли;
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			
		КонецЦикла;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Возврат;
		
	Иначе
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФильтрыПанельНавигацииТипФильтраПриИзменении(Форма, Элемент, ТребуетсяЗаполнениеСтраницыСвойств) Экспорт
	
	Если ТипЗнч(Форма.ТипФильтра) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
		И Форма.ТекущееСвойствоПанелиНавигации = Форма.ТипФильтра
		И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "Категории" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "БизнесРегионы" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "ГруппыДоступа" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "Менеджер" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиПанелиНавигации(Форма);
	
	Если ТипЗнч(Форма.ТипФильтра) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
		ИЛИ Форма.ТипФильтра  = "Категории" Тогда
		ТребуетсяЗаполнениеСтраницыСвойств = Истина;
	ИначеЕсли Форма.ТипФильтра  = "БизнесРегионы" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы; 
	ИначеЕсли Форма.ТипФильтра = "ГруппыДоступа" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа;
	ИначеЕсли Форма.ТипФильтра = "Менеджер" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры;
		Форма.ТолькоМои = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТолькоМои","Доступность", Форма.ТипФильтра <> "Менеджер");
	
КонецПроцедуры

Процедура ФормаСпискаВыбораПриЗакрытии(Форма) Экспорт
	
	 СохранитьНастройкиПанелиНавигации(Форма);
	
КонецПроцедуры

Процедура ПанельНавигацииУправлениеДоступностью(Форма) Экспорт

	Форма.Элементы.ТипФильтра.Доступность             = Форма.ИспользоватьФильтр;
	Форма.Элементы.БизнесРегионы.Доступность          = Форма.ИспользоватьФильтр;
	Форма.Элементы.ГруппыДоступаПартнеров.Доступность = Форма.ИспользоватьФильтр;
	Форма.Элементы.Менеджеры.Доступность              = Форма.ИспользоватьФильтр;
	Форма.Элементы.ТолькоЗначимые.Доступность         = Форма.ИспользоватьФильтр;
	Форма.Элементы.ТолькоМои.Доступность              = НЕ Форма.ИспользоватьФильтр ИЛИ Не Форма.ТипФильтра = "Менеджер";
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ФормаСкопировать1", "Видимость", Форма.УпрощенныйВводДоступен);
	
КонецПроцедуры

Процедура ЗаполнитьЭлементКонтактнойИнформации(Форма, ВидКонтактнойИнформации, СтруктураДанных) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	Форма[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

Функция ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации) Экспорт
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Возврат ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
КонецФункции

Процедура ЗаполнитьСтрокуОснования(Форма) Экспорт
	
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Партнер", СсылкаНаПартнераСтрокиСписка(Форма)));
	Если Основание.Количество() = 0 Тогда
		Форма.ОснованиеВыбора = "";
	Иначе
		Форма.ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры

Функция ПозиционированиеКорректно(ИмяСписка, Форма) Экспорт

	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
	Если ТипЗнч(Форма.Элементы[ИмяСписка].ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Форма.Элементы[ИмяСписка].ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура КонтрагентыПартнераНажатие(Форма) Экспорт
	
	Если ПозиционированиеКорректно("Список",Форма) Тогда
		
		ПараметрыФормы = Новый Структура("ОтборКонтрагентов", Форма.Элементы.Список.ТекущаяСтрока);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Контрагенты.Форма.ФормаСпискаПараметрическая",
		ПараметрыФормы,
		Форма);
		
	Оповестить("ОбновитьСписокСправочника", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура КонтактныеЛицаПартнераНажатие(Форма) Экспорт
	
	Если ПозиционированиеКорректно("Список", Форма) Тогда
		
		Если СтрЧислоВхождений(Форма.ИмяФормы, "Контрагенты") > 0 Тогда
			ПараметрыФормы = Новый Структура("Отбор",Новый Структура("Владелец", Форма.Элементы.Список.ТекущиеДанные.Партнер));
		Иначе
			ПараметрыФормы = Новый Структура("Отбор",Новый Структура("Владелец", Форма.Элементы.Список.ТекущаяСтрока));
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	ОткрытьФорму(
		"Справочник.КонтактныеЛицаПартнеров.ФормаСписка",
		ПараметрыФормы,
		Форма);
		
	Оповестить("ОбновитьСписокСправочника", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска(Форма) Экспорт
	
	Если Форма.РасширенныйПоиск И Строка(Форма.Элементы.Список.Отображение) <> Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
		Если Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru='Иерархический список';uk='Ієрархічний список'") Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru='Дерево';uk='Дерево'") Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ТребуетсяОбновлениеПанелиИнформации) Экспорт
	
	Если ИмяСобытия = "ВыборПартнераНайдено" И Параметр.Свойство("Партнер") Тогда
		
		ОбработатьВыборПартнераЧерезПомощникВводаНового(Форма, Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_КонтактныеЛицаПартнеров" И  Параметр.Свойство("Владелец") Тогда
			
		ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ((ТекущиеДанные.Свойство("Ссылка") И ТекущиеДанные.Ссылка = Параметр.Владелец)
			ИЛИ ТекущиеДанные.Свойство("Партнер") И ТекущиеДанные.Партнер = Параметр.Владелец) Тогда
			ТребуетсяОбновлениеПанелиИнформации = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" И Параметр.Свойство("Партнер") Тогда
		
		ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Ссылка = Параметр.Партнер Тогда
			ТребуетсяОбновлениеПанелиИнформации = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Партнеры" Тогда
	
		ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ((ТекущиеДанные.Свойство("Ссылка") И ТекущиеДанные.Ссылка = Параметр)
			ИЛИ ТекущиеДанные.Свойство("Партнер") И ТекущиеДанные.Партнер = Параметр)Тогда
			ТребуетсяОбновлениеПанелиИнформации = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораОснованиеВыбораНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Партнер", СсылкаНаПартнераСтрокиСписка(Форма)));
	Если Основание.Количество() > 0 Тогда
		ПоказатьЗначение(Неопределено, Основание[0].Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораСегментПриИзменении(Форма, Элемент) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Сегмент) Тогда
		
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоСегментуУстановлен",
		                                                                   Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоСегменту",
		                                                                   СегментыВызовСервера.СписокЗначений(Форма.Сегмент).ВыгрузитьЗначения());
		
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.Сегмент.СписокВыбора, Форма.Сегмент, 7);
		Форма.ИсторияВыбораСегментов.ЗагрузитьЗначения(Форма.Элементы.Сегмент.СписокВыбора.ВыгрузитьЗначения());
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоСегментуУстановлен",
		                                                                   Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
		                                                                   "ОтборПоСегменту",
		                                                                   Неопределено);
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораСписокПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Основание = Неопределено) Экспорт
	
	Если Копирование Тогда
		Если НЕ Форма.УпрощенныйВводДоступен Тогда
			Отказ = Истина;
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru='Копирование %1 запрещено.';uk='Копіювання %1 заборонено.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			            ТекстСообщения, 
			            ?(Форма.ИспользоватьПартнеровКакКонтрагентов, НСтр("ru='контрагентов';uk='контрагентів'"), НСтр("ru='партнеров';uk='партнерів'")));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Копирование партнеров запрещено.';uk='Копіювання партнерів заборонено.'"));
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",Новый Структура("СписокОтборПоТипуПартнера, Основание", Форма.СписокОтборПоТипуПартнера, Основание), Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораСоздатьНового(Форма, Команда) Экспорт
	
	СтруктураПараметры = Новый Структура;
	СтруктураЗначенияЗаполнения = Новый Структура;
	
	Для каждого ЭлементОтбора Из ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.Использование Тогда
			СтруктураЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.Элементы.Список.Отображение <> ОтображениеТаблицы.Список Тогда
		СтруктураЗначенияЗаполнения.Вставить("Родитель", Форма.Элементы.Список.ТекущийРодитель);
	КонецЕсли;
	
	СтруктураПараметры.Вставить("ЗначенияЗаполнения", СтруктураЗначенияЗаполнения);
	СтруктураПараметры.Вставить("СписокОтборПоТипуПартнера", Форма.СписокОтборПоТипуПартнера);
	
	Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента", СтруктураПараметры,Форма);
	Иначе
		ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлементаРеквизитыКонтрагента", СтруктураПараметры,Форма);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормЭлементаСправочникаПартнеры

Процедура ПартнерФормаЭлементаКаналПервичногоИнтересаПриИзменении(Форма, Элемент) Экспорт
	
	Форма.ИсточникПервичногоИнтереса = Неопределено;
	Форма.Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Не ЗначениеЗаполнено(Форма.КаналПервичногоИнтереса);
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаНаименованиеПриИзменении(Форма, Элемент) Экспорт
	
	Если ПустаяСтрока(Форма.Объект.НаименованиеПолное) Тогда
		Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаФлагПризнакПартнераПриИзменении(Форма, Элемент) Экспорт
	
	Форма.Элементы.ОбслуживаетсяТорговымиПредставителями.Доступность = Форма.Объект.Клиент;
	Если НЕ Форма.Объект.Клиент Тогда
		Форма.Объект.ОбслуживаетсяТорговымиПредставителями = Ложь;
	КонецЕсли;
	
	Форма.Элементы.Перевозчик.Доступность = Форма.Объект.Поставщик;
	Если НЕ Форма.Объект.Поставщик Тогда
		Форма.Объект.Перевозчик = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаКомментарииНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		Форма, 
		"Объект.Комментарий");
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаБизнесРегионПриИзменении(Форма, Элемент) Экспорт
	
	Если Форма.Объект.БизнесРегион <> Форма.ТекущийБизнесРегион Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.БизнесРегион) Тогда
			ОсновнойМенеджерБизнесРегиона = ПартнерыИКонтрагентыВызовСервера.ОсновнойМенеджерБизнесРегиона(Форма.Объект.БизнесРегион);
			Если ЗначениеЗаполнено(ОсновнойМенеджерБизнесРегиона) И ОсновнойМенеджерБизнесРегиона <> Форма.Объект.ОсновнойМенеджер Тогда
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для выбранного бизнес-региона основным менеджером является %1. Установить его основным менеджером партнера?';uk='Для вибраного бізнес-регіону є основним менеджером %1. Встановити його основним менеджером партнера?'"),ОсновнойМенеджерБизнесРегиона);
				Результат = Неопределено;

				ПоказатьВопрос(Новый ОписаниеОповещения("ПартнерФормаЭлементаБизнесРегионПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ОсновнойМенеджерБизнесРегиона, Форма", ОсновнойМенеджерБизнесРегиона, Форма)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
                Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекущийБизнесРегион = Форма.Объект.БизнесРегион;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаБизнесРегионПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОсновнойМенеджерБизнесРегиона = ДополнительныеПараметры.ОсновнойМенеджерБизнесРегиона;
    Форма = ДополнительныеПараметры.Форма;
    
    
    Результат = РезультатВопроса;
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        
        Форма.Объект.ОсновнойМенеджер = ОсновнойМенеджерБизнесРегиона;
        
    КонецЕсли;
    
    Форма.ТекущийБизнесРегион = Форма.Объект.БизнесРегион;

КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормЭлементаСправочникаКонтрагенты

// Инициирует структуру данных контрагента для сравнения с данными полученных с сервиса.
//
// Возвращаемое значение:
//   Булево   - инициированная значениями по умолчанию структура.
//
Функция ИнициироватьСтруктураДанныхДляСравнения() Экспорт

	ДанныеДляСравнения = Новый Структура;
	ДанныеДляСравнения.Вставить("ИННПлательщикаНДС", "");
	ДанныеДляСравнения.Вставить("КодФилиала", "");
	ДанныеДляСравнения.Вставить("Наименование", "");
	ДанныеДляСравнения.Вставить("НаименованиеСокращенное", "");
	ДанныеДляСравнения.Вставить("ЮридическийАдрес", "");
	ДанныеДляСравнения.Вставить("Телефон", "");
	
	Возврат ДанныеДляСравнения;
	
КонецФункции

// Сравнивает имеющиеся значения реквизитов контрагента с данными, полученными с сервиса.
//
// Параметры:
//  РеквизитыКонтрагента  - Структура - содержит данные, полученные с сервиса.
//  ДанныеОбъекта         - Структура - содержит данные контрагента.
//
// Возвращаемое значение:
//   Булево   - Истина, если есть различия, Ложь в обратном случае.
//
Функция РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента, ДанныеОбъекта, ЗаполнятьИНН) Экспорт
	
	Результат = Новый Структура("ЕстьИзменения, ЕстьИзмененияВЗаполненныхРеквизитах", Ложь, Ложь);
	
	Если РеквизитыКонтрагента.Свойство("ИННПлательщикаНДС") И РеквизитыКонтрагента.ИННПлательщикаНДС <> ДанныеОбъекта.ИННПлательщикаНДС Тогда	
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.ИННПлательщикаНДС) Тогда	
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("КодФилиала") И РеквизитыКонтрагента.КодФилиала <> ДанныеОбъекта.КодФилиала Тогда	
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.КодФилиала) Тогда	
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Наименование") 
		И РеквизитыКонтрагента.Наименование <> ДанныеОбъекта.Наименование Тогда
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.Наименование) Тогда
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("НаименованиеСокращенное") 
		И РеквизитыКонтрагента.НаименованиеСокращенное <> ДанныеОбъекта.НаименованиеСокращенное Тогда
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.НаименованиеСокращенное) Тогда
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") 
		И РеквизитыКонтрагента.Телефон <> Неопределено Тогда
		Если РеквизитыКонтрагента.Телефон.Представление <> ДанныеОбъекта.Телефон Тогда
			
			Результат.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ДанныеОбъекта.Телефон) Тогда
				Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
			КонецЕсли;
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
		И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
		Если РеквизитыКонтрагента.ЮридическийАдрес.Представление <> ДанныеОбъекта.ЮридическийАдрес Тогда
			
			Результат.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ДанныеОбъекта.ЮридическийАдрес) Тогда
				Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
			КонецЕсли;
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонтактнойИнформацией

Процедура ЮридическийАдресКонтрагентаПриИзменении(Элемент, Форма) Экспорт
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей
		Форма.ЮридическийАдресКонтрагентаПредставление = "";
		Форма.ЮридическийАдресКонтрагента              = "";
		Форма.ЮридическийАдресКонтрагентаКомментарий   = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ЮридическийАдресКонтрагентаВидКонтактнойИнформации
	Форма.ЮридическийАдресКонтрагентаПредставление = Текст;
	Форма.ЮридическийАдресКонтрагента = ПартнерыИКонтрагентыВызовСервера.ЗначенияПолейКонтактнойИнформации(
	                                                                      Текст,
	                                                                      Форма.ЮридическийАдресКонтрагентаВидКонтактнойИнформации,
	                                                                      Форма.ЮридическийАдресКонтрагентаКомментарий);
	
КонецПроцедуры

Процедура ЮридическийАдресКонтрагентаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного репарсинга
	Если Элемент.ТекстРедактирования <> Форма.ЮридическийАдресКонтрагентаПредставление Тогда
		Форма.ЮридическийАдресКонтрагентаПредставление = Элемент.ТекстРедактирования;
		Форма.ЮридическийАдресКонтрагента              = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", Форма.ЮридическийАдресКонтрагентаВидКонтактнойИнформации);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           Форма.ЮридическийАдресКонтрагента);
	ПараметрыОткрытия.Вставить("Представление",           Форма.ЮридическийАдресКонтрагентаПредставление);
	
	// Переопределямый заголовок формы, по умолчнию отобразятся данные по ВидКонтактнойИнформации
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Юридический адрес';uk='Юридична адреса'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

Процедура ЮридическийАдресКонтрагентаОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	// Сбрасываем как представления, так и внутренние значения полей
	Форма.ЮридическийАдресКонтрагентаПредставление = "";
	Форма.ЮридическийАдресКонтрагента              = "";
	Форма.ЮридическийАдресКонтрагентаКомментарий   = "";
	
КонецПроцедуры

Процедура ЮридическийАдресКонтрагентаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны
		Возврат;
	КонецЕсли;
	
	Форма.ЮридическийАдресКонтрагентаКомментарий   = ВыбранноеЗначение.Комментарий;
	Форма.ЮридическийАдресКонтрагентаПредставление = ВыбранноеЗначение.Представление;
	Форма.ЮридическийАдресКонтрагента              = ВыбранноеЗначение.КонтактнаяИнформация;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

Процедура СохранитьНастройкиПанелиНавигации(Форма)

	Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории Тогда
		ВидПанели = "Категории";
		ТекущаяСтрока = Форма.Элементы.Категории.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.Категории.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ТекущиеДанные <> Неопределено Тогда
				 ТекущееЗначение = ТекущиеДанные.Значение;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы Тогда
		ВидПанели = "БизнесРегионы";
		ТекущееЗначение = Форма.Элементы.БизнесРегионы.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа Тогда
		ВидПанели = "ГруппыДоступа";
		ТекущееЗначение = Форма.Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
		ВидПанели = "Менеджер";
		ТекущееЗначение = Форма.Элементы.Менеджеры.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		ВидПанели = Форма.ТекущееСвойствоПанелиНавигации;
		ТекущаяСтрока = Форма.Элементы.Свойства.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.Свойства.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ТекущиеДанные <> Неопределено Тогда
				 ТекущееЗначение = ТекущиеДанные.Значение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели",ВидПанели));
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаНастроек = Форма.НастройкиПанелейНавигации.Добавить();
		СтрокаНастроек.ВидПанели = ВидПанели;
	Иначе
		СтрокаНастроек = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаНастроек.ТекущееЗначение = ТекущееЗначение;

КонецПроцедуры

Функция СсылкаНаПартнераСтрокиСписка(Форма)
	
	ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ?(Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнеры",
	          ТекущиеДанные.Партнер,
	          ТекущиеДанные.Ссылка);
	
КонецФункции

#КонецОбласти

#КонецОбласти

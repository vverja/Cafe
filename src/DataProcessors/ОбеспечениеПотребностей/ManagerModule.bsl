#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПолучениеДанныхИнформационнойБазы

// Возвращает таблицу способов обеспечения, используемых для обеспчения потребностей в номенклатуре.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных - настройки для отбора номенклатуры и способов обеспечения:
//                                          Склад, ПодразделениеПолучатель, Номенклатура, Характеристика,
//                                          СпособОбеспечения, ИсточникОбеспечения, ТипОбеспечения, Назначение
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с полями:
//   СпособОбеспечения - СправочникСсылка.СпособыОбеспеченияПотребностей - способ обеспечения,
//   СрокИсполненияЗаказа - Число - реквизит способа обеспечения,
//   ОбеспечиваемыйПериод - Число - реквизит способа обеспечения,
//   ФормироватьПлановыеЗаказы - Булево - реквизит способа обеспечения,
//   ДатаСледующейПоставки - Дата - реквизит способа обеспечения,
//   ДатаПоставки - Дата - расчетная дата поставки по способу обеспечения,
//   ПлановаяДатаЗаказа - реквизит способа обеспечения,
//   НаступилаДатаОчередногоЗаказа - Булево - реквизит способа обеспечения.
//   Отметка - Булево - признак отображения флага в строке таблицы,
//   СпособОбеспеченияПредставление - Строка - визуальное отображение способа обеспечения,
//   ДнейДоПлановогоЗаказа - Число - используется для отображения надписи в строке с обратным отсчетом
//   НетПлановойДатыЗаказаПоКалендарю - Булево - служебный признак для отображения ошибки заполнения графика работы,
//   НетДатыПоставкиПоКалендарю - Булево - служебный признак для отображения ошибки заполнения графика работы,
//   Порядок - Число - 0, если способ обеспечения не пуст, 1 - если способ обеспечения пуст, для упорядочивания в таблице.
//
Функция ТаблицаСпособовОбеспечения(Настройки) Экспорт

	СхемаКомпоновкиДанных = Обработки.ОбеспечениеПотребностей.ПолучитьМакет("МакетКомпоновкиДляСерверныхОтборов");
	СхемаКомпоновкиДанных.НаборыДанных.Набор.Запрос = ВременнаяТаблицаСпособовОбеспечения();
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, "Набор");
	УдалитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДоступныеТипыОбеспечения", ДоступныеТипыОбеспеченияПоПравам());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Выполнить();

	//Актуализируем график заказов для используемых способов, записываем изменения в базу.

	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня);
	Запрос.Текст = Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаАктуализацииСпособовОбеспечения();

	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	Пока Выборка.Следующий() Цикл
		
		СпособОбъект = Выборка.СпособОбеспечения.ПолучитьОбъект();
		Справочники.СпособыОбеспеченияПотребностей.АктуализироватьГрафикЗаказовНаСервере(СпособОбъект, НачалоДня);
		СпособОбъект.Записать();
		
	КонецЦикла;

	Запрос.УстановитьПараметр("КалендарьПредприятия", Константы.ОсновнойКалендарьПредприятия.Получить());
	Запрос.Текст = Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаРеквизитовСпособаОбеспечения(Неопределено);

	Таблица = Запрос.Выполнить().Выгрузить();

	Возврат Таблица;

КонецФункции

// Возвращает таблицу потребностей в товарах на складах, с рассчитанным количеством к заказу и
//  и параметрами расчета для каждой строки потребностей для товаров у которых поддерживается запас.
//
//  Параметры:
//   Отбор - Структура, НастройкиКомпоновкиДанных - Структура передается для осуществления отбора одной потребности
//    (отбор по значениям), содержит следующие поля:
//     Номенклатура - СравочникСсылка.Номенклатура,
//     Характеристика - СравочникСсылка.ХарактеристикиНоменклатуры,
//     Склад - СравочникСсылка.Склады,
//     СпособОбеспечения - СправочникСсылка.СпособыОбеспеченияПотребностей
//    НастройкиКомпоновкиДанных передаются если необходимо получить все потребности, согласно отбору установленному
//    пользователем в компоновщике настроек:
//     Склад, Номенклатура, Характеристика, СпособОбеспечения, ИсточникОбеспечения, ТипОбеспечения,
//   ТипОтбора - Строка - принимает значения "ОтборПоЗначениям" и "ОтборКомпоновки" и определяет каким образом,
//    каким образом будет осуществляться отбор потребностей для расчета и помещения в таблицу результата.
//   ТаблицаСпособовОбеспечения - задает реквизиты способов обеспечения, переопределенные пользователем.
// Возвращаемое значение:
//  Таблица значений, содержит поля ключа потребности:
//    Номенклатура - СравочникСсылка.Номенклатура,
//    Характеристика - СравочникСсылка.ХарактеристикиНоменклатуры,
//    Склад - СравочникСсылка.Склады,
//   поля для расчета количества к заказу:
//    Остаток - Число,
//    ЗаказыКПоступлению - Число,
//    МетодОбеспечения - ПеречислениеСсылка.МетодыОбеспеченияПотребностей,
//    СтраховойЗапас - Число - только для методов "расчет по норме" или "по статистике",
//    МинимальныйЗапас - Число - только для метода "минимакс", для остальных рассчитывается позже,
//    МаксимальныйЗапас - Число - только для метода "минимакс", для остальных рассчитывается позже,
//    ОбеспечиваемыйПериод - Число,
//    СреднедневноеПотребление - Число - только для методов "расчет по норме" или "по статистике"
//    СрокПоставки - Число - только для методов "расчет по норме" или "по статистике",
//    СрокДоПлановойПоставки - Число - только для методов "расчет по норме" или "по статистике" при заказе "по графику"
//    УпаковкаЗаказа - СправочникСсылка.УпаковкиЕдиницыИзмерения,
//    ЧислительУпаковки - Число,
//    ЗнаменательУпаковки - Число,
//    ТипЕдиницыИзмерения - Число,
//    ФормироватьПлановыеЗаказы - Булево,
//    ДатаЗаказа - Число - только для заказа "по графику",
//   поля для редактирования в форме "Формирование заказов по потребностям":
//    СпособОбеспечения - СправочникСсылка.СпособыОбеспеченияПотребностей,
//    ИсточникОбеспечения - Справочникссылка.Склады, СправочникСсылка.Партнеры,
//    ДатаПоставки - Дата,
//   поля для отображения в форме "Формирование заказов по потребностям":
//    Артикул - Строка,
//    Код - Строка,
//    ЕдиницаИзмерения - Справочникссылка.УпаковкиЕдиницыИзмерения,
//   поля для расчетов в форме "Формирование заказов по потребностям":
//    ЦенаВВалютеУправленческогоУчета - Число,
//    ЦенаВВалютеСоглашения - Число,
//    ВалютаСоглашения - СправочникСсылка.Валюты,
//    ВидЦены - СправочникСсылка.ВидыЦенПоставщиков,
//    Вес - Число,
//    ДатаБлижайшейПоставкиПоГрафику - Дата,
//    ДатаСледующейПоставкиПоГрафику - Дата,
//    ИсточникОбеспеченияТолькоПросмотр - Булево,
//    ТипОбеспечения - ПеречислениеСсылка.ТипыОбеспечения,
//  временно не используемые поля:
//   ПотреблениеСтабильно - Булево,
//   КалендарьСклада - СправочникСсылка.Календари,
//   КалендарьПредприятия - СправочникСсылка.Календари,
//   ОшибкаНеЗаполненКалендарьПредприятия - Булево,
//   ОшибкаНеЗаполненКалендарьСклада - Булево
//
Функция ТаблицаЗапасы(Отбор, ТипОтбора, ТаблицаСпособовОбеспечения = Неопределено) Экспорт

	Если ТипОтбора = "ОтборПоЗначениям" Тогда

		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|&Номенклатура   КАК Номенклатура,
			|&Характеристика КАК Характеристика,
			|&Склад          КАК Склад,
			|ВЫБОР КОГДА &СпособОбеспечения = ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка) ТОГДА
			|			NULL
			|		ИНАЧЕ
			|			&СпособОбеспечения
			|	КОНЕЦ КАК СпособОбеспечения
			|ПОМЕСТИТЬ ВтТовары
			|;
			|
			|///////////////////////////////
			|ВЫБРАТЬ
			|	Т.СпособОбеспечения         КАК СпособОбеспечения,
			|	ЕСТЬNULL(Т.СпособОбеспечения.ФормироватьПлановыеЗаказы, ЛОЖЬ) КАК ФормироватьПлановыеЗаказы,
			|	NULL                        КАК ДатаПоставки
			|ПОМЕСТИТЬ ВтСпособыОбеспеченияПереопределенный
			|ИЗ
			|	ВтТовары КАК Т
			|;
			|
			|///////////////////////////////////////////////
			|";

		Запрос.УстановитьПараметр("Номенклатура",      Отбор.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",    Отбор.Характеристика);
		Запрос.УстановитьПараметр("Склад",             Отбор.Склад);
		Запрос.УстановитьПараметр("СпособОбеспечения", Отбор.СпособОбеспечения);
		ИспользоватьАссортимент = Ложь;

	Иначе

		СхемаКомпоновкиДанных = Обработки.ОбеспечениеПотребностей.ПолучитьМакет("МакетКомпоновкиДляГенерацииЗапросов");
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);

		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Отбор);

		СхемаКомпоновкиДанных.НаборыДанных.Набор.Запрос = ВременнаяТаблицаТоваровДляПоддержанияЗапаса();
		Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, "Набор");
		УдалитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.Выполнить();
		ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");

		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.СпособОбеспечения         КАК СпособОбеспечения,
		|	Т.ФормироватьПлановыеЗаказы КАК ФормироватьПлановыеЗаказы,
		|	Т.ДатаПоставки              КАК ДатаПоставки
		|ПОМЕСТИТЬ ВтСпособыОбеспеченияПереопределенный
		|ИЗ
		|	&ТаблицаСпособовОбеспечения КАК Т
		|;
		|
		|///////////////////////////////////////////////
		|";

		Запрос.УстановитьПараметр("ТаблицаСпособовОбеспечения", ТаблицаСпособовОбеспечения);

	КонецЕсли;

	Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.СпособОбеспечения КАК Ссылка
		|ПОМЕСТИТЬ ВтСпособыОбеспечения
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияПереопределенный КАК ТаблицаСпособыОбеспеченияПререопределенный
		|		ПО ЕСТЬNULL(Т.СпособОбеспечения, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))
		|			= ТаблицаСпособыОбеспеченияПререопределенный.СпособОбеспечения
		|;
		|
		|/////////////////////////////////
		|";
		
	Запрос.Текст = Запрос.Текст + Справочники.СпособыОбеспеченияПотребностей.ВременнаяТаблицаДатПоставок();

	Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Склад              КАК Склад,
		|	Т.СпособОбеспечения  КАК СпособОбеспечения
		|
		|ПОМЕСТИТЬ ВтСкладыИСпособыОбеспечения
		|ИЗ
		|	ВтТовары КАК Т
		|;
		|
		|/////////////////////////////////
		|";

	Запрос.Текст = Запрос.Текст + ВременнаяТаблицаИнтерваловРаботыСкладов();

	ТекстЗапроса = Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаСтатистикиПотребления();
	Запрос.Текст = Запрос.Текст + СтрЗаменить(ТекстЗапроса, "ТоварыСреднедневногоПотребления", "ВтТовары");

	Запрос.Текст = Запрос.Текст + ВременнаяТаблицаДанныеЗаполненияЗаказаПоставщику();
	Запрос.Текст = Запрос.Текст + ВременнаяТаблицаСвободныеОстатки();
	Запрос.Текст = Запрос.Текст + ВременнаяТаблицаЗаказыКПоступлениюИОтгрузке();

	Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Т.Номенклатура        КАК Номенклатура,
		|	Т.Характеристика      КАК Характеристика,
		|	Т.Склад               КАК Склад,
		|
		|	Т.Номенклатура.Наименование    КАК НоменклатураНаименование,
		|	Т.Характеристика.Наименование  КАК ХарактеристикаНаименование,
		|	Т.Склад.Наименование           КАК СкладНаименование,
		|
		|
		|	ВЫБОР КОГДА ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса
		|				= ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов) ТОГДА
		|
		|				Остатки.ВНаличии - Остатки.ВРезервеПодЗаказ
		|
		|			ИНАЧЕ
		|				Остатки.ВНаличии - Остатки.ВРезервеПодЗаказ - Остатки.ВРезервеСоСклада
		|				- ВЫБОР КОГДА Заказы.ЗаказыКПоступлению < Заказы.ЗаказыКОтгрузке ТОГДА
		|						Заказы.ЗаказыКОтгрузке - Заказы.ЗаказыКПоступлению
		|					ИНАЧЕ 0 КОНЕЦ
		|		КОНЕЦ                      КАК Остаток,
		|
		|	ВЫБОР КОГДА ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса
		|				= ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов) ТОГДА
		|
		|				Заказы.ЗаказыКПоступлению
		|
		|			ИНАЧЕ
		|				Заказы.ЗаказыКПоступлению - Заказы.ЗаказыКОтгрузке
		|		КОНЕЦ                      КАК ЗаказыКПоступлению,
		|
		//Параметры номенклатуры
		|	&ТекстЗапросаВесНоменклатуры                        КАК Вес,
		|	Т.Номенклатура.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	Т.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипЕдиницыИзмерения,
		|	Т.Номенклатура.Код                                  КАК Код,
		|	Т.Номенклатура.Артикул                              КАК Артикул,
		|	Т.Номенклатура.ИспользоватьУпаковки                 КАК ИспользоватьУпаковки,
		|
		//Товарные ограничения
		|	ТоварныеОграничения.МетодОбеспеченияПотребностей     КАК МетодОбеспечения,
		|	ТоварныеОграничения.МинимальноеКоличествоЗапаса      КАК МинимальныйЗапас,
		|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса     КАК МаксимальныйЗапас,
		|	ТоварныеОграничения.СтраховоеКоличествоЗапаса        КАК СтраховойЗапас,
		|	ТоварныеОграничения.УпаковкаЗаказа                   КАК УпаковкаЗаказа,
		|	ЕСТЬNULL(СпрУпаковки.Числитель, 1)                   КАК ЧислительУпаковки,
		|	ЕСТЬNULL(СпрУпаковки.Знаменатель, 1)                 КАК ЗнаменательУпаковки,
		|
		//Способ обеспечения
		|	Т.СпособОбеспечения                                  КАК СпособОбеспечения,
		|	ЕСТЬNULL(Т.СпособОбеспечения.ТипОбеспечения,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка))  КАК ТипОбеспечения,
		|	ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы КАК ФормироватьПлановыеЗаказы,
		|	ВЫБОР КОГДА ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы ТОГДА
		|				ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ДатаПоставки,
		|					ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки)
		|		КОНЕЦ                                            КАК ДатаПоставки,
		|	ТаблицаСпособовОбеспечения.ПлановаяДатаЗаказа        КАК ДатаЗаказа,
		|	ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки      КАК ДатаБлижайшейПоставкиПоГрафику,
		|	ТаблицаСпособовОбеспечения.ДатаСледующейПоставки     КАК ДатаСледующейПоставкиПоГрафику,
		|
		//Данные для расчета запасов прогнозным методом
		|	ВЫБОР КОГДА НЕ ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы ТОГДА
		|				ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод
		|			ИНАЧЕ
		|				ИнтервалМеждуПоставками.КоличествоДней
		|		КОНЕЦ                                            КАК ОбеспечиваемыйПериод,
		|	ВозможнаяПоставка.КоличествоДней                     КАК СрокПоставки,
		|	ПлановаяПоставка.КоличествоДней                      КАК СрокДоПлановойПоставки,
		|
		|	ВЫБОР КОГДА ТоварныеОграничения.МетодОбеспеченияПотребностей
		|			= ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике) ТОГДА
		|				ЕСТЬNULL(ТаблицаСтатистики.СреднедневноеПотребление, 0)
		|			ИНАЧЕ
		|				ТоварныеОграничения.СреднедневноеПотребление
		|		КОНЕЦ                                            КАК СреднедневноеПотребление,
		|
		//Диагностика проблем
		|	СпрКалендарьСклада.Ссылка                                       КАК КалендарьСклада,
		|	ОсновнойКалендарь.Значение                                      КАК КалендарьПредприятия,
		|
		|	ТаблицаСпособовОбеспечения.ОшибкаНеЗаполненкалендарьПредприятия КАК ОшибкаНеЗаполненКалендарьПредприятия,
		|	ВЫБОР КОГДА ВозможнаяПоставка.КоличествоДней ЕСТЬ NULL
		|			ИЛИ ПлановаяПоставка.КоличествоДней ЕСТЬ NULL
		|			ИЛИ ИнтервалМеждуПоставками.КоличествоДней ЕСТЬ NULL ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                                                       КАК ОшибкаНеЗаполненКалендарьСклада,
		|	ЕСТЬNULL(ТаблицаСтатистики.ПотреблениеСтабильно, ЛОЖЬ)          КАК ПотреблениеСтабильно,
		|
		//Условия закупок
		|	//%УсловияЗакупок
		|	ЕСТЬNULL(ДанныеЗаполнения.Партнер,
		|		Т.СпособОбеспечения.ИсточникОбеспеченияПотребностей)        КАК ИсточникОбеспечения,
		|	ВЫБОР КОГДА Т.СпособОбеспечения.Соглашение <> ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) ТОГДА
		|				Т.СпособОбеспечения.Соглашение
		|			ИНАЧЕ
		|				ДанныеЗаполнения.Соглашение
		|		КОНЕЦ                                                       КАК Соглашение
		|
		|ИЗ
		|	ВтТовары КАК Т
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияПереопределенный КАК ТаблицаСпособовОбеспеченияПереопределенный
		|		ПО ЕСТЬNULL(Т.СпособОбеспечения, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))
		|			= ТаблицаСпособовОбеспеченияПереопределенный.СпособОбеспечения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|		ПО &ПодстановкаТоварногоОграничения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|		ПО ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари КАК СпрКалендарьСклада
		|		ПО ВЫБОР КОГДА Т.Склад.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|					Т.Склад.Календарь
		|				ИНАЧЕ
		|					ОсновнойКалендарь.Значение
		|			КОНЕЦ = СпрКалендарьСклада.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияДатыПоставок КАК ТаблицаСпособовОбеспечения
		|		ПО Т.СпособОбеспечения = ТаблицаСпособовОбеспечения.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнтервалКалендарногоГрафика КАК ВозможнаяПоставка
		|		ПО СпрКалендарьСклада.Ссылка = ВозможнаяПоставка.Календарь
		|		 И &НачалоТекущегоДня = ВозможнаяПоставка.Дата1
		|		 И ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки = ВозможнаяПоставка.Дата2
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнтервалКалендарногоГрафика КАК ПлановаяПоставка
		|		ПО СпрКалендарьСклада.Ссылка = ПлановаяПоставка.Календарь
		|		 И &НачалоТекущегоДня = ПлановаяПоставка.Дата1
		|		 И ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки = ПлановаяПоставка.Дата2
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнтервалКалендарногоГрафика КАК ИнтервалМеждуПоставками
		|		ПО СпрКалендарьСклада.Ссылка = ИнтервалМеждуПоставками.Календарь
		|		 И ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки = ИнтервалМеждуПоставками.Дата1
		|		 И ТаблицаСпособовОбеспечения.ДатаСледующейПоставки = ИнтервалМеждуПоставками.Дата2
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК Остатки
		|		ПО Т.Номенклатура   = Остатки.Номенклатура
		|		 И Т.Характеристика = Остатки.Характеристика
		|		 И Т.Склад          = Остатки.Склад
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаказы КАК Заказы
		|		ПО Т.Номенклатура   = Заказы.Номенклатура
		|		 И Т.Характеристика = Заказы.Характеристика
		|		 И Т.Склад          = Заказы.Склад
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаПотребления КАК ТаблицаСтатистики
		|		ПО Т.Номенклатура   = ТаблицаСтатистики.Номенклатура
		|		 И Т.Характеристика = ТаблицаСтатистики.Характеристика
		|		 И Т.Склад          = ТаблицаСтатистики.Склад
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЗаполненияЗаказаПоставщику КАК ДанныеЗаполнения
		|		ПО Т.Номенклатура    = ДанныеЗаполнения.Номенклатура
		|		 И Т.Характеристика  = ДанныеЗаполнения.Характеристика
		|		 И Т.Склад           = ДанныеЗаполнения.Склад
		|		 И ЕСТЬNULL(Т.СпособОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка), ИСТИНА)
		|		 И Т.СпособОбеспечения.ИсточникОбеспеченияПотребностей.Ссылка ЕСТЬ NULL
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоставщиков КАК ЦеныПоставщиков
		|		ПО Т.Номенклатура       = ЦеныПоставщиков.Номенклатура
		|			И Т.Характеристика  = ЦеныПоставщиков.Характеристика
		|			И ЕСТЬNULL(ДанныеЗаполнения.ВидЦеныПоставщика, Т.СпособОбеспечения.ВидЦеныПоставщика) = ЦеныПоставщиков.ВидЦеныПоставщика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ЦеныПоставщиков.Валюта = КурсыВалют.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютаСоглашения
		|		ПО ЕСТЬNULL(ДанныеЗаполнения.Валюта, Т.СпособОбеспечения.Соглашение.Валюта) = КурсВалютаСоглашения.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
		|		ПО ТоварныеОграничения.УпаковкаЗаказа = СпрУпаковки.Ссылка
		|
		|//%Ассортимент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураНаименование, ХарактеристикаНаименование";
	
	Запрос.Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Запрос.Текст, "ПодстановкаТоварногоОграничения");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"Т.Номенклатура.ЕдиницаИзмерения",
			"Т.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловияЗакупок", ТекстПолейУсловияЗакупок());

	Если ИспользоватьАссортимент Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Ассортимент", ТекстУсловияАссортимент());
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Ассортимент", "");
	КонецЕсли;

	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));

	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));

	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(ТекущаяДатаСеанса(),
		ПериодКлассификации, - КоличествоПериодовКлассификации);

	Запрос.УстановитьПараметр("ПериодКлассификацииДатаНачала",    Период.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодКлассификацииДатаОкончания", Период.ДатаОкончания);

	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДатаСеанса()));

	АдресГрафикаРаботы = СоздатьГрафикВХранилище(Период.ДатаНачала, Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ГрафикБезКалендаря", ПолучитьИзВременногоХранилища(АдресГрафикаРаботы));
	УдалитьИзВременногоХранилища(АдресГрафикаРаботы);
	КоэффициентВалютыУпрУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыУправленческогоУчета(НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КоэффициентВалютыУпрУчета", КоэффициентВалютыУпрУчета);
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();

	Возврат Таблица;

КонецФункции

// Возвращает таблицу потребностей в товарах и работах на складах, с рассчитанным количеством к заказу и
//  и параметрами расчета для каждой строки потребностей для товаров обеспечиваемых методом "Заказ под заказ".
//
//  Параметры:
//   Отбор - Структура, НастройкиКомпоновкиДанных - Структура передается для осуществления отбора одной потребности
//    (отбор по значениям), содержит следующие поля:
//     Номенклатура - СравочникСсылка.Номенклатура,
//     Характеристика - СравочникСсылка.ХарактеристикиНоменклатуры,
//     Склад - СравочникСсылка.Склады,
//     СпособОбеспечения - СправочникСсылка.СпособыОбеспеченияПотребностей
//    НастройкиКомпоновкиДанных передаются если необходимо получить все потребности, согласно отбору установленному
//    пользователем в компоновщике настроек:
//     Склад, Номенклатура, Характеристика, СпособОбеспечения, ИсточникОбеспечения, ТипОбеспечения,
//     ПодразделениеПолучатель, Назначение,
//   ТипОтбора - Строка - принимает значения "ОтборПоЗначениям" и "ОтборКомпоновки" и определяет каким образом,
//    каким образом будет осуществляться отбор потребностей для расчета и помещения в таблицу результата.
//   ТаблицаСпособовОбеспечения - задает реквизиты способов обеспечения, переопределенные пользователем.
//   ТаблицаЗапасы - содержит данные о количестве товара которое необходимо заказать для поддержания запаса товаров.
// Возвращаемое значение:
//  Таблица значений, содержит поля ключа потребности:
//   содержит ключ потребности:
//    Номенклатура - СравочникСсылка.Номенклатура,
//    Характеристика - СравочникСсылка.ХарактеристикиНоменклатуры,
//    Склад - СравочникСсылка.Склады,
//    Назначение - СправочникСсылка.Назначение,
//    Заказ - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
//            ДокументСсылка.ЗаказНаПреремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказНаРемонт,
//            ДокументСсылка.ЗаказДавальца, ДокументСсылка.ЗаказПереработчику, ДокументСсылка.ЗаказНаПроизводство,
//            ДокументСсылка.МаршрутныйЛистПроизводства,
//    КодСтроки - Число,
//    Требуется - Число,
//    ДатаОтгрузки Дата,
//    Приоритет - СправочникСсылка.Приоритеты,
//    ОбеспечиватьНезависимоОтЗапасов - Булево,
//  поля для расчета количества к заказу:
//    Обеспечено - Число,
//    ФормироватьПлановыеЗаказы - Булево,
//    ДатаЗаказа - Дата - только для заказа "по графику",
//    ДатаСледующейПоставкиПоГрафику - Дата,
//    ГраницаОбеспечиваемогоПериода - Дата,
//  поля для редактирования в форме "Формирование заказов по потребностям":
//    СпособОбеспечения - СправочникСсылка.СпособыОбеспеченияПотребностей,
//    ИсточникОбеспечения - Справочникссылка.Склады, СправочникСсылка.Партнеры,
//    ДатаПоставки - Дата,
//  поля для отображения в форме "Формирование заказов по потребностям":
//    Артикул - Строка,
//    Код - Строка,
//    ЕдиницаИзмерения - Справочникссылка.УпаковкиЕдиницыИзмерения,
//  поля для расчетов в форме "Формирование заказов по потребностям":
//    ЦенаВВалютеУправленческогоУчета - Число,
//    ЦенаВВалютеСоглашения - Число,
//    ВалютаСоглашения - СправочникСсылка.Валюты,
//    ВидЦены - СправочникСсылка.ВидыЦенПоставщиков,
//    Вес - Число,
//    ИсточникОбеспеченияТолькоПросмотр - Булево,
//    ТипОбеспечения - ПеречислениеСсылка.ТипыОбеспечения,
//    ОбеспечиваемыйПериод - Число,
//    СрокПоставки - Число,
//    ДатаБлижайшейПоставкиПоГрафику - Дата,
// временно не используемые поля:
//   КалендарьСклада - СправочникСсылка.Календари,
//   КалендарьПредприятия - СправочникСсылка.Календари,
//   ОшибкаНеЗаполненКалендарьПредприятия - Булево,
//   ОшибкаНеЗаполненКалендарьСклада - Булево
//
Функция ТаблицаПотребностейПоЗаказамИОстатков(Отбор, ТипОтбора,
	ТаблицаСпособовОбеспечения = Неопределено, ТаблицаЗапасы = Неопределено) Экспорт

	Если ТипОтбора = "ОтборПоЗначениям" Тогда

		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&Номенклатура   КАК Номенклатура,
			|	&Характеристика КАК Характеристика,
			|	&Склад          КАК Склад,
			|	&ПодразделениеПолучатель КАК ПодразделениеПолучатель,
			|	ВЫБОР КОГДА &СпособОбеспечения = ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка) ТОГДА
			|			NULL
			|		ИНАЧЕ
			|			&СпособОбеспечения
			|	КОНЕЦ КАК СпособОбеспечения,
			|	&Назначение     КАК Назначение,
			|	&Заказ          КАК Заказ,
			|	&ДатаОтгрузки   КАК ДатаОтгрузки,
			|	&Требуется      КАК Количество
			|ПОМЕСТИТЬ ВтТовары
			|;
			|
			|///////////////////////////////
			|ВЫБРАТЬ
			|	Т.СпособОбеспечения         КАК СпособОбеспечения,
			|	ЕСТЬNULL(Т.СпособОбеспечения.ФормироватьПлановыеЗаказы, ЛОЖЬ) КАК ФормироватьПлановыеЗаказы,
			|	NULL                        КАК ДатаПоставки
			|ПОМЕСТИТЬ ВтСпособыОбеспеченияПереопределенный
			|ИЗ
			|	ВтТовары КАК Т
			|;
			|
			|///////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Заказ КАК Заказ
			|ПОМЕСТИТЬ ВтДоступныеЗаказы
			|ИНДЕКСИРОВАТЬ ПО
			|	Заказ
			|;
			|
			|//////////////////////////////////
			|";

		Для Каждого Свойство Из Отбор Цикл

			Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);

		КонецЦикла;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		НачалоДня = НачалоДня(ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня);
		Запрос.УстановитьПараметр("НачалоПериода",     НачалоДня);
		КоэффициентВалютыУпрУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыУправленческогоУчета(НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("КоэффициентВалютыУпрУчета", КоэффициентВалютыУпрУчета);
	
	Иначе

		СхемаКомпоновкиДанных = Обработки.ОбеспечениеПотребностей.ПолучитьМакет("МакетКомпоновкиДляГенерацииЗапросов");
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);

		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Отбор);

		СхемаКомпоновкиДанных.НаборыДанных.Набор.Запрос = ВременнаяТаблицаТоваровДляОбеспеченияЗаказов();
		Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, "Набор");
		УдалитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);

		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
			ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));

		НачалоДня = НачалоДня(ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня);
		Запрос.УстановитьПараметр("НачалоПериода",     НачалоДня);

		КоэффициентВалютыУпрУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыУправленческогоУчета(НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("КоэффициентВалютыУпрУчета", КоэффициентВалютыУпрУчета);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Таблица.Заказ.Ссылка КАК Заказ
			|ПОМЕСТИТЬ ВтДоступныеЗаказы
			|ИЗ
			|	ВтТовары КАК Таблица
			|ИНДЕКСИРОВАТЬ ПО
			|	Заказ
			|;
			|
			|//////////////////////////////////";
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.СпособОбеспечения         КАК СпособОбеспечения,
		|	Т.ФормироватьПлановыеЗаказы КАК ФормироватьПлановыеЗаказы,
		|	Т.ДатаПоставки              КАК ДатаПоставки
		|ПОМЕСТИТЬ ВтСпособыОбеспеченияПереопределенный
		|ИЗ
		|	&ТаблицаСпособовОбеспечения КАК Т
		|;
		|
		|///////////////////////////////////////////////
		|";
		Запрос.УстановитьПараметр("ТаблицаСпособовОбеспечения", ТаблицаСпособовОбеспечения);

		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад КАК Склад,
		|	Т.ИДИндекса КАК ИДИндекса
		|ПОМЕСТИТЬ ВтИдентификаторыТаблицыИндексовТаблица
		|ИЗ
		|	&ТаблицаЗапасы КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИдентификаторыТаблицыИндексовТаблица.Номенклатура,
		|	ВтИдентификаторыТаблицыИндексовТаблица.Характеристика,
		|	ВтИдентификаторыТаблицыИндексовТаблица.Склад,
		|	МАКСИМУМ(ВтИдентификаторыТаблицыИндексовТаблица.ИДИндекса) КАК ИДИндекса
		|ПОМЕСТИТЬ ВтИдентификаторыТаблицыИндексов
		|ИЗ
		|	ВтИдентификаторыТаблицыИндексовТаблица КАК ВтИдентификаторыТаблицыИндексовТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтИдентификаторыТаблицыИндексовТаблица.Номенклатура,
		|	ВтИдентификаторыТаблицыИндексовТаблица.Характеристика,
		|	ВтИдентификаторыТаблицыИндексовТаблица.Склад
		|;
		|
		|///////////////////////////////////////////////
		|";
		Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.СпособОбеспечения КАК Ссылка
		|ПОМЕСТИТЬ ВтСпособыОбеспечения
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияПереопределенный КАК ТаблицаСпособыОбеспеченияПререопределенный
		|		ПО ЕСТЬNULL(Т.СпособОбеспечения, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))
		|			= ТаблицаСпособыОбеспеченияПререопределенный.СпособОбеспечения
		|;
		|
		|/////////////////////////////////
		|";

	Запрос.Выполнить();
	Запрос.Текст = Справочники.СпособыОбеспеченияПотребностей.ВременнаяТаблицаДатПоставок();

	Запрос.Выполнить();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Склад              КАК Склад,
		|	Т.СпособОбеспечения  КАК СпособОбеспечения
		|
		|ПОМЕСТИТЬ ВтСкладыИСпособыОбеспечения
		|ИЗ
		|	ВтТовары КАК Т
		|;
		|
		|/////////////////////////////////
		|";

	Запрос.Выполнить();
	Запрос.Текст = ВременнаяТаблицаИнтерваловРаботыСкладов();

	Запрос.Выполнить();
	Запрос.Текст = ВременнаяТаблицаГраницыОбеспечиваемогоПериода();

	Запрос.Выполнить();
	Запрос.Текст = ВременнаяТаблицаДанныеЗаполненияЗаказаПоставщику();

	Запрос.Выполнить();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Номенклатура         КАК Номенклатура,
		|	Т.Характеристика       КАК Характеристика,
		|	Т.Склад                КАК Склад,
		|	Т.Номенклатура.Наименование         КАК НоменклатураНаименование,
		|	Т.Характеристика.Наименование       КАК ХарактеристикаНаименование,
		|	Т.Склад.Наименование                КАК СкладНаименование,
		|
		|	Т.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	Т.Назначение           КАК Назначение,
		|	ТаблицаДоступныеЗаказы.Заказ  КАК Заказ,
		|	СпрПриоритет.Ссылка    КАК Приоритет,
		|	СпрПриоритет.РеквизитДопУпорядочивания КАК ПриоритетРеквизитДопУпорядочивания,
		|	Т.ДатаОтгрузки         КАК ДатаОтгрузки,
		|	Т.Количество           КАК Требуется,
		|
		|	ВЫБОР КОГДА Т.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		 И ТоварныеОграничения.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|		 И ТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса = ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.НезависимоОтЗапасов) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ             КАК ОбеспечиватьНезависимоОтЗапасов,
		|	//%РасчетОкругленияИдИндекса
		//Параметры номенклатуры
		|	&ТекстЗапросаВесНоменклатуры                        КАК Вес,
		|	Т.Номенклатура.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	Т.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипЕдиницыИзмерения,
		|	Т.Номенклатура.Код                                  КАК Код,
		|	Т.Номенклатура.Артикул                              КАК Артикул,
		|	Т.Номенклатура.ИспользоватьУпаковки                 КАК ИспользоватьУпаковки,
		|	ВЫБОР КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ             КАК ЭтоРабота,
		|
		//Способ обеспечения
		|	Т.СпособОбеспечения                                  КАК СпособОбеспечения,
		|	ЕСТЬNULL(Т.СпособОбеспечения.ТипОбеспечения,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка))  КАК ТипОбеспечения,
		|	ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы КАК ФормироватьПлановыеЗаказы,
		|	ВЫБОР КОГДА ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы ТОГДА
		|			ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки
		|		ИНАЧЕ
		// При методе Заказ под заказ и правиле Заказ при достижении точки заказа, источником является ДатаОтгрузки заказа, если она больше даты возможной поставки по способу обеспечения.
		|			ВЫБОР КОГДА (НЕ ТаблицаСпособовОбеспеченияПереопределенный.ФормироватьПлановыеЗаказы)
		|				И (ТоварныеОграничения.МетодОбеспеченияПотребностей = ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|					ИЛИ ТоварныеОграничения.МетодОбеспеченияПотребностей ЕСТЬ NULL) ТОГДА
		|				
		|				ВЫБОР КОГДА ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ДатаПоставки, ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки) >
		|					
		|					ВЫБОР КОГДА Т.ДатаОтгрузки < ДОБАВИТЬКДАТЕ(&НачалоТекущегоДня, ДЕНЬ, ЕСТЬNULL(РеквизитыСпособаОбеспечения.ДлительностьВДнях, 0)) ТОГДА
		|								ДОБАВИТЬКДАТЕ(&НачалоТекущегоДня, ДЕНЬ, ЕСТЬNULL(РеквизитыСпособаОбеспечения.ДлительностьВДнях, 0))
		|							ИНАЧЕ
		|								ДОБАВИТЬКДАТЕ(Т.ДатаОтгрузки, ДЕНЬ, -ЕСТЬNULL(РеквизитыСпособаОбеспечения.ДлительностьВДнях, 0))
		|						КОНЕЦ
		|					
		|					ТОГДА
		|							ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ДатаПоставки, ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки)
		|					ИНАЧЕ
		|							
		|					ВЫБОР КОГДА Т.ДатаОтгрузки < ДОБАВИТЬКДАТЕ(&НачалоТекущегоДня, ДЕНЬ, ЕСТЬNULL(РеквизитыСпособаОбеспечения.ДлительностьВДнях, 0)) ТОГДА
		|								ДОБАВИТЬКДАТЕ(&НачалоТекущегоДня, ДЕНЬ, ЕСТЬNULL(РеквизитыСпособаОбеспечения.ДлительностьВДнях, 0))
		|							ИНАЧЕ
		|								ДОБАВИТЬКДАТЕ(Т.ДатаОтгрузки, ДЕНЬ, -ЕСТЬNULL(РеквизитыСпособаОбеспечения.ДлительностьВДнях, 0))
		|						КОНЕЦ
		|					
		|				КОНЕЦ
		|					
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаСпособовОбеспеченияПереопределенный.ДатаПоставки,
		|					ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки)
		|			КОНЕЦ
		|		КОНЕЦ                                            КАК ДатаПоставки,
		|	ТаблицаСпособовОбеспечения.ПлановаяДатаЗаказа        КАК ДатаЗаказа,
		|	ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки      КАК ДатаБлижайшейПоставкиПоГрафику,
		|	ТаблицаСпособовОбеспечения.ДатаСледующейПоставки     КАК ДатаСледующейПоставкиПоГрафику,
		|	ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод      КАК ОбеспечиваемыйПериод,
		|	ВозможнаяПоставка.КоличествоДней                     КАК СрокПоставки,
		|	ВЫБОР КОГДА СпрКалендарьСклада.Ссылка ЕСТЬ NULL ТОГДА
		|				ДОБАВИТЬКДАТЕ(ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки,
		|					ДЕНЬ, ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод)
		|			ИНАЧЕ
		|				ГраницаПериода.Дата
		|		КОНЕЦ                                            КАК ГраницаОбеспечиваемогоПериода,
		|
		//Диагностика проблем
		|	СпрКалендарьСклада.Ссылка                                       КАК КалендарьСклада,
		|	ОсновнойКалендарь.Значение                                      КАК КалендарьПредприятия,
		|
		|	ТаблицаСпособовОбеспечения.ОшибкаНеЗаполненкалендарьПредприятия КАК ОшибкаНеЗаполненКалендарьПредприятия,
		|	ВЫБОР КОГДА ВозможнаяПоставка.КоличествоДней ЕСТЬ NULL
		|			ИЛИ ГраницаПериода.Дата ЕСТЬ NULL ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                                                       КАК ОшибкаНеЗаполненКалендарьСклада,
		|
		//Условия закупок
		|	//%УсловияЗакупок
		|	ЕСТЬNULL(ДанныеЗаполнения.Партнер,
		|		Т.СпособОбеспечения.ИсточникОбеспеченияПотребностей)        КАК ИсточникОбеспечения,
		|	ВЫБОР КОГДА Т.СпособОбеспечения.Соглашение <> ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) ТОГДА
		|				Т.СпособОбеспечения.Соглашение
		|			ИНАЧЕ
		|				ДанныеЗаполнения.Соглашение
		|		КОНЕЦ                                                       КАК Соглашение,
		|	ТоварныеОграничения.УпаковкаЗаказа                              КАК УпаковкаЗаказа,
		|	ЕСТЬNULL(СпрУпаковки.Числитель, 1)                              КАК ЧислительУпаковки,
		|	ЕСТЬNULL(СпрУпаковки.Знаменатель, 1)                            КАК ЗнаменательУпаковки
		|ИЗ
		|	ВтТовары КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДоступныеЗаказы КАК ТаблицаДоступныеЗаказы
		|		ПО ТаблицаДоступныеЗаказы.Заказ = Т.Заказ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|		ПО ИСТИНА
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияПереопределенный КАК ТаблицаСпособовОбеспеченияПереопределенный
		|		ПО ЕСТЬNULL(Т.СпособОбеспечения, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))
		|			= ТаблицаСпособовОбеспеченияПереопределенный.СпособОбеспечения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари КАК СпрКалендарьСклада
		|		ПО ВЫБОР КОГДА Т.Склад.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|					Т.Склад.Календарь
		|				ИНАЧЕ
		|					ОсновнойКалендарь.Значение
		|			КОНЕЦ = СпрКалендарьСклада.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияДатыПоставок КАК ТаблицаСпособовОбеспечения
		|		ПО Т.СпособОбеспечения = ТаблицаСпособовОбеспечения.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК РеквизитыСпособаОбеспечения
		|		ПО РеквизитыСпособаОбеспечения.Ссылка = Т.СпособОбеспечения
		|		 И РеквизитыСпособаОбеспечения.ДлительностьВДнях > 0
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнтервалКалендарногоГрафика КАК ВозможнаяПоставка
		|		ПО СпрКалендарьСклада.Ссылка = ВозможнаяПоставка.Календарь
		|		 И &НачалоТекущегоДня = ВозможнаяПоставка.Дата1
		|		 И ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки = ВозможнаяПоставка.Дата2
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыГрафика КАК ГраницаПериода
		|		ПО СпрКалендарьСклада.Ссылка = ГраницаПериода.Календарь
		|		 И ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод  = ГраницаПериода.ЧислоДней
		|		 И ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки = ГраницаПериода.ДатаОтсчета
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЗаполненияЗаказаПоставщику КАК ДанныеЗаполнения
		|		ПО Т.Номенклатура    = ДанныеЗаполнения.Номенклатура
		|		 И Т.Характеристика  = ДанныеЗаполнения.Характеристика
		|		 И Т.Склад           = ДанныеЗаполнения.Склад
		|		 И ЕСТЬNULL(Т.СпособОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка), ИСТИНА)
		|		 И Т.СпособОбеспечения.ИсточникОбеспеченияПотребностей.Ссылка ЕСТЬ NULL
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоставщиков КАК ЦеныПоставщиков
		|		ПО Т.Номенклатура       = ЦеныПоставщиков.Номенклатура
		|			И Т.Характеристика  = ЦеныПоставщиков.Характеристика
		|			И ЕСТЬNULL(ДанныеЗаполнения.ВидЦеныПоставщика, Т.СпособОбеспечения.ВидЦеныПоставщика) = ЦеныПоставщиков.ВидЦеныПоставщика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ЦеныПоставщиков.Валюта = КурсыВалют.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютаСоглашения
		|		ПО ЕСТЬNULL(ДанныеЗаполнения.Валюта, Т.СпособОбеспечения.Соглашение.Валюта) = КурсВалютаСоглашения.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Приоритеты КАК СпрПриоритет
		|		ПО &ПриоритетУсловие = СпрПриоритет.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|		ПО &ПодстановкаТоварногоОграничения
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
		|		ПО ТоварныеОграничения.УпаковкаЗаказа = СпрУпаковки.Ссылка
		|
		|//%ДанныеДляРасчетаОкругления
		|
		|//%Ассортимент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетРеквизитДопУпорядочивания,
		|	ДатаОтгрузки,
		|	Заказ,
		|	НоменклатураНаименование, ХарактеристикаНаименование, СкладНаименование";

	НетПриоритета = ТипОтбора = "ОтборПоЗначениям" И Отбор.Заказ.Метаданные().Реквизиты.Найти("Приоритет") = Неопределено;

	Запрос.Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Запрос.Текст, "ПодстановкаТоварногоОграничения");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"Т.Номенклатура.ЕдиницаИзмерения",
			"Т.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПриоритетУсловие", ?(НетПриоритета, "NULL", "Т.Заказ.Приоритет"));

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловияЗакупок", ТекстПолейУсловияЗакупок());

	Если ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Ассортимент", ТекстУсловияАссортимент());
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Ассортимент", "");
	КонецЕсли;
	
	Если ТипОтбора = "ОтборПоЗначениям" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%РасчетОкругленияИдИндекса", 
			"-1 КАК ИДИндекса,");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ДанныеДляРасчетаОкругления", ТекстУсловияДанныеДляРасчетаОкругления());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%РасчетОкругленияИдИндекса", 
			"ЕСТЬNull(ВтИдентификаторыТаблицыИндексов.ИДИндекса, -1) КАК ИДИндекса,");
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();

	Если ТипОтбора = "ОтборПоЗначениям" Тогда

		ТаблицаОстатки = Неопределено;

	Иначе

		Запрос.УстановитьПараметр("ТаблицаЗапасы", ТаблицаЗапасы);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Номенклатура   КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|	Т.Склад          КАК Склад,
			|	Т.КЗаказу        КАК КЗаказу,
			|	Т.Отметка        КАК Отметка
			|ПОМЕСТИТЬ
			|	ВтЗапасы
			|ИЗ
			|	&ТаблицаЗапасы КАК Т
			|ГДЕ
			|	Т.КЗаказу > 0
			|	И Т.Отметка
			|;
			|/////////////////////////////////
			|";

		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Таблица.Номенклатура            КАК Номенклатура,
			|	Таблица.Характеристика          КАК Характеристика,
			|	Таблица.Склад                   КАК Склад,
			|	Таблица.Назначение              КАК Назначение,
			|	Таблица.ПодразделениеПолучатель КАК ПодразделениеПолучатель
			|ПОМЕСТИТЬ ВтРазличныеТовары
			|ИЗ
			|	ВтТовары КАК Таблица
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение, ПодразделениеПолучатель
			|;
			|
			|/////////////////////////////////
			|";
			
		Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	Т.Номенклатура            КАК Номенклатура,
			|	Т.Характеристика          КАК Характеристика,
			|	Т.Склад                   КАК Склад,
			|	Т.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
			|	Т.Назначение              КАК Назначение,
			|	СУММА(Т.КРезервированию)  КАК КРезервированию
			|ИЗ(
			|	ВЫБРАТЬ
			|		Т.Номенклатура   КАК Номенклатура,
			|		Т.Характеристика КАК Характеристика,
			|		Т.Склад          КАК Склад,
			|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеПолучатель,
			|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
			|		МАКСИМУМ(ТаблицаОстатки.Количество)  КАК КРезервированию
			|	ИЗ
			|		ВтТовары КАК Т
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ТаблицаОстатки
			|			ПО Т.Номенклатура   = ТаблицаОстатки.Номенклатура
			|			 И Т.Характеристика = ТаблицаОстатки.Характеристика
			|			 И Т.Склад          = ТаблицаОстатки.Склад
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК Настройка
			|			ПО &ПодстановкаТоварногоОграничения
			|	ГДЕ
			|		Т.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|			И ЕСТЬNULL(Настройка.ОбеспечениеЗаказовПриПоддержанииЗапаса, ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов))
			|			<> ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.НезависимоОтЗапасов)
			|
			|	СГРУППИРОВАТЬ ПО
			|		Т.Номенклатура, Т.Характеристика, Т.Склад
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.Номенклатура   КАК Номенклатура,
			|		Т.Характеристика КАК Характеристика,
			|		Т.Склад          КАК Склад,
			|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеПолучатель,
			|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
			|		Т.ВНаличииОстаток
			|			- Т.ВРезервеСоСкладаОстаток
			|			- Т.ВРезервеПодЗаказОстаток КАК КРезервированию
			|	ИЗ
			|		РегистрНакопления.СвободныеОстатки.Остатки(,
			|			(Номенклатура, Характеристика, Склад) В(
			|				ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Т.Номенклатура   КАК Номенклатура,
			|					Т.Характеристика КАК Характеристика,
			|					Т.Склад          КАК Склад
			|				ИЗ
			|					ВтТовары КАК Т
			|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК Настройка
			|						ПО &ПодстановкаТоварногоОграничения
			|				ГДЕ
			|					Т.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|					И ЕСТЬNULL(Настройка.ОбеспечениеЗаказовПриПоддержанииЗапаса, ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов))
			|			<> ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.НезависимоОтЗапасов))) КАК Т
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.Номенклатура   КАК Номенклатура,
			|		Т.Характеристика КАК Характеристика,
			|		Т.Склад          КАК Склад,
			|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеПолучатель,
			|		Т.Назначение     КАК Назначение,
			|		Т.ПотребностьОстаток - Т.КЗаказуОстаток КАК КРезервированию
			|	ИЗ
			|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
			|			(Номенклатура, Характеристика, Склад, Назначение) В(
			|				ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Т.Номенклатура   КАК Номенклатура,
			|					Т.Характеристика КАК Характеристика,
			|					Т.Склад          КАК Склад,
			|					Т.Назначение     КАК Назначение
			|				ИЗ
			|					ВтТовары КАК Т
			|				ГДЕ
			|					Т.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))) КАК Т
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.Номенклатура                           КАК Номенклатура,
			|		Т.Характеристика                         КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|		Т.Подразделение                          КАК ПодразделениеПолучатель,
			|		Т.Назначение                             КАК Назначение,
			|		Т.КОбеспечениюРасход                     КАК КРезервированию
			|	ИЗ
			|		РегистрНакопления.ОбеспечениеЗаказовРаботами.Обороты(,,,
			|			(Номенклатура, Характеристика, Назначение, Подразделение) В(
			|				ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					Т.Номенклатура   КАК Номенклатура,
			|					Т.Характеристика КАК Характеристика,
			|					Т.Назначение     КАК Назначение,
			|					Т.ПодразделениеПолучатель КАК Подразделение
			|				ИЗ
			|					ВтТовары КАК Т
			|				ГДЕ
			|					Т.ПодразделениеПолучатель <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))КАК Т
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.Номенклатура   КАК Номенклатура,
			|		Т.Характеристика КАК Характеристика,
			|		ВЫБОР КОГДА Т.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
			|					Т.Склад
			|				ИНАЧЕ
			|					ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			КОНЕЦ        КАК Склад,
			|		ВЫБОР КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
			|					Т.Подразделение
			|				ИНАЧЕ
			|					ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|			КОНЕЦ        КАК ПодразделениеПолучатель,
			|		Т.Назначение     КАК Назначение,
			|		Т.Количество     КАК КРезервированию
			|	ИЗ
			|		Документ.ЗаказПоставщику.Товары КАК Т
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРазличныеТовары КАК Фильтр
			|			ПО Т.Номенклатура   = Фильтр.Номенклатура
			|			 И Т.Характеристика = Фильтр.Характеристика
			|			 И (Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|				ИЛИ Т.Склад   = Фильтр.Склад)
			|			 И Т.Назначение     = Фильтр.Назначение
			|			 И (Т.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|				ИЛИ Т.Подразделение = Фильтр.ПодразделениеПолучатель)
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК Настройка
			|			ПО &ПодстановкаТоварногоОграничения
			|	ГДЕ
			|		Т.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
			|		И НЕ Т.Отменено
			|		И Т.Ссылка.Проведен
			|		И ЕСТЬNULL(Настройка.ОбеспечениеЗаказовПриПоддержанииЗапаса, ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов))
			|			<> ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.НезависимоОтЗапасов)
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.Номенклатура   КАК Номенклатура,
			|		Т.Характеристика КАК Характеристика,
			|		Т.Склад          КАК Склад,
			|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеПолучатель,
			|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
			|		Т.КЗаказу        КАК КРезервированию
			|	ИЗ
			|		ВтЗапасы КАК Т
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК Настройка
			|			ПО &ПодстановкаТоварногоОграничения
			|	ГДЕ
			|		ЕСТЬNULL(Настройка.ОбеспечениеЗаказовПриПоддержанииЗапаса, ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов))
			|			<> ЗНАЧЕНИЕ(Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.НезависимоОтЗапасов)) КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Номенклатура, Т.Характеристика, Т.Склад, Т.ПодразделениеПолучатель,
			|	Т.Назначение
			|";

		Запрос.Текст = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Запрос.Текст, "ПодстановкаТоварногоОграничения", Неопределено, "Настройка");
		ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
		ТаблицаОстатки.Индексы.Добавить("Номенклатура, Характеристика, Склад, ПодразделениеПолучатель, Назначение");

	КонецЕсли;

	Возврат Новый Структура("ТаблицаПотребностей, ТаблицаОстатков", Таблица, ТаблицаОстатки);

КонецФункции

// Рассчитывает минимальный и максимальный запас для товара.
//
// Параметры:
//  Товар - ДанныеФормыКоллекция - Содержит параметры расчета потребности в товаре при поддержании запаса:
//   МетодОбеспечения - ПеречислениеСсылка.МетодыОбеспеченияПотребностей,
//   ФормироватьПлановыеЗаказы - Булево,
//   СрокПоставки - Число,
//   СрокДоПлановойПоставки - Число,
//   СреднедневноеПотребление - Число
//   СтраховойЗапас - Число,
//   ОбеспечиваемыйПериод - Число,
//   МинимальныйЗапас - Число - минимальный запас, назначеннй пользователем (для метода мин-макс),
//   МаксимальныйЗапас - Число - минимальный запас, назначеннй пользователем (для метода мин-макс).
//
// Возвращаемое значение:
//  Структура - Структура с полями:
//   МинимальныйЗапас - Число - Рассчитанный минимальный запас,
//   МаксимальныйЗапас - Число - Рассчитанный максимальный запас.
//
Функция МинимальныйИМаксимальныйЗапасы(Товар) Экспорт
	
	МетодПоСтатистике = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике");
	МетодПоНорме      = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме");
	
	Если Товар.МетодОбеспечения = МетодПоСтатистике Или Товар.МетодОбеспечения = МетодПоНорме Тогда
		
		Если Товар.ФормироватьПлановыеЗаказы Тогда
			СрокПоставки = Мин(Товар.СрокПоставки, Товар.СрокДоПлановойПоставки);
		Иначе
			СрокПоставки = Товар.СрокПоставки;
		КонецЕсли;
		
		МинимальныйЗапас  = Товар.СреднедневноеПотребление * СрокПоставки;
		МаксимальныйЗапас = Товар.СреднедневноеПотребление * Товар.ОбеспечиваемыйПериод;
		
		Если Товар.ТипЕдиницыИзмерения = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук Тогда
			
			Если Цел(МинимальныйЗапас) <> МинимальныйЗапас Тогда
				МинимальныйЗапас = 1 + Цел(МинимальныйЗапас);
			КонецЕсли;
			
			Если Цел(МаксимальныйЗапас) <> МаксимальныйЗапас Тогда
				МаксимальныйЗапас = 1 + Цел(МаксимальныйЗапас);
			КонецЕсли;
		
		КонецЕсли;
		
		МинимальныйЗапас  = МинимальныйЗапас  + Товар.СтраховойЗапас;
		МаксимальныйЗапас = МаксимальныйЗапас + Товар.СтраховойЗапас;
	
	Иначе
		МинимальныйЗапас  = Товар.МинимальныйЗапас;
		МаксимальныйЗапас = Товар.МаксимальныйЗапас;
	КонецЕсли;
	
	Возврат Новый Структура("МинимальныйЗапас, МаксимальныйЗапас", МинимальныйЗапас, МаксимальныйЗапас);
	
КонецФункции

// Рассчитывает уровень запаса по текущим складским запасам и установленным для товара параметрам поддержания запаса.
//
// Параметры:
//  Товар - ДанныеФормыКоллекция - Содержит параметры расчета потребности в товаре при поддержании запаса:
//   МетодОбеспечения - ПеречислениеСсылка.МетодыОбеспеченияПотребностей,
//   МинимальныйЗапас - Число,
//   МаксимальныйЗапас - Число,
//   ЗаказыКПоступлению - Число,
//   Остаток - Число,
//   ПотреблениеСтабильно - Булево.
//
// Возвращаемое значение:
//  Структура - Структура с полями:
//   УровеньЗапаса - Число,
//   УровеньЗапасаМаксимум - Число,
//   КартинкаСменитьМетод - Число,
//   ТочкаЗаказаКартинка - Число,
//   КОтменеЗаказаКартинка - Число.
//
Функция УровеньЗапасаИКартинкаСменитьМетод(Товар) Экспорт

	МетодПоСтатистике =
		Товар.МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике");

	УровеньЗапаса =
		?(Товар.Остаток - Товар.МинимальныйЗапас < 0,     1,      // критический
		?(Товар.Остаток - 2 * Товар.МинимальныйЗапас < 0, 2,      // близкий к критическому
		?(Товар.Остаток < Товар.МаксимальныйЗапас / 2,    4,      // меньше половины
		                                                  7)));

	УровеньЗапасаМаксимум =
		?(Товар.Остаток > Товар.МаксимальныйЗапас,      6,      // избыток
		?(Товар.Остаток >= Товар.МаксимальныйЗапас / 2, 5,      // больше половины
		                                                7));

	ТочкаЗаказаКартинка   = Товар.Остаток - Товар.МинимальныйЗапас < 0;
	КОтменеЗаказаКартинка = Товар.ЗаказыКпоступлению + Товар.Остаток - Товар.МинимальныйЗапас > Товар.МаксимальныйЗапас
		И Товар.ЗаказыКпоступлению > 0;

	КартинкаСменитьМетод =
		?(Товар.ПотреблениеСтабильно И Не МетодПоСтатистике,     0, // рекомендуется использовать статистику
		?(Не Товар.ПотреблениеСтабильно И МетодПоСтатистике,     1, // рекомендуется использовать мин-макс
		?(Товар.ПотреблениеСтабильно И МетодПоСтатистике,       -1, // метод соответствует рекомендации
		?(Не Товар.ПотреблениеСтабильно И Не МетодПоСтатистике, -1, // метод соответствует рекомендации
		                                                                                         -2)))); // нет рекомендации

	Результат = Новый Структура();
	Результат.Вставить("УровеньЗапаса", УровеньЗапаса);
	Результат.Вставить("УровеньЗапасаМаксимум", УровеньЗапасаМаксимум);
	Результат.Вставить("КартинкаСменитьМетод", КартинкаСменитьМетод);
	Результат.Вставить("ТочкаЗаказаКартинка", ТочкаЗаказаКартинка);
	Результат.Вставить("КОтменеЗаказаКартинка", КОтменеЗаказаКартинка);
	Возврат Результат;

КонецФункции

// Рассчитывает количество к заказу для поддержания запаса.
//
// Параметры:
//  Товар - ДанныеФормыКоллекция - Содержит параметры расчета потребности в товаре при поддержании запаса:
//   Остаток - Число,
//   ЗаказыКПоступлению - Число,
//   МинимальныйЗапас - Число,
//   МаксимальныйЗапас - Число,
//   ФормироватьПлановыеЗаказы - Булево,
//   ДатаЗаказа - Число.
//
// Возвращаемое значение:
//  Структура - Структура с полями:
//   Отметка - Булево,
//   КЗаказу - Число,
//   ДатаЗаказаНаступила - Булево,
//   ТочкаЗаказаНаступила - Булево.
//
Функция КоличествоКЗаказуДляПоддержанияЗапаса(Товар) Экспорт

	ДоТочкиЗаказа = Товар.Остаток - Товар.МинимальныйЗапас;

	КЗаказу = Макс(0, Товар.МаксимальныйЗапас - Товар.ЗаказыКпоступлению - Макс(0, ДоТочкиЗаказа + Товар.СтраховойЗапас));
	
	ДатаЗаказаНаступила  = Товар.ФормироватьПлановыеЗаказы И Товар.ДатаЗаказа <= НачалоДня(ТекущаяДатаСеанса());
	ТочкаЗаказаНаступила = ДоТочкиЗаказа <= 0;
	Отметка = (ДатаЗаказаНаступила Или ТочкаЗаказаНаступила И Не Товар.ФормироватьПлановыеЗаказы) И КЗаказу > 0;

	Результат = Новый Структура();
	Результат.Вставить("КЗаказу",              КЗаказу);
	Результат.Вставить("Отметка",              Отметка);
	Результат.Вставить("ДатаЗаказаНаступила",  ДатаЗаказаНаступила);
	Результат.Вставить("ТочкаЗаказаНаступила", ТочкаЗаказаНаступила);
	Результат.Вставить("ДоТочкиЗаказа",        ДоТочкиЗаказа);

	Возврат Результат;

КонецФункции

// Рассчитывает количество к заказу для обеспечения заказов.
//
// Параметры:
//  Товар - ДанныеФормыКоллекция - Содержит параметры расчета потребности в товаре/работе для обеспечении заказов:
//   Требуется - Число,
//   КРезервированию - Число,
//   ДатаОтгрузки - Дата,
//   ФормироватьПлановыеЗаказы - Булево,
//   ДатаЗаказа - Дата,
//   ДатаСледующейПоставкиПоГрафику - Дата,
//   ОбеспечиваемыйПериод - Число,
//   ГраницаОбеспечиваемогоПериода - Дата.
//
// Возвращаемое значение:
//  Структура - Структура с полями:
//   Отметка - Булево,
//   КЗаказу - Число,
//   ДатаЗаказаНаступила - Булево,
//   ОтгрузкаВнутриПериода - Булево.
//
Функция КоличествоКЗаказуДляОбеспеченияЗаказов(Товар) Экспорт

	КЗаказу = Товар.Требуется - Товар.КРезервированию;
	ДатаЗаказаНаступила = Товар.ФормироватьПлановыеЗаказы И Товар.ДатаЗаказа <= НачалоДня(ТекущаяДатаСеанса());

	Если ДатаЗаказаНаступила Тогда

		ОтгрузкаВнутриПериода = Товар.ДатаОтгрузки < Товар.ДатаСледующейПоставкиПоГрафику;

	ИначеЕсли Товар.ФормироватьПлановыеЗаказы Тогда

		ОтгрузкаВнутриПериода = Ложь;

	Иначе

		Если Товар.ОбеспечиваемыйПериод > 0 Тогда

			ОтгрузкаВнутриПериода = Товар.ДатаОтгрузки < Товар.ГраницаОбеспечиваемогоПериода;

		Иначе

			ОтгрузкаВнутриПериода = Истина;

		КонецЕсли;


	КонецЕсли;

	Отметка = КЗаказу > 0 И ОтгрузкаВнутриПериода;

	Результат = Новый Структура();
	Результат.Вставить("КЗаказу",               КЗаказу);
	Результат.Вставить("Отметка",               Отметка);
	Результат.Вставить("ДатаЗаказаНаступила",   ДатаЗаказаНаступила);
	Результат.Вставить("ОтгрузкаВнутриПериода", ОтгрузкаВнутриПериода);

	Возврат Результат;

КонецФункции

#КонецОбласти

// Заполняет обеспечение в заказах вариантом "Из заказа".
//
// Параметры:
//  ТаблицаКОбеспечению - ТаблицаЗначений - Таблица содержащая поля, идентифицирующие строки заказов,
//                                          в которых необходимо заполнить вариант обеспечения, содержит поля:
//                                          Заказ, КодСтроки, Номенклатура, Характеристика, Назначение.
//
Процедура ОбеспечитьИзЗаказа(ТаблицаКОбеспечению) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Заказ КАК Заказ,
		|	Т.ДатаОтгрузки   КАК ДатаОтгрузки,
		|
		|	Т.Склад          КАК Склад,
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Назначение     КАК Назначение
		|
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Таблица КАК Т
		|;
		|
		|/////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Заказ            КАК Ссылка,
		|	Товары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК Товары
		|		ПО Т.Заказ = Товары.Ссылка
		|		 И Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Склад
		|		 И(Т.Назначение     = Товары.Ссылка.Назначение
		|			ИЛИ Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|		 И Т.ДатаОтгрузки   = Товары.ДатаОтгрузки
		|		 И Товары.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Заказ            КАК Ссылка,
		|	Товары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
		|		ПО Т.Заказ = Товары.Ссылка
		|		 И Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Ссылка.Склад
		|		 И(Т.Назначение     = Товары.Ссылка.Назначение
		|			ИЛИ Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|		 И Т.ДатаОтгрузки   = Товары.ДатаОтгрузки
		|		 И Товары.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Заказ            КАК Ссылка,
		|	Товары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК Товары
		|		ПО Т.Заказ = Товары.Ссылка
		|		 И Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Ссылка.СкладОтправитель
		|		 И( Т.Назначение = ВЫБОР КОГДА Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|		                                       Товары.Ссылка.Назначение
		|		                                  ИНАЧЕ
		|		                                       Товары.Назначение
		|		                            КОНЕЦ
		|			ИЛИ Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|		 И Т.ДатаОтгрузки   = Товары.НачалоОтгрузки
		|		 И Товары.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Заказ            КАК Ссылка,
		|	Товары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК Товары
		|		ПО Т.Заказ = Товары.Ссылка
		|		 И Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Ссылка.Склад
		|		 И( Т.Назначение = ВЫБОР КОГДА Товары.Ссылка.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|		                                       Товары.Ссылка.НазначениеТовары
		|		                                  ИНАЧЕ
		|		                                       Товары.Ссылка.Назначение
		|		                            КОНЕЦ
		|			ИЛИ Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|		 И Товары.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|		 И Товары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Заказ            КАК Ссылка,
		|	Товары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВтТовары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК Товары
		|		ПО Т.Заказ = Товары.Ссылка
		|		 И Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Ссылка.Склад
		|		 И (Т.Назначение     = Товары.Ссылка.Назначение
		|			ИЛИ Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|		 И Т.ДатаОтгрузки   = Товары.ДатаОтгрузки
		|		 И Товары.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|
		|ИТОГИ ПО
		|	Ссылка";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", ТаблицаКОбеспечению);

	УстановитьПривилегированныйРежим(Истина);
	ВыборкаЗаказов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ПереченьВариантов = Новый Массив();
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.ИзЗаказов);

	ИндексыСтрок = Новый Массив();
	Пока ВыборкаЗаказов.Следующий() Цикл

		ИндексыСтрок.Очистить();
		Выборка = ВыборкаЗаказов.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИндексыСтрок.Добавить(Выборка.НомерСтроки - 1);
		КонецЦикла;

		ВыполнитьОбеспечениеЗаказа(ВыборкаЗаказов.Ссылка, ИндексыСтрок, ПереченьВариантов);

	КонецЦикла;

КонецПроцедуры

// Возвращает таблицу, содержащие данные, идентифицирующие строки заказа для последующего заполнения в них обеспечения.
//
// Параметры:
//  Документ - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента,
//             ДокументСсылка.ЗаказНаПреремещение, ДокументСсылка.ЗаказНаСборку, ДокументСсылка.ЗаказНаРемонт,
//             ДокументСсылка.ЗаказДавальца, ДокументСсылка.ЗаказПереработчику, ДокументСсылка.ЗаказНаПроизводство,
//             ДокументСсылка.МаршрутныйЛистПроизводства - Заказ,
//  ИндексыСтрок - Массив - содержит индексы строк табличной части документа,  для последующего заполнения в них обеспечения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с полями согласно функции ОбеспечениеСервер.ТаблицаПотребностей.
//
Функция ТаблицаПотребностей(Документ, ИндексыСтрок) Экспорт

	Тип = ТипЗнч(Документ.Ссылка);
	
	ИмяТабличнойЧасти = "Товары";

	Если Тип = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ИмяТабличнойЧасти = "ЗаменяющиеТовары";
		

	КонецЕсли;

	ТаблицаПотребностей = ОбеспечениеСервер.ТаблицаПотребностей();
	Если Тип = Тип("ДокументСсылка.ЗаказНаСборку") И
		Документ.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		
	Иначе


		//таблица с полями: "НомерСтроки, Количество, ДатаОтгрузки, ВариантОбеспечения, Упаковка, Номенклатура, Характеристика, Склад"

		Для каждого ИндексСтроки Из ИндексыСтрок Цикл

			СтрокаПотребности = ТаблицаПотребностей.Добавить();

			СтрокаТовары = Документ[ИмяТабличнойЧасти][ИндексСтроки];
			ЗаполнитьЗначенияСвойств(СтрокаПотребности, СтрокаТовары);
			СтрокаПотребности.Назначение = Документ.Назначение;
			СтрокаПотребности.Подразделение = Документ.Подразделение;
			СтрокаПотребности.Идентификатор = ИндексСтроки;

			Если Тип = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				СтрокаПотребности.Склад = Документ.Склад;
			ИначеЕсли Тип = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
				СтрокаПотребности.Склад = Документ.Склад;
			ИначеЕсли Тип = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
				СтрокаПотребности.Склад = Документ.Склад;
				СтрокаПотребности.ДатаОтгрузки = Документ.НачалоСборкиРазборки;
			ИначеЕсли Тип = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				СтрокаПотребности.Склад = Документ.СкладОтправитель;
				СтрокаПотребности.ДатаОтгрузки = СтрокаТовары.НачалоОтгрузки;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТаблицаПотребностей;
	
КонецФункции

//Функция ПолучитьДатыЗаказаПоКалендарю. Возвращает две ближайшие даты заказа по календарю работы.
//
//	Параметры:
//		"КалендарьЗаказа" - СправочникСсылка.Календари, Календарь по кторому необходимо рассчитать даты заказа.
//		"НачалоПериода"   - Дата, Дата, с которой начинается поиск дат заказа.
//
//	Возвращаемое значение: Структура со следующими полями:
//		"ДатаЗаказа"           - Ближайшая рабочая дата по календарю.
//		"ДатаСледующегоЗаказа" - Следующая рабочая дата за ближайшей.
//	
Функция ПолучитьДатыЗаказаПоКалендарю(КалендарьЗаказа, НачалоПериода) Экспорт
	
	КлючевыеДаты = Новый Структура("ДатаЗаказа, ДатаСледующегоЗаказа", Дата(1, 1, 1), Дата(1, 1, 1));
	Если КалендарьЗаказа.Пустая() Тогда
		КлючевыеДаты.ДатаЗаказа           = НачалоПериода;
		КлючевыеДаты.ДатаСледующегоЗаказа = НачалоПериода + 86400; //86400 - длительность суток в секундах.
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	КалендарныйГрафик.ДатаГрафика КАК ДатаЗаказа
			|ИЗ
			|	РегистрСведений.КалендарныеГрафики КАК КалендарныйГрафик
			|ГДЕ
			|	КалендарныйГрафик.Календарь     =  &КалендарьЗаказа
			|	И КалендарныйГрафик.ДатаГрафика >= &НачалоПериода
			|	И КалендарныйГрафик.ДеньВключенВГрафик
			|
			|УПОРЯДОЧИТЬ ПО
			|	КалендарныйГрафик.ДатаГрафика";
		Запрос.УстановитьПараметр("КалендарьЗаказа", КалендарьЗаказа);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			КлючевыеДаты.ДатаЗаказа = Выборка.ДатаЗаказа;
		КонецЕсли;
		
		Если Выборка.Следующий() Тогда
			КлючевыеДаты.ДатаСледующегоЗаказа = Выборка.ДатаЗаказа;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КлючевыеДаты;
		
КонецФункции

//Функция СформироватьТекстЗапросаРеквизитовСпособаОбеспечения.
//	Для верной отработки запроса способы обеспечения должны быть обновлены (при необходимости произведен сдвиг плановых поставок).
//
//	Параметры:
//		"ИмяВременнойТаблицы" - Строка, имя временной таблицы в тексте запроса, в которую будет помещен результат.
//			Если не задано, результат не помещается во временну таблицу.
//		"ИмяИсходнойТаблицы"  - Строка, имя исходной временной таблицы, содержащей способы обеспечения,
//			для которых необходимо получить значения реквизитов.
//
//	Возвращаемое значение: Строка - текст запроса.
//
Функция СформироватьТекстЗапросаРеквизитовСпособаОбеспечения(ИмяВременнойТаблицы = Неопределено, ИмяИсходнойТаблицы = Неопределено) Экспорт
	
	//План выполнения запроса.
	//1. Исходные данные размещены во временной таблице "СпособыОбеспечения", каждая строка таблицы содержит ссылку на
	//	способ обеспечения, для которого необходимо получить расчетные параметры поставки.
	//2. Дополняем данные реквизитами справочника способов обеспечения потребностей "СпрСпособ"
	//		- "ФормироватьПлановыеЗаказы",
	//		- "ПлановаяДатаПоставки",
	//		- "ДатаСледующейПоставки"
	//		- "СрокИсполненияЗаказа",
	//		- "ОбеспечиваемыйПериод".
	//3. Рассчитываем дату поставки по способу обеспечения согласно календарю предприятия и сроку исполнения заказа
	//		- "ДатаПоставки.ДатаГрафика"
	//		- "ДатаПоставкиПлюсГод.ДатаГрафика" (если дата поставки в следующем году).
	//			3.а. Получаем количество рабочих дней с начала года для текущей даты, заданной параметром "НачалоПериода".
	//				- "ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода".
	//			3.б. Получаем рабочий день в году текущей даты, отстоящий от текущей даты на "СрокИсполненияЗаказа"
	//				- "ДатаПоставки.ДатаГрафика".
	//			3.в. Получаем количество рабочих дней в году текущей даты
	//			(в случае, если дата поставки в году текущей даты не обнаружена).
	//				- "ВсегоРабочихДнейВГоду.КоличествоДнейВГрафикеСНачалаГода".
	//			3.г. Получаем рабочий день в следующем от текущей даты году, отстоящий от текущей даты на "СрокИсполненияЗаказа".
	//			(в случае, если дата поставки в году текущей даты не обнаружена).
	//				- "ДатаПоставкиПлюсГод.ДатаГрафика".
	//4. Рассчитываем дату заказа на ближайшую поставку по способу обеспечения согласно календарю предприятия и сроку исполнения заказа
	//		- "ДатаПоставки.ДатаГрафика"
	//			4.а. Получаем количество рабочих дней до плановой поставки по графику.
	//				- "ПлановаяДатаПоставкиГрафик.КоличествоДнейВГрафикеСНачалаГода"
	//			4.б. Получаем рабочий день в году плановой поставки по способу упреждающий дату поставки на срок исполнения заказа.
	//				- "ПлановаяДатаЗаказаГрафик.ДатаГрафика".
	//			4.в. Получаем количество рабочих дней в году, предшествующем году плановой поставки.
	//				- "ВсегоРабочихДнейВГодуПлановогоЗаказа.КоличествоДнейВГрафикеСНачалаГода".
	//			(в случае, если дата планового заказа в году плановой поставки не обнаружена).
	//				- "ВсегоРабочихДнейВГоду.КоличествоДнейВГрафикеСНачалаГода".
	//			4.г. Получаем рабочий день в году предшествующем плановой поставки по способу,
	//			упреждающий дату поставки на срок исполнения заказа.
	//			(в случае, если дата планового заказа в году плановой поставки не обнаружена).
	//				- "ДатаЗаказаМинусГод.ДатаГрафика".
	
	Возврат
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СпрСпособ.Ссылка, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)) КАК СпособОбеспечения,
	|	ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0)                   КАК СрокИсполненияЗаказа,
	|	ЕСТЬNULL(СпрСпособ.ОбеспечиваемыйПериод, 0)                   КАК ОбеспечиваемыйПериод,
	|	ЕСТЬNULL(СпрСпособ.ФормироватьПлановыеЗаказы, ЛОЖЬ)           КАК ФормироватьПлановыеЗаказы,
	|	ЕСТЬNULL(СпрСпособ.ДатаСледующейПоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСледующейПоставки,
	
	|	ВЫБОР
	|		КОГДА СпрСпособ.ФормироватьПлановыеЗаказы И СпрСпособ.ПлановаяДатаПоставки > ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|			СпрСпособ.ПлановаяДатаПоставки //есть актуальная дата поставки по графику
	|		КОГДА &КалендарьПредприятия = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА //календари не используются
	|			ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0))
	|		ИНАЧЕ
	|			ЕСТЬNULL(ДатаПоставки.ДатаГрафика, ЕСТЬNULL(ДатаПоставкиПлюсГод.ДатаГрафика, ДАТАВРЕМЯ(1, 1, 1)))
	|	КОНЕЦ                                      КАК ДатаПоставки,
	|	ВЫБОР
	|		КОГДА СпрСпособ.ФормироватьПлановыеЗаказы И СпрСпособ.ПлановаяДатаЗаказа = &НачалоПериода ТОГДА
	|			&НачалоПериода
	|		КОГДА &КалендарьПредприятия = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			И СпрСпособ.ФормироватьПлановыеЗаказы
	|			И СпрСпособ.ПлановаяДатаПоставки > ДАТАВРЕМЯ(1, 1, 1) ТОГДА //календари не используются
	|			ДОБАВИТЬКДАТЕ(СпрСпособ.ПлановаяДатаПоставки, ДЕНЬ, - СпрСпособ.СрокИсполненияЗаказа)
	|		ИНАЧЕ
	|			ЕСТЬNULL(ПлановаяДатаЗаказаГрафик.ДатаГрафика, ЕСТЬNULL(ДатаЗаказаМинусГод.ДатаГрафика, ДАТАВРЕМЯ(1, 1, 1)))
	|	КОНЕЦ                                      КАК ПлановаяДатаЗаказа,
	|	ВЫБОР
	|		КОГДА СпрСпособ.ФормироватьПлановыеЗаказы И СпрСпособ.ПлановаяДатаЗаказа = &НачалоПериода ТОГДА
	|			ИСТИНА
	|		КОГДА СпрСпособ.ФормироватьПлановыеЗаказы И СпрСпособ.ПлановаяДатаПоставки > ДАТАВРЕМЯ(1, 1, 1)
	|			И &КалендарьПредприятия = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			И ДОБАВИТЬКДАТЕ(СпрСпособ.ПлановаяДатаПоставки, ДЕНЬ, - СпрСпособ.СрокИсполненияЗаказа) <= &НачалоПериода
	|		ТОГДА
	|			ИСТИНА
	|		КОГДА СпрСпособ.ФормироватьПлановыеЗаказы И СпрСпособ.ПлановаяДатаПоставки > ДАТАВРЕМЯ(1, 1, 1)
	|			И ЕСТЬNULL(ПлановаяДатаЗаказаГрафик.ДатаГрафика, ДатаЗаказаМинусГод.ДатаГрафика) <= &НачалоПериода
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                      КАК НаступилаДатаОчередногоЗаказа" + 
	?(ИмяВременнойТаблицы = Неопределено, ",
	//Следующие поля являются служебными и добавляются в выборку в запросе только на втором шаге
	//Обеспечение потребностей, при формировании таблицы основных способов обеспечения.
	|	ИСТИНА                                                         КАК Отметка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СпособыОбеспечения.СпособОбеспечения)      КАК СпособОбеспеченияПредставление,
	|	ВЫБОР
	|		КОГДА СпрСпособ.ФормироватьПлановыеЗаказы И СпрСпособ.ПлановаяДатаЗаказа = &НачалоПериода ТОГДА
	|			0
	|		КОГДА &КалендарьПредприятия = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			И СпрСпособ.ФормироватьПлановыеЗаказы
	|			И СпрСпособ.ПлановаяДатаПоставки > ДАТАВРЕМЯ(1, 1, 1) ТОГДА //календари не используются
	|			РАЗНОСТЬДАТ(&НачалоПериода, СпрСпособ.ПлановаяДатаПоставки, ДЕНЬ) - СпрСпособ.СрокИсполненияЗаказа
	|		ИНАЧЕ
	|			РАЗНОСТЬДАТ(&НачалоПериода, ЕСТЬNULL(ПлановаяДатаЗаказаГрафик.ДатаГрафика,
	|				ДатаЗаказаМинусГод.ДатаГрафика), ДЕНЬ)
	|	КОНЕЦ                                                          КАК ДнейДоПлановогоЗаказа,
	|	ВЫБОР
	|		КОГДА СпрСпособ.ФормироватьПлановыеЗаказы И СпрСпособ.ПлановаяДатаПоставки = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                                          КАК НетГрафикаПоставок,
	|	ВЫБОР
	|		КОГДА &КалендарьПредприятия <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			И СпрСпособ.ФормироватьПлановыеЗаказы
	|			И СпрСпособ.ПлановаяДатаПоставки > ДАТАВРЕМЯ(1, 1, 1)
	|			И ЕСТЬNULL(ПлановаяДатаЗаказаГрафик.ДатаГрафика, ДатаЗаказаМинусГод.ДатаГрафика) ЕСТЬ NULL ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                                          КАК НетПлановойДатыЗаказаПоКалендарю,
	|	ВЫБОР
	|		КОГДА СпрСпособ.ФормироватьПлановыеЗаказы И СпрСпособ.ПлановаяДатаПоставки > ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ &КалендарьПредприятия = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ИЛИ НЕ ЕСТЬNULL(ДатаПоставки.ДатаГрафика, ДатаПоставкиПлюсГод.ДатаГрафика) ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ                                                          КАК НетДатыПоставкиПоКалендарю,
	|	ВЫБОР
	|		КОГДА СпрСпособ.Ссылка ЕСТЬ NULL ТОГДА
	|			1
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                                          КАК Порядок", "
	|ПОМЕСТИТЬ " + ИмяВременнойТаблицы) + "
	|ИЗ" +
	?(ИмяИсходнойТаблицы = Неопределено, "
	|	СпособыОбеспечения КАК СпособыОбеспечения", "
	|	" + ИмяИсходнойТаблицы + " КАК СпособыОбеспечения") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
	|		ПО СпособыОбеспечения.СпособОбеспечения = СпрСпособ.Ссылка
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
	|		ПО &КалендарьПредприятия = ТекущаяДата.Календарь
	|			И ТекущаяДата.ДатаГрафика = &НачалоПериода
	|			И ТекущаяДата.Год = ГОД(&НачалоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаПоставки
	|		ПО &КалендарьПредприятия = ДатаПоставки.Календарь
	|			И ДатаПоставки.Год = ГОД(&НачалоПериода)
	|			И ДатаПоставки.КоличествоДнейВГрафикеСНачалаГода =
	|				ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
	|				+ ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0)
	|				+ ВЫБОР
	|					КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
	|						0
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ
	|			И ДатаПоставки.ДеньВключенВГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ВсегоРабочихДнейВГоду
	|		ПО &КалендарьПредприятия = ВсегоРабочихДнейВГоду.Календарь
	|			И ДатаПоставки.ДатаГрафика ЕСТЬ NULL
	|			И ВсегоРабочихДнейВГоду.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&НачалоПериода, ГОД), ДЕНЬ)
	|			И ВсегоРабочихДнейВГоду.Год = ГОД(&НачалоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаПоставкиПлюсГод
	|		ПО &КалендарьПредприятия = ДатаПоставкиПлюсГод.Календарь
	|			И ДатаПоставки.ДатаГрафика ЕСТЬ NULL
	|			И ДатаПоставкиПлюсГод.КоличествоДнейВГрафикеСНачалаГода =
	|				ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0)
	|				- (ВсегоРабочихДнейВГоду.КоличествоДнейВГрафикеСНачалаГода - ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
	|				+ ВЫБОР
	|					КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
	|						0
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ
	|			И ДатаПоставкиПлюсГод.Год = ГОД(&НачалоПериода) + 1
	|			И ДатаПоставкиПлюсГод.ДеньВключенВГрафик
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПлановаяДатаПоставкиГрафик
	|			ПО &КалендарьПредприятия = ПлановаяДатаПоставкиГрафик.Календарь
	|			И ПлановаяДатаПоставкиГрафик.ДатаГрафика = СпрСпособ.ПлановаяДатаПоставки
	|			И ПлановаяДатаПоставкиГрафик.Год = ГОД(СпрСпособ.ПлановаяДатаПоставки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПлановаяДатаЗаказаГрафик
	|			ПО &КалендарьПредприятия = ПлановаяДатаЗаказаГрафик.Календарь
	|			И СпрСпособ.ФормироватьПлановыеЗаказы
	|			И ПлановаяДатаЗаказаГрафик.Год = ГОД(СпрСпособ.ПлановаяДатаПоставки)
	|			И ПлановаяДатаЗаказаГрафик.КоличествоДнейВГрафикеСНачалаГода =
	|				ПлановаяДатаПоставкиГрафик.КоличествоДнейВГрафикеСНачалаГода
	|				- СпрСпособ.СрокИсполненияЗаказа
	|			И ПлановаяДатаЗаказаГрафик.ДеньВключенВГрафик
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ВсегоРабочихДнейВГодуПлановогоЗаказа
	|		ПО &КалендарьПредприятия = ВсегоРабочихДнейВГодуПлановогоЗаказа.Календарь
	|			И СпрСпособ.ФормироватьПлановыеЗаказы
	|			И ПлановаяДатаЗаказаГрафик.ДатаГрафика ЕСТЬ NULL
	|			И ВсегоРабочихДнейВГодуПлановогоЗаказа.ДатаГрафика = ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СпрСпособ.ПлановаяДатаПоставки, ГОД), ДЕНЬ, -1)
	|			И ВсегоРабочихДнейВГодуПлановогоЗаказа.Год = ГОД(СпрСпособ.ПлановаяДатаПоставки) - 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаЗаказаМинусГод
	|		ПО &КалендарьПредприятия = ДатаЗаказаМинусГод.Календарь
	|			И СпрСпособ.ФормироватьПлановыеЗаказы
	|			И ПлановаяДатаЗаказаГрафик.ДатаГрафика ЕСТЬ NULL
	|			И ДатаЗаказаМинусГод.КоличествоДнейВГрафикеСНачалаГода =
	|				ВсегоРабочихДнейВГодуПлановогоЗаказа.КоличествоДнейВГрафикеСНачалаГода
	|				- СпрСпособ.СрокИсполненияЗаказа
	|				+ ПлановаяДатаПоставкиГрафик.КоличествоДнейВГрафикеСНачалаГода
	|			И ДатаЗаказаМинусГод.Год = ГОД(СпрСпособ.ПлановаяДатаПоставки) - 1
	|			И ДатаЗаказаМинусГод.ДеньВключенВГрафик" + 
	?(ИмяВременнойТаблицы = Неопределено, "
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	СпрСпособ.Наименование", "
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОбеспечения
	|;
	|
	|/////////////////////////////////////////////////////////////////////////
	|");

КонецФункции

//Функция СформироватьТекстЗапросаАктуализацииСпособовОбеспечения.
//	Возвращаемое значение - Строка, содержит текст запроса способов обеспечения,
//		требующих акутуализацию на дату, залданную параметром &НачалоПериода.
//
Функция СформироватьТекстЗапросаАктуализацииСпособовОбеспечения() Экспорт
	
	//Актуализации требуют реквизиты ПлановаяДатаПоставки и ДатаСледующейПоставки, если для способа обеспечения
	//предусмотрено плановое формирование заказа и ПлановаяДатаЗаказа (дата заказа на плановую дату поставки) пройдена
	//(меньше текущей).
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыОбеспечения.СпособОбеспечения            КАК СпособОбеспечения
	|ИЗ
	|	СпособыОбеспечения КАК СпособыОбеспечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
	|		ПО СпрСпособ.Ссылка = СпособыОбеспечения.СпособОбеспечения
	|ГДЕ
	|	СпрСпособ.ФормироватьПлановыеЗаказы
	|	И СпрСпособ.ПлановаяДатаЗаказа < &НачалоПериода
	|	И (СпрСпособ.ПлановаяДатаПоставки <> ДАТАВРЕМЯ(1, 1, 1)
	|		ИЛИ СпрСпособ.ДатаСледующейПоставки <> ДАТАВРЕМЯ(1, 1, 1))";
	
КонецФункции

//Функция СформироватьТекстЗапросаСтатистикиПотребления.
//Параметры:
//	СоставРазделовЗапроса - Структура, содержит имена таблиц запроса
//		и индекс таблицы при получении результата выполнения пакета.
//	Возвращаемое значение: Строка - текст запроса.
//
Функция СформироватьТекстЗапросаСтатистикиПотребления(СоставРазделовЗапроса = Неопределено) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Структура();
	КонецЕсли;
	
	КоличествоРазделов = СоставРазделовЗапроса.Количество();
	ВыполнятьРасчетПоКоличествуПродаж = Константы.ВыполнятьРасчетТоварныхОграниченийПоКоличествуПродаж.Получить();
	УчитыватьВнутреннееТовародвижение = Константы.УчитыватьПравилаВнутреннегоТовародвиженияПриРасчетеТоварныхОграничений.Получить();
	УчитыватьСборкиТоваров = Истина;
	Если ВыполнятьРасчетПоКоличествуПродаж Тогда
		
		СоставРазделовЗапроса.Вставить("ТоварыСоСкладамиПродаж",  КоличествоРазделов);
		СоставРазделовЗапроса.Вставить("ТоварыСНоменклатуройПродаж", КоличествоРазделов + 1);
		СоставРазделовЗапроса.Вставить("ГрафикБезКалендаря",      КоличествоРазделов + 2);
		СоставРазделовЗапроса.Вставить("ГрафикРаботыПоКалендарю", КоличествоРазделов + 3);
		СоставРазделовЗапроса.Вставить("ОстаткиТовараПоДням",     КоличествоРазделов + 4);
		СоставРазделовЗапроса.Вставить("ВыручкаПоДням",           КоличествоРазделов + 5);
		СоставРазделовЗапроса.Вставить("Продажи",                 КоличествоРазделов + 6);
		СоставРазделовЗапроса.Вставить("ДатыОстатка",             КоличествоРазделов + 7);
		СоставРазделовЗапроса.Вставить("ВсегоДнейКУчету",         КоличествоРазделов + 8);
		СоставРазделовЗапроса.Вставить("СтатистикаПотребления",   КоличествоРазделов + 9);
		
		ТекстЗапроса = "";
		Если УчитыватьВнутреннееТовародвижение Тогда
			Текст = РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспеченияВсехСкладов(Перечисления.ТипыОбеспечения.Перемещение);
			Текст = СтрЗаменить(Текст, "ВтТовары", "ТоварыСреднедневногоПотребления");
			Текст = СтрЗаменить(Текст, "ВтСпособыОбеспечения", "ВтСпособыОбеспеченияСкладов");
			ТекстЗапроса = ТекстЗапроса + Текст;
		КонецЕсли;
		
		Если УчитыватьСборкиТоваров И Не УчитыватьВнутреннееТовародвижение Тогда
			Текст = РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаФорматыСкладов();
			Текст = СтрЗаменить(Текст, "ВтТовары", "ТоварыСреднедневногоПотребления");
			ТекстЗапроса = ТекстЗапроса + Текст;
		КонецЕсли;
		
		//1. Для каждого склада получаем все склады для которых данный склад
		//является источником обеспечения по основному способу обеспечения
		//(факт продажи непосредственно с распределительного центра также учитываем).
		
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	Товары.Номенклатура                                                      КАК Номенклатура,
		|	Товары.Характеристика                                                    КАК Характеристика,
		|	Товары.Склад                                                             КАК Склад,
		|	Товары.Склад                                                             КАК СкладПродаж,
		|	ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, Товары.Склад.Календарь) КАК Календарь
		|ПОМЕСТИТЬ ТоварыСоСкладамиПродаж
		|ИЗ
		|	ТоварыСреднедневногоПотребления КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		|		ПО Товары.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|" + ?(НЕ УчитыватьВнутреннееТовародвижение, "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура                                                       КАК Номенклатура,
		|	Товары.Характеристика                                                     КАК Характеристика,
		|	Товары.Склад                                                              КАК Склад,
		|	Способы.Склад                                                             КАК СкладПродаж,
		|	ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, Способы.Склад.Календарь) КАК Календарь
		|ИЗ
		|	ТоварыСреднедневногоПотребления КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияСкладов КАК Способы
		|		ПО Способы.Номенклатура   = Товары.Номенклатура
		|		 И Способы.Характеристика = Товары.Характеристика
		|		 И Способы.СпособОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей = Товары.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		|		ПО Способы.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|ГДЕ
		|	НЕ Способы.Номенклатура ЕСТЬ NULL
		|") + "
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	СкладПродаж,
		|	Календарь
		|;
		|
		//2. Для каждой номенклатуры получаем все комплекты в которые она входит, если комплект обеспечивается
		// на складе посредством сборки (по основному способу обеспечения).
		|/////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура                                                      КАК Номенклатура,
		|	Товары.Характеристика                                                    КАК Характеристика,
		|	Товары.Склад                                                             КАК Склад,
		|	Товары.СкладПродаж                                                       КАК СкладПродаж,
		|	Товары.Календарь                                                         КАК Календарь,
		|	Товары.Номенклатура                                                      КАК НоменклатураПродаж,
		|	Товары.Характеристика                                                    КАК ХарактеристикаПродаж,
		|	1                                                                        КАК КоэффициентСборки
		|ПОМЕСТИТЬ ТоварыСНоменклатуройПродаж
		|ИЗ
		|	ТоварыСоСкладамиПродаж КАК Товары
		|" + ?(НЕ УчитыватьСборкиТоваров, "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура                                                      КАК Номенклатура,
		|	Товары.Характеристика                                                    КАК Характеристика,
		|	Товары.Склад                                                             КАК Склад,
		|	Товары.СкладПродаж                                                       КАК СкладПродаж,
		|	МАКСИМУМ(Товары.Календарь)                                               КАК Календарь,
		|	Комплектации.Ссылка.Владелец                                             КАК НоменклатураПродаж,
		|	Комплектации.Ссылка.Характеристика                                       КАК ХарактеристикаПродаж,
		|	СУММА(Комплектации.Количество / Комплектации.Ссылка.Количество)          КАК КоэффициентСборки
		|ИЗ
		|	ТоварыСоСкладамиПродаж КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Комплектации
		|		ПО Товары.Номенклатура   = Комплектации.Номенклатура
		|		 И Товары.Характеристика = Комплектации.Характеристика
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|
		|ГДЕ
		|	Комплектации.Ссылка.Основной = ИСТИНА
		|	И НЕ Комплектации.Ссылка.ПометкаУдаления
		|	И СпрСпособ.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.СборкаРазборка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Склад,
		|	Товары.СкладПродаж,
		|	Комплектации.Ссылка.Владелец,
		|	Комплектации.Ссылка.Характеристика") + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураПродаж,
		|	ХарактеристикаПродаж,
		|	СкладПродаж
		|;
		|
		//3. Получаем все рабочие дни в периоде расчета статистики (от начала периода по конец периода включительно).
		|/////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикБезКалендаря.ДатаГрафика                КАК ДатаГрафика
		|ПОМЕСТИТЬ ГрафикБезКалендаря
		|ИЗ
		|	&ГрафикБезКалендаря КАК ГрафикБезКалендаря
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Календарь                              КАК Календарь,
		|	График.ДатаГрафика                            КАК Дата
		|ПОМЕСТИТЬ ГрафикРаботыПоКалендарю
		|ИЗ
		|	ТоварыСоСкладамиПродаж КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК График
		|		ПО Товары.Календарь = График.Календарь
		|			И График.ДеньВключенВГрафик
		|			И ГОД(&ПериодКлассификацииДатаНачала) <= График.Год
		|			И График.Год                     <= ГОД(&ПериодКлассификацииДатаОкончания)
		|			И &ПериодКлассификацииДатаНачала <= График.ДатаГрафика
		|			И График.ДатаГрафика             <= &ПериодКлассификацииДатаОкончания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)   КАК Календарь,
		|	ГрафикБезКалендаря.ДатаГрафика                КАК Дата
		|ИЗ
		|	ГрафикБезКалендаря КАК ГрафикБезКалендаря
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Календарь,
		|	Дата
		|;
		|
		//4. Для каждого дня, в котором было движение товара по складу, определяем
		//были ли остатки в начале и в конце дня или только в конце дня.
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Склад                       КАК Склад,
		|	Остатки.Номенклатура                КАК Номенклатура,
		|	Остатки.Характеристика              КАК Характеристика,
		|	НачалоПериода(Остатки.Период, ДЕНЬ) КАК Дата,
		|	ВЫБОР
		|		КОГДА Остатки.ВНаличииНачальныйОстаток > 0 И Остатки.ВНаличииКонечныйОстаток > 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                               КАК ЕстьОстатки,
		|	ВЫБОР
		|		КОГДА Остатки.ВНаличииКонечныйОстаток > 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                               КАК ЕстьКонечныйОстаток
		|ПОМЕСТИТЬ ОстаткиТовараПоДням
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
		|		&ПериодКлассификацииДатаНачала,
		|		&ПериодКлассификацииДатаОкончания,
		|		ДЕНЬ,
		|		ДвиженияИГраницыПериода,
		|		(Номенклатура, Характеристика, Склад) В(
		|			ВЫБРАТЬ
		|				Товары.НоменклатураПродаж   КАК Номенклатура,
		|				Товары.ХарактеристикаПродаж КАК Характеристика,
		|				Товары.СкладПродаж          КАК Склад
		|			ИЗ
		|				ТоварыСНоменклатуройПродаж КАК Товары)) КАК Остатки
		|ГДЕ
		|	Остатки.Период < &ПериодКлассификацииДатаОкончания
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	Дата,
		|	ЕстьОстатки,
		|	ЕстьКонечныйОстаток
		|;
		|
		//5. Получаем обороты выручки по дням в периоде расчета статистики.
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выручка.АналитикаУчетаНоменклатуры.Номенклатура                КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|			Выручка.АналитикаУчетаНоменклатуры.Характеристика
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                          КАК Характеристика,
		|	Выручка.АналитикаУчетаНоменклатуры.Склад                       КАК Склад,
		|	Выручка.КоличествоОборот                                       КАК Количество,
		|	НАЧАЛОПЕРИОДА(Выручка.Период, ДЕНЬ)                            КАК Дата
		|ПОМЕСТИТЬ ВыручкаПоДням
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|		&ПериодКлассификацииДатаНачала,
		|		&ПериодКлассификацииДатаОкончания,
		|		ДЕНЬ,
		|		(
		|			АналитикаУчетаНоменклатуры.Номенклатура,
		|			АналитикаУчетаНоменклатуры.Характеристика,
		|			АналитикаУчетаНоменклатуры.Склад)
		|			В (
		|				ВЫБРАТЬ
		|					Товары.НоменклатураПродаж    КАК Номенклатура,
		|					Товары.ХарактеристикаПродаж  КАК Характеристика,
		|					Товары.СкладПродаж           КАК Склад
		|				ИЗ
		|					ТоварыСНоменклатуройПродаж КАК Товары)) КАК Выручка
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//6. Принимаем выручку к расчету среднедневного только, если она была в рабочий день и в этот день не было пробоя остатка
		//(движение по складу в этот день быть обязано, из него и берем признак наличия остатков на начало и конец дня получения выручки).
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выручка.Номенклатура                                     КАК Номенклатура,
		|	Выручка.Характеристика                                   КАК Характеристика,
		|	Выручка.Склад                                            КАК Склад,
		|	СУММА(ВЫБОР
		|		КОГДА Остатки.ЕстьОстатки ТОГДА
		|			Выручка.Количество
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ)                                                   КАК Количество,
		|	СУММА(ВЫБОР
		|		КОГДА Остатки.ЕстьОстатки ТОГДА
		|			Выручка.Количество * Выручка.Количество
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ)                                                   КАК КвадратКоличества
		|ПОМЕСТИТЬ Продажи
		|ИЗ
		|	ВыручкаПоДням КАК Выручка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		|		ПО Выручка.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГрафикРаботыПоКалендарю КАК РабочиеДни
		|		ПО ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, Выручка.Склад.Календарь) = РабочиеДни.Календарь
		|			И Выручка.Дата = РабочиеДни.Дата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТовараПоДням КАК Остатки
		|		ПО Выручка.Дата           = Остатки.Дата
		|			И Выручка.Номенклатура   = Остатки.Номенклатура
		|			И Выручка.Характеристика = Остатки.Характеристика
		|			И Выручка.Склад          = Остатки.Склад
		|СГРУППИРОВАТЬ ПО
		|	Выручка.Номенклатура,
		|	Выручка.Характеристика,
		|	Выручка.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		//7. Для каждого рабочего дня склада определяем дату в которую сформирован актуальный остаток этого дня.
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НоменклатураПродаж                               КАК Номенклатура,
		|	Товары.ХарактеристикаПродаж                             КАК Характеристика,
		|	Товары.СкладПродаж                                      КАК Склад,
		|	МАКСИМУМ(Остатки.Дата)                                  КАК Дата,
		|	МАКСИМУМ(ВЫБОР КОГДА Остатки.Дата = РабочиеДни.Дата ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ)                                              КАК ОстатокДеньВДень
		|ПОМЕСТИТЬ ДатыОстатка
		|ИЗ
		|	ТоварыСНоменклатуройПродаж КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГрафикРаботыПоКалендарю КАК РабочиеДни
		|		ПО Товары.Календарь = РабочиеДни.Календарь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТовараПоДням КАК Остатки
		|		ПО РабочиеДни.Дата          >= Остатки.Дата
		|			И Товары.НоменклатураПродаж   =  Остатки.Номенклатура
		|			И Товары.ХарактеристикаПродаж =  Остатки.Характеристика
		|			И Товары.СкладПродаж          =  Остатки.Склад
		|СГРУППИРОВАТЬ ПО
		|	Товары.НоменклатураПродаж,
		|	Товары.ХарактеристикаПродаж,
		|	Товары.СкладПродаж,
		|	РабочиеДни.Дата
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Дата,
		|	ОстатокДеньВДень
		|;
		|
		//8. Определяем количество дней, в которые был остаток товара на складе.
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыОстатка.Номенклатура      КАК Номенклатура,
		|	ДатыОстатка.Характеристика    КАК Характеристика,
		|	ДатыОстатка.Склад             КАК Склад,
		|	КОЛИЧЕСТВО(*)                 КАК ЧислоДней
		|ПОМЕСТИТЬ ВсегоДнейКУчету
		|ИЗ
		|	ДатыОстатка КАК ДатыОстатка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТовараПоДням КАК Остатки
		|		ПО ДатыОстатка.Дата              = Остатки.Дата
		|			И ДатыОстатка.Номенклатура   = Остатки.Номенклатура
		|			И ДатыОстатка.Характеристика = Остатки.Характеристика
		|			И ДатыОстатка.Склад          = Остатки.Склад
		|ГДЕ
		|	ДатыОстатка.ОстатокДеньВДень И Остатки.ЕстьОстатки
		|	ИЛИ НЕ ДатыОстатка.ОстатокДеньВДень И Остатки.ЕстьКонечныйОстаток
		|СГРУППИРОВАТЬ ПО
		|	ДатыОстатка.Номенклатура,
		|	ДатыОстатка.Характеристика,
		|	ДатыОстатка.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		//9 Получаем итоговые статистические показатели по распределительному центру, рассчитываем признак стабильности потребления.
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборДанных.Склад                                                          КАК Склад,
		|	НаборДанных.Номенклатура                                                   КАК Номенклатура,
		|	НаборДанных.Характеристика                                                 КАК Характеристика,
		|	НаборДанных.ДисперсияПотребления                                           КАК ДисперсияПотребления,
		|	ВЫБОР
		|		КОГДА НаборДанных.ВсегоДнейРаспредЦентра > 0 ТОГДА
		|			НаборДанных.ПродажиВсего / НаборДанных.ВсегоДнейРаспредЦентра
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ                                                                      КАК СреднедневноеПотребление,
		|	ВЫБОР
		|		КОГДА НаборДанных.ПродажиВсего > 0 И ДисперсияПотребления
		|			/ НаборДанных.ПродажиВсего * НаборДанных.ВсегоДнейРаспредЦентра
		|			/ НаборДанных.ПродажиВсего * НаборДанных.ВсегоДнейРаспредЦентра
		|			< 0.0025
		|		ТОГДА
		|			ИСТИНА //Квадратичное отклонение менее 5% от дневного потребления
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                                                       КАК ПотреблениеСтабильно
		|	ПОМЕСТИТЬ СтатистикаПотребления
		|ИЗ
		|	(ВЫБРАТЬ
		|		Товары.Склад                                                           КАК Склад,
		|		Товары.Номенклатура                                                    КАК Номенклатура,
		|		Товары.Характеристика                                                  КАК Характеристика,
		|		СУММА(ВЫБОР
		|			КОГДА ВсегоДнейКУчету.ЧислоДней > 1 ТОГДА
		|				ВЫРАЗИТЬ(Товары.КоэффициентСборки * Товары.КоэффициентСборки
		|					* Продажи.КвадратКоличества / (ВсегоДнейКУчету.ЧислоДней - 1) КАК ЧИСЛО(15, 3))
		|				- ВЫРАЗИТЬ( Товары.КоэффициентСборки * Продажи.Количество / (ВсегоДнейКУчету.ЧислоДней - 1)
		|					* Товары.КоэффициентСборки * Продажи.Количество / ВсегоДнейКУчету.ЧислоДней КАК ЧИСЛО(15, 3))
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ)                                                                 КАК ДисперсияПотребления,
		|		СУММА(ЕСТЬNULL(Товары.КоэффициентСборки * Продажи.Количество, 0))      КАК ПродажиВсего,
		|		МАКСИМУМ(ВЫБОР
		|			КОГДА Товары.Склад = Товары.СкладПродаж ТОГДА
		|				ВсегоДнейКУчету.ЧислоДней
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ)                                                                 КАК ВсегоДнейРаспредЦентра
		|	ИЗ
		|		ТоварыСНоменклатуройПродаж КАК Товары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсегоДнейКУчету КАК ВсегоДнейКУчету
		|			ПО Товары.СкладПродаж              = ВсегоДнейКУчету.Склад
		|				И Товары.НоменклатураПродаж    = ВсегоДнейКУчету.Номенклатура
		|				И Товары.ХарактеристикаПродаж  = ВсегоДнейКУчету.Характеристика
		|			ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
		|			ПО Товары.СкладПродаж             = Продажи.Склад
		|				И Товары.НоменклатураПродаж   = Продажи.Номенклатура
		|				И Товары.ХарактеристикаПродаж = Продажи.Характеристика
		|	СГРУППИРОВАТЬ ПО
		|		Товары.Склад,
		|		Товары.Номенклатура,
		|		Товары.Характеристика) КАК НаборДанных
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////
		|";
		
		ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
			ТекстЗапроса,
			"ПодстановкаОсновногоСпособаОбеспечения",
			"Комплектации.Ссылка.Владелец,Комплектации.Ссылка.Характеристика,Товары.СкладПродаж");
		
	Иначе
		
		СоставРазделовЗапроса.Вставить("ОстаткиТовараПоДням",   КоличествоРазделов);
		СоставРазделовЗапроса.Вставить("ГрафикБезКалендаря",    КоличествоРазделов + 1);
		СоставРазделовЗапроса.Вставить("ДатыОстатка",           КоличествоРазделов + 2);
		СоставРазделовЗапроса.Вставить("ДанныеДляСтатистики",   КоличествоРазделов + 3);
		СоставРазделовЗапроса.Вставить("СтатистикаПотребления", КоличествоРазделов + 4);
		
		//Расчет среднедневного потребления по расходу со склада.
		ТекстЗапроса =
		//1. Получаем остатки на каждый день и на границе периода (начальный остаток),
		//одновременно получая квадрат расхода для оценки дисперсии.
		"ВЫБРАТЬ
		|	Остатки.Склад                                       КАК Склад,
		|	Остатки.Номенклатура                                КАК Номенклатура,
		|	Остатки.Характеристика                              КАК Характеристика,
		|	НачалоПериода(Остатки.Период, ДЕНЬ)                 КАК Дата,
		|	ВЫБОР
		|		КОГДА Остатки.ВНаличииНачальныйОстаток > 0 И Остатки.ВНаличииКонечныйОстаток > 0 ТОГДА
		|			Остатки.ВНаличииРасход
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ                                               КАК Количество,
		|	ВЫБОР
		|		КОГДА Остатки.ВНаличииНачальныйОстаток > 0 И Остатки.ВНаличииКонечныйОстаток > 0 ТОГДА
		|			Остатки.ВНаличииРасход * Остатки.ВНаличииРасход
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ                                               КАК КвадратКоличества,
		|	ВЫБОР
		|		КОГДА Остатки.ВНаличииНачальныйОстаток > 0 И Остатки.ВНаличииКонечныйОстаток > 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                               КАК ЕстьОстатки,
		|	ВЫБОР
		|		КОГДА Остатки.ВНаличииКонечныйОстаток > 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                               КАК ЕстьКонечныйОстаток
		|ПОМЕСТИТЬ ОстаткиТовараПоДням
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
		|		&ПериодКлассификацииДатаНачала,
		|		&ПериодКлассификацииДатаОкончания,
		|		ДЕНЬ,
		|		ДвиженияИГраницыПериода,
		|		(Номенклатура, Характеристика, Склад) В(
		|			ВЫБРАТЬ
		|				Товары.Номенклатура   КАК Номенклатура,
		|				Товары.Характеристика КАК Характеристика,
		|				Товары.Склад          КАК Склад
		|			ИЗ
		|				ТоварыСреднедневногоПотребления КАК Товары)) КАК Остатки
		|	
		|ГДЕ
		|	Остатки.Период < &ПериодКлассификацииДатаОкончания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	Дата,
		|	ЕстьОстатки,
		|	ЕстьКонечныйОстаток
		|;
		|
		//2. Для каждого рабочего дня склада определяем дату в которую сформирован актуальный остаток этого дня.
		//Принимаем к учету выручку рабочего дня.
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикБезКалендаря.ДатаГрафика                КАК ДатаГрафика
		|ПОМЕСТИТЬ ГрафикБезКалендаря
		|ИЗ
		|	&ГрафикБезКалендаря КАК ГрафикБезКалендаря
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Склад                                                 КАК Склад,
		|	Остатки.Номенклатура                                          КАК Номенклатура,
		|	Остатки.Характеристика                                        КАК Характеристика,
		|	ЕСТЬNULL(МАКСИМУМ(РасходСоСклада.Количество), 0)              КАК Количество,
		|	ЕСТЬNULL(МАКСИМУМ(РасходСоСклада.КвадратКоличества), 0)       КАК КвадратКоличества,
		|	МАКСИМУМ(Остатки.Дата)                                        КАК Дата,
		|	МАКСИМУМ(ВЫБОР КОГДА Остатки.Дата = ЕСТЬNULL(График.ДатаГрафика, ГрафикБезКалендаря.ДатаГрафика) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ)                                                    КАК ОстатокДеньВДень
		|ПОМЕСТИТЬ ДатыОстатка
		|ИЗ
		|	ОстаткиТовараПоДням КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
		|		ПО Остатки.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК График
		|		ПО ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, Остатки.Склад.Календарь) = График.Календарь
		|			И График.ДеньВключенВГрафик
		|			И ГОД(&ПериодКлассификацииДатаНачала) <= График.Год
		|			И График.Год                     <= ГОД(&ПериодКлассификацииДатаОкончания)
		|			И &ПериодКлассификацииДатаНачала <= График.ДатаГрафика
		|			И График.ДатаГрафика             <= &ПериодКлассификацииДатаОкончания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикБезКалендаря КАК ГрафикБезКалендаря
		|		ПО Константы.ОсновнойКалендарьПредприятия = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТовараПоДням КАК РасходСоСклада
		|		ПО ЕСТЬNULL(График.ДатаГрафика, ГрафикБезКалендаря.ДатаГрафика) = РасходСоСклада.Дата
		|			И Остатки.Склад          = РасходСоСклада.Склад
		|			И Остатки.Номенклатура   = РасходСоСклада.Номенклатура
		|			И Остатки.Характеристика = РасходСоСклада.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(График.ДатаГрафика, ГрафикБезКалендаря.ДатаГрафика) >= Остатки.Дата
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Склад,
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	ЕСТЬNULL(График.ДатаГрафика, ГрафикБезКалендаря.ДатаГрафика)
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	Дата,
		|	ОстатокДеньВДень
		|;
		|
		//3 Определяем количество дней, в которые был остаток товара на складе. Суммируем выручку.
		
		|ВЫБРАТЬ
		|	Т.Номенклатура        КАК Номенклатура,
		|	Т.Характеристика      КАК Характеристика,
		|	Т.Склад               КАК Склад,
		|	Т.ЧислоДней           КАК ЧислоДней,
		|	Т.Количество          КАК Количество,
		|
		|	ВЫБОР КОГДА Т.ЧислоДней > 1 ТОГДА
		|				ВЫРАЗИТЬ(Т.КвадратКоличества / (Т.ЧислоДней - 1) КАК ЧИСЛО(15, 3))
		|					- ВЫРАЗИТЬ(Т.Количество / (Т.ЧислоДней - 1)
		|						* Т.Количество / Т.ЧислоДней КАК ЧИСЛО(15, 3))
		|			ИНАЧЕ
		|			0
		|		КОНЕЦ             КАК ДисперсияПотребления

		|ПОМЕСТИТЬ ДанныеДляСтатистики
		|ИЗ(ВЫБРАТЬ
		|	ДатыОстатка.Номенклатура               КАК Номенклатура,
		|	ДатыОстатка.Характеристика             КАК Характеристика,
		|	ДатыОстатка.Склад                      КАК Склад,
		|	КОЛИЧЕСТВО(*)                          КАК ЧислоДней,
		|	СУММА(ДатыОстатка.Количество)          КАК Количество,
		|	СУММА(ДатыОстатка.КвадратКоличества)   КАК КвадратКоличества
		|
		|ИЗ
		|	ДатыОстатка КАК ДатыОстатка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТовараПоДням КАК Остатки
		|		ПО ДатыОстатка.Дата              = Остатки.Дата
		|			И ДатыОстатка.Номенклатура   = Остатки.Номенклатура
		|			И ДатыОстатка.Характеристика = Остатки.Характеристика
		|			И ДатыОстатка.Склад          = Остатки.Склад
		|ГДЕ
		|	ДатыОстатка.ОстатокДеньВДень И Остатки.ЕстьОстатки
		|	ИЛИ НЕ ДатыОстатка.ОстатокДеньВДень И Остатки.ЕстьКонечныйОстаток
		|СГРУППИРОВАТЬ ПО
		|	ДатыОстатка.Номенклатура,
		|	ДатыОстатка.Характеристика,
		|	ДатыОстатка.Склад) КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//4 Получаем итоговые статистические показатели, рассчитываем признак стабильности потребления.
		|ВЫБРАТЬ
		|	НаборДанных.Склад                                                          КАК Склад,
		|	НаборДанных.Номенклатура                                                   КАК Номенклатура,
		|	НаборДанных.Характеристика                                                 КАК Характеристика,
		|	МАКСИМУМ(НаборДанных.ДисперсияПотребления)                                 КАК ДисперсияПотребления,
		|	(МАКСИМУМ(НаборДанных.Количество) - ЕСТЬNULL(СУММА(ВозвратыНаСкладах.ВНаличии), 0))
		|	/ МАКСИМУМ(НаборДанных.ЧислоДней)                                          КАК СреднедневноеПотребление,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА НаборДанных.Количество > 0 И НаборДанных.ДисперсияПотребления
		|			/ НаборДанных.Количество * НаборДанных.ЧислоДней
		|			/ НаборДанных.Количество * НаборДанных.ЧислоДней
		|			< 0.0025
		|		ТОГДА
		|			ИСТИНА //Квадратичное отклонение менее 5% от дневного потребления
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ)                                                                     КАК ПотреблениеСтабильно
		|ПОМЕСТИТЬ СтатистикаПотребления
		|ИЗ
		|	ДанныеДляСтатистики КАК НаборДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ВозвратыНаСкладах
		|		ПО (ВозвратыНаСкладах.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
		|			ИЛИ ВозвратыНаСкладах.Регистратор ССЫЛКА Документ.ЧекККМВозврат)
		|			И ВозвратыНаСкладах.Период МЕЖДУ &ПериодКлассификацииДатаНачала И &ПериодКлассификацииДатаОкончания
		|			И НаборДанных.Склад          = ВозвратыНаСкладах.Склад
		|			И НаборДанных.Номенклатура   = ВозвратыНаСкладах.Номенклатура
		|			И НаборДанных.Характеристика = ВозвратыНаСкладах.Характеристика
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.Склад,
		|	НаборДанных.Номенклатура,
		|	НаборДанных.Характеристика
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика
		|;
		|";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Функция СформироватьТекстЗапросаПорядкаОбеспечения. Возвращает текст запроса, в котором для каждого товара
//	вычислены срок исполнения заказа и обеспечиваемый период.
//Параметры:
//	СоставРазделовЗапроса - Структура, содержит имена таблиц запроса
//		и индекс таблицы при получении результата выполнения пакета.
//	Возвращаемое значение: Строка - текст запроса.
//
Функция СформироватьТекстЗапросаПорядкаОбеспечения(СоставРазделовЗапроса = Неопределено) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Структура();
	КонецЕсли;
	
	СоставРазделовЗапроса.Вставить("ПорядокОбеспечения", СоставРазделовЗапроса.Количество());
	ТекстЗапроса =
	//План выполнения запроса:
	//1) Получаем календарь "СпрКалендарь.Ссылка" по которому установлен обеспечиваемый период.
	//	Это календарь склада, а если не указан (или это работа) то основной календарь предприятия.
	//2) Определяем срок исполнения заказа в количестве дней отгрузки.
	//	Для этого находим текущую дату и дату поставки в календарном графике и берем их разность
	//	(учитываем конец текущего года для расчетов, если дата поставки попала на следующий год).
	//3) Определяем обеспечиваемый период в количестве дней отгрузки (1 - для обеспечения по графику).
	//	Для этого находим дату поставки и дату следующей поставки в календарном графике и берем их разность
	//	(учитываем конец года даты поставки для расчетов, если дата следующей поставки попала на следующий за поставкой год).
	//4) Определяем дату следующей поставки добавлением к дате поставки обеспечиваемого периода по календарарному графику.
	//	(учитываем конец года даты поставки для расчетов, если дата следующей поставки попадает на следующий за поставкой год).
	"ВЫБРАТЬ
	|	Товары.Номенклатура                                     КАК Номенклатура,
	|	Товары.Характеристика                                   КАК Характеристика,
	|	Товары.Назначение                                       КАК Назначение,
	|	Товары.Склад                                            КАК Склад,
	|	Товары.Подразделение                                    КАК Подразделение,
	|	Товары.СпособОбеспечения                                КАК СпособОбеспечения,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ)                                                   КАК ЭтаПотребностьОбособлена,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ)                                                   КАК ЭтоРабота,
	
	|	МАКСИМУМ(СпособыОбеспечения.ДатаПоставки)                КАК ДатаПоставки,
	
	//СрокИсполненияЗаказа - количество рабочих дней склада до ближайшей поставки
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА СпрКалендарь.Ссылка ЕСТЬ NULL
	|			И СпособыОбеспечения.ДатаПоставки = ДАТАВРЕМЯ(1, 1, 1) ТОГДА //дата поставки не определена.
	|			0
	|		КОГДА СпрКалендарь.Ссылка ЕСТЬ NULL //календари не используются
	|			И СпособыОбеспечения.ДатаПоставки <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|			РАЗНОСТЬДАТ(&НачалоПериода, СпособыОбеспечения.ДатаПоставки, ДЕНЬ)
	|		ИНАЧЕ
	|		ЕСТЬNULL(
	|			ДатаПоставкиГрафик.КоличествоДнейВГрафикеСНачалаГода
	|				- ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
	|				+ ВЫБОР
	|					КОГДА ТекущаяДата.Год + 1 = ДатаПоставкиГрафик.Год ТОГДА
	|						КонецГода.КоличествоДнейВГрафикеСНачалаГода
	|					ИНАЧЕ
	|						0
	|				КОНЕЦ
	|				+ ВЫБОР
	|					КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
	|						0
	|					ИНАЧЕ
	|						-1
	|				КОНЕЦ
	|				+ ВЫБОР
	|					КОГДА ДатаПоставкиГрафик.ДеньВключенВГрафик ТОГДА
	|						0
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ
	|		, 0)
	|	КОНЕЦ)                                                   КАК СрокИсполненияЗаказа,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ СпрКалендарь.Ссылка ЕСТЬ NULL
	|			И (ДатаПоставкиГрафик.ДатаГрафика ЕСТЬ NULL
	|				ИЛИ ТекущаяДата.ДатаГрафика ЕСТЬ NULL) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ)                                                   КАК НетСрокаПоставкиПоКалендарюСклада,
	
	//ОбеспечиваемыйПериод - количество рабочих дней склада от поставки до следующей поставки
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ СпособыОбеспечения.НаступилаДатаОчередногоЗаказа ТОГДА
	|			СпособыОбеспечения.ОбеспечиваемыйПериод
	|		КОГДА СпрКалендарь.Ссылка ЕСТЬ NULL ТОГДА //Календари не используются
	|			РАЗНОСТЬДАТ(
	|				ВЫБОР
	|					КОГДА СпособыОбеспечения.ДатаПоставки <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|						СпособыОбеспечения.ДатаПоставки
	|					ИНАЧЕ
	|						&НачалоПериода
	|				КОНЕЦ, СпособыОбеспечения.ДатаСледующейПоставки, ДЕНЬ)
	|		ИНАЧЕ
	|		ЕСТЬNULL(
	|			СледующаяПоставкаГрафик.КоличествоДнейВГрафикеСНачалаГода
	|				- ЕСТЬNULL(ДатаПоставкиГрафик.КоличествоДнейВГрафикеСНачалаГода, ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
	|				+ ВЫБОР
	|					КОГДА ЕСТЬNULL(ДатаПоставкиГрафик.Год, ТекущаяДата.Год) + 1 = СледующаяПоставкаГрафик.Год ТОГДА
	|						ВЫБОР
	|							КОГДА ДатаПоставкиГрафик.Год ЕСТЬ NULL ТОГДА
	|								КонецГода.КоличествоДнейВГрафикеСНачалаГода
	|							ИНАЧЕ
	|								КонецГодаПоставки.КоличествоДнейВГрафикеСНачалаГода
	|						КОНЕЦ
	|					ИНАЧЕ
	|						0
	|				КОНЕЦ
	|				+ ВЫБОР
	|					КОГДА ЕСТЬNULL(ДатаПоставкиГрафик.ДеньВключенВГрафик, ТекущаяДата.ДеньВключенВГрафик) ТОГДА
	|						0
	|					ИНАЧЕ
	|						-1
	|				КОНЕЦ
	|				+ ВЫБОР
	|					КОГДА СледующаяПоставкаГрафик.ДеньВключенВГрафик ТОГДА
	|						0
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ, 0)
	|	КОНЕЦ)                                                  КАК ОбеспечиваемыйПериод,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА СпособыОбеспечения.НаступилаДатаОчередногоЗаказа
	|			И СпособыОбеспечения.ДатаСледующейПоставки <> ДАТАВРЕМЯ(1, 1, 1)
	|			И НЕ СпрКалендарь.Ссылка ЕСТЬ NULL
	|			И (СледующаяПоставкаГрафик.ДатаГрафика ЕСТЬ NULL
	|				ИЛИ ЕСТЬNULL(ДатаПоставкиГрафик.ДатаГрафика, ТекущаяДата.ДатаГрафика) ЕСТЬ NULL) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ)                                                   КАК НетОбеспечиваемогоПериодаПоКалендарюСклада,
	
	//ДатаСледующейПоставки (граница обеспечиваемого периода)
	|	МИНИМУМ(ВЫБОР
	|		КОГДА СпособыОбеспечения.НаступилаДатаОчередногоЗаказа ТОГДА
	|			СпособыОбеспечения.ДатаСледующейПоставки
	|		КОГДА СпрКалендарь.Ссылка ЕСТЬ NULL ТОГДА //Календари не используются
	|			ДОБАВИТЬКДАТЕ(
	|				ВЫБОР
	|					КОГДА СпособыОбеспечения.ДатаПоставки <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|						СпособыОбеспечения.ДатаПоставки
	|					ИНАЧЕ
	|						&НачалоПериода
	|				КОНЕЦ, ДЕНЬ, СпособыОбеспечения.ОбеспечиваемыйПериод)
	|		ИНАЧЕ
	|			ЕСТЬNULL(ГраницаПериода.ДатаГрафика, ГраницаПериодаПлюсГод.ДатаГрафика)
	|	КОНЕЦ)                                                  КАК ДатаСледующейПоставки,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ СпособыОбеспечения.НаступилаДатаОчередногоЗаказа
	|			И СпособыОбеспечения.ОбеспечиваемыйПериод > 0
	|			И НЕ СпрКалендарь.Ссылка ЕСТЬ NULL
	|			И ЕСТЬNULL(ГраницаПериода.ДатаГрафика, ГраницаПериодаПлюсГод.ДатаГрафика) ЕСТЬ NULL ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ)                                                  КАК НетДатыСледующейПоставкиПоКалендарюСклада,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА СпособыОбеспечения.НаступилаДатаОчередногоЗаказа ТОГДА
	|			ИСТИНА
	|		КОГДА СпособыОбеспечения.ОбеспечиваемыйПериод > 0 ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ)                                                     КАК ЕстьОграничениеПериода,
	|	МАКСИМУМ(СпособыОбеспечения.НаступилаДатаОчередногоЗаказа) КАК ПлановыйЗаказ
	|
	|ПОМЕСТИТЬ ПорядокОбеспечения
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпособыОбеспечения КАК СпособыОбеспечения
	|		ПО Товары.СпособОбеспечения = СпособыОбеспечения.СпособОбеспечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО ЕСТЬNULL(Товары.Склад.Календарь, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|			= ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари КАК СпрКалендарь
	|		ПО ЕСТЬNULL(Константы.ОсновнойКалендарьПредприятия, Товары.Склад.Календарь) = СпрКалендарь.Ссылка
	
	|//Определение срока исполнения заказа в количестве дней отгрузки.
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
	|		ПО СпрКалендарь.Ссылка = ТекущаяДата.Календарь
	|			И ТекущаяДата.ДатаГрафика = &НачалоПериода
	|			И ТекущаяДата.Год = ГОД(&НачалоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаПоставкиГрафик
	|		ПО СпрКалендарь.Ссылка = ДатаПоставкиГрафик.Календарь
	|			И ДатаПоставкиГрафик.ДатаГрафика
	|				= ВЫБОР
	|					КОГДА СпособыОбеспечения.ДатаПоставки = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|						&НачалоПериода
	|					ИНАЧЕ
	|						СпособыОбеспечения.ДатаПоставки
	|				КОНЕЦ
	|			И ДатаПоставкиГрафик.Год
	|				= ГОД(ВЫБОР
	|					КОГДА СпособыОбеспечения.ДатаПоставки = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|						&НачалоПериода
	|					ИНАЧЕ
	|						СпособыОбеспечения.ДатаПоставки
	|				КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КонецГода //на случай, если дата поставки в следующем году.
	|		ПО СпрКалендарь.Ссылка = КонецГода.Календарь
	|			И КонецГода.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&НачалоПериода, ГОД), ДЕНЬ)
	|			И КонецГода.Год = ГОД(&НачалоПериода)
	
	|//Определение обеспечиваемого периода в количестве дней отгрузки (для обеспечения по графику).
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК СледующаяПоставкаГрафик
	|		ПО СпрКалендарь.Ссылка = СледующаяПоставкаГрафик.Календарь
	|			И СледующаяПоставкаГрафик.ДатаГрафика = СпособыОбеспечения.ДатаСледующейПоставки
	|			И СледующаяПоставкаГрафик.Год = ГОД(СпособыОбеспечения.ДатаСледующейПоставки)
	|			И СпособыОбеспечения.НаступилаДатаОчередногоЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КонецГодаПоставки //на случай, если дата след. поставки в следующем году.
	|		ПО СпрКалендарь.Ссылка = КонецГода.Календарь
	|			И КонецГодаПоставки.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ВЫБОР
	|					КОГДА СпособыОбеспечения.ДатаПоставки = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|						&НачалоПериода
	|					ИНАЧЕ
	|						СпособыОбеспечения.ДатаПоставки
	|				КОНЕЦ, ГОД), ДЕНЬ)
	|			И КонецГодаПоставки.Год = ГОД(ВЫБОР
	|					КОГДА СпособыОбеспечения.ДатаПоставки = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|						&НачалоПериода
	|					ИНАЧЕ
	|						СпособыОбеспечения.ДатаПоставки
	|				КОНЕЦ)
	
	|//Определение даты следующей поставки для режима заказа на обеспечиваемый период.
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГраницаПериода //здесь дубли строк из-за выходных
	|		ПО СпрКалендарь.Ссылка = ГраницаПериода.Календарь
	|			И НЕ СпособыОбеспечения.НаступилаДатаОчередногоЗаказа
	|			И СпособыОбеспечения.ОбеспечиваемыйПериод > 0
	|			И ЕСТЬNULL(ДатаПоставкиГрафик.КоличествоДнейВГрафикеСНачалаГода, ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
	|				+ СпособыОбеспечения.ОбеспечиваемыйПериод
	|				+ ВЫБОР
	|					КОГДА ЕСТЬNULL(ДатаПоставкиГрафик.ДеньВключенВГрафик, ТекущаяДата.ДеньВключенВГрафик) ТОГДА
	|						0
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ
	|			= ГраницаПериода.КоличествоДнейВГрафикеСНачалаГода
	|			И ГраницаПериода.Год = ЕСТЬNULL(ДатаПоставкиГрафик.Год, ТекущаяДата.Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатаПоставкиКонецГода
	|		ПО СпрКалендарь.Ссылка = ДатаПоставкиКонецГода.Календарь
	|			И НЕ СпособыОбеспечения.НаступилаДатаОчередногоЗаказа
	|			И СпособыОбеспечения.ОбеспечиваемыйПериод > 0
	|			И ГраницаПериода.ДатаГрафика ЕСТЬ NULL
	|			И ДатаПоставкиКонецГода.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ЕСТЬNULL(ДатаПоставкиГрафик.ДатаГрафика, &НачалоПериода), ГОД), ДЕНЬ)
	|			И ДатаПоставкиКонецГода.Год = ЕСТЬNULL(ДатаПоставкиГрафик.Год, ТекущаяДата.Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГраницаПериодаПлюсГод //здесь дубли строк из-за выходных.
	|		ПО СпрКалендарь.Ссылка = ГраницаПериодаПлюсГод.Календарь
	|			И НЕ СпособыОбеспечения.НаступилаДатаОчередногоЗаказа
	|			И СпособыОбеспечения.ОбеспечиваемыйПериод > 0
	|			И ГраницаПериода.ДатаГрафика ЕСТЬ NULL
	|			И ГраницаПериодаПлюсГод.КоличествоДнейВГрафикеСНачалаГода
	|			= СпособыОбеспечения.ОбеспечиваемыйПериод
	|				- ДатаПоставкиКонецГода.КоличествоДнейВГрафикеСНачалаГода
	|				+ ЕСТЬNULL(ДатаПоставкиГрафик.КоличествоДнейВГрафикеСНачалаГода, ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
	|				+ ВЫБОР
	|					КОГДА ЕСТЬNULL(ДатаПоставкиГрафик.ДеньВключенВГрафик, ТекущаяДата.ДеньВключенВГрафик) ТОГДА
	|						0
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ
	|			И ГраницаПериодаПлюсГод.Год = ЕСТЬNULL(ДатаПоставкиГрафик.Год, ТекущаяДата.Год) + 1
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Склад,
	|	Товары.Подразделение,
	|	Товары.СпособОбеспечения
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад,
	|	Подразделение,
	|	СпособОбеспечения
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

//Процедура ЗаполнитьРеквизитыСпособаОбеспечения
//	Параметры:
//		"СтруктураСпособаОбеспечения" - Структура, содержит ссылку на способ обеспечения
//		и поля, в которые будут помещены реквизиты способа обеспечения.
//		"НачалоПериода"  - дата, на которую получаются значения реквизитов.
//
Процедура ЗаполнитьРеквизитыСпособаОбеспечения(ПараметрыЦиклаПоставки, НачалоПериода, АктуализироватьДаты) Экспорт
	
	СпособОбеспечения = ПараметрыЦиклаПоставки.СпособОбеспечения;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КалендарьПредприятия", Константы.ОсновнойКалендарьПредприятия.Получить());
	Запрос.УстановитьПараметр("СпособОбеспечения",    СпособОбеспечения);
	Запрос.УстановитьПараметр("НачалоПериода",        НачалоПериода);
	
	Если АктуализироватьДаты И ЗначениеЗаполнено(СпособОбеспечения) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	&СпособОбеспечения КАК СпособОбеспечения
		|ПОМЕСТИТЬ СпособыОбеспечения
		|;
		|
		|/////////////////////////////////////////////////////////////////////
		|" + Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаАктуализацииСпособовОбеспечения();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СпособОбъект = Выборка.СпособОбеспечения.ПолучитьОбъект();
			Справочники.СпособыОбеспеченияПотребностей.АктуализироватьГрафикЗаказовНаСервере(СпособОбъект, НачалоПериода);
			СпособОбъект.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&СпособОбеспечения КАК СпособОбеспечения,
	|	NULL КАК Частота
	|ПОМЕСТИТЬ СпособыОбеспечения
	|;
	|
	|/////////////////////////////////////////////////////////////////////
	|" + СформироватьТекстЗапросаРеквизитовСпособаОбеспечения();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ПараметрыЦиклаПоставки, Выборка);
	
КонецПроцедуры

//Функция СтатистикаПотребления
//	Параметры:
//		"КлючНоменклатуры" - Структура с полями: Номенклатура - Характеристика - Склад. Позиция для которой необходимо рассчитать статистку.
//		"ПараметрыРасчета" - Структура с полями:
//			- ИспользоватьХарактеристикиНоменклатуры
//			- НачалоПериода
//			- ПериодКлассификацииДатаНачала
//			- ПериодКлассификацииДатаОкончания
//		АдресГрафикаБезКалендаря - Строка, содержит адрес во временном харнилище таблицы с перечислением всех дат в периоде расчета статистики.
//			Используется, если не задан календарь предприятия, для передачи в запрос всех дней в периоде.
//Возвращаемое значение - Структура с полями:
//			- СреднедневноеПотребление,
//			- СреднееОтклонение,
//			- ПотреблениеСтабильно.
//
Функция СтатистикаПотребления(КлючНоменклатуры, ПараметрыРасчета, АдресГрафикаБезКалендаря) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Номенклатура   КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Склад          КАК Склад
	|ПОМЕСТИТЬ ТоварыСреднедневногоПотребления
	|
	|;
	|//////////////////////////////////////////////////////////////////////////
	|"
	+ Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаСтатистикиПотребления() +
	"ВЫБРАТЬ
	|	СтатистикаПотребления.СреднедневноеПотребление КАК СреднедневноеПотребление,
	|	СтатистикаПотребления.ДисперсияПотребления     КАК ДисперсияПотребления,
	|	СтатистикаПотребления.ПотреблениеСтабильно     КАК ПотреблениеСтабильно
	|ИЗ
	|	СтатистикаПотребления КАК СтатистикаПотребления";
	
	Для каждого Свойство Из ПараметрыРасчета Цикл
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	Для каждого Свойство Из КлючНоменклатуры Цикл
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	ГрафикБезКалендаря = ПолучитьИзВременногоХранилища(АдресГрафикаБезКалендаря);
	Запрос.УстановитьПараметр("ГрафикБезКалендаря", ГрафикБезКалендаря);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Структура("СреднедневноеПотребление, СреднееОтклонение, ПотреблениеСтабильно");
	Если Выборка.Следующий() Тогда
		Результат.СреднедневноеПотребление = Выборка.СреднедневноеПотребление;
		Если ЗначениеЗаполнено(Выборка.ДисперсияПотребления) И Выборка.ДисперсияПотребления > 0 Тогда
			Результат.СреднееОтклонение        = Pow(Выборка.ДисперсияПотребления, 0.5);
		КонецЕсли;
		Результат.ПотреблениеСтабильно     = Выборка.ПотреблениеСтабильно;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Функция СоздатьГрафикВХранилище
//Создает таблицу значений содержащую даты в периоде заданном параметрами. Если задан основной календарь предприятия,
//таблица остается пустой.
//	Параметры:
//		ПериодКлассификацииДатаНачала, ПериодКлассификацииДатаОкончания - Дата, начало и окончание периода.
//		УникальныйИдентификатор - идентификатор формы, для освобождения хранилища при ее закрытии.
//	Возвращаемое значение: Строка - адрес во временном хранилище куда помещена созданная таблица.
//
Функция СоздатьГрафикВХранилище(ПериодКлассификацииДатаНачала, ПериодКлассификацииДатаОкончания,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	ГрафикБезКалендаря = Новый ТаблицаЗначений();
	ГрафикБезКалендаря.Колонки.Добавить("ДатаГрафика", Новый ОписаниеТипов("Дата"));
	
	Если Не ЗначениеЗаполнено(Константы.ОсновнойКалендарьПредприятия.Получить())
		И ЗначениеЗаполнено(ПериодКлассификацииДатаНачала)
		И ЗначениеЗаполнено(ПериодКлассификацииДатаОкончания) Тогда
		
		ДатаГрафика = ПериодКлассификацииДатаНачала;
		Пока Истина Цикл
			
			Если ДатаГрафика > ПериодКлассификацииДатаОкончания Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаТаблицы = ГрафикБезКалендаря.Добавить();
			СтрокаТаблицы.ДатаГрафика = ДатаГрафика;
			
			ДатаГрафика = ДатаГрафика + 86400;  //86400 - длительность суток в секундах.
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ГрафикБезКалендаря, УникальныйИдентификатор);
	
КонецФункции

#Область СтруктурыДанных

// Возвращает структуру с описанием полей таблицы потребностей по заказам.
//
// Параметры:
//  Секции - Строка - Определяет блоки полей, возможные значения: "СвойстваПотребности", "РеквизитыЗаказаКОбеспечению"
//                    "РеквизитыОбеспечивающегоЗаказа".
//
// Возвращаемое значение:
//  Структура - свойство структуры - имя поля, значение свойства - тип поля.
//
Функция ПоляТаблицыЗаказы(Секции) Экспорт

	Поля = Новый Структура();

	Если СтрНайти(Секции, "СвойстваПотребности") Тогда

		Поля.Вставить("Номенклатура",             Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Поля.Вставить("Характеристика",           Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Поля.Вставить("Склад",                    Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Поля.Вставить("ПодразделениеПолучатель",  Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		Поля.Вставить("Назначение",               Новый ОписаниеТипов("СправочникСсылка.Назначения"));

	КонецЕсли;

	Если СтрНайти(Секции, "РеквизитыЗаказаКОбеспечению") Тогда

		Поля.Вставить("Заказ",        ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению());
		Поля.Вставить("ДатаОтгрузки", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));

	КонецЕсли;

	Если СтрНайти(Секции, "РеквизитыОбеспечивающегоЗаказа") Тогда

		Поля.Вставить("ТипОбеспечения",      Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбеспечения"));
		Поля.Вставить("ИсточникОбеспечения", Новый ОписаниеТипов("СправочникСсылка.Склады, СправочникСсылка.Партнеры"));
		Поля.Вставить("Соглашение",          Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
		Поля.Вставить("СпособОбеспечения",   Новый ОписаниеТипов("СправочникСсылка.СпособыОбеспеченияПотребностей"));
		Поля.Вставить("ВидЦены",             Новый ОписаниеТипов("СправочникСсылка.ВидыЦенПоставщиков"));
		Поля.Вставить("ДатаПоставки",        ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		Поля.Вставить("КЗаказу",             ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));

	КонецЕсли;

	Возврат Поля;

КонецФункции

// Возвращает структуру с описанием полей таблицы потребностей для поддержания запасов.
//
// Параметры:
//  Секции - Строка - Определяет блоки полей, возможные значения: "СвойстваПотребности", "РеквизитыОбеспечивающегоЗаказа".
//
// Возвращаемое значение:
//  Структура - свойство структуры - имя поля, значение свойства - тип поля.
//
Функция ПоляТаблицыЗапасы(Секции) Экспорт

	Поля = Новый Структура();

	Если СтрНайти(Секции, "СвойстваПотребности") Тогда

		Поля.Вставить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Поля.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Поля.Вставить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));

	КонецЕсли;

	Если СтрНайти(Секции, "РеквизитыОбеспечивающегоЗаказа") Тогда

		Поля.Вставить("ТипОбеспечения",      Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбеспечения"));
		Поля.Вставить("ИсточникОбеспечения", Новый ОписаниеТипов("СправочникСсылка.Склады, СправочникСсылка.Партнеры"));
		Поля.Вставить("Соглашение",          Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
		Поля.Вставить("СпособОбеспечения",   Новый ОписаниеТипов("СправочникСсылка.СпособыОбеспеченияПотребностей"));
		Поля.Вставить("ВидЦены",             Новый ОписаниеТипов("СправочникСсылка.ВидыЦенПоставщиков"));
		Поля.Вставить("ДатаПоставки",        ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		Поля.Вставить("КЗаказу",             ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));

	КонецЕсли;

	Возврат Поля;

КонецФункции

// Заполняет и проводит документ созданный обработкой.
//
// Параметры:
//  МенеджерДокументов - ДокументМенеджер - программный объект, менеджер документа,
//  ДанныеЗаполнения - Структура - Структура содержащая значения реквизитов и табличные части для заполнения документа,
//  Статус - ПеречислениеСсылка.СтатусыВнутреннмихЗаказов, ПеречислениеСсылка.СтатусыЗаказовНаПеремещение,
//           ПеречислениеСсылка.СтатусыЗаказовПоставщикам - статус, в котором необходимо провести документ
//  СообщенияОбОшибках - Структура - содержит возникшие сообщенияоб ошибка записи документа.
//
// Возвращаемое значение:
//  ДокументОбъект.ЗаказПоставщику, ДокументОбъект.ЗаказНаСборку, ДокументОбъект.ЗаказНаПеремещение,
//  ДокументОбъект.ЗаказНаПроизводство - Проведенный заказ, созданный обработкой.
//
Функция ЗаполнитьИПровестиДокумент(МенеджерДокументов, ДанныеЗаполнения, Статус, СообщенияОбОшибках) Экспорт

	ДокументОбъект = МенеджерДокументов.СоздатьДокумент();
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());

	ДокументОбъект.Заполнить(ДанныеЗаполнения);

	Если Не ЗначениеЗаполнено(ДокументОбъект.Статус) Тогда
		ДокументОбъект.Статус = Статус;
	КонецЕсли;

	ЗаписатьДокумент(ДокументОбъект, СообщенияОбОшибках);

	Возврат ДокументОбъект;

КонецФункции

#КонецОбласти

Процедура ПоместитьДатыПоГрафикуРаботыВоВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяТаблицыПараметровРасчета, ИмяТаблицыРезультата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПараметрыРасчета.Календарь                КАК Календарь,
	|	ПараметрыРасчета.ТочкаОтсчета             КАК ТочкаОтсчета,
	|	ПараметрыРасчета.ЧислоДней                КАК ЧислоДней,
	|	ГрафикРаботы.ДатаГрафика                  КАК ПлановаяДата
	|
	|ПОМЕСТИТЬ ИмяТаблицыРезультата
	|
	|ИЗ
	|	ИмяТаблицыПараметровРасчета КАК ПараметрыРасчета
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГрафикРаботы
	|		ПО ГрафикРаботы.Календарь = ПараметрыРасчета.Календарь
	|			И ГрафикРаботы.ДатаГрафика        >=        ПараметрыРасчета.ТочкаОтсчета
	|			И ГрафикРаботы.Год                >=        ГОД(ПараметрыРасчета.ТочкаОтсчета)
	|			И ГрафикРаботы.ДеньВключенВГрафик
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ОтсчитанныеДаты
	|		ПО ОтсчитанныеДаты.Календарь = ПараметрыРасчета.Календарь
	|			И ОтсчитанныеДаты.ДатаГрафика    МЕЖДУ    ПараметрыРасчета.ТочкаОтсчета         И    ГрафикРаботы.ДатаГрафика
	|			И ОтсчитанныеДаты.Год            МЕЖДУ    ГОД(ПараметрыРасчета.ТочкаОтсчета)    И    ГОД(ГрафикРаботы.ДатаГрафика)
	|			И ОтсчитанныеДаты.ДеньВключенВГрафик
	|
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыРасчета.Календарь,
	|	ПараметрыРасчета.ТочкаОтсчета,
	|	ПараметрыРасчета.ЧислоДней,
	|	ГрафикРаботы.ДатаГрафика
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) - 1 = ПараметрыРасчета.ЧислоДней
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Календарь,
	|	ТочкаОтсчета,
	|	ЧислоДней
	|;
	|////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыПараметровРасчета", ИмяТаблицыПараметровРасчета);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыРезультата",        ИмяТаблицыРезультата);
	
КонецПроцедуры

// Удаляет созданные документы
//
// Параметры:
// ТаблицаДокументы - ДанныеФормыКоллекция - список созданных документов.
//
Процедура УдалитьДокументы(ТаблицаДокументы) Экспорт
	
	Если ТаблицаДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю();
	ТекстИмеютсяСсылки = НСтр("ru='Имеются ссылки на %1 - %2.';uk='Є посилання на %1 - %2.'");
	ТекстПомечен       = НСтр("ru='%1 - помечен на удаление.';uk='%1 - відмічений для вилучення.'");
	ТекстУдален        = НСтр("ru='%1 - удален.';uk='%1 - вилучено.'");
	
	ИменаОбъектовМетаданных = "Документ.ЗаказПоставщику,Документ.ЗаказНаПеремещение,Документ.ЗаказНаСборку";
    
	Регистры = ОбщегоНазначенияУТПовтИсп.РегистрыСведенийПоМетаданнымИзмерений(ИменаОбъектовМетаданных, Истина);
	
	СсылкиНаУдаление = Новый Массив();
	
	Для Каждого Строка Из ТаблицаДокументы Цикл
		СсылкиНаУдаление.Добавить(Строка.Документ);
	КонецЦикла;
	
	НазначенияЗаказов = НазначенияЗаказов(СсылкиНаУдаление);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СсылкиНаУдаление, НазначенияЗаказов);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	ВсегоСтрок = ТабСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТабСсылок[ВсегоСтрок - Счетчик];
		
		Если Ссылка[0] = Ссылка[1] Или ЭтоЗаписьВедомогоРегистраСведений(Ссылка[1], Регистры) Тогда
			
			ТабСсылок.Удалить(Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПомечатьНаУдаление = Новый Массив();
	
	ВсегоСтрок = ТабСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТабСсылок[ВсегоСтрок - Счетчик];
		
		Индекс = СсылкиНаУдаление.Найти(Ссылка[1]);
		Если Индекс = Неопределено Тогда
			
			Если ПомечатьНаУдаление.Найти(Ссылка[0]) = Неопределено Тогда
				
				ПомечатьНаУдаление.Добавить(Ссылка[0]);
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИмеютсяСсылки, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1])); 
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			ТабСсылок.Удалить(Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаЗавершена = Ложь;
	Пока Не ОбработкаЗавершена Цикл
		
		ОбработкаЗавершена = Истина;
		
	ВсегоСтрок = ТабСсылок.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		Ссылка = ТабСсылок[ВсегоСтрок - Счетчик];
			
			Если ПомечатьНаУдаление.Найти(Ссылка[0]) <> Неопределено Тогда
				
				Если ПомечатьНаУдаление.Найти(Ссылка[1]) = Неопределено Тогда
					
					ПомечатьНаУдаление.Добавить(Ссылка[1]);
					
				КонецЕсли;
				
				ТабСсылок.Удалить(Ссылка);
				ОбработкаЗавершена = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаДокументы.Очистить();
	
	Для Каждого Ссылка из ПомечатьНаУдаление Цикл
		
		Индекс = СсылкиНаУдаление.Найти(Ссылка);
		Если Индекс <> Неопределено Тогда
			СсылкиНаУдаление.Удалить(Индекс);
		КонецЕсли;
		
		Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПомечен, СокрЛП(Ссылка)); 
		Сообщение.Сообщить();
		
	КонецЦикла;
	
	Для Каждого Ссылка из СсылкиНаУдаление Цикл
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУдален, СокрЛП(Ссылка)); 
		Сообщение.Сообщить();
		
	КонецЦикла;
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, ИмяНабораДанных)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных,
		КомпоновщикНастроек.ПолучитьНастройки(),,,, Ложь);

	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Запрос);

	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл

		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);

	КонецЦикла;
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
	Возврат Запрос;

КонецФункции

Функция ВременнаяТаблицаТоваровДляПоддержанияЗапаса()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураСегмента.Номенклатура    КАК Номенклатура,
		|	НоменклатураСегмента.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ ОтборПоСегментам
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		{ГДЕ
		|			НоменклатураСегмента.Номенклатура.*    КАК Номенклатура,
		|			НоменклатураСегмента.Характеристика.*  КАК Характеристика,
		|			НоменклатураСегмента.Сегмент.*         КАК СегментНоменклатуры}
		|ГДЕ
		|	&ИспользуетсяОтборПоСегментуНоменклатуры
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаФорматыСкладов(Ложь)
		+ РегистрыСведений.ТоварныеОграничения.ВременнаяТаблицаТоварыПоддерживаемогоЗапаса()
		+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура                       КАК Номенклатура,
		|	Т.Характеристика                     КАК Характеристика,
		|	Т.Склад                              КАК Склад,
		|
		|	СпрСпособ.Ссылка                     КАК СпособОбеспечения
		|
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ВтТоварыПоддерживаемогоЗапаса КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|
		|//отборы компоновщика
		|{ГДЕ
		|	ВЫРАЗИТЬ(NULL КАК Справочник.Назначения).*   КАК Назначение,
		|	ВЫРАЗИТЬ(NULL КАК Справочник.СтруктураПредприятия).* КАК ПодразделениеПолучатель}
		|
		|{ГДЕ
		|	(ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*           КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) КАК ТипОбеспечения,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА СпрСпособ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				СпрСпособ.Подразделение
		|			ИНАЧЕ
		|				ЕСТЬNULL(Т.Склад.Подразделение,
		|					ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		КОНЕЦ КАК Справочник.СтруктураПредприятия).*                                   КАК Подразделение,
		|	(ЕСТЬNULL(СпрСпособ.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)).*              КАК ИсточникОбеспечения}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад,
		|	СпособОбеспечения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтФорматыСкладов;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Номенклатура                       КАК Номенклатура,
		|	Т.Характеристика                     КАК Характеристика,
		|	Т.Склад                              КАК Склад,
		|	Т.СпособОбеспечения                  КАК СпособОбеспечения
		|{ВЫБРАТЬ
		|	Номенклатура.*      КАК Номенклатура,
		|	Характеристика.*    КАК Характеристика,
		|	Склад.*             КАК Склад,
		|	СпособОбеспечения.* КАК СпособОбеспечения}
		|ИЗ
		|	ВтТовары КАК Т";

	ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
		ТекстЗапроса, "ПодстановкаОсновногоСпособаОбеспечения");
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ВременнаяТаблицаТоваровДляОбеспеченияЗаказов()

	ТекстЗапроса =
		//Отбор по сегментам.
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураСегмента.Номенклатура    КАК Номенклатура,
		|	НоменклатураСегмента.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ ОтборПоСегментам
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		{ГДЕ
		|			НоменклатураСегмента.Номенклатура.*    КАК Номенклатура,
		|			НоменклатураСегмента.Характеристика.*  КАК Характеристика,
		|			НоменклатураСегмента.Сегмент.*         КАК СегментНоменклатуры}
		|ГДЕ
		|	&ИспользуетсяОтборПоСегментуНоменклатуры
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//Необеспеченные работы по заказам на отгрузку
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО     КАК Склад,
		|	ВЫРАЗИТЬ(Т.Назначение КАК Справочник.Назначения)     КАК Назначение,
		|	Т.Подразделение  КАК ПодразделениеПолучатель
		|
		|ПОМЕСТИТЬ ВтОстаткиРабот
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
		|		{Номенклатура.* КАК Номенклатура, Характеристика.* КАК Характеристика,
		|			Подразделение.* КАК ПодразделениеПолучатель, Назначение.* КАК Назначение}
		|		{(Номенклатура, Характеристика) В(
		|			ВЫБРАТЬ
		|				ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|				ТаблицаОтбора.Характеристика КАК Характеристика
		|			ИЗ
		|				ОтборПоСегментам КАК ТаблицаОтбора
		|			ГДЕ
		|			&ИспользуетсяОтборПоСегментуНоменклатуры)}) КАК Т
		|	{ГДЕ ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Справочник.Склады).* КАК Склад}
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение, ПодразделениеПолучатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//Необеспеченные обособленные товары по заказам на отгрузку
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	ВЫРАЗИТЬ(Т.Назначение КАК Справочник.Назначения)     КАК Назначение
		|
		|ПОМЕСТИТЬ ВтОстаткиОбособленныхТоваров
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|		{Номенклатура.* КАК Номенклатура, Характеристика.* КАК Характеристика,
		|			Склад.* КАК Склад, Назначение.* КАК Назначение}
		|		{(Номенклатура, Характеристика) В(
		|			ВЫБРАТЬ
		|				ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|				ТаблицаОтбора.Характеристика КАК Характеристика
		|			ИЗ
		|				ОтборПоСегментам КАК ТаблицаОтбора
		|			ГДЕ
		|			&ИспользуетсяОтборПоСегментуНоменклатуры)}) КАК Т
		|ГДЕ
		|	Т.КЗаказуОстаток > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//Строки заказов на отгрузку товаров с вариантом обеспечения "Требуется"
		|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаФорматыСкладов(Ложь)
		+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура                       КАК Номенклатура,
		|	Т.Характеристика                     КАК Характеристика,
		|	Т.Склад                              КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеПолучатель,
		|	Т.Назначение                         КАК Назначение,
		|	Т.Регистратор                        КАК Заказ,
		|	Т.Период                             КАК ДатаОтгрузки,
		|
		|	Т.КоличествоНеобеспечено             КАК Количество,
		|
		|	СпрСпособ.Ссылка                     КАК СпособОбеспечения
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|
		|ГДЕ
		|	Т.Активность
		|	И Т.КоличествоНеобеспечено > 0
		|
		|//отборы компоновщика
		|{ГДЕ
		|	Т.Номенклатура.*                             КАК Номенклатура,
		|	Т.Характеристика.*                           КАК Характеристика,
		|	Т.Назначение.*                               КАК Назначение,
		|	Т.Склад.*                                    КАК Склад}
		|
		|{ГДЕ (Т.Номенклатура, Т.Характеристика) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика
		|	ИЗ
		|		ОтборПоСегментам КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборПоСегментуНоменклатуры)}
		|
		|{ГДЕ
		|	(ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*           КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) КАК ТипОбеспечения,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА СпрСпособ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				СпрСпособ.Подразделение
		|			ИНАЧЕ
		|				ЕСТЬNULL(Т.Склад.Подразделение,
		|					ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		КОНЕЦ КАК Справочник.СтруктураПредприятия).*                                   КАК Подразделение,
		|	(ЕСТЬNULL(СпрСпособ.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)).*              КАК ИсточникОбеспечения}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Необеспеченные строки заказов на отгрузку товаров с вариантом обеспечения "Обособленно"
		|ВЫБРАТЬ
		|	Т.Номенклатура                       КАК Номенклатура,
		|	Т.Характеристика                     КАК Характеристика,
		|	Т.Склад                              КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеПолучатель,
		|	Т.Назначение                         КАК Назначение,
		|	Т.Регистратор                        КАК Заказ,
		|	Т.Период                             КАК ДатаОтгрузки,
		|
		|	Т.КоличествоПодЗаказ                 КАК Количество,
		|
		|	СпрСпособ.Ссылка                     КАК СпособОбеспечения
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров КАК Т
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОстаткиОбособленныхТоваров КАК Остатки
		|		ПО Т.Номенклатура   = Остатки.Номенклатура
		|		 И Т.Характеристика = Остатки.Характеристика
		|		 И Т.Склад          = Остатки.Склад
		|		 И Т.Назначение     = Остатки.Назначение
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|
		|ГДЕ
		|	Т.Активность
		|	И Т.КоличествоПодЗаказ > 0
		|
		|//отборы компоновщика
		|{ГДЕ
		|	(ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*           КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) КАК ТипОбеспечения,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА СпрСпособ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				СпрСпособ.Подразделение
		|			ИНАЧЕ
		|				ЕСТЬNULL(Т.Склад.Подразделение,
		|					ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		КОНЕЦ КАК Справочник.СтруктураПредприятия).*                                   КАК Подразделение,
		|	(ЕСТЬNULL(СпрСпособ.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)).*              КАК ИсточникОбеспечения}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Необеспеченные строки заказов работ на отгрузку
		|ВЫБРАТЬ
		|	Т.Номенклатура                       КАК Номенклатура,
		|	Т.Характеристика                     КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
		|	Т.Подразделение                      КАК ПодразделениеПолучатель,
		|	Т.Назначение                         КАК Назначение,
		|	Т.Регистратор                        КАК Заказ,
		|	Т.Период                             КАК ДатаОтгрузки,
		|
		|	Т.КОбеспечению                       КАК Количество,
		|
		|	СпрСпособ.Ссылка                     КАК СпособОбеспечения
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказовРаботами КАК Т
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОстаткиРабот КАК Остатки
		|		ПО Т.Номенклатура   = Остатки.Номенклатура
		|		 И Т.Характеристика = Остатки.Характеристика
		|		 И Т.Подразделение  = Остатки.ПодразделениеПолучатель
		|		 И Т.Назначение     = Остатки.Назначение
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспеченияРабот
		|
		|ГДЕ
		|	Т.Активность
		|	И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Т.КОбеспечению > 0
		|
		|//отборы компоновщика
		|{ГДЕ
		|	(ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*           КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) КАК ТипОбеспечения,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА СпрСпособ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				СпрСпособ.Подразделение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|		КОНЕЦ КАК Справочник.СтруктураПредприятия).*                                   КАК Подразделение,
		|	(ЕСТЬNULL(СпрСпособ.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)).*              КАК ИсточникОбеспечения}
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтФорматыСкладов;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Номенклатура      КАК Номенклатура,
		|	Т.Характеристика    КАК Характеристика,
		|	Т.Склад             КАК Склад,
		|	Т.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
		|	Т.Назначение        КАК Назначение,
		|	Т.Заказ             КАК Заказ,
		|	Т.ДатаОтгрузки      КАК ДатаОтгрузки,
		|
		|	Т.Количество        КАК Количество,
		|
		|	Т.СпособОбеспечения КАК СпособОбеспечения
		|{ВЫБРАТЬ
		|	Номенклатура.*      КАК Номенклатура,
		|	Характеристика.*    КАК Характеристика,
		|	Склад.*             КАК Склад,
		|	ПодразделениеПолучатель.* КАК ПодразделениеПолучатель,
		|	Назначение.*        КАК Назначение,
		|	Заказ.*             КАК Заказ,
		|	ДатаОтгрузки        КАК ДатаОтгрузки,
		|	Количество          КАК Количество,
		|	СпособОбеспечения.* КАК СпособОбеспечения}
		|ИЗ
		|	ВтТовары КАК Т";
	
	ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
		ТекстЗапроса, "ПодстановкаОсновногоСпособаОбеспеченияРабот", "Т.Номенклатура,Т.Характеристика,(ВЫРАЗИТЬ(NULL КАК Справочник.Склады))");
		
	ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
		ТекстЗапроса, "ПодстановкаОсновногоСпособаОбеспечения");
		
	Возврат ТекстЗапроса;

КонецФункции

Функция ВременнаяТаблицаСпособовОбеспечения()

	ТекстЗапроса =
		//Отбор номенклатуры сегмента.
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураСегмента.Номенклатура    КАК Номенклатура,
		|	НоменклатураСегмента.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ ОтборПоСегментам
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		{ГДЕ
		|			НоменклатураСегмента.Номенклатура.*    КАК Номенклатура,
		|			НоменклатураСегмента.Характеристика.*  КАК Характеристика,
		|			НоменклатураСегмента.Сегмент.*         КАК СегментНоменклатуры}
		|ГДЕ
		|	&ИспользуетсяОтборПоСегментуНоменклатуры
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//Необеспеченные работы по заказам на отгрузку
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад
		|
		|ПОМЕСТИТЬ ВтОстаткиРабот
		|ИЗ(
		|	ВЫБРАТЬ
		|		Т.Номенклатура   КАК Номенклатура,
		|		Т.Характеристика КАК Характеристика,
		|		Т.Назначение     КАК Назначение,
		|		Т.Подразделение  КАК Подразделение,
		|		Т.КОбеспечениюОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
		|			{Номенклатура.* КАК Номенклатура, Характеристика.* КАК Характеристика,
		|				Подразделение.* КАК ПодразделениеПолучатель, Назначение.* КАК Назначение}
		|			{(Номенклатура, Характеристика) В(
		|				ВЫБРАТЬ
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика
		|				ИЗ
		|					ОтборПоСегментам КАК ТаблицаОтбора
		|				ГДЕ
		|				&ИспользуетсяОтборПоСегментуНоменклатуры)}) КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Номенклатура   КАК Номенклатура,
		|		Т.Характеристика КАК Характеристика,
		|		Т.Назначение     КАК Назначение,
		|		Т.Подразделение  КАК Подразделение,
		|		- Т.Количество   КАК Количество
		|	ИЗ
		|		Документ.ЗаказПоставщику.Товары КАК Т
		|	ГДЕ
		|		Т.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|		И Т.Ссылка.Проведен
		|		И НЕ Т.Отменено
		|		И Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|		И Т.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	{ГДЕ
		|		Т.Номенклатура.*                             КАК Номенклатура,
		|		Т.Характеристика.*                           КАК Характеристика,
		|		Т.Назначение.*                               КАК Назначение,
		|		Т.Подразделение.*                            КАК ПодразделениеПолучатель}
		|	{ГДЕ (Т.Номенклатура, Т.Характеристика) В(
		|		ВЫБРАТЬ
		|			ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|			ТаблицаОтбора.Характеристика КАК Характеристика
		|		ИЗ
		|			ОтборПоСегментам КАК ТаблицаОтбора
		|		ГДЕ
		|			&ИспользуетсяОтборПоСегментуНоменклатуры)}) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Назначение, Т.Подразделение
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//Необеспеченные обособленные товары по заказам на отгрузку
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад
		|
		|ПОМЕСТИТЬ ВтОстаткиОбособленныхТоваров
		|ИЗ(
		|	ВЫБРАТЬ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	Т.Назначение     КАК Назначение,
		|	Т.КЗаказуОстаток КАК Количество
		|
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|			{Номенклатура.* КАК Номенклатура, Характеристика.* КАК Характеристика,
		|				Склад.* КАК Склад, Назначение.* КАК Назначение}
		|			{(Номенклатура, Характеристика) В(
		|				ВЫБРАТЬ
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика
		|				ИЗ
		|					ОтборПоСегментам КАК ТаблицаОтбора
		|				ГДЕ
		|					&ИспользуетсяОтборПоСегментуНоменклатуры)}) КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Номенклатура   КАК Номенклатура,
		|		Т.Характеристика КАК Характеристика,
		|		Т.Склад          КАК Склад,
		|		Т.Назначение     КАК Назначение,
		|		- Т.Количество   КАК Количество
		|	ИЗ
		|		Документ.ЗаказПоставщику.Товары КАК Т
		|	ГДЕ
		|		Т.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|		И Т.Ссылка.Проведен
		|		И НЕ Т.Отменено
		|		И Т.Номенклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		И Т.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	{ГДЕ
		|		Т.Номенклатура.*                             КАК Номенклатура,
		|		Т.Характеристика.*                           КАК Характеристика,
		|		Т.Назначение.*                               КАК Назначение,
		|		Т.Склад.*                                    КАК Склад}
		|	{ГДЕ (Т.Номенклатура, Т.Характеристика) В(
		|		ВЫБРАТЬ
		|			ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|			ТаблицаОтбора.Характеристика КАК Характеристика
		|		ИЗ
		|			ОтборПоСегментам КАК ТаблицаОтбора
		|		ГДЕ
		|			&ИспользуетсяОтборПоСегментуНоменклатуры)}) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад, Т.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаФорматыСкладов(Ложь)
		+ РегистрыСведений.ТоварныеОграничения.ВременнаяТаблицаТоварыПоддерживаемогоЗапаса()
		+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|//%Ассортимент
		|	СпрСпособ.Ссылка                     КАК СпособОбеспечения
		|ПОМЕСТИТЬ СпособыОбеспечения
		|ИЗ
		//Способы обеспечения товаров, для которых поддерживается запас.
		|	ВтТоварыПоддерживаемогоЗапаса КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|ГДЕ
		|	Т.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)
		|	И (&ИспользоватьХарактеристикиНоменклатуры
		|		ИЛИ Т.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|	И &УсловиеДоступаПоТипуОбеспечения
		|
		|//отборы компоновщика
		|{ГДЕ
		|	ВЫРАЗИТЬ(NULL КАК Справочник.Назначения).*           КАК Назначение,
		|	ВЫРАЗИТЬ(NULL КАК Справочник.СтруктураПредприятия).* КАК ПодразделениеПолучатель}
		|
		|{ГДЕ
		|	(ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*           КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) КАК ТипОбеспечения,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА СпрСпособ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				СпрСпособ.Подразделение
		|			ИНАЧЕ
		|				ЕСТЬNULL(Т.Склад.Подразделение,
		|					ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		КОНЕЦ КАК Справочник.СтруктураПредприятия).*                                   КАК Подразделение,
		|	(ЕСТЬNULL(СпрСпособ.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)).*              КАК ИсточникОбеспечения}
		|
		|ОБЪЕДИНИТЬ
		|
		//Способы обеспечения для товаров из заказов на отгрузку с вариантом обеспечения "Требуется"
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|//%Ассортимент
		|	МАКСИМУМ(СпрСпособ.Ссылка) КАК СпособОбеспечения
		|
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|
		|ГДЕ
		|	Т.Активность
		|	И Т.КоличествоНеОбеспечено <> 0
		|	И &УсловиеДоступаПоТипуОбеспечения
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИМЕЮЩИЕ
		|	СУММА(Т.КоличествоНеОбеспечено) > 0
		|
		|//отборы компоновщика
		|{ГДЕ
		|	Т.Номенклатура.*                             КАК Номенклатура,
		|	Т.Характеристика.*                           КАК Характеристика,
		|	Т.Назначение.*                               КАК Назначение,
		|	Т.Склад.*                                    КАК Склад}
		|
		|{ГДЕ (Т.Номенклатура, Т.Характеристика) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика
		|	ИЗ
		|		ОтборПоСегментам КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборПоСегментуНоменклатуры)}
		|
		|{ГДЕ
		|	(ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*           КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) КАК ТипОбеспечения,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА СпрСпособ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				СпрСпособ.Подразделение
		|			ИНАЧЕ
		|				ЕСТЬNULL(Т.Склад.Подразделение,
		|					ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		КОНЕЦ КАК Справочник.СтруктураПредприятия).*                                   КАК Подразделение,
		|	(ЕСТЬNULL(СпрСпособ.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)).*              КАК ИсточникОбеспечения}
		|
		|ОБЪЕДИНИТЬ
		|
		//Способы обеспечения для работ из заказов на отгрузку
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|//%АссортиментРаботы
		|	СпрСпособ.Ссылка                     КАК СпособОбеспечения
		|
		|ИЗ
		|	ВтОстаткиРабот КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|ГДЕ
		|	&УсловиеДоступаПоТипуОбеспечения
		|//отборы компоновщика
		|{ГДЕ
		|	(ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*           КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) КАК ТипОбеспечения,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА СпрСпособ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				СпрСпособ.Подразделение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|		КОНЕЦ КАК Справочник.СтруктураПредприятия).*                                   КАК Подразделение,
		|	(ЕСТЬNULL(СпрСпособ.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)).*              КАК ИсточникОбеспечения}
		|
		|ОБЪЕДИНИТЬ
		|
		//Способы обеспечения для товаров из обособленных заказов на отгрузку
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|//%Ассортимент
		|	СпрСпособ.Ссылка                     КАК СпособОбеспечения
		|
		|ИЗ
		|	ВтОстаткиОбособленныхТоваров КАК Т
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|
		|ГДЕ
		|	&УсловиеДоступаПоТипуОбеспечения
		|//отборы компоновщика
		|{ГДЕ
		|	(ЕСТЬNULL(СпрСпособ.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*           КАК СпособОбеспечения,
		|	ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) КАК ТипОбеспечения,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА СпрСпособ.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) ТОГДА
		|				СпрСпособ.Подразделение
		|			ИНАЧЕ
		|				ЕСТЬNULL(Т.Склад.Подразделение,
		|					ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|		КОНЕЦ КАК Справочник.СтруктураПредприятия).*                                   КАК Подразделение,
		|	(ЕСТЬNULL(СпрСпособ.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)).*              КАК ИсточникОбеспечения}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СпособОбеспечения
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|";
		
	ДоступныеТипыОбеспеченияПоПравам = ДоступныеТипыОбеспеченияПоПравам();
	ТекстУсловияДоступаПоТипуОбеспечения = ?(ДоступныеТипыОбеспеченияПоПравам = Неопределено,
		"ИСТИНА",
		"ЕСТЬNULL(СпрСпособ.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)) В (&ДоступныеТипыОбеспечения)");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДоступаПоТипуОбеспечения", ТекстУсловияДоступаПоТипуОбеспечения);
		
	ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
		ТекстЗапроса, "ПодстановкаОсновногоСпособаОбеспечения");
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Если ИспользоватьАссортимент Тогда
		//Если используется ассортимент, то дополнительно необходимо получать номенклатуру и склад,
		//для последующей проверки разрешения на закупки.

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%АссортиментРаботы",
			"	Т.Номенклатура КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%Ассортимент",
			"	Т.Номенклатура КАК Номенклатура,
			|	Т.Склад КАК Склад,");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ СпособыОбеспечения", "ПОМЕСТИТЬ ТоварыИСпособыОбеспечения");

		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.СпособОбеспечения КАК Ссылка
			|ПОМЕСТИТЬ ВтСпособыОбеспечения
			|ИЗ
			|	ТоварыИСпособыОбеспечения КАК Т
			|;
			|
			|/////////////////////////////////
			|";

		ТекстЗапроса = ТекстЗапроса + Справочники.СпособыОбеспеченияПотребностей.ВременнаяТаблицаДатПоставок();

		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.СпособОбеспечения КАК СпособОбеспечения
			|ПОМЕСТИТЬ СпособыОбеспечения
			|ИЗ
			|	ТоварыИСпособыОбеспечения КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияДатыПоставок КАК ТаблицаСпособовОбеспечения
			|		ПО Т.СпособОбеспечения = ТаблицаСпособовОбеспечения.Ссылка
			|//%Ассортимент
			|;
			|
			|/////////////////////////////////
			|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%Ассортимент", ТекстУсловияАссортимент());

	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%АссортиментРаботы", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%Ассортимент", "");
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.СпособОбеспечения КАК СпособОбеспечения
		|{ВЫБРАТЬ
		|	СпособОбеспечения.* КАК СпособОбеспечения}
		|ИЗ
		|	СпособыОбеспечения КАК Т";

Возврат ТекстЗапроса;

КонецФункции

Функция ДоступныеТипыОбеспеченияПоПравам()
	
	Результат = Новый Массив();
	ЕстьОграничения = Ложь;
	ЕстьДоступПокупка = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказПоставщику);
	Если ЕстьДоступПокупка Тогда
		Результат.Добавить(Перечисления.ТипыОбеспечения.Покупка);
	Иначе
		ЕстьОграничения = Истина;
	КонецЕсли;
	
	ЕстьДоступПеремещение = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПеремещение);
	Если ЕстьДоступПеремещение Тогда
		Результат.Добавить(Перечисления.ТипыОбеспечения.Перемещение);
	Иначе
		ЕстьОграничения = Истина;
	КонецЕсли;
	
	ЕстьДоступСборка = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаСборку);
	Если ЕстьДоступСборка Тогда
		Результат.Добавить(Перечисления.ТипыОбеспечения.СборкаРазборка);
	Иначе
		ЕстьОграничения = Истина;
	КонецЕсли;

	
	
	Если ЕстьОграничения Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВременнаяТаблицаИнтерваловРаботыСкладов()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР КОГДА Т.Склад.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|				Т.Склад.Календарь
		|			ИНАЧЕ
		|				ОсновнойКалендарь.Значение
		|		КОНЕЦ                                        КАК Календарь,
		|	ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки КАК ДатаВозможнойПоставки,
		|	ТаблицаСпособовОбеспечения.ПлановаяДатаПоставки  КАК ПлановаяДатаПоставки,
		|	ТаблицаСпособовОбеспечения.ДатаСледующейПоставки КАК ДатаСледующейПоставки,
		|	ТаблицаСпособовОбеспечения.ОбеспечиваемыйПериод  КАК ОбеспечиваемыйПериод
		|
		|ПОМЕСТИТЬ ВтКалендариИДаты
		|ИЗ
		|	ВтСкладыИСпособыОбеспечения КАК Т
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарь
		|	ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспеченияДатыПоставок КАК ТаблицаСпособовОбеспечения
		|	ПО Т.СпособОбеспечения = ТаблицаСпособовОбеспечения.Ссылка
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Календарь               КАК Календарь,
		|	&НачалоТекущегоДня        КАК Дата1,
		|	Т.ДатаВозможнойПоставки   КАК Дата2
		|
		|ПОМЕСТИТЬ ВтПараметрыПоиска
		|ИЗ
		|	ВтКалендариИДаты КАК Т
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Т.Календарь               КАК Календарь,
		|	&НачалоТекущегоДня        КАК Дата1,
		|	Т.ПлановаяДатаПоставки    КАК Дата2
		|ИЗ
		|	ВтКалендариИДаты КАК Т
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Т.Календарь               КАК Календарь,
		|	Т.ПлановаяДатаПоставки    КАК Дата1,
		|	Т.ДатаСледующейПоставки   КАК Дата2
		|ИЗ
		|	ВтКалендариИДаты КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Календарь,
		|	Дата1, Дата2
		|;
		|
		|/////////////////////////////////////////////////////////
		|";

	ТекстЗапроса = ТекстЗапроса + ОбеспечениеСервер.ТекстЗапросаКоличестваДнейМеждуДатамиГрафика();

	Возврат ТекстЗапроса;

КонецФункции

Функция ВременнаяТаблицаГраницыОбеспечиваемогоПериода()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Календарь               КАК Календарь,
		|	Т.ОбеспечиваемыйПериод    КАК ЧислоДней,
		|	Т.ДатаВозможнойПоставки   КАК ДатаОтсчета
		|
		|ПОМЕСТИТЬ ВтПараметрыПоиска
		|ИЗ
		|	ВтКалендариИДаты КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Календарь,
		|	ЧислоДней, ДатаОтсчета
		|;
		|
		|/////////////////////////////////////////////////////////
		|";

	ТекстЗапроса = ТекстЗапроса + ОбеспечениеСервер.ТекстЗапросаДатГрафика();

	Возврат ТекстЗапроса;

КонецФункции

Функция ВременнаяТаблицаДанныеЗаполненияЗаказаПоставщику()

	ТекстЗапроса =
		//1) Дата последнего заказа для позиции, требующей заполнения источника обесепечения.
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|
		|	МАКСИМУМ(Товары.Ссылка.Дата) КАК ДатаПоследнегоЗаказа
		|
		|ПОМЕСТИТЬ ВтДатаПоследнегоЗаказа
		|ИЗ
		|	ВтТовары КАК Т
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
		|		ПО Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад          = Товары.Склад
		|ГДЕ
		|	Т.СпособОбеспечения ЕСТЬ NULL
		|	ИЛИ (Т.СпособОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)
		|			И Т.СпособОбеспечения.ИсточникОбеспеченияПотребностей В(
		|				НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))
		|	И Товары.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//2 Дата предпоследнего заказа.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	МАКСИМУМ(Т.ДатаПоследнегоЗаказа)  КАК ДатаПоследнегоЗаказа,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.ДатаПоследнегоЗаказа = Товары.Ссылка.Дата ТОГДА
		|				NULL
		|			ИНАЧЕ Товары.Ссылка.Дата
		|		КОНЕЦ)                        КАК ДатаПредпоследнегоЗаказа
		|	
		|ПОМЕСТИТЬ ВтДатаПредпоследнегоЗаказа
		|ИЗ
		|	ВтДатаПоследнегоЗаказа КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
		|		ПО Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад         = Товары.Склад
		|ГДЕ
		|	Товары.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//3) Дата третьего заказа.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	МАКСИМУМ(Т.ДатаПоследнегоЗаказа)     КАК ДатаПоследнегоЗаказа,
		|	МАКСИМУМ(Т.ДатаПредпоследнегоЗаказа) КАК ДатаПредпоследнегоЗаказа,
		|	МАКСИМУМ(ВЫБОР КОГДА Товары.Ссылка.Дата В (Т.ДатаПоследнегоЗаказа, Т.ДатаПредпоследнегоЗаказа) ТОГДА
		|				NULL
		|			ИНАЧЕ Товары.Ссылка.Дата
		|		КОНЕЦ)                           КАК ДатаТретьегоЗаказа
		|	
		|ПОМЕСТИТЬ ВтДатаТретьегоЗаказа
		|ИЗ
		|	ВтДатаПредпоследнегоЗаказа КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
		|		ПО Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад         = Товары.Склад
		|ГДЕ
		|	Товары.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//4) Последние три заказа по позиции.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Т.ДатаПоследнегоЗаказа = Товары.Ссылка.Дата ТОГДА
		|				Товары.Ссылка
		|			ИНАЧЕ NULL
		|		КОНЕЦ)                           КАК Заказ1,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.ДатаПредпоследнегоЗаказа = Товары.Ссылка.Дата ТОГДА
		|				Товары.Ссылка
		|			ИНАЧЕ NULL
		|		КОНЕЦ)                           КАК Заказ2,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.ДатаТретьегоЗаказа = Товары.Ссылка.Дата ТОГДА
		|				Товары.Ссылка
		|			ИНАЧЕ NULL
		|		КОНЕЦ)                           КАК Заказ3
		|
		|ПОМЕСТИТЬ ВтТриПоследнихЗаказа
		|ИЗ
		|	ВтДатаТретьегоЗаказа КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК Товары
		|		ПО Т.Номенклатура   = Товары.Номенклатура
		|		 И Т.Характеристика = Товары.Характеристика
		|		 И Т.Склад         = Товары.Склад
		|		 И Товары.Ссылка.Дата В (Т.ДатаПоследнегоЗаказа, Т.ДатаПредпоследнегоЗаказа, Т.ДатаТретьегоЗаказа)
		|ГДЕ
		|	Товары.Ссылка.Проведен
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ1, Заказ2, Заказ3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//5) Данные для заполнения источника обеспечения и условий закупки.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|
		|	ВЫБОР КОГДА Т.Заказ2.Партнер ЕСТЬ NULL ТОГДА
		|				Т.Заказ1.Партнер
		|			КОГДА Т.Заказ3.Партнер ЕСТЬ NULL ТОГДА
		|				ВЫБОР КОГДА Т.Заказ1.Партнер = Т.Заказ2.Партнер ТОГДА
		|							Т.Заказ1.Партнер
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР КОГДА Т.Заказ1.Партнер = Т.Заказ2.Партнер ИЛИ Т.Заказ1.Партнер = Т.Заказ3.Партнер ТОГДА
		|							Т.Заказ1.Партнер
		|						КОГДА Т.Заказ2.Партнер = Т.Заказ3.Партнер ТОГДА
		|							Т.Заказ2.Партнер
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|					КОНЕЦ
		|		КОНЕЦ       КАК Партнер,
		|
		|	ВЫБОР КОГДА Т.Заказ2.Партнер ЕСТЬ NULL ТОГДА
		|				Т.Заказ1.Соглашение
		|			КОГДА Т.Заказ3.Партнер ЕСТЬ NULL ТОГДА
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ИЛИ Т.Заказ1.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение
		|						КОГДА Т.Заказ2.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ2.Соглашение
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|		КОНЕЦ       КАК Соглашение,
		|
		|	ВЫБОР КОГДА Т.Заказ2.Партнер ЕСТЬ NULL ТОГДА
		|				Т.Заказ1.Соглашение.Валюта
		|			КОГДА Т.Заказ3.Партнер ЕСТЬ NULL ТОГДА
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение.Валюта
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ИЛИ Т.Заказ1.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение.Валюта
		|						КОГДА Т.Заказ2.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ2.Соглашение.Валюта
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|		КОНЕЦ       КАК Валюта,
		|
		|	ВЫРАЗИТЬ(ВЫБОР КОГДА Т.Заказ2.Партнер ЕСТЬ NULL ТОГДА
		|				Т.Заказ1.Соглашение
		|			КОГДА Т.Заказ3.Партнер ЕСТЬ NULL ТОГДА
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР КОГДА Т.Заказ1.Соглашение = Т.Заказ2.Соглашение ИЛИ Т.Заказ1.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ1.Соглашение
		|						КОГДА Т.Заказ2.Соглашение = Т.Заказ3.Соглашение ТОГДА
		|							Т.Заказ2.Соглашение
		|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|					КОНЕЦ
		|		КОНЕЦ КАК Справочник.СоглашенияСПоставщиками).ВидЦеныПоставщика КАК ВидЦеныПоставщика
		|
		|ПОМЕСТИТЬ ВтДанныеЗаполненияЗаказаПоставщику
		|ИЗ
		|	ВтТриПоследнихЗаказа КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//6) Цены номенклатуры.
		|ВЫБРАТЬ
		|		ЦеныПоставщиков.Номенклатура           КАК Номенклатура,
		|		ЦеныПоставщиков.Характеристика         КАК Характеристика,
		|		ЦеныПоставщиков.Партнер                КАК Партнер,
		|		ЦеныПоставщиков.ВидЦеныПоставщика      КАК ВидЦеныПоставщика,
		|		ЦеныПоставщиков.Цена                   КАК Цена,
		|		ЦеныПоставщиков.Упаковка               КАК Упаковка,
		|		ЦеныПоставщиков.Валюта                 КАК Валюта
		|ПОМЕСТИТЬ ЦеныПоставщиков
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|		КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ),
		|		(Номенклатура, Характеристика, Партнер, ВидЦеныПоставщика)
		|			В (
		|				ВЫБРАТЬ
		|					ТаблицаОтбора.Номенклатура                                      КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика                                    КАК Характеристика,
		|					ТаблицаОтбора.СпособОбеспечения.ИсточникОбеспеченияПотребностей КАК Партнер,
		|					ТаблицаОтбора.СпособОбеспечения.ВидЦеныПоставщика               КАК ВидЦеныПоставщика
		|				ИЗ
		|					ВтТовары КАК ТаблицаОтбора
		|
		|				ОБЪЕДИНИТЬ ВСЕ
		|
		|				ВЫБРАТЬ
		|					Т.Номенклатура           КАК Номенклатура,
		|					Т.Характеристика         КАК Характеристика,
		|					Т.Партнер                КАК Партнер,
		|					Т.ВидЦеныПоставщика      КАК ВидЦеныПоставщика
		|				ИЗ
		|					ВтДанныеЗаполненияЗаказаПоставщику КАК Т)
		|	) КАК ЦеныПоставщиков
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Партнер,
		|	ВидЦеныПоставщика
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//7) Курсы валют.
		|ВЫБРАТЬ
		|		КурсыВалют.Валюта                      КАК Валюта,
		|		КурсыВалют.Курс * КурсыВалют.Кратность КАК Коэффициент
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ), ) КАК КурсыВалют
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ВременнаяТаблицаСвободныеОстатки()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.Склад                   КАК Склад,
		|	Товары.Номенклатура            КАК Номенклатура,
		|	Товары.Характеристика          КАК Характеристика,
		|	Товары.ВНаличииОстаток         КАК ВНаличии,
		|	Товары.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказ,
		|	Товары.ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада
		|
		|ПОМЕСТИТЬ ВтСвободныеОстатки
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(
		|			,
		|			(Склад, Номенклатура, Характеристика) В(
		|				ВЫБРАТЬ
		|					ТаблицаОтбора.Склад          КАК Склад,
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика
		|				ИЗ
		|					ВтТовары КАК ТаблицаОтбора)) КАК Товары
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад, Номенклатура, Характеристика
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ВременнаяТаблицаЗаказыКПоступлениюИОтгрузке()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Номенклатура            КАК Номенклатура,
		|	Т.Характеристика          КАК Характеристика,
		|	Т.Склад                   КАК Склад,
		|	СУММА(Т.ЗаказыКПоступлению) КАК ЗаказыКПоступлению,
		|	СУММА(Т.ЗаказыКОтгрузке)    КАК ЗаказыКОтгрузке
		|
		|ПОМЕСТИТЬ ВтЗаказы
		|ИЗ(
		|	ВЫБРАТЬ
		|		Т.Номенклатура            КАК Номенклатура,
		|		Т.Характеристика          КАК Характеристика,
		|		Т.Склад                   КАК Склад,
		|		Т.КоличествоИзЗаказов     КАК ЗаказыКПоступлению,
		|		0                         КАК ЗаказыКОтгрузке
		|	
		|	ИЗ
		|		РегистрНакопления.ГрафикПоступленияТоваров КАК Т
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ТаблицаОтбора
		|			ПО Т.Номенклатура   = ТаблицаОтбора.Номенклатура
		|			 И Т.Характеристика = ТаблицаОтбора.Характеристика
		|			 И Т.Склад          = ТаблицаОтбора.Склад
		|	
		|	ГДЕ
		|		Т.Активность
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Номенклатура            КАК Номенклатура,
		|		Т.Характеристика          КАК Характеристика,
		|		Т.Склад                   КАК Склад,
		|		0                         КАК ЗаказыКПоступлению,
		|		Т.КоличествоИзЗаказов     КАК ЗаказыКОтгрузке
		|	
		|	ИЗ
		|		РегистрНакопления.ГрафикОтгрузкиТоваров КАК Т
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ТаблицаОтбора
		|			ПО Т.Номенклатура   = ТаблицаОтбора.Номенклатура
		|			 И Т.Характеристика = ТаблицаОтбора.Характеристика
		|			 И Т.Склад          = ТаблицаОтбора.Склад
		|	
		|	ГДЕ
		|		Т.Активность
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Номенклатура   КАК Номенклатура,
		|		Т.Характеристика КАК Характеристика,
		|		Т.Склад          КАК Склад,
		|		Т.Количество     КАК ЗаказыКПоступлению,
		|		0                КАК ЗаказыКОтгрузке
		|	ИЗ
		|		Документ.ЗаказПоставщику.Товары КАК Т
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТовары КАК ТаблицаОтбора
		|			ПО Т.Номенклатура   = ТаблицаОтбора.Номенклатура
		|			 И Т.Характеристика = ТаблицаОтбора.Характеристика
		|			 И Т.Склад          = ТаблицаОтбора.Склад
		|	ГДЕ
		|		Т.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|		И Т.Ссылка.Проведен
		|		И НЕ Т.Отменено
		|		И Т.Номенклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		И Т.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад, Номенклатура, Характеристика
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстПолейУсловияЗакупок()

	Текст =
		"	ЕСТЬNULL(ДанныеЗаполнения.ВидЦеныПоставщика, Т.СпособОбеспечения.ВидЦеныПоставщика) КАК ВидЦены,
		|	ЕСТЬNULL(ДанныеЗаполнения.Валюта, Т.СпособОбеспечения.Соглашение.Валюта)            КАК ВалютаСоглашения,
		|
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеЗаполнения.Соглашение.НалогообложениеНДС, Т.СпособОбеспечения.Соглашение.НалогообложениеНДС)
		|			= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|				И НЕ ЕСТЬNULL(ДанныеЗаполнения.Соглашение.ЦенаВключаетНДС, Т.СпособОбеспечения.Соглашение.ЦенаВключаетНДС) ТОГДА
		|
		|				ВЫБОР КОГДА Т.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7) ТОГДА
		|							1.07
        |				        КОГДА Т.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14) ТОГДА
        |							1.14
		|						КОГДА Т.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА
		|							1.20
		|						ИНАЧЕ
		|							1
		|					КОНЕЦ
		|			ИНАЧЕ
		|				1
		|		КОНЕЦ
		|	* ЦеныПоставщиков.Цена * КурсыВалют.Коэффициент / КурсВалютаСоглашения.Коэффициент
		|	/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)                                          КАК ЦенаВВалютеСоглашения,
		|
		|	ВЫБОР КОГДА ЕСТЬNULL(ДанныеЗаполнения.Соглашение.НалогообложениеНДС, Т.СпособОбеспечения.Соглашение.НалогообложениеНДС)
		|			= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|				И НЕ ЕСТЬNULL(ДанныеЗаполнения.Соглашение.ЦенаВключаетНДС, Т.СпособОбеспечения.Соглашение.ЦенаВключаетНДС) ТОГДА
		|
        |				ВЫБОР КОГДА Т.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7) ТОГДА
        |							1.07
        |				        КОГДА Т.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14) ТОГДА
        |							1.14
		|						КОГДА Т.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА
		|							1.20
		|						ИНАЧЕ
		|							1
		|					КОНЕЦ
		|			ИНАЧЕ
		|				1
		|		КОНЕЦ
		|	* ЦеныПоставщиков.Цена * КурсыВалют.Коэффициент / &КоэффициентВалютыУпрУчета
		|	/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)                                КАК ЦенаВВалютеУправленческогоУчета,
		|
		|	ВЫБОР КОГДА Т.СпособОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство) ТОГДА
		|			ИСТИНА
		|		КОГДА Т.СпособОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.СборкаРазборка) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ВЫБОР ЕСТЬNULL(Т.СпособОбеспечения.ИсточникОбеспеченияПотребностей, НЕОПРЕДЕЛЕНО)
		|					КОГДА НЕОПРЕДЕЛЕНО ТОГДА
		|						ЛОЖЬ
		|					КОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) ТОГДА
		|						ЛОЖЬ
		|					КОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
		|						ЛОЖЬ
		|					ИНАЧЕ
		|						ИСТИНА //источник обеспечения устанавливается в способе обеспечения потребностей
		|				КОНЕЦ
		|		КОНЕЦ                                                                          КАК ИсточникОбеспеченияТолькоПросмотр,
		|";
	Текст = СтрЗаменить(Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныПоставщиков.Упаковка",
			"ЦеныПоставщиков.Номенклатура"));
	
	Возврат Текст;

КонецФункции

Функция ТекстУсловияАссортимент()

	Текст =
		"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияФорматовМагазинов КАК ИсторияНастроек
		|		ПО Т.Склад = ИсторияНастроек.Склад
		|			И ИсторияНастроек.Период В(
		|				ВЫБРАТЬ
		|					МАКСИМУМ (История.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.ИсторияИзмененияФорматовМагазинов КАК История
		|				ГДЕ
		|					История.Склад = ИсторияНастроек.Склад
		|					И История.Период < ЕСТЬNULL(ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки, &НачалоТекущегоДня))
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
		|		ПО Т.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
		|		 И ЕСТЬNULL(ИсторияНастроек.КонтролироватьАссортимент, ЛОЖЬ)
		|		 И Ассортимент.Номенклатура = Т.Номенклатура
		|		 И Ассортимент.ОбъектПланирования = %ФорматМагазина%
		|		 И Ассортимент.РазрешеныЗакупки
		|		 И Ассортимент.Период В(
		|			ВЫБРАТЬ
		|					МАКСИМУМ (Ассорти.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.Ассортимент КАК Ассорти
		|				ГДЕ
		|					Ассорти.Номенклатура = Ассортимент.Номенклатура
		|					И Ассорти.ОбъектПланирования = Ассортимент.ОбъектПланирования
		|					И Ассорти.Период <= ЕСТЬNULL(ТаблицаСпособовОбеспечения.ДатаВозможнойПоставки, &НачалоТекущегоДня))
		|ГДЕ
		|	ЕСТЬNULL(Т.Склад.ТипСклада, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
		|		ИЛИ НЕ ЕСТЬNULL(ИсторияНастроек.КонтролироватьАссортимент, ЛОЖЬ)
		|		ИЛИ НЕ Ассортимент.Номенклатура ЕСТЬ NULL";

	ИспользоватьФорматыМагазинов = ПолучитьФункциональнуюОпцию("ИспользоватьФорматыМагазинов");
	ТекстФорматМагазина = ?(ИспользоватьФорматыМагазинов,
		"ЕСТЬNULL(ИсторияНастроек.ФорматМагазина, ЗНАЧЕНИЕ(Справочник.ФорматыМагазинов.ПустаяСсылка))",
		"Т.Склад");
	Текст = СтрЗаменить(Текст, "%ФорматМагазина%", ТекстФорматМагазина);

	Возврат Текст;

	

КонецФункции

Функция ТекстУсловияДанныеДляРасчетаОкругления()
	
	Возврат "		ЛЕВОЕ СОЕДИНЕНИЕ ВтИдентификаторыТаблицыИндексов КАК ВтИдентификаторыТаблицыИндексов
		|		ПО Т.Номенклатура = ВтИдентификаторыТаблицыИндексов.Номенклатура
		|		И Т.Характеристика = ВтИдентификаторыТаблицыИндексов.Характеристика
		|		И Т.Склад = ВтИдентификаторыТаблицыИндексов.Склад";
	
КонецФункции

Процедура ЗаписатьДокумент(ДокументОбъект, СообщенияОбОшибках)

	ОшибокНеОбнаружено = ДокументОбъект.ПроверитьЗаполнение();

	Если Не ОшибокНеОбнаружено Тогда

		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);

	Иначе //нет ошибок, проводим документ

		Попытка

			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);

		Исключение

			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗаписьЖурналаРегистрации(НСтр("ru='Обеспечение потребностей. Создание заказов';uk='Забезпечення потреб. Створення замовлень'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		КонецПопытки;

	КонецЕсли;

	Ошибки = ПолучитьСообщенияПользователю(Истина);
	Для Каждого Ошибка Из Ошибки Цикл

		Ошибка.КлючДанных = ДокументОбъект.Ссылка;
		СообщенияОбОшибках.Добавить(Ошибка);

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьОбеспечениеЗаказа(Заказ, ИндексыСтрок, ПереченьВариантов)

	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заказ);

	Документ = Заказ.ПолучитьОбъект();
	Попытка
		Документ.Заблокировать();
	Исключение
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru='Невозможно разместить заказ %1. Возможно документ редактируется другим пользователем.';uk='Неможливо розмістити замовлення %1. Можливо документ редагується іншим користувачем.'");
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст, Документ.Ссылка);
		Сообщение.Сообщить();
		ЗаписьЖурналаРегистрации(НСтр("ru='Обеспечение потребностей. Размещение в заказах.';uk='Забезпечення потреб. Розміщення в замовленнях.'"),
		УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	ПараметрыЗаполнения = МенеджерДокумента.ПараметрыВыбораОбеспечения(Документ.Статус);
	ТаблицаОбеспечения = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(
		Документ, ПереченьВариантов, ПараметрыЗаполнения, ИндексыСтрок);

	Если ТипЗнч(ТаблицаОбеспечения) = Тип("ТаблицаЗначений") Тогда
		
		МенеджерДокумента.ЗаполнитьВариантОбеспечения(Документ, Неопределено, "ИндексыСтрок", ТаблицаОбеспечения);
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru='Невозможно разместить заказ %1.';uk='Неможливо розмістити замовлення %1.'");
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст, Документ.Ссылка);
			Сообщение.Сообщить();
			ЗаписьЖурналаРегистрации(НСтр("ru='Обеспечение потребностей. Размещение в заказах.';uk='Забезпечення потреб. Розміщення в замовленнях.'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	Иначе
		
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru='Невозможно разместить заказ %1. Неверные данные об отгрузках / оформлении накладных по заказу.';uk='Неможливо розмістити замовлення %1. Неправильні дані про відвантаження / оформлення накладних по замовленню.'");
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст, Документ.Ссылка);
			Сообщение.Сообщить();
			ЗаписьЖурналаРегистрации(НСтр("ru='Обеспечение потребностей. Размещение в заказах.';uk='Забезпечення потреб. Розміщення в замовленнях.'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецЕсли;

КонецПроцедуры


Функция ЭтоЗаписьВедомогоРегистраСведений(Ссылка, Регистры)
	
	Для Каждого Элемент Из Регистры Цикл
		Если ТипЗнч(Ссылка) = Тип("РегистрСведенийКлючЗаписи." + Элемент.Имя) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НазначенияЗаказов(МассивЗаказов)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Назначения КАК Таблица
		|ГДЕ
		|	Таблица.Заказ В(&МассивЗаказов)";
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецЕсли

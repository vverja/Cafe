
#Область ПрограммныйИнтерфейс

// Устанавливает страницу доставки в зависимости от способа доставки
//
//	Параметры:
//		ЭлементыФормы - все элементы формы, в которой устанавливается страница доставки
//		СпособДоставки - способ доставки, в зависимости от которого выбирается страница доставки
//
Процедура УстановитьСтраницуДоставки(ЭлементыФормы, СпособДоставки, ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = Неопределено) Экспорт
	
	Если ЭлементыФормы.Найти("СтраницыПеревозчик") <> Неопределено Тогда
		Если СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика")
			Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу")
			Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада")
			Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи") Тогда
			ЭлементыФормы.СтраницыПеревозчик.ТекущаяСтраница = ЭлементыФормы.СтраницаПеревозчик;
		Иначе
			ЭлементыФормы.СтраницыПеревозчик.ТекущаяСтраница = ЭлементыФормы.СтраницаПеревозчикПусто;
		КонецЕсли;
	КонецЕсли;
	
	Если (СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки"))
	 И ЭлементыФормы.Найти("СтраницаДоставкаДоПолучателя") <> Неопределено Тогда
		ЭлементыФормы.СтраницыДоставки.ТекущаяСтраница = ЭлементыФормы.СтраницаДоставкаДоПолучателя;
		
	ИначеЕсли СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика")
	 И ЭлементыФормы.Найти("СтраницаДоставкаПеревозчиком") <> Неопределено Тогда
		ЭлементыФормы.СтраницыДоставки.ТекущаяСтраница = ЭлементыФормы.СтраницаДоставкаПеревозчиком;
		
	ИначеЕсли СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда
		Если ЭлементыФормы.Найти("СтраницаДоставкаПеревозчикомПоАдресу") <> Неопределено Тогда
			ЭлементыФормы.СтраницыДоставки.ТекущаяСтраница = ЭлементыФормы.СтраницаДоставкаПеревозчикомПоАдресу;
		ИначеЕсли ЭлементыФормы.Найти("СтраницаДоставкаПеревозчиком") <> Неопределено Тогда
			ЭлементыФормы.СтраницыДоставки.ТекущаяСтраница = ЭлементыФормы.СтраницаДоставкаПеревозчиком;
		КонецЕсли;
	
	ИначеЕсли СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя")		
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи")
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки") Тогда
		
		ЭлементыФормы.СтраницыДоставки.ТекущаяСтраница = ЭлементыФормы.СтраницаДоставкаНашимиСилами;
		Если СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи") Тогда
			ЭлементыФормы.СтраницыАдресПередачи.ТекущаяСтраница = ЭлементыФормы.СтраницаАдресПеревозчика;
		Иначе
			ЭлементыФормы.СтраницыАдресПередачи.ТекущаяСтраница = ЭлементыФормы.СтраницаАдресПоставщика;
		КонецЕсли;
		
	ИначеЕсли ЭлементыФормы.Найти("СтраницаСамовывоз") <> Неопределено Тогда
		
		ЭлементыФормы.СтраницыДоставки.ТекущаяСтраница = ЭлементыФормы.СтраницаСамовывоз;
		
	ИначеЕсли ЭлементыФормы.Найти("СтраницаДоставкаНеНашимиСилами") <> Неопределено Тогда
		
		ЭлементыФормы.СтраницыДоставки.ТекущаяСтраница = ЭлементыФормы.СтраницаДоставкаНеНашимиСилами;
		
	КонецЕсли;
	
	Если ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками = Неопределено
		Или ЭлементыФормы.Найти("СтраницаДоставка") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки")
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика")
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу")
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя")		
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи")
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки")
		Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи")
		Или ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
			И (СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада")
				Или СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика")) Тогда
		ЭлементыФормы.СтраницаДоставка.Картинка = БиблиотекаКартинок.Комментарий;
	Иначе
		ЭлементыФормы.СтраницаДоставка.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру реквизитов доставки, заполненную пустыми значениями
//
// Возвращаемое значение - структура реквизитов доставки с пустыми значениями полей
//
Функция ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект = Неопределено) Экспорт
	
	РеквизитыДоставки = Новый Структура;
	Если ЭтоРаспоряжениеНаДоставкуНаНашСклад(ДокОбъект) Тогда
		РеквизитыДоставки.Вставить("СпособДоставки", ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада"));
	ИначеЕсли ЭтоПоручениеЭкспедитору(ДокОбъект) Тогда
		РеквизитыДоставки.Вставить("СпособДоставки", ПредопределенноеЗначение("Перечисление.СпособыДоставки.ПоручениеЭкспедиторуСоСклада"));
	Иначе
		РеквизитыДоставки.Вставить("СпособДоставки",ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз"));
	КонецЕсли;
	РеквизитыДоставки.Вставить("ЗонаДоставки",ПредопределенноеЗначение("Справочник.ЗоныДоставки.ПустаяСсылка"));
	РеквизитыДоставки.Вставить("ВремяДоставкиС",Дата(1,1,1));
	РеквизитыДоставки.Вставить("ВремяДоставкиПо",Дата(1,1,1));
	РеквизитыДоставки.Вставить("ПеревозчикПартнер",ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	РеквизитыДоставки.Вставить("АдресДоставки","");
	РеквизитыДоставки.Вставить("АдресДоставкиПеревозчика","");
	РеквизитыДоставки.Вставить("АдресДоставкиЗначенияПолей","");
	РеквизитыДоставки.Вставить("АдресДоставкиПеревозчикаЗначенияПолей","");
	РеквизитыДоставки.Вставить("ДополнительнаяИнформацияПоДоставке","");
	РеквизитыДоставки.Вставить("ОсобыеУсловияПеревозки",Ложь);
	РеквизитыДоставки.Вставить("ОсобыеУсловияПеревозкиОписание","");
	
	Возврат РеквизитыДоставки;
	
КонецФункции

// Ищет в списке значений элемент-структуру, значение свойства которой равно искомому
//		Если такое значение не найдено, возвращается Неопределено
//	Параметры:
//		Список - список значений, в котором выполняется поиск
//		ИмяПоляСтруктуры - имя искомого свойства структуры
//		ИскомоеЗначение - значение, которое требуется найти
//
// Возвращаемое значение - структура, значение свойства которой совпадает с искомым,
//		если таких несколько, возвращается первая найденная
//
Функция НайтиВСпискеСтруктур(Список, ИмяПоляСтруктуры, ИскомоеЗначение) Экспорт
	Перем НайденноеЗначение;
	Для Каждого Элемент Из Список Цикл
		Элемент.Значение.Свойство(ИмяПоляСтруктуры, НайденноеЗначение);
		Если НайденноеЗначение = ИскомоеЗначение Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Очищает списки выбора адресов доставки и реквизиты доставки
//	Параметры:
//		ЭлементыФормы - все элементы формы, в которой очищаются списки выбора адресов доставки
//		ДокОбъект - объект, в котором очищаются реквизиты доставки
//
Процедура ОчиститьРеквизитыДоставки(ЭлементыФормы, ДокОбъект) Экспорт
	ОчиститьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы);
	Если ЭлементыФормы.Найти("АдресДоставкиПеревозчика") <> Неопределено Тогда
		ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора.Очистить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДокОбъект, ПолучитьПустуюСтруктуруРеквизитовДоставки(ДокОбъект));
	Если ЭлементыФормы.Найти("СтраницыДоставки") <> Неопределено Тогда
		УстановитьСтраницуДоставки(ЭлементыФормы, ДокОбъект.СпособДоставки);
	КонецЕсли;
КонецПроцедуры

// Очищает списки выбора адресов доставки
//	Параметры:
//		ЭлементыФормы - все элементы формы, в которой очищаются списки выбора адресов доставки
//
Процедура ОчиститьСпискиВыбораАдресовПолучателяОтправителя(ЭлементыФормы) Экспорт
	
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя") <> Неопределено Тогда
		ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора.Очистить();
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя1") <> Неопределено Тогда
		ЭлементыФормы.АдресДоставкиПолучателя1.СписокВыбора.Очистить();
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресДоставкиПолучателя2") <> Неопределено Тогда
		ЭлементыФормы.АдресДоставкиПолучателя2.СписокВыбора.Очистить();
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		ЭлементыФормы.АдресПоставщика.СписокВыбора.Очистить();
	КонецЕсли;
	Если ЭлементыФормы.Найти("АдресПункта") <> Неопределено Тогда
		ЭлементыФормы.АдресПункта.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список значений. Преобразует в список значений строку полей, разделенных символом перевода строки
//
// Параметры:
//	СтрокаПолей - строка, в которой каждое поле начинается с новой строки.
//
// Возвращаемое значение - Список значений - список значений полей.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаПолей) Тогда
		Возврат СтрокаПолей; // строка в новом формате, раскладывать в список не нужно
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	ПоследнийЭлемент = Неопределено;
	
	Для Итерация = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		ПолученнаяСтрока = СтрПолучитьСтроку(СтрокаПолей, Итерация);
		Если Лев(ПолученнаяСтрока, 1) = Символы.Таб Тогда
			Если ПоследнийЭлемент <> Неопределено Тогда
				ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(ПолученнаяСтрока, 2);
			КонецЕсли;
		Иначе
			ПозицияСимвола = СтрНайти(ПолученнаяСтрока, "=");
			Если ПозицияСимвола <> 0 Тогда
				ПоследнийЭлемент = Результат.Добавить(Сред(ПолученнаяСтрока, ПозицияСимвола + 1), Лев(ПолученнаяСтрока, ПозицияСимвола - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает наименования документов, которые могут являться распоряжениями на доставку.
//
// Возвращаемое значение - Массив - значения структура с полями:
//		Имя - Строка - имя документа,
//		ЭтоЗаказ - Булево - признак документа, который является заказом,
//		ИмяПоляСклад - Строка - имя поля склад, если оно отличается от "Склад".
//
Функция ОписанияРаспоряженийНаДоставку() Экспорт
	
	Описания = Новый Массив;
	
	
	
	Описание = ОписаниеРаспоряженияНаДоставку();
	Описание.Имя               = "ЗаказКлиента";
	Описание.ЭтоЗаказ          = Истина;
	Описание.ИмяПоляСклад      = "ТЧ.Склад";
	Описание.ИмяПоляНазначение = "Шапка.Назначение";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеРаспоряженияНаДоставку();
	Описание.Имя               = "ЗаявкаНаВозвратТоваровОтКлиента";
	Описание.ЭтоЗаказ          = Истина;
	Описание.ИмяТЧ             = "ЗаменяющиеТовары";
	Описание.ИмяПоляНазначение = "Шапка.Назначение";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеРаспоряженияНаДоставку();
	Описание.Имя               = "ЗаказНаПеремещение";
	Описание.ЭтоЗаказ          = Истина;
	Описание.ИмяПоляСклад      = "Шапка.СкладОтправитель";
	Описание.ИмяПоляПолучательОтправитель = "СкладПолучатель";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеРаспоряженияНаДоставку();
	Описание.Имя               = "ПеремещениеТоваров";
	Описание.ИмяПоляСклад      = "Шапка.СкладОтправитель";
	Описание.ИмяПоляПолучательОтправитель = "СкладПолучатель";
	Описание.ИмяПоляНазначение = "ТЧ.НазначениеОтправителя";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеРаспоряженияНаДоставку();
	Описание.Имя               = "РеализацияТоваровУслуг";
	Описание.ИмяПоляСклад      = "ТЧ.Склад";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеРаспоряженияНаДоставку();
	Описание.Имя               = "ВозвратТоваровПоставщику";
	Описания.Добавить(Описание);
	
	Описание = ОписаниеРаспоряженияНаДоставку();
	Описание.Имя               = "ЗаказПоставщику";
	Описание.ЭтоЗаказ          = Истина;
	Описание.ИмяПоляСклад      = "ТЧ.Склад";
	Описание.ИмяПоляСерия      = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	Описания.Добавить(Описание);
	Описание = ОписаниеРаспоряженияНаДоставку();
	
	Описание.Имя               = "ПоступлениеТоваровУслуг";
	Описание.ИмяПоляСклад      = "ТЧ.Склад";
	Описание.ИмяПоляСерия      = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	Описания.Добавить(Описание);
	
	Возврат Описания;
	
КонецФункции

// Возвращает время без даты.
// Возвращаемое значение - Дата.
//
Функция ВремяБезДаты(ДатаВремя) Экспорт
	Возврат Дата(1,1,1,Час(ДатаВремя),Минута(ДатаВремя),Секунда(ДатаВремя));
КонецФункции

// Возвращает строку со временем доставки в виде "%ВремяС - %ВремяПо".
//
Функция ПредставлениеВремениДоставки(ВремяС, ВремяПо) Экспорт
	
	Если ЗначениеЗаполнено(ВремяПо) Тогда
		Текст = НСтр("ru='%ВремяС - %ВремяПо';uk='%ВремяС - %ВремяПо'");
		Текст = СтрЗаменить(Текст, "%ВремяС", Формат(ВремяС, "ДФ=ЧЧ:мм"));
		Возврат СтрЗаменить(Текст, "%ВремяПо", Формат(ВремяПо, "ДФ=ЧЧ:мм"));
	Иначе
		Возврат Формат(ВремяС, "ДФ=ЧЧ:мм");
	КонецЕсли;
	
КонецФункции

// Возвращает представление получателя для доставки,
// если доставка перевозчиком, то представление имеет вид "%Перевозчик (%ПолучательОтправитель)"
//
Функция ПредставлениеПолучателяОтправителя(ПолучательОтправитель, Перевозчик) Экспорт
	
	Если ЗначениеЗаполнено(Перевозчик) Тогда
		Текст = НСтр("ru='%Перевозчик (%ПолучательОтправитель)';uk='%Перевозчик (%ПолучательОтправитель)'");
		Текст = СтрЗаменить(Текст,"%ПолучательОтправитель",ПолучательОтправитель);
		Возврат СтрЗаменить(Текст,"%Перевозчик",Перевозчик);
	Иначе
		Возврат Строка(ПолучательОтправитель);
	КонецЕсли;
	
КонецФункции

// Возвращает имя реквизита по элементу управляемой формы, связанном с адресом доставки
//
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент) Экспорт
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

// Проверяет - было ли изменено поле ДополнительнаяИнформацияПоДоставке пользователем
// Параметры:
//	ЭлементыФормы - все элементы формы, в которой производится проверка
//	ДокОбъект - объект для проверки
//
Функция ДопИнфоИзмененоПользователем(ЭлементыФормы, ДокОбъект) Экспорт
	
	ДопИнфоИзменено = Ложь;
	ДопИнфо = ДокОбъект.ДополнительнаяИнформацияПоДоставке;
	
	Если Не ЗначениеЗаполнено(ДопИнфо) Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ЭлементыФормы.Найти("АдресПоставщика") <> Неопределено Тогда
		
		ДопИнфоИзменено = Не ДопИнфоЕстьВСпискеВыбораЭлемента(ЭлементыФормы.АдресПоставщика, ДопИнфо);
		
	ИначеЕсли ЭлементыФормы.Найти("АдресПункта") <> Неопределено Тогда
		
		ДопИнфоИзменено = Не ДопИнфоЕстьВСпискеВыбораЭлемента(ЭлементыФормы.АдресПункта, ДопИнфо);
		
	Иначе
		
		ДопИнфоИзменено = Не ДопИнфоЕстьВСпискеВыбораЭлемента(ЭлементыФормы.АдресДоставкиПолучателя, ДопИнфо);
		Если ЭлементыФормы.Найти("АдресДоставкиПолучателя1") <> Неопределено
			И Не ДопИнфоИзменено Тогда
			ДопИнфоИзменено = Не ДопИнфоЕстьВСпискеВыбораЭлемента(ЭлементыФормы.АдресДоставкиПолучателя1, ДопИнфо);
		КонецЕсли;
	КонецЕсли;
		
	Если ЭлементыФормы.Найти("АдресДоставкиПеревозчика") <> Неопределено
		И Не ДопИнфоИзменено Тогда
		ДопИнфоИзменено = Не ДопИнфоЕстьВСпискеВыбораЭлемента(ЭлементыФормы.АдресДоставкиПеревозчика, ДопИнфо);
	КонецЕсли;
	
	Возврат ДопИнфоИзменено;
	
КонецФункции

// Функция - Способы доставки до клиента с нашим участием
//
// Параметры:
//  ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками	 - Булево - значение функциональной опции ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
// 
// Возвращаемое значение:
//  Массив - массив способов доставки
//
Функция СпособыДоставкиДоКлиентаСНашимУчастием(ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками) Экспорт 
	
	СпособыДоставки = Новый Массив;
	
	СпособыДоставки.Добавить(ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента"));
	СпособыДоставки.Добавить(ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу"));
	СпособыДоставки.Добавить(ПредопределенноеЗначение("Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки"));
	
	Если ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками Тогда
		СпособыДоставки.Добавить(ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика"));
	КонецЕсли;
	
	Возврат СпособыДоставки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список выбора у поля ввода времени доставки.
//
// Параметры:
//	ПолеВводаФормы - ПолеФормы - поле ввода времени доставки
//	Интервал - Число - интервал времени (сек.) между значениями списка выбора (по умолчанию 1 час)
//
Процедура ЗаполнитьСписокВыбораПоляВремени(ПолеВводаФормы, Интервал = 3600) Экспорт
	
	ПолеВводаФормы.СписокВыбора.Очистить();
	
	НачалоРабочегоДня      = '00010101000000';
	ОкончаниеРабочегоДня   = '00010101235959';
	
	ВремяСписка = НачалоРабочегоДня;
	
	Пока ВремяСписка <= ОкончаниеРабочегоДня Цикл
		
		Если НЕ ЗначениеЗаполнено(ВремяСписка) Тогда
			ПолеВводаФормы.СписокВыбора.Добавить(ВремяСписка + 1, "00:00"); // непустое значение
		Иначе
			ПолеВводаФормы.СписокВыбора.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ=ЧЧ:мм"));
		КонецЕсли;
		
		ВремяСписка = ВремяСписка + Интервал;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеРаспоряженияНаДоставку()
	
	Описание = Новый Структура;
	Описание.Вставить("Имя");
	Описание.Вставить("ЭтоЗаказ",          Ложь);
	Описание.Вставить("ИмяТЧ",             "Товары");
	Описание.Вставить("ИмяПоляСклад",      "Шапка.Склад");
	Описание.Вставить("ИмяПоляПолучательОтправитель", "Партнер");
	Описание.Вставить("ИмяПоляНазначение", "ТЧ.Назначение");
	Описание.Вставить("ИмяПоляСерия",      "ТЧ.Серия");
	Возврат Описание;
	
КонецФункции

Функция ЭтоРаспоряжениеНаДоставкуНаНашСклад(Распоряжение) Экспорт
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику")
		Или ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		Или Распоряжение = "Документ.ЗаказПоставщику"
		Или Распоряжение = "Документ.ПоступлениеТоваровУслуг"
		Или (ТипЗнч(Распоряжение) = Тип("ДанныеФормыСтруктура")
			Или ТипЗнч(Распоряжение) = Тип("Структура"))
			И (ТипЗнч(Распоряжение.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику")
				Или ТипЗнч(Распоряжение.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ЭтоПоручениеЭкспедитору(Распоряжение) Экспорт
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПоручениеЭкспедитору")
		Или Распоряжение = "Документ.ПоручениеЭкспедитору"
		Или (ТипЗнч(Распоряжение) = Тип("ДанныеФормыСтруктура")
				Или ТипЗнч(Распоряжение) = Тип("Структура"))
			И (ТипЗнч(Распоряжение.Ссылка) = Тип("ДокументСсылка.ПоручениеЭкспедитору")) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ДопИнфоЕстьВСпискеВыбораЭлемента(Элемент, ДопИнфо)
	
	Возврат ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(Элемент.СписокВыбора,
			"ДополнительнаяИнформацияПоДоставке",ДопИнфо) <> Неопределено;
	
КонецФункции

#КонецОбласти

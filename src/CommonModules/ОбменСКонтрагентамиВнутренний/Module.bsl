
// ОбменСКонтрагентамиВнутренний: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД


// Формирует электронный документ счета на оплату покупателю по ссылке на документ ИБ.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
//
Функция СформироватьСчетНаОплатуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД);
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	СтруктураЭД.Вставить("ВерсияСхемы", ОбменСКонтрагентамиПовтИсп.ВерсияСхемыCML2());
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	
	//Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("СчетНаОплату");
	Макет = Новый ТабличныйДокумент;

	ДеревоДанных = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);

	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДанных, ТекстОшибки);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД);
		
			
		АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяФайла", ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "ХозОперация", "Счет на оплату");
		ВставитьЗначениеВДерево(ДеревоДанных, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Дата", СтруктураЭД.ДатаДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДанных, "Ид", СтруктураЭД.НомерЭД);
		
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "НалогообложениеНДС");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "НазначениеПлатежа");
		
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогоПоДокументу.Сумма");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогоПоДокументу.СуммаСкидки");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогоПоДокументу.СуммаБезСкидки");
		ПоместитьРеквизитШапкиВДопДанные(ДеревоДанных, "ИтогиПрописью");
		
		ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, СтруктураЭД.ИдентификаторыДокументовИЭДОснований);
		
		ПоместитьТаблицуДереваВДопДанные(ДеревоДанных, "ГрафикОплаты");
		
		Если СформироватьСчетНаОплатуCML(ДеревоДанных) И ПризнакЭД Тогда
			
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка")) Тогда
				СтруктураЭД.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СопроводительнаяЗаписка"));
			КонецЕсли;
			
			СтруктураЭД.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"));
			
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			
			ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных);
			
			ВозвращаемоеЗначение = СтруктураПараметров;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru='При формировании %1 возникли следующие ошибки:
        |%2'
        |;uk='При формуванні %1 виникли наступні помилки:
        |%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ТекстСообщения);
	
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

// Заполняет свойство объекта XDTO.
//
// Параметры
//  ОбъектXDTO   - объект заполнения,
//  ИмяСвойства  - свойство объекта,
//  Значение     - устанавливаемое значение,
//  Обязательное - булево - признак обязательности заполнения свойства,
//  ТекстОшибки  - строка - текст ошибки в случае неудачного заполнения
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = "", УстанавливатьПустыеЗначения = Ложь) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
	Иначе
		Если Обязательное ИЛИ ЗначениеЗаполнено(Значение) ИЛИ УстанавливатьПустыеЗначения Тогда
			УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификационный номер электронного документа.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на электронный документ, идентификационный номер которого необходимо получить,
//  ИДОтправителя - строка, идентификационный номер отправителя электронного документа, 
//  НомерВерсии - число, номер версии электронного документа.
//
// Возвращаемое значение:
//  Строка - строка формата "ИдОтправителя#ИДСсылкиОбъектаИБ##НомерВерсии".
//
Функция ВернутьИдЭД(СсылкаНаОбъект) Экспорт
	
	ИдЭД = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
	
	Возврат ИдЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// CML

// Функция получает тип значения CML.
//
// Параметры:
//  Тип - Тип - исходный тип.
//  ВерсияСхемы - версия схемы CML.
//
// Возвращаемое значение:
//  ТипЗначения - тип значения.
//
Функция ПолучитьТипЗначенияCML(Тип, ВерсияСхемы = "4.02") Экспорт
	
	Попытка
		ТипЗначения = ФабрикаXDTO.Тип(ВерсияСхемы, Тип);
	Исключение
		
		ТипЗначения = Неопределено;
	КонецПопытки;
	
	Возврат ТипЗначения;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Разбор файлов

// Осуществляет разбор файла с реквизитами контрагента
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора) Экспорт
	
	ОшибкаРазбора = Ложь;
	СтруктураВозврата.Вставить("ТелефонПартнера");
	СтруктураВозврата.Вставить("ТелефонКЛ");
	СтруктураВозврата.Вставить("АдресЭППартнера");
	СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("БИКБанка");
	СтруктураВозврата.Вставить("КоррСчетБанка");
	СтруктураВозврата.Вставить("ПредставлениеБанка");
	СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента");
	СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов");
	СтруктураВозврата.Вставить("БИКБанкаДляРасчетов");
	СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов");
	СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов");
	СтруктураВозврата.Вставить("ВидКомпании");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("НаименованиеКонтрагента");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей");
	СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица");
	СтруктураВозврата.Вставить("ФамилияКЛ");
	СтруктураВозврата.Вставить("ИмяКЛ");
	СтруктураВозврата.Вставить("ОтчествоКЛ");
	СтруктураВозврата.Вставить("ФамилияКонтрагента");
	СтруктураВозврата.Вставить("ИмяКонтрагента");
	СтруктураВозврата.Вставить("ОтчествоКонтрагента");
	СтруктураВозврата.Вставить("Название");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей");

	РезультатРазбора = Ложь;
	ОбменСКонтрагентамиПереопределяемый.РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора);
	
	Если ТипЗнч(РезультатРазбора) <> Тип("Булево") ИЛИ РезультатРазбора = Ложь Тогда
		ОбъектXML = Новый ЧтениеXML;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
		ВремФайл = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ВремФайл);
		
		Попытка
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		Исключение
			ОбъектXML.Закрыть();
			ОшибкаРазбора = Истина;
			УдалитьФайлы(ВремФайл);
			Возврат;
		КонецПопытки;
		
		Если НЕ ЭД.Тип() = ПолучитьТипЗначенияCML("Контрагент", "4.02") Тогда
			ОбъектXML.Закрыть();
			ОшибкаРазбора = Истина;
			УдалитьФайлы(ВремФайл);
			Возврат;
		КонецЕсли;
		
		Попытка
			СвойствоЭД = ЭД.Свойства().Получить("Контакты");
			Если НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено Тогда
				Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
					Если ТекКонтакт.Тип = "Телефон рабочий" Тогда
						СтруктураВозврата.ТелефонПартнера = ТекКонтакт.Значение;
						СтруктураВозврата.ТелефонКЛ = ТекКонтакт.Значение;
					ИначеЕсли ТекКонтакт.Тип = "Почта" Тогда
						СтруктураВозврата.АдресЭППартнера = ТекКонтакт.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");
			Если СвойствоЭД <> Неопределено Тогда
				
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					Для Каждого ТекСв Из ЗнДанных.РасчетныйСчет Цикл
						
						СтруктураВозврата.НомерСчета = ТекСв.НомерСчета;
						СтруктураВозврата.БИКБанка = ТекСв.Банк.БИК;
						СтруктураВозврата.КоррСчетБанка = ТекСв.Банк.СчетКорреспондентский;
						СтруктураВозврата.ПредставлениеБанка = ТекСв.Банк.Наименование;
						СтруктураВозврата.УказатьБанковскийСчетКонтрагента = Истина;
						
						Если НЕ ТекСв.БанкКорреспондент = Неопределено Тогда
							СтруктураВозврата.ИспользуетсяБанкДляРасчетов = Истина;
							СтруктураВозврата.БИКБанкаДляРасчетов = ТекСв.БанкКорреспондент.БИК;
							СтруктураВозврата.КоррСчетБанкаДляРасчетов = ТекСв.БанкКорреспондент.СчетКорреспондентский;
							СтруктураВозврата.ПредставлениеБанкаДляРасчетов = ТекСв.БанкКорреспондент.Наименование;
						КонецЕсли;
						Прервать;
					КонецЦикла
				КонецЕсли;
			КонецЕсли;
			
			СтруктураВозврата.УказыватьЮридическиеРеквизиты = Истина;
			ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
			
			СвойствоЭД = ЭД.Свойства().Получить("ЮрЛицо");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					СтруктураВозврата.ВидКомпании = 0;
					СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
					Если СвойствоИНН <> Неопределено Тогда
						СтруктураВозврата.ИНН = ЗнДанных.Получить(СвойствоИНН);
					КонецЕсли;
					СвойствоКПП = ЗнДанных.Свойства().Получить("КПП");
					Если СвойствоКПП <> Неопределено Тогда
						СтруктураВозврата.КПП = ЗнДанных.Получить(СвойствоКПП);
					КонецЕсли;
					СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
					Если СвойствоОКПО <> Неопределено Тогда
						СтруктураВозврата.КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
					КонецЕсли;
					СвойствоОФНаим = ЗнДанных.Свойства().Получить("ОфициальноеНаименование");
					Если СвойствоОФНаим <> Неопределено Тогда
						СтруктураВозврата.НаименованиеКонтрагента = ЗнДанных.Получить(СвойствоОфНаим);
					КонецЕсли;
					
					СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
					Если СвойствоЮрАдрес <> Неопределено Тогда
						ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
						Если ЗнЮрАдрес <> Неопределено Тогда
							
							СтруктураВозврата.ЮридическийАдрес = ЗнЮрАдрес.Представление;
							ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
							Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
								Если ТекСв.Тип = "Почтовый индекс" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление =  "Индекс";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "НаселенныйПункт";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = ТекСв.Тип;
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								КонецЕсли;
							КонецЦикла;
							
							СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдресЗначенияПолей;
						КонецЕсли
					КонецЕсли;
					
					СвойствоРуководитель = ЗнДанных.Свойства().Получить("Руководитель");
					Если СвойствоРуководитель <> Неопределено Тогда
						ЗнРуководитель = ЗнДанных.Получить(СвойствоРуководитель);
						Если ЗнРуководитель <> Неопределено Тогда
							СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");
							Если СвойствоФизЛицо<> Неопределено Тогда
								ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);
								Если ФизЛицо <> Неопределено Тогда
									СтруктураВозврата.УказатьДанныеКонтактногоЛица = Истина;
									ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизЛицо.ПолноеНаименование);
									СтруктураВозврата.ФамилияКЛ = ФИО.Фамилия;
									СтруктураВозврата.ИмяКЛ = ФИО.Имя;
									СтруктураВозврата.ОтчествоКЛ = ФИО.Отчество;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("ФизЛицо");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					
					СтруктураВозврата.ВидКомпании = 2;
					СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
					Если СвойствоИНН <> Неопределено Тогда
						СтруктураВозврата.ИНН = ЗнДанных.Получить(СвойствоИНН);
					КонецЕсли;
					
					СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
					Если СвойствоОКПО <> Неопределено Тогда
						КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
						СтруктураВозврата.КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
					КонецЕсли;
					
					СвойствоОФНаим = ЗнДанных.Свойства().Получить("ПолноеНаименование");
					Если СвойствоОФНаим <> Неопределено Тогда
						СтруктураВозврата.НаименованиеКонтрагента = ЗнДанных.Получить(СвойствоОфНаим);
						ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СтруктураВозврата.НаименованиеКонтрагента);
						СтруктураВозврата.ФамилияКонтрагента =  ФИО.Фамилия;
						СтруктураВозврата.ИмяКонтрагента =      ФИО.Имя;
						СтруктураВозврата.ОтчествоКонтрагента = ФИО.Отчество;
					КонецЕсли;
					
					СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
					Если СвойствоЮрАдрес <> Неопределено Тогда
						
						ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
						Если ЗнЮрАдрес <> Неопределено Тогда
							
							СтруктураВозврата.ЮридическийАдрес = ЗнЮрАдрес.Представление;
							ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
							Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
								Если ТекСв.Тип = "Почтовый индекс" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "Индекс";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = "НаселенныйПункт";
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 Тогда
									ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
									ЮрАдресЗначения.Представление = ТекСв.Тип;
									ЮрАдресЗначения.Значение = ТекСв.Значение;
								КонецЕсли;
							КонецЦикла;
							
							СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдресЗначенияПолей;
						КонецЕсли
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("Наименование");
			Если СвойствоЭД <> Неопределено Тогда
				СтруктураВозврата.Название = ЭД.Получить(СвойствоЭД);
			КонецЕсли;
			
			СвойствоЭД = ЭД.Свойства().Получить("Адрес");
			Если СвойствоЭД <> Неопределено Тогда
				ЗнДанных = ЭД.Получить(СвойствоЭД);
				Если ЗнДанных <> Неопределено Тогда
					
					СтруктураВозврата.ФактическийАдрес = ЗнДанных.Представление;
					ФактическийАдресЗначенияПолей = Новый СписокЗначений;
					Для Каждого ТекСв Из ЗнДанных.АдресноеПоле Цикл
						Если ТекСв.Тип = "Почтовый индекс" Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Представление = "Индекс";
							ФактАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Представление = "НаселенныйПункт";
							ФактАдресЗначения.Значение = ТекСв.Значение;
						ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 Тогда
							ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
							ФактАдресЗначения.Значение = ТекСв.Значение;
							ФактАдресЗначения.Представление = ТекСв.Тип;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураВозврата.ФактическийАдресЗначенияПолей = ФактическийАдресЗначенияПолей;
				КонецЕсли;
			КонецЕсли;
		Исключение
			ОшибкаРазбора = Истина;
		КонецПопытки;
		ОбъектXML.Закрыть();
		УдалитьФайлы(ВремФайл);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет пространство имен из файла
//
// Параметры:
//   ИмяФайла - Строка - путь к файлу на диске
//   ПространствоИмен - Строка - удаляемое пространство имен
//
Процедура УдалитьПространствоИмен(ИмяФайла, ПространствоИмен) Экспорт
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайла,"windows-1251");
	СтрокаФайл = Текст.ПолучитьСтроку(2);
	СтрокаФайл = СтрЗаменить(СтрокаФайл, "xmlns=""" + ПространствоИмен + """", "");
	Текст.ЗаменитьСтроку(2, СтрокаФайл);
	Текст.Записать(ИмяФайла, "windows-1251");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

// Получает информацию о товаре в массиве ЭД
//
// Параметры:
//  МассивЭД - Массив - массив ссылок на элементы справочника ЭДПрисоединенныеФайлы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений, содержащая информацию о товаре.
//
Функция ПолучитьИнформациюОТоваре(МассивЭД) Экспорт
	
	ТаблицаВозврата = Неопределено;
	ИменаДопКолонок = "";
	
	Для Каждого ТекЭД Из МассивЭД Цикл
		Если ТекЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ТекЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ТекЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ЭД = ТекЭД.ЭлектронныйДокументВладелец;
		Иначе
			ЭД = ТекЭД;
		КонецЕсли;
		ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭД, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла = Неопределено Тогда
				ШаблонОшибки = НСтр("ru='Чтение электронного документа: %1.
                |Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'
                |;uk='Читання електронного документа: %1.
                |Не вдалося прочитати електронний документ. Перевірте настройку робочого каталогу.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			ДеревоДопДанных = Неопределено;
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
				ВыборкаЭДДопДанных = ОбменСКонтрагентамиСлужебный.ВыборкаДопДанныеЭД(ЭД);
				Если ВыборкаЭДДопДанных.Следующий() Тогда
					ДопДанныеЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(
					                                                           ВыборкаЭДДопДанных.Ссылка,
					                                                           ВыборкаЭДДопДанных.Ссылка.УникальныйИдентификатор(),
					                                                           Истина);
					СсылкаНаДДДопДанныхЭД = "";
					Если ДопДанныеЭД.Свойство("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДДДопДанныхЭД)
						И ЗначениеЗаполнено(СсылкаНаДДДопДанныхЭД) Тогда
						ВремФайл = ПолучитьИмяВременногоФайла("xml");
						ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СсылкаНаДДДопДанныхЭД);
						ДвоичныеДанныеФайла.Записать(ВремФайл);
						ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ВремФайл);
						УдалитьФайлы(ВремФайл);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеЭД.Записать(ИмяФайла);
			
			Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 ИЛИ Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, ЭД.УникальныйИдентификатор());
				Если ПапкаДляРаспаковки = Неопределено Тогда
					ШаблонОшибки = НСтр("ru='Чтение электронного документа: %1.
                    |Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога.'
                    |;uk='Читання електронного документа: %1.
                    |Не вдалося прочитати електронний документ. Перевірте настройку робочого каталогу.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭД);
					УдалитьФайлы(ИмяФайла);
					Продолжить;
				КонецЕсли;
				УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
				Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
					ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
					Попытка
						ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
					Исключение
						ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						Если Не ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"),
							ТекстОшибки, ТекстСообщения);
						ЗипЧтение.Закрыть();
						УдалитьФайлы(ПапкаДляРаспаковки);
						УдалитьФайлы(ИмяФайла);
						Продолжить;
					КонецПопытки;
				Иначе
					ФайлПриемник = ПапкаДляРаспаковки + "\" + Новый УникальныйИдентификатор + ".xml";
					ОбменСКонтрагентамиСлужебный.УдалитьЛишнийСлэшВПути(ФайлПриемник);
					КопироватьФайл(ИмяФайла, ФайлПриемник);
				КонецЕсли;
				ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
					ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
					Если Найти(РаспакованныйФайл.Имя, "packageDescription") Тогда
						Продолжить;
					КонецЕсли;
					ИнформацияОТовареИзФайлаXML(ИмяФайлаДанных, ТаблицаВозврата, ЭД, ДеревоДопДанных, ИменаДопКолонок);
				КонецЦикла;
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ТаблицаВозврата) = Тип("ТаблицаЗначений") Тогда
		ТаблицаВозврата.Свернуть("ИД, Артикул, Наименование, БазоваяЕдиницаКод, БазоваяЕдиницаНаименование,
			|БазоваяЕдиницаНаименованиеПолное, БазоваяЕдиницаМеждународноеСокращение, Описание, ЭД, НаименованиеХарактеристики"
			+ ИменаДопКолонок);
	КонецЕсли;

	Возврат ТаблицаВозврата;
	
КонецФункции

// Только для внутреннего использования
Процедура ИнформацияОТовареИзФайлаXML(ПолноеИмяФайла,
									  ТаблицаВозврата,
									  СсылкаНаЭД,
									  ДеревоДопДанных = Неопределено,
									  ИменаДопКолонок = "") Экспорт
	
	ОписаниеОшибки = "";
	ДанныеФайлаЭД = ДанныеФайлаЭД(ПолноеИмяФайла, ОписаниеОшибки);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		НаборДанных = Неопределено;
		
		Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("КоммерческаяИнформация", "urn:1C.ua:commerceml_2") Тогда
			Если ТипЗнч(ДанныеФайлаЭД.Каталог) = Тип("ОбъектXDTO") Тогда
				НаборДанных = ДанныеФайлаЭД.Каталог["Товары"].Товар;
			ИначеЕсли ТипЗнч(ДанныеФайлаЭД.Документ) = Тип("СписокXDTO") И (ДанныеФайлаЭД.Документ.Количество() > 0) Тогда
				НаборДанных = ДанныеФайлаЭД.Документ[0]["Товары"].Товар;
			ИначеЕсли ТипЗнч(ДанныеФайлаЭД.ПакетПредложений) = Тип("ОбъектXDTO") 
				И ТипЗнч(ДанныеФайлаЭД.ПакетПредложений.Предложения) = Тип("ОбъектXDTO")
				И ТипЗнч(ДанныеФайлаЭД.ПакетПредложений.Предложения.Предложение) = Тип("СписокXDTO")
				И ДанныеФайлаЭД.ПакетПредложений.Предложения.Предложение.Количество() > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.ПакетПредложений.Предложения.Предложение;
				
			КонецЕсли;
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ,,,,, ИменаДопКолонок);
		КонецЕсли;
		
		Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
			НаборДанных = ДанныеФайлаЭД["Предложения"].Предложение;
			СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, ,,,,, ИменаДопКолонок);
		ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02")
				ИЛИ ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
			Если ДанныеФайлаЭД["Товары"] <> Неопределено Тогда
				НаборДанных = ДанныеФайлаЭД["Товары"].Товар;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , , , , , ИменаДопКолонок);
			КонецЕсли;
		КонецЕсли;
			
		Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
			
			Если Найти(ДанныеФайлаЭД.ИдФайл, "OTORG12") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.СвТНО.ТН.Таблица.СвТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
					Истина, "Товары", , ИменаДопКолонок);
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OKORDOC") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.СвТНО.ТН.Таблица.СвТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
					Истина, "Товары", , ИменаДопКолонок);
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "IAKTPRM") > 0 Тогда
				
				НаборДанныхОписанияРабот = ДанныеФайлаЭД.Документ.СвАктИ.ОписРабот;
				// Переберем номенклатуру из всех табличных частей акта.
				Для Сч = 0 По НаборДанныхОписанияРабот.Количество() - 1 Цикл
					ЭлементОписания = НаборДанныхОписанияРабот.ПолучитьXDTO(Сч);
					НаборДанных = ЭлементОписания.ПолучитьСписок("Работа");
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
						Истина, "Услуги", Сч + 1, ИменаДопКолонок);
				КонецЦикла;
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "KORSFAKT") > 0 Тогда
				НаборДанных = ДанныеФайлаЭД.Документ.ТаблКСчФ.СведТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
					Истина, "Товары");
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "SFAKT") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.ТаблСчФакт.СведТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
					Истина, "Товары");
					
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда
				
				НаборДанных = ДанныеФайлаЭД.Документ.СвДокПТПрКроме.СодФХЖ2.СвТов;
				СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
					Истина, "Товары");
					
			ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUISP") > 0 Тогда
				
				НаборДанныхОписанияРабот = ДанныеФайлаЭД.Документ.СвДокПРУ.СодФХЖ1.ОписРабот;
				Для Сч = 0 По НаборДанныхОписанияРабот.Количество() - 1 Цикл
					ЭлементОписания = НаборДанныхОписанияРабот.ПолучитьXDTO(Сч);
					НаборДанных = ЭлементОписания.ПолучитьСписок("Работа");
					СформироватьТЗПоНаборуДанныхXDTO(ТаблицаВозврата, НаборДанных, СсылкаНаЭД, , ДеревоДопДанных,
						Истина, "Услуги", Сч + 1, ИменаДопКолонок);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаВозврата.Количество() = 0 Тогда
			Если Пользователи.ЭтоПолноправныйПользователь(, , Ложь) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неизвестный тип при чтении данных из ЭД %1.';uk='Невідомий тип при читанні даних з ЕД %1.'"), СсылкаНаЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Если Пользователи.ЭтоПолноправныйПользователь(, , Ложь) Тогда
			ШаблонСообщения = НСтр("ru='Возникла ошибка при чтении данных из ЭД %1: %2';uk='Виникла помилка при читанні даних з ЕД %1: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, СсылкаНаЭД, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД) Экспорт
	
	ТипЭлементаВерсииЭД = СсылкаНаЭД.ТипЭлементаВерсииЭД;
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		Иначе
			ВозвращаемыйТип = Неопределено;
		КонецЕсли;
	Иначе
		Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
		ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
			
			ВозвращаемыйТип = Неопределено;
		Иначе
			ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемыйТип;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// По ссылке на электронные документ формирует печатную форму документа
//
Функция ФайлДанныхЭД(СсылкаНаЭД = Неопределено, ПараметрыПросмотра) Экспорт
	
	// Структура содержащая поля "ИмяФайла", "Наименование", "Расширение".
	ПараметрыФайла = СвойстваФайла();
	
	СохранитьЭДВФайл(СсылкаНаЭД, ПараметрыФайла);
	
	ИмяФайла = ПараметрыФайла.ИмяФайла;
	
	Если ИмяФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПросмотра.Вставить("ИмяФайла", ИмяФайла);
	
	ИмяФайлаДопДанных = Неопределено;
	СохранитьДопДанныеВФайл(СсылкаНаЭД, ИмяФайлаДопДанных);
	ПараметрыПросмотра.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);

	УникальныйИдентификатор = ЗначениеПараметра(ПараметрыПросмотра, "УникальныйИдентификатор");
	Идентификатор = ЗначениеПараметра(ПараметрыПросмотра, "Идентификатор");
	СтруктураПодписей = ЗначениеПараметра(ПараметрыПросмотра, "СтруктураПодписей");
	ИмяФайлаПодчиненногоЭД = ЗначениеПараметра(ПараметрыПросмотра, "ИмяФайлаПодчиненногоЭД");
	
	ПечатьЭД = ЗначениеПараметра(ПараметрыПросмотра, "ПечатьЭД");
	Если ПечатьЭД = Неопределено Тогда
		ПечатьЭД = Ложь;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД,НаправлениеЭД");
	
	ИмяФайлаВторогоТитула = ИмяФайлаПодчиненногоЭД;
	
	Если Найти(ПараметрыФайла.Расширение, "zip") > 0 Тогда
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(,СсылкаНаЭД.УникальныйИдентификатор());
		
		Если ПапкаДляРаспаковки = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога';uk='Не вдалося переглянути електронний документ. Перевірте настройки робочого каталогу'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"),
			ТекстОшибки, ТекстСообщения);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат Неопределено;
		КонецПопытки;
		
		ФлагПросмотра = Ложь;
		
		Если СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав И Не ПечатьЭД Тогда
			ФайлыАрхиваPDF = НайтиФайлы(ПапкаДляРаспаковки, "*.pdf");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваPDF Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат СсылкаНаФайл;
			КонецЦикла;
		КонецЕсли;
		
		ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
		
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
			
			ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			Если Найти(РаспакованныйФайл.Имя, "packageDescription") Тогда
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
				СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат СсылкаНаФайл;
			КонецЕсли;
			
			ПараметрыПечати = Новый Структура;
			ПараметрыПечати.Вставить("ИД",СсылкаНаЭД.УникальныйИдентификатор());
			ПараметрыПечати.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);
			ПараметрыПечати.Вставить("СтруктураПодписей", СтруктураПодписей);
			ПараметрыПечати.Вставить("ИмяФайлаПодчиненногоЭД", ИмяФайлаВторогоТитула);
			
			ТабличныйДокумент = СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
				СсылкаНаЭД.НаправлениеЭД,
				ПараметрыПечати);
				
			Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат ТабличныйДокумент;
			КонецЕсли;
			
		КонецЦикла;
		
		ФайлыАрхиваMXL = НайтиФайлы(ПапкаДляРаспаковки, "*.mxl");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваMXL Цикл
			ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Прочитать(ИмяФайлаДанных);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат ТабличныйДокумент;
		КонецЦикла;
		
		ФайлыАрхиваHTML = НайтиФайлы(ПапкаДляРаспаковки, "*.html");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваHTML Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваDOCX = НайтиФайлы(ПапкаДляРаспаковки, "*.docx");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваDOCX Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваXLS = НайтиФайлы(ПапкаДляРаспаковки, "*.xls");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXLS Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
		ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
		Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
			СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат СсылкаНаФайл;
		КонецЦикла;
		
	ИначеЕсли Найти(ПараметрыФайла.Расширение, "xml") > 0 Тогда
		
		ИмяФайлаДанных = ИмяФайла;
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ИД", СсылкаНаЭД.УникальныйИдентификатор());
		ПараметрыПечати.Вставить("ИмяФайлаПодчиненногоЭД", ИмяФайлаВторогоТитула);
		ПараметрыПечати.Вставить("СтруктураПодписей", СтруктураПодписей);
		ПараметрыПечати.Вставить("ИмяФайлаДопДанных", ИмяФайлаДопДанных);
		
		Если СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			Тогда
			
			ПараметрыПечати.Вставить("Идентификатор", Идентификатор);
			
		КонецЕсли;
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭД(ИмяФайла,
				СсылкаНаЭД.НаправлениеЭД,
				ПараметрыПечати);
		
		Если ТипЗнч(ТабличныйДокумент)=Тип("ТабличныйДокумент") Тогда
			Возврат ТабличныйДокумент;
		КонецЕсли;
		
	Иначе
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
		Возврат СсылкаНаФайл;
	КонецЕсли;
	
КонецФункции

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  ПолноеИмяФайла - строка, путь к файлу, по которому необходимо сформировать печатную форму.
//  НаправлениеЭД - перечисление НаправлениеЭД.
//  ИД - уникальный идентификатор объекта ЭД.
//  ИмяФайлаДопДанных - строка, путь к файлу доп.данных.
//  ВидЭД - перечисление ссылка ВидыЭД, возвращает в вызывающую процедуру вид обрабатываемого ЭД.
//  ИдентификаторДокумента - Строка - возвращает идентификатор,если он присутствует в электронном документе.
//  СтруктураПодписей - Структура - установленные подписи
//    - КомуВыданСертификат - Строка - представление сертификата
//    - Отпечаток - Строка - отпечаток сертификата.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Табличный документ с данными электронного документа.
//
Функция СформироватьПечатнуюФормуЭД(ПолноеИмяФайла,
									НаправлениеЭД,
									ПараметрыПечати) Экспорт
									
	ИмяФайлаДопДанных = ЗначениеПараметра(ПараметрыПечати, "ИмяФайлаДопДанных");
	Результат = СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ИмяФайлаДопДанных);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПечатнаяФормаЭД(Результат, НаправлениеЭД, ПараметрыПечати);
	
КонецФункции

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  СтруктураРазбораФайла - структура, содержит дерево разбора ЭД.
//  НаправлениеЭД - Перечисление.НаправлениеЭД - направление.
//  ИД - УникальныйИдентификатор - уникальный идентификатор объекта ЭД.
//  ИмяФайлаПодчиненногоЭД - строка, путь к файлу доп.данных.
//  ВидЭД - перечисление ссылка ВидыЭД, возвращает в вызывающую процедуру вид обрабатываемого ЭД.
//  ИдентификаторДокумента - Строка - идентификатор.
//  СтруктураПодписей - Структура - установленные электронные подписи.
//    * Подписи - Структура
//        * КомуВыданСертификат - представление сертификата.
//        * НомерСтроки - Число - Номер строки формы просмотра.
//
// Возвращаемое значение:
//  Табличный документ с данными электронного документа.
//
Функция ПечатнаяФормаЭД(СтруктураРазбораФайла, НаправлениеЭД, ПараметрыПечати) Экспорт
	
	ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
	
	ИдентификаторДокумента = ЗначениеПараметра(ПараметрыПечати, "ИдентификаторДокумента");
	Если ИдентификаторДокумента = Неопределено Тогда
		ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
			"ИдентификаторДокумента");
	КонецЕсли; 
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбщийТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	МакетИдентификатораДокумента = ПолучитьОбщийМакет("ЭД_ИдентификаторДокумента");
	Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
		ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	СтруктураПодписей = ЗначениеПараметра(ПараметрыПечати, "СтруктураПодписей");
	ТекстЭлектроннаяПодпись = "";
	Подписан = Ложь;
	Если ЗначениеЗаполнено(СтруктураПодписей) И СтруктураПодписей.Подписи.Количество() Тогда
		Подписан = Истина;
		ТекстЭлектроннаяПодпись = НСтр("ru='электронная подпись';uk='електронний підпис'");
		ОбластьПодпись = МакетИдентификатораДокумента.ПолучитьОбласть("Подпись");
		Для каждого СтрокаПодписи Из СтруктураПодписей.Подписи Цикл
			ОбластьПодпись.Параметры.Значение = СтрокаПодписи.КомуВыданСертификат;
			ОбластьПодпись.Параметры.НомерСтрокиПодписи = СтрокаПодписи.НомерСтроки;
			ОбщийТабДок.Вывести(ОбластьПодпись);
		КонецЦикла; 
		ОбластьЗаголовокПодписи = МакетИдентификатораДокумента.ПолучитьОбласть("ЗаголовокПодписей");
		ОбщийТабДок.Вывести(ОбластьЗаголовокПодписи);
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяФайлаПодчиненногоЭД = ЗначениеПараметра(ПараметрыПечати, "ИмяФайлаПодчиненногоЭД");
	ИД = ЗначениеПараметра(ПараметрыПечати, "ИД");
	
	Попытка
		
		Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, "Заказ");
			ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, "Заказ");
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		КонецЕсли;
		
		ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ТабличныйДокумент);
		
		ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
		ОбщийТабДок.АвтоМасштаб = Истина;
		ОбщийТабДок.ОтображатьЗаголовки = Ложь;
		ОбщийТабДок.ОтображатьСетку = Ложь;
		ОбщийТабДок.ТолькоПросмотр = Истина;
		
		Если ПараметрыПечати.Свойство("СкрыватьСлужебныеОбласти") И ПараметрыПечати.СкрыватьСлужебныеОбласти Тогда
			ИменаОбластей = "ИдентификаторДокумента, ОбластьДД, ОбластьДДСЭП, ОбластьДДБезЭП, ОбластьДДСЭП_УС, ОбластьДДСЭП_У, ОбластьДДСЭП_С";
			ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ОбщийТабДок, ИменаОбластей,
				ТипСмещенияТабличногоДокумента.БезСмещения);
			ИменаОбластей = "ДопДанныеШапки_Шапка";
			ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ОбщийТабДок, ИменаОбластей,
				ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		
		Возврат ОбщийТабДок;
	Исключение
		ШаблонСообщения = НСтр("ru='Ошибка формирования табличного документа:
        |%1.'
        |;uk='Помилка формування табличного документа:
        |%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru='формирования табличного документа';uk='формування табличного документа'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Получает значение реквизита шапки электронного документа по его имени из строки разобранных данных.
//
// Параметры:
//  СтрокаДерева - строка дерева значений, параметры разбора электронного документа.
//  ИмяРеквизита - строка, имя реквизита, значение которого надо получить.
//  ДеревоРазбора - дерево значений - полная структура с данными разбора электронного документа.
//
// Возвращаемое значение:
//  Значение реквизита шапки электронного документа.
//
Функция ПолучитьРеквизитШапкиЭД(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // вернем ссылку
			Результат = НайденнаяСтрока.СсылкаНаОбъект;
		Иначе
			Результат = НайденнаяСтрока.ЗначениеРеквизита;
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
			// тогда нашли всего лишь индекс строки.
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, умещаются ли переданные табличные документы
// на страницу при печати.
//
// Параметры
//  ТабДокумент        - Табличный документ.
//  ВыводимыеОбласти   - Массив из проверяемых таблиц или табличный документ.
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки.
//
// Возвращаемое значение:
//  Булево - умещаются или нет переданные документы.
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина)

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Преобразования значений

// Собирает из элементов структуры адреса строку записи адреса в формате 8 запятых.
Функция СобратьАдрес(Знач СтруктураАдрес)
	
	Возврат "" + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.КодРегион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Кварт
	
КонецФункции

// Функция раскладывает строку с данными об адресе (в формате 8 запятых) на элементы структуры.
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Индекс = "";
	КодРегион = "";
	Район = "";
	Город = "";
	НаселПункт = "";
	Улица = "";
	Дом = "";
	Корпус = "";
	Кварт = "";

	МассивАдрес = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();

	Если ЭлементовВМассиве > 0 Тогда
		Индекс = СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		КодРегион = СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Город = СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		НаселПункт = СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве > 5 Тогда
		Улица = СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве > 6 Тогда
		Дом = СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве > 7 Тогда
		Корпус = СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве > 8 Тогда
		Кварт = СокрЛП(МассивАдрес[8]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Индекс", Индекс);
	СтруктураВозврата.Вставить("КодРегион", КодРегион);
	СтруктураВозврата.Вставить("Район", Район);
	СтруктураВозврата.Вставить("Город", Город);
	СтруктураВозврата.Вставить("НаселПункт", НаселПункт);
	СтруктураВозврата.Вставить("Улица", Улица);
	СтруктураВозврата.Вставить("Дом", Дом);
	СтруктураВозврата.Вставить("Корпус", Корпус);
	СтруктураВозврата.Вставить("Кварт", Кварт);
	
	Возврат СтруктураВозврата;
	
КонецФункции


// Возвращает маркер.
//
// Параметры:
//  СтруктураПараметровЗапросаМаркера - Структура - содержит параметры запроса маркера.
//  Соединение - HTTPСоединение - соединение с сервисом Такском.
//  Расшифровывать - Булево - указание, производить ли расшифровку маркера.
//                   Используется если расшифровка будет производиться на клиенте.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные маркера.
//
Функция ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Расшифровывать = Истина, ПараметрыАутентификации = Неопределено) Экспорт
	
	Маркер = Неопределено;
	
	Возврат Маркер;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСоединение(СпособОбменаЭД) Экспорт
	
	Адрес = "";
	ЗащищенноеСоединение = Ложь;
	Протокол = "";
	
	НастройкиСервисаЭДО = СтруктураНастроек1СЭДО();
	
	ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(
		НастройкиСервисаЭДО.АдресВебСервиса, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = ЭлектронноеВзаимодействиеСлужебный.СформироватьПрокси(Протокол);
	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, , ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Получает данные электронного документа из файла, заполняет дерево значений для загрузки в ИБ,
// создает/изменяет необходимые объекты ИБ.
// 
// Параметры:
//  СтруктураПараметров - структура параметров для разбора электронного документа.
//
// Возвращаемое значение:
//  Структура параметров с реквизитами созданных/измененных объектов ИБ.
//
Функция ПолучитьДанныеИзФайла(СтруктураПараметров) Экспорт
	
	ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	
	Если НЕ СтруктураПараметров.Свойство("ФайлДанныхСсылка") Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ВладелецЭД") Тогда
		СсылкаНаВладельца = СтруктураПараметров.ВладелецЭД;
	Иначе
		СсылкаНаВладельца = Неопределено;
	КонецЕсли;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НЕ (СтруктураПараметров.Свойство("НаправлениеЭД", НовыйЭД.НаправлениеЭД)
			И ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД)) Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	КонецЕсли;
	
	ФайлДопДанныхСсылка = "";
	ДеревоДопДанных = Неопределено;
	Если СтруктураПараметров.Свойство("ФайлДопДанных", ФайлДопДанныхСсылка) И ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ФайлДопДанныхСсылка);
		ДвоичныеДанныеФайла.Записать(ВремФайл);
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ВремФайл);
		УдалитьФайлы(ВремФайл);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
		СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	ОшибкаЗаписи = Ложь;
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураПараметров.ФайлДанныхСсылка);
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	ОшибкаЧтенияЭД = Ложь;
	ПрочитатьФайлCMLпоXDTO(ВремФайл, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД);
	УдалитьФайлы(ВремФайл);
	
	Если Не ОшибкаЧтенияЭД Тогда
		// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
		// тогда будем создавать объекты
		ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);
		
		Если (Не ЗначениеЗаполнено(СсылкаНаВладельца)) Или СтруктураПараметров.Свойство("ЗаполнитьДокумент") Тогда
			
			Попытка
				СсылкаНаВладельца = ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора,
				СсылкаНаВладельца);
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Заполнение документа на основе ЭД.';uk='Заповнення документа на основі ЕД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
				ОшибкаЗаписи = Истина;
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
				ТекстСообщения = НСтр("ru='Не удалось создать документ базы данных.';uk='Не вдалося створити документ бази даних.'");
				АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
				Если АктуальныеВидыЭД.Найти(НовыйЭД.ВидЭД) = Неопределено Тогда
					ШаблонСообщения = НСтр("ru='Электронный документ вида ""%1"" в текущей конфигурации не поддерживается';uk='Електронний документ виду ""%1"" в поточній конфігурації не підтримується'");
					ТекстЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НовыйЭД.ВидЭД);
				Иначе
					ТекстЖурналаРегистрации = НСтр("ru='Необходимо проверить работу функции
                                                        |ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД'
                                                        |;uk='Необхідно перевірити роботу функції
                                                        |ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД'");
				КонецЕсли;
				ВидОперации = НСтр("ru='Заполнение документа на основе ЭД.';uk='Заповнення документа на основі ЕД.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
										ВидОперации, ТекстЖурналаРегистрации, ТекстСообщения);
				ОшибкаЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;
		// Дозаполняем структуру параметров из файла данных.
		СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаВладельца);
		СтруктураПараметров.Вставить("ВидЭД",      НовыйЭД.ВидЭД);
		НомерЭД = НовыйЭД.ИД;
		Если Не ЗначениеЗаполнено(НомерЭД) Тогда
			УИД = Новый УникальныйИдентификатор;
			НомерЭД = Строка(УИД) + "##1";
		КонецЕсли;
		СтруктураПараметров.Вставить("НомерЭД", НомерЭД);
		НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(НовыйЭД.ИД);
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерВерсииЭД = ОписаниеТипа.ПривестиЗначение(НомерВерсииЭД);
		СтруктураПараметров.Вставить("НомерВерсииЭД",             НомерВерсииЭД);
		СтруктураПараметров.Вставить("НаправлениеЭД",             НовыйЭД.НаправлениеЭД);
		НомерДокументаОтправителя = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Номер");
		СтруктураПараметров.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		НомерИсправления = ПолучитьРеквизитШапкиЭД(НовыйЭД, "НомерИсправления");
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			ШаблонНомера = НСтр("ru='%1 (испр. %2)';uk='%1 (випр. %2)'");
			НомерДокументаОтправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонНомера, НомерДокументаОтправителя, НомерИсправления);
			СтруктураПараметров.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
		КонецЕсли;
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Дата"));
		
		СуммаДокумента = ПолучитьРеквизитШапкиЭД(НовыйЭД, "СуммаДокумента");
		Если Не ЗначениеЗаполнено(СуммаДокумента) Тогда
			СуммаДокумента = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Сумма");
		КонецЕсли;
		СтруктураПараметров.Вставить("СуммаДокумента", СуммаДокумента);
		
		ОрганизацияПолучатель = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);
		Если ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
			СтруктураПараметров.Вставить("Организация", ОрганизацияПолучатель);
		Иначе
			
		КонецЕсли;
		СтруктураПараметров.Вставить("Контрагент", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент", ДеревоРазбора));
		
		ПространствоИмен = ПолучитьРеквизитШапкиЭД(НовыйЭД, "ПространствоИмен", ДеревоРазбора);
		Если ЗначениеЗаполнено(ПространствоИмен) Тогда
			ДополнительныеРеквизиты = Новый Структура;
			ДополнительныеРеквизиты.Вставить("ПространствоИмен", ПространствоИмен);
			
			СтруктураПараметров.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		КонецЕсли;
		
	КонецЕсли;
	СтруктураПараметров.Вставить("Загружен", НЕ ОшибкаЗаписи);
	
	Возврат СтруктураПараметров;
	
КонецФункции
 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает дерево с данными файла.
//
// Параметры:
//  ПолноеИмяФайла - Строка - Строка, путь к файлу.
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа.
//  ФайлДопДанных - Строка - путь к файлу с дополнительными данными.
//  ФайлКартинок - Строка - путь к файлу - архиву, содержащему картинки.
//
// Возвращаемое значение:
//  Структура - данные дерева.
//
Функция СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД = Неопределено, ФайлДопДанных = Неопределено, ФайлКартинок = Неопределено) Экспорт
	
	ДеревоРазбора = ЭлектронноеВзаимодействиеСлужебный.ИнициализироватьДеревоРазбора();
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ОбменСКонтрагентами");
	НовыйЭД = НайденныйТипВДереве.Строки.Добавить();
	
	Если НаправлениеЭД = Неопределено Тогда
		НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	Иначе 
		НовыйЭД.НаправлениеЭД = НаправлениеЭД;
	КонецЕсли;
	
	Если ФайлДопДанных <> Неопределено Тогда
		ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ФайлДопДанных);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Если ФайлКартинок <> Неопределено Тогда
		ДеревоКартинок = ДеревоКартинок(ФайлКартинок);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоКартинок", ДеревоКартинок);
	КонецЕсли;
	
	ОшибкаЧтенияЭД = Ложь;
	ПрочитатьФайлCMLпоXDTO(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД, ОшибкаЧтенияЭД);
	
	Если ОшибкаЧтенияЭД Тогда // ошибка разбора ЭД
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта"); // раздел ОбменСКонтрагентами
	СтрокаОбъекта = НайденнаяСтрока.Строки[0];
	
	Возврат Новый Структура("ДеревоРазбора, СтрокаОбъекта", ДеревоРазбора, СтрокаОбъекта);
	
	
КонецФункции

// Устанавливает состояние ЭД в "Обмен завершен с исправлением"
//
Процедура УстановитьСостояниеОбменЗавершенСИсправлением(ИзменяемыеДокументы) Экспорт
	
	Если ИзменяемыеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением;
	
	Исключения = Новый Массив;
	Исключения.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка);
	Исключения.Добавить(Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент);
	
	ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, Состояние, Исключения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
 
Функция СтруктураЭлектронногоДокумента(СсылкаНаОбъект, НастройкиОбменаЭД)
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("НаправлениеЭД",           Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель",             НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель",              НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД",           ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД",                 ВернутьИдЭД(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаЭД",                  ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД",              СсылкаНаОбъект);
	СтруктураЭД.Вставить("Организация",             СсылкаНаОбъект.Организация);
	
	СтруктураЭД.Вставить("Контрагент",           	НастройкиОбменаЭД.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО",      НастройкиОбменаЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД",            НастройкиОбменаЭД.СоглашениеЭД);
	СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
	ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
	ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
	СтруктураЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);
	
	Возврат СтруктураЭД;
	
КонецФункции

// Формирование ЭД CML из документов БД

// Возвращает результат успеха формирования файла ЭД с каталогом товаров
//
// Параметры:
//  ДеревоДанных - дерево значений для формирования ЭД.
//  МассивФайлов - если имеются присоединенные файлы - то в этом параметре возвращается массив файлов.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования ЭД.
//
Функция СформироватьКаталогCML(ДеревоДанных, МассивФайлов)
	
	ТекстОшибки = "";
	ФайлСформирован = Ложь;
	
	ПространствоИменСхемы = "urn:1C.ua:commerceml_2";
	Попытка
		
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		Каталог = ПолучитьОбъектТипаCML("Каталог", ПространствоИменСхемы);
		
		// Коммерческая информация.
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", XMLДатаВремя(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаФормирования")), Истина, ТекстОшибки);
		
		// Каталог.
		ЗаполнитьСвойствоXDTO(Каталог, "Ид", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "СодержитТолькоИзменения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"СодержитТолькоИзменения"), Ложь, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "Наименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование"), Истина, ТекстОшибки);
		
		// Владелец.
		Владелец = ПолучитьОбъектТипаCML("Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Владелец, ДеревоДанных, "Владелец", ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Каталог, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Товары.
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Каталог.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Каталог.Товары.Товар", ПространствоИменСхемы);
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки, МассивФайлов);
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Каталог, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Для каталога номенклатуры возможно передать только не подписанные данные
		ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, Каталог, ТекстОшибки);
		
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(Каталог, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "Каталог", Каталог, Истина, ТекстОшибки);
		// Запись файла электронного документа.
		КоммерческаяИнформация.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД с прайс-листом по схеме CML 2
// 
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьПрайсЛистCML(ДеревоДанных)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	
	Попытка
		
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		ПрайсЛист = ПолучитьОбъектТипаCML("ПакетПредложений", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "СодержитТолькоИзменения", Ложь, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Ид", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "ИдКаталога", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Наименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Описание", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Описание"), Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "ДействительноС", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДействительноС"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "ДействительноДо", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДействительноДо"), Истина, ТекстОшибки);
		
		// Владелец.
		Владелец = ПолучитьОбъектТипаCML("Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Владелец, ДеревоДанных, "Владелец", ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Владелец", Владелец, Истина, ТекстОшибки);
		
		// Предложения.
		ТаблицаТоваров = ВеткаТаблицыВДереве(ДеревоДанных, "Товары");
				
		// Если не найдена таблица, например,
		// ошибка в заполнении дерева документа
		// то не будем формировать пустой ЭД.
		Если ТаблицаТоваров = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Если у таблицы товаров нет строк,
		// то не будем формировать пустой ЭД.
		Если ТаблицаТоваров.Строки.Количество() = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Предложения = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения", ПространствоИменСхемы);
		Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров.Строки Цикл
			
			Предложение = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение", ПространствоИменСхемы);
			
			// Заполняем свойства товара.
			СформироватьДанныеПоТоваруCML_206(Предложение, СтрокаТаблицыТоваров, ПространствоИменСхемы, ТекстОшибки);
			// Заполняем свойства предложения.
			СформироватьДанныеПоТоваруПредложенияCML_206(Предложение, СтрокаТаблицыТоваров, ПространствоИменСхемы, ТекстОшибки);
			
			// Добавляем строку в список.
			Предложения.Предложение.Добавить(Предложение);
		КонецЦикла;
		ПрайсЛист.Предложения = Предложения;
		
		//  Заполняем таблицу "Типы цен".
		ТаблицаТипыЦен = ВеткаТаблицыВДереве(ДеревоДанных, "ТипыЦен");
		
		ТипыЦен = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен", ПространствоИменСхемы);
		Если ПустаяТаблицаДерева(ТаблицаТипыЦен) Тогда
			
			// Если тип цен не заполнен - заполним чем нибудь.
			ТипЦены = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены", ПространствоИменСхемы);
			ИдТипаЦены = Строка(Новый УникальныйИдентификатор);
			ЗаполнитьСвойствоXDTO(ТипЦены, "Ид", ИдТипаЦены, Истина, ТекстОшибки);
			ТипыЦен.ТипЦены.Добавить(ТипЦены)
			
		Иначе
			// Или тем, что есть в дереве.
			Для Каждого ТекСтрока Из ТаблицаТипыЦен.Строки Цикл
				
				ТипЦеныXDTO = ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены", ПространствоИменСхемы);
				ЗаполнитьТипЦены(ТекСтрока, ТипЦеныXDTO);
				
				ТипыЦен.ТипЦены.Добавить(ТипЦеныXDTO)
			КонецЦикла;
		КонецЕсли;
		// Добавляем типы цен в прайс.
		ПрайсЛист.ТипыЦен = ТипыЦен;
		
		// Для Прайс листа возможно передать только не подписанные данные
		ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, ПрайсЛист, ТекстОшибки);
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ПрайсЛист, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		// Проверяем XDTO.
		ПрайсЛист.Проверить();
		КоммерческаяИнформация.ПакетПредложений = ПрайсЛист;
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
 	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Заказ поставщику.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьЗаказCML(ДеревоДанных)
	
	ТекстОшибки = "";
	
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	
	Попытка
		
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		// Документ.
		ДокументПродажи = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Ид", Ид, Истина, ТекстОшибки);
		
		Номер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Номер", Номер, Истина, ТекстОшибки);
		
		Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Дата", Дата, Истина, ТекстОшибки);
		
		ХозОперация = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "ХозОперация", ХозОперация, Истина, ТекстОшибки);
		
		Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Комментарий = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комментарий");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Комментарий", Комментарий, Истина, ТекстОшибки);
		
		Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Курс", Курс, Истина, ТекстОшибки);
		
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Сумма", Сумма, Истина, ТекстОшибки);
		
		Роль = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Роль");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Роль", Роль, Истина, ТекстОшибки);

		// заполняем контрагентов
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		ВерсияСхемы = ОбменСКонтрагентамиПовтИсп.ВерсияСхемыCML2();
		
		// Определяем роль Контрагента и организации
		Если ВРег(Роль) = ВРег("Продавец") Тогда
			РольКонтрагента = "Покупатель";
			РольОрганизации = "Продавец";
		Иначе
			РольКонтрагента = "Продавец";
			РольОрганизации = "Покупатель";
		КонецЕсли;
		
		// Добавим в контрагенты Покупателя
		Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Покупатель, ДеревоДанных, РольОрганизации, ТекстОшибки);
		Покупатель.Роль = РольОрганизации;
		
		Если ВРег(Роль) = ВРег("Продавец") Тогда
			// Банковский счет из шапки документа помещаем в расширения контрагента в документе.
			ЗаполнитьБанковскийСчет(Покупатель, ДеревоДанных);
		КонецЕсли;
		
		Контрагенты.Контрагент.Добавить(Покупатель);
		
		// добавим в контрагенты Организацию
		Продавец = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Продавец, ДеревоДанных, РольКонтрагента, ТекстОшибки);
		Продавец.Роль = РольКонтрагента;
		
		Если ВРег(Роль) = ВРег("Покупатель") Тогда
			// Банковский счет из шапки документа помещаем в расширения контрагента в документе.
			ЗаполнитьБанковскийСчет(Продавец, ДеревоДанных);
		КонецЕсли;
		
		Контрагенты.Контрагент.Добавить(Продавец);
		
		// добавим в контрагенты Грузополучателя
		Получатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Получатель, ДеревоДанных, "Получатель", ТекстОшибки);
		Получатель.Роль = "Получатель";
		Контрагенты.Контрагент.Добавить(Получатель);
		
		ДокументПродажи.Контрагенты = Контрагенты;
		
		// Заполняем товары
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				// заполняем ИД товара, базовую единицу, штрихкод
				// т.е. те свойства которые относятся непосредственно к каталога товаров
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				
				Товары.Товар.Добавить(Товар);
				
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументПродажи, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Помещаем доп данные в ЗначенияРеквизитов документа
		ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПродажи, ТекстОшибки);
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		ДокументПродажи.Проверить();
		КоммерческаяИнформация.Документ.Добавить(ДокументПродажи);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет на оплату.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьСчетНаОплатуCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	
	Попытка
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		ДокументЭО = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		ХозОперация = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ХозОперация", ХозОперация, Истина, ТекстОшибки);
		
		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", Ид, Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", НомерДок, Истина, ТекстОшибки);
		
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", ДатаДок, Истина, ТекстОшибки);
		
		СрокПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокПлатежа");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "СрокПлатежа", СрокПлатежа, Истина, ТекстОшибки);
		
		Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Курс", Курс, Истина, ТекстОшибки);
		
		СуммаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Сумма", СуммаДок, Истина, ТекстОшибки);
		
		ЗаполнитьРасчетныйСчет(ДеревоДанных, ДокументЭО);
		
		// заполняем контрагентов
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		
		// Добавим в контрагенты Продавца
		Поставщик = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Поставщик, ДеревоДанных, "Продавец", ТекстОшибки);
		Контрагенты.Контрагент.Добавить(Поставщик);
		
		// добавим в контрагенты Покупателя
		Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Покупатель, ДеревоДанных, "Покупатель", ТекстОшибки);
		Контрагенты.Контрагент.Добавить(Покупатель);
		
		ДокументЭО.Контрагенты = Контрагенты;
		ДокументЭО.Роль = "Продавец";
		
		НДСИтог = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.СуммаНДС");
		НДСВходитВСтоимость = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.ЦенаВключаетНДС");
		
		Налог = ПолучитьОбъектТипаCML("Документ.Налоги.Налог", ПространствоИменСхемы);
		Налог.Наименование = "НДС";
		Налог.УчтеноВСумме = НДСВходитВСтоимость;
		Налог.Сумма = НДСИтог;
		
		ДокументЭОНалоги = ПолучитьОбъектТипаCML("Документ.Налоги", ПространствоИменСхемы);
		ДокументЭОНалоги.Налог.Добавить(Налог);
		
		ДокументЭО.Налоги = ДокументЭОНалоги;
		
		НомерДокументаОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.НомерДокументаОснования");
		ДатаДокументаОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.ДатаДокументаОснования");
		Если ЗначениеЗаполнено(НомерДокументаОснования) И ЗначениеЗаполнено(ДатаДокументаОснования) Тогда
			
			ДобавитьВЗначенияРеквизитовДокумента("НомерДокументаОснования", НомерДокументаОснования, ДокументЭО);
			ДобавитьВЗначенияРеквизитовДокумента("ДатаДокументаОснования", ДатаДокументаОснования, ДокументЭО);
			
			НаименованиеДокументаОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.НаименованиеДокументаОснования");
			КомментарийДокументаОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.Комментарий");
			
			ДобавитьВЗначенияРеквизитовДокумента("НаименованиеДокументаОснование", НаименованиеДокументаОснование, ДокументЭО);
			ДобавитьВЗначенияРеквизитовДокумента("КомментарийДокументаОснование", КомментарийДокументаОснование, ДокументЭО);
			
		КонецЕсли;
		
		ЧастичнаяОплата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ЧастичнаяОплата");
		Если Не ЗначениеЗаполнено(ЧастичнаяОплата) Тогда
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
		
		Если Не ЧастичнаяОплата Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			
			СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
			
			Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
				Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
				Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
					Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
					// заполняем ИД товара, базовую единицу, штрихкод
					// т.е. те свойства которые относятся непосредственно к каталога товаров
					СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
					
					Товары.Товар.Добавить(Товар);
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, Истина, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Формируем строку доп данных и файл
		ПоместитьДопДанныеШапки(ДеревоДанных, ДокументЭО, ТекстОшибки);
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		КоммерческаяИнформация.Документ.Добавить(ДокументЭО);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о списании комиссионного товара.
//
// Параметры:
//  СтруктураПараметров - структура параметров для формирования.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьОтчетОСписанииКомиссионногоТовараCML(ДеревоДанных)
	
	ТекстОшибки = "";
		
	Попытка
		
		ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
		
		// Коммерческая информация
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);

		ДокументЭО = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(ДокументЭО, "ХозОперация", "Отчет о списании комиссионного товара", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Роль", "Комитент", Истина, ТекстОшибки);

		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", Ид, Истина, ТекстОшибки);
		
		НомерДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", НомерДок, Истина, ТекстОшибки);
		
		ДатаДок = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", ДатаДок, Истина, ТекстОшибки);
		
		Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Курс", Курс, Истина, ТекстОшибки);
		
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Сумма", Сумма, Истина, ТекстОшибки);
		
		// заполняем контрагентов
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		ВерсияСхемы = ОбменСКонтрагентамиПовтИсп.ВерсияСхемыCML2();
		
		// Добавим в контрагенты Комитента
		Комитент = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Комитент, ДеревоДанных, "Комитент", ТекстОшибки);
		Комитент.Роль = "Комитент";
		Контрагенты.Контрагент.Добавить(Комитент);
		
		// добавим в контрагенты Организацию
		Комиссионер = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Комиссионер, ДеревоДанных, "Комиссионер", ТекстОшибки);
		Комиссионер.Роль = "Комиссионер";
		Контрагенты.Контрагент.Добавить(Комиссионер);
		
		ДокументЭО.Контрагенты = Контрагенты;
		
		// Заполняем товары
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
		
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				// заполняем ИД товара, базовую единицу, штрихкод
				// т.е. те свойства которые относятся непосредственно к каталога товаров
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		
		// Помещаем доп данные в ЗначенияРеквизитов документа
		ПоместитьДопДанныеШапки(ДеревоДанных, ДокументЭО, ТекстОшибки);
		
		ИтоговаяСтрока = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогиПрописью");
		ДобавитьВЗначенияРеквизитовДокумента("ИтогиПрописью", ИтоговаяСтрока, ДокументЭО);
		
		ИтогоПоДокументу = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу");
		ДобавитьВЗначенияРеквизитовДокумента("ИтогоПоДокументу", ИтогоПоДокументу, ДокументЭО);
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		КоммерческаяИнформация.Документ.Добавить(ДокументЭО);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
//
// Параметры:
// ДеревоДанных - Дерево Значений - Дерево значений, содержащее данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьОтчетОПродажахКомиссионногоТовараCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	Попытка
		
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		// Документ.
		ДокументПродажи = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Ид", Ид, Истина, ТекстОшибки);
		
		Номер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Номер", Номер, Истина, ТекстОшибки);
		
		Дата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Дата", Дата, Истина, ТекстОшибки);
		
		ХозОперация = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "ХозОперация", ХозОперация, Истина, ТекстОшибки);
		
		Роль = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Роль");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Роль", Роль, Истина, ТекстОшибки);
		
		Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Курс = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Курс", Курс, Истина, ТекстОшибки);
		
		Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Сумма", Сумма, Истина, ТекстОшибки);
		
		ИтоговаяСтрока = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогиПрописью");
		ДобавитьВЗначенияРеквизитовДокумента("ИтогиПрописью", ИтоговаяСтрока, ДокументПродажи);
		
		// заполняем контрагентов
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		ВерсияСхемы = ОбменСКонтрагентамиПовтИсп.ВерсияСхемыCML2();
		
		// Добавим в контрагенты Комитента
		Комитент = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Комитент, ДеревоДанных, "Комитент", ТекстОшибки);
		Комитент.Роль = "Комитент";
		Контрагенты.Контрагент.Добавить(Комитент);
		
		// добавим в контрагенты Организацию
		Комиссионер = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Комиссионер, ДеревоДанных, "Комиссионер", ТекстОшибки);
		Комиссионер.Роль = "Комиссионер";
		Контрагенты.Контрагент.Добавить(Комиссионер);
		
		ДокументПродажи.Контрагенты = Контрагенты;
		
		// Помещаем доп данные в ЗначенияРеквизитов документа
		ПоместитьДопДанныеШапки(ДеревоДанных, ДокументПродажи, ТекстОшибки);
		
		// Заполняем товары
		Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			МассивДобавленныхПокупателей = Новый Массив;
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				// заполняем ИД товара, базовую единицу, штрихкод
				// т.е. те свойства которые относятся непосредственно к каталога товаров
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				
				// заполняем свойства товара, которые относятся к документу
				СформироватьДанныеПоТабЧастиТоварыДокументаCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
				
				
				// Добавим в контрагенты покупателя
				Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ТекущийТовар, "Товары.НомерСтроки.Покупатель") Тогда
					Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
					ДопДанные = Новый Структура;
					ЗаполнитьДанныеУчастникаCML(Покупатель, ТекущийТовар, "Товары.НомерСтроки.Покупатель", ТекстОшибки, ДопДанные);
					ИдПокупателя = "";
					Если ДопДанные.Свойство("Ид", ИдПокупателя) Тогда
						Если МассивДобавленныхПокупателей.Найти(ИдПокупателя) = Неопределено Тогда
							Покупатель.Роль = "Покупатель";
							Контрагенты.Контрагент.Добавить(Покупатель);
							МассивДобавленныхПокупателей.Добавить(ИдПокупателя);
						КонецЕсли;
						
						ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ДополнительныеЗначенияРеквизитов", ПространствоИменСхемы);
						ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ИдПокупателя", Истина, ТекстОшибки);
						ЗначениеРеквизита.Значение.Добавить(ИдПокупателя);
						ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
						
						// Для совместимости с более ранними версиями БЭД необходимо передать еще 3 реквизита:
						ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательНаименование", Истина, ТекстОшибки);
						ЗначениеРеквизита.Значение.Добавить(ДопДанные.Наименование);
						ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
						
						ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательИНН", Истина, ТекстОшибки);
						ЗначениеРеквизита.Значение.Добавить(ДопДанные.ИНН);
						ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
						
						ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
						ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", "ПокупательКПП", Истина, ТекстОшибки);
						ЗначениеРеквизита.Значение.Добавить(ДопДанные.КПП);
						ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
						Товар.ДополнительныеЗначенияРеквизитов = ЗначенияРеквизитов;
					КонецЕсли;
				КонецЕсли;
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			
			ЗаполнитьСвойствоXDTO(ДокументПродажи, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(ДокументПродажи, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		ДокументПродажи.Проверить();
		КоммерческаяИнформация.Документ.Добавить(ДокументПродажи);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;

		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Соглашение об и.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений, содержит данные для формирования ЭД.
//
// Возвращаемое значение:
//  Булево - признак успеха формирования.
//
Функция СформироватьАктНаПередачуПравCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ФайлСформирован = Ложь;
	
	ПространствоИменСхемы = "urn:1C.ua:commerceml_2";
	Попытка
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		Документ = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		// Коммерческая информация.
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);

		ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", XMLДатаВремя(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаФормирования")), Истина, ТекстОшибки);
		
		// Документ.
		ЗаполнитьСвойствоXDTO(Документ, "Ид",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Номер",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"),	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Дата",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ХозОперация",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация"),Истина,ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Роль",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Роль"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Валюта",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта"),	Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Курс",			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс"),		Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Сумма",		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма"),	Истина, ТекстОшибки);
		
		// Лицензиар.
		Лицензиар = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Лицензиар, ДеревоДанных, "Лицензиар", ТекстОшибки);
		
		// Лицензиат.
		Лицензиат = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Лицензиат, ДеревоДанных, "Лицензиат", ТекстОшибки);
		
		Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		Контрагенты.Контрагент.Добавить(Лицензиар);
		Контрагенты.Контрагент.Добавить(Лицензиат);
		
		// Плательщик.
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Плательщик") = Истина Тогда
			Плательщик = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
			ЗаполнитьДанныеУчастникаCML(Плательщик, ДеревоДанных, "Плательщик", ТекстОшибки);
			Контрагенты.Контрагент.Добавить(Плательщик);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "Контрагенты", Контрагенты, Истина, ТекстОшибки);
		
		// СрокПлатежа.
		СрокПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокПлатежа");
		Если ЗначениеЗаполнено(СрокПлатежа) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "СрокПлатежа", СрокПлатежа, , ТекстОшибки);
		КонецЕсли;
		
		// Комментарий.
		Комментарий = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Комментарий");
		Если ЗначениеЗаполнено(Комментарий) Тогда
			ЗаполнитьСвойствоXDTO(Документ, "Комментарий", Комментарий, , ТекстОшибки);
		КонецЕсли;
		
		// Налоги.
		Налоги = ДеревоДанных.Строки.Найти("Налоги", "ПолныйПуть");
		Если ЗначениеЗаполнено(Налоги.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(Налоги, "Документ.Налоги", "Налог", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "Налоги", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Скидки.
		Скидки = ДеревоДанных.Строки.Найти("Скидки", "ПолныйПуть");
		Если ЗначениеЗаполнено(Скидки.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(Скидки, "Документ.Скидки", "Скидка", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "Скидки", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// ДопРасходы.
		ДопРасходы = ДеревоДанных.Строки.Найти("ДопРасходы", "ПолныйПуть");
		Если ЗначениеЗаполнено(ДопРасходы.Значение) Тогда
			Реквизит = ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(ДопРасходы, "Документ.ДопРасходы", "ДопРасход", ПространствоИменСхемы, ТекстОшибки);
			Если Реквизит <> Неопределено Тогда
				ЗаполнитьСвойствоXDTO(Документ, "ДопРасходы", Реквизит, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		// Товары.
		СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
		Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
				Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
				
				СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
					
				Товары.Товар.Добавить(Товар);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Документ, "Товары", Товары, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Формируем строка и файл доп данных
		ПоместитьДопДанныеШапки(ДеревоДанных, Документ, ТекстОшибки);
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "Имя", "", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЗаполнитьСвойствоXDTO(Документ, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		КоммерческаяИнформация.Документ.Добавить(Документ);
		
		// Запись файла электронного документа.
		КоммерческаяИнформация.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Функция СформироватьРеквизитыОрганизацииCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	
	Попытка
		
		Контрагент = ПолучитьОбъектТипаCML("Контрагент", ПространствоИменСхемы);
		ЗаполнитьКонтрагентаCML(Контрагент, ДеревоДанных, "Организация", ТекстОшибки);
		
		Контрагент.Проверить();
		
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Контрагент, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
		ФайлСформирован = Истина;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции


Процедура ЗаполнитьСтруктуруСлужебныхПолей(СтруктураЭД, СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("ВерсияСхемы", СтруктураЭД.ВерсияСхемы);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	
КонецПроцедуры

Процедура СтруктураСлужебныхПолей(СтруктураСлужебныеПоля = Неопределено)
	
	Если ТипЗнч(СтруктураСлужебныеПоля) <> Тип("Структура") Тогда
		СтруктураСлужебныеПоля = Новый Структура;
	КонецЕсли;
	
	СтруктураСлужебныеПоля.Вставить("ДатаФормирования");
	СтруктураСлужебныеПоля.Вставить("ВерсияСхемы");
	СтруктураСлужебныеПоля.Вставить("Ид");
	СтруктураСлужебныеПоля.Вставить("ВидЭД");
	СтруктураСлужебныеПоля.Вставить("НаправлениеЭД");
	
КонецПроцедуры

// Структура адреса содержит все возможные варианты заполнения адреса:
// Тип адреса выбирается из списка значений ТипыАдресов и заполняется
// соответствующая структура, описанная в значении элемента списка.
// Пометка в списке типов должна быть одна, иначе будет браться первый тип адреса
// с пометкой и по этому типу будут заполняться данные адреса в ЭД.
//
Функция СтруктураАдреса()
	
	СтруктураАдреса = Новый Структура;
	
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	СтруктураАдреса.Вставить("ОбязательныеПоля", "КодРегион");

	
	ТипыАдресов = Новый СписокЗначений;
	ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);
	ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);
	
	Возврат ТипыАдресов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка обязательных полей

Функция ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ТЗ, Знач ПоляТЗ, ИмяТЗ, ТекстОшибки)
	
	Если ТЗ.Количество() > 0 Тогда
		МассивОбязательныхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляТЗ);
		КоличествоКолонок = МассивОбязательныхКолонок.Количество();
		Для Индекс = 1 По КоличествоКолонок Цикл
			Элемент = СокрЛП(МассивОбязательныхКолонок[КоличествоКолонок - Индекс]);
			// Доп. проверка наличия обязательных колонок во вложенных таблицах см. функцию Акт501СтруктураПараметров.
			Если Найти(Элемент, ".") = 0 И ТЗ.Колонки.Найти(Элемент) = Неопределено Тогда
					ШаблонОшибки = НСтр("ru='В таблице ""%1"" отсутствует обязательная к заполнению колонка: ""%2.""';uk='В таблиці ""%1"" відсутня обов''язкова до заповнення колонка: ""%2.""'");
					ПользовательскоеПредставление = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(
																												Источник,
																												Элемент);
					ТекстТекущейОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ШаблонОшибки,
																	ИмяТЗ,
																	ПользовательскоеПредставление);
					ТекстОшибки = ТекстОшибки + ТекстТекущейОшибки + Символы.ПС;
					МассивОбязательныхКолонок.Удалить(КоличествоКолонок - Индекс);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого Строка Из ТЗ Цикл
			Для Каждого Элемент Из МассивОбязательныхКолонок Цикл
				Элемент = СокрЛП(Элемент);
				// Проверка заполненности обязательных полей во вложенных таблицах см. функцию Акт501СтруктураПараметров.
				Если Найти(Элемент, ".") <> 0 Тогда
					ВложеннаяТаблица = Лев(Элемент, Найти(Элемент, ".") - 1);
					ОбязательныйПараметрВложеннойТаблицы = Сред(Элемент, Найти(Элемент, ".") + 1);
					
					ПользовательскоеПредставлениеТЗ = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(
						Источник, ВложеннаяТаблица);
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, Строка[ВложеннаяТаблица], ОбязательныйПараметрВложеннойТаблицы,
						ПользовательскоеПредставлениеТЗ, ТекстОшибки);
				Иначе
					ЗначениеПараметра = Строка[Элемент];
					Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
						ПроверитьЗаполнениеОбязательныхПолей(ЗначениеПараметра, ТекстОшибки);
						
					ИначеЕсли Не ЗначениеЗаполнено(ЗначениеПараметра) И Не ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
						ШаблонОшибки = НСтр("ru='В строке №%1 таблицы ""%2"" не заполнено значение ""%3.""';uk='У рядку №%1 таблиці ""%2"" не заповнено значення ""%3.""'");
						
						ПользовательскоеПредставление = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
							Элемент);
						ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
							ТЗ.Индекс(Строка) + 1, ИмяТЗ, ПользовательскоеПредставление) + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ШаблонОшибки = НСтр("ru='Не заполнена обязательная таблица: ""%1.""';uk='Не заповнена обов''язкова таблиця: ""%1.""'");
		ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяТЗ) + Символы.ПС;
	КонецЕсли;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

// Проверяет заполнение обязательных полей в СтруктуреПараметров, если значением
// обязательного поля является вложенная структура, то она рекурсивно проверяется
// в этой же функции, если значением обязательного поля является вложенная таблица
// значений, то она передается на проверку в функцию ПроверитьЗаполнениеОбязательныхПолейТЗ.
// Список обязательных полей проверяемой структуры, берется из значения элемента
// структуры с ключем "ОбязательныеПоля".
// Список обязательных колонок таблицы значений, берется из значения элемента структуры
// с ключом "ОбязательныеПоляТаблицыЗначений".
//
// Параметры:
//  Источник             - ссылка - ссылка на объект информационной базы.
//  СтруктураПараметров  - структура - проверяемая структура с данными.
//  ТекстОшибки - Строка - строка содержащая описание незаполненных полей
//    проверяемой структуры, может быть показана пользователю в вызывающей процедуре.
//
// Возвращаемое значение:
//  ПараметрыЗаполнены - Булево - Истина - если обязательные поля заполнены, иначе - Ложь.
//
Функция ПроверитьЗаполнениеОбязательныхПолей(Источник, СтруктураПараметров, ТекстОшибки = "")
	
	ОбязательныеПоля = "";
	ЗначениеПараметра = "";
	ДанныеПодготовлены = Ложь;
	
	Если СтруктураПараметров.Свойство("ДанныеПодготовлены", ДанныеПодготовлены) И НЕ ДанныеПодготовлены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СообщениеОбОшибке = Неопределено;
	Если СтруктураПараметров.Свойство("ТекстОшибки", СообщениеОбОшибке) И ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ТекстОшибки = СообщениеОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = СтруктураПараметров;
	Если СтруктураПараметров.Свойство("ОбязательныеПоля", ОбязательныеПоля) Тогда
		СтруктураОбязательныхПолей = Новый Структура(ОбязательныеПоля);
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураОбязательныхПолей Цикл
		Если СтруктураПараметров.Свойство(Элемент.Ключ, ЗначениеПараметра) Тогда
			Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
				ПроверитьЗаполнениеОбязательныхПолей(Источник, ЗначениеПараметра, ТекстОшибки);
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
				ПоляТЗ = "";
				ПользовательскоеПредставлениеТЗ = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
					Элемент.Ключ);
				Если СтруктураПараметров.Свойство("ОбязательныеПоляТаблицыЗначений", ПоляТЗ) Тогда
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ЗначениеПараметра, ПоляТЗ, ПользовательскоеПредставлениеТЗ,
						ТекстОшибки);
				Иначе
					ШаблонОшибки = НСтр("ru='Не заполнен перечень обязательных полей таблицы: ""%1"".';uk='Не заповнений перелік обов''язкових полів таблиці: ""%1"".'");
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставлениеТЗ) + Символы.ПС;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСЗ Из ЗначениеПараметра Цикл
					Если ЭлементСЗ.Пометка Тогда
						СтруктураПроверки = Новый Структура("Элемент", ЭлементСЗ.Значение);
						ПроверитьЗаполнениеОбязательныхПолей(Источник, СтруктураПроверки, ТекстОшибки);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) И Не ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
					ШаблонОшибки = НСтр("ru='Не заполнено обязательное поле структуры параметров: ""%1"".';uk='Не заповнено обов''язкове поле структури параметрів: ""%1"".'");
					
					ПользовательскоеПредставление = ОбменСКонтрагентамиПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
						Элемент.Ключ);
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставление) + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ШаблонОшибки = НСтр("ru='Отсутствует обязательное поле в структуре параметров: ""%1"".';uk='Відсутнє обов''язкове поле в структурі параметрів: ""%1"".'");
			ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				Элемент.Ключ) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение файлов

Процедура ЗаполнитьДанныеПокупателя(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
	
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		
		ДанныеПокупателя.Вставить("ГрузПолучилДолжность", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилДолжность"));
		ДанныеПокупателя.Вставить("ГрузПолучилФИО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилФИО"));
		ДанныеПокупателя.Вставить("ДатаПолучения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗаказчика(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеЗаказчика)
	
	Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);
	
	Если Результат <> Неопределено Тогда
	
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		ДанныеЗаказчика.Вставить("Претензии", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Претензии"));
		
		ДанныеЗаказчика.Вставить("ПринялДолжность", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПринялДолжность"));
		ДанныеЗаказчика.Вставить("ПринялФИО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПринялФИО"));
		ДанныеЗаказчика.Вставить("ДатаПолучения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML(Товар, СтруктураПараметров, ТекстОшибки, ВерсияСхемы = "4.01")
	
	// Формируем ИД товара.
	Если ЗначениеЗаполнено(СтруктураПараметров.Ид) Тогда
		ИДТовара = СтруктураПараметров.Ид;
	Иначе
		Номенклатура = СтруктураПараметров.Номенклатура;
		ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
		
		ИДХарактеристики = ""; ИДУпаковки = "";
		Если СтруктураПараметров.Владелец().Колонки.Найти("Характеристика") <> Неопределено Тогда
			Характеристика = СтруктураПараметров.Характеристика;
			ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
		КонецЕсли;
		Если СтруктураПараметров.Владелец().Колонки.Найти("Упаковка") <> Неопределено Тогда
			Упаковка = СтруктураПараметров.Упаковка;
			ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
		КонецЕсли;
		
		ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Товар, "Ид", ИДТовара, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ШтрихКод") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", СтруктураПараметров.ШтрихКод, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Артикул") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Артикул", СтруктураПараметров.Артикул, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ИДТовара") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ИДТовара", СтруктураПараметров.ИДТовара, , ТекстОшибки);
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(Товар, "Наименование", СтруктураПараметров.Наименование, Истина, ТекстОшибки);
	
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ВерсияСхемы);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", СтруктураПараметров.БазоваяЕдиницаКод, Истина, ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Наименование", СтруктураПараметров.БазоваяЕдиницаНаименование, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", СтруктураПараметров.БазоваяЕдиницаНаименованиеПолное, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", СтруктураПараметров.БазоваяЕдиницаМеждународноеСокращение, , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Описание") <> Неопределено Тогда
		ЗаполнитьСвойствоXDTO(Товар, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ДополнительныеРеквизиты") <> Неопределено
		И СтруктураПараметров.ДополнительныеРеквизиты <> Неопределено Тогда
		
		Для Каждого Элемент Из СтруктураПараметров.ДополнительныеРеквизиты Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ВерсияСхемы);
			ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Элемент.Ключ, Истина, ТекстОшибки);
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из Элемент.Значение Цикл
					// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
					Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
						Если ТипЗнч(ЭлементМассива) = Тип("СписокЗначений") Тогда
							ЗаполненныйТип = Неопределено;
							Для Каждого Элемент Из ЭлементМассива Цикл
								Если Элемент.Пометка Тогда
									ЗаполненныйТип = Элемент;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
								Адрес = ЗаполненныйТип.Значение;
								Если ЗаполненныйТип.Представление = "Структурированный" Тогда
									ЭлементМассива = СобратьАдрес(Адрес);
								Иначе
									ЭлементМассива = Адрес.АдресСтрокой;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ЗначениеРеквизита.Значение.Добавить(ЭлементМассива)
				КонецЦикла;
			Иначе
				// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
				Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
					Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
						ЗаполненныйТип = Неопределено;
						Для Каждого Элемент Из Элемент.Значение Цикл
							Если Элемент.Пометка Тогда
								ЗаполненныйТип = Элемент;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
							Адрес = ЗаполненныйТип.Значение;
							Если ЗаполненныйТип.Представление = "Структурированный" Тогда
								Элемент.Значение = СобратьАдрес(Адрес);
							Иначе
								Элемент.Значение = Адрес.АдресСтрокой;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЗначениеРеквизита.Значение.Добавить(Элемент.Значение)
			КонецЕсли;
			
			Товар.ДополнительныеРеквизиты.Добавить(ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, СтруктураПараметров, ТекстОшибки, МассивКолонок)
	
	Для каждого Колонка Из МассивКолонок Цикл
		Если Колонка = "ВидОплаты" Тогда
			
			Если СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Аванс (до обеспечения)")
				ИЛИ СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Аванс (до подтверждения)") Тогда
				ВариантОплаты = "Аванс";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Кредит (после отгрузки)")
				ИЛИ СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Кредит (после поступления)") Тогда
				ВариантОплаты = "Кредит";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Предоплата (до отгрузки)")
				ИЛИ СтруктураПараметров.ВидОплаты = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Предоплата (до поступления)") Тогда
				ВариантОплаты = "Предоплата";
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ВидОплаты", ВариантОплаты, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ДатаПлатежа" Тогда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ДатаПлатежа", XMLДата(СтруктураПараметров.ДатаПлатежа), Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ПроцентПлатежа" Тогда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ПроцентПлатежа", СтруктураПараметров.ПроцентПлатежа, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "СуммаПлатежа" Тогда
			ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"СуммаПлатежа", СтруктураПараметров.СуммаПлатежа, Истина, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураПараметров, ТекстОшибки)
	
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", СокрЛП(СтруктураПараметров.ЕдиницаИзмеренияКод), , ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование", СтруктураПараметров.ЕдиницаИзмеренияНаименование, ,ТекстОшибки);
	ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент", СтруктураПараметров.Коэффициент, , ТекстОшибки);
	
КонецПроцедуры

Процедура УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки)
	
	Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);
	Исключение
		ШаблонСообщения = НСтр("ru='Выполнение операции: Заполнение XDTO.
            |Ошибка установки значения свойства ""%1""!'
            |;uk='Виконання операції: Заповнення XDTO.
            |Помилка встановлення значення властивості ""%1""!'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 2);
	КонецПопытки
	
КонецПроцедуры

Функция XMLЧисло(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция XMLДатаВремя(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;
	
	Возврат "0001-01-01T00:00:00";
	
КонецФункции

Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

Функция ДатаДД_ММ_ГГГГ(ДатаВремя)
	
	Если ТипЗнч(ДатаВремя) = Тип("Дата") Тогда
		ВозврЗначение = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Иначе
		ВозврЗначение = Лев(ДатаВремя, 10);
	КонецЕсли;
	
	Возврат ВозврЗначение;
	
КонецФункции

Функция ВернутьНомерВерсииИзИдЭД(ИдОтправителя)
	
	НомерВерсии = 0;
	НачПозиция = Найти(ИдОтправителя, "##");
	Если НачПозиция > 0 Тогда
		НомерВерсии = Сред(ИдОтправителя, НачПозиция + 2, СтрДлина(ИдОтправителя) - (НачПозиция + 1));
	КонецЕсли;
	
	Возврат НомерВерсии;
	
КонецФункции 

Процедура ЗаполнитьРасчетныйСчет(ДеревоДанных, ДокументXDTO)
	
	НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.НомерСчета");
	
	СтруктураСчет = Новый Структура("НомерСчета, БИК, СчетКорреспондентский, НаименованиеБанка, БикКорр,
			|СчетКорр, НаименованиеКорр");
	
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		
		// заполняем расчетный счет
		СтруктураСчет.НомерСчета = НомерСчета;
		
		// заполняем банк
		
		БикБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.БИК", Ложь);
		Если ЗначениеЗаполнено(БикБанка) Тогда
			СтруктураСчет.БИК = БикБанка;
		КонецЕсли;
		
		СчетКорреспондентский = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.СчетКорреспондентский", Ложь);
		Если ЗначениеЗаполнено(СчетКорреспондентский) Тогда	
			СтруктураСчет.СчетКорреспондентский = СчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.Наименование", Ложь);
		Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
			СтруктураСчет.НаименованиеБанка = НаименованиеБанка;
		КонецЕсли;
		
		// заполняем банк корреспондент
		
		БикКорБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.БИК");
		
		Если ЗначениеЗаполнено(БикКорБанка) Тогда
			СтруктураСчет.БикКорр = БикКорБанка;
		КонецЕсли;
		
		КорСчетКорреспондентский = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский");
		Если ЗначениеЗаполнено(КорСчетКорреспондентский) Тогда
			СтруктураСчет.СчетКорр = КорСчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеКорБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.Наименование");
		Если ЗначениеЗаполнено(НаименованиеКорБанка) Тогда
			СтруктураСчет.НаименованиеКорр =  НаименованиеКорБанка;
		КонецЕсли;
		
		ПоместитьСтруктуруВЗначениеРеквизита("РасчетныйСчет", СтруктураСчет, ДокументXDTO);
	
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// CML

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = ЭлектронноеВзаимодействиеСлужебный.МассивПодстрок(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ПолучитьЗначениеТипаCML(Тип, Значение)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипЗначения = ПолучитьТипЗначенияCML(Тип);
	Иначе
		ТипЗначения = Тип;
	КонецЕсли;
	
	Если ТипЗначения = Неопределено Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	НовоеЗначение = ФабрикаXDTO.Создать(ТипЗначения, Значение);
	
	Возврат НовоеЗначение;
	
КонецФункции


Процедура ДобавитьВЗначенияРеквизитовДокумента(НаименованиеРеквизита, ДобавляемоеЗначение, ДокументXDTO)
	
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	ЗначенияРеквизитаДокумента = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
	ЗначенияРеквизитаДокумента.Наименование = НаименованиеРеквизита;
	
	Если ТипЗнч(ДобавляемоеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ДобавляемоеЗначение Цикл
			ЗначенияРеквизитаДокумента.Значение.Добавить(ЭлементМассива);
		КонецЦикла;
	ИначеЕсли Найти(НаименованиеРеквизита, "СтавкаНДС") > 0 Тогда
		ЗначенияРеквизитаДокумента.Значение.Добавить(ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, ДобавляемоеЗначение));
		
	Иначе
		ЗначенияРеквизитаДокумента.Значение.Добавить(ДобавляемоеЗначение)
		
	КонецЕсли;
	
	Если ДокументXDTO.ЗначенияРеквизитов = Неопределено Тогда
		
		Если ДокументXDTO.Тип() = ПолучитьТипОбъектаCML("Документ", ПространствоИменСхемы) Тогда
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.ЗначенияРеквизитов", ПространствоИменСхемы);
			
		ИначеЕсли ДокументXDTO.Тип() = ПолучитьТипОбъектаCML("ПакетПредложений", ПространствоИменСхемы) Тогда
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML("ПакетПредложений.ЗначенияРеквизитов", ПространствоИменСхемы);
	
		Иначе
			ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML("Товар.ЗначенияРеквизитов", ПространствоИменСхемы);
		КонецЕсли;
		
		ДокументXDTOЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначенияРеквизитаДокумента);
		
		ДокументXDTO.ЗначенияРеквизитов = ДокументXDTOЗначенияРеквизитов;
	Иначе
		
		ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначенияРеквизитаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипЦены(СтрокаДерева, ТипЦеныXDTO)
	
	ТипЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ТипЦены");
	ИдТипаЦены = Строка(ТипЦены.УникальныйИдентификатор());
	ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Ид", ИдТипаЦены);
	
	Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.Наименование");
	ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Наименование", Наименование);
	
	Валюта = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.Валюта");
	ЗаполнитьСвойствоXDTO(ТипЦеныXDTO, "Валюта", Валюта);
	
	Налог = ВеткаТаблицыВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ВключаетНДС");
	Если Не ЗначениеЗаполнено(Налог) Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	
	
	НалогТипаЦены =  ПолучитьОбъектТипаCML("ПакетПредложений.ТипыЦен.ТипЦены.Налог", ПространствоИменСхемы);
	
	
	ЗаполнитьСвойствоXDTO(НалогТипаЦены, "Наименование", "НДС");
	
	УчтеноВСумме = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДерева, "ТипыЦен.НомерСтроки.ВключаетНДС");
	ЗаполнитьСвойствоXDTO(НалогТипаЦены, "УчтеноВСумме", УчтеноВСумме);
	
	
	ЗаполнитьСвойствоXDTO(НалогТипаЦены, "Акциз", Ложь);
	
	ТипЦеныXDTO.Налог.Добавить(НалогТипаЦены);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Дерево значений

Функция ВеткаТаблицыВДереве(СтрокаДерева, ИмяРеквизита)
	
	НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита,"ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока;
	КонецЕсли;

КонецФункции

Функция ПустаяТаблицаДерева(ТаблицаТипыЦен)
	
	ТаблицаПустая = Ложь;
	
	Если ТаблицаТипыЦен = Неопределено Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	Если ТаблицаТипыЦен.Строки.Количество() = 0 Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	ЗначениеНомераСтройки = ТаблицаТипыЦен.Строки[0].Значение;
	
	Если Не ЗначениеЗаполнено(ЗначениеНомераСтройки) Тогда
		ТаблицаПустая = Истина;
	КонецЕсли;
	
	Возврат ТаблицаПустая;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Разбор файлов


Процедура ПрочитатьСчетНаОплатуXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Сумма);
	 
	НазначениеПлатежа = ЗначениеДопРеквизитаДокумента("НазначениеПлатежа", ЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияДействияСчета", ЭД.СрокПлатежа);
	
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		
		КодВалюты = ЭД.Получить(СвойствоЭД);
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Если ЗначениеЗаполнено(Валюта) Тогда
				ДопРеквизиты.Вставить("Наименование", Валюта.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", Валюта.НаименованиеПолное);
			КонецЕсли;
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ЭД.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметрыКонтрагента = Неопределено;
	СвойствоРасчетныйСчет = ЗначениеДопРеквизитаДокумента("РасчетныйСчет", ЭД);
	
	Если Не СвойствоРасчетныйСчет = Неопределено Тогда
		СтруктураРасчетныйСчет =  РеквизитыРасчетногоСчета(СвойствоРасчетныйСчет, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
		ДопПараметрыКонтрагента = Новый Структура;
		ДопПараметрыКонтрагента.Вставить("РасчетныйСчет", СтруктураРасчетныйСчет);
		
	КонецЕсли;
	
	Для Каждого ТекКонтрагент Из ЭД.Контрагенты.Контрагент Цикл
		
		Если ТекКонтрагент.Роль = "Продавец" Тогда
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				Роль = "Продавец";
	
			ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				Роль = "Покупатель";
			КонецЕсли;
	
		КонецЕсли;
		
		Если ТекКонтрагент.Роль = "Покупатель" Тогда
			Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				Роль = "Покупатель";
				
			ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				Роль = "Продавец";
			КонецЕсли;
			
		КонецЕсли;
		
		ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль, ДопПараметрыКонтрагента);
		
	КонецЦикла;
	
	СуммаИтог = ЗначениеДопРеквизитаДокумента("СуммаИтог", ЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог", СуммаИтог);
	
	СвойствоЭД = ЭД.Свойства().Получить("Налоги");
	НалогиДокументуXDTO = ЭД.Получить(СвойствоЭД);
	СуммаНалогаИтог = 0;
	СуммаВключаетНДС = Ложь;
	
	Для Каждого НалогДокумента Из НалогиДокументуXDTO.Налог Цикл
		
		СуммаНалогаИтог = СуммаНалогаИтог + НалогДокумента.Сумма;
		
		Если НалогДокумента.Наименование = "НДС" Тогда
			СуммаВключаетНДС = НалогДокумента.УчтеноВСумме;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", СуммаВключаетНДС);
	
	ИтогиПрописью = ЗначениеДопРеквизитаДокумента("ИтогиПрописью", ЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ИтогиПрописью);
	
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	Если СвойствоЭД <> Неопределено И ЭД.Получить(СвойствоЭД) <> Неопределено Тогда
		НаборДанных = ЭД["Товары"].Товар;
		ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
	КонецЕсли;
	
	Если ТипЗнч(ЭД.Подписанты) = Тип("ОбъектXDTO") Тогда
		Для Каждого Подписант Из ЭД.Подписанты.Подписант Цикл
			
			Если ВРег(Подписант.Должность) = ВРег("Руководитель") Тогда
				Руководитель = Подписант.Фамилия + " " + Подписант.Имя + " " + Подписант.Отчество;
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель);
			ИначеЕсли ВРег(Подписант.Должность) = ВРег("Бухгалтер") Тогда
				Бухгалтер = Подписант.Фамилия + " " + Подписант.Имя + " " + Подписант.Отчество;
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бухгалтер", Бухгалтер);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	СвойствоЭД = ЗначениеДопРеквизитаДокумента("ГрафикОплаты", ЭД);
	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(СвойствоЭД, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	
	// Значения реквизитов
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	
	ДопРеквизиты = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопРеквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка, ДопРеквизиты);
	
	Если Не ЭД.ЗначенияРеквизитов = Неопределено Тогда
		ПрочитатьСписокЗначенийРеквизитовCML(ЭД.ЗначенияРеквизитов.ЗначениеРеквизита, НовыйЭД, Ошибка, ДопРеквизиты);
	КонецЕсли;
	
	НомерДокументаОснования = ЗначениеДопРеквизитаДокумента("НомерДокументаОснования", ЭД);
	Если Не НомерДокументаОснования = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерДокументаОснования", НомерДокументаОснования);
	КонецЕсли;
	
	ДатаДокументаОснования = ЗначениеДопРеквизитаДокумента("ДатаДокументаОснования", ЭД);
	Если Не ДатаДокументаОснования = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаДокументаОснования", ДатаДокументаОснования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗаказXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Уникальный номер ЭД в разрезе участников обмена
	НовыйЭД.ИД = ЭД.Ид;
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторДокумента", ЭД.Ид);
	
	Если ЭД.Роль = "Покупатель" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
	ИначеЕсли ЭД.Роль = "Продавец" Тогда
		НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Сумма", ЭД.Сумма);
	
	НазначениеПлатежа = ЗначениеДопРеквизитаДокумента("НазначениеПлатежа", ЭД);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);
	
	Если НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если ВРег(ЭД.Роль) = ВРег("Покупатель") Тогда
			РольКонтрагента = "Продавец";
			РольОрганизации = "Покупатель";
		Иначе
			РольКонтрагента = "Покупатель";
			РольОрганизации = "Продавец";
		КонецЕсли;
		
	ИначеЕсли НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Если ВРег(ЭД.Роль) = ВРег("Покупатель") Тогда
			РольКонтрагента = "Покупатель";
			РольОрганизации = "Продавец";
		Иначе
			РольКонтрагента = "Продавец";
			РольОрганизации = "Покупатель";
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекКонтрагент Из ЭД.Контрагенты.Контрагент Цикл
		
		Если ВРег(ТекКонтрагент.Роль) = ВРег("Покупатель") Тогда
			ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, РольКонтрагента);
		ИначеЕсли ВРег(ТекКонтрагент.Роль) = ВРег("Продавец") Тогда
			ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, РольОрганизации);
		Иначе
			ПрочитатьДанныеКонтрагентаCML(ТекКонтрагент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Получатель");
		КонецЕсли;
		
	КонецЦикла;
	
	// Читаем товары.
	СвойствоЭД = ЭД.Свойства().Получить("Товары");
	НаборДанных = ЭД["Товары"].Товар;
	
	ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	
	ДопРеквизиты = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопРеквизиты.Вставить("Организация", Организация);
	КонецЕсли;
		
	// Значения реквизитов.
	Если Не ЭД.ЗначенияРеквизитов = Неопределено Тогда
		ПрочитатьСписокЗначенийРеквизитовCML(ЭД.ЗначенияРеквизитов.ЗначениеРеквизита, НовыйЭД, Ошибка, ДопРеквизиты);
	КонецЕсли;
	
	// Читаем доп данные из xdto  и помещаем их в шапку в дерево значений
	ПрочитатьДопДанныеШапкиДокумента(ЭД, НовыйЭД, Ошибка, ДопРеквизиты);
	
	// Договор контрагента
	ДоговорНомер = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорНомер");
	ДоговорДата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорДата");
	Если ЗначениеЗаполнено(ДоговорДата) Тогда
		ДоговорДата = ДатаИзСтроки(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, НовыйЭД, "ДоговорДата"));
	КонецЕсли;

	ВладелецДоговора = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
		
	РеквизитыДоговора = Новый Структура;
	РеквизитыДоговора.Вставить("НомерДоговора", ДоговорНомер);
	РеквизитыДоговора.Вставить("ДатаДоговора", ДоговорДата);
	РеквизитыДоговора.Вставить("Владелец", ВладелецДоговора);
	
	ДоговорКонтрагента = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ДоговорыКонтрагентов", , РеквизитыДоговора);
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ДоговорыКонтрагентов");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ДоговорНомер, "Номер договора: " + ДоговорНомер, ДоговорКонтрагента,
				РеквизитыДоговора, ДеревоРазбора, Ошибка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоговорКонтрагента", НайденнаяСтрока.ИндексСтроки);
	
	// Банковский счет 
	Если РольОрганизации = "Продавец" Тогда
		ВладелецБС = "Организация";
		ТипСчета = "БанковскиеСчетаОрганизаций";
		ИмяСчета = "БанковскийСчетОрганизации";
	Иначе
		ВладелецБС = "Контрагент";
		ТипСчета = "БанковскиеСчетаКонтрагентов";
		ИмяСчета = "БанковскийСчетКонтрагента";
	КонецЕсли;
	
	ВладелецСчета = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, ВладелецБС);
	
	СвойствоРасчетныйСчет = ЗначениеДопРеквизитаДокумента("РасчетныйСчет", ЭД);
	Если Не СвойствоРасчетныйСчет = Неопределено Тогда
		СтруктураРасчетныйСчет = РеквизитыРасчетногоСчета(СвойствоРасчетныйСчет, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
		
		НомерСчета = СтруктураРасчетныйСчет.НомерСчета;
		
		РеквизитыСчета = Новый Структура;
		РеквизитыСчета.Вставить("Владелец", ВладелецСчета);
		
		БанковскийСчет = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ТипСчета, НомерСчета, РеквизитыСчета);
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ТипСчета);
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, НомерСчета, "Номер счета: " + НомерСчета, БанковскийСчет,
				РеквизитыСчета, ДеревоРазбора, Ошибка);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчет", НайденнаяСтрока.ИндексСтроки);
		
	Иначе
		
		РасчетныйСчет = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, ИмяСчета);
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчет", РасчетныйСчет);
		
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");
	Если СвойствоЭД <> Неопределено Тогда
		Для Каждого ДокументОснованияXDTO Из ЭД.ДокументОснования Цикл
			СвойствоНаименованиеДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НаименованиеДокументаОснования");
			Если СвойствоНаименованиеДокументаОснования <> Неопределено Тогда
				Если ДокументОснованияXDTO.НаименованиеДокументаОснования = "По данным клиента" Тогда
					СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
					Если СвойствоНомерДокументаОснования <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ДокументОснованияXDTO.НомерДокументаОснования);
					КонецЕсли;
					СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
					Если СвойствоДатаДокументаОснования <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", ДокументОснованияXDTO.ДатаДокументаОснования);
					КонецЕсли;
				ИначеЕсли ДокументОснованияXDTO.НаименованиеДокументаОснования = "По данным поставщика" Тогда
					СвойствоНомерДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("НомерДокументаОснования");
					Если СвойствоНомерДокументаОснования <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымПоставщика", ДокументОснованияXDTO.НомерДокументаОснования);
					КонецЕсли;
					СвойствоДатаДокументаОснования = ДокументОснованияXDTO.Свойства().Получить("ДатаДокументаОснования");
					Если СвойствоДатаДокументаОснования <> Неопределено Тогда
						ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымПоставщика", ДокументОснованияXDTO.ДатаДокументаОснования);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Валюта");
	Если СвойствоЭД <> Неопределено Тогда
		КодВалюты = ЭД.Получить(СвойствоЭД);
		
		Если КодВалюты <> Неопределено Тогда
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");
			
			Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));
			
			ДопРеквизиты = Новый Структура;
			ДопРеквизиты.Вставить("Код", КодВалюты);
			Если ЗначениеЗаполнено(Валюта) Тогда
				ДопРеквизиты.Вставить("Наименование", Валюта.Наименование);
				ДопРеквизиты.Вставить("НаименованиеПолное", Валюта.НаименованиеПолное);
			КонецЕсли;
			ДопРеквизиты.Вставить("КодМКВ", КодВалюты);
			
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты, Валюта,
				ДопРеквизиты, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
		
		Курс = ЭД.Курс;
		Если Курс <> Неопределено Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", Курс);
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЭД = ЗначениеДопРеквизитаДокумента("ГрафикОплаты", ЭД);

	Если СвойствоЭД <> Неопределено Тогда
		ПрочитатьДанныеПоГрафикуОплаты(СвойствоЭД, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	КонецЕсли;
	
	СвойствоЭД = ЭД.Свойства().Получить("Комментарий");
	Если СвойствоЭД <> Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяИнформация", ЭД.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

// Разбираем строковую конструкцию вида "ИНН_КПП".
//
// Возвращаемое значение:
//  Структура параметров с ИНН и КПП.
//
Функция РазобратьИДКонтрагента(Знач СтрокаИД)
	
	ПозицияРазделителя1 = Найти(СтрокаИД, "#");
	СтруктураПоиска = Новый Структура;
	ПозицияРазделителя1 = Найти(СтрокаИД, "_");
	Если ПозицияРазделителя1 > 0 Тогда
		ИНН = Лев(СтрокаИД, ПозицияРазделителя1 - 1);
		КПП = Сред(СтрокаИД, ПозицияРазделителя1 + 1, СтрДлина(СтрокаИД) - ПозицияРазделителя1);
	ИначеЕсли СтрДлина(СтрокаИД) > 0 Тогда
		ИНН = СокрЛП(СтрокаИД);
		КПП = "";
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ИНН", ИНН);
	СтруктураПоиска.Вставить("КПП", КПП);
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Функция преобразует строку в дату и время.
//
// Параметры:
//  Зн - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС".
//
// Возвращаемое значение:
//  Значение типа "ДатаВремя".
//
Функция ПолучитьДатуВремяИзСтроки(Зн)
	
	Результат = Неопределено;
	Зн = СтрЗаменить(Зн, "-", "");
	Зн = СтрЗаменить(Зн, ":", "");
	Если СтрДлина(Зн) - Найти(Зн, " ") = 5 Тогда // время в формате Ч:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "0");
	ИначеЕсли Найти(Зн, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		Зн = СтрЗаменить(Зн, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		Зн = СтрЗаменить(Зн, " ", "");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(Зн);  // дата и время в виде "ГГГГММДДЧЧММСС"
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ОписаниеТипа.ПривестиЗначение(Лев(Зн, 8));  // только дата "ГГГГММДД"
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьФайлCMLпоXDTO(ИмяФайла, ДеревоРазбора, НовыйЭД, ОшибкаРазбора)
	
	ОписаниеОшибки = "";
	ПространствоИменГФС = Неопределено;
	ДанныеФайлаЭД = ДанныеФайлаЭД(ИмяФайла, ОписаниеОшибки, ПространствоИменГФС);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(НовыйЭД.ВидЭД) Тогда
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неизвестный тип ЭД при чтении данных из файла %1!';uk='Невідомий тип ЕД при читанні даних з файлу %1!'"), ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ОшибкаРазбора = Истина;
	Иначе
		Строки = ДеревоРазбора.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтавкаНДС"), Истина);
		Для Каждого СтрокаДерева Из Строки Цикл
			СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзПредставления(СтрокаДерева.ЗначениеРеквизита);
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтрокаДерева.ЗначениеРеквизита = СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаИзСтроки(Строка)
	
	Возврат Дата(Сред(Строка, 7, 4) + Сред(Строка, 4, 2) + Сред(Строка, 1, 2) + "000000");
	
КонецФункции

Процедура ПрочитатьДанныеКонтрагента(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль = "")
	
	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани) Тогда
		ВидКонтрагента = "Организации";
		Если Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
			ИмяРеквизита = "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
			ИмяРеквизита = "Контрагент";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ИначеЕсли Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель" Тогда
			ИмяРеквизита = Роль;
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
		
	ИначеЕсли Роль = "Комиссионер" Тогда
		Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий) Тогда
			ВидКонтрагента = "Организации";
			ИмяРеквизита = "Организация";
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		Иначе
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = "Комиссионер";
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
		
	ИначеЕсли Роль = "Продавец" ИЛИ Роль = "Исполнитель" Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		
	ИначеЕсли Роль = "Покупатель" ИЛИ Роль = "Заказчик" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		
	ИначеЕсли Роль = "Грузоотправитель"  Тогда
		Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий) Тогда
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = Роль;
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
	
		Иначе
			ВидКонтрагента = "Организации";
			ИмяРеквизита = Роль;
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
		КонецЕсли;
		
	ИначеЕсли Роль = "Грузополучатель"  Тогда
		Если (ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий) Тогда			
			ВидКонтрагента = "Организации";
			ИмяРеквизита = Роль;
			ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
			
		Иначе
			ВидКонтрагента = "Контрагенты";
			ИмяРеквизита = Роль;
			ВидДопАналитики = "Партнеры";
			ДопАналитика = "Партнер";
			ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		КонецЕсли;
		
	ИначеЕсли Роль = "ПокупательКомиссии" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Покупатель";
		ВидДопАналитики = "Партнеры";
		ДопАналитика = "Партнер";
		ВидБанковскогоСчета = "БанковскиеСчетаПокупателя";
		
	КонецЕсли;
	
	// Контрагент
	РеквизитыКонтрагента = Новый Структура;
	Если ТипЗнч(Элемент) = Тип("Структура") Тогда
		РеквизитыКонтрагента = Элемент;
	ИначеЕсли Элемент.Тип().URIПространстваИмен = "OTORG12"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM2"
		ИЛИ Элемент.Тип().URIПространстваИмен = "OKORDOC"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "OTORG_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "PTORG_5_01_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "SFAKT_5_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "KORSFAKT_5_02"
		ИЛИ Элемент.Тип().URIПространстваИмен = "SFAKT"
		ИЛИ Элемент.Тип().URIПространстваИмен = "KORSFAKT" Тогда
		ИдКонтрагента = "";
		Если Элемент.ИдСв <> Неопределено Тогда
			Если Элемент.ИдСв.СвЮЛ <> Неопределено И НЕ Элемент.ИдСв.СвЮЛ.НаимОрг = "---" Тогда
				РеквизитыКонтрагента.Вставить("ПолноеНаименование", Элемент.ИдСв.СвЮЛ.НаимОрг);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвЮЛ.ИННЮЛ);
				РеквизитыКонтрагента.Вставить("КПП", Элемент.ИдСв.СвЮЛ.КПП);
				Если Элемент.ИдСв.СвЮЛ.Свойства().Получить("ОКОПФ") <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("ОКОПФ", Элемент.ИдСв.СвЮЛ.ОКОПФ);
				КонецЕсли;
				Если ЗначениеЗаполнено(Элемент.ИдСв.СвЮЛ.ИННЮЛ) Тогда
					ИдКонтрагента = Элемент.ИдСв.СвЮЛ.ИННЮЛ + Элемент.ИдСв.СвЮЛ.КПП;
				КонецЕсли;
				РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			ИначеЕсли Элемент.ИдСв.СвФЛ <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить("ПолноеНаименование",
					Элемент.ИдСв.СвФЛ.ФИОИП.Фамилия +" "+ Элемент.ИдСв.СвФЛ.ФИОИП.Имя
					+ " " + Элемент.ИдСв.СвФЛ.ФИОИП.Отчество);
				РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвФЛ.ИННФЛ);
				ИдКонтрагента = Элемент.ИдСв.СвФЛ.ИННФЛ;
				РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Свойства().Получить("ОКПО") <> Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);
		КонецЕсли;
		ЭлементАдрес = Элемент.Адрес;
		Если ЭлементАдрес <> Неопределено Тогда
			ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");
			Если ЭлементАдрес.АдрИно <> Неопределено Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИно.АдрТекст);
				РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИно.КодСтр);
			ИначеЕсли ЗначениеЗаполнено(ЭлементАдрес.АдрТекст) Тогда
				РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрТекст);
			КонецЕсли;
		КонецЕсли;
		Если Элемент.Свойства().Получить("Контакт") <> Неопределено Тогда
			ЭлементКонтакты = Элемент.Контакт;
			Если ЭлементКонтакты <> Неопределено Тогда
				Если ЭлементКонтакты.Тлф <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);
				КонецЕсли;
				Если ЭлементКонтакты.Факс <> Неопределено Тогда
					РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.Тип().URIПространстваИмен = "TORGPR"
		ИЛИ Элемент.Тип().URIПространстваИмен = "RUISP" Тогда
		
		СведенияЮрЛица = Неопределено;
		Если Не Элемент.ИдСв.СвОрг = Неопределено Тогда
			СведенияЮрЛица = Элемент.ИдСв.СвОрг.СвЮЛ;
		КонецЕсли;
		СведенияФизЛица = Элемент.ИдСв.СвФЛ;
		
		Если Не СведенияЮрЛица = Неопределено И НЕ СведенияЮрЛица.НаимОрг = "---" Тогда
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", СведенияЮрЛица.НаимОрг);
			РеквизитыКонтрагента.Вставить("ИНН", СведенияЮрЛица.ИННЮЛ);
			РеквизитыКонтрагента.Вставить("КПП", СведенияЮрЛица.КПП);
			
			Если ЗначениеЗаполнено(СведенияЮрЛица.ИННЮЛ) Тогда
				ИдКонтрагента = СведенияЮрЛица.ИННЮЛ + СведенияЮрЛица.КПП;
			КонецЕсли;
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ЮрЛицо"));
			
		ИначеЕсли Не СведенияФизЛица = Неопределено Тогда
			
			ФИОФизЛица = СведенияФизЛица.ФИО;
			РеквизитыКонтрагента.Вставить("ПолноеНаименование",
			ФИОФизЛица.Фамилия +" "+ ФИОФизЛица.Имя
			+ " " + ФИОФизЛица.Отчество);
			РеквизитыКонтрагента.Вставить("ИНН", СведенияФизЛица.ИННФЛ);
			ИдКонтрагента = СведенияФизЛица.ИННФЛ;
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", "ФизЛицо"));
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("ОКПО") <> Неопределено Тогда
			РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);
		КонецЕсли;
		
		ЭлементАдрес = Элемент.Адрес;
		Если ЭлементАдрес <> Неопределено Тогда
			ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");
			Если ЕстьСвойствоXDTO(ЭлементАдрес, "АдрИнф") Тогда
				
				Если ЕстьСвойствоXDTO(ЭлементАдрес.АдрИнф, "АдрТекст") Тогда
					РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИнф.АдрТекст);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(ЭлементАдрес.АдрИнф, "КодСтр") Тогда
					РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИнф.КодСтр);
				КонецЕсли;
				
			ИначеЕсли ЕстьСвойствоXDTO(ЭлементАдрес, "АдрИно") Тогда
				
				Если ЕстьСвойствоXDTO(ЭлементАдрес.АдрИно, "АдрТекст") Тогда
					РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", ЭлементАдрес.АдрИно.АдрТекст);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(ЭлементАдрес.АдрИно, "КодСтр") Тогда
					РеквизитыКонтрагента.Вставить("КодСтраны", ЭлементАдрес.АдрИно.КодСтр);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "Контакт") Тогда
			ЭлементКонтакты = Элемент.Контакт;
			Если ЭлементКонтакты <> Неопределено Тогда
				Если ЕстьСвойствоXDTO(ЭлементКонтакты, "Тлф") Тогда
					РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);
				КонецЕсли;
				Если ЕстьСвойствоXDTO(ЭлементКонтакты, "Факс") Тогда
					РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
			ЗнДанных = Элемент[ТекСвойство.Имя];
			Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
				Продолжить;
			КонецЕсли;
			Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
				ИдКонтрагента = ЗнДанных;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Роль") Тогда
				Если ВРег(ЗнДанных) = ВРег("Продавец") Тогда
					Если НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара Тогда
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					Иначе
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
					КонецЕсли;
				ИначеЕсли ВРег(ЗнДанных) = ВРег("Покупатель") Тогда
					Если НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
						ВидКонтрагента = "Контрагенты";
						ИмяРеквизита = "Контрагент";
						ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
						// доп.аналитика по Партнеру
						ВидДопАналитики = "Партнеры";
						ДопАналитика = "Партнер";
					Иначе
						ВидКонтрагента = "Организации";
						ИмяРеквизита = "Организация";
						ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЮрЛицо") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ФизЛицо") Тогда
				РеквизитыУчастника = ЗнДанных;
				Для Каждого СвойствоУчастника Из РеквизитыУчастника.Свойства() Цикл
					РеквизитУчастника = РеквизитыУчастника[СвойствоУчастника.Имя];
					Если РеквизитУчастника <> Неопределено Тогда
						Если ВРег(СвойствоУчастника.Имя) = ВРег("ЮридическийАдрес")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("АдресРегистрации") Тогда
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя+"_Представление", РеквизитУчастника.Представление);
						ИначеЕсли ВРег(СвойствоУчастника.Имя) = ВРег("ОфициальноеНаименование")
							ИЛИ ВРег(СвойствоУчастника.Имя) = ВРег("ПолноеНаименование") Тогда
							РеквизитыКонтрагента.Вставить("ПолноеНаименование", РеквизитУчастника);
						Иначе // остальное по именам
							РеквизитыКонтрагента.Вставить(СвойствоУчастника.Имя, РеквизитУчастника);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Адрес") Тогда
				РеквизитыКонтрагента.Вставить("ФактическийАдрес_Представление", ЗнДанных.Представление);
			ИначеЕсли ВРег(ТекСвойство) = ВРег("Контакты") Тогда
				ТаблицаКонтактов = Новый ТаблицаЗначений();
				ТаблицаКонтактов.Колонки.Добавить("Вид");
				ТаблицаКонтактов.Колонки.Добавить("Представление");
				ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
				Для Каждого Контакт Из ЗнДанных.Контакт Цикл
					Вид = Неопределено;
					Если Контакт.Тип = "Почта" Тогда
						Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailКонтрагента");
					ИначеЕсли Контакт.Тип = "Телефон рабочий" Тогда
						Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
					ИначеЕсли Контакт.Тип = "Факс" Тогда
						Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксКонтрагента");
					КонецЕсли;
					Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
						НовКонт = ТаблицаКонтактов.Добавить();
						НовКонт.Вид = Вид;
						НовКонт.Представление = Контакт.Значение;
						НовКонт.ЗначенияПолей = Контакт.Комментарий;
					КонецЕсли;
				КонецЦикла;
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);
			Иначе // остальное по именам
				РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// заполняем значения в зависимости от вида
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
			
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	
	// Определяем расчетный счет контрагента
	Если НЕ ТипЗнч(Элемент) = Тип("Структура") Тогда
		Если Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено Тогда
			РасчетныеСчета = Элемент.РасчетныеСчета;
			Если РасчетныеСчета <> Неопределено Тогда
				РасчетныеСчетаXDTO = РасчетныеСчета.ПолучитьСписок("РасчетныйСчет");
				Для Каждого РасчетныйСчетXDTO Из РасчетныеСчетаXDTO Цикл
					ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
					Прервать;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли Элемент.Свойства().Получить("БанкРекв") <> Неопределено И Элемент.БанкРекв <> Неопределено Тогда
			ПрочитатьДанныеПоРасчетномуСчетуТорг12(НовыйЭД, Элемент.БанкРекв, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭД.Свойства().Получить("РеквизитыПолучателя") <> Неопределено Тогда
		СвойствоЭД = ЭД.Свойства().Получить("РеквизитыПолучателя");
		РеквизитыПолучателя = ЭД.Получить(СвойствоЭД);
		ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РеквизитыПолучателя, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
	КонецЕсли;
	
	// Доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			РеквизитыПартнера = Новый Структура();
			РеквизитыПартнера.Вставить("Контрагент", Контрагент);
			ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
			
			ЗнДопАналитики = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
			Если ЗначениеЗаполнено(ЗнДопАналитики) Тогда
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
					+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
	АвторЭДПокупатель = Ложь;
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	
	
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");

	Для Каждого Элемент Из НаборДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СписокТЧ = Новый СписокЗначений;
		
		ПоляПоискаТовара = Новый Структура;
		ПоляПоискаТовара.Вставить("Ид", "");
		ПоляПоискаТовара.Вставить("Наименование", "");
		ПоляПоискаТовара.Вставить("Артикул", "");
		ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", "");
		ПоляПоискаТовара.Вставить("Организация", Организация);
		ПоляПоискаТовара.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитатьСтрокуТоваровCML(Элемент, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДеревоРазбора, Ошибка);
		
		// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
		Если ИдентификацияПоНоменклатуреКомпании Тогда 
			
			НайтиНоменклатуруТЧ(ПоляПоискаТовара, СписокТЧ);
			
		Иначе
			
			НайтиНоменклатуруПоставщикаТЧ(ПоляПоискаТовара, СписокТЧ, НовыйЭД, ДеревоРазбора, ЭД, Ошибка);
			
		КонецЕсли;
		
		ДобавитьСтрокуТабличнойЧасти(ДеревоРазбора, НовыйЭД, ПоляПоискаТовара, СписокТЧ, Ошибка);
		
	КонецЦикла;

		
КонецПроцедуры

Процедура РазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, НомерСтроки = Неопределено)
	
	ИдЭД = ?(ЭД.Свойства().Получить("ИД") = Неопределено, "", ЭД.Ид);
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);
	
	НаимТовара = "";
	ИдТовара = "";
	ЕстьДопРеквизиты = Ложь;
	
	// Номенклатура.
	РеквизитыНоменклатуры = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		ЗнДанных = Элемент[ТекСвойство.Имя];
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		// Разберем свойства Товара.
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
			ИдТовара = РеквизитыНоменклатуры.Ид;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
			РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
			НаимТовара = РеквизитыНоменклатуры.Наименование;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
			РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
				НаимЕдИзм = "";
				Если ЗнДанных.Свойства().Получить("Наименование") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
					НаимЕдИзм = ЗнДанных.Наименование;
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("НаименованиеКраткое") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.НаименованиеКраткое);
					НаимЕдИзм = ЗнДанных.НаименованиеКраткое;
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("НаименованиеПолное") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("НаименованиеПолное", ЗнДанных.НаименованиеПолное);
				КонецЕсли;
				Если ЗнДанных.Свойства().Получить("МеждународноеСокращение") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("МеждународноеСокращение", ЗнДанных.МеждународноеСокращение);
				КонецЕсли;
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, НаимЕдИзм,
					ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
				Если НЕ ЗнДанных.Свойства().Получить("Наименование") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
				КонецЕсли;
				Если НЕ ЗнДанных.Свойства().Получить("Коэффициент") = Неопределено Тогда
					РеквизитыЕдИзм.Вставить("Коэффициент", ЗнДанных.Коэффициент);
				КонецЕсли;
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(ЗнДанных.Код),
					ЗнДанных.Наименование, ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налог") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				Если ВРег(ЗнДанных.ТипНалога) = "НДС" Тогда
					СписокТЧ.Добавить(ЗнДанных.ВеличинаСтавкиНалога, "СтавкаНДС");
					СписокТЧ.Добавить(ЗнДанных.Сумма, "СуммаНДС");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаБезНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаСУчетомНДС") Тогда
			СписокТЧ.Добавить(ЗнДанных, "СуммаСНДС");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("СрокГодности") Тогда
			СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = Новый Структура;
			Для Каждого ЭлементДанных Из ЗнДанных Цикл
				МассивЗначений = Новый Массив;
				Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
					МассивЗначений.Добавить(ЭлементЗначения)
				КонецЦикла;
				СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
			КонецЦикла;
			
		// Схема 2:
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Единица") Тогда
			РеквизитыЕдИзм = Новый Структура;
			Если ЗначениеЗаполнено(ЗнДанных) Тогда
				РеквизитыЕдИзм.Вставить("Код", ЗнДанных);
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных), РеквизитыЕдИзм);
				НаименованиеЕИ = ?(ЗначениеЗаполнено(ЕдИзм), ЕдИзм.Наименование, Неопределено);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора( НайденныйТипВДереве, Строка(ЗнДанных), НаименованиеЕИ,
					ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
				Если ЗначениеЗаполнено(НайденнаяСтрока) Тогда
					РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
			Если ТипЗнч(ЗнДанных.Налог) = Тип("СписокXDTO") Тогда
				МассивСтруктур = Новый Массив;
				Для Каждого Налог Из ЗнДанных.Налог Цикл
					СтруктураНалога = Новый Структура;
					Для Каждого СвойствоНалога Из Налог.Свойства() Цикл
						ЗначениеНалога = Налог.Получить(СвойствоНалога);
						Если НЕ ЗначениеЗаполнено(ЗначениеНалога) Тогда
							Продолжить;
						КонецЕсли;
						СтруктураНалога.Вставить(СвойствоНалога.Имя, ЗначениеНалога);
					КонецЦикла;
					МассивСтруктур.Добавить(СтруктураНалога);
				КонецЦикла;
				Если МассивСтруктур.Количество() > 0 Тогда
					СтруктураНалога = МассивСтруктур[0];
					СтавкаНДС = "";
					НДСУчтеноВСумме = "";
					СуммаНДС = 0;
					Если НЕ СтруктураНалога.Свойство("Ставка", СтавкаНДС) Тогда
						СтавкаНДС = "без НДС";
					КонецЕсли;
					Если НЕ СтруктураНалога.Свойство("УчтеноВСумме", НДСУчтеноВСумме) Тогда
						НДСУчтеноВСумме = Ложь;
					КонецЕсли;
					Если НЕ СтруктураНалога.Свойство("Сумма", СуммаНДС) Тогда
						СуммаНДС = 0;
					КонецЕсли;
					СписокТЧ.Добавить(СтавкаНДС, "СтавкаНДС");
					СписокТЧ.Добавить(СуммаНДС, "СуммаНДС");
					СписокТЧ.Добавить(НДСУчтеноВСумме, "НДСУчтеноВСумме");
				КонецЕсли;
				Если МассивСтруктур.Количество() > 1 Тогда
					СписокТЧ.Добавить(МассивСтруктур, "Налоги");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ДопРасходы") Тогда
			
			МассивСтруктур = Новый Массив;
			Для Каждого ЭлСписка Из ЗнДанных[ТекСвойство.Имя] Цикл
				СтруктураДанных = Новый Структура;
				Для Каждого СвойствоДопСписка Из ЭлСписка.Свойства() Цикл
					ЗначениеДопСписка = Налог.Получить(СвойствоДопСписка);
					Если НЕ ЗначениеЗаполнено(ЗначениеДопСписка) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураНалога.Вставить(СвойствоДопСписка.Имя, ЗначениеДопСписка);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураДанных);
			КонецЦикла;
			СписокТЧ.Добавить(МассивСтруктур, ТекСвойство.Имя);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеЗначенияРеквизитов")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ЗначенияРеквизитов") Тогда
			
			ДопРеквизиты = Новый Структура;
			Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
			Если ЗначениеЗаполнено(Организация) Тогда
				ДопРеквизиты.Вставить("Организация", Организация);
			КонецЕсли;
			
			ПрочитатьСписокЗначенийРеквизитовCML(ЗнДанных.ЗначениеРеквизита, СписокТЧ, Ошибка, ДопРеквизиты);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Сумма") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Сумма");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаЗаЕдиницу") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Цена");
			
		Иначе
			СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
	Если ИдентификацияПоНоменклатуреКомпании Тогда
		СтруктураИд = РазобратьИДТовара(ИдТовара);
		Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
		Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
			ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
			СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
			УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
			СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
		КонецЕсли;
	Иначе
		// Номенклатура поставщиков.
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
		ВладелецНоменклатуры  = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
		
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
		Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаимТовара) Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
		КонецЕсли;
		
		Если ЕстьДопРеквизиты Тогда
			РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
		КонецЕсли;
		
		НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
			РеквизитыНоменклатурыПоставщика, ИдЭД);
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
			РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
			РеквизитыНоменклатурыПоставщика.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
		ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатурыПоставщика, СтруктураРеквизитовТовара, ИдЭД);
		
		Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
			СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
		КонецЕсли;
	КонецЕсли;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Организация", Организация);
	
	Если ТипЗНЧ(НомерСтроки) = Тип("Число") Тогда
		НомерСтроки = НомерСтроки + 1;
	КонецЕсли;
	ПрочитатьДопДанныеСтрокиТЧ(Элемент, НовыйЭД, "Товары", НомерСтроки, СписокТЧ, ДопПараметры);
	
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РазобратьСтрокуТЧCML(Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Элемент.НомТов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеВидаОплаты(ЗнДанных, ЭДРоль)
	
	ВозвращаемоеЗначение = "";
	
	Если ЗнДанных = "Аванс" Тогда
		Если ЭДРоль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
			"Аванс (до обеспечения)");
		ИначеЕсли ЭДРоль = "Покупатель"  Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
			"Аванс (до подтверждения)");
		КонецЕсли;
	ИначеЕсли ЗнДанных = "Предоплата" Тогда
		Если ЭДРоль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
			"Предоплата (до отгрузки)");
		ИначеЕсли ЭДРоль = "Покупатель" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
			"Предоплата (до поступления)");
		КонецЕсли;
	ИначеЕсли ЗнДанных = "Кредит" Тогда
		Если ЭДРоль = "Продавец" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
			"Кредит (после отгрузки)");
		ИначеЕсли ЭДРоль = "Покупатель" Тогда 
			ВозвращаемоеЗначение = ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
			"Кредит (после поступления)");
		КонецЕсли;
	Иначе
		ВозвращаемоеЗначение = ЗнДанных;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПрочитатьДанныеПоГрафикуОплаты(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если НЕ ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	СписокТЧ = Новый СписокЗначений;
	НомерСтрокиСтар = 1;
	
	Для Каждого Элемент Из НаборДанных Цикл
		СписокТЧ = Новый СписокЗначений;
		ЗаполнитьСписокРеквизитов(СписокТЧ, Элемент, ЭД);
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "ЭтапыГрафикаОплаты", СписокТЧ);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьСписокРеквизитов(СписокТЧ, Знач Элемент, ЭД)
	
	Пока СтрДлина(Элемент) > 0 Цикл
		
		ПозицияРазделителя = Найти(Элемент, "#");
		РеквизитЗначение = Лев(Элемент, ПозицияРазделителя );
		Элемент = СтрЗаменить(Элемент, РеквизитЗначение, "");
		
		Позиция = Найти(РеквизитЗначение, "&");
		
		Реквизит = Лев(РеквизитЗначение, Позиция - 1);
		
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение, Реквизит, "");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"&","");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"#","");
		
		Если ВРег(Реквизит) = ВРег("ВариантОплаты") Тогда
			РеквизитЗначение = ЗначениеВидаОплаты(РеквизитЗначение, ЭД.Роль);
		КонецЕсли;
		
		СписокТЧ.Добавить(РеквизитЗначение, Реквизит);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоГрафикуОплаты(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
					
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных)
					И НЕ ВРег(ТекСвойство.Имя) = ВРег("Налоги") 
					И Не ВРег(ТекСвойство.Имя) = ВРег("ПроцентПлатежа") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ВРег(ТекСвойство.Имя) = ВРег("ДатаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ДатаПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ПроцентПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ПроцентПлатежа");	
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаПлатежа") Тогда
					СписокТЧ.Добавить(ЗнДанных, "СуммаПлатежа");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ВидОплаты") Тогда
					Если ЗнДанных = "Аванс" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Аванс (до обеспечения)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель"  Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Аванс (до подтверждения)"), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Предоплата" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Предоплата (до отгрузки)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Предоплата (до поступления)"), "ВариантОплаты");
						КонецЕсли;
					ИначеЕсли ЗнДанных = "Кредит" Тогда
						Если ЭД.Роль = "Продавец" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом",
								"Кредит (после отгрузки)"), "ВариантОплаты");
						ИначеЕсли ЭД.Роль = "Покупатель" Тогда 
							СписокТЧ.Добавить(ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику",
								"Кредит (после поступления)"), "ВариантОплаты");
						КонецЕсли;
					КонецЕсли;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "ЭтапыГрафикаОплаты", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеТЧКаталогТоваров(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");
	Владелец = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Контрагент");
	
	Для Каждого Элемент Из НаборДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СписокТЧ = Новый СписокЗначений;
		
		ПоляПоискаТовара = Новый Структура;
		ПоляПоискаТовара.Вставить("Ид", "");
		ПоляПоискаТовара.Вставить("Наименование", "");
		ПоляПоискаТовара.Вставить("Артикул", "");
		ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", "");
		ПоляПоискаТовара.Вставить("Организация", Организация);
		ПоляПоискаТовара.Вставить("Владелец", Владелец);
		ПоляПоискаТовара.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитатьСтрокуТоваровCML(Элемент, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДеревоРазбора, Ошибка);
		
		НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
			ПоляПоискаТовара, ЭД.Ид);
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
		
		ИдТовара = ПоляПоискаТовара.Ид;
		НаимТовара = ПоляПоискаТовара.Наименование;
		
		НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
			ПоляПоискаТовара, ДеревоРазбора, Ошибка);
			
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
		
		Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
			ПоляПоискаТовара.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
		КонецЕсли;
		
		Номенклатура = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", ПоляПоискаТовара, ЭД.Ид);
		
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
		НайденнаяСтрока     = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
			ПоляПоискаТовара, ДеревоРазбора, Ошибка);
			
		СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании = Истина)
	
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Организация = СсылкаРеквизитаДерева(ДеревоРазбора, НовыйЭД, "Организация");

	Для Каждого Элемент Из НаборДанных Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СписокТЧ = Новый СписокЗначений;
		
		ПоляПоискаТовара = Новый Структура;
		ПоляПоискаТовара.Вставить("Ид", "");
		ПоляПоискаТовара.Вставить("Наименование", "");
		ПоляПоискаТовара.Вставить("Артикул", "");
		ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", "");
		ПоляПоискаТовара.Вставить("Организация", Организация);
		ПоляПоискаТовара.Вставить("НомерСтроки", НомерСтроки);
		
		ПрочитатьСтрокуТоваровCML(Элемент, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДеревоРазбора, Ошибка);
		
		Если ИдентификацияПоНоменклатуреКомпании Тогда
			
			НайтиНоменклатуруТЧ(ПоляПоискаТовара, СписокТЧ);
			
		Иначе
			
			НайтиНоменклатуруПоставщикаТЧ(ПоляПоискаТовара, СписокТЧ, НовыйЭД, ДеревоРазбора, ЭД, Ошибка);
			
		КонецЕсли;
		
		ДобавитьСтрокуТабличнойЧасти(ДеревоРазбора, НовыйЭД, ПоляПоискаТовара, СписокТЧ, Ошибка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчетуТорг12(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДеревоРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
	
	// Обработка банка счета
	
	БанкXDTO = РасчетныйСчетXDTO.СвБанк;
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("Код",			БанкXDTO.БИК);
	РеквизитыБанка.Вставить("Наименование", БанкXDTO.НаимБанк);
	
	БанкСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора
	ТипБанкиВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
	
	// Обработка самого счета
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета, РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: " + РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетномуСчету(
					НовыйЭД,
					РасчетныйСчетXDTO,
					ДеревоРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
					
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		БанкXDTO = РасчетныйСчетXDTO.Банк;
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);
		РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);
		РеквизитыБанка.Вставить("КоррСчет",     БанкXDTO.СчетКорреспондентский);
		
	Иначе
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          РасчетныйСчетXDTO.БИК);
		РеквизитыБанка.Вставить("Наименование", РасчетныйСчетXDTO.НаименованиеБанка);
		РеквизитыБанка.Вставить("КоррСчет",     РасчетныйСчетXDTO.СчетКорреспондентский);
		
	КонецЕсли;
	
	БанкСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
	
	// Создаем объект банка в дереве разбора.
	ТипБанкиВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
	
	СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
	
	// Обработка банка корреспондента
	ЕстьБанкКорреспондент = Ложь;
	
	Если ТипЗнч(РасчетныйСчетXDTO) = Тип("ОбъектXDTO") Тогда
		СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
		Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
		
			ЕстьБанкКорреспондент = Истина;
			БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",          БанкКорреспондентXDTO.БИК);
			РеквизитыБанкаКорреспондента.Вставить("Наименование", БанкКорреспондентXDTO.Наименование);
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     БанкКорреспондентXDTO.СчетКорреспондентский);
			
		КонецЕсли;
	ИначеЕсли РасчетныйСчетXDTO.Свойство("БИККорр") И ЗначениеЗаполнено(РасчетныйСчетXDTO.БИККорр) Тогда
		
			ЕстьБанкКорреспондент = Истина;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",          РасчетныйСчетXDTO.БИККорр);
			РеквизитыБанкаКорреспондента.Вставить("Наименование", РасчетныйСчетXDTO.НаименованиеКорр);
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     РасчетныйСчетXDTO.СчетКорр);
			
	КонецЕсли;
	
	Если ЕстьБанкКорреспондент Тогда
		
		БанкКорреспондентСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки",
			РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
		
		// Создаем объект банка в дереве разбора
		ТипБанкиКоррВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанкаКорреспондента = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
		"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДеревоРазбора,
		Ошибка);
		
	КонецЕсли;
	
	// Обработка самого счета	
	РеквизитыБанковскогоСчета = Новый Структура;
	РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
	КонецЕсли;
	
	БанковскийСчетСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета,
		РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
	
	// Создаем объект расчетного счета в дереве разбора.
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
	
	СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: "
		+ РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
	
	// Заполняем реквизиты банковского счета
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
	Если ЕстьБанкКорреспондент Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
	КонецЕсли;
	
	Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		ИначеЕсли Роль = "Грузополучатель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
		КонецЕсли
	ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
		Если Роль = "Грузоотправитель" Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоРасчетнымСчетамКонтрагентаCML(
					НовыйЭД,
					РасчетныеСчетаXDTO,
					ДеревоРазбора,
					ВидБанковскогоСчета,
					Роль,
					Контрагент,
					Ошибка)
					
	НаборДанных = РасчетныеСчетаXDTO.РасчетныйСчет;
	Если Не ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РасчетныйСчетXDTO Из НаборДанных Цикл
		
		СписокТЧ = Новый СписокЗначений;
		
		БанкXDTO = РасчетныйСчетXDTO.Банк;
		
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);
		РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);
		РеквизитыБанка.Вставить("КоррСчет",     БанкXDTO.СчетКорреспондентский);
		РеквизитыБанка.Вставить("SWIFT",     	БанкXDTO.SWIFT);

		БанкСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);
		
		СписокТЧ.Добавить(БанкXDTO.БИК,						"БанкБИК");
		СписокТЧ.Добавить(БанкXDTO.Наименование,			"БанкНаименование");
		СписокТЧ.Добавить(БанкXDTO.СчетКорреспондентский,	"БанкСчетКорр");
		СписокТЧ.Добавить(БанкXDTO.SWIFT,					"БанкSWIFT");
		
		// Создаем объект банка в дереве разбора.
		ТипБанкиВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
		
		СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
																		БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);
		
		// Обработка банка корреспондента
		ЕстьБанкКорреспондент = Ложь;
		СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");
		Если СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено Тогда
			
			ЕстьБанкКорреспондент = Истина;
			БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;
			
			РеквизитыБанкаКорреспондента = Новый Структура;
			РеквизитыБанкаКорреспондента.Вставить("Код",			БанкКорреспондентXDTO.БИК);
			РеквизитыБанкаКорреспондента.Вставить("Наименование",	БанкКорреспондентXDTO.Наименование);
			РеквизитыБанкаКорреспондента.Вставить("КоррСчет",		БанкКорреспондентXDTO.СчетКорреспондентский);
			РеквизитыБанкаКорреспондента.Вставить("SWIFT",			БанкКорреспондентXDTO.SWIFT);
			
			СписокТЧ.Добавить(БанкКорреспондентXDTO.БИК,					"БанкКоррБИК");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.Наименование,			"БанкКоррНаименование");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.СчетКорреспондентский,	"БанкКоррСчетКорр");
			СписокТЧ.Добавить(БанкКорреспондентXDTO.SWIFT,					"БанкКоррSWIFT");
			
			БанкКорреспондентСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки",
										РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);
			
			// Создаем объект банка в дереве разбора
			ТипБанкиКоррВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");
			
			СтрокаБанкаКорреспондента = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
				"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДеревоРазбора,
				Ошибка);
			
		КонецЕсли;	
		
		// Обработка самого счета	
		РеквизитыБанковскогоСчета = Новый Структура;
		РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);
		
		СписокТЧ.Добавить(РасчетныйСчетXDTO.НомерСчета,		"НомерСчета");
		СписокТЧ.Добавить(РасчетныйСчетXDTO.Комментарий,	"Комментарий");
		
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);
		КонецЕсли;
		
		БанковскийСчетСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета,
												РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);
		
		// Создаем объект расчетного счета в дереве разбора.
		НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);
		
		СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве,
					РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: "+ РеквизитыБанковскогоСчета.НомерСчета,
					БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);
		
		// Заполняем реквизиты банковского счета
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);
		Если ЕстьБанкКорреспондент Тогда
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);
		КонецЕсли;	
		
		Если ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов" Тогда
			Если Роль = "Грузоотправитель" Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
			ИначеЕсли Роль = "Грузополучатель" Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузополучателя", СтрокаСчета.ИндексСтроки);
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетКонтрагента", СтрокаСчета.ИндексСтроки);
			КонецЕсли	
		ИначеЕсли ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций" Тогда
			Если Роль = "Грузоотправитель" Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);
			Иначе	
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетОрганизации", СтрокаСчета.ИндексСтроки);
			КонецЕсли;
		КонецЕсли;	
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧРасчетныйСчет", СписокТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании);
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код,
							РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код", Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СписокТЧ.Добавить(Налог.ВеличинаСтавкиНалога, "СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;
							
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДатаПоДаннымКлиента") Тогда
					СписокТЧ.Добавить(ПолучитьДатуВремяИзСтроки(ЗнДанных), ТекСвойство.Имя);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = Новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование,МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры,"Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры,"Упаковка");
				КонецЕсли;
				
			Иначе // Все остальные случаи - ищем по номенклатуре поставщика.
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
				РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				Номенклатура = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Номенклатура", "", РеквизитыНоменклатурыПоставщика, ЭД.Ид);
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ОтветНаЗаказ) ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара);
		
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ИдентификацияПоНоменклатуреКомпании);
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ОтветНаЗаказ) ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара);
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код,
							РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СписокТЧ.Добавить(Налог.ВеличинаСтавкиНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							Если ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "Сумма");
							КонецЕсли;	
							Если ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаСНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
								Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Скидка Из Скидки Цикл
									Если ВРег(Скидка.Наименование) = "ОБЩАЯСКИДКА" Тогда
										СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
										СписокТЧ.Добавить(Скидка.Процент,"ПроцентРучнойСкидки");
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = Новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания.
			Если ИдентификацияПоНоменклатуреКомпании Тогда 
				СтруктураИд = РазобратьИДТовара(ИдТовара);
				Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
				Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
					ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
					СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
					УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
					СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
				КонецЕсли;
			Иначе
				// Номенклатура поставщиков.
				РеквизитыНоменклатурыПоставщика = Новый Структура;
				ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
				ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
				
				РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
				РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", ИдТовара);
				Если РеквизитыНоменклатуры.Свойство("Артикул") Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Артикул", РеквизитыНоменклатуры.Артикул);
				КонецЕсли;
				Если ЗначениеЗаполнено(НаимТовара) Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("Наименование", НаимТовара);
				КонецЕсли;
				Если ЕстьДопРеквизиты Тогда
					РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", СтруктураДопРеквизитов);
				КонецЕсли;
				НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
					РеквизитыНоменклатурыПоставщика, ЭД.Ид);
				
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, НоменклатураПоставщика,
					РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
				
				Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
					РеквизитыНоменклатуры.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
				КонецЕсли;
				
				СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
				ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураРеквизитовТовара, ЭД.Ид);
		
				Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
				Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
					СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
					СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
				КонецЕсли;
				
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных)
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код), РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали.
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента,
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = Новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						МассивЗначений = Новый Массив;
						Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
						СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);
	
КонецПроцедуры

Процедура УдалитьПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	Если ТипЗнч(НаборДанных) = Тип("СписокXDTO") Тогда
		Для Каждого Элемент Из НаборДанных Цикл
			СписокТЧ = Новый СписокЗначений;
			НаимТовара = "";
			ИдТовара = "";
			ЕстьДопРеквизиты = Ложь;
			
			// Номенклатура.
			РеквизитыНоменклатуры = Новый Структура;
			Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
				ЗнДанных = Элемент[ТекСвойство.Имя];
				Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				// Разберем свойства Товара.
				Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
					РеквизитыНоменклатуры.Вставить("Ид", ЗнДанных);
					ИдТовара = РеквизитыНоменклатуры.Ид;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
					РеквизитыНоменклатуры.Вставить("Наименование", ЗнДанных);
					НаимТовара = РеквизитыНоменклатуры.Наименование;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
					РеквизитыНоменклатуры.Вставить("Артикул", ЗнДанных);
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код, РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, ЗнДанных.Код, ЗнДанных.Наименование, 
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("БазоваяЕдиница", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЕдиницаИзмерения") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						РеквизитыЕдИзм = Новый Структура;
						РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных.Код));
						РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
						ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных.Код),
							РеквизитыЕдИзм);
						НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
						НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Строка(ЗнДанных.Код), ЗнДанных.Наименование,
							ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
						Если ЗначениеЗаполнено(ЕдИзм) Тогда
							РеквизитыНоменклатуры.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
					// Запомним кол-во упаковок, в которых отгружали
					СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
					// Пересчитаем с учетом коэффициента
					// если есть свойство ЕдиницаИзмерения, получим значение.
					Коэф = "";
					Если Элемент.ЕдиницаИзмерения <> Неопределено Тогда
						Коэф = Элемент.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(Коэф) Тогда
						Коэф = 1;
					КонецЕсли;
					СписокТЧ.Добавить(Коэф, "Коэффициент");
					СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммыПоТовару") Тогда
					Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
						Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
							Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
								Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
								Для Каждого Налог Из Налоги Цикл
									Если ВРег(Налог.ТипНалога) = "НДС" Тогда
										СписокТЧ.Добавить(Налог.ВеличинаСтавкиНалога,"СтавкаНДС");
										СписокТЧ.Добавить(Налог.Сумма, "СуммаНДС");
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаОбщая") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаОбщая, "СуммаПродажи");
							ИначеЕсли ВРег(ТекСв.Имя) = ВРег("СуммаБезНалога") Тогда
								СписокТЧ.Добавить(ЗнДанных.СуммаБезНалога, "СуммаБезНДС");
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Цена") Тогда
					СписокТЧ.Добавить(ЗнДанных, "ЦенаПродажи");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаКомитента") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Цена");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("СуммаКомитента") Тогда
					СписокТЧ.Добавить(ЗнДанных, "Сумма");
				ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
					ЕстьДопРеквизиты = Истина;
					СтруктураДопРеквизитов = Новый Структура;
					Для Каждого ЭлементДанных Из ЗнДанных Цикл
						
						Если ЭлементДанных.Значение.Количество() > 1 Тогда
							МассивЗначений = Новый Массив;
							Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
							Если ЭлементДанных.Наименование = "ПокупательФактАдрес" ИЛИ ЭлементДанных.Наименование = "ПокупательЮрАдрес" Тогда
								ЭлементЗначения = РазложитьАдрес(ЭлементЗначения);
							ИначеЕсли ЭлементДанных.Наименование = "ДатаПродажи" Тогда
								ЭлементЗначения = ПолучитьДатуВремяИзСтроки(ЭлементЗначения);
							КонецЕсли;
							МассивЗначений.Добавить(ЭлементЗначения)
						КонецЦикла;
							СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
						Иначе
						
							ЭлементЗначения = ЭлементДанных.Значение[0];
							Если ЭлементДанных.Наименование = "ПокупательФактАдрес" ИЛИ ЭлементДанных.Наименование = "ПокупательЮрАдрес" Тогда
								ЭлементЗначения = РазложитьАдрес(ЭлементЗначения);
							ИначеЕсли ЭлементДанных.Наименование = "ДатаПродажи" Тогда
								ЭлементЗначения = ПолучитьДатуВремяИзСтроки(ЭлементЗначения);
							КонецЕсли;
							СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, ЭлементЗначения);
						КонецЕсли;
					КонецЦикла;
				Иначе
					СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДопРеквизиты Тогда
				СписокТЧ.Добавить(СтруктураДопРеквизитов, "ДополнительныеРеквизиты");
			КонецЕсли;
			
			СтруктураИд = РазобратьИДТовара(ИдТовара);
			Номенклатура = ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);
			Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
				ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
					СтруктураИд.ИДХарактеристики);
				СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
				УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
					СтруктураИд.ИДУпаковки);
				СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
				РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
			СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");
			
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, Ошибка) Экспорт
	
	ОтборБезСсылокНаОбъекты = Новый Структура;
	ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);
	ПорядокСозданияТиповОбъектов = ОбменСКонтрагентамиПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов();
	Для Каждого СтрокаТипОбъекта Из ПорядокСозданияТиповОбъектов Цикл
		НайденнаяСтрокаТипа = ДеревоРазбора.Строки.Найти(СтрокаТипОбъекта.ТипОбъекта, "ТипОбъекта");
		Если НайденнаяСтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Всегда будет перезаполнять Номенклатуру поставщика
		Если СтрокаТипОбъекта.ТипОбъекта = "НоменклатураПоставщиков" Тогда
			Для Каждого СтрокаОбъекта Из НайденнаяСтрокаТипа.Строки Цикл
				СсылкаНаОбъект = ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка создания элемента справочника ""%1""';uk='Помилка створення елемента довідника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиБезСсылокНаОбъекты = НайденнаяСтрокаТипа.Строки.НайтиСтроки(ОтборБезСсылокНаОбъекты);
			Для Каждого СтрокаОбъекта Из СтрокиБезСсылокНаОбъекты Цикл
				СсылкаНаОбъект = ОбменСКонтрагентамиПереопределяемый.СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					СтрокаОбъекта.СсылкаНаОбъект = СсылкаНаОбъект;
				Иначе
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка создания элемента справочника ""%1""';uk='Помилка створення елемента довідника ""%1""'"), СтрокаТипОбъекта.ТипОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
					Ошибка = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСтрокуВДеревеРазбора(СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка)
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
			НайденнаяСтрока.ИД = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Если НЕ ЭтоНоменклатура(СсылкаНаОбъект) Тогда
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				// Проверим, что Описания совпадают по одной ссылке
				Если НайденнаяСтрока.ОписаниеОбъекта <> ОписаниеОбъекта Тогда
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка в данных эл.документа: на один Объект <%1>, два Описания <%2> и <%3>';uk='Помилка в даних ел.документа: на один Об''єкт <%1>, два Описи <%2> і <%3>'"), СсылкаНаОбъект,
						НайденнаяСтрока.ОписаниеОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
				КонецЕсли;
			Иначе
				// У номенклатуры может быть такое, в случае когда несколько элементов вход.данных
				// имеют ссылку на один элемент справочника.
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("СсылкаНаОбъект",  СсылкаНаОбъект);
				ПараметрыОтбора.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
				ПараметрыОтбора.Вставить("ИД",              ИдОбъекта);
				НайденныеСтроки = СтрокаТипаВДереве.Строки.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
					НайденнаяСтрока.СсылкаНаОбъект  = СсылкаНаОбъект;
					НайденнаяСтрока.ИД              = ИдОбъекта;
					НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
					НайденнаяСтрока.ОписаниеТипа    = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
						СтрокаТипаВДереве.ТипОбъекта);
					НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
						НайденнаяСтрока));
					ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
				Иначе // Непредвиденная ситуация
					// Ошибка: по ссылке существуют в ЭД разные по Описанию объекты
					Ошибка = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка в данных эл.документа: неуникальное описание для ИД <%1>, Описание <%2>';uk='Помилка в даних ел.документа: неунікальний опис для ІД <%1>, Опис <%2>'"),
						ИдОбъекта, ОписаниеОбъекта);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдОбъекта) Тогда
		
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ИдОбъекта, "ИД");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ИД              = ИдОбъекта;
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			Если ЭтоСсылочныйОбъект(СтрокаТипаВДереве.ТипОбъекта) Тогда
				НайденнаяСтрока.ОписаниеТипа = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
					СтрокаТипаВДереве.ТипОбъекта);
			КонецЕсли;
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		Иначе
			Возврат НайденнаяСтрока;
		КонецЕсли;
	Иначе
		НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(ОписаниеОбъекта, "ОписаниеОбъекта");
		Если НайденнаяСтрока = Неопределено Тогда
			НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();
			НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;
			НайденнаяСтрока.ОписаниеТипа    = ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);
			НайденнаяСтрока.ИндексСтроки    = СтрокаТипаВДереве.ИндексСтроки + "_" + Строка(СтрокаТипаВДереве.Строки.Индекс(
				НайденнаяСтрока));
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Функция ЭтоСсылочныйОбъект(ТипОбъекта)
	
	Если ТипОбъекта = "Штамп" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РазобратьИДТовара(знач ИД)
	
	СтруктураВозврата = Новый Структура("ИДТовара, ИДХарактеристики, ИДУпаковки");
	Если Не ЗначениеЗаполнено(ИД) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Поз = Найти(ИД, "#");
	Если Поз > 0 Тогда
		
		СтруктураВозврата.ИДТовара = Сред(ИД, 1 , Поз - 1);
		Если СтрДлина(ИД) > Поз Тогда
			
			Ид = Сред(ИД, Поз + 1);
			Поз = Найти(ИД, "#");
			Если Поз > 0 Тогда
				СтруктураВозврата.ИДХарактеристики = Сред(ИД, 1 ,Поз - 1);
			КонецЕсли;
			
			Ид = Сред(ИД, Поз + 1);
			Если СтрДлина(ИД) > Поз Тогда
				СтруктураВозврата.ИДУпаковки = Сред(ИД, Поз);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СформироватьСтруктуруТовара()
	
	СтруктураВозврата = Новый Структура("Номенклатура, Характеристика, Упаковка");
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает ссылка на элемент справочника.
//
// Параметры:
//  Наименование - Строка, название справочника в метаданных.
//  ИД - Уникальный идентификатор элемента.
//
// Возвращаемое значение:
//  Ссылка на элемент справочника.
//
Функция ЭлементСправочникаПоИД(Наименование, ИД)
	
	Результат = Неопределено;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(Наименование);
	Если ЗначениеЗаполнено(ИмяПрикладногоСправочника) Тогда
		Если ЗначениеЗаполнено(ИД) И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИД) Тогда
			UID = Новый УникальныйИдентификатор(ИД);
			Результат = Справочники[ИмяПрикладногоСправочника].ПолучитьСсылку(UID);
		Иначе
			Результат = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку(Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Чтение xml по схеме версии CML2

Функция ЗначениеДопРеквизитаДокумента(ИмяРеквизита, ЭД)
	
	ЗначениеРеквизита = Неопределено;
	
	Если ЭД.Свойства().Получить("ЗначенияРеквизитов") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(ЭД.ЗначенияРеквизитов) = Тип("ОбъектXDTO") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из ЭД.ЗначенияРеквизитов.ЗначениеРеквизита Цикл
		Если ВРег(ТекРеквизит.Наименование) = ВРег(ИмяРеквизита) Тогда
			Если ТекРеквизит.Значение.Количество() = 1 Тогда
				ЗначениеРеквизита = ТекРеквизит.Значение[0];
			Иначе
				ЗначениеРеквизита = ТекРеквизит.Значение;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Функция ЭтоПростойТипЭлементаXDTO(Элемент)
	
	ЭтоПростойТип = Истина;
	ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("СписокXDTO")
		ИЛИ ТипЭлемента = Тип("ОбъектXDTO")
		ИЛИ ТипЭлемента = Тип("ЗначениеXDTO") Тогда
		ЭтоПростойТип = Ложь;
	КонецЕсли;
	
	Возврат ЭтоПростойТип;
	
КонецФункции

Функция ЭтоДопРеквизит(НаименованиеРеквизита)
	
	НомерСимвола = Найти(НаименованиеРеквизита, "Доп_");
	
	Возврат НомерСимвола > 0;
	
КонецФункции

// Процедура выполняет чтение универсальной структуры данных схемы 2 (разработанной
// для передачи произвольных данных в шапке и в табличных частях: список из набора пар:
// наименование реквизита и список значений реквизитов.
//
// Параметры:
//  ЗначенияРеквизитов - СписокXDTO - список реквизитов и значений.
//  Приемник - строка дерева данных, список значений - строка дерева, в которую помещаются извлеченные из xml-файла данные,
//    либо список значений (при разборе таблицы товаров).
//  Ошибка - Булево - флаг ошибки.
//
Процедура ПрочитатьСписокЗначенийРеквизитовCML(ЗначенияРеквизитов, Приемник, Ошибка, ДопРеквизиты = Неопределено)
	
	ДополнительныеРеквизиты = Новый Структура;
	
	ОбычныеРеквизиты = Новый Структура;

	Для Каждого Реквизит Из ЗначенияРеквизитов Цикл
		
		Если Не ТипЗнч(Реквизит.Значение) = Тип("СписокXDTO") Тогда
			Продолжить;;
		КонецЕсли;
		
		Если Не Реквизит.Значение.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = Реквизит.Значение;
		
		Если ЭтоДопРеквизит(Реквизит.Наименование) Тогда
			ЗапомнитьРеквизитыДерева(ДополнительныеРеквизиты, Реквизит.Наименование, ЗначениеРеквизита, Приемник, ДопРеквизиты);
		Иначе
			ЗапомнитьРеквизитыДерева(ОбычныеРеквизиты, Реквизит.Наименование, ЗначениеРеквизита, Приемник, ДопРеквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеРеквизиты.Количество() > 0 Тогда
		
		ДобавитьРеквизитВПриемник("ДопДанныеПодписанные", ДополнительныеРеквизиты, Приемник)
		
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ОбычныеРеквизиты Цикл
		
		ДобавитьРеквизитВПриемник(КлючЗначение.Ключ, КлючЗначение.Значение, Приемник);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеДополнительногоРеквизита(РеквизитЗначение)
	
	МассивЗначений = Новый Массив;
	Для Каждого Значение Из РеквизитЗначение Цикл
		МассивЗначений.Добавить(Значение);
	КонецЦикла;
	ЗначениеРеквизита = ?(МассивЗначений.Количество() > 1, МассивЗначений, МассивЗначений[0]);
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Процедура ЗапомнитьРеквизитыДерева(СтруктураРеквизитов, НаименованиеРеквизита, ЗначениеРеквизита, Приемник, ДопРеквизиты)
	
	ИмяРеквизита = СтрЗаменить(НаименованиеРеквизита, "Доп_", "");
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	Если Найти(ИмяРеквизита, "_Таблица") > 0 Тогда
		
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "_Таблица", "");
		РеквизитЗначение = ТаблицаИзСтроки(ЗначениеРеквизита);
		
		Если ВРег(ИмяРеквизита) = ВРег("ДокументыОснования")
			Или ВРег(ИмяРеквизита) = ВРег("ДокументОснование") Тогда
			// В актуальных ЭД передаются идентификаторы документов ИБ, для поиска основания:
			ЕстьИДДокументаОснования = РеквизитЗначение.Колонки.Найти("ИдентификаторДокументаОснования") <> Неопределено;
			
			МассивДО = Новый Массив;
			
			Для Каждого ТекСтрока Из РеквизитЗначение Цикл
				Если ЕстьИДДокументаОснования Тогда
					ДокументОснование = ДокументОснованиеПоИдентификатору(ТекСтрока.ИдентификаторДокументаОснования, ДопРеквизиты);
				Иначе
					ДокументОснование = ПолучитьДокументОснование(ТекСтрока.Наименование, ДопРеквизиты);
				КонецЕсли;
				МассивДО.Добавить(ДокументОснование);
			КонецЦикла;
			
			Если МассивДО.Количество() = 1 Тогда
				РеквизитЗначение = МассивДО[0];
			Иначе
				РеквизитЗначение = МассивДО;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДокументыСделки") Тогда
		
		РеквизитЗначение = ТаблицаИзСтроки(ЗначениеРеквизита);
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ЦенаВключаетНДС") Тогда
		
		ЦенаВключаетНДС = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		
		Если ВРег(ЦенаВключаетНДС) = ВРег("false") Тогда
			РеквизитЗначение = Ложь;
		ИначеЕсли ВРег(ЦенаВключаетНДС) = ВРег("true") Тогда
			РеквизитЗначение = Истина;
		КонецЕсли;
		
	ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
		
		ДатаИсправленияЗначение = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		Попытка
			РеквизитЗначение = ДатаИзСтроки(ДатаИсправленияЗначение);
		Исключение
			РеквизитЗначение = ДатаДД_ММ_ГГГГ(ДатаИсправленияЗначение);
		КонецПопытки;
	Иначе
		РеквизитЗначение = ЗначениеДополнительногоРеквизита(ЗначениеРеквизита);
		
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить(ИмяРеквизита, РеквизитЗначение);
	
КонецПроцедуры

Функция ТаблицаИзСтроки(Знач ЗначенияРеквизита)
	
	ПредставлениеТаблицы = ЗначенияРеквизита[0];
	
	Попытка
		ТаблицаРезультат = ЗначениеИзСтрокиВнутр(ПредставлениеТаблицы);
	Исключение
		Попытка
			ТаблицаРезультат = ТаблицаИзСтрокиСРазделителем(ПредставлениеТаблицы);
		Исключение
			Возврат Новый ТаблицаЗначений;
		КонецПопытки;
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ДобавитьРеквизитВПриемник(НаименованиеРеквизита, ЗначениеРеквизита, Приемник)
	
	Если ТипЗнч(Приемник) = Тип("СписокЗначений") Тогда
		Приемник.Добавить(ЗначениеРеквизита, НаименованиеРеквизита);
	Иначе
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(Приемник, НаименованиеРеквизита, ЗначениеРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьДанныеКонтрагентаCML(Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль = "", ДопПараметры = Неопределено, МассивИдКонтрагентов = "")

	ВидКонтрагента  = "";
	ВидДопАналитики = "";
	Если Роль = "Поставщик"
		ИЛИ (Роль = "Лицензиар" ИЛИ Роль = "Комиссионер") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ (Роль = "Лицензиат" ИЛИ Роль = "Комитент") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		ИЛИ Роль = "Продавец"
		ИЛИ Роль = "Исполнитель" Тогда
		ВидКонтрагента = "Организации";
		ИмяРеквизита = "Организация";
		ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";
	ИначеЕсли Роль = "Покупатель"
		ИЛИ (Роль = "Лицензиат" ИЛИ Роль = "Комитент") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ (Роль = "Лицензиар" ИЛИ Роль = "Комиссионер") И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Контрагент";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ДопАналитика = "Партнер";
		ВидДопАналитики = "Партнеры";
		
	ИначеЕсли Роль = "Плательщик" Или Роль = "Получатель" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = Роль;
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ДопАналитика = "Партнер";
	ИначеЕсли Роль = "ПокупательКомиссионногоТовара" Тогда
		ВидКонтрагента = "Контрагенты";
		ИмяРеквизита = "Покупатель";
		ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов";
		ДопАналитика = "Партнер";
	КонецЕсли;
	
	РеквизитыКонтрагента = Новый Структура;
	Для Каждого ТекСвойство Из Элемент.Свойства() Цикл
		
		ЗнДанных = Элемент[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			
			ИдКонтрагента = ЗнДанных;
			// Разберем ИД на ИНН и КПП
			СтруктураПоиска = РазобратьИДКонтрагента(ИдКонтрагента);
			Если СтруктураПоиска.Свойство("ИНН") Тогда
				РеквизитыКонтрагента.Вставить("ИНН", СтруктураПоиска.ИНН);
			КонецЕсли;
			Если СтруктураПоиска.Свойство("КПП") Тогда
				РеквизитыКонтрагента.Вставить("КПП", СтруктураПоиска.КПП);
			КонецЕсли;
			
			// При комиссионной торговле в ЭД могут присутствовать несколько контрагентов,
			// у некоторых из них могут совпадать идентификаторы (Комитент/Комиссионер и Покупатель),
			// в этом случае надо в дерево разбора добавить только данные Комитента/Комиссионера.
			Если ВидКонтрагента = "Контрагенты"
				И ТипЗнч(МассивИдКонтрагентов) = Тип("Массив") Тогда
				Если МассивИдКонтрагентов.Найти(ИдКонтрагента) = Неопределено Тогда
					МассивИдКонтрагентов.Добавить(ИдКонтрагента);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ОфициальноеНаименование")
			ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ПолноеНаименование") Тогда
			РеквизитыКонтрагента.Вставить("ПолноеНаименование", ЗнДанных);
			ЮрФизЛицо = ?(ВРег(ТекСвойство.Имя) = ВРег("ПолноеНаименование"), "ФизЛицо", "ЮрЛицо");
			РеквизитыКонтрагента.Вставить("ЮрФизЛицо", ОбменСКонтрагентамиПовтИсп.НайтиПеречисление("ЮрФизЛицо", ЮрФизЛицо));
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Адрес") ИЛИ ВРег(ТекСвойство.Имя) = ВРег("ЮридическийАдрес") Тогда
			Если Роль = "Плательщик" ИЛИ Роль = "Поставщик" Тогда
				ПрефиксАдреса = "ЮридическийАдрес";
			Иначе
				ПрефиксАдреса = ?(ВРег(ТекСвойство.Имя) = ВРег("Адрес"), "ФактическийАдрес", "ЮридическийАдрес");
			КонецЕсли;
			Для Каждого Свойство Из ЗнДанных.Свойства() Цикл
				Реквизит = ЗнДанных[Свойство.Имя];
				Если Реквизит <> Неопределено Тогда
					Если ВРег(Свойство.Имя) = ВРег("Представление") Тогда
						РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "_Представление", Реквизит);
					ИначеЕсли ВРег(Свойство.Имя) = ВРег("АдресноеПоле") Тогда
						СтруктураАдреса = Новый Структура;
						Для Каждого ЭлементАдреса Из Реквизит Цикл
							НормТип = ЭлементАдреса.Тип;
							Если НормТип = "Почтовый индекс" Тогда
								НормТип = "Индекс";
							ИначеЕсли НормТип = "Регион" Тогда
								НормТип = "КодРегион";
							ИначеЕсли НормТип = "Населенный пункт" Тогда
								НормТип = "НаселПункт";
							ИначеЕсли НормТип = "Квартира" Тогда
								НормТип = "Кварт";
							КонецЕсли;
							СтруктураАдреса.Вставить(НормТип, ЭлементАдреса.Значение);
						КонецЦикла;
						Если ЗначениеЗаполнено(СтруктураАдреса) Тогда
							РеквизитыКонтрагента.Вставить("АдресСтруктурой", СтруктураАдреса);
						КонецЕсли;
					Иначе
						РеквизитыКонтрагента.Вставить(Свойство.Имя, Реквизит);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Руководитель") Тогда
			СтРеквизитов = Новый Структура;
			Для Каждого Свойство Из ЗнДанных.Свойства() Цикл
				Реквизит = ЗнДанных[Свойство.Имя];
				Если Реквизит <> Неопределено Тогда
					Если ЭтоПростойТипЭлементаXDTO(Реквизит) Тогда
						СтРеквизитов.Вставить(Свойство.Имя, Реквизит);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			РеквизитыКонтрагента.Вставить("Руководитель", СтРеквизитов);
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Контакты") Тогда
			ТаблицаКонтактов = Новый ТаблицаЗначений();
			ТаблицаКонтактов.Колонки.Добавить("Вид");
			ТаблицаКонтактов.Колонки.Добавить("Представление");
			ТаблицаКонтактов.Колонки.Добавить("ЗначенияПолей");
			Для Каждого Контакт Из ЗнДанных.Контакт Цикл
				Вид = Неопределено;
				Если Контакт.Тип = "Почта" Тогда
					Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","EmailКонтрагента");
				ИначеЕсли Контакт.Тип = "Телефон рабочий" Тогда
					Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента");
				ИначеЕсли Контакт.Тип = "Факс" Тогда
					Вид = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ФаксКонтрагента");
				КонецЕсли;
				Если ЗначениеЗаполнено(Вид) Тогда // добавляем только, если есть виды контактной информации в конфигурации-приемнике
					НовКонт = ТаблицаКонтактов.Добавить();
					НовКонт.Вид = Вид;
					НовКонт.Представление = Контакт.Значение;
					НовКонт.ЗначенияПолей = Контакт.Комментарий;
				КонецЕсли;
			КонецЦикла;
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ТаблицаКонтактов);

		Иначе
			РеквизитыКонтрагента.Вставить(ТекСвойство.Имя, ЗнДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);
	Контрагент = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);
	Если Роль <> "ПокупательКомиссионногоТовара" Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);
	КонецЕсли;
	
	РасчетныйСчетВДопДанных = Ложь;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("РасчетныйСчет") Тогда
			РасчетныйСчетВДопДанных = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Определяем расчетный счет контрагента
	Если НЕ ТипЗнч(Элемент) = Тип("Структура") Тогда
		Если Элемент.Свойства().Получить("РасчетныйСчет") <> Неопределено
			И ТипЗнч(Элемент.РасчетныйСчет) = Тип("ОбъектXDTO") Тогда
			
			Если НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
				Если ВРег(Роль) = ВРег("Продавец") И Не РасчетныйСчетВДопДанных Тогда
					ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, Элемент.РасчетныйСчет, ДеревоРазбора,
						"БанковскиеСчетаКонтрагентов", Роль, Контрагент, Ошибка);
				КонецЕсли;
			Иначе
				
				ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, Элемент.РасчетныйСчет, ДеревоРазбора,
												 ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
			КонецЕсли;
		КонецЕсли;
		
		Если Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено
			И ТипЗнч(Элемент.РасчетныеСчета) = Тип("ОбъектXDTO") Тогда
			
			Если ВРег(НовыйЭД.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
				
				// Эта процедура считывает расчетные счета контрагента и добавляет их как строки табличной части документа.
				// Используется при обмене реквизитами организации.
				ПрочитатьДанныеПоРасчетнымСчетамКонтрагентаCML(НовыйЭД, Элемент.РасчетныеСчета, ДеревоРазбора,
					ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
			Иначе
				
				Для Каждого РасчетныйСчет Из Элемент.РасчетныеСчета.РасчетныйСчет Цикл
					ПрочитатьДанныеПоРасчетномуСчету(НайденнаяСтрока, РасчетныйСчет, ДеревоРазбора,
						ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// При чтении документа СчетНаОплату CML в ДопПараметрах передается структура с реквизитами РасчетногоСчета,
	// который находиться в шапке макета "СчетНаОплату" обработки "ОбменСКонтрагентами".
	Если РасчетныйСчетВДопДанных Тогда
		ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, ДопПараметры.РасчетныйСчет, ДеревоРазбора,
										 ВидБанковскогоСчета, Роль, Контрагент, Ошибка);
	КонецЕсли;
	
	// Доп.аналитику добавим, если заполнена
	Если ЗначениеЗаполнено(ВидДопАналитики) Тогда
		Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			РеквизитыПартнера = Новый Структура();
			РеквизитыПартнера.Вставить("Контрагент", Контрагент);
			ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
			
			ЗнДопАналитики = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяПрикладногоСправочника, , РеквизитыПартнера);
			Если Не ЗначениеЗаполнено(ЗнДопАналитики) Тогда
				ЗнДопАналитики = Справочники[ИмяПрикладногоСправочника].ПустаяСсылка();
			КонецЕсли;

			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
				+ ЗнДопАналитики.Код, ЗнДопАналитики, РеквизитыПартнера, ДеревоРазбора, Ошибка);
			ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура читает простой список содержащий элементы простых типов (строка, число, ...).
// Прочитанные данные элемента списка помещаются в структуру (ключ - наименование параметра, значение - значение),
// структуры параметров помещаются в массив, массив записывается в дерево значений с именем объекта XDTO, элементом
// которого является список.
//
// Параметры:
//  ОбъектXDTO - объект XDTO - объект, содержащий единственный элемент - читаемый список XDTO.
//  НовыйЭД - строка дерева значений - строка дерева данных, в которую помещается массив с прочитанными данными.
//  Ошибка - строка - текст ошибки, возникшей в процессе обработки списка XDTO.
//
Процедура ДанныеСпискаЗначенийCML(ОбъектXDTO, НовыйЭД, Ошибка)
	
	МассивСтруктур = Новый Массив;
	СвойстваОбъекта = ОбъектXDTO.Свойства();
	Если СвойстваОбъекта.Количество() > 0 Тогда
		Если СвойстваОбъекта[0].ВерхняяГраница = -1 Тогда
			ИмяСписка = СвойстваОбъекта[0].Имя;
			Для Каждого ЭлементСписка Из ОбъектXDTO[ИмяСписка] Цикл
				СтруктураДанных = Новый Структура;
				Для Каждого Элемент Из ЭлементСписка.Свойства() Цикл
					Значение = ЭлементСписка[Элемент.Имя];
					СтруктураДанных.Вставить(Элемент.Имя, Значение);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураДанных);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСтруктур.Количество() > 0 Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ОбъектXDTO.ВладеющееСвойство().Имя, МассивСтруктур);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеГруппыВДереве(ДеревоДанных, ПолныйПуть) 
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Строки;
	КонецЕсли;
	
КонецФункции

Функция СсылкаРеквизитаДерева(Дерево, СтрокаДерева, ИмяРеквизита)
	
	ИндексРеквизита = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(Дерево, СтрокаДерева, ИмяРеквизита);
	Если ИндексРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Разделитель = Найти(ИндексРеквизита,"_");
	ПоказательИндекса = Лев(ИндексРеквизита, Разделитель - 1);
	
	СтрокиСсылкаРеквизита = Дерево.Строки.Найти(ПоказательИндекса, "ИндексСтроки");
	Если СтрокиСсылкаРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаРеквизита = СтрокиСсылкаРеквизита.Строки[0];
	
	Возврат СтрокаРеквизита.СсылкаНаОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом разбора

Процедура ЗаполнениеТаблицыТоваровДеревоДанных(ДеревоДанных, ИмяТаблицыТоваров, ИдентификаторыДокументовИЭДОснований)
	
	// Заполняем таблицу товаров
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти(ИмяТаблицыТоваров, "ПолныйПуть");
	
	ЗполнятьСтавкуНДС = Истина;
	
	ИДФайла = ЗначениеРеквизитаДерева(ДеревоДанных, "ИдФайл");
	Если СтрНачинаетсяС(ИДФайла, "DP_REZRUISP") Тогда
		ЗполнятьСтавкуНДС = Ложь;
	КонецЕсли;
	
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		СтрокаДопДанных = Товар.Строки.Найти(ИмяТаблицыТоваров + ".НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
		ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(ДокументОснование, ИдентификаторыДокументовИЭДОснований);
			Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанныеПодписанные.ВидДокументаОснования", Строка.ВидЭД);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных,
										"ДопДанныеПодписанные.НомерДокументаОснования",
										Строка.НомерДокументаОтправителя);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных,
										"ДопДанныеПодписанные.ДатаДокументаОснования",
										Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанныеПодписанные.ИДЭДДокументаОснования", Строка.Наименование);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанные.Подписанные.ИдентификаторДокументаОснования", Строка.ИдентификаторДокументаОснования);
			КонецЦикла;
		КонецЕсли;
		
		Характеристика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.Характеристика", Ложь);
		Упаковка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.Упаковка", Ложь);
		
		// Формирование идентификатора товара.
		Ид = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.ИдТовараУКонтрагента");
		Если НЕ ЗначениеЗаполнено(ИД) Тогда
			Номенклатура = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.Номенклатура");
			ИДТовара = Номенклатура.УникальныйИдентификатор();
			ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
			ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
			ИД = Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, ИмяТаблицыТоваров + ".НомерСтроки.ДопДанныеПодписанные.ИД", ИД);
		
		// Характеристики и упаковки.
		Если ЗначениеЗаполнено(Характеристика) ИЛИ ЗначениеЗаполнено(Упаковка) Тогда
			НаименованиеНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.НаименованиеНоменклатуры")
				+ " (" + ?(ЗначениеЗаполнено(Характеристика), Характеристика , "")
				+ ?(ЗначениеЗаполнено(Характеристика) И ЗначениеЗаполнено(Упаковка), ", ", "")
				+ ?(ЗначениеЗаполнено(Упаковка), Упаковка , "") + ")";
			ВставитьЗначениеВДерево(Товар, ИмяТаблицыТоваров + ".НомерСтроки.НаименованиеНоменклатуры", НаименованиеНоменклатуры);
		КонецЕсли;
		// Для Акт501 ставка НДС передается в допданных:
		
		Если ИмяТаблицыТоваров = "ТаблицаУслуг" И ЗполнятьСтавкуНДС Тогда
			Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.СтавкаНДС")) Тогда
				Ставка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, ИмяТаблицыТоваров + ".НомерСтроки.СтавкаНДС");
				СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия( , Ставка);
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДопДанныеПодписанные.СтавкаНДС", СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с Соглашение об изменение стоимости

Процедура ЗаполнитьРеквизитыШапкиКорректировкаСтоимости(ДанныеПечати, Макет, ТабличныйДокумент)

	ЧастьЗаголовка1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Соглашение об изменении стоимости № %1 от %2';uk='Оферта про зміну вартості № %1 від %2'"),
														ДанныеПечати.НомерДокумента, Формат(ДанныеПечати.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	ЧастьЗаголовка2 = ?(ЗначениеЗаполнено(ДанныеПечати.НомерИсправления), 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', исправление № %1 от %2';uk=' виправлення № %1 від %2'"),
				ДанныеПечати.НомерИсправления, Формат(Дата(ДанныеПечати.ДатаИсправления), "ДФ=dd.MM.yyyy")), "");
				
	ЧастьЗаголовка3 = ?(ЗначениеЗаполнено(ДанныеПечати.ПредставлениеИсходногоДокумента), ДанныеПечати.ПредставлениеИсходногоДокумента
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' № %1 от %2';uk=' № %1 від %2'"),
						ДанныеПечати.НомерИсходногоДокумента,
						Формат(Дата(ДанныеПечати.ДатаИсходногоДокумента), "ДФ=dd.MM.yyyy")), "");
						
	ЧастьЗаголовка4 = ?(ЗначениеЗаполнено(ДанныеПечати.НомерИсправленияИсходногоДокумента),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' с учетом исправления № %1 от %2';uk=' з урахуванням виправлення № %1 від %2'"),
				ДанныеПечати.НомерИсправленияИсходногоДокумента, Формат(Дата(ДанныеПечати.ДатаИсправленияИсходногоДокумента),"ДФ=dd.MM.yyyy")), "");
				
	ТекстЗаголовка = ЧастьЗаголовка1 + ЧастьЗаголовка2 + Символы.ВК + ЧастьЗаголовка3 + ЧастьЗаголовка4;
		
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаЗаголовок.Параметры.Заголовок = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
		
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ОбластьМакета.Параметры.Основание = 
		?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеОснования), ДанныеПечати.НаименованиеОснования, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеНомер), " № " + ДанныеПечати.ОснованиеНомер, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеДата), " от " + Формат(ДанныеПечати.ОснованиеДата, "ДЛФ=Д"), "");
		
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
	
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПокупателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК");
		
	ТабличныйДокумент.Вывести(ОбластьМакета);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Работа со СЧЕТ (ЗАКАЗ КЛИЕНТА)

Функция ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, Тип = "Счет")
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("БИКБанкаПолучателя",               ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкПолучателяПредставление",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаПолучателяПредставление", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ДанныеЗаполненияШапки.Вставить("СчетПолучателяПредставление",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	ДанныеЗаполненияШапки.Вставить("БИКБанкаКорреспондента",           ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкКорреспондент",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаКорреспондента",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
	
	ДанныеЗаполненияШапки.Вставить("Номер",             ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",              ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СрокПлатежа"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОкончанияДействияСчета"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("Руководитель",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Руководитель"));
	ДанныеЗаполненияШапки.Вставить("Бухгалтер",         ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Бухгалтер"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("Сумма",             ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаИтог"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки",     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"АдресДоставки"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("Описание");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если Тип = "Счет" Тогда
				НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
				ИДТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
			Иначе
				НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
				ИДТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			КонецЕсли; 
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.Код   = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		КонецЕсли;
		
		НоваяСтрока.Описание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Описание");
		НоваяСтрока.Артикул          = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		Упаковка                     = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"ЕдиницаИзмерения.Наименование");
		БазоваяЕдиницаИзмерения      = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.БазоваяЕдиница.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество       = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"КоличествоУпаковок");
		НоваяСтрока.Цена             = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма            = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		
		СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		Если Не ЗначениеЗаполнено(СуммаНДС) Тогда
			НоваяСтрока.СуммаНДС         = 0;
		Иначе
			НоваяСтрока.СуммаНДС         = СуммаНДС;
		КонецЕсли;
		НоваяСтрока.СтавкаНДС        = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки      = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		
	КонецЦикла;
	
	// ЭтапыОплаты
	ТЗЭтапыОплаты = Новый ТаблицаЗначений;
	
	Если Тип = "Заказ" Тогда
		ТЗЭтапыОплаты.Колонки.Добавить("ВариантОплаты");
	КонецЕсли;
	ТЗЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("ПроцентПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("СуммаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("НомерСтроки");
	НомерСтроки = 1;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ЭтапыГрафикаОплаты"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗЭтапыОплаты.Добавить();
		Если Тип = "Заказ" Тогда
			НоваяСтрока.ВариантОплаты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ВариантОплаты");
		КонецЕсли;
		НоваяСтрока.ДатаПлатежа    = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ДатаПлатежа");
		НоваяСтрока.ПроцентПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ПроцентПлатежа");
		НоваяСтрока.СуммаПлатежа   = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаПлатежа");
		НоваяСтрока.НомерСтроки    = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",       ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",      ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыОплаты", ТЗЭтапыОплаты);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ Счет-заказ.
//
Процедура ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеПечати, Тип = "Счет")
	
	ИспользоватьРучныеСкидки         = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	КолонкаКодов = ОбменСКонтрагентамиПереопределяемый.ИмяДополнительнойКолонки();
	
	//Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетЗаказ");
	Макет = Новый ТабличныйДокумент;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_СчетЗаказ";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		ЧастичнаяОплата = Ложь;
	Иначе
		ЧастичнаяОплата = Истина;
	КонецЕсли;
	
	ЕстьСкидки = ОбменСКонтрагентамиПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки
		ИЛИ ИспользоватьАвтоматическиеСкидки);
	
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если НЕ ВыводитьКоды Тогда
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = Новый ТаблицаЗначений;
	ТаблицаЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	Если ДанныеПечати.Свойство("ДатаПлатежа") Тогда
		НовСтрока = ТаблицаЭтапыОплаты.Добавить();
		НовСтрока.ДатаПлатежа = ДанныеПечати.ДатаПлатежа;
	КонецЕсли; 
	
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = ТаблицаДопДанных();
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	ЕстьДопДанные = Ложь;
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		
		ЕстьДопДанные = Истина;
		
		Если ЕстьСкидки Тогда
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДопДанныеТаблицыСЭЦП");
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДопДанныеТаблицыСЭЦП");
			
		Иначе
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопДанныеТаблицыСЭЦП");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип);
	СоответствиеСтавокНДС = Новый Соответствие;
	Если ЧастичнаяОплата Тогда
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата"));
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
		
		ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.Шапка.НазначениеПлатежа;
		ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");
		ОбластьИтого.Параметры.Всего = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтого);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СуммаНДС) Тогда
			
			ОбластьНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");
			ОбластьНДС.Параметры.НДС = НСтр("ru='В т.ч. НДС:';uk='В т. ч. ПДВ:'");
			ОбластьНДС.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьНДС);
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)';uk='Товари (роботи, послуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьДопДанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		КонецЕсли;
		
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок	   = 0;
		ВсегоБезСкидок = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ТоварПредставление = ?(ЗначениеЗаполнено(СтрокаТовары.Описание), СтрокаТовары.Описание, СтрокаТовары.Товар);
			ОбластьТовар.Параметры.Товар = ТоварПредставление;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
			Иначе
				СуммаПоСтроке = СтрокаТовары.Сумма;
			КонецЕсли;
			
			ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
			
			Если ЕстьСкидки Тогда
				СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
				ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураНаличияДопДанных, НомерСтроки,ТабличныйДокумент, ОбластьМакетаДД);
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок = ВсегоСкидок + СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			Сумма = Сумма + СуммаПоСтроке;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
		КонецЦикла;
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.Всего = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма);
		
		Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСуммаНДС = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(СуммаНДС);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСкидок = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(ВсегоСкидок);
			ОбластьДанных.Параметры.ВсегоБезСкидок = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(ВсегоБезСкидок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			ТаблицаТоварыНДС = ТаблицаТовары.Скопировать( , "СтавкаНДС, СуммаНДС");
			ТаблицаТоварыНДС.Свернуть("СтавкаНДС", "СуммаНДС");
			Для Каждого ТекСтавкаНДС Из ТаблицаТоварыНДС Цикл
				СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.СтавкаНДС, ТекСтавкаНДС.СуммаНДС);
				ТабличныйДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				ОбластьДанных.Параметры.НДС = ОбменСКонтрагентамиПереопределяемый.ТекстНДСПоСтавке(ТекСтавкаНДС.СтавкаНДС,
					ДанныеПечати.Шапка.ЦенаВключаетНДС);
				ОбластьДанных.Параметры.ВсегоНДС = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(ТекСтавкаНДС.СуммаНДС);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЦикла;
			
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				ВсегоСНДС = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма);
			Иначе
				ВсегоСНДС = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма + СуммаНДС);
			КонецЕсли;
			
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = ВсегоСНДС;
			ТабличныйДокумент.Вывести(ОбластьИтогоСНДС)
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыОплаты;
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты"));
		Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			Область.Параметры.Заполнить(ТекЭтап);
			Область.Параметры.ТекстНДС = ОбменСКонтрагентамиПереопределяемый.СформироватьТекстНДСЭтапаОплаты(
				СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ИтогоЭтапыОплаты"));
	КонецЕсли;
	
	ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип);
	
	ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент);
	
КонецПроцедуры

// Процедура заполнения реквизитов шапки счета, заказа.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  Макет - Макет СчетЗаказ
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип)
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПолучателе = ДанныеПечати.Шапка.СведенияОПолучателе;
	
	Если Тип = "Счет" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДатаПлатежа) Тогда
			
			НадписьСрокДействия = НСтр("ru='Счет действителен до %СрокДействия%.';uk='Рахунок дійсний до %СрокДействия%.'");
			НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%",
				Формат(ДанныеПечати.Шапка.ДатаПлатежа, "ДЛФ=D"));
			ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.БанкКорреспондент) Тогда
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаКорреспондента;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкКорреспондент;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаКорреспондента;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
		Иначе	
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаПолучателя;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкПолучателяПредставление;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетПолучателяПредставление;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если Тип = "Счет" Тогда
		ТекстЗаголовка = НСтр("ru='Счет на оплату № %НомерДокумента% от %ДатаДокумента% г.';uk='Рахунок на оплату № %НомерДокумента% від %ДатаДокумента% р.'");
	ИначеЕсли Тип = "Заказ" Тогда
		ТекстЗаголовка = НСтр("ru='Заказ клиента № %НомерДокумента% от %ДатаДокумента% г.';uk='Замовлення клієнта № %НомерДокумента% від %ДатаДокумента% р.'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет", НСтр("ru='Поставщик:';uk='Постачальник:'"), НСтр("ru='Исполнитель:';uk='Виконавець:'"));
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет", НСтр("ru='Покупатель:';uk='Покупець:'"), НСтр("ru='Заказчик:';uk='Замовник:'"));
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(СведенияОПолучателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
		ОбластьМакета.Параметры.НазначениеПлатежа = ДанныеПечати.Шапка.НазначениеПлатежа;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("АдресДоставки");
		ОбластьМакета.Параметры.АдресДоставки = ДанныеПечати.Шапка.АдресДоставки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения реквизитов подвала счета, заказа.
//
// Параметры:
//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  Макет - Макет СчетЗаказ
//  ТабличныйДокумент - Табличный документ
//
Процедура ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип)
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьМакета.Параметры.ФИОРуководителя = ДанныеПечати.Шапка.Руководитель;
		ОбластьМакета.Параметры.ФИОБухгалтера   = ДанныеПечати.Шапка.Бухгалтер;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЗАКАЗОМ ПОСТАВЩИКУ

Функция ПолучитьДанныеЗаказаПоставщикуДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	КонецЕсли;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("Номер",                    ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",                     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",                ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",                 ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",            ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",          ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки",            ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "АдресДоставки"));
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("НаименованиеНоменклатурыПоставщика");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СуммаСНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			Или СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			НоваяСтрока.Код = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
			НоваяСтрока.Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Артикул");
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Наименование");
			НоваяСтрока.НаименованиеНоменклатурыПоставщика = НоваяСтрока.Товар;
			ИДТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
			НоваяСтрока.Артикул = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
				"НоменклатураПоставщика.Артикул");
		КонецЕсли;
		Упаковка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "ЕдиницаИзмерения.Наименование");
		БазоваяЕдиницаИзмерения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.БазоваяЕдиница.Наименование");
					
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КоличествоУпаковок");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Сумма");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		НоваяСтрока.СуммаСНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "СуммаСНДС");
		
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Процедура заполняет табличный документ "Заказ поставщику".
//
Процедура ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	ИспользоватьРучныеСкидки = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьРучныеСкидкиВЗакупках");
	
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ЗаказПоставщику");
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ЗаказПоставщику";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	КолонкаКодов  = ОбменСКонтрагентамиПереопределяемый.ИмяДополнительнойКолонки();
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	ЕстьСкидки = ОбменСКонтрагентамиПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки);
	
	Если ЕстьСкидки Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
	КонецЕсли;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	КонецЕсли;
	
	// Заполнить реквизиты шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Заказ поставщику № %НомерДокумента% от %ДатаДокумента% г.';uk='Замовлення постачальнику № %НомерДокумента% від %ДатаДокумента% р.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьАдресДоставки = Макет.ПолучитьОбласть("АдресДоставки");
	ОбластьАдресДоставки.Параметры.АдресДоставки = ДанныеПечати.Шапка.АдресДоставки;
	ТабличныйДокумент.Вывести(ОбластьАдресДоставки);
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		
		ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
		ТабличныйДокумент.Присоединить(ОбластьКодов);
		
	КонецЕсли;
	
	ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)';uk='Товари (роботи, послуги)'");
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	ТаблицаДопДанныхСтрок = ТаблицаДопДанных();
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		
		Если ЕстьСкидки Тогда
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДопДанныеТаблицыСЭЦП");
			
		Иначе
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопДанныеТаблицыСЭЦП");
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
	КонецЕсли;

	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
	КонецЕсли;
	
	Сумма          = 0;
	СуммаНДС       = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НомерСтроки    = 0;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = СтрокаТовары.НаименованиеНоменклатурыПоставщика;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
		СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
		СуммаНДСТовара = ?(ТипЗнч(СтрокаТовары.СуммаНДС) = Тип("Число"), СтрокаТовары.СуммаНДС, 0);
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			СуммаПоСтроке = СтрокаТовары.Сумма + СуммаНДСТовара;
		Иначе
			СуммаПоСтроке = СтрокаТовары.Сумма;
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
		
		ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Сумма     = Сумма + СуммаПоСтроке;
		СуммаНДС  = СуммаНДС + СуммаНДСТовара;
		
		Если ЕстьСкидки Тогда
			ВсегоСкидок    = ВсегоСкидок    + СуммаСкидки;
			ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
		КонецЕсли;
		
		ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураНаличияДопДанных, НомерСтроки, ТабличныйДокумент, ОбластьМакетаДД);
		
	КонецЦикла;
	
	Если ЕстьСкидки Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	Если ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	
	Если ЕстьСкидки Тогда
		
		ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
	КонецЕсли;
	
	ОбластьДанных.Параметры.Всего = ОбменСКонтрагентамиПереопределяемый.ФорматСумм(Сумма);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	// Вывести ИтогоНДС
	Если ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
			ОбластьДанных.Параметры.НДС = НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'");
		Иначе
			ОбластьДанных.Параметры.НДС = НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'");
		КонецЕсли;
		ОбластьДанных.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим доп данные документа
	
	ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Работа с печатными формами

// Функция формирования структуры хранения итоговых суммы.
//
// Возвращаемое значение:
//  Структура - Структура хранения итоговых сумм.
//
Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по странице.
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМестНаСтранице", 0);
	Структура.Вставить("ИтогоКоличествоНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаНДСНаСтранице", 0);
	Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
	Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);
	Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоКоличество", 0);
	Структура.Вставить("ИтогоСумма", 0);
	Структура.Вставить("ИтогоСуммаНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	
	Возврат Структура;
	
КонецФункции

// Функция формирования структуры хранения данных строки.
//
// Параметры:
//  КоэффициентПересчета - Число - коэффициент пересчета в валюту регл. учета.
//
// Возвращаемое значение:
//  Структура - Структура данных строки товаров.
//
Функция СтруктураДанныеСтроки(КоэффициентПересчета)
	
	Структура = Новый Структура;
	Структура.Вставить("Номер", 0);
	Структура.Вставить("Мест", 0);
	Структура.Вставить("КоличествоДоКорректировки", 0);
	Структура.Вставить("Количество", 0);
	Структура.Вставить("ЦенаДоКорректировки", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("СуммаДоКорректировки", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("СуммаНДСДоКорректировки", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаСНДСДоКорректировки", 0);
	Структура.Вставить("СуммаСНДС", 0);
	Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("МассаНеттоДоКорректировки", 0);
	Структура.Вставить("МассаНетто", 0);
	
	Возврат Структура;
	
КонецФункции

// Процедура обнуления итоговых сумм по странице.
//
Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
	ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице    = 0;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
	
КонецПроцедуры

// Процедура рассчитывает итоговые суммы с учетом строки товаров.
//
// Параметры:
//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
//  ДанныеСтроки - Структура - Структура данных строки товаров
//
Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки)
	
	// Увеличим итоги по странице.
	ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице    = ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице + ДанныеСтроки.МассаНетто;
	
	// Увеличим итоги по документу.
	ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест + ДанныеСтроки.Мест;
	ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество + ДанныеСтроки.Количество;
	ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма + ДанныеСтроки.Сумма;
	ИтоговыеСуммы.ИтогоСуммаНДС    = ИтоговыеСуммы.ИтогоСуммаНДС + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто + ДанныеСтроки.МассаНетто;
	
	ИтоговыеСуммы.ИтогоСуммаДоКорректировки     = ИтоговыеСуммы.ИтогоСуммаДоКорректировки + ДанныеСтроки.СуммаДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки  = ИтоговыеСуммы.ИтогоСуммаНДСДоКорректировки + ДанныеСтроки.СуммаНДСДоКорректировки;
	ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки = ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки + ДанныеСтроки.СуммаСНДСДоКорректировки;
	
КонецПроцедуры

// Функция форматирования сумм.
//
// Параметры:
//  Сумма  - число, которое мы хотим форматировать. 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты.
//  ЧН     - строка, представляющая нулевое значение числа.
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "")
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" + ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
		+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

Функция ПолучитьДанныеИзвещенияДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Отправитель", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	
	ДанныеЗаполненияШапки.Вставить("Получатель",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения",	ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));
	ДанныеЗаполненияШапки.Вставить("ВремяПолучения",ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));
	
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование извещений

Процедура СформироватьДанныеПоУчастникуЭДО(УчастникЭДО, Дерево, ВидУчастникаЭДО, ТекстОшибки, ПространствоИмен, ВерсияФормата)
	
	Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО);
	Если Реквизит <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ИдУчастникаЭДО");
	ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИдУчастЭДО", Реквизит, Истина, ТекстОшибки);
	
	Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника");
	// Заполнение реквизитов
	Если Реквизит = "ОператорЭДО" Тогда
		РеквизитыОператора = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ОперЭДО"), ВерсияФормата);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.НаименованиеОрганизации");
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "НаимОрг", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.ИНН");
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ОператорЭДО.ИдентификаторОператора");
		ЗаполнитьСвойствоXDTO(РеквизитыОператора, "ИдОперЭДО", Реквизит, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникЭДО, "ОперЭДО", РеквизитыОператора, Истина, ТекстОшибки);
	ИначеЕсли Реквизит = "ИП" Тогда
		РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФЛТип"), ВерсияФормата);
		РеквизитыФИО = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"), ВерсияФормата);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.ИНН");
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННФЛ", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Фамилия");
		ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Фамилия", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Имя");
		ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Имя", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ИП.Отчество");
		ЗаполнитьСвойствоXDTO(РеквизитыФИО, "Отчество", Реквизит, , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ФИО", РеквизитыФИО, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", РеквизитыКонтрагента, Истина, ТекстОшибки);
	Иначе
		РеквизитыКонтрагента = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ЮЛТип"), ВерсияФормата);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "НаимОрг", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.ИНН");
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "ИННЮЛ", Реквизит, Истина, ТекстОшибки);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ВидУчастникаЭДО + ".ТипУчастника.ЮЛ.КПП");
		ЗаполнитьСвойствоXDTO(РеквизитыКонтрагента, "КПП", Реквизит, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", РеквизитыКонтрагента, Истина, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭППолученногоФайла(СсылкаНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивЭП = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЭП.Добавить(Base64Строка(Выборка.Подпись.Получить()));
	КонецЦикла;
	
	Возврат МассивЭП;
	
КонецФункции

Функция ЗаполнитьФайлСлужебногоДокумента(Дерево, ВидЭД)
	
	ТекстОшибки = "";
	Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ПространствоИмен      = "DP_IZVPOL";
		ЭлементОбщиеСведения  = "СвИзвПолуч";
		ЭлементСведенияОФайле = "СведПолФайл";
		АтрибутИмяФайла       = "ИмяПостФайла";
		СписокЭЦПФайла        = "ЭЦППолФайл";
		ЭлементПолучатель     = "ОтпрДок";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ПространствоИмен      = "DP_UVUTOCH";
		ЭлементОбщиеСведения  = "СвУведУточ";
		ЭлементСведенияОФайле = "СведПолФайл";
		АтрибутИмяФайла       = "ИмяПостФайла";
		СписокЭЦПФайла        = "ЭЦППолФайл";
		ЭлементТекстУточнения = "ТекстУведУточ";
		ЭлементПолучатель     = "ОтпрДок";
	Иначе
		ПространствоИмен      = "DP_PRANNUL";
		ЭлементОбщиеСведения  = "СвПредАн";
		ЭлементСведенияОФайле = "СведАнФайл";
		АтрибутИмяФайла       = "ИмяАнФайла";
		СписокЭЦПФайла        = "ЭЦПАнФайл";
		ЭлементТекстУточнения = "ТекстПредАн";
		ЭлементПолучатель     = "НапрПредАн";
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево,"ИдФайла"));
	
	Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИмен);
		
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайла, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ВерсияПрограммы"), Истина, ТекстОшибки);
		ВерсияФормата = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ВерсияФормата");
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ВерсияФормата, Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИмен);
		Если ВидЭД <> Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			ЗаполнитьСвойствоXDTO(Документ, "КНД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево,"КодКНД"), Истина, ТекстОшибки);
		КонецЕсли;
		
		// Отправитель
		Отправитель = ПолучитьОбъектТипаCML("Файл.Документ.УчастЭДО", ПространствоИмен);
		
		СформироватьДанныеПоУчастникуЭДО(Отправитель, Дерево, "Отправитель", ТекстОшибки, ПространствоИмен, ВерсияФормата);
		ЗаполнитьСвойствоXDTO(Документ, "УчастЭДО", Отправитель, Истина, ТекстОшибки);
		
		// Общие сведения о документе
		ОбщиеСведения = ПолучитьОбъектТипаCML("Файл.Документ." + ЭлементОбщиеСведения, ПространствоИмен);
		Если ВидЭД <> Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			Реквизит = ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ДатаПолучения"));
			ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ДатаПол", Реквизит, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ОбщиеСведения, "ВремяПол",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ВремяПолучения"), Истина, ТекстОшибки);
		КонецЕсли;
		
		// Данные о полученном файле
		ПолученныйЭД = ПолучитьОбъектТипаCML("Файл.Документ." + ЭлементОбщиеСведения + "." + ЭлементСведенияОФайле,
			ПространствоИмен);
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ИмяПолученногоФайла");
		ЗаполнитьСвойствоXDTO(ПолученныйЭД, АтрибутИмяФайла, Реквизит, Истина, ТекстОшибки);
		
		// ЭЦП полученного файла в кодировке Base64
		МассивЭП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ПолученныеЭП");
		Если ТипЗнч(МассивЭП) = Тип("Массив") Тогда
			Для Каждого ЭП Из МассивЭП Цикл
				ПолученныйЭД[СписокЭЦПФайла].Добавить(ЭП);
			КонецЦикла;
		КонецЕсли;
		
		Если ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ТекстУточнения");
			ЗаполнитьСвойствоXDTO(ОбщиеСведения, ЭлементТекстУточнения, Реквизит, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ВидЭД <> Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента");
			Если Реквизит = Истина Тогда
				ДанныеДок = ПолучитьОбъектТипаCML("Файл.Документ." + ЭлементОбщиеСведения + ".СведПолФайл.ДанПолучДок", ПространствоИмен);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НаимДокумента");
				ЗаполнитьСвойствоXDTO(ДанныеДок, "НаимДок", Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомерДокумента");
				ЗаполнитьСвойствоXDTO(ДанныеДок, "НомДок", Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаДокумента");
				Реквизит = ДатаДД_ММ_ГГГГ(Реквизит);
				ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаДок", Реквизит, Истина, ТекстОшибки);
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомИспрСФ");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЗаполнитьСвойствоXDTO(ДанныеДок, "НомИспрСФ", Реквизит, , ТекстОшибки);
				КонецЕсли;
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаИспрСФ");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Реквизит = ДатаДД_ММ_ГГГГ(Реквизит);
					ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаИспрСФ", Реквизит, , ТекстОшибки);
				КонецЕсли;
				Если ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомКСФ");
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ЗаполнитьСвойствоXDTO(ДанныеДок, "НомКСФ", Реквизит, , ТекстОшибки);
					КонецЕсли;
					Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаКСФ");
					Если ЗначениеЗаполнено(Реквизит) Тогда
						Реквизит = ДатаДД_ММ_ГГГГ(Реквизит);
						ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаКСФ", Реквизит, , ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.НомИспрКСФ");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЗаполнитьСвойствоXDTO(ДанныеДок, "НомИспрКСФ", Реквизит, , ТекстОшибки);
				КонецЕсли;
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.СведПолФайл.ДанныеПолученногоДокумента.ДатаИспрКСФ");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Реквизит = ДатаДД_ММ_ГГГГ(Реквизит);
					ЗаполнитьСвойствоXDTO(ДанныеДок, "ДатаИспрКСФ", Реквизит, , ТекстОшибки);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ДанПолучДок", ДанныеДок, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСвойствоXDTO(ОбщиеСведения, ЭлементСведенияОФайле, ПолученныйЭД, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, ЭлементОбщиеСведения, ОбщиеСведения, Истина, ТекстОшибки);
		
		// Получатель
		Получатель = ПолучитьОбъектТипаCML("Файл.Документ." + ЭлементПолучатель, ПространствоИмен);
		
		СформироватьДанныеПоУчастникуЭДО(Получатель, Дерево, "Получатель", ТекстОшибки, ПространствоИмен, ВерсияФормата);
		ЗаполнитьСвойствоXDTO(Документ, ЭлементПолучатель, Получатель, Истина, ТекстОшибки);
		
		// Подписант
		Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИмен);
		ЗаполнитьСвойствоXDTO(Подписант, "Должность", "---", Истина, ТекстОшибки);
		
		ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", "---", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", "---", Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ВставитьЗначениеВДерево(Дерево, "ПолноеИмяФайла", ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml"));
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ПолноеИмяФайла"), Ложь, "windows-1251");
			УдалитьПространствоИмен(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, "ПолноеИмяФайла"), ПространствоИмен);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование служебного ЭД';uk='Формування службового ЕД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Функция ПодготовитьДанныеПоСлужебномуДокументу(СсылкаНаОбъект, СтруктураЭД, Дерево)
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ИдФайла", СтруктураЭД.ИдФайла);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ВерсияПрограммы", "8");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "Отправитель.ИдУчастникаЭДО", СтруктураЭД.ИДОтправителя);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "Получатель.ИдУчастникаЭДО", СтруктураЭД.ИДПолучателя);
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ВерсияФормата", "1.01");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "КодКНД", "");
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ВерсияФормата", "1.02");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "КодКНД",
			?(СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении, "1115110", "1115113"));
	КонецЕсли;
	
	Попытка
		// Получатель
		Если СтруктураЭД.Свойство("ОператорЭДО") Тогда
			Путь = "Получатель.ТипУчастника.ОператорЭДО";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", СтруктураЭД.ОператорЭДО.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево,
				Путь + ".НаименованиеОрганизации", СтруктураЭД.ОператорЭДО.Наименование);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево,
				Путь + ".ИдентификаторОператора", СтруктураЭД.ОператорЭДО.ИдентификаторОператора);
		Иначе
			ЭтоФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(СтруктураЭД.Получатель);
			ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Получатель);
			ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
			ПолноеНаименование = "";
			Если НЕ ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование)
				ИЛИ ПустаяСтрока(ПолноеНаименование) Тогда
				ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
			КонецЕсли;
			
			Если ЭтоФизЛицо Тогда
				Путь = "Получатель.ТипУчастника.ИП";
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Фамилия", ДанныеЮрФизЛица.Фамилия);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Отчество", ДанныеЮрФизЛица.Отчество);
			Иначе
				Путь = "Получатель.ТипУчастника.ЮЛ";
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".НаименованиеОрганизации", ПолноеНаименование);
			КонецЕсли;
		КонецЕсли;
		
		// Отправитель
		ЭтоФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(СтруктураЭД.Отправитель);
		ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Отправитель);
		ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
		ПолноеНаименование = "";
		Если НЕ ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование)
			ИЛИ ПустаяСтрока(ПолноеНаименование) Тогда
			ДанныеЮрФизЛица.Свойство("Представление", ПолноеНаименование);
		КонецЕсли;
		
		Если ЭтоФизЛицо Тогда
			Путь = "Отправитель.ТипУчастника.ИП";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Фамилия", ДанныеЮрФизЛица.Фамилия);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Имя", ДанныеЮрФизЛица.Имя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".Отчество", ДанныеЮрФизЛица.Отчество);
		Иначе
			Путь = "Отправитель.ТипУчастника.ЮЛ";
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".ИНН", ДанныеЮрФизЛица.ИНН);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".КПП", ДанныеЮрФизЛица.КПП);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + ".НаименованиеОрганизации", ПолноеНаименование);
		КонецЕсли;
		
		// Документ
		Если НЕ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
			Реквизит = ВернутьДату(СтруктураЭД.ДатаВремяПолучения);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ДатаПолучения", Реквизит);
			Реквизит = ВернутьВремя(СтруктураЭД.ДатаВремяПолучения);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ВремяПолучения", Реквизит);
		КонецЕсли;
		Путь = "ДанныеДокумента.СведПолФайл.";
		Реквизит = СтруктураЭД.ИмяПолученногоФайлаБезРасширения;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + "ИмяПолученногоФайла", Реквизит);
		
		Реквизит = ЭППолученногоФайла(СсылкаНаОбъект);
		Если Не ЗначениеЗаполнено(Реквизит) Тогда
			Реквизит.Добавить("---");
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Путь + "ПолученныеЭП", Реквизит);
		
		Если СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			Реквизит = ВернутьДату(СтруктураЭД.ТекстУточнения);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, "ДанныеДокумента.ТекстУточнения", Реквизит);
		КонецЕсли;
		
		ДеревоЗаполнено = Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование ЭД';uk='Формування ЕД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
		ДеревоЗаполнено = Ложь;
	КонецПопытки;
	
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(Дерево, ТекстОшибки);
	Если ДеревоЗаполнено И ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru='При формировании %1 возникли следующие ошибки:
        |%2'
        |;uk='При формуванні %1 виникли наступні помилки:
        |%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ДеревоЗаполнено = Ложь;
	КонецЕсли;
	
	Возврат ДеревоЗаполнено;
	
КонецФункции

Функция ОпределитьИдФайлаЭД(СтруктураЭД)
	
	ТекстИд = "";
	Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		
		// Формат имени по ЭСФ: DP_IZVPOL_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru='DP_IZVPOL_%1_%2_%3_%4';uk='DP_IZVPOL_%1_%2_%3_%4'");
		Если СтруктураЭД.Свойство("ОператорЭДО") И СтруктураЭД.ОператорЭДО.Свойство("ИдентификаторОператора") Тогда
			ИдПолучателя = СтруктураЭД.ОператорЭДО.ИдентификаторОператора;
		Иначе
			ИдПолучателя = СтруктураЭД.ИдПолучателя;
		КонецЕсли;
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, ИдПолучателя, СтруктураЭД.ИдОтправителя,
			ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		// Формат имени по ЭСФ: DP_UVUTOCH_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru='DP_UVUTOCH_%1_%2_%3_%4';uk='DP_UVUTOCH_%1_%2_%3_%4'");
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, СтруктураЭД.ИдПолучателя,
			СтруктураЭД.ИдОтправителя, ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	ИначеЕсли СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		
		// Формат имени по ЭСФ: DP_PRANNUL_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
		ТекстИд = НСтр("ru='DP_PRANNUL_%1_%2_%3_%4';uk='DP_PRANNUL_%1_%2_%3_%4'");
		ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, СтруктураЭД.ИдПолучателя,
			СтруктураЭД.ИдОтправителя, ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);
	КонецЕсли;
	
	ИдФайлаЭД = ОбменСКонтрагентамиСлужебный.КорректноеИмяФайла(ТекстИд);
	
	Возврат ИдФайлаЭД;
	
КонецФункции

Функция ВернутьДатуСтрокойДляИД(ДатаВремя)
	
	Возврат Формат(ДатаВремя, "ДФ=yyyyMMdd");
	
КонецФункции

Функция ВернутьДату(ДатаВремя)
	
	ДатаЭСФ = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");
	Возврат ДатаЭСФ;
	
КонецФункции

Функция ВернутьВремя(ДатаВремя)
	
	ВремяЭСФ = Формат(Час(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";
	ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=");
	
	Возврат ВремяЭСФ;
	
КонецФункции


Функция ПолучитьДанныеУточненияДляПечати(СтрокаОбъекта, ДеревоРазбора, ИД)
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("Отправитель", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));
	ДанныеЗаполненияШапки.Вставить("Получатель",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));
	ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));
	ДанныеЗаполненияШапки.Вставить("ВремяПолучения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));
	ДанныеЗаполненияШапки.Вставить("ТекстУточнения", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ТекстУточнения"));
	ДанныеЗаполненияШапки.Вставить("ИмяФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));
	
	ЭДУточнение = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИД);
	
	Если ЭДУточнение.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
	Иначе
		ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
	КонецЕсли;
	
	СтруктураПараметровПоиска = Новый Структура;
	СтруктураПараметровПоиска.Вставить("УникальныйИД",        ЭДУточнение.УникальныйИД);
	СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Входящий);
	СтруктураПараметровПоиска.Вставить("ВидЭД",               Перечисления.ВидыЭД.Подтверждение);
	СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
	ЭДПодтверждениеДаты = ОбменСКонтрагентамиСлужебныйВызовСервера.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
	
	Если ЭДПодтверждениеДаты <> Неопределено Тогда
		ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭДПодтверждениеДаты, , Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			
			Если ИмяФайла <> Неопределено Тогда
				
				ДанныеЭД.Записать(ИмяФайла);
				
				СтруктураПодтверждения = СформироватьДеревоРазбора(ИмяФайла, ЭДПодтверждениеДаты.НаправлениеЭД);
				УдалитьФайлы(ИмяФайла);
				Если СтруктураПодтверждения <> Неопределено И СтруктураПодтверждения.Количество() > 0 Тогда
					ДанныеЗаполненияШапки.Вставить("ДатаОтправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ДатаОтправки"));
					ДанныеЗаполненияШапки.Вставить("ВремяОтправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ВремяОтправки"));
					ДанныеЗаполненияШапки.Вставить("ОператорЭДО", НСтр("ru='оператора электронного документооборота';uk='оператора електронного документообігу'") + " "
						+ ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(СтруктураПодтверждения.ДеревоРазбора,
						СтруктураПодтверждения.СтрокаОбъекта, "ОператорЭДО"));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оператор ЭДО

// Для того, чтобы передать дополнительные данные в печатную форму, надо:
// 1. в функции подготовки данных (в переопределяемом модуле) создать структуру, где ключ - имя передаваемого
//  дополнительного параметра, а значение - соответственно, значение доп.параметра и передать в интерфейсную функцию
//  "ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных" (описание параметров в комментарии к ней).
// 2. в функции подготовки данных к печати "ПолучитьДанные...ДляПечати", прописать чтение передаваемых
//  доп.данных по имени (с которым доп параметр помещался в структуру на шаге 1) и присвоение требуемому реквизиту макета.
//
Функция ДеревоДопДанных()
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

// Для внутреннего использования.
Функция ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбъектCML = ПолучитьОбъектТипаCML(ИмяОбъекта, ПространствоИменСхемы);
	
	Если ОбъектCML <> Неопределено И ТипЗнч(ВидФасета) = Тип("ВидФасетаXDTO") Тогда
		СвойстваОбъекта = ОбъектCML.Свойства();
		ИскомоеСвойство = СвойстваОбъекта.Получить(ИмяСвойства);
		Если ИскомоеСвойство <> Неопределено Тогда
			Фасет = ИскомоеСвойство.Тип.Фасеты.Получить(ВидФасета);
			ВозвращаемоеЗначение = Фасет.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева объектов разбора и дерева соответствий объектам

Процедура СформироватьТЗПоНаборуДанныхXDTO(ТЗ, НаборДанных, СсылкаНаЭД, ОбъектXML = Неопределено, ДеревоДопДанных = Неопределено,
	ЕстьСвойствоИдФайл = Ложь, ИмяТЧ = Неопределено, НомерСтроки = Неопределено, ИменаДопКолонок = "")
	
	КС80 = Новый КвалификаторыСтроки(110);
	КС255 = Новый КвалификаторыСтроки(255);
	КС3000 = Новый КвалификаторыСтроки(3000);
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	ОписаниеТиповС80 = Новый ОписаниеТипов(МассивСтрока, , КС80);
	ОписаниеТиповС255 = Новый ОписаниеТипов(МассивСтрока, , КС255);
	ОписаниеТиповС3000 = Новый ОписаниеТипов(МассивСтрока, , КС3000);
	МассивТипЭД = Новый Массив;
	МассивТипЭД.Добавить(Тип("СправочникСсылка.ЭДПрисоединенныеФайлы"));
	МассивТипЭД.Добавить(Тип("Структура"));
	ОписаниеТиповЭД = Новый ОписаниеТипов(МассивТипЭД);
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("ИД", ОписаниеТиповС80);
	ТЗ.Колонки.Добавить("Наименование", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("НаименованиеХарактеристики", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("КодТовара", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Артикул", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаКод", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Описание", ОписаниеТиповС3000);
	ТЗ.Колонки.Добавить("ЭД", ОписаниеТиповЭД);
	
	Для Каждого ТекЭлемент Из НаборДанных Цикл
		НовЗапись = ТЗ.Добавить();
		НовЗапись.ЭД = СсылкаНаЭД;
		
		Элемент = ТекЭлемент;
		
		НаименованиеРаботыДопДанные = "";
		Если ЕстьСвойствоИдФайл
			И ЕстьСвойствоXDTO(ТекЭлемент, "ИнфПолСтр")
			И (ЗначениеЗаполнено(ТекЭлемент.ИнфПолСтр) ИЛИ Не ДеревоДопДанных = Неопределено) Тогда
			
			Если Найти(ТекЭлемент.ИнфПолСтр, "xml") = 0 Тогда
				СвойстваТекЭлемента = ТекЭлемент.Свойства();
				Если СвойстваТекЭлемента.Получить("НомТов") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомТов);
				ИначеЕсли СвойстваТекЭлемента.Получить("НомСтр") <> Неопределено Тогда
					НомСтр = Строка(ТекЭлемент.НомСтр);
				ИначеЕсли СвойстваТекЭлемента.Получить("Номер") <> Неопределено Тогда
					НомСтр = Строка(НомерСтроки) + "." + ТекЭлемент.Номер;
				Иначе
					Продолжить;
				КонецЕсли;
				
				// Зачитаем параметры строки ТЧ из доп. данных.
				ПрочитатьИнфПол(ТекЭлемент.ИнфПолСтр, ДеревоДопДанных, ИмяТЧ, НомСтр);
				Если ДеревоДопДанных <> Неопределено И ДеревоДопДанных.Строки.Количество() > 0 Тогда
					СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);
					СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
					Если СтрокиДерева.Количество() > 0 Тогда
						СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомСтр);
						СтрокиДерева = СтрокиДерева[0].Строки.НайтиСтроки(СтруктураПоиска);
						Если СтрокиДерева.Количество() > 0 Тогда
							СтрокаВладелец = СтрокиДерева[0];
							СтрокаИД = СтрокаВладелец.Строки.Найти("ИД", "ИмяРеквизита");
							СтрокаБЕНаименованиеПолное = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименованиеПолное", "ИмяРеквизита");
							СтрокаБЕМСокращение = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаМеждународноеСокращение", "ИмяРеквизита");
							СтрокаБЕНаименование = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаНаименование", "ИмяРеквизита");
							СтрокаБЕКод = СтрокаВладелец.Строки.Найти("БазоваяЕдиницаКод", "ИмяРеквизита");
							Если СтрокаИД <> Неопределено Тогда
								НовЗапись.ИД = СтрокаИД.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименованиеПолное <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаНаименованиеПолное = СтрокаБЕНаименованиеПолное.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕМСокращение <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаМеждународноеСокращение = СтрокаБЕМСокращение.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕНаименование <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаНаименование = СтрокаБЕНаименование.ЗначениеРеквизита;
							КонецЕсли;
							Если СтрокаБЕКод <> Неопределено Тогда
								НовЗапись.БазоваяЕдиницаКод = СтрокаБЕКод.ЗначениеРеквизита;
							КонецЕсли;
							
							// В некоторых случаях наименование работы может передаваться через доп данные.
							СтрокаНаименовниеРаботы = СтрокаВладелец.Строки.Найти("Наименование", "ИмяРеквизита");
							Если Не СтрокаНаименовниеРаботы = Неопределено Тогда
								 НаименованиеРаботыДопДанные = СтрокаНаименовниеРаботы.ЗначениеРеквизита;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("ИД") = Неопределено Тогда
			НовЗапись.ИД = Элемент.ИД;
		КонецЕсли;
		
		Если ЕстьСвойствоXDTO(Элемент, "ИнфПолФХЖ2") Тогда
			 НовЗапись.ИД = ЗначениеДопРеквизита(Элемент.ИнфПолФХЖ2, "ИД");
		КонецЕсли;
		
		// В CML документах Ид товара передается через доп данные, которые находятся в значении реквизитов.
		Если Не ЗначениеЗаполнено(НовЗапись.ИД) Тогда
			Ид = ЗначениеИДТовараДопДанныхСтроки(Элемент);
			НовЗапись.ИД = Ид;
		КонецЕсли;
		
		Если НЕ Элемент.Свойства().Получить("Наименование") = Неопределено Тогда
			НовЗапись.Наименование = Элемент.Наименование;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимРабот") = Неопределено Тогда
			НовЗапись.Наименование = ТекЭлемент.НаимРабот;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимТов") = Неопределено Тогда
			НовЗапись.Наименование = ТекЭлемент.НаимТов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НовЗапись.Наименование) Тогда
			НовЗапись.Наименование = НаименованиеРаботыДопДанные;
		КонецЕсли;
		
		Если НЕ ТекЭлемент.Свойства().Получить("КодТов") = Неопределено Тогда
			НовЗапись.КодТовара = ТекЭлемент.КодТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ХарактерТов") = Неопределено Тогда
			НовЗапись.НаименованиеХарактеристики = ТекЭлемент.ХарактерТов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ_Тов") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ_Тов;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("ОКЕИ") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаКод = ТекЭлемент.ОКЕИ;
		КонецЕсли;
		Если НЕ ТекЭлемент.Свойства().Получить("НаимЕдИзм") = Неопределено Тогда
			НовЗапись.БазоваяЕдиницаНаименование = ТекЭлемент.НаимЕдИзм;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("БазоваяЕдиница") = Неопределено Тогда
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Код") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаКод = Элемент.БазоваяЕдиница.Код;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("Наименование") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименование = Элемент.БазоваяЕдиница.Наименование;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("НаименованиеПолное") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаНаименованиеПолное = Элемент.БазоваяЕдиница.НаименованиеПолное;
			КонецЕсли;
			Если НЕ Элемент.БазоваяЕдиница.Свойства().Получить("МеждународноеСокращение") = Неопределено Тогда
				НовЗапись.БазоваяЕдиницаМеждународноеСокращение = Элемент.БазоваяЕдиница.МеждународноеСокращение;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Артикул") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.Артикул;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("АртикулТов") = Неопределено Тогда
			НовЗапись.Артикул = Элемент.АртикулТов;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("Описание") = Неопределено Тогда
			НовЗапись.Описание = Элемент.Описание;
		КонецЕсли;
		Если НЕ Элемент.Свойства().Получить("ДополнительныеРеквизиты") = Неопределено Тогда
			Для Каждого ЭлементДанных Из Элемент.ДополнительныеРеквизиты Цикл
				Если ТЗ.Колонки.Найти("Доп_" + ЭлементДанных.Наименование) = Неопределено Тогда
					ТЗ.Колонки.Добавить("Доп_" + ЭлементДанных.Наименование, ОписаниеТиповС255);
					ИменаДопКолонок = ИменаДопКолонок + ", "+ "Доп_" + ЭлементДанных.Наименование;
				КонецЕсли;
				Для Каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
					НовЗапись["Доп_" + ЭлементДанных.Наименование] = ЭлементЗначения;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Если пришел пустой ИД, используем вместо него наименование товара.
		// Актуально для входящих ЭД из учетных систем отличных от 1С.
		Если Не ЗначениеЗаполнено(НовЗапись.ИД) Тогда
			НовЗапись.ИД = ВРег(СтрЗаменить(НовЗапись.Наименование, " ", ""))
				+ "#" + ВРег(СтрЗаменить(НовЗапись.НаименованиеХарактеристики, " ", ""))
				+ "#" + ВРег(СтрЗаменить(НовЗапись.КодТовара, " ", ""))
				+ "#" + ВРег(СтрЗаменить(НовЗапись.Артикул, " ", ""));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеИДТовараДопДанныхСтроки(СтрокаXDTO)
	
	СоставнойИД = ЗначениеСвойстваДопДанныхСтроки(СтрокаXDTO, "Ид");
	
	Возврат СоставнойИД;
	
КонецФункции

Функция ЗначениеДопРеквизита(КоллецияЗначений, ИмяРеквизита)
	
	Результат = Неопределено;
	Для Каждого КлючЗначение Из КоллецияЗначений Цикл
		
		Если ВРег(КлючЗначение.Идентиф) = ВРег(ИмяРеквизита) Тогда
			Результат = КлючЗначение.Значен;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСвойстваДопДанныхСтроки(СтрокаXDTO, ИмяСвойства)
	
	ДопДанные = ЗначениеДопРеквизитаДокумента("ДопДанныеСтроки", СтрокаXDTO);
	
	ДопДерево = ДеревоДопДанных();
	
	ПрочитатьИнфПол(ДопДанные, ДопДерево, "СтрокаТЧ");
	
	СтрокаТЧ = ДопДерево.Строки.Найти("СтрокаТЧ", "ЗначениеРеквизита");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаРеквизита = СтрокаТЧ.Строки.Найти(ИмяСвойства, "ИмяРеквизита");
	Если СтрокаРеквизита = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаРеквизита.ЗначениеРеквизита;
	
КонецФункции

// Процедура "восстанавливает" набор данных в таблицу значений. Если при формировании ЭД в доп.данные
// была помещена таблица значений, то при разборе ЭД набор данных (из доп.данных) преобразуется в таблицу значений.
//
// Параметры:
//   Дерево - ДеревоЗначений - набор доп.данных прочитанных из ЭД.
//   ТЗ - ТаблицаЗначений - таблица значений сформированная по данным из дерева значений.
//
Процедура СформироватьТаблицуЗначенийПоДопДанным(Дерево, ТЗ)
	
	Для Каждого СтрокаТЗвДереве Из Дерево.Строки Цикл
		СтрокаТЗ = Неопределено;
		Для Каждого ЗначениеЯчейкиТЗ Из СтрокаТЗвДереве.Строки Цикл
			Если СтрокаТЗвДереве.ЗначениеРеквизита = "0" Тогда // 0-я строка ТЗ в дереве
				ТЗ.Колонки.Добавить(ЗначениеЯчейкиТЗ.ИмяРеквизита);
			КонецЕсли;
			Если СтрокаТЗ = Неопределено Тогда
				СтрокаТЗ = ТЗ.Добавить();
			КонецЕсли;
			СтрокаТЗ[ЗначениеЯчейкиТЗ.ИмяРеквизита] = ЗначениеЯчейкиТЗ.ЗначениеРеквизита;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПространствоИменАкта(ДанныеФайлаЭД, ИдентификаторЭД)
	
	ФлагФНС =0;
	Если СтрДлина(ДанныеФайлаЭД.Документ.ВремДок) = 8 Тогда   // например 12.45.55
		ФлагФНС = 1;
	Иначе
		ФлагФНС = 2;
	КонецЕсли;
	Если ДанныеФайлаЭД.СвУчДокОбор.Свойства().Получить("СвОЭДОтпрСФ") <> Неопределено Тогда
		ФлагФНС = 3;
	КонецЕсли;
	
	//ЧтениеXML = Новый ЧтениеXML;
	//ЧтениеXML.ОткрытьФайл(ИмяФайла);
	//
	//Пока ЧтениеXML.Прочитать() Цикл
	//	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	//		Если ЧтениеXML.ЛокальноеИмя = "Документ" И ФлагФНС =0 Тогда
	//			Пока ЧтениеXML.СледующийАтрибут() Цикл
	//				Если ЧтениеXML.ЛокальноеИмя = "ВремДок" Тогда
	//					Если СтрДлина(ЧтениеXML.Значение) = 8 Тогда   // например 12.45.55
	//						ФлагФНС = 1;
	//					Иначе
	//						ФлагФНС = 2;
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//		Если ЧтениеXML.ЛокальноеИмя = "СвОЭДОтпрСФ" Тогда
	//			ФлагФНС = 3;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ЧтениеXML.Закрыть();
	
	ПространствоИмен = ИмяПространстваТитула(ФлагФНС, ИдентификаторЭД);
	
	Возврат ПространствоИмен;
	
КонецФункции

Функция ИмяПространстваТитула(ФлагФНС, ИдентификаторЭД)
	
	// Имена для Акта исполнителя
	АктыИсполнителя = Новый Соответствие;
	АктыИсполнителя.Вставить(1, "IAKTPRM");
	АктыИсполнителя.Вставить(2, "IAKTPRM2");
	АктыИсполнителя.Вставить(3, "IAKTPRM_5_01_02");
	
	// Имена для Акта заказчика
	АктыЗаказчика = Новый Соответствие;
	АктыЗаказчика.Вставить(1, "ZAKTPRM");
	АктыЗаказчика.Вставить(2, "ZAKTPRM2");
	АктыЗаказчика.Вставить(3, "ZAKTPRM_5_01_02");
	
	// Имена для Титула продавца
	ТитулыПокупателя = Новый Соответствие;
	ТитулыПокупателя.Вставить(1, "PTORG12");
	ТитулыПокупателя.Вставить(2, "PTORG12");
	ТитулыПокупателя.Вставить(3, "PTORG_5_01_02");
	
	// Имена для Титула покупателя
	ТитулыПродавца = Новый Соответствие;
	ТитулыПродавца.Вставить(1, "OTORG12");
	ТитулыПродавца.Вставить(2, "OTORG12");
	ТитулыПродавца.Вставить(3, "OTORG_5_01_02");

	
	ИменаВидовЭД = Новый Соответствие;
	ИменаВидовЭД.Вставить("IAKTPRM", АктыИсполнителя);
	ИменаВидовЭД.Вставить("ZAKTPRM", АктыЗаказчика);
	ИменаВидовЭД.Вставить("PTORG12", ТитулыПокупателя);
	ИменаВидовЭД.Вставить("OTORG12", ТитулыПродавца);
	
	ТаблицаИмен = ИменаВидовЭД.Получить(ИдентификаторЭД);
	
	ИмяПространства = ТаблицаИмен.Получить(ФлагФНС);
	
	Возврат ИмяПространства;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка дополнительных данных ЭД

// Формирование xml-файла/строки

Функция РекурсивноОбработатьСтрокиДерева(МассивСтрок, Рекв, ПространствоИменСхемы, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, ТекстОшибки)
	
	Для Каждого СтрокаДЗ Из МассивСтрок Цикл
		Если НЕ ЮридическиЗначимый И СтрокаДЗ.ЮридическиЗначимый Тогда
			// Если ЮридическиЗначимый = Истина, то входящий МассивСтрок содержит только юридически значимые реквизиты.
			// В противном случае, МассивСтрок - смешанный, поэтому надо пропускать юридически значимые реквизиты (т.к. они
			// будут передаваться отдельно от не значимых, в разных файлах).
			Продолжить;
		КонецЕсли;
		Реквизит = ПолучитьОбъектТипаCML("Реквизит.Реквизит", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Реквизит, "Имя", СтрокаДЗ.ИмяРеквизита, , ТекстОшибки);
		Если ЗначениеЗаполнено(СтрокаДЗ.ЗначениеРеквизита) Тогда
			ЗаполнитьСвойствоXDTO(Реквизит, "Значение", СтрокаДЗ.ЗначениеРеквизита, , ТекстОшибки);
		КонецЕсли;
		МассивСтрокДЗ = СтрокаДЗ.Строки;
		Если МассивСтрокДЗ.Количество() > 0 Тогда // добавляем наборы и массивы данных:
			РекурсивноОбработатьСтрокиДерева(МассивСтрокДЗ, Реквизит, ПространствоИменСхемы, ЮридическиЗначимый,
				ЕстьДанныеДляДопФайла, ТекстОшибки);
			Рекв.Реквизит.Добавить(Реквизит);
		Иначе // добавляем конечные значения реквизитов:
			Если ЮридическиЗначимый = СтрокаДЗ.ЮридическиЗначимый Тогда
				Рекв.Реквизит.Добавить(Реквизит);
				ЕстьДанныеДляДопФайла = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Разбор xml-файла/строки

Функция РекурсивноРазобратьДопФайл(ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь)
	
	Для Каждого Реквизит Из ОбъектРазбора.Реквизит Цикл
		СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", Реквизит.Имя, Реквизит.Значение);
		СтрокиДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора, Истина);
		Если СтрокиДЗ.Количество() <> 0 Тогда
			СтрДЗ = СтрокиДЗ[0];
		Иначе
			СтрДЗ = ДеревоДопДанных.Строки.Добавить();
			СтрДЗ.ИмяРеквизита = Реквизит.Имя;
			СтрДЗ.ЗначениеРеквизита = Реквизит.Значение;
			СтрДЗ.ЮридическиЗначимый = ЮридическиЗначимый;
		КонецЕсли;
		Если Реквизит.Реквизит <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(Реквизит, СтрДЗ, ЮридическиЗначимый);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Универсальный доп. файл, представляет из себя дерево с неограниченным уровнем вложений. Каждый элемент дерева имеет
// реквизиты (Имя, Значение) и подчиненные элементы (ветки), с таким же составом, как и у текущего элемента.
//
// Параметры:
//  ДопФайл - строка - полный путь к файлу.
//
// Возвращаемое значение - Неопределено, либо ДеревоЗначений.
//
Функция РазобратьУниверсальныйДопФайл(ДопФайл)
	
	ДеревоДопДанных = ДеревоДопДанных();
	ОбъектXML = Новый ЧтениеXML;
		
	Попытка
		ОбъектXML.ОткрытьФайл(ДопФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
		ОбъектXML.Закрыть();
		Если ЭД.Данные <> Неопределено Тогда
			РекурсивноРазобратьДопФайл(ЭД.Данные, ДеревоДопДанных);
		КонецЕсли;
	Исключение
		ДеревоДопДанных = Неопределено;
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru='Возникла ошибка при чтении данных из файла %1: %2.';uk='Виникла помилка при читанні даних з файлу %1: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ДопФайл, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Чтение ЭД.';uk='Читання ЕД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ДеревоДопДанных;
	
КонецФункции

Процедура ПрочитатьИнфПол(Знач СтрокаXML, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки = Неопределено)
	
	// Тег <Данные> - обязательный для xml-строки в формате универсального доп.файла.
	Если Найти(СтрокаXML, "<Данные>") > 0 Тогда
		СтрокаXML = "<ДопФайл ИдФайла=""1"" ИдДопФайла=""1"" ВерсияФормата=""1"" ДатаФормирования=""2000-01-01T00:00:00"" xmlns=""ДопФайлУниверсальный"">"
			+ СтрокаXML + "</ДопФайл>";
			
		ДеревоСозданоРаньше = Истина;
		Если ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
			ДеревоДопДанных = ДеревоДопДанных();
			ДеревоСозданоРаньше = Ложь;
		КонецЕсли;
		ОбъектXML = Новый ЧтениеXML;
		
		Попытка
			ОбъектXML.УстановитьСтроку(СтрокаXML);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));
			ОбъектXML.Закрыть();
			Если ЭД.Данные <> Неопределено Тогда
				СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");
				Если СтрокаДЗ = Неопределено Тогда
					СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();
					СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;
					Если НомерСтроки = Неопределено Тогда
						СтрокаДЗ.ИмяРеквизита = "Набор";
					Иначе
						СтрокаДЗ.ИмяРеквизита = "Список";
					КонецЕсли;
				КонецЕсли;
				Если НомерСтроки <> Неопределено Тогда
					СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки)));
					
					// Поиск подчиненных по разделителю "."
					ИндексРазделителяНомера = Найти(Строка(НомерСтроки), ".");
					Если ИндексРазделителяНомера Тогда
						СтрокаПоискаРодителя = Лев(Строка(НомерСтроки), ИндексРазделителяНомера - 1);
						СтрокиДЗРодитель = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", СтрокаПоискаРодителя));
					КонецЕсли;
					
					Если СтрокиДЗ.Количество() > 0 Тогда
						СтрокаДЗ = СтрокиДЗ[0];
					ИначеЕсли ИндексРазделителяНомера И СтрокиДЗРодитель.Количество() Тогда
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
						ЭлектронноеВзаимодействие.СкопироватьСтрокиДереваРекурсивно(СтрокаДЗ, СтрокиДЗРодитель[0]);
					Иначе
						СтрокаДЗ = СтрокаДЗ.Строки.Добавить();
						СтрокаДЗ.ИмяРеквизита = "Нпп";
						СтрокаДЗ.ЗначениеРеквизита = Строка(НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				РекурсивноРазобратьДопФайл(ЭД.Данные, СтрокаДЗ, Истина);
			КонецЕсли;
		Исключение
			Если Не ДеревоСозданоРаньше Тогда
				ДеревоДопДанных = Неопределено;
			КонецЕсли;
			ОбъектXML.Закрыть();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Возникла ошибка при чтении данных из строки доп.данных. (%1)';uk='Виникла помилка при читанні даних з рядка дод. даних. (%1)'"), ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Разбор дерева доп. данных для печатных форм

Функция СформироватьДопДанныеСтрок(ДеревоДопДанных, ИмяЧитаемойТаблицы, ТаблицаВозврата)
	
	СтруктураВозврата = Новый Структура("ЕстьПодписанные, ЕстьНеПодписанные", Ложь, Ложь);
	
	Если ДеревоДопДанных <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяЧитаемойТаблицы);
		СтрокиСписка = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиСписка.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("Нпп");
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			Для Каждого СтрокаСписка Из СтрокиСписка[0].Строки Цикл
				ТаблицаДопДанных.Очистить();
				ПрочитатьСтрокиДереваРекурсивно(СтрокаСписка.Строки, ТаблицаДопДанных);
				
				Если ТаблицаДопДанных.Количество() > 0 Тогда
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
					КонецЦикла;
					ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
					СтрокаТЗВозврата = ТаблицаВозврата.Добавить();
					СтрокаТЗВозврата.НомерСтр = СтрокаСписка.ЗначениеРеквизита;
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						Если СтрокаТЗ.ЮридическиЗначимый Тогда
							СтруктураВозврата.ЕстьПодписанные = Истина;
							СтрокаТЗВозврата.ПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.ПодписанныеДанные),
								СтрокаТЗВозврата.ПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						Иначе
							СтруктураВозврата.ЕстьНеПодписанные = Истина;
							СтрокаТЗВозврата.НеПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.НеПодписанныеДанные),
								СтрокаТЗВозврата.НеПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПрочитатьСтрокиДереваРекурсивно(СтрокиДерева, ТаблицаДопДанных, ИмяРодителя = "")
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" ИЛИ СтрокаДерева.ИмяРеквизита = "Массив" 
			ИЛИ СтрокаДерева.ИмяРеквизита = "Список" ИЛИ СтрокаДерева.ИмяРеквизита = "Нпп"
			ИЛИ СтрокаДерева.ЗначениеРеквизита = "Структура" Тогда
			
			ИмяРодителя = ИмяРодителя + СтрокаДерева.ЗначениеРеквизита;
			ПрочитатьСтрокиДереваРекурсивно(СтрокаДерева.Строки, ТаблицаДопДанных, ИмяРодителя);
		Иначе
			СтрокаТЗ = ТаблицаДопДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Знач Макет, ТабличныйДокумент)
	
	Макет = ПолучитьОбщийМакет("ЭД_ИдентификаторДокумента");
	
	Если ДеревоДопДанных <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", "Шапка");
		СтрокиШапки = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиШапки.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			ПрочитатьСтрокиДереваРекурсивно(СтрокиШапки, ТаблицаДопДанных);
			
			Если ТаблицаДопДанных.Количество() > 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ДопДанныеШапки_Шапка");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакетаСЭП = Макет.ПолучитьОбласть("ДопДанныеШапки_Строка");
				ОбластьМакетаБезЭП = Макет.ПолучитьОбласть("ДопДанныеШапки_СтрокаБезЭП");
				ТаблицаДопДанных.Колонки.Добавить("Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
				КонецЦикла;
				ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					ОбластьМакета = ?(СтрокаТЗ.ЮридическиЗначимый, ОбластьМакетаСЭП, ОбластьМакетаБезЭП);
					ОбластьМакета.Параметры.Заполнить(СтрокаТЗ);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с документами основаниями

#Область ПоискДокументовОснованийПоИдентификаторамДокументовИБ

// Функция определяет документы-основания для ВладелецФайла по идентификаторам документов ИБ.
//
// Параметры:
//   МассивИД                  - Массив - содержит строки идентификаторов документов-оснований (из базы отправителя).
//   СтруктураПараметровПоиска - Структура - дополнительные отборы для оптимизации запроса:
//      Ключ     - Строка - Наименование отбора, совпадает с именем реквизита справочника ЭДПрисоединенныеФайлы.
//      Значение - Произвольный - отбираемое значение реквизита ЭД.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит 2 колонки:
//      Ссылка  - ДокументСсылка - ссылка на документ-основание.
//      НомерЭД - Строка - идентификатор документа-основания
//
Функция ТаблицаЗначенийДокументовОснованийПоИдентификаторам(МассивИД, СтруктураПараметровПоиска) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
		|	ЭДПрисоединенныеФайлы.НомерЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы";
		
	Если МассивИД.Количество() = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + " Где (ЭДПрисоединенныеФайлы.НомерЭД = &ИДОснованийВладельца)";
		Запрос.УстановитьПараметр("ИДОснованийВладельца", МассивИД[0]);
	Иначе
		ТекстЗапроса = ТекстЗапроса + " Где (ЭДПрисоединенныеФайлы.НомерЭД В (&ИДОснованийВладельца))";
		Запрос.УстановитьПараметр("ИДОснованийВладельца", МассивИД);
	КонецЕсли;
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровПоиска Цикл
		ТекстЗапроса = ТекстЗапроса + " И " + СтрЗаменить("ЭДПрисоединенныеФайлы.%1 = &%1", "%1", ЭлементСтруктуры.Ключ);
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции

// Фозвращает ссылку на документ-основание найденный по идентификатору, либо Неопределено.
Функция ДокументОснованиеПоИдентификатору(ИДДокументаОснования, СтруктураОтбора)
	
	ДокументОснование = Неопределено;
	
	МассивИД = Новый Массив;
	МассивИД.Добавить(ИДДокументаОснования);
	ТЗПолученныхОснований = ТаблицаЗначенийДокументовОснованийПоИдентификаторам(МассивИД, СтруктураОтбора);
	Если ТЗПолученныхОснований.Количество() > 0 Тогда
		ДокументОснование = ТЗПолученныхОснований[0].Ссылка;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

#КонецОбласти

// Только для внутреннего использования
Функция ПолучитьПараметрыДокументовОснований(Знач ДокументыОснования, ТаблицаИдентификаторовОснований)
	
	ТаблицаПараметровДокументовОснований = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	// В запрос передается временная таблица документов-оснований.
	// Затем для этих документов-оснований выбираются первичные ЭД (если есть).
	// Из отобранных ЭД отбираются актуальные версии (по регистру СостоянияЭД), у актуальных ЭД
	// получаются значения реквизитов.
	// В результате запроса обязательно должна присутствовать ссылка на ВладельцаЭД
	// и если найден ЭД, то реквизиты ЭД.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МассивСсылок.ОбъектСсылка
	|ПОМЕСТИТЬ МассивСсылок
	|ИЗ
	|	&МассивСсылок КАК МассивСсылок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка
	|ПОМЕСТИТЬ ВР_ЭД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА НЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|				ТОГДА ЭДПрисоединенныеФайлы.Ссылка
	|			ИНАЧЕ ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец
	|		КОНЕЦ КАК Ссылка
	|	ИЗ
	|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ МассивСсылок КАК МассивСсылок
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|				ПО МассивСсылок.ОбъектСсылка = ЭДПрисоединенныеФайлы.ВладелецФайла
	|			ПО СостоянияЭД.СсылкаНаОбъект = МассивСсылок.ОбъектСсылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.Ссылка.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|			ИЛИ ВложенныйЗапрос.Ссылка.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МассивСсылок.ОбъектСсылка КАК ДокументСсылка,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК Наименование,
	|	ЭДПрисоединенныеФайлы.НомерДокументаОтправителя,
	|	ЭДПрисоединенныеФайлы.ДатаДокументаОтправителя
	|ИЗ
	|	МассивСсылок КАК МассивСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВР_ЭД КАК ВР_ЭД
	|			ПО ЭДПрисоединенныеФайлы.Ссылка = ВР_ЭД.Ссылка
	|		ПО МассивСсылок.ОбъектСсылка = ЭДПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МассивСсылок.ОбъектСсылка КАК ДокументСсылка,
	|	ЭДПрисоединенныеФайлы.УникальныйИД КАК ИдентификаторЭДДокументаОснования
	|ИЗ
	|	МассивСсылок КАК МассивСсылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО МассивСсылок.ОбъектСсылка = ЭДПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	(ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|			ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(перечисление.ТипыЭлементовВерсииЭД.ЭСФ))";
	
	Если ТипЗнч(ДокументыОснования) = Тип("Массив") Тогда
		МассивСсылок = ДокументыОснования;
	Иначе // пришла единичная ссылка на объект
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ДокументыОснования);
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	Для Каждого ЭлементСписка Из МассивСсылок Цикл
		Если МассивТипов.Найти(ТипЗнч(ЭлементСписка)) = Неопределено Тогда
			МассивТипов.Добавить(ТипЗнч(ЭлементСписка));
		КонецЕсли;
	КонецЦикла;
	
	ТипЗначенияКолонки = Новый ОписаниеТипов(МассивТипов);
	ТЗ_Ссылки = Новый ТаблицаЗначений;
	КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", ТипЗначенияКолонки);
	
	Для Каждого ДокументОснование Из МассивСсылок Цикл
		НоваяСтрока = ТЗ_Ссылки.Добавить();
		НоваяСтрока.ОбъектСсылка = ДокументОснование;
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаПараметровДокументовОснований = Результат[2].Выгрузить();
	ТаблицаПараметровДокументовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
	Для Каждого СтрокаТЗ Из ТаблицаПараметровДокументовОснований Цикл
		СтрокаТЗ.ИдентификаторДокументаОснования = Строка(СтрокаТЗ.ДокументСсылка.УникальныйИдентификатор());
	КонецЦикла;
	ТаблицаПараметровДокументовОснований.Колонки.Удалить("ДокументСсылка");
	
	// Таблица идентификаторов помещается в табличную часть ЭД ИдентификаторыОснованийВладельцаФайла.
	ТаблицаЗначений = Результат[3].Выгрузить();
	ТаблицаЗначений.Колонки.Добавить("ИдентификаторДокументаОснования");
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		СтрокаИдентификаторов = ТаблицаИдентификаторовОснований.Добавить();
		СтрокаИдентификаторов.ИдентификаторДокументаОснования = Строка(СтрокаТЗ.ДокументСсылка.УникальныйИдентификатор());
		СтрокаИдентификаторов.ИдентификаторЭДДокументаОснования = СтрокаТЗ.ИдентификаторЭДДокументаОснования;
	КонецЦикла;
	ТаблицаИдентификаторовОснований.Свернуть("ИдентификаторДокументаОснования, ИдентификаторЭДДокументаОснования");
	
	Возврат ТаблицаПараметровДокументовОснований;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДокументОснование(НаименованиеФайла, ДопПараметрыПоиска)
	
	ДокументОснование = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(НаименованиеФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла ПОДОБНО &Наименование
	|
	|";
	Запрос.УстановитьПараметр("Наименование", НаименованиеФайла + "%");
	Для Каждого Элемент Из ДопПараметрыПоиска Цикл
		Текст = Текст + СтрЗаменить("	И ЭДПрисоединенныеФайлы.%1 = &%1", "%1", Элемент.Ключ);
		Запрос.УстановитьПараметр(Элемент.Ключ,  Элемент.Значение);
	КонецЦикла;
	Запрос.Текст = Текст;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокументОснование = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Типы объектов

// Получает имя владельца справочника НоменклатураПоставщика.
//
// Возвращаемое значение:
//  ИмяСправочника - строковое имя владельца.
//
Функция ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков()
	
	ИмяРеквизитаВладельца = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца);
	
	Если ИмяРеквизитаВладельца = Неопределено Тогда // не задано соответствие
		ТекстСообщения = НСтр("ru='В коде прикладного решения необходимо указать имя реквизита для владельца номенклатуры поставщиков.';uk='У коді прикладного рішення необхідно зазначити ім''я реквізиту для власника номенклатури постачальників.'");
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения,
			2, УровеньЖурналаРегистрации.Предупреждение);
		ИмяРеквизитаВладельца = "";
	КонецЕсли;
	
	Возврат ИмяРеквизитаВладельца;
	
КонецФункции

// Определяет, является ли параметр ссылкой на номенклатуру.
//
// Параметры:
//  СсылкаНаОбъект - любой объект.
//
// Возвращаемое значение:
//  Булево - Истина, если это ссылка на элемент справочника Номенклатура ИЛИ НоменклатураПоставщиков.
//
Функция ЭтоНоменклатура(СсылкаНаОбъект)
	
	Результат = Ложь;
	
	Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта("Номенклатура"));
	Если НЕ Результат И ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта("НоменклатураПоставщиков") <> Неопределено Тогда
		Результат = ТипЗнч(СсылкаНаОбъект) = Тип(ЭлектронноеВзаимодействиеСлужебный.ТипОбъекта("НоменклатураПоставщиков"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Определяет имя файла электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//
Функция ОпределитьИмяФайлаЭД(ВидЭД, СсылкаНаОбъект, Знач ВерсияЭД = Неопределено)
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		
		ШаблонПредставленияЭД = НСтр("ru='%1 %2 %3%4.xml';uk='%1 %2 %3%4.xml'");
		
		// Получим версию ЭД и ее строковое представление.
		ВерсияЭД = ?(ВерсияЭД = Неопределено, ОбменСКонтрагентамиСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект), ВерсияЭД);
		Если ТипЗнч(ВерсияЭД) = Тип("Дата") Тогда
			ВерсияЭД = Формат(ВерсияЭД, "ДЛФ=DT; ДП=-");
		КонецЕсли;
		
		ПредставлениеВерсии = "";
		Если ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
			И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
			И ЗначениеЗаполнено(ВерсияЭД) Тогда
			
			ШаблонПредставлениеВерсии = НСтр("ru=' (ver. %1)';uk=' (ver. %1)'");
			ПредставлениеВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставлениеВерсии, ВерсияЭД);
		КонецЕсли;
		
		Если ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СтрокаИмениФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставленияЭД,
				ВидЭД, СсылкаНаОбъект.Организация, СсылкаНаОбъект.Контрагент, ПредставлениеВерсии);
		Иначе
			СтрокаИмениФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставленияЭД,
				ВидЭД, СсылкаНаОбъект.Номер, Формат(СсылкаНаОбъект.Дата, "ДФ=dd.MM.yyyy; ДЛФ=D"), ПредставлениеВерсии);
		КонецЕсли;
		
		СтрокаИмениФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтрокаИмениФайла);
	Иначе
		СтрокаИмениФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	КонецЕсли;
	СтрокаИмениФайла = ОбменСКонтрагентамиСлужебный.КорректноеИмяФайла(СтрокаИмениФайла, Истина);
	
	Возврат СтрокаИмениФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ДобавитьПараметрВЗаголовок(ЗаголовокЗапроса, Имя, Значение)

	ЗаголовокЗапроса = ЗаголовокЗапроса + Имя + ": "+ Значение + Символы.ВК + Символы.ПС;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

Функция ПередатьПакетЭДОператораЭДО(Файл, Маркер, Соединение, Знач АдресРесурса, ПрофильНастроекЭДО)
	
	ПараметрВозврата = 0;
	Если ЗначениеЗаполнено(Маркер) Тогда
		
		Заголовки = "";
		ДобавитьпараметрВЗаголовок(Заголовки, "Assistant-Key", Маркер);
		ИмяФайлаРезультата = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("txt");
		
		АдресРесурса = АдресРесурса + ?(АдресРесурса = "SendMessage", "/" + СтрЗаменить(Файл.Имя, "-", ""), "");
		
		Попытка
			Соединение.ОтправитьДляОбработки(Файл.ПолноеИмя, АдресРесурса, ИмяФайлаРезультата, Заголовки);
			ПараметрВозврата = 1;
		Исключение
			ПараметрВозврата = 0;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			ШаблонСообщения = НСтр("ru='Отправка пакета по профилю настроек ЭДО: %1';uk='Відправлення пакету за профілем настройок ЕДО: %1'");
			ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
			
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = СтрЗаменить(Результат, """", "");
				Результат = СтрЗаменить(Результат, ":", ",");
				МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
				
				ШаблонОшибки = НСтр("ru='%1: %2.';uk='%1: %2.'");
				КодОшибки = МассивПараметровОшибки[5];
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
					КодОшибки);
				
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
			Иначе
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
				Результат,
				ТекстСообщения);
		КонецПопытки;
		
		УдалитьФайлы(ИмяФайлаРезультата);
	КонецЕсли;
	
	Возврат ПараметрВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Получает ключевые данные файла из заголовка электронного документа с помощью XDTO-пакета.
//
// Параметры:
//  ИмяФайла - Строка - путь к файлу, данные которого надо получить;
//  Структура - Структура параметров с реквизитами электронного документа;
//  ОписаниеОшибки - Строка - подбробное описание ошибки.
//
Процедура ПрочитатьШапкуФайлаCMLпоXDTO(ДанныеФайлаЭД, СтруктураПараметров, ОписаниеОшибки) Экспорт
	
	ВидЭД = Неопределено;
	
	Отправитель = Неопределено;
	ДатаФормированияЭДОтправителем = Неопределено;
	ИдЭДВладельца = Неопределено;
	
	Если НЕ ДанныеФайлаЭД.Свойства().Получить("ИД") = Неопределено Тогда
		ИдЭД = ДанныеФайлаЭД.Ид;
	КонецЕсли;
	
	
	// Блок для формата 4.02
	Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
		Отправитель = "Продавец";
		ПризнакПродавца = Истина;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ТОРГ12", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Отправитель = "Продавец";
		ПризнакПродавца = Истина;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("СчетНаОплату", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		Отправитель = "Продавец";
		ПризнакПродавца = Истина;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОСписанииКомиссионногоТовара", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		Отправитель = "Покупатель";
		ПризнакПродавца = Ложь;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ОтчетОПродажахКомиссионногоТовара", "4.02") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		Отправитель = "Покупатель";
		ПризнакПродавца = Ложь;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ЗаказКлиента", "4.02") Тогда
		Если ДанныеФайлаЭД.Роль = "Продавец" Тогда
			ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
			Отправитель = "Продавец";
			ПризнакПродавца = Истина;
		ИначеЕсли ДанныеФайлаЭД.Роль = "Покупатель" Тогда	
			ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
			Отправитель = "Покупатель";
			ПризнакПродавца = Ложь;
		КонецЕсли;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("Каталог", "4.02") Тогда
		ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
		ДатаДокументаОтправителя  = ДанныеФайлаЭД.ДатаФормирования;
		ПризнакПродавца = Истина;
		ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
	ИначеЕсли ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("ПрайсЛист", "4.02") Тогда
		ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		ПризнакПродавца = Истина;
	КонецЕсли;
	
	// Блок для формата 2.08
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	Если ДанныеФайлаЭД.Тип() = ПолучитьТипЗначенияCML("КоммерческаяИнформация", ПространствоИменСхемы) Тогда
		Если Не ДанныеФайлаЭД.Каталог = Неопределено Тогда
			ИдЭД = ДанныеФайлаЭД.Каталог.Ид;
			ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
			ПризнакПродавца = Истина;
			ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
		ИначеЕсли Не ДанныеФайлаЭД.Документ = Неопределено И ДанныеФайлаЭД.Документ.Количество() > 0 Тогда
			ЭДокумент = ДанныеФайлаЭД.Документ[0];
			Если ВРег(ЭДокумент.ХозОперация) = ВРег("Отчет о продажах комиссионного товара") Тогда
				ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
				Отправитель = "Покупатель";
				ПризнакПродавца = Ложь;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег("Отчет о списании комиссионного товара") Тогда
				
				ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
				Отправитель = "Покупатель";
				ПризнакПродавца = Ложь;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег("Счет на оплату") Тогда
				
				ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
				Отправитель = "Продавец";
				ПризнакПродавца = Истина;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег("Заказ Товара") Тогда
				
				Если ЭДокумент.Роль = "Продавец" Тогда
					ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
					Отправитель = "Продавец";
					ПризнакПродавца = Истина;
				ИначеЕсли ЭДокумент.Роль = "Покупатель" Тогда	
					ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
					Отправитель = "Покупатель";
					ПризнакПродавца = Ложь;
				КонецЕсли;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
				
			ИначеЕсли ВРег(ЭДокумент.ХозОперация) = ВРег("Передача прав") Тогда
				
				ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
				ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
			КонецЕсли;
			
		ИначеЕсли Не ДанныеФайлаЭД.ПакетПредложений = Неопределено Тогда
			
			ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
			ПризнакПродавца = Истина;
			ДатаДокументаОтправителя  = ДанныеФайлаЭД.ПакетПредложений.ДействительноС;
			ДатаФормированияЭДОтправителем = ДанныеФайлаЭД.ДатаФормирования;
			ПризнакПродавца = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЭД) Тогда
		ОписаниеОшибки = НСтр("ru='Неизвестный тип ЭД при чтении данных!';uk='Невідомий тип ЕД при читанні даних!'");
		Возврат;
	Иначе
		АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
		Если АктуальныеВидыЭД.Найти(ВидЭД) = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Документы вида ""%1"" не поддерживаются в текущей конфигурации!';uk='Документи виду ""%1"" не підтримуються в поточній конфігурації!'");
			ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, ВидЭД);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НомерЭД", ИдЭД);
	СтруктураПараметров.Вставить("ВидЭД",   ВидЭД);
	СтруктураПараметров.Вставить("ПризнакПродавца", ПризнакПродавца);
	СтруктураПараметров.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
	СтруктураПараметров.Вставить("ИдЭДВладельца", ИдЭДВладельца);
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
	
КонецПроцедуры

Процедура ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO(ИмяФайла, КодРегламента, КодТранзакции, СтруктураФайлаЭД) Экспорт
	
	ОбъектXML = Новый ЧтениеXML;
	ИдЭД                      = Неопределено;
	ВидЭД                     = Неопределено;
	НаправлениеЭД             = Неопределено;
	НомерДокументаОтправителя = Неопределено;
	ДатаДокументаОтправителя  = Неопределено;
	ТипЭлементаВерсииЭД       = Неопределено;
	СтатусЭДВладельца         = Неопределено;
	ТекстСообщения            = Неопределено;
	ОписаниеОшибки            = Неопределено;
	ДополнительныеДанные      = Новый Структура;
	ТекстУточнения            = Неопределено;
	
	СтруктураУчастников = Новый Структура;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ОбъектXML.Закрыть();
		
		Если КодТранзакции = "ErrorMessage" Тогда
			ОписаниеОшибки      = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(ЭД.КодОшибки, ЭД.Описание);
			ВидЭД               = Перечисления.ВидыЭД.Ошибка;
			ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка;
			СтатусЭДВладельца   = Перечисления.СтатусыЭД.ОшибкаПередачи;
		Иначе
			ИдЭД = ЭД.ИдФайл;
			НомерВерсииЭД = 0;
			
			Если КодРегламента = "Nonformalized" ИЛИ КодРегламента = "Formalized" Тогда
				
				Если КодТранзакции = "PostDateConfirmation" Тогда
					ВидЭД               = Перечисления.ВидыЭД.Подтверждение;
					Если ЭД.Документ.КНД = "1115112" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
					Иначе
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО;
					КонецЕсли;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя  = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "CorrectionNotice"
					ИЛИ КодТранзакции = "MainDocumentReject"
					ИЛИ КодТранзакции = "CancellationOfferReject" Тогда
					ВидЭД               = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.ОтклоненПолучателем;
					
					СвойстваСвУведУточ = ЭД.Документ.СвУведУточ.Свойства();
					Если СвойстваСвУведУточ.Получить("ДатаВремяПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = ПолучитьДатуВремяИзСтроки(ЭД.Документ.СвУведУточ.ДатаВремяПол);
					ИначеЕсли СвойстваСвУведУточ.Получить("ДатаПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвУведУточ.ДатаПол)
							+ СтрЗаменить(ЭД.Документ.СвУведУточ.ВремяПол, ".", ""));
					КонецЕсли;
					
					ТекстУточнения = "";
					Если СвойстваСвУведУточ.Получить("ТекстУведУточ") <> Неопределено
						И ЭД.Документ.СвУведУточ.ТекстУведУточ <> Неопределено
						И ТипЗнч(ЭД.Документ.СвУведУточ.ТекстУведУточ) = Тип("Строка") Тогда
						
						ТекстУточнения = ЭД.Документ.СвУведУточ.ТекстУведУточ;
					КонецЕсли;
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					ВидЭД               = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.Доставлен;
					
					СвойстваСвИзвПолуч = ЭД.Документ.СвИзвПолуч.Свойства();
					Если СвойстваСвИзвПолуч.Получить("ДатаВремяПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = ПолучитьДатуВремяИзСтроки(ЭД.Документ.СвИзвПолуч.ДатаВремяПол);
					ИначеЕсли СвойстваСвИзвПолуч.Получить("ДатаПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
							+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
					КонецЕсли;
				ИначеЕсли КодТранзакции = "CancellationOffer" Тогда
					ВидЭД               = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
					СтатусЭДВладельца   = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании;
					ДатаДокументаОтправителя  = Дата(1, 1, 1);
					ТекстУточнения      = ЭД.Документ.СвПредАн.ТекстПредАн;
					ДополнительныеДанные.Вставить("НаименованиеВладельца", СокрЛП(ЭД.Документ.СвПредАн.СведАнФайл.ИмяАнФайла));
				Иначе
					ТекстСообщения = НСтр("ru='Данный вид электронного документа ""%1"" не поддерживается в текущей версии программы.
                        |Необходимо обновить конфигурацию до актуальной версии.'
                        |;uk='Даний вид електронного документа ""%1"" не підтримується поточною версією програми.
                        |Необхідно оновити конфігурацію до актуальної версії.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодТранзакции);
					ТекстОшибки = НСтр("ru='При чтении данных из файла ""%1"" возникла ошибка: неизвестный код транзакции ""%2"".';uk='При читанні даних з файлу ""%1"" помилка: невідомий код транзакції ""%2"".'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяФайла, КодТранзакции);
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Чтение ЭД.';uk='Читання ЕД.'"),
						ТекстОшибки, ТекстСообщения);
				КонецЕсли;
			Иначе
				Если КодТранзакции = "PostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отправлен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "SendConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Получен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.Подтверждение;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Получен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СведПодтв.ДатаОтпр)
						+ СтрЗаменить(ЭД.Документ.СведПодтв.ВремяОтпр, ".", ""));
				ИначеЕсли КодТранзакции = "ReceiveNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Доставлен;
					
					СвойстваСвИзвПолуч = ЭД.Документ.СвИзвПолуч.Свойства();
					Если СвойстваСвИзвПолуч.Получить("ДатаВремяПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = ПолучитьДатуВремяИзСтроки(ЭД.Документ.СвИзвПолуч.ДатаВремяПол);
					ИначеЕсли СвойстваСвИзвПолуч.Получить("ДатаПол") <> Неопределено Тогда
						ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
							+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
					КонецЕсли;
				ИначеЕсли КодТранзакции = "CorrectionNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.ОтклоненПолучателем;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвУведУточ.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвУведУточ.ВремяПол, ".", ""));
						
					ТекстУточнения = "";
					СвойстваСвУведУточ = ЭД.Документ.СвУведУточ.Свойства();
					Если СвойстваСвУведУточ.Получить("ТекстУведУточ") <> Неопределено
						И ЭД.Документ.СвУведУточ.ТекстУведУточ <> Неопределено
						И ТипЗнч(ЭД.Документ.СвУведУточ.ТекстУведУточ) = Тип("Строка") Тогда
						
						ТекстУточнения = ЭД.Документ.СвУведУточ.ТекстУведУточ;
					КонецЕсли;
				ИначеЕсли КодТранзакции = "CorrectionNoticeReceiveNotice" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.Отклонен;
					ДатаДокументаОтправителя = Дата(РазобратьСтрокуДаты(ЭД.Документ.СвИзвПолуч.ДатаПол)
						+ СтрЗаменить(ЭД.Документ.СвИзвПолуч.ВремяПол, ".", ""));
				ИначеЕсли КодТранзакции = "CancellationOffer" Тогда
					ВидЭД                    = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
					ТипЭлементаВерсииЭД      = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
					СтатусЭДВладельца        = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании;
					ДатаДокументаОтправителя = Дата(1, 1, 1);
					ТекстУточнения           = ЭД.Документ.СвПредАн.ТекстПредАн;
					ДополнительныеДанные.Вставить("НаименованиеВладельца", СокрЛП(ЭД.Документ.СвПредАн.СведАнФайл.ИмяАнФайла));
				Иначе
					ТекстСообщения = НСтр("ru='Данный вид электронного документа ""%1"" не поддерживается в текущей версии программы.
                        |Необходимо обновить конфигурацию до актуальной версии.'
                        |;uk='Даний вид електронного документа ""%1"" не підтримується поточною версією програми.
                        |Необхідно оновити конфігурацію до актуальної версії.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодТранзакции);
					ТекстОшибки = НСтр("ru='При чтении данных из файла ""%1"" возникла ошибка: неизвестный код транзакции ""%2"".';uk='При читанні даних з файлу ""%1"" помилка: невідомий код транзакції ""%2"".'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяФайла, КодТранзакции);
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Чтение ЭД.';uk='Читання ЕД.'"),
						ТекстОшибки, ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерВерсииЭД = ОписаниеТипа.ПривестиЗначение(НомерВерсииЭД);
		
		СтруктураФайлаЭД.НомерВерсииЭД             = НомерВерсииЭД;
		СтруктураФайлаЭД.ВидЭд                     = ВидЭД;
		СтруктураФайлаЭД.НомерЭД                   = ИдЭД;
		СтруктураФайлаЭД.НаправлениеЭД             = НаправлениеЭД;
		СтруктураФайлаЭД.СтатусЭДВладельца         = СтатусЭДВладельца;
		СтруктураФайлаЭД.ТипЭлементаВерсииЭД       = ТипЭлементаВерсииЭД;
		СтруктураФайлаЭД.НомерДокументаОтправителя = НомерДокументаОтправителя;
		СтруктураФайлаЭД.ДатаДокументаОтправителя  = ДатаДокументаОтправителя;
		СтруктураФайлаЭД.ОписаниеОшибки            = ОписаниеОшибки;
		СтруктураФайлаЭД.ТекстУточнения            = ТекстУточнения;
		СтруктураФайлаЭД.ДополнительныеДанные      = ДополнительныеДанные;
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru='Возникла ошибка при чтении данных из файла %1: %2.';uk='Виникла помилка при читанні даних з файлу %1: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИмяФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Чтение ЭД.';uk='Читання ЕД.'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры
Функция РазобратьСтрокуДаты(ПараметрРазбора)
	
	Возврат Сред(ПараметрРазбора, 7, 4) + Сред(ПараметрРазбора, 4, 2) + Сред(ПараметрРазбора, 1, 2);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭД

// Функция выполняет отправку файлов, находящихся в каталоге "АдресКаталогаОтправки".
//
// Параметры:
//  Маркер                - двоичные данные, маркер, полученный на клиенте.
//  АдресКаталогаОтправки - строка, полный путь к каталогу с передаваемыми файлами.
//  АдресРесурса          - строка, адрес веб-сервиса.
//  ПрофильНастроекЭДО    - СправочникСсылка.ПрофилиНастроекЭДО - профиль настроек ЭДО, по которому происходит отправка.
//  ФлагОтладки - Булево.
//
// Возвращаемое значение:
//  РезультатОтправки - Число (количество отправленных документов).
//
Функция ОтправитьЧерезОператораЭДО(Маркер, АдресКаталогаОтправки, АдресРесурса, ПрофильНастроекЭДО) Экспорт
	
	РезультатОтправки = 0;
	
	Соединение = ПолучитьСоединение(ПрофильНастроекЭДО.СпособОбменаЭД);
	
	Если ЗначениеЗаполнено(Маркер) Тогда
		Если ТипЗнч(Маркер) <> Тип("Строка") Тогда
			Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Маркер);
		КонецЕсли;
		ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
		Для Каждого Файл Из ФайлыОтправки Цикл
			ПромежуточныйРезультат = ПередатьПакетЭДОператораЭДО(
													Файл,
													Маркер,
													Соединение,
													АдресРесурса,
													ПрофильНастроекЭДО);
			РезультатОтправки = РезультатОтправки + ПромежуточныйРезультат;
		КонецЦикла;
	КонецЕсли;
	
	УдалитьФайлы(АдресКаталогаОтправки);
	
	Возврат РезультатОтправки;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Обмен с оператором ЭДО

// Работа с деревом

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Функция НаименованиеУчастникаЭДО(СтрокаДереваДанных, ВидУчастника)
	
	Наименование = "";
	Если Не ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника")) Тогда
		Возврат Наименование;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		Фамилия = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		
		Наименование = Фамилия + " " + Имя + " " + Отчество;
		
	Иначе
			
		Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Процедура ЗаполнитьДопДанныеШапкиДокумента(ЗаполняемыйXDTO, ДеревоДанных, ПространствоИмен, СтруктураПараметров, ТекстОшибки)
	
	СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть", Истина);
	
	Если ВРег(ПространствоИмен) = ВРег("KORSFAKT_5_02") Тогда
		ПутьКДопДанным = "Файл.Документ.СвКСчФ.ИнфПол";
		
	Иначе
		ПутьКДопДанным = "Файл.Документ.СвСчФакт.ИнфПол";
	КонецЕсли;
	
	
	ИмяЭлементаВладельца = "Шапка";
	Если ВРег(ПространствоИмен) = ВРег("TORGPR") Или ВРег(ПространствоИмен) = ВРег("RUISP") Тогда
		
		ЗаполнитьПодписываемыеДопДанные_ПередачаТоваров(СтрокаДопДанных, ИмяЭлементаВладельца, ЗаполняемыйXDTO, ПространствоИмен,
			СтруктураПараметров, ТекстОшибки);
			
	Иначе
		
		ДопДанныеXDTO = ПолучитьОбъектТипаCML(ПутьКДопДанным, ПространствоИмен);
		
		ЗаполнитьПодписываемыеДопДанные(СтрокаДопДанных, ИмяЭлементаВладельца, ДопДанныеXDTO, ПространствоИмен,
			СтруктураПараметров, ТекстОшибки);
		ЗаполняемыйXDTO.ИнфПол = ДопДанныеXDTO;
	
	КонецЕсли;
	
	НеПодписанныеДанные = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть", Истина);
	ПоместитьНеПодписанныеДанныеВДеревоДокумента(НеПодписанныеДанные, СтруктураПараметров, ИмяЭлементаВладельца);
	
	ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь, ИмяЭлементаВладельца);
	
	Если ДопФайлСформирован Тогда
		
		ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
		ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла", СтруктураПараметров.ИдентификаторДопФайла);
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ПоместитьНеПодписанныеДанныеВДеревоДокумента(НеПодписанныеДанные, СтруктураПараметров,
		ИмяРеквизита, НомерСтроки = Неопределено)
	
	НеПодписанные = Новый Структура;
	Для Каждого СтрокаДанных Из НеПодписанныеДанные.Строки Цикл
		
		ИмяПараметра = ЭлектронноеВзаимодействие.НазваниеКолонки(СтрокаДанных.ПолныйПуть);
		ЗначениеПараметра = СтрокаДанных.Значение;

		НеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
		
	КонецЦикла;
	
	Если НеПодписанные.Количество() > 0 Тогда
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, НеПодписанные, ИмяРеквизита, Ложь,
			НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодписываемыеДопДанные(СтрокаДопДанных, ИмяРеквизита, ЗаполняемыйXDTO, ПространствоИмен,
	СтруктураПараметров, ТекстОшибки, НомерСтроки = Неопределено)
	
	// Перебираем все ветки подписанных доп. данных
	// Первые 20 строк у которых ключ не более 50 символов и значение реквизита не более 200 попадают в подписанные данные
	// Данные из ветки "НеПодписанные" и не прошедшие проверку данные из ветки "Подписанные" передаются как не подписанные данные
	
	Если ИмяРеквизита = "Товары" Тогда
		
		Если ВРег(ПространствоИмен) = ВРег("KORSFAKT_5_02") Тогда
			ПутьКДопДанным = "Файл.Документ.ТаблКСчФ.СведТов.ИнфПолСтр";
		Иначе
			ПутьКДопДанным = "Файл.Документ.ТаблСчФакт.СведТов.ИнфПолСтр";
		КонецЕсли;
		
	Иначе
		Если ВРег(ПространствоИмен) = ВРег("KORSFAKT_5_02") Тогда
			ПутьКДопДанным = "Файл.Документ.СвКСчФ.ИнфПол.ТекстИнф";
		Иначе
			ПутьКДопДанным = "Файл.Документ.СвСчФакт.ИнфПол.ТекстИнф";
		КонецЕсли;
	КонецЕсли;
	
	
	МаксДлинаКлюча = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Идентиф",ВидФасетаXDTO.МаксДлина);
	МаксДлинаЗначения = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Значен",ВидФасетаXDTO.МаксДлина);
	МинДлинаЗначения = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Значен",ВидФасетаXDTO.МинДлина);
	
	Если ИмяРеквизита = "Товары" Тогда
		РазмерСписка = ЗаполняемыйXDTO.ИнфПолСтр.ВладеющееСвойство.ВерхняяГраница;
	Иначе
		РазмерСписка = ЗаполняемыйXDTO.ТекстИнф.ВладеющееСвойство.ВерхняяГраница;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДопДанных) Тогда
		НеВалидныеПодписанные = Новый Структура;
		ВалидныеПодписанные = Новый Структура;
		
		НомерСтрокиДопДанных = 0;
		Для Каждого ПодписаннаяСтрока Из СтрокаДопДанных.Строки Цикл
			НомерСтрокиДопДанных = НомерСтрокиДопДанных +1;
			
			ИмяПараметра = ЭлектронноеВзаимодействие.НазваниеКолонки(ПодписаннаяСтрока.ПолныйПуть);
			ЗначениеПараметра = ПодписаннаяСтрока.Значение;
			
			Если СтрДлина(ИмяПараметра) > Число(МаксДлинаКлюча)
				Или СтрДлина(ЗначениеПараметра) > Число(МаксДлинаЗначения)
				Или СтрДлина(ЗначениеПараметра) < Число(МинДлинаЗначения)
				Или НомерСтрокиДопДанных > РазмерСписка Тогда
				
				НеВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
			Иначе
				ВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьВалидныеДопДанные(ВалидныеПодписанные, ЗаполняемыйXDTO, ПутьКДопДанным, ПространствоИмен, ИмяРеквизита, ТекстОшибки);
	
	Если НеВалидныеПодписанные.Количество() > 0 Тогда
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, НеВалидныеПодписанные, ИмяРеквизита, Ложь, НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВалидныеДопДанные(ВалидныеПодписанные, ЗаполняемыйXDTO, ПутьКДопДанным, ПространствоИмен, ИмяРеквизита, ТекстОшибки)
	
	Для Каждого КлючЗначение Из ВалидныеПодписанные Цикл
		
		ДопДанные = ПолучитьОбъектТипаCML(ПутьКДопДанным, ПространствоИмен);
		ЗаполнитьСвойствоXDTO(ДопДанные, "Идентиф", КлючЗначение.Ключ,, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ДопДанные, "Значен", Строка(КлючЗначение.Значение),, ТекстОшибки);
		
		Если ИмяРеквизита = "Шапка" Тогда
			
			Если ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолФХЖ3") Тогда
				ЗаполняемыйXDTO.ИнфПолФХЖ3.Добавить(ДопДанные);
			ИначеЕсли ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолФХЖ2") Тогда
				ЗаполняемыйXDTO.ИнфПолФХЖ2.Добавить(ДопДанные);
			Иначе
				ЗаполняемыйXDTO.ТекстИнф.Добавить(ДопДанные);
			КонецЕсли;
			
		Иначе
			
			Если ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолСтр") Тогда
				ЗаполняемыйXDTO.ИнфПолСтр.Добавить(ДопДанные);
			ИначеЕсли ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолеОписРабот") Тогда
				ЗаполняемыйXDTO.ИнфПолеОписРабот.Добавить(ДопДанные);
			ИначеЕсли ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолФХЖ2") Тогда
				ЗаполняемыйXDTO.ИнфПолФХЖ2.Добавить(ДопДанные);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПодписываемыеДопДанные_ПередачаТоваров(СтрокаДопДанных, ИмяРеквизита, ЗаполняемыйXDTO, ПространствоИмен,
		СтруктураПараметров, ТекстОшибки, НомерСтроки = Неопределено)
	
	Если Не ЗначениеЗаполнено(СтрокаДопДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДопДанным = "ТекстИнфТип";
	МаксДлинаКлюча = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Идентиф",ВидФасетаXDTO.МаксДлина);
	МаксДлинаЗначения = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Значен",ВидФасетаXDTO.МаксДлина);
	МинДлинаЗначения = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, ПутьКДопДанным, "Значен",ВидФасетаXDTO.МинДлина);
	
	РазмерСписка = Неопределено;
	Если ЕстьСвойствоXDTO(ЗаполняемыйXDTO, "ИнфПолеОписРабот") Тогда
		РазмерСписка = ЗаполняемыйXDTO.ИнфПолеОписРабот.ВладеющееСвойство.ВерхняяГраница;
	КонецЕсли;
	
	НеВалидныеПодписанные = Новый Структура;
	ВалидныеПодписанные = Новый Структура;
	
	НомерСтрокиДопДанных = 0;
	Для Каждого ПодписаннаяСтрока Из СтрокаДопДанных.Строки Цикл
		НомерСтрокиДопДанных = НомерСтрокиДопДанных +1;
		
		ИмяПараметра = ЭлектронноеВзаимодействие.НазваниеКолонки(ПодписаннаяСтрока.ПолныйПуть);
		ЗначениеПараметра = ПодписаннаяСтрока.Значение;
		
		Если Не РазмерСписка = Неопределено Тогда
			Если НомерСтрокиДопДанных > РазмерСписка Тогда
				НеВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрДлина(ИмяПараметра) > Число(МаксДлинаКлюча)
			Или СтрДлина(ЗначениеПараметра) > Число(МаксДлинаЗначения)
			Или СтрДлина(ЗначениеПараметра) < Число(МинДлинаЗначения) Тогда
			
			НеВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
		Иначе
			ВалидныеПодписанные.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьВалидныеДопДанные(ВалидныеПодписанные, ЗаполняемыйXDTO, ПутьКДопДанным, ПространствоИмен, ИмяРеквизита, ТекстОшибки);
	
	Если НеВалидныеПодписанные.Количество() > 0 Тогда
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, НеВалидныеПодписанные, ИмяРеквизита, Ложь, НомерСтроки);
	КонецЕсли;

КонецПроцедуры

// Заполняем доп данные документа Передача товаров, Передача результатов работ
Процедура ЗаполнитьДопДанныеТаблицыПередачиТоваров(ЗаполняемыйXDTO, ДеревоДанных, СтруктураПараметров, ПространствоИмен, ТекстОшибки)
	
	НомерСтроки = ДеревоДанных.Значение;
	
	ПутьДопДанные = ДеревоДанных.ПолныйПуть;
	СтрокаДопДанных = ДеревоДанных.Строки.Найти(ПутьДопДанные+ ".ДопДанныеПодписанные", "ПолныйПуть", Истина);
	
	Если ПространствоИмен = ПространствоИменПередачаТоваровПродавец() Тогда
		ИмяЭлементаВладельца = "Товары";
	Иначе
		ИмяЭлементаВладельца = "Услуги";
	КонецЕсли;
	
	ЗаполнитьПодписываемыеДопДанные_ПередачаТоваров(СтрокаДопДанных, ИмяЭлементаВладельца, ЗаполняемыйXDTO, ПространствоИмен,
		СтруктураПараметров, ТекстОшибки, НомерСтроки);
	
	// Не подписанные данные помещаем реквизитв "ДопДанные" структуры параметров.
	НеПодписанныеДанные = ДеревоДанных.Строки.Найти(ПутьДопДанные+ ".ДопДанныеНеПодписанные", "ПолныйПуть", Истина);
	ПоместитьНеПодписанныеДанныеВДеревоДокумента(НеПодписанныеДанные, СтруктураПараметров, ИмяЭлементаВладельца, НомерСтроки);
	
КонецПроцедуры

Функция НакладнаяСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("КодХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("СрокГодности");
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Штрихкод");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("СуммаСНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция СчетНаОплатуСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("СрокПлатежа");
	СтруктураПараметров.Вставить("РасчетныйСчетОрганизации");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, РасчетныйСчет");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ЗаказПоставщикуСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("Роль");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ЗаказКлиентаСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Роль");
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента");
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ПрайсЛистСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Описание");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, Валюта, ДатаФормирования, Дата, ВидЭД,
	|НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция АктВыполненныхРаботСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаДокумента");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	Структурапараметров.Вставить("НалогообложениеНДС");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика");
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика");
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента");
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ОтчетОСписанииКомиссионногоТовараСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("ИД");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров",  ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("НачалоПериода");
	СтруктураПараметров.Вставить("КонецПериода");
	СтруктураПараметров.Вставить("ДатаПлатежа");
	СтруктураПараметров.Вставить("НалогообложениеНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД");

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПередачаТоваровМеждуОрганизациямиСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ВозвратТоваровМеждуОрганизациямиСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	СтруктураПараметров.Вставить("Грузоотправитель");
	СтруктураПараметров.Вставить("ТипГрузоотправителя");
	СтруктураПараметров.Вставить("Грузополучатель");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
		
	Возврат СтруктураПараметров;
		
КонецФункции

// Только для внутреннего использования
Функция ТаблицаДанныхУчастниковОбмена(СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	АдресРесурса = "GetContactListUpdates";
	ТаблицаПриглашений = ИнициализироватьТаблицуДанныхУчастниковОбмена();
	
	Для Каждого Элемент Из СоотвСоглашенийИСтруктурСертификатов Цикл
		
		ПрофильНастроекЭДО = Элемент.Ключ;
		СтруктураСертификата = Элемент.Значение;
		
		ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
			"СпособОбменаЭД, ИдентификаторОрганизации");
		СтруктураСертификата.Вставить("СпособОбменаЭД", ПараметрыПрофиляНастроекЭДО.СпособОбменаЭД);
		СтруктураСертификата.Вставить("ИдентификаторОрганизации", ПараметрыПрофиляНастроекЭДО.ИдентификаторОрганизации);
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПриглашений;
	
КонецФункции

// Только для внутреннего использования
Функция ИнициализироватьТаблицуДанныхУчастниковОбмена()
	
	КС12 = Новый КвалификаторыСтроки(12);
	КС255 = Новый КвалификаторыСтроки(255);
	КС1024 = Новый КвалификаторыСтроки(1024);
	КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	
	ОписаниеТиповС12 = Новый ОписаниеТипов(Массив, , КС12);
	ОписаниеТиповС255 = Новый ОписаниеТипов("Строка", , КС255);
	ОписаниеТиповС1024 = Новый ОписаниеТипов("Строка", , КС1024);
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , КД);
	ОписаниеТиповПрофильНастроекЭДО = Новый ОписаниеТипов("СправочникСсылка.ПрофилиНастроекЭДО");
	ОписаниеТиповСтатусыУчастников = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыУчастниковОбменаЭД");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ПрофильНастроекЭДО", ОписаниеТиповПрофильНастроекЭДО);
	ТЗ.Колонки.Добавить("Наименование",  ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("ИНН",           ОписаниеТиповС12);
	ТЗ.Колонки.Добавить("КПП",           ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Идентификатор", ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("ТекстПриглашения", ОписаниеТиповС1024);
	ТЗ.Колонки.Добавить("Состояние",     ОписаниеТиповСтатусыУчастников);
	ТЗ.Колонки.Добавить("ОписаниеОшибки",ОписаниеТиповС255);
	ТЗ.Колонки.Добавить("Изменен",       ОписаниеТиповДата);
	ТЗ.Колонки.Добавить("ВнешнийИД",     ОписаниеТиповС255);
	
	Возврат ТЗ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение веток схемы xsd версии CML2

// Функция заполняет список XDTO значениями строки дерева значений, имена которых совпадают с именами элементов
// (атрибутов) списка и имеют простой тип (строка, число, ...).
//
// Параметры:
//  СтрокаДерева - строка дерева значений - строка источник данных.
//  ИмяКорневогоУзла - строка - имя корневого объекта XDTO, элементом которого является заполняемый список XDTO.
//  ИмяУзла - строка - имя списка XDTO.
//  ПространствоИменСхемы - строка - пространство имен.
//  ТекстОшибки - строка - содержит текст ошибки, возникшей при заполнении объекта.
//
// Возвращаемое значение:
//  Неопределено, ОбъектXDTO - если список не заполнен - то неопределено.
//
Функция ЗаполнитьСписокXDTOОдноименнымиПараметрамиДерева(СтрокаДерева, ИмяКорневогоУзла, ИмяУзла, ПространствоИменСхемы, ТекстОшибки)
	
	УзелЗаполнен = Ложь;
	УровеньДанных = "";
	Для Каждого ТекКолонка Из СтрокаДерева.Владелец().Колонки Цикл
		ИмяКолонки = ТекКолонка.Имя;
		Если Найти(ИмяКолонки, "Уровень") > 0 И ЗначениеЗаполнено(СтрокаДерева[ИмяКолонки]) Тогда
			ТекУровень = Число(Сред(ИмяКолонки, 8));
			Если ТекУровень > 0 Тогда
				ТекУровень = ТекУровень + 2; // т.к. следующий уровень "НомерСтроки".
				УровеньДанных = "Уровень" + ТекУровень;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(УровеньДанных) Тогда
		Реквизит = ПолучитьОбъектТипаCML(ИмяКорневогоУзла, ПространствоИменСхемы);
		Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
			Узел = ПолучитьОбъектТипаCML(ИмяКорневогоУзла + "." + ИмяУзла, ПространствоИменСхемы);
			Для Каждого ТекСвойство Из Узел.Свойства() Цикл
				ЗначениеПараметра = ТекСтрока.Строки.Найти(ТекСвойство.Имя, УровеньДанных);
				Если ЭтоПростойТипЭлементаXDTO(Узел[ТекСвойство.Имя])
					И ЗначениеПараметра <> Неопределено
					И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
					Обязательное = ЗначениеЗаполнено(ТекСвойство.НижняяГраница);
					ЗаполнитьСвойствоXDTO(Узел, ТекСвойство.Имя, ЗначениеПараметра.Значение, Обязательное, ТекстОшибки);
					УзелЗаполнен = Истина;
				КонецЕсли;
			КонецЦикла;
			Реквизит[ИмяУзла].Добавить(Узел);
		КонецЦикла;
	КонецЕсли;
	Если НЕ УзелЗаполнен Тогда
		Реквизит = Неопределено;
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

Процедура СформироватьДанныеПоТоваруCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, ТекстОшибки, МассивФайлов = Неопределено)
	
	Характеристика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Характеристика", Ложь);
	Упаковка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Упаковка", Ложь);
	
	// Формируем ИД товара.
	ИдТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдТовараУКонтрагента", Ложь);
	Если Не ЗначениеЗаполнено(ИдТовара) Тогда
		Номенклатура = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Номенклатура");
		ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
		ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
		ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
		
		ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	КонецЕсли;
	
	// Характеристики и упаковки.
	Если ЗначениеЗаполнено(Характеристика) ИЛИ ЗначениеЗаполнено(Упаковка) Тогда
		НаименованиеНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование")
			+ " (" + ?(ЗначениеЗаполнено(Характеристика), Характеристика , "")
			+ ?(ЗначениеЗаполнено(Характеристика) И ЗначениеЗаполнено(Упаковка), ", ", "")
			+ ?(ЗначениеЗаполнено(Упаковка), Упаковка , "") + ")";
		ВставитьЗначениеВДерево(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование", НаименованиеНоменклатуры);
	КонецЕсли;
	
	ПоместитьВДопДанныеСтрокиТабличнойЧасти(СтрокаДереваДанных, "Ид", ИДТовара);
	
	ЗаполнитьСвойствоXDTO(Товар, "Наименование",
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование"), , ТекстОшибки);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Артикул", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Страна") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Страна");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Страна", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТорговаяМарка") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТорговаяМарка");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ТорговаяМарка", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Описание") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Описание");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Описание", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Картинка") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Картинка");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Картинка", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним тег БазоваяЕдиница.
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеКраткое", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Пересчет = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница.Пересчет", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(Пересчет, "Единица", Реквизит, , ТекстОшибки);
		
			Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент") Тогда
				Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЗаполнитьСвойствоXDTO(Пересчет, "Коэффициент", Реквизит, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			БазоваяЕдиница.Пересчет.Добавить(Пересчет);
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ")
		И Товар.Свойства().Получить("Единица") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Единица", Реквизит, , ТекстОшибки);
			
			Коэффициент = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКоэффициент");
			Если ЗначениеЗаполнено(Коэффициент) Тогда
				ЗаполнитьСвойствоXDTO(Товар, "Коэффициент", Коэффициент, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога")
		И Товар.Свойства().Получить("ИдКаталога") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ИдКаталога", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора")
		И Товар.Свойства().Получить("ИдКлассификатора") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ИдКлассификатора", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("ЦенаЗаЕдиницу") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ЦенаЗаЕдиницу", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("Цена") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Цена", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество")
		И Товар.Свойства().Получить("Количество") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Количество", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма")
		И Товар.Свойства().Получить("Сумма") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "Сумма", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Товар.Свойства().Получить("Налоги") <> Неопределено И Товар.Свойства().Получить("Налоги") <> Неопределено Тогда
		
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаНДС");
		
		Налоги = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги", ПространствоИменСхемы);
		Налог = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги.Налог", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Налог, "Наименование", "НДС", Истина, ТекстОшибки);
		
		УчтеноВСумме = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.НДСУчтеноВСумме", Ложь);
		Если ЗначениеЗаполнено(УчтеноВСумме) Тогда
			ЗаполнитьСвойствоXDTO(Налог, "УчтеноВСумме", УчтеноВСумме, , ТекстОшибки);
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Налог, "Сумма", Реквизит, Истина, ТекстОшибки);
		
		СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтавкаНДС");
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтрокаСтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, СтавкаНДС);
			ЗаполнитьСвойствоXDTO(Налог, "Ставка", СтрокаСтавкаНДС, , ТекстОшибки);
		КонецЕсли;
		Налоги.Налог.Добавить(Налог);
		ЗаполнитьСвойствоXDTO(Товар, "Налоги", Налоги, , ТекстОшибки);
		
	КонецЕсли;
	
	// Заполним скидку
	Скидка = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Скидки.Скидка", ПространствоИменСхемы);
	ЗаполнятьСкидку = Ложь;
	
	НаименованиеСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.НаименованиеСкидки", Ложь);
	Если Не ЗначениеЗаполнено(НаименованиеСкидки) Тогда
		НаименованиеСкидки = "ОбщаяСкидка";
	КонецЕсли;
	Скидка.Наименование = НаименованиеСкидки;
	
	СуммаСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаСкидки", Ложь);
	Если ЗначениеЗаполнено(СуммаСкидки) Тогда
		Скидка.Сумма = СуммаСкидки;
		ЗаполнятьСкидку = Истина;
	КонецЕсли;
	
	ПроцентСкидки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПроцентСкидки", Ложь);
	Если ЗначениеЗаполнено(ПроцентСкидки) Тогда
		Скидка.Процент = ПроцентСкидки;
	КонецЕсли;
	
	СкидкаУчтеноВСумме = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СкидкаУчтеноВСумме", Ложь);
	Если ЗначениеЗаполнено(СкидкаУчтеноВСумме) Тогда
		Скидка.УчтеноВСумме = СкидкаУчтеноВСумме;
	КонецЕсли;
	
	КомментарийКСкидке = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.КомментарийКСкидке", Ложь);
	Если ЗначениеЗаполнено(КомментарийКСкидке) Тогда
		Скидка.Комментарий = КомментарийКСкидке;
	КонецЕсли;
	
	Если ЗаполнятьСкидку Тогда
		Скидки = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Скидки", ПространствоИменСхемы);
		Скидки.Скидка.Добавить(Скидка);
		
		Товар.Скидки = Скидки;
	КонецЕсли;

	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения")
		И Товар.Свойства().Получить("СтранаПроисхождения") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "СтранаПроисхождения", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД")
		И Товар.Свойства().Получить("ГТД") <> Неопределено Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЗаполнитьСвойствоXDTO(Товар, "ГТД", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСвойства = Ложь;
	ЗначенияСвойств = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияСвойств", ПространствоИменСхемы);
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Штрихкоды")
			И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Штрихкоды")) Тогда
		ЕстьСвойства = Истина;
		СтрокаТаблицыШтрихкодов = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.Штрихкоды", "ПолныйПуть", Истина);
		Для Каждого СтрокаДанных Из СтрокаТаблицыШтрихкодов.Строки Цикл
			ЗначенияСвойства = ПолучитьОбъектТипаCML("ЗначенияСвойства", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Ид", "Штрихкод", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Наименование", СтрокаДанных.Строки[1].Значение, , ТекстОшибки);
			ЗначенияСвойства.Значение.Добавить(СтрокаДанных.Строки[0].Значение);
			ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Свойства")
			И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Свойства")) Тогда
		ЕстьСвойства = Истина;
		СтрокаТаблицыСвойств = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.Свойства", "ПолныйПуть", Истина);
		Индекс = 0;
		Для Каждого СтрокаДанных Из СтрокаТаблицыСвойств.Строки Цикл
			Индекс = Индекс + 1;
			ЗначенияСвойства = ПолучитьОбъектТипаCML("ЗначенияСвойства", ПространствоИменСхемы);
			ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Ид", "Свойство" + Индекс, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Наименование", Строка(СтрокаДанных.Строки[0].Значение), , ТекстОшибки);
			ЗначенияСвойства.Значение.Добавить(Строка(СтрокаДанных.Строки[1].Значение));
			ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьСвойства Тогда
		ЗаполнитьСвойствоXDTO(Товар, "ЗначенияСвойств", ЗначенияСвойств, , ТекстОшибки);
	КонецЕсли;
	
	// Заполняем значения реквизитов
	ПоместитьДопДанныеСтрокиТаблицы(СтрокаДереваДанных, ИДТовара, ТекстОшибки, СтрокаДереваДанных.Значение, Товар);

	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЗначенияРеквизитов") Тогда
		ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияРеквизитов", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЗначенияРеквизитов")) Тогда
			СтрокаТаблицыСвойств = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.ЗначенияРеквизитов", "ПолныйПуть", Истина);
			Индекс = 0;
			Для Каждого СтрокаДанных Из СтрокаТаблицыСвойств.Строки Цикл
				Индекс = Индекс + 1;
				ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
				ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Строка(СтрокаДанных.Строки[0].Значение), Истина, ТекстОшибки);
				ЗначениеРеквизита.Значение.Добавить(Строка(СтрокаДанных.Строки[1].Значение));
				ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
			КонецЦикла;
			ЗаполнитьСвойствоXDTO(Товар, "ЗначенияРеквизитов", ЗначенияРеквизитов, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПрисоединенныеФайлы")
			И ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПрисоединенныеФайлы")) Тогда
		
		СтрокаТаблицыФайлов = СтрокаДереваДанных.Строки.Найти(
														"Товары.НомерСтроки.ПрисоединенныеФайлы",
														"ПолныйПуть",
														Истина);
		Для Каждого СтрокаДанных Из СтрокаТаблицыФайлов.Строки Цикл
			Товар.Картинка.Добавить(СтрокаДанных.Строки[1].Значение);
			Если Не МассивФайлов = Неопределено Тогда
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("АдресВременногоХранилища", СтрокаДанных.Строки[0].Значение);
				СтруктураДанных.Вставить("ИмяФайла",                 СтрокаДанных.Строки[1].Значение);
				СтруктураДанных.Вставить("ИдТовара",                 ИдТовара);
				МассивФайлов.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТабЧастиТоварыДокументаCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, ТекстОшибки)
	
	ДополнительныеДанные = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ДополнительныеДанные", ПространствоИменСхемы);
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЦенаПродажи") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЦенаПродажи");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "ЦенаПродажи";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаПродажи") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаПродажи");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "СуммаПродажи";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаВознаграждения") Тогда
		Реквизит = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаВознаграждения");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
			ЗначениеРеквизита.Наименование = "СуммаВознаграждения";
			ЗначениеРеквизита.Значение.Добавить(Реквизит);
			
			ДополнительныеДанные.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеДанные.ЗначениеРеквизита.Количество() > 0 Тогда
		Товар.ДополнительныеДанные = ДополнительныеДанные;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруПредложенияCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, ТекстОшибки)
	
	// заполняем реквизиты, которые есть в Предложении но нет в товаре
	
	Цены = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение.Цены", ПространствоИменСхемы);
	Цена = ПолучитьОбъектТипаCML("ПакетПредложений.Предложения.Предложение.Цены.Цена", ПространствоИменСхемы);
	
	ЗначениеЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
	Если ЗначениеЗаполнено(ЗначениеЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "ЦенаЗаЕдиницу", ЗначениеЦены, , ТекстОшибки);
	КонецЕсли;
	
	ТипЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТипЦены");
	Если Не ЗначениеЗаполнено(ТипЦены) Тогда
		ЗначениеИдТипаЦены = "---";
	Иначе
		ЗначениеИдТипаЦены = Строка(ТипЦены.УникальныйИдентификатор());
	КонецЕсли;
	ЗаполнитьСвойствоXDTO(Цена, "ИдТипаЦены", ЗначениеИдТипаЦены, , ТекстОшибки);
	
	ЗначениеВалютаЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ВалютаЦены");
	Если ЗначениеЗаполнено(ЗначениеВалютаЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "Валюта", ЗначениеВалютаЦены, , ТекстОшибки);
	КонецЕсли;
	
	ЗначениеКоличествоЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество");
	Если ЗначениеЗаполнено(ЗначениеКоличествоЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "МинКоличество", ЗначениеКоличествоЦены, , ТекстОшибки);
	КонецЕсли;
	
	ЗначениеЕдиницаЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
	Если ЗначениеЗаполнено(ЗначениеЕдиницаЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "Единица", ЗначениеЕдиницаЦены, , ТекстОшибки);
	КонецЕсли;
	
	КоэффициентЕдиницаЦены = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКоэффициент");
	Если ЗначениеЗаполнено(КоэффициентЕдиницаЦены) Тогда
		ЗаполнитьСвойствоXDTO(Цена, "Коэффициент", КоэффициентЕдиницаЦены, , ТекстОшибки);
	КонецЕсли;

	
	Цены.Цена.Добавить(Цена);
	Товар.Цены = Цены;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные = "")
	
	ЗаполнитьКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные);
	
	ЗаполнитьСвойстваКонтрагентаВДокументеCML(Контрагент, ВидКонтрагента, ТекстОшибки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование контейнера


Процедура ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД)
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ДатаФормирования", СтруктураЭД.ДатаЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсияСхемы", СтруктураЭД.ВерсияСхемы);
	ВставитьЗначениеВДерево(ДеревоДанных, "Ид", СтруктураЭД.НомерЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "ВидЭД", СтруктураЭД.ВидЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);
	
	ВставитьЗначениеВДерево(ДеревоДанных, "Исполнитель", СтруктураЭД.Отправитель);
	
КонецПроцедуры

Функция УдалитьКаталогТоваровСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, ДатаФормирования, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Наименование, Номенклатура, БазоваяЕдиница, УпаковкаПоОКЕИ");

	Возврат СтруктураПараметров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Формирование ЭД из документов БД

Функция ДеревоКартинок(ИмяФайлаКартинок)
	
	ДеревоКартинок = Новый ДеревоЗначений();
	ДеревоКартинок.Колонки.Добавить("ИдентификаторТовара");
	ДеревоКартинок.Колонки.Добавить("ИмяФайла");
	ДеревоКартинок.Колонки.Добавить("АдресВременногоХранилища");
	ВремКаталог = ЭлектронноеВзаимодействиеСлужебный.ТекущийКаталогВременныхФайлов();
	ВремКаталог = ВремКаталог + "\" + Строка(Новый УникальныйИдентификатор);
	УдалитьФайлы(ВремКаталог, "*");
	ЧтениеZIPФайла = Новый ЧтениеZipФайла(ИмяФайлаКартинок);
	ЧтениеZIPФайла.ИзвлечьВсе(ВремКаталог);
	Папки = НайтиФайлы(ВремКаталог, "*", Ложь);
	Для Каждого Папка Из Папки Цикл
		СтрокаТовара = ДеревоКартинок.Строки.Добавить();
		СтрокаТовара.ИдентификаторТовара = Папка.Имя;
		Файлы = НайтиФайлы(ВремКаталог + "\" + Папка.Имя + "\", "*");
		Для Каждого Файл Из Файлы Цикл
			СтрокаКартинки = СтрокаТовара.Строки.Добавить();
			СтрокаКартинки.ИмяФайла = Файл.Имя;
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
			СтрокаКартинки.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла,
			                                                                        Новый УникальныйИдентификатор);
		КонецЦикла
	КонецЦикла;
	
	УдалитьФайлы(ВремКаталог);
	Возврат  ДеревоКартинок;
	
КонецФункции

Процедура ПоместитьСтруктуруВЗначениеРеквизита(ИмяРеквизита, СтруктураЗначений, ДокументПродажи)
	
	// в массив будем помещать строковое значение вида "Ключ&Значение#"
	ЗначениеРеквизита = "";
	Для Каждого КлючЗначение Из СтруктураЗначений Цикл
		
		ЗначениеРеквизита = ЗначениеРеквизита + КлючЗначение.Ключ + "&" + КлючЗначение.Значение + "#";
		
	КонецЦикла;
	
	ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизита, ЗначениеРеквизита, ДокументПродажи);
	
КонецПроцедуры

Функция РеквизитыРасчетногоСчета(Знач Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка)
	
	РеквизитыСчета = Новый Структура;
	
	Пока СтрДлина(Элемент) > 0 Цикл
		
		ПозицияРазделителя = Найти(Элемент, "#");
		РеквизитЗначение = Лев(Элемент, ПозицияРазделителя );
		Элемент = СтрЗаменить(Элемент, РеквизитЗначение, "");
		
		Позиция = Найти(РеквизитЗначение, "&");
		
		Реквизит = Лев(РеквизитЗначение, Позиция - 1);
		
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение, Реквизит, "");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"&","");
		РеквизитЗначение = СтрЗаменить(РеквизитЗначение,"#","");
		
		РеквизитыСчета.Вставить(Реквизит, РеквизитЗначение);
		
	КонецЦикла;
	
	Возврат РеквизитыСчета;
	
КонецФункции

Функция ТаблицаИзСтрокиСРазделителем(Знач ЗначенияРеквизита)
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ДанныеСтроки = Новый Структура;
	
	Для Каждого Элемент Из ЗначенияРеквизита Цикл
		
		ПозицияНомерСтроки = Найти(Элемент, "_");
		НомерСтроки = Лев(Элемент, ПозицияНомерСтроки - 1);
		ДанныеСтроки.Вставить("НомСтр", НомерСтроки);

		Элемент = СтрЗаменить(Элемент, НомерСтроки + "_", "");
		
		Пока СтрДлина(Элемент) > 0 Цикл
			
			Позиция = Найти(Элемент, "#");
			
			РеквизитИЗначение = Лев(Элемент, Позиция);
			Элемент = СтрЗаменить(Элемент, РеквизитИЗначение, "");
			
			Разделитель = Найти(РеквизитИЗначение, "&");
			
			НаименованиеРеквизита = Лев(РеквизитИЗначение, Разделитель - 1);
			
			ЗначениеРеквизита = СтрЗаменить(РеквизитИЗначение, НаименованиеРеквизита, "");
			ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "&", "");
			ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "#", "");
			
			ДанныеСтроки.Вставить(НаименованиеРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		СоздатьКолонкиТаблицы(ДанныеСтроки, ТаблицаРезультат);
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
	КонецЦикла;
	
	ТаблицаРезультат.Сортировать("НомСтр");

	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура СоздатьКолонкиТаблицы(СтруктураСКолонками, Таблица)
	
	Для Каждого КлючЗначение Из СтруктураСКолонками Цикл
		Если Не Таблица.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Таблица.Колонки.Добавить(КлючЗначение.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ИзменитьСостояниеОснованийРТУ(УтвержденныеРТУ) Экспорт
	
	Для Каждого УтвержденныйЭД Из УтвержденныеРТУ Цикл
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьСостояниеЗавершен(УтвержденныйЭД, Перечисления.НаправленияЭД.Исходящий);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив документов ИБ по переданному массиву ЭД
Функция ВладельцыЭД(МассивЭД) Экспорт
	
	ДокументыЭДИВладельцы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЭД, "ВладелецФайла");
	
	МассивИБ = Новый Массив;
	Для Каждого ДокументЭДИБ Из ДокументыЭДИВладельцы Цикл
		МассивИБ.Добавить(ДокументЭДИБ.Значение);
	КонецЦикла;
	
	Возврат МассивИБ;
	
КонецФункции

Процедура НайтиЗначениеВСписке(ЗначениеЭлемента, ИмяЭлемента, СписокЭлементов)
	
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл
		Если ВРег(ЭлементСписка.Представление) = ВРег(ИмяЭлемента) Тогда
			ЗначениеЭлемента = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьСтрокуТоваровCML(ТоварXDTO, НовыйЭД, СписокТЧ, ПоляПоискаТовара, ДеревоРазбора, Ошибка)
	
	НаимТовара = "";
	ИдТовара = "";
	
	ЕстьДопРеквизиты = Ложь;
	ЦенаВключаетНДС = Неопределено;
	ЭлементСумма = Неопределено;
	СуммаНДС = 0;
	
	Организация = ПоляПоискаТовара.Организация;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Организация", Организация);

	НомерСтроки = ПоляПоискаТовара.НомерСтроки;
	ПрочитатьДопДанныеСтрокиТЧ(ТоварXDTO, НовыйЭД, "Товары", НомерСтроки, СписокТЧ, ДопПараметры);
	
	// Номенклатура
	Для Каждого ТекСвойство Из ТоварXDTO.Свойства() Цикл
		
		ЗнДанных = ТоварXDTO[ТекСвойство.Имя];
		
		Если ТипЗнч(ЗнДанных) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(ЗнДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		//// Разберем свойства Товара
		Если ВРег(ТекСвойство.Имя) = ВРег("Ид") Тогда
			ИдТовара = ЗнДанных;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Артикул") Тогда
			Артикул = ЗнДанных;
			
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Наименование") Тогда
			НаимТовара = ЗнДанных;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("БазоваяЕдиница") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				РеквизитыЕдИзм = Новый Структура;
				РеквизитыЕдИзм.Вставить("Код",          ЗнДанных.Код);
				
				Если ЗнДанных.Свойства().Получить("Наименование") <> Неопределено Тогда
					НаименованиеБазовойВеличины = ЗнДанных.Наименование;
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.Наименование);
				КонецЕсли;
				
				Если ЗнДанных.Свойства().Получить("НаименованиеКраткое") <> Неопределено Тогда
					НаименованиеБазовойВеличины = ЗнДанных.НаименованиеКраткое;
					РеквизитыЕдИзм.Вставить("Наименование", ЗнДанных.НаименованиеКраткое);
				КонецЕсли;
				
				Если ЗнДанных.Свойства().Получить("НаименованиеПолное") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("НаименованиеПолное", ЗнДанных.НаименованиеПолное);
				КонецЕсли;
				
				Если ЗнДанных.Свойства().Получить("МеждународноеСокращение") <> Неопределено Тогда
					РеквизитыЕдИзм.Вставить("МеждународноеСокращение", ЗнДанных.МеждународноеСокращение);
				КонецЕсли;
				
				ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", ЗнДанных.Код,
					РеквизитыЕдИзм);
				НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
				НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДанных.Код, НаименованиеБазовойВеличины,
					ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
					
				ПоляПоискаТовара.Вставить("ЕдиницаИзмерения", НайденнаяСтрока.ИндексСтроки);
				
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Единица") Тогда
			
			РеквизитыЕдИзм = Новый Структура;
			РеквизитыЕдИзм.Вставить("Код",          Строка(ЗнДанных));
			
			ЕдИзм = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения", Строка(ЗнДанных),
			РеквизитыЕдИзм);
			ЕдИзмНаименование = Неопределено;
			Если ЗначениеЗаполнено(ЕдИзм) Тогда
				ЕдИзмНаименование = ЕдИзм.Наименование;
				РеквизитыЕдИзм.Вставить("Наименование", ЕдИзмНаименование);
			КонецЕсли;
			
			НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЕдиницыИзмерения");
			НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, Строка(ЗнДанных), ЕдИзмНаименование,
				ЕдИзм, РеквизитыЕдИзм, ДеревоРазбора, Ошибка);
			
			Если ЗначениеЗаполнено(ЕдИзм) Тогда
				СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "ЕдиницаИзмерения");
			КонецЕсли;
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Налоги") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
					Если ВРег(ТекСв.Имя) = ВРег("Налог") Тогда
						Налоги = ЗнДанных.ПолучитьСписок(ТекСв);
						Для Каждого Налог Из Налоги Цикл
							Если ВРег(Налог.Наименование) = "НДС" Тогда
								СписокТЧ.Добавить(Налог.Ставка,"СтавкаНДС");
								СуммаНДС = Число(Налог.Сумма);
								СписокТЧ.Добавить(СуммаНДС, "СуммаНДС");
								Если ТипЗнч(Налог.УчтеноВСумме) = Тип("Булево") Тогда
									ЦенаВключаетНДС = Налог.УчтеноВСумме;
									СписокТЧ.Добавить(ЦенаВключаетНДС, "ЦенаВключаетНДС");
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Скидки") Тогда
			Если ТипЗнч(ЗнДанных) = Тип("ОбъектXDTO") Тогда
				Для Каждого ТекСв Из ЗнДанных.Свойства() Цикл
					Если ВРег(ТекСв.Имя) = ВРег("Скидка") Тогда
						Скидки = ЗнДанных.ПолучитьСписок(ТекСв);
						Для Каждого Скидка Из Скидки Цикл
							
							НаименованиеСкидки = Скидка.Наименование;
							
							СписокТЧ.Добавить(НаименованиеСкидки,"НаименованиеСкидки");
							СписокТЧ.Добавить(Скидка.Сумма,"СуммаСкидки");
							
							ПроцентСкидки = Скидка.Процент;
							СписокТЧ.Добавить(ПроцентСкидки,"ПроцентСкидки");
							
							СкидкаУчтеноВСумме = Скидка.УчтеноВСумме;
							СписокТЧ.Добавить(СкидкаУчтеноВСумме,"СкидкаУчтеноВСумме");
							
							КомментарийКСкидке = Скидка.Комментарий;
							СписокТЧ.Добавить(КомментарийКСкидке,"КомментарийКСкидке");
							
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Количество") Тогда
			// Запомним кол-во упаковок, в которых отгружали
			СписокТЧ.Добавить(Число(ЗнДанных), "КоличествоУпаковок");
			// Пересчитаем с учетом коэффициента,
			// если есть свойство ЕдиницаИзмерения, получим значение.
			Коэф = "";
			Если ТоварXDTO.Единица <> Неопределено Тогда
				Коэф = ТоварXDTO.Коэффициент;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Коэф) Тогда
				Коэф = 1;
			КонецЕсли;
			СписокТЧ.Добавить(Коэф, "Коэффициент");
			СписокТЧ.Добавить(Число(ЗнДанных) * Коэф, "Количество");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеРеквизиты") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = Новый Структура;
			Для Каждого ЭлементДанных Из ЗнДанных Цикл
				МассивЗначений = Новый Массив;
				Для каждого ЭлементЗначения Из ЭлементДанных.Значение Цикл
					МассивЗначений.Добавить(ЭлементЗначения)
				КонецЦикла;
				СтруктураДопРеквизитов.Вставить(ЭлементДанных.Наименование, МассивЗначений);
			КонецЦикла;
			
			ПоляПоискаТовара.Вставить("ДопРеквизиты", СтруктураДопРеквизитов);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЦенаЗаЕдиницу") Тогда
			СписокТЧ.Добавить(ЗнДанных, "Цена");
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("Сумма") Тогда
			ЭлементСумма = СписокТЧ.Добавить(Число(ЗнДанных), "Сумма");
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ЗначенияРеквизитов") Тогда
			
			ЗнДанных = ТоварXDTO[ТекСвойство.Имя];
			ДопРеквизиты = Новый Структура;
			Если ЗначениеЗаполнено(Организация) Тогда
				ДопРеквизиты.Вставить("Организация", Организация);
			КонецЕсли;
			
			ПрочитатьСписокЗначенийРеквизитовCML(ЗнДанных.ЗначениеРеквизита, СписокТЧ, Ошибка, ДопРеквизиты);
			
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеДанные") Тогда
			ЕстьДопРеквизиты = Истина;
			СтруктураДопРеквизитов = Новый Структура;
			Для Каждого ЭлементДанных Из ЗнДанных.ЗначениеРеквизита Цикл
				Если ЭлементДанных.Наименование = "ЦенаПродажи" Тогда
					СписокТЧ.Добавить(Число(ЭлементДанных.Значение[0]), "ЦенаПродажи");
				КонецЕсли;
				
				Если ЭлементДанных.Наименование = "СуммаПродажи" Тогда
					СписокТЧ.Добавить(Число(ЭлементДанных.Значение[0]), "СуммаПродажи");
				КонецЕсли;
				
				Если ЭлементДанных.Наименование = "СуммаВознаграждения" Тогда
					СписокТЧ.Добавить(Число(ЭлементДанных.Значение[0]), "СуммаВознаграждения");
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВРег(ТекСвойство.Имя) = ВРег("ДополнительныеЗначенияРеквизитов") Тогда
			Для Каждого ЭлементДанных Из ЗнДанных.ЗначениеРеквизита Цикл
				Если ЭлементДанных.Наименование = "ИдПокупателя" И ЗначениеЗаполнено(ЭлементДанных.Значение[0]) Тогда
					СтрокиКонтрагентов = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта", Истина);
					СтрокаПокупателя = СтрокиКонтрагентов.Строки.Найти(ЭлементДанных.Значение[0], "ИД", Истина);
					Если СтрокаПокупателя <> Неопределено Тогда
						СписокТЧ.Добавить(СтрокаПокупателя.ИндексСтроки, "Покупатель");
					Иначе
						СписокТЧ.Добавить(Неопределено, "Покупатель");
					КонецЕсли;
					СписокТЧ.Добавить(ЭлементДанных.Значение[0], "ИдПокупателя");
				Иначе
					СписокТЧ.Добавить(ЭлементДанных.Значение[0], ЭлементДанных.Наименование);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			СписокТЧ.Добавить(ЗнДанных, ТекСвойство.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ЭлементСумма) = Тип("ЭлементСпискаЗначений") Тогда
		Сумма = ЭлементСумма.Значение;
		Если ЦенаВключаетНДС = Истина Тогда
			СписокТЧ.Добавить(Сумма, "СуммаСНДС");
			ЭлементСумма.Значение = Сумма - СуммаНДС;
		ИначеЕсли ЦенаВключаетНДС = Ложь Тогда
			СписокТЧ.Добавить(Сумма + СуммаНДС, "СуммаСНДС");
		Иначе
			СписокТЧ.Добавить(Сумма, "СуммаСНДС");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдТовара) Тогда
		НайтиЗначениеВСписке(ИдТовара, "Ид", СписокТЧ);
	КонецЕсли;
	
	ПоляПоискаТовара.Наименование= НаимТовара;
	ПоляПоискаТовара.Ид= ИдТовара;
	ПоляПоискаТовара.Артикул = Артикул;
	
КонецПроцедуры

Процедура НайтиНоменклатуруТЧ(ПоляПоискаТовара, СписокТЧ)
	
	ИдТовара = ПоляПоискаТовара.Ид;
	Если ЭтоСоставнойИД(ИдТовара) Тогда
		
		СтруктураИд = РазобратьИДТовара(ИдТовара);
		ИДДляПоиска = СтруктураИд.ИдТовара;
		
		Если ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики) Тогда
			ХарактеристикаНоменклатуры = ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры", СтруктураИд.ИДХарактеристики);
			СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураИд.ИДУпаковки) Тогда
			УпаковкаНоменклатуры = ЭлементСправочникаПоИД("УпаковкиНоменклатуры", СтруктураИд.ИДУпаковки);
			СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");
		КонецЕсли;
		
	Иначе
		ИДДляПоиска = ИдТовара;
	КонецЕсли;
	
	Номенклатура = ЭлементСправочникаПоИД("Номенклатура", ИДДляПоиска);
	ПоляПоискаТовара.Вставить("Номенклатура", Номенклатура);
	
КонецПроцедуры

Процедура НайтиНоменклатуруПоставщикаТЧ(ПоляПоискаТовара, СписокТЧ, НовыйЭД, ДеревоРазбора, ЭД, Ошибка)
	
	// Номенклатура поставщиков.
	РеквизитыНоменклатурыПоставщика = Новый Структура;
	ИмяРеквизитаВладельца = ПолучитьИмяРеквизитаВладельцаНоменклатурыПоставщиков();
	ВладелецНоменклатуры = ПолучитьРеквизитШапкиЭД(НовыйЭД, ИмяРеквизитаВладельца, ДеревоРазбора);
	
	Ид = ПоляПоискаТовара.ИД;
	РеквизитыНоменклатурыПоставщика.Вставить("Владелец", ВладелецНоменклатуры);
	РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", Ид);
	
	Артикул = ПоляПоискаТовара.Артикул;
	Если ЗначениеЗаполнено(Артикул) Тогда
		РеквизитыНоменклатурыПоставщика.Вставить("Артикул", ПоляПоискаТовара.Артикул);
	КонецЕсли;
	
	Наименование = ПоляПоискаТовара.Наименование;
	Если ЗначениеЗаполнено(Наименование) Тогда
		РеквизитыНоменклатурыПоставщика.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	ЕдиницаИзмерения = ПоляПоискаТовара.ЕдиницаИзмерения;
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		РеквизитыНоменклатурыПоставщика.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	КонецЕсли;
	
	ДопРеквизиты = Неопределено;
	Если ПоляПоискаТовара.Свойство("ДопРеквизиты", ДопРеквизиты) Тогда
		РеквизитыНоменклатурыПоставщика.Вставить("ДополнительныеРеквизиты", ДопРеквизиты);
	КонецЕсли;
	
	НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
		РеквизитыНоменклатурыПоставщика, ЭД.Ид);
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "НоменклатураПоставщиков");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, Ид, Наименование, НоменклатураПоставщика,
		РеквизитыНоменклатурыПоставщика, ДеревоРазбора, Ошибка);
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "НоменклатураПоставщика");
	
	Если ЗначениеЗаполнено(НоменклатураПоставщика) Тогда
		ПоляПоискаТовара.Вставить("НоменклатураПоставщика", НоменклатураПоставщика);
	КонецЕсли;
	
	СтруктураРеквизитовТовара = СформироватьСтруктуруТовара();
	ОбменСКонтрагентамиПереопределяемый.ПолучитьРеквизитыТовара(ПоляПоискаТовара, СтруктураРеквизитовТовара, ЭД.Ид);
	
	Номенклатура = СтруктураРеквизитовТовара.Номенклатура;
	
	ПоляПоискаТовара.Вставить("Номенклатура", Номенклатура);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Характеристика) Тогда
		СписокТЧ.Добавить(СтруктураРеквизитовТовара.Характеристика, "Характеристика");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовТовара.Упаковка) Тогда
		СписокТЧ.Добавить(СтруктураРеквизитовТовара.Упаковка, "Упаковка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуТабличнойЧасти(ДеревоРазбора, НовыйЭД, РеквизитыНоменклатуры, СписокТЧ, Ошибка)

	НаимТовара = РеквизитыНоменклатуры.Наименование;
	ИдТовара = РеквизитыНоменклатуры.Ид;
	Номенклатура = РеквизитыНоменклатуры.Номенклатура;
	
	НайденныйТипВДереве = ЭлектронноеВзаимодействиеСлужебный.НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");
	НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);
		
	СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки, "Номенклатура");

	ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);

КонецПроцедуры

Процедура ЗаполнитьБанковскийСчет(Продавец, ДеревоДанных)
	
	НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.НомерСчета");
	
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		
		ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
		
		РасчетныйСчет = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		
		// заполняем расчетный счет
		РасчетныйСчет.НомерСчета = НомерСчета;
		
		// заполняем банк
		Банк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
			
		БикБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.БИК", Ложь);
		БанкЗаполнен = Ложь;
		Если ЗначениеЗаполнено(БикБанка) Тогда
			БанкЗаполнен = Истина;
			Банк.БИК = БикБанка;
		КонецЕсли;
		
		СчетКорреспондентский = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.СчетКорреспондентский", Ложь);
		Если ЗначениеЗаполнено(СчетКорреспондентский) Тогда	
			Банк.СчетКорреспондентский = СчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.Наименование", Ложь);
		Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
			Банк.Наименование = НаименованиеБанка;
		КонецЕсли;
		
		// заполняем банк корреспондент
		
		БикКорБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.БИК");
		
		БанкКорр = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		БанкКоррЗаполнен = Ложь;
		Если ЗначениеЗаполнено(БикКорБанка) Тогда
			БанкКоррЗаполнен = Истина;
			БанкКорр.БИК = БикКорБанка;
		КонецЕсли;
		
		КорСчетКорреспондентский = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский");
		Если ЗначениеЗаполнено(КорСчетКорреспондентский) Тогда
			БанкКорр.СчетКорреспондентский = КорСчетКорреспондентский;
		КонецЕсли;
		
		НаименованиеКорБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.Наименование");
		Если ЗначениеЗаполнено(НаименованиеКорБанка) Тогда
			БанкКорр.Наименование =  НаименованиеКорБанка;
		КонецЕсли;
		
		Если БанкЗаполнен Тогда
			РасчетныйСчет.Банк = Банк;
		КонецЕсли;
		
		Если БанкКоррЗаполнен Тогда
			РасчетныйСчет.БанкКорреспондент = БанкКорр;
		КонецЕсли;
		
		Продавец.РасчетныйСчет = РасчетныйСчет;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные = "")
	
	ЗаполнитьСвойстваКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные);
	
	БанковскиеРеквизиты = Неопределено;
	ЗаполнитьРеквизитыСчета(БанковскиеРеквизиты, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки);
	
	Если ТипЗнч(БанковскиеРеквизиты) = Тип("ОбъектXDTO") Тогда
		
		ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ПространствоИменСхемы);
		
		РасчетныеСчета.РасчетныйСчет.Добавить(БанковскиеРеквизиты);

		ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваКонтрагентаВДокументеCML(Контрагент, ВидКонтрагента, ТекстОшибки)
	
	Если Контрагент.Свойства().Получить("Роль") <> Неопределено
		И Найти(ВидКонтрагента, ".") = 0 Тогда
		ЗаполнитьСвойствоXDTO(Контрагент, "Роль", ВидКонтрагента, Истина, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСчета(БанковскиеРеквизиты, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки)
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет")) Тогда
		
		ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
		
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		СвБанк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		
		НомерСчета = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НомерСчета");
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", НомерСчета, Истина,ТекстОшибки);
		КонецЕсли;
		
		НаимБанк = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НаимБанк");
		БИК = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.БИК");
		Если ЗначениеЗаполнено(НаимБанк) Тогда
			ЗаполнитьСвойствоXDTO(СвБанк, "Наименование", НаимБанк, ,ТекстОшибки);
		КонецЕсли;
		Если ЗначениеЗаполнено(БИК) Тогда
			ЗаполнитьСвойствоXDTO(СвБанк, "БИК", БИК, ,ТекстОшибки);
		КонецЕсли;
			
		ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "Банк", СвБанк, Истина, ТекстОшибки);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваКонтрагентаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ТекстОшибки, ДопДанные = "");
	
	// Реквизиты используются для передачи данных конечного Покупателя из отчета Комиссионера о продажах:
	ИНН = "";
	КПП = "";
	Наименование = "";
	ДопДанные = Новый Структура;
	//
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника")) Тогда
		Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника") = "ФЛ" Тогда
			Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ПолноеНаименование");
			ЗаполнитьСвойствоXDTO(Контрагент, "ПолноеНаименование", Наименование, Истина, ТекстОшибки);
			ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ИНН");
			ЗаполнитьСвойствоXDTO(Контрагент, "ИНН", ИНН, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Фамилия",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Фамилия"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Имя",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Имя"), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(Контрагент, "Отчество", 
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Отчество"), , ТекстОшибки);
		Иначе
			Наименование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ЗаполнитьСвойствоXDTO(Контрагент, "ОфициальноеНаименование", Наименование, Истина, ТекстОшибки);
			ИНН = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.ИНН");
			ЗаполнитьСвойствоXDTO(Контрагент, "ИНН", ИНН, Истина, ТекстОшибки);
			КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.КПП");
			ЗаполнитьСвойствоXDTO(Контрагент, "КПП", КПП, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ИдКонтрагента = ИНН + ?(ЗначениеЗаполнено(КПП), "_" + КПП, "");
		ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, , ТекстОшибки);
		ДопДанные.Вставить("Наименование", Наименование);
		ДопДанные.Вставить("ИНН", ИНН);
		ДопДанные.Вставить("КПП", КПП);
		ДопДанные.Вставить("ИД", ИдКонтрагента);
	КонецЕсли;
	
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидКонтрагента + ".Адрес", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(Адрес.Значение) Тогда
			АдресТип = ПолучитьОбъектТипаCML("Адрес", ПространствоИменСхемы);
			// Если адрес структурированный заполняем Адресное поле
			// если нет - только представление.
			Если Адрес.Значение = "Структурированный" Тогда
				Представление = "";
				Для Каждого СтрокаСАдресом Из Адрес.Строки[0].Строки Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаСАдресом.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					АдресноеПоле = ПолучитьОбъектТипаCML("Адрес.АдресноеПоле", ПространствоИменСхемы);
					НормТип = СтрокаСАдресом[СтрокаСАдресом.Уровень() + 1];
					Если НормТип = "Индекс" Тогда
						НормТип = "Почтовый индекс";
					ИначеЕсли НормТип = "КодРегион" Тогда
						НормТип = "Регион";
					ИначеЕсли НормТип = "НаселПункт" Тогда
						НормТип = "Населенный пункт";
					ИначеЕсли НормТип = "Кварт" Тогда
						НормТип = "Квартира";
					КонецЕсли;
					АдресноеПоле.Тип = НормТип;
					АдресноеПоле.Значение = СтрокаСАдресом.Значение;
					АдресТип.АдресноеПоле.Добавить(АдресноеПоле);
					
					Представление = Представление + ?(Представление = "","",", ") + СтрокаСАдресом.Значение;
					
				КонецЦикла;
				
				ЗаполнитьСвойствоXDTO(АдресТип, "Представление", Представление, Истина, ТекстОшибки);
			Иначе
				Если Адрес.Значение = "Иностранный" Тогда
					СтрокаАдреса = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, Адрес.ПолныйПуть + "." + Адрес.Значение + ".АдрТекст");
				Иначе
					СтрокаАдреса = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, Адрес.ПолныйПуть + "." + Адрес.Значение);
				КонецЕсли;
				ЗаполнитьСвойствоXDTO(АдресТип, "Представление", СтрокаАдреса, Истина, ТекстОшибки);
			КонецЕсли;
			
			ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакты = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ПространствоИменСхемы);
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Контакт", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Контакт, "Тип", "Телефон рабочий", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон"), Истина, ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Контакт", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Контакт, "Тип", "Факс", Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс"), Истина, ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		ЗаполнитьСвойствоXDTO(Контрагент, "Контакты", Контакты, , ТекстОшибки);
	КонецЕсли;
	
	ФамилияРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Фамилия");
	Если ЗначениеЗаполнено(ФамилияРуководителя) Тогда
		
		Руководитель = ПолучитьОбъектТипаCML("Руководитель", ПространствоИменСхемы);
		
		ЗаполнитьСвойствоXDTO(Руководитель, "Фамилия", ФамилияРуководителя, Истина, ТекстОшибки);
		
		ИмяРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Имя");
		ЗаполнитьСвойствоXDTO(Руководитель, "Имя", ИмяРуководителя, Истина, ТекстОшибки);
		
		ОтчествоРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Отчество");
		ЗаполнитьСвойствоXDTO(Руководитель, "Отчество", ОтчествоРуководителя, Истина, ТекстОшибки);
		
		ДолжностьРуководителя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Руководитель.Должность");
		ЗаполнитьСвойствоXDTO(Руководитель, "Должность", ДолжностьРуководителя, Истина, ТекстОшибки);
		
		Контрагент.Руководитель = Руководитель;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьРеквизитШапкиВДопДанные(ДеревоДокумента, ПутьКДанным)
	
	ЗначениеРеквизита = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДокумента, ПутьКДанным);
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ПутьКДанным, ".", "");
	
	Если ВРег(ИмяРеквизита) = ВРег("ВидОперации") Тогда
		ЗначениеРеквизита = XMLСтрока(ЗначениеРеквизита);
	КонецЕсли;
	
	Если ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
		ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
	КонецЕсли;
	
	ДопДанные = Новый Структура(ИмяРеквизита, ЗначениеРеквизита);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Истина);
	
КонецПроцедуры

Процедура ПоместитьГруппуДереваВДопДанные(ДеревоДокумента, ПутьКДанным)
	
	ВеткаГруппы = ЗначениеГруппыВДереве(ДеревоДокумента, ПутьКДанным);
	Если ТипЗнч(ВеткаГруппы) = Тип("КоллекцияСтрокДереваЗначений") Тогда
		
		ДанныеГруппы = Новый Структура;
		Для Каждого СтрокаДерева Из ВеткаГруппы Цикл
			
			ЗначениеРеквизита = СтрокаДерева.Значение;
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, ПутьКДанным+".", "");
			
			ДанныеГруппы.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		Если ДанныеГруппы.Количество() > 0 Тогда
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДанныеГруппы, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьТаблицуДереваВДопДанные(ДеревоДокумента, ИмяТаблицы)
	
	ЗначениеТаблицы = ЭлектронноеВзаимодействие.ДанныеДерева(ДеревоДокумента, ИмяТаблицы);
	
	Если Не ЗначениеЗаполнено(ЗначениеТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ДопДанные = Новый Структура(ИмяТаблицы, ЗначениеТаблицы);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, ДопДанные, Истина);
	
КонецПроцедуры

Процедура ПоместитьДокументыОснованияВДопДанные(ДеревоДанных, ИдентификаторыДокументовИЭДОснований)
	
	ОснованиеСсылка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ОснованиеСсылка) Тогда
		
		ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(ОснованиеСсылка, ИдентификаторыДокументовИЭДОснований);
		Если ТаблицаПараметровДокументовОснований.Количество() > 0 Тогда
			
			ПараметрыОснования = Новый Структура;
			ПараметрыОснования.Вставить("_ТЗ_ДокументыОснования", ТаблицаПараметровДокументовОснований);
			
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, ПараметрыОснования, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Помещаем в доп данные подписываемые реквизиты документа основания
	СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");

	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		СтрокаДопДанных = Товар.Строки.Найти("Товары.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
		ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "Товары.НомерСтроки.ДокументОснование");
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ТаблицаПараметровДокументовОснований = ПолучитьПараметрыДокументовОснований(ДокументОснование, ИдентификаторыДокументовИЭДОснований);
			Для Каждого Строка Из ТаблицаПараметровДокументовОснований Цикл
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ВидДокументаОснования", Строка.ВидЭД);
				
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных,
					"НомерДокументаОснования", Строка.НомерДокументаОтправителя);
					
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ДатаДокументаОснования",
					Формат(Строка.ДатаДокументаОтправителя, "ДЛФ=Д"));
					
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ИДЭДДокументаОснования", Строка.Наименование);
				
				ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, "ИдентификаторДокументаОснования", Строка.ИдентификаторДокументаОснования);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

Процедура ПоместитьРеквизитСтрокиТаблицыВДопДанные(ДеревоДокумента, ИмяТаблицы, ИмяРеквизита)
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		
		ЗначениеРеквизита = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Товар, "Товары.НомерСтроки."+ИмяРеквизита);
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоместитьВДопДанныеСтрокиТабличнойЧасти(Товар, ИмяРеквизита, ЗначениеРеквизита);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьВДопДанныеСтрокиТабличнойЧасти(СтрокаТаблицыТоваров, ИмяРеквизита, ЗначениеРеквизита, ИмяТаблицы = "Товары")

	СтрокаДопДанных = СтрокаТаблицыТоваров.Строки.Найти(ИмяТаблицы+".НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
	ЭлектронноеВзаимодействиеСлужебный.ДобавитьЗначениеВДерево(СтрокаДопДанных, ИмяРеквизита, ЗначениеРеквизита);
	
КонецПроцедуры

Процедура ПоместитьДопДанныеШапки(ДеревоДанных, ДокументXDTO, ТекстОшибки);
	
	ИмяЭлементаВладельца = "Шапка";
	ПространствоИмен = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, "ЗначениеРеквизита", "Значение", ВидФасетаXDTO.МаксДлина);
	ИмяМаксДлина = "ДопустимаяДлинаДопДанныхШапки";

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ДокументXDTO.Ид);
	СтруктураПараметров.Вставить(ИмяМаксДлина, МаксДлина - 20); // 20 - служебные символы.

	
	СтруктураДопДанных = Новый Структура;
	ДопДанныеНеподписанные = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть",Истина);
	Если Не ДопДанныеНеподписанные = Неопределено Тогда
		
		Для Каждого СтрокаДерева Из ДопДанныеНеподписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "ДопДанные.НеПодписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
	КонецЕсли;
		
	Если СтруктураДопДанных.Количество() > 0 Тогда
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Ложь);
	КонецЕсли;
	
	СтруктураДопДанных = Новый Структура;
	ДопДанныеПодписанные = ДеревоДанных.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть",Истина);
	Если Не ДопДанныеПодписанные = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДопДанныеПодписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "ДопДанные.Подписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДопДанных.Количество() > 0 Тогда
		
		ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Истина);
		
	КонецЕсли;
	
	СтрокаИнфПол = "";
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		// Сформируем xml-строку (ИнфПол):
		СформировалиСтроку = СформироватьДопФайлCML(СтруктураПараметров,
			ТекстОшибки, Истина, ИмяЭлементаВладельца);
		
		Если СформировалиСтроку Тогда
			
			СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			ИмяРеквизитаДопДанные = "ДопДанные" + ИмяЭлементаВладельца;
			ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизитаДопДанные, СтрокаИнфПол, ДокументXDTO)
		
		КонецЕсли;
		
		// Сформируем доп. файл (для строк таб.части не формируется):
		ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров,
			ТекстОшибки, Ложь, ИмяЭлементаВладельца);
		
		Если ДопФайлСформирован Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
			ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла",     СтруктураПараметров.ИдентификаторДопФайла);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьНеПодписанныеДанныеШапки(ДеревоДанных, ДокументXDTO, ТекстОшибки)
	
	ИмяЭлементаВладельца = "Шапка";
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ДокументXDTO.Ид);
	
	ДопДанныеНеподписанные = ДеревоДанных.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть",Истина);
	
	Если Не ДопДанныеНеподписанные = Неопределено Тогда
		
		СтруктураДопДанных = Новый Структура;
		Для Каждого СтрокаДерева Из ДопДанныеНеподписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "ДопДанные.НеПодписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		
		Если СтруктураДопДанных.Количество() > 0 Тогда
			ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
			СтруктураДопДанных,
			ИмяЭлементаВладельца,
			Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		ДопФайлСформирован = СформироватьДопФайлCML(СтруктураПараметров,
			ТекстОшибки, Ложь, ИмяЭлементаВладельца);
		
		Если ДопФайлСформирован Тогда
			
			ВставитьЗначениеВДерево(ДеревоДанных, "ПолноеИмяДопФайла",     СтруктураПараметров.ПолноеИмяДопФайла);
			ВставитьЗначениеВДерево(ДеревоДанных, "ИдентификаторДопФайла",     СтруктураПараметров.ИдентификаторДопФайла);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДопДанныеСтрокиТаблицы(ДеревоДанных, ИдФайла, ТекстОшибки, НомерСтроки, ДокументXDTO)
	
	ИмяЭлементаВладельца = "Строки";
	ПространствоИмен = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	МаксДлина = ПолучитьСвойствоПоляXDTOСхемы(ПространствоИмен, "ЗначениеРеквизита", "Значение", ВидФасетаXDTO.МаксДлина);
	ИмяМаксДлина = "ДопустимаяДлинаДопДанныхСтроки";

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());
	СтруктураПараметров.Вставить("ИдФайл", ИдФайла);
	СтруктураПараметров.Вставить(ИмяМаксДлина, МаксДлина - 20); // 20 - служебные символы.
	
	ДопДанныеПодписанные = ДеревоДанных.Строки.Найти("Товары.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть",Истина);
	Если Не ДопДанныеПодписанные = Неопределено Тогда
		СтруктураДопДанных = Новый Структура;
		Для Каждого СтрокаДерева Из ДопДанныеПодписанные.Строки Цикл
			
			ИмяРеквизита = СтрЗаменить(СтрокаДерева.ПолныйПуть, "Товары.НомерСтроки.ДопДанныеПодписанные.", "");
			ЗначениеРеквизита = СтрокаДерева.Значение;
			СтруктураДопДанных.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		Если СтруктураДопДанных.Количество() > 0 Тогда
			
			ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров,
				СтруктураДопДанных,
				ИмяЭлементаВладельца,
				Истина,
				НомерСтроки);
			
		КонецЕсли;
	КонецЕсли;
	
	СтрокаИнфПол = "";
	ДопДанные = СтруктураПараметров.ДеревоДопДанных;
	
	Если ТипЗнч(ДопДанные) = Тип("ДеревоЗначений")
		И ДопДанные.Строки.Количество() > 0 Тогда
		
		// Сформируем xml-строку (ИнфПол):
		СформировалиСтроку = СформироватьДопФайлCML(СтруктураПараметров,
			ТекстОшибки, Истина, ИмяЭлементаВладельца, Строка(НомерСтроки));
		
		Если СформировалиСтроку Тогда
			
			СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");
			ИмяРеквизитаДопДанные = "ДопДанные" + ИмяЭлементаВладельца;
			ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизитаДопДанные, СтрокаИнфПол, ДокументXDTO)
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПолямиДляДопДанных(СтруктураПараметров, ДеревоДанных)
	
	СтруктураПараметров.Вставить("УникальныйИдентификатор", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УникальныйИдентификатор"));
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, "ПолноеИмяДопФайла") Тогда
		СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяДопФайла"));
		СтруктураПараметров.Вставить("ИдентификаторДопФайла", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдентификаторДопФайла"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьСтрокиДереваРекурсивно(СтрокаПолучатель, СтрокаИсточник)
	
	Для Каждого Реквизит Из СтрокаИсточник.Строки Цикл
		НовСтрока = СтрокаПолучатель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Реквизит);
		Если Реквизит.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДереваРекурсивно(НовСтрока, Реквизит);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьДопДанныеШапкиДокумента(ДокументXDTO, ДеревоДокумента, Ошибка, ДопРеквизиты = Неопределено)
	
	ДеревоВШапку = Ложь;
	СтрокаДопДерева = ДеревоДокумента.Строки.Найти("ДеревоДопДанных", "Реквизит");
	Если Не СтрокаДопДерева = Неопределено Тогда
		ДопДерево = СтрокаДопДерева.ЗначениеРеквизита;
	Иначе
		ДопДерево = ДеревоДопДанных();
		ДеревоВШапку = Истина;
	КонецЕсли;
	
	ДопДанные = ЗначениеДопРеквизитаДокумента("ДопДанныеШапка", ДокументXDTO);
	Если ЗначениеЗаполнено(ДопДанные) Тогда
		
		ПрочитатьИнфПол(ДопДанные, ДопДерево, "Шапка");
	КонецЕсли;
	
	ДобавитьРеквизитыДопДанныеВШапку(ДопДерево, ДеревоДокумента, Ошибка, ДопРеквизиты);
	
	Если ДеревоВШапку Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(ДеревоДокумента, "ДеревоДопДанных", ДопДерево);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыДопДанныеВШапку(ДопДерево, ДеревоДокумента, Ошибка, ДопРеквизиты)
	
	СтрокаШапки = ДопДерево.Строки.Найти("Шапка", "ЗначениеРеквизита");
	Если Не ЗначениеЗаполнено(СтрокаШапки) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура;
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	Для Каждого ВеткаДерева Из СтрокаШапки.Строки Цикл
		
		ИмяРеквизита = ВеткаДерева.ИмяРеквизита;
		ЗначениеРеквизита = ВеткаДерева.ЗначениеРеквизита;
		
		Если Найти(ЗначениеРеквизита, "_ТЗ_") > 0 Тогда
			
			ИмяРеквизита = СтрЗаменить(ЗначениеРеквизита, "_ТЗ_", "");
			
			РеквизитЗначение = ТаблицаВеткиДоДанных(ВеткаДерева);
			
			Если ВРег(ИмяРеквизита) = ВРег("ДокументыОснования")
				Или ВРег(ИмяРеквизита) = ВРег("ДокументОснование") Тогда
				// В актуальных ЭД передаются идентификаторы документов ИБ, для поиска основания:
				ЕстьИДДокументаОснования = РеквизитЗначение.Колонки.Найти("ИдентификаторДокументаОснования") <> Неопределено;
			
				МассивДО = Новый Массив;
				
				Для Каждого ТекСтрока Из РеквизитЗначение Цикл
					Если ЕстьИДДокументаОснования Тогда
						ДокументОснование = ДокументОснованиеПоИдентификатору(ТекСтрока.ИдентификаторДокументаОснования, ДопРеквизиты);
					Иначе
						ДокументОснование = ПолучитьДокументОснование(ТекСтрока.Наименование, ДопРеквизиты);
					КонецЕсли;
					МассивДО.Добавить(ДокументОснование);
				КонецЦикла;
				
				Если МассивДО.Количество() = 1 Тогда
					РеквизитЗначение = МассивДО[0];
				Иначе
					РеквизитЗначение = МассивДО;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДокументыСделки") Тогда
			
			РеквизитЗначение = ТаблицаВеткиДоДанных(ВеткаДерева);
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ЦенаВключаетНДС") Тогда
			
			ЦенаВключаетНДС = ЗначениеРеквизита;
			
			Если ВРег(ЦенаВключаетНДС) = ВРег("Да") Тогда
				РеквизитЗначение = Истина;
			ИначеЕсли ВРег(ЦенаВключаетНДС) = ВРег("Нет") Тогда
				РеквизитЗначение = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("ДатаИсправления") Тогда
			
			ДатаИсправленияЗначение = ЗначениеРеквизита;
			
			Попытка
				РеквизитЗначение = ДатаИзСтроки(ДатаИсправленияЗначение);
			Исключение
				РеквизитЗначение = ДатаДД_ММ_ГГГГ(ДатаИсправленияЗначение);
			КонецПопытки;
			
		ИначеЕсли ВРег(ИмяРеквизита) = ВРег("СуммаДокумента")
			Или ВРег(ИмяРеквизита) = ВРег("СуммаВознаграждения") Тогда
			
			РеквизитЗначение = Число(ЗначениеРеквизита);
			
		Иначе
			РеквизитЗначение = ЗначениеРеквизита;
			
		КонецЕсли;
		
		РеквизитыШапки.Вставить(ИмяРеквизита, РеквизитЗначение);

	КонецЦикла;
	
	Для Каждого КлючЗначение Из РеквизитыШапки Цикл
		
		ДобавитьРеквизитВПриемник(КлючЗначение.Ключ, КлючЗначение.Значение, ДеревоДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаВеткиДоДанных(СтрокаДерева)
	
	Результат = Новый ТаблицаЗначений;
	СформироватьТаблицуЗначенийПоДопДанным(СтрокаДерева, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьДопДанныеСтрокиТЧ(СтрокаXDTO, ДеревоДокумента, ИмяТаблицы, НомерСтроки, СвойстваТЧ, ДопПараметры = Неопределено)
	
	ДопДанные = ЗначениеДопРеквизитаДокумента("ДопДанныеСтроки", СтрокаXDTO);
	СтрокаДопДерево = ДеревоДокумента.Строки.Найти("ДеревоДопДанных", "Реквизит");
	
	НовоеДерево = Ложь;
	Если СтрокаДопДерево = Неопределено Тогда
		ДопДерево = ДеревоДопДанных();
		НовоеДерево = Истина;
		
	Иначе
		ДопДерево = СтрокаДопДерево.ЗначениеРеквизита;
	КонецЕсли;
		
	ПрочитатьИнфПол(ДопДанные, ДопДерево, ИмяТаблицы, Строка(НомерСтроки));
	
	Если НовоеДерево Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(ДеревоДокумента, "ДеревоДопДанных", ДопДерево);
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, Строка(НомерСтроки), ДопПараметры);
	
КонецПроцедуры

Процедура ДобавитьДопДанныеВСвойстваСтроки(ДопДерево, ИмяТаблицы, СвойстваТЧ, НомерСтроки, ДопПараметры)
	
	СвойстваТаблицы = ДопДерево.Строки.Найти(ИмяТаблицы, "ЗначениеРеквизита");
	Если Не ЗначениеЗаполнено(СвойстваТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	
	Для Каждого НомерСтр Из СвойстваТаблицы.Строки Цикл
		
		Если ВРег(НомерСтр.ИмяРеквизита) = ВРег("Нпп") Тогда
			Если Не НомерСтр.ЗначениеРеквизита = НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОснованиеНайден = Ложь;
		
		Для Каждого ТекСвойство Из НомерСтр.Строки Цикл
			
			ИмяСвойства = ТекСвойство.ИмяРеквизита;
			ЗначениеСвойства = ТекСвойство.ЗначениеРеквизита;
			
			Если ВРег(ИмяСвойства) = ВРег("ВидДокументаОснования")
				Или ВРег(ИмяСвойства) = ВРег("НомерДокументаОснования")
				Или ВРег(ИмяСвойства) = ВРег("ДатаДокументаОснования") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВРег(ИмяСвойства) = ВРег("ИдентификаторДокументаОснования") И НЕ ДокументОснованиеНайден Тогда
				// Актуальный алгоритм передачи связки с документами-основаниями.
				// В качестве идентификатора документа-основания во входящем ЭД приходит
				// идентификатор документа ИБ, в результате даже если ЭД для документа-потомка
				// был сформирован и отправлен раньше, чем ЭД документа-основания, после получения
				// ЭД документа-основания можно перезаполнить документ-потомок и ссылка на основание
				// будет найдена.
				ЗначениеСвойства = ДокументОснованиеПоИдентификатору(ЗначениеСвойства, ДопПараметры);
				ИмяСвойства = "ДокументОснование";
				ДокументОснованиеНайден = ЗначениеЗаполнено(ЗначениеСвойства);
			ИначеЕсли ВРег(ИмяСвойства) = ВРег("ИДЭДДокументаОснования") И НЕ ДокументОснованиеНайден Тогда
				ЗначениеСвойства = ПолучитьДокументОснование(ЗначениеСвойства, ДопПараметры);
				ИмяСвойства = "ДокументОснование";
				ДокументОснованиеНайден = ЗначениеЗаполнено(ЗначениеСвойства);
			КонецЕсли;
				
			СвойстваТЧ.Добавить(ЗначениеСвойства, ИмяСвойства);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСоставнойИД(ПроверяемыйИД)
	
	Возврат Найти(ПроверяемыйИД,"#") > 0;
	
КонецФункции

Процедура ПоместитьНеПодписанныеДанныеВШапку(ДеревоДокумента)
	
	ДопДерево = Неопределено;
	ВеткаДопДерево = ДеревоДокумента.Строки.Найти("ДеревоДопДанных","Реквизит", Истина);
	Если ЗначениеЗаполнено(ВеткаДопДерево) Тогда
		ДопДерево = ВеткаДопДерево.ЗначениеРеквизита;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка дополнительных данных ЭД

// Формирование xml-файла/строки

Функция СформироватьДопСтроку(МассивСтрок, Рекв, ПространствоИменСхемы, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, ТекстОшибки, Знач УровеньВложенности)
	
	УровеньВложенности = УровеньВложенности + 1;
	Для Каждого СтрокаДЗ Из МассивСтрок Цикл
		Если Не ЮридическиЗначимый Тогда
			Если СтрокаДЗ.ЮридическиЗначимый Тогда 
				// Если ЮридическиЗначимый = Истина, то входящий МассивСтрок содержит только юридически значимые реквизиты.
				// В противном случае, МассивСтрок - смешанный, поэтому надо пропускать юридически значимые реквизиты (т.к. они
				// будут передаваться отдельно от не значимых, в разных файлах).
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Реквизит = ПолучитьОбъектТипаCML("Реквизит.Реквизит", ПространствоИменСхемы);
		ЗаполнитьСвойствоXDTO(Реквизит, "Имя", СтрокаДЗ.ИмяРеквизита, , ТекстОшибки);
		Если ЗначениеЗаполнено(СтрокаДЗ.ЗначениеРеквизита) Тогда
			ЗаполнитьСвойствоXDTO(Реквизит, "Значение", СтрокаДЗ.ЗначениеРеквизита, , ТекстОшибки);
		КонецЕсли;
		МассивСтрокДЗ = СтрокаДЗ.Строки;
		Если МассивСтрокДЗ.Количество() > 0 Тогда // добавляем наборы и массивы данных:
			СформироватьДопСтроку(МассивСтрокДЗ, Реквизит, ПространствоИменСхемы, ЮридическиЗначимый,
				ЕстьДанныеДляДопФайла, ТекстОшибки, УровеньВложенности);
			Рекв.Реквизит.Добавить(Реквизит);
		Иначе // добавляем конечные значения реквизитов:
			Рекв.Реквизит.Добавить(Реквизит);
			ЕстьДанныеДляДопФайла = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция СформироватьДопФайлCML(СтруктураПараметров,
											ТекстОшибки,
											Знач ЮридическиЗначимый = Ложь,
											ИмяТЧ = Неопределено,
											НомерСтроки = Неопределено)
	
	// ИмяТЧ и НомерСтроки заполняются только для юридически значимой информации (информация - которая будет помещена в
	// основном файле (ИнфПол, ИнфПолСтр) и подписана ЭЦП).
	Если НомерСтроки <> Неопределено Тогда //ЗначениеЗаполнено(ИмяТЧ) ИЛИ
		ЮридическиЗначимый = Истина;
	КонецЕсли;
	ДопФайлСформирован = Ложь;
	ПространствоИменСхемы = "ДопФайлУниверсальный";
	Попытка
		ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
		Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") И ДеревоДопДанных.Строки.Количество() > 0 Тогда
			
			ЕстьДанныеДляДопФайла = Ложь;
			ДопФайл = ПолучитьОбъектТипаCML("ДопФайл", ПространствоИменСхемы);
			Данные = ПолучитьОбъектТипаCML("ДопФайл.Данные", ПространствоИменСхемы);
			
			Если НомерСтроки <> Неопределено Тогда
				// Если НомерСтроки - заполнено, то формируется строка ИнфПолСтр по юридически значимой информации и конкретной строке ТЧ.
				СтОтбора = Новый Структура;
				СтОтбора.Вставить("ТЧ", Истина);
				СтОтбора.Вставить("ИмяРеквизита", "Список");
				СтОтбора.Вставить("ЗначениеРеквизита", ИмяТЧ);
				МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если МассивСтрокДЗ.Количество() > 0 Тогда
					// В нужной ТЧ найдем требующуюся строку (НомерСтроки):
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомерСтроки);
					МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Если ЮридическиЗначимый=Истина, значит формируется строка ИнфПол(ИнфПолСтр).

				Если ЮридическиЗначимый Тогда
					СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", ИмяТЧ);
					МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора);
					Если МассивСтрокДЗ.Количество() > 0 Тогда
						
						// В подчиненных строках выберем юридически значимые реквизиты:
						МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
									
					КонецЕсли;
					
				Иначе
					
					МассивСтрокДЗ = ДеревоДопДанных.Строки;
					
				КонецЕсли;
			КонецЕсли;
			
			Если МассивСтрокДЗ.Количество() > 0 Тогда
				СформироватьДопСтроку(МассивСтрокДЗ, Данные, ПространствоИменСхемы, ЮридическиЗначимый,
					ЕстьДанныеДляДопФайла, ТекстОшибки, 0);
					
				ЗаполнитьСвойствоXDTO(ДопФайл, "Данные", Данные, Истина, ТекстОшибки);
			КонецЕсли;
			
			ИдДопФайла = Новый УникальныйИдентификатор;
			ЗаполнитьСвойствоXDTO(ДопФайл, "ИдФайла", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ИдДопФайла", Строка(ИдДопФайла), Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ВерсияФормата", "1", Истина, ТекстОшибки);
			ЗаполнитьСвойствоXDTO(ДопФайл, "ДатаФормирования", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ДопФайл.Проверить();
			
			Если ЕстьДанныеДляДопФайла И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЮридическиЗначимый Тогда
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.УстановитьСтроку();
					ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДопФайл);
					СтрXML = ЗаписьXML.Закрыть();
					НачПоз = Найти(СтрXML, "<Данные>");
					КолСимв = Найти(СтрXML, "</Данные>") - НачПоз + СтрДлина("</Данные>");
					СтрXML = Сред(СтрXML, НачПоз, КолСимв);
					
					СтрXML = СтрЗаменить(СтрXML, Символы.Таб,"");
					СтрXML = СтрЗаменить(СтрXML, Символы.ПС,"");
					
					СтруктураПараметров.Вставить("ИнфПол", СтрXML);
				Иначе
					СтруктураПараметров.Вставить("ИдентификаторДопФайла", ИдДопФайла);
					
					ПолноеИмяФайла = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СтруктураПараметров.ИдФайл) + ИдДопФайла + ".xml";
					СтруктураПараметров.Вставить("ПолноеИмяДопФайла", ПолноеИмяФайла);
					ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(ДопФайл, ПолноеИмяФайла, Ложь);
				КонецЕсли;
				ДопФайлСформирован = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДопФайлСформирован;
	
КонецФункции

Процедура ВывестиДопДанныеШапкиНаПечать(ДанныеПечати, Макет, ТабличныйДокумент)
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЗаполнитьДопДанныеШапки(ДеревоДопДанных, Макет, ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДопДанныеСтрокиНаПечать(ТаблицаДопДанныхСтрок, СтруктураДопДанных, НомерСтроки,ТабличныйДокумент, ОбластьМакета)
	
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(НомерСтроки), "НомерСтр");
		Если СтрокаТаблицыДД <> Неопределено Тогда
			Если СтруктураДопДанных.ЕстьПодписанные Тогда
				ОбластьМакета.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
				ТабличныйДокумент.Присоединить(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаДопДанных()
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	Возврат ТаблицаДопДанныхСтрок;
	
КонецФункции

Процедура ДобавитьДопДанныеВДанныеДляОбъекта(ДанныеДляОбъекта, ДеревоРазбора)
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьДатуИзмененияСтатуса(НастройкаЭДО) Экспорт
	
	ДатаСтатуса = ТекущаяДатаСеанса();
	НастройкаЭДО.ДатаИзмененияСтатуса = ДатаСтатуса;
	
КонецПроцедуры

// Только для внутреннего использования
Функция РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации) Экспорт
	
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	
	// Выполним проверку на заполненность обязательных полей.
	ТекстОшибки = "";
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоРегистрационнойИнформации, ТекстОшибки);
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
	
		ИмяФайлаРегистрационнойИнформации = СформироватьРегистрационнуюИнформациюCML(ДеревоРегистрационнойИнформации);
		Если ЗначениеЗаполнено(ИмяФайлаРегистрационнойИнформации) Тогда
			ДвоичныеДанныеДляОператораЭДО = Новый ДвоичныеДанные(ИмяФайлаРегистрационнойИнформации);
		КонецЕсли;
		
	Иначе
		ШаблонСообщения = НСтр("ru='При формировании регистрационного пакета возникли следующие ошибки:
        |%1'
        |;uk='При формуванні реєстраційного пакету виникли наступні помилки:
        |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ДвоичныеДанныеДляОператораЭДО;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьРегистрационнуюИнформациюCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://www.1c.ua/edo/registration}.Файл";
	Попытка
		
		Файл = ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		// Коммерческая информация
		ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ИдФайл"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсПрог"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсФорм"), Истина, ТекстОшибки);
		
		Документ = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");
		ЗаполнитьСвойствоXDTO(Документ, "КНД",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КНД"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "КодНО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "КодНО"), Истина, ТекстОшибки);
		
		ОперЭДО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.ОперЭДО");
		ЗаполнитьСвойствоXDTO(ОперЭДО, "НаимОрг",   ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.НаимОрг"),   Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ОперЭДО, "ИННЮЛ",     ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.ИННЮЛ"),     Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ОперЭДО, "КПП",       ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.КПП"),       Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ОперЭДО, "ОГРН",      ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.ОГРН"),      Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ОперЭДО, "ИдОперЭДО", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ОперЭДО.ИдОперЭДО"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Документ, "ОперЭДО", ОперЭДО, , ТекстОшибки);
		
		УчастникЭДО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО");
		ЗаполнитьСвойствоXDTO(УчастникЭДО, "ТипЗаявления",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипЗаявления"), Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ИдУчастЭДО")) Тогда
			ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИдУчастЭДО",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ИдУчастЭДО"), , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника")) Тогда
			
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника") = "ЮЛ" Тогда
				
				СвЮЛ = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ЮЛ");
				ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.НаимОрг"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ"),   Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.КПП"),     Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ОГРН",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ОГРН"),    Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ДатаПодклЭДО",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО")), Истина, ТекстОшибки);
				
				ФИООтв = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ЮЛ.ФИООтв");
				ЗаполнитьСвойствоXDTO(ФИООтв, "Фамилия",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИООтв, "Имя",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИООтв, "Отчество",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвЮЛ, "ФИООтв", ФИООтв, , ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(УчастникЭДО, "ЮЛ", СвЮЛ, , ТекстОшибки);
			Иначе
				
				СвИП = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ИП");
				ЗаполнитьСвойствоXDTO(СвИП, "ИННФЛ",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ИННФЛ"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвИП, "ОГРНИП",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ОГРНИП"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвИП, "ДатаПодклЭДО",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО")), Истина, ТекстОшибки);
				
				ФИО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.ИП.ФИО");
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Имя",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ФИО.Имя"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "УчастЭДО.ТипУчастника.ИП.ФИО.Отчество"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(СвИП, "ФИО", ФИО, Истина, ТекстОшибки);
				
				ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИП", СвИП, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыСертификатов = ДеревоДанных.Строки.Найти("УчастЭДО.СертифДолжн", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(СтрокаТаблицыСертификатов.Значение) Тогда
			Для Каждого СтрСертификат Из СтрокаТаблицыСертификатов.Строки Цикл
				Сертификат = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.СертифДолжн");
				ЗаполнитьСвойствоXDTO(Сертификат, "ДатаНачСертиф",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.ДатаНачСертиф")), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Сертификат, "ДатаКонСертиф",
					ДатаДД_ММ_ГГГГ(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.ДатаКонСертиф")), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Сертификат, "ОтпСертиф",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.ОтпСертиф"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Сертификат, "Сертификат",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.Сертификат"), Истина, ТекстОшибки);
				
				ФИО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.УчастЭДО.СертифДолжн.ФИО");
				ЗаполнитьСвойствоXDTO(ФИО, "Фамилия",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.Фамилия"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Имя",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.Имя"), Истина, ТекстОшибки);
				ЗаполнитьСвойствоXDTO(ФИО, "Отчество",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрСертификат, "УчастЭДО.СертифДолжн.НомерСтроки.Отчество"), , ТекстОшибки);
				ЗаполнитьСвойствоXDTO(Сертификат, "ФИО", ФИО, Истина, ТекстОшибки);
				
				УчастникЭДО.СертифДолжн.Добавить(Сертификат);
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьСвойствоXDTO(Документ, "УчастЭДО", УчастникЭДО, , ТекстОшибки);
		
		Подписант = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.Подписант");
		ЗаполнитьСвойствоXDTO(Подписант, "Должность", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.Должность"), Истина, ТекстОшибки);
		
		ФИО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.Подписант.ФИО");
		ЗаполнитьСвойствоXDTO(ФИО, "Фамилия",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ФИО.Фамилия"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИО, "Имя",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ФИО.Имя"), Истина, ТекстОшибки);
		ЗаполнитьСвойствоXDTO(ФИО, "Отчество",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант.ФИО.Отчество"), , ТекстОшибки);
		ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, , ТекстОшибки);
		
		ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, , ТекстОшибки);
		
		Файл.Проверить();
		
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ИмяФайла, Ложь);
		
		Возврат ИмяФайла;
		
	Исключение
		ТекстСообщения = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование данных для оператора ЭДО';uk='Формування даних для оператора ЕДО'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		Возврат "";
	КонецПопытки;
	
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// Сервис 1С ЭДО

// Только для внутреннего использования
Функция СтруктураНастроек1СЭДО()
	
	СтруктураНастроек = Новый Структура;
	
	Возврат СтруктураНастроек;
	
КонецФункции
#КонецОбласти

#Область НовыеМетоды

Функция ЗначениеРеквизитаДерева(Дерево, ИмяРеквизита)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита)
	
КонецФункции

Функция ПространствоИменПередачаТоваровПродавец()
	
	Возврат "TORGPR";
	
КонецФункции

Функция ПространствоИменПередачаРаботИсполнитель()
	
	Возврат "RUISP";
	
КонецФункции


Функция ДанныеФайлаЭД(ИмяФайлаЭД, ОписаниеОшибки, ПространствоИменГФС = Неопределено) Экспорт
	
	ДанныеФайлаЭД = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаЭД);
		ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ШаблонСообщения = НСтр("ru='Ошибка при чтении данных из файла:
                                    |%2'
                                    |;uk='Помилка при читанні даних з файлу:
                                    |%2'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайлаЭД);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Чтение ЭД.';uk='Читання ЕД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	// Чтение файлов без namespace по форматам ФНС
	Если ДанныеФайлаЭД <> Неопределено И ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено
		И Найти(ДанныеФайлаЭД.ИдФайл, "DP_UVUTOCH") = 0 Тогда
		
		ЧтениеXML.ОткрытьФайл(ИмяФайлаЭД);
		
		// Считаем содержимое XML файла
		ПостроительDOM = Новый ПостроительDOM();
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		
		// Освободим временный файл для записи
		ЧтениеXML.Закрыть();
		
		// Определим наше пространство имен
		URIПространстваИмен = "";
		Если Найти(ДанныеФайлаЭД.ИдФайл, "ON_SFAKT") > 0 Тогда
			
			Если ДанныеФайлаЭД.ВерсФорм = "5.01" Тогда //ВерсияФормата
				URIПространстваИмен = "SFAKT";
			Иначе
				URIПространстваИмен = "SFAKT_5_02";
			КонецЕсли;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ON_KORSFAKT") > 0 Тогда // корректировочный счет-фактура
			
			Если ДанныеФайлаЭД.ВерсФорм = "5.01" Тогда //ВерсияФормата
				URIПространстваИмен = "KORSFAKT";
			Иначе
				URIПространстваИмен = "KORSFAKT_5_02";
			КонецЕсли;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OTORG12") > 0 Тогда // торг-12 титул продавца
			URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, "OTORG12");
			ПространствоИменГФС = URIПространстваИмен;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "OKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
			URIПространстваИмен = "OKORDOC";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "PKORDOC") > 0 Тогда // корректировочный торг-12 титул продавца
			URIПространстваИмен = "PKORDOC";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "PTORG12") > 0 Тогда // торг-12 титул покупателя
			URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, "PTORG12");
			ПространствоИменГФС = URIПространстваИмен;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "IAKTPRM") > 0 Тогда // Акт титул исполнителя
			URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, "IAKTPRM");
			ПространствоИменГФС = URIПространстваИмен;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "ZAKTPRM") > 0 Тогда // Акт титул заказчика
			URIПространстваИмен = ПространствоИменАкта(ДанныеФайлаЭД, "ZAKTPRM");
			ПространствоИменГФС = URIПространстваИмен;
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_IZVPOL") > 0 Тогда
			URIПространстваИмен = "DP_IZVPOL";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PRANNUL") > 0 Тогда
			URIПространстваИмен = "DP_PRANNUL";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "POD_DPIZVPOL") > 0 Тогда
			URIПространстваИмен = "DP_IZVPOL";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PDOTPR") > 0 Тогда
			URIПространстваИмен = "DP_PDOTPR";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_PDPOL") > 0 Тогда
			URIПространстваИмен = "DP_PDPOL";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "POD") > 0 Тогда
			URIПространстваИмен = "PDO";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPR") > 0 Тогда // Передача товаров продавец
			URIПространстваИмен = "TORGPR";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_TOVTORGPOK") > 0 Тогда // Передача товаров покупатель
			URIПространстваИмен = "TORGPOK";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUISP") > 0 Тогда // Передача товаров покупатель
			URIПространстваИмен = "RUISP";
			
		ИначеЕсли Найти(ДанныеФайлаЭД.ИдФайл, "DP_REZRUZAK") > 0 Тогда // Передача товаров покупатель
			URIПространстваИмен = "RUZAK";
	
		КонецЕсли;
		
		// Установим пространство имен 1С
		Если НЕ ЗначениеЗаполнено(ДокументDOM.ЭлементДокумента.URIПространстваИмен) Тогда
			ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", URIПространстваИмен);
		КонецЕсли;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаЭД);
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
		ЗаписьXML.Закрыть();
		
		Попытка
			ЧтениеXML.ОткрытьФайл(ИмяФайлаЭД);
			ДанныеФайлаЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ПолучитьТипЗначенияCML("Файл", URIПространстваИмен));
		Исключение
			ШаблонСообщения = НСтр("ru='Ошибка при чтении данных из файла:
                                        |%2'
                                        |;uk='Помилка при читанні даних з файлу:
                                        |%2'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайлаЭД);
		
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Чтение ЭД.';uk='Читання ЕД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДанныеФайлаЭД;
	
КонецФункции

// Сохраняет данные ссылки ЭД в файл и возращает его имя
Процедура СохранитьЭДВФайл(ЭДСсылка, ПараметрыФайла)
	
	ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭДСсылка, ЭДСсылка.УникальныйИдентификатор(), Истина);
	
	Расширение = ДопИнформацияПоЭД.Расширение;
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		Если ЗначениеЗаполнено(Расширение) Тогда
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(Расширение);
		Иначе
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога';uk='Не вдалося переглянути електронний документ. Перевірте настройки робочого каталогу'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат ;
		КонецЕсли;
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		ДанныеЭД.Записать(ИмяФайла);
		
	КонецЕсли;
	
	ПараметрыФайла.ИмяФайла = ИмяФайла;
	ПараметрыФайла.Расширение = Расширение;
	ПараметрыФайла.Наименование = ДопИнформацияПоЭД.Наименование;
	
КонецПроцедуры

Процедура СохранитьДопДанныеВФайл(ЭДСсылка, ИмяФайла)
	
	ВыборкаЭДДопДанных = ОбменСКонтрагентамиСлужебный.ВыборкаДопДанныеЭД(ЭДСсылка);
	Если ВыборкаЭДДопДанных.Следующий() Тогда
		
		ПараметрыФайла = СвойстваФайла();
		
		СохранитьЭДВФайл(ВыборкаЭДДопДанных.Ссылка, ПараметрыФайла);
		
		ИмяФайла = ПараметрыФайла.ИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваФайла()
	
	Свойства = Новый Структура("ИмяФайла, Наименование, Расширение");
	
	Возврат Свойства;
	
КонецФункции

Функция ЗначениеПараметра(ЗначенияСвойств, ИмяСвойства)
	
	ЗначениеСвойства = Неопределено;
	ЗначенияСвойств.Свойство(ИмяСвойства, ЗначениеСвойства);
	
	Возврат ЗначениеСвойства;
	
КонецФункции

Функция ЕстьСвойствоXDTO(ОбъектXDTO, ИмяСвойства)
	
	Если Не ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Если ОбъектXDTO.Свойства().Получить(ИмяСвойства) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат  Результат;
	
КонецФункции

Функция СодержаниеОперацииПередачаТоваров()
	Возврат "Перечисленные в документе ценности переданы";
КонецФункции

Функция НаименованиеДокументаПередачаТоваров()
	Возврат "Товарная накладная";
КонецФункции

Функция НаименованиеДокументаПередачаРабот()
	Возврат "Акт о передаче результатов работ (Акт об оказании услуг)";
КонецФункции

Функция НаименованиеФактаПередачаРабот()
	Возврат "Документ о передаче результатов работ (Документ об оказании услуг)";
КонецФункции

Функция НаименованиеФактаПередачаТоваров()
	Возврат "Документ о передаче товара при торговых операциях";
КонецФункции



Функция ДолжностныеОбязанности()
	Возврат "Должностные обязанности по умолчанию";
КонецФункции


#КонецОбласти

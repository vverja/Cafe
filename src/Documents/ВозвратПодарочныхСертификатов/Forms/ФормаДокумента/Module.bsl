&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ПолучитьСсылкиНаОборудование();
	
	Элементы.ГруппаИтого.Заголовок = Элементы.ГруппаИтого.Заголовок + " " + "("+Объект.Валюта + ")";
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ОбработатьДанныеСчитывателяМагнитныхКарт(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанПодарочныйСертификат"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ОбработатьПодарочныйСертификат(Параметр.ПодарочныйСертификат);
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
			
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Чек уже пробит на фискальном регистраторе!';uk='Чек вже пробитий на фіскальному реєстраторі!'"), Объект.Ссылка,,,ЕстьОшибки);
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документ помечен на удаление';uk='Документ позначений на вилучення'"), Объект.Ссылка,,,ЕстьОшибки);
	КонецЕсли;
	
	Объект.Дата = ТекущаяДата();
	Модифицированность = Истина;
	
	Если ЕстьОшибки Или Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если ИзмененныеДанныеЗаписаны Тогда
		
		ПробитьЧекВыполнить(Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект));
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ПробитьЧекПослеПроведения", ЭтотОбъект));
		ДополнительныеПараметры.Вставить("ТекстСообщения", НСтр("ru='Перед выполнением операции пробития чека не удалось провести документ.';uk='Перед виконанням операції пробиття чека не вдалося провести документ.'"));
		ДополнительныеПараметры.Вставить("ВозвращатьРезультатФункции", Истина);
		ДополнительныеПараметры.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
		ДополнительныеПараметры.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПослеПроведения(Проведен, ДополнительныеПараметры) Экспорт
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ПробитьЧекВыполнить(Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьПодарочныйСертификат(Команда)
	
	ОткрытьФорму(
		"Справочник.ПодарочныеСертификаты.Форма.СчитываниеПодарочногоСертификата",
		Новый Структура("НеИспользоватьРучнойВвод", Ложь),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьОплатуПлатежнойКартой(Команда)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки = "";
	
	//Проверка выбранной строки в талице оплат платежными картами
	ТекущиеДанные = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите строку отменяемой оплаты картой.';uk='Виберіть рядок отменяемой оплати картою.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ОплатаОтменена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данная оплата уже отменена.';uk='Дана оплата вже скасована.'"));
		Возврат;
	КонецЕсли;
	
	ОтменитьОплатуПлатежнойКартой(
		ТекущиеДанные, 
		Новый ОписаниеОповещения("ИзменитьОплатыПлатежнымиКартамиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарочныеСертификаты

&НаКлиенте
Процедура ПодарочныеСертификатыПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПодарочныйСертификатПриИзменении(Элемент)
	
	ПодарочныйСертификат = Элементы.ПодарочныеСертификаты.ТекущиеДанные.ПодарочныйСертификат;
	ОбработатьПодарочныйСертификат(ПодарочныйСертификат, Элементы.ПодарочныеСертификаты.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ПодарочныеСертификатыКлиент.ОбработатьПолученныйКодНаКлиенте(
		ЭтаФорма,
		МассивШтрихкодов[0].Штрихкод,
		ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСчитывателяМагнитныхКарт(Данные)
	
	ПодарочныеСертификатыКлиент.ОбработатьПолученныйКодНаКлиенте(
		ЭтаФорма,
		Данные,
		ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод"));
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОшибкаПриПроведенииЧекаВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		Если ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьНаСервере" Тогда
			РезультатОперации = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		КонецЕсли;
		
		Если РезультатОперации Тогда
			
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОписаниеОповещения,
				?(ДополнительныеПараметры.ВозвращатьРезультатФункции, РезультатОперации, ДополнительныеПараметры.РезультатПриУспешномПроведении));
			
		Иначе
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ДополнительныеПараметры.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОписаниеОповещения,
			?(ДополнительныеПараметры.ВозвращатьРезультатФункции, ДополнительныеПараметры.РезультатОперации, ДополнительныеПараметры.РезультатПриОтмене));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Значение = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ВозвратПодарочныхСертификатов"));
		Значение.УстановитьСсылкуНового(Документы.ВозвратПодарочныхСертификатов.ПолучитьСсылку());
		ЗначениеВДанныеФормы(Значение, Объект);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ВозвратПодарочныхСертификатов";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
	КонецПопытки;
	
	Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
	
	ЗафиксироватьТранзакцию();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Модифицированность Тогда
		Возврат ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве
		И Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ТолькоПросмотр = Истина;
		
	Иначе
		
		Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
			ПараметрыФормы.Вставить("ТекстСообщения",
				НСтр("ru='ВНИМАНИЕ! Произошла исключительная ситуация:
                |Чек ККМ пробит, но не зафиксирован в системе.'
                |;uk='УВАГА! Виникла виняткова ситуація:
                |Чек ККМ пробитий, але не зафіксований у системі.'"));
			
			ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОплатыПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru='ВНИМАНИЕ! Произошла исключительная ситуация:
            |Отмена оплаты не зафиксирована в системе.'
            |;uk='УВАГА! Виникла виняткова ситуація:
            |Скасування оплати не зафіксоване в системі.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	Элементы.ФормаПробитьЧек.Доступность = (Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит"));
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ЭквайринговыеТерминалы.Очистить();
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ИЗ
	|	Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка.РабочееМесто = &РабочееМесто
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМестоОборудования)
	|		Или ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос.УстановитьПараметр("РабочееМестоОборудования", РабочееМесто);
	Иначе
		Запрос.УстановитьПараметр("РабочееМестоОборудования", Справочники.РабочиеМеста.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭквайринговыйТерминал = Новый Структура;
		ЭквайринговыйТерминал.Вставить("Ссылка",                                 Выборка.Ссылка);
		ЭквайринговыйТерминал.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		ЭквайринговыйТерминал.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
		
		ЭквайринговыеТерминалы.Добавить(ЭквайринговыйТерминал);
		
	КонецЦикла;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	СуммаДокумента = Объект.ПодарочныеСертификаты.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодарочныйСертификат(ПодарочныйСертификат, СтрокаТЧ = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодарочныеСертификаты.Владелец.Номинал
	|	* ВЫБОР
	|		КОГДА &Валюта <> ПодарочныеСертификаты.Владелец.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыСертификаты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыСертификаты.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыСертификаты.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыСертификаты.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыСертификаты
	|ПО 
	|	ПодарочныеСертификаты.Владелец.Валюта = КурсыВалютыСертификаты.Валюта
	|	И ПодарочныеСертификаты.Ссылка = &Ссылка
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|	
	|ГДЕ
	|	ПодарочныеСертификаты.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ПодарочныйСертификат);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("Дата",   ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если СтрокаТЧ = Неопределено Тогда
			
			НайденныеСтроки = Объект.ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ПодарочныйСертификат", ПодарочныйСертификат));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденнаяСтрока = Объект.ПодарочныеСертификаты.Добавить();
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
		Иначе
			НайденнаяСтрока = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(СтрокаТЧ);
		КонецЕсли;
		
		НайденнаяСтрока.ПодарочныйСертификат = ПодарочныйСертификат;
		НайденнаяСтрока.Сумма = Выборка.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПробитьЧекВыполнить(ОписаниеОповещения) Экспорт
	
	ОписаниеОшибки = "";
	
	ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	РезультатФР = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваФР);
	
	Если РезультатФР Или ИспользоватьБезПодключенияОборудования Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
		ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
		
		ОтменитьОплату(
			Новый ОписаниеОповещения("ПробитьЧекНаФискальномРегистраторе", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Фискальный регистратор не подключен. Операция по карте не была выполнена.';uk='Фіскальний реєстратор не підключений. Операція по карті не була виконана.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаФискальномРегистраторе(ОплатаОтменена, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	
	ИзмененныеДанныеЗаписаны = Ложь;
	ВыполненаОперацияНаУстройстве = Ложь;
	
	РезультатФР = Истина;
	
	Если ОплатаОтменена Тогда
		
		Если Не ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования Тогда
			
			// Готовим данные
			ВходныеПараметры  = Новый Массив;
			ВыходныеПараметры = Неопределено;
			
			НомерСекции = 1;
			
			СтавкаНДССтрокой    = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДССтрокой(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС"));
			ЭтоПодакцизныйТовар = ЛОЖЬ;
			
			// Подготовка таблицы товаров
			ТаблицаТоваров = Новый Массив();
			
			Для Каждого СтрокаТЧ Из Объект.ПодарочныеСертификаты Цикл
				
				СтрокаТаблицыТоваров = Новый СписокЗначений();
				СтрокаТаблицыТоваров.Добавить(Строка(СтрокаТЧ.ПодарочныйСертификат));
				                                                            //  1 - Наименование
				СтрокаТаблицыТоваров.Добавить("");                          //  2 - Штрихкод
				СтрокаТаблицыТоваров.Добавить("");                          //  3 - Артикул
				СтрокаТаблицыТоваров.Добавить(НомерСекции);                 //  4 - Номер отдела
				СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Сумма);              //  5 - Цена за позицию без скидки
				СтрокаТаблицыТоваров.Добавить(1);                           //  6 - Количество
				СтрокаТаблицыТоваров.Добавить("");                          //  7 - Наименование скидки/наценки
				СтрокаТаблицыТоваров.Добавить(0);                           //  8 - Сумма скидки/наценки
				СтрокаТаблицыТоваров.Добавить(0);                           //  9 - Процент скидки/наценки
				СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Сумма);              // 10 - Сумма позиции со скидкой
				СтрокаТаблицыТоваров.Добавить(0);                           // 11 - Номер налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                           // 12 - Сумма налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                           // 13 - Процент налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                           // 14 - Номер налога (2)
				СтрокаТаблицыТоваров.Добавить(0);                           // 15 - Сумма налога (2)
				СтрокаТаблицыТоваров.Добавить(0);                           // 16 - Процент налога (2)
				СтрокаТаблицыТоваров.Добавить("");                          // 17 - Наименование секции форматирования товарной строки
				СтрокаТаблицыТоваров.Добавить(СтавкаНДССтрокой);            // 18 - Ставка НДС строкой
				СтрокаТаблицыТоваров.Добавить(ЭтоПодакцизныйТовар);         // 19 - Подакцизный товар
				
				ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
			КонецЦикла;
			
			// Подготовка таблицы оплат
			ТаблицаОплат = Новый Массив();
			
			// Наличные
			СтрокаОплаты = Новый СписокЗначений();
			СтрокаОплаты.Добавить(0);
			СтрокаОплаты.Добавить(СуммаДокумента - Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
			СтрокаОплаты.Добавить("Наличная оплата");
			СтрокаОплаты.Добавить("");
			ТаблицаОплат.Добавить(СтрокаОплаты);
			// Безналичные
			СтрокаОплаты = Новый СписокЗначений();
			СтрокаОплаты.Добавить(1);
			СтрокаОплаты.Добавить(Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
			СтрокаОплаты.Добавить("Безналичная оплата");
			СтрокаОплаты.Добавить("");
			ТаблицаОплат.Добавить(СтрокаОплаты);
			
			// Подготовка таблицы общих параметров
			ОбщиеПараметры = Новый Массив();
			ОбщиеПараметры.Добавить(1);                      //  1 - Тип чека
			ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
			ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
			ОбщиеПараметры.Добавить(СуммаДокумента);         //  4 - Сумма по чеку без скидок/наценок
			ОбщиеПараметры.Добавить(СуммаДокумента);         //  5 - Сумма по чеку с учетом всех скидок/наценок
			ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
			ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
			ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
			ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
			ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
			ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
			ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
			ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
			ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
			ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала
			
			ВходныеПараметры.Добавить(ТаблицаТоваров);
			ВходныеПараметры.Добавить(ТаблицаОплат);
			ВходныеПараметры.Добавить(ОбщиеПараметры);
			
			// Печатаем чек.
			РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ДополнительныеПараметры.ИдентификаторУстройстваФР,
			                                                        "PrintReceipt",
			                                                        ВходныеПараметры,
			                                                        ВыходныеПараметры);
			
		КонецЕсли;
		
		Если РезультатФР Или ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования Тогда
			
			// Установить полученное значение номера чека реквизиту документа.
			Если Не ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования Тогда
				Объект.НомерЧекаККМ = ВыходныеПараметры[1];
			КонецЕсли;
			
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
			Объект.Дата = ТекущаяДата();
			Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
				Объект.НомерЧекаККМ = 1;
			КонецЕсли;
			
			ДанныеДляЖурналаРегистрации = Новый Структура;
			ДанныеДляЖурналаРегистрации.Вставить("Дата");
			ДанныеДляЖурналаРегистрации.Вставить("Статус");
			ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаККМ");
			ЗаполнитьЗначенияСвойств(ДанныеДляЖурналаРегистрации, Объект);
			
			ВыполненаОперацияНаУстройстве = Истина;
			Модифицированность = Истина;
			
			ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
			ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
			Если Не ИзмененныеДанныеЗаписаны Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
				ДополнительныеПараметры.Вставить("ТекстСообщения", НСтр("ru='После пробития чека на ФР не удалось сохранить документ.';uk='Після пробиття чека на ФР не вдалося зберегти документ.'"));
				ДополнительныеПараметры.Вставить("ВозвращатьРезультатФункции", Ложь);
				ДополнительныеПараметры.Вставить("РезультатПриУспешномПроведении", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина));
				ДополнительныеПараметры.Вставить("РезультатПриОтмене", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь));
				ДополнительныеПараметры.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
				ДополнительныеПараметры.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
				
				Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
					ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
					Возврат;
				КонецЕсли;
				
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					ДополнительныеПараметры.ТекстСообщения,
					РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='При печати чека произошла ошибка.
                                        |Чек не напечатан на фискальном регистраторе.
                                        |Дополнительное описание:
                                        |%ДополнительноеОписание%'
                                        |;uk='При друку чека виникла помилка.
                                        |Чек не надрукований на фіскальному реєстраторі.
                                        |Додатковий опис:
                                        |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
			                             "%ДополнительноеОписание%",
			                             ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ОписаниеОповещения,
		Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
			ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны));
	
КонецПроцедуры


&НаКлиенте
Функция ОтменитьОплату(ОповещениеПриЗавершенииОтменыОплаты)
	
	СтрокиОплатыПлатежнымиКартами = Новый Массив;
	Для каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		Если СтрокаОплаты.ОплатаОтменена Тогда
			Продолжить;
		КонецЕсли;
		СтрокиОплатыПлатежнымиКартами.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершенииОтменыОплаты", ОповещениеПриЗавершенииОтменыОплаты);
	ДополнительныеПараметры.Вставить("СтрокиОплатыПлатежнымиКартами", СтрокиОплатыПлатежнымиКартами);
	
	ОтменитьОплатыПлатежнымиКартамиПоследовательно(Неопределено, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Функция ОтменитьОплатыПлатежнымиКартамиПоследовательно(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() > 0 Тогда
		
		СтрокаОплаты = ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами[ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() - 1];
		ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Удалить(ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Найти(СтрокаОплаты));
		
		ОтменитьОплатуПлатежнойКартой(
			СтрокаОплаты, 
			Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиПоследовательно", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		ОтменитьОплатыПлатежнымиКартамиПоследовательноЗавершение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОтменитьОплатыПлатежнымиКартамиПоследовательноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОплатаОтменена = Истина;
	
	// Если отмена оплаты не удалась - вернутся.
	Для Каждого СтрокаТЧ Из Объект.ОплатаПлатежнымиКартами Цикл
		Если Не СтрокаТЧ.ОплатаОтменена Тогда
			ОплатаОтменена = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПриЗавершенииОтменыОплаты,
		ОплатаОтменена);
	
КонецФункции

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартой(ТекущиеДанные, ОповещениеПриЗавершении)
	
	ПараметрыОтмены = Новый Структура;
	ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыОтмены.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ОтменитьОплатуКартойПослеПроведения", ЭтотОбъект, ПараметрыОтмены));
		ДополнительныеПараметры.Вставить("ТекстСообщения", НСтр("ru='После выполнения операции отмены оплаты не удалось записать документ.';uk='Після виконання операції скасування оплати не вдалося записати документ.'"));
		ДополнительныеПараметры.Вставить("ВозвращатьРезультатФункции", Истина);
		ДополнительныеПараметры.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
		ДополнительныеПараметры.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ОтменитьОплатуКартойПослеПроведения(Истина, ПараметрыОтмены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуКартойПослеПроведения(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	ОписаниеОшибки = "";
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
	
	ИдентификаторУстройстваЭТ = Неопределено;
	Для каждого Терминал Из ЭквайринговыеТерминалы Цикл
		Если Терминал.Значение.Ссылка = ТекущиеДанные.ЭквайринговыйТерминал Тогда
			СтруктрураЭквайринговыйТерминал = Терминал.Значение;
			ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) Или (СтруктрураЭквайринговыйТерминал <> Неопределено И СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
		
		Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
			РезультатЭТ = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваЭТ);
		Иначе
			РезультатЭТ = Истина;
		КонецЕсли;
		
		Если РезультатЭТ Тогда
			
			ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			РезультатФР = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваФР);
			
			Если РезультатФР Или ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Новый Массив();
					ВыходныеПараметры = Неопределено;
					
					ВходныеПараметры.Добавить(СуммаОперации);
					ВходныеПараметры.Добавить(НомерСсылкиОперации);
					ВходныеПараметры.Добавить(НомерЧекаЭТ);
					
					// Выполнение операции на ЭТ
					РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(
						ИдентификаторУстройстваЭТ,
						"AuthorizeVoid",
						ВходныеПараметры,
						ВыходныеПараметры);
					
					Если РезультатЭТ Тогда
						
						СтрокаСлипЧека = ВыходныеПараметры[0][1];
						
						Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
							глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
						КонецЕсли;
						
						НомерКарты          = "";
						НомерСсылкиОперации = "";
						НомерЧекаЭТ         = "";
						
					Иначе
						
						ТекстОписаниеОшибки = ВыходныеПараметры[1];
						
					КонецЕсли;
					
					ПараметрыФрагмента = Новый Структура;
					ПараметрыФрагмента.Вставить("СуммаОперации",       СуммаОперации);
					ПараметрыФрагмента.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
					ПараметрыФрагмента.Вставить("НомерЧекаЭТ",         НомерЧекаЭТ);
					ПараметрыФрагмента.Вставить("РезультатЭТ", РезультатЭТ);
					ПараметрыФрагмента.Вставить("РезультатФР", РезультатФР);
					ПараметрыФрагмента.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
					ПараметрыФрагмента.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
					ПараметрыФрагмента.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
					ПараметрыФрагмента.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
					ПараметрыФрагмента.Вставить("СтрокаОплаты", ТекущиеДанные);
					ПараметрыФрагмента.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
					
					ВыполнениеОтменыОплатыНаТерминале(ПараметрыФрагмента);
					Возврат;
					
				Иначе
					
					ТекстВопроса = НСтр("ru='Требуется выполнить операцию отмены оплаты на эквайринговом терминале.';uk='Потрібно виконати операцію скасування оплати на еквайринговому терміналі.'") + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Сумма операции:';uk='Сума операції:'")        + " "+ СуммаОперации         + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Номер карты:';uk='Номер карти:'")           + " "+ НомерКарты            + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Ссылочный номер:';uk='Посилальний номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Номер чека:';uk='Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
					ТекстВопроса = ТекстВопроса + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Операция отмены оплаты на эквайринговом терминале прошла успешно?';uk='Операція скасування оплати на еквайринговому терміналі пройшла успішно?'");
					
					ПараметрыФрагмента = Новый Структура;
					ПараметрыФрагмента.Вставить("СуммаОперации",       СуммаОперации);
					ПараметрыФрагмента.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
					ПараметрыФрагмента.Вставить("НомерЧекаЭТ",         НомерЧекаЭТ);
					ПараметрыФрагмента.Вставить("РезультатЭТ", РезультатЭТ);
					ПараметрыФрагмента.Вставить("РезультатФР", РезультатФР);
					ПараметрыФрагмента.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
					ПараметрыФрагмента.Вставить("СтрокаСлипЧека", "");
					ПараметрыФрагмента.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
					ПараметрыФрагмента.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
					ПараметрыФрагмента.Вставить("СтрокаОплаты", ТекущиеДанные);
					ПараметрыФрагмента.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
					
					ПоказатьВопрос(
						Новый ОписаниеОповещения("ВопросОВыполненииОтменыОплатыНаТерминалеЗавершение", ЭтотОбъект, ПараметрыФрагмента),
						ТекстВопроса,
						РежимДиалогаВопрос.ДаНет);
					Возврат;
					
				КонецЕсли;
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Фискальный регистратор не подключен. Операция по карте не была выполнена.';uk='Фіскальний реєстратор не підключений. Операція по карті не була виконана.'"));
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Эквайринговый терминал не подключен. Операция по карте не была выполнена.';uk='Еквайринговий термінал не підключений. Операція по карті не була виконана.'"));
			
		КонецЕсли;
		
	Иначе
		
		// Не выбран эквайринговый терминал
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ОповещениеПриЗавершении,
		Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОВыполненииОтменыОплатыНаТерминалеЗавершение(РезультатВопроса, ПараметрыФрагмента) Экспорт
	
	РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если РезультатЭТ Тогда
		СтрокаСлипЧека = НСтр("ru='Отменена оплата на сумму %1% %2%';uk='Скасована оплата на суму %1% %2%'");
		СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", ПараметрыФрагмента.СуммаОперации);
		СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", Объект.Валюта);
	Иначе
		СтрокаСлипЧека = "";
		ТекстОписаниеОшибки = НСтр("ru='Операция отменена';uk='Операція скасована'");
	КонецЕсли;
	
	ПараметрыФрагмента.СтрокаСлипЧека = СтрокаСлипЧека;
	
	ВыполнениеОтменыОплатыНаТерминале(ПараметрыФрагмента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОтменыОплатыНаТерминале(Параметры)
	
	РезультатЭТ = Параметры.РезультатЭТ;
	РезультатФР = Параметры.РезультатФР;
	
	Если Не РезультатЭТ Тогда
		
		ТекстСообщения = НСтр("ru='При выполнении операции возникла ошибка:
            |""%ОписаниеОшибки%"".
            |Отмена по карте не была произведена.'
            |;uk='При виконанні операції виникла помилка:
            |""%ОписаниеОшибки%"".
            |Скасування по карті не було виконано.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ОписаниеОшибки%",
			Параметры.ТекстОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		Если Не ПустаяСтрока(Параметры.СтрокаСлипЧека) И Не Параметры.ИспользоватьБезПодключенияОборудования Тогда
			
			ВходныеПараметры  = Новый Массив();
			ВходныеПараметры.Добавить(Параметры.СтрокаСлипЧека);
			ВыходныеПараметры = Неопределено;
			
			РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(
				Параметры.ИдентификаторУстройстваФР,
				"PrintText",
				ВходныеПараметры,
				ВыходныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатЭТ Тогда
		
		Если Не РезультатФР И Не Параметры.ИспользоватьБезПодключенияОборудования Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru='При печати слип-чека возникла ошибка:
                |""%1"".
                |Операция по карте была отменена.'
                |;uk='При друці сліп-чека виникла помилка:
                |""%1"".
                |Операція по картці була скасована.'"), ВыходныеПараметры[1]));
			
		КонецЕсли;
		
		ДанныеДляЖурналаРегистрации = Новый Структура;
		ДанныеДляЖурналаРегистрации.Вставить("СуммаОперации",       Параметры.СуммаОперации);
		ДанныеДляЖурналаРегистрации.Вставить("НомерСсылкиОперации", Параметры.НомерСсылкиОперации);
		ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаЭТ",         Параметры.НомерЧекаЭТ);
		
		Параметры.СтрокаОплаты.ОплатаОтменена = Истина;
		Модифицированность = Истина;
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
		Если Не ИзмененныеДанныеЗаписаны Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещения", Параметры.ОповещениеПриЗавершении);
			ДополнительныеПараметры.Вставить("ТекстСообщения", НСтр("ru='После выполнения операции отмены оплаты не удалось записать документ.';uk='Після виконання операції скасування оплати не вдалося записати документ.'"));
			ДополнительныеПараметры.Вставить("ВозвращатьРезультатФункции", Ложь);
			ДополнительныеПараметры.Вставить("РезультатПриУспешномПроведении", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина));
			ДополнительныеПараметры.Вставить("РезультатПриОтмене", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь));
			ДополнительныеПараметры.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
			ДополнительныеПараметры.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
			
			Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
				ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
				Возврат;
			КонецЕсли;
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ДополнительныеПараметры.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			Возврат;

		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(
			Параметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Истина, Истина));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			Параметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Ложь, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

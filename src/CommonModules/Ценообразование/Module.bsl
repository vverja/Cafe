////////////////////////////////////////////////////////////////////////////////
// Модуль "Ценообразование", содержит процедуры и функции для  проверки
// корректности документов установки цен и для обработки 
// пользователем введенных данных
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииДляОбслуживанияВидовЦенЗаполняемыхПоДаннымИб

Функция ВидЦеныПрайсЛист() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		ВидЦеныПрайсЛист = Справочники.ВидыЦен.СоздатьЭлемент();
		ВидЦеныПрайсЛист.ВалютаЦены = Константы.ВалютаРегламентированногоУчета.Получить();
		ВидЦеныПрайсЛист.ЦенаВключаетНДС = Истина;
		ВидЦеныПрайсЛист.ИспользоватьПриПродаже = Истина;
		ВидЦеныПрайсЛист.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
		ВидЦеныПрайсЛист.СхемаКомпоновкиДанных = "Типовой";
		ВидЦеныПрайсЛист.Идентификатор = "ПрайсЛист";
		ВидЦеныПрайсЛист.Наименование = НСтр("ru='Прайс-лист';uk='Прайс-лист'");
		ВидЦеныПрайсЛист.Записать();
		
		Возврат ВидЦеныПрайсЛист.Ссылка;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиКорректностиЗаполненияДокументов

// Проверяет корректность заполнения документа установки цен номенклатуры
// Вызывается из процедуры документа "ОбработкаПроведения"
//
// Параметры:
// ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, для которого необходимо проверить корректность
// ДеревоЦен             - ТаблицаЗначений - таблица цен номенклатуры документа, для которой необходимо проверить корректность
// ВидыЦен               - Массив - массив видов цен для проверки наличия ранее установленных цен
// Отказ                 - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатуры(ДокументУстановкиЦен,
	                                                                       ДеревоЦен,
	                                                                       ВидыЦен,
	                                                                       Отказ) Экспорт
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	МассивПроверок    = Новый Массив();
	МассивПроверок.Добавить("ВременнаяТаблицаЦен");
	МассивПроверок.Добавить("ВременнаяТаблицаЦенБезДублей");
	МассивПроверок.Добавить("КорректностьТоваров");
	МассивПроверок.Добавить("НаличиеДублейТоваров");
	МассивПроверок.Добавить("НаличиеУстановленныхЦен");
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаЦен" Тогда
			
			СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен(ТекстЗапроса, ПараметрыЗапроса, ДеревоЦен);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦенБезДублей" Тогда
			
			СформироватьЗапросВременнаяТаблицаЦенБезДублейДляРегистрацииЦен(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьТоваров" Тогда
			
			СформироватьЗапросКорректностьТоваровДляРегистрацииЦен(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеДублейТоваров" Тогда
			
			СформироватьЗапросНаличиеДублейДляРегистрацииЦен(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеУстановленныхЦен" Тогда
			
			СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен(ТекстЗапроса, ПараметрыЗапроса, ДокументУстановкиЦен, ВидыЦен);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
	
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "КорректностьТоваров" Тогда
			
			СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦен(Выборка, ДокументУстановкиЦен, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеДублейТоваров" Тогда
			
			СообщитьОбОшибкахНаличиеДублейТоваровДляРегистрацииЦен(Выборка, ДокументУстановкиЦен, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУстановленныхЦен" Тогда
			
			СообщитьОбОшибкахНаличиеУстановленныхЦенДляРегистрацииЦен(Выборка, ДокументУстановкиЦен, Отказ);
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПартнера()

// Проверяет корректность заполнения документа установки цен номенклатуры
// Вызывается из процедуры документа "ОбработкаПроведения"
//
// Параметры:
// ДокументУстановкиЦен - ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика, для которого необходимо осуществить проверки
// Отказ                - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика(ДокументУстановкиЦен,
	                                                                                 ДеревоЦен,
	                                                                                 Отказ) Экспорт
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	МассивПроверок    = Новый Массив();
	МассивПроверок.Добавить("ВременнаяТаблицаТовары");
	МассивПроверок.Добавить("КорректностьТоваров");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
		МассивПроверок.Добавить("КорректностьНоменклатурыПоставщика");
	КонецЕсли;
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦенПоставщика(ТекстЗапроса, ПараметрыЗапроса, ДеревоЦен);
			
		ИначеЕсли ТекЭлемент = "КорректностьТоваров" Тогда
			
			СформироватьЗапросКорректностьТоваровДляРегистрацииЦенПоставщика(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьНоменклатурыПоставщика" Тогда
			
			СформироватьЗапросКорректностьЗаполненияНоменклатурыПоставщика(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
	
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "КорректностьТоваров" Тогда
			
			СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦенПоставщика(Выборка, ДокументУстановкиЦен, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьНоменклатурыПоставщика" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПоставщика(Выборка, ДокументУстановкиЦен, Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика()

#КонецОбласти

#Область ПроцедурыИФункцииПересчетаСуммВТабличныхЧастях

// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену
//
// Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС
// СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - Ставка НДС
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Рассчитывает сумму скидки в зависимости от процента скидки
//
// ТекСтрока                         - Строка табличной части Товары документа
// ПересчитыватьАвтоматическуюСкидку - Булево - Истина, если в документе есть автоматические скидки
// ОчищатьАвтоматическуюСкидку       - Булево - Истина, если необходимо очистить процент и сумму авто скидок
// ПересчитыватьРучнуюСкидку         - Булево - Истина, если в документе есть ручные скидки
// ЦенаВключаетНДС                   - Булево - Признак включения НДС в цену в документе
//
Процедура ПересчитатьСуммыВСтроке(ТекСтрока,
	                              Знач ПересчитыватьАвтоматическуюСкидку,
	                              Знач ОчищатьАвтоматическуюСкидку,
	                              Знач ПересчитыватьРучнуюСкидку,
	                              Знач ЦенаВключаетНДС,
								  ИмяКоличества = "КоличествоУпаковок") Экспорт
	
	СуммаБезСкидки = ТекСтрока.Цена * ТекСтрока[ИмяКоличества];
	СуммаСоСкидкой = СуммаБезСкидки;   
	
	Если ПересчитыватьРучнуюСкидку Тогда
		Если  ТекСтрока.ПроцентРучнойСкидки <> 0 Тогда
			ТекСтрока.СуммаРучнойСкидки = СуммаБезСкидки * ТекСтрока.ПроцентРучнойСкидки / 100;
			СуммаСоСкидкой              = СуммаСоСкидкой - ТекСтрока.СуммаРучнойСкидки;
		КонецЕсли;
	КонецЕсли;
		
	Если ПересчитыватьАвтоматическуюСкидку Тогда
		
		Если ОчищатьАвтоматическуюСкидку Тогда
			
			ТекСтрока.ПроцентАвтоматическойСкидки = 0;
			ТекСтрока.СуммаАвтоматическойСкидки   = 0;
			
		ИначеЕсли ТекСтрока.ПроцентАвтоматическойСкидки <> 0 Тогда
			
			ТекСтрока.СуммаАвтоматическойСкидки = СуммаБезСкидки * ТекСтрока.ПроцентАвтоматическойСкидки / 100;
			СуммаСоСкидкой                      = СуммаСоСкидкой - ТекСтрока.СуммаАвтоматическойСкидки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекСтрока.Сумма    = СуммаСоСкидкой;
	ТекСтрока.СуммаНДС = РассчитатьСуммуНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, ЦенаВключаетНДС);
	ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
	
КонецПроцедуры // ПересчитатьСуммыВСтроке()

// Рассчитывает суммовые реквизиты строки исходя из реквизита "СуммаСНДС"
//
// Параметры:
// 		СтрокаТаблицы - Строка табличной части Товары документа
// 		ЦенаВключаетНДС - Булево - Признак включения НДС в цену в документе
// 		АвтоматическаяСкидка - Булево - Истина, если в документе есть автоматические скидки
// 		РучнаяСкидка - Булево - Истина, если в документе есть ручные скидки
// 		ПересчитатьЦену - Булево - Истина, если требуется пересчитать цену
//
Процедура ПересчитатьСуммыВСтрокеПоСуммеСНДС(
	СтрокаТаблицы,
	Знач ЦенаВключаетНДС,
	Знач АвтоматическаяСкидка,
	Знач РучнаяСкидка,
	Знач ПересчитатьЦену = Ложь,
	ИмяКоличества = "КоличествоУпаковок") Экспорт
	
	СтавкаНДСЧислом = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТаблицы.СтавкаНДС);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаСНДС) Тогда
		СтрокаТаблицы.СуммаНДС = Окр(СтрокаТаблицы.СуммаСНДС * (СтавкаНДСЧислом/(1+СтавкаНДСЧислом)), 2);
		СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаСНДС - ?(ЦенаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		
		ОбщийПроцентСкидки = ?(АвтоматическаяСкидка,СтрокаТаблицы.ПроцентАвтоматическойСкидки, 0)
			+ ?(РучнаяСкидка, СтрокаТаблицы.ПроцентРучнойСкидки, 0);
		
		СуммаБезСкидки = ?(ОбщийПроцентСкидки=0, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма * 100 / (100-ОбщийПроцентСкидки));
	Иначе
		Если СтрокаТаблицы.Количество = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СуммаБезСкидки = СтрокаТаблицы.Цена*СтрокаТаблицы[ИмяКоличества];
	КонецЕсли;
	
	Если АвтоматическаяСкидка Тогда
		СтрокаТаблицы.СуммаАвтоматическойСкидки = Окр(СуммаБезСкидки*СтрокаТаблицы.ПроцентАвтоматическойСкидки/100, 2);
	КонецЕсли;
	
	Если РучнаяСкидка Тогда
		СтрокаТаблицы.СуммаРучнойСкидки = Окр(СуммаБезСкидки*СтрокаТаблицы.ПроцентРучнойСкидки/100, 2);
	КонецЕсли;
	
	Если ПересчитатьЦену И СтрокаТаблицы[ИмяКоличества] <> 0 Тогда
		СтрокаТаблицы.Цена = СуммаБезСкидки / СтрокаТаблицы[ИмяКоличества];
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыВСтрокеПоСуммеСНДС()

// Осуществляет пересчет цен и сумм в тч Товары из валюты в валюту
//
// Параметры:
// Документ                           - ДокументОбъект, для которого необходимо осуществить пересчет
// СтараяВалюта                       - СправочникСсылка.Валюты - Валюта, из которой необходимо пересчитать цены 
// НоваяВалюта                        - СправочникСсылка.Валюты - Валюта, в которую необходимо пересчитать цены
// СтруктураКурсовСтаройВалюты        - Структура - Курс и кратность валюты, из которой необходимо пересчитать цены
// СтруктураКурсовНовойВалюты         - Структура - Курс и кратность валюты, в которую необходимо пересчитать цены
// ПересчитыватьСуммы                 - Булево - Флаг, определяющий необходимость пересчета полей Сумма и СуммаНДС
// ПересчитыватьАвтоматическиеСкидки  - Булево - Флаг, определяющий необходимость пересчета автоматических скидок
// ПересчитыватьРучныеСкидки          - Булево - Флаг, определяющий необходимость пересчета ручных скидок
//
Процедура ПересчитатьСуммыВВалютуТовары(Документ,
	                                    Знач СтараяВалюта,
	                                    Знач НоваяВалюта,
	                                    Знач СтруктураКурсовСтаройВалюты,
	                                    Знач СтруктураКурсовНовойВалюты,
	                                    Знач ПересчитыватьСуммы = Истина,
	                                    Знач ПересчитыватьАвтоматическиеСкидки = Ложь,
	                                    Знач ПересчитыватьРучныеСкидки = Ложь
										) Экспорт
	
	Для Каждого ТекСтрока Из Документ.Товары Цикл
		
		ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Цена,
			СтараяВалюта,НоваяВалюта,
			СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность);
		
		Если ПересчитыватьСуммы Тогда
			ПересчитатьСуммыВСтроке(
				ТекСтрока,
				ПересчитыватьАвтоматическиеСкидки,
				Ложь,
				ПересчитыватьРучныеСкидки,
				Документ.ЦенаВключаетНДС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьСуммыВВалютуТовары()

// Осуществляет пересчет цен и сумм в тч Товары из валюты в валюту
//
// Параметры:
// 		Таблица                            - Таблица, в которой необходим пересчет
// 		ЦенаВключаетНДС                    - Булево - Истина, если цена включает ндс
// 		СтараяВалюта                       - СправочникСсылка.Валюты - Валюта, из которой необходимо пересчитать цены 
// 		НоваяВалюта                        - СправочникСсылка.Валюты - Валюта, в которую необходимо пересчитать цены
// 		СтруктураКурсовСтаройВалюты        - Структура - Курс и кратность валюты, из которой необходимо пересчитать цены
// 		СтруктураКурсовНовойВалюты         - Структура - Курс и кратность валюты, в которую необходимо пересчитать цены
// 		ПересчитыватьАвтоматическиеСкидки  - Булево - Флаг, определяющий необходимость пересчета автоматических скидок
// 		ПересчитыватьРучныеСкидки          - Булево - Флаг, определяющий необходимость пересчета ручных скидок
//
Процедура ПересчитатьСуммыТабличнойЧастиВВалюту(
	Таблица,
	ЦенаВключаетНДС,
	Знач СтараяВалюта,
	Знач НоваяВалюта,
	Знач СтруктураКурсовСтаройВалюты,
	Знач СтруктураКурсовНовойВалюты,
	Знач ПересчитыватьАвтоматическиеСкидки = Ложь,
	Знач ПересчитыватьРучныеСкидки = Ложь,
	ИмяКоличества="КоличествоУпаковок") Экспорт
	
	СуммаКРаспределению = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		Таблица.Итог("СуммаСНДС"),
		СтараяВалюта,НоваяВалюта,
		СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс,
		СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность);
	
	МассивСумм = Новый Массив;
	Для н = 0 По Таблица.Количество()-1 Цикл
		
		ТекСтрока = Таблица[н];
		ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Цена,
			СтараяВалюта,НоваяВалюта,
			СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность);
		МассивСумм.Добавить(
			РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				ТекСтрока.СуммаСНДС,
				СтараяВалюта,НоваяВалюта,
				СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс,
				СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность));
	КонецЦикла;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
	
	Если МассивСумм <> Неопределено Тогда
		
		Для н = 0 По Таблица.Количество()-1 Цикл
			ТекСтрока = Таблица[н];
			ТекСтрока.СуммаСНДС = МассивСумм[н];
			ПересчитатьСуммыВСтрокеПоСуммеСНДС(ТекСтрока, ЦенаВключаетНДС,
				ПересчитыватьАвтоматическиеСкидки, ПересчитыватьРучныеСкидки, Истина, ИмяКоличества);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыТабличнойЧастиВВалюту()

// Осуществляет пересчет сумм в тч ЭтапыГрафикаОплаты из валюты в валюту
//
// Параметры:
// Документ       - ДокументОбъект, для которого необходимо осуществить пересчет
// СуммаКРаспределениюОплаты - Число - Сумма документа, которую необходимо распределить на этапы оплаты
// СуммаКРаспределениюЗалога - Число - Сумма залога по документу, которую необходимо распределить на этапы оплаты
//
Процедура РаспределитьСуммуПоЭтапамОплаты(Документ, Знач СуммаКРаспределениюОплаты, Знач СуммаКРаспределениюЗалога) Экспорт
	
	КоличествоЭтаповОплаты    = Документ.ЭтапыГрафикаОплаты.Количество();
	ПроцентОплатыПоЭтапам     = Документ.ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа");
	ПроцентЗалогаПоЭтапам     = Документ.ЭтапыГрафикаОплаты.Итог("ПроцентЗалогаЗаТару");
	НомерЭтапа                = 1;
	РаспределеннаяСуммаОплаты = 0;
	РаспределеннаяСуммаЗалога = 0;
	
	Если КоличествоЭтаповОплаты = 0 Или ПроцентОплатыПоЭтапам = 0 Или ПроцентЗалогаПоЭтапам = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЭтап Из Документ.ЭтапыГрафикаОплаты Цикл
		
		ЭтоПоследнийЭтап = ПроцентОплатыПоЭтапам = 100 И ПроцентЗалогаПоЭтапам = 100 И КоличествоЭтаповОплаты = НомерЭтапа;
		
		Если ЭтоПоследнийЭтап Тогда
			ТекЭтап.СуммаПлатежа      = СуммаКРаспределениюОплаты - РаспределеннаяСуммаОплаты;
			ТекЭтап.СуммаЗалогаЗаТару = СуммаКРаспределениюЗалога - РаспределеннаяСуммаЗалога;
		Иначе
			ТекЭтап.СуммаПлатежа       = Окр(СуммаКРаспределениюОплаты * ТекЭтап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
			ТекЭтап.СуммаЗалогаЗаТару  = Окр(СуммаКРаспределениюЗалога * ТекЭтап.ПроцентЗалогаЗаТару / 100, 2, РежимОкругления.Окр15как20);
			РаспределеннаяСуммаОплаты  = РаспределеннаяСуммаОплаты + ТекЭтап.СуммаПлатежа;
			РаспределеннаяСуммаЗалога  = РаспределеннаяСуммаЗалога + ТекЭтап.СуммаЗалогаЗаТару;
			НомерЭтапа                 = НомерЭтапа + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьСуммуПоЭтапамОплаты()

// Осуществляет пересчет на заполненных полей "СуммаВзаиморасчетов" в указанной табличной части
//
// Параметры:
// 		Документ - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.ПоступлениеТоваровУслуг
// 		ИмяТабличнойЧасти - Строка - Имя табличная части объекта документа
//
Процедура РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(Документ, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
	
	СуммаВзаиморасчетовПоТЧ = ТабличнаяЧасть.Итог("СуммаВзаиморасчетов");
	
	Если ТабличнаяЧасть.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество() = 0
		И (Документ.СуммаВзаиморасчетов = СуммаВзаиморасчетовПоТЧ
			ИЛИ (Документ.СуммаВзаиморасчетов < СуммаВзаиморасчетовПоТЧ И СуммаВзаиморасчетовПоТЧ > 0)) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента = Документ.Валюта;
	ВалютаЗаказа = Документ.ВалютаВзаиморасчетов;
	
	Если ВалютаДокумента = ВалютаЗаказа Тогда
		
		Для Индекс = 0 По ТабличнаяЧасть.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов)
			 ИЛИ ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов <> ТабличнаяЧасть[Индекс].СуммаСНДС Тогда
				ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов = ТабличнаяЧасть[Индекс].СуммаСНДС;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Дата = ?(ЗначениеЗаполнено(Документ.Дата), Документ.Дата,ТекущаяДата());
		
		// Получение кооэффициента пересчета в валюту заказа
		КоэффициентПересчетаВВалютуЗаказа = 1;
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КурсВалютыДокумента.Курс, 1) *
		|	ЕСТЬNULL(КурсВалютыЗаказа.Кратность, 1) /
		|	(ЕСТЬNULL(КурсВалютыЗаказа.Курс, 1) *
		|	ЕСТЬNULL(КурсВалютыДокумента.Кратность, 1)) КАК КоэффициентПересчета
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаЗаказа) КАК КурсВалютыЗаказа
		|		ПО (ИСТИНА)");
		Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаЗаказа", ВалютаЗаказа);
		Запрос.УстановитьПараметр("НаДату", Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоэффициентПересчетаВВалютуЗаказа = Выборка.КоэффициентПересчета;
		КонецЕсли;
		
		// Сумму, которая должна быть распределена по табличной части,
		// 		получим из разности общей суммы взаиморасчетов
		// 		и итога по заполненным значениям колонки "СуммаВзаиморасчетов"
		СуммаКРаспределению = Документ.СуммаВзаиморасчетов - СуммаВзаиморасчетовПоТЧ;
		МассивСумм = Новый Массив;
		Для Индекс = 0 По ТабличнаяЧасть.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов) Тогда
				МассивСумм.Добавить(Окр(ТабличнаяЧасть[Индекс].СуммаСНДС * КоэффициентПересчетаВВалютуЗаказа, 2));
			КонецЕсли;
		КонецЦикла;
		
		МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
		
		ИндексМассиваСумм = 0;
		Если МассивСумм <> Неопределено Тогда
			Для Индекс=0 По ТабличнаяЧасть.Количество()-1 Цикл
				Если Не ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов) Тогда
					ТабличнаяЧасть[Индекс].СуммаВзаиморасчетов = МассивСумм[ИндексМассиваСумм];
					ИндексМассиваСумм = ИндексМассиваСумм + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРегистрацииЦенНоменклатурыВРегистрах

Процедура ОтразитьЦеныНоменклатуры(ДополнительныеСвойства,
	                               Движения,
	                               Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЦеныНоменклатуры;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияЦеныНоменклатуры            = Движения.ЦеныНоменклатуры;
	ДвиженияЦеныНоменклатуры.Записывать = Истина;
	
	ДвиженияЦеныНоменклатуры.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьЦеныНоменклатурыПоставщика(ДополнительныеСвойства,
	                                         Движения,
	                                         Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЦеныНоменклатурыПоставщиков;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЦеныНоменклатурыПоставщиков            = Движения.ЦеныНоменклатурыПоставщиков;
	ЦеныНоменклатурыПоставщиков.Записывать = Истина;
	ЦеныНоменклатурыПоставщиков.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляОбслуживанияВидовЦенЗаполняемыхПоДаннымИб

// Возвращает имена и типы полей, которые должны обязательно присутствовать
// в СКД, используемой для заполнения цен по данным ИБ
//
// Возвращаемое значение:
// Соответствие
// В ключах содержатся имена полей, в значениях - типы полей
//
Функция ПолучитьОбязательныеПоляСхемыКомпоновкиДанных() Экспорт
	
	Поля = Новый Соответствие();
	
	Поля.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Поля.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Поля.Вставить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		Поля.Вставить("Коэффициент", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Поля.Вставить("Цена",   Новый ОписаниеТипов("Число"));
	Поля.Вставить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Возврат Поля;
	
КонецФункции

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен
//
// Параметры:
// СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, которую необходимо проверить
// СообщениеОбОшибке     - Строка, содержит вводную часть сообщения об ошибке
//
// Возвращаемое значение:
// Булево
// Истина, если проверка пройдена успешно, в противном случае Ложь
//
Функция ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СообщениеОбОшибке = Неопределено) Экспорт
	
	Поля = ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
	
	Возврат ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, Поля, СообщениеОбОшибке);
	
КонецФункции

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен
//
// Параметры:
// СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, которую необходимо проверить
// СообщениеОбОшибке     - Строка, содержит вводную часть сообщения об ошибке
//
// Возвращаемое значение:
// Булево
// Истина, если проверка пройдена успешно, в противном случае Ложь
//
Функция ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, Поля, СообщениеОбОшибке = Неопределено) Экспорт
	
	Результат = Истина;
	
	Если СхемаКомпоновкиДанных <> Неопределено И СхемаКомпоновкиДанных.НаборыДанных.Количество() = 1 Тогда
		
		РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		
		Для Каждого Поле Из Поля Цикл
			Если Не ПроверитьПолеНабораДанныхСКД(РабочийНаборДанных, Поле.Ключ, Поле.Значение, СообщениеОбОшибке) Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ НСтр("ru='Схема компоновки данных для заполнения цен должна содержать один набор данных.';uk='Схема компонування даних для заповнення цін повинна містити один набір даних.'"));
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

// Устанавливаем условное оформление для вида цены
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаВидаЦены - Строка - Наименование элемента формы, содержащего вид цены,
//										  если оно отличается от "ТоварыВидЦены"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "ВидЦены",
//									если он отличается от "Объект.Товары.ВидЦены"
//
Процедура УстановитьУсловноеОформлениеВидовЦен(Форма,
											   ИмяПоляВводаВидаЦены = "ТоварыВидЦены",
											   ПутьКПолюОтбора = "Объект.Товары.ВидЦены") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаВидаЦены].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<произвольная>';uk='<довільна>'"));	
	
КонецПроцедуры

// Устанавливаем условное оформление для ставки НДС, суммы НДС, суммы с НДС
// 		в зависимости от того, облагается ли продажа НДС
//
// Параметры:
// 		Форма - Форма - Содержит данную форму
// 		ИмяПоляВводаСтавкиНДС - Строка - Наименование элемента формы, содержащего ставку НДС,
//									   		если оно отличается от "ТоварыСтавкаНДС"
// 		ИмяПоляВводаСуммыНДС - Строка - Наименование элемента формы, содержащего сумму НДС,
//									   		если оно отличается от "ТоварыСуммаНДС"
// 		ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//									   		если оно отличается от "ТоварыСуммаСНДС"
//
Процедура УстановитьУсловноеОформлениеСуммНДС(Форма,
	                                          ИмяПоляВводаСтавкиНДС = "ТоварыСтавкаНДС",
	                                          ИмяПоляВводаСуммыНДС  = "ТоварыСуммаНДС",
	                                          ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСтавкиНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыНДС].Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыСНДС].Имя);

	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;


	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалогообложениеНДСПоУмолчанию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалогообложениеНДСПоУмолчанию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаОсвобожденаОтНДС;
	

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
	
КонецПроцедуры

// Устанавливаем условное оформление для поля сумма с НДС 
//     в зависимости от флага "ЦенаВключаетНДС"
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаСуммыСНДС - Строка - Наименование элемента формы, содержащего сумму с НДС,
//										  если оно отличается от "ТоварыСуммаСНДС"
//
Процедура УстановитьУсловноеОформлениеЦенаВключаетНДС(Форма,
													  ИмяПоляВводаСуммыСНДС = "ТоварыСуммаСНДС") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСуммыСНДС].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыФормированияЗапросовПроверкиРегистрацииЦен

// Формирует запрос для формирования временной таблицы цен
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДеревоЦен - ТаблицаЗначений - таблица цен, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен(ТекстЗапроса,
	                                                             ПараметрыЗапроса,
	                                                             ДеревоЦен)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки      КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура     КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика   КАК Характеристика,
		|	ВременнаяТаблицаТовары.ЭтоГруппа        КАК ЭтоГруппа
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&ДеревоЦен КАК ВременнаяТаблицаТовары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|";
		
	ПараметрыЗапроса.Вставить("ДеревоЦен", ДеревоЦен);
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен()

// Формирует запрос для формирования временной таблицы цен без дублей строк
//
// Параметры:
// ТекстЗапроса - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - структура, содержащая параметры запроса
// ДеревоЦен - ТаблицаЗначений
//
Процедура СформироватьЗапросВременнаяТаблицаЦенБезДублейДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаТовары.НомерСтроки) КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура          КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика        КАК Характеристика
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТоварыБезДублей
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен()

// Формирует запрос для проверки наличия незаполненной номенклатуры в таблице цен
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьТоваровДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура   КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.ЭтоГруппа      КАК ЭтоГруппа,
		|	ВЫБОР
		|		КОГДА
		|			ДокументТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияНоменклатуры,
		|	ВЫБОР
		|		КОГДА
		|			ДокументТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			И НЕ ДокументТовары.ЭтоГруппа
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХарактеристики
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	ИЛИ (ДокументТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И НЕ ДокументТовары.ЭтоГруппа)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросКорректностьТоваровДляРегистрацииЦен()

// Формирует запрос для проверки наличия дублей заполнения таблицы цен
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеДублейДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки)    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура             КАК Номенклатура,
		|	ДокументТовары.Характеристика           КАК Характеристика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО (*) > 1
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросНаличиеДублейДляРегистрацииЦен()

// Формирует запрос для проверки наличия зарегистрированных ранее цен
//
// Параметры:
// ТекстЗапроса          - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса      - Структура - структура, содержащая параметры запроса
// ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, к которому необходимо сформировать запрос
// ВидыЦен               - Массив - массив видов цен для проверки наличия ранее установленных цен
//
Процедура СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен(ТекстЗапроса,
	                                                                 ПараметрыЗапроса,
	                                                                 ДокументУстановкиЦен,
	                                                                 ВидыЦен)
	
	Текст =
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ), ЦеныНоменклатуры.Период, СЕКУНДА)+1 КАК НомерВПределахДня,
	|	ВременнаяТаблицаТовары.НомерСтроки  КАК НомерСтроки,
	|	ЦеныНоменклатуры.Номенклатура       КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика     КАК Характеристика,
	|	&ПолеВидЦены                        КАК ВидЦены
	|ИЗ
	|	&Таблица КАК ЦеныНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаТоварыБезДублей КАК ВременнаяТаблицаТовары
	|ПО
	|	ЦеныНоменклатуры.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
	|	И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|
	|ГДЕ
	|	ЦеныНоменклатуры.Период = &ДатаДокумента
	|	И ЦеныНоменклатуры.Регистратор <> &УстановкаЦен
	|	И (ЦеныНоменклатуры.Номенклатура, ЦеныНоменклатуры.Характеристика) В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДокументТовары.Номенклатура   КАК Номенклатура,
	|			ДокументТовары.Характеристика КАК Характеристика
	|		ИЗ
	|			ВременнаяТаблицаТовары КАК ДокументТовары)
	|	И &ПолеВидЦены В (&ВидыЦен)
	|;
	|";
	
	Если ТипЗнч(ДокументУстановкиЦен.Ссылка) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		Текст = СтрЗаменить(Текст, "&Таблица", "РегистрСведений.ЦеныНоменклатуры");
		Текст = СтрЗаменить(Текст, "&ПолеВидЦены", "ЦеныНоменклатуры.ВидЦены");
	Иначе
		Текст = СтрЗаменить(Текст, "&Таблица", "РегистрСведений.ЦеныНоменклатурыПоставщиков");
		Текст = СтрЗаменить(Текст, "&ПолеВидЦены", "ЦеныНоменклатуры.ВидЦеныПоставщика");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Текст;
	
	ПараметрыЗапроса.Вставить("УстановкаЦен",  ДокументУстановкиЦен.Ссылка);
	ПараметрыЗапроса.Вставить("ДатаДокумента", ДокументУстановкиЦен.Дата);
	ПараметрыЗапроса.Вставить("ВидыЦен",       ВидыЦен);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахРегистрацииЦен

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры
//
// Параметры:
// Выборка               - ВыборкаИзРезультатаЗапроса
// ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, для которого необходимо вывести сообщения об ошибках
// Отказ                 - Булево - флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦен(Выборка,
	                                                            ДокументУстановкиЦен,
	                                                            Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьОшибкиЗаполненияНоменклатуры Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура"" в строке ""%НомерСтроки%"" списка ""Таблица цен""';uk='Не заповнена колонка ""Номенклатура"" в рядку ""%НомерСтроки%"" списку ""Таблиця цін""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументУстановкиЦен.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", Выборка.НомерСтроки, "Номенклатура"),
				,
				Отказ);
			
			КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияХарактеристики Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Характеристика"" в строке ""%НомерСтроки%"" списка ""Таблица цен""';uk='Не заповнена колонка ""Характеристика"" в рядку ""%НомерСтроки%"" списку ""Таблиця цін""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументУстановкиЦен.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", Выборка.НомерСтроки, "Характеристика"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦен()

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры
//
// Параметры:
// Выборка               - ВыборкаИзРезультатаЗапроса
// ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, для которого необходимо вывести сообщения об ошибках
// Отказ                 - Булево - флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеДублейТоваровДляРегистрацииЦен(Выборка,
	                                                             ДокументУстановкиЦен,
	                                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			
			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" повторяется';uk='Номенклатура ""%Номенклатура%"" з характеристикою ""%Характеристика%"" повторюється'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);
			
		Иначе
			
			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" повторяется';uk='Номенклатура ""%Номенклатура%"" повторюється'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
			
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахНаличиеДублейТоваровДляРегистрацииЦен()

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры
//
// Параметры:
// Выборка               - ВыборкаИзРезультатаЗапроса
// ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, для которого необходимо вывести сообщения об ошибках
// Отказ                 - Булево - флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеУстановленныхЦенДляРегистрацииЦен(Выборка,
	                                                                ДокументУстановкиЦен,
	                                                                Отказ)

	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			
			ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" по виду цен ""%ВидЦен%"" на дату %ДатаДокумента%, номер в пределах дня %НомерВПределахДня% уже установлена';uk='Ціна на номенклатуру ""%Номенклатура%"" з характеристикою ""%Характеристика%"" за видом цін ""%ВидЦен%"" на дату %ДатаДокумента%, номер у межах дня %НомерВПределахДня% вже встановлена'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%",         Выборка.ВидЦены);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаДокумента%",     Формат(ДокументУстановкиЦен.Дата, "ДФ=dd.MM.yy"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерВПределахДня%", Выборка.НомерВПределахДня);
			
		Иначе
			
			ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" по виду цен ""%ВидЦен%"" на дату %ДатаДокумента%, номер в пределах дня %НомерВПределахДня% уже установлена';uk='Ціна на номенклатуру ""%Номенклатура%"" за видом цін ""%ВидЦен%"" на дату %ДатаДокумента%, номер у межах дня %НомерВПределахДня% вже встановлена'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%",         Выборка.ВидЦены);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаДокумента%",     Формат(ДокументУстановкиЦен.Дата, "ДФ=dd.MM.yy"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерВПределахДня%", Выборка.НомерВПределахДня);
			
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);
		
	КонецЦикла;

КонецПроцедуры // СообщитьОбОшибкахНаличиеУстановленныхЦенДляРегистрацииЦен()

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиРегистрацииЦенПоставщика

// Формирует запрос для формирования временной таблицы цен
//
// Параметры:
// ТекстЗапроса          - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса      - Структура - структура, содержащая параметры запроса
// ДокументУстановкиЦен  - ДокументОбъект.УстановкаЦенНоменклатуры - документ, к которому необходимость сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦенПоставщика(ТекстЗапроса,
	                                                                       ПараметрыЗапроса,
	                                                                       Товары)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки            КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
		|	ВременнаяТаблицаТовары.ВидЦены                КАК ВидЦеныПоставщика
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК ВременнаяТаблицаТовары
		|;
		|";
		
		ПараметрыЗапроса.Вставить("Товары", Товары);
	
КонецПроцедуры // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦенПоставщика()

// Формирует запрос для проверки корректности заполнения тч Товары документа УстановкаЦенНоменклатурыПартнера
//
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьТоваровДляРегистрацииЦенПоставщика(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки) КАК НомерСтроки,
		|	ДокументТовары.Номенклатура          КАК Номенклатура,
		|	ДокументТовары.Характеристика        КАК Характеристика,
		|	ДокументТовары.ВидЦеныПоставщика     КАК ВидЦеныПоставщика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.ВидЦеныПоставщика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";
	
КонецПроцедуры // СформироватьЗапросКорректностьТоваровДляРегистрацииЦенПоставщика()

// Формирует текст запроса для проверки тч Товары на наличие дублей номенклатуры поставщика
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияНоменклатурыПоставщика(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВложенныйЗапросПоДублям.НомерСтроки)         КАК НомерСтроки,
		|	ВложенныйЗапросПоДублям.НоменклатураПоставщика        КАК НоменклатураПоставщика
		|ИЗ (
		|	ВЫБРАТЬ
		|		МАКСИМУМ(ДокументТовары.НомерСтроки)              КАК НомерСтроки,
		|		ДокументТовары.НоменклатураПоставщика             КАК НоменклатураПоставщика,
		|		ДокументТовары.Номенклатура                       КАК Номенклатура,
		|		ДокументТовары.Характеристика                     КАК Характеристика
		|	ИЗ
		|		ВременнаяТаблицаТовары КАК ДокументТовары
		|	ГДЕ
		|		ДокументТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И ДокументТовары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка)
		|		И ДокументТовары.НоменклатураПоставщика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	СГРУППИРОВАТЬ ПО
		|		ДокументТовары.НоменклатураПоставщика,
		|		ДокументТовары.Номенклатура,
		|		ДокументТовары.Характеристика
		|) КАК ВложенныйЗапросПоДублям
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапросПоДублям.НоменклатураПоставщика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(*) > 1
		|;
		|";
		
КонецПроцедуры // СформироватьЗапросКорректностьЗаполненияНоменклатурыПоставщика()

#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахРегистрацииЦенПоставщика

Процедура СообщитьПользователюОбОшибкеРегистрацииЦенПоставщика(ТекстОшибки, ДокументУстановкиЦен, НомерСтроки, Поле, Отказ)
	
	Если ТипЗнч(ДокументУстановкиЦен) = Тип("ДанныеФормыСтруктура") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", НомерСтроки, Поле),
			,
			Отказ);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, Поле),
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатурыПоставщика
//
// Параметры:
// Выборка               - ВыборкаИзРезультатаЗапроса
// ДокументУстановкиЦен  - ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика - документ, для которого необходимо вывести сообщения об ошибках
// Отказ                 - Булево - флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦенПоставщика(Выборка,
	                                                                      ДокументУстановкиЦен,
	                                                                      Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВидЦеныПоставщика) Тогда
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" с видом цены ""%ВидЦеныПоставщика%"" повторяется';uk='Номенклатура ""%Номенклатура%"" з характеристикою ""%Характеристика%"" з видом ціни ""%ВидЦеныПоставщика%"" повторюється'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",      Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",    Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныПоставщика%", Выборка.ВидЦеныПоставщика);
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с видом цены ""%ВидЦеныПоставщика%"" повторяется';uk='Номенклатура ""%Номенклатура%"" з видом ціни ""%ВидЦеныПоставщика%"" повторюється'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",      Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныПоставщика%", Выборка.ВидЦеныПоставщика);
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" повторяется';uk='Номенклатура ""%Номенклатура%"" з характеристикою ""%Характеристика%"" повторюється'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" повторяется';uk='Номенклатура ""%Номенклатура%"" повторюється'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СообщитьПользователюОбОшибкеРегистрацииЦенПоставщика(ТекстОшибки, ДокументУстановкиЦен, Выборка.НомерСтроки, "Номенклатура", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦенПоставщика()

// Выводит сообщения об ошибках наличия дублей в тч Товары документа закупки
//
// Параметры:
// Выборка              - Выборка из результата запроса
// ДокументУстановкиЦен - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ                - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПоставщика(Выборка,
	                                                                    ДокументУстановкиЦен,
	                                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='В строке не может быть выбрана ""%НоменклатураПоставщика%"", т.к. в предыдущих строках для номенклатуры поставщика указано другое соответствие номенклатуре';uk='У рядку не може бути вибрана ""%НоменклатураПоставщика%"", тому що в попередніх рядках для номенклатури постачальника зазначена інша відповідність номенклатурі'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НоменклатураПоставщика%", Выборка.НоменклатураПоставщика);
		
		СообщитьПользователюОбОшибкеРегистрацииЦенПоставщика(ТекстОшибки, ДокументУстановкиЦен, Выборка.НомерСтроки, "НоменклатураПоставщика", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПоставщика()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбслуживанияВидовЦенЗаполняемыхПоДаннымИб

// Проверяет набор данных СКД, что он содержит заданное поле соответствующего типа
//
// Параметры:
// НаборДанных         - набор данных, который необходимо проверить
// ИмяПоля             - Строка, содержащее имя поля
// ТипЗначения         - ОписаниеТипов, тип который должно иметь поле СКД
// СообщениеОбОшибке   - Строка, содержит вводную часть сообщения об ошибке
//
// Возвращаемое значение:
// Булево
// Истина, если набор данных содержит требуемое поле, в противном случае Ложь
//
Функция ПроверитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения, СообщениеОбОшибке = Неопределено)
	
	Поле = НаборДанных.Поля.Найти(ИмяПоля);
	
	Если Поле = Неопределено Тогда
		Результат = Ложь;
	Иначе
		ТипыПоля       = Поле.ТипЗначения.Типы();
		ДопустимыеТипы = ТипЗначения.Типы();
		
		Результат = Истина;
		Если Поле <> Неопределено И ТипыПоля.Количество() = ДопустимыеТипы.Количество() Тогда
			
			Для Каждого Тип Из ДопустимыеТипы Цикл
				Если ТипыПоля.Найти(Тип) = Неопределено Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ СтрЗаменить(СтрЗаменить(НСтр("ru='Схема компоновки данных для заполнения цен должна содержать поле ""%ИмяПоля%"" с типом значения ""%ТипЗначения%"".';uk='Схема компонування даних для заповнення цін повинна містити поле ""%ИмяПоля%"" з типом значення ""%ТипЗначения%"".'"), "%ИмяПоля%", ИмяПоля), "%ТипЗначения%", ТипЗначения));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

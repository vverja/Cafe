#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Выполняет тестирование операций закрытия месяца.
// Входными параметрами принимает строку запуска.
// Возвращает успех/не успех тестирования.
// Если не успех, то смотри в журнале регистрации сообщения об ошибке.
Функция Тестирование(ВходныеПараметры) Экспорт
	Если ВходныеПараметры.Свойство("ПараметрыЗапуска") Тогда // программный запуск, есть параметры запуска
		ПараметрыТестирования = РазобратьСтрокуВПараметры(ВходныеПараметры.ПараметрыЗапуска);
		АвтоТестирование = Истина;
	Иначе // интерактивный запуск
		ПараметрыТестирования = ВходныеПараметры;
		АвтоТестирование = Ложь;
	КонецЕсли;
	
	Если АвтоТестирование Тогда
		РезультатТестирования = ТестироватьДоКонца(ПараметрыТестирования);
	Иначе
		РезультатТестирования = Новый Структура("Расхождения");
		РезультатТестирования.Расхождения = ТестироватьУказанныйМесяц(ПараметрыТестирования.Период, ПараметрыТестирования); // возврат расхождений
		ПоместитьВоВременноеХранилище(РезультатТестирования, ПараметрыТестирования.АдресХранилища);
	КонецЕсли;
	Возврат РезультатТестирования;
КонецФункции

// Запускает тестирование регламентных заданий по закрытию месяца в фоновом задании.
//
// Параметры:
//	ПараметрыТестирования - Структура - Параметры закрытия месяца: период, организация к закрытию.
//
// ВозвращаемоеЗначение:
//	Булево - Истина, в случае если фоновое задание запущено; Ложь, если возник сбой при запуске задания или же уже есть активные задания.
Функция ЗапуститьТестированиеВФоне(ПараметрыТестирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = ЗакрытиеМесяцаУТВызовСервера.ИмяФоновогоЗадания();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru='Выполняется закрытие месяца';uk='Виконується закриття місяця'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыТестирования);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("Обработки.ТестированиеОперацийЗакрытийМесяца.Тестирование");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	Возврат Истина;
КонецФункции

Функция ПараметрыЗапускаТестирования()
	ПараметрыЗадания = Новый Структура("СписокОрганизаций, Организация, МассивОпераций, ПериодРегистрации, 
										|Период, Тестирование, КонтрольныеРегистры, АдресХранилища");
	ПараметрыЗадания.СписокОрганизаций = Новый СписокЗначений;
	ПараметрыЗадания.Организация = Неопределено;
	ПараметрыЗадания.МассивОпераций = Новый Массив;
	ПараметрыЗадания.ПериодРегистрации = ТекущаяДата();
	ПараметрыЗадания.Период = ТекущаяДата();
	ПараметрыЗадания.Тестирование = Истина;
	ПараметрыЗадания.КонтрольныеРегистры = КонтрольныеРегистры();
	ПараметрыЗадания.АдресХранилища = Неопределено;
	Возврат ПараметрыЗадания;
КонецФункции

#Область МетаданныеКТестированию

// Список регистров заданий, в которых при тестировании будут скинуты границы.
// Данные регистры заданий используются при контроле актуальности в форме закрытия месяца.
//
// ВозвращаемоеЗначение:
//	Массив - массив имен метаданных.
Функция РегистрыЗаданий() Экспорт
	РегистрыЗаданий = Новый Массив();
	РегистрыЗаданий.Добавить("РегистрСведений.ЗаданияКРасчетуСебестоимости");
	РегистрыЗаданий.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами");
	РегистрыЗаданий.Добавить("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками");
	
	Возврат РегистрыЗаданий;
КонецФункции

// Список регистров, по которым контролируется движения до выполнения закрытия месяца и после.
// В случае обнаружения различий, они фиксируются и выводятся в отчет "Результаты тестирования".
//
// ВозвращаемоеЗначение:
//	Массив - массив имен метаданных.
Функция КонтрольныеРегистры() Экспорт
	РегистрыКонтроля = Новый Массив();
	
	// Взаиморасчеты
	РегистрыКонтроля.Добавить("РегистрНакопления.РасчетыСКлиентамиПоДокументам");
	РегистрыКонтроля.Добавить("РегистрНакопления.РасчетыСПоставщикамиПоДокументам");
	
	// Себестоимость
	РегистрыКонтроля.Добавить("РегистрНакопления.СебестоимостьТоваров");
	РегистрыКонтроля.Добавить("РегистрНакопления.ВыручкаИСебестоимостьПродаж");
	РегистрыКонтроля.Добавить("РегистрНакопления.Закупки");
	РегистрыКонтроля.Добавить("РегистрНакопления.ДвиженияНоменклатураНоменклатура");
	РегистрыКонтроля.Добавить("РегистрНакопления.ПрочиеДоходы");
	РегистрыКонтроля.Добавить("РегистрНакопления.ПрочиеАктивыПассивы");
	РегистрыКонтроля.Добавить("РегистрНакопления.ФинансовыеРезультаты");
	
	// ПартионныйУчет
	РегистрыКонтроля.Добавить("РегистрНакопления.ПартииТоваровОрганизаций");
	РегистрыКонтроля.Добавить("РегистрНакопления.ПартииТоваровПереданныеНаКомиссию");
	РегистрыКонтроля.Добавить("РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров");
	РегистрыКонтроля.Добавить("РегистрНакопления.ПартииПроизводственныхЗатрат");
	РегистрыКонтроля.Добавить("РегистрНакопления.ПартииЗатратНаВыпуск");
	РегистрыКонтроля.Добавить("РегистрНакопления.ПрочиеРасходы");
	РегистрыКонтроля.Добавить("РегистрНакопления.ДвиженияНоменклатураДоходыРасходы");
	
	//НДС
	РегистрыКонтроля.Добавить("РегистрНакопления.НДСЗаписиКнигиПокупок");
	РегистрыКонтроля.Добавить("РегистрНакопления.НДСЗаписиКнигиПродаж");
	
	Возврат РегистрыКонтроля;
КонецФункции

#КонецОбласти // МетаданныеКТестированию

// Возвращает период самого первого движения по регистру "Себестоимость товаров".
// 
// ВозвращаемоеЗначение:
//	Период - Дата.
Функция СебестоимостьМинПериод() Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МИНИМУМ(ДД.Период) КАК Период
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК ДД
	|ИМЕЮЩИЕ
	|	НЕ (МИНИМУМ(ДД.Период) ЕСТЬ NULL)
	|");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Период = НачалоМесяца(ТекущаяДата());
	Иначе
		Период = НачалоМесяца(Результат.Выгрузить()[0].Период);
	КонецЕсли;
	
	Возврат Период;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ТестироватьДоКонца(ПараметрыТестирования)
	РезультатТестирования = Новый Структура("Отказ", Ложь);
	ТестируемыйМесяц = ПараметрыТестирования.НачалоРасчета;
	КонецТестирования = ПараметрыТестирования.КонецРасчета;
	
	ФайлОтчета = Неопределено;
	ИмяФайла = ПолучитьИмяФайла(Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss"), Строка("_" + Новый УникальныйИдентификатор()));
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + ИмяФайла;
	
	ПараметрыЗапуска = ПараметрыЗапускаТестирования();
	Пока ТестируемыйМесяц < КонецТестирования Цикл
		ПараметрыЗапуска.Период = ТестируемыйМесяц;
		ПараметрыЗапуска.ПериодРегистрации = ТестируемыйМесяц;
		Попытка
			Расхождения = ТестироватьУказанныйМесяц(ТестируемыйМесяц, ПараметрыЗапуска);
			Если ПараметрыЗапуска.Отказ Тогда
				РезультатТестирования.Отказ = Истина;
				СообщитьОбОшибке();
				Прервать;
			КонецЕсли;
		Исключение
			РезультатТестирования.Отказ = Истина;
			СообщитьОбОшибке();
			ВызватьИсключение;
		КонецПопытки;
		ЗафиксироватьРасхождения(ФайлОтчета, Расхождения, ТестируемыйМесяц, ПутьКФайлу);
		Если ЗначениеЗаполнено(Расхождения) И ПараметрыТестирования.ОстанавливатьсяПриРасхождениях Тогда
			Прервать;
		КонецЕсли;
		ТестируемыйМесяц = КонецМесяца(ТестируемыйМесяц) + 1;
	КонецЦикла;
	ЗаписатьФайлОтчета(ФайлОтчета);
	Если ФайлОтчета <> Неопределено Тогда
		ДанныеТестирования = Новый ДвоичныеДанные(ПутьКФайлу);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеТестирования, Новый УникальныйИдентификатор);
		РезультатТестирования.Вставить("АдресХранилища", АдресХранилища);
		РезультатТестирования.Вставить("ЕстьРасхождения", Истина);
		УдалитьФайлОтчета(ПутьКФайлу);
		УдалитьВременныеФайлы();
	КонецЕсли;
	Возврат РезультатТестирования;
КонецФункции

Функция ПолучитьИмяФайла(ДатаЗапуска = "", Идентификатор = "")
	Шаблон = "Complete_%DataTest%%UID%.xml";
	ИмяФайла = СтрЗаменить(Шаблон, "%DataTest%", ДатаЗапуска);
	ИмяФайла = СтрЗаменить(ИмяФайла, "%UID%", Идентификатор);
	Возврат ИмяФайла;
КонецФункции

Процедура СообщитьОбОшибке()
	ЗаписьЖурналаРегистрации(НСтр("ru='Тестирование.Ошибка тестирования';uk='Тестування.Помилка тестування'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПроцедуры
	
Функция СоздатьФайлОтчета(ПутьКФайлу) Экспорт
	ФайлОтчета = Новый ЗаписьXML;
	ФайлОтчета.ОткрытьФайл(ПутьКФайлу);
	
	ФайлОтчета.ЗаписатьОбъявлениеXML();
	
	ФайлОтчета.ЗаписатьНачалоЭлемента("Корневой");
	Возврат ФайлОтчета;
КонецФункции

Процедура ЗафиксироватьРасхождения(ФайлОтчета, Расхождения, ТекущийМесяц, ПутьКФайлу)
	Если ЗначениеЗаполнено(Расхождения) Тогда
		Если ФайлОтчета = Неопределено Тогда
			ФайлОтчета = СоздатьФайлОтчета(ПутьКФайлу);
		КонецЕсли;
		ФайлОтчета.ЗаписатьНачалоЭлемента("Период");
		СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ТекущийМесяц);
		ФайлОтчета.ЗаписатьТекст(СтрокаXML);
		Для Каждого Строка Из Расхождения Цикл
			Если Строка.Ключ = "КоличествоРасхождений" Тогда
				Продолжить;
			КонецЕсли;
			
			ФайлОтчета.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			СтрокаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Строка.Ключ); // имя регистра
			ФайлОтчета.ЗаписатьТекст(СтрокаXML);
			
			ФайлОтчета.ЗаписатьНачалоЭлемента("Записи");
			ФайлОтчета.ЗаписатьТекст(Строка.Значение);
			ФайлОтчета.ЗаписатьКонецЭлемента(); // записи

			ФайлОтчета.ЗаписатьКонецЭлемента(); // имя регистра
		КонецЦикла;
		ФайлОтчета.ЗаписатьКонецЭлемента(); // Период
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьФайлОтчета(ФайлОтчета)
	Если ФайлОтчета <> Неопределено Тогда
		ФайлОтчета.ЗаписатьКонецЭлемента(); // Корневой
		ФайлОтчета.Закрыть();
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьФайлОтчета(ПутьКФайлу)
	УдалитьФайлы(ПутьКФайлу);
КонецПроцедуры

Процедура УдалитьВременныеФайлы()
	Граница = НачалоДня(ТекущаяДатаСеанса() - 86401); // Считаем, что тестирование не идет больше суток
	МассивФайлов = НайтиФайлы(КаталогВременныхФайлов(), ПолучитьИмяФайла("*"), Ложь);
	Для Каждого ВременныйФайл Из МассивФайлов Цикл
		Если ВременныйФайл.ПолучитьВремяИзменения() < Граница Тогда // файл несколько дней не изменялся
			Попытка
				УдалитьФайлы(ВременныйФайл.ПолноеИмя);
			Исключение
				// Специальная обработка не требуется. Файл занят другим приложенем, будет удален в другом сеансе.
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ТестироватьУказанныйМесяц(Месяц, ПараметрыРасчета)
	КонтрольныеРегистры = КонтрольныеРегистры();
	Расхождения = Неопределено;
		
	ВременныеТаблицы = Тестирование.СохранитьЭталонныеДанные(КонтрольныеРегистры, Месяц);
	
	УстановитьЗаданияКРасчетуНаДату(Месяц);
	
	ЗакрытиеМесяцаУТВызовСервера.РассчитатьЭтапы(ПараметрыРасчета);
	
	Расхождения = Тестирование.СравнитьСЭталоннымиДанными(ВременныеТаблицы, КонтрольныеРегистры, Месяц);
	
	Возврат Расхождения;
КонецФункции

Процедура УстановитьЗаданияКРасчетуНаДату(Период)
	РегистрыЗаданий = РегистрыЗаданий();
	Для Каждого РегистрЗаданий Из РегистрыЗаданий Цикл
		Если Метаданные.НайтиПоПолномуИмени(РегистрЗаданий) = Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости Тогда
			РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(Период); // по всем организациям
		Иначе
			СтрокиКонтроля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РегистрЗаданий, ".", Ложь);
			Набор = РегистрыСведений[СтрокиКонтроля[1]].СоздатьНаборЗаписей();
			Задание = Набор.Добавить();
			Задание.Месяц = Период;
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция РазобратьСтрокуВПараметры(ПараметрЗапуска)
	
	СтруктураПараметров = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(ПараметрЗапуска);
	
	Если СтруктураПараметров.Свойство("РабочийКаталог") Тогда
		РабочийКаталог = СтруктураПараметров.РабочийКаталог;
	Иначе
		РабочийКаталог = КаталогВременныхФайлов() 
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("НачалоРасчета") Тогда
		НачалоРасчета = Дата(СтруктураПараметров.НачалоРасчета);
	Иначе
		НачалоРасчета = СебестоимостьМинПериод();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("КонецРасчета") Тогда
		КонецРасчета = Дата(СтруктураПараметров.КонецРасчета);
	Иначе
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса()) + 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОстанавливатьсяПриРасхождениях") Тогда
		ОстанавливатьсяПриРасхождениях = Булево(СтруктураПараметров.ОстанавливатьсяПриРасхождениях);
	КонецЕсли;
	
	ПараметрыТестирования = Новый Структура();
	ПараметрыТестирования.Вставить("НачалоРасчета", НачалоРасчета);
	ПараметрыТестирования.Вставить("КонецРасчета", КонецРасчета);
	ПараметрыТестирования.Вставить("РабочийКаталог", РабочийКаталог);
	ПараметрыТестирования.Вставить("ОстанавливатьсяПриРасхождениях", ОстанавливатьсяПриРасхождениях);
	
	Возврат ПараметрыТестирования;
КонецФункции

#КонецОбласти

#КонецЕсли

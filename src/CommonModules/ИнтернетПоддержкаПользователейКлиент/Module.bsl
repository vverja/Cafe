
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователейКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет подключение к сервису Интернет-поддержки: ввод логина и пароля
// пользователя для входа на портал поддержки пользователей.
// При успешном завершении возвращаются введенные пользователем логин и пароль
// через объект ОписаниеОповещения.
//
// Параметры:
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик оповещения о
//		завершении. В обработчик оповещения возвращается значение:
//			Неопределено - при нажатии пользователем кнопки Отмена;
//			Структура, при успешном вводе логина и пароля.
//			Поля структуры:
//				* Логин - Строка - введенный логин;
//				* Пароль - введенный пароль;
//	ВладелецФормы - УправляемаяФорма - владелец формы подключения
//		Интернет-поддержки. Т.к. форма подключения Интернет-поддержки открывается
//		в режиме "Блокировать окно владельца", рекомендуется заполнять
//		значение этого параметра;
//
Процедура ПодключитьИнтернетПоддержкуПользователей(
	ОповещениеОЗавершении = Неопределено,
	ВладелецФормы = Неопределено) Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено Тогда
		
		ОповещениеАвторизацияНедоступна = Новый ОписаниеОповещения(
			"ПриНедоступностиПодключенияИПП",
			ЭтотОбъект,
			ОповещениеОЗавершении);
		
		ПоказатьПредупреждение(
			ОповещениеАвторизацияНедоступна,
			НСтр("ru='Использование Интернет-поддержки пользователей недоступно при работе в модели сервиса.';uk='Використання Інтернет-підтримки користувачів недоступно при роботі в моделі сервісу.'"));
		Возврат;
		
	КонецЕсли;
	
	// Проверить права пользователя для интерактивной авторизации
	Если НЕ ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ОповещениеАвторизацияНедоступна = Новый ОписаниеОповещения(
			"ПриНедоступностиПодключенияИПП",
			ЭтотОбъект,
			ОповещениеОЗавершении);
		
		ПоказатьПредупреждение(
			ОповещениеАвторизацияНедоступна,
			НСтр("ru='Недостаточно прав для подключения Интернет-поддержки.';uk='Недостатньо прав для підключення Інтернет-підтримки.'"));
		Возврат;
		
	КонецЕсли;
	
	// Открыть форму подключения ИПП
	ОткрытьФорму("ОбщаяФорма.ПодключениеИнтернетПоддержки",
		Новый Структура(
			"ЗаголовокКнопкиОК, ЗапомнитьПароль",
			Неопределено,
			Истина),
		ВладелецФормы,
		,
		,
		,
		ОповещениеОЗавершении);
	
КонецПроцедуры

// Открывает страницу Портала ИТС для отправки сообщения в службу
// технической поддержки.
// В параметрах метода на страницу передаются данные заполнения.
//
// Параметры:
//	Тема - Строка - тема сообщения;
//	Тело - Строка - тело сообщения;
//	Получатель - Строка - условное имя получателя сообщения. Возможные значения:
//		- "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
//			необходимый адрес выбирается в соответствии с настройками доменной зоны
//			серверов Интернет-поддержки;
//		- "taxcom" - соответствует адресу "taxcom@1c.ru";
//	Вложения - Массив - массив значений типа Структура, файлы вложений.
//		Важно: допускаются только текстовые вложения (*.txt);
//		Поля структуры элемента вложения:
//			* Представление - Строка - представление вложения. Например:
//				"Вложение 1.txt";
//			Одно из полей:
//			* ИмяФайла - Строка - полное имя файла вложения;
//			* Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//			* Текст - Строка - текст вложения;
//		К вложениям автоматически добавляется техническая информация о программе;
//	ОповещениеОЗавершении - ОписаниеОповещения - метод, в который должен быть
//		передан результат отправки сообщения. В метод передается значение типа
//		Булево: Истина, данные сообщения переданы успешно,
//			Ложь - в противном случае.
//
// Возвращаемое значение:
//	Булево - Истина, если данные сообщения были переданы успешно,
//		Ложь - в противном случае.
//
Процедура ОтправитьСообщениеВСлужбуТехническойПоддержки(
	Тема,
	Тело,
	Получатель = "webIts",
	Вложения = Неопределено,
	ОповещениеОЗавершении = Неопределено) Экспорт
	
	СлужебнаяОтправитьСообщениеВТехПоддержку(
		Тема,
		Тело,
		Получатель,
		Вложения,
		,
		,
		,
		ОповещениеОЗавершении);
	
КонецПроцедуры

// Открывает форму настройки параметров Интернет-поддержки пользователей.
// Параметры:
//	ВладелецФормы - УправляемаяФорма, Неопределено - владелец открываемой формы
//	БлокироватьОкноВладельца - Булево - Истина, если форма должна быть открыта
//		в режиме блокирования окна владельца.
//
// Возвращаемое значение:
//	УправляемаяФорма - открытая форма параметров Интернет-поддержки
//		пользователей.
//
Функция ОткрытьФормуНастроекПараметровПодключения(
	ВладелецФормы = Неопределено,
	БлокироватьОкноВладельца = Истина) Экспорт
	
	РежимОткрытияОкна = ?(БлокироватьОкноВладельца,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца,
		РежимОткрытияОкнаФормы.Независимый);
	
	Возврат ОткрытьФорму("ОбщаяФорма.НастройкиСоединенияССерверомИнтернетПоддержки",
		,
		ВладелецФормы,
		Ложь,
		,
		,
		,
		РежимОткрытияОкна);
	
КонецФункции

// Определяет, зарегистрирована ли текущая конфигурация в сервисе
// Интернет-поддержки.
// Проверка выполняется по значению свойства Метаданные.Имя.
//
// Параметры:
//	ОшибкаОбращенияКВебСервису - Булево - в параметре возвращается Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//			произошла ошибка;
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	Если НастройкиСоединения.УстанавливатьПодключениеНаСервере Тогда
		КонфигурацияЗарегистрирована = ИнтернетПоддержкаПользователейВызовСервера.КонфигурацияЗарегистрированаВСервисеИПП(
			ОшибкаОбращенияКВебСервису);
	Иначе
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.КонфигурацияЗарегистрированаВСервисеИПП(
			ОшибкаОбращенияКВебСервису);
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Обработка событий приложения.

// Важно - обработчик должен вызываться из методов:
// МодульУправляемогоПриложения.ПередНачаломРаботыСистемы()
// и МодульОбычногоПриложения.ПередНачаломРаботыСистемы().
//
// Обработчик, вызываемый перед началом работы системы.
//
Процедура ПередНачаломРаботыСистемы() Экспорт
	
	// Подключение обработчика запроса настроек клиента лицензирования
	Попытка
		Если ИнтернетПоддержкаПользователейВызовСервера.ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
			КлиентЛицензированияКлиент.ПодключитьОбработчикБИПДляЗапросаНастроекКлиентаЛицензирования();
		КонецЕсли;
	Исключение
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось подключить обработчик запроса настроек клиента лицензирования. %1';uk='Не вдалося підключити обробник запиту настройок клієнта ліцензування. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	// Конец Подключение обработчика запроса настроек клиента лицензирования
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Интеграция с Библиотекой стандартных подсистем (БСП).
// Подсистема "Базовая функциональность".

// Обработчик, вызываемый при начале работы системы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ПараметрыРаботыКлиентаПриЗапуске = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботыКлиентаПриЗапуске.ДоступноИспользованиеРазделенныхДанных Тогда
		// Выполнить только в коробочном варианте или разделенном режиме
		
		ПараметрыИПП = ПараметрыРаботыКлиентаПриЗапуске.ИнтернетПоддержкаПользователей;
		
		// Вызов обработчиков подсистем ПриНачалеРаботыСистемы()
		Обработчики = ПараметрыИПП.ПриНачалеРаботыСистемы;
		Для каждого ИмяМодуля Из Обработчики Цикл
			МодульОбработчика = ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля);
			Если МодульОбработчика <> Неопределено Тогда
				МодульОбработчика.ПриНачалеРаботыСистемы();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Новости.ПриНачалеРаботыСистемы
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработчика = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПриНачалеРаботыСистемы();
		КонецЕсли;
	КонецЕсли;
	// Конец Новости.ПриНачалеРаботыСистемы
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Устаревший программный интерфейс

// Устарела. Будет удалена в следующей версии библиотеки.
// Следует использовать
// МониторИнтернетПоддержкиКлиент.ОткрытьМониторИнтернетПоддержки()
// Открытие монитора Интернет-поддержки из меню.
//
// Параметры:
// СтартовыеПараметры - Структура - передаваемые стартовые параметры,
//	ключ структуры - имя параметра, значение - значение параметра.
//
Процедура СтартоватьМеханизмИзМеню(СтартовыеПараметры = Неопределено) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		
		ВызватьИсключение НСтр("ru='Ошибка встраивания. Отсутствует подсистема ""Монитор Интернет-поддержки"".';uk='Помилка вбудовування. Відсутня підсистема ""Монітор Інтернет-підтримки"".'");
		
	Иначе
		
		ОбщийМодульМониторИПП = ОбщегоНазначенияКлиент.ОбщийМодуль("МониторИнтернетПоддержкиКлиент");
		ОбщийМодульМониторИПП.ОткрытьМониторИнтернетПоддержки(СтартовыеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Будет удалена в следующей версии библиотеки.
// Следует использовать процедуру
// ПодключитьИнтернетПоддержкуПользователей().
// Будет удалена из программного интерфейса в следующей версии библиотеки.
// Подключение Интернет-поддержки пользователей (или смена пользователя ИПП)
// из формы настроек ИПП.
//
// Параметры:
// СтартовыеПараметры - Структура - передаваемые стартовые параметры,
//	ключ структуры - имя параметра, значение - значение параметра.
//
Процедура ПодключитьИнтернетПоддержку(СтартовыеПараметры = Неопределено) Экспорт
	
	ПодключитьИнтернетПоддержкуПользователей();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открывает Интернет-страницу в обозревателе.
//
// Параметры:
//	АдресСтраницы - Строка - URL-адрес открываемой страницы;
//	ЗаголовокОкна - Строка - заголовок открываемой страницы,
//		если для открытия страницы используется внутренняя форма конфигурации;
//	Логин - Строка - логин для авторизации на портале поддержи пользователей;
//	Пароль - Строка - пароль для авторизации на портале поддержки пользователей;
//
Процедура ОткрытьВебСтраницу(Знач АдресСтраницы, ЗаголовокОкна, Логин = Неопределено, Пароль = Неопределено) Экспорт
	
	НеобходимаАвторизации = (Найти(АдресСтраницы, "?needAccessToken=true") > 0
		Или Найти(АдресСтраницы, "&needAccessToken=true") > 0);
	
	Если НеобходимаАвторизации Тогда
		// Удаление параметра из URL
		
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "?needAccessToken=true&", "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "?needAccessToken=true" , "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "&needAccessToken=true&", "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "&needAccessToken=true" , "");
		
	КонецЕсли;
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	Если НеобходимаАвторизации И ПараметрыКлиента.ЭтоПолноправныйПользователь Тогда
		
		// Получение тикета аутентификации на портале поддержки
		Тикет = "";
		Если ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль) Тогда
			
			Состояние(, , НСтр("ru='Переход на портал ИТС';uk='Перехід на портал ІТС'"));
			РезультатПолученияТикета = ТикетАутентификации(
				Логин,
				Пароль,
				АдресСтраницы);
			Состояние();
			
			Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
				Тикет = РезультатПолученияТикета.Тикет;
			ИначеЕсли РезультатПолученияТикета.КодОшибки <> "НеверныйЛогинИлиПароль" Тогда
				ПоказатьОповещениеПользователя(
					,
					,
					НСтр("ru='Ошибка входа на Портал ИТС.
                        |Подробнее см. в журнале регистрации.'
                        |;uk='Помилка входу на Портал ІТС.
                        |Докладніше див. у журналі реєстрації.'"),
					БиблиотекаКартинок.Ошибка32);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Тикет) Тогда
			АдресСтраницы = ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
				"/ticket/auth?token=" + Тикет);
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ИнтернетПоддержкаПользователейКлиентПереопределяемый.ОткрытьИнтернетСтраницу(
		АдресСтраницы,
		ЗаголовокОкна,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Истина Тогда
		// Открытие Интернет-страницы стандартным способом
		ОбщегоНазначенияКлиент.ПерейтиПоСсылке(АдресСтраницы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает диалог отправки сообщения в службу технической поддержки.
//
Функция СлужебнаяОтправитьСообщениеВТехПоддержку(
	Тема,
	Сообщение,
	Получатель = "webIts",
	Вложения = Неопределено,
	Логин = Неопределено,
	Пароль = Неопределено,
	НастройкиСоединенияССерверами = Неопределено,
	ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если Получатель <> "webIts" И Получатель <> "taxcom" Тогда
		ВызватьИсключение НСтр("ru='Неизвестный получатель сообщения.';uk='Невідомий одержувач повідомлення.'");
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВидПриложения"   , ВидПриложения());
	Если Логин <> Неопределено Тогда
		ДопПараметры.Вставить("Логин" , Логин);
		ДопПараметры.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	Состояние(, , НСтр("ru='Подготовка сообщения в службу технической поддержки';uk='Підготовка повідомлення в службу технічної підтримки'"));
	
	ПараметрыСообщения = Новый Структура(
		"Тема, Сообщение, Получатель, Вложения, ОповещениеОЗавершении, ДопПараметры, ОтправкаНаСервере",
		Тема,
		Сообщение,
		Получатель,
		Вложения,
		ОповещениеОЗавершении,
		ДопПараметры,
		Истина);
	
	#Если ВебКлиент Тогда
	
	ПодготовитьВложенияКОтправкеНаСервере(ПараметрыСообщения);
	
	#Иначе
	
	Если НастройкиСоединенияССерверами = Неопределено Тогда
		НастройкиСоединенияССерверами = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	Если НастройкиСоединенияССерверами.УстанавливатьПодключениеНаСервере Тогда
		ПодготовитьВложенияКОтправкеНаСервере(ПараметрыСообщения);
	Иначе
		ПараметрыСообщения.ОтправкаНаСервере = Ложь;
		ПараметрыСообщения.Вставить("НастройкиСоединенияССерверами", НастройкиСоединенияССерверами);
		ПодготовитьВложенияКОтправкеНаКлиенте(ПараметрыСообщения);
	КонецЕсли;
	
	#КонецЕсли
	
КонецФункции

// Вспомогательная функция для преобразования значения из фиксированного типа.
// Параметры:
//	ЗначениеФиксированногоТипа - Произвольный - значение фиксированного типа
//		из которого необходимо получить значение нефиксированного типа.
//
// Возвращаемое значение:
//	Произвольный - полученное значение аналогичного нефиксированного типа.
//
Функция ЗначениеИзФиксированногоТипа(ЗначениеФиксированногоТипа) Экспорт
	
	Результат = Неопределено;
	ТипЗначения = ТипЗнч(ЗначениеФиксированногоТипа);
	
	Если ТипЗначения = Тип("ФиксированнаяСтруктура") Тогда
		
		Результат = Новый Структура;
		Для каждого КлючЗначение Из ЗначениеФиксированногоТипа Цикл
			Результат.Вставить(КлючЗначение.Ключ, ЗначениеИзФиксированногоТипа(КлючЗначение.Значение));
		КонецЦикла;
		
	ИначеЕсли ТипЗначения = Тип("ФиксированноеСоответствие") Тогда
		
		Результат = Новый Соответствие;
		Для каждого КлючЗначение Из ЗначениеФиксированногоТипа Цикл
			Результат.Вставить(КлючЗначение.Ключ, ЗначениеИзФиксированногоТипа(КлючЗначение.Значение));
		КонецЦикла;
		
	ИначеЕсли ТипЗначения = Тип("ФиксированныйМассив") Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементМассива Из ЗначениеФиксированногоТипа Цикл
			Результат.Добавить(ЗначениеИзФиксированногоТипа(ЭлементМассива));
		КонецЦикла;
		
	Иначе
		
		Результат = ЗначениеФиксированногоТипа;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает значение параметра приложения.
//
Функция ЗначениеПараметраПриложения(ИмяПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ПараметрыПолучениеОбновленийПрограммы = ПараметрыПриложения.Получить("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы");
	Если ПараметрыПолучениеОбновленийПрограммы = Неопределено
		ИЛИ НЕ ПараметрыПолучениеОбновленийПрограммы.Свойство(ИмяПараметра) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ПараметрыПолучениеОбновленийПрограммы[ИмяПараметра];
	
КонецФункции

// Устанавливает значение параметра приложения.
//
Процедура УстановитьЗначениеПараметраПриложения(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ПараметрыПолучениеОбновленийПрограммы = ПараметрыПриложения.Получить("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы");
	Если ПараметрыПолучениеОбновленийПрограммы = Неопределено Тогда
		ПараметрыПолучениеОбновленийПрограммы = Новый Структура;
		ПараметрыПриложения.Вставить(
			"ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы",
			ПараметрыПолучениеОбновленийПрограммы);
	КонецЕсли;
	
	ПараметрыПолучениеОбновленийПрограммы.Вставить(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интеграция подсистем библиотеки. Обработка бизнес-процессов.

// Выполнение сценария запуска механизма Интернет-поддержки пользователей.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма, из которого определяется
//		необходимый бизнес-процесс.
//	СтартовыеПараметры - Структура - стартовые параметры механизма.
//		ключ структуры соответствует имени параметра, значение - значению
//		параметра. Состав параметров произвольный;
//	Повторно - Булево - признак того, что механизм запускается из формы ошибки
//		подключения (ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету)
//		кнопкой "Повторить подключение";
//	КонтекстВзаимодействия - Структура, ФиксированнаяСтруктура, Неопределено
//		- готовый контекст для старта бизнес-процесса.
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса.
//
Процедура ВыполнитьСценарий(
	МестоЗапуска,
	СтартовыеПараметры = Неопределено,
	Повторно = Ложь,
	КонтекстВзаимодействия = Неопределено,
	ОбработчикиЗавершенияБизнесПроцесса = Неопределено) Экспорт
	
	Если КонтекстВзаимодействия <> Неопределено Тогда
		
		Если КонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска") Тогда
			ОбработатьСтруктуруЗапускаИПП(МестоЗапуска, КонтекстВзаимодействия.УправляющаяСтруктураЗапуска);
			ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, Неопределено);
			Возврат;
		КонецЕсли;
		
		ПараметрыСозданияКонтекста = Неопределено;
		
	Иначе
		
		ПараметрыСозданияКонтекста = Новый Структура(
			"МестоЗапуска, ПовторныйЗапуск, СтартовыеПараметры",
			МестоЗапуска,
			Повторно,
			СтартовыеПараметры);
		
	КонецЕсли;
	
	Попытка
		
		ВызовСервиса(КонтекстВзаимодействия, ПараметрыСозданияКонтекста, ОбработчикиЗавершенияБизнесПроцесса);
		
	Исключение
		
		Если КонтекстВзаимодействия <> Неопределено Тогда
			
			ПриНачалеРаботыСистемы = КонтекстВзаимодействия.КСКонтекст.ПриНачалеРаботыСистемы;
			Логин = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
				КонтекстВзаимодействия.КСКонтекст,
				"login");
			
		Иначе
			
			ПриНачалеРаботыСистемы = Ложь;
			Логин = "";
			
		КонецЕсли;
		
		ИнфОшибка = ИнформацияОбОшибке();
		ТекстПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнфОшибка);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстПодробноеПредставлениеОшибки);
		
		Форма = ПолучитьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету",
			Новый Структура(
				"МестоЗапуска, СтартовыеПараметры, ПриНачалеРаботыСистемы, ОписаниеОшибки, ПодробноеОписаниеОшибки, Логин",
				МестоЗапуска,
				СтартовыеПараметры,
				ПриНачалеРаботыСистемы,
				НСтр("ru='Неизвестная ошибка. Подробнее см. в журнале регистрации.';uk='Невідома помилка. Докладніше див. у журналі реєстрації.'"),
				ТекстПодробноеПредставлениеОшибки,
				Логин));
		Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;
		Форма.Открыть();
		
	КонецПопытки;
	
КонецПроцедуры

// Отправка на сервер управляющей команды для освобождения ресурсов сервиса.
// Обработка ответа сервиса не выполняется.
//
Процедура ЗавершитьБизнесПроцесс(КонтекстВзаимодействия) Экспорт
	
	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
		КонтекстВзаимодействия);
	
	ЗакрытьВсеФормы(КонтекстВзаимодействия);
	ПараметрыОбращенияКСервисуИПП = Новый Структура;
	ПараметрыОбращенияКСервисуИПП.Вставить("ОбработатьОтвет"             , Ложь);
	ПараметрыОбращенияКСервисуИПП.Вставить("ОтобразитьСостояниеОбращения", Ложь);
	
	ОбработатьКомандуФормы(КонтекстВзаимодействия, Неопределено, "CloseBP", ПараметрыОбращенияКСервисуИПП);
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
КонецПроцедуры

// Обработка выхода пользователя из ИПП (нажатие ссылки "Выход" на форме).
//
Процедура ОбработатьВыходПользователя(КонтекстВзаимодействия, Форма) Экспорт
	
	ДопПараметры = Новый Структура("КонтекстВзаимодействия, Форма", КонтекстВзаимодействия, Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеПользователяНаВопросОВыходе", ЭтотОбъект, ДопПараметры);
	
	ТекстВопроса = ВопросПриВыходеАвторизованногоПользователя(КонтекстВзаимодействия);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Регистрация открытой внутренней формы ИПП в контексте взаимодействия.
//
Процедура ОбработатьОткрытиеФормы(КонтекстВзаимодействия, ОткрытаяФорма) Экспорт
	
	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;
	
	Если ТипЗнч(ФормыОбработки) <> Тип("Соответствие") Тогда
		ФормыОбработки = Новый Соответствие;
		КонтекстВзаимодействия.ФормыОбработки = ФормыОбработки;
	КонецЕсли;
	
	ФормыОбработки[ОткрытаяФорма.ИмяФормы] = ОткрытаяФорма;
	
КонецПроцедуры

// Процедура получает команды от веб-сервиса и выполняет их на стороне клиента
// или передает управление серверу платформы.
//
// Параметры:
// КонтекстВзаимодействия - Структура - контекст взаимодействия с
//		сервисом ИПП (см. функцию ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()).
// ТекущаяФорма - УправляемаяФорма - форма, вызвавшая метод для выполнения
//		команд сервиса;
// ПараметрыЗапроса - Массив - массив элементов типа Структура:
//		* Имя - Строка - имя параметра;
//		* Значение - Произвольный - значение параметра;
//		* БизнесПроцесс - Строка - имя бизнес-процесса, к которому относится параметр;
// КонтекстОбработчика - Структура - контекст обработчика команд (см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд();
// ПараметрыОбращенияКСервисуИПП - Структура - дополнительные параметры
//		обращения к сервису ИПП:
//	* ОбработатьОтвет - Булево - Истина, если необходимо обработать ответ
//			сервиса;
//	* ОтобразитьСостояниеОбращения - Булево - Истина, если необходимо отобразить
//			состояние обращения к сервису ИПП;
//	* ОчиститьСессиюПередВыполнениемЗапроса - Булево - Истина, если перед
//			выполнением запроса необходимо удалить сессионные параметры;
// ПродолжитьВыполнение - Булево - Истина, если необходимо продолжить выполнение
//		без обращения к сервису ИПП;
// ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса.
//
Процедура ОбработкаКомандСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	ПараметрыЗапроса = Неопределено,
	КонтекстОбработчика = Неопределено,
	ПараметрыОбращенияКСервисуИПП = Неопределено,
	ДополнительныеПараметрыЗапроса = Неопределено,
	ПродолжитьВыполнение = Ложь,
	ПараметрыСозданияКонтекста = Неопределено,
	ОбработчикиЗавершенияБизнесПроцесса = Неопределено) Экспорт
	
	ОтобразитьСостояниеОбращения = Истина;
	ОбработатьОтвет              = Истина;
	НеобходимоОчиститьСессию     = Ложь;
	
	Если ТипЗнч(ПараметрыОбращенияКСервисуИПП) = Тип("Структура") Тогда
		
		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОбработатьОтвет") Тогда
			ОбработатьОтвет = ПараметрыОбращенияКСервисуИПП.ОбработатьОтвет;
		КонецЕсли;
		
		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОтобразитьСостояниеОбращения") Тогда
			ОтобразитьСостояниеОбращения = ПараметрыОбращенияКСервисуИПП.ОтобразитьСостояниеОбращения;
		КонецЕсли;
		
		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОчиститьСессиюПередВыполнениемЗапроса") Тогда
			НеобходимоОчиститьСессию = ПараметрыОбращенияКСервисуИПП.ОчиститьСессиюПередВыполнениемЗапроса;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтобразитьСостояниеОбращения = Истина Тогда
		ОтобразитьСостояниеОбращениеКСервису();
	КонецЕсли;
	
	Если НеобходимоОчиститьСессию = Истина И КонтекстВзаимодействия <> Неопределено Тогда
		ОчиститьСессию(КонтекстВзаимодействия);
	КонецЕсли;
	
	// Если контекст обработчика команд не задан, тогда необходимо подготовить его структуру.
	Если КонтекстОбработчика = Неопределено Тогда
		// Создание контекста обработчика команд
		КонтекстОбработчика = ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд();
	КонецЕсли;
	
	Если КонтекстВзаимодействия = Неопределено Тогда
		ОсновныеПараметры = Неопределено;
	Иначе
		ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	КонецЕсли;
	
	Если НЕ ПродолжитьВыполнение Тогда
		
		Если ПараметрыЗапроса = Неопределено Тогда
			ПараметрыЗапроса = Новый Массив;
		КонецЕсли;
		
		// Если выполняется первое обращение, тогда необходимо
		// получить команды от веб-сервиса.
		
		Если КонтекстВзаимодействия = Неопределено Тогда
			
			// Обработка первого запуска при незаданном контексте взаимодействия
			// создание на стороне сервера ИБ контекста взаимодействия и первое
			// обращение к сервису ИПП (для минимизации клиент-серверных вызовов).
			ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
				Неопределено,
				ПараметрыЗапроса,
				КонтекстОбработчика,
				Ложь,
				ПараметрыОбращенияКСервисуИПП,
				ДополнительныеПараметрыЗапроса,
				КонтекстВзаимодействия,
				ПараметрыСозданияКонтекста);
			
			Если КонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска") Тогда
				ОбработатьСтруктуруЗапускаИПП(ПараметрыСозданияКонтекста.МестоЗапуска,
					КонтекстВзаимодействия.УправляющаяСтруктураЗапуска);
				ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, Неопределено);
				Возврат;
			КонецЕсли;
			
			КонтекстВзаимодействия.Вставить("ОбработчикиЗавершенияБизнесПроцесса",
				ОбработчикиЗавершенияБизнесПроцесса);
			
			ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
			Если НЕ ОсновныеПараметры.ОбращениеССервера Тогда
				
				ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
					КонтекстВзаимодействия.КСКонтекст,
					ПараметрыЗапроса,
					ДополнительныеПараметрыЗапроса);
				
				ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьДополнительныеСтартовыеПараметрыЗапроса(
					КонтекстВзаимодействия.КСКонтекст,
					КонтекстВзаимодействия.ДополнительныеСтартовыеПараметры,
					ПараметрыЗапроса);
				
				ДобавитьКомандыСервиса(
					КонтекстВзаимодействия,
					ПараметрыЗапроса,
					КонтекстОбработчика);
				
			КонецЕсли;
			
		Иначе
			
			// При последующих запусках все выполняется в штатном режиме
			
			Если ОсновныеПараметры.ОбращениеССервера Тогда
				
				ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
					КонтекстВзаимодействия.КСКонтекст,
					ПараметрыЗапроса,
					КонтекстОбработчика,
					Ложь,
					ПараметрыОбращенияКСервисуИПП,
					ДополнительныеПараметрыЗапроса);
				
			Иначе
				
				ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
					КонтекстВзаимодействия.КСКонтекст,
					ПараметрыЗапроса,
					ДополнительныеПараметрыЗапроса);
				
				ДобавитьКомандыСервиса(
					КонтекстВзаимодействия,
					ПараметрыЗапроса,
					КонтекстОбработчика);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если обрабатывать ответ сервиса не требуется, тогда возврат
	Если ОбработатьОтвет <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПрерватьОбработкуКоманд = Ложь;
	Попытка
		
		Пока КонтекстОбработчика.Команды.Количество() > 0
			И НЕ КонтекстОбработчика.ПроизошлаОшибка
			И НЕ КонтекстОбработчика.ВыполнитьОстановку
			И НЕ ПрерватьОбработкуКоманд Цикл
			
			ТекущаяКоманда = КонтекстОбработчика.Команды[0];
			ТипКоманды = ИнтернетПоддержкаПользователейКлиентСервер.ТипКоманды(
				ТекущаяКоманда,
				ОсновныеПараметры.ОбращениеССервера,
				ОсновныеПараметры.МестоЗапуска);
			
			Если ТипКоманды = -1 Тогда
				// Если тип команды (клиентская или серверная) определить не удалось,
				// тогда пропустить команду.
				КонтекстОбработчика.Команды.Удалить(0);
				Продолжить;
				
			ИначеЕсли ТипКоманды = 1 Тогда
				
				// Выполнение команды на клиенте
				КонтекстОбработчика.Команды.Удалить(0);
				ВыполнитьКомандуСервиса(
					КонтекстВзаимодействия,
					ТекущаяФорма,
					ТекущаяКоманда,
					КонтекстОбработчика,
					ПрерватьОбработкуКоманд);
				
			Иначе
				// Если команда серверная, тогда передать управление серверу платформы
				// При повторном вызове, обращение к веб-сервису не выполняется
				// поэтому сессионные параметры не передаются.
				ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
					КонтекстВзаимодействия.КСКонтекст,
					Неопределено,
					КонтекстОбработчика,
					Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПолноеОписаниеОшибки = НСтр("ru='Произошло необрабатываемое исключение:';uk='Сталося виключення, що неможливо обробити:'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru='Неизвестная ошибка. Подробнее см. в журнале регистрации.';uk='Невідома помилка. Докладніше див. у журналі реєстрації.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		
	КонецПопытки;
	
	Если ОтобразитьСостояниеОбращения = Истина Тогда
		Состояние();
	КонецЕсли;
	
	Если ПрерватьОбработкуКоманд И НЕ КонтекстОбработчика.ПроизошлаОшибка Тогда
		// При возникновении асинхронного действия необходимо прервать обработку
		// команд сервиса. Выполнение будет инициировано завершением асинхронного
		// действия.
		Возврат;
	КонецЕсли;
	
	// Если в процессе выполнения произошла ошибка, тогда выполнить обработку ошибки
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		
		ЗакрытьВсеФормы(КонтекстВзаимодействия);
		
		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);
		
		// Завершение сеанса
		Если КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() > 0 Тогда
			
			// Завершение сеанса на сервере информационной базы
			ИнтернетПоддержкаПользователейВызовСервера.ЗавершитьСеансИнтернетПоддержки(
				КонтекстВзаимодействия.КСКонтекст,
				КонтекстОбработчика);
			
			Если КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() > 0 Тогда
				// Осталось только действие закрытия сеанса, т.е. требуется отправить
				// из клиентского приложения команду завершения бизнес-процесса.
				ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
			КонецЕсли;
			
		КонецЕсли;
		
		Если КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение" Тогда
			
			ПараметрыФормы = ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия);
			ПараметрыФормы.Вставить("ОписаниеОшибки",
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки);
			ПараметрыФормы.Вставить("ПодробноеОписаниеОшибки",
				КонтекстОбработчика.ПолноеОписаниеОшибки);
			
			Форма = ПолучитьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету", ПараметрыФормы);
			Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;
			Форма.Открыть();
			
		ИначеЕсли КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение"
			И НЕ ПустаяСтрока(КонтекстОбработчика.ПользовательскоеОписаниеОшибки) Тогда
			
			ПоказатьПредупреждение(,
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки,
				,
				НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"));
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли КонтекстОбработчика.ВыполнитьОстановку Тогда
		
		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);
		
		Если КонтекстОбработчика.Свойство("ОписаниеПричиныОстановки") Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"),
				,
				КонтекстОбработчика.ОписаниеПричиныОстановки,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		КонецЕсли;
		
		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		
	ИначеЕсли КонтекстВзаимодействия.Свойство("БизнесПроцессУспешноЗавершен")
		И КонтекстВзаимодействия.БизнесПроцессУспешноЗавершен = Истина Тогда
		
		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Обращение к сервису ИПП с заданным параметром.
// Передается один параметр с заданным именем и значением "true".
//
Процедура ОбработатьКомандуФормы(
	КонтекстВзаимодействия,
	Форма,
	ИмяКоманды,
	ПараметрыОбращенияКСервисуИПП = Неопределено) Экспорт
	
	ПараметрыЗапроса        = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", ИмяКоманды, "true"));
	
	ОбработкаКомандСервиса(КонтекстВзаимодействия, Форма, ПараметрыЗапроса, , ПараметрыОбращенияКСервисуИПП);
	
КонецПроцедуры

// Определяет, открыта ли заданная форма контекста.
//
Функция ФормаОткрыта(КонтекстВзаимодействия, ИмяПроверяемойФормы) Экспорт
	
	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;
	
	Если ТипЗнч(ФормыОбработки) <> Тип("Соответствие") Тогда
		ФормыОбработки = Новый Соответствие;
	КонецЕсли;
	
	ПроверяемаяФорма = ФормыОбработки[ИмяПроверяемойФормы];
	Если ПроверяемаяФорма = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ПроверяемаяФорма.Открыта();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТикетАутентификации(Знач Логин, Знач Пароль, Знач ИмяСервиса) Экспорт
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	Если НастройкиСоединения.УстанавливатьПодключениеНаСервере Тогда
		Возврат ИнтернетПоддержкаПользователейВызовСервера.ТикетАутентификации(
			Логин,
			Пароль,
			ИмяСервиса);
	Иначе
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.СлужебнаяТикетАутентификации(
			Логин,
			Пароль,
			ИмяСервиса,
			НастройкиСоединения);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка сообщений в службу технической поддержки

Процедура ПодготовитьВложенияКОтправкеНаСервере(ПараметрыСообщения)
	
	ПомещаемыеФайлы = Новый Массив;
	Если ПараметрыСообщения.Вложения <> Неопределено Тогда
		Для каждого ТекВложение Из ПараметрыСообщения.Вложения Цикл
			Если ТекВложение.Свойство("ИмяФайла") Тогда
				ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ТекВложение.ИмяФайла);
				ПомещаемыеФайлы.Добавить(ПередаваемыйФайл);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПомещаемыеФайлы.Количество() = 0 Тогда
		
		ПодготовитьВложенияКОтправкеЗавершение(Неопределено, ПараметрыСообщения);
		
	Иначе
		
		ПараметрыСообщения.Вставить("ПомещаемыеФайлы", ПомещаемыеФайлы);
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ПриПроверкеРасширенияДляРаботыСФайламиПередОтправкойСообщенияВТехПоддержку",
				ЭтотОбъект,
				ПараметрыСообщения),
			НСтр("ru='Для продолжения необходимо установить расширение для работы с файлами.';uk='Для продовження необхідно встановити розширення для роботи з файлами.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПроверкеРасширенияДляРаботыСФайламиПередОтправкойСообщенияВТехПоддержку(Подключено, ПараметрыСообщения) Экспорт
	
	НачатьПомещениеФайлов(
		Новый ОписаниеОповещения(
			"ПодготовитьВложенияКОтправкеЗавершение",
			ЭтотОбъект,
			ПараметрыСообщения),
		ПараметрыСообщения.ПомещаемыеФайлы,
		,
		Ложь);
	
КонецПроцедуры

#Если Не ВебКлиент Тогда
Процедура ПодготовитьВложенияКОтправкеНаКлиенте(ПараметрыСообщения)
	
	Вложения = ПараметрыСообщения.Вложения;
	ПолучаемыеФайлы = Новый Массив;
	Если Вложения <> Неопределено Тогда
		
		// Извлечь тексты из файлов
		Для каждого ТекВложение Из Вложения Цикл
			Если ТекВложение.Свойство("ИмяФайла") Тогда
				ТекВложение.Вставить(
					"Текст",
					ИнтернетПоддержкаПользователейКлиентСервер.ТекстВФайле(ТекВложение.ИмяФайла));
				ТекВложение.Удалить("ИмяФайла");
			ИначеЕсли ТекВложение.Свойство("Адрес") Тогда
				ПолучаемыеФайлы.Добавить(
					Новый ОписаниеПередаваемогоФайла(ПолучитьИмяВременногоФайла("txt"), ТекВложение.Адрес));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучаемыеФайлы.Количество() = 0 Тогда
		// Получение текстов из файлов во временном хранилище
		ПодготовитьВложенияКОтправкеЗавершение(Неопределено, ПараметрыСообщения);
	Иначе
		НачатьПолучениеФайлов(
			Новый ОписаниеОповещения(
				"ПодготовитьВложенияКОтправкеЗавершение",
				ЭтотОбъект,
				ПараметрыСообщения),
			ПолучаемыеФайлы,
			,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

Процедура ПодготовитьВложенияКОтправкеЗавершение(ФайлыВложений, ПараметрыСообщения) Экспорт
	
	Если ФайлыВложений <> Неопределено Тогда
		Если ПараметрыСообщения.ОтправкаНаСервере Тогда
			Для каждого ТекВложение Из ПараметрыСообщения.Вложения Цикл
				Если ТекВложение.Свойство("ИмяФайла") Тогда
					Для каждого ПФайл Из ФайлыВложений Цикл
						Если ПФайл.Имя = ТекВложение.ИмяФайла Тогда
							ТекВложение.Удалить("ИмяФайла");
							ТекВложение.Вставить("Адрес", ПФайл.Хранение);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого ТекВложение Из ПараметрыСообщения.Вложения Цикл
				Если ТекВложение.Свойство("Адрес") Тогда
					Для каждого ПФайл Из ФайлыВложений Цикл
						Если ПФайл.Хранение = ТекВложение.Адрес Тогда
							
							ТекВложение.Удалить("Адрес");
							ТекВложение.Вставить(
								"Текст",
								ИнтернетПоддержкаПользователейКлиентСервер.ТекстВФайле(ПФайл.Имя));
							
							Попытка
								УдалитьФайлы(ПФайл.Имя);
							Исключение
								ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							КонецПопытки;
							
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыСообщения.ОтправкаНаСервере Тогда
		РезультатОтправки = ИнтернетПоддержкаПользователейВызовСервера.ОтправитьДанныеСообщенияВТехПоддержку(
			ПараметрыСообщения.Тема,
			ПараметрыСообщения.Сообщение,
			ПараметрыСообщения.Получатель,
			ПараметрыСообщения.Вложения,
			ПараметрыСообщения.ДопПараметры);
	Иначе
		РезультатОтправки = ИнтернетПоддержкаПользователейКлиентСервер.ОтправитьДанныеСообщенияВТехПоддержку(
			ПараметрыСообщения.Тема,
			ПараметрыСообщения.Сообщение,
			ПараметрыСообщения.Получатель,
			ПараметрыСообщения.Вложения,
			ПараметрыСообщения.НастройкиСоединенияССерверами,
			ПараметрыСообщения.ДопПараметры);
	КонецЕсли;
	
	ПриОтправкеДанныхСообщенияВТехПоддержку(РезультатОтправки, ПараметрыСообщения);
	
КонецПроцедуры

Процедура ПриОтправкеДанныхСообщенияВТехПоддержку(РезультатОтправки, ПараметрыСообщения)
	
	Состояние();
	
	Результат = ПустаяСтрока(РезультатОтправки.КодОшибки);
	Если Результат Тогда
		
		Если Не ПустаяСтрока(РезультатОтправки.Предупреждение) Тогда
			ПоказатьОповещениеПользователя(
				,
				,
				РезультатОтправки.Предупреждение,
				БиблиотекаКартинок.Ошибка32);
		КонецЕсли;
		
		ОткрытьВебСтраницу(
			РезультатОтправки.URLСтраницы,
			НСтр("ru='Отправка сообщения в службу технической поддержки';uk='Відправлення повідомлення в службу технічної підтримки'"));
		
		Если ПараметрыСообщения.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыСообщения.ОповещениеОЗавершении, Истина);
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(
			Новый ОписаниеОповещения(
				"ПриОшибкеОтправкиДанныхСообщенияВТехПоддержку",
				ЭтотОбъект,
				ПараметрыСообщения),
			РезультатОтправки.СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОшибкеОтправкиДанныхСообщенияВТехПоддержку(ПараметрыСообщения) Экспорт
	
	Если ПараметрыСообщения.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыСообщения.ОповещениеОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидПриложения()
	
	#Если ВебКлиент Тогда
	Возврат НСтр("ru='Веб-клиент';uk='Веб-клієнт'");
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	Возврат НСтр("ru='Толстый клиент, обычное приложение';uk='Товстий клієнт, звичайна прикладна програма'");
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
	Возврат НСтр("ru='Толстый клиент, управляемое приложение';uk='Товстий клієнт, керована прикладна програма'");
	#ИначеЕсли ТонкийКлиент Тогда
	Возврат НСтр("ru='Тонкий клиент';uk='Тонкий клієнт'");
	#Иначе
	Возврат "";
	#КонецЕсли
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка бизнес-процессов

// Возвращает клиентский обработчик бизнес-процесса.
// Параметры:
//	МестоЗапуска - Строка - точка входа в бизнес-процесс;
//	ИмяСобытия - Строка - имя обрабатываемого события.
//
// Возвращаемое значение:
//	ОбщийМодуль - модуль, реализующий обработчик бизнес-процесса.
//	Неопределено - если отсутствует обработчик бизнес-процесса.
//
Функция КлиентскийОбработчикБизнесПроцесса(МестоЗапуска, ИмяСобытия) Экспорт
	
	Если ИнтернетПоддержкаПользователейКлиентСервер.ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	КлиентскиеОбработчики  = ПараметрыРаботыКлиента.КлиентскиеОбработчикиБизнесПроцессов;
	
	ИмяМодуля = КлиентскиеОбработчики.Получить(МестоЗапуска + "\" + ИмяСобытия);
	
	Если ИмяМодуля = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля);
	
КонецФункции

// Выполняет действия при запрете запуска ИПП по каким-либо причинам.
// Параметры:
//	МестоЗапуска - Строка - имя кнопки запуска ИПП;
//	СтруктураЗапуска - Структура - управляющая структура запуска.
//		(см. функцию  ОпределитьВозможностьЗапускаПоМестуИПараметрам()
//		общего модуля ИнтернетПоддержкаПользователейКлиентСервер)
//
Процедура ОбработатьСтруктуруЗапускаИПП(МестоЗапуска, Знач СтруктураЗапуска) Экспорт
	
	Если СтруктураЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураЗапуска.Действие = "Возврат" Тогда
		
		Состояние();
		
	ИначеЕсли СтруктураЗапуска.Действие = "ПоказатьСообщение" Тогда
		
		Состояние();
		
		Если СтруктураЗапуска.ПриНачалеРаботыСистемы Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"),
				,
				СтруктураЗапуска.Сообщение,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		Иначе
			ПоказатьПредупреждение(,
				СтруктураЗапуска.Сообщение,
				,
				НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Общая (универсальная) процедура для запуска бизнес-процесса
// Интернет-поддержки пользователей.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма (имя кнопки);
//	СтартовыеПараметры - Структура - стартовые параметры механизма.
//		ключ структуры соответствует имени параметра, значение - значению
//		параметра.
//	Повторно - Булево - признак того, что механизм запускается из формы ошибки
//		подключения (ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету)
//		кнопкой "Повторить подключение"
//
Процедура СтартоватьМеханизм(МестоЗапуска, СтартовыеПараметры = Неопределено, Повторно = Ложь) Экспорт
	
	// Выполнение сценария Интернет-поддержки.
	ВыполнитьСценарий(МестоЗапуска, СтартовыеПараметры, Повторно);
	
КонецПроцедуры

// Вызывается стартовым механизмом для выполнения первого обращения к
// веб-сервису ИПП и получения команд от веб-сервиса для дальнейшего
// их выполнения.
//
// Параметры:
//	ПодготовленныйКонтекстВзаимодействия - Структура, ФиксированнаяСтруктура,
//		Неопределено - подготовленный контекст;
//	ПараметрыСозданияКонтекста - Структура - параметры создания
//		нового контекста взаимодействия, если контекст не существует;
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса.
//
Процедура ВызовСервиса(
	ПодготовленныйКонтекстВзаимодействия,
	ПараметрыСозданияКонтекста,
	ОбработчикиЗавершенияБизнесПроцесса)
	
	Если ПодготовленныйКонтекстВзаимодействия = Неопределено Тогда
		
		КонтекстВзаимодействия = Неопределено;
		
	Иначе
		
		Если ТипЗнч(ПодготовленныйКонтекстВзаимодействия) = Тип("ФиксированнаяСтруктура") Тогда
			КонтекстВзаимодействия = ЗначениеИзФиксированногоТипа(ПодготовленныйКонтекстВзаимодействия);
		Иначе
			КонтекстВзаимодействия = ПодготовленныйКонтекстВзаимодействия;
		КонецЕсли;
		
		КонтекстВзаимодействия.Вставить("ОбработчикиЗавершенияБизнесПроцесса",
			ОбработчикиЗавершенияБизнесПроцесса);
		
	КонецЕсли;
	
	// Параметры, передаваемые сервису при первом вызове и сохраняемые на стороне
	// сервера ИПП в сеансовых переменных.
	ДополнительныеСтартовыеПараметры = Новый Массив;
	ДополнительныеСтартовыеПараметры.Добавить("libraryVersion");
	ДополнительныеСтартовыеПараметры.Добавить("APIVersion");
	ДополнительныеСтартовыеПараметры.Добавить("versionConfiguration");
	ДополнительныеСтартовыеПараметры.Добавить("versionPlatform");
	ДополнительныеСтартовыеПараметры.Добавить("nameConfiguration");
	ДополнительныеСтартовыеПараметры.Добавить("language");
	ДополнительныеСтартовыеПараметры.Добавить("enterPoint");
	
	ОбработкаКомандСервиса(
		КонтекстВзаимодействия,
		Неопределено,
		Неопределено,
		,
		,
		ДополнительныеСтартовыеПараметры,
		,
		ПараметрыСозданияКонтекста,
		ОбработчикиЗавершенияБизнесПроцесса);
	
КонецПроцедуры

// Добавляет команды в стек команд контекста обработчика команд
//
Процедура ДобавитьКомандыСервиса(
	КонтекстВзаимодействия,
	ДополнительныеПараметры,
	КонтекстОбработчика = Неопределено) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	Попытка
		
		Если КонтекстВзаимодействия.ОписаниеСервисаИПП = Неопределено Тогда
			КонтекстВзаимодействия.ОписаниеСервисаИПП = ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП(
				ОсновныеПараметры.ИмяWSОпределения);
		КонецЕсли;
		
		ОписаниеСервисаИПП = КонтекстВзаимодействия.ОписаниеСервисаИПП;
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru='Ошибка при подключении к сервису Интернет-поддержки.';uk='Помилка при підключенні до сервісу Інтернет-підтримки.'");
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьКомандыСервиса(
			ОписаниеСервисаИПП,
			ДополнительныеПараметры,
			КонтекстОбработчика,
			ОсновныеПараметры);
		
		// После первого вызова необходимо отключить таймаут сети, т.к.
		// проверка обращения по таймауту уже выполнена
		Если КонтекстВзаимодействия.СетевыеПараметрыИПП.ТаймаутСети <> 0 Тогда
			КонтекстВзаимодействия.СетевыеПараметрыИПП.ТаймаутСети = 0;
			ИнтернетПоддержкаПользователейКлиентСервер.ИзменитьТаймаутОбращения(ОписаниеСервисаИПП, 0);
		КонецЕсли;
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки = НСтр("ru='Ошибка при получении данных с сервера Интернет-поддержки.';uk='Помилка при отриманні даних з сервера Інтернет-підтримки.'");
		КонецЕсли;
		
	КонецПопытки;
	
	#КонецЕсли
	
КонецПроцедуры

// Выполняет заданную команду сервиса.
//
Процедура ВыполнитьКомандуСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	СтруктураКоманды,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд)
	
	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);
	
	Если ТипЗнч(ИмяКоманды) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = НРег(СокрЛП(ИмяКоманды));
	
	Если ИмяКоманды = "store.put" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыЗаписьПараметров(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.get" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыПрочитатьПараметры(
			КонтекстВзаимодействия,
			СтруктураКоманды,
			КонтекстОбработчика,
			Ложь);
		
	ИначеЕсли ИмяКоманды = "store.delete" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "launchservice" Тогда
		ИзменитьБизнеспроцесс(КонтекстВзаимодействия, СтруктураКоманды, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "ui.open" Тогда
		ОткрытьВнутреннююФорму(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "ui.close" Тогда
		ЗакрытьВнутреннююФорму(КонтекстВзаимодействия, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "system.halt" Тогда
		ОстановитьМеханизм(КонтекстВзаимодействия, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "message.show" Тогда
		ПоказатьСообщениеПользователю(
			СтруктураКоманды,
			КонтекстВзаимодействия,
			ТекущаяФорма,
			КонтекстОбработчика,
			ПрерватьОбработкуКоманд);
		
	ИначеЕсли ИмяКоманды = "question.show" Тогда
		ЗадатьВопросПользователю(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "input.field" Тогда
		ВвестиДанные(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putorganizations" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьСписокОрганизаций(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putadressclassifier" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьАдресныйКлассификатор(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);
		
	Иначе
		
		// Обработка в доп. обработчике бизнес-процесса
		ДопОбработчик = КлиентскийОбработчикБизнесПроцесса(
			КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры.МестоЗапуска,
			"ВыполнитьКомандуСервиса");
		
		Если ДопОбработчик <> Неопределено Тогда
			
			ДопОбработчик.ВыполнитьКомандуСервиса(
				КонтекстВзаимодействия,
				ТекущаяФорма,
				СтруктураКоманды,
				КонтекстОбработчика,
				ПрерватьОбработкуКоманд);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды открытия формы.
//
Процедура ОткрытьВнутреннююФорму(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды)
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	ПараметрыФормы = Неопределено;
	СтруктураКоманды.Свойство("ПараметрыФормы", ПараметрыФормы);
	
	УРЛ = Неопределено;
	СтруктураКоманды.Свойство("УРЛ", УРЛ);
	
	ТекстФормы = Неопределено;
	СтруктураКоманды.Свойство("Текст", ТекстФормы);
	
	// Замена параметров в тексте формы
	Если ТекстФормы <> Неопределено Тогда
		Если Найти(ТекстФормы, "%Логин%") Тогда
			СтрокаЗамены = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
				КонтекстВзаимодействия.КСКонтекст,
				"login");
			ТекстФормы = СтрЗаменить(ТекстФормы, "%Логин%", СтрокаЗамены);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыФормы <> Неопределено Тогда
		
		ИмяОткрываемойФормы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойФормы", ИмяОткрываемойФормы);
		
		Заголовок = Неопределено;
		ПараметрыФормы.Свойство("Заголовок", Заголовок);
		
		Текст = Неопределено;
		ПараметрыФормы.Свойство("Текст", Текст);
		
		Если ИмяОткрываемойФормы = "Вопрос" Тогда
			
			ТекстПредупреждения = ?(Текст = Неопределено, ТекстФормы, Текст);
			
			ДопПараметры = Новый Структура("КонтекстВзаимодействия, Форма", КонтекстВзаимодействия, ТекущаяФорма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииОКВСтатическойФормеПредупреждения",
				ЭтотОбъект,
				ДопПараметры);
			
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения, , Заголовок);
			
		ИначеЕсли ИмяОткрываемойФормы = "ВсплывающаяПодсказка" Тогда
			
			ПоказатьОповещениеПользователя(
				Заголовок,
				,
				ТекстФормы,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
			
		Иначе
			
			Если ТекущаяФорма <> Неопределено Тогда
				ЗакрытьФормуПрограммно(ТекущаяФорма, КонтекстВзаимодействия);
			КонецЕсли;
			
			ПараметрыОткрытияФормы = СформироватьПараметрыОткрытияФормы(
				КонтекстВзаимодействия.КСКонтекст,
				ИмяОткрываемойФормы);
			
			Если УРЛ <> Неопределено Тогда
				ПараметрыОткрытияФормы.Вставить("УРЛ", УРЛ);
			КонецЕсли;
			
			ОткрываемаяФорма = ПолучитьФорму(ИмяОткрываемойФормы, ПараметрыОткрытияФормы);
			
			Попытка
				ОткрываемаяФорма.КонтекстВзаимодействия = КонтекстВзаимодействия;
			Исключение
			КонецПопытки;
			
			ОткрываемаяФорма.Открыть();
			
		КонецЕсли;
		
		Если ПараметрыФормы.Свойство("УспешноеЗавершениеБизнесПроцесса") Тогда
			КонтекстВзаимодействия.Вставить("БизнесПроцессУспешноЗавершен", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготовка параметров для открытия внутренней формы.
//
Функция СформироватьПараметрыОткрытияФормы(КСКонтекст, ИмяОткрываемойФормы) Экспорт
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ПараметрыНовойФормы = Новый Структура;
	
	// Во все формы передается значение параметра login
	ПараметрыНовойФормы.Вставить("login",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "login"));
	
	Если ИмяОткрываемойФормы = "ОбщаяФорма.ПодключениеИнтернетПоддержки" Тогда
		
		ПараметрыНовойФормы.Вставить("ЭтоФормаБизнесПроцесса", Истина);
		ПараметрыНовойФормы.Вставить("МестоЗапуска"          , КСКонтекст.ОсновныеПараметры.МестоЗапуска);
		
		ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
		ПараметрыНовойФормы.Вставить("password",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"password"));
		ПараметрыНовойФормы.Вставить("ИзменятьФлагЗаполнитьПароль", Истина);
		ПараметрыНовойФормы.Вставить("ЗапомнитьПароль",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"savePassword") <> "false");
		ПараметрыНовойФормы.Вставить("ЗаголовокКнопкиОК", НСтр("ru='Войти';uk='Увійти'"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ОбщаяРегНомер" Тогда
		ПараметрыНовойФормы.Вставить("regnumber",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"regnumber"));
		
		ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ОбщаяПинкод" Тогда
		ПараметрыНовойФормы.Вставить("regnumber",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"regnumber"));
		ПараметрыНовойФормы.Вставить("pincode",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"pincode"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ИнтернетПоддержкаПродуктаНеОказывается" Тогда
		
		Если КСКонтекст.Свойство("ПриНачалеРаботыСистемы") Тогда
			ПараметрыНовойФормы.Вставить("ПриНачалеРаботыСистемы", КСКонтекст.ПриНачалеРаботыСистемы);
		КонецЕсли;
		
	Иначе
		
		// Получение параметров формы через доп. обработчик бизнес-процесса
		ДопОбработчик = КлиентскийОбработчикБизнесПроцесса(
			ОсновныеПараметры.МестоЗапуска,
			"ПараметрыОткрытияФормы");
		
		Если ДопОбработчик <> Неопределено Тогда
			ДопОбработчик.ПараметрыОткрытияФормы(КСКонтекст, ИмяОткрываемойФормы, ПараметрыНовойФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыНовойФормы;
	
КонецФункции

// Выполнение команды закрытия внутренней формы.
//
Процедура ЗакрытьВнутреннююФорму(КонтекстВзаимодействия, СтруктураКоманды)
	
	ФормыОбработки    = КонтекстВзаимодействия.ФормыОбработки;
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	ПараметрыФормы = Неопределено;
	СтруктураКоманды.Свойство("ПараметрыФормы", ПараметрыФормы);
	
	Если ПараметрыФормы <> Неопределено Тогда
		
		ИмяОткрываемойФормы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойФормы", ИмяОткрываемойФормы);
		
		Если ИмяОткрываемойФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Форма = ФормыОбработки[ИмяОткрываемойФормы];
		
		Если Форма = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗакрытьФормуПрограммно(Форма, КонтекстВзаимодействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды сервиса "Задать вопрос пользователю".
//
Процедура ЗадатьВопросПользователю(КонтекстВзаимодействия, Форма, СтруктураКоманды)
	
	ТипВопроса = Неопределено;
	СтруктураКоманды.Свойство("Тип", ТипВопроса);
	
	Если ТипВопроса = "richanswer" Тогда
		
		СписокКнопок = СтруктураКоманды.Кнопки;
		
	Иначе
		
		СписокКнопок = Новый СписокЗначений;
		Для каждого ЭлементКнопка Из СтруктураКоманды.Кнопки Цикл
			Если ЭлементКнопка.Значение = "yes" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Да);
			ИначеЕсли ЭлементКнопка.Значение = "no" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет);
			ИначеЕсли ЭлементКнопка.Значение = "cancel" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ИначеЕсли ЭлементКнопка.Значение = "ok" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДопПараметрыВопроса = Новый Структура("КонтекстВзаимодействия, ТипВопроса, Форма",
		КонтекстВзаимодействия,
		ТипВопроса,
		Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросКомандыВопрос",
		ЭтотОбъект,
		ДопПараметрыВопроса);
	
	ПоказатьВопрос(ОписаниеОповещения, СтруктураКоманды.ТекстСообщения, СписокКнопок, , , СтруктураКоманды.Заголовок);
	
КонецПроцедуры

// Асинхронный обработчик ответа пользователя при выполнении команды
// ЗадатьВопросПользователю()
//
Процедура ПриОтветеНаВопросКомандыВопрос(РезультатВопроса, ДопПараметры) Экспорт
	
	Если ДопПараметры.ТипВопроса = "richanswer" Тогда
		ОтветСервису = РезультатВопроса;
		
	Иначе
		ОтветСервису = "Cancel";
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ОтветСервису = "Yes";
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			ОтветСервису = "No";
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.ОК Тогда
			ОтветСервису = "OK";
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "answer", ОтветСервису));
	
	ОбработкаКомандСервиса(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, ПараметрыЗапроса);
	
КонецПроцедуры

// Выполнение команды сервиса "Показать сообщение пользователю".
//
Процедура ПоказатьСообщениеПользователю(
	СтруктураКоманды,
	КонтекстВзаимодействия,
	ТекущаяФорма,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд)
	
	ТипСообщения = Неопределено;
	СтруктураКоманды.Свойство("Тип", ТипСообщения);
	
	Если ТипСообщения = "usernotification" Тогда
		
		ПоказатьОповещениеПользователя(
			СтруктураКоманды.Заголовок,
			,
			СтруктураКоманды.ТекстСообщения,
			БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		
	Иначе
		
		ПрерватьОбработкуКоманд = Истина;
		ДопПараметрыОповещения = Новый Структура("КонтекстВзаимодействия, Форма, КонтекстОбработчика",
			КонтекстВзаимодействия,
			ТекущаяФорма,
			КонтекстОбработчика);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриНажатииОКВФормеСообщенияПользователю",
			ЭтотОбъект,
			ДопПараметрыОповещения);
		
		ПоказатьПредупреждение(ОписаниеОповещения, СтруктураКоманды.ТекстСообщения, , СтруктураКоманды.Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик нажатия кнопки "ОК" в форме сообщения пользователю
// при выполнении команды сервиса "Показать сообщение пользователю".
//
Процедура ПриНажатииОКВФормеСообщенияПользователю(ДопПараметры) Экспорт
	
	ОбработкаКомандСервиса(
		ДопПараметры.КонтекстВзаимодействия,
		ДопПараметры.Форма,
		,
		ДопПараметры.КонтекстОбработчика,
		,
		,
		Истина);
	
КонецПроцедуры

// Асинхронный обработчик нажатия пользователем кнопки "ОК" при выполнении
// команды открытия статической формы.
//
Процедура ПриНажатииОКВСтатическойФормеПредупреждения(ДопПараметры) Экспорт
	
	ОбработкаКомандСервиса(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, Неопределено);
	
КонецПроцедуры

// Выполнение команды сервиса "Ввести данные". При выполнении
// открывается универсальная форма ввода данных
// Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ВводДанных.
//
Процедура ВвестиДанные(КонтекстВзаимодействия, Форма, СтруктураКоманды)
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	ДопПараметры = Новый Структура("Форма, КонтекстВзаимодействия", Форма, КонтекстВзаимодействия);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриВводеДанныхПользователем",
		ЭтотОбъект,
		ДопПараметры);
	
	ИмяФормыВводаДанных = "Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ВводДанных";
	ОткрытьФорму(ИмяФормыВводаДанных,
		СтруктураКоманды.ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

// Асинхронный обработчик ввода данных пользователем в результате выполнения
// команды ПриВводеДанныхПользователем()
//
Процедура ПриВводеДанныхПользователем(ВведенныеДанные, ДопПараметры) Экспорт
	
	Форма = ДопПараметры.Форма;
	КонтекстВзаимодействия = ДопПараметры.КонтекстВзаимодействия;
	
	ПараметрыЗапроса = Новый Массив;
	Если ВведенныеДанные <> Неопределено И ВведенныеДанные <> КодВозвратаДиалога.Отмена Тогда
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "value", ВведенныеДанные));
	КонецЕсли;
	
	ОбработкаКомандСервиса(КонтекстВзаимодействия, Форма, ПараметрыЗапроса);
	
КонецПроцедуры

// Выполняет команду изменения адреса текущего сервиса ИПП.
//
Процедура ИзменитьБизнеспроцесс(КонтекстВзаимодействия, СтруктураКоманды, КонтекстОбработчика)
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	БизнесПроцесс = Неопределено;
	ИмяURI        = Неопределено;
	
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл
		
		Если ПараметрКоманды.Свойство("bp", БизнесПроцесс) Тогда
			ОсновныеПараметры.ИмяWSОпределения = БизнесПроцесс;
		КонецЕсли;
		
		Если ПараметрКоманды.Свойство("nameURI", ИмяURI) Тогда
			ОсновныеПараметры.URIСервиса = ИмяURI;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление номера сессии
	ПараметрыЗапроса = Новый Массив;
	
	ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
		КонтекстВзаимодействия.КСКонтекст,
		ПараметрыЗапроса);
	
	// Смена подключения
	КонтекстВзаимодействия.ОписаниеСервисаИПП = Неопределено;
	
	// Обратиться к новому веб-сервису за командами, и записать их в стек команд
	ДобавитьКомандыСервиса(
		КонтекстВзаимодействия,
		ПараметрыЗапроса,
		КонтекстОбработчика);
	
КонецПроцедуры

// Выполнение команды останова механизма ИПП. Закрытие всех форм,
// при необходимости отображается форма ошибки обращения к сервису ИПП
// и записывается ошибка в журнал регистрации.
//
Процедура ОстановитьМеханизм(КонтекстВзаимодействия, СтруктураКоманды)
	
	ЗакрытьВсеФормы(КонтекстВзаимодействия);
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	Если ПараметрыКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодОшибки = Неопределено;
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл
		
		Если ПараметрКоманды.Свойство("errorCode", КодОшибки) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СокрЛП(Строка(КодОшибки)) <> "0" И КодОшибки <> Неопределено Тогда
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(КодОшибки);
		ПараметрыФормы = ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия);
		ПараметрыФормы.Вставить("ОписаниеОшибки", КодОшибки);
		ПараметрыФормы.Вставить("ПодробноеОписаниеОшибки",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка сервиса (%1).';uk='Помилка сервісу (%1).'"),
				Строка(КодОшибки)));
		
		Форма = ПолучитьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету", ПараметрыФормы);
		Форма.КонтекстВзаимодействия = КонтекстВзаимодействия;
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик ответа пользователя на вопрос о выходе из ИПП в
// процедуре ОбработатьВыходПользователя().
//
Процедура ПриОтветеПользователяНаВопросОВыходе(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьВсеФормы(ДопПараметры.КонтекстВзаимодействия);
		ИнтернетПоддержкаПользователейВызовСервера.ОчиститьНастройкиИПППользователя();
		ОбработатьКомандуФормы(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, "exitUser");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет вызов обработчиков оповещения о завершении бизнес-процесса.
//
// Параметры:
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса;
//	КонтекстВзаимодействия - Структура, Неопределено - контекст бизнес-процесса
//		(см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()).
//
Процедура ОповеститьОЗавершенииБизнесПроцесса(
	ОбработчикиЗавершенияБизнесПроцесса,
	КонтекстВзаимодействия)
	
	Если ОбработчикиЗавершенияБизнесПроцесса = Неопределено
		ИЛИ ОбработчикиЗавершенияБизнесПроцесса.Обработано Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Удаление сессионных параметров контекста.
//
Процедура ОчиститьСессию(КонтекстВзаимодействия)
	
	СессионныеПараметры = КонтекстВзаимодействия.КСКонтекст.СессионныеПараметры;
	КоличествоПараметров = СессионныеПараметры.Количество();
	Если КоличествоПараметров > 0 Тогда
		Для ОбратныйИндекс = 1 По КоличествоПараметров Цикл
			Индекс = КоличествоПараметров - ОбратныйИндекс;
			Если СессионныеПараметры[Индекс].ОбластьВидимости <> "startUp" Тогда
				СессионныеПараметры.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Отображение состояния обращения к веб-сервису ИПП.
//
Процедура ОтобразитьСостояниеОбращениеКСервису()
	
	Состояние(
		,
		,
		НСтр("ru='Ожидание ответа от сервера Интернет-поддержки пользователей';uk='Очікування відповіді від сервера Інтернет-підтримки користувачів'"),
		БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
	
КонецПроцедуры

// Закрытие всех форм контекста.
//
Процедура ЗакрытьВсеФормы(КонтекстВзаимодействия)
	
	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;
	Если ТипЗнч(ФормыОбработки) = Тип("Соответствие") Тогда
		
		ТипУправляемаяФорма = Тип("УправляемаяФорма");
		Для каждого КлючЗначение Из ФормыОбработки Цикл
			Форма = КлючЗначение.Значение;
			Если ТипЗнч(Форма) = ТипУправляемаяФорма И Форма.Открыта() Тогда
				Форма.ПрограммноеЗакрытие = Истина;
				Форма.Закрыть();
			КонецЕсли;
		КонецЦикла;
		
		// Очистить ссылки на объекты всех форм
		КонтекстВзаимодействия.ФормыОбработки = Новый Соответствие;
		
	КонецЕсли;
	
КонецПроцедуры

// Программное закрытие формы контекста ИПП.
//
Процедура ЗакрытьФормуПрограммно(ЗакрываемаяФорма, КонтекстВзаимодействия)
	
	Если ЗакрываемаяФорма <> Неопределено Тогда
		
		Если ЗакрываемаяФорма.Открыта() Тогда
			
			Попытка
				ЗакрываемаяФорма.ПрограммноеЗакрытие = Истина;
			Исключение
			КонецПопытки;
			
			ЗакрываемаяФорма.Закрыть();
			
		КонецЕсли;
		
		Если КонтекстВзаимодействия <> Неопределено
			И ТипЗнч(КонтекстВзаимодействия.ФормыОбработки) = Тип("Соответствие") Тогда
			КонтекстВзаимодействия.ФормыОбработки.Удалить(ЗакрываемаяФорма.ИмяФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет текст вопроса при выходе авторизованного пользователя из ИПП.
//
Функция ВопросПриВыходеАвторизованногоПользователя(КонтекстВзаимодействия) Экспорт
	
	ЛогинПользователя = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"login");
	
	ТекстВопроса = НСтр("ru='Подключение пользователя с логином %1 к Интернет-поддержке будет
                    |прекращено. Для нового подключения нужно заново ввести логин и пароль.
                    |Продолжить?'
                    |;uk='Підключення користувача з логіном %1 до Інтернет-підтримки буде
                    |припинено. Для нового підключення потрібно заново ввести логін і пароль.
                    |Продовжити?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ЛогинПользователя);
	
	Возврат ТекстВопроса;
	
КонецФункции

// Возвращает параметры формы "ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету",
// формируемые из контекста взаимодействия с сервисом ИПП.
//
Функция ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия)
	
	КСКонтекст        = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	Логин = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "login");
	
	ПараметрыФормыОшибкиДоступа = Новый Структура(
		"МестоЗапуска, СтартовыеПараметры, ПриНачалеРаботыСистемы, Логин",
		ОсновныеПараметры.МестоЗапуска,
		КонтекстВзаимодействия.СтартовыеПараметрыМеханизма,
		КСКонтекст.ПриНачалеРаботыСистемы,
		Логин);
	
	Возврат ПараметрыФормыОшибкиДоступа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Процедура ПриНедоступностиПодключенияИПП(ОповещениеОЗавершении) Экспорт
	
	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Итерационное копирование списка значений.
//
Процедура СкопироватьСписокЗначенийИтерационно(Источник, Приемник) Экспорт
	
	Приемник.Очистить();
	Для каждого ЭлементИсточника Из Источник Цикл
		Приемник.Добавить(ЭлементИсточника.Значение, ЭлементИсточника.Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

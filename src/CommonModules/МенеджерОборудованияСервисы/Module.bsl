
#Область ПрограммныйИнтерфейс

// Функция возвращает URIПространстваИмен XDTO-пакета EquipmentService.
//
Функция URIПространстваИмен() Экспорт
	
	URIПространстваИмен = "http://www.1c.ru/EquipmentService";
	
	Возврат URIПространстваИмен;
	
КонецФункции

Функция ФабрикаXDTOСервисаОборудования() Экспорт
	
	Пакет = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен());
	МассивПакетов = Новый Массив();
	МассивПакетов.Добавить(Пакет);
	Фабрика = Новый ФабрикаXDTO(,МассивПакетов);
	
	Возврат Фабрика;
КонецФункции

// Метод Connect Web-сервиса EquipmentService.
//
Функция Соединиться(ИДУстройства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.УстройствоИспользуется
	|	И ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.WebСервисОборудование)
	|	И ПодключаемоеОборудование.ИдентификаторWebСервисОборудования = &ИдентификаторСервисОборудования";
	
	Запрос.УстановитьПараметр("ИдентификаторСервисОборудования", ИДУстройства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Метод GetSettings Web-сервиса EquipmentService.
//
Функция ПолучитьНастройки(ИДУстройства) Экспорт
	
	СтруктураНастроек = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруНастроек();
	
	МенеджерОборудованияСервисыПереопределяемый.ЗаполнитьНастройкиУстройства(ИДУстройства, СтруктураНастроек);
	
	ТекстСообщения = ПолучитьТекстXMLНастроек(СтруктураНастроек);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод GetPriceList Web-сервиса EquipmentService.
//
Функция ПолучитьПрайсЛист(ИДУстройства) Экспорт
	
	СтруктураПрайсЛиста = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
	
	МенеджерОборудованияСервисыПереопределяемый.ЗаполнитьПрайсЛист(ИДУстройства, СтруктураПрайсЛиста);
	ТекстСообщения = ПолучитьТекстXMLПрайсЛиста(СтруктураПрайсЛиста);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод PostDoc Web-сервиса EquipmentService.
//
Функция ЗагрузитьДокумент(ИДУстройства, ТипДокумента, XMLТекст) Экспорт
	
	СтруктураОтвета = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруОтветаПриЗагрузке();
	СтруктураДокумента = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗагружаемогоДокумента();
	ЗаполнитьСтруктуруДокумента(СтруктураДокумента, ТипДокумента, XMLТекст);
	
	МенеджерОборудованияСервисыПереопределяемый.ЗагрузитьДокумент(ИДУстройства, СтруктураОтвета, СтруктураДокумента);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен      = URIПространстваИмен();
	ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "Response");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтруктураОтвета);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Метод GetDocTypes Web-сервиса EquipmentService.
//
Функция ПолучитьТипыДокументов() Экспорт
	
	МассивТипов = Новый Массив;
	МенеджерОборудованияСервисыПереопределяемый.ЗаполнитьТипыДокументов(МассивТипов);
	ТекстСообщения = ПолучитьТекстXMLТиповДокументов(МассивТипов);
	
	Возврат ТекстСообщения;
КонецФункции

// Функция возвращает XML-текст настроек (Settings) в формате XDTO-пакета EquipmentService.
//
Функция ПолучитьТекстXMLНастроек(СтруктураНастроек) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен      = URIПространстваИмен();
	ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "Settings");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтруктураНастроек,,"ВидыОплаты");
	
	Если НЕ СтруктураНастроек.ВидыОплаты.Количество() = 0 Тогда
		
		ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "ВидыОплаты");
		ВидОплатыXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
		
		Для Каждого ВидОплаты Из СтруктураНастроек.ВидыОплаты Цикл
			
			ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "ВидыОплатыЗапись");
			ЗаписьВидыОплаты = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ЗаполнитьЗначенияСвойств(ЗаписьВидыОплаты, ВидОплаты);
			ВидОплатыXDTO.ВидыОплатыЗапись.Добавить(ЗаписьВидыОплаты);
			
		КонецЦикла;
		
		ОбъектОбмена.ВидыОплаты = ВидОплатыXDTO;
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Функция возвращает XML-текст прайс-листа (PriceList) в формате XDTO-пакета EquipmentService.
//
Функция ПолучитьТекстXMLПрайсЛиста(СтруктураПрайсЛиста) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	URIИмен      = URIПространстваИмен();
	
	ТипОбъекта      = ФабрикаXDTO.Тип(URIИмен, "PriceList");
	ОбъектПрайсЛист = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектПрайсЛист.ПолнаяЗагрузка = СтруктураПрайсЛиста.ПолнаяЗагрузка;
	
	// Группы товаров
	Если НЕ СтруктураПрайсЛиста.ГруппыТоваров.Количество() = 0 Тогда
		
		ТипОбъекта                    = ФабрикаXDTO.Тип(URIИмен, "ГруппыТоваров");
		ОбъектПрайсЛист.ГруппыТоваров = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ТипОбъекта                = ФабрикаXDTO.Тип(URIИмен, "ГруппыТоваровЗапись");
		
		Для Каждого ГруппаТоваров Из СтруктураПрайсЛиста.ГруппыТоваров Цикл
			
			ОбъектГруппыТоваровЗапись = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ЗаполнитьЗначенияСвойств(ОбъектГруппыТоваровЗапись, ГруппаТоваров);
			ОбъектПрайсЛист.ГруппыТоваров.ГруппыТоваровЗапись.Добавить(ОбъектГруппыТоваровЗапись);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СтруктураПрайсЛиста.Товары.Количество() = 0 Тогда
		
		ТипОбъектаТовары         = ФабрикаXDTO.Тип(URIИмен, "Товары");
		ТипОбъектаТоварыЗапись   = ФабрикаXDTO.Тип(URIИмен, "ТоварыЗапись");
		
		ОбъектПрайсЛист.Товары = ФабрикаXDTO.Создать(ТипОбъектаТовары);
		
		Для Каждого СтрокаДерева Из СтруктураПрайсЛиста.Товары Цикл
			
			Если СтрокаДерева.ИмеетХарактеристики И НЕ СтрокаДерева.ИмеетУпаковки Тогда
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева);
				
				ЗаписатьХарактеристики(ОбъектТоварыЗапись, СтрокаДерева);
				
			ИначеЕсли СтрокаДерева.ИмеетУпаковки И НЕ СтрокаДерева.ИмеетХарактеристики Тогда
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева);
				
				ЗаписатьУпаковки(ОбъектТоварыЗапись, СтрокаДерева);
				
			ИначеЕсли СтрокаДерева.ИмеетУпаковки И СтрокаДерева.ИмеетХарактеристики Тогда
				
			Иначе
				
				ОбъектТоварыЗапись = ФабрикаXDTO.Создать(ТипОбъектаТоварыЗапись);
				ЗаписатьТовар(ОбъектПрайсЛист, ОбъектТоварыЗапись, СтрокаДерева);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектПрайсЛист);
	
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Функция возвращает XML-текст прайс-листа (DocTypes) в формате XDTO-пакета EquipmentService.
//
Функция ПолучитьТекстXMLТиповДокументов(МассивТипов) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	URIИмен      = URIПространстваИмен();
	ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "DocTypes");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для Каждого ТипДокумента Из МассивТипов Цикл
		ТипОбъекта   = ФабрикаXDTO.Тип(URIИмен, "ТипыДокументовЗапись");
		ЗаписьТипДокумента = ФабрикаXDTO.Создать(ТипОбъекта);
		
		ЗаполнитьЗначенияСвойств(ЗаписьТипДокумента, ТипДокумента);
		ОбъектОбмена.ТипыДокументов.Добавить(ЗаписьТипДокумента);
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	ТекстСообщения = ЗаписьXML.Закрыть();
	
	Возврат ТекстСообщения;
	
КонецФункции

// Процедура заполняет структуру загружаемого документа из XML-текста.
//
Процедура ЗаполнитьСтруктуруДокумента(СтруктураДокумента, ТипДокумента, XMLТекст) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLТекст);
	
	Если ТипДокумента = "SalesReport" Тогда
		
		СтруктураДокумента.ТипДокумента = "SalesReport";
		
		Фабрика = ФабрикаXDTOСервисаОборудования();
		
		ТипXDTO = Фабрика.Тип("http://www.1c.ru/EquipmentService", "SalesReports");
		Данные = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
		ЧтениеXML.Закрыть();
		
		Если ЗначениеЗаполнено(Данные.Обработан) Тогда
			СтруктураДокумента.Обработан = Данные.Обработан;
			Возврат;
		КонецЕсли;
		
		СтруктураДокумента.ТипДокумента = "ОтчетОПродажах";
		
		Для Каждого Отчет Из Данные.ОтчетОПродажах Цикл
			
			СтруктураОтчета = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруОтчетаОПродажах();
			
			ЗаполнитьЗначенияСвойств(СтруктураОтчета, Отчет, "НомерСмены, ДатаОткрытияСмены, ДатаЗакрытияСмены");
			
			Для Каждого СтрокаТовары Из Отчет.ОтчетОПродажахТовары.ОтчетОПродажахТоварыЗапись Цикл
				
				ЗаписьТовары = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваТоварыОтчетаОПродажах();
				ЗаполнитьЗначенияСвойств(ЗаписьТовары, СтрокаТовары);
				СтруктураОтчета.Товары.Добавить(ЗаписьТовары);
				
			КонецЦикла;
			
			Для Каждого СтрокаОплаты Из Отчет.ОтчетОПродажахОплаты.ОтчетОПродажахОплатыЗапись Цикл
				
				ЗаписьОплаты = МенеджерОборудованияСервисыКлиентСервер.ПолучитьСтруктуруЗаписиМассиваОплаты();
				ЗаполнитьЗначенияСвойств(ЗаписьОплаты, СтрокаОплаты);
				СтруктураОтчета.Оплаты.Добавить(ЗаписьОплаты);
				
			КонецЦикла;
			
			СтруктураДокумента.Документы.Добавить(СтруктураОтчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет поле Обработан (Processed) .xml документа текущей датой в формате XDTO-пакета EquipmentService.
//
Процедура ПометитьОбработкуДокумента(Отказ, ПолноеИмяФайла, ТипДокумента, Сообщение) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	
	Фабрика = ФабрикаXDTOСервисаОборудования();
	
	ТипXDTO = Фабрика.Тип("http://www.1c.ru/EquipmentService", ТипДокумента);
	Данные = Фабрика.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	
	ЧтениеXML.Закрыть();
	
	Если ЗначениеЗаполнено(Данные.Обработан) Тогда
		Отказ = Истина;
		Сообщение = НСтр("ru='Отчет был обработан ранее. Пометка не производилась.';uk='Звіт був оброблений раніше. Відмітка не проводилася.'");
	Иначе
		Данные.Обработан = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Фабрика.ЗаписатьXML(ЗаписьXML, Данные);
		ЗаписьXML.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Процедура ЗаписатьТовар(ОбъектПрайсЛист, Запись, Источник)
	
	Если Источник.ИмеетУпаковки ИЛИ Источник.ИмеетХарактеристики Тогда
		
		СписокСвойств =
		"КодГруппы,
		|Наименование,
		|Артикул,
		|Весовой,
		|ЕдиницаИзмерения,
		|ИмеетУпаковки,
		|ИмеетХарактеристики,
		|СтавкаНДС,
		|Услуга
		|";
		
	Иначе
		
		СписокСвойств =
		"Код,
		|КодГруппы,
		|Наименование,
		|Артикул,
		|Весовой,
		|ЕдиницаИзмерения,
		|ИмеетУпаковки,
		|ИмеетХарактеристики,
		|СтавкаНДС,
		|Услуга,
		|Цена,
		|Штрихкод,
		|Остаток
		|";
		
	КонецЕсли;
	
	
	ЗаполнитьЗначенияСвойств(Запись, Источник, СписокСвойств);
	ОбъектПрайсЛист.Товары.ТоварыЗапись.Добавить(Запись);
	
КонецПроцедуры

Процедура ЗаписатьУпаковки(Запись, Источник)
	
	URIИмен      = URIПространстваИмен();
	ТипОбъектаУпаковки       = ФабрикаXDTO.Тип(URIИмен, "Упаковки");
	ТипОбъектаУпаковкиЗапись = ФабрикаXDTO.Тип(URIИмен, "УпаковкиЗапись");
	
	Запись.Упаковки = ФабрикаXDTO.Создать(ТипОбъектаУпаковки);
	
	Для Каждого СтрокаУпаковка Из Источник.Упаковки Цикл
		
		ОбъектУпаковкиЗапись = ФабрикаXDTO.Создать(ТипОбъектаУпаковкиЗапись);
		
		СписокСвойств = "Код,
		|Наименование,
		|Коэффициент,
		|Штрихкод,
		|Цена,
		|Остаток
		|";
		
		ЗаполнитьЗначенияСвойств(ОбъектУпаковкиЗапись, СтрокаУпаковка, СписокСвойств);
		Запись.Упаковки.УпаковкиЗапись.Добавить(ОбъектУпаковкиЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьХарактеристики(Запись, Источник)
	
	URIИмен      = URIПространстваИмен();
	ТипОбъектаХарактеристики       = ФабрикаXDTO.Тип(URIИмен, "Характеристики");
	ТипОбъектаХарактеристикиЗапись = ФабрикаXDTO.Тип(URIИмен, "ХарактеристикиЗапись");
	
	Запись.Характеристики = ФабрикаXDTO.Создать(ТипОбъектаХарактеристики);
	
	Для Каждого СтрокаХарактеристика Из Источник.Характеристики Цикл
		
		ОбъектХарактеристикиЗапись = ФабрикаXDTO.Создать(ТипОбъектаХарактеристикиЗапись);
		
		Если СтрокаХарактеристика.ИмеетУпаковки Тогда
			СписокСвойств = "Наименование,
			|ИмеетУпаковки
			|";
			
		Иначе
			СписокСвойств = "Код,
			|Наименование,
			|Штрихкод,
			|Цена,
			|Остаток,
			|ИмеетУпаковки
			|";
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектХарактеристикиЗапись, СтрокаХарактеристика, СписокСвойств);
		Запись.Характеристики.ХарактеристикиЗапись.Добавить(ОбъектХарактеристикиЗапись);
		
		Если СтрокаХарактеристика.ИмеетУпаковки Тогда
			ЗаписатьУпаковки(ОбъектХарактеристикиЗапись, СтрокаХарактеристика);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ПараметрыОбособленногоПодразделения = Новый ФиксированнаяСтруктура(Документы.ЛистКассовойКниги.ПараметрыОбособленногоПодразделения(Объект));
	УстановитьВидимостьОбособленногоПодразделения();
	ЗаполнитьСписокВыбораОбособленныхПодразделений();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//ЗаполнитьАналитикиДоходовРасходов(ЭтаФорма);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Кассы, "СтатьяДоходовРасходов");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Кассы.Очистить();
	Объект.ПоследнийНомерПКО = "";
	Объект.ПоследнийНомерРКО = "";
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ПараметрыОбособленногоПодразделения = Новый ФиксированнаяСтруктура(Документы.ЛистКассовойКниги.ПараметрыОбособленногоПодразделения(Объект));
	
	УстановитьВидимостьОбособленногоПодразделения();
	ЗаполнитьСписокВыбораОбособленныхПодразделений();
	
КонецПроцедуры


&НаКлиенте
Процедура ПоОбособленномуПодразделениюПриИзменении(Элемент)
	ПоОбособленномуПодразделениюПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПоОбособленномуПодразделениюПриИзмененииСервер()
	
	Объект.Кассы.Очистить();
	Объект.ПоследнийНомерПКО = "";
	Объект.ПоследнийНомерРКО = "";
	
	Элементы.ОбособленноеПодразделениеОрганизации.Видимость = Объект.ПоОбособленномуПодразделению;
	Если Не Объект.ПоОбособленномуПодразделению Тогда
		Объект.ОбособленноеПодразделениеОрганизации = Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧасти

&НаКлиенте
Процедура КассыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Кассы.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		Если Не ИспользоватьНесколькоКасс Тогда
			Если Не ЗначениеЗаполнено(Касса) Тогда
				ПолучитьКассуПоУмолчанию();
			КонецЕсли;
			СтрокаТаблицы.Касса = Касса;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыКассаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Кассы.ТекущиеДанные;
	ТекущаяСтрока.СуммаПоУчету = ОстатокВКассеПоУчету(ТекущаяСтрока.Касса);
	
КонецПроцедуры

&НаКлиенте
Процедура КассыСуммаПоУчетуПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Кассы.ТекущиеДанные;
	ТекущаяСтрока.СуммаРасхождения = ТекущаяСтрока.СуммаПоФакту - ТекущаяСтрока.СуммаПоУчету;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыСуммаФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Кассы.ТекущиеДанные;
	ТекущаяСтрока.СуммаРасхождения = ТекущаяСтрока.СуммаПоФакту - ТекущаяСтрока.СуммаПоУчету;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыСтатьяДоходовРасходовПриИзменении(Элемент)
	
	КассыСтатьяДоходовРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура КассыСтатьяДоходовРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.Кассы.НайтиПоИдентификатору(Элементы.Кассы.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяДоходовРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходовРасходов, СтрокаТаблицы.Подразделение, СтрокаТаблицы.АналитикаДоходов);
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	ИначеЕсли ТипЗнч(СтрокаТаблицы.СтатьяДоходовРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходовРасходов, СтрокаТаблицы.АналитикаРасходов);
		СтрокаТаблицы.АналитикаДоходов = Неопределено;
		СтрокаТаблицы.АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаДоходовОбязательна", "СтатьяДоходовРасходов, АналитикаДоходов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна", "СтатьяДоходовРасходов, АналитикаРасходов");
	СтруктураДействий.Вставить("ЗаполнитьТипСтатьи", "СтатьяДоходовРасходов");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КассыСтатьяДоходовРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Кассы.ТекущиеДанные;
	
	МассивТипов = Новый Массив;
	Если ТекущаяСтрока.СуммаРасхождения > 0 Тогда
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов"));
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, , );
	ИначеЕсли ТекущаяСтрока.СуммаРасхождения < 0 Тогда
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, , );
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура ЗаполнитьКассы(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьКассыЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.Кассы,
		СтруктураРеквизитов);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКассыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьКассыСервер();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНесколькоКасс = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.Кассы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Кассы, "СтатьяДоходовРасходов, АналитикаРасходов");
	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Кассы, "СтатьяДоходовРасходов");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("Кассы", "СтатьяДоходовРасходов, АналитикаДоходов"));
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("Кассы", "СтатьяДоходовРасходов, АналитикаРасходов"));
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(2); // Статьи доходов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "Кассы", ТипыСтатей);
	
	// Подсказка ввода суммы по факту
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КассыСуммаПоФакту.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Кассы.СуммаПоФакту");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для внесения результата>';uk='<для внесення результату>'"));
	
	// Поле расхождения - недостача
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишекНедостача.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Кассы.СуммаРасхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Недостача';uk='Нестача'"));
	
	// Поле расхождения - излишек
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИзлишекНедостача.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Кассы.СуммаРасхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Излишек';uk='Надлишок'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОбособленныхПодразделений()
	Если ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения Тогда
		Справочники.ОбособленныеПодразделенияОрганизаций.ОбособленныеПодразделенияОрганизации(Объект.Организация, Элементы.ОбособленноеПодразделениеОрганизации.СписокВыбора);
	Иначе
		Элементы.ОбособленноеПодразделениеОрганизации.СписокВыбора.Очистить();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассыСервер()
	
	Объект.Кассы.Очистить();
	Объект.ПоследнийНомерПКО = "";
	Объект.ПоследнийНомерРКО = "";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Кассы.Ссылка КАК Касса,
	|	Кассы.ВалютаДенежныхСредств КАК Валюта,
	|	ЕСТЬNULL(ДенежныеСредстваНаличные.СуммаОстаток, 0) КАК СуммаПоУчету,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваНаличные.СуммаОстаток, 0) > 0 ТОГДА
	|		-ЕСТЬNULL(ДенежныеСредстваНаличные.СуммаОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаРасхождения
	|	
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Остатки(&ДатаИнвентаризации, Организация = &Организация) КАК ДенежныеСредстваНаличные
	|	ПО
	|		ДенежныеСредстваНаличные.Касса = Кассы.Ссылка
	|		И ДенежныеСредстваНаличные.Организация = &Организация
	|	
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И Кассы.ОбособленноеПодразделениеОрганизации = &ОбособленноеПодразделениеОрганизации
	|	И НЕ Кассы.ПометкаУдаления
	|	
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	ИспользованиеОбособленногоПодразделения = ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения;	
	Если ИспользованиеОбособленногоПодразделения Тогда
		Если Объект.ПоОбособленномуПодразделению Тогда
			Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Объект.ОбособленноеПодразделениеОрганизации);
		Иначе
			Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ОбособленноеПодразделениеОрганизации", Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка());	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаИнвентаризации", Новый Граница(КонецДня(Объект.Дата)));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отсутствуют кассы для заполнения.';uk='Відсутні каси для заповнення.'"));
		Возврат;
	Иначе
		ТаблицаКасс = РезультатЗапроса.Выгрузить();
		ИнвентаризируемыеКассы = ТаблицаКасс.ВыгрузитьКолонку("Касса");
		Объект.Кассы.Загрузить(ТаблицаКасс);
	КонецЕсли;
	
	// Максимальные номера ордеров
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходныйКассовыйОрдер.Номер КАК НомерПКО
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен
	|	И ПриходныйКассовыйОрдер.Касса В (&Кассы)
	|	И ПриходныйКассовыйОрдер.Дата <= &ДатаИнвентаризации
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйКассовыйОрдер.Дата Убыв
	|;
	|/////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйКассовыйОрдер.Номер КАК НомерРКО
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.Касса В (&Кассы)
	|	И РасходныйКассовыйОрдер.Дата <= &ДатаИнвентаризации
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйКассовыйОрдер.Дата Убыв
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Кассы", ИнвентаризируемыеКассы);
	Запрос.УстановитьПараметр("ДатаИнвентаризации", КонецДня(Объект.Дата));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если Не РезультатЗапроса[0].Пустой() Тогда
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		Объект.ПоследнийНомерПКО = Выборка.НомерПКО;
	КонецЕсли;
	Если Не РезультатЗапроса[1].Пустой() Тогда
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		Объект.ПоследнийНомерРКО = Выборка.НомерРКО;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстатокВКассеПоУчету(КассаСсылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДенежныеСредстваНаличные.СуммаОстаток КАК СуммаПоУчету
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(,Касса = &Касса) КАК ДенежныеСредстваНаличные
	|");
	
	Запрос.УстановитьПараметр("Касса", КассаСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СуммаПоУчету;
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКассуПоУмолчанию()
	
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбособленногоПодразделения()
	
	Элементы.ГруппаОбособленноеПодразделение.Видимость  = ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения;
	Элементы.ОбособленноеПодразделениеОрганизации.Видимость = Объект.ПоОбособленномуПодразделению;
	Если Не ПараметрыОбособленногоПодразделения.ИспользованиеОбособленногоПодразделения Тогда
		Объект.ПоОбособленномуПодразделению = Ложь;
		Объект.ОбособленноеПодразделениеОрганизации = Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

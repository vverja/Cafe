
#Область ПрограммныйИнтерфейс

#Область ПодготовкаИЗзаписьДвиженийДокумента

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
КонецПроцедуры

Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет пордготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		ИсключаемыеРегистры.Добавить("ГрафикПоступленияТоваров");
		
		// Регистры, движения по которым формируются не из модуля менеджера документа,
		// но должны удаляться при отмене проведения документа.
		Если Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		 И НЕ Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПереоценкаВалютныхСредств") Тогда
				ИсключаемыеРегистры.Добавить("РасчетыСКлиентамиПоДокументам");
				ИсключаемыеРегистры.Добавить("РасчетыСПоставщикамиПоДокументам");
				Если Объект.ДополнительныеСвойства.Свойство("ОчищатьДвиженияНДСРасчетНалоговыхОбязательств") Тогда
	            	// Часть документов/хоз.операций предполагает формирование движений из модуля
					// менеджера документов по регистру НДСРасчетНалоговыхОбязательств
				Иначе				 
					ИсключаемыеРегистры.Добавить("НДСРасчетНалоговыхОбязательств");
				КонецЕсли;
				Если Объект.ДополнительныеСвойства.Свойство("ОчищатьДвиженияНДСРасчетНалоговогоКредита") Тогда
	            	// Часть документов/хоз.операций предполагает формирование движений из модуля
					// менеджера документов по регистру НДСРасчетНалоговогоКредита
				Иначе				 
					ИсключаемыеРегистры.Добавить("НДСРасчетНалоговогоКредита");
				КонецЕсли;
			КонецЕсли;
			Если
			 ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.КорректировкаРеализации")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				ИсключаемыеРегистры.Добавить("ПартииПроизводственныхЗатрат");
				ИсключаемыеРегистры.Добавить("ПартииТоваровОрганизаций");
				ИсключаемыеРегистры.Добавить("ПартииТоваровПереданныеНаКомиссию");
				ИсключаемыеРегистры.Добавить("ПартииРасходовНаСебестоимостьТоваров");
				ИсключаемыеРегистры.Добавить("ПартииЗатратНаВыпуск");
				ИсключаемыеРегистры.Добавить("КорректировкиНДСПартий");
				ИсключаемыеРегистры.Добавить("НДСУсловныеПродажи");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
			Объект.Ссылка,
			МетаданныеДвижения,
			ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля, РассчитыватьИзменения, ПараметрыКонтроля;
	
	// Заполним общие дополнительные свойства всех движений
	ИспользоватьПартионныйУчет = Константы.ИспользоватьПартионныйУчет.Получить();
	
	Для Каждого Движение Из Объект.Движения Цикл
		
		Движение.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);
		Движение.ДополнительныеСвойства.Вставить("РежимЗаписи", Объект.ДополнительныеСвойства.РежимЗаписи);
		Движение.ДополнительныеСвойства.Вставить("ДатаРегистратора", Объект.Дата);
		Движение.ДополнительныеСвойства.Вставить("СтруктураОтраженияРеглПроводок", Новый Структура);
		
		Движение.ДополнительныеСвойства.Вставить("ДляПроведения", 
			Новый Структура("СтруктураВременныеТаблицы, ПартионныйУчет",
				// Структура для передачи данных в модули наборов записей.
				Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы,
				ИспользоватьПартионныйУчет));
		
	КонецЦикла;
	
	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		
		// Установка флага регистрации изменений в наборе записей.
		Если НЕ Объект.ДополнительныеСвойства.Свойство("РассчитыватьИзменения", РассчитыватьИзменения) Тогда
			РассчитыватьИзменения = Истина;
		КонецЕсли;
		
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", РассчитыватьИзменения);
				
				// Необходимость контроля обеспечения устанавливается при выполнении рекомендаций в "Состояние обеспечения заказов".
				КонтролироватьОбеспечение = Неопределено;
				Если Объект.ДополнительныеСвойства.Свойство("КонтролироватьОбеспечение", КонтролироватьОбеспечение) Тогда
					НаборЗаписей.ДополнительныеСвойства.Вставить("КонтролироватьОбеспечение", КонтролироватьОбеспечение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	//Для отработки случаев, когда документ перестает делать движения по регистру (при изменении вида операции). Очистим оффлайновые регистры.
	Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Если Объект.Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда
			
			СтатусОплачивается = Неопределено;
			
			Если Объект.Движения.РасчетыСКлиентами.Записывать
					И (Объект.Движения.РасчетыСКлиентами.Количество() = 0
					ИЛИ (Объект.ДополнительныеСвойства.Свойство("СтатусОплачивается", СтатусОплачивается) И СтатусОплачивается)) Тогда
				Объект.Движения.РасчетыСКлиентамиПоДокументам.Записывать = Истина;
				Если Объект.Движения.Найти("НДСРасчетНалоговыхОбязательств") <> Неопределено Тогда
					Объект.Движения.НДСРасчетНалоговыхОбязательств.Записывать = Истина;	
				КонецЕсли; 
			КонецЕсли;

		КонецЕсли;

		Если Объект.Движения.Найти("РасчетыСПоставщиками") <> Неопределено Тогда

			СтатусОплачивается = Неопределено;
			
			Если Объект.Движения.РасчетыСПоставщиками.Записывать
					И (Объект.Движения.РасчетыСПоставщиками.Количество() = 0
					ИЛИ (Объект.ДополнительныеСвойства.Свойство("СтатусОплачивается", СтатусОплачивается) И СтатусОплачивается)) Тогда
				Объект.Движения.РасчетыСПоставщикамиПоДокументам.Записывать = Истина;
				Если Объект.Движения.Найти("НДСРасчетНалоговогоКредита") <> Неопределено Тогда
					Объект.Движения.НДСРасчетНалоговогоКредита.Записывать = Истина;	
				КонецЕсли; 
			КонецЕсли;

		КонецЕсли;
		
		Если Объект.Движения.Найти("МатериалыИРаботыВПроизводстве") <> Неопределено Тогда
			Если Объект.Движения.МатериалыИРаботыВПроизводстве.Количество() = 0 И Объект.Движения.МатериалыИРаботыВПроизводстве.Записывать Тогда
				Объект.Движения.ПартииПроизводственныхЗатрат.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	
	ДвиженияТоварыОрганизаций = Объект.Движения.Найти("ТоварыОрганизаций");
	ДвиженияПартииТоваровОрганизаций = Объект.Движения.Найти("ПартииТоваровОрганизаций");
	ДвиженияРасчетыСКлиентамиПоДокументам = Объект.Движения.Найти("РасчетыСКлиентамиПоДокументам");
	
	Если ДвиженияТоварыОрганизаций <> Неопределено
		И ДвиженияТоварыОрганизаций.Количество() = 0
		И ДвиженияТоварыОрганизаций.Записывать Тогда	
		
		Если ДвиженияПартииТоваровОрганизаций <> Неопределено Тогда
			ДвиженияПартииТоваровОрганизаций.Записывать = Истина;
		КонецЕсли;

		Если ДвиженияРасчетыСКлиентамиПоДокументам <> Неопределено Тогда
			ДвиженияРасчетыСКлиентамиПоДокументам.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Движения.Записать();
	
КонецПроцедуры

// Процедура переписывает строки таблицы в указанные движения документа
//
// Параметры:
// 		Таблица - ТаблицаЗначений - Таблица, строки которой должны быть помещены в движения документа
// 		Движения - Элемент коллекции движений документа, набор записей регистра
// 		Отказ - Булево - Признак отказа выполнения транзакции
//
Процедура ОтразитьДвижения(Таблица, Движения, Отказ) Экспорт
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Записывать = Истина;
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура очищает и записывает пустые движения по указанным регистрам
//
// Параметры:
// 		Движения - КоллекцияДвижений - Коллекция наборов записей регистров документа
// 		Регистры - Строка - Строка с именами регистров для очистки, перечисленными через запятую
//
Процедура ОчиститьЗаписатьДвижения(Движения, Регистры) Экспорт
	
	СтруктураРегистров = Новый Структура(Регистры);
	Для Каждого КлючИЗначение Из СтруктураРегистров Цикл
		Движения[КлючИЗначение.Ключ].Очистить();
		Движения[КлючИЗначение.Ключ].Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы
//
// Параметры:
//	Запрос				- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса		- Список значений - в списке перечислены тексты запросов и их имена.
//	Таблицы				- Структура - структура в которую будут помещены полученные таблицы для движений.
//	ДобавитьРазделитель	- Булево - Истина, если нужно добавить разделитель ";" между запросами.
//	ДобавлятьСловоТаблица	- Булево - Истина, если к имени таблицы движений нужно вначало добавить слово "Таблица"
//
Процедура ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные=Ложь) Экспорт
	
	ТаблицыЗапроса = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, ДобавитьРазделитель);
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) И (Не ТолькоОтмеченные Или ТекстЗапроса.Пометка) Тогда

			Если ДобавлятьСловоТаблица Тогда
				// Таблицы для проведения должны начинаться с "Таблица"
				Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
					ИмяТаблицы = "Таблица" + ИмяТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			Таблицы.Вставить(ИмяТаблицы, ТаблицыЗапроса[ТекстЗапроса.Представление]);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Проверяет наличие текста запроса для формирования указанной таблицы
//
// Параметры:
//  ИмяТаблицы		- Строка - имя таблицы
//	ТекстыЗапроса 	- Список значений - список значений, значениями которого являются блоки запроса,
//	                                  синонимами - имена таблиц в которые необходимо поместить
//	                                  результат выполнения каждого отдельного блока запроса.
// 
// Возвращаемое значение:
//   - Булево - Истина, если текст запроса есть.
//
Функция ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Экспорт

	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если НРег(ТекстЗапроса.Представление) = НРег(ИмяТаблицы) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции

// Определяет необходимость подготовить таблицу для формирования движений
//
// Параметры:
//  ИмяРегистра	- Строка - имя регистра. Например "ТоварыНаСкладах"
//  Регистры	- Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров
//													Если неопределено - то всегда возвращается ИСТИНА
// 
// Возвращаемое значение:
//   - Булево - Истина, если требуется инициализировать указанную таблицу
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт

	Если ЗначениеЗаполнено(Регистры) Тогда
		
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			МассивРегистров = Новый Структура(Регистры);
		Иначе
			МассивРегистров = Регистры;
		КонецЕсли;
		
		Если НЕ МассивРегистров.Свойство(ИмяРегистра) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

// Процедура формирует текст исключения и вызывает исключение
// используется для прерывания проведения в документах для которых запрещено выборочное проведение по регистрам
//
//  ЗапретныйДокумент - ДокументСсылка, ДокументОбъект - документ для которого необходимо сформировать и вызвать исключения
// 
Процедура ЗапретВыборочногоПроведенияПоРегистрам(ЗапретныйДокумент) Экспорт
	
	ТекстИсключения = СтрШаблон(НСтр("ru='Для документа ""%1"" запрещено выборочное проведение по регистрам.';uk='Для документа ""%1"" заборонене вибіркове проведення по регістрах.'"),
								ЗапретныйДокумент.Метаданные().Синоним);
	ВызватьИсключение ТекстИсключения;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаИЗаписьПодчиненныхДанныхПослеПроведенияДокумента

// Проверяет наличие дополнительного свойства, отвечающего за параметры записи подчиненных данных, осуществляемой
// после записи документа и его движений.
//
Функция ЗаписыватьПодчиненныеДанные(ДополнительныеСвойства, ТипПодчиненныхДанных) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипПодчиненныхДанных = "СостоянияЗаказов" Тогда
		Возврат ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных.Свойство("СтруктураДляРасчетаСостояний");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Добавляет в структуру дополнительных свойств регистра накопления параметры записи подчиненных данных, осуществляемой
// после записи документа и его движений.
//
Процедура ДобавитьСтруктуруЗаписиПодчиненныхДанных(ДополнительныеСвойства, ТипПодчиненныхДанных) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
		ДополнительныеСвойства.Вставить("ДляЗаписиПодчиненныхДанных", Новый Структура());
	КонецЕсли;
		
	Если ТипПодчиненныхДанных = "СостоянияЗаказов" Тогда
		
		СтруктураДляРасчетаСостояний = Новый Структура("МассивЗаказов", Новый Массив());
		ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных.Вставить("СтруктураДляРасчетаСостояний", СтруктураДляРасчетаСостояний);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в структуру дополнительных свойств объекта параметры записи подчиненных данных, осуществляемой
// после записи документа и его движений.
//
Процедура ДобавитьЗаказДляРасчетаСостояний(ДополнительныеСвойства, Ссылка) Экспорт
	
	СтруктураДляРасчетаСостояний = Новый Структура("МассивЗаказов", Новый Массив());
	СтруктураДляРасчетаСостояний.МассивЗаказов.Добавить(Ссылка);
	ДополнительныеСвойства.Вставить("ДляЗаписиПодчиненныхДанных", Новый Структура("СтруктураДляРасчетаСостояний", СтруктураДляРасчетаСостояний));
	
КонецПроцедуры

// Осуществляеет запись подчиненных данных после записи документа и его движений.
//
Процедура ЗаписатьПодчиненныеНаборамЗаписейДанные(Объект, Отказ) Экспорт
	
	МассивЗаказов = Новый Массив();
	Для Каждого Набор Из Объект.Движения Цикл
		
		Если Не Набор.ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСвойств = Набор.ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных;
		
		Если СтруктураСвойств.Свойство("СтруктураДляРасчетаСостояний") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗаказов, СтруктураСвойств.СтруктураДляРасчетаСостояний.МассивЗаказов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДляЗаписиПодчиненныхДанных") Тогда
		
		СтруктураСвойств = Объект.ДополнительныеСвойства.ДляЗаписиПодчиненныхДанных;
		Если СтруктураСвойств.Свойство("СтруктураДляРасчетаСостояний") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЗаказов, СтруктураСвойств.СтруктураДляРасчетаСостояний.МассивЗаказов);
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.СостоянияВнутреннихЗаказов.ОтразитьСостояниеЗаказа(МассивЗаказов, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыКонтроляДвиженийДокументовПоРегистрам

// Процедура выполняет контроль результатов проведения.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт

	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) 
		Или Объект.ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДанныеТаблиц    = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПакетЗапросов   = Новый Запрос;
	МассивКонтролей = Новый Массив;
	ТекстЗапроса    = "";

	// Контроль отрицательных остатков по товарам
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияСвободныеОстаткиИзменение")
		Или ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияГрафикОтгрузкиТоваровИзменение") Тогда

		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаКонтрольОбеспечения(
			ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияСвободныеОстаткиИзменение"),
			ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияГрафикОтгрузкиТоваровИзменение"));

		МассивКонтролей.Добавить(Врег("ОбеспечениеВременнаяТаблица1"));
		МассивКонтролей.Добавить(Врег("ОбеспечениеВременнаяТаблица2"));
		МассивКонтролей.Добавить(Врег("Обеспечение"));

	КонецЕсли;

	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтгрузкеИзменениеСводно") Тогда

		МассивКонтролей.Добавить(Врег("ДвиженияТоварыКОтгрузкеСводно"));

		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	Остатки.Номенклатура      КАК Номенклатура,
		|	Остатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Остатки.Характеристика    КАК Характеристика,
		|	Остатки.Назначение    	  КАК Назначение,
		|	Остатки.Склад             КАК Склад,
		|	Остатки.Серия             КАК Серия,
		|	СУММА(Остатки.Количество) КАК Количество
		|
		|ИЗ 
		|(ВЫБРАТЬ
		|	Т.Номенклатура       КАК Номенклатура,
		|	Т.Характеристика     КАК Характеристика,
		|	Т.Назначение     	 КАК Назначение,
		|	Т.Склад              КАК Склад,
		|	Т.Серия              КАК Серия,
		|	-Т.ВРезервеОстаток - Т.КОтгрузкеОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Назначение, Склад, Серия) В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.Назначение,
		|					Т.Склад,
		|					Т.Серия
		|				ИЗ
		|					ДвиженияТоварыКОтгрузкеИзменениеСводно КАК Т)) КАК Т
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Номенклатура    КАК Номенклатура,
		|	Т.Характеристика  КАК Характеристика,
		|	Т.Назначение	  КАК Назначение,
		|	Т.Склад           КАК Склад,
		|	Т.Серия           КАК Серия,
		|	Т.ВНаличииОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Назначение, Склад, Серия) В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.Назначение,
		|					Т.Склад,
		|					Т.Серия
		|				ИЗ
		|					ДвиженияТоварыКОтгрузкеИзменениеСводно КАК Т)) КАК Т
		|) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Назначение,
		|	Остатки.Склад,
		|	Остатки.Серия
		|
		|ИМЕЮЩИЕ
		|	СУММА(Остатки.Количество) < 0	
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ОбеспечениеЗаказовИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ОбеспечениеЗаказов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                     КАК Номенклатура,
		|	Таблица.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
		|	Таблица.Характеристика                   КАК Характеристика,
		|	Таблица.Склад                            КАК Склад,
		|	Таблица.Назначение                       КАК Назначение,
		|
		|	Таблица.Заказать                         КАК Заказать,
		|	Таблица.Наличие                          КАК Наличие,
		|	Таблица.Потребность                      КАК Потребность,
		|
		|	Таблица.НаличиеИзменение                 КАК НаличиеИзменение,
		|	Таблица.ПотребностьИзменение             КАК ПотребностьИзменение,
		|	Таблица.ЗаказатьИзменение                КАК ЗаказатьИзменение,
		|
		|	Таблица.ОшибкаЗаказатьМеньшеНуля         КАК ОшибкаЗаказатьМеньшеНуля,
		|	Таблица.ВеличинаЗаказатьМеньшеНуля       КАК ВеличинаЗаказатьМеньшеНуля,
		|	Таблица.ОшибкаНаличиеВМинусе             КАК ОшибкаНаличиеВМинусе,
		|	Таблица.ОшибкаНаличиеБольшеПотребности   КАК ОшибкаНаличиеБольшеПотребности,
		|	Таблица.ВеличинаНаличиеБольшеПотребности КАК ВеличинаНаличиеБольшеПотребности
		|
		|ИЗ(
		|	ВЫБРАТЬ
		|		Остатки.Номенклатура                      КАК Номенклатура,
		|		Остатки.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|		Остатки.Характеристика                    КАК Характеристика,
		|		Остатки.Склад                             КАК Склад,
		|		Остатки.Назначение                        КАК Назначение,
		|		Остатки.Заказать                          КАК Заказать,

		|		Остатки.Наличие                           КАК Наличие,
		|		Остатки.Потребность                       КАК Потребность,
		|		// Ресурсы которые изменились
		|		ТаблицаИзменений.НаличиеИзменение         КАК НаличиеИзменение,
		|		ТаблицаИзменений.ПотребностьИзменение     КАК ПотребностьИзменение,
		|		ТаблицаИзменений.ЗаказатьИзменение        КАК ЗаказатьИзменение,
		|
		|		//Ошибка Заказать
		|		ВЫБОР КОГДА ТаблицаИзменений.ЗаказатьИзменение >0 И Остатки.Заказать < 0 ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                 КАК ОшибкаЗаказатьМеньшеНуля,
		|		Остатки.Заказать                          КАК ВеличинаЗаказатьМеньшеНуля,
		|
		|
		|		// Ошибка наличия товара под назначение
		|		ВЫБОР КОГДА ТаблицаИзменений.НаличиеИзменение >0 И Остатки.Наличие < 0 ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                 КАК ОшибкаНаличиеВМинусе,
		|
		|		// Ошибка наличия больше потребности
		|		ВЫБОР КОГДА (ТаблицаИзменений.НаличиеИзменение <0 ИЛИ ТаблицаИзменений.ПотребностьИзменение >0)
		|					И (Остатки.Наличие > Остатки.Потребность И Остатки.Заказать>=0) ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                 КАК ОшибкаНаличиеБольшеПотребности,
		|		Остатки.Наличие - Остатки.Потребность     КАК ВеличинаНаличиеБольшеПотребности
		|
		|	ИЗ(
		|		ВЫБРАТЬ
		|			Остатки.Номенклатура                   КАК Номенклатура,
		|			Остатки.Характеристика                 КАК Характеристика,
		|			Остатки.Склад                          КАК Склад,
		|			Остатки.Назначение                     КАК Назначение,
		|			Остатки.КЗаказуОстаток                 КАК Заказать,
		|			Остатки.НаличиеПодЗаказОстаток         КАК Наличие,
		|			Остатки.ПотребностьОстаток             КАК Потребность
		|		ИЗ
		|			РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|				(Номенклатура, Характеристика, Склад, Назначение) В(
		|					ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Склад,
		|						Таблица.Назначение
		|					ИЗ
		|						ОбеспечениеЗаказовИзменение КАК Таблица)) КАК Остатки
		|
		|	) КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеЗаказовИзменение КАК ТаблицаИзменений
		|	ПО
		|		Остатки.Номенклатура     = ТаблицаИзменений.Номенклатура
		|		И Остатки.Характеристика = ТаблицаИзменений.Характеристика
		|		И Остатки.Склад          = ТаблицаИзменений.Склад
		|		И Остатки.Назначение     = ТаблицаИзменений.Назначение
		|
		|) КАК Таблица
		|ГДЕ
		|	Таблица.ОшибкаЗаказатьМеньшеНуля = ИСТИНА
		|	ИЛИ Таблица.ОшибкаНаличиеВМинусе = ИСТИНА
		|	ИЛИ Таблица.ОшибкаНаличиеБольшеПотребности = ИСТИНА
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";

	КонецЕсли;

	// Контроль отрицательных остатков ОбеспечениеЗаказовРаботами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ОбеспечениеЗаказовРаботамиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ОбеспечениеЗаказовРаботами"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Назначение          КАК Назначение,
		|	ТаблицаОстатков.Номенклатура        КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика      КАК Характеристика,
		|	ТаблицаОстатков.Подразделение       КАК Подразделение,
		|	ТаблицаОстатков.КОбеспечениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
		|			(Назначение, Номенклатура, Характеристика, Подразделение) В
		|				(ВЫБРАТЬ
		|					Таблица.Назначение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Подразделение
		|				ИЗ
		|					ОбеспечениеЗаказовРаботамиИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОбеспечениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаСборку.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаСборкуИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаСборку"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаСборку      КАК ЗаказНаСборку,
		|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика     КАК Характеристика,
		|	ТаблицаОстатков.Серия              КАК Серия,
		|	ТаблицаОстатков.КодСтроки          КАК КодСтроки,
		|	ТаблицаОстатков.ТипСборки          КАК ТипСборки,
		|	ТаблицаОстатков.КОформлениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(,
		|			(ЗаказНаСборку, Номенклатура, Характеристика, Серия, ТипСборки, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаСборку,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Серия,
		|					Таблица.ТипСборки,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаказыНаСборкуИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаПеремещение.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаПеремещениеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаПеремещение"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаПеремещение КАК Заказ,
		|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика     КАК Характеристика,
		|	ТаблицаОстатков.Серия              КАК Серия,
		|	ТаблицаОстатков.КодСтроки          КАК КодСтроки,
		|	НЕОПРЕДЕЛЕНО                       КАК Склад,
		|	НЕОПРЕДЕЛЕНО                       КАК Подразделение,
		|	ТаблицаОстатков.КОформлениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
		|			(ЗаказНаПеремещение, Номенклатура, Характеристика, Серия,  КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаПеремещение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Серия,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаказыНаПеремещениеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаВнутреннееПотребление.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаВнутреннееПотреблениеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаВнутреннееПотребление"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаВнутреннееПотребление  КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                КАК Характеристика,
		|	ТаблицаОстатков.Серия                         КАК Серия,
		|	ТаблицаОстатков.КодСтроки                     КАК КодСтроки,
		|	ТаблицаОстатков.Склад                         КАК Склад,
		|	ТаблицаОстатков.КОформлениюОстаток            КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(,
		|			(ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, Серия, КодСтроки, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаВнутреннееПотребление,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Серия,
		|					Таблица.КодСтроки,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияЗаказыНаВнутреннееПотреблениеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных оборотов ТМЦВЭксплуатации.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТМЦВЭксплуатацииИзменение") Тогда
		
		МассивКонтролей.Добавить(ВРег("ТМЦВЭксплуатации"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОборотов.Организация  КАК Организация,
		|	ТаблицаОборотов.Подразделение КАК Подразделение,
		|	ТаблицаОборотов.Номенклатура КАК Номенклатура,
		|	ТаблицаОборотов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОборотов.Характеристика КАК Характеристика,
		|	ТаблицаОборотов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаОборотов.Партия КАК Партия,
		|	ТаблицаОборотов.КоличествоОборот КАК Количество
		|ИЗ
		|	РегистрНакопления.ТМЦВЭксплуатации.Обороты(,,,
		|			(Организация, Подразделение, ФизическоеЛицо, Партия) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Подразделение,
		|					Таблица.ФизическоеЛицо,
		|					Таблица.Партия
		|				ИЗ
		|					ДвиженияТМЦВЭксплуатацииИзменение КАК Таблица)
		|	) КАК ТаблицаОборотов
		|
		|ГДЕ
		|	ТаблицаОборотов.КоличествоОборот < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ТоварыКОтгрузке.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтгрузкеИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ТоварыКОтгрузке"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ДокументОтгрузки              КАК ДокументОтгрузки,
		|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                КАК Характеристика,
		|	ТаблицаОстатков.Назначение                    КАК Назначение,
		|	ТаблицаОстатков.Серия                         КАК Серия,
		|	ТаблицаОстатков.Склад                         КАК Склад,
		|	ТаблицаОстатков.КОтгрузкеОстаток
		|	 - ТаблицаОстатков.СобираетсяОстаток
		|    - ТаблицаОстатков.СобраноОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(,
		|			(ДокументОтгрузки, Номенклатура, Характеристика, Назначение, Серия, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументОтгрузки,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Назначение,
		|					Таблица.Серия,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияТоварыКОтгрузкеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОтгрузкеОстаток - ТаблицаОстатков.СобираетсяОстаток - ТаблицаОстатков.СобраноОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыКлиентов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыКлиентовИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыКлиентов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказКлиента                   КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.Серия                          КАК Серия,
		|	ТаблицаОстатков.КодСтроки                      КАК КодСтроки,
		|	ТаблицаОстатков.Склад                          КАК Склад,
		|	ТаблицаОстатков.КОформлениюОстаток             КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
		|			(ЗаказКлиента, Номенклатура, Характеристика, Серия, КодСтроки, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказКлиента,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Серия,
		|					Таблица.КодСтроки,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияЗаказыКлиентовИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыПоставщикам.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыПоставщикамИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыПоставщикам"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказПоставщику                КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                      КАК КодСтроки,
		|	ТаблицаОстатков.Склад                          КАК Склад,
		|	ТаблицаОстатков.КОформлениюОстаток             КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
		|			(ЗаказПоставщику, Номенклатура, Характеристика, КодСтроки, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказПоставщику,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияЗаказыПоставщикамИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаявкиНаВозвратТоваровОтКлиентов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаявкиНаВозвратТоваровОтКлиентов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
		|	ТаблицаОстатков.Номенклатура                    КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                  КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                       КАК КодСтроки,
		|	ТаблицаОстатков.КОформлениюОстаток              КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(,
		|			(ЗаявкаНаВозвратТоваровОтКлиента, Номенклатура, Характеристика, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаявкаНаВозвратТоваровОтКлиента,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков по ДенежныеСредстваКВыплате.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДенежныеСредстваКВыплатеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ДенежныеСредстваКВыплате"));
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	Заявка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств.Валюта КАК Валюта,
		|	ТаблицаОстатков.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	ТаблицаОстатков.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
		|	ТаблицаОстатков.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаОстатков.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаОстатков.СуммаОстаток КАК Сумма,
		|
		|	Заявка.Организация КАК ОрганизацияЗаявки,
		|	Заявка.Контрагент КАК КонтрагентЗаявки,
		|
		|	ВЫБОР КОГДА Заявка.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) ТОГДА
		|		ТаблицаОстатков.ПодотчетноеЛицо
		|	ИНАЧЕ
		|		Заявка.ПодотчетноеЛицо
		|	КОНЕЦ КАК ПодотчетноеЛицоЗаявки,
		|
		|	ВЫБОР КОГДА ТаблицаСтатейДДС.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL
		|		И ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|	ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК РасхождениеСтатьиДДС,
		|
		|	ВЫБОР КОГДА ТаблицаПартнеров.Партнер ЕСТЬ NULL
		|		И ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|		И НЕ Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
		|	ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК РасхождениеПартнера,
		|
		|	ВЫБОР КОГДА ТаблицаАналитикиРасходов.АналитикаРасходов ЕСТЬ NULL
		|		И НЕ Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
		|	ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК РасхождениеАналитикиРасходов
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
		|			(ЗаявкаНаРасходованиеДенежныхСредств,
		|				СтатьяДвиженияДенежныхСредств,
		|				АналитикаУчетаПоПартнерам,
		|				ПодотчетноеЛицо,
		|				СтатьяРасходов,
		|				АналитикаРасходов) В
		|			(ВЫБРАТЬ
		|				Таблица.ЗаявкаНаРасходованиеДенежныхСредств,
		|				Таблица.СтатьяДвиженияДенежныхСредств,
		|				Таблица.АналитикаУчетаПоПартнерам,
		|				Таблица.ПодотчетноеЛицо,
		|				Таблица.СтатьяРасходов,
		|				Таблица.АналитикаРасходов
		|			ИЗ
		|				ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
		|	ПО
		|		ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РасшифровкаПлатежа.Партнер КАК Партнер
		|		ИЗ
		|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица
		|		ПО
		|			РасшифровкаПлатежа.Ссылка = Таблица.ЗаявкаНаРасходованиеДенежныхСредств
		|		) КАК ТаблицаПартнеров
		|	ПО
		|		ТаблицаОстатков.АналитикаУчетаПоПартнерам.Партнер = ТаблицаПартнеров.Партнер
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|		ИЗ
		|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица
		|		ПО
		|			РасшифровкаПлатежа.Ссылка = Таблица.ЗаявкаНаРасходованиеДенежныхСредств
		|		ГДЕ
		|			РасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация НЕ В
		|				(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств))
		|			
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|		ИЗ
		|			Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица
		|		ПО
		|			Заявка.Ссылка = Таблица.ЗаявкаНаРасходованиеДенежныхСредств
		|		ГДЕ
		|			Заявка.ХозяйственнаяОперация В
		|				(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств))
		|	
		|		) КАК ТаблицаСтатейДДС
		|	ПО
		|		ТаблицаОстатков.СтатьяДвиженияДенежныхСредств = ТаблицаСтатейДДС.СтатьяДвиженияДенежныхСредств
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВЫБОР КОГДА РасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
		|				) ТОГДА
		|				РасшифровкаПлатежа.СтатьяРасходов
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|			КОНЕЦ КАК СтатьяРасходов,
		|			РасшифровкаПлатежа.АналитикаРасходов КАК АналитикаРасходов
		|		ИЗ
		|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица
		|			ПО
		|				РасшифровкаПлатежа.Ссылка = Таблица.ЗаявкаНаРасходованиеДенежныхСредств
		|		) КАК ТаблицаАналитикиРасходов
		|	ПО
		|		ТаблицаОстатков.СтатьяРасходов = ТаблицаАналитикиРасходов.СтатьяРасходов
		|		И ТаблицаОстатков.АналитикаРасходов = ТаблицаАналитикиРасходов.АналитикаРасходов
		|
		|ГДЕ
		|	ТаблицаОстатков.СуммаОстаток > 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль предоплаты по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("РасчетыСКлиентами"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаЗаказы.ЗаказКлиента КАК ЗаказКлиента,
		|	ТаблицаЗаказы.Валюта       КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ)                 КАК СуммаЗаказа,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ +
		|		ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ТаблицаЗаказы.Оплачивается
		|			ИНАЧЕ ТаблицаЗаказы.Оплачивается
		|		КОНЕЦ)                 КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ТаблицаЗаказы
		|ГДЕ
		|	(ТаблицаЗаказы.ЗаказКлиента, ТаблицаЗаказы.Валюта, ТаблицаЗаказы.Активность) В
		|			(ВЫБРАТЬ
		|				Таблица.ЗаказКлиента,
		|				Таблица.Валюта,
		|				ИСТИНА
		|			ИЗ
		|				ДвиженияРасчетыСКлиентамиИзменение КАК Таблица)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.Валюта,
		|	ТаблицаЗаказы.ЗаказКлиента
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ) > 0
		|	И
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|	> 
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ +
		|		ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ТаблицаЗаказы.Оплачивается
		|			ИНАЧЕ ТаблицаЗаказы.Оплачивается
		|		КОНЕЦ)
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

		// Контроли по РасчетыСКлиентами (временные таблицы).
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга")
	 ИЛИ ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда

		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаДанныеДоговоровПредварительные"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаДанныеДоговоров"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаОбъектыРасчетов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента.Договор                КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
		|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
		|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ПОМЕСТИТЬ ДанныеДоговоровПредварительные
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента.Договор = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента                        КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
		|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
		|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента.Договор                КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
		|	0                                                   КАК ДопустимаяСуммаЗадолженности,
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента.Договор = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента                        КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
		|	0                                                   КАК ДопустимаяСуммаЗадолженности,
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоговоров.Договор                                        КАК Договор,
		|	ДанныеДоговоров.Валюта                                         КАК Валюта,
		|	МАКСИМУМ(ДанныеДоговоров.ОграничиватьСуммуЗадолженности)       КАК КонтрольСуммы,
		|	МАКСИМУМ(ДанныеДоговоров.ДопустимаяСуммаЗадолженности)         КАК ДопустимаяСумма,
		|	МАКСИМУМ(ДанныеДоговоров.ЗапрещаетсяПросроченнаяЗадолженность) КАК КонтрольСрока
		|
		|ПОМЕСТИТЬ ДанныеДоговоров
		|ИЗ
		|	ДанныеДоговоровПредварительные КАК ДанныеДоговоров
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДоговоров.Договор,
		|	ДанныеДоговоров.Валюта
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДоговора.Ссылка  КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ПОМЕСТИТЬ ОбъектыРасчетов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДоговора.Ссылка = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДоговора.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)	
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
		
		ПакетЗапросов.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		
	КонецЕсли;
	
	// Контроль ограничения задолженности по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга") Тогда

		МассивКонтролей.Добавить(Врег("ОграничениеСуммыЗадолженности"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Договор                                   КАК Договор,
		|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
		|	МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)                  КАК ДопустимаяСуммаЗадолженности,
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) +
		|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток)    КАК СуммаОстаток,
		|
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) +
		|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток) -
		|		МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)              КАК СуммаПревышения
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		,
		|		(ЗаказКлиента, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСуммы)
		|	) КАК РасчетыСКлиентамиОстатки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ОбъектыРасчетов КАК ОбъектыРасчетов
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ДанныеДоговоров КАК ДанныеДоговоров
		|		ПО
		|			ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
		|			И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
		|	
		|	ПО
		|		РасчетыСКлиентамиОстатки.ЗаказКлиента = ОбъектыРасчетов.ЗаказКлиента
		|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Договор,
		|	РасчетыСКлиентамиОстатки.Валюта
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток)+
		|		СУММА(РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток) > МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль просроченной задолженности по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда

		МассивКонтролей.Добавить(Врег("КонтрольСрокаЗадолженности"));
		ПакетЗапросов.УстановитьПараметр("ПериодКонтроляСрокаДолга", Макс(КонецДня(ТекущаяДата()), КонецДня(Объект.Дата)));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Договор                                   КАК Договор,
		|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
		|	СУММА(ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток >
		|						РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток ТОГДА
		|		РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.СуммаОстаток
		|	КОНЕЦ) КАК ПросроченнаяЗадолженность
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		&ПериодКонтроляСрокаДолга,
		|		(ЗаказКлиента, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
		|	) КАК РасчетыСКлиентамиОстатки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ОбъектыРасчетов КАК ОбъектыРасчетов
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ДанныеДоговоров КАК ДанныеДоговоров
		|		ПО
		|			ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
		|			И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
		|	
		|	ПО
		|		РасчетыСКлиентамиОстатки.ЗаказКлиента = ОбъектыРасчетов.ЗаказКлиента
		|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
		|
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
		|	И (РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток) > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Договор,
		|	РасчетыСКлиентамиОстатки.Валюта
		|
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль остатков в ячейках по ТоварыВЯчейках.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыВЯчейкахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыВЯчейках"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Назначение КАК Назначение,
		|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		|	ТаблицаИзменений.Серия КАК Серия,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК Количество
		|ИЗ
		|	ДвиженияТоварыВЯчейкахИзменение КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
		|				,
		|				(Номенклатура, Характеристика, Назначение, Упаковка, Ячейка) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Упаковка,
		|						Таблица.Ячейка
		|					ИЗ
		|						ДвиженияТоварыВЯчейкахИзменение КАК Таблица)) КАК ТоварыВЯчейкахОстатки
		|		ПО ТаблицаИзменений.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
		|			И ТаблицаИзменений.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
		|			И ТаблицаИзменений.Назначение = ТоварыВЯчейкахОстатки.Назначение
		|			И ТаблицаИзменений.Упаковка = ТоварыВЯчейкахОстатки.Упаковка
		|			И ТаблицаИзменений.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
		|			И (ВЫБОР
		|				КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаИзменений.Серия = ТоварыВЯчейкахОстатки.Серия
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВЯчейкахОстатки.Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика,
		|	ТоварыВЯчейкахОстатки.Назначение,
		|	ТоварыВЯчейкахОстатки.Упаковка,
		|	ТаблицаИзменений.Серия,
		|	ТоварыВЯчейкахОстатки.Ячейка,
		|	ТоварыВЯчейкахОстатки.Упаковка.ЕдиницаИзмерения
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль остатков по ТоварыНаСкладах 
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыНаСкладахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыНаСкладах"));
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.Назначение КАК Назначение,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
		|	ТаблицаИзменений.Серия КАК Серия,
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК Количество
		|ИЗ
		|	ДвиженияТоварыНаСкладахИзменение КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(Номенклатура, Характеристика, Назначение, Склад, Помещение) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Склад,
		|						Таблица.Помещение
		|					ИЗ
		|						ДвиженияТоварыНаСкладахИзменение КАК Таблица)) КАК ТоварыНаСкладахОстатки
		|		ПО ТаблицаИзменений.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И ТаблицаИзменений.Характеристика = ТоварыНаСкладахОстатки.Характеристика
		|			И ТаблицаИзменений.Назначение = ТоварыНаСкладахОстатки.Назначение
		|			И ТаблицаИзменений.Склад = ТоварыНаСкладахОстатки.Склад
		|			И ТаблицаИзменений.Помещение = ТоварыНаСкладахОстатки.Помещение
		|			И (ВЫБОР
		|				КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаИзменений.Серия = ТоварыНаСкладахОстатки.Серия
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.Назначение,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Помещение,
		|	ТаблицаИзменений.Серия
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль остатков по ТоварыКОтбору.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтборуИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыКОтбору"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыКОтборуОстатки.Номенклатура                  КАК Номенклатура,
		|	ТоварыКОтборуОстатки.Характеристика                КАК Характеристика,
		|	ТоварыКОтборуОстатки.Назначение                    КАК Назначение,
		|	ТоварыКОтборуОстатки.Серия                         КАК Серия,
		|	ТоварыКОтборуОстатки.Распоряжение                  КАК Распоряжение,
		|	ТоварыКОтборуОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток КАК Количество,
		|	ТоварыКОтборуОстатки.ОтобраноОстаток КАК КоличествоОтобрано
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Остатки(
		|			,
		|			(Распоряжение, Номенклатура, Характеристика, Назначение, Серия) В
		|				(ВЫБРАТЬ
		|					Таблица.Распоряжение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Назначение,
		|					Таблица.Серия
		|				ИЗ
		|					ДвиженияТоварыКОтборуИзменение КАК Таблица)
		|			) КАК ТоварыКОтборуОстатки
		|ГДЕ
		|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток < 0
		|	ИЛИ ТоварыКОтборуОстатки.ОтобраноОстаток < 0;";
	КонецЕсли;
	
	// Контроль отрицательных остатков ТоварыОрганизацийКОформлению.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыОрганизацийКОформлениюИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыОрганизацийКОформлению"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Организация                   КАК Организация,
		|	ТаблицаОстатков.Поставщик                     КАК Поставщик,
		|	ТаблицаОстатков.ДокументПоступления           КАК ДокументПоступления,
		|	Аналитика.Номенклатура                        КАК Номенклатура,
		|	Аналитика.Характеристика                      КАК Характеристика,
		|	Аналитика.Склад                               КАК Склад,
		|	Аналитика.Номенклатура.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.ВидЗапасов                    КАК ВидЗапасов,
		|	ТаблицаОстатков.КоличествоОстаток             КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКОформлению.Остатки(,
		|			(Организация, Поставщик, ДокументПоступления, АналитикаУчетаНоменклатуры, ВидЗапасов) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Поставщик,
		|					Таблица.ДокументПоступления,
		|					Таблица.АналитикаУчетаНоменклатуры,
		|					Таблица.ВидЗапасов
		|				ИЗ
		|					ДвиженияТоварыОрганизацийКОформлениюИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|	ПО
		|		ТаблицаОстатков.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	
	// Контроль отрицательных остатков ПринятаяВозвратнаяТара.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияПринятаяВозвратнаяТараИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ПринятаяВозвратнаяТара"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Партнер                        КАК Партнер,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.ДокументПоступления            КАК ДокументПоступления,
		|	ТаблицаОстатков.ПредусмотренЗалог              КАК ПредусмотренЗалог,
		|	ТаблицаОстатков.КоличествоОстаток              КАК Количество,
		|	ТаблицаОстатков.СуммаОстаток                   КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПринятаяВозвратнаяТара.Остатки(,
		|			(Партнер, Номенклатура, Характеристика, ДокументПоступления, ПредусмотренЗалог) В
		|				(ВЫБРАТЬ
		|					Таблица.Партнер,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.ДокументПоступления,
		|					Таблица.ПредусмотренЗалог
		|				ИЗ
		|					ДвиженияПринятаяВозвратнаяТараИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ПереданнаяВозвратнаяТара.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияПереданнаяВозвратнаяТараИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ПереданнаяВозвратнаяТара"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Партнер                        КАК Партнер,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.ДокументПередачи               КАК ДокументПередачи,
		|	ТаблицаОстатков.ПредусмотренЗалог              КАК ПредусмотренЗалог,
		|	ТаблицаОстатков.ВидЗапасов                     КАК ВидЗапасов,
		|	ТаблицаОстатков.НомерГТД                       КАК НомерГТД,
		|	ТаблицаОстатков.КоличествоОстаток              КАК Количество,
		|	ТаблицаОстатков.СуммаОстаток                   КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(,
		|			(Партнер, Номенклатура, Характеристика, ДокументПередачи, ВидЗапасов, НомерГТД, ПредусмотренЗалог) В
		|				(ВЫБРАТЬ
		|					Таблица.Партнер,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.ДокументПередачи,
		|					Таблица.ВидЗапасов,
		|					Таблица.НомерГТД,
		|					Таблица.ПредусмотренЗалог
		|				ИЗ
		|					ДвиженияПереданнаяВозвратнаяТараИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ТоварыОрганизаций.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыОрганизацийИзменение") Тогда
		МассивКонтролей.Добавить(Врег("ОстаткиОрганизацийВТ"));
		МассивКонтролей.Добавить(Врег("ТоварыОрганизаций"));
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаКонтроля, СЕКУНДА, -1) КАК ДатаОстатка,
		|	Остатки.АналитикаУчетаНоменклатуры, Остатки.Организация, Остатки.ВидЗапасов, Остатки.НомерГТД, Остатки.КоличествоОстаток
		|ПОМЕСТИТЬ
		|	ОстаткиОрганизацийВТ
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаКонтроля,
		|		(АналитикаУчетаНоменклатуры, Организация, ВидЗапасов, НомерГТД) В
		|			(ВЫБРАТЬ
		|				Изменения.АналитикаУчетаНоменклатуры, Изменения.Организация, Изменения.ВидЗапасов, Изменения.НомерГТД
		|			ИЗ
		|				ДвиженияТоварыОрганизацийИзменение КАК Изменения)
		|	) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток < 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	&КонецВремен КАК ДатаОстатка,
		|	Остатки.АналитикаУчетаНоменклатуры, Остатки.Организация, Остатки.ВидЗапасов, Остатки.НомерГТД, Остатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
		|		НЕ &ИгнорироватьОперативныеОстатки
		|		И (АналитикаУчетаНоменклатуры, Организация, ВидЗапасов, НомерГТД) В
		|			(ВЫБРАТЬ
		|				Изменения.АналитикаУчетаНоменклатуры, Изменения.Организация, Изменения.ВидЗапасов, Изменения.НомерГТД
		|			ИЗ
		|				ДвиженияТоварыОрганизацийИзменение КАК Изменения)
		|	) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток < 0;
		|
		|ВЫБРАТЬ
		|	Аналитика.Номенклатура,
		|	Аналитика.Характеристика,
		|	Аналитика.Серия,
		|	Аналитика.Склад,
		|	Справочник.ЕдиницаИзмерения,
		|	Остатки.Организация,
		|	Остатки.ВидЗапасов,
		|	Остатки.НомерГТД,
		|	Остатки.КоличествоОстаток КАК Количество,
		|	Остатки.ДатаОстатка
		|ИЗ
		|	ОстаткиОрганизацийВТ КАК Остатки
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|	ПО
		|		Аналитика.КлючАналитики = Остатки.АналитикаУчетаНоменклатуры
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.Номенклатура КАК Справочник
		|	ПО
		|		Аналитика.Номенклатура = Справочник.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	Аналитика.Номенклатура, Аналитика.Характеристика, Остатки.Организация, Аналитика.Склад, Остатки.ДатаОстатка
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		
		ЗапросДаты = Новый Запрос("ВЫБРАТЬ МИНИМУМ(Т.ПериодПередЗаписью) КАК Дата ИЗ ДвиженияТоварыОрганизацийИзменение КАК Т");
		ЗапросДаты.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
		ВыборкаДаты = ЗапросДаты.Выполнить().Выбрать();
		
		ДатаОстатка = ?(ВыборкаДаты.Следующий() И ЗначениеЗаполнено(ВыборкаДаты.Дата), ВыборкаДаты.Дата, Объект.Дата);
		
		ПакетЗапросов.УстановитьПараметр("ДатаКонтроля",
			Перечисления.ВидыКонтроляТоваровОрганизаций.ДатаКонтроля(ДатаОстатка) + 1);
		ПакетЗапросов.УстановитьПараметр("КонецВремен", '39991231235959');
		ПакетЗапросов.УстановитьПараметр("ИгнорироватьОперативныеОстатки",
			Объект.ДополнительныеСвойства.Свойство("ИгнорироватьОперативныеОстатки"));
	КонецЕсли;
	
	// Контроль отрицательных остатков ПрочиеРасходы.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияПрочиеРасходыИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ПрочиеРасходы"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Организация,
		|	ТаблицаОстатков.Подразделение,
		|	ТаблицаОстатков.НалоговоеНазначение,
		|	ТаблицаОстатков.СтатьяРасходов,
		|	ТаблицаОстатков.АналитикаРасходов,
		|	ТаблицаОстатков.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Остатки(,
		|			(Организация, Подразделение, НалоговоеНазначение, СтатьяРасходов, АналитикаРасходов) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Подразделение,
		|					Таблица.НалоговоеНазначение,
		|					Таблица.СтатьяРасходов,
		|					Таблица.АналитикаРасходов
		|				ИЗ
		|					ДвиженияПрочиеРасходыИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.СуммаОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	
	
	Если МассивКонтролей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов.Текст = ТекстЗапроса;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();

	Итератор = -1;
	Для Каждого Результат Из МассивРезультатов Цикл

		Итератор = Итератор + 1;
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		ИмяКонтроля = МассивКонтролей[Итератор];

		Если ИмяКонтроля = Врег("ТоварыКОтгрузке") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтгрузке(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ОбеспечениеВременнаяТаблица1") Тогда

		ИначеЕсли ИмяКонтроля = Врег("ОбеспечениеВременнаяТаблица2") Тогда

		ИначеЕсли ИмяКонтроля = Врег("Обеспечение") Тогда

			СообщитьОбОшибкахПроведенияПоРегистрамСвободныеОстаткиИДвижениеТоваров(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваКВыплате") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("РасчетыСКлиентами") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструРасчетыСКлиентами(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаДанныеДоговоровПредварительные") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаДанныеДоговоров") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаОбъектыРасчетов") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ОграничениеСуммыЗадолженности") Тогда

			СообщитьОбОшибкахПроведенияПриОграниченииСуммыЗадолженности(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("КонтрольСрокаЗадолженности") Тогда

			СообщитьОбОшибкахПроведенияПриКонтролеСрокаЗадолженности(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаказыНаПеремещение") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаПеремещение(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ЗаказыНаВнутреннееПотребление") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаВнутреннееПотребление(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = ВРег("ТМЦВЭксплуатации") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструТМЦВЭксплуатации(Объект, Отказ, Результат);
		ИначеЕсли ИмяКонтроля = Врег("ЗаказыКлиентов")
			  Или ИмяКонтроля = Врег("ЗаказыПоставщикам") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаказыКлиентовПоставщикам(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаявкиНаВозвратТоваровОтКлиентов") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаявкиНаВозвратТоваровОтКлиентов(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаказыНаСборку") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаСборку(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыВЯчейках") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыВЯчейках(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыНаСкладах") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыКОтбору") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтбору(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыОрганизацийКОформлению") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыОрганизацийКОформлению(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ОбеспечениеЗаказов") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструОбеспечениеЗаказов(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ДвиженияТоварыКОтгрузкеСводно") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструСерии(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ПринятаяВозвратнаяТара") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструПринятаяВозвратнаяТара(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ПереданнаяВозвратнаяТара") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструПереданнаяВозвратнаяТара(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ОбеспечениеЗаказовРаботами") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструОбеспечениеЗаказовРаботами(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ОстаткиОрганизацийВТ") Тогда
			// Временная таблица
			
		ИначеЕсли ИмяКонтроля = Врег("ТоварыОрганизаций") Тогда
			СообщитьОбОшибкахПроведенияПоРегиструТоварыОрганизаций(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ПрочиеРасходы") Тогда
			СообщитьОбОшибкахПроведенияПоРегиструПрочиеРасходы(Объект, Отказ, Результат);
			
		
		
		ИначеЕсли ИмяКонтроля = Врег("ТоварыКОформлениюЗаявленийОВвозе") Тогда
			СообщитьОбОшибкахПроведенияПоРегиструТоварыКОформлениюЗаявленийОВвозе(Объект, Отказ, Результат);
			
		Иначе

			ВызватьИсключение НСтр("ru='Ошибка контроля проведения!';uk='Помилка проведення контролю!'");

		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда

		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru='Проведение не выполнено %ПредставлениеОбъекта%';uk='Проведення не виконано %ПредставлениеОбъекта%'");
		Иначе
			ТекстСообщения = НСтр("ru='Отмена проведения не выполнена %ПредставлениеОбъекта%';uk='Скасування проведення не виконане %ПредставлениеОбъекта%'");
		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОбъекта%", Строка(Объект));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);

	КонецЕсли;

КонецПроцедуры

// Функция вызывается из модулей наборов записей для проверки необходимости
// контроля изменений движений в регистре.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;

	Возврат Не ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) 
		И ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;

КонецФункции

// Функция вызывается из модулей наборов записей для проверки необходимости
// контроля изменений движений в регистрах "Свободные остатки" и "Движение товаров".
//
Функция КонтролироватьОбеспечение(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем КонтролироватьОбеспечение;

	Возврат Не ДополнительныеСвойстваНабораЗаписей.Свойство("КонтролироватьОбеспечение", КонтролироватьОбеспечение)
		Или КонтролироватьОбеспечение;

КонецФункции

Процедура УстановитьРежимПроведения(ДокументОбъект, РежимЗаписи, РежимПроведения) Экспорт

	Если ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	Для каждого НаборЗаписей Из Объект.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Регистры, требующие принудительной очистки:
	МассивИменРегистровПринудительнойОчистки = Новый Массив;
	МассивДвиженийДляПринудительнойОчистки = Новый Массив;
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
		Если МассивИменРегистровПринудительнойОчистки.Найти(ИмяРегистра) <> Неопределено
			ИЛИ НЕ ВыборочноОчищатьРегистры Тогда
			МассивДвиженийДляПринудительнойОчистки.Добавить(Объект.Движения[ИмяРегистра]);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет наличие изменений в таблице регистра.
//
Функция ЕстьИзмененияВТаблице(СтруктураДанных, Ключ)
	Перем ЕстьИзменения;

	Возврат СтруктураДанных.Свойство(Ключ, ЕстьИзменения) И ЕстьИзменения;

КонецФункции

Функция ТекстЗапросаКонтрольОбеспечения(ЕстьИзмененияСвободныеОстатки, ЕстьИзмененияГрафикОтгрузкиТоваров)

	Если ЕстьИзмененияСвободныеОстатки И ЕстьИзмененияГрафикОтгрузкиТоваров Тогда

		ТекстТаблицыТоваров =
			"ВЫБРАТЬ
			|	Т.Номенклатура               КАК Номенклатура,
			|	Т.Характеристика             КАК Характеристика,
			|	Т.Склад                      КАК Склад,
			|	ДАТАВРЕМЯ(1, 1, 1)           КАК Период
			|ПОМЕСТИТЬ ВтТоварыДляКонтроляОбеспечения
			|ИЗ
			|	ДвиженияСвободныеОстаткиИзменение КАК Т
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Номенклатура   КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|	Т.Склад          КАК Склад,
			|	Т.Период         КАК Период
			|ИЗ
			|	ДвиженияГрафикОтгрузкиТоваровИзменение КАК Т
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад
			|;
			|
			|/////////////////////////////////////////////
			|";

	ИначеЕсли ЕстьИзмененияСвободныеОстатки Тогда

		ТекстТаблицыТоваров =
			"ВЫБРАТЬ
			|	Т.Номенклатура               КАК Номенклатура,
			|	Т.Характеристика             КАК Характеристика,
			|	Т.Склад                      КАК Склад,
			|	ДАТАВРЕМЯ(1, 1, 1)           КАК Период
			|ПОМЕСТИТЬ ВтТоварыДляКонтроляОбеспечения
			|ИЗ
			|	ДвиженияСвободныеОстаткиИзменение КАК Т
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад
			|;
			|
			|/////////////////////////////////////////////
			|";

	ИначеЕсли ЕстьИзмененияГрафикОтгрузкиТоваров Тогда

		ТекстТаблицыТоваров =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Номенклатура   КАК Номенклатура,
			|	Т.Характеристика КАК Характеристика,
			|	Т.Склад          КАК Склад,
			|	Т.Период         КАК Период
			|ПОМЕСТИТЬ ВтТоварыДляКонтроляОбеспечения
			|ИЗ
			|	ДвиженияГрафикОтгрузкиТоваровИзменение КАК Т
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад
			|;
			|
			|/////////////////////////////////////////////
			|";

	КонецЕсли;

	ТекстЗапроса = ТекстТаблицыТоваров
		+"ВЫБРАТЬ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	Т.Период         КАК Период,
		|	МАКСИМУМ(ОстаткиИзЗаказов.ДатаДоступности) КАК Дата
		|
		|ПОМЕСТИТЬ ВтТоварыКонтроляГрафика
		|ИЗ
		|	ВтТоварыДляКонтроляОбеспечения КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ОстаткиИзЗаказов
		|			ПО Т.Номенклатура   = ОстаткиИзЗаказов.Номенклатура
		|			 И Т.Характеристика = ОстаткиИзЗаказов.Характеристика
		|			 И Т.Склад          = ОстаткиИзЗаказов.Склад
		|			 И Т.Период >= ОстаткиИзЗаказов.ДатаДоступности
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура, Т.Характеристика, Т.Склад,
		|	Т.Период
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ОстаткиИзЗаказов.ДатаДоступности) ЕСТЬ NULL
		|;
		|
		|/////////////////////////////////////////////
		|";

	ТекстЗапроса = ТекстЗапроса
		+"ВЫБРАТЬ
		|	Набор.Номенклатура        КАК Номенклатура,
		|	Набор.Характеристика      КАК Характеристика,
		|	Набор.Склад               КАК Склад,
		|	Набор.Период              КАК Период,
		|	МАКСИМУМ(Набор.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|
		|	СУММА(Набор.ВНаличии)          КАК ВНаличии,
		|	СУММА(Набор.ВРезервеИзЗаказов) КАК ВРезервеИзЗаказов,
		|	СУММА(Набор.ВРезервеСоСклада)  КАК ВРезервеСоСклада,
		|	СУММА(Набор.ВРезервеПодЗаказ)  КАК ВРезервеПодЗаказ
		|
		|ИЗ(
		|	ВЫБРАТЬ
		|		Т.Номенклатура        КАК Номенклатура,
		|		Т.Характеристика      КАК Характеристика,
		|		Т.Склад               КАК Склад,
		|		Т.Период              КАК Период,
		|		СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|
		|		ОстаткиСклада.ВНаличииОстаток            КАК ВНаличии,
		|		0                                        КАК ВРезервеИзЗаказов,
		|		ОстаткиСклада.ВРезервеСоСкладаОстаток    КАК ВРезервеСоСклада,
		|		ОстаткиСклада.ВРезервеПодЗаказОстаток    КАК ВРезервеПодЗаказ
		|	ИЗ
		|		ВтТоварыДляКонтроляОбеспечения КАК Т
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(,
		|				(Номенклатура, Характеристика, Склад) В(
		|					ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Т.Номенклатура        КАК Номенклатура,
		|						Т.Характеристика      КАК Характеристика,
		|						Т.Склад               КАК Склад
		|					ИЗ
		|						ВтТоварыДляКонтроляОбеспечения КАК Т)) КАК ОстаткиСклада
		|			ПО Т.Номенклатура   = ОстаткиСклада.Номенклатура
		|			 И Т.Характеристика = ОстаткиСклада.Характеристика
		|			 И Т.Склад          = ОстаткиСклада.Склад
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|			ПО Т.Номенклатура = СпрНоменклатура.Ссылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|		ВЫБРАТЬ
		|			Т.Номенклатура   КАК Номенклатура,
		|			Т.Характеристика КАК Характеристика,
		|			Т.Склад          КАК Склад,
		|			Т.Период         КАК Период,
		|			СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|
		|			0                                  КАК ВНаличии,
		|			- ОстаткиИзЗаказов.Количество      КАК ВРезервеИзЗаказов,
		|			0                                  КАК ВРезервеСоСклада,
		|			0                                  КАК ВРезервеПодЗаказ
		|		ИЗ
		|			ВтТоварыКонтроляГрафика КАК Т
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ОстаткиИзЗаказов
		|				ПО Т.Номенклатура   = ОстаткиИзЗаказов.Номенклатура
		|				 И Т.Характеристика = ОстаткиИзЗаказов.Характеристика
		|				 И Т.Склад          = ОстаткиИзЗаказов.Склад
		|				 И Т.Дата           = ОстаткиИзЗаказов.ДатаДоступности
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|				ПО Т.Номенклатура = СпрНоменклатура.Ссылка) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад,
		|	Набор.Период
		|
		|ИМЕЮЩИЕ
		|	Набор.Период = ДАТАВРЕМЯ(1, 1, 1) И(
		|		СУММА(Набор.ВНаличии) < 0
		|		ИЛИ СУММА(Набор.ВНаличии) - СУММА(Набор.ВРезервеПодЗаказ) < 0
		|		ИЛИ СУММА(Набор.ВНаличии) - СУММА(Набор.ВРезервеПодЗаказ) - СУММА(Набор.ВРезервеСоСклада) < 0)
		|
		|	ИЛИ СУММА(Набор.ВНаличии) - СУММА(Набор.ВРезервеПодЗаказ) - СУММА(Набор.ВРезервеСоСклада) - СУММА(Набор.ВРезервеИзЗаказов) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|///////////////////////////////////////////////////////////////////
		|";

	Возврат ТекстЗапроса;

КонецФункции

#Область ПроцедурыВыдачиСообщенийОбОшибкахПроведения

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, РезультатЗапроса)
	
	ЕстьРасхожденияРеквизитов = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = "";
		
		ЭтоЗаявкаНаРасходованиеДС = (ТипЗнч(Выборка.ЗаявкаНаРасходованиеДенежныхСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
		
		Если ЭтоЗаявкаНаРасходованиеДС И Выборка.Организация <> Выборка.ОрганизацияЗаявки Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Организация %1 в документе оплаты не соответствует организации %2 в заявке';uk='Організація %1 в документі оплати не відповідає організації %2 у заявці'"),
				Выборка.Организация,
				Выборка.ОрганизацияЗаявки);
			ЕстьРасхожденияРеквизитов = Истина;
		КонецЕсли;
		
		Если ЭтоЗаявкаНаРасходованиеДС И Выборка.Контрагент <> Выборка.КонтрагентЗаявки
			И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
			ТекстСообщения = ТекстСообщения
				+ ?(Не ПустаяСтрока(ТекстСообщения), Символы.ПС, "")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Контрагент %1 в документе оплаты не соответствует контрагенту %2 в заявке';uk='Контрагент %1 в документі оплати не відповідає контрагенту %2 у заявці'"),
					Выборка.Контрагент,
					Выборка.КонтрагентЗаявки);
			ЕстьРасхожденияРеквизитов = Истина;
		КонецЕсли;
		
		Если ЭтоЗаявкаНаРасходованиеДС И Выборка.ПодотчетноеЛицо <> Выборка.ПодотчетноеЛицоЗаявки Тогда
			ТекстСообщения = ТекстСообщения
			+ ?(Не ПустаяСтрока(ТекстСообщения), Символы.ПС, "")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Подотчетное лицо %1 в документе оплаты не соответствует подотчетному лицу %2 в заявке';uk='Підзвітна особа %1 в документі оплати не відповідає підзвітній особі %2 у заявці'"),
			Выборка.ПодотчетноеЛицо,
			Выборка.ПодотчетноеЛицоЗаявки);
			ЕстьРасхожденияРеквизитов = Истина;
		КонецЕсли;
		
		Если Не ЕстьРасхожденияРеквизитов Тогда
			Если ЭтоЗаявкаНаРасходованиеДС И Выборка.РасхождениеПартнера Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Партнер %1 в документе оплаты не соответствует партнеру в заявке';uk='Партнер %1 в документі оплати не відповідає партнеру в заявці'"),
				Выборка.Партнер);
			ИначеЕсли ЭтоЗаявкаНаРасходованиеДС И Выборка.РасхождениеАналитикиРасходов Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Статья расходов %1 и аналитика %2 в документе оплаты не соответствует статье и аналитике в заявке';uk='Стаття витрат %1 і аналітика %2 в документі оплати не відповідає статті та аналітиці в заявці'"),
				Выборка.СтатьяРасходов,
				Выборка.АналитикаРасходов);
			ИначеЕсли ЭтоЗаявкаНаРасходованиеДС И Выборка.РасхождениеСтатьиДДС Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Статья движения денежных средств %1 в документе оплаты не соответствует статье движения денежных средств в заявке';uk='Стаття руху грошових коштів %1 в документі оплати не відповідає статті руху грошових коштів у заявці'"),
				Выборка.СтатьяДвиженияДенежныхСредств);
			Иначе
				Если ЭтоЗаявкаНаРасходованиеДС Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По заявке %1 
                    |Оплачено больше, чем утверждено в заявке, на %2 %3'
                    |;uk='За заявкою %1 
                    |Сплачено більше, ніж затверджено у заявці, на %2 %3'"),
					Строка(Выборка.ЗаявкаНаРасходованиеДенежныхСредств),
					Строка(Выборка.Сумма),
					Строка(Выборка.Валюта));
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По документу %1 
                    |Оплачено больше, чем утверждено в распоряжении, на %2 %3'
                    |;uk='За документом %1 
                    |Сплачено більше, ніж затверджено у розпорядженні, на %2 %3'"),
					Строка(Выборка.ЗаявкаНаРасходованиеДенежныхСредств),
					Строка(Выборка.Сумма),
					Строка(Выборка.Валюта));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);
		
		Если ЕстьРасхожденияРеквизитов Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтгрузке(Объект, Отказ, РезультатЗапроса)

	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Статус")
		И Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору Тогда 
		ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Планируется к отгрузке со склада %Склад% больше, чем указано в распоряжении на отгрузку, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Планується до відвантаження зі складу %Склад% більше, ніж зазначено в розпорядженні на відвантаження, на %Количество% %Единица%'");
	Иначе
		ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Отгружено со склада %Склад% больше, чем указано в распоряжении на отгрузку, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Відвантажено зі складу %Склад% більше, ніж зазначено в розпорядженні на відвантаження, на %Количество% %Единица%'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		Назначение = ?(ЗначениеЗаполнено(Выборка.Назначение), "(" + Строка(Выборка.Назначение) + ")", "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Назначение);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыКлиентовПоставщикам(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияСоСкладом = НСтр("ru='Номенклатура %НоменклатураХарактеристика% склад %Склад%
        |Оформлено больше чем указано в строке %КодСтроки% распоряжения %Заказ% на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% склад %Склад%
        |Оформлено більше ніж зазначено в рядку %КодСтроки% розпорядження %Заказ% на %Количество% %Единица%'");
		
	ШаблонСообщенияБезСклада = НСтр("ru='Номенклатура %НоменклатураХарактеристика%
        |Оформлено больше чем указано в строке %КодСтроки% распоряжения %Заказ% на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика%
        |Оформлено більше ніж зазначено в рядку %КодСтроки% розпорядження %Заказ% на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Склад) Тогда
 			ШаблонСообщения = ШаблонСообщенияСоСкладом;
		Иначе
 			ШаблонСообщения = ШаблонСообщенияБезСклада;
		КонецЕсли;
			
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%",      Строка(Выборка.Заказ));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаявкиНаВозвратТоваровОтКлиентов(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика%
        |По строке %КодСтроки% возвращено больше, чем указано в заявке на возврат, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика%
        |По рядку %КодСтроки% повернено більше, ніж зазначено в заявці на повернення, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегистрамСвободныеОстаткиИДвижениеТоваров(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияВНаличииМеньшеНоля = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
                            |Недостаточно товара в наличии на складе %Склад% на %Количество% %Единица%'
                            |;uk='Номенклатура %НоменклатураХарактеристика% 
                            |Недостатньо товару в наявності на складі %Склад% на %Количество% %Единица%'");

	ШаблонСообщенияВНаличииМеньшеРезерваИзЗаказовНаДату = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
                            |Превышен доступный на %Период% остаток товара на складе %Склад% на %Количество% %Единица%'
                            |;uk='Номенклатура %НоменклатураХарактеристика% 
                            |Перевищено доступний на %Период% залишок товару на складі %Склад% на %Количество% %Единица%'");

	ШаблонСообщенияВНаличииМеньшеРезерваИзЗаказов = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
                            |Превышен доступный остаток товара на складе %Склад% на %Количество% %Единица%'
                            |;uk='Номенклатура %НоменклатураХарактеристика% 
                            |Перевищено доступний залишок товару на складі %Склад% на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.Период)
			И Выборка.ВНаличии - Выборка.ВРезервеПодЗаказ - Выборка.ВРезервеСоСклада - Выборка.ВРезервеИзЗаказов < 0 Тогда

			ШаблонСообщения = ШаблонСообщенияВНаличииМеньшеРезерваИзЗаказовНаДату;
			Количество      = - (Выборка.ВНаличии - Выборка.ВРезервеПодЗаказ - Выборка.ВРезервеСоСклада - Выборка.ВРезервеИзЗаказов);

		ИначеЕсли Выборка.ВНаличии < 0 Тогда

			ШаблонСообщения = ШаблонСообщенияВНаличииМеньшеНоля;
			Количество      = - Выборка.ВНаличии;

		ИначеЕсли Выборка.ВНаличии - Выборка.ВРезервеПодЗаказ - Выборка.ВРезервеСоСклада - Выборка.ВРезервеИзЗаказов < 0 Тогда

			ШаблонСообщения = ШаблонСообщенияВНаличииМеньшеРезерваИзЗаказов;
			Количество      = - (Выборка.ВНаличии - Выборка.ВРезервеПодЗаказ - Выборка.ВРезервеСоСклада - Выборка.ВРезервеИзЗаказов);

		Иначе
			
			ВызватьИсключение НСтр("ru='Неизвестная ошибка контроля обеспечения.';uk='Невідома помилка контролю забезпечення.'");

		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%",     Строка(Формат(Выборка.Период, "ДЛФ=D")));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыСКлиентами(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='Нарушены условия оплаты, необходимые для обеспечения/отгрузки по заказу %Заказ%,
        |Требуется %СуммаЗаказа% %Валюта% оплачено %СуммаОплаты% %Валюта%'
        |;uk='Порушені умови оплати, необхідні для забезпечення/відвантаження по замовленню %Заказ%,
        |Потрібно %СуммаЗаказа% %Валюта% оплачено %СуммаОплаты% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Заказ%",      Строка(Выборка.ЗаказКлиента));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%",      Строка(Выборка.Валюта));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаЗаказа%", Строка(Выборка.СуммаЗаказа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОплаты%", Строка(Выборка.СуммаОплаты));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПриОграниченииСуммыЗадолженности(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='По договору %Договор% превышена допустимая сумма кредита на %СуммаПревышения% %Валюта%';uk='По договору %Договор% перевищена допустима сума кредиту на %СуммаПревышения% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Договор%",         Строка(Выборка.Договор));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%СуммаПревышения%", Строка(Выборка.СуммаПревышения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Валюта%",          Строка(Выборка.Валюта));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПриКонтролеСрокаЗадолженности(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='По договору %Договор% имеется просроченная задолженность на сумму %ПросроченнаяЗадолженность% %Валюта%';uk='По договору %Договор% є прострочена заборгованість на суму %ПросроченнаяЗадолженность% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Договор%",                   Строка(Выборка.Договор));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%ПросроченнаяЗадолженность%", Строка(Выборка.ПросроченнаяЗадолженность));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Валюта%",                    Строка(Выборка.Валюта));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаПеремещение(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияСоСкладомСПодразделением = НСтр("ru='Номенклатура %НоменклатураХарактеристика%, склад %Склад%, подразделение %Подразделение% 
        |По строке %КодСтроки% оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика%, склад %Склад%, підрозділ %Подразделение% 
        |По рядку %КодСтроки% оформлено більше, ніж зазначено в розпорядженні на оформлення, на %Количество% %Единица%'");
		
	ШаблонСообщенияСоСкладомБезПодразделения = НСтр("ru='Номенклатура %НоменклатураХарактеристика%, склад %Склад% 
        |По строке %КодСтроки% оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика%, склад %Склад% 
        |По рядку %КодСтроки% оформлено більше, ніж зазначено в розпорядженні на оформлення, на %Количество% %Единица%'");
		
	ШаблонСообщенияБезСкладаСПодразделением = НСтр("ru='Номенклатура %НоменклатураХарактеристика%, подразделение %Подразделение% 
        |По строке %КодСтроки% оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика%, підрозділ %Подразделение% 
        |По рядку %КодСтроки% оформлено більше, ніж зазначено в розпорядженні на оформлення, на %Количество% %Единица%'");
		
	ШаблонСообщенияБезСкладаБезПодразделения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
        |По строке %КодСтроки% оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% 
        |По рядку %КодСтроки% оформлено більше, ніж зазначено в розпорядженні на оформлення, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.Склад)
			И ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			ШаблонСообщения = ШаблонСообщенияСоСкладомСПодразделением;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Склад)
			И Не ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			ШаблонСообщения = ШаблонСообщенияСоСкладомБезПодразделения;
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.Склад)
			И ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			ШаблонСообщения = ШаблонСообщенияБезСкладаСПодразделением;
		Иначе 
			ШаблонСообщения = ШаблонСообщенияБезСкладаБезПодразделения;
		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Подразделение%",Строка(Выборка.Подразделение));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаВнутреннееПотребление(Объект, Отказ, РезультатЗапроса)

	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров") Тогда
		
		ШаблонСообщенияСоСкладом = НСтр("ru='Номенклатура %НоменклатураХарактеристика%, склад %Склад% 
            |По строке %КодСтроки% оформлено больше, чем указано в распоряжении, на %Количество% %Единица%'
            |;uk='Номенклатура %НоменклатураХарактеристика%, склад %Склад% 
            |По рядку %КодСтроки% оформлено більше, ніж зазначено в розпорядженні, на %Количество% %Единица%'");
			
		ШаблонСообщенияБезСклада = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
            |По строке %КодСтроки% оформлено больше, чем указано в распоряжении, на %Количество% %Единица%'
            |;uk='Номенклатура %НоменклатураХарактеристика% 
            |По рядку %КодСтроки% оформлено більше, ніж зазначено в розпорядженні, на %Количество% %Единица%'");
			
	Иначе

		ШаблонСообщенияСоСкладом = НСтр("ru='Номенклатура %НоменклатураХарактеристика%, склад %Склад% 
            |По строке %КодСтроки% уже оформлено внутреннее потребление в количестве большем, чем указано в документе, на %Количество% %Единица%'
            |;uk='Номенклатура %НоменклатураХарактеристика%, склад %Склад% 
            |По рядку %КодСтроки% вже оформлене внутрішнє споживання у кількості більшій, ніж зазначено в документі, на %Количество% %Единица%'");
			
		ШаблонСообщенияБезСклада = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
            |По строке %КодСтроки% уже оформлено внутреннее потребление в количестве большем, чем указано в документе, на %Количество% %Единица%'
            |;uk='Номенклатура %НоменклатураХарактеристика% 
            |По рядку %КодСтроки% вже оформлене внутрішнє споживання у кількості більшій, ніж зазначено в документі, на %Количество% %Единица%'");
			
	КонецЕсли; 

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.Склад) Тогда
			ШаблонСообщения = ШаблонСообщенияСоСкладом;
		Иначе 
			ШаблонСообщения = ШаблонСообщенияБезСклада;
		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Строка(Выборка.Склад));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаСборку(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
        |По строке %КодСтроки% оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% 
        |По рядку %КодСтроки% оформлено більше, ніж зазначено в розпорядженні на оформлення, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыВЯчейках(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Превышен свободный остаток в ячейке %Ячейка% на %Количество% %Упаковка%'
        |;uk='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Перевищений вільний залишок у комірці %Ячейка% на %Количество% %Упаковка%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ячейка%",     Строка(Выборка.Ячейка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%",   Строка(Выборка.Упаковка));
		Назначение = ?(ЗначениеЗаполнено(Выборка.Назначение), "(" + Строка(Выборка.Назначение) + ")", "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Назначение);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Превышен оперативный складской остаток на складе ""%Склад%"" на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Перевищений оперативний складський залишок на складі ""%Склад%"" на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",
									СкладыСервер.ПолучитьПредставлениеСклада(Выборка.Склад, Выборка.Помещение));		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		Назначение = ?(ЗначениеЗаполнено(Выборка.Назначение), "(" + Строка(Выборка.Назначение) + ")", "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Назначение);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтбору(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияОтбор = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Отобрано из ячеек больше, чем указано в распоряжении на отбор, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Відібрано з комірок більше, ніж зазначено в розпорядженні на відбір, на %Количество% %Единица%'");

	ШаблонСообщенияОтгрузка = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Отгружается больше, чем отобрано из ячеек по распоряжению на отбор, на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% %Назначение%
        |Відвантажується більше, ніж відібрано з комірок за розпорядженням на відбір, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.КоличествоОтобрано >= 0 Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщенияОтбор, "%Количество%", Строка(-Выборка.Количество));
		Иначе
			ТекстСообщения = СтрЗаменить(ШаблонСообщенияОтгрузка, "%Количество%", Строка(-Выборка.КоличествоОтобрано));
		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%", Строка(Выборка.ЕдиницаИзмерения));
		Назначение = ?(ЗначениеЗаполнено(Выборка.Назначение), "(" + Строка(Выборка.Назначение) + ")", "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Назначение);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыОрганизацийКОформлению(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияБезПоступления = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
        |Превышен остаток товара к оформлению на складе %Склад% на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% 
        |Перевищений залишок товару до оформлення на складі %Склад% на %Количество% %Единица%'");
	ШаблонСообщенияСПоступлением = ШаблонСообщенияБезПоступления + " " + НСтр("ru='по документу %Поступление%';uk='за документом %Поступление%'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ДокументПоступления) Тогда
			ШаблонСообщения = ШаблонСообщенияСПоступлением;
		Иначе
			ШаблонСообщения = ШаблонСообщенияБезПоступления;
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Поступление%",Строка(Выборка.ДокументПоступления));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструОбеспечениеЗаказов(Объект, Отказ, РезультатЗапроса)

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.ОшибкаЗаказатьМеньшеНуля Тогда

			ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Склад% назначение %Назначение%
                |	Заказано для обеспечения больше чем требуется на %Количество% %Единица%,'
                |;uk='Номенклатура %НоменклатураХарактеристика% %Склад% призначення %Назначение%
                |   Замовлено для забезпечення більше ніж потрібно на %Количество% %Единица%,'");

			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Строка(Выборка.Назначение));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.ВеличинаЗаказатьМеньшеНуля));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

		Если Выборка.ОшибкаНаличиеБольшеПотребности Тогда

			ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Склад% назначение %Назначение%
                |	Приходуется для обеспечения больше чем требуется на %Количество% %Единица%'
                |;uk='Номенклатура %НоменклатураХарактеристика% %Склад% призначення %Назначение%
                |   Оприбутковується для забезпечення більше ніж потрібно на %Количество% %Единица%'");

			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Строка(Выборка.Назначение));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(Выборка.ВеличинаНаличиеБольшеПотребности));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

		Если Выборка.ОшибкаНаличиеВМинусе Тогда

			ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% %Склад% назначение %Назначение%
                |	Недостаточное количество товара в наличии на %Количество% %Единица%'
                |;uk='Номенклатура %НоменклатураХарактеристика% %Склад% призначення%Назначение%
                |Недостатня кількість товару в наявності на %Количество% %Единица%'");

			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Строка(Выборка.Назначение));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Наличие));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструОбеспечениеЗаказовРаботами(Объект, Отказ, РезультатЗапроса)

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика% подразделение %Подразделение% назначение %Назначение%
            |	Заказано для обеспечения больше чем требуется на %Количество% %Единица%,'
            |;uk='Номенклатура %НоменклатураХарактеристика% підрозділ %Подразделение% призначення %Назначение%
            |	Замовлено для забезпечення більше ніж потрібно на %Количество% %Единица%,'");

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
					НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Подразделение%",  Строка(Выборка.Подразделение));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%",     Строка(Выборка.Назначение));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",        Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%",     Строка(-Выборка.Количество));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструСерии(Объект, Отказ, РезультатЗапроса)

		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ШаблонСообщения = НСтр("ru='Товар %Товар% 
                |Недостаточно для отгрузки %Количество% %Единица%.'
                |;uk='Товар %Товар% 
                |Недостатньо для відвантаження %Количество% %Единица%.'");

		ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия);
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%", ПредставлениеТовара );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%", Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТМЦВЭксплуатации(Объект, Отказ, РезультатЗапроса)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") Тогда
		
		ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика%, %Партия%
            |По ТМЦ уже оформлено списание, перемещение или возврат в количестве большем, чем указано в документе, на %Количество% %Единица%'
            |;uk='Номенклатура %НоменклатураХарактеристика%, %Партия%
            |За ТМЦ вже оформлено списання, переміщення або повернення в кількості більшій, ніж зазначено в документі, на %Количество% %Единица%'");
	Иначе
		ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика%, %Партия%
            |Превышен оперативный остаток в подразделении %Подразделение%, на %Количество% %Единица%'
            |;uk='Номенклатура %НоменклатураХарактеристика%, %Партия%
            |Перевищено оперативний залишок у підрозділі %Подразделение%, %Количество% %Единица%'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения,"%НоменклатураХарактеристика%", НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Партия%", Строка(Выборка.Партия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Подразделение%", Строка(Выборка.Подразделение));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%", Строка(Выборка.ЕдиницаИзмерения));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры






Процедура СообщитьОбОшибкахПроведенияПоРегиструПринятаяВозвратнаяТара(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияСДокументом = НСтр("ru='Номенклатура %НоменклатураХарактеристика%
        |Возвращается (выкупается) больше, чем принято по документу %ДокументПоступления%%ПодЗалог% на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика%
        |Повертається (викуповується) більше, ніж прийнято за документом %ДокументПоступления%%ПодЗалог% на %Количество% %Единица%'");
		
	ШаблонСообщенияБезДокумента = НСтр("ru='Номенклатура %НоменклатураХарактеристика%
        |Возвращается (выкупается) больше, чем принято%ПодЗалог% на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика%
        |Повертається (викуповується) більше, ніж прийнято%ПодЗалог% на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ШаблонСообщения = ?(ЗначениеЗаполнено(Выборка.ДокументПоступления), ШаблонСообщенияСДокументом, ШаблонСообщенияБезДокумента);
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодЗалог%",   ?(Выборка.ПредусмотренЗалог, НСтр("ru=' под залог';uk=' під заставу'"), ""));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументПоступления%",  Строка(Выборка.ДокументПоступления));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструПереданнаяВозвратнаяТара(Объект, Отказ, РезультатЗапроса)
	
	ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика%
        |Возвращается (выкупается) больше, чем передано%ДокументПередачиВидЗапасовНомерГТД%%ПодЗалог% на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика%
        |Повертається (викуповується) більше, ніж передано%ДокументПередачиВидЗапасовНомерГТД%%ПодЗалог% на %Количество% %Единица%'");
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодЗалог%",   ?(Выборка.ПредусмотренЗалог, НСтр("ru=' под залог';uk=' під заставу'"), ""));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		
		ДокументПередачиВидЗапасовНомерГТД = "";
			
		Если ЗначениеЗаполнено(Выборка.ДокументПередачи) Тогда
			ДокументПередачиВидЗапасовНомерГТД = ДокументПередачиВидЗапасовНомерГТД + НСтр("ru=' по документу %ДокументПередачи%';uk=' за документом %ДокументПередачи%'");
			ДокументПередачиВидЗапасовНомерГТД = СтрЗаменить(ДокументПередачиВидЗапасовНомерГТД, "%ДокументПередачи%",  Строка(Выборка.ДокументПередачи));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ВидЗапасов) Тогда
			ДокументПередачиВидЗапасовНомерГТД = ДокументПередачиВидЗапасовНомерГТД + НСтр("ru=' по виду запасов %ВидЗапасов%';uk=' по виду запасів %ВидЗапасов%'");
			ДокументПередачиВидЗапасовНомерГТД = СтрЗаменить(ДокументПередачиВидЗапасовНомерГТД, "%ВидЗапасов%",  Строка(Выборка.ВидЗапасов));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.НомерГТД) Тогда
			ДокументПередачиВидЗапасовНомерГТД = ДокументПередачиВидЗапасовНомерГТД + НСтр("ru=' по номеру ГТД %НомерГТД%';uk=' за номером ВМД %НомерГТД%'");
			ДокументПередачиВидЗапасовНомерГТД = СтрЗаменить(ДокументПередачиВидЗапасовНомерГТД, "%НомерГТД%",  Строка(Выборка.ВидЗапасов));
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументПередачиВидЗапасовНомерГТД%", ДокументПередачиВидЗапасовНомерГТД);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыОрганизаций(Объект, Отказ, РезультатЗапроса)

	КонецВремен = '39991231235959';
	ШаблонОперативный = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
        |Превышен оперативный остаток товара по организации %Организация% на складе %Склад% на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% 
        |Перевищено оперативний залишок товару по організації %Организация% на складі %Склад% на %Количество% %Единица%'");
	ШаблонКонтрольный = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
        |Превышен остаток товара на %ДатаОстатка% по организации %Организация% на складе %Склад% на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% 
        |Перевищений залишок товару на %ДатаОстатка% по організації %Организация% на складі %Склад% на %Количество% %Единица%'");
	
	ПредыдущаяЗапись =
		Новый Структура("Номенклатура, Характеристика, Организация, Склад", Неопределено, Неопределено, Неопределено, Неопределено);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПредыдущаяЗапись.Номенклатура <> Выборка.Номенклатура Или ПредыдущаяЗапись.Характеристика <> Выборка.Характеристика
			Или ПредыдущаяЗапись.Организация <> Выборка.Организация Или ПредыдущаяЗапись.Склад <> Выборка.Склад
		Тогда
			ЗаполнитьЗначенияСвойств(ПредыдущаяЗапись, Выборка);
		Иначе
			Продолжить;
		КонецЕсли;
		ШаблонСообщения = ?(Выборка.ДатаОстатка = КонецВремен, ШаблонОперативный, ШаблонКонтрольный);
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Выборка.Организация));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%", Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаОстатка%", Формат(Выборка.ДатаОстатка, "ДЛФ=D"));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);
	КонецЦикла;
	
	// технически можно не контролировать пустой результат запроса и значение константы - в этих случаях код сюда не придет
	Если Не ПраваПользователяПовтИсп.ПропускКонтроляТоваровОрганизацийПриОтменеПриходов()
	 И Не РезультатЗапроса.Пустой() И Константы.КонтролироватьТоварыОрганизацийПриОтменеПриходов.Получить() Тогда	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструПрочиеРасходы(Объект, Отказ, РезультатЗапроса)
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Превышен остаток расхода по статье %1 на сумму %2 %3';uk='Перевищений залишок витрачання за статтею %1 на суму %2 %3'"),
				Строка(Выборка.СтатьяРасходов),
				Строка(- Выборка.СуммаОстаток),
				Строка(ВалютаУправленческогоУчета));
		
		Отказ = Истина;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры



Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыКОформлениюЗаявленийОВвозе(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияБезПоступления = НСтр("ru='Номенклатура %НоменклатураХарактеристика% 
        |Количество товара к оформлению не соответствует количеству в документе поступления на %Количество% %Единица%'
        |;uk='Номенклатура %НоменклатураХарактеристика% 
        |Кількість товару до оформлення не відповідає кількості в документі надходження на %Количество% %Единица%'");
	ШаблонСообщенияСПоступлением = ШаблонСообщенияБезПоступления + " " + НСтр("ru='(см. документ %Поступление%)';uk='(див. документ %Поступление%)'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ДокументПоступления) Тогда
			ШаблонСообщения = ШаблонСообщенияСПоступлением;
		Иначе
			ШаблонСообщения = ШаблонСообщенияБезПоступления;
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.КОформлению));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Поступление%",Строка(Выборка.ДокументПоступления));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти


#КонецОбласти

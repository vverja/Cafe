#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает действующий на указанную дату документ, удостоверяющий личность.
//
// Параметры:
//	Физлицо			- физическое лицо, для которого необходимо получить документ.
//	Дата			- дата, на которую необходимо получить документ.
//
// Возвращаемое значение
//	Представление		- строка - представление документа, удостоверяющего личность.
//
Функция ДокументУдостоверяющийЛичностьФизлица(Физлицо, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Физлицо",	Физлицо);
	Запрос.УстановитьПараметр("ДатаСреза",	Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛиц.Представление
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
	|			ДокументыФизическихЛиц.Физлицо КАК Физлицо
	|		ИЗ
	|			РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ГДЕ
	|			ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
	|			И ДокументыФизическихЛиц.Физлицо = &Физлицо
	|			" + ?(Дата <> Неопределено, "И ДокументыФизическихЛиц.Период <= &ДатаСреза", "") + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументыФизическихЛиц.Физлицо) КАК ДокументыСрез
	|		ПО ДокументыФизическихЛиц.Период = ДокументыСрез.Период
	|			И ДокументыФизическихЛиц.Физлицо = ДокументыСрез.Физлицо
	|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УдостоверениеЛичности = Новый Структура("Представление, ЕстьУдостоверение");
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция проверяет, является-ли указанный вид документа документом, удостоверяющим личность для этого физлица.
//
// Параметры:
//	Физлицо			- физическое лицо, для которого необходимо получить документ.
//	ВидДокумента	- вид документа, удостоверяющего личность.
//	Дата			- дата, на которую необходимо получить документ.
//
// Возвращаемое значение
//	Является		- булево - является ли указанный вид документа документом, удостоверяющим личность.
//
Функция ЯвляетсяУдостоверениемЛичности(Физлицо, ВидДокумента, Дата) Экспорт
	
	Если Физлицо.Пустая() Или ВидДокумента.Пустая() Или Не ЗначениеЗаполнено(Дата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.Паспорт Тогда	
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Физлицо",		Физлицо);
	Запрос.УстановитьПараметр("ВидДокумента",	ВидДокумента);
	Запрос.УстановитьПараметр("ДатаСреза",		Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛиц.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
	|			ДокументыФизическихЛиц.Физлицо КАК Физлицо
	|		ИЗ
	|			РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ГДЕ
	|			ДокументыФизическихЛиц.Физлицо = &Физлицо
	|			И ДокументыФизическихЛиц.Период < &ДатаСреза
	|			И ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументыФизическихЛиц.Физлицо) КАК ДокументыСрез
	|		ПО ДокументыФизическихЛиц.Физлицо = ДокументыСрез.Физлицо
	|			И ДокументыФизическихЛиц.Период = ДокументыСрез.Период
	|			И (ДокументыФизическихЛиц.ВидДокумента = &ВидДокумента)";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьПредставление(ВидДокумента, Серия, Номер, ДатаВыдачи, СрокДействия, КемВыдан) Экспорт
	
	Возврат ""  + ВидДокумента
				+ ?(ЗначениеЗаполнено(Серия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", серія: %1", Серия), "")
				+ ?(ЗначениеЗаполнено(Номер), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", № %1", Номер), "")
				+ ?(ЗначениеЗаполнено(ДатаВыдачи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", видано: %1 року", Формат(ДатаВыдачи,"Л = uk_UA; ДФ='дд ММММ гггг'")), "")
				+ ?(ЗначениеЗаполнено(СрокДействия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", діє до: %1 року", Формат(СрокДействия,"Л = uk_UA; ДФ='дд ММММ гггг'")), "")
				+ ?(ЗначениеЗаполнено(КемВыдан), ", " + КемВыдан, "");
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПредставлениеНаУкрОтметитьКОбработке(Параметры) Экспорт
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = "РегистрСведений.ДокументыФизическихЛиц";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыФизическихЛиц.Физлицо
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|ГДЕ
	|	ДокументыФизическихЛиц.Представление ПОДОБНО &ОтборПредставление";
	
	Запрос.УстановитьПараметр("ОтборПредставление", "%выдан:%");
	
	Данные = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметрыОтметки);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.9.2
// Перезаполнет представление на украинском, если оно было на русском.
Процедура ЗаполнитьПредставлениеНаУкрОтложенно(Параметры) Экспорт
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		"РегистрСведений.ДокументыФизическихЛиц");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыФизическихЛиц.Период,
	|	ДокументыФизическихЛиц.Физлицо,
	|	ДокументыФизическихЛиц.ВидДокумента,
	|	ДокументыФизическихЛиц.Серия,
	|	ДокументыФизическихЛиц.Номер,
	|	ДокументыФизическихЛиц.ДатаВыдачи,
	|	ДокументыФизическихЛиц.СрокДействия,
	|	ДокументыФизическихЛиц.КемВыдан,
	|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛиц.Представление
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|ГДЕ
	|	ДокументыФизическихЛиц.Физлицо = &Физлицо";
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ДокументыФизическихЛиц");
			ЭлементБлокировкиДанных.УстановитьЗначение("Физлицо", Выборка.Физлицо);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Физлицо", Выборка.Физлицо);
			Запрос.Текст = ТекстЗапроса;
			
			ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
			
			ОбработаноЗаписей = 0;
			Для Каждого Запись Из ТаблицаЗаписей Цикл
				Если СтрНайти(Запись.Представление,"выдан:") > 0 Тогда
				    Запись.Представление = РегистрыСведений.ДокументыФизическихЛиц.ПолучитьПредставление(Запись.ВидДокумента, Запись.Серия, Запись.Номер, Запись.ДатаВыдачи, Запись.СрокДействия, Запись.КемВыдан);
					ОбработаноЗаписей = ОбработаноЗаписей + 1;
				КонецЕсли; 
			КонецЦикла; 
			
			НаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Физлицо.Установить(Выборка.Физлицо);
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
			
			Если ОбработаноЗаписей = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			Иначе 
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			КонецЕсли; 
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось обработать данные регистра по физлицу : %Физлицо% по причине: %Причина%';uk='Не вдалося обробити дані регістра по фізособі : %Физлицо% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Физлицо%", Выборка.Физлицо);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ДокументыФизическихЛиц,
				Выборка.Физлицо,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
		Параметры.Очередь, "РегистрСведений.ДокументыФизическихЛиц");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
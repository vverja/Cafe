
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ТипОборудованияИспользуемый= "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудованияИспользуемый = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудованияИспользуемый) 
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка обращения к драйверу.';uk='Помилка звернення до драйвера.'"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, 
										ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
		ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьОписание>.';uk='Помилка виклику методу <ОбъектДрайвера.ПолучитьОписание>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
		
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.';uk='Помилка виклику методу <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
	Иначе
		
		Если ТипОборудованияИспользуемый = "ПринтерЧеков"
				Или ТипОборудованияИспользуемый = "ФискальныйРегистратор" Тогда
				
			ВремВыходныеПараметры = Новый Массив();
			Если ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремВыходныеПараметры) Тогда
				ВремШиринаСтроки = ВремВыходныеПараметры[0];
				ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
			КонецЕсли;
			ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
		ИначеЕсли ТипОборудованияИспользуемый = "ЭквайринговыйТерминал" Тогда
			ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
			ПараметрыПодключения.Вставить("ТипТранзакции", "");
		ИначеЕсли ТипОборудованияИспользуемый = "СканерШтрихкода" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("Штрихкод");
			ВыходныеПараметры[1].Добавить("Barcode");
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательМагнитныхКарт" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("ДанныеКарты");
			ВыходныеПараметры[1].Добавить("TracksData");
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательRFID" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("RFID");
			ВыходныеПараметры[1].Добавить("RFID");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		Результат = ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера.
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С УСТРОЙСТВАМИ ВВОДА ДАННЫХ
	
	// Обработка события от устройства.
	ИначеЕсли Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);
		
	// Завершение обработки события от устройства.
	ИначеЕсли Команда = "ЗавершитьОбработкуСобытия" Тогда
		Результат = ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙСТВАМИ 
	
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Открыть смену
	ИначеЕсли Команда = "OpenDay" ИЛИ Команда = "ОткрытьСмену" Тогда
	
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Закрыть кассовую смену
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "ЗакрытьСмену" Тогда
	
		Результат = ЗакрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отчет о текущем состоянии расчетов
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" ИЛИ Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		Результат = ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сформировать отчет без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека внесения/выемки.
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	// Фискализация чека.
    ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда
		Результат = ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintTextDocument" ИЛИ Команда = "ПечатьТекстовогоДокумента"  Тогда
		Результат = НачатьПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

	// Открыть чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	//  Аннулирование чека
	ИначеЕсли Команда = "AnnulCheck" ИЛИ Команда = "АннулироватьЧек" Тогда
		ТипЧека       = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		Результат = АннулироватьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
	// Печать переодического отчета по датам
	ИначеЕсли Команда = "PrintPReportDate" ИЛИ Команда = "НапечататьПериодическийОтчетПоДатам" Тогда
		Результат = НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать периодического отчета по номерам
	ИначеЕсли Команда = "PrintPReportNumber" ИЛИ Команда = "НапечататьПериодическийОтчетПоНомерам" Тогда
		Результат = НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать нулевого чека
	ИначеЕсли Команда = "PrintNullReceipt" ИЛИ Команда = "НапечататьНулевойЧек" Тогда
		Результат = НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета о проданных товарах
	ИначеЕсли Команда = "PrintSoldReport" ИЛИ Команда = "НапечататьОтчетОПроданныхТоварах" Тогда
		Результат = НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.';uk='Команда ""%Команда%"" не підтримується цим драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Размер пакета в элементах передаваемой информации в драйвер.
//
Функция РазмерПакетаПоУмолчанию() Экспорт
	
	РазмерПакета = 200;
	Возврат РазмерПакета;
	
КонецФункции
 
#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляУстройствВводаДанных

// Функция осуществляет обработку внешних событий подключаемого оборудования.
//
Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
		
	Возврат Результат;

КонецФункции

// Процедура вызывается, когда система готова принять следующее событие от устройства.
//
Функция ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхУстройств

// Функция осуществляет открытие денежного ящика.
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьДенежныйЯщик>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьДенежныйЯщик>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт 
	
	Результат = Истина;
	ШиринаСтроки = 0;
	 
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(ШиринаСтроки);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьШиринуСтроки>.';uk='Помилка виклику методу <ОбъектДрайвера.ПолучитьШиринуСтроки>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет открытие смены.
//
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор';uk='Адміністратор'"));
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";

	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		// Ветка на стандарт 1.4. Поддержка команды драйвера "ОткрытьСмену".
		Если ПараметрыПодключения.РевизияИнтерфейса > 1004 Тогда
			Попытка
				Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства);
			Исключение
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
				Возврат Результат;
			КонецПопытки;
		КонецЕсли
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ';uk='НЕФІСКАЛЬНИЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 1, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет закрыть смены.
//
Функция ЗакрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	РезультатСостояние = Ложь;
	Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор';uk='Адміністратор'"));
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		Попытка
			Результат = ОбъектДрайвера.НапечататьОтчетСГашением(ПараметрыПодключения.ИДУстройства);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетСГашением>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетСГашением>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ';uk='НЕФІСКАЛЬНИЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 5, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(1); // 1 - Закрыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет формирование отчета о текущем состоянии расчетов.
//
Функция ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		Попытка
			Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ';uk='НЕФІСКАЛЬНИЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 4, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет формирование отчет без гашения.
//
Функция ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		Попытка
			Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	Иначе 
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ';uk='НЕФІСКАЛЬНИЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 4, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	КонецЕсли;
		
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы.
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ТипИнкассации = ВходныеПараметры[0];
	Сумма         = ВходныеПараметры[1];
 
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		Попытка
			Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ?(ТипИнкассации = 1, Сумма, -Сумма));	
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ';uk='НЕФІСКАЛЬНИЙ РЕЖИМ'") + Символы.ПС;
		ТекстЧека = ТекстЧека + НСтр("ru='СУММА =';uk='СУМА ='") + Символы.НПП + Формат(Сумма, "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0");	
		ТекстЧека = МенеджерОборудованияКлиент.СформироватьТекстНефискальногоЧека(ШиринаСтроки, ?(ТипИнкассации = 1, 2, 3), Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции    

// Функция осуществляет фискализацию чека.
//
Функция ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	ДатаСеанса = МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса();
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		
		ШаблонЧека = СформироватьШаблонЧека(ВходныеПараметры);
		Возврат ПечатьЧекаПоШаблону(ОбъектДрайвера, Параметры, ПараметрыПодключения, ШаблонЧека, ВыходныеПараметры);
	
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

 
// Осуществляет печать текстового документа.
//
Функция НачатьПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;  
	СтрокаТекста = "";
	
	Если ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ОбщиеПараметры = ВходныеПараметры[0];
		
		ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекстовогоДокумента(ОбщиеПараметры, ВыходныеПараметры, ШиринаСтроки);
		Попытка
			Для Каждого ТекстПечати Из ДанныеЧека Цикл
				Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
				Если НЕ Результат Тогда
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
					Возврат Результат;
				Иначе
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			КонецЦикла;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет печать текста.
//
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;  
	
	Если (ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор") Тогда
		
		// Открываем чек
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);
		// Печатаем строки чека
		Если Результат Тогда
			Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
				ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
				Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
					ТаблицаОплат = Новый Массив();
					Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
					Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Ложь, ВыходныеПараметры);
				Иначе
					Если (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
						ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
						ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
 						ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
						ВремВыходныеПараметры = Новый Массив();
						Если НЕ ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремТипШтрихкода, ВремШтрихКод, ВремВыходныеПараметры) Тогда
							Текст = НСтр("ru='<Штрихкод %ТипШтрихКода% не распечатан>';uk='<Штрихкод %ТипШтрихКода% не роздрукований>'");
							Текст = СтрЗаменить(Текст, "%ТипШтрихКода%", ВремТипШтрихкода);
							Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Текст, ВремВыходныеПараметры) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыделеннаяСтрока, ВыходныеПараметры) Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Закрываем чек
		Если Результат Тогда
			ТаблицаОплат = Новый Массив();
			Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодключения.ТипОборудования = "ПринтерЧеков" Тогда
		
		ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекста(СтрокаТекста);
		Попытка
			Для Каждого ТекстПечати Из ДанныеЧека Цикл
				Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
				Если НЕ Результат Тогда
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
					Возврат Результат;
				Иначе
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			КонецЦикла;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Данный тип оборудование не поддерживает данную команду.';uk='Даний тип обладнання не підтримує дану команду.'"));
		Результат = Ложь;  
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать периодического отчёта по датам.
//
Функция НапечататьПериодическийОтчетПоДатам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать периодического отчета по датам, с даты ';uk='Друк періодичного звіту по датах, з дати '") +
													  Формат(ВходныеПараметры[0], "ДФ=dd.MM.yyyy") +
													  НСтр("ru=' по дату ';uk=' за дату '") +
													  Формат(ВходныеПараметры[1], "ДФ=dd.MM.yyyy") );

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

// Функция осуществляет печать периодического отчёта по номерам дневных отчетов.
//
Функция НапечататьПериодическийОтчетПоНомерам(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)

	Результат = Истина;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать периодического отчета по номерам, с номера ';uk='Друк періодичного звіту за номерами, з номеру'") +
													  ВходныеПараметры[0] +
													  НСтр("ru=' по номер ';uk=' за номер '") +
													  ВходныеПараметры[1]);

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

// Функция осуществляет печать нулевого чека.
//
Функция НапечататьНулевойЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	
	ТаблицаОплат = Новый Массив();
		                 
	Результат  = Истина;
	// Открываем чек
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, Ложь, Истина, ВыходныеПараметры);

	// Печатаем строки чека   
	Если Результат Тогда
		ОшибкаПриПечатиСтроки = Ложь;

		Если НЕ ОшибкаПриПечатиСтроки Тогда
		  	// Закрываем чек
			Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);	
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать отчёта о проданных товарах.
//
Функция НапечататьОтчетОПроданныхТоварах(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Печать отчета о проданных товарах';uk='Друк звіту про продані товари'"));

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(1);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхРегистраторов

// Функция осуществляет открытие нового чека.
//
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры, НомерЧекаВозврата = 0) Экспорт
	
	Результат  = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	
	НомерЧекаВозврата = 0;
	
	Попытка
		 
        Ответ = ОбъектДрайвера.ОткрытьЧек(ПараметрыПодключения.ИДУстройства, ФискальныйЧек, ТипЧека, Истина, НомерЧека, НомерСмены);
		
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры.Добавить("");
		КонецЕсли;
	Исключение
		
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьЧек>.';uk='Помилка виклику методу <ОбъектДрайвера.ОткрытьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие нового чека.
//
Функция ОткрытьЧекЭмул( Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры) Экспорт

	Результат  = Истина;
	СтрокаЛога = "";

	мНомерСмены = 1;
	мНомерЧека  = 1;

	СтрокаЛога = СтрокаЛога + "===== " + ?(ЧекВозврата, НСтр("ru='Открытие чека возврата';uk='Відкриття чека повернення'"), НСтр("ru='Открытие чека продажи';uk='Відкриття чека продажу'")) + " =====" + Символы.ПС;

	СтрокаЛога = СтрокаЛога + "=====" + ?(ФискальныйЧек, "== " + НСтр("ru='Фискальный режим';uk='Фіскальний режим'"), " " + НСтр("ru='Нефискальный режим';uk='Нефіскальний режим'")) + "=====" + Символы.ПС;
	
	СтрокаЛога = СтрокаЛога + НСтр("ru='№ чека';uk='№ чека'")   + ": " + Формат(мНомерЧека,  "ЧЦ=4; ЧН=0; ЧВН=")
	           + "    "
	           + НСтр("ru='№ смены';uk='№ зміни'") + ": " + Формат(мНомерСмены, "ЧЦ=4; ЧН=0; ЧВН=") + Символы.ПС;

	НомерСмены = мНомерСмены;
	НомерЧека  = мНомерЧека;

	// Заполнение выходных параметров
	ВыходныеПараметры.Добавить(НомерСмены);
	ВыходныеПараметры.Добавить(НомерЧека);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ТекущаяДата());

	ПараметрыПодключения.Вставить("ФискальныйЧек", ФискальныйЧек);
	ПараметрыПодключения.Вставить("ЧекОткрыт"    , Истина);
	ПараметрыПодключения.Вставить("ИтогЧека"     , 0);

	ПараметрыПодключения.СтрокаЛога = ПараметрыПодключения.СтрокаЛога + СтрокаЛога;
	Возврат Результат;

КонецФункции

// Функция осуществляет закрытие ранее открытого чека.
//
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры, СуммаЧека = 0, НомерЧекаВозврата = 0, ЧекККМ = неопределено) Экспорт

	Результат = Истина;
	
	СуммаНаличнойОплаты     = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;
	СуммаБезналичнойОплаты3 = 0;
	
	НомерСозданногоЧека = 0; 
	ФискальныйНомерСозданногоЧека = "";
	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда
			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		
		
		Ответ = ОбъектДрайвера.ЗакрытьЧек(ПараметрыПодключения.ИДУстройства, СуммаНаличнойОплаты, 
											СуммаБезналичнойОплаты1, СуммаБезналичнойОплаты2, СуммаБезналичнойОплаты3, 
											СуммаЧека, НомерЧекаВозврата, НомерСозданногоЧека, ФискальныйНомерСозданногоЧека);
		
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
			
		Иначе 
			ВыходныеПараметры[1] =  ФискальныйНомерСозданногоЧека;
			
		КонецЕсли
		
			Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьЧек>.';uk='Помилка виклику методу <ОбъектДрайвера.ЗакрытьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отмену ранее открытого чека.
//
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		ОбъектДрайвера.ОтменитьЧек(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтменитьЧек>.';uk='Помилка виклику методу <ОбъектДрайвера.ОтменитьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;   
	
КонецФункции

// Функция осуществляет печать фискальной строки.
//
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Наименование, Количество, Цена, Сумма,
                                   НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Экспорт
								   
	Результат = Истина;                       
	
	Попытка
																  
		Ответ = ОбъектДрайвера.НапечататьФискСтроку(ПараметрыПодключения.ИДУстройства, Наименование, Количество, Цена,
	                                                Сумма, НомерСекции, СтавкаНДС, ДопРеквизиты);
												  
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьФискальнуюСтроку>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьФискальнуюСтроку>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать нефискальной строки.
//
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьНефискСтроку(ПараметрыПодключения.ИДУстройства, СтрокаТекста);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
			ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьНефискСтроку>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьНефискСтроку>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать штрихкода.
//
Функция ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипШтрихКода, ШтрихКод, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.НапечататьШтрихКод(ПараметрыПодключения.ИДУстройства, ТипШтрихКода, ШтрихКод);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьШтрихКод>.';uk='Помилка виклику методу <ОбъектДрайвера.НапечататьШтрихКод>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет аннулирование чека.
//
Функция АннулироватьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры) 
	
	Результат = Истина;
	
	Если ПараметрыПодключения.ТипОборудования = "ФискальныйРегистратор" Тогда
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры);
		Если Результат Тогда
			Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли;
		
	Иначе
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить("");
	КонецЕсли;
	
	Возврат Результат;           
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВсехТиповДрайверов

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим);
	
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>.';uk='Помилка виклику методу <ОбъектДрайвера.ТестУстройства>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет выполнение дополнительного действия для устройства.
//
Функция ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры)
	
	Результат  = Истина;
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.';uk='Помилка виклику методу <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена';uk='Не визначена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
		Результат = Истина;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает описание установленного драйвера.
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена';uk='Не визначена'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено';uk='Не визначено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем версию драйвера
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
		ВыходныеПараметры[1] = ВерсияДрайвера;
		
		Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
			ТипОборудования = ПараметрыПодключения.ТипОборудования;
			// Предопределенный параметр с указанием типа драйвера.
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования) 
		КонецЕсли;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, 
										ОписаниеДрайвера, 
										ТипОборудования, 
										РевизияИнтерфейса, 
										ИнтеграционныйКомпонент, 
										ОсновнойДрайверУстановлен, 
										URLЗагрузкиДрайвера);
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционныйКомпонент;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьПараметры(ПараметрыДрайвера);
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		
		// Получаем дополнительные действия.
		ОбъектДрайвера.ПолучитьДополнительныеДействия(ДополнительныеДействия);
		ВыходныеПараметры[10] = ДополнительныеДействия;
	Исключение
		Результат = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера';uk='Помилка отримання опису драйвера'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;


КонецФункции


Функция ДобавитьПараметры(ВходныеПараметры)
	
	ДопВходныеПараметры = ВходныеПараметры;
	
Возврат ДопВходныеПараметры;
	
КонецФункции
	
// Функция формирует шаблон чека.
Функция СформироватьШаблонЧека(ВходныеПараметры, ДополнительныйТекст = Неопределено, ТипОборудования = "") Экспорт
	

	ТаблицаНоменклатуры = ВходныеПараметры[0];
	ТаблицаОплат        = ВходныеПараметры[1];
	ОбщиеПараметры      = ВходныеПараметры[2];
	
	ТипыЧеков = Новый Соответствие();
	ТипыЧеков.Вставить(0, "ПРОДАЖА"); 
	ТипыЧеков.Вставить(1, "ВОЗВРАТ");
	ТипыЧеков.Вставить(2, "ВНЕСЕНИЕ"); 
	ТипыЧеков.Вставить(3, "ВЫЕМКА");
	ТипыЧеков.Вставить(4, "ОТЧЕТ БЕЗ ГАШЕНИЯ");
	ТипыЧеков.Вставить(5, "ОТЧЕТ С ГАШЕНИЕМ");
	
	// Общие параметры чека
	ПараметрыЧека = Новый Структура();
	ПараметрыЧека.Вставить("ТипЧека"        , ТипыЧеков.Получить(ОбщиеПараметры[0])); 
	ПараметрыЧека.Вставить("ФискальныйЧек"  , ОбщиеПараметры[1]);
	ПараметрыЧека.Вставить("СуммаДокумента"  , ОбщиеПараметры[3]);
	ПараметрыЧека.Вставить("ТекстШапки"     , ?(ОбщиеПараметры.Количество() > 7, ВРег(ОбщиеПараметры[6]), ""));
	ПараметрыЧека.Вставить("ТекстПодвала"   , ?(ОбщиеПараметры.Количество() > 8, ВРег(ОбщиеПараметры[7]), ""));
	ПараметрыЧека.Вставить("НомерЧека"      , ?(ОбщиеПараметры.Количество() > 10, ОбщиеПараметры[9], ""));
	ПараметрыЧека.Вставить("НомерКассы"     , ?(ОбщиеПараметры.Количество() > 11, ОбщиеПараметры[10], ""));
	ПараметрыЧека.Вставить("ДатаВремя"      , ?(ОбщиеПараметры.Количество() > 12, ВРег(ОбщиеПараметры[11]), ""));
	ПараметрыЧека.Вставить("ИмяКассира"     , ?(ОбщиеПараметры.Количество() > 13, ВРег(ОбщиеПараметры[12]), ""));
	ПараметрыЧека.Вставить("ОрганизацияНазвание", ?(ОбщиеПараметры.Количество() > 14, ВРег(ОбщиеПараметры[13]), ""));
	ПараметрыЧека.Вставить("ОрганизацияИНН"     , ?(ОбщиеПараметры.Количество() > 15, ОбщиеПараметры[14], ""));
	ПараметрыЧека.Вставить("ДокументОснование"     , ?(ОбщиеПараметры.Количество() > 17, ОбщиеПараметры[17], ""));
	ПараметрыЧека.Вставить("НомерЧекаВозврата"     , ?(ОбщиеПараметры.Количество() > 18, ОбщиеПараметры[18], ""));
	
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);

	// Формируем позиции чека
	Если ТаблицаНоменклатуры <> Неопределено Тогда
		ПозицииЧека = Новый Массив();
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			СтрокаПозицииЧека = Новый Структура();
			СтрокаПозицииЧека.Вставить("ФискальнаяСтрока");
			СтрокаПозицииЧека.Вставить("Наименование", ТаблицаНоменклатуры[ИндексМассива][0].Значение);
			СтрокаПозицииЧека.Вставить("Количество"  , ТаблицаНоменклатуры[ИндексМассива][5].Значение);
			СтрокаПозицииЧека.Вставить("Цена"        , ТаблицаНоменклатуры[ИндексМассива][4].Значение);
			СтрокаПозицииЧека.Вставить("СуммаСкидок" 			, ТаблицаНоменклатуры[ИндексМассива][7].Значение);
			СтрокаПозицииЧека.Вставить("ПроцентСкидок"			, ТаблицаНоменклатуры[ИндексМассива][8].Значение);
			СтрокаПозицииЧека.Вставить("Сумма"       			, ТаблицаНоменклатуры[ИндексМассива][9].Значение);
			СтрокаПозицииЧека.Вставить("НомерСекции" 			, ТаблицаНоменклатуры[ИндексМассива][3].Значение);
			СтрокаПозицииЧека.Вставить("СуммаНДС" 				, ТаблицаНоменклатуры[ИндексМассива][11].Значение);
			СтрокаПозицииЧека.Вставить("СтавкаНДС"   			, ТаблицаНоменклатуры[ИндексМассива][12].Значение);
			СтрокаПозицииЧека.Вставить("СтавкаНДССтрокой"		, ТаблицаНоменклатуры[ИндексМассива][17].Значение);
			СтрокаПозицииЧека.Вставить("ЭтоПодакцизныйТовар"   	, ТаблицаНоменклатуры[ИндексМассива][18].Значение);
			СтрокаПозицииЧека.Вставить("КодПоУКТВЭД"		   	, ТаблицаНоменклатуры[ИндексМассива][19].Значение);
			СтрокаПозицииЧека.Вставить("Артикул"			   	, ТаблицаНоменклатуры[ИндексМассива][20].Значение);
			СтрокаПозицииЧека.Вставить("Штрихкод"			   	, ТаблицаНоменклатуры[ИндексМассива][1].Значение);
			СтрокаПозицииЧека.Вставить("ШтрихкодыАкцизныхМарок"	, ТаблицаНоменклатуры[ИндексМассива][21].Значение);
			СтрокаПозицииЧека.Вставить("ЕдиницаИзмерения"		, ТаблицаНоменклатуры[ИндексМассива][22].Значение);
			СтрокаПозицииЧека.Вставить("ЦенаВключаетНДС"		, ТаблицаНоменклатуры[ИндексМассива][23].Значение);
			ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЦикла;
	Иначе
		ПозицииЧека = Неопределено;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
		Если ПозицииЧека = Неопределено Тогда
			ПозицииЧека = Новый Массив();
		КонецЕсли;
		СтрокаПозицииЧека = Новый Структура();
		СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
		СтрокаПозицииЧека.Вставить("Текст",  ДополнительныйТекст);
		ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЕсли;
	
	// Формируем таблицу оплат.
	Если ТаблицаОплат <> Неопределено Тогда
		ОплатаЧека = Новый Массив();
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты"   , ТаблицаОплат[ИндексОплаты][0].Значение);
			СтрокаОплаты.Вставить("Сумма"       , ТаблицаОплат[ИндексОплаты][1].Значение);
			СтрокаОплаты.Вставить("Наименование", ТаблицаОплат[ИндексОплаты][2].Значение);
			ОплатаЧека.Добавить(СтрокаОплаты);
		КонецЦикла; 
	Иначе
		ТаблицаОплат = Неопределено;
	КонецЕсли;
	
	// Подготовка данных.
	ШаблонЧека  = Новый Массив();
	ШаблонЧека.Добавить(ПараметрыЧека);
	ШаблонЧека.Добавить(ПозицииЧека);
	ШаблонЧека.Добавить(ОплатаЧека);
	
	Возврат ШаблонЧека;
	
КонецФункции

// Вспомогательная функция - осуществляет печать чека по шаблону.
//
Функция ПечатьЧекаПоШаблону( ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;
	
	ОбщиеПараметры = ВходныеПараметры[0];
	
	ПозицииЧека    = ВходныеПараметры[1];
	ТаблицаОплат   = ВходныеПараметры[2];
		
	ТаблицаДопРеквизитов = Новый Массив;
	ТаблицаДопРеквизитов.Добавить(Новый Массив);
	

	ФискальныйЧек = ?(ОбщиеПараметры.Свойство("ФискальныйЧек"), ОбщиеПараметры.ФискальныйЧек, Ложь);
	ТипЧека =  ?(ОбщиеПараметры.Свойство("ТипЧека"), ?(ВРег(ОбщиеПараметры.ТипЧека) = "ПРОДАЖА", Ложь, Истина), Ложь);

	Если ОбщиеПараметры.Свойство("ПодписьЧека")  Тогда
		// Печать чека производиться в 2 этапа. Чека был открыт ранее.
		РасширенныеПараметры = ОбщиеПараметры.ПодписьЧека; 
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(РасширенныеПараметры.НомерСмены);
		ВыходныеПараметры.Добавить(РасширенныеПараметры.НомерЧека);
		ВыходныеПараметры.Добавить(0); // Номер документа
		ВыходныеПараметры.Добавить(МенеджерОборудованияКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(Неопределено);
	Иначе
		// Открываем чек
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, Истина, ВыходныеПараметры,);
	КонецЕсли;
	
	// Печатаем строки чека   
	Если Результат Тогда
		
		
		ОшибкаПриПечати = Ложь;
		// Печатаем позиции чека
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				
				Наименование  = ?(ПозицияЧека.Свойство("Наименование") , ПозицияЧека.Наименование, "");
				Количество    = ?(ПозицияЧека.Свойство("Количество")   , ПозицияЧека.Количество  , 1);
				Цена          = ?(ПозицияЧека.Свойство("Цена")         , ПозицияЧека.Цена        , 0);
				Сумма         = ?(ПозицияЧека.Свойство("Сумма")        , ПозицияЧека.Сумма       , 0);
				НомерСекции   = ?(ПозицияЧека.Свойство("НомерСекции")  , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС     = ?(ПозицияЧека.Свойство("СтавкаНДС")    , ПозицияЧека.СтавкаНДС   , 0);
				
				ТаблицаДопРеквизитов[0].Очистить();
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("СтавкаНДССтрокой")  , ПозицияЧека.СтавкаНДССтрокой , 0));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("ЭтоПодакцизныйТовар")  , ПозицияЧека.ЭтоПодакцизныйТовар , Ложь));
				
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("Наименование") 			, ПозицияЧека.Наименование, ""));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("КодПоУКТВЭД")				, ПозицияЧека.КодПоУКТВЭД , ""));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("Артикул")					, ПозицияЧека.Артикул , ""));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("Штрихкод")  				, ПозицияЧека.Штрихкод , ""));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("ЕдиницаИзмерения")			, ПозицияЧека.ЕдиницаИзмерения, ""));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("ПроцентСкидок")  			, ПозицияЧека.ПроцентСкидок , 0));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("СуммаСкидок")  			, ПозицияЧека.СуммаСкидок , 0));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("ЦенаВключаетНДС")  		, ПозицияЧека.ЦенаВключаетНДС , 1));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("СуммаНДС")  				, ПозицияЧека.СуммаНДС , 0));
				ТаблицаДопРеквизитов[0].Добавить(?(ПозицияЧека.Свойство("ШтрихкодыАкцизныхМарок") 	, ПозицияЧека.ШтрихкодыАкцизныхМарок, ""));
				
				ДопРеквизиты = СформироватьТаблицуДопРеквизитов(ТаблицаДопРеквизитов);
				  
				Если НЕ НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, Наименование, Количество, Цена, Сумма,
                                 				    НомерСекции, СтавкаНДС, ДопРеквизиты, ВыходныеПараметры) Тогда
							   

					ОшибкаПриПечати = Истина;   
					Прервать;
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				Текст = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
											Текст, ВыходныеПараметры) Тогда
					ОшибкаПриПечати = Истина;   
					Прервать;
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("Штрихкод") Тогда
				ВремВыходныеПараметры = Новый Массив();
				ТипШтрихКодаЗнач = ?(ПозицияЧека.Свойство("ТипШтрихКода"), ПозицияЧека.ТипШтрихКода, "");
				ШтрихКод     = ?(ПозицияЧека.Свойство("ШтрихКод")    , ПозицияЧека.ШтрихКод    , "");
				Если НЕ ПечатьШтрихкода(ОбъектДрайвера, Параметры, ПараметрыПодключения,
											ТипШтрихКодаЗнач, ШтрихКод, ВремВыходныеПараметры) Тогда
					Текст = НСтр("ru='<Штрихкод %ТипШтрихКода% не распечатан>';uk='<Штрихкод %ТипШтрихКода% не роздрукований>'");
					Текст = СтрЗаменить(Текст, "%ТипШтрихКода%", ТипШтрихКодаЗнач);
					Если НЕ НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
						Текст, ВремВыходныеПараметры) Тогда
						ОшибкаПриПечати = Истина;   
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
		
		Если НЕ ОшибкаПриПечати Тогда
		  	// Закрываем чек
			ТаблицаОплатЧека = Новый Массив();
			Если ТаблицаОплат <> Неопределено Тогда
				Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(ТаблицаОплат[ИндексОплаты].ТипОплаты);
					СтрокаОплаты.Добавить(ТаблицаОплат[ИндексОплаты].Сумма);
					СтрокаОплаты.Добавить(ТаблицаОплат[ИндексОплаты].Наименование);
					СтрокаОплаты.Добавить("");
					ТаблицаОплатЧека.Добавить(СтрокаОплаты);
				КонецЦикла;
			КонецЕсли;
			
			СуммаЧека = ОбщиеПараметры.СуммаДокумента;
			
			Если ТипЧека Тогда 
				ЧекККМ =0;
				НомерЧекаВозврата = ОбщиеПараметры.НомерЧекаВозврата;
			 Иначе
				 НомерЧекаВозврата = "";
			КонецЕсли;	 
			Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплатЧека, ВыходныеПараметры, СуммаЧека, НомерЧекаВозврата, ОбщиеПараметры.ДокументОснование);
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции


// Сформировать таблицу доп.реквизитов для реализации
Функция СформироватьТаблицуДопРеквизитов(ДанныеЗагрузки) Экспорт
	
	Результат = Новый Массив();
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Table");
	Для Каждого Позиция Из ДанныеЗагрузки  Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
		
		ЗаписьXML.ЗаписатьАтрибут("VAT", Позиция[0]);                                                //СтавкаНДССтрока
		ЗаписьXML.ЗаписатьАтрибут("IsExcisable", Строка(Формат(Позиция[1], "БЛ=False; БИ=True")));   //ЕстьАкциз
		
		ЗаписьXML.ЗаписатьАтрибут("Nomenclature" , Позиция[2]);							        //НоменклатураНаименование
		ЗаписьXML.ЗаписатьАтрибут("UKTZED" , Позиция[3]);           						    //УКТЗЕД
		ЗаписьXML.ЗаписатьАтрибут("VendorCode" , Позиция[4]);        						    //Артикул
		ЗаписьXML.ЗаписатьАтрибут("Barcode" , Позиция[5]);          							//ШтрихКод
		ЗаписьXML.ЗаписатьАтрибут("Dimension" , Позиция[6]);        							//ЕдИзмерения
		ЗаписьXML.ЗаписатьАтрибут("Discount" , СтрЗаменить(Строка(Позиция[7]),",","."));    	//Скидка
		ЗаписьXML.ЗаписатьАтрибут("DiscountAmount" , СтрЗаменить(Строка(Позиция[8]),",",".")); //СуммаСкидки
		ЗаписьXML.ЗаписатьАтрибут("PriceIncludeVAT",Строка(Позиция[9]));						//ЦенаВключаетНДС
		ЗаписьXML.ЗаписатьАтрибут("AmountVAT",СтрЗаменить(Строка(Позиция[10]),",","."));        //СуммаНДС
		ЗаписьXML.ЗаписатьАтрибут("ExciseStampBarcode", Позиция[11]); //Штихкод акцизной марки
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
    	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецОбласти
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ВидыЗапасов.Количество() > 0 Тогда
		ВидыЗапасов.Очистить();
	КонецЕсли;
	ПоТоварамКОформлению = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("ЗаполнятьПоСхеме") Тогда
	   
		Организация				= ДанныеЗаполнения.Организация;
		ОрганизацияПолучатель	= ДанныеЗаполнения.ОрганизацияПолучатель;
		Склад					= ДанныеЗаполнения.Склад;
		ПоТоварамКОформлению	= Истина;
		НачалоПериода			= ДанныеЗаполнения.НачалоПериода;
		Дата					= ДанныеЗаполнения.ДатаОформления;
		Если Не ЗначениеЗаполнено(Дата)
		 И ЗначениеЗаполнено(ДанныеЗаполнения.КонецПериода)
		 И ДанныеЗаполнения.КонецПериода < ТекущаяДатаСеанса() Тогда
			Дата = ДанныеЗаполнения.КонецПериода;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.КонецПериода)
			Или ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОформления) Тогда
			КонецПериода = ДанныеЗаполнения.КонецПериода;
		Иначе
			КонецПериода = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ДанныеЗаполнения.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар Тогда
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию;
		Иначе
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОформления) Тогда
			ЗаполнитьКПередачеПоДатеОформления();
		Иначе
			ЗаполнитьПоОстаткамТоваровКПередаче();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	 И ДанныеЗаполнения.Свойство("ЗаполнятьПоОтрицательнымОстаткам") Тогда
	 
		Организация = ДанныеЗаполнения.Организация;
		ОрганизацияПолучатель = ДанныеЗаполнения.ОрганизацияПолучатель;
		Склад = ДанныеЗаполнения.Склад;
		Дата = ДанныеЗаполнения.Дата;
		
		ЗаполнитьПоОтрицательнымОстаткамТоваровОрганизаций(ДанныеЗаполнения.Дата);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда	
		ЗаполнитьПоПеремещениюТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
    ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ПроверитьОрганизации(Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ПередачаТоваровМеждуОрганизациями.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	// Проверим чтобы дата документа попадала в диапазон указанного периода
	Если ПоТоварамКОформлению Тогда
		
		Если (ЗначениеЗаполнено(НачалоПериода) И Дата < НачалоДня(НачалоПериода))
		 Или (ЗначениеЗаполнено(КонецПериода) И Дата > КонецДня(КонецПериода)) Тогда
			
			Если ЗначениеЗаполнено(НачалоПериода) и ЗначениеЗаполнено(КонецПериода) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Дата документа должна попадать в выбранный период (между %1 и %2).';uk='Дата документа повинна попадати в обраний період (між %1 %2).'"),
					Формат(НачалоПериода, "ДЛФ=DD"),
					Формат(КонецПериода, "ДЛФ=DD"));
				
			ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Дата документа должна попадать в выбранный период (позднее %1).';uk='Дата документа повинна попадати в обраний період (пізніше %1).'"),
					Формат(НачалоПериода, "ДЛФ=DD"));
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Дата документа должна попадать в выбранный период (ранее %1).';uk='Дата документа повинна попадати в обраний період (раніше %1).'"),
					Формат(КонецПериода, "ДЛФ=DD"));
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"Дата",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РасчетыЧерезОтдельногоКонтрагента Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	ПроверитьБанковскиеСчета(Отказ);
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию Тогда
		ВзаиморасчетыСервер.ПроверитьДатуПлатежа(ЭтотОбъект, Отказ);
	КонецЕсли;
	КомиссионнаяТорговляСервер.ПроверитьКорректностьПериода(ЭтотОбъект, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаТоваровМеждуОрганизациями),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Подразделение");
	ПроверитьУслуги(Отказ);
	ПроверитьЗаполнениеСумм(Отказ);
	ПроверитьВариантОформленияПродажи(МассивНепроверяемыхРеквизитов);
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	Если ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД")
	 И УказыватьНомераГТД Тогда
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, Новый Структура("Товары"), МассивНепроверяемыхРеквизитов, Отказ);
		
	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
		
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
																								
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если Ссылка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию
	 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию Тогда
        // Если это была/будет передача на комиссию, то документ сам двигает и 
		// отчищает свои движения по регистру НДСРасчетНалоговыхОбязательств и НДСРасчетНалоговогоКредита
		ДополнительныеСвойства.Вставить("ОчищатьДвиженияНДСРасчетНалоговыхОбязательств");
		ДополнительныеСвойства.Вставить("ОчищатьДвиженияНДСРасчетНалоговогоКредита");
	КонецЕсли;
	
	НДСОбщегоНазначенияСервер.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокументаПоступление(
		ЭтотОбъект,
		"Товары",
		"ОрганизацияПолучатель"
	);

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И АвторасчетНДС И НДСИсходящийСервер.НуженАвторасчетНДС(Товары) Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		НДСИсходящийСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ЦенаВключаетНДС, ПогрешностиОкругления, "Товары", Строка(Валюта));
	КонецЕсли;
	
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,
														НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаТоваровМеждуОрганизациями));
	
	РасчетСуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
	Если СуммаДокумента <> РасчетСуммаДокумента Тогда
		СуммаДокумента = РасчетСуммаДокумента;
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(ЭтотОбъект);
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары");
	ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары");
	
 	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, Склад, Подразделение, Партнер);
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);

		ЗаполнитьВидыЗапасов(Отказ);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
		ЗапасыСервер.ОчиститьАналитикуУчетаПартийВТабличнойЧасти(Товары);
	КонецЕсли;
	
	
	Если РасчетыЧерезОтдельногоКонтрагента Тогда
		Если Не ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
			ДатаВходящегоДокумента = НачалоДня(Дата);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
			ДатаВходящегоДокумента = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
			НомерВходящегоДокумента = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(Партнер) Тогда
			Партнер = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчетКонтрагента = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ПередачаТоваровМеждуОрганизациями.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	// Очистим номера ГТД, если они не указываются.
	Если Не УказыватьНомераГТД Тогда
		Для Каждого СтрокаТаблицы Из Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ЗаполняемыйВариантОформленияПродажи") Тогда
		ВариантОформленияПродажи = ЭтотОбъект.ДополнительныеСвойства.ЗаполняемыйВариантОформленияПродажи;
	КонецЕсли; 
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ПередачаТоваровМеждуОрганизациями.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	

	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияКонтрагентДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	НДСИсходящийСервер.ОтразитьНДСНоменклатурныйСоставДляНалоговыхНакладных(ДополнительныеСвойства, Движения, Отказ);
	НДСИсходящийСервер.ОтразитьНДСРасчетНалоговыхОбязательств(ДополнительныеСвойства, Движения, Отказ);
 

	НДСВходящийСервер.ОтразитьНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(ДополнительныеСвойства, Движения, Отказ);
	НДСВходящийСервер.ОтразитьНДСРасчетНалоговогоКредита(ДополнительныеСвойства, Движения, Отказ);
	
	
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = ОбщегоНазначенияУТПовтИсп.ДополнительныйПрефиксНумератораДокументыРеализацииТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Менеджер = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Организация;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;

	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= ОрганизацияПолучатель;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизацииПолучателя;

	БанковскийСчетОрганизацииПолучателя = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь(), Подразделение);
	
	// Одна из организаций обязательно не управленческая. 
	// Валюта взаиморасчетов всегда	валюта регламентированного учета
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаВзаиморасчетов = Валюта;
	
	ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта);
	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты);
	
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") Тогда
		ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
		ДатаПлатежа = ТекущаяДатаСеанса();
	КонецЕсли;
	
	
	НалогообложениеНДСПоУмолчанию     = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДС(Организация, ОрганизацияПолучатель, Дата, Истина);	
	АвторасчетНДС			          = НДСИсходящийСервер.ПолучитьФлагАвторасчетНДС(НалогообложениеНДСПоУмолчанию);

	МестоСоставленияДокумента         = ПродажиСервер.ПолучитьМестоСоставленияДокумента(Метаданные().Имя, Менеджер, Склад);
	
	ПредставительОрганизации          = Менеджер.ФизическоеЛицо;
	ПредставительОрганизацииДолжность = ДолжностиДляПечатиКлиентСервер.ДолжностьФизическогоЛица(ПредставительОрганизации, Организация, Дата);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти()
	
	НалогообложениеНДСПоУмолчанию = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(
			Организация, 
			ОрганизацияПолучатель, 
			Неопределено, // Соглашение, 
			Дата,
			Истина        // ЭтоПродажа
		);	
	
	КэшированныеЗначения = Неопределено;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  НалогообложениеНДСПоУмолчанию);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, КэшированныеЗначения);

	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦены, Новый Структура("ИспользоватьПриПередачеМеждуОрганизациями", Истина));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		
		Реквизиты = Справочники.ВидыЦен.ПолучитьРеквизитыВидаЦены(ВидЦены);
		ВалютаВзаиморасчетов = Валюта;
		
		
		Если Валюта = Справочники.Валюты.ПустаяСсылка() Тогда
			Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		ВалютаВзаиморасчетов = Валюта;
		ЦенаВключаетНДС = Реквизиты.ЦенаВключаетНДС;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
		ПродажиСервер.ЗаполнитьЦены(
			Товары, // Табличная часть
			, // Массив строк или структура отбора
			Новый Структура( // Параметры заполнения
				"Дата, Валюта, ВидЦены, ПоляЗаполнения",
				Дата,
				Валюта,
				ВидЦены,
				"Цена, ВидЦены"
			),
			Новый Структура( // Структура действий с измененными строками
				"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
				"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПеремещениюТоваров(Знач ДокументОснование,	ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.СкладПолучатель КАК Склад,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Организация = ДанныеЗаполнения.Организация;
		
	КонецЕсли;
	
	// Заполним данные табличной части "Товары" документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПоОстаткамТоваровКПередаче() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.ВидЗапасовПродавца			КАК ВидЗапасовПродавца,
	|	ПроданныеТовары.НомерГТД					КАК НомерГТД,
	|	ПроданныеТовары.КоличествоОборот			КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ПроданныеТовары
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.ОстаткиИОбороты(&НачГраница, &КонГраница, Период, ,
	|		ОрганизацияВладелец = &Организация
	|		И ВидЗапасовПродавца.Организация = &ОрганизацияПолучатель
	|		И ВидЗапасовПродавца.ТипЗапасов = &ТипЗапасов
	|		И &Склад В (АналитикаУчетаНоменклатуры.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|	) КАК ПроданныеТовары
	|ГДЕ
	|	ПроданныеТовары.КоличествоОборот > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.ВидЗапасовПродавца			КАК ВидЗапасовПродавца,
	|	ПроданныеТовары.НомерГТД					КАК НомерГТД,
	|	ПроданныеТовары.КоличествоОстаток			КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ПроданныеТоварыОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(,
	|		ОрганизацияВладелец = &Организация
	|		И ВидЗапасовПродавца.Организация = &ОрганизацияПолучатель
	|		И ВидЗапасовПродавца.ТипЗапасов = &ТипЗапасов
	|		И &Склад В (АналитикаУчетаНоменклатуры.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|	) КАК ПроданныеТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасовПродавца,
	|	НомерГТД
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	ПроданныеТовары.ВидЗапасовПродавца.ВидЗапасовВладельца КАК ВидЗапасов,
	|	ПроданныеТовары.ВидЗапасовПродавца КАК ВидЗапасовПолучателя,
	|	ПроданныеТовары.НомерГТД КАК НомерГТД,
	|	ВЫБОР КОГДА ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0) < ПроданныеТовары.КоличествоОстаток ТОГДА
	|		ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0)
	|	ИНАЧЕ
	|		ПроданныеТовары.КоличествоОстаток
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ПроданныеТовары КАК ПроданныеТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПроданныеТоварыОстатки КАК ПроданныеТоварыОстатки
	|	ПО
	|		ПроданныеТовары.АналитикаУчетаНоменклатуры = ПроданныеТоварыОстатки.АналитикаУчетаНоменклатуры
	|		И ПроданныеТовары.ВидЗапасовПродавца = ПроданныеТоварыОстатки.ВидЗапасовПродавца
	|		И ПроданныеТовары.НомерГТД = ПроданныеТоварыОстатки.НомерГТД
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ПроданныеТовары.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.ВидЗапасовПродавца.ВидЗапасовВладельца,
	|	ПроданныеТовары.НомерГТД
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Склад", Склад);
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
		ТипЗапасов = Перечисления.ТипыЗапасов.Товар;
	Иначе
		ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар;
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	
	ДатаНачала = ?(ЗначениеЗаполнено(НачалоПериода), НачалоДня(НачалоПериода), '00010101');
	ДатаОкончания = ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), ТекущаяДатаСеанса());
	
	Если ДатаНачала > ДатаОкончания Тогда
		ВызватьИсключение НСтр("ru='Дата начала периода не может быть больше даты окончания периода';uk='Дата початку періоду не може бути більше дати закінчення періоду'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачГраница", Новый Граница(ДатаНачала, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонГраница", Новый Граница(ДатаОкончания, ВидГраницы.Включая));
	
	Товары.Очистить();
	ТаблицаТовары = Товары.Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ВидыЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрокаТоваров = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, Выборка);
		НоваяСтрокаТоваров.КоличествоУпаковок = НоваяСтрокаТоваров.Количество;
		
	КонецЦикла;
	
	ТаблицаТовары.Свернуть("Номенклатура, Характеристика, Серия, СтавкаНДС", "Количество, КоличествоУпаковок");
	Товары.Загрузить(ТаблицаТовары);
	
	ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
				
КонецПроцедуры

Процедура ЗаполнитьКПередачеПоДатеОформления() Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Потребления.ДатаОформления,
	|	Потребления.Отправитель,
	|	Потребления.Получатель,
	|	Потребления.АналитикаУчетаНоменклатуры, 
	|	Потребления.Склад,
	|	Потребления.Период,
	|	Потребления.ВидЗапасов,
	|	Потребления.ВидЗапасовПолучателя,
	|	Потребления.ТипЗапасов,
	|	Потребления.НомерГТД,
	|	Потребления.Потреблено
	|ПОМЕСТИТЬ Потребления
	|ИЗ &ТоварыКПередаче КАК Потребления
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Потребления.АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Потребления.ВидЗапасов,
	|	Потребления.ВидЗапасовПолучателя,
	|	Потребления.НомерГТД,
	|	СУММА(Потребления.Потреблено) КАК Количество
	|ИЗ
	|	Потребления КАК Потребления
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		Потребления.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|СГРУППИРОВАТЬ ПО
	|	Потребления.АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Потребления.ВидЗапасов,
	|	Потребления.ВидЗапасовПолучателя,
	|	Потребления.НомерГТД
	|");
	
	Отборы = РегистрыНакопления.ТоварыОрганизацийКПередаче.ОтборыТоваровКПередаче();
	Отборы.НачалоПериода = НачалоДня(НачалоПериода);
	Отборы.КонецПериода = КонецДня(?(ЗначениеЗаполнено(НачалоПериода), НачалоПериода, '39991231'));
	Отборы.Склад = Склад;
	Отборы.Организация = Организация;
	Отборы.ОрганизацияПолучатель = ОрганизацияПолучатель;
	Отборы.ТипЗапасов =
		?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию,
		Перечисления.ТипыЗапасов.Товар,
		Перечисления.ТипыЗапасов.КомиссионныйТовар);
	Запрос.УстановитьПараметр("ТоварыКПередаче", РегистрыНакопления.ТоварыОрганизацийКПередаче.ТоварыКПередаче(Отборы));
	
	Товары.Очистить();
	ВидыЗапасов.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаЗапасов = ВидыЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасов, Выборка);
		СтрокаЗапасов.КоличествоУпаковок = СтрокаЗапасов.Количество;
		
		СтрокаТоваров = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, Выборка);
		СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.Количество;
		
	КонецЦикла;
	
	Товары.Свернуть(
		"АналитикаУчетаНоменклатуры, Номенклатура, Характеристика, Серия, СтавкаНДС",
		"Количество, КоличествоУпаковок");
	
	ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
КонецПроцедуры

Процедура ЗаполнитьПоОтрицательнымОстаткамТоваровОрганизаций(КонецПериода)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.НомерГТД,
	|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ОстаткиНаДатуАктуальности
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
	|		Организация = &ОрганизацияОтправитель
	|	) КАК ТоварыОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток > 0
	|	И Аналитика.Склад = &Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	НомерГТД
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	СУММА(ВЫБОР КОГДА ТоварыОрганизаций.КоличествоОстаток < ОстаткиНаДатуАктуальности.КоличествоОстаток ТОГДА
	|		ТоварыОрганизаций.КоличествоОстаток
	|	ИНАЧЕ
	|		ОстаткиНаДатуАктуальности.КоличествоОстаток
	|	КОНЕЦ) КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ОстаткиОтправителя
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Граница,
	|		Организация = &ОрганизацияОтправитель
	|	) КАК ТоварыОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОстаткиНаДатуАктуальности КАК ОстаткиНаДатуАктуальности
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ОстаткиНаДатуАктуальности.АналитикаУчетаНоменклатуры
	|		И ТоварыОрганизаций.НомерГТД = ОстаткиНаДатуАктуальности.НомерГТД
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток > 0
	|	И Аналитика.Склад = &Склад
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ОстаткиПолучателя
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Граница,
	|		Организация = &ОрганизацияПолучатель
	|	) КАК ТоварыОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток < 0
	|	И Аналитика.Склад = &Склад
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика КАК Характеристика,
	|
	|	ВЫБОР КОГДА (-ТоварыОрганизаций.КоличествоОстаток) < ОстаткиОтправителя.КоличествоОстаток ТОГДА
	|		-ТоварыОрганизаций.КоличествоОстаток
	|	ИНАЧЕ
	|		ОстаткиОтправителя.КоличествоОстаток
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ОстаткиПолучателя КАК ТоварыОрганизаций
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОстаткиОтправителя КАК ОстаткиОтправителя
	|	ПО
	|		ТоварыОрганизаций.Номенклатура = ОстаткиОтправителя.Номенклатура
	|		И ТоварыОрганизаций.Характеристика = ОстаткиОтправителя.Характеристика
	|");
	Запрос.УстановитьПараметр("ОрганизацияОтправитель", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ДатаЗаполнения = ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), ТекущаяДата());
	Граница = Новый Граница(ДатаЗаполнения, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Граница", Граница);
	
	Товары.Очистить();
	ТаблицаТовары = Товары.Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаТоваров = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, Выборка);
		НоваяСтрокаТоваров.КоличествоУпаковок = НоваяСтрокаТоваров.Количество;
		
	КонецЦикла;
	
	ТаблицаТовары.Свернуть("Номенклатура, Характеристика, СтавкаНДС", "Количество, КоличествоУпаковок");
	Товары.Загрузить(ТаблицаТовары);
	
	ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
				
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	&Организация КАК Партнер,
	|	&Организация КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	&Валюта КАК Валюта,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Ложь КАК ЕстьСделкиВТабличнойЧасти
	|	
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|   ВЫБОР 
	|   	КОГДА НЕ &ОрганизацияПлательщикНДС 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)
	|		КОГДА ТаблицаТоваров.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)
	|		КОГДА ТаблицаТоваров.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС) 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)
	|		ИНАЧЕ
	|   		ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая)
	|	КОНЕЦ КАК ЦелевоеНалоговоеНазначение,
	|	ТаблицаТоваров.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаТоваров.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	&Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.ВидЗапасов КАК ВидЗапасов,
	|	ИСТИНА КАК ПодбиратьВидыЗапасов
	|	
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаВидыЗапасов.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаВидыЗапасов.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаВидыЗапасов.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ТаблицаВидыЗапасов.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ТаблицаВидыЗапасов.СкладОтгрузки КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад КАК Склад,
	|	ТаблицаВидыЗапасов.Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ТаблицаВидыЗапасов.ВидЗапасов.Организация = &Организация
	|	И (ТаблицаВидыЗапасов.ВидЗапасовПолучателя.Организация = &ОрганизацияПолучатель
	|		ИЛИ ТаблицаВидыЗапасов.ВидЗапасовПолучателя = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	)
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	РеквизитыВидаЗапасов.Организация КАК Организация,
	|	РеквизитыВидаЗапасов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга) 
	|	ИНАЧЕ
	|		РеквизитыВидаЗапасов.ТипЗапасов
	|	КОНЕЦ КАК ТипЗапасов,
	|	РеквизитыВидаЗапасов.Партнер КАК Партнер,
	|	РеквизитыВидаЗапасов.Соглашение КАК Соглашение,
	|	РеквизитыВидаЗапасов.Контрагент КАК Контрагент,
	|	РеквизитыВидаЗапасов.Договор КАК Договор,
	|	РеквизитыВидаЗапасов.Валюта КАК Валюта,
	|	ТаблицаТоваров.НалоговоеНазначение КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизацииПолучателя КАК НалоговоеНазначениеОрганизации,
	|	РеквизитыВидаЗапасов.Поставщик КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаПродукции
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		ТаблицаТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			&ОрганизацияПолучатель КАК Организация,
	|			&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|			Неопределено КАК Партнер,
	|			ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|			ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|			ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|			&Организация КАК Поставщик
	|			
	|		ГДЕ
	|			&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|			И Не &ПоТоварамКОформлению
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			&ОрганизацияПолучатель КАК Организация,
	|			&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) КАК ТипЗапасов,
	|			&Организация КАК Партнер,
	|			ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|			&Организация КАК Контрагент,
	|			ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|			&Валюта КАК Валюта,
	|			&Организация КАК Поставщик
	|		ГДЕ
	|			&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			И Не &ПоТоварамКОформлению
	|		) КАК РеквизитыВидаЗапасов
	|	ПО
	|		ИСТИНА
	|	
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	И Не &ПоТоварамКОформлению
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация,, Дата, Истина));
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизацииПолучателя", НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(ОрганизацияПолучатель,, Дата, Истина));
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС", НДСОбщегоНазначенияСервер.ОрганизацияПлательщикНДС(Организация, Дата));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ПоТоварамКОформлению", ПоТоварамКОформлению);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(Товары.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПоставщикам",ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПоставщикам"));
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	
	Запрос.Выполнить();
	
	Если ВидыЗапасовУказаныВручную Тогда
		ДополнительныеСвойства.Вставить("ИгнорироватьОперативныеОстатки", Истина);
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ТаблицаТоваров.ЦелевоеНалоговоеНазначение КАК НалоговоеНазначение,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РеквизитыДокументаИзменились(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Дата КАк Дата,
	|	ДанныеДокумента.Склад,
	|	ДанныеДокумента.ХозяйственнаяОперация
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Дата <> СохраненныеДанные.Дата ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Склад <> СохраненныеДанные.Склад ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.ХозяйственнаяОперация <> СохраненныеДанные.ХозяйственнаяОперация ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК РеквизитыИзменены
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	|	ПО
	|		Истина
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыИзменены = Выборка.РеквизитыИзменены;
	Иначе
		РеквизитыИзменены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Функция ИзмениласьТЧТоварыОтносительноТЧВидыЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|   	ВЫБОР 
	|			КОГДА НЕ &ОрганизацияПлательщикНДС 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность) 
	|			КОГДА ТаблицаТоваров.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)
	|			КОГДА ТаблицаТоваров.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая)
	|		КОНЕЦ КАК ЦелевоеНалоговоеНазначение,
	|		ТаблицаТоваров.НалоговоеНазначение КАК НалоговоеНазначение,
	|		ТаблицаТоваров.Количество КАК Количество,
	|		ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ТаблицаТоваров.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.ВидЗапасов.Назначение КАК Назначение,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаВидыЗапасов.ВидЗапасов.НалоговоеНазначение КАК ЦелевоеНалоговоеНазначение,
	|		ТаблицаВидыЗапасов.ВидЗапасовПолучателя.НалоговоеНазначение КАК НалоговоеНазначение,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество,
	|		-ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|		-ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|		-ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		-ТаблицаВидыЗапасов.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ЦелевоеНалоговоеНазначение,
	|	ТаблицаТоваров.НалоговоеНазначение,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаВзаиморасчетов) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДСВзаиморасчетов) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС", НДСОбщегоНазначенияСервер.ОрганизацияПлательщикНДС(Организация, Дата));
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ // Собственные товары
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
	|
	|ПОМЕСТИТЬ ДоступныеВидыЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И Не &ПоТоварамКОформлению
	|	И Не ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВидыЗапасов.Организация = &Организация
	|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Комиссионные товары
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И Не &ПоТоварамКОформлению
	|	И Не ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВидыЗапасов.Организация = &Организация
	|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Комиссионные товары на субкомиссию
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|	И Не &ПоТоварамКОформлению
	|	И Не ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВидыЗапасов.Организация = &Организация
	|	И ВидыЗапасов.Комитент <> &Организация
	|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|	И Не &ПоТоварамКОформлению
	|	И Не ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВидыЗапасов.Организация = &Организация
	|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.ВидЗапасовВладельца КАК ВидЗапасов,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовВладельцев
	|		ПО ВидыЗапасовВладельцев.Ссылка = ВидыЗапасов.ВидЗапасовВладельца
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И &ПоТоварамКОформлению
	|	И ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВидыЗапасов.Организация = &ОрганизацияПолучатель
	|	И ВидыЗапасов.ВидЗапасовВладельца.Организация = &Организация
	|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	И (
	|		ВидыЗапасовВладельцев.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		ИЛИ
	|		ВидыЗапасовВладельцев.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.ВидЗапасовВладельца КАК ВидЗапасов,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовВладельцев
	|		ПО ВидыЗапасовВладельцев.Ссылка = ВидыЗапасов.ВидЗапасовВладельца
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|	И &ПоТоварамКОформлению
	|	И ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВидыЗапасов.Организация = &ОрганизацияПолучатель
	|	И ВидыЗапасов.ВидЗапасовВладельца.Организация = &Организация
	|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И (
	|		ВидыЗапасовВладельцев.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		ИЛИ
	|		ВидыЗапасовВладельцев.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ПоТоварамКОформлению", ПоТоварамКОформлению);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	
	Запрос.Выполнить();
	
	
КонецПроцедуры

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		Если ПоТоварамКОформлению Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Номенклатура: %1 
                    |Передача превышает количество товара к оформлению от организации %2 по складу %3 на %4 %5'
                    |;uk='Номенклатура: %1 
                    |Передача перевищує кількість товару до оформлення від організації %2 по складу %3 на %4 %5'"),
					НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
					Организация,
					Склад,
					СтрокаТаблицы.Количество,
					СтрокаТаблицы.ЕдиницаИзмерения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Ссылка);
				
			КонецЦикла;
			
		Иначе
		
		
			Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Номенклатура: %1 
                    |Передача превышает остаток товара организации %2 на складе %3 на %4 %5'
                    |;uk='Номенклатура: %1 
                    |Передача перевищує залишок товару організацію %2 на складі %3 на %4 %5'"),
					НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
					Организация,
					Склад,
					СтрокаТаблицы.Количество,
					СтрокаТаблицы.ЕдиницаИзмерения);
				Если СтрокаТаблицы.НеУказанНомерГТД Тогда
					ТекстСообщения = ТекстСообщения + НСтр("ru=' с указанными кодами УКТВЭД и номерами ГТД';uk=' з зазначеними кодами УКТЗЕД та номерами ВМД'");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Ссылка);
				
			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДопКолонкиВидовЗапасов() Экспорт
	
	ТаблицаТовары = Товары.Выгрузить(, "АналитикаУчетаНоменклатуры, Упаковка, ВидЗапасов, Количество, КоличествоУпаковок, СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов");
	ТаблицаТовары.Свернуть("АналитикаУчетаНоменклатуры, Упаковка, ВидЗапасов", "Количество, КоличествоУпаковок, СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов");
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		КоличествоТоваровВСтроке		= СтрокаТоваров.Количество;
		КоличествоУпаковокВСтроке		= СтрокаТоваров.КоличествоУпаковок;
		СуммаВзаиморасчетовВСтроке		= СтрокаТоваров.СуммаВзаиморасчетов;
		СуммаНДСВзаиморасчетовВСтроке	= СтрокаТоваров.СуммаНДСВзаиморасчетов;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваровВСтроке, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			Если Не ПоТоварамКОформлению Тогда
				НоваяСтрока.ВидЗапасовПолучателя = СтрокаТоваров.ВидЗапасов;
			КонецЕсли;
			
			НоваяСтрока.Упаковка				= СтрокаТоваров.Упаковка;
			НоваяСтрока.КоличествоУпаковок		= ?(КоличествоТоваровВСтроке <> 0, КоличествоУпаковокВСтроке * Количество / КоличествоТоваровВСтроке, 0);
			НоваяСтрока.Количество				= Количество;
			НоваяСтрока.СуммаСНДС				= ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаСНДС			/ СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаНДС				= ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаНДС			/ СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаВзаиморасчетов		= ?(КоличествоТоваровВСтроке <> 0, Количество * СуммаВзаиморасчетовВСтроке		/ КоличествоТоваровВСтроке, 0);
			НоваяСтрока.СуммаНДСВзаиморасчетов	= ?(КоличествоТоваровВСтроке <> 0, Количество * СуммаНДСВзаиморасчетовВСтроке	/ КоличествоТоваровВСтроке, 0);
			
			СтрокаЗапасов.Количество			= СтрокаЗапасов.Количество	- НоваяСтрока.Количество;
			СтрокаЗапасов.СуммаСНДС				= СтрокаЗапасов.СуммаСНДС	- НоваяСтрока.СуммаСНДС;
			СтрокаЗапасов.СуммаНДС				= СтрокаЗапасов.СуммаНДС	- НоваяСтрока.СуммаНДС;
			
			КоличествоТоваровВСтроке			= КоличествоТоваровВСтроке		- НоваяСтрока.Количество;
			КоличествоУпаковокВСтроке			= КоличествоУпаковокВСтроке		- НоваяСтрока.КоличествоУпаковок;
			СуммаВзаиморасчетовВСтроке			= СуммаВзаиморасчетовВСтроке	- НоваяСтрока.СуммаВзаиморасчетов;
			СуммаНДСВзаиморасчетовВСтроке		= СуммаНДСВзаиморасчетовВСтроке	- НоваяСтрока.СуммаНДСВзаиморасчетов;
			
			Если КоличествоТоваровВСтроке = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	
	Если Не ПоТоварамКОформлению Тогда
		ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	Иначе
		ДополнительныеСвойства.Вставить("КонтролироватьОстаткиТоваровОрганизаций");
	КонецЕсли;
	
	Если Не Проведен
	 ИЛИ ПерезаполнитьВидыЗапасов
	 ИЛИ РеквизитыДокументаИзменились(МенеджерВременныхТаблиц)
	 ИЛИ ИзмениласьТЧТоварыОтносительноТЧВидыЗапасов(МенеджерВременныхТаблиц) Тогда
	 
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		Если Не ПоТоварамКОформлению Тогда
			ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
			ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(
				Ссылка,
				Организация,
				Дата,
				ДополнительныеСвойства,
				МенеджерВременныхТаблиц);
		Иначе
			ДатаОстатков =
				?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода),
					Перечисления.ВидыКонтроляТоваровОрганизаций.ДатаКонтроля(Дата));
			ЗапасыСервер.ТаблицаОстатковТоваровКПередаче(
				Ссылка,
				Организация,
				Склад,
				ДатаОстатков,
				МенеджерВременныхТаблиц);
			ДополнительныеСвойства.Вставить("ЗаполнятьВидЗапасовПолучателя", ОрганизацияПолучатель);
		КонецЕсли;
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц,
			ДополнительныеСвойства,
			ВидыЗапасов,
			ТаблицаОшибок,
			Отказ);
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, СтавкаНДС, ЦелевоеНалоговоеНазначение", "Количество, СуммаСНДС, СуммаНДС");
		ЗаполнитьДопКолонкиВидовЗапасов();
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок);
	КонецЕсли;
	Если ВидыЗапасов.Найти(Справочники.ВидыЗапасов.ПустаяСсылка(), "ВидЗапасовПолучателя") <> Неопределено Тогда
		ЗаполнитьДопКолонкиВидовЗапасов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее


Процедура ПроверитьБанковскиеСчета(Отказ)
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации)
	   И ЗначениеЗаполнено(БанковскийСчетОрганизацииПолучателя)
	Тогда
		
		ВалютаОтправителя = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОрганизации).Валюта;
		ВалютаПолучателя = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОрганизацииПолучателя).Валюта;
		Если ВалютаОтправителя <> ВалютаПолучателя Тогда
			Текст = НСтр("ru='Валюта счета получателя не соответствует валюте счета отправителя';uk='Валюта рахунку отримувача не відповідає валюті рахунку відправника'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчетОрганизацииПолучателя",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации)
	   И ЗначениеЗаполнено(БанковскийСчетКонтрагента)
	Тогда
		
		ВалютаОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОрганизации).Валюта;
		ВалютаКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).Валюта;
		Если ВалютаОрганизации <> ВалютаКонтрагента Тогда
			Текст = НСтр("ru='Валюта банковского счета контрагента не соответствует валюте счета отправителя';uk='Валюта банківського рахунку контрагента не відповідає валюті рахунку відправника'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчетКонтрагента",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУслуги(Отказ)
	
	ЭтоКомиссия = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыОбъекта.Номенклатура,
	|	ТоварыОбъекта.НомерСтроки,
	|	ТоварыОбъекта.СтатьяРасходов,
	|	ТоварыОбъекта.СписатьНаРасходы,
	|	ТоварыОбъекта.Подразделение
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыОбъекта КАК ТоварыОбъекта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	(СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) И &ЭтоКомиссия)
	|	ИЛИ (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) И &ЭтоКомиссия)
	|	ИЛИ (Товары.СписатьНаРасходы И Товары.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) И &ИспользоватьУчетПрочихДоходовРасходов И Не &ЭтоКомиссия)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|		И Товары.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) И Не &ЭтоКомиссия
	|;
	|");
	
	Запрос.УстановитьПараметр("ТоварыОбъекта", Товары.Выгрузить(,"Номенклатура, НомерСтроки, СтатьяРасходов, СписатьНаРасходы, Подразделение"));
	Запрос.УстановитьПараметр("ЭтоКомиссия", ЭтоКомиссия);
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОшибокСтатей = Результат[1].Выбрать();
	
	Пока ВыборкаОшибокСтатей.Следующий() Цикл
		Если ЭтоКомиссия Тогда
			ТекстОшибки = НСтр("ru='В документе вида ""%Хозоперация%"" нельзя указывать услуги и работы. Необходимо удалить номенклатуру ""%Номенклатура%"" из строки %НомерСтроки% списка ""Товары"".';uk='У документі виду ""%Хозоперация%"" не можна вказувати послуги і роботи. Необхідно видалити номенклатуру ""%Номенклатура%"" з рядка %НомерСтроки% списку ""Товари"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Хозоперация%", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
			ИмяПоля = "Номенклатура";
		Иначе
			ТекстОшибки = НСтр("ru='Необходимо заполнить статью расходов для позиции ""%Номенклатура%"" в строке %НомерСтроки% списка ""Товары""';uk='Необхідно заповнити статтю витрат для позиції ""%Номенклатура%"" в рядку %НомерСтроки% списку ""Товари""'");
			ИмяПоля = "СтатьяРасходов";
		КонецЕсли;	
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", ВыборкаОшибокСтатей.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  ВыборкаОшибокСтатей.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ВыборкаОшибокСтатей.НомерСтроки, ИмяПоля), , Отказ);
	КонецЦикла;
	
	ВыборкаОшибокПодразделений = Результат[2].Выбрать();
	
	Пока ВыборкаОшибокПодразделений.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Необходимо заполнить подразделение-получатель для позиции ""%Номенклатура%"" в строке %НомерСтроки% списка ""Товары""';uk='Необхідно заповнити підрозділ-одержувач для позиції ""%Номенклатура%"" в рядку %НомерСтроки% списку ""Товари""'");
		ИмяПоля = "Подразделение";
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", ВыборкаОшибокСтатей.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  ВыборкаОшибокСтатей.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ВыборкаОшибокПодразделений.НомерСтроки, ИмяПоля), , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСумм(Отказ)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыОбъекта.НомерСтроки,
	|	ТоварыОбъекта.Номенклатура,
	|	ТоварыОбъекта.Цена,
	|	ТоварыОбъекта.Сумма,
	|	ТоварыОбъекта.СуммаСНДС
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыОбъекта КАК ТоварыОбъекта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|
	|	ВЫБОР КОГДА Товары.Цена = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаЦена,
	|
	|	ВЫБОР КОГДА Товары.Сумма = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСумма,
	|
	|	ВЫБОР КОГДА Товары.СуммаСНДС = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСуммаСНДС
	|ИЗ
	|	Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И (Товары.Цена = 0 ИЛИ Товары.Сумма = 0 ИЛИ Товары.СуммаСНДС = 0)
	|");
	
	Запрос.УстановитьПараметр("ТоварыОбъекта", Товары.Выгрузить(,"НомерСтроки, Номенклатура, Цена, Сумма, СуммаСНДС"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонТекстаОшибки = НСтр("ru='Не заполнена ""%ИмяКолонки%"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнено ""%ИмяКолонки%"" в рядку %НомерСтроки% списку ""Товари""'");
		ШаблонТекстаОшибки = СтрЗаменить(ШаблонТекстаОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		Если Выборка.НеЗаполненаЦена Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "Цена", "Цена", Отказ);
		КонецЕсли;
		Если Выборка.НеЗаполненаСумма Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "Сумма", "Сумма", Отказ);
		КонецЕсли;
		Если Выборка.НеЗаполненаСуммаСНДС Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "СуммаСНДС", "Сумма с НДС", Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, НомерСтроки, ИмяПоля, ЗаголовокПоля, Отказ)
	ТекстОшибки = СтрЗаменить(ШаблонТекстаОшибки, "%ИмяКолонки%", ЗаголовокПоля);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки, ЭтотОбъект,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, ИмяПоля), , Отказ);
КонецПроцедуры

Процедура ПроверитьОрганизации(Отказ)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
		
		Если Организация = ОрганизацияПолучатель Тогда
			
			Текст = НСтр("ru='Одна и та же организация не может являться отправителем и получателем одновременно';uk='Одна і та ж організація не може бути відправником і одержувачем одночасно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Организация",
				,
				Отказ);
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
			И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
			
			Текст = НСтр("ru='Организация-получатель не должна быть взаимосвязана с организацией-отправителем по организационной структуре.';uk='Організація-одержувач не повинна бути взаємопов''язана з організацією-відправником за організаційною структурою.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ОрганизацияПолучатель",
				,
				Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	ТаблицаТоваров.СтавкаНДС			КАК СтавкаНДС,
	|	ТаблицаТоваров.НалоговоеНазначение  КАК НалоговоеНазначение,
	|	ТаблицаТоваров.АналитикаУчетаПартий	КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НалоговоеНазначение 	КАК НалоговоеНазначение,
	|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	ТаблицаТоваров.СтавкаНДС			КАК СтавкаНДС,
	|	&Поставщик							КАК Поставщик,
	|	&Контрагент							КАК Контрагент,
	|	ТаблицаТоваров.АналитикаУчетаПартий	КАК АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СтрокиТЧ = "НомерСтроки, Номенклатура, СтавкаНДС, НалоговоеНазначение, АналитикаУчетаПартий";
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(, СтрокиТЧ));
	
	Если РасчетыЧерезОтдельногоКонтрагента Тогда
		Запрос.УстановитьПараметр("Поставщик", Партнер);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Иначе
		Запрос.УстановитьПараметр("Поставщик", Справочники.Партнеры.НашеПредприятие);
		Запрос.УстановитьПараметр("Контрагент", Организация);
	КонецЕсли;
	
	
	Запрос.Выполнить();
	
	ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	Массив = Новый Массив;
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
КонецПроцедуры


Процедура ПроверитьВариантОформленияПродажи(МассивНепроверяемыхРеквизитов)
	
	Если НЕ ЗначениеЗаполнено(ВариантОформленияПродажи) Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") Тогда
			ЗаполняемыйВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ
			|	ВтТовары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|ВЫБРАТЬ
			|	Товары.Номенклатура.Ссылка
			|ИЗ
			|	ВтТовары КАК Товары
			|ГДЕ
			|	Товары.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав)");
			
			Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура"));
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				ЗаполняемыйВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
			КонецЕсли;
			
			Если РезультатЗапроса.Выгрузить().Количество() = Товары.Количество() Тогда
				ЗаполняемыйВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаполняемыйВариантОформленияПродажи) Тогда
			ЭтотОбъект.ДополнительныеСвойства.Вставить("ЗаполняемыйВариантОформленияПродажи", ЗаполняемыйВариантОформленияПродажи);
			МассивНепроверяемыхРеквизитов.Добавить("ВариантОформленияПродажи");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

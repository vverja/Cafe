&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	РежимРаботы 				 = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	РежимРаботы.Вставить("БазоваяВерсия", 				 ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	Элементы.ГруппаОткрытьДополнительныеОтчетыИОбработки.Видимость = РежимРаботы.Локальный Или РежимРаботы.Автономный 
		// При работе в модели сервиса, если включено администратором сервиса.
		Или НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	
	ОбщегоНазначенияУТ.ПереключениеИнтерфейсаПриСозданииНаСервере(ЭтаФорма);
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Элементы.ГруппаФункциональностьУТ.Видимость = Ложь;
	Иначе
		Элементы.ГруппаФункциональностьУТ.Видимость = Истина;
		Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
			ФункциональностьПрограммы = "БазоваяВерсия";
		Иначе
			ФункциональностьПрограммы = "ПолнаяФункциональность";
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Элементы.ГруппаИнтерфейсИФункциональность.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
	 ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
	 		И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
	 			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЕдиницыИзмерения(Команда)
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец",ПредопределенноеЗначение("Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения"));
	ПараметрыФормыСправочника = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка",
		ПараметрыФормыСправочника,
		ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПрефиксовВнутреннихШтрихкодовEAN13(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПрефиксовВнутреннихШтрихкодовEAN13");	
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчета(Команда)
	
	ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура Валюты(Команда)
	
	ОткрытьФорму("Справочник.Валюты.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура Кассы(Команда)
	
	ОткрытьФорму("Справочник.Кассы.ФормаСписка",,ЭтаФорма);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьУзлыОбменаССайтами(Команда)
	ОткрытьФорму("ПланОбмена.ОбменССайтом.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВидовНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыНоменклатуры(Команда)
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидНоменклатурыТовар(Команда)
	
	Ключ = ПолучитьПредустановленныеВидыНоменклатуры(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"),НСтр("ru='Товар';uk='Товар'"));
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Ключ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидНоменклатурыУслуга(Команда)
	
	Ключ = ПолучитьПредустановленныеВидыНоменклатуры(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"),НСтр("ru='Услуга';uk='Послуга'"));
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Ключ));
	
КонецПроцедуры


// СтандартныеПодсистемы.ЭлектроннаяПодпись
&НаКлиенте
Процедура НастройкиЭлектроннойПодписиИШифрования(Команда)
	ОткрытьФорму("ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования");
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись

&НаКлиенте
Процедура ОткрытьШаблоныЭтикетокИЦенников(Команда)
	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьБазовыеЕдиницыИзмеренияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСкидокВПечатныхФормахДокументовПродажи(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСкидокВПечатныхФормахДокументовПродажиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяКолонкаПечатныхФормДокументовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяКолонкаПечатныхФормДокументовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиВидовНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокПрограммыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПрограммыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНаКоторуюЗарегистрированаПрограммаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыИСведенияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ДополнительныеРеквизиты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "НаборыДополнительныхРеквизитов");
	
	ОткрытьФорму(
		"Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСведения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "НаборыДополнительныхСведений");
	
	ОткрытьФорму(
		"Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка",
		ПараметрыФормы);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СправочникДополнительныеОтчетыИОбработки(Команда)
	
	ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеОтчетыИОбработкиПриИзменении(Элемент)
	
	СтароеЗначение = НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	
	Попытка
		
		ЗапросыНаИспользованиеВнешнихРесурсов = ЗапросыНаИспользованиеВнешнихРесурсовДополнительныхОтчетовИОбработок(СтароеЗначение);
		
		Обработчик = Новый ОписаниеОповещения("ИспользоватьДополнительныеОтчетыИОбработкиПриИзмененииЗавершение", ЭтотОбъект, Элемент);
		РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(ЗапросыНаИспользованиеВнешнихРесурсов, ЭтотОбъект, Обработчик);
		
	Исключение
		
		НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки = СтароеЗначение;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапросыНаИспользованиеВнешнихРесурсовДополнительныхОтчетовИОбработок(Включение)
	
	Возврат ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный.ЗапросыРазрешенийДополнительныхОбработок(Включение);
	
КонецФункции

&НаКлиенте
Процедура ИспользоватьДополнительныеОтчетыИОбработкиПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки = Не НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьОстаткиТоваровОрганизацийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьТоварыОрганизацийПриОтменеПриходовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтроляТоваровОрганизацийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтроляТоваровОрганизацийОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры


&НаКлиенте
Процедура Перезапустить(Команда)
	
	УстановитьИнтерфейсНаСервере(ВариантИнтерфейса);
	
	ЗавершитьРаботуСистемы(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьОплатуПлатежнымиКартамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУпаковкиНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьХарактеристикиНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНоменклатуруПоставщиковПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоРасчетныхСчетовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВалютПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоКассПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменССайтамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТТНПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихкодированиеПечатныхФормОбъектовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПрочихДоходовРасходовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДопустимоеОтклонениеПриОкругленииКоличестваПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйВДокументахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксУзлаРаспределеннойИнформационнойБазыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВариантИнтерфейсаПриИзменении(Элемент)

	Если ВариантИнтерфейсаДоИзменения <> ВариантИнтерфейса Тогда
		Элементы.ГруппаПерезапускКнопка.Видимость = Истина;
	Иначе
		Элементы.ГруппаПерезапускКнопка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФункциональностьПрограммыПриИзменении(Элемент)
	
	Если ФункциональностьПрограммы = "БазоваяВерсия" Тогда
		НаборКонстант.БазоваяВерсия = Истина;
	Иначе
		НаборКонстант.БазоваяВерсия = Ложь;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элементы.БазоваяВерсия);
	
	Если ФункциональностьПрограммы <> "БазоваяВерсия" Тогда
		Закрыть();
		ОткрытьФорму(
			"Обработка.ПанельАдминистрированияБСП.Форма.ОбщиеНастройки",
			Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	ДоступностьДопРеквизитов = 
			НЕ НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения 
			ИЛИ НЕ Константы.ИспользоватьОбменССайтом.Получить();
	
	Элементы.ИспользоватьДополнительныеРеквизитыИСведения.Доступность = ДоступностьДопРеквизитов;
	Элементы.ИспользоватьДополнительныеРеквизитыИСведения.ОтображениеПодсказки = ?(ДоступностьДопРеквизитов,ОтображениеПодсказки.Нет,ОтображениеПодсказки.ОтображатьСнизу);
	Элементы.ДополнительныеРеквизиты.Доступность = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	Элементы.ДополнительныеСведения.Доступность = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	
	ИспользоватьДополнительныеРеквизитыИСведения = Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить();
	
	Элементы.ИспользоватьОбменССайтом.Доступность 			  = ИспользоватьДополнительныеРеквизитыИСведения;
	Элементы.ИспользоватьОбменССайтом.ОтображениеПодсказки = ?(ИспользоватьДополнительныеРеквизитыИСведения,ОтображениеПодсказки.Нет,ОтображениеПодсказки.ОтображатьСнизу);
	Элементы.ОткрытьУзлыОбменаССайтами.Доступность 			  = НаборКонстант.ИспользоватьОбменССайтом;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьУпаковкиНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьУпаковкиНоменклатуры;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьУпаковкиНоменклатуры, ЗначениеКонстанты);
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьХарактеристикиНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьХарактеристикиНоменклатуры;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьХарактеристикиНоменклатуры, ЗначениеКонстанты);
    КонецЕсли;
    
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСерииНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьСерииНоменклатуры;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьСерииНоменклатуры, НаборКонстант.ИспользоватьСерииНоменклатуры);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.КонтролироватьОстаткиТоваровОрганизаций" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.КонтролироватьОстаткиТоваровОрганизаций;
		
		Элементы.КонтролироватьТоварыОрганизацийПриОтменеПриходов.Доступность = ЗначениеКонстанты;
		Элементы.ВидКонтроляТоваровОрганизаций.Доступность = ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВидовНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоВидовНоменклатуры;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьНесколькоВидовНоменклатуры, ЗначениеКонстанты);
		Элементы.ОткрытьВидНоменклатурыТовар.Видимость = Не ЗначениеКонстанты;
		Элементы.ОткрытьВидНоменклатурыУслуга.Видимость = Не ЗначениеКонстанты;
		Элементы.ОткрытьВидыНоменклатуры.Видимость = ЗначениеКонстанты;
        
    КонецЕсли;
    
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользованиеКлассификаторовНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
	  	ЗначениеКонстанты = НаборКонстант.ИспользованиеКлассификаторовНоменклатуры;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.КонтролироватьУникальностьНоменклатурыИХарактеристикПоСочетаниюЗначенийРеквизитов" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.КонтролироватьУникальностьНоменклатурыИХарактеристикПоСочетаниюЗначенийРеквизитов;
		Элементы.ГруппаКомментарийКонтролироватьУникальность.Видимость = Ложь;
		Элементы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Доступность = Истина;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВалют" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоВалют;
		
		Элементы.Валюты.Доступность = ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоРасчетныхСчетов" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоРасчетныхСчетов;
		
		Элементы.БанковскиеСчета.Видимость = Не ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоКасс" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоКасс;
		
		Элементы.Кассы.Заголовок = ?(ЗначениеКонстанты,НСтр("ru='Кассы предприятия';uk='Каси підприємства'"),НСтр("ru='Настройка кассы';uk='Настройка каси'"));;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьДополнительныеОтчетыИОбработки.Доступность = НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредустановленныеВидыНоменклатуры(ТипНоменклатуры, Имя)
	
	МассивВидов = Новый Массив();
	
	Справочники.ВидыНоменклатуры.ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, ТипНоменклатуры, Имя);
	
	Если МассивВидов.Количество() > 0 Тогда
		Возврат МассивВидов[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

#КонецОбласти

&НаСервереБезКонтекста
Процедура УстановитьИнтерфейсНаСервере(ВариантИнтерфейса)
	
	ОбщегоНазначенияУТ.УстановитьРежимКомандногоИнтерфейса(ВариантИнтерфейса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеКлассификаторовНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти


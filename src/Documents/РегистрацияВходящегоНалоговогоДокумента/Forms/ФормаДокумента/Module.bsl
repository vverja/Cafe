&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	УстановитьВидимостьОпераций();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ТипыДокументаПоставки.ЗагрузитьЗначения(Метаданные.Документы.РегистрацияВходящегоНалоговогоДокумента.ТабличныеЧасти.Поставка.Реквизиты.ДокументПоставки.Тип.Типы());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	XML = ТекущийОбъект.ДанныеXML.Получить();// двоичные данные
	Если ЗначениеЗаполнено(XML) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		XML.Записать(ИмяВременногоФайла);
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ИмяВременногоФайла, "windows-1251");
		ДанныеXMLНаФорме = Текст.ПолучитьТекст();
	Иначе
		ДанныеXMLНаФорме = "";			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	Если ЗначениеЗаполнено(ДанныеXMLНаФорме) Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(ДанныеXMLНаФорме);
		Текст.Записать(ИмяВременногоФайла, "windows-1251");
		
		ТекущийОбъект.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
		
	Иначе	
		
		ТекущийОбъект.ДанныеXML = Новый ХранилищеЗначения(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДанныеФормы();
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	УстановитьДоступностьЭлементовОбщееСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РегистрацияВходящегоНалоговогоДокумента", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Проведен Тогда
		ОчиститьСообщения();
		Если Объект.Дата >= '2014-03-01' Тогда
			ТекстСообщения = НСтр("ru='Проверьте дату входящего документа!';uk='Перевірте дату вхідного документа!'");
		Иначе
			ТекстСообщения = НСтр("ru='Проверьте дату входящего документа и дату его получения!';uk='Перевірте дату вхідного документа та дату його отримання!'");
		КонецЕсли;
		// Предназначено для вывода ошибок
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаВходящегоДокумента", "Объект");		
		// поеджназначено для прочей информации
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаСобственнойОрганизацииПриИзменении(Элемент)
	
	ПоставкаСобственнойОрганизацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата,
		Истина
	);

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	СоглашениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ЗаполнитьОбособленноеПодразделениеПоУмолчанию();
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
		
	ПозицияСпецСимвола = Найти(Объект.НомерВходящегоДокумента, "\");
	Если ПозицияСпецСимвола = 0 Тогда
		ПозицияСпецСимвола = Найти(Объект.НомерВходящегоДокумента, "/");
	КонецЕсли;
	
	Если ПозицияСпецСимвола > 0 Тогда
		Объект.НомерКорректируемогоВходящегоДокумента = Сред(Объект.НомерВходящегоДокумента, ПозицияСпецСимвола + 1);
	Иначе 
		Объект.НомерКорректируемогоВходящегоДокумента = "";
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ДатаВключенияВЕдиныйРеестрНалоговыхНакладныхПриИзменении(Элемент)
	ЗаполнитьДанныеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВключаетсяВУточняющийРасчетПриИзменении(Элемент)
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуЖалобы(Команда)
	РасчитатьСуммыДляПриложения8();
КонецПроцедуры

&НаКлиенте
Процедура ВключатьВПриложение8ДекларацииПриИзменении(Элемент)
	РасчитатьСуммыДляПриложения8();
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммыДляПриложения8()
	
	СуммаПриложение8Декларации = 0;
	СуммаНДСПриложение8Декларации = 0;
	
	Для каждого СтрокаТЧ Из Объект.Поставка Цикл
	
		Если СтрокаТЧ.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая") Тогда
			
			СуммаНДСПриложение8Декларации 	= СуммаНДСПриложение8Декларации + СтрокаТЧ.СуммаНДС;
			СуммаПриложение8Декларации 		= СуммаПриложение8Декларации 	+ СтрокаТЧ.Сумма;
			
		ИначеЕсли СтрокаТЧ.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально") Тогда
			
			СуммаНДСПриложение8Декларации 	= СуммаНДСПриложение8Декларации + СтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДСПропорционально;
			СуммаПриложение8Декларации 		= СуммаПриложение8Декларации +
												(СтрокаТЧ.СуммаНДС - СтрокаТЧ.СуммаНДСПропорционально) / ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
		
		КонецЕсли;                           
	
	КонецЦикла;
	
	Объект.СуммаПриложение8Декларации    = СуммаПриложение8Декларации;
	Объект.СуммаНДСПриложение8Декларации = СуммаНДСПриложение8Декларации;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиОплатыПриИзменении(Элемент)
	НастроитьЭлементыФормы();	
КонецПроцедуры

&НаКлиенте
Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	Элементы.СпецРежимНалогообложенияДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элементы.ВидДокумента.СписокВыбора.НайтиПоЗначению(Объект.ВидДокумента);
	Элементы.ВидДокументаДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", СокрЛП(Сред(ЭлементСпискаЗначений.Представление, Найти(ЭлементСпискаЗначений.Представление, ")")+1)));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	НастроитьЭлементыФормы();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоставка

&НаКлиенте
Процедура ПоставкаПриИзменении(Элемент)
	ЗаполнитьДанныеФормыИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Поставка.ТекущиеДанные;
		
	ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(
		ТекущаяСтрока.СуммаСНДС,
		ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС),
		Истина
	);		
	ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;
	Если ТекущаяСтрока.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально") Тогда
		ТекущаяСтрока.СуммаНДСПропорционально = ТекущаяСтрока.СуммаНДС * КоэффициентПропорциональногоОтнесенияНДСНаОбязательства;
	Иначе
		ТекущаяСтрока.СуммаНДСПропорционально = 0;
	КонецЕсли;
	
	ТекущаяСтрока.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларации(Объект.ВидОперации, ТекущаяСтрока.СтавкаНДС);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Поставка.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Поставка.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПропорционально", Новый Структура("КоэффициентПропорциональногоОтнесенияНДСНаОбязательства", КоэффициентПропорциональногоОтнесенияНДСНаОбязательства));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаСуммаСНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Поставка.ТекущиеДанные;
	
	ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(
		ТекущаяСтрока.СуммаСНДС,
		ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС),
		Истина
	);		
	ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;
	Если ТекущаяСтрока.НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально") Тогда
		ТекущаяСтрока.СуммаНДСПропорционально = ТекущаяСтрока.СуммаНДС * КоэффициентПропорциональногоОтнесенияНДСНаОбязательства;
	Иначе
		ТекущаяСтрока.СуммаНДСПропорционально = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаНалоговоеНазначениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Поставка.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПропорционально", Новый Структура("КоэффициентПропорциональногоОтнесенияНДСНаОбязательства", КоэффициентПропорциональногоОтнесенияНДСНаОбязательства));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Справочник.ДоговорыКонтрагентов", 			НСтр("ru='Договоры с контрагентами';uk='Договори з контрагентами'"));
	СписокВыбора.Добавить("Документ.ЗаказПоставщику", 					НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'"));
	СписокВыбора.Добавить("Документ.ПоступлениеТоваровУслуг", 			НСтр("ru='Поступление товаров и услуг';uk='Надходження товарів і послуг'"));
	СписокВыбора.Добавить("Документ.ПоступлениеУслугПрочихАктивов", 	НСтр("ru='Поступление услуг и прочих активов';uk='Надходження послуг та інших активів'"));
	СписокВыбора.Добавить("Документ.ОтчетКомиссионера", 				НСтр("ru='Отчет комиссионера о продажах';uk='Звіт комісіонера про продажі'"));
	СписокВыбора.Добавить("Документ.ОтчетКомитенту", 					НСтр("ru='Отчет комитенту о продажах';uk='Звіт комітенту про продажі'"));
	СписокВыбора.Добавить("Документ.ПередачаТоваровМеждуОрганизациями", НСтр("ru='Передача товаров между организациями';uk='Передача товарів між організаціями'"));
	СписокВыбора.Добавить("Документ.ОтчетПоКомиссииМеждуОрганизациями", НСтр("ru='Отчет по комиссии между организациями';uk='Звіт з комісії між організаціями'"));
	СписокВыбора.Добавить("Документ.ЗаказПереработчику", 				НСтр("ru='Заказ переработчику';uk='Замовлення переробнику'"));
	СписокВыбора.Добавить("Документ.ОтчетПереработчика", 				НСтр("ru='Отчет переработчика';uk='Звіт переробника'"));
	СписокВыбора.Добавить("Документ.АвансовыйОтчет", 					НСтр("ru='Авансовый отчет';uk='Авансовий звіт'"));
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОбработкаВыбораТипаДокумента", ЭтотОбъект, Элемент),СписокВыбора,Элементы.ПоставкаОбъектРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТипаДокумента(ВыбранныйЭлемент, ВладелецФормы) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяОбъекта = ВыбранныйЭлемент.Значение;
	
	ПараметрыОтбора = Новый Структура;
	
	Если Не (ИмяОбъекта = "Документ.ПередачаТоваровМеждуОрганизациями"
		Или ИмяОбъекта = "Документ.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			ПараметрыОтбора.Вставить("Партнер", Объект.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПараметрыОтбора.Вставить("Контрагент", Объект.Контрагент);
		КонецЕсли;
	ИначеЕсли ИмяОбъекта = "Документ.ПередачаТоваровМеждуОрганизациями" Тогда
		ПараметрыОтбора.Вставить("ОрганизацияПолучатель", Объект.Организация);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму(ВыбранныйЭлемент.Значение+".ФормаВыбора", ПараметрыФормы, ВладелецФормы,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.Поставка.ТекущиеДанные;
	СтрокаТаблицы.ОбъектРасчетов = ВыбранноеЗначение;
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоставкаДокументПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элемент.ОграничениеТипа) Тогда
		
		СписокВыбора = Новый СписокЗначений;
		Для каждого ДоступныйТип ИЗ Элемент.ОграничениеТипа.Типы() Цикл
			СписокВыбора.Добавить(ДоступныйТип);
		КонецЦикла;
		
	Иначе
		
		СписокВыбора = ТипыДокументаПоставки;
		
	КонецЕсли;
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОбработкаВыбораТипаДокументаПоставки", ЭтотОбъект, Элемент),СписокВыбора,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТипаДокументаПоставки(ВыбранныйЭлемент, ВладелецФормы) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТипОбъекта = ВыбранныйЭлемент.Значение;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ТипОбъекта = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		
		ПараметрыОтбора.Вставить("Организация", Объект.Контрагент);
		ПараметрыОтбора.Вставить("Комиссионер", Объект.Организация);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ПараметрыОтбора.Вставить("Организация", Объект.Контрагент);
		ПараметрыОтбора.Вставить("ОрганизацияПолучатель", Объект.Организация);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
		ПараметрыОтбора.Вставить("ОрганизацияПолучатель", Объект.Контрагент);
		
	Иначе
		
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			ПараметрыОтбора.Вставить("Партнер", Объект.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ПараметрыОтбора.Вставить("Контрагент", Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму(СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипОбъекта) + ".ФормаВыбора", ПараметрыФормы, ВладелецФормы,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаДокументПоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элемент.Родитель.ТекущиеДанные;
	СтрокаТаблицы.ДокументПоставки = ВыбранноеЗначение;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗаДатуВходящегоДокумента(Команда)
	
	Если Объект.Поставка.Количество() > 0 Тогда
		РезультатВопроса = Вопрос(НСтр("ru='Таблица поставки будет очищена, продолжить?';uk='Таблиця постачання буде очищена, продовжити?'"), РежимДиалогаВопрос.ДаНет);
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		Объект.Поставка.Очистить();
		Объект.СуммаВозвратнойТары = 0;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТаблицаЗаполнена = ЗаполнитьПоОстаткамСервер();
	
	ТекстСообщения = ?(ТаблицаЗаполнена, НСтр("ru='Заполнение завершено успешно';uk='Заповнення завершене успішно'"), НСтр("ru='Нет данных для заполнения';uk='Немає даних для заповнення'"));
	ПоказатьОповещениеПользователя(
		НСтр("ru='Заполнение по остаткам';uk='Заповнення по залишкам'"),
		,
		ТекстСообщения,
		БиблиотекаКартинок.Информация32
	);
		
КонецПроцедуры // ЗаполнитьПоОстаткамЗаДатуВходящегоДокумента

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагПоВводуОстатков(Команда)
	Объект.ПоВводуОстатков = Не Объект.ПоВводуОстатков;
	ЗаполнитьДанныеФормы(); // Не оптимально, зато универсально
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	УстановитьДоступностьЭлементовОбщееСервер(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПоставкаСобственнойОрганизацииПриИзмененииСервер()
	
	Если ПоставкаСобственнойОрганизации Тогда
		Объект.Контрагент = Справочники.Организации.ПустаяСсылка();
	Иначе
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		// До записи сохраняется ссылка на партера, попробуем перезаполнить контрагента
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);	
		
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииПриИзмененииСервер()
	
	Объект.ВключаетсяВУточняющийРасчет = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки"));

	ЗаполнитьСписокВидовДокумента();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки") 
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита") 
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек") Тогда
		Объект.ВидДокумента = "-";
	Иначе
		Объект.ВидДокумента = Неопределено;
	КонецЕсли;
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Для каждого Строка Из ТекущийОбъект.Поставка Цикл
		// Заодно пополним кеш
		Строка.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаСервере(ТекущийОбъект.ВидОперации, Строка.СтавкаНДС);
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект, 
		Элементы.Договор.Доступность, 
		Элементы.Договор.Видимость, 
		Объект.Договор
	);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьОбособленноеПодразделениеПоУмолчанию();

	УстановитьКоэффициентПропорциональногоНДС();

	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	НастроитьЭлементыФормы();
		
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьКоэффициентПропорциональногоНДС()
	КоэффициентПропорциональногоОтнесенияНДСНаОбязательства = НДСОбщегоНазначенияПовтИсп.ПолучитьКоэффициентПропорциональногоНДСОбязательтсва(Объект.Организация, НачалоГода(Объект.Дата));
КонецПроцедуры // УстановитьКоэффициентПропорциональногоНДС

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
		
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьИмпортныеЗакупки") Тогда
		
		ЭлементСписка = Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РаботыОтНерезидентаПрошлогоПериода);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидОперации.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Элементы.СпецРежимНалогообложения.СписокВыбора.Количество() = 0 Тогда
		// Список должен быть заполнен до НастроитьЭлементыФормы для корректного отображения СпецРежимНалогообложенияДекорация
	    НДСОбщегоНазначенияСервер.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора);
	КонецЕсли;
	
	ИспользоватьНаправленияДеятельностиавленияДеятельности = Истина;
	
	// Требуется начальное заполнение и перезаполнение при смене вида операции
    ЗаполнитьСписокВидовДокумента();
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	УстановитьДоступностьЭлементовОбщееСервер();
	НДСОбщегоНазначенияСервер.УстановитьУсловноеОформлениеСуммаНДСПропорционально(ЭтаФорма, "ПоставкаСуммаНДСПропорционально", "Объект.Поставка.НалоговоеНазначение", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы()
	
	Если Не ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	ПоставкаСобственнойОрганизации = (ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации"));
	
	
	// очистим дату получения
	Если Не ЗначениеЗаполнено(Объект.ДатаПолучения) Тогда
		Объект.ДатаПолучения = Неопределено;
	КонецЕсли;
	УстановитьКоэффициентПропорциональногоНДС();	
	
	Элементы.УстановитьФлагПоВводуОстатков.Пометка = Объект.ПоВводуОстатков;
		
	ЗаполнитьДанныеФормыИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИтогПоСтавке(Данные, СтавкаНДС)
	
	СуммаВсегоБезНДС = 0;
	МассивСтрок = Данные.Объект.Поставка.НайтиСтроки(Новый Структура("СтавкаНДС", СтавкаНДС));
	Для каждого Строка Из МассивСтрок Цикл
		СуммаВсегоБезНДС = СуммаВсегоБезНДС + Строка.Сумма;
	КонецЦикла;
	
	Возврат СуммаВсегоБезНДС;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеФормыИтоги(Данные)
	
	Данные.СуммаВсегоБезНДС_НДС20  = ПолучитьИтогПоСтавке(Данные, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
    Данные.СуммаВсегоБезНДС_НДС14  = ПолучитьИтогПоСтавке(Данные, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14"));
	Данные.СуммаВсегоБезНДС_НДС7   = ПолучитьИтогПоСтавке(Данные, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7"));
	Данные.СуммаВсегоБезНДС_НДС0   = ПолучитьИтогПоСтавке(Данные, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
	Данные.СуммаВсегоБезНДС_БезНДС = ПолучитьИтогПоСтавке(Данные, ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	Данные.СуммаВсегоБезНДС_НеНДС  = ПолучитьИтогПоСтавке(Данные, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС"));
		
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
		
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект, 
		Элементы.Договор.Доступность,
		Элементы.Договор.Видимость,
		Объект.Договор
	);
	
	МассивИменЭлементов = Новый Массив;
	
	Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат) ИЛИ
				(Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка);
	МассивИменЭлементов.Очистить();
	МассивИменЭлементов.Добавить("НомерКорректируемогоВходящегоДокумента");
	МассивИменЭлементов.Добавить("ДатаКорректируемогоВходящегоДокумента");
	МассивИменЭлементов.Добавить("ОснованиеКорректировки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Видимость);
	
	
	Видимость = (Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки) ИЛИ
				(Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита) ИЛИ
				(Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек);
	МассивИменЭлементов.Очистить();
	МассивИменЭлементов.Добавить("ВидДокумента");
	МассивИменЭлементов.Добавить("ВидДокументаДекорация");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Видимость);
	
	Видимость = (Не ПоставкаСобственнойОрганизации);
	МассивИменЭлементов.Очистить();
	МассивИменЭлементов.Добавить("Партнер");
	МассивИменЭлементов.Добавить("Соглашение");
	МассивИменЭлементов.Добавить("Договор");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Видимость);
	
	ЕстьДвиженияПоРегиструСоставПоставки = 
	    Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек;

    ЗаголовокЭлемента = НСтр("ru='Заполнить по остаткам за ';uk='Заповнити по залишкам за '");
	ДатаВозникновенияНК = ?(ЗначениеЗаполнено(Объект.ДатаОтгрузкиОплаты), Объект.ДатаОтгрузкиОплаты, Объект.ДатаВходящегоДокумента);
	Если ЗначениеЗаполнено(ДатаВозникновенияНК) Тогда
		ДоступностьЭлемента = Истина;
    	ЗаголовокЭлемента = ЗаголовокЭлемента + Формат(ДатаВозникновенияНК, "ДФ=dd.MM.yyyy");
	Иначе	
		ДоступностьЭлемента = Ложь;
    	ЗаголовокЭлемента = ЗаголовокЭлемента + НСтр("ru='<дата выписки входящего документа/возникновения НК не указана>';uk='<дата виписки вхідного документа/виникнення ПК не зазначена>'")		
	КонецЕсли;
	Элементы.ПоставкаЗаполнитьПоОстаткамЗаДатуВходящегоДокумента.Видимость   = ЕстьДвиженияПоРегиструСоставПоставки;
	Элементы.ПоставкаЗаполнитьПоОстаткамЗаДатуВходящегоДокумента.Доступность = ДоступностьЭлемента;
	Элементы.ПоставкаЗаполнитьПоОстаткамЗаДатуВходящегоДокумента.Заголовок   = ЗаголовокЭлемента;
	
	Элементы.УстановитьФлагПоВводуОстатков.Видимость = ЕстьДвиженияПоРегиструСоставПоставки;

	ЭтоВидОперацииДляОтраженияПереоценки = 
		Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка ИЛИ
 		Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек;
	
	Элементы.Переоценка.Видимость = ЭтоВидОперацииДляОтраженияПереоценки;
	
	Элементы.ИтогоДатаОтгрузкиОплаты.Видимость = Объект.ВключаетсяВУточняющийРасчет;
	
	ЭлементСпискаЗначений = Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	Элементы.СпецРежимНалогообложенияДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);	
	
	ЭлементСпискаЗначений = Элементы.ВидДокумента.СписокВыбора.НайтиПоЗначению(Объект.ВидДокумента);
	Элементы.ВидДокументаДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", СокрЛП(Сред(ЭлементСпискаЗначений.Представление, Найти(ЭлементСпискаЗначений.Представление, ")")+1)));
	
	ДоступностьВозвратнойТары = НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат")
							    И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка");
	Элементы.СуммаВозвратнойТары.Доступность = ДоступностьВозвратнойТары;
	
	
	ЕстьXML = Объект.ЕстьXML;
	
	Элементы.XMLРаспечатать.Доступность = ЕстьXML;
	Элементы.XMLПросмотреть.Доступность = ЕстьXML;
	Элементы.XMLСохранить.Доступность   = ЕстьXML;
	Элементы.XMLОчистить.Доступность    = ЕстьXML;
	Элементы.XMLОткрытьВЗвит1С.Доступность    = НЕ ПустаяСтрока(Объект.Звит1С_DOC_ID);
	
	Элементы.ПоставкаДействиеЗаполнитьИзXML.Доступность = ЕстьXML;

	
КонецПроцедуры // НастроитьЭлементыФормы

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	ХозяйственныеОперацииЗакупки = Новый Массив;
	ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	ХозяйственныеОперацииЗакупки.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
	
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
		Объект,
		ХозяйственныеОперацииЗакупки
	);
	
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбособленноеПодразделениеПоУмолчанию()
	
	Объект.ОбособленноеПодразделение = НДСВходящийСервер.ОпределитьОбособленноеПодразделениеПоУмолчанию(
		Объект.Организация, 
		Объект.Договор
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовДокумента()
	
	СписокВыбора = Элементы.ВидДокумента.СписокВыбора;
	
	СписокВыбора.Очистить();

	// Начальная инициализация
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ТоварныйЧек Тогда
	 
		СписокВыбора.Добавить("-",   "(-)  Інший документ");
		СписокВыбора.Добавить("БО",  "(БО) Документ бух. обліку");
		СписокВыбора.Добавить("ЧК",  "(ЧК) Касовий чек");
		СписокВыбора.Добавить("ТК",  "(ТК) Транспортний квиток");
		СписокВыбора.Добавить("ГР",  "(ГР) Готельний рахунок");
		СписокВыбора.Добавить("ПЗ",  "(ПЗ) Рахунок за послуги зв'язку");
		СписокВыбора.Добавить("ПО",  "(ПО) Послуги, вартість яких по даним приладів обліку");
		СписокВыбора.Добавить("ЗП",  "(ЗП) Заява платника");
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ИсправлениеОшибки Тогда
			СписокВыбора.Добавить("МД", "(МД) Митна декларація");
			СписокВыбора.Добавить("НП", "(НП) Придбання у неплатника");
			СписокВыбора.Добавить("РК", "(РК) Розрахунок коригування");
			СписокВыбора.Добавить("ПН", "(ПН) Податкова накладна");
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.ВосстановлениеНалоговогоКредита Тогда
		
		СписокВыбора.Добавить("МД",  "(БОМД) Вантажна митна декларація");
		СписокВыбора.Добавить("ПН",  "(БОПН) Податкова накладна");
		СписокВыбора.Добавить("РК",  "(БОРК) Розрахунок коригування");
		СписокВыбора.Добавить("ЧК",  "(БОЧК) Касовий чек");
		СписокВыбора.Добавить("ТК",  "(БОТК) Транспортний квиток");
		СписокВыбора.Добавить("ГР",  "(БОГР) Готельний рахунок");
		СписокВыбора.Добавить("ПЗ",  "(БОПЗ) Рахунок за послуги зв'язку");
		СписокВыбора.Добавить("ПО",  "(БОПО) Послуги, вартість яких по даним приладів обліку");		
		СписокВыбора.Добавить("-",   "(БО)   Бухгалтерська довідка (інше)");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтатьюНалоговойДекларации(ВидОперации, СтавкаНДС)
	
	Если Не ЗначениеЗаполнено(ВидОперации) ИЛИ Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат ПредопределенноеЗначение("Справочник.СтатьиНалоговыхДеклараций.ПустаяСсылка");
	КонецЕсли;
	
	Отбор = Новый Структура("ВидОперации, СтавкаНДС", ВидОперации, СтавкаНДС);
	Массив = КешЗначенийСтатейНалоговыхДекларацийПоУмолчанию.НайтиСтроки(Отбор);
	Если Массив.Количество() = 0 Тогда
		СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларацииНаСервере(ВидОперации, СтавкаНДС);
	Иначе
		СтатьяДекларацииНДСНалоговыйКредит = Массив[0].СтатьяДекларацииНДСНалоговыйКредит;
	КонецЕсли;
	
	Возврат СтатьяДекларацииНДСНалоговыйКредит;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатьюНалоговойДекларацииНаСервере(ВидОперации, СтавкаНДС)
	
	Если Не ЗначениеЗаполнено(ВидОперации) ИЛИ Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат ПредопределенноеЗначение("Справочник.СтатьиНалоговыхДеклараций.ПустаяСсылка");
	КонецЕсли;
	
	Отбор = Новый Структура("ВидОперации, СтавкаНДС", ВидОперации, СтавкаНДС);
	Массив = КешЗначенийСтатейНалоговыхДекларацийПоУмолчанию.НайтиСтроки(Отбор);
	Если Массив.Количество() = 0 Тогда
		СтатьяДекларацииНДСНалоговыйКредит = Документы.РегистрацияВходящегоНалоговогоДокумента.ПолучитьСтатьюНалоговойДекларации(ВидОперации, СтавкаНДС);
		
		ДанныеФормыЭлементКоллекции = КешЗначенийСтатейНалоговыхДекларацийПоУмолчанию.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеФормыЭлементКоллекции, Отбор);
		ДанныеФормыЭлементКоллекции.СтатьяДекларацииНДСНалоговыйКредит = СтатьяДекларацииНДСНалоговыйКредит;
	Иначе
		СтатьяДекларацииНДСНалоговыйКредит = Массив[0].СтатьяДекларацииНДСНалоговыйКредит;
	КонецЕсли;
	
	Возврат СтатьяДекларацииНДСНалоговыйКредит;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоОстаткамСервер()
	
	Возврат Документы.РегистрацияВходящегоНалоговогоДокумента.ЗаполнитьПоОстаткам(Объект);
		
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовОбщееСервер(ТолькоПросмотрЭлементов = Неопределено)
	
	Если ТолькоПросмотрЭлементов = Неопределено Тогда
		ТолькоПросмотрЭлементов = Объект.Проведен;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив();
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("ПоставкаСобственнойОрганизации");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Контрагент");
	
	МассивЭлементов.Добавить("Переоценка");
	МассивЭлементов.Добавить("ВидОперации");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("ОбособленноеПодразделение");
	МассивЭлементов.Добавить("ВидДокумента");
	
	МассивЭлементов.Добавить("НомерВходящегоДокумента");
	МассивЭлементов.Добавить("ДатаВходящегоДокумента");
	МассивЭлементов.Добавить("ТребуетПроверкиВключенияВЕдиныйРеестрНалоговыхНакладных");
	МассивЭлементов.Добавить("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных");
	
	МассивЭлементов.Добавить("НомерКорректируемогоВходящегоДокумента");
	МассивЭлементов.Добавить("ДатаКорректируемогоВходящегоДокумента");
	МассивЭлементов.Добавить("ОснованиеКорректировки");
	
	МассивЭлементов.Добавить("Ответственный");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("НаправлениеДеятельности");
	МассивЭлементов.Добавить("ЭлектронныйДокумент");
	МассивЭлементов.Добавить("ВключаетсяВУточняющийРасчет");
	МассивЭлементов.Добавить("ДатаОтгрузкиОплаты");
	МассивЭлементов.Добавить("СпецРежимНалогообложения");
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	// Элементы управления шапки, без свойства "Только просмотр"
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("УстановитьФлагПоВводуОстатков");
	МассивЭлементов.Добавить("ПоставкаЗаполнитьПоОстаткамЗаДатуВходящегоДокумента");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не ТолькоПросмотрЭлементов);
		
	МассивЭлементов = Новый Массив();
	
	// Элементы управления, связанные с поставкой
	МассивЭлементов.Добавить("ПоставкаКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ПоставкаКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ПоставкаКонтекстноеМенюУдалить");
	МассивЭлементов.Добавить("ПоставкаКонтекстноеМенюПереместитьВверх");
	МассивЭлементов.Добавить("ПоставкаКонтекстноеМенюПереместитьВниз");
	
	МассивЭлементов.Добавить("ПоставкаДобавить");
	МассивЭлементов.Добавить("ПоставкаИзменить");
	МассивЭлементов.Добавить("ПоставкаСкопировать");
	МассивЭлементов.Добавить("ПоставкаУдалить");
	МассивЭлементов.Добавить("ПоставкаПереместитьВверх");
	МассивЭлементов.Добавить("ПоставкаПереместитьВниз");
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не ТолькоПросмотрЭлементов);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изменить", "Доступность", ТолькоПросмотрЭлементов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область XML

&НаКлиенте
Процедура XMLЗагрузитьИз1СЗвит(Команда)
	
	Перем Номер_1, Номер_2, Номер_3, КодОрганизации, ИННКонтрагента; 
	
	ИННКонтрагента = ИННКонтрагента(Объект.Контрагент);
	
	// будем искать в Звите входящую налоговую по указанным реквизитам
	Если    Не ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента)
		ИЛИ Не ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) 
		ИЛИ Не ЗначениеЗаполнено(Объект.Контрагент) 
		ИЛИ Не ЗначениеЗаполнено(ИННКонтрагента) 
		ИЛИ НЕ (    Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат")
		        ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная")) Тогда
	
		ПоказатьПредупреждение(, НСтр("ru='Для загрузки XML-образа входящего налогового документа из FREDO Звіт необходимо указать контрагента, дату, номер и вид операции (налоговая накладная или расчет корректировки).
|
|Для групповой загрузки XML-образов входящих документов из FREDO Звіт необходимо воспользоваться комадной ""Загрузить документы из FREDO Звіт"" в форме списка.'
|;uk='Для завантаження XML-образу вхідного податкового документа з FREDO Звіт необхідно вказати контрагента, дату, номер і вид операції (податкова накладну чи розрахунок коригування).
|
|Для групового завантаження XML-образів вхідних документів з FREDO Звіт необхідно скористатися командою ""Завантажити документи з FREDO Звіт"" у формі списку.'"));
	    Возврат;
		
	КонецЕсли;
	
	// получим необходимые реквизиты - номер накладной, код организации и контрагента
	ОшибкаРазбораНомера = ПолучитьКомпонентыНомераВходящейНакладной(Номер_1, Номер_2, Номер_3);
	Если ОшибкаРазбораНомера = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	КодОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Дата, СписокПоказателей).КодПоЕДРПОУ;
	
	// Используем актуальный менеджер, учетем возможности поставки менеджера в виде внешней обработки
	// Выведем причины невозможности использования FREDO Звіт, в случае если менеджер не инициализирован
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Неопределено, Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не удалось запустить ""FREDO Звіт""';uk='Не вдалося запустити ""FREDO Звіт""'"));
		Возврат;
	КонецЕсли;
	
	Если    Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка") Тогда
		Звит1С_docType = 2;
	Иначе
		Звит1С_docType = 1;
	КонецЕсли;	
	
	// очистим код документа Звита перед поиском (если не найдем в Звите XML образ никуда не денется)
	Объект.Звит1С_DOC_ID = "";
	Модифицированность = Истина;
	                                                                                 // входящие
	ТаблицаДокЗвит1С = глКомпонентаЗвит1С.GetPrimaryReestr( Звит1С_docType, 2, 			Объект.ДатаВходящегоДокумента, КонецДня(Объект.ДатаВходящегоДокумента) + 1);
	
	Если ТаблицаДокЗвит1С = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ с указанными параметрами не найден в сервис электронного документооборота FREDO Звіт';uk='Документ із зазначеними параметрами не знайдено у сервісі електронного документообігу FREDO Звіт'"));
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокЗвит1С.First("MAIN") Тогда
		
		Если ПроверитьДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, Номер_1, Номер_2, Номер_3) Тогда
			
			Объект.Звит1С_DOC_ID = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_ID" );
			
		Иначе
			
			Пока ТаблицаДокЗвит1С.Next("MAIN") Цикл
				
				Если ПроверитьДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, Номер_1, Номер_2, Номер_3) Тогда
					Объект.Звит1С_DOC_ID = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_ID" );
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли; 

	НастроитьЭлементыФормы();
	
	Если Объект.Звит1С_DOC_ID = "" Тогда
		ПоказатьПредупреждение(, НСтр("ru='Документ с указанными параметрами не найден в FREDO Звіт';uk='Документ із зазначеними параметрами не знайдено у FREDO Звіт'"));
		Возврат;
	КонецЕсли;
	
	ДанныеXMLНаФорме = глКомпонентаЗвит1С.GetDocXml(Объект.Звит1С_DOC_ID);
	
	Объект.ЕстьXML   = Истина;
	Объект.ЭлектронныйДокумент = Истина;
	
	НастроитьЭлементыФормы();
	
	ПоказатьВопрос(Новый ОписаниеОповещения("XMLЗагрузитьИз1СЗвитЗавершение", ЭтотОбъект), НСтр("ru='Файл успешно загружен. Хотите открыть документ в FREDO Звіт?';uk='Файл успішно завантажений. Хочете відкрити документ в FREDO Звіт?'"), РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИз1СЗвитЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	
		XMLОткрытьВЗвит1С(Неопределено);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИзФайла(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Фильтр = НСтр("ru='Документ XML (*.xml)|*.xml';uk='Документ XML (*.xml)|*.xml'");
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Диалог.Показать(Новый ОписаниеОповещения("XMLЗагрузитьИзФайлаЗавершение", ЭтаФорма))
	
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	XML = Новый ТекстовыйДокумент;
	XML.Прочитать(Результат[0], "windows-1251");
	
	ДанныеXMLНаФорме = XML.ПолучитьТекст();
	
	Объект.ЕстьXML = Истина;
	Объект.ЭлектронныйДокумент = Истина;
	Объект.Звит1С_DOC_ID = "";
	
	Модифицированность = Истина; 
	
	НастроитьЭлементыФормы();
	
	ПоказатьВопрос(Новый ОписаниеОповещения("XMLЗагрузитьИзФайлаЗавершениеРаспечатать", ЭтаФорма), НСтр("ru='Файл успешно загружен. Хотите просмотреть документ XML в печатном виде?';uk='Файл успішно завантажений. Хочете переглянути документ XML в друкованому вигляді?'"), РежимДиалогаВопрос.ДаНетОтмена)
	
КонецПроцедуры

&НаКлиенте
Процедура XMLЗагрузитьИзФайлаЗавершениеРаспечатать(Результат, ДопПараметры) Экспорт	
	
	Если  Результат = КодВозвратаДиалога.Да Тогда
		XMLРаспечатать(Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура XMLОткрытьВЗвит1С(Команда)
	
	Если ПустаяСтрока(Объект.Звит1С_DOC_ID) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = глКомпонентаЗвит1С.ShowReport(Объект.Звит1С_DOC_ID);
	
	Если Результат = 0 Тогда
		глКомпонентаЗвит1С.Bring1CToFront();		
		Возврат;
	КонецЕсли;

	глКомпонентаЗвит1С.BringZvitToFront();
	
КонецПроцедуры

&НаКлиенте
Процедура XMLОчистить(Команда)
	
	ДанныеXMLНаФорме = "";
	Объект.ЕстьXML   = Ложь;
	Объект.ЭлектронныйДокумент = Ложь;
	Объект.Звит1С_DOC_ID = "";
	
	Модифицированность = Истина; 
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура XMLПросмотреть(Команда)
	
	Если НЕ Объект.ЕстьXML Тогда
	    ПоказатьПредупреждение(,НСтр("ru='XML не был загружен!';uk='XML не був завантажений!'"));
		Возврат;	
	КонецЕсли;
	
	// Проверим файл на корректность
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Истина;
	Попытка
		ЧтениеXML.УстановитьСтроку(ДанныеXMLНаФорме);
	Исключение
		ПоказатьПредупреждение(,НСтр("ru='Данный файл содерижит информацию в закодированном виде и не является стандартым текстовым XML-файлом.
|Необходимо воспользоваться специализированным программным обеспечением для его расшифровки.'
|;uk='Зазначений файл містить інформацію в закодованому вигляді та не являє собою стандартний текстовий XML-файл.
|Необхідно скористатися спеціалізованим програмним забезбеченням для його розшифрування.'"));
							 
		Возврат;
	КонецПопытки;
	
	// перепрочтем файл, так как XML может быть записан без красивых отступов
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Истина;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Пока ЧтениеXML.Прочитать() Цикл
		ЗаписьXML.ЗаписатьТекущий(ЧтениеXML);
	КонецЦикла;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ЗаписьXML.Закрыть());
	
	Текст.Показать(НСтр("ru='Входящий документ в формате XML';uk='Вхідний документ у форматі XML'"));
	
КонецПроцедуры

&НаКлиенте
Процедура XMLРаспечатать(Команда)
	
    Если НЕ Объект.ЕстьXML Тогда
	    ПоказатьПредупреждение(,НСтр("ru='XML не был загружен!';uk='XML не був завантажений!'"));
		Возврат;	
	КонецЕсли;
	
	// определим номер схемы документа
	C_DOC     = "";
	C_DOC_SUB = "";
	C_DOC_VER = "";
	
	ПолучитьВерсиюДокумента(ДанныеXMLНаФорме, C_DOC, C_DOC_SUB, C_DOC_VER);
	
	Если C_DOC = "" Тогда
	
		ПоказатьПредупреждение(,НСтр("ru='Сохраненный документ не соответствует формату XML!';uk='Збережений документ не відповідає формату XML!'"));
		Возврат;
	
	КонецЕсли;
	
	ВерсияДокумента = "" + C_DOC + C_DOC_SUB + C_DOC_VER;
	
	// найдем подходящую форму налоговой (регл. отчет)
	Если  (C_DOC     = "J12" ИЛИ C_DOC     = "F12")
		И (C_DOC_SUB = "010" ИЛИ C_DOC_SUB = "012") Тогда
		
		Если C_DOC_SUB = "010" Тогда
			ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная";
		ИначеЕсли C_DOC_SUB = "012" Тогда	
			ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной";
		КонецЕсли;
		
	Иначе
		
		// не тот XML подсунули
		ПоказатьПредупреждение(,НСтр("ru='Загруженный файл не является XML образом Налоговой накладной или Приложения 2 к налоговой накладной!';uk='Завантажений файл не є XML образом Податкової накладної або Додатка 2 до податкової накладної!'"));
		Возврат;	
		
	КонецЕсли;
	
	ТекстОшибки = "";
	ИмяФормыПросмотра = ПолучитьИмяФормыДляПросмотраДокумента(ИмяОтчета, ВерсияДокумента, ТекстОшибки);
	
	Если ИмяФормыПросмотра = Неопределено Тогда
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// откроем отчет и загрузим в него данные XML
	Попытка
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",'00010101');
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", '00010101');
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		
		ФормаПросмотра = ПолучитьФорму(ИмяФормыПросмотра, ПараметрыФормы);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра требуемую форму отчета ';uk='Не вдалося відкрити для перегляду необхідну форму звіту '")+ИмяОтчета+"""";
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;	
	КонецПопытки;
	
	Попытка
		ТабличныйДокумент = ФормаПросмотра.ЗагрузитьТекстXMLНаФорму(ДанныеXMLНаФорме);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра требуемую форму отчета. Возможно не обновлены встроенные регламентированные отчеты';uk='Не вдалося відкрити для перегляду необхідну форму звіту. Можливе не оновлені вбудовані регламентовані звіти'")+ ": " + ИмяОтчета;
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;	
	КонецПопытки;                            
	
	// откроем печатную форму на просмотр
	ТабличныйДокумент.Показать(НСтр("ru='ОЗНАКОМИТЕЛЬНАЯ печатная форма входящего документа';uk='ОЗНАЙОМЛЮЮЧА друкована форма вхідного документа'"));	
	
	ПоказатьПредупреждение(,НСтр("ru='Обращаем внимание, что печатная форма предназначается исключительно для ознакомления. Ее нельзя использовать в качестве бумажной налоговой накладной! 
|Печатная форма имеет отличия от официально утвержденной: например, отсутствуют квадратики в полях ИНН, формат представления дат предназначен для удобного просмотра, и т.д.'
|;uk='Звертаємо увагу, що друкована форма призначається виключно для ознайомлення. Її не можна використовувати як паперову податкову накладну!
|Друкована форма має відмінності від офіційно затвердженої: наприклад, відсутні квадратики в полях ІПН, формат представлення дат призначений для зручного перегляду, і т.д.'"), 20, НСтр("ru='Важно: о печатной форме';uk='Важливо: про друкованій формі'"));
	

КонецПроцедуры

&НаКлиенте
Процедура XMLСохранить(Команда)
	
	Если НЕ Объект.ЕстьXML Тогда
	    ПоказатьПредупреждение(,НСтр("ru='XML не был загружен!';uk='XML не був завантажений!'"));
		Возврат;	
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = НСтр("ru='Документ XML (*.xml)|*.xml';uk='Документ XML (*.xml)|*.xml'");
	Диалог.Показать(Новый ОписаниеОповещения("XMLСохранитьЗаверешение", ЭтаФорма));
		
КонецПроцедуры

&НаКлиенте	
Процедура XMLСохранитьЗаверешение(Результат, ДопПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	XML = Новый ТекстовыйДокумент;
	XML.УстановитьТекст(ДанныеXMLНаФорме);
	Попытка
		XML.Записать(Результат[0], "windows-1251");
	Исключение
		ПоказатьПредупреждение(,НСтр("ru='Не удалось записать файл:';uk='Не вдалося записати файл:'") + Символы.ПС + ОписаниеОшибки());		
	КонецПопытки
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФормыДляПросмотраДокумента(ИмяОтчета, ВерсияДокумента, ТекстОшибки)
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета,Ложь);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра отчет ';uk='Не вдалося відкрити для перегляду звіт '")+ИмяОтчета+"""";
		Возврат Неопределено;	
	КонецЕсли;
	
	Попытка
		МакетПоказателейЗвит1С = ТекОтчет.ПолучитьМакет("ПоказателиЗвит1С");
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось определить для просмотра требуемую форму отчета ';uk='Не вдалося визначити для перегляду необхідну форму звіту  '")+ИмяОтчета+"""";
		Возврат Неопределено;	
	КонецПопытки;
	МакетПоказателейЗвит1С.КодЯзыкаМакета = "ru";
	
	ИмяФормыПросмотра = "";
	ОбластьСтруктура = МакетПоказателейЗвит1С.ПолучитьОбласть("Структура");
	Для сч = 1 По ОбластьСтруктура.ВысотаТаблицы Цикл
		
		ИмяСхемыЗвит1С = СокрЛП(ОбластьСтруктура.Область(сч, 1, сч, 1).Текст);
		
		Если ВерсияДокумента = ИмяСхемыЗвит1С Тогда
			ИмяФормыПросмотра = СокрЛП(ОбластьСтруктура.Область(сч, 3, сч, 3).Текст);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяФормыПросмотра = "Отчет." + ИмяОтчета  + ".Форма." + ИмяФормыПросмотра;
	
	Возврат ИмяФормыПросмотра;
	
КонецФункции

&НаСервере	
Процедура ПолучитьВерсиюДокумента(XML, C_DOC, C_DOC_SUB, C_DOC_VER)
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(XML);
	Исключение
		Возврат;
	КонецПопытки;	
		
	ЧтениеXML.ИгнорироватьПробелы = Истина;
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТекУзел = ВРЕГ(ЧтениеXML.Имя);
			
			Если ТекУзел = "C_DOC" Тогда
				ЧтениеXML.Прочитать();
				C_DOC = ЧтениеXML.Значение;
				Продолжить;
			ИначеЕсли ТекУзел = "C_DOC_SUB" Тогда
				ЧтениеXML.Прочитать();
				C_DOC_SUB = ЧтениеXML.Значение;
				C_DOC_SUB = Формат(Число(C_DOC_SUB), "ЧЦ=3; ЧВН=");
				Продолжить;
			ИначеЕсли ТекУзел = "C_DOC_VER" Тогда                               
				ЧтениеXML.Прочитать();
				C_DOC_VER = ЧтениеXML.Значение;
				C_DOC_VER = Формат(Число(C_DOC_VER), "ЧЦ=2; ЧВН=");
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ИННКонтрагента(Контрагент)

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИННПлательщикаНДС"));	
	КонецЕсли;

КонецФункции // ()

&НаКлиенте
Функция ПолучитьКомпонентыНомераВходящейНакладной(НомерДокумента, СпецРежим, Филиал)
		
	ТекстОшибкиФормата = НСтр("ru='Номер входящего документа не соответсвует формату: Н, Н/С, Н/СФ или  Н/С/Ф, где Н - порядковый номер документа, С - спец.режим или пробел (один символ), Ф - номер филиала (от одного до четырех символов)';uk='Номер вхідного документа не відповідає формату: Н, Н/С або Н/СФ или  Н/С/Ф, де Н - порядковий номер документа, С - спец.режим або пробіл (один символ), Ф - номер філії (від одного до чотирьох символів)'");
							  
	ПозицияСпецСимвола = Найти(Объект.НомерВходящегоДокумента, "\");
	Если ПозицияСпецСимвола = 0 Тогда
		ПозицияСпецСимвола = Найти(Объект.НомерВходящегоДокумента, "/");
	КонецЕсли;
	
	Если ПозицияСпецСимвола > 0 Тогда
		НомерДокумента = СокрЛП(Лев(Объект.НомерВходящегоДокумента, ПозицияСпецСимвола-1));
		СпецРежимФилиал = СокрП(Сред(Объект.НомерВходящегоДокумента, ПозицияСпецСимвола + 1)); // Слева может быть пробел спец.режима
	Иначе
		НомерДокумента = СокрЛП(Объект.НомерВходящегоДокумента);
		СпецРежимФилиал = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		Попытка
			НомерДокумента = Число(НомерДокумента);
		Исключение
			Сообщить(ТекстОшибкиФормата);
			Возврат Истина;
		КонецПопытки;
		Если НомерДокумента = 0 Тогда
			Сообщить(ТекстОшибкиФормата);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпецРежимФилиал) Тогда					
		// формат номеров налоговых с 03.2014, с двумя слэшами
		Если Найти(СпецРежимФилиал, "/") > 0 Тогда
			
			СпецРежим = СокрЛП(Сред(СпецРежимФилиал, 1, Найти(СпецРежимФилиал, "/")-1));
			Филиал    = СокрЛП(Сред(СпецРежимФилиал,    Найти(СпецРежимФилиал, "/")+1));
			
		Иначе
			// Номер должен быть в формате ПорядковыйНомер[/СпецРежим[НомерФилиала]] где
			//  СпецРежим - число или пробел
			//  НомерФилиала - строка приводимая к числу c длиной не более 4-х символов
			Если СтрДлина(СпецРежимФилиал) > 5 Тогда
				Сообщить(ТекстОшибкиФормата);
				Возврат Истина;
			КонецЕсли;
			
			СпецРежим = СокрЛП(Лев(СпецРежимФилиал, 1)); // Если без спец.режима, то указан пробел, убираем				
			Если СпецРежим = "0" Тогда
				Сообщить(ТекстОшибкиФормата);
				Возврат Истина;
			КонецЕсли;
		
			Филиал = СокрЛП(Сред(СпецРежимФилиал, 2));
		
		КонецЕсли;
		
		Если Не ПустаяСтрока(СпецРежим) Тогда
			Попытка
				СпецРежим = Число(СпецРежим);
			Исключение
				Сообщить(ТекстОшибкиФормата);
				Возврат Истина;
			КонецПопытки;
		Иначе
			СпецРежим = 0;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Филиал) Тогда
			Попытка
				Филиал = Число(Филиал);
			Исключение
				Сообщить(ТекстОшибкиФормата);
				Возврат Истина;
			КонецПопытки;
		Иначе
			Филиал = 0;
		КонецЕсли;
	Иначе
		
		СпецРежим = 0;
		Филиал 	  = 0;	
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, Номер_1, Номер_2, Номер_3)
	
	НомерДокЗвит1С_1 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_NUM" );
	Если Не ЗначениеЗаполнено(НомерДокЗвит1С_1) Тогда
		НомерДокЗвит1С_1 = 0;
	Иначе	
		НомерДокЗвит1С_1 = Число(НомерДокЗвит1С_1);
	КонецЕсли;
	
	НомерДокЗвит1С_2 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_VD" );
	Если Не ЗначениеЗаполнено(НомерДокЗвит1С_2) Тогда
		НомерДокЗвит1С_2 = 0;
	Иначе
		НомерДокЗвит1С_2 = Число(НомерДокЗвит1С_2);
	КонецЕсли;
	
	НомерДокЗвит1С_3 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_DEPT" );
	Если Не ЗначениеЗаполнено(НомерДокЗвит1С_3) Тогда
		НомерДокЗвит1С_3 = 0;
	Иначе
		НомерДокЗвит1С_3 = Число(НомерДокЗвит1С_3);		
	КонецЕсли;
	
	ДатаДокЗвит1С  			= ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_DATE" );
	КодОрганизацииЗвит1С  	= ТаблицаДокЗвит1С.GetValue( "MAIN", "FIRM_EDRPOU" );

	Если 	СокрЛП(КодОрганизации) <> СокрЛП(КодОрганизацииЗвит1С) 
	 	ИЛИ Объект.ДатаВходящегоДокумента <> ДатаДокЗвит1С
	 	ИЛИ Номер_1 <> НомерДокЗвит1С_1
	 	ИЛИ Номер_2 <> НомерДокЗвит1С_2
	 	ИЛИ Номер_3 <> НомерДокЗвит1С_3 Тогда
	 
		Возврат Ложь
		
	КонецЕсли;
	
	ИННКонтрагентаЗвит1С  	= ТаблицаДокЗвит1С.GetValue( "MAIN", "FIRM_IPN" );
	Если 	СокрЛП(ИННКонтрагентаЗвит1С) <> СокрЛП(ИННКонтрагента)  Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ДействиеЗаполнитьИзXML(Команда)
	
    Если НЕ Объект.ЕстьXML Тогда
	    ПоказатьПредупреждение(,НСтр("ru='XML не был загружен!';uk='XML не був завантажений!'"));
		Возврат;	
	КонецЕсли;
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	
	Если Объект.Поставка.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru='Очистить табличную часть перед заполнением?';uk='Очистити табличну частину перед заповненням?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДействиеЗаполнитьИзXMLПродолжение", ЭтаФорма),ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	Иначе	
		
		ДействиеЗаполнитьИзXMLПродолжение(КодВозвратаДиалога.Нет, Неопределено); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура  ДействиеЗаполнитьИзXMLПродолжение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Поставка.Очистить();
		СуммаВозвратнойТары = 0;
		
	КонецЕсли;
	
	// Проверим файл на корректность
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Истина;
	Попытка
		ЧтениеXML.УстановитьСтроку(ДанныеXMLНаФорме);
	Исключение
		
		ПоказатьПредупреждение(,НСтр("ru='Данный файл содерижит информацию в закодированном виде и не является стандартым текстовым XML-файлом.
|Необходимо воспользоваться специализированным программным обеспечением для его расшифровки.'
|;uk='Зазначений файл містить інформацію в закодованому вигляді та не являє собою стандартний текстовий XML-файл.
|Необхідно скористатися спеціалізованим програмним забезбеченням для його розшифрування.'"));
							 
		Возврат;
	КонецПопытки;
	
	РеквизитыXML = ПолучитьРеквизитыШапкиXMLДокумента();
	
	// определим номер схемы документа
	C_DOC     = ""; РеквизитыXML.Свойство("C_DOC",	   C_DOC);
	C_DOC_SUB = ""; РеквизитыXML.Свойство("C_DOC_SUB", C_DOC_SUB);
	C_DOC_VER = ""; РеквизитыXML.Свойство("C_DOC_VER", C_DOC_VER);

	// найдем подходящую форму налоговой (регл. отчет)
	Если  НЕ (C_DOC     = "J12" ИЛИ C_DOC     = "F12")
		И НЕ (C_DOC_SUB = "010" ИЛИ C_DOC_SUB = "012") Тогда
		
		// не тот XML подсунули
		ПоказатьПредупреждение(,НСтр("ru='Загруженный файл не является XML образом Налоговой накладной или Приложения 2 к налоговой накладной!';uk='Завантажений файл не є XML образом Податкової накладної або Додатка 2 до податкової накладної!'"));
		Возврат;	
		
	КонецЕсли;
	
	// заполним структуру показателй последней текущей версии
	// переопределим для старых версий
	
	Если C_DOC_SUB = "010" Тогда
		НовВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.НалоговаяНакладная");	
	Иначе
		НовВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат");	
	КонецЕсли;
	
	Если Объект.ВидОперации <> НовВидОперации Тогда
		
		Сообщить(НСтр("ru='При заполнении изменен вид операции документа!';uk='При заповненні змінено вид операції документа!'"), СтатусСообщения.Важное);
		
		Объект.ВидОперации = НовВидОперации;
		
		Объект.ВидДокумента = "-";
		Объект.ВключаетсяВУточняющийРасчет = Ложь;	
		НастроитьЭлементыФормы();
		
	КонецЕсли;
	
	// Организация
	ОрганизацияИНН = ""; РеквизитыXML.Свойство("HKBUY", ОрганизацияИНН);
	
	СписокПоказателей = Новый СписокЗначений; 
	СписокПоказателей.Добавить("","ИНН");
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Дата, СписокПоказателей);
	
	Если НЕ Сведения.Свойство("ИНН") ИЛИ НЕ (ОрганизацияИНН = Сведения.ИНН) Тогда
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Сообщить(НСтр("ru='ИНН Организации в документе не совпадает с ИНН Покупателя из файла!';uk='ІПН Організації в документі, не збігається з ІПН Покупця з файлу!'"), СтатусСообщения.Важное);	                                   
		КонецЕсли;
		
		ЗаполнитьОрганизациюПоИНННаСервере(ОрганизацияИНН);
		
	КонецЕсли;
	
	// контрагент
	КонтрагентИНН = ""; 		РеквизитыXML.Свойство("HKSEL", КонтрагентИНН);
	
	Если НЕ ИННКонтрагента(Объект.Контрагент) = КонтрагентИНН Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Сообщить(НСтр("ru='Данные контрагента (ИНН) не соответствуют данным из файла';uk='Дані контрагента (ІПН) не відповідають даним з файлу'"), СтатусСообщения.Важное);	
		КонецЕсли;
		
		ЗаполнитьКонтрагентаПоИНННаСервере(КонтрагентИНН);		
		
	КонецЕсли;

	// договор контрагента
	ДоговорКонтрагентаДата  = "";
	ДоговорКонтрагентаНомер = "";
	Если C_DOC_SUB = "010" Тогда
		РеквизитыXML.Свойство("H01G2D", ДоговорКонтрагентаДата);
		РеквизитыXML.Свойство("H01G3S", ДоговорКонтрагентаНомер);
	Иначе
		РеквизитыXML.Свойство("H01G1D", ДоговорКонтрагентаДата);
		РеквизитыXML.Свойство("H01G2S", ДоговорКонтрагентаНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагентаДата) Тогда
		ДоговорКонтрагентаДата = СокрЛП(ДоговорКонтрагентаДата);
		ДоговорКонтрагентаДата = Дата(Сред(ДоговорКонтрагентаДата, 5, 4), Сред(ДоговорКонтрагентаДата, 3, 2), Сред(ДоговорКонтрагентаДата, 1, 2));
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагентаДата)
		И ЗначениеЗаполнено(ДоговорКонтрагентаНомер) Тогда
		
		ЗаполнитьДоговорНаСервере(ДоговорКонтрагентаДата, ДоговорКонтрагентаНомер);
		
	КонецЕсли;
	
	HFILL = ""; РеквизитыXML.Свойство("HFILL", HFILL);
	ДатаВходящегоДокумента = '00010101';
	Если ЗначениеЗаполнено(HFILL) Тогда
		HFILL = СокрЛП(HFILL);
		ДатаВходящегоДокумента = Дата(Сред(HFILL, 5, 4), Сред(HFILL, 3, 2), Сред(HFILL, 1, 2));
	КонецЕсли;
	Объект.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
	
	//номер вх. документа
	HNUM  = ""; РеквизитыXML.Свойство("HNUM",  HNUM);  HNUM  = СокрЛП(HNUM);
	HNUM1 = ""; РеквизитыXML.Свойство("HNUM1", HNUM1); HNUM1 = СокрЛП(HNUM1); HNUM1 = ?(HNUM1 = "0", "", HNUM1);
	HNUM2 = ""; РеквизитыXML.Свойство("HNUM2", HNUM2); HNUM2 = СокрЛП(HNUM2);
	НомерВходящегоДокумента = HNUM; 
	Если ЗначениеЗаполнено(HNUM1) Тогда
		НомерВходящегоДокумента = НомерВходящегоДокумента + "/" + HNUM1;
	КонецЕсли;                     
	Если ЗначениеЗаполнено(HNUM2)  И ДатаВходящегоДокумента < '2016-04-01' Тогда
		Если ЗначениеЗаполнено(HNUM1) Тогда
			Если C_DOC_VER > "04" Тогда
				// всего два слеша
				НомерВходящегоДокумента = НомерВходящегоДокумента + "/" + HNUM2;	
			Иначе	
			    // всего один слеш
				НомерВходящегоДокумента = НомерВходящегоДокумента + HNUM2;	
			КонецЕсли;
		Иначе
			Если C_DOC_VER > "04" Тогда
				// два слеша
				НомерВходящегоДокумента = НомерВходящегоДокумента + "//" + HNUM2;	
			Иначе	
			    // один слеш
				НомерВходящегоДокумента = НомерВходящегоДокумента + "/ " + HNUM2;	
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	Объект.НомерВходящегоДокумента = НомерВходящегоДокумента;
	
	// для П2 дата и номер корректируемой налоговой накладной
	Если C_DOC_SUB = "012" Тогда
		HNUM  = ""; РеквизитыXML.Свойство("HPODNUM",  HNUM);  HNUM  = СокрЛП(HNUM);
		HNUM1 = ""; РеквизитыXML.Свойство("HPODNUM1", HNUM1); HNUM1 = СокрЛП(HNUM1); HNUM1 = ?(HNUM1 = "0", "", HNUM1);
		HNUM2 = ""; РеквизитыXML.Свойство("HPODNUM2", HNUM2); HNUM2 = СокрЛП(HNUM2);
		НомерКорректируемогоВходящегоДокумента = HNUM; 
		Если ЗначениеЗаполнено(HNUM1) Тогда
			НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/" + HNUM1;
		КонецЕсли;
		Если ЗначениеЗаполнено(HNUM2) Тогда
			Если ЗначениеЗаполнено(HNUM1) Тогда
				Если C_DOC_VER > "04" Тогда
					// всего два слеша
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/" + HNUM2;	
				Иначе	
				    // всего один слеш
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + HNUM2;	
				КонецЕсли;
			Иначе
				Если C_DOC_VER > "04" Тогда
					// два слеша
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "//" + HNUM2;	
				Иначе	
				    // один слеш
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/ " + HNUM2;	
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;

		HFILL = ""; РеквизитыXML.Свойство("HPODFILL", HFILL);
		ДатаКорректируемогоВходящегоДокумента = '00010101';
		Если ЗначениеЗаполнено(HFILL) Тогда
			HFILL = СокрЛП(HFILL);
			ДатаКорректируемогоВходящегоДокумента = Дата(Сред(HFILL, 5, 4), Сред(HFILL, 3, 2), Сред(HFILL, 1, 2));
		КонецЕсли;
		Объект.НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента;
		Объект.ДатаКорректируемогоВходящегоДокумента  = ДатаКорректируемогоВходящегоДокумента;	
		
	КонецЕсли;
	
	// суммы документа по ставкам
	БазаНДС20  = 0; СуммаНДС20 = 0;
    БазаНДС14   = 0; СуммаНДС14  = 0;
	БазаНДС7   = 0; СуммаНДС7  = 0;
	БазаНДС0   = 0;
	БазаБезНДС = 0;
	Тара = 0;
	
	// 20%
	Если C_DOC_SUB = "010" Тогда
		РеквизитыXML.Свойство("R01G7", БазаНДС20);
		РеквизитыXML.Свойство("R03G7", СуммаНДС20);
	Иначе
		РеквизитыXML.Свойство("R01G9", БазаНДС20);
		РеквизитыXML.Свойство("R02G9", СуммаНДС20);
    КонецЕсли;
    
    // 14%
    Если C_DOC_SUB = "010" Тогда
    	РеквизитыXML.Свойство("R01G14", БазаНДС14);
    	РеквизитыXML.Свойство("R03G14", СуммаНДС14);
    Иначе
    	РеквизитыXML.Свойство("R01G14", БазаНДС14);
    	РеквизитыXML.Свойство("R03G14", СуммаНДС14);
    КонецЕсли;
	
	// 7% и 0%
	Если HNUM1 = "7" Тогда
		
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("R01G8",  БазаНДС7);
			РеквизитыXML.Свойство("R03G8",  СуммаНДС7);
			
			// В сумме НДС по ставке 7 могут находиться ошибочно разделители триад
			СуммаНДС7 = СтрЗаменить(СуммаНДС7, " ", "");
			
		Иначе
			РеквизитыXML.Свойство("R01G10", БазаНДС7);
			РеквизитыXML.Свойство("R02G9",  СуммаНДС7);
		КонецЕсли;
		
	Иначе
		
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("R01G109",  БазаНДС7);
			РеквизитыXML.Свойство("R03G109",  СуммаНДС7);
			
			Если РеквизитыXML.Свойство("R01G8") Тогда
				БазаНДС0 = БазаНДС0 + РеквизитыXML.R01G8;
			КонецЕсли;
			Если РеквизитыXML.Свойство("R01G9") Тогда
				БазаНДС0 = БазаНДС0 + РеквизитыXML.R01G9;
		КонецЕсли;
		Иначе
			РеквизитыXML.Свойство("R01G111",  БазаНДС7);
			РеквизитыXML.Свойство("R02G111",  СуммаНДС7);
			
			//РеквизитыXML.Свойство("R01G10",  БазаНДС0);
			Если НЕ РеквизитыXML.Свойство("R01G10",  БазаНДС0) Тогда
				БазаНДС0 = 0;
				Если РеквизитыXML.Свойство("R006G03") Тогда
					БазаНДС0 = РеквизитыXML.R006G03;
				КонецЕсли;
				Если РеквизитыXML.Свойство("R007G03") Тогда
					БазаНДС0 = БазаНДС0 + РеквизитыXML.R007G03;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	// БезНДС
	Если C_DOC_SUB = "010" Тогда
		РеквизитыXML.Свойство("R01G10",  БазаБезНДС);
	Иначе
		РеквизитыXML.Свойство("R01G11", БазаБезНДС);
	КонецЕсли;
	        
	// Тара
	Если C_DOC_SUB = "010" Тогда
		РеквизитыXML.Свойство("R02G11",  Тара);
	КонецЕсли;
	
	// добавляем строки в ТЧ
	Если ЗначениеЗаполнено(БазаНДС20) И Число(БазаНДС20) <> 0 Тогда
		
		СтрокаДок = Объект.Поставка.Добавить();
		
		СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
		СтрокаДок.Сумма     = БазаНДС20;
		СтрокаДок.СуммаНДС  = СуммаНДС20;
		СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
		СтрокаДок.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаДок.СтавкаНДС);
	
	КонецЕсли;
    
    Если ЗначениеЗаполнено(БазаНДС14) И Число(БазаНДС14) <> 0 Тогда
    	
    	СтрокаДок = Объект.Поставка.Добавить();
    	
    	СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14");
    	СтрокаДок.Сумма     = БазаНДС14;
    	СтрокаДок.СуммаНДС  = СуммаНДС14;
    	СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
        СтрокаДок.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаДок.СтавкаНДС);
    	
    КонецЕсли;
    
	Если ЗначениеЗаполнено(БазаНДС7) И Число(БазаНДС7) <> 0 Тогда
		
		СтрокаДок = Объект.Поставка.Добавить();
		
		СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7");
		СтрокаДок.Сумма     = БазаНДС7;
		СтрокаДок.СуммаНДС  = СуммаНДС7;
		СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
	    СтрокаДок.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаДок.СтавкаНДС);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БазаНДС0) И Число(БазаНДС0) <> 0 Тогда
		
		СтрокаДок = Объект.Поставка.Добавить();
		
		СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
		СтрокаДок.Сумма     = БазаНДС0;
		СтрокаДок.СуммаСНДС = СтрокаДок.Сумма;    
	    СтрокаДок.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаДок.СтавкаНДС);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БазаБезНДС) И Число(БазаБезНДС) <> 0 Тогда
		
		СтрокаДок = Объект.Поставка.Добавить();
		
		СтрокаДок.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		СтрокаДок.Сумма     = БазаБезНДС;
		СтрокаДок.СуммаСНДС = СтрокаДок.Сумма;    
	    СтрокаДок.СтатьяДекларацииНДСНалоговыйКредит = ПолучитьСтатьюНалоговойДекларации(Объект.ВидОперации, СтрокаДок.СтавкаНДС);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тара) И Число(Тара) <> 0 Тогда
		
		Объект.СуммаВозвратнойТары = Объект.СуммаВозвратнойТары + Число(Тара);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыШапкиXMLДокумента()
	
	СтруктураПоказателейXML = Новый Структура();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеXMLНаФорме);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТекУзел = ВРЕГ(ЧтениеXML.Имя);
			Если    ТекУзел = "DECLAR"
				ИЛИ ТекУзел = "DECLARHEAD"
				ИЛИ ТекУзел = "DECLARBODY"
				ИЛИ ТекУзел = "LINKED_DOCS" Тогда
				Продолжить;
			ИначеЕсли Найти(ТекУзел, "XXXX") > 0 Тогда
				Продолжить;
			Иначе
				Если ВРЕГ(ЧтениеXML.ЗначениеАтрибута("xsi:nil")) = "TRUE" Тогда
					Продолжить;
				КонецЕсли;
				ЧтениеXML.Прочитать();
				СтруктураПоказателейXML.Вставить(ТекУзел, ЧтениеXML.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		
	ЧтениеXML.Закрыть();
	
	Возврат СтруктураПоказателейXML;

КонецФункции


	
&НаСервере	
Процедура ЗаполнитьОрганизациюПоИНННаСервере(ОрганизацияИНН)

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
               |	Рег.Организация КАК Ссылка
               |ИЗ
               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата) КАК Рег
               |ГДЕ
               |	Рег.ИННПлательщикаНДС = &ОрганизацияИНН
               |";
	
	Запрос.УстановитьПараметр("ОрганизацияИНН", 			ОрганизацияИНН);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.Организация = Выборка.Ссылка;
		Сообщить(НСтр("ru='Организация с указанными в файле ИНН найдена в информационной базе!';uk='Організація з вказаними у файлі ІПН знайдена в інформаційній базі!'"), СтатусСообщения.Важное);				
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = "";
		Сообщить(НСтр("ru='Организация очищена!';uk='Організація очищена!'"), СтатусСообщения.Важное);				
	КонецЕсли;
	
	Объект.Договор = "";

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентаПоИНННаСервере(КонтрагентИНН)		
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
               |	Спр.Ссылка
               |ИЗ
               |	Справочник.Контрагенты КАК Спр
               |ГДЕ
               |	Спр.ИННПлательщикаНДС = &КонтрагентИНН";
	
	Запрос.УстановитьПараметр("КонтрагентИНН", 			КонтрагентИНН);
	//Запрос.УстановитьПараметр("КонтрагентКодПоЕДРПОУ", 	КонтрагентКодПоЕДРПОУ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.Контрагент = Выборка.Ссылка;
		Объект.Партнер = Выборка.Ссылка.Партнер;
		
		Сообщить(НСтр("ru='Контрагент с указанными в файле ИНН найден в информационной базе!';uk='Контрагент із вказаними у файлі ІПН  знайдений в інформаційній базі!'"), СтатусСообщения.Важное);	
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = "";
		Объект.Партнер = "";
		Сообщить(НСтр("ru='Контрагнет очищен!';uk='Контрагнет очищений!'"), СтатусСообщения.Важное);	
	КонецЕсли;
	
	Объект.Договор = "";
	
КонецПроцедуры

&НаСервере	
Процедура ЗаполнитьДоговорНаСервере(ДоговорКонтрагентаДата, ДоговорКонтрагентаНомер)	
	
	Если  НЕ Объект.Договор.Дата  = ДоговорКонтрагентаДата
	  ИЛИ НЕ Объект.Договор.Номер = ДоговорКонтрагентаНомер Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК Спр
	               |ГДЕ
				   |	Спр.Контрагент = &Контрагент
				   |	И Спр.Дата 	 = &ДоговорКонтрагентаДата
				   |	И Спр.Номер  = &ДоговорКонтрагентаНомер
	               |";
				   
		Запрос.УстановитьПараметр("Контрагент", 			 Объект.Контрагент);				   
		Запрос.УстановитьПараметр("ДоговорКонтрагентаДата",  ДоговорКонтрагентаДата);
		Запрос.УстановитьПараметр("ДоговорКонтрагентаНомер", ДоговорКонтрагентаНомер);
	
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Сообщить(НСтр("ru='Данные договора (номер, дата) не соответствуют данным из файла';uk='Дані договору (номер, дата) не відповідають даним з файлу'"), СтатусСообщения.Важное);	
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.Договор = Выборка.Ссылка;
			Сообщить(НСтр("ru='Договор с указанными в файле номером и датой найден в информационной базе!';uk='Договір з вказаними у файлі номером і датою знайдений в інформаційній базі!'"), СтатусСообщения.Важное);	
		ИначеЕсли ЗначениеЗаполнено(Объект.Договор) Тогда
			Объект.Договор = "";
			Сообщить(НСтр("ru='Договор очищен!';uk='Договір очищений!'"), СтатусСообщения.Важное);	
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти
///////////////////////////////////////////////////////////////////////////////
// Модуль "ПодборТоваровСервер", содержит процедуры и функции необходимые для
// работы форм подбора товаров. Модуль содержит основные функции которые отвечают
// за установку и снятие отборов, переключение страниц номенклатуры/характеристик,
// функции работы с поиском.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСКорзиной

// Вызывается при изменениия данных в корзине подобранных товаров в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриИзмененииКорзины(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
	Если (ЭтоФормаПодбораВДокументыПродажи
		И Не Форма.РежимПодбораБезСуммовыхПараметров) Тогда
		
		ПодборТоваровКлиентСервер.УстановитьВидимостьКомандыПодбораНоменклатурыПродаваемойСовместно(Форма, Форма.Объект);
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
			
			Если ПодборТоваровКлиентСервер.ЕстьТоварыПродаваемыеСовместно(Форма, Форма.Объект) Тогда
				УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
			Иначе
				Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии;
				ПриИзмененииВариантаНавигации(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИнформацииОЦенеОстаткахТоваровИзФормПодборов

// Возвращает структуру, данные об остатках товара.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура товара,
//	Характеристика - СправочникСсылка.Характеристики - характеристика товара,
//	Склады - Массив - массив складов.
//
Функция ОстаткиНоменклатуры(Номенклатура, Характеристика, Склады = Неопределено) Экспорт
	
	СоставРазделовЗапроса = Новый Массив;
	Запрос = Новый Запрос();
	
	Если Склады = Неопределено Тогда
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(Не Склады.ЭтоГруппа)");
		
		МассивСкладов = ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("Склады", МассивСкладов);
		
	Иначе
		Запрос.УстановитьПараметр("Склады", Склады);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	ИспользованиеХарактеристик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ИспользованиеХарактеристик");
	НесколькоХарактеристик = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	
	Запрос.Текст = ТекстЗапросаДоступныхОстатковПоДатамДляПодбора(
	ЗначениеЗаполнено(Характеристика), НесколькоХарактеристик, СоставРазделовЗапроса);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Планируемые остатки
	Выборка = Результат[СоставРазделовЗапроса.Найти("ПланируемыеОстатки")].Выбрать();
	
	ПланируемыеОстатки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, Период, Доступно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ПланируемыеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	// Текущие остатки.
	Выборка = Результат[СоставРазделовЗапроса.Найти("ДоступныеТовары")].Выбрать();
	
	ТекущиеОстатки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, ВНаличии, Свободно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ТекущиеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки, ПланируемыеОстатки", ТекущиеОстатки, ПланируемыеОстатки);
	
КонецФункции

// Переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное
// хранилище.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	Строка. Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыПараметровДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов        = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				
				СтрокаЗначенияОтбора = ПодчиненныеСтроки[0];
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

// Переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное хранилище.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	Строка. Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыСопоставленияДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалОт");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалДо");
	ТаблицаПараметров.Колонки.Добавить("Интервал");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			Если СтрокаДереваОтборов.ИнтервалОт <> Неопределено Тогда
				СтрокаТаблицы.Интервал = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			СтрокаТаблицы.Интервал = Ложь;
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаЗначенияОтбора Из ПодчиненныеСтроки Цикл
				
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
				СтрокаТаблицы.Интервал = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

#КонецОбласти

#Область НавигацияПоХарактеристикамВФормахПодборов

// Устанавливает текущей страницу со списком номенклатуры.
// Используется в формах подборов (в документ продажи, закупки).
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ПерейтиКСпискуНоменклатуры(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если ЭтоФормаПодбора Тогда
		
		Если Форма.НавигацияПоХарактеристикам Тогда
			
			ИмяСтраницыНоменклатуры = ПодборТоваровКлиентСервер.ИмяСтраницыНоменклатурыПоВариантуПоиска(Форма);
			Элементы.СтраницыСписков.ТекущаяСтраница = Элементы[ИмяСтраницыНоменклатуры];
			
			Форма.НавигацияПоХарактеристикам = Ложь;
			Элементы.СегментНоменклатуры.ТолькоПросмотр = Ложь;
			
			ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
			
			Если ЗначениеЗаполнено(Форма.СтрокаПоискаНоменклатура) Тогда
				Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
			Иначе
				Форма.ТекущийЭлемент = Форма.Элементы[ИмяСпискаНоменклатуры];
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переключении на страницу со списком характеристик.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	ПараметрыНоменклатуры - Структура - параметры номенклатуры, для которой нужно переключиться на страницу со списком характеристик.
//
Процедура ПерейтиКСпискуХарактеристикНовойНоменклатуры(Форма)
	ПараметрыНоменклатуры = Форма.НоваяНоменклатура;
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	// Включить признак навигации по характеристикам.
	Форма.НавигацияПоХарактеристикам = Истина;
	
	// Установить заголовок колонки таблицы характеристик.
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Характеристики: ""%1""';uk='Характеристики: ""%1""'"), ПараметрыНоменклатуры.Номенклатура);
	
	ИмяЭлемента = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма) + "Характеристика";
	
	Форма.Элементы[ИмяЭлемента].Заголовок = ТекстЗаголовка;
	
	// Установить параметры списка характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "Номенклатура", ПараметрыНоменклатуры.Номенклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ЕдиницаИзмерения", 
		ПараметрыНоменклатуры.ЕдиницаИзмерения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВладелецХарактеристик", 
		ПараметрыНоменклатуры.ВладелецХарактеристик);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ТипНоменклатуры", ПараметрыНоменклатуры.ТипНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВидНоменклатуры", ПараметрыНоменклатуры.ВидНоменклатуры);
	
	Если Не ЭтоФормаПодбораВДокументыЗакупки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.СписокХарактеристики, "ЦеноваяГруппа", ПараметрыНоменклатуры.ЦеноваяГруппа);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "СегментНоменклатуры", 
		Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "НоменклатураСегмента", 
		ПараметрыНоменклатуры.Номенклатура, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	// Установить отбор списка характеристик по товарам продаваемым совместно.
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		МассивХарактеристик = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Форма.ТаблицаНоменклатураПродаваемаяСовместно Цикл
			
			Если СтрокаТЧ.Номенклатура = ПараметрыНоменклатуры.Номенклатура Тогда
				МассивХарактеристик.Добавить(СтрокаТЧ.Характеристика);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокХарактеристики, "Характеристика",
			МассивХарактеристик, ВидСравненияКомпоновкиДанных.ВСписке, ,МассивХарактеристик.Количество() > 0);
		
	КонецЕсли;
	
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
	Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Истина;
	
	Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьХарактеристику;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеОбработчикиСобытийФорм

// Вызывается из обработчика события "ПриСозданииНаСервере" форм списков.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, формы выбора.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Форма.ЕстьПравоНастройкиВидовНоменклатуры = ПравоДоступа("Изменение", Метаданные.Справочники.ВидыНоменклатуры);
	Форма.ЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;	
	
	УстановитьЗначенияПоНастройкамФормы(Форма);
	
	Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров = Константы.ИспользоватьСтандартныйПоискПриПодбореТоваров.Получить();
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда 
		Для Каждого Элемент Из Форма.Параметры.Отбор Цикл
			
			Если Элемент.Ключ = "ТипНоменклатуры" Тогда
				УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Ключ = "ВидНоменклатуры" Тогда
				УстановитьОтборПоВидНоменклатурыПоПараметрам(Форма);
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Ключ = "Владелец" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Элемент.Значение) = Тип("ФиксированныйМассив") Тогда
				ДобавитьЭлементОтбора(ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура), 
				Элемент.Ключ, Элемент.Значение, ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоУмолчанию");
			Иначе
				ДобавитьЭлементОтбора(ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура), 
				Элемент.Ключ, Элемент.Значение, ВидСравненияКомпоновкиДанных.Равно, "ОтборПоУмолчанию");
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
		ПодборТоваровКлиентСервер.НазначитьКнопкуВыбораПоУмолчанию(Форма);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	
КонецПроцедуры

// Вызывается из обработчика события "ПриСозданииНаСервере" форм подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриСозданииФормыПодбораНаСервере(Форма) Экспорт
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	АвторизованВнешнийПользователь = ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
	
#Область ПолучитьЗначенияФункциональныхОпций
	
	Форма.ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	Форма.ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров = Константы.ИспользоватьСтандартныйПоискПриПодбореТоваров.Получить();
	Форма.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");

	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		Форма.ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах")
		                                          И НЕ АвторизованВнешнийПользователь;
		Форма.ИспользоватьНоменклатуруПродаваемуюСовместно = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
		Если Не Форма.РежимПодбораБезСоглашенийСКлиентами	Тогда
			Форма.ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
		КонецЕсли;
		
	ИначеЕсли ЭтоФормаПодбораВДокументыЗакупки Тогда
		Форма.ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
		Форма.ИспользоватьНоменклатуруПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков");
	КонецЕсли;
#КонецОбласти	

	
	#Область УстановитьСвойстваФормыПоПараметрам
	
	#Область УстановитьСкладскиеНастройкиПоПараметрам
	
	ЭтоГруппаСкладов = Справочники.Склады.ЭтоГруппа(Параметры.Склад);
	
	Если ЗначениеЗаполнено(Параметры.Склад)
		И ЭтоГруппаСкладов Тогда
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
		|	И Склады.ВыборГруппы В(&ВыборГруппыСкладов)
		|	И Не Склады.ЭтоГруппа");
		
		ВыборГруппыСкладов = Новый Массив();
		ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных);
		
		Если Не Параметры.РежимПодбораИсключитьГруппыДоступныеВЗаказах Тогда
			
			ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах);
			
		КонецЕсли;
		
		
		ЗапросПоСкладам.УстановитьПараметр("Склад", Параметры.Склад);
		ЗапросПоСкладам.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппыСкладов);
		
		Форма.Склады.ЗагрузитьЗначения(ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
		
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.Склад) Тогда
			Форма.Склады.Добавить(Параметры.Склад);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если склад не выбран, то заполнить список складов всеми разрешенными складами.
	Если Форма.Склады.Количество() = 0
		И Параметры.Свойство("ОстаткиПоВсемСкладам")
		И Параметры.ОстаткиПоВсемСкладам Тогда
		
		Форма.ОстаткиПоВсемСкладам = Истина;
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(Не Склады.ЭтоГруппа)");
		
		Форма.Склады.ЗагрузитьЗначения(ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
		
	КонецЕсли;
	
	Если Форма.Склады.Количество() = 0 Тогда
		СкладПараметр = Справочники.Склады.ПустаяСсылка();
	ИначеЕсли Форма.Склады.Количество() = 1 Тогда
		СкладПараметр = Форма.Склады[0].Значение;
	Иначе
		СкладПараметр = Форма.Склады.ВыгрузитьЗначения();
	КонецЕсли;
	
	КоличествоСкладов = Форма.Склады.Количество();
	НесколькоСкладов = (КоличествоСкладов > 1);
	
	// Заполнить список выбора доступных складов в корзине.
	Элементы.КорзинаСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.КорзинаСклад, "Ссылка", Форма.Склады.ВыгрузитьЗначения());
	Элементы.КорзинаСклад.Видимость = (НесколькоСкладов И Параметры.РежимПодбораИспользоватьСкладыВТабличнойЧасти);
	
	Если КоличествоСкладов = 0 Тогда
		
		Форма.ТолькоВНаличии = Ложь;
		Форма.ОтображатьОстатки = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Склад) Тогда 
		
		Форма.ТолькоВНаличии = Ложь;
		
	КонецЕсли;
				
	Форма.ОтображатьОстаткиНадпись = ?(Форма.ОтображатьОстатки, 
	НСтр("ru='Подробная информация об остатках (скрыть)';uk='Докладна інформація про залишки (приховати)'"),
	НСтр("ru='Подробная информация об остатках (показать)';uk='Докладна інформація про залишки (показати)'"));
	
	Элементы.КорзинаСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.КорзинаСклад, "Ссылка", СкладПараметр);
	
	#КонецОбласти
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		#Область УстановитьСвойстваФормыПодбораВДокументыЗакупкиПоПараметрам
		
		ЗаполнитьЗначенияСвойств(Форма, Параметры,
		"Валюта, Дата, Соглашение, Партнер,
		|РегистрироватьЦеныПоУсловиям, РежимПодбораИспользоватьСкладыВТабличнойЧасти, СкрыватьПодакцизныеТовары,
		|ПроверятьЗаполнение");
		Форма.ПоставщикПартнер = Параметры.Партнер;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Параметры, "ЦенаВключаетНДС") Тогда
			Форма.ЦенаВключаетНДС = Параметры.ЦенаВключаетНДС;
		КонецЕсли;
		
		Форма.Объект.Склад = Параметры.Склад;
		Форма.Объект.Соглашение = Параметры.Соглашение;
		Форма.Объект.Партнер = Параметры.Партнер;
		
		// Установить свойства элементов формы по переданным параметрам.
		Элементы.ДекорацияПодакцизныйТовар.Видимость  = Параметры.ОтображатьФлагСкрыватьПодакцизныеТовары;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ИерархияНоменклатурыПоставщика, "Владелец", Форма.ПоставщикПартнер);
		
		// Заполнить значения реквизитов формы и объекта по переданным параметрам.
		Элементы.КорзинаСклад.Видимость = Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти И (Форма.Склады.Количество() > 1);
		
		Если Не (Параметры.РежимПодбораБезКоличественныхПараметров = Неопределено) Тогда
			Форма.РежимПодбораБезКоличественныхПараметров = Параметры.РежимПодбораБезКоличественныхПараметров;
		КонецЕсли;
		
		Если Не (Параметры.РежимПодбораБезСуммовыхПараметров = Неопределено) Тогда
			Форма.РежимПодбораБезСуммовыхПараметров = Параметры.РежимПодбораБезСуммовыхПараметров;
		КонецЕсли;
		
		Если Не (Параметры.СкрыватьРучныеСкидки = Неопределено) Тогда
			Форма.СкрыватьРучныеСкидки = Параметры.СкрыватьРучныеСкидки;
		КонецЕсли;
		
		Если Не Форма.РежимПодбораБезСуммовыхПараметров И Не ЗначениеЗаполнено(Форма.Валюта)  Тогда
			ВызватьИсключение НСтр("ru='Параметр ""Валюта"" не заполнен.';uk='Параметр ""Валюта"" не заповнений.'");
		КонецЕсли;
		
		// Установить свойства элементов формы по переданным параметрам.
		Элементы.КорзинаЦена.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Цена (%1)';uk='Ціна (%1)'"), Форма.Валюта);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Номенклатура.ПодакцизныйТовар", Ложь, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоУмолчанию", Форма.СкрыватьПодакцизныеТовары);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатураПоставщика, "Владелец", Параметры.Партнер, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоУмолчанию", ЗначениеЗаполнено(Параметры.Партнер));
		
		Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
			Форма.АвтоЗаголовок = Ложь;
			Форма.Заголовок = Параметры.Заголовок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
			Форма.Команды["ПеренестиВДокумент"].Заголовок = Параметры.ЗаголовокКнопкиПеренести;
			Форма.Команды["ПеренестиВДокумент"].Подсказка = Параметры.ЗаголовокКнопкиПеренести;
		КонецЕсли;
		
		Если Параметры.РежимПодбораБезКоличественныхПараметров Тогда
			Элементы.КорзинаКоличественныеПараметры.Видимость = Ложь;
		КонецЕсли;
		
		Форма.СкрыватьКомандуОстаткиНаСкладах = Параметры.СкрыватьКомандуОстаткиНаСкладах;
		
		Элементы.ОтображатьОстаткиНадпись.Видимость = Не Форма.СкрыватьКомандуОстаткиНаСкладах И Форма.Склады.Количество() > 0;
		
		Элементы.ОтображатьОстаткиНоменклатурыПоставщикаНадпись.Видимость = Не Форма.СкрыватьКомандуОстаткиНаСкладах И Форма.Склады.Количество() > 0;
		
		Если ПервоеОткрытиеФормы(Форма.КодФормы) Тогда
			УстановитьПараметрыДереваОтбораКачествоНовый(Форма);
			Форма.ОтображатьОстатки = Истина;
		КонецЕсли;
		
		Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки И Не (Форма.РежимПодбораБезКоличественныхПараметров Или Форма.СкрыватьКомандуОстаткиНаСкладах);
		Элементы.ОстаткиТоваровПоставщика.Видимость = Форма.ОтображатьОстатки И Не Форма.СкрыватьКомандуОстаткиНаСкладах;
		
		// Установить видимость элементов отображения остатков.
		
		
		ВидимостьПолейКоличестваТоваров = Не Форма.СкрыватьКомандуОстаткиНаСкладах;
		
		Элементы.ТолькоВНаличии.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Видимость = ВидимостьПолейКоличестваТоваров;
		
		Элементы.СписокСтандартныйПоискНоменклатураДоступно.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокРасширенныйПоискНоменклатураДоступно.Видимость = ВидимостьПолейКоличестваТоваров;
		
		Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Видимость = ВидимостьПолейКоличестваТоваров;
		
		// Установить видимость элементов отображения цен.
		ВидимостьЭлементовОтображенияЦен = Не Параметры.СкрыватьКомандуЦеныНоменклатуры И Форма.РегистрироватьЦеныПоУсловиям;
		
		Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюПерейтиКЦенамНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокСтандартныйПоискХарактеристикиКонтекстноеМенюЦеныНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюПерейтиКЦенамНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокРасширенныйПоискХарактеристикиКонтекстноеМенюЦеныНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокСтандартныйПоискНоменклатураПоставщикаКонтекстноеМенюПерейтиКЦенамНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокРасширенныйПоискНоменклатураПоставщикаКонтекстноеМенюПерейтиКЦенамНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		
		Элементы.СписокСтандартныйПоискНоменклатураЦена.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.СписокРасширенныйПоискНоменклатураЦена.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		
		Элементы.СписокСтандартныйПоискХарактеристикиЦена.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.СписокРасширенныйПоискХарактеристикиЦена.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		
		Если Параметры.РежимПодбораБезСуммовыхПараметров Тогда
			Элементы.КорзинаСуммаРучнойСкидки.Видимость                         = Ложь;
			Элементы.КорзинаПроцентРучнойСкидки.Видимость                       = Ложь;
			Элементы.КорзинаСумма.Видимость                                     = Ложь;
			Элементы.КорзинаЦена.Видимость                                      = Ложь;
			Элементы.СписокСтандартныйПоискНоменклатураЦена.Видимость           = Ложь;
			Элементы.СписокРасширенныйПоискНоменклатураЦена.Видимость           = Ложь;
			Элементы.СписокРасширенныйПоискХарактеристикиЦена.Видимость         = Ложь;
			Элементы.СписокСтандартныйПоискХарактеристикиЦена.Видимость         = Ложь;
			Элементы.СписокСтандартныйПоискНоменклатураПоставщикаЦена.Видимость = Ложь;
			Элементы.СписокРасширенныйПоискНоменклатураПоставщикаЦена.Видимость = Ложь;
			Элементы.ГруппаФильтрПоЦене.Видимость                               = Ложь;
			Элементы.ВидЦеныПоставщикаНоменклатура.Видимость                    = Ложь;
			Элементы.ВидЦеныПоставщика.Видимость                                = Ложь;
		КонецЕсли;
		
		Если Параметры.СкрыватьРучныеСкидки Тогда
			Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
		КонецЕсли;
		
		Если Не (Параметры.ЗапрашиватьКоличество = Неопределено) Тогда
			Форма.ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
		КонецЕсли;
		
		Элементы.ЗапрашиватьКоличествоЦену.Видимость = Не Параметры.СкрыватьКнопкуЗапрашиватьКоличество;
		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество;
		
		Если Не Форма.ИспользоватьНоменклатуруПоставщиков Или Не ЗначениеЗаполнено(Параметры.Партнер) Тогда
			Элементы.СтраницаНоменклатураПоставщика.Видимость = Ложь;
			Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.НоменклатураПоставщика.Видимость = Ложь;
		КонецЕсли;
		
		Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
				
		#КонецОбласти
		
	ИначеЕсли ЭтоФормаПодбораВДокументыПродажи Тогда
		
		#Область УстановитьСвойстваФормыПодбораВДокументыПродажиПоПараметрам
		
		ПервоеОткрытиеФормы = ПервоеОткрытиеФормы(Форма.КодФормы);
		Если ПервоеОткрытиеФормы Тогда
			УстановитьПараметрыДереваОтбораКачествоНовый(Форма);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Соглашение) Тогда
			СегментНоменклатуры = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Параметры.Соглашение, "СегментНоменклатуры");
			Форма.СегментНоменклатуры = СегментНоменклатуры;
		Иначе 
			Форма.СегментНоменклатуры = Справочники.СегментыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Элементы.СегментНоменклатуры.Доступность = ПравоДоступа("Просмотр", Метаданные.Справочники.СегментыНоменклатуры); 
		
		Элементы.КорзинаНоменклатура.ТолькоПросмотр = Параметры.СкрыватьВыборНоменклатуры;
		
		Элементы.Декорация.Видимость = Параметры.СкрыватьПодакцизныеТовары;
		
		Форма.Валюта = Параметры.Валюта;
		Форма.Дата = Параметры.Дата;
		Форма.Объект.Склад = Параметры.Склад;
		Форма.Соглашение = Параметры.Соглашение;
		Форма.Объект.Соглашение = Параметры.Соглашение;
		Форма.Объект.ЦенаВключаетНДС = Параметры.ЦенаВключаетНДС;
		Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти = Параметры.РежимПодбораИспользоватьСкладыВТабличнойЧасти;
		Форма.СкрыватьПодакцизныеТовары = Параметры.СкрыватьПодакцизныеТовары;
		
		Форма.ВидЦены = Параметры.ВидЦены;
		
		Форма.РежимПодбораБезКоличественныхПараметров = Параметры.РежимПодбораБезКоличественныхПараметров;
		
		Форма.РежимПодбораБезСуммовыхПараметров = Параметры.РежимПодбораБезСуммовыхПараметров;
		
		Форма.РежимПодбораБезСоглашенийСКлиентами = Параметры.РежимПодбораБезСоглашенийСКлиентами;
		
		Форма.СкрыватьРучныеСкидки = Параметры.СкрыватьРучныеСкидки;
		
		Форма.ИспользоватьДатыОтгрузки = Параметры.ИспользоватьДатыОтгрузки;
		
		Форма.НеРазбиватьНаборыПоКомплектующим = Параметры.НеРазбиватьНаборыПоКомплектующим;
		
		Форма.ТолькоСЦенами = Параметры.ТолькоСЦенами;
		
		Форма.ВариантАнализаНоменклатурыПродаваемойСовместно = Параметры.ВариантАнализаНоменклатурыПродаваемойСовместно;
				
		Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
			ВидыЦен = Новый Массив();	
		ИначеЕсли Форма.РежимОтбораПоАссортименту Тогда
			Форма.ОбъектПланированияАссортимента = АссортиментСервер.ОбъектПланирования(СкладПараметр, Форма.Дата);
			
			ОтборВидовЦен = Новый Структура;
			ОтборВидовЦен.Вставить("РазрешеныПродажи", Истина);
			
			ВидыЦен = АссортиментСервер.ВидыЦенПоАссортименту(Форма.ОбъектПланированияАссортимента, Форма.Дата, ОтборВидовЦен);
			Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен);
		ИначеЕсли Форма.РежимПодбораБезСоглашенийСКлиентами Тогда
			ВидыЦен = Новый Массив();
			ВидыЦен.Добавить(Форма.ВидЦены);
			Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен);
		ИначеЕсли Не Форма.ИспользоватьСоглашенияСКлиентами Тогда
			ВидыЦен = ВидыЦенПоУмолчанию(Форма.Объект.ЦенаВключаетНДС);
			Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен);
		Иначе
			ВидыЦен = ВидыЦенПоСоглашениюСКлиентом(Форма.Соглашение);
			Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен);
		КонецЕсли;
		
		Форма.ВидыЦен.ЗагрузитьЗначения(ВидыЦен);
		
		Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
			Форма.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен;	
		ИначеЕсли НЕ Форма.ИспользоватьСоглашенияСКлиентами
			Или Форма.РежимПодбораБезСоглашенийСКлиентами Тогда	
			Форма.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке;
		Иначе
			Форма.ВариантРасчетаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Соглашение, "ВариантРасчетаЦен");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Форма.ВариантРасчетаЦен) Тогда
			Форма.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Форма.ВариантАнализаНоменклатурыПродаваемойСовместно) Тогда
			Форма.ВариантАнализаНоменклатурыПродаваемойСовместно = Перечисления.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля;
		КонецЕсли;
		
		Элементы.КорзинаДатаОтгрузки.Видимость = Форма.ИспользоватьДатыОтгрузки;
		
		Если Не Форма.РежимПодбораБезСуммовыхПараметров Тогда
			Если Не ЗначениеЗаполнено(Форма.Валюта) Тогда
				ВызватьИсключение НСтр("ru='Параметр ""Валюта"" не заполнен.';uk='Параметр ""Валюта"" не заповнений.'");
			КонецЕсли;
		КонецЕсли;
		
		Если Форма.СкрыватьПодакцизныеТовары Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокНоменклатура, "Номенклатура.ПодакцизныйТовар", Ложь, 
			ВидСравненияКомпоновкиДанных.Равно, "ОтборПоУмолчанию", Форма.СкрыватьПодакцизныеТовары);
		КонецЕсли;
		
		Если Параметры.РежимПодбораБезКоличественныхПараметров Тогда
			Элементы.КорзинаКоличественныеПараметры.Видимость = Ложь;
		КонецЕсли;
		
		УстановкаЦенНоменклатуры = Ложь;
		Если Параметры.Свойство("Документ") Тогда
			Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
				УстановкаЦенНоменклатуры = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.НаправлениеДеятельности) Тогда
			Форма.ОтборПоНазначению = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НаправлениеДеятельности, "Назначение");				
		КонецЕсли;
		
		Форма.СкрыватьКомандуОстаткиНаСкладах = Параметры.СкрыватьКомандуОстаткиНаСкладах;
		
		ОтображатьОстаткиСклады = Не Форма.СкрыватьКомандуОстаткиНаСкладах И Не (Форма.Склады.Количество() = 0);
		Если ПервоеОткрытиеФормы Тогда
			Форма.ОтображатьОстатки = Истина;
		КонецЕсли;
		
		Элементы.ОтображатьОстаткиНадпись.Видимость = (Не Форма.СкрыватьКомандуОстаткиНаСкладах Или ОтображатьОстаткиСклады) 
			И (Не Форма.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
				Или АвторизованВнешнийПользователь);
		Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки 
			И (Не Форма.СкрыватьКомандуОстаткиНаСкладах Или ОтображатьОстаткиСклады)
			И (Не Форма.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
				Или АвторизованВнешнийПользователь);
		
		ВидимостьПолейКоличестваТоваров = ОтображатьОстаткиСклады;
		
		Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокСтандартныйПоискНоменклатураДоступно.Видимость = ВидимостьПолейКоличестваТоваров И Не ЗначениеЗаполнено(Форма.ОтборПоНазначению);
		Элементы.СписокРасширенныйПоискНоменклатураДоступно.Видимость = ВидимостьПолейКоличестваТоваров И Не ЗначениеЗаполнено(Форма.ОтборПоНазначению);
		Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Видимость = ВидимостьПолейКоличестваТоваров И Не ЗначениеЗаполнено(Форма.ОтборПоНазначению);
		Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Видимость = ВидимостьПолейКоличестваТоваров;
		Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Видимость = ВидимостьПолейКоличестваТоваров И Не ЗначениеЗаполнено(Форма.ОтборПоНазначению);
		
		Элементы.ТолькоВНаличии.Видимость = Не Форма.СкрыватьКомандуОстаткиНаСкладах Или ОтображатьОстаткиСклады Или УстановкаЦенНоменклатуры;
		
		Если ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
			Элементы.ТолькоВНаличии.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.РежимПодбораБезСуммовыхПараметров Тогда
			Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаСумма.Видимость = Ложь;
			Элементы.КорзинаЦена.Видимость = Ложь;
			Элементы.СписокСтандартныйПоискНоменклатураЦена.Видимость = Ложь;
			Элементы.СписокРасширенныйПоискНоменклатураЦена.Видимость = Ложь;
			Элементы.СписокРасширенныйПоискХарактеристикиЦена.Видимость = Ложь;
			Элементы.СписокСтандартныйПоискХарактеристикиЦена.Видимость = Ложь;
			Элементы.ГруппаФильтрПоЦене.Видимость = Ложь;
			
			Элементы.КорзинаКонтекстноеМенюЗаполнитьЦеныПоСоглашению.Видимость            = Ложь;
			Элементы.КорзинаКонтекстноеМенюЗаполнитьЦеныВыделенныхСтрокПоВидуЦен.Видимость = Ложь;
			Элементы.КорзинаКонтекстноеМенюНазначитьРучнуюСкидку.Видимость                = Ложь;
			Элементы.КорзинаКонтекстноеМенюНазначитьРучнуюСкидкуВыделенныхСтрок.Видимость = Ложь;
			Элементы.КорзинаКонтекстноеМенюОтменитьРучныеСкидки.Видимость                 = Ложь;
		КонецЕсли;
		
		Если Параметры.СкрыватьРучныеСкидки Тогда
			Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаКонтекстноеМенюНазначитьРучнуюСкидку.Видимость                = Ложь;
			Элементы.КорзинаКонтекстноеМенюНазначитьРучнуюСкидкуВыделенныхСтрок.Видимость = Ложь;
			Элементы.КорзинаКонтекстноеМенюОтменитьРучныеСкидки.Видимость                 = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
			Форма.АвтоЗаголовок = Ложь;
			Форма.Заголовок = Параметры.Заголовок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
			Форма.Команды["ПеренестиВДокумент"].Заголовок = Параметры.ЗаголовокКнопкиПеренести;
			Форма.Команды["ПеренестиВДокумент"].Подсказка = Параметры.ЗаголовокКнопкиПеренести;
		КонецЕсли;
		
		Если Параметры.ЗапрашиватьКоличество <> Неопределено Тогда
			Форма.ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
		КонецЕсли;
		
		Элементы.НеЗапрашиватьКоличество.Видимость = Не Параметры.СкрыватьКнопкуЗапрашиватьКоличество И Не Форма.РежимПодбораБезСуммовыхПараметров;
		Элементы.ЗапрашиватьКоличествоЦену.Видимость = Не Параметры.СкрыватьКнопкуЗапрашиватьКоличество И Не Форма.РежимПодбораБезСуммовыхПараметров;
		Элементы.ЗапрашиватьКоличество.Видимость = Не Параметры.СкрыватьКнопкуЗапрашиватьКоличество;
		
		Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюЦеныНоменклатуры.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюЦеныНоменклатуры.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.СписокРасширенныйПоискХарактеристикиКонтекстноеМенюЦеныНоменклатуры.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.СписокСтандартныйПоискХарактеристикиКонтекстноеМенюЦеныНоменклатуры.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.КорзинаВидЦены.Видимость = Не Параметры.СкрыватьКолонкуВидЦены;
		
		Элементы.КорзинаКонтекстноеМенюЗаполнитьЦеныПоСоглашению.Видимость            = Не Параметры.СкрыватьКолонкуВидЦены;
		Элементы.КорзинаКонтекстноеМенюЗаполнитьЦеныВыделенныхСтрокПоВидуЦен.Видимость = Не Параметры.СкрыватьКолонкуВидЦены;
		
		
		Элементы.КорзинаИндексСовместноПродаваемыеТовары.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
		
		Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
		
		Элементы.СтраницаСоздатьНоменклатуру.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
		Элементы.СтраницаСоздатьХарактеристику.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.ХарактеристикиНоменклатуры);
		
		Форма.ЗапретРедактированияСоставаНабора = Параметры.ЗапретРедактированияСоставаНабора;
		Форма.ЗапретРедактированияЦеныНабора    = Параметры.ЗапретРедактированияЦеныНабора;
		
		Форма.БезОтбораПоВключениюНДСВЦену = Параметры.БезОтбораПоВключениюНДСВЦену;
		Форма.ЗапретРедактированияСоставаНабора = Параметры.ЗапретРедактированияСоставаНабора;
		Форма.ЗапретРедактированияЦеныНабора    = Параметры.ЗапретРедактированияЦеныНабора;
		
		#КонецОбласти
		
	КонецЕсли;
	
	#КонецОбласти
	УстановитьЗначенияПоНастройкамФормы(Форма);
	
#Область УстановитьЗначенияПоНастройкамФормыПодбора
	
	Форма.ТолькоВНаличии = Ложь;
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы,  "");
	
	Если Не (Настройки = Неопределено) Тогда
		
		Если Настройки.Свойство("ТолькоВНаличии") Тогда
			
			Форма.ТолькоВНаличии = Настройки.ТолькоВНаличии;
			Форма.ТолькоВНаличииИзПараметров = Настройки.ТолькоВНаличии;
			
		КонецЕсли;
		
		Если Форма.СкрыватьКомандуОстаткиНаСкладах Тогда
			Форма.ТолькоВНаличии = Ложь;
		КонецЕсли; 
		
		Если Настройки.Свойство("ОтображатьОстатки") Тогда
			Форма.ОтображатьОстатки = Настройки.ОтображатьОстатки;
			Форма.ОтображатьОстаткиНадпись = ?(Форма.ОтображатьОстатки,
				НСтр("ru='Подробная информация об остатках (скрыть)';uk='Докладна інформація про залишки (приховати)'"),
				НСтр("ru='Подробная информация об остатках (показать)';uk='Докладна інформація про залишки (показати)'"));
			
			Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки
				И Не (Форма.РежимПодбораБезКоличественныхПараметров Или Форма.СкрыватьКомандуОстаткиНаСкладах)
				И (Не Форма.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
					Или АвторизованВнешнийПользователь);
			
			Если ЭтоФормаПодбораВДокументыЗакупки Тогда
				Элементы.ОстаткиТоваровПоставщика.Видимость = Форма.ОтображатьОстатки
					И Не Форма.СкрыватьКомандуОстаткиНаСкладах;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			Форма.ПоказыватьПодобранныеТовары = Настройки.ПоказыватьПодобранныеТовары;
			Элементы.ОбластьПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
		КонецЕсли;
		
		Если ЭтоФормаПодбораВДокументыПродажи Тогда
			Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
				Форма.ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
			Иначе
				Форма.ЗапрашиватьКоличество = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
			КонецЕсли;
			
			Если Настройки.Свойство("ЗапрашиватьЦену") Тогда
				Форма.ЗапрашиватьЦену = Настройки.ЗапрашиватьЦену;
			Иначе
				Форма.ЗапрашиватьЦену = Истина;
			КонецЕсли;
		Иначе
			Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
				Форма.ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество;
	Иначе
		Элементы.НеЗапрашиватьКоличество.Пометка = Не Форма.ЗапрашиватьКоличество;
		Элементы.ЗапрашиватьКоличество.Пометка = Форма.ЗапрашиватьКоличество И (Не Форма.ЗапрашиватьЦену Или Форма.РежимПодбораБезСуммовыхПараметров);
		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество И Форма.ЗапрашиватьЦену;
	КонецЕсли;
	
#КонецОбласти	

	УстановитьОтборТолькоВНаличии(Форма);

	#Область УстановитьЗаголовкиЭлементовФормыПоПараметрам
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
		
	ТекстЗаголовка = НСтр("ru='Цена';uk='Ціна'");
	
	Если ЗначениеЗаполнено(Форма.Валюта) Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Цена (%1)';uk='Ціна (%1)'"), Форма.Валюта);
	КонецЕсли;
	
	Форма.Элементы[ИмяСпискаНоменклатуры].ПодчиненныеЭлементы[ИмяСпискаНоменклатуры+"Цена"].Заголовок = ТекстЗаголовка;
	Форма.Элементы[ИмяСпискаХарактеристик].ПодчиненныеЭлементы[ИмяСпискаХарактеристик+"Цена"].Заголовок = ТекстЗаголовка;
	
	Элементы.КорзинаЦена.Заголовок = ТекстЗаголовка;
	ВыбранаГруппаСкладов = Справочники.Склады.ЭтоГруппа(Параметры.Склад);
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(ВыбранаГруппаСкладов,
		НСтр("ru='Только в наличии на группе складов ""%1""';uk='Тільки в наявності по групі складів ""%1""'"),
		?(ЗначениеЗаполнено(Параметры.Склад), НСтр("ru='Только в наличии на складе ""%1""';uk='Тільки в наявності на складі ""%1""'"), НСтр("ru='Только в наличии';uk='Тільки в наявності'"))), 
		Параметры.Склад);
	
	Если Параметры.Свойство("Документ") Тогда
		Если ТипЗнч(Параметры.Документ) <> Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
			Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
		КонецЕсли;
	Иначе
		Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
	КонецЕсли;
#КонецОбласти

	УстановитьЭлементыСпискаЗначенийКачества(Форма);
	УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);
	
#Область УстановитьОтборПоВариантуРасчетаЦенНаборов
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		Если Параметры.ОтборПоВариантуРасчетаЦенНаборов <> Неопределено Тогда
			ОтборПоВариантуРасчетаЦенНаборов = Параметры.ОтборПоВариантуРасчетаЦенНаборов;
			Отбор = Новый СписокЗначений;
			Отбор.ЗагрузитьЗначения(ОтборПоВариантуРасчетаЦенНаборов);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокНоменклатура, "ВариантРасчетаЦеныНабора", Отбор, 
				ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоВариантуРасчетаЦенНаборов", (Отбор.Количество() > 0));
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокХарактеристики, "ВариантРасчетаЦеныНабора", Отбор, 
				ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоВариантуРасчетаЦенНаборов", (Отбор.Количество() > 0));
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти

#Область УстановитьОтборОсобенностьУчета

	Если Параметры.Свойство("ОсобенностьУчета") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Ссылка.ОсобенностьУчета", Параметры.ОсобенностьУчета, 
			ВидСравненияКомпоновкиДанных.Равно, "ОтборОсобенностьУчета",ЗначениеЗаполнено(Параметры.ОсобенностьУчета));
	КонецЕсли;

#КонецОбласти

	Форма.ТекущаяСтрокаНоменклатуры = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
	Форма.ТекущаяСтрокаХарактеристик = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	
	УстановитьТекстыЗапросовСписковФормыПодбора(Форма);

	#Область УстановитьПараметрыСписковФормыПодбора
	
	СписокНоменклатура = Форма.СписокНоменклатура;
	СписокХарактеристики = Форма.СписокХарактеристики;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		СписокНоменклатураПоставщика = Форма.СписокНоменклатураПоставщика;
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
					
		Если Форма.РежимОтбораПоАссортименту Тогда
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ОбъектПланирования", Форма.ОбъектПланированияАссортимента);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ОбъектПланирования", Форма.ОбъектПланированияАссортимента);
		КонецЕсли;
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "СегментНоменклатуры", Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
		Если Форма.ИспользоватьСоглашенияСКлиентами
			И Не Форма.РежимПодбораБезСоглашенийСКлиентами Тогда
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Соглашение", Форма.Соглашение);
		КонецЕсли;
			
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Валюта", Форма.Валюта);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Дата", Форма.Дата);
		
		Если Форма.ВидыЦен.Количество() = 0 Тогда
			ВидыЦенПараметр = Справочники.ВидыЦен.ПустаяСсылка();
		ИначеЕсли Форма.ВидыЦен.Количество() = 1 Тогда
			ВидыЦенПараметр = Форма.ВидыЦен[0].Значение;
		Иначе
			ВидыЦенПараметр = Форма.ВидыЦен.ВыгрузитьЗначения();
		КонецЕсли;
			
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ВидыЦен", ВидыЦенПараметр);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Назначение", Форма.ОтборПоНазначению);
		
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "СегментНоменклатуры", Справочники.СегментыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "НоменклатураСегмента", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
			Если Форма.ИспользоватьСоглашенияСКлиентами
				И Не Форма.РежимПодбораБезСоглашенийСКлиентами Тогда
				ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Соглашение", Форма.Соглашение);
			КонецЕсли;
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Валюта", Форма.Валюта);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Дата", Форма.Дата);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидыЦен", ВидыЦенПараметр);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ЦеноваяГруппа", Справочники.ЦеновыеГруппы.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Назначение", Форма.ОтборПоНазначению);
			
		КонецЕсли;
		
		Если Не ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Склад", СкладПараметр);
			
			Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
				ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Склад", СкладПараметр);
			КонецЕсли;
			
		КонецЕсли;
				
	ИначеЕсли ЭтоФормаПодбораВДокументыЗакупки Тогда
				
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Дата", Форма.Дата);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Склад", СкладПараметр);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Валюта", Форма.Валюта);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Соглашение", Форма.Соглашение);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ВидЦеныПоставщика", Форма.ВидЦеныПоставщика);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "СегментНоменклатуры", Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
		
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидЦеныПоставщика", Форма.ВидЦеныПоставщика);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "СегментНоменклатуры", Форма.СегментНоменклатуры);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "НоменклатураСегмента", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Соглашение", Форма.Соглашение);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Валюта", Форма.Валюта);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Дата", Форма.Дата);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "СтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Склад", СкладПараметр);
			
		КонецЕсли;
		
		Если Форма.ИспользоватьНоменклатуруПоставщиков Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатураПоставщика, "ВидЦеныПоставщика", Форма.ВидЦеныПоставщика);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатураПоставщика, "Соглашение", Форма.Параметры.Соглашение);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатураПоставщика, "Валюта", Форма.Параметры.Валюта);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатураПоставщика, "Дата", Форма.Параметры.Дата);
			
		КонецЕсли;
		
	КонецЕсли;
#КонецОбласти

	ПодборТоваровКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентсике функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентсике функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура СписокКачестваПометкаПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	УстановитьОтборПоКачествуНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентские функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура НоменклатураИсходногоКачестваПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЭлементыСпискаЗначенийКачества(Форма);
	УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	УстановитьПометкуГрадацииКачества(Форма);
	УстановитьОтборПоКачествуНоменклатуры(Форма);
	
КонецПроцедуры

// Заполняет дерево отборов характеристик по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовХарактеристик(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Истина);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает текущей страницу со списком характеристик.
// Используется при стандартном сценарии - когда выполняется выбор строки
// списка номенклатуры, и если по номенклатуре ведется учет характеристик,
// то выполняется переход к списку характеристик.
//
// Используется в формах подборов (в документах продажи, закупки).
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ПерейтиКСпискуХарактеристик(Форма) Экспорт
	
	// Очистить параметры новой номенклатуры, чтобы при добавлении новой характеристики
	// было можно понять, для какой номенклатуры добавляется характеристика.
	Форма.НоваяНоменклатура = Неопределено;
	
	ПриПереходеКСпискуХарактеристик(Форма, Форма.ТекущаяСтрокаНоменклатуры)
	
КонецПроцедуры

// Устанавливает отбор по владельцу характеристик. Используется в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоВладельцуХарактеристик(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список, "Владелец", Форма.ВладелецХарактеристик, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоВладельцуХарактеристик", Истина);
	
КонецПроцедуры

// Вызывается при нажатии кнопки команды СПодобраннойНоменклатуройСовместноПродается из форм
// подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма попощника продаж.
//
Процедура ПриУстановкеОтбораПоНоменклатуреПродаваемойСовместно(Форма) Экспорт
		
	УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает отбор на список номенклатуры по товарам продаваемым совместно
// с заданной номенклатурой.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма) Экспорт
	
	Форма.ИспользоватьФильтры = Истина;
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	Если Форма.ВариантНавигации <> Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
		ВариантНавигацииДоИзменения = Форма.ВариантНавигации;
	КонецЕсли;
	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
	УстановитьСтраницуВариантаНавигации(Форма, ВариантНавигацииДоИзменения);
	
	// Установить фильтр по номенклатуре, продаваемой совместно.
	Форма.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.Очистить();
	
	Корзина = Форма.Объект.Корзина;
	
	Отбор = Новый Структура("Номенклатура, Характеристика");
	
	Для Каждого СтрокаТаблицыКорзина Из Корзина Цикл
		
		Если СтрокаТаблицыКорзина.ИндексСовместноПродаваемыеТовары = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицыКорзина);
			МассивСтрок = Форма.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.НайтиСтроки(Отбор);
			
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = Форма.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыКорзина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(
			Корзина.Выгрузить(,"Номенклатура, Характеристика"), 
			Форма.ВариантАнализаНоменклатурыПродаваемойСовместно);
	
	Форма.ТаблицаНоменклатураПродаваемаяСовместно.Загрузить(Товары);
	
	СовместноПродаваемыеТовары = Товары.ВыгрузитьКолонку("Номенклатура");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Номенклатура", СовместноПродаваемыеТовары, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ПоНоменклатуреПродаваемойСовместно", Истина);
	
КонецПроцедуры

// Устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреИсходногоКачества(Форма) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыДругогоКачества.НоменклатураБрак
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ГруппаОтборПоТоварамИсходногоКачества = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ГруппаОтборПоТоварамИсходногоКачества",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	МассивТоваров = Таблица.ВыгрузитьКолонку("НоменклатураБрак");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборПоТоварамИсходногоКачества, "Ссылка", МассивТоваров, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ГруппаОтборПоТоварамИсходногоКачества", Истина);
	
КонецПроцедуры

// Удаляет отбор по номенклатуре исходного качества.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоНоменклатуреИсходногоКачества(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		Форма.СписокНоменклатура,,"ГруппаОтборПоТоварамИсходногоКачества");
	
КонецПроцедуры

// Устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоКачествуНоменклатуры(Форма) Экспорт
	
	МассивКачества = Новый Массив;
	
	Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивКачества.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивКачества.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокНоменклатура, "Качество", МассивКачества, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет отбор в указанную коллекцию области отбора.
//
// Параметры:
//	ОбластьОтбора - ОтборКомпоновкиДанных - отбор динамического списка,
//	ЛевоеЗначение - Строка - путь к данным поля отбора,
//	ПравоеЗначение - Произвольный - значение отбора,
//	ВидОтбора - ВидСравненияКомпоновкиДанных - вид сравнения,
//	Представление - Строка - представление элемента отбора.
//
Процедура ДобавитьЭлементОтбора(ОбластьОтбора, ЛевоеЗначение, ПравоеЗначение, ВидОтбора, Представление = "") Экспорт
	
	ЭлементОтбора                   = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ПравоеЗначение    = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ВидСравнения      = ВидОтбора;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементОтбора.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт

	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		
		УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
		
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Если (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
			
			Форма.ВидНоменклатурыДоИзменения = Неопределено;
			ПриИзмененииВидаНоменклатуры(Форма);
			
		Иначе
			
			Если Форма.ИспользоватьФильтры Тогда
				
				Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
					
					УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
					ПодборТоваровКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
					
				ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
					
					УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
					
				ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
					
					УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
					УстановитьОтборПоКачествуНоменклатуры(Форма);
					
				КонецЕсли;
				
			Иначе
				
				ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
				УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
				
				Если Не ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) 
					Или Не Форма.ВыборТовараДругогоКачества Тогда
					УдалитьОтборПоКачествуНоменклатуры(Форма);
				КонецЕсли;
				
				УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
				
				Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
					ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
					Форма.СписокНоменклатура,,"ПоНоменклатуреПродаваемойСовместно");
				КонецЕсли;
				
			КонецЕсли;
			
			ПерейтиКСпискуНоменклатуры(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении варианта навигации.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииВариантаНавигации(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	УстановитьСтраницуВариантаНавигации(Форма);
	ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		
		ПодборТоваровКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам 
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
		
		УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
		
		УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
		УстановитьОтборПоКачествуНоменклатуры(Форма);
		
	КонецЕсли;
	
	Если ЭтоФормаПодбора Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
		УстановитьТекстыЗапросовСписковФормыПодбора(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из форм подбороа при изменении вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка, форма выбора.
//
Процедура ПриИзмененииВидаНоменклатуры(Форма) Экспорт
	
	Если Форма.ВидНоменклатуры = Форма.ВидНоменклатурыДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если Не ЗначениеЗаполнено(Форма.ВидНоменклатуры)
		Или Не Форма.ИспользоватьФильтры Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Ложь);
		ОчиститьДеревоОтборов(Форма);
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоВидуНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Если ЭтоФормаПодбора
			Или	ЭтоФормаСпискаНоменклатуры
			Или ЭтоФормаВыбораНоменклатуры Тогда
			
			СохранитьПараметрыДереваОтбора(Форма, Ложь);
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
			
		Иначе
			
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			
		КонецЕсли;
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	КонецЕсли;
	
	Если ЭтоФормаПодбора Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
		УстановитьТекстыЗапросовСписковФормыПодбора(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку в таблицу параметров отбора, используется при работе варианта навигации
// по товарам "альтернативного" качества.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка, форма выбора.
//
Процедура УстановитьПараметрыДереваОтбораКачествоНовый(Форма) Экспорт
	
	СтрокаТаблицыПараметровОтбора = Форма.ТаблицаПараметровОтбора.Добавить();
	
	СтрокаТаблицыПараметровОтбора.ИмяРеквизита = "Качество";
	СтрокаТаблицыПараметровОтбора.ЗначениеОтбора = Перечисления.ГрадацииКачества.Новый;
	СтрокаТаблицыПараметровОтбора.Представление = "Новый";
	СтрокаТаблицыПараметровОтбора.ФиксированноеЗначение = Ложь;
	СтрокаТаблицыПараметровОтбора.Отбор = Истина;
	
КонецПроцедуры

// Вызывается из форм подборов при изменении значения сегмента номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииВидаЦеныПоставщика(Форма) Экспорт
	
	Если Не ВидЦеныПоставщикаИзменился(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоВидЦеныПоставщика(Форма);
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦенПоставщика(Форма);
	
КонецПроцедуры

// Для сброса флажков для свойств номенклатуры в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура СброситьОтборыПоСвойствам(Форма) Экспорт
	
	Для Каждого ОтборПервыйУровень Из Форма.ДеревоОтборов.ПолучитьЭлементы() Цикл
		
		Если ОтборПервыйУровень.Отбор Тогда
			
			ОтборПервыйУровень.Отбор = Ложь;
			
			Для Каждого ОтборВторойУровень Из ОтборПервыйУровень.ПолучитьЭлементы() Цикл
				ОтборВторойУровень.Отбор = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при выполнени команды отображения товаров другого качества
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреДругогоКачества(Форма) Экспорт
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	СтрокаТаблицыНоменклатуры = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущаяСтрока;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьФильтры = Истина;
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	ВариантНавигацииДоИзменения = Форма.ВариантНавигации;

	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества;
	Форма.НоменклатураИсходногоКачества = СтрокаТаблицыНоменклатуры.Ссылка;

	УстановитьСтраницуВариантаНавигации(Форма, ВариантНавигацииДоИзменения);
	ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
	НоменклатураИсходногоКачестваПриИзменении(Форма);
	ПерейтиКСпискуНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении значения сегмента номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииСегментаНоменклатуры(Форма) Экспорт
	
	Если Не СегментНоменклатурыИзменился(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоСегментуНоменклатуры(Форма);
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(Форма);
	
КонецПроцедуры

// Вызывается при выполнени команды отображения товаров с аналогичными свойствами
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииОтображенияНоменклатураСАналогичнымиСвойствами(Форма) Экспорт
	
	ТекущаяСтрока = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтфильтроватьПоАналогичнымСвойствам(Форма, ТекущаяСтрока.Ссылка);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыПоНаличиюПоЦенам

// Устанавливает отбор "Только в наличии" на список номенклатуры
// и характеристик в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборТолькоВНаличии(Форма) Экспорт
	
	// Для списка номенклатуры.
	ГруппаОтбораТолькоВНаличииНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ГруппаТолькоВНаличии", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбораТолькоВНаличииНоменклатура,
		"ВНаличииОстаток", 0, ВидСравненияКомпоновкиДанных.Больше,,Форма.ТолькоВНаличии);
		
	// Для списка характеристик.
	ГруппаОтбораТолькоВНаличииХарактеристики = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
		"ГруппаТолькоВНаличии", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбораТолькоВНаличииХарактеристики,
		"ВНаличииОстаток", 0, ВидСравненияКомпоновкиДанных.Больше,,Форма.ТолькоВНаличии);
	
	УстановитьАктивныйСписокНаФорме(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыВспомогательные

// Возвращает массив свойств по которым устанавливается отбор при отображении
// списка товаров с аналогичными свойствами в формах подборов.
//
// Параметры:
//	Номенклатура (СправочникСсылка.Номенклатура) - номенклатура для которой формируется массив свойств.
//
// Возвращаемое значение:
//	Массив. Массив свойств и значений свойств элемента номенклатуры по которым нужно
//	будет отобрать товары.
//
Функция СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура) Экспорт
	
	ДополнительныеРеквизиты = Новый Массив;
	Свойства = Новый Массив;
	
	// Получить имена и значения реквизитов которые используются для отбора.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита   КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство       КАК Свойство,
	|	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
	|ГДЕ
	|	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	КоличествоПолей = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	РеквизитыБыстрогоОтбораНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из РеквизитыБыстрогоОтбораНоменклатуры Цикл
		
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			ДополнительныеРеквизиты.Добавить(СтрокаТЧ.Свойство);
		Иначе
			
			КоличествоПолей = КоличествоПолей + 1;
			
			Если КоличествоПолей = 1 Тогда
				ТекстЗапроса = ТекстЗапроса + " " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			Иначе
				ТекстЗапроса = ТекстЗапроса + ", " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПолей > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса +" " + "Из Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка = &Номенклатура";
		
		Запрос = Новый Запрос(
		ТекстЗапроса +
		";
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Выборка = Результат[0].Выбрать(); // обход реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из Результат[0].Колонки Цикл
				
				НоваяСтрока = Новый Структура("ИмяРеквизита, Значение, Представление");
				
				НоваяСтрока.ИмяРеквизита = Колонка.Имя;
				НоваяСтрока.Значение     = Выборка[Колонка.Имя];
				
				Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(Колонка.Имя);
				
				НоваяСтрока.Представление = Реквизит.Синоним;
				
				Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение реквизита элемента номенклатуры
				
			КонецЦикла;
			
		КонецЦикла;
		
		Выборка = Результат[1].Выбрать(); // обход дополнительных реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Представление = Строка(Выборка.Свойство);
			
			Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение доп.реквизита вида номенклатуры
			
		КонецЦикла;
		
	Иначе
		
		// В том случае, если реквизиты вида номенклатуры не включены в панель быстрого отбора,
		// то в выходной массив добавляются только значения доп.реквизитов вида номенклатуры.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство        КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение        КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Представление = Строка(Выборка.Свойство);
			
			Свойства.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Устанавливает отбор на список номенклатуры по аналогичным свойствам вида номенклатуры переданного товара.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - товар по значениям свойств которого необходимо установить отбор списка номенклатуры.
//
Процедура ОтфильтроватьПоАналогичнымСвойствам(Форма, Номенклатура) Экспорт
	
	// Включить использование фильтров.
	Форма.ИспользоватьФильтры = Истина;
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	// Установить вариант навигации - "по свойствам".
	Если Не (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
		Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	КонецЕсли;
	
	УстановитьСтраницуВариантаНавигации(Форма);
	
	// Установить вид номенклатуры и заполнить дерево отборов.
	Форма.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	УстановитьОтборПоВидуНоменклатуры(Форма);
	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	
	// Получить список свойств и значений вида номенклатуры текущего товара..
	СвойстваДляПодбораТоваровСАналогичнымиСвойствами = СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура);
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	// Пройти по полученному списку свойств, проставить флажки использования.
	Для Каждого ДополнительноеСвойство Из СвойстваДляПодбораТоваровСАналогичнымиСвойствами Цикл
		
		Для Каждого Свойство Из ДеревоОтборов.Строки Цикл
			
				Для Каждого ЗначениеСвойства Из Свойство.Строки Цикл
				
				Если Не (ДополнительноеСвойство.Представление = Свойство.Представление) Тогда
					Продолжить;
				КонецЕсли;
				
				// Включить использование свойства в отборе, если значение дерева отбора аналогично 
				// значению списка свойств вида текущей номенклатуры.
				ЗначениеСвойства.Отбор = (ЗначениеСвойства.ЗначениеОтбора = ДополнительноеСвойство.Значение);
				
				Если ЗначениеСвойства.Отбор Тогда
					Свойство.Отбор = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
	// Флажки расставлены, теперь применить отборы к списку номенклатуры.
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискНаФормахПодборов

// Выполняет поиск номенклатуры по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Булево, Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискНоменклатуры(Форма) Экспорт
	
	ПоискВыполнен = Ложь;
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не Форма.ИспользоватьПолнотекстовыйПоиск Или Форма.НайтиНоменклатуруПоТочномуСоответствию Тогда
			ВыполнитьНеПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска);
		Иначе
			ВыполнитьПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска);
		КонецЕсли;
		ПоискВыполнен = Истина;
	КонецЕсли;
	
	Форма.ПоискНоменклатурыНеУдачный = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	
	ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		РезультатПоиска.Номенклатура, 
		ПоискВыполнен);
		
	Форма.ЕстьФильтрПоПоискуНоменклатуры = ПоискВыполнен;
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(Форма);
	КонецЕсли;
	
	Возврат ПоискВыполнен;
	
КонецФункции

// Выполняет поиск характеристик по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	Булево, Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискХарактеристик(Форма) Экспорт
	
	ПоискВыполнен = Ложь;
	
	Форма.ПоискХарактеристикНеУдачный = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	СтрокаПоиска = Форма.СтрокаПоискаХарактеристики;
	РезультатПоиска = СтруктураРезультатовПоиска();
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не Форма.ИспользоватьПолнотекстовыйПоиск Или Форма.НайтиХарактеристикиПоТочномуСоответствию Тогда
			ВыполнитьНеПолнотекстовыйПоискХарактеристик(Форма, РезультатПоиска);
		Иначе
			ВыполнитьПолнотекстовыйПоискХарактеристик(Форма, РезультатПоиска);
		КонецЕсли;
		ПоискВыполнен = Истина;
	КонецЕсли;
	
	Форма.ПоискХарактеристикНеУдачный = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	
	ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
		РезультатПоиска.ХарактеристикиНоменклатуры, ПоискВыполнен);
	
	Возврат ПоискВыполнен;
	
КонецФункции

// Выполняет поиск номенклатуры поставщика по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Булево, Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискНоменклатурыПоставщика(Форма) Экспорт
	
	ПоискВыполнен = Ложь;
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатураПоставщика;
	
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не Форма.ИспользоватьПолнотекстовыйПоиск Или Форма.НайтиНоменклатуруПоставщикаПоТочномуСоответствию Тогда
			ВыполнитьНеПолнотекстовыйПоискНоменклатурыПоставщика(Форма, РезультатПоиска);
		Иначе
			ВыполнитьПолнотекстовыйПоискНоменклатурыПоставщика(Форма, РезультатПоиска);
		КонецЕсли;
		ПоискВыполнен = Истина;
	КонецЕсли;
	
	Форма.ПоискНоменклатурыПоставщикаНеУдачный = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	
	ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатураПоставщика).Элементы,
		РезультатПоиска.НоменклатураПоставщиков, ПоискВыполнен);
	
	Возврат ПоискВыполнен;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Сохраняет значения реквизитов на форме в хранилище общих настроек.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора.
//
Процедура СохранитьНастройкиФормы(Форма) Экспорт
	
	НастройкиФормы = НастройкиФормы(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормы);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	СохранитьСпискиВыбора(Форма);
	
КонецПроцедуры

// Сохраняет значения реквизитов на форме подбора в хранилище общих настроек.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура СохранитьНастройкиФормыПодбора(Форма) Экспорт
	
	НастройкиФормыПодбора = НастройкиФормыПодбора(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормыПодбора);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	
КонецПроцедуры

// Восстанавливает значение реквизитов на форме из хранилища общих настроек.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора.
//
Процедура УстановитьЗначенияПоНастройкамФормы(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодобныеТоварыНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаПодобныеТоварыНоменклатуры(Форма);
	
	// Установить значения по умолчанию.
	Форма.ИспользоватьФильтры = Истина;
	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	
	Форма.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Форма.ТекущаяИерархияНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	
	// Получить настройку вариант поиска товаров.
	НастройкиВариантПоискаТоваров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВариантПоискаТоваров",  "");
	
	Если НастройкиВариантПоискаТоваров = Неопределено Тогда
		Форма.ВариантПоискаТоваров = "ПоУмолчанию";
	Иначе
		Форма.ВариантПоискаТоваров = НастройкиВариантПоискаТоваров;
	КонецЕсли;
	
	// Если есть сохраненные настройки, то установить значения по настройкам.
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы,  "");
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ИспользоватьФильтры") Тогда
			Форма.ИспользоватьФильтры = Настройки.ИспользоватьФильтры;
		КонецЕсли;
		
		Если Настройки.Свойство("ИспользоватьФильтрНоменклатураПоставщика") Тогда
			Форма.ИспользоватьФильтрНоменклатураПоставщика = Настройки.ИспользоватьФильтрНоменклатураПоставщика;
		КонецЕсли;
		
		Если Настройки.Свойство("ВариантНавигации")
			И ЗначениеЗаполнено(Настройки.ВариантНавигации) Тогда
			       
			ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры." + Настройки.ВариантНавигации);
			
			Если Не (ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
				Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам
				Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика) Тогда
				Форма.ВариантНавигации = ВариантНавигации;
			КонецЕсли;
			
			Если ЭтоФормаПодобныеТоварыНоменклатуры Тогда
				Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ТаблицаПараметровОтбора") Тогда
			Если ЗначениеЗаполнено(Настройки.ТаблицаПараметровОтбора) Тогда
				Форма.ТаблицаПараметровОтбора.Загрузить(Настройки.ТаблицаПараметровОтбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ВидНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ВидНоменклатуры) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.ВидНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
					
					Форма.ВидНоменклатуры = Настройки.ВидНоменклатуры;
					
					Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
							ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
						КонецЕсли;
						
					КонецЕсли;
					
					Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
							ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатуры") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатуры) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатуры.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатуры;
					Форма.ТекущаяИерархияНоменклатуры = Настройки.ТекущаяИерархияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатурыПоставщика") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатурыПоставщика) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатурыПоставщика.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
					Форма.ТекущаяИерархияНоменклатурыПоставщика = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("НоменклатураИсходногоКачества") Тогда
			Если ЗначениеЗаполнено(Настройки.НоменклатураИсходногоКачества) Тогда
				Если Не (Настройки.НоменклатураИсходногоКачества.ПолучитьОбъект() = Неопределено) Тогда
					Форма.НоменклатураИсходногоКачества = Настройки.НоменклатураИсходногоКачества;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить страницу варианта навигации по списку номенклатуры.
	УстановитьСтраницуВариантаНавигации(Форма);
	
	ПриИзмененииИспользованияФильтров(Форма);
	
	СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора);
	
	Если ЭтоФормаПодбора Тогда
		СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоискаХарактеристики.СписокВыбора);
		СпискиВыбораКлиентСервер.Загрузить("ИсторияВыбораСегментовНоменклатуры", Форма.Элементы.СегментНоменклатуры.СписокВыбора);
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма. Элементы.СтрокаПоискаНоменклатураПоставщика.СписокВыбора);
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.ВидыНоменклатуры) Тогда
		Форма.Элементы.ВидыНоменклатурыГруппаСоздать.Видимость = Ложь;
		Форма.Элементы.ВидыНоменклатурыИзменить.Видимость = Ложь;
		Форма.Элементы.ВидыНоменклатурыСкопировать.Видимость = Ложь;
		Форма.Элементы.ВидыНоменклатурыУстановитьПометкуУдаления.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОповещенийИзПомощниковДобавленияНовойНоменклатуры
// и новой характеристики.

// Вызывается при обработке оповещения создания новой номенклатуры из помощника
// добавления новой номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - источник события.
//
Процедура ПриЗаписиНовойНоменклатуры(Форма, Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	Форма.Элементы[ИмяСпискаНоменклатуры].ТекущаяСтрока = Номенклатура;
	
	ЗаполнитьПараметрыНовойНоменклатуры(Форма, Номенклатура);
	
	СоответствуетОтборуПоТипуНоменклатуры = НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма);
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры 
		И Форма.НоваяНоменклатура.ХарактеристикиИспользуются Тогда
		
		Если СоответствуетОтборуПоТипуНоменклатуры Тогда
			ПерейтиКСпискуХарактеристикНовойНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Форма.ТоварДляДобавленияВКорзину = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяНоменклатура);
		ЗаполнитьСкладТовараДляДобавлениявКорзину(Форма);
		
		Форма.ТоварДляДобавленияВКорзину.КоличествоУпаковок = 1;
		
		Если Не СоответствуетОтборуПоТипуНоменклатуры Тогда
			Форма.ТоварДляДобавленияВКорзину = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит формы "ТекущаяСтрокаНоменклатуры" значениями реквизитов элемента номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - созданный элемент номенклатуры.
//
Процедура ЗаполнитьПараметрыНовойНоменклатуры(Форма, Номенклатура)
	
	Форма.НоваяНоменклатура = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
	
	РеквизитыНоменклатуры = "Ссылка, ЭтоГруппа, Родитель, ПометкаУдаления, ВидНоменклатуры, ЕдиницаИзмерения, 
	|ИспользованиеХарактеристик, ТипНоменклатуры, ЦеноваяГруппа";
	
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, РеквизитыНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(Форма.НоваяНоменклатура, ЗначенияРеквизитовНоменклатуры);
	
	Форма.НоваяНоменклатура.Номенклатура = Номенклатура;
	Форма.НоваяНоменклатура.ХарактеристикиИспользуются = 
		Не (ЗначенияРеквизитовНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	Форма.НоваяНоменклатура.ЭтоТовар  = (ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
										Или ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	Форма.НоваяНоменклатура.ЭтоУслуга = (ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
										Или ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	Форма.НоваяНоменклатура.ВладелецХарактеристик = ВладелецХарактеристикНоменклатуры(Номенклатура);
	
КонецПроцедуры

// Вызывается при обработке оповещения создания новой характеристики из помощника
// добавления новой характеристики.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - источник события.
//
Процедура ПриЗаписиНовойХарактеристики(Форма, Характеристика) Экспорт
	
	Если Не ЗначениеЗаполнено(Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)].ТекущаяСтрока = Характеристика;
	
	ЗаполнитьПараметрыНовойХарактеристики(Форма, Характеристика);
	
	Форма.ТоварДляДобавленияВКорзину = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	ЗаполнитьЗначенияСвойств(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяХарактеристика);
	ЗаполнитьСвойстваТовараДляДобавленияВКорзинуПоТипуНоменклатуры(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяХарактеристика.ТипНоменклатуры);
	ЗаполнитьСкладТовараДляДобавлениявКорзину(Форма);
	
	Форма.ТоварДляДобавленияВКорзину.КоличествоУпаковок = 1;
	
	// Проверить, если новый товар не соответствует отбору по типу номенклатуры, то не добавлять его в корзину.
	Если Не НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма) Тогда
		Форма.ТоварДляДобавленияВКорзину = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит формы "НоваяХарактеристика" значениями реквизитов новой характеристики.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	Характеристика - СправочникСсылка.Характеристики - характеристика.
//
Процедура ЗаполнитьПараметрыНовойХарактеристики(Форма, Характеристика)
	
	Форма.НоваяХарактеристика = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	
	Форма.НоваяХарактеристика.Ссылка = Характеристика;
	Форма.НоваяХарактеристика.Характеристика = Характеристика;
	
	Если ЗначениеЗаполнено(Форма.НоваяНоменклатура) Тогда
		ПараметрыНоменклатуры = Форма.НоваяНоменклатура;
	Иначе
		ПараметрыНоменклатуры = Форма.ТекущаяСтрокаНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма.НоваяХарактеристика, ПараметрыНоменклатуры);
	
КонецПроцедуры

// Проверяет соответствует ли тип номенклатуры созданного товара типу номенклатуры
// установленного в качестве отбора списка номенклатуры в форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Функция НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма)
	
	Перем ТипыНоменклатурыОтбора;
	
	Если Не ЗначениеЗаполнено(Форма.НоваяНоменклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если отбор по типу номенклатуры не установлен, то в корзину можно добавлять
	// товары любого типа.
	Если Не УстановленОтборПоТипуНоменклатуры(Форма, ТипыНоменклатурыОтбора) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипНоменклатурыТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.НоваяНоменклатура.ВидНоменклатуры, "ТипНоменклатуры");
	
	// Если тип номенклатуры товара отсутствует в списке типов установленных в качестве
	// типов отбора, то, стало быть, не соответствует.
	Если ТипыНоменклатурыОтбора.НайтиПоЗначению(ТипНоменклатурыТовара) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, установлен ли отбор по типу номенклатуры у списка номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	ТипыНоменклатурыОтбора - Неопределено - переменная в которую передается значение установленного 
//		отбора по типу номенклатуры. В качестве значений установленного отбора всегда используется
//		список значений. Отбор по типу номенклатуры устанавливается в процедуре 
//		<УстановитьОтборПоТипуНоменклатурыПоПараметрам>.
//
// Возвращаемое значение:
//	Булево. Истина - установлен, Ложь - нет.
//
Функция УстановленОтборПоТипуНоменклатуры(Форма, ТипыНоменклатурыОтбора = Неопределено)
	
	Для Каждого ЭлементОтбора Из ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы Цикл
		
		Если ЭлементОтбора.Представление = "ОтборПоТипуНоменклатуры" 
			И ЭлементОтбора.Использование Тогда
			
			Если Не ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					
					Если ЭлементОтбора.ПравоеЗначение.Количество() > 0 Тогда
						
						ТипыНоменклатурыОтбора = ЭлементОтбора.ПравоеЗначение;
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				Если ЭлементОтбора.Элементы.Количество() > 0 И ТипЗнч(ЭлементОтбора.Элементы[0].ПравоеЗначение) = Тип("СписокЗначений") Тогда
					
					Если ЭлементОтбора.Элементы[0].ПравоеЗначение.Количество() > 0 Тогда
						
						ТипыНоменклатурыОтбора = ЭлементОтбора.Элементы[0].ПравоеЗначение;
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет поля "ЭтоТовар", "ЭтоУслуга" структуры ТоварДляДобавленияВКорзину.
//
// Параметры:
//	ТоварДляДобавленияВКорзину - Структура - параметры товара для добавления в корзину,
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры.
//
Процедура ЗаполнитьСвойстваТовараДляДобавленияВКорзинуПоТипуНоменклатуры(ТоварДляДобавленияВКорзину, ТипНоменклатуры)
	
	ТоварДляДобавленияВКорзину.ЭтоТовар = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ТоварДляДобавленияВКорзину.ЭтоУслуга = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
КонецПроцедуры

// Анализирует настройки формы подбора в части указания склада и заполняет
// поле "Склад" добавляемого в корзину товара.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура ЗаполнитьСкладТовараДляДобавлениявКорзину(Форма)
	
	Если Не Форма.ТоварДляДобавленияВКорзину.ЭтоТовар Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСкладов = Форма.Склады.Количество();
	
	Если Не КоличествоСкладов = 1 Или КоличествоСкладов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Форма.Склады.Получить(0).Значение;
	
	Если Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
		Форма.ТоварДляДобавленияВКорзину.Склад = Склад;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Выполняет попытку загрузить настройки из общего хранилища настроек
// по имени ключа объекта. Если настройки в общем хранилище есть, значит форма
// уже открывалась, если нет, значит это первое открытие формы.
//
// Параметры:
//	КлючОбъекта - Строка - ключ объекта настроек формы.
//
Функция ПервоеОткрытиеФормы(КлючОбъекта) Экспорт
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, "");
	
	Если НастройкиФормы = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает владельца характеристик номенклатуры. В зависимости от настроек
// вида номенклатуры это может быть либо вид номенклатуры, либо номенклатура.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//
// Возвращаемое значение:
//	СправочникСсылка.Номенклатура, СправочникСсылка.ВидыНоменклатуры, Неопределено.
//
Функция ВладелецХарактеристикНоменклатуры(Номенклатура)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ВидНоменклатуры,ИспользованиеХарактеристик,ВладелецХарактеристик");
	
	Если Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
		Возврат Реквизиты.ВидНоменклатуры;
	ИначеЕсли Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		Возврат Номенклатура;
	ИначеЕсли Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
		Возврат Реквизиты.ВладелецХарактеристик;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру параметров для создания новой номенклатуры из форм подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Функция ПараметрыСозданияНовойНоменклатуры(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Родитель, ВидНоменклатуры, АдресТаблицыПараметров, АдресТаблицыСопоставления");
	
	Если Форма.ИспользоватьФильтры Тогда
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
			
			ПараметрыФормы.Родитель = ?(ЗначениеЗаполнено(Форма.ТекущаяИерархияНоменклатуры), Форма.ТекущаяИерархияНоменклатуры, Справочники.Номенклатура.ПустаяСсылка());
			
		ИначеЕсли (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
					Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам)Тогда
			
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыФормы.ВидНоменклатуры = Форма.ВидНоменклатуры;
				ПараметрыФормы.АдресТаблицыПараметров = АдресТаблицыПараметровДереваОтборов(Форма);
				ПараметрыФормы.АдресТаблицыСопоставления = АдресТаблицыСопоставленияДереваОтборов(Форма)
			КонецЕсли;
			
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыФормы.ВидНоменклатуры = Форма.ВидНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Возвращает структуру параметров для создания новой характеристики из форм подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Функция ПараметрыСозданияНовойХарактеристики(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Владелец, ВидНоменклатуры, АдресТаблицы");
	
	// Параметры создания новой характеристики можно получить из параметров
	// динамического списка характеристик, т.к. в общем случае отбор может быть
	// наложен как по номенклатуре отображенной в списке номенклатуры,
	// так и по новой номенклатуре, которая в списке не отобразилась.
	
	ПараметрыСпискаХарактеристик = Форма.СписокХарактеристики.Параметры.Элементы;
	
	// ... получить значение параметра номенклатуры.
	Параметр = ПараметрыСпискаХарактеристик.Найти("Номенклатура");
	
	Если Не (Параметр = Неопределено) Тогда
		ПараметрыФормы.Владелец = ВладелецХарактеристикНоменклатуры(Параметр.Значение);
	КонецЕсли;
	
	// ... получить значение параметра вида номенклатуры.
	Параметр = ПараметрыСпискаХарактеристик.Найти("ВидНоменклатуры");
	
	Если Не (Параметр = Неопределено) Тогда
		ПараметрыФормы.ВидНоменклатуры = Параметр.Значение;
	КонецЕсли;
	
	Если Форма.ИспользоватьФильтры Тогда
		Если (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам)Тогда
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыФормы.АдресТаблицы = АдресТаблицыПараметровДереваОтборов(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ФормированиеТекстовЗапросовДинамическихСписковНаФормахПодборов

// Возвращает текст запроса для динамического списка формы подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - фомра подбора,
//	ТипСписка - Строка - тип списка формы подбора
//
// Возвращаемое значение:
//	Строка - текст запроса списка формы подбора.
//
Функция ТекстЗапросаСпискаФормыПодбора(Форма, ТипСписка)
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		ЭтоПартнер = ПраваПользователяПовтИсп.ЭтоПартнер();
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			
			Если ЭтоПартнер Тогда
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыДляВнешнихПользователей();
			ИначеЕсли Форма.РежимОтбораПоАссортименту Тогда
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыСОтборомПоАссортименту();
			Иначе
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПокупателем(Форма);
			КонецЕсли;
			
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			
			Если ЭтоПартнер Тогда
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикДляВнешнихПользователей();
			ИначеЕсли Форма.РежимОтбораПоАссортименту Тогда
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикСОтборомПоАссортименту();
			Иначе
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрамСоглашенияСПокупателем(Форма);
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению";
		Если ЗначениеЗаполнено(Форма.Объект.Соглашение) Тогда
			Форма.ВидЦеныПоставщика = Форма.Объект.Соглашение.ВидЦеныПоставщика;
		КонецЕсли;
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		ИначеЕсли ТипСписка = "СписокНоменклатураПоставщика" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПоставщикаПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		КонецЕсли; 
		
	КонецЕсли;
	
#Область ПодставитьЗначенияПараметровВШаблонТекстаЗапроса	
	НесколькоСкладов = (Форма.Склады.Количество() > 1);
	
	Соглашение = Форма.Соглашение;
	ДатаПодбора = Форма.Дата;
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		ЕстьЦеныВБудущем = Форма.ЕстьЦеныВБудущем;
		НесколькоВидовЦен = Форма.ВидыЦен.Количество() > 1;
		ТолькоСЦенами = Форма.ТолькоСЦенами;
		ОтображатьОстаткиПоНазначению = ЗначениеЗаполнено(Форма.ОтборПоНазначению);
		
	Иначе
		
		ЕстьЦеныВБудущем = Ложь;
		НесколькоВидовЦен = Ложь;
		ТолькоСЦенами = Ложь;
	    ОтображатьОстаткиПоНазначению = Ложь;
		
	КонецЕсли; 
	
	ИспользоватьХарактеристикиНоменклатуры = Ложь;
	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		Если Форма.ИспользоватьФильтры
			И (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) 
			И ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда	
			ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ВидНоменклатуры,"ИспользованиеХарактеристик");
			Если ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда	
				ИспользоватьХарактеристикиНоменклатуры = Истина;
			КонецЕсли;
		Иначе	
			ИспользоватьХарактеристикиНоменклатуры = Истина;
		КонецЕсли;	
	КонецЕсли;		
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("ТипСписка",ТипСписка);
	ПараметрыЗамены.Вставить("НесколькоСкладов",НесколькоСкладов);
	ПараметрыЗамены.Вставить("НесколькоВидовЦен",НесколькоВидовЦен);
	ПараметрыЗамены.Вставить("ЕстьЦеныВБудущем",ЕстьЦеныВБудущем);
	ПараметрыЗамены.Вставить("ТолькоСЦенами",ТолькоСЦенами);
	ПараметрыЗамены.Вставить("ИспользоватьХарактеристикиНоменклатуры",ИспользоватьХарактеристикиНоменклатуры);
	ПараметрыЗамены.Вставить("ОтображатьОстаткиПоНазначению",ОтображатьОстаткиПоНазначению);
	ПараметрыЗамены.Вставить("РежимПодбораБезСуммовыхПараметров", Форма.РежимПодбораБезСуммовыхПараметров);
	
	МассивПодстрокПоиска = ПараметрыШаблонаТекстаЗапроса();
	
	Для каждого ПодстрокаПоиска Из МассивПодстрокПоиска Цикл
		
		ПодстрокаЗамены = ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса(ПодстрокаПоиска, ПараметрыЗамены);
		ШаблонТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
#КонецОбласти	

	Возврат ШаблонТекстЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса для списка характеристик в списке формы подбора документа "Чек ККМ".
//
// Параметры:
//	КонтролироватьАссортимент - Булево - признак включения ФО "Использовать ассортимент".
//
// Возвращаемое значение:
//	Строка - шаблон текста запроса.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикСОтборомПоАссортименту()
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	
	|	{СправочникХарактеристикиОбщиеПоля}
	
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
	|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
	
	|ИЗ
	
	|	{СправочникХарактеристики}
	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|			ОбъектПланирования = &ОбъектПланирования 
	|				И Номенклатура = &Номенклатура) КАК Ассортимент
	|		ПО Ассортимент.РазрешеныПродажи
	
	|		{СвободныеОстатки}
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|				{(Характеристика).* КАК Характеристика}
	|			) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦены)
	|			И (ЦеныНоменклатуры.Номенклатура = &Номенклатура)
	|			И (ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	
	|		{КурсВалютыЦены}
	|		{КурсВалютыДокумента}
	|		{ВсеОстатки}
	
	|ГДЕ
	
	|	{ОтборХарактеристикПоВладельцу}
	|	{ОтборХарактеристикПоСегменту}
	
	|";
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса для списка номенклатуры в списке формы подбора документа "Чек ККМ".
//
// Параметры:
//	КонтролироватьАссортимент - Булево - признак включения ФО "Использовать ассортимент".
//
// Возвращаемое значение:
//	Строка - шаблон текста запроса.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыСОтборомПоАссортименту()
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	
	|	{СправочникНоменклатураОбщиеПоля}
	
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
	|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
	
	|ИЗ
	
	|	{СправочникНоменклатура}
	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				ОбъектПланирования = &ОбъектПланирования
	|			{(Номенклатура).* КАК Номенклатура}
	|			) КАК Ассортимент
	|		ПО СправочникНоменклатура.Ссылка = Ассортимент.Номенклатура
	|			И (Ассортимент.РазрешеныПродажи)
	
	|		{ВсеОстатки}
	|		{ЦеныНоменклатуры}
	|		И (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦены)
	
	|		{КурсВалютыЦены}
	|		{КурсВалютыДокумента}
	|		{ВсеОстатки}
	
	|ГДЕ
	
	|	{ОтборНоменклатурыПоГруппе}
	|	{ОтборНоменклатурыПоСегменту}
	
	|";
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса списка номенклатуры для подбора в обработке формирования заказов внешними пользователями.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыДляВнешнихПользователей()
	
	// Из текста запроса исключается таблица "ВсеОстатки".
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	
	|	{СправочникНоменклатураОбщиеПоля}
	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА СоглашениеТовары.Упаковка
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|	КОНЕЦ КАК Упаковка,
	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
	|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
	|							ТОГДА СоглашениеТовары.ВидЦены
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
	|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|									Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеШапка.ВидЦен
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
	|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	
	|ИЗ
	
	|	{СправочникНоменклатура}
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
	|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|	ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
	
	|	{ЦеныНоменклатуры}
	|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
	|				ТОГДА СоглашениеТовары.ВидЦены
	|			КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|					И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
	|					И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|			КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|					И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|						Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|					И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА СоглашениеШапка.ВидЦен
	|		КОНЕЦ)
	
	|	{КурсВалютыСоглашения}
	|	{КурсВалютыЦены}
	|	{КурсВалютыДокумента}
	
	|ГДЕ
	
	|	{ОтборНоменклатурыПоГруппе}
	|	{ОтборНоменклатурыПоЦене}
	|	{ОтборНоменклатурыПоСегменту}
	
	|";
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса списка характеристик для подбора в обработке формирования заказов внешними пользователями.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикДляВнешнихПользователей()
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	
	|	{СправочникХарактеристикиОбщиеПоля}
	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА СоглашениеТовары.Упаковка
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|	КОНЕЦ КАК Упаковка,
	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
	|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|							ТОГДА СоглашениеТовары.ВидЦены
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеШапка.ВидЦен
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
	|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	
	|ИЗ
	
	|	{СправочникХарактеристики}
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И (&Номенклатура = СоглашениеТовары.Номенклатура)
	|			И (СоглашениеТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|			И (&ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
	
	|		{ЦеныНоменклатуры}
	|		И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|					ТОГДА СоглашениеТовары.ВидЦены
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеШапка.ВидЦен
	|			КОНЕЦ)
	
	|		{КурсВалютыСоглашения}
	|		{КурсВалютыЦены}
	|		{КурсВалютыДокумента}
	
	|ГДЕ
	
	|	{ОтборХарактеристикПоВладельцу}
	|	{ОтборХарактеристикПоСегменту}
	
	|";
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса списка характеристик для подборов в документы продажи.
//
// Параметры:
//	ВариантРасчетаЦен - ПеречислениеСсылка.ВариантыРасчетаЦенПоСоглашениямСКлиентами - вариант расчета цен.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрамСоглашенияСПокупателем(Форма)
	
	ВариантРасчетаЦен = Форма.ВариантРасчетаЦен;
	
	Если ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
		
		|	0 КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	&ВидыЦен КАК ВидЦены,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = &ВидыЦен)
		
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	Иначе
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеШапка.ВидЦен
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеШапка.ВидЦен
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|			И (&Номенклатура = СоглашениеТовары.Номенклатура)
		|			И (СоглашениеТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
		|			И (&ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
		
		|		{ЦеныНоменклатуры}
		|		И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|					ТОГДА СоглашениеТовары.ВидЦены
		|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					ТОГДА СоглашениеШапка.ВидЦен
		|			КОНЕЦ)
		
		|		{КурсВалютыСоглашения}
		|		{КурсВалютыЦены}
		|		{КурсВалютыДокумента}
		
		|		{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры по варианту расчета цены.
//
// Параметры:
//	ВариантРасчетаЦен - ПеречислениеСсылка.ВариантыРасчетаЦенПоСоглашениямСКлиентами - вариант расчета цены.
//
// Возвращаемое значение:
//	Строка - текст запроса списка номенклатуры по варианту расчета цен соглашения с клиентом.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПокупателем(Форма)
	
	ВариантРасчетаЦен = Форма.ВариантРасчетаЦен;
	
	Если ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоЦеновымГруппам Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, СоглашениеШапка.ВидЦен) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоНоменклатуреУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыСоглашения}
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыСоглашения}
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоЦеновымГруппамВидыЦенПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоЦеновымГруппамВидыЦенПоНоменклатуреУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыСоглашения}
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоЦеновымГруппамУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыСоглашения}
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоЦеновымГруппамВидыЦенПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	КонецЕсли;
	
	Если ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоЦеновымГруппамВидыЦенПоНоменклатуреУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыСоглашения}
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоЦеновымГруппамУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	{КурсВалютыСоглашения}
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	&ВидыЦен КАК ВидЦены,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = &ВидыЦен)
		
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоЦеновымГруппам Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = СоглашениеЦеновыеГруппы.ВидЦен)
		
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = СоглашениеТовары.ВидЦены) 
		
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоНоменклатуреУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ТОГДА СоглашениеТовары.ВидЦены
		|				КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ИЛИ ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	{ЦеныНоменклатуры}
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|		КОНЕЦ)
		
		|	{КурсВалютыСоглашения}
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.УточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СоглашениеТовары.Цена, 0) * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	{КурсВалютыСоглашения}
		|	{КурсВалютыДокумента}
		
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашениеТовары.Упаковка",
		"СоглашениеТовары.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка характеристик по параметрам соглашения с поставщиком.
//
// Параметры:
//	ВариантРасчетаЦеныПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	Строка - текст запроса списка характеристик.
//
Функция ШаблонТекстаЗапросаспискаХарактеристикПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ВЫРАЗИТЬ((ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) КАК ЧИСЛО(15, 2))) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&Дата,
		|					ВидЦеныПоставщика = &ВидЦеныПоставщика
		|					И Номенклатура = &Номенклатура
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО (ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = &ВидЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = &Номенклатура)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		{КурсВалютыДокумента}
		|		{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиков.Упаковка",
		"ЦеныНоменклатурыПоставщиков.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры по параметрам соглашения с поставщиком.
//
// Параметры:
//	ВариантРасчетаЦеныПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	Строка - текст запроса списка номенклатуры.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&Дата,
		|					ВидЦеныПоставщика = &ВидЦеныПоставщика
		|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|					{(Номенклатура).* КАК Номенклатура}
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО (ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = &ВидЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = СправочникНоменклатура.Ссылка)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		{КурсВалютыДокумента}
		|		{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиков.Упаковка",
		"ЦеныНоменклатурыПоставщиков.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры поставщика по параметрам соглашения с поставщиком.
//
// Параметры:
//	ВариантРасчетаЦеныПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	Строка - текст запроса списка номенклатуры поставщика.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПоставщикаПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураПоставщиковОбщиеПоля}
		
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка) КАК ВидЦеныПоставщика
		
		|ИЗ
		
		|	{СправочникНоменклатураПоставщиков}";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураПоставщиковОбщиеПоля}
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика
		
		|ИЗ
		
		|	{СправочникНоменклатураПоставщиков}
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&Дата,
		|				 ВидЦеныПоставщика = &ВидЦеныПоставщика
		|				{(Номенклатура).* КАК Номенклатура}
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО (ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = &ВидЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = СправочникНоменклатураПоставщиков.Номенклатура)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = СправочникНоменклатураПоставщиков.Характеристика)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		{КурсВалютыДокумента}
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает массив подстрок поиска для поиска и замены в шаблоне текста запроса списка формы подбора.
//
// Возвращаемое значение:
//	Массив - массив строк.
//
Функция ПараметрыШаблонаТекстаЗапроса()
	
	ПараметрыШаблона = Новый Массив();
	
	ПараметрыШаблона.Добавить("{СправочникНоменклатура}");
	ПараметрыШаблона.Добавить("{СправочникХарактеристики}");
	ПараметрыШаблона.Добавить("{СправочникНоменклатураПоставщиков}");
	
	ПараметрыШаблона.Добавить("{СправочникНоменклатураОбщиеПоля}");
	ПараметрыШаблона.Добавить("{СправочникХарактеристикиОбщиеПоля}");
	ПараметрыШаблона.Добавить("{СправочникНоменклатураПоставщиковОбщиеПоля}");
	
	ПараметрыШаблона.Добавить("{ОтборНоменклатурыПоГруппе}");
	ПараметрыШаблона.Добавить("{ОтборНоменклатурыПоЦене}");
	ПараметрыШаблона.Добавить("{ОтборПоЗначениюЦены}");
	ПараметрыШаблона.Добавить("{ОтборНоменклатурыПоСегменту}");
	
	ПараметрыШаблона.Добавить("{КурсВалютыСоглашения}");
	ПараметрыШаблона.Добавить("{КурсВалютыДокумента}");
	ПараметрыШаблона.Добавить("{КурсВалютыЦены}");
	
	ПараметрыШаблона.Добавить("{ЦеныНоменклатуры}");
	
	ПараметрыШаблона.Добавить("{ОтборХарактеристикПоВладельцу}");
	ПараметрыШаблона.Добавить("{ОтборХарактеристикПоСегменту}");
	
	ПараметрыШаблона.Добавить("{ВсеОстатки}");
	ПараметрыШаблона.Добавить("{СвободныеОстатки}");
	ПараметрыШаблона.Добавить("{ДоступныеОстаткиПланируемыхПоступлений}");
	
	ПараметрыШаблона.Добавить("{СвободныеОстаткиВНаличии}");
	ПараметрыШаблона.Добавить("{ВсеОстаткиДоступно}");
	
	Возврат ПараметрыШаблона;
	
КонецФункции

// Возвращает подстроку замены для подстановки в шаблон текста запроса.
//
// Параметры:
//	ПодстрокаПоиска - Строка - подстрока поиска,
//	ТипСписка - Строка - тип списка формы подбора,
//	НесколькоСкладов - Булево - признак использования нескольких складов,
//	НесколькоВидовЦен - Булево - признак использования нескольких видов цен,
//	ЕстьЦеныВБудущем - Булево - признак установки цен будущей датой,
//	ТолькоСЦенами - Булево - признак отображения записей только с ценами.
//
// Возвращаемое значение:
//	Строка - подстрока замены для подстановки в шаблон текста запроса.
//
Функция ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса(ПодстрокаПоиска, ПараметрыЗамены)
		
	ТипСписка = ПараметрыЗамены.ТипСписка;
	НесколькоСкладов = ПараметрыЗамены.НесколькоСкладов;
	НесколькоВидовЦен = ПараметрыЗамены.НесколькоВидовЦен;
	ЕстьЦеныВБудущем = ПараметрыЗамены.ЕстьЦеныВБудущем;
	ТолькоСЦенами = ПараметрыЗамены.ТолькоСЦенами;
	ИспользоватьХарактеристикиНоменклатуры = ПараметрыЗамены.ИспользоватьХарактеристикиНоменклатуры;
	ОтображатьОстаткиПоНазначению = ПараметрыЗамены.ОтображатьОстаткиПоНазначению;
	РежимПодбораБезСуммовыхПараметров = ПараметрыЗамены.РежимПодбораБезСуммовыхПараметров;
	
	Если ПодстрокаПоиска = "{СправочникНоменклатура}" Тогда
		
		ПодстрокаЗамены = "
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО ВариантыКомплектацииНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
		|		И ВариантыКомплектацииНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		И ВариантыКомплектацииНоменклатуры.Основной
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникХарактеристики}" Тогда
		
		ПодстрокаЗамены = "
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
		|		ПО ВариантыКомплектацииНоменклатуры.Владелец = &Номенклатура
		|		И ВариантыКомплектацииНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка
		|		И ВариантыКомплектацииНоменклатуры.Основной
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникНоменклатураПоставщиков}" Тогда
		
		ПодстрокаЗамены = "
		|	Справочник.НоменклатураПоставщиков КАК СправочникНоменклатураПоставщиков
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникНоменклатураОбщиеПоля}" Тогда
		
		ПодстрокаЗамены = "
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	СправочникНоменклатура.Код КАК Код,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникНоменклатура.Родитель КАК Родитель,
		|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.Ссылка КАК ЭлементСписка,
		|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	
		|	ВЫБОР КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор) ТОГДА
		|		ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора, ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка))
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
		|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
		|	ВариантыКомплектацииНоменклатуры.СодержитТовары КАК СодержитТовары,
		|	ВариантыКомплектацииНоменклатуры.СодержитУслуги КАК СодержитУслуги,
		|	
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Качество КАК Качество,
		|	СправочникНоменклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)) И ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитТовары, ЛОЖЬ) И Не ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитУслуги, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|			ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)) И ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитУслуги, ЛОЖЬ) И НЕ ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.СодержитТовары, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоУслуга,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА СправочникНоменклатура.ВидНоменклатуры
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА СправочникНоменклатура.Ссылка
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА СправочникНоменклатура.ВладелецХарактеристик
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК ВладелецХарактеристик,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА СправочникНоменклатура.ПометкаУдаления
		|						ТОГДА 13
		|					ИНАЧЕ 12
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СправочникНоменклатура.ЕстьТоварыДругогоКачества
		|					ТОГДА 4 + ВЫБОР
		|							КОГДА СправочникНоменклатура.ПометкаУдаления
		|								ТОГДА 1
		|							ИНАЧЕ 0
		|						КОНЕЦ + ВЫБОР
		|							КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА 0
		|							ИНАЧЕ 2
		|						КОНЕЦ
		|				ИНАЧЕ -1 + ВЫБОР
		|						КОГДА СправочникНоменклатура.ПометкаУдаления
		|							ТОГДА 1
		|						ИНАЧЕ 0
		|					КОНЕЦ + ВЫБОР
		|						КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|							ТОГДА 1
		|						ИНАЧЕ 3
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинки,
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникХарактеристикиОбщиеПоля}" Тогда
		
		ПодстрокаЗамены = "
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ХарактеристикиИспользуются,
		|	&Номенклатура КАК Номенклатура,
		|	&ТипНоменклатуры КАК ТипНоменклатуры,
		|	
		|	ВЫБОР КОГДА &ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор) ТОГДА
		|		ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора, ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка))
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
		|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
		|	ВариантыКомплектацииНоменклатуры.СодержитТовары КАК СодержитТовары,
		|	ВариантыКомплектацииНоменклатуры.СодержитУслуги КАК СодержитУслуги,
		|	
		|	&ВидНоменклатуры КАК ВидНоменклатуры,
		|	&ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	&ВладелецХарактеристик,
		|	ВЫБОР
		|		КОГДА ХарактеристикиНоменклатуры.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексКартинки,
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникНоменклатураПоставщиковОбщиеПоля}" Тогда
		
		ПодстрокаЗамены = "
		|	СправочникНоменклатураПоставщиков.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникНоменклатураПоставщиков.Предопределенный КАК Предопределенный,
		|	СправочникНоменклатураПоставщиков.Владелец КАК Владелец,
		|	СправочникНоменклатураПоставщиков.Родитель КАК Родитель,
		|	СправочникНоменклатураПоставщиков.ЭтоГруппа КАК ЭтоГруппа,
		|	СправочникНоменклатураПоставщиков.Наименование КАК Наименование,
		|	СправочникНоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	СправочникНоменклатураПоставщиков.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СправочникНоменклатураПоставщиков.Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	СправочникНоменклатураПоставщиков.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	СправочникНоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	СправочникНоменклатураПоставщиков.Упаковка КАК Упаковка,
		|	СправочникНоменклатураПоставщиков.Артикул КАК Артикул,
		|	СправочникНоменклатураПоставщиков.Код КАК Код,
		|	СправочникНоменклатураПоставщиков.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	СправочникНоменклатураПоставщиков.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураПоставщиков.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураПоставщиков.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоУслуга,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураПоставщиков.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА СправочникНоменклатураПоставщиков.ПометкаУдаления
		|						ТОГДА 13
		|					ИНАЧЕ 12
		|				КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинки,
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборНоменклатурыПоГруппе}" Тогда
		
		ПодстрокаЗамены = "
		|	НЕ СправочникНоменклатура.ЭтоГруппа
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборПоЗначениюЦены}" Тогда
		
		Если ТолькоСЦенами Тогда
			ПодстрокаЗамены = "
			|	И ЦеныНоменклатуры.Цена <> 0
			|";
		Иначе
			ПодстрокаЗамены = "";
		КонецЕсли;
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборНоменклатурыПоЦене}" Тогда
		
		Если Не РежимПодбораБезСуммовыхПараметров Тогда
			ПодстрокаЗамены = "
			|	И (ВЫБОР
			|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|		КОНЕЦ ИЛИ ВЫБОР
			|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
			|			ТОГДА СоглашениеТовары.Цена * ВЫБОР
			|					КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
			|						ТОГДА ВЫБОР
			|								КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|									ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
			|								ИНАЧЕ 0
			|							КОНЕЦ
			|					ИНАЧЕ 1
			|				КОНЕЦ
			|		КОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
			|						ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|					КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|							И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
			|						ТОГДА СоглашениеТовары.ВидЦены
			|					КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|							Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
			|							И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
			|							И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|						ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
			|					КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|							Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
			|							И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
			|								Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|							И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|						ТОГДА СоглашениеШапка.ВидЦен
			|				КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|				И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
			|			ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
			|					КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
			|						ТОГДА ВЫБОР
			|								КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|									ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
			|								ИНАЧЕ 0
			|							КОНЕЦ
			|					ИНАЧЕ 1
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ <> 0 ИЛИ ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих))
			|";
		Иначе
			ПодстрокаЗамены = "";
		КонецЕсли;
	
	ИначеЕсли ПодстрокаПоиска = "{ОтборНоменклатурыПоСегменту}" Тогда
		
		ПодстрокаЗамены = "
		|{ГДЕ
		|	(1 В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			1
		|		ИЗ
		|			РегистрСведений.НоменклатураСегмента КАК Сегменты
		|		ГДЕ
		|			Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
		|			И Сегменты.Сегмент = &СегментНоменклатуры))}
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{КурсВалютыДокумента}" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
		|	ПО (ИСТИНА)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{КурсВалютыСоглашения}" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаСоглашения
		|	ПО (КурсыСрезПоследнихВалютаСоглашения.Валюта = СоглашениеТовары.Ссылка.Валюта)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{КурсВалютыЦены}" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
		|	ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{ЦеныНоменклатуры}" Тогда
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			
			ПодстрокаЗамены = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			{УсловиеОтбораПоДате},
			|			{УсловиеОтбораПоВидуЦен}
			|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			{(Номенклатура).* КАК Номенклатура}
			|		) КАК ЦеныНоменклатуры
			|	ПО (ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
			|		И (ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
			
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			
			ПодстрокаЗамены = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			{УсловиеОтбораПоДате},
			|			{УсловиеОтбораПоВидуЦен}
			|				И Номенклатура = &Номенклатура
			|			{(Характеристика).* КАК Характеристика}
			|		) КАК ЦеныНоменклатуры
			|	ПО (ЦеныНоменклатуры.Номенклатура = &Номенклатура)
			|		И (ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
			|";
			
		КонецЕсли; 
		
		УсловиеОтбораПоДате = ?(ЕстьЦеныВБудущем, "&Дата", "");
		УсловиеОтбораПоВидуЦен = ?(НесколькоВидовЦен, "ВидЦены В (&ВидыЦен)", "ВидЦены = &ВидыЦен");
		
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоДате}", УсловиеОтбораПоДате);
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоВидуЦен}", УсловиеОтбораПоВидуЦен);
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборХарактеристикПоВладельцу}" Тогда
		
		ПодстрокаЗамены = "
		|	ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристик
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборХарактеристикПоСегменту}" Тогда
		
		ПодстрокаЗамены = "
		|{ГДЕ
		|	(1 В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			1
		|		ИЗ
		|			РегистрСведений.НоменклатураСегмента КАК Сегменты
		|		ГДЕ
		|			Сегменты.Характеристика = ХарактеристикиНоменклатуры.Ссылка
		|			И Сегменты.Номенклатура = &НоменклатураСегмента
		|			И Сегменты.Сегмент = &СегментНоменклатуры))}
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СвободныеОстаткиВНаличии}" Тогда
		
		Если ОтображатьОстаткиПоНазначению Тогда
			ПодстрокаЗамены = "ЕСТЬNULL(СвободныеОстатки.НаличиеПодЗаказОстаток, 0)";
		Иначе
			ПодстрокаЗамены = "ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0)";
		КонецЕсли;
	ИначеЕсли ПодстрокаПоиска = "{ВсеОстаткиДоступно}" Тогда
		
		Если ОтображатьОстаткиПоНазначению Тогда
			ПодстрокаЗамены = "0";
		Иначе
			ПодстрокаЗамены = "(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеПодЗаказОстаток, 0) -
			|ЕСТЬNULL(СвободныеОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(ОстаткиИзЗаказов.Количество, 0))";
		КонецЕсли;
		
	ИначеЕсли ПодстрокаПоиска = "{ВсеОстатки}" Тогда
		
		Если ОтображатьОстаткиПоНазначению Тогда
			ПодстрокаЗамены = 
				ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса("{СвободныеОстатки}", ПараметрыЗамены); 
		Иначе	
			ПодстрокаЗамены = 
				ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса("{СвободныеОстатки}", ПараметрыЗамены) + 
				ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса("{ДоступныеОстаткиПланируемыхПоступлений}", ПараметрыЗамены);
		КонецЕсли;
			
	ИначеЕсли ПодстрокаПоиска = "{СвободныеОстатки}" Тогда
		
		Если ТипСписка = "СписокНоменклатура"
			Или ТипСписка = "СписокНоменклатураПоставщика" Тогда
			
			Если НесколькоСкладов Тогда	
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					
					Если ОтображатьОстаткиПоНазначению Тогда
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
						|			, 
						|			{УсловиеОтбораПоСкладу}
						|			{(Номенклатура).* КАК Номенклатура}
						|			И Назначение = &Назначение
						|		) КАК СвободныеОстатки
						|	ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|	И (СвободныеОстатки.Назначение = &Назначение)
						|";
					Иначе
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
						|			, 
						|			{УсловиеОтбораПоСкладу}
						|			{(Номенклатура).* КАК Номенклатура}
						|		) КАК СвободныеОстатки
						|	ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|";
					КонецЕсли;
				Иначе
					
					Если ОтображатьОстаткиПоНазначению Тогда
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
						|			, 
						|			{УсловиеОтбораПоСкладу}
						|			{(Номенклатура).* КАК Номенклатура}
						|			И Назначение = &Назначение
						|			И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
						|		) КАК СвободныеОстатки
						|	ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|	И (СвободныеОстатки.Назначение = &Назначение)
						|	И (СвободныеОстатки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
						|";
					Иначе
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
						|			, 
						|			{УсловиеОтбораПоСкладу}
						|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
						|			{(Номенклатура).* КАК Номенклатура}
						|		) КАК СвободныеОстатки
						|	ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|		И (СвободныеОстатки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
						|";
					КонецЕсли;
				КонецЕсли;
			
			Иначе
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					
					Если ОтображатьОстаткиПоНазначению Тогда
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
						|			, 
						|			{УсловиеОтбораПоСкладу}
						|			{(Номенклатура).* КАК Номенклатура}
						|			И Назначение = &Назначение
						|		) КАК СвободныеОстатки
						|	ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|	И (СвободныеОстатки.Назначение = &Назначение)
						|	И (СвободныеОстатки.Склад = &Склад)
						|";
					Иначе
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
						|			, 
						|			{УсловиеОтбораПоСкладу}
						|			{(Номенклатура).* КАК Номенклатура}
						|		) КАК СвободныеОстатки
						|	ПО (СвободныеОстатки.Склад = &Склад)
						|		И (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|";
					КонецЕсли;
				Иначе
										
					Если ОтображатьОстаткиПоНазначению Тогда
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
						|			, 
						|			{УсловиеОтбораПоСкладу}
						|			{(Номенклатура).* КАК Номенклатура}
						|			И Назначение = &Назначение
						|			И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
						|		) КАК СвободныеОстатки
						|	ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|	И (СвободныеОстатки.Назначение = &Назначение)
						|	И (СвободныеОстатки.Склад = &Склад)
						|	И (СвободныеОстатки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
						|";
					Иначе
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
						|			, 
						|			{УсловиеОтбораПоСкладу}
						|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
						|			{(Номенклатура).* КАК Номенклатура}
						|		) КАК СвободныеОстатки
						|	ПО (СвободныеОстатки.Склад = &Склад)
						|		И (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|		И (СвободныеОстатки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
						|";
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			
			Если НесколькоСкладов Тогда
				
				Если ОтображатьОстаткиПоНазначению Тогда
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
					|			, 
					|			{УсловиеОтбораПоСкладу}
					|			И Номенклатура = &Номенклатура
					|			{(Характеристика).* КАК Характеристика}
					|			И Назначение = &Назначение
					|		) КАК СвободныеОстатки
					|	ПО (СвободныеОстатки.Номенклатура = &Номенклатура)
					|		И (СвободныеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
					|		И (СвободныеОстатки.Назначение = &Назначение)
					|";
				Иначе
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
					|			,
					|			{УсловиеОтбораПоСкладу} 
					|				И Номенклатура = &Номенклатура
					|			{(Характеристика).* КАК Характеристика}
					|		) КАК СвободныеОстатки
					|	ПО (СвободныеОстатки.Номенклатура = &Номенклатура)
					|		И (СвободныеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
					|";
				КонецЕсли;
			Иначе
				
				Если ОтображатьОстаткиПоНазначению Тогда
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(
					|			, 
					|			{УсловиеОтбораПоСкладу}
					|			И Номенклатура = &Номенклатура
					|			{(Характеристика).* КАК Характеристика}
					|			И Назначение = &Назначение
					|		) КАК СвободныеОстатки
					|	ПО (СвободныеОстатки.Номенклатура = &Номенклатура)
					|		И (СвободныеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
					|		И (СвободныеОстатки.Назначение = &Назначение)
					|		И (СвободныеОстатки.Склад = &Склад)
					|";
				Иначе
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
					|			,
					|			{УсловиеОтбораПоСкладу} 
					|				И Номенклатура = &Номенклатура
					|			{(Характеристика).* КАК Характеристика}
					|		) КАК СвободныеОстатки
					|	ПО (СвободныеОстатки.Склад = &Склад)
					|		И (СвободныеОстатки.Номенклатура = &Номенклатура)
					|		И (СвободныеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
					|";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		УсловиеОтбораПоСкладу = ?(НесколькоСкладов, "Склад В (&Склад)", "Склад = &Склад");
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоСкладу}", УсловиеОтбораПоСкладу);
		
	ИначеЕсли ПодстрокаПоиска = "{ДоступныеОстаткиПланируемыхПоступлений}" Тогда
		
		Если НесколькоСкладов Тогда
			
			Если ТипСписка = "СписокНоменклатура" Или ТипСписка = "СписокНоменклатураПоставщика" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ(
				|		ВЫБРАТЬ
				|			Т.Номенклатура КАК Номенклатура,
				|			СУММА(Т.Количество) КАК Количество
				|		ИЗ
				|			РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
				|		ГДЕ
				|			Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
				|			И Т.Количество < 0
				|			И Т.Склад В(&Склад)
				|		СГРУППИРОВАТЬ ПО
				|			Т.Номенклатура
				|	) КАК ОстаткиИзЗаказов
				|	ПО 
				|		(ОстаткиИзЗаказов.Номенклатура = СправочникНоменклатура.Ссылка)";
				
			ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ(
				|		ВЫБРАТЬ
				|			Т.Характеристика КАК Характеристика,
				|			СУММА(Т.Количество) КАК Количество
				|		ИЗ
				|			РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
				|		ГДЕ
				|			Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
				|			И Т.Количество < 0
				|			И Т.Склад В(&Склад)
				|			И Т.Номенклатура = &Номенклатура
				|		СГРУППИРОВАТЬ ПО
				|			Т.Характеристика
				|	) КАК ОстаткиИзЗаказов
				|	ПО 
				|		(ОстаткиИзЗаказов.Характеристика = ХарактеристикиНоменклатуры.Ссылка)";
				
			КонецЕсли;
			
		Иначе
			
			Если ТипСписка = "СписокНоменклатура" Или ТипСписка = "СписокНоменклатураПоставщика" Тогда
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					
					ПодстрокаЗамены = "				
					|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|		Т.Номенклатура КАК Номенклатура,
					|		СУММА(Т.Количество) КАК Количество
					|	ИЗ
					|		РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
					|	ГДЕ
					|		Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
					|		И Т.Количество < 0
					|		И Т.Склад = &Склад
					|	
					|	СГРУППИРОВАТЬ ПО
					|		Т.Номенклатура) КАК ОстаткиИзЗаказов
					|	ПО (ОстаткиИзЗаказов.Номенклатура = СправочникНоменклатура.Ссылка)
					|";
					
				Иначе
					
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ОстаткиИзЗаказов
					|		ПО (ОстаткиИзЗаказов.Склад = &Склад)
					|		И (ОстаткиИзЗаказов.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
					|		И (ОстаткиИзЗаказов.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
					|		И (ОстаткиИзЗаказов.Номенклатура = СправочникНоменклатура.Ссылка)
					|		И (ОстаткиИзЗаказов.Количество < 0)
					|";
					
				КонецЕсли;
				
			ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ОстаткиИзЗаказов
				|		ПО (ОстаткиИзЗаказов.Склад = &Склад)
				|		И (ОстаткиИзЗаказов.Номенклатура = &Номенклатура)
				|		И (ОстаткиИзЗаказов.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
				|		И (ОстаткиИзЗаказов.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
				|		И (ОстаткиИзЗаказов.Количество < 0)
				|";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодстрокаЗамены;
	
КонецФункции

// Возвращает текст запроса доступных остатков по датам для списков форм подбора.
//
// Параметры:
//	ЕстьХарактеристика - Булево - признак наличия характеристик,
//	ХарактеристикиИспользуются - Булево - признаки использования характеристик,
//	СоставРазделовЗапроса - Массив, Неопределено - состав разделов результата запроса.
//
// Возвращаемое значение:
//	Строка - текст запроса для формирования дерева доступных остатков по датам.
//
Функция ТекстЗапросаДоступныхОстатковПоДатамДляПодбора(ЕстьХарактеристика, ХарактеристикиИспользуются, СоставРазделовЗапроса) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Набор.Склад                             КАК Склад,
	|	Набор.Номенклатура                      КАК Номенклатура,
	|	Набор.Характеристика                    КАК Характеристика,
	|	СУММА(Набор.ВНаличии)                   КАК ВНаличии,
	|	СУММА(Набор.ВРезервеСоСклада)           КАК ВРезервеСоСклада,
	|	СУММА(Набор.ВРезервеПодЗаказ)           КАК ВРезервеПодЗаказ
	|
	|ПОМЕСТИТЬ ВтСвободныеОстатки
	|ИЗ(
	|	ВЫБРАТЬ
	|		Т.Склад                             КАК Склад,
	|		Т.Номенклатура                      КАК Номенклатура,
	|		Т.Характеристика                    КАК Характеристика,
	|		Т.ВНаличииОстаток                   КАК ВНаличии,
	|		Т.ВРезервеСоСкладаОстаток           КАК ВРезервеСоСклада,
	|		Т.ВРезервеПодЗаказОстаток           КАК ВРезервеПодЗаказ
	|	ИЗ
	|		РегистрНакопления.СвободныеОстатки.Остатки(,
	|			Склад В (&Склады) И Номенклатура = &Номенклатура) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.Склад                             КАК Склад,
	|		Т.Номенклатура                      КАК Номенклатура,
	|		Т.Характеристика                    КАК Характеристика,
	|		0                                   КАК ВНаличии,
	|		0                                   КАК ВРезервеСоСклада,
	|		0                                   КАК ВРезервеПодЗаказ
	|
	|	ИЗ
	|		РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|	ГДЕ
	|		Т.Склад В (&Склады) И Т.Номенклатура = &Номенклатура) КАК Набор
	|СГРУППИРОВАТЬ ПО
	|	Набор.Склад, Набор.Номенклатура, Набор.Характеристика
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|/////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	Т.Склад               КАК Склад,
	|	Т.СкладНаименование   КАК СкладНаименование,
	|	СУММА(Т.ВНаличии)     КАК ВНаличии,
	|	СУММА(Свободно)       КАК Свободно
	|ИЗ(
	|	ВЫБРАТЬ
	|		Т.Склад               КАК Склад,
	|		Т.Склад.Наименование  КАК СкладНаименование,
	|		Т.ВНаличии            КАК ВНаличии,
	|		Т.ВНаличии
	|			- Т.ВРезервеСоСклада
	|			- Т.ВРезервеПодЗаказ КАК Свободно
	|	ИЗ
	|		ВтСвободныеОстатки КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.Склад               КАК Склад,
	|		Т.Склад.Наименование  КАК СкладНаименование,
	|		0                     КАК ВНаличии,
	|		Т.Количество          КАК Свободно
	|	ИЗ
	|		РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
	|	ГДЕ
	|		Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
	|		И Т.Количество < 0
	|		И Т.Склад В (&Склады)
	|		И Т.Номенклатура = &Номенклатура) КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад, Т.СкладНаименование
	|УПОРЯДОЧИТЬ ПО
	|	СкладНаименование
	|;
	|
	|/////////////////////////////////////////////////////////////
	|";
	
	СоставРазделовЗапроса.Добавить("ВтСвободныеОстатки");
	СоставРазделовЗапроса.Добавить("ДоступныеТовары");
	
	Если Не ЕстьХарактеристика И ХарактеристикиИспользуются Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Т.Склад                                  КАК Склад,
		|	Т.Характеристика                         КАК Характеристика,
		|	Т.ДатаДоступности                        КАК Дата,
		|	МАКСИМУМ(Т.Количество)
		|		- МАКСИМУМ(ЕСТЬNULL(ПредыдущиеДни.Количество, 0))    КАК Количество
		|ПОМЕСТИТЬ ВтПриростДоступностиПоХарактеристике
		|ИЗ
		|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ПредыдущиеДни
		|		ПО Т.Склад          = ПредыдущиеДни.Склад
		|		 И Т.Номенклатура    = ПредыдущиеДни.Номенклатура
		|		 И Т.Характеристика  = ПредыдущиеДни.Характеристика
		|		 И Т.ДатаДоступности > ПредыдущиеДни.ДатаДоступности
		|ГДЕ
		|	Т.Склад В (&Склады) И Т.Номенклатура = &Номенклатура
		|СГРУППИРОВАТЬ ПО
		|	Т.Склад, Т.Характеристика,
		|	Т.ДатаДоступности
		|ИНДЕКСИРОВАТЬ ПО
		|	Дата
		|;
		|
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Склад                         КАК Склад,
		|	Т.Дата                          КАК Период,
		|	СУММА(ЕСТЬNULL(ПредыдущиеДни.Количество, 0))
		|		+ МАКСИМУМ(ЕСТЬNULL(
		|			ОстаткиСклада.ВНаличии
		|				- ОстаткиСклада.ВРезервеСоСклада
		|				- ОстаткиСклада.ВРезервеПодЗаказ, 0)) КАК Доступно
		|ИЗ
		|	ВтПриростДоступностиПоХарактеристике КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПриростДоступностиПоХарактеристике КАК ПредыдущиеДни
		|		ПО Т.Склад = ПредыдущиеДни.Склад
		|		 И Т.Дата >= ПредыдущиеДни.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК ОстаткиСклада
		|		ПО Т.Склад          = ОстаткиСклада.Склад
		|		 И Т.Характеристика = ОстаткиСклада.Характеристика
		|ГДЕ
		|	Т.Дата > ДАТАВРЕМЯ(1, 1, 1)
		|СГРУППИРОВАТЬ ПО
		|	Т.Склад, Т.Склад.Наименование, Т.Дата
		|УПОРЯДОЧИТЬ ПО
		|	Т.Склад.Наименование, Период";
		
		СоставРазделовЗапроса.Добавить("ВтПриростДоступностиПоХарактеристике");
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Т.Склад                         КАК Склад,
		|	Т.ДатаДоступности               КАК Период,
		|	Т.Количество
		|		+ ЕСТЬNULL(ОстаткиСклада.ВНаличии
		|				- ОстаткиСклада.ВРезервеСоСклада
		|				- ОстаткиСклада.ВРезервеПодЗаказ, 0) КАК Доступно
		|ИЗ
		|	РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК ОстаткиСклада
		|		ПО Т.Склад          = ОстаткиСклада.Склад
		|		 И Т.Характеристика = ОстаткиСклада.Характеристика
		|ГДЕ
		|	Т.Склад В (&Склады) И Т.Номенклатура = &Номенклатура
		|	И Т.ДатаДоступности > ДАТАВРЕМЯ(1, 1, 1)
		|УПОРЯДОЧИТЬ ПО
		|	Т.Склад.Наименование, Период";
		
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("ПланируемыеОстатки");
	
	Если ЕстьХарактеристика Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Номенклатура = &Номенклатура",
		"И Номенклатура = &Номенклатура И Характеристика = &Характеристика");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Т.Номенклатура = &Номенклатура",
		"И Т.Номенклатура = &Номенклатура И Т.Характеристика = &Характеристика");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения информации о цене продажи товара.
//
// Параметры:
//	СоставРазделовЗапроса - Массив, Неопределено - переменная в которую записывается массив строк, состав разделов текста запроса.
//
// Возвращаемое значение:
//	Строка - текст запроса для получения информации о цене продажи товара.
//
Функция ТекстЗапросаЦенаПродажиТовара(СоставРазделовЗапроса) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив;
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("ЦенаПродажиТовара");
	
	Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА 1
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
	|			ТОГДА 2
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА 4
	|	КОНЕЦ КАК Описание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА СоглашениеТовары.Упаковка
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|	КОНЕЦ КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК Коэффициент,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА СоглашениеТовары.Цена
	|			КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
	|							ТОГДА СоглашениеТовары.ВидЦены
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
	|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|									Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеШапка.ВидЦен
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
	|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
	|			ТОГДА СоглашениеТовары.СрокПоставки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
	|					ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
	|				ИНАЧЕ СоглашениеШапка.СрокПоставки
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокПоставки
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И (СоглашениеТовары.Номенклатура = &Номенклатура)
	|			И (СоглашениеТовары.Характеристика = &Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = &Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
	|			И (СоглашениеЦеновыеГруппы.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|				ВидЦены В (&ВидыЦен)
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.ВидЦены = ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
	|					ТОГДА СоглашениеТовары.ВидЦены
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
	|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|							Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеШапка.ВидЦен
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение";
	
	Текст = СтрЗаменить(Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
		
	Возврат Текст;
	
КонецФункции

// Возвращает текст запроса для получения информации о цене закупки товара.
//
// Параметры:
//	СоставРазделовЗапроса - Массив, Неопределено - переменная в которую записывается массив строк, состав разделов текста запроса.
//
// Возвращаемое значение:
//	Строка - текст запроса для получения информации о цене закупки товара.
//
Функция ТекстЗапросаЦенаЗакупкиТовара(СоставРазделовЗапроса) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив;
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("ЦенаЗакупкиТовара");
	
	Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Коэффициент,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашениеШапка
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|				Партнер = ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).Партнер
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика) КАК ЦеныНоменклатурыПоставщиков
	|		ПО (СоглашениеШапка.ВидЦеныПоставщика = ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|	И СправочникНоменклатура.Ссылка = &Номенклатура";
	
	Текст = СтрЗаменить(Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиков.Упаковка",
		"ЦеныНоменклатурыПоставщиков.Номенклатура"));
		
	Возврат Текст;
	
КонецФункции

// Возвращает строку - разделитель текстов запросов пакетного запроса.
//
// Возвращаемое значение:
//	Строка.
//
Функция РазделительПакетаЗапросов() Экспорт
	
	Разделитель = "
	|;
	|";
	
	Возврат Разделитель;
	
КонецФункции

#КонецОбласти

#Область УстановкаПараметровЗапросовДинамическихСписковНаФормахПодборов

// Устанавливает значения текстов запросов динамических списков на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекстыЗапросовСписковФормыПодбора(Форма) 
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	
	Форма.СписокНоменклатура.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокНоменклатура");
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		Форма.СписокХарактеристики.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокХарактеристики");
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыЗакупки И Форма.ИспользоватьНоменклатуруПоставщиков Тогда
		Форма.СписокНоменклатураПоставщика.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокНоменклатураПоставщика");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеВидимостьюСтраницСПараметрамиНавигации

// Устанавливает страницу варианта навигации на форме подбора.
//
// Параметры:
//  Форма						 - УправляемаяФорма	 - форма списка номенклатуры или форма подбора.  
//  ВариантНавигацииДоИзменения	 - ПеречислениеСсылка.ВариантыНавигацииВФормахНоменклатуры - вариант навигации, который был в форме до выбора нового варианта.
//									Параметр передается для реализации возможности возврата к предыдущему варианту навигации и актуален для
//									вариантов "ПоТоварамДругогоКачеста" и "ПоСовместнымПродажам"
//
Процедура УстановитьСтраницуВариантаНавигации(Форма, ВариантНавигацииДоИзменения = Неопределено) Экспорт
	
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатурыПоставщика;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Форма.ВариантНавигации) Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияВидыНоменклатуры;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Истина;
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Истина;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
			Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Истина;
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Ложь;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
			Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Ложь;
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Истина;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Истина;
			Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Истина;
		КонецЕсли;
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма)
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма) Тогда
			
			Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
				Форма.Элементы.ВидыНоменклатуры.Видимость = Истина;
			ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
				Форма.Элементы.ВидыНоменклатуры.Видимость = Истина;
			ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
				Форма.Элементы.ВидыНоменклатуры.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
		СтраницаВариантаНавигации = Форма.Элементы.СтраницаПодобранныеТовары;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодобныеТоварыНоменклатуры(Форма) Тогда
			СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Иначе
			СтраницаВариантаНавигации = Форма.Элементы.СтраницаТоварыДругогоКачества;
		КонецЕсли;
		Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Ложь;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоНоменклатуре Тогда
		Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
		Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Ложь;
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияНоменклатура;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоНоменклатуреПоставщика Тогда
		Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
		Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Ложь;
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияНоменклатураПоставщика;
	КонецЕсли;
	
	ВозвратКФильтрам = Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
	Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма) Тогда
		Форма.Элементы.ИспользоватьФильтры.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СтандартныйПоискКомандаяПанельУстановитьФильтр.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.РасширенныйПоискКомандаяПанельУстановитьФильтр.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюНоменклатураСАналогичнымиСвойствами.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюТоварыДругогоКачества.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюНоменклатураСАналогичнымиСвойствами.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюТоварыДругогоКачества.Доступность = Не ВозвратКФильтрам;
		СформироватьНадписьВариантНавигации(Форма, ВариантНавигацииДоИзменения);
	КонецЕсли;

	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = СтраницаВариантаНавигации;
	
КонецПроцедуры

// Формирует представление варианта навигации
//
// Параметры:
//  Форма						 - УправляемаяФорма - форма списка номенклатуры или форма подбора 
//  ВариантНавигацииДоИзменения	 - ПеречислениеСсылка.ВариантыНавигацииВФормахНоменклатуры - вариант навигации, который был в форме до выбора нового варианта.
//									Параметр передается для реализации возможности возврата к предыдущему варианту навигации и актуален для
//									вариантов "ПоТоварамДругогоКачеста" и "ПоСовместнымПродажам"
//
Процедура СформироватьНадписьВариантНавигации(Форма, ВариантНавигацииДоИзменения = Неопределено)
	МассивСтрокНадписи = Новый Массив();
		
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru='Иерархия номенклатуры';uk='Ієрархія номенклатури'"));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru='Товары другого качества';uk='Товари іншої якості'"));
		МассивСтрокНадписи.Добавить("  ");
		МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Назад';uk='Назад'"),
		,
		,
		,
		ОбщегоНазначения.ИмяЗначенияПеречисления(ВариантНавигацииДоИзменения)));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам 
		И ЗначениеЗаполнено(ВариантНавигацииДоИзменения) Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru='Совместные продажи';uk='Спільні продажі'"));
		МассивСтрокНадписи.Добавить("  ");
		МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Назад';uk='Назад'"),
		,
		,
		,
		ОбщегоНазначения.ИмяЗначенияПеречисления(ВариантНавигацииДоИзменения)));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам 
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам 
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда 
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Виды и свойства';uk='Види і властивості'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Виды и свойства';uk='Види і властивості'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам)));
		КонецЕсли;
		
		МассивСтрокНадписи.Добавить("  ");
		
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Виды';uk='Види'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Виды';uk='Види'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам)));
		КонецЕсли;
		
		МассивСтрокНадписи.Добавить("  ");
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Свойства';uk='Властивості'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Свойства';uk='Властивості'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам)));
		КонецЕсли;
	Иначе
		МассивСтрокНадписи = Новый Массив();
	КонецЕсли;
	
	Если МассивСтрокНадписи.Количество() > 0 Тогда
		Форма.НадписьВариантНавигации = Новый ФорматированнаяСтрока(МассивСтрокНадписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

Процедура НадписьВариантНавигацииНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "СброситьФильтрПоСвойствам" Тогда
		СброситьОтборыПоСвойствам(Форма);
	Иначе
		ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры." + НавигационнаяСсылка);
		Форма.ВариантНавигации = ВариантНавигации;
		ПриИзмененииВариантаНавигации(Форма);
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовНоменклатуры(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Ложь);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Истина);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, ПоХарактеристикам)
	
	ВидНоменклатурыДляХарактеристик = Неопределено;
	
	Если ПоХарактеристикам Тогда
		РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.ВидНоменклатуры, "ИспользованиеХарактеристик,ВладелецХарактеристик");
		
		Если РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
			Или РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			ВидНоменклатурыДляХарактеристик = Форма.ВидНоменклатуры;
		ИначеЕсли РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
			ВидНоменклатурыДляХарактеристик = РеквизитыВидаНоменклатуры.ВладелецХарактеристик;
		Иначе
			Возврат;
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеквизитыБыстрогоОтбораХарактеристик.НомерСтроки КАК НомерСтроки,
		|	РеквизитыБыстрогоОтбораХарактеристик.Свойство КАК Свойство,
		|	РеквизитыБыстрогоОтбораХарактеристик.ИмяРеквизита КАК ИмяРеквизита,
		|	ПРЕДСТАВЛЕНИЕ(РеквизитыБыстрогоОтбораХарактеристик.Свойство) КАК ПредставлениеРеквизита,
		|	ИСТИНА КАК ЭтоДопРеквизит,
		|	ВЫБОР
		|		КОГДА НЕ РеквизитыБыстрогоОтбораХарактеристик.Свойство ЕСТЬ NULL 
		|			ТОГДА РеквизитыБыстрогоОтбораХарактеристик.Свойство.ТипЗначения
		|	КОНЕЦ КАК ОписаниеТипаЗначения,
		|	РеквизитыБыстрогоОтбораХарактеристик.Свойство.Заголовок КАК Заголовок
		|ИЗ
		|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораХарактеристик КАК РеквизитыБыстрогоОтбораХарактеристик
		|ГДЕ
		|	РеквизитыБыстрогоОтбораХарактеристик.Ссылка = &ВидНоменклатуры";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатурыДляХарактеристик);
		
	Иначе		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеквизитыБыстрогоОтбораНоменклатуры.НомерСтроки КАК НомерСтроки,
		|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство КАК Свойство,
		|	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита КАК ИмяРеквизита,
		|	ВЫБОР
		|		КОГДА РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(РеквизитыБыстрогоОтбораНоменклатуры.Свойство)
		|		ИНАЧЕ РеквизитыБыстрогоОтбораНоменклатуры.ПредставлениеРеквизита
		|	КОНЕЦ КАК ПредставлениеРеквизита,
		|	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
		|	ВЫБОР
		|		КОГДА НЕ РеквизитыБыстрогоОтбораНоменклатуры.Свойство ЕСТЬ NULL 
		|			ТОГДА РеквизитыБыстрогоОтбораНоменклатуры.Свойство.ТипЗначения
		|	КОНЕЦ КАК ОписаниеТипаЗначения,
		|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство.Заголовок КАК Заголовок
		|ИЗ
		|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
		|ГДЕ
		|	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
		Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
		
	КонецЕсли;
		
	РеквизитыБыстрогоОтбора = Запрос.Выполнить().Выгрузить();
	СтрокаРеквизита = Неопределено;
	МаксимальноеКоличествоЗначенийВДереве = Константы.МаксимальноеКоличествоЭлементовВДеревеОтборовНоменклатуры.Получить();
	
	СтрокаРеквизита     = Неопределено;
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "СегментНоменклатуры")
		И ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
		ЕстьОтборПоСегменту = Истина;
	Иначе
		ЕстьОтборПоСегменту = Ложь;
	КонецЕсли;	
	
	Для Каждого Реквизит из РеквизитыБыстрогоОтбора Цикл
		
		Если Реквизит.ЭтоДопРеквизит Тогда
			ТипРеквизита = Реквизит.ОписаниеТипаЗначения;
			РеквизитНоменклатуры = Неопределено;
		Иначе
			РеквизитНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты[Реквизит.ИмяРеквизита];
			ТипРеквизита = РеквизитНоменклатуры.Тип;
		КонецЕсли;
		
		Если СтрокаРеквизита <> Неопределено
			И СтрокаРеквизита.Строки.Количество() > 0 Тогда
			СтрокаРеквизита.Строки.Сортировать("Представление");
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		
		СтрокаРеквизита.ИмяРеквизита          = Реквизит.ИмяРеквизита;
		Если Реквизит.ЭтоДопРеквизит Тогда
			СтрокаРеквизита.ИмяРеквизита          = Реквизит.ПредставлениеРеквизита;
		КонецЕсли;
		СтрокаРеквизита.ЭтоДопРеквизит        = Реквизит.ЭтоДопРеквизит;
		СтрокаРеквизита.Представление         = Реквизит.ПредставлениеРеквизита;
		Если ЗначениеЗаполнено(Реквизит.Заголовок) Тогда
			СтрокаРеквизита.Представление = Реквизит.Заголовок;
		КонецЕсли;
		СтрокаРеквизита.ОтборХарактеристик	  = ПоХарактеристикам;
	
		Если ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
			
			СтрокаРеквизита.ИнтервалОт            = Дата('00010101');
			СтрокаРеквизита.ИнтервалДо            = Дата('00010101');
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			СтрокаРеквизита.ЗначениеОтбора        = Дата('00010101');
			СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru='<не задано>';uk='<не зазначено>'");
			СтрокаРеквизита.ОтборДоступен         = Истина;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Число"))Тогда
			
			СтрокаРеквизита.ИнтервалОт            = 0;
			СтрокаРеквизита.ИнтервалДо            = 0;
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			СтрокаРеквизита.ЗначениеОтбора        = 0;
			СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru='<не задано>';uk='<не зазначено>'");
			СтрокаРеквизита.ОтборДоступен         = Истина;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
			
			СтрокаРеквизита.ЗначениеОтбора = Истина;
			СтрокаРеквизита.ОтборДоступен         = Истина;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
			
			СтрокаРеквизита.ЗначениеОтбора        = "";
			СтрокаРеквизита.ФиксированноеЗначение = Истина;
			СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru='<не задано>';uk='<не зазначено>'");
			СтрокаРеквизита.ОтборДоступен         = Истина;
			
		Иначе
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита.Типы()[0]);
			
			Если Не ПравоДоступа("Чтение", МетаданныеТипа) Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Если ПоХарактеристикам Тогда
				ТекстЗапроса = 	
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ   " + Строка(МаксимальноеКоличествоЗначенийВДереве + 1) + "
				|	ДополнительныеРеквизиты.Значение КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
				|ГДЕ
				|	&РеквизитВладелецХарактеристик = &ВидНоменклатурыДляХарактеристик
				|	И ДополнительныеРеквизиты.Свойство = &Свойство";
				
				Если РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
					РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец";
					ОтборНоменклатурыПоВиду = "ИСТИНА";
				ИначеЕсли РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
					РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец";
					ОтборНоменклатурыПоВиду = "Сегменты.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
				ИначеЕсли РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
					РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры";
					ОтборНоменклатурыПоВиду = "ИСТИНА";
				Иначе
					Возврат;
				КонецЕсли;
				
				Если ЕстьОтборПоСегменту Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	И 1 В
					|			(ВЫБРАТЬ ПЕРВЫЕ 1
					|				1
					|			ИЗ
					|				РегистрСведений.НоменклатураСегмента КАК Сегменты
					|			ГДЕ
					|				Сегменты.Характеристика = ДополнительныеРеквизиты.Ссылка
					|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры)
					|				И &ОтборНоменклатурыПоВиду)
					|";
					
				КонецЕсли; 
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитВладелецХарактеристик", РеквизитВладелецХарактеристик);
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборНоменклатурыПоВиду", ОтборНоменклатурыПоВиду);
				
			ИначеЕсли Реквизит.ЭтоДопРеквизит Тогда
				  
				ТекстЗапроса = 	
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ   " + Строка(МаксимальноеКоличествоЗначенийВДереве + 1) + "
				|	ДополнительныеРеквизиты.Значение КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
				|ГДЕ
				|	ДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
				|	И ДополнительныеРеквизиты.Свойство = &Свойство";
				
				Если ЕстьОтборПоСегменту Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	И 1 В
					|			(ВЫБРАТЬ ПЕРВЫЕ 1
					|				1
					|			ИЗ
					|				РегистрСведений.НоменклатураСегмента КАК Сегменты
					|			ГДЕ
					|				Сегменты.Номенклатура = ДополнительныеРеквизиты.Ссылка
					|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
					|";
					
				КонецЕсли; 
				
			Иначе
				
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Строка(МаксимальноеКоличествоЗначенийВДереве + 1) + "
				|	ТаблицаСправочника." + Реквизит.ИмяРеквизита + " КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаСправочника
				|ГДЕ
				|	ТаблицаСправочника.ВидНоменклатуры = &ВидНоменклатуры";
				
				Если ЕстьОтборПоСегменту Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	И 1 В
					|			(ВЫБРАТЬ ПЕРВЫЕ 1
					|				1
					|			ИЗ
					|				РегистрСведений.НоменклатураСегмента КАК Сегменты
					|			ГДЕ
					|				Сегменты.Номенклатура = ТаблицаСправочника.Ссылка
					|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
					|";
					
				КонецЕсли; 
				
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Свойство", Реквизит.Свойство);
			Если ЕстьОтборПоСегменту Тогда
				Запрос.УстановитьПараметр("СегментНоменклатуры", Форма.СегментНоменклатуры);
			КонецЕсли;
			Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
			Запрос.УстановитьПараметр("ВидНоменклатурыДляХарактеристик", ВидНоменклатурыДляХарактеристик);
			
			//На большой базе запрос в цикле работает быстрее, чем один запрос с группировкам.
			//При этом быстрее, как если группировать по Свойство-Значение, так и если объединять запросы
			//с группировками по каждому свойству в отдельности
			ВыборкаЗначений = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаЗначений.Количество() = 0 Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				
			ИначеЕсли ВыборкаЗначений.Количество() > МаксимальноеКоличествоЗначенийВДереве Тогда 	
				СтрокаРеквизита.ЗначениеОтбора        = Новый СписокЗначений;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru='<не задано>';uk='<не зазначено>'");
				СтрокаРеквизита.ОтборДоступен         = Истина;
			Иначе
				
				Пока ВыборкаЗначений.Следующий() Цикл
					
					СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтрокаРеквизита);
					
					СтрокаЗначения.ЗначениеОтбора = ВыборкаЗначений.ЗначениеОтбора;
					
					//Получение представления построчно для 50 значений работает быстрее, выборка его сразу в запросе,
					//формирующем ВыборкаЗначений, т.к. там есть группировка
					//Так же это работает быстрее, чем запрос представления (фукнция ПРЕДСТАВЛЕНИЕ языка запросов),
					//сделанный сразу для 50 значений.
					СтрокаЗначения.Представление  = Строка(ВыборкаЗначений.ЗначениеОтбора);
					СтрокаЗначения.ОтборДоступен  = Истина;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаРеквизита <> Неопределено
		И СтрокаРеквизита.Строки.Количество() > 0 Тогда
		СтрокаРеквизита.Строки.Сортировать("Представление");
	КонецЕсли;
	
КонецПроцедуры

// Очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает пометку у элементов списка градаций качества.
// Используется при навигации по товарам альтернативного качества.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
Процедура УстановитьПометкуГрадацииКачества(Форма)
	
	Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
		ЭлементСписка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает отбор по родителю текущей строки списка номенклатуры
// в формах подборов товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма)
	
	ТекущаяСтрока = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Родитель;
	Форма.ТекущаяИерархияНоменклатуры = Родитель; 
	
КонецПроцедуры

// Устанавливает отборпо виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УстановитьОтборПоВидуНоменклатуры(Форма);
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
		УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Истина);
	
КонецПроцедуры

// Устанавливает отбор по списку значений из строк дерева отборов.
//
// Параметры:
//	ИмяЭлементаОтбора - Строка - имя элемента отбора,
//	Отбор - ОтборКомпоновкиДанных - коллекция элементов отбора списка номенклатуры,
//	СтрокиДереваОтборов - Массив - массив строк дерева отборов.
//
Процедура УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, Отбор, СтрокиДереваОтборов)
	
	ЗначенияОтборов = Новый Массив;
	Для Каждого Строка Из СтрокиДереваОтборов Цикл
		ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, ИмяЭлементаОтбора, ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
КонецПроцедуры

// Устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
Процедура УстановитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	УстанавливатьОтборСпискаХарактеристик = Ложь;
		
	Если ЭтоФормаВыбораХарактеристик Тогда
		УстанавливатьОтборСпискаХарактеристик = Истина;
		ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список);
	Иначе
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	КонецЕсли;
			
	Если ЭтоФормаПодбора И Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		УстанавливатьОтборСпискаХарактеристик = Истина;
		ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики);
	КонецЕсли;
	
	ИмяСсылки = "Ссылка.[";
	
	Для каждого СтрокаДереваОтборов Из ДеревоОтборов.Строки Цикл
		
		Если СтрокаДереваОтборов.ОтборДоступен Тогда
			
			Если Не СтрокаДереваОтборов.Отбор Тогда
				Продолжить;
			КонецЕсли;
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаДереваОтборов.ИмяРеквизита;
			Если СтрокаДереваОтборов.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]";
			КонецЕсли;
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, Истина, 
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, Истина, 
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата") 
				Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// Отбор не доступен - это строка отбора, имеющая подчиненные строки.
			МассивСтрок = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = МассивСтрок[0];
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаОтбора.ИмяРеквизита;
			Если СтрокаОтбора.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаОтбора.ИмяРеквизита + "]";
			КонецЕсли;
			
			// Установить отбор по значениям подчиненных строк строки дерева отборов.
			Если Не СтрокаОтбора.ОтборХарактеристик Тогда 
				УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, ОтборСпискаНоменклатуры, МассивСтрок);
			ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
				УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, ОтборСпискаХарактеристик, МассивСтрок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает установленные отборы по виду номенклатуры и по свойствам выбранного
// вида номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
Процедура УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УдалитьОтборПоВидуНоменклатуры(Форма);
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Ложь);
	
КонецПроцедуры

// Удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = НеУдаляемыеЭлементыОтборов();
	
	// Удалить элементы отбора по свойствам вида номенклатуры.
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы;
		ВГраница = ОтборСпискаНоменклатуры.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
		ЭлементОтбора = ОтборСпискаНоменклатуры[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаНоменклатуры.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ЭтоФормаПодбора И Форма.ИспользоватьХарактеристикиНоменклатуры) Или ЭтоФормаВыбораХарактеристик Тогда
		
		Если ЭтоФормаВыбораХарактеристик Тогда
			ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы;
		Иначе
			ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы;
		КонецЕсли;
		
		ВГраница = ОтборСпискаХарактеристик.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
			ЭлементОтбора = ОтборСпискаХарактеристик[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаХарактеристик.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет отбор по качеству номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоКачествуНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Качество", "КачествоНоменклатуры");
	
КонецПроцедуры

// Устанавливает отбор по сегменту номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоСегментуНоменклатуры(Форма)
	
	// Отбор по сегменту у списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокНоменклатура, 
		"СегментНоменклатуры", 
		Форма.СегментНоменклатуры, 
		ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	// В списке выбора сегментов должны отображаться 7 последних выбранных элементов.
	Если ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
		
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(
			Форма.Элементы.СегментНоменклатуры.СписокВыбора, 
			Форма.СегментНоменклатуры, 
			7);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив имен элементов отбора которые не следует удалять.
//
// Возвращаемое значение:
//
//	Массив.
//		Массив имен отборов которые не следует удалять - они не относятся 
//		к отбору по свойствам вида номенклатуры.
//
Функция НеУдаляемыеЭлементыОтборов() 
	
	НеУдаляемыеЭлементы = Новый Массив;
	
	НеУдаляемыеЭлементы.Добавить("ПоискПоПодстроке");
	НеУдаляемыеЭлементы.Добавить("ЦеныНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ЦенаХарактеристики");
	НеУдаляемыеЭлементы.Добавить("ГруппаТолькоВНаличии");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВидуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВладельцуХарактеристик");
	НеУдаляемыеЭлементы.Добавить("ОтборПоТипуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоУмолчанию");
	
	Возврат НеУдаляемыеЭлементы
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Сохраняет флаги для дерева отбора на формах подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//	Закрыть - Булево - признак показывыющий что форма закрывается, тогда нужно сохранять
//	все настройки отборов, а не только Качество в случае изменения вида номенклатуры.
//
Процедура СохранитьПараметрыДереваОтбора(Форма, Закрыть) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	Если Закрыть Тогда
		
		ТаблицаПараметровОтбора.Очистить(); 
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Отбор Тогда
				
				Если ПервыйУровень.ФиксированноеЗначение Тогда
					
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					НоваяСтрока.ИмяРеквизита = ПервыйУровень.Представление;
					НоваяСтрока.Представление = ПервыйУровень.Представление;
					НоваяСтрока.ЗначениеОтбора = ПервыйУровень.ЗначениеОтбора;
					НоваяСтрока.ПредставлениеОтбора = ПервыйУровень.ПредставлениеОтбора;
					НоваяСтрока.ФиксированноеЗначение = Истина;
					НоваяСтрока.Отбор = Истина;
					
					Если ПервыйУровень.ИнтервалОт<>Неопределено Или ПервыйУровень.ИнтервалДо<>Неопределено Тогда
						
						Если ТипЗнч(ПервыйУровень.ИнтервалОт) = Тип("Дата") Или ТипЗнч(ПервыйУровень.ИнтервалДо) = Тип("Дата") Тогда
							
							НоваяСтрока.ИнтервалДаты = Истина;
							НоваяСтрока.ИнтервалДатыОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалДатыДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						Иначе
							
							НоваяСтрока.ИнтервалЧисла = Истина;
							НоваяСтрока.ИнтервалЧислаОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалЧислаДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ПервыйУровень.ЗначениеОтбора) = Тип("Булево") Тогда
					
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					НоваяСтрока.ИмяРеквизита = ПервыйУровень.Представление;
					НоваяСтрока.Представление = ПервыйУровень.Представление;
					НоваяСтрока.ЗначениеОтбора = ПервыйУровень.ЗначениеОтбора;
					НоваяСтрока.Отбор = Истина;
						
				Иначе
					
					ИмяРеквизита = ПервыйУровень.Представление;
					
					Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
						
						Если ВторойУровень.Отбор Тогда
							
							НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
							НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
							НоваяСтрока.Представление = ВторойУровень.Представление;
							НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Представление="Качество" Тогда
				
				Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
					
					Отбор = Новый Структура();
					Отбор.Вставить("Представление",ВторойУровень.Представление);
					ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
					
					Если ЗначениеЗаполнено(ОтобранныеСтроки) Тогда
						ОтобранныеСтроки[0].Отбор = ВторойУровень.Отбор; 
					Иначе
						
						НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
						НоваяСтрока.ИмяРеквизита = "Качество";
						НоваяСтрока.Представление = ВторойУровень.Представление;
						НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
						Если НоваяСтрока.Представление = "Новый" Тогда 
							НоваяСтрока.Отбор = Истина;
						Иначе
							НоваяСтрока.Отбор = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ТаблицаПараметровОтбора.Загрузить(ТаблицаПараметровОтбора);
	
КонецПроцедуры

// Расставляет флаги для дерева отбора на формах подбора.
//
Процедура ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	ТекущиеИмяРеквизита = "";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Отбор",Истина);
	ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из ОтобранныеСтроки Цикл
		
		Если СтрокаТаблицы.ИмяРеквизита <> ТекущиеИмяРеквизита Тогда
			
			ТекущиеИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
			
			ЕстьПометкаНаВторомУровне = Ложь;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", ТекущиеИмяРеквизита);
			СтрокаДереваПервогоУровня = ДеревоОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаДереваПервогоУровня.Количество()>0 Тогда
				
				Если СтрокаДереваПервогоУровня[0].ФиксированноеЗначение <> СтрокаТаблицы.ФиксированноеЗначение Тогда
					СтрокаНайдена = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если СтрокаТаблицы.ФиксированноеЗначение Тогда
					
					СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
					СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
					СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
					СтрокаДереваПервогоУровня[0].Отбор = Истина;
					
					Если СтрокаТаблицы.ИнтервалДаты Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалДатыОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалДатыДо;
						
						Продолжить;
						
					ИначеЕсли СтрокаТаблицы.ИнтервалЧисла Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалЧислаОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалЧислаДо;
						
						Продолжить;
						
					КонецЕсли;
					
					Продолжить;
					
				ИначеЕсли ТипЗнч(СтрокаТаблицы.ЗначениеОтбора) = Тип("Булево") Тогда
					
					СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
					СтрокаДереваПервогоУровня[0].Отбор = Истина;
					
				КонецЕсли;
				
				СтрокиДереваВторогоУровня = СтрокаДереваПервогоУровня[0].Строки;
				СтрокаНайдена= Истина;
				
			Иначе
				
				СтрокаНайдена = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаНайдена Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", СтрокаТаблицы.Представление);
			СтрокаПоиска = СтрокиДереваВторогоУровня.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаПоиска.Количество() > 0 Тогда
				
				СтрокаПоиска[0].Отбор = Истина;
				СтрокаДереваПервогоУровня[0].Отбор = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Вызывается при переключении на страницу со списком характеристик.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	ПараметрыНоменклатуры - Структура - параметры номенклатуры, для которой нужно переключиться на страницу со списком характеристик.
//
Процедура ПриПереходеКСпискуХарактеристик(Форма, ПараметрыНоменклатуры)
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	Форма.НавигацияПоХарактеристикам = Истина;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Характеристики: ""%1""';uk='Характеристики: ""%1""'"), ПараметрыНоменклатуры.Номенклатура);
	
	ИмяЭлемента = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма) + "Характеристика";
	
	// Установить параметры списка характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "Номенклатура", ПараметрыНоменклатуры.Номенклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ЕдиницаИзмерения", ПараметрыНоменклатуры.ЕдиницаИзмерения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВладелецХарактеристик", ПараметрыНоменклатуры.ВладелецХарактеристик);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ТипНоменклатуры", ПараметрыНоменклатуры.ТипНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВидНоменклатуры", ПараметрыНоменклатуры.ВидНоменклатуры);
	
	Если Не ЭтоФормаПодбораВДокументыЗакупки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.СписокХарактеристики, "ЦеноваяГруппа", ПараметрыНоменклатуры.ЦеноваяГруппа);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "СегментНоменклатуры", 
		Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "НоменклатураСегмента", 
		ПараметрыНоменклатуры.Номенклатура, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	// Установить отбор списка характеристик по товарам продаваемым совместно.
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		МассивХарактеристик = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Форма.ТаблицаНоменклатураПродаваемаяСовместно Цикл
			Если СтрокаТЧ.Номенклатура = ПараметрыНоменклатуры.Номенклатура Тогда
				МассивХарактеристик.Добавить(СтрокаТЧ.Характеристика);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокХарактеристики, "Характеристика",
			МассивХарактеристик, ВидСравненияКомпоновкиДанных.ВСписке,, МассивХарактеристик.Количество() > 0);
			
	КонецЕсли;
	
	ИмяТекущейСтраницы = ПодборТоваровКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма);
	ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницы];
	
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = ТекущаяСтраница;
	Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Истина;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		ДоступностьСоздатьХарактеристику = (Форма.НавигацияПоХарактеристикам И Не Форма.НавигацияПоНоменклатуреПоставщика);
	Иначе
		ДоступностьСоздатьХарактеристику = Форма.НавигацияПоХарактеристикам;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "КоманднаяПанельСоздатьХарактеристику", "Доступность", ДоступностьСоздатьХарактеристику);
	
	Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьХарактеристику;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыПоНаличиюПоЦенам

// Возвращает Истина, если условие цены поставщика на форме подбора был изменен
// по сравнению с ранее установленным значением.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Функция ВидЦеныПоставщикаИзменился(Форма)
	
	ИмяПараметра = "ВидЦеныПоставщика";
	
	ЗначениеПараметра = Форма.СписокНоменклатураПоставщика.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ВидЦеныПоставщика) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Не (ЗначениеПараметра.Значение = Форма.ВидЦеныПоставщика);
	
КонецФункции

#КонецОбласти

#Область ОтборыВспомогательные

// Возвращает Истина, если сегмент номенклатуры на форме подбора был изменен
// по сравнению с ранее установленным значением.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Функция СегментНоменклатурыИзменился(Форма)
	
	ЗначениеПараметра = Форма.СписокНоменклатура.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СегментНоменклатуры"));
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат (ЗначениеПараметра.Значение <> Форма.СегментНоменклатуры Или Не ЗначениеПараметра.Использование);
	
КонецФункции

#КонецОбласти

#Область ПоискНаФормахПодборов

// Выполняет полнотекстовый поиск номенклатуры по строке поиска введенной в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора. форма подбора,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска)
	
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	РезультатПоиска = СтруктураРезультатовПоиска();
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	// Создать список поиска.
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластиПоискаНоменклатуры(Форма);
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции = 20;
	НачальнаяПозиция = 0;
	ВГраница = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для А = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(А);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
	
КонецПроцедуры

// Выполняет неполнотекстовый поиск номенклатуры по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска,
//	РезультатПоиска - Неопределено - переменная, в которую записывается структура, результат поиска.
//
Процедура ВыполнитьНеПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска)
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СписокПоиска = РезультатПоискаНоменклатуры(Форма);
	УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска);
	ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска);
	ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
	
КонецПроцедуры

// Выполняет полнотекстовый поиск характеристик по строке поиска введенной в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора. форма подбора,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьПолнотекстовыйПоискХарактеристик(Форма, РезультатПоиска)
	
	СтрокаПоиска = Форма.СтрокаПоискаХарактеристики;
	РезультатПоиска = СтруктураРезультатовПоиска();
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластиПоискаХарактеристик(Форма);
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции = 20;
	НачальнаяПозиция = 0;
	ВГраница = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для А = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(А);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет неполнотекстовый поиск характеристик по строке поиска на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьНеПолнотекстовыйПоискХарактеристик(Форма, РезультатПоиска)
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СписокПоиска = РезультатПоискаХарактеристик(Форма);
	ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска);
	УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска);
	
КонецПроцедуры

// Выполняет полнотекстовый поиск номенклатуры поставщика по строке поиска введенной в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора. форма подбора,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьПолнотекстовыйПоискНоменклатурыПоставщика(Форма, РезультатПоиска)
	
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатураПоставщика;
	РезультатПоиска = СтруктураРезультатовПоиска();
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	// Создать список поиска.
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластиПоискаНоменклатурыПоставщика(Форма);
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции = 20;
	НачальнаяПозиция = 0;
	ВГраница = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для А = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(А);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет неполнотекстовый поиск номенклатуры поставщика по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска,
//	РезультатПоиска - Неопределено - переменная, в которую записывается структура, результат поиска.
//
Процедура ВыполнитьНеПолнотекстовыйПоискНоменклатурыПоставщика(Форма, РезультатПоиска)
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СписокПоиска = РезультатПоискаНоменклатурыПоставщика(Форма);
	ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска);
	УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска);
	
КонецПроцедуры

// Проверяет принадлежность элемента списка поиска, в зависиимости
// от принадлежности элемента к типу метаданных, включает значение элемента
// в нужный раздел результата поиска.
//
// Параметры:
//	ЭлементСписка - ЭлементСпискаЗначений - элемент списка поиска,
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска)
	
	МетаданныеЭлемента = ЭлементСписка.Метаданные;
	ЗначениеЭлемента = ЭлементСписка.Значение;
	
	Если ТипЗнч(МетаданныеЭлемента) = Тип("ОбъектМетаданных") Тогда
		
		Если МетаданныеЭлемента = Метаданные.Справочники.Номенклатура Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
			РезультатПоиска.ШтрихкодыНоменклатуры.Добавить(ЗначениеЭлемента.Штрихкод);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.НоменклатураПоставщиков Тогда
			РезультатПоиска.НоменклатураПоставщиков.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru='Неизвестная ошибка';uk='Невідома помилка'");
		КонецЕсли;
		
	Иначе
		
		Если МетаданныеЭлемента = "Номенклатура" Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ХарактеристикиНоменклатуры" Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ШтрихкодыНоменклатуры" Тогда
			РезультатПоиска.ШтрихкодыНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "НоменклатураПоставщиков" Тогда
			РезультатПоиска.НоменклатураПоставщиков.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru='Неизвестная ошибка';uk='Невідома помилка'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат поиска номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура - результат поиска товаров.
//
Функция РезультатПоискаНоменклатуры(Форма)
	
	ТочноеСоответствие = Форма.НайтиНоменклатуруПоТочномуСоответствию;
	
	СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаНоменклатура, ТочноеСоответствие);
	ОбластиПоиска = ОбластиПоискаНоменклатуры(Форма);
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	РезультатПоиска = СтруктураРезультатаПоиска();
	
	// Сформировать текст запроса по областям поиска.
	Запрос = Новый Запрос;
	
	РазделительВТекстеЗапросов = "
	|;
	|";
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		ТекстЗапросаПоискаПоОбласти = ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие);
		
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), РазделительВТекстеЗапросов, "") + ТекстЗапросаПоискаПоОбласти;
		
		Если ОбластьПоиска = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
			Запрос.УстановитьПараметр("СтрокаПоискаПоШтрихкоду", ИсходнаяСтрокаПоиска(СтрокаПоиска, ТочноеСоответствие));
		КонецЕсли;
		
		Если ОбластьПоиска = Метаданные.Справочники.НоменклатураПоставщиков Тогда
			Запрос.УстановитьПараметр("Партнер", Форма.ПоставщикПартнер);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			РезультатПоиска.Элементы.Добавить(ЭлементПоиска);
			
			Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПоиска.ПолноеКоличество = РезультатПоиска.Элементы.Количество();
	РезультатПоиска.СлишкомМногоРезультатов = (РезультатПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает результат поиска характеристик.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура - результаты поиска характеристик.
//
Функция РезультатПоискаХарактеристик(Форма)
	
	ТочноеСоответствие = Форма.НайтиХарактеристикиПоТочномуСоответствию;
	
	СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаХарактеристики, ТочноеСоответствие);
	ОбластиПоиска = ОбластиПоискаХарактеристик(Форма);
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	РезультатПоиска = СтруктураРезультатаПоиска();
	
	// Сформировать текст запроса по областям поиска.
	Запрос = Новый Запрос;
	
	РазделительВТекстеЗапросов = "
	|;
	|";
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		ТекстЗапросаПоискаПоОбласти = ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие);
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), РазделительВТекстеЗапросов, "") + ТекстЗапросаПоискаПоОбласти;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			РезультатПоиска.Элементы.Добавить(ЭлементПоиска);
			
			Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПоиска.ПолноеКоличество = РезультатПоиска.Элементы.Количество();
	РезультатПоиска.СлишкомМногоРезультатов = (РезультатПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает результат поиска номенклатуры поставщика.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура - результаты поиска характеристик.
//
Функция РезультатПоискаНоменклатурыПоставщика(Форма)
	
	ТочноеСоответствие = Форма.НайтиНоменклатуруПоставщикаПоТочномуСоответствию;
	
	СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаНоменклатураПоставщика, ТочноеСоответствие);
	ОбластиПоиска = ОбластиПоискаНоменклатурыПоставщика(Форма);
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	РезультатПоиска = СтруктураРезультатаПоиска();
	
	// Сформировать текст запроса по областям поиска.
	Запрос = Новый Запрос;
	
	РазделительВТекстеЗапросов = "
	|;
	|";
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		ТекстЗапросаПоискаПоОбласти = ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие);
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), РазделительВТекстеЗапросов, "") + ТекстЗапросаПоискаПоОбласти;
		Запрос.УстановитьПараметр("Партнер", Форма.ПоставщикПартнер);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			РезультатПоиска.Элементы.Добавить(ЭлементПоиска);
			
			Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПоиска.ПолноеКоличество = РезультатПоиска.Элементы.Количество();
	РезультатПоиска.СлишкомМногоРезультатов = (РезультатПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает массив областей поиска товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив. Массив метаданных, областей поиска товаров.
//
Функция ОбластиПоискаНоменклатуры(Форма)
	
	// В зависимости от того, из какой формы выполняется вызов функции поиска,
	// список областей поиска будет различаться.
	ОбластиПоиска = Новый Массив;
	
	ОбластиПоиска.Добавить(Метаданные.Справочники.Номенклатура);
	ОбластиПоиска.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		ОбластиПоиска.Добавить(Метаданные.Справочники.НоменклатураПоставщиков);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользованиеКлассификаторовНоменклатуры") Тогда
	КонецЕсли;
	
	Возврат ОбластиПоиска;
	
КонецФункции

// Возвращает массив областей поиска характеристик.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив - массив метаданных, областей поиска характеристик.
//
Функция ОбластиПоискаХарактеристик(Форма)
	
	ОбластиПоиска = Новый Массив;
	ОбластиПоиска.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	
	Возврат ОбластиПоиска;
	
КонецФункции

// Возвращает массив областей поиска номенклатуры поставщика.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив. Массив метаданных, областей поиска товаров.
//
Функция ОбластиПоискаНоменклатурыПоставщика(Форма)
	
	// В зависимости от того, из какой формы выполняется вызов функции поиска,
	// список областей поиска будет различаться.
	ОбластиПоиска = Новый Массив;
	
	ОбластиПоиска.Добавить(Метаданные.Справочники.НоменклатураПоставщиков);
	
	Возврат ОбластиПоиска;
	
КонецФункции

// Возвращает структуру результатов поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураРезультатовПоиска()
	
	РезультатПоиска = Новый Структура();
	
	РезультатПоиска.Вставить("КодОшибки", "");
	РезультатПоиска.Вставить("Номенклатура", Новый Массив);
	РезультатПоиска.Вставить("ХарактеристикиНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("ШтрихкодыНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("НоменклатураПоставщиков", Новый Массив);
	РезультатПоиска.Вставить("ОКП", Новый Массив);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает структуру списка поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураРезультатаПоиска()
	
	СписокПоиска = Новый Структура;
	
	СписокПоиска.Вставить("Элементы", Новый Массив);
	СписокПоиска.Вставить("ПолноеКоличество", 0);
	СписокПоиска.Вставить("СлишкомМногоРезультатов", Ложь);
	
	Возврат СписокПоиска;
	
КонецФункции

// Возвращает максимальное количество элементов которое может быть обработано
// при выполнении полнотекстового или неполнотекствого поиска. Если количество найденных
// элементов превышает возвращаемое этой функцией значение, то считается что условие поиска задано
// размыто и предлагается уточнить его.
//
Функция МаксимальноеКоличествоЭлементовПоиска()
	
	Возврат 500;
	
КонецФункции

// Выполняет дополнительную обработку результатов поиска:
// если выполнялся поиск по характеристикам, штрихкодам или номенклатуре
// поставщиков, то процедура выполняет дополнительный запроса для поиска
// номенклатуры - владельцев найденных элементов. Найденная номенклатура
// включается в результат поиска в раздел "Номенклатура".
//
// Параметры:
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска)
	
	// Если найдены характеристики номенклатуры, номенклатура поставщиков или штрихкоды номенклатуры,
	// то для них нужно найти владельцев и добавить их в список номенклатуры.
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если РезультатПоиска.ХарактеристикиНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА Номенклатура.Ссылка
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА Номенклатура.ВладелецХарактеристик
		|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА Номенклатура.ВидНоменклатуры
		|				ИНАЧЕ НЕОПРЕДЕЛЕНО
		|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка В(&СписокХарактеристики)";
		
		Запрос.УстановитьПараметр("СписокХарактеристики", РезультатПоиска.ХарактеристикиНоменклатуры);
	КонецЕсли;
	
	Если РезультатПоиска.ШтрихкодыНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&СписокШтрихкодов)";
		
		Запрос.УстановитьПараметр("СписокШтрихкодов", РезультатПоиска.ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	Если РезультатПоиска.НоменклатураПоставщиков.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Ссылка В(&СписокНоменклатурыПоставщиков)";
		
		Запрос.УстановитьПараметр("СписокНоменклатурыПоставщиков", РезультатПоиска.НоменклатураПоставщиков);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса необходимый для выполнения поиска по области.
//
// Параметры:
//	ОбластьПоиска      - ОбъектМетаданных - идентификатор области поиска,
//	ТочноеСоответствие - Булево           - признак выполнения поиска по точному соответствию.
//
Функция ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие)
	
	МаксКоличество = МаксимальноеКоличествоЭлементовПоиска() + 1;
	ТекстЗапроса = "";
	
	Если ОбластьПоиска = Метаданные.Справочники.Номенклатура Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	СправочникНоменклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа И
		|	(СправочникНоменклатура.Наименование %ВидСравнения% &СтрокаПоиска СПЕЦСИМВОЛ ""\""
		|			Или СправочникНоменклатура.НаименованиеПолное %ВидСравнения% &СтрокаПоиска СПЕЦСИМВОЛ ""\""
		|			Или СправочникНоменклатура.КодДляПоиска %ВидСравнения% &СтрокаПоиска СПЕЦСИМВОЛ ""\""
		|			Или СправочникНоменклатура.Артикул %ВидСравнения% &СтрокаПоиска СПЕЦСИМВОЛ ""\"")";
		
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.Справочники.НоменклатураПоставщиков Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ %МаксКоличество%
		|	НоменклатураПоставщиков.Ссылка КАК Значение,
		|	""НоменклатураПоставщиков"" КАК Метаданные
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НЕ НоменклатураПоставщиков.ЭтоГруппа И
		|	(НоменклатураПоставщиков.Артикул %ВидСравнения% &СтрокаПоиска СПЕЦСИМВОЛ ""\""
		|		Или НоменклатураПоставщиков.Наименование %ВидСравнения% &СтрокаПоиска СПЕЦСИМВОЛ ""\"")
		|	И НоменклатураПоставщиков.Владелец = &Партнер";
		
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	ХарактеристикиНоменклатуры.Ссылка КАК Значение,
		|	""ХарактеристикиНоменклатуры"" КАК Метаданные
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Наименование %ВидСравнения% &СтрокаПоиска СПЕЦСИМВОЛ ""\""
		|	Или ХарактеристикиНоменклатуры.НаименованиеПолное %ВидСравнения% &СтрокаПоиска СПЕЦСИМВОЛ ""\""";
		
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Значение,
		|	""ШтрихкодыНоменклатуры"" КАК Метаданные
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &СтрокаПоискаПоШтрихкоду";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%МаксКоличество%", Формат(МаксКоличество, "ЧЦ=10; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидСравнения%", ?(ТочноеСоответствие, "=", "ПОДОБНО"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СПЕЦСИМВОЛ ""\""", ?(ТочноеСоответствие, "", "СПЕЦСИМВОЛ ""\"""));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает исходную строку поиска - которая была введена на форме поиска.
// Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска,
//	ТочноеСоответствие - Булево - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка. Исходная строка поиска.
//
Функция ИсходнаяСтрокаПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Возврат Сред(СтрокаПоиска, 2, СтрДлина(СтрокаПоиска) - 2);
	
КонецФункции

// Возвращает фоматированную строку поиска - строку с добавлением
// служебных символов. Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска,
//	ТочноеСоответствие - Булево - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка. Форматированная строка поиска.
//
Функция ФорматироватьСтрокуПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	СтрокаПоиска = ЗамаскироватьСпецсимволыПодобия(СтрокаПоиска);
	
	Если Лев(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = "%" + СтрокаПоиска;
	КонецЕсли;
	
	Если Прав(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = СтрокаПоиска + "%";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ЗамаскироватьСпецсимволыПодобия(Текст)
	Результат = Текст;
	
	Спецсимвол = "\";
	Служебные  = Спецсимвол + "%_[]^";
	
	Для Индекс = 1 По СтрДлина(Служебные) Цикл
		Символ = Сред(Служебные, Индекс, 1);
		Результат = СтрЗаменить(Результат, Символ, Спецсимвол + Символ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Устанавливает код ошибки расширенного поиска в структуре результата поиска.
//
// Параметры:
//	СписокПоиска - СписокЗначений - список найденных элементов,
//	РезультатПоиска - Структура - структура результата поиска.
//
Функция УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска)
	
	Если СписокПоиска.СлишкомМногоРезультатов Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	ИначеЕсли СписокПоиска.ПолноеКоличество = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
	ИначеЕсли СписокПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	Иначе
		РезультатПоиска.КодОшибки = "";
	КонецЕсли;
	
КонецФункции

// Выполняет обрабтку списка результатов поиска. Вызывается функция определения принадлежности
// найденного элемента к разделу метаданных.
//
// Параметры:
//	СписокПоиска - СписокЗначений - список найденных элементов,
//	РезультатПоиска - Структура - структура результата поиска.
//
Процедура ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска)
	
	// Если количество найденных элементов не превышает заданного ограничения,
	// то включить элементы из списка поиска в результаты поиска.
	ВГраница = СписокПоиска.Элементы.ВГраница();
	
	Для А = 0 По ВГраница Цикл
		ЭлементСписка = СписокПоиска.Элементы[А];
		ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Возвращает структуру - значения настроек формы списка, формы выбора товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы списка, формы выбора.
//
Функция НастройкиФормы(Форма)
	
	НастройкиФормы = Новый Структура;
	
	НастройкиФормы.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтры);
	Если Не (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика) Тогда
		
		НастройкиФормы.Вставить("ВариантНавигации", ОбщегоНазначения.ИмяЗначенияПеречисления(Форма.ВариантНавигации));
	Иначе
		НастройкиФормы.Вставить("ВариантНавигации", "");
	КонецЕсли;
	НастройкиФормы.Вставить("ВидНоменклатуры", Форма.ВидНоменклатуры);
	НастройкиФормы.Вставить("ТекущаяИерархияНоменклатуры", Форма.ТекущаяИерархияНоменклатуры);
		
	//Сохранение параметров отбора.
	Если ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
		Или ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Истина);
		
		НастройкиФормы.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		НастройкиФормы.Вставить("НоменклатураИсходногоКачества", Форма.НоменклатураИсходногоКачества);
		
	КонецЕсли;
	
	Возврат НастройкиФормы;
	
КонецФункции

// Возвращает структуру - значения настроек формы подбора товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы подбора.
//
Функция НастройкиФормыПодбора(Форма)
	
	НастройкиФормыПодбора = НастройкиФормы(Форма);
	
	НастройкиФормыПодбора.Вставить("ЗапрашиватьКоличество", Форма.ЗапрашиватьКоличество);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ЗапрашиватьЦену", Форма.ЗапрашиватьЦену);
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ИспользоватьФильтрНоменклатураПоставщика", Форма.ИспользоватьФильтрНоменклатураПоставщика);
		НастройкиФормыПодбора.Вставить("ТекущаяИерархияНоменклатурыПоставщика", Форма.ТекущаяИерархияНоменклатурыПоставщика);
	КонецЕсли;
	
	НастройкиФормыПодбора.Вставить("ОтображатьОстатки", Форма.ОтображатьОстатки);
	НастройкиФормыПодбора.Вставить("ПоказыватьПодобранныеТовары", Форма.ПоказыватьПодобранныеТовары);
	
	Если ЗначениеЗаполнено(Форма.Объект.Склад) Тогда
		НастройкиФормыПодбора.Вставить("ТолькоВНаличии", Форма.ТолькоВНаличии);
	Иначе
		НастройкиФормыПодбора.Вставить("ТолькоВНаличии", Форма.ТолькоВНаличииИзПараметров);
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Истина);
		
		НастройкиФормыПодбора.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		НастройкиФормыПодбора.Вставить("НоменклатураИсходногоКачества", Форма.НоменклатураИсходногоКачества);
		
	КонецЕсли;
	
	Возврат НастройкиФормыПодбора;
	
КонецФункции

// Сохраняет значения списков выбора на формах списков, формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура СохранитьСпискиВыбора(Форма)
	
	СпискиВыбораКлиентСервер.Сохранить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора);
	СпискиВыбораКлиентСервер.Сохранить("ИсторияВыбораСегментовНоменклатуры", Форма.Элементы.СегментНоменклатуры.СписокВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияФормПоПараметрам

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по типу номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма)
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если ЭтоФормаПодбораВДокументыПродажи Или ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		Если Форма.Параметры.ОтборПоТипуНоменклатуры = Неопределено Тогда
			Возврат;
		Иначе
			ОтборПоТипуНоменклатурыИзПараметров = Форма.Параметры.ОтборПоТипуНоменклатуры;
		КонецЕсли;
		
	ИначеЕсли ЭтоФормаВыбораНоменклатуры Тогда
		
		Форма.Параметры.Отбор.Свойство("ТипНоменклатуры", ОтборПоТипуНоменклатурыИзПараметров);
		Форма.Параметры.Отбор.Удалить("ТипНоменклатуры");
		
		Если ОтборПоТипуНоменклатурыИзПараметров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		ОтборПоТипуНоменклатуры = Форма.ОтборПоТипуНоменклатуры;
	Иначе
		ОтборПоТипуНоменклатуры = Новый СписокЗначений;
	КонецЕсли;
		
	// Параметр <ОтборПоТипуНоменклатуры> произвольного типа. Может быть передан как отдельный тип
	// номенклатуры, так и массив типов.
	Если ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		
		ОтборПоТипуНоменклатуры.Добавить(ОтборПоТипуНоменклатурыИзПараметров);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого Значение Из ОтборПоТипуНоменклатурыИзПараметров Цикл
			ОтборПоТипуНоменклатуры.Добавить(Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("Массив") Тогда
		
		ОтборПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатурыИзПараметров);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("СписокЗначений") Тогда
		
		ОтборПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатурыИзПараметров.ВыгрузитьЗначения());
		
	Иначе
		Возврат;
	КонецЕсли;
	
	СодержитНабор = Ложь;
	ОтборыПоТипуНоменклатурыБезНаборов = Новый СписокЗначений;
	ОтборыПоТипуНоменклатурыБезНаборов.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры.ВыгрузитьЗначения());
	Если ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор) <> Неопределено Тогда
		СодержитНабор = Истина;
		ОтборыПоТипуНоменклатурыБезНаборов.Удалить(ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор));
	КонецЕсли;
	
	Если Не СодержитНабор Тогда
		
		// Установить отбор по типам номенклатуры для списка номенклатуры.
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокНоменклатура, "ТипНоменклатуры", ОтборПоТипуНоменклатуры, 
			ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборПоТипуНоменклатуры.Количество() > 0));
		
	Иначе
		
		ОграничиватьНаборыПоУслугам = ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Услуга) <> Неопределено
		                          ИЛИ ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Работа) <> Неопределено;
		ОграничиватьНаборыПоТоварам = ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.МногооборотнаяТара) <> Неопределено
		                          ИЛИ ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Товар) <> Неопределено;
		
		Если ОграничиватьНаборыПоУслугам И Не ОграничиватьНаборыПоТоварам Тогда
			
			ГруппаОтбораНаборы = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
				"ОтборПоТипуНоменклатуры", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				
			// Тип номенклатуры Товары и Услуги, Тара
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборы,
				"ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов, ВидСравненияКомпоновкиДанных.ВСписке,,(ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0));
				
			// Наборы без характеристик
			ГруппаОтбораНаборыВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбораНаборы.Элементы,
				"ГруппаОтбораНаборыВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"СодержитУслуги", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"СодержитТовары", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			// Наборы с характеристиками
			ГруппаОтбораНаборыВложеннаяСХарактеристиками = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбораНаборы.Элементы,
				"ГруппаОтбораНаборыСХарактеристикамиВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложеннаяСХарактеристиками,
				"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложеннаяСХарактеристиками,
				"ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
				
			Если ЭтоФормаПодбораВДокументыПродажи Тогда
				
				ГруппаОтбораНаборы = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
					"ОтборПоТипуНоменклатуры", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
					
				// Тип номенклатуры Товары и Услуги, Тара
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборы,
					"ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов, ВидСравненияКомпоновкиДанных.ВСписке,,(ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0));
					
				// Наборы без характеристик
				ГруппаОтбораНаборыВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ГруппаОтбораНаборы.Элементы,
					"ГруппаОтбораНаборыВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"СодержитУслуги", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"СодержитТовары", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		Если Не ОграничиватьНаборыПоУслугам И ОграничиватьНаборыПоТоварам Тогда
			
			ГруппаОтбораНаборы = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
				"ОтборПоТипуНоменклатуры", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				
			// Тип номенклатуры Товары и Услуги, Тара
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборы,
				"ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов, ВидСравненияКомпоновкиДанных.ВСписке,,(ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0));
				
			// Наборы без характеристик
			ГруппаОтбораНаборыВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбораНаборы.Элементы,
				"ГруппаОтбораНаборыВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"СодержитУслуги", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"СодержитТовары", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			// Наборы с характеристиками
			ГруппаОтбораНаборыВложеннаяСХарактеристиками = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбораНаборы.Элементы,
				"ГруппаОтбораНаборыСХарактеристикамиВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложеннаяСХарактеристиками,
				"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложеннаяСХарактеристиками,
				"ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
				
			Если ЭтоФормаПодбораВДокументыПродажи Тогда
				
				ГруппаОтбораНаборы = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
					"ОтборПоТипуНоменклатуры", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
					
				// Тип номенклатуры Товары и Услуги, Тара
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборы,
					"ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов, ВидСравненияКомпоновкиДанных.ВСписке,,(ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0));
					
				// Наборы без характеристик
				ГруппаОтбораНаборыВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ГруппаОтбораНаборы.Элементы,
					"ГруппаОтбораНаборыВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"СодержитУслуги", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"СодержитТовары", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		Если ОграничиватьНаборыПоУслугам И ОграничиватьНаборыПоТоварам Тогда
			
			// Установить отбор по типам номенклатуры для списка номенклатуры.
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокНоменклатура, "ТипНоменклатуры", ОтборПоТипуНоменклатуры, 
				ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборПоТипуНоменклатуры.Количество() > 0));
			
		КонецЕсли;
	КонецЕсли;
	
	// Установить параметры выбора у номенклатуры корзины.
	Если ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0
		И (ЭтоФормаПодбораВДокументыПродажи Или ЭтоФормаПодбораВДокументыЗакупки) Тогда
		
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов));
		
		Форма.Элементы.КорзинаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов));
			
			Форма.Элементы.НоменклатураПоставщика.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по виду номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоВидНоменклатурыПоПараметрам(Форма) Экспорт

	ОтборПоВидуНоменклатуры = Неопределено;
	Форма.Параметры.Отбор.Свойство("ВидНоменклатуры", ОтборПоВидуНоменклатуры);
	Форма.Параметры.Отбор.Удалить("ВидНоменклатуры");
	
	Если ОтборПоВидуНоменклатуры = Неопределено Или Не ЗначениеЗаполнено(ОтборПоВидуНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьФильтры = Истина; 
	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	Форма.ВидНоменклатуры = ОтборПоВидуНоменклатуры;

	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
	УстановитьСтраницуВариантаНавигации(Форма);
	ПриИзмененииИспользованияФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Устанавливает активным элементом на форме список номенклатуры
// или список характеристик. Используется в случае изменения значений фильтров.
// В этом случае теряется фокус, установленный на списке, и при попытке выбора
// товара активизируется другой элемент.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьАктивныйСписокНаФорме(Форма)
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
	
	ТекущийЭлемент = Форма.Элементы[ИмяСпискаНоменклатуры];
	Если Форма.НавигацияПоХарактеристикам Тогда
		ТекущийЭлемент = Форма.Элементы[ИмяСпискаХарактеристик];
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Устанавливает градации качества в списке
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьЭлементыСпискаЗначенийКачества(Форма)
	
	Форма.СписокКачества.Очистить();

	Если Форма.НоменклатураИсходногоКачества.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыДругогоКачества.ГрадацияКачества
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыДругогоКачества.ГрадацияКачества.Порядок";
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Форма.СписокКачества.Добавить(Выборка.ГрадацияКачества);
	КонецЦикла;
	
	УстановитьПометкуГрадацииКачества(Форма);
	
КонецПроцедуры

// Формирует структуры для передачи параметров в центральную функцию получения параметров скидок/наценок
// и вызывает ее. Возвращает адрес данных для расчета ручных скидок наценок во временном хранилище.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	ПараметрыТовара - Структура - параметры товара.
//
// Возвращаемое значение:
//	Строка. Адрес данных во временном хранилище.
//
Функция АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилище(Форма, ПараметрыТовара) Экспорт
	
	СтруктураОбъекта = Новый Структура;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСКлиентом = Форма.Объект.Соглашение;
	Иначе
		СоглашениеСКлиентом = Форма.Соглашение;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Соглашение", СоглашениеСКлиентом);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
	
	СтруктураОбъекта.Вставить("Товары", ТаблицаТоваров);
	
	ПараметрыДанных = Новый Структура("Объект", СтруктураОбъекта);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		АдресДанных = СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилищеЗакупки(ПараметрыДанных, "Товары", 
			Форма.УникальныйИдентификатор, Ложь);	
	Иначе
		АдресДанных = СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ПараметрыДанных, "Товары", 
			Форма.УникальныйИдентификатор, Ложь);
	КонецЕсли;
	
	Возврат АдресДанных;
	
КонецФункции

// Возвращает флаг наличия значений цен по списку видов цен дата которых превышает
// дату подбора товаров. Необходима для принятия решения о том следует
// ли устанавливать параметр "Период" при обращении к срезу последних регистра
// сведений "ЦеныНоменклатуры". Без установки параметра запрос будет выполняться быстрее.
//
// Параметры:
//	ДатаПодбора - Дата - дата подбора товаров,
//	ВидыЦен - Массив, СписокЗначений - список видов цен.
//
// Возвращаемое значение:
//	Булево - Истина - есть значения цен установленные будущей датой,
//		Ложь - нет.
//
Функция ЕстьЗначенияЦенПозжеДатыПодбора(ДатаПодбора, ВидыЦен)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Период = Null Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (КонецДня(Выборка.Период) > КонецДня(ДатаПодбора));
	
КонецФункции

// Возвращает массив видов цен номенклатуры которые указаны в соглашении с клиентом.
//
// Параметры:
//	СоглашениеСКлиентом - СправочникСсылка.СоглашенияСКлиентами - соглашение с клиентом.
//
// Возвращаемое значение:
//	Массив - массив видов цен соглашения.
//
Функция ВидыЦенПоСоглашениюсКлиентом(СоглашениеСКлиентом)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоглашениеШапка.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ВидЦены
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеновыеГруппы.ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК ЦеновыеГруппы
	|ГДЕ
	|	ЦеновыеГруппы.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение", СоглашениеСКлиентом);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦен");
	
КонецФункции

// Возвращает массив видов цен номенклатуры с единственным элементом, в случае если можно его определить однозначно.
// Используется для получения вида цен по умолчанию в режиме отключенных соглашений с клиентами.
//
// Параметры:
//	ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//
// Возвращаемое значение:
//	Массив - массив видов цен соглашения.
//
Функция ВидыЦенПоУмолчанию(ЦенаВключаетНДС)
	
	МассивВидовЦен = Новый Массив; 
	
	ВидЦенПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(, ЦенаВключаетНДС, Истина);
	Если ЗначениеЗаполнено(ВидЦенПоУмолчанию) Тогда
		МассивВидовЦен.Добавить(ВидЦенПоУмолчанию);
	КонецЕсли;
	
	Возврат МассивВидовЦен;
	
КонецФункции

Процедура УстановитьУсловноеОформлениеДинамическихСписков(Форма, ЭтоФормаПодбораВДокументыЗакупки = Ложь) Экспорт
	
	ЭтоПартнер = ПраваПользователяПовтИсп.ЭтоПартнер();
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;	
	
	Если Не ЭтоПартнер Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
				
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		                  
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ВНаличииОстаток");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<нет>';uk='<ні>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	КонецЕсли;
	
	//
	
	Если Не ЭтоПартнер Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураДоступно.Имя);
				
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		                  
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.Доступно");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<нет>';uk='<ні>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	КонецЕсли;
	
	//
	
	Если Не ЭтоПартнер Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураДоступно.Имя);
	
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=3");
		Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
	КонецЕсли;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураЦена.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=2");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ИспользованиеХарактеристик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	СписокЗначений.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
	СписокЗначений.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Ложь, Ложь, Ложь, Ложь, ));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "...");
	
	//
	
	Если Не ЭтоПартнер Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Имя);
				
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		                  
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ВНаличииОстаток");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<нет>';uk='<ні>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	КонецЕсли;
	
	//
	
	Если Не ЭтоПартнер Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Имя);
				
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		                  
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.Доступно");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<нет>';uk='<ні>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	КонецЕсли;
	
	//
	
	Если Не ЭтоПартнер Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Имя);
	
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=3");
		Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
	
	КонецЕсли;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиЦена.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=2");
	
	//
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураПоставщика.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураПоставщика.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
						  
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатураПоставщика.Номенклатура");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатураПоставщика.ЭтоГруппа");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.RosyBrown);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураПоставщикаНоменклатура.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураПоставщикаНоменклатура.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
						  
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатураПоставщика.Номенклатура");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатураПоставщика.ЭтоГруппа");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "?");
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

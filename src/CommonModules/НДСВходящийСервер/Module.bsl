////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ДВИЖЕНИЙ ПО РЕГИСТРАМ УЧЕТА НДС

Процедура ОтразитьНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов.Записывать = Истина;
	Движения.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов.Загрузить(Таблица);

КонецПроцедуры

Процедура ОтразитьНДСРасчетНалоговогоКредита(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСРасчетНалоговогоКредита;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.НДСРасчетНалоговогоКредита.Записывать = Истина;
	Движения.НДСРасчетНалоговогоКредита.Загрузить(Таблица);

КонецПроцедуры

Процедура ОтразитьНДСРеестрПолученныхНалоговыхДокументов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСРеестрПолученныхНалоговыхДокументов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.НДСРеестрПолученныхНалоговыхДокументов.Записывать = Истина;
	Движения.НДСРеестрПолученныхНалоговыхДокументов.Загрузить(Таблица);

КонецПроцедуры

// Процедура установки флага ТребуетПересчета в значение ИСТИНА связаной записи регистра сведений НДСНачальныеПериодыРасчетаНалоговогоКредита
// для переданного документа-ссылки.
//
// Параметры:
//	ДокументСсылка                - Переданный документ-ссылка
//	Отказ - Булево                - Признак отказа от проведения документа
//	ЕстьДопУсловиеПоТипу - Булево - Признак необходимости проверки дополнительного условия по типу переданного документа-ссылки
//
Процедура СброситьФлагПересчетаНДСНачальныеПериодыРасчетаНалоговогоКредита(ДокументСсылка, Отказ) Экспорт
	
	ПересчетНеобходим = Истина;
	
	Если Отказ ИЛИ (НЕ ПересчетНеобходим) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСНачальныеПериоды.ДокументПоставки,
				   |	НДСНачальныеПериоды.ТребуетПересчета,
				   |	НДСНачальныеПериоды.Дата,
	               |	НДСНачальныеПериоды.АналитикаУчетаПоПартнерам
	               |ИЗ
	               |	РегистрСведений.НДСНачальныеПериодыРасчетаНалоговогоКредита КАК НДСНачальныеПериоды
	               |ГДЕ
	               |	НДСНачальныеПериоды.ДокументПоставки = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если НЕ Выборка.ТребуетПересчета Тогда
			
			Менеджер = РегистрыСведений.НДСНачальныеПериодыРасчетаНалоговогоКредита.СоздатьМенеджерЗаписи();
		
			Менеджер.ДокументПоставки = Выборка.ДокументПоставки;
			
			Менеджер.Дата = Выборка.Дата;
			Менеджер.ТребуетПересчета = Истина;
			Менеджер.АналитикаУчетаПоПартнерам = Выборка.АналитикаУчетаПоПартнерам;
			
			Менеджер.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ УЧЕТА НДС

// Функция возвращает момент определения базы НДС по переданным параметрам
//
Функция ОпределитьМоментОпределенияБазыНДС(ВидПоставки, ХозяйственнаяОперация, Организация, ДоговорКонтрагента = Неопределено) Экспорт
	
	// Данные договора могут быть использованы только в случае когда валюта взаиморасчетов указанная в документах
	// совпадает с валютой договора. Для входящего НДС автоматизированны только операции в гривнах. Соответсвенно
	// анализируются только гривневые договора
	Договор = Неопределено;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) 
	   И ДоговорКонтрагента.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Договор = ДоговорКонтрагента;
	КонецЕсли;
		
	ЭтоКомиссия = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию) ИЛИ                      // ПоступлениеТоваровУслуг
	              (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту) ИЛИ              // ВозвратТоваровПоставщику
	              (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию) ИЛИ // ПередачаТоваровМеждуОрганизациями
	              (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями) ИЛИ  // ВозвратТоваровМеждуОрганизациями
	              (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитенту);                          // ОтчетКомитенту, ОтчетПоКомиссииМеждуОрганизациями
				  
	Если ЗначениеЗаполнено(ВидПоставки) Тогда
		
		Если ВидПоставки = Перечисления.ВидыПоставки.ВводОстатков Тогда
			
			Возврат Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию;
			
		ИначеЕсли ЭтоКомиссия Тогда
			  
			Возврат Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию; // Авансы не автоматизированы
			
		ИначеЕсли ВидПоставки = Перечисления.ВидыПоставки.Поставка 
		      ИЛИ ВидПоставки = Перечисления.ВидыПоставки.Возврат Тогда
		 
			Если ЗначениеЗаполнено(Договор) Тогда
				Возврат Договор.МоментОпределенияБазыНДС;
			Иначе
				Возврат Организация.МоментОпределенияБазыНДСПоЗакупкам;
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

Функция ОпределитьОбособленноеПодразделениеПоУмолчанию(Организация, ДоговорКонтрагента = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		НайденноеЗначение = ДоговорКонтрагента.ОбособленноеПодразделениеПоУмолчанию;
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
		
	КонецЕсли;

	НайденноеЗначение = Организация.ОбособленноеПодразделениеПоУмолчанию;
	Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАСЧЕТ ВОЗНИКШЕГО КРЕДИТА ПО НДС

// Процедура заполняет и записывает наборы записей регистров.
//
// Параметры
//	СтруктураНаборыЗаписей - Структура - Структура наборов записей регистров
//	СтруктураШапки - Структура - Реквизиты документа
//
Процедура ЗаписатьНаборыЗаписей(СтруктураНаборыЗаписей, УдалятьПустые = Ложь)
	
	Для Каждого СтрокаСтруктуры Из СтруктураНаборыЗаписей Цикл
		
		НаборЗаписей = СтрокаСтруктуры.Значение;
		Если НаборЗаписей <> Неопределено И (УдалятьПустые ИЛИ НаборЗаписей.Количество() > 0) Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьНаборыЗаписейРасчетыСКлиентами()

Функция ПолучитьСуммуСобытия(ВыборкаДокументов, ДляДокументаПоставки = Ложь)
	
	Если ДляДокументаПоставки Тогда
		Если ВыборкаДокументов.ДолгДокументаПоставки <> 0 Тогда
			СуммаСобытия = ВыборкаДокументов.ДолгДокументаПоставки;
		ИначеЕсли ВыборкаДокументов.ПредоплатаДокументаПоставки <> 0 Тогда
			СуммаСобытия = ВыборкаДокументов.ПредоплатаДокументаПоставки;
		ИначеЕсли ВыборкаДокументов.КВозвратуДокументаПоставки <> 0 Тогда
			СуммаСобытия = ВыборкаДокументов.КВозвратуДокументаПоставки;
		Иначе
			СуммаСобытия = 0;
		КонецЕсли;
	Иначе
		Если ВыборкаДокументов.ДолгАбсолютноеЗначение <> 0 Тогда
			СуммаСобытия = ВыборкаДокументов.ДолгАбсолютноеЗначение;
		ИначеЕсли ВыборкаДокументов.ПредоплатаАбсолютноеЗначение <> 0 Тогда
			СуммаСобытия = ВыборкаДокументов.ПредоплатаАбсолютноеЗначение;
		ИначеЕсли ВыборкаДокументов.КВозвратуАбсолютноеЗначение <> 0 Тогда
			СуммаСобытия = ВыборкаДокументов.КВозвратуАбсолютноеЗначение;
		Иначе
			СуммаСобытия = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаДокументов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаЗадолженности Тогда
		Возврат СуммаСобытия;
	КонецЕсли;
	
	Возврат ?(СуммаСобытия < 0, -СуммаСобытия, СуммаСобытия);
	
КонецФункции

// Процедура
//
// Параметры
//	Приемник
//	АналитикаУчетаПоПартнерам
//	ОбъектРасчетов
//	ВидПоставки
//	РасчетныйДокумент
//	МоментОпределенияБазыНДС
//
Процедура ЗаполнитьИзмеренияРегистраВозникшегоНДС(Приемник, АналитикаУчетаПоПартнерам, ОбъектРасчетов, Регистратор, Период, ВидПоставки, ДокументПоставки, МоментОпределенияБазыНДС)
	
	Приемник.АналитикаУчетаПоПартнерам 	= АналитикаУчетаПоПартнерам;
	Приемник.ОбъектРасчетов 			= ОбъектРасчетов;
	Приемник.Регистратор 				= Регистратор;
	Приемник.Период 					= Период;
	Приемник.ВидПоставки 				= ВидПоставки;
	Приемник.ДокументПоставки 			= ДокументПоставки;
	Приемник.МоментОпределенияБазыНДС 	= МоментОпределенияБазыНДС;
	
	Приемник.Активность					= Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСобытиеПоВходящемуНДС(МоментОпределенияБазы, ВыборкаДокументов, СуммаСобытия, СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНЕТребующаяРегистрацииНН, СхемаВозврата)
	
// Если значение МоментОпределенияБазы не заполнено считаем, что по первому событию
	Если МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию ИЛИ НЕ ЗначениеЗаполнено(МоментОпределенияБазы) Тогда
		
		Если СхемаВозврата Тогда
			Если (ВыборкаДокументов.ЭтоВозврат) Тогда
				Если (ВыборкаДокументов.ПредоплатаАбсолютноеЗначение <> 0) ИЛИ
						(ВыборкаДокументов.КВозвратуАбсолютноеЗначение <> 0) ИЛИ
						(ВыборкаДокументов.ДолгАбсолютноеЗначение <> 0 И (НЕ ВыборкаДокументов.РасчетныйДокументВозвратОплаты)) Тогда
					СуммаПоставкиТребующаяРегистрацииНН = СуммаСобытия;
				Иначе
				КонецЕсли;
			ИначеЕсли ВыборкаДокументов.ЭтоВозвратОплаты Тогда
				Если (ВыборкаДокументов.ДолгАбсолютноеЗначение <> 0) ИЛИ
						(ВыборкаДокументов.ПредоплатаАбсолютноеЗначение <> 0 И НЕ (ВыборкаДокументов.РасчетныйДокументВозврат)) Тогда
					СуммаПоставкиТребующаяРегистрацииНН = СуммаСобытия;
				Иначе
				КонецЕсли;
			КонецЕсли;		
		Иначе
			Если ВыборкаДокументов.ЭтоПервоеСобытие Тогда
				СуммаПоставкиТребующаяРегистрацииНН = СуммаСобытия;
			Иначе
				СуммаПоставкиНеТребующаяРегистрацииНН = СуммаСобытия;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
		
		Если СхемаВозврата Тогда
			Если ВыборкаДокументов.ЭтоВозврат Тогда
				СуммаПоставкиТребующаяРегистрацииНН = СуммаСобытия;
			ИначеЕсли ВыборкаДокументов.ЭтоВозвратОплаты Тогда
			КонецЕсли;
		Иначе
			Если ВыборкаДокументов.ЭтоПоставка Тогда
				СуммаПоставкиТребующаяРегистрацииНН = СуммаСобытия;
			Иначе
				СуммаПоставкиНеТребующаяРегистрацииНН = СуммаСобытия;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
		
		Если СхемаВозврата Тогда
			Если ВыборкаДокументов.ЭтоВозвратОплаты Тогда
				СуммаПоставкиТребующаяРегистрацииНН = СуммаСобытия;
			ИначеЕсли ВыборкаДокументов.ЭтоВозврат Тогда
			КонецЕсли;
		Иначе
			Если ВыборкаДокументов.ЭтоОплата Тогда
				СуммаПоставкиТребующаяРегистрацииНН = СуммаСобытия;
			Иначе
				СуммаПоставкиНеТребующаяРегистрацииНН = СуммаСобытия;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроведениеДокументовПоВозникшемуНДС(НачальныеГраницы) Экспорт
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Структура наборов записей (движений документов)
	Движения = Новый Структура;
	
	// Структура для хранения таблиц движений
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	// Создаем пустой набор записей регистра накопления "Расчеты с клиентами по документам".
	Движения.Вставить("НДСРасчетНалоговогоКредита", РегистрыНакопления.НДСРасчетНалоговогоКредита.СоздатьНаборЗаписей());
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("НДСРасчетНалоговогоКредита", Движения.НДСРасчетНалоговогоКредита.ВыгрузитьКолонки());
	


	МенеджерВременныхТаблиц = СформироватьВременнуюТаблицуНачальныхГраниц(НачальныеГраницы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент.Дата ЕСТЬ NULL 
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент.Дата > НачальныеГраницы.Период
	|				ТОГДА НачальныеГраницы.Период
	|			ИНАЧЕ РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент.Дата
	|		КОНЕЦ) КАК Период,
	|	НачальныеГраницы.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	НачальныеГраницы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ НачальныеГраницыСУчетомРасчетныхДокументов
	|ИЗ
	|	НачальныеГраницы КАК НачальныеГраницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ПО (РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = НачальныеГраницы.АналитикаУчетаПоПартнерам)
	|ГДЕ
	|	(РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|			ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|			ИЛИ РасчетыСПоставщикамиПоДокументам.КВозврату <> 0)
	|	И РасчетыСПоставщикамиПоДокументам.Период >= НачальныеГраницы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	НачальныеГраницы.АналитикаУчетаПоПартнерам.Организация,
	|	НачальныеГраницы.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(РасчетыСПоставщикамиПоДокументам.Период, МЕСЯЦ) КАК Месяц,
	|	НачальныеГраницыСУчетомРасчетныхДокументов.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаМесяцев
	|ИЗ
	|	НачальныеГраницыСУчетомРасчетныхДокументов КАК НачальныеГраницыСУчетомРасчетныхДокументов	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = НачальныеГраницыСУчетомРасчетныхДокументов.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщикамиПоДокументам.Период >= НачальныеГраницыСУчетомРасчетныхДокументов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМесяцев.Месяц,
	|	ТаблицаМесяцев.Организация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СистемыНалогообложенияОрганизаций.Период <= ТаблицаМесяцев.Месяц
	|				ТОГДА СистемыНалогообложенияОрганизаций.Период
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ПериодЗаписи
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	ТаблицаМесяцев КАК ТаблицаМесяцев
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК СистемыНалогообложенияОрганизаций
	|		ПО ТаблицаМесяцев.Организация = СистемыНалогообложенияОрганизаций.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМесяцев.Месяц,
	|	ТаблицаМесяцев.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.Организация,
	|	ТаблицаПериодов.Месяц,
	|	ЕСТЬNULL(НЕ СистемыНалогообложенияОрганизаций.ПлательщикНДС, ИСТИНА) КАК ЭтоНеплательщик
	|ПОМЕСТИТЬ ТаблицаНеплательщиков
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК СистемыНалогообложенияОрганизаций
	|		ПО ТаблицаПериодов.ПериодЗаписи = СистемыНалогообложенияОрганизаций.Период
	|			И ТаблицаПериодов.Организация = СистемыНалогообложенияОрганизаций.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументам.Валюта,
	|	РасчетыСПоставщикамиПоДокументам.Регистратор КАК Регистратор,
	|	РасчетыСПоставщикамиПоДокументам.Долг КАК ДолгАбсолютноеЗначение,
	|	РасчетыСПоставщикамиПоДокументам.Предоплата КАК ПредоплатаАбсолютноеЗначение,
	|	РасчетыСПоставщикамиПоДокументам.КВозврату КАК КВозвратуАбсолютноеЗначение,
	|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.Регистратор = РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПервоеСобытие,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОплата,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПоставка,				   
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация В (&МассивОперацийВозврата)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация В (&МассивОперацийВозвратаОплаты)
	|			ИЛИ (РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|					И (РасчетыСПоставщикамиПоДокументам.КВозврату < 0 ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата < 0))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратОплаты,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент.ХозяйственнаяОперация В (&МассивОперацийВозврата)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетныйДокументВозврат,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент.ХозяйственнаяОперация В (&МассивОперацийВозвратаОплаты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетныйДокументВозвратОплаты,				   
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РасчетыСПоставщикамиПоДокументам.Период,
	|	ЕСТЬNULL(ВложенныйЗапрос.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументПоставки,
	|	РасчетыСПоставщикамиПоДокументам.НомерСтроки КАК НомерСтроки,				   
	|	ВложенныйЗапрос.Долг КАК ДолгДокументаПоставки,
	|	ВложенныйЗапрос.Предоплата КАК ПредоплатаДокументаПоставки,
	|	ЕСТЬNULL(ВложенныйЗапрос.ДокументПоставкиЕстьВозврат, НЕОПРЕДЕЛЕНО) КАК ДокументПоставкиЕстьВозврат,
	|	ВложенныйЗапрос.КВозврату КАК КВозвратуДокументаПоставки
	|ПОМЕСТИТЬ ОсновнаяТаблица
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачальныеГраницыСУчетомРасчетныхДокументов КАК НачальныеГраницыСУчетомРасчетныхДокументов
	|		ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = НачальныеГраницыСУчетомРасчетныхДокументов.АналитикаУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНеплательщиков КАК ТаблицаНеплательщиков
	|		ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам.Организация = ТаблицаНеплательщиков.Организация
	|			И (НАЧАЛОПЕРИОДА(РасчетыСПоставщикамиПоДокументам.Период, МЕСЯЦ) = ТаблицаНеплательщиков.Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|       (ВЫБРАТЬ
	|			РасчетыСПоставщикамиПоДокументам.Регистратор КАК Регистратор,
	|			РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент КАК РасчетныйДокумент,
	|			СУММА(РасчетыСПоставщикамиПоДокументам.Долг) КАК Долг,
	|			СУММА(РасчетыСПоставщикамиПоДокументам.Предоплата) КАК Предоплата,
	|			РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|			РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику КАК ЗаказПоставщику,
	|			РасчетыСПоставщикамиПоДокументам.Валюта КАК Валюта,
	|			МАКСИМУМ(ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация В (&МассивОперацийВозврата)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ДокументПоставкиЕстьВозврат,
	|			СУММА(РасчетыСПоставщикамиПоДокументам.КВозврату) КАК КВозврату
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|				ЛЕВОЕ СОЕДИНЕНИЕ НачальныеГраницыСУчетомРасчетныхДокументов КАК НачальныеГраницыСУчетомРасчетныхДокументов
	|				ПО РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = НачальныеГраницыСУчетомРасчетныхДокументов.АналитикаУчетаПоПартнерам
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНеплательщиков КАК ТаблицаНеплательщиков
	|				ПО (НАЧАЛОПЕРИОДА(РасчетыСПоставщикамиПоДокументам.Период, МЕСЯЦ) = ТаблицаНеплательщиков.Месяц)
	|					И РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам.Организация = ТаблицаНеплательщиков.Организация
	|		ГДЕ
	|			(РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						И РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	                    // Конпенсация расхождений в ПТУ за счет другой организации
	|			        ИЛИ РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					    И РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация В (&МассивОперацийВозврата))
	|			И (РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.КВозврату <> 0)
	|			И (РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент.Дата >= НачальныеГраницыСУчетомРасчетныхДокументов.Период
	|					ИЛИ РасчетыСПоставщикамиПоДокументам.Период >= НачальныеГраницыСУчетомРасчетныхДокументов.Период)
	|			И ТаблицаНеплательщиков.ЭтоНеплательщик = ЛОЖЬ
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСПоставщикамиПоДокументам.Регистратор,
	|			РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент,
	|			РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам,
	|			РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику,
	|			РасчетыСПоставщикамиПоДокументам.Валюта
	|       ) КАК ВложенныйЗапрос
	|		ПО РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент = ВложенныйЗапрос.РасчетныйДокумент
	|			И РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = ВложенныйЗапрос.АналитикаУчетаПоПартнерам
	|			И РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику = ВложенныйЗапрос.ЗаказПоставщику
	|			И РасчетыСПоставщикамиПоДокументам.Валюта = ВложенныйЗапрос.Валюта
	|			И (ВЫБОР
	|				КОГДА РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|							И РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|						ИЛИ РасчетыСПоставщикамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							И РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|						ИЛИ РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация В (&МассивОперацийВозврата)
	|					ТОГДА РасчетыСПоставщикамиПоДокументам.Регистратор = ВложенныйЗапрос.Регистратор
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	РасчетыСПоставщикамиПоДокументам.Период >= НачальныеГраницыСУчетомРасчетныхДокументов.Период
	|	И (РасчетыСПоставщикамиПоДокументам.Долг <> 0
	|			ИЛИ РасчетыСПоставщикамиПоДокументам.Предоплата <> 0
	|			ИЛИ РасчетыСПоставщикамиПоДокументам.КВозврату <> 0)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоДокументам.Регистратор) В (&МассивДопустимыхТипов)
	|	И ТаблицаНеплательщиков.ЭтоНеплательщик = ЛОЖЬ
	|	И НЕ РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация В (&МассивЗапрещенныхХозопераций)
	|	И НЕ РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент.ХозяйственнаяОперация В (&МассивЗапрещенныхХозопераций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапросОбновитьДаты.ДокументПоставки ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапросУдалитьДаты.ДокументПоставки
	|		ИНАЧЕ ВложенныйЗапросОбновитьДаты.ДокументПоставки
	|	КОНЕЦ КАК ДокументПоставки,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапросОбновитьДаты.ДокументПоставки ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапросУдалитьДаты.Период
	|		ИНАЧЕ ВложенныйЗапросОбновитьДаты.Период
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапросОбновитьДаты.ДокументПоставки ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапросУдалитьДаты.АналитикаУчетаПоПартнерам
	|		ИНАЧЕ ВложенныйЗапросОбновитьДаты.АналитикаУчетаПоПартнерам
	|	КОНЕЦ КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапросОбновитьДаты.ДокументПоставки ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ДокументПоставки КАК ДокументПоставки,
	|		ВложенныйЗапрос.Период КАК Период,
	|		ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОсновнаяТаблица.ДокументПоставки КАК ДокументПоставки,
	|			МАКСИМУМ(ОсновнаяТаблица.АналитикаУчетаПоПартнерам) КАК АналитикаУчетаПоПартнерам,
	|			МИНИМУМ(НАЧАЛОПЕРИОДА(ОсновнаяТаблица.Период, День)) КАК Период
	|		ИЗ
	|			ОсновнаяТаблица КАК ОсновнаяТаблица
	|		ГДЕ
	|			ОсновнаяТаблица.ДокументПоставки <> НЕОПРЕДЕЛЕНО
	|			И ТИПЗНАЧЕНИЯ(ОсновнаяТаблица.ДокументПоставки) В (&МассивДопустимыхТиповНДСНачальныеПериоды)
	|		СГРУППИРОВАТЬ ПО
	|			ОсновнаяТаблица.ДокументПоставки) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДСНачальныеПериодыРасчетаНалоговогоКредита КАК НДСНачальныеПериодыРасчетаНалоговогоКредита
	|			ПО ВложенныйЗапрос.ДокументПоставки = НДСНачальныеПериодыРасчетаНалоговогоКредита.ДокументПоставки
	|	ГДЕ
	|		(НДСНачальныеПериодыРасчетаНалоговогоКредита.Дата ЕСТЬ NULL
	|			ИЛИ НДСНачальныеПериодыРасчетаНалоговогоКредита.ТребуетПересчета
	|			ИЛИ НДСНачальныеПериодыРасчетаНалоговогоКредита.Дата >= ВложенныйЗапрос.Период) ) КАК ВложенныйЗапросОбновитьДаты
	|
	|	ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НДСНачальныеПериодыРасчетаНалоговогоКредита.ДокументПоставки КАК ДокументПоставки,
	|			НДСНачальныеПериодыРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|			НДСНачальныеПериодыРасчетаНалоговогоКредита.Дата КАК Период
	|		ИЗ
	|			РегистрСведений.НДСНачальныеПериодыРасчетаНалоговогоКредита КАК НДСНачальныеПериодыРасчетаНалоговогоКредита
	|		ГДЕ
	|			НДСНачальныеПериодыРасчетаНалоговогоКредита.ТребуетПересчета ) КАК ВложенныйЗапросУдалитьДаты
	|
	|	ПО ВложенныйЗапросОбновитьДаты.ДокументПоставки = ВложенныйЗапросУдалитьДаты.ДокументПоставки
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнаяТаблица.АналитикаУчетаПоПартнерам,
	|	ОсновнаяТаблица.ОбъектРасчетов,
	|	ОсновнаяТаблица.РасчетныйДокумент,
	|	ОсновнаяТаблица.Валюта,
	|	ОсновнаяТаблица.Регистратор КАК Регистратор,
	|	ОсновнаяТаблица.ДолгАбсолютноеЗначение,
	|	ОсновнаяТаблица.ПредоплатаАбсолютноеЗначение,
	|	ОсновнаяТаблица.ХозяйственнаяОперация,
	|	ОсновнаяТаблица.ЭтоПервоеСобытие,
	|	ОсновнаяТаблица.ЭтоОплата,
	|	ОсновнаяТаблица.ЭтоПоставка,
	|	ОсновнаяТаблица.ЭтоВозврат,
	|	ОсновнаяТаблица.ЭтоВозвратОплаты,
	|	ОсновнаяТаблица.РасчетныйДокументВозврат,
	|	ОсновнаяТаблица.РасчетныйДокументВозвратОплаты,
	|	ОсновнаяТаблица.Контрагент,
	|	ОсновнаяТаблица.Организация,
	|	ОсновнаяТаблица.Период,
	|	ОсновнаяТаблица.ДокументПоставки,
	|	ОсновнаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ОсновнаяТаблица.ДолгДокументаПоставки,
	|	ОсновнаяТаблица.ПредоплатаДокументаПоставки,
	|	ОсновнаяТаблица.КВозвратуАбсолютноеЗначение,
	|	ОсновнаяТаблица.КВозвратуДокументаПоставки,
	|	ОсновнаяТаблица.ДокументПоставкиЕстьВозврат
	|ИЗ
	|	ОсновнаяТаблица КАК ОсновнаяТаблица
	|ГДЕ
	|	ОсновнаяТаблица.Валюта = &ВалютаРегламентированногоУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаМесяцев
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНеплательщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачальныеГраницыСУчетомРасчетныхДокументов";
				   

				   
	МассивДопустимыхТиповРегистратора = Новый Массив;
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	МассивДопустимыхТиповРегистратора.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	
	МассивОперацийВозврата = Новый Массив;
	МассивОперацийВозврата.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	МассивОперацийВозврата.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	
	МассивОперацийВозвратаОплаты = Новый Массив;
	МассивОперацийВозвратаОплаты.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивОперацийВозвратаОплаты.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	МассивДопустимыхТиповНДСНачальныеПериоды = Метаданные.РегистрыСведений.НДСНачальныеПериодыРасчетаНалоговогоКредита.Измерения.ДокументПоставки.Тип.Типы();
	
	Запрос.УстановитьПараметр("МассивДопустимыхТипов", МассивДопустимыхТиповРегистратора);
	Запрос.УстановитьПараметр("МассивОперацийВозврата", МассивОперацийВозврата); 
	Запрос.УстановитьПараметр("МассивОперацийВозвратаОплаты", МассивОперацийВозвратаОплаты); 
	Запрос.УстановитьПараметр("МассивДопустимыхТиповНДСНачальныеПериоды", МассивДопустимыхТиповНДСНачальныеПериоды);

	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());	

	МассивЗапрещенныхХозопераций = Новый Массив;
	МассивЗапрещенныхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивЗапрещенныхХозопераций.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
	Запрос.УстановитьПараметр("МассивЗапрещенныхХозопераций", МассивЗапрещенныхХозопераций);

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоРегистратору = РезультатЗапроса[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.НДСРасчетНалоговогоКредита;
	
	ЗаписьНабора = Неопределено;
	ЗаписьНабораВозвраты = Неопределено;
	
	МассивНедопустимыхДокументов = Новый Массив;
	МассивНедопустимыхДокументов.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	МассивНедопустимыхДокументов.Добавить(Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт"));
	МассивНедопустимыхДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	МассивНедопустимыхДокументов.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	МассивНедопустимыхДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОСписании"));
		
	СтарыеАналитики = Новый Структура("ПредоплатаАбсолютноеЗначение, КВозвратуАбсолютноеЗначение, ДолгАбсолютноеЗначение
										|, ЭтоПервоеСобытие, ЭтоПоставка, ЭтоОплата, ЭтоВозврат, ЭтоВозвратОплаты, РасчетныйДокументВозвратОплаты, РасчетныйДокументВозврат");
	
	
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		
		ВыборкаДокументов = ВыборкаПоРегистратору.Выбрать();
		
		МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию;
		
		СтарыйНомерСтроки = Неопределено;
		СтараяОбщаяСуммаСобытияВозврат = 0;
		СтараяОбщаяСуммаСобытия = 0;
		ОбщаяСуммаСобытия = 0;
		ОбщаяСуммаСобытияВозврат = 0;
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			Если (НЕ МассивНедопустимыхДокументов.Найти(ТипЗнч(ВыборкаДокументов.ОбъектРасчетов)) = Неопределено)
				ИЛИ (НЕ МассивНедопустимыхДокументов.Найти(ТипЗнч(ВыборкаДокументов.РасчетныйДокумент)) = Неопределено)
				ИЛИ (НЕ МассивНедопустимыхДокументов.Найти(ТипЗнч(ВыборкаДокументов.ДокументПоставки)) = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			
			
			Если (ВыборкаДокументов.ДолгАбсолютноеЗначение <> 0 И ВыборкаДокументов.ПредоплатаАбсолютноеЗначение <> 0) Тогда
				// Ошибка
				Продолжить;
			КонецЕсли;
			
			Если ((ВыборкаДокументов.КВозвратуАбсолютноеЗначение <> 0 И ВыборкаДокументов.ПредоплатаАбсолютноеЗначение = 0 И ВыборкаДокументов.ДолгАбсолютноеЗначение = 0) И НЕ ВыборкаДокументов.ЭтоВозврат) 
				ИЛИ (ВыборкаДокументов.ДолгАбсолютноеЗначение < 0 И ВыборкаДокументов.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.КорректировкаЗадолженности) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоСхемаВозврата = ((ВыборкаДокументов.ДокументПоставки <> Неопределено) И ВыборкаДокументов.ДокументПоставкиЕстьВозврат);
			
			Если ВыборкаДокументов.НомерСтроки <> СтарыйНомерСтроки Тогда
					
				Если НЕ СтарыйНомерСтроки = Неопределено Тогда
					
					Если ОбщаяСуммаСобытия < СтараяОбщаяСуммаСобытия Тогда
					
						ЗаписьНабораНовая = НаборЗаписей.Добавить();
						// Заполним измерения
						ЗаполнитьИзмеренияРегистраВозникшегоНДС(ЗаписьНабораНовая, ЗаписьНабора.АналитикаУчетаПоПартнерам
																			, ЗаписьНабора.ОбъектРасчетов
																			, ЗаписьНабора.Регистратор
																			, ЗаписьНабора.Период
																			, Перечисления.ВидыПоставки.Поставка
																			, Неопределено
																			, ЗаписьНабора.МоментОпределенияБазыНДС);
						
						ЗаполнитьСобытиеПоВходящемуНДС(МоментОпределенияБазы, СтарыеАналитики, СтараяОбщаяСуммаСобытия - ОбщаяСуммаСобытия
														, ЗаписьНабораНовая.СуммаПоставкиТребующаяРегистрацииНН
														, ЗаписьНабораНовая.СуммаПоставкиНЕТребующаяРегистрацииНН
														, Ложь);
						
					КонецЕсли;
					ОбщаяСуммаСобытия = 0;
					
					Если ОбщаяСуммаСобытияВозврат < СтараяОбщаяСуммаСобытияВозврат Тогда
			
						ЗаписьНабораНовая = НаборЗаписей.Добавить();
						// Заполним измерения
						ЗаполнитьИзмеренияРегистраВозникшегоНДС(ЗаписьНабораНовая, ЗаписьНабора.АналитикаУчетаПоПартнерам
																			, ЗаписьНабора.ОбъектРасчетов
																			, ЗаписьНабора.Регистратор
																			, ЗаписьНабора.Период
																			, Перечисления.ВидыПоставки.Возврат
																			, Неопределено
																			, ЗаписьНабора.МоментОпределенияБазыНДС);
																			
						ЗаполнитьСобытиеПоВходящемуНДС(МоментОпределенияБазы, СтарыеАналитики, СтараяОбщаяСуммаСобытияВозврат - ОбщаяСуммаСобытияВозврат
														, ЗаписьНабораНовая.СуммаПоставкиТребующаяРегистрацииНН
														, ЗаписьНабораНовая.СуммаПоставкиНЕТребующаяРегистрацииНН
														, Истина);

																			
					КонецЕсли;
					ОбщаяСуммаСобытияВозврат = 0;
					
				КонецЕсли;
				
				
				Если ТипЗнч(ВыборкаДокументов.ОбъектРасчетов) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
					ИЛИ ТипЗнч(ВыборкаДокументов.ОбъектРасчетов) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
					ИЛИ ТипЗнч(ВыборкаДокументов.ОбъектРасчетов) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
					Договор = Неопределено;
				ИначеЕсли ТипЗнч(ВыборкаДокументов.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Договор = ВыборкаДокументов.ОбъектРасчетов;
				ИначеЕсли ЗначениеЗаполнено(ВыборкаДокументов.ОбъектРасчетов) Тогда
					Договор = ВыборкаДокументов.ОбъектРасчетов.Договор;
				Иначе
					//Объект расчетов пока пустой
					Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				КонецЕсли;

				МоментОпределенияБазы = ОпределитьМоментОпределенияБазыНДС(
					?(ЭтоСхемаВозврата, Перечисления.ВидыПоставки.Возврат, Перечисления.ВидыПоставки.Поставка), 
					ВыборкаДокументов.ХозяйственнаяОперация,
					ВыборкаДокументов.Организация, 
					Договор
				);
				
                Если (ВыборкаДокументов.ЭтоВозврат ИЛИ ВыборкаДокументов.ЭтоВозвратОплаты) 
						И ( (ЭтоСхемаВозврата)
							ИЛИ (МоментОпределенияБазы = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию 
									И (ВыборкаДокументов.РасчетныйДокументВозвратОплаты ИЛИ ВыборкаДокументов.КВозвратуАбсолютноеЗначение <> 0)) )Тогда
					СтараяОбщаяСуммаСобытия = 0;
				Иначе
					СтараяОбщаяСуммаСобытия = ПолучитьСуммуСобытия(ВыборкаДокументов);
				КонецЕсли;
				
				Если ВыборкаДокументов.ЭтоВозврат ИЛИ ВыборкаДокументов.ЭтоВозвратОплаты Тогда
					СтараяОбщаяСуммаСобытияВозврат = ПолучитьСуммуСобытия(ВыборкаДокументов);
				КонецЕсли;
				
				СтарыйНомерСтроки = ВыборкаДокументов.НомерСтроки;
				
				ЗаполнитьЗначенияСвойств(СтарыеАналитики, ВыборкаДокументов);
				
			КонецЕсли;
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			// Заполним измерения
			ЗаполнитьИзмеренияРегистраВозникшегоНДС(ЗаписьНабора, ВыборкаДокументов.АналитикаУчетаПоПартнерам
																, ВыборкаДокументов.ОбъектРасчетов
																, ВыборкаДокументов.Регистратор
																, ВыборкаДокументов.Период
																, ?(ЭтоСхемаВозврата, Перечисления.ВидыПоставки.Возврат, Перечисления.ВидыПоставки.Поставка)
																, ВыборкаДокументов.ДокументПоставки
																, МоментОпределенияБазы);
																
			Если ВыборкаДокументов.ДокументПоставки = Неопределено Тогда
                СуммаСобытия = СтараяОбщаяСуммаСобытия - ОбщаяСуммаСобытия;
			Иначе
				СуммаСобытия = ПолучитьСуммуСобытия(ВыборкаДокументов, Истина);
			КонецЕсли;
			
			Если ЭтоСхемаВозврата Тогда
				Если СуммаСобытия > СтараяОбщаяСуммаСобытияВозврат Тогда
					СуммаСобытия = СтараяОбщаяСуммаСобытияВозврат;
				КонецЕсли;
				ОбщаяСуммаСобытияВозврат = ОбщаяСуммаСобытияВозврат + СуммаСобытия;
			Иначе
				Если СуммаСобытия > СтараяОбщаяСуммаСобытия Тогда
					СуммаСобытия = СтараяОбщаяСуммаСобытия;
				КонецЕсли;
				ОбщаяСуммаСобытия = ОбщаяСуммаСобытия + СуммаСобытия;
			КонецЕсли;
			
			Если ВыборкаДокументов.ЭтоВозвратОплаты Тогда
				СуммаСобытия = ?(СуммаСобытия < 0, -СуммаСобытия, СуммаСобытия);
			КонецЕсли;
			
			ЗаполнитьСобытиеПоВходящемуНДС(МоментОпределенияБазы, ВыборкаДокументов, СуммаСобытия
											, ЗаписьНабора.СуммаПоставкиТребующаяРегистрацииНН
											, ЗаписьНабора.СуммаПоставкиНЕТребующаяРегистрацииНН
											, ЭтоСхемаВозврата);
			
			
			
			//	ДополнительныеСвойства.ТаблицыДляДвижений.НДСРасчетНалоговогоКредита.Свернуть(
			//	" Период
			//	|,Регистратор
			//	|,Активность
			//	|,ВидДвижения
			//	|,МоментВремени
			//	|,АналитикаУчетаПоПартнерам
			//	|,ЗаказПоставщику
			//	|,РасчетныйДокумент
			//	|,Валюта
			//	|,ДатаПлатежа
			//	|,ХозяйственнаяОперация
			//	|",
			//	" КОтгрузке
			//	|,КОплате
			//	|,КВозврату
			//	|,Долг
			//	|,Предоплата
			//);
			
		КонецЦикла;
		
		Если ОбщаяСуммаСобытия < СтараяОбщаяСуммаСобытия Тогда
			
			ЗаписьНабораНовая = НаборЗаписей.Добавить();
			// Заполним измерения
			ЗаполнитьИзмеренияРегистраВозникшегоНДС(ЗаписьНабораНовая, ЗаписьНабора.АналитикаУчетаПоПартнерам
																, ЗаписьНабора.ОбъектРасчетов
																, ЗаписьНабора.Регистратор
																, ЗаписьНабора.Период
																, Перечисления.ВидыПоставки.Поставка
																, Неопределено
																, ЗаписьНабора.МоментОпределенияБазыНДС);
																
			ЗаполнитьСобытиеПоВходящемуНДС(МоментОпределенияБазы, СтарыеАналитики, СтараяОбщаяСуммаСобытия - ОбщаяСуммаСобытия
											, ЗаписьНабораНовая.СуммаПоставкиТребующаяРегистрацииНН
											, ЗаписьНабораНовая.СуммаПоставкиНЕТребующаяРегистрацииНН
											, Ложь);
																
		КонецЕсли;
		
		Если ОбщаяСуммаСобытияВозврат < СтараяОбщаяСуммаСобытияВозврат Тогда
			
			ЗаписьНабораНовая = НаборЗаписей.Добавить();
			// Заполним измерения
			ЗаполнитьИзмеренияРегистраВозникшегоНДС(ЗаписьНабораНовая, ЗаписьНабора.АналитикаУчетаПоПартнерам
																, ЗаписьНабора.ОбъектРасчетов
																, ЗаписьНабора.Регистратор
																, ЗаписьНабора.Период
																, Перечисления.ВидыПоставки.Возврат
																, Неопределено
																, ЗаписьНабора.МоментОпределенияБазыНДС);
																
			ЗаполнитьСобытиеПоВходящемуНДС(МоментОпределенияБазы, СтарыеАналитики, СтараяОбщаяСуммаСобытияВозврат - ОбщаяСуммаСобытияВозврат
											, ЗаписьНабораНовая.СуммаПоставкиТребующаяРегистрацииНН
											, ЗаписьНабораНовая.СуммаПоставкиНЕТребующаяРегистрацииНН
											, Истина);

																
		КонецЕсли;

		
		Движения.НДСРасчетНалоговогоКредита.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		
		Если Не ЗначениеЗаполнено(Движения.НДСРасчетНалоговогоКредита.Отбор.Регистратор.Значение) Тогда
			ВызватьИсключение "Не удалось установить документ регистратор "+ВыборкаПоРегистратору.Регистратор+" для проведения по регистру НДСРасчетНалоговогоКредита";
		КонецЕсли;
		
		Для каждого ЗаписьИзНабора из НаборЗаписей.НайтиСтроки(Новый Структура("СуммаПоставкиТребующаяРегистрацииНН, СуммаПоставкиНеТребующаяРегистрацииНН", 0, 0)) Цикл
			НаборЗаписей.Удалить(ЗаписьИзНабора);
		КонецЦикла;
		
		// Это можно удалить. Движения можно писать напрямую в Движения
		Движения.НДСРасчетНалоговогоКредита.Загрузить(ДополнительныеСвойства.ТаблицыДляДвижений.НДСРасчетНалоговогоКредита);
		
		// Запишем наборы записей в базу.
		ЗаписатьНаборыЗаписей(Движения, Истина);
		
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
	
	
	ВыборкаПоДокументамОтгрузки = РезультатЗапроса[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Пока ВыборкаПоДокументамОтгрузки.Следующий() Цикл
		
		Менеджер = РегистрыСведений.НДСНачальныеПериодыРасчетаНалоговогоКредита.СоздатьМенеджерЗаписи();
				
		Менеджер.ДокументПоставки = ВыборкаПоДокументамОтгрузки.ДокументПоставки;
		
		Если ВыборкаПоДокументамОтгрузки.Удалить Тогда
			
			Менеджер.Удалить();
			
		Иначе
			
			Менеджер.Дата = ВыборкаПоДокументамОтгрузки.Период;
			Менеджер.ТребуетПересчета = Ложь;
			Менеджер.АналитикаУчетаПоПартнерам = ВыборкаПоДокументамОтгрузки.АналитикаУчетаПоПартнерам;
			
			Менеджер.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
		
	// Запишем наборы записей в базу.
	ЗаписатьНаборыЗаписей(Движения);
		
	НаборЗаписей.Очистить();
	
	
	
КонецПроцедуры

Функция ОпределитьГраницуАктуальностиФормированияНалоговыхДокументов(КонецРасчета, АналитикиКРасчету = Неопределено) Экспорт
	
	РасчетКВосстановлению = "РасчетыСПоставщиками";
	
	ГраницаАктуальности = РаспределениеВзаиморасчетов.НачалоРасчетов(КонецРасчета, АналитикиКРасчету, РасчетКВосстановлению);
	
	Если ГраницаАктуальности = Неопределено Тогда
		Возврат КонецДня(ТекущаяДата()) + 1;
	Иначе
		Возврат ГраницаАктуальности;
	КонецЕсли;
	
КонецФункции

Функция СформироватьВременнуюТаблицуНачальныхГраниц(НачальныеГраницы)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачальныеГраницыБаза", НачальныеГраницы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачальныеГраницыБаза.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	НачальныеГраницыБаза.Период КАК Период
	|ПОМЕСТИТЬ НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита
	|ИЗ
	|	&НачальныеГраницыБаза КАК НачальныеГраницыБаза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСНачальныеПериодыРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(НДСНачальныеПериодыРасчетаНалоговогоКредита.Дата) КАК Период
	|ПОМЕСТИТЬ НачальныеГраницыПериодовРасчетаНалоговогоКредита
	|ИЗ
	|	РегистрСведений.НДСНачальныеПериодыРасчетаНалоговогоКредита КАК НДСНачальныеПериодыРасчетаНалоговогоКредита
	|ГДЕ
	|	НДСНачальныеПериодыРасчетаНалоговогоКредита.ТребуетПересчета
	|СГРУППИРОВАТЬ ПО НДСНачальныеПериодыРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам ЕСТЬ NULL 
	|			ТОГДА НачальныеГраницыПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам
	|		ИНАЧЕ НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам
	|	КОНЕЦ КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам ЕСТЬ NULL 
	|				ТОГДА НачальныеГраницыПериодовРасчетаНалоговогоКредита.Период
	|			ИНАЧЕ НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита.Период
	|		КОНЕЦ) КАК Период
	|ПОМЕСТИТЬ НачальныеГраницы
	|ИЗ
	|	НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита КАК НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита
	|		ПОЛНОЕ СОЕДИНЕНИЕ НачальныеГраницыПериодовРасчетаНалоговогоКредита КАК НачальныеГраницыПериодовРасчетаНалоговогоКредита
	|		ПО НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам = НачальныеГраницыПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам ЕСТЬ NULL 
	|			ТОГДА НачальныеГраницыПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам
	|		ИНАЧЕ НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита.АналитикаУчетаПоПартнерам
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачальныеГраницыБезУчетаПериодовРасчетаНалоговогоКредита
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачальныеГраницыПериодовРасчетаНалоговогоКредита";
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции 


// Возвращает суммы всех операций поставки по облагаемым НДС операциям и всем операциям за период.
// Данные будут получены из регистра Декларации по НДС (регистра накопления НДСРеестрВыданныхНалоговыхДокументов) 
// с учетом всех корректировок за указанный период.
//
// Параметры:
//	Организация                 - СправочникСсылка.Организации  - организация
//	НачПериода                  - Дата                          - начало периода
//	КонПериода                  - Дата                          - конец периода
//	СпецРежимНалогообложения    - Число                         - код спец. режима налогообложения
//
// Возвращаемое значение:
//	Структура - где:
//     * СуммаВсехОпераций          - Число - сумма всех операций поставки по всем операциям
//     * СуммаОблагаемыхОпераций    - Число - сумма всех операций поставки по облагаемым НДС операциям
//
Функция ПолучитьСуммыОблагаемыхПоставокПоНДС(Организация, НачПериода, КонПериода, СпецРежимНалогообложения = 0) Экспорт 

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  КонПериода);
	
	МассивВсеОперации = Новый Массив();
	МассивОблагаемыеОперации = Новый Массив();
	
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20ПоставкаОФ);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Экспорт);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Другие);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаНецелевоеИсп);
	// из неиспользуемых в 2011 году
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаСамостОшибки);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаПрочее);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОИмпортВексель);
	
	Для Каждого ОблОперация Из МассивОблагаемыеОперации Цикл
		МассивВсеОперации.Добавить(ОблОперация);
    КонецЦикла;
    
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОУслугиВнеУкраины);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировка_НеОбъект);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировка_УслугиВнеУкраины);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировка_НООсвобожден);
	
	Запрос.УстановитьПараметр("МассивВсеОперации", МассивВсеОперации);
	Запрос.УстановитьПараметр("МассивОблагаемыеОперации", МассивОблагаемыеОперации);
	
    Ставка0ИЛИ20 = Новый Массив();
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС20);
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС0);
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС7);
    Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС14);
	Запрос.УстановитьПараметр("Ставка0ИЛИ20", Ставка0ИЛИ20);
	
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", СпецРежимНалогообложения);
	
	УсловнаяПродажа = Новый Массив;
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа);
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов);
	//УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийПриложений2КНалоговойНакладной.УсловнаяПродажаВозврат);
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа);
	Запрос.УстановитьПараметр("УсловнаяПродажа", УсловнаяПродажа);
	
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	ЕСТЬNULL(СУММА(НДСНалоговыеОбязательстваОбороты.СуммаБезНДСОборот), 0) КАК СуммаВсехОпераций,
    |	ЕСТЬNULL(СУММА(ВЫБОР
    |				КОГДА НДСНалоговыеОбязательстваОбороты.СтатьяДекларацииНДСНалоговыеОбязательства В (&МассивОблагаемыеОперации)
    |						И НДСНалоговыеОбязательстваОбороты.СтавкаНДС В (&Ставка0ИЛИ20)
    |					ТОГДА НДСНалоговыеОбязательстваОбороты.СуммаБезНДСОборот
    |				ИНАЧЕ 0
    |			КОНЕЦ), 0) КАК СуммаОблагаемыхОпераций
    |ИЗ
    |	РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов.Обороты(
    |			&НачПериода,
    |			&КонПериода,
    |			Регистратор,
    |			АналитикаУчетаПоПартнерам.Организация = &Организация
    |				И СтатьяДекларацииНДСНалоговыеОбязательства В (&МассивВсеОперации)) КАК НДСНалоговыеОбязательстваОбороты
    | ГДЕ 
    |	НЕ Регистратор.ВидОперации В (&УсловнаяПродажа) ИЛИ Период < ДатаВремя(2015,07,01)
    |	И ЕстьNULL(Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
    |";          
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПродажНДС = Новый Структура();
	СтруктураПродажНДС.Вставить("СуммаОблагаемыхОпераций", 0);
	СтруктураПродажНДС.Вставить("СуммаВсехОпераций", 0);
	
	Если Выборка.Следующий() Тогда
		
		СтруктураПродажНДС.СуммаОблагаемыхОпераций = Выборка.СуммаОблагаемыхОпераций;
		СтруктураПродажНДС.СуммаВсехОпераций 	   = Выборка.СуммаВсехОпераций;
	
	КонецЕсли;
	
    Возврат СтруктураПродажНДС;
	
КонецФункции



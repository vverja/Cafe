#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ТаблицаНакладныхВоВременномХранилище = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицаНакладныхВоВременномХранилище);
	Склад        = Параметры.Склад;
	ИспользоватьРеализациюПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");
	
	ТаблицаНакладных = РеквизитФормыВЗначение("ОформленныеНакладные");
	ТаблицаНакладных = ТаблицаНакладныхВоВременномХранилище;
	ЗначениеВРеквизитФормы(ТаблицаНакладных, "ОформленныеНакладные");
	
	МассивЗаказов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивЗаказов,
		ТаблицаНакладныхВоВременномХранилище.ВыгрузитьКолонку("Заказ"), Истина);
	Заказ = МассивЗаказов.Получить(0);
	ТоварыНакладной.Параметры.УстановитьЗначениеПараметра("МассивЗаказов", МассивЗаказов);
	ТоварыНакладной.Параметры.УстановитьЗначениеПараметра("МассивНакладных",
		ТаблицаНакладныхВоВременномХранилище.ВыгрузитьКолонку("Реализация"));
		
	СписокЗаказов.ЗагрузитьЗначения(МассивЗаказов);
	
	Элементы.ТоварыНакладнойЗаказ.Видимость = МассивЗаказов.Количество()>1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьПараметрыСписков();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если (ИмяСобытия = "Запись_РеализацияТоваровУслуг"
		ИЛИ ИмяСобытия = "Запись_ЗаказКлиента"
		ИЛИ ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Элементы.ТоварыНакладной.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОформленныеНакладные

&НаКлиенте
Процедура ОформленныеНакладныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПараметрыСписков();
	
	ДанныеНакладная = Элементы.ОформленныеНакладные.ТекущиеДанные;
	ПоказатьЗначение(, ДанныеНакладная.Реализация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленныеНакладныеПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьПараметрыСписков", 0.2, Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = ТоварыНакладной.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Положительная общая разница
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Положительная общая разница';uk='Позитивна загальна різниця'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДельтаОтгрузкиОбщая");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДельтаОтгрузкиОбщая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	
	// Отрицательная общая разница
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Отрицательная общая разница';uk='Від''ємна загальна різниця'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДельтаОтгрузкиОбщая");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДельтаОтгрузкиОбщая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	
	// Положительная разница
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Положительная разница';uk='Позитивна різниця'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДельтаОтгрузки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДельтаОтгрузки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	
	// Отрицательная разница
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Отрицательная разница';uk='Від''ємна різниця'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДельтаОтгрузки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДельтаОтгрузки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСписков()
	
	ДанныеНакладная = Элементы.ОформленныеНакладные.ТекущиеДанные;
	Если ДанныеНакладная <> Неопределено Тогда
		ТоварыНакладной.Параметры.УстановитьЗначениеПараметра("Накладная", ДанныеНакладная.Реализация);
	Иначе
		ТоварыНакладной.Параметры.УстановитьЗначениеПараметра("Накладная", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перезаполнить(Команда)
	
	ПерезаполняемаяНакладная = Элементы.ОформленныеНакладные.ТекущиеДанные.Реализация;
	ПродажиКлиент.ПерезаполнитьНакладнуюПоОрдерам(ПерезаполняемаяНакладная);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузке(Команда)
	
	ИмяФормыРеализации = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	МассивЗаказов = СписокЗаказов.ВыгрузитьЗначения();
	ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", Ложь, Истина);
	ПараметрыОснования = Новый Структура;
	
	Если МассивЗаказов.Количество() = 1 
		Или Не ИспользоватьРеализациюПоНесколькимЗаказам Тогда
		
		ВариантыОформленияПродажи = ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг");
		
		ПараметрыОснования.Вставить("ДокументОснование",   Заказ);
		ПараметрыОснования.Вставить("СкладОтгрузки",       Склад);
		ПараметрыОснования.Вставить("ВариантОформленияПродажи", ВариантыОформленияПродажи);
		Если ПараметрыОформления <> Неопределено Тогда
			ПараметрыОснования.Вставить("ПараметрыОформления", ПараметрыОформления);
		КонецЕсли;
		ОткрытьФорму(ИмяФормыРеализации, Новый Структура("Основание", ПараметрыОснования));
	Иначе
		РеквизитыШапки = Новый Структура();
		ОчиститьСообщения();
		
		Если ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(МассивЗаказов, РеквизитыШапки) Тогда
			
			ВариантыОформленияПродажи = ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг");
			
			ПараметрыОснования.Вставить("РеквизитыШапки",      РеквизитыШапки);
			ПараметрыОснования.Вставить("ДокументОснование",   МассивЗаказов);
			ПараметрыОснования.Вставить("СкладОтгрузки",       Склад);
			ПараметрыОснования.Вставить("ВариантОформленияПродажи", ВариантыОформленияПродажи);
			Если ПараметрыОформления <> Неопределено Тогда
				ПараметрыОснования.Вставить("ПараметрыОформления", ПараметрыОформления);
			КонецЕсли;
			ОткрытьФорму(ИмяФормыРеализации, Новый Структура("Основание", ПараметрыОснования));
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	ПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ИдКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	
	// Ошибки генерируемые в FREDO ДокМен при проверке статусов налоговых документов (исходящих)
	ПредставлениеСостоянийДокументов = Новый СписокЗначений;
	ПредставлениеСостоянийДокументов.Добавить(-1, НСтр("ru='Не выгружено во ""FREDO ДокМен""';uk= 'Не вивантажено в ""FREDO ДокМен""'"));
	ПредставлениеСостоянийДокументов.Добавить( 0, НСтр("ru='Выгружено во ""FREDO ДокМен""';uk= 'Вивантажено в ""FREDO ДокМен""'"));
	ПредставлениеСостоянийДокументов.Добавить( 5, НСтр("ru='Отправлено контрагенту';uk= 'Відправлено контрагенту'"));		
	ПредставлениеСостоянийДокументов.Добавить( 6, НСтр("ru='Доставлено контрагенту';uk= 'Доставлено контрагенту'"));		
	ПредставлениеСостоянийДокументов.Добавить( 7, НСтр("ru='Утверждено контрагентом';uk= 'Затверджено контрагентом'"));		
	ПредставлениеСостоянийДокументов.Добавить( 8, НСтр("ru='Получено контрагентом';uk= 'Отриманий контрагентом'"));		
	ПредставлениеСостоянийДокументов.Добавить( 9, НСтр("ru='Отклонено контрагентом';uk= 'Відхилено контрагентом'"));		
	
	КолонкаПометкаВыполнить_Текст       = НСтр("ru='Выгружать';uk='Вивантажувати'");
	КолонкаПометкаВыполнить_ПолныйТекст = НСтр("ru='Отметка, указывает на то что документ будет выгружен в ""FREDO ДокМен""';uk='Позначка, що вказує на те, що документ буде вивантажений в ""FREDO ДокМен""'");
	
	ВыполнитьТекст = НСтр("ru='Выгрузить в ""FREDO ДокМен""';uk='Вивантажити в ""FREDO ДокМен""'");
	
	Элементы.ТаблицаДокументовПометка_Выполнить.Заголовок = КолонкаПометкаВыполнить_Текст;
	Элементы.ТаблицаДокументовПометка_Выполнить.Подсказка = КолонкаПометкаВыполнить_ПолныйТекст;
	
	Элементы.ТаблицаДокументовВыгрузитьВ1СЗвит.Заголовок = ВыполнитьТекст;

	ДатаНачала = НачалоМесяца(ТекущаяДата());
	ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	Период.ДатаНачала    = ?(ЗначениеЗаполнено(ДатаНачала),    ДатаНачала,    '0001-01-01');
	Период.ДатаОкончания = ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, '0001-01-01');
	
	Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ИдКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда		
		Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность_МенеджерЗвит1С_ВыгрузкаНалоговыхДокументов_Организация", "");	
	КонецЕсли;
	СтараяОрганизация = Организация; 
	
	ЗаполнитьЕДРПОУОрганизации();
	
	СписокСвойствДокументов1С = Новый Структура();
	СписокСвойствДокументов1С.Вставить("ТипДокумента");
	СписокСвойствДокументов1С.Вставить("Дата");
	СписокСвойствДокументов1С.Вставить("Номер");
	СписокСвойствДокументов1С.Вставить("НомерПорядковый");
	СписокСвойствДокументов1С.Вставить("Контрагент");
	СписокСвойствДокументов1С.Вставить("Ответственный"); //
	СписокСвойствДокументов1С.Вставить("СуммаДокумента"); 
	СписокСвойствДокументов1С.Вставить("СуммаНДСДокумента"); 
	СписокСвойствДокументов1С.Вставить("Организация_ЕДРПОУ"); 
	СписокСвойствДокументов1С.Вставить("ИДДокумента");
	СписокСвойствДокументов1С.Вставить("ДокументКорректен");
	СписокСвойствДокументов1С.Вставить("ДокументКорректен_ОписаниеОшибки");
	СписокСвойствДокументов1С.Вставить("СостояниеСтр");
	
	СписокСвойствДокументов1СЗвит = Новый Структура();
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_СуммаДокумента");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_СуммаНДС");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Состояние");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_ДокументКорректен");
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Организация_ЕДРПОУ");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Номер");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_Дата");	
	СписокСвойствДокументов1СЗвит.Вставить("Звит1С_СовпадаютКлючевыеПоля");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЕДРПОУОрганизации()
	
	// получим информацию об организации из шапки обработки
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");	
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , СписокПоказателей);
	Сведения.Свойство("КодПоЕДРПОУ", Организация_ЕДРПОУ);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ТипДокумента.СписокВыбора.Добавить("Рахунок");
	Элементы.ТипДокумента.СписокВыбора.Добавить("Акт");
	Элементы.ТипДокумента.СписокВыбора.Добавить("Накладна");
	ТипДокумента = Элементы.ТипДокумента.СписокВыбора[0].Значение;
	
	Если Параметры.Свойство("ТипДокумента") Тогда
		ТипДокумента = Параметры.ТипДокумента;
	КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();
	
	МассивСвязей = Новый Массив();
	Если ИдКонфигурации = "ЕРП"  ИЛИ ИдКонфигурации = "BASУТ" Тогда
		
		Элементы.Ответственный.Заголовок = "Менеджер:";	
		                                                                      
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент",  "Контрагент"));
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Организация"));
		
	Иначе
		
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец",    "Контрагент"));
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Организация"));
		
	КонецЕсли;
	Элементы.ДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	
КонецПроцедуры

// Функция открывает налоговый документ в FREDO ДокМен
// 
&НаКлиенте
Функция ОткрытьДокументВЗвит1С(ДокументСсылка) Экспорт
		
	глМенеджерЗвит1С.ОткрытьДокументВЗвит1С(ДокументСсылка);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФормуВыбораНалоговогоДокумента();

КонецПроцедуры


// Функция открывает форму выбора типа исходящего налогово документа
//
&НаКлиенте
Процедура ОткрытьФормуВыбораНалоговогоДокумента(ДляПодбора = Ложь) 
	
	Если Организация.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru='Укажите организацию';uk='Вкажіть організацію'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	
	КонецЕсли;
	
	СписокТиповДокументов = Новый СписокЗначений;
	
	Если ИдКонфигурации = "ЕРП"  ИЛИ ИдКонфигурации = "BASУТ" Тогда
		Если ТипДокумента = "Акт" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
			СписокТиповДокументов.Добавить("АктВыполненныхРабот", "Акт виконаних робіт");
		КонецЕсли;	
		Если ТипДокумента = "Рахунок" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
			СписокТиповДокументов.Добавить("ЗаказКлиента", "Замовлення клієнта");
		КонецЕсли;
		Если ТипДокумента = "Акт" ИЛИ ТипДокумента = "Накладна" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
			СписокТиповДокументов.Добавить("РеализацияТоваровУслуг", "Реалізація товарів та послуг");
			СписокТиповДокументов.Добавить("ВозвратТоваровОтКлиента", "Зворотна накладна");
		КонецЕсли;	
	Иначе	
		Если ТипДокумента = "Рахунок" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
			СписокТиповДокументов.Добавить("СчетНаОплатуПокупателю", "Рахунок");
		КонецЕсли;
		Если ТипДокумента = "Акт" ИЛИ ТипДокумента = "Накладна" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
			СписокТиповДокументов.Добавить("РеализацияТоваровУслуг", "Накладна/Акт");
			СписокТиповДокументов.Добавить("ВозвратТоваровОтПокупателя", "Зворотна накладна");
			СписокТиповДокументов.Добавить("АктОбОказанииПроизводственныхУслуг", "Акт виробничих послуг");
		КонецЕсли;	
	КонецЕсли;	

	Если СписокТиповДокументов.Количество() = 0 Тогда
		
		Возврат;
		
	ИначеЕсли СписокТиповДокументов.Количество() = 1 Тогда
		
		ИмяДокумента =  СписокТиповДокументов[0].Значение;	
		
	Иначе		
		ВыбранноеЗначение = Неопределено;
		СписокТиповДокументов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОткрытьФормуВыбораНалоговогоДокументаЗавершение", ЭтотОбъект, Новый Структура("ДляПодбора", ДляПодбора)), НСтр("ru='Тип документа';uk='Тип документа'"));
        Возврат;			
		
	КонецЕсли;
	      
	ОткрытьФормуВыбораНалоговогоДокументаФрагмент(ДляПодбора, ИмяДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНалоговогоДокументаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ДляПодбора = ДополнительныеПараметры.ДляПодбора;
    
    ВыбранноеЗначение = ВыбранныйЭлемент;
    Если ВыбранноеЗначение = Неопределено Тогда 
        Возврат;
    КонецЕсли;
    ИмяДокумента = ВыбранноеЗначение.Значение;			
    
    ОткрытьФормуВыбораНалоговогоДокументаФрагмент(ДляПодбора, ИмяДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНалоговогоДокументаФрагмент(Знач ДляПодбора, Знач ИмяДокумента)
    
    Перем Отбор, ПараметрыФормыВыбора, Форма;
    
    ПараметрыФормыВыбора = Новый Структура();
    
    Отбор = Новый Структура;
    
    Отбор.Вставить("Организация", Организация);
    
    Если ЗначениеЗаполнено(Контрагент) Тогда
        Отбор.Вставить("Контрагент", Контрагент);
	    Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Если ИдКонфигурации = "ЕРП"  ИЛИ ИдКонфигурации = "BASУТ" Тогда
				Отбор.Вставить("Договор", ДоговорКонтрагента);
			Иначе	
				Отбор.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			КонецЕсли;
	    КонецЕсли;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Ответственный) Тогда
		Если ИдКонфигурации = "ЕРП"  ИЛИ ИдКонфигурации = "BASУТ" Тогда
			Отбор.Вставить("Менеджер", Ответственный);
		Иначе			
			Отбор.Вставить("Ответственный", Ответственный);
		КонецЕсли;
    КонецЕсли;
	
	ПараметрыФормыВыбора.Вставить("Отбор", 			    Отбор);
    ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
    
    Форма = ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаВыбора", ПараметрыФормыВыбора, Элементы.ТаблицаДокументов);
    
    Если ДляПодбора Тогда
        Форма.ЗакрыватьПриВыборе = Ложь;
    КонецЕсли;
    
    Форма.ЗакрыватьПриЗакрытииВладельца	= Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ОткрытьФормуВыбораНалоговогоДокумента(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивДокументов = ВыбранноеЗначение;
	Иначе
		МассивДокументов = Новый Массив(1);
		МассивДокументов[0] = ВыбранноеЗначение;
	КонецЕсли;
	
	ДобавленныеСтрокиТаблицыДокументов = Новый Массив;
	СтрокаТаблицыДокументов = Неопределено;
	Для каждого Документ Из МассивДокументов Цикл
		
		Если ЗначениеЗаполнено(ТипДокумента)
			И НЕ глМенеджерЗвит1С.ОпределитьТипДокументаПоСсылке(Документ) = ТипДокумента Тогда
			Сообщить(НСтр("ru='Документ не соответствует типу выгружаемых документов';uk= 'Документ не відповідає типу вивантажуваних документів'"));
			Продолжить;
		КонецЕсли;
		
		ДобавленныеСтрокиТаблицыДокументов.Добавить(ДобавитьСтрокуВТаблицуДокументов(Документ));
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыДокументов(МассивДокументов);
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСтрокуВТаблицуДокументов(Документ)

	СтрокаТаблицыДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
	Если СтрокаТаблицыДокументов.Количество() = 0 Тогда
		СтрокаТаблицыДокументов = ТаблицаДокументов.Добавить();
		СтрокаТаблицыДокументов.Документ = Документ;
	Иначе
		СтрокаТаблицыДокументов	= СтрокаТаблицыДокументов[0];
	КонецЕсли;
	
	Элементы.ТаблицаДокументов.ТекущаяСтрока = СтрокаТаблицыДокументов.ПолучитьИдентификатор();		
	
	Возврат СтрокаТаблицыДокументов;
	
КонецФункции


// Фунция используется для добавления документов из вне
//
&НаКлиенте
Процедура ДобавитьПервичныйДокумент(ДокументСсылка, ОрганизацияВДокументе, ФормаДокумента = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ОрганизацияВДокументе) Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не указана организация';uk='У документі не зазначена організація'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Если НЕ ФормаДокумента = Неопределено Тогда
			ФормаДокумента.Активизировать();
		КонецЕсли;
		
		Возврат;		
		
	ИначеЕсли ОрганизацияВДокументе <> Организация Тогда
		
		Если ТаблицаДокументов.Количество() <> 0 Тогда
			ТекстВопроса = НСтр("ru='Организация в документе не соответсвует организации 
|указанной в обработке. Табличная часть будет очищена. 
|
|Продолжить?';uk='Організація в документі не відповідає організації 
|зазначеної в обробці. Таблична частина буде очищена. 
|
|Продовжити?'");
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьПервичныйДокументЗавершение", ЭтотОбъект, Новый Структура("ФормаДокумента, ОрганизацияВДокументе, ДокументСсылка", ФормаДокумента, ОрганизацияВДокументе, ДокументСсылка)), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
			Возврат;			
			
		КонецЕсли;
		
		Организация = ОрганизацияВДокументе;
		ЗаполнитьЕДРПОУОрганизации();
		
	КонецЕсли;
	
	ТаблицаДокументовОбработкаВыбора(Элементы.ТаблицаДокументов, ДокументСсылка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПервичныйДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ФормаДокумента 			= ДополнительныеПараметры.ФормаДокумента;
    ОрганизацияВДокументе 	= ДополнительныеПараметры.ОрганизацияВДокументе;
	ДокументСсылка			= ДополнительныеПараметры.ДокументСсылка;
	
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Если ФормаДокумента <> Неопределено Тогда
            ФормаДокумента.Активизировать();
        КонецЕсли;
        Возврат;
    КонецЕсли; 
    
    СтараяОрганизация = Организация;
    ТаблицаДокументов.Очистить();

	Организация = ОрганизацияВДокументе;
	
	ЗаполнитьЕДРПОУОрганизации();
	
	ТаблицаДокументовОбработкаВыбора(Элементы.ТаблицаДокументов, ДокументСсылка, Истина);

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока  = Элементы.ТаблицаДокументов.ТекущиеДанные;
	Документ 	   = ТекущаяСтрока.Документ;
	
	ВариантОткрытия = "1С";
	
	Если мЭтоИсходящиеНалоговыеДокументы Тогда
		
		МенюВыбора = Новый СписокЗначений();
		МенюВыбора.Добавить("1С",     НСтр("ru='Открыть документ в предприятии';uk= 'Відкрити документ в підприємстві'"));
		МенюВыбора.Добавить("1СЗвит", НСтр("ru='Открыть документ в FREDO ДокМен';uk= 'Відкртит документ в FREDO ДокМен'"));
		
		РезультатВыбора = Неопределено;

		
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ТаблицаДокументовВыборЗавершение", ЭтотОбъект, Новый Структура("Документ, ТекущаяСтрока", Документ, ТекущаяСтрока)), МенюВыбора, Элемент);
        Возврат;
		
	КонецЕсли;
	
	ТаблицаДокументовВыборДействиеОткрыть(ВариантОткрытия, Документ, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Документ = ДополнительныеПараметры.Документ;
    ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
    
    
    РезультатВыбора = ВыбранныйЭлемент; 
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ВариантОткрытия = РезультатВыбора.Значение;
    
    
    ТаблицаДокументовВыборДействиеОткрыть(ВариантОткрытия, Документ, ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыборДействиеОткрыть(Знач ВариантОткрытия, Знач Документ, Знач ТекущаяСтрока)
    
    Если ВариантОткрытия = "1С" Тогда
        ОткрытьФормуДокументаВ1С(Документ, ТекущаяСтрока);
    Иначе	
        ОткрытьФормуДокументаВ1СЗвит(Документ);
    КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьВ1СЗвит(Команда)
	
	ТекущаяСтрока = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Укажите документ, который необходимо открыть!';uk= 'Вкажіть документ, який треба відкрити!'"));
		Возврат;
	КонецЕсли;
	
	Документ = ТекущаяСтрока.Документ;
	
	ОткрытьФормуДокументаВ1СЗвит(Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаВ1С(Документ, ТекущаяСтрока)

	ПараметрыВыбораДокумента = Новый Структура();
	ПараметрыВыбораДокумента.Вставить("Ключ", Документ);
	
	Если ИдКонфигурации = "ЕРП"  ИЛИ ИдКонфигурации = "BASУТ" Тогда
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			ОткрытьФорму("Документ.ЗаказКлиента.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			
			ОткрытьФорму("Документ.АктВыполненныхРабот.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			
			ОткрытьФорму("Документ.ВозвратТоваровОтКлиента.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	Иначе	

		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			
			ОткрытьФорму("Документ.АктОбОказанииПроизводственныхУслуг.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
			
		ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			
			ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыВыбораДокумента,,,,, Новый ОписаниеОповещения("ОткрытьФормуДокументаВ1СЗавершение", ЭтотОбъект, Новый Структура("Документ, ПараметрыВыбораДокумента", Документ, ПараметрыВыбораДокумента)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаВ1СЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Документ = ДополнительныеПараметры.Документ;
	ПараметрыВыбораДокумента = ДополнительныеПараметры.ПараметрыВыбораДокумента;
	
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Документ);
	
	ЗаполнитьРеквизитыДокументов(МассивДокументов)
	
КонецПроцедуры

// Процедура выполняет заполнение реквизитов табличной части документов
//
&НаКлиенте
Процедура ЗаполнитьРеквизитыДокументов(МассивДокументов)

	ТаблицаДокументовЗаполнитьРеквизитыДокументов1С(МассивДокументов);
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит(МассивДокументов);
	
	ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации(МассивДокументов);
		
КонецПроцедуры	


&НаКлиенте
Процедура ОткрытьФормуДокументаВ1СЗвит(Документ)

	глМенеджерЗвит1С.ОткрытьДокументВЗвит1С(Документ);

КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ТаблицаДокументов.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?';uk= 'Таблична частина буде очищена. Продовжити?'");
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
        Возврат;
		
	КонецЕсли;
	
	ОрганизацияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если НЕ Ответ = КодВозвратаДиалога.ОК Тогда
        Организация = СтараяОрганизация;
        Возврат;
    КонецЕсли; 
    
    ТаблицаДокументов.Очистить();
    
    
    ОрганизацияПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагмент()
    
    СтараяОрганизация = Организация; 
    
    ЗаполнитьЕДРПОУОрганизации();

КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Период.ДатаНачала) ИЛИ Не ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		ТекстСообщения = НСтр("ru='Не определен период выборки данных';uk='Не визначений період вибірки даних'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru='Не указана организация';uk='Не зазначена організація'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДатаНачалаИспользованияЗвит1С = РегламентированнаяОтчетностьВызовСервера.ПолучитьДатаНачалаИспользованияЗвит1С(Организация);
	
	Если Не ЗначениеЗаполнено(ДатаНачалаИспользованияЗвит1С) Тогда
		ТекстСообщения = НСтр("ru='Выгрузка в систему ""FREDO ДокМен"" невозможна, ""FREDO ДокМен"" не используется для организации';uk='Вивантаження в систему ""FREDO ДокМен"" неможливе, ""FREDO ДокМен"" не використовується для організації'")
		                     +" """+Строка(Организация)+"""."+Символы.ПС+НСтр("ru='Не указана дата начала использования ""FREDO"" в карточке организации';uk='Не зазначена дата початку використання ""FREDO"" у картці організації'");
		ПоказатьПредупреждение(,ТекстСообщения);	
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?';uk='Перед заповненням таблична частина буде очищена. Заповнити?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
        Возврат;
	КонецЕсли;

	ЗаполнитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ        = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли; 
    ТаблицаДокументов.Очистить();
    
    ЗаполнитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
	
	Если ИдКонфигурации = "ЕРП"  ИЛИ ИдКонфигурации = "BASУТ" Тогда
		ТаблицаДокументовЗаполнитьНаСервере_ЕРП();	
	Иначе
		ТаблицаДокументовЗаполнитьНаСервере();	
	КонецЕсли;	
		
    ТаблицаДокументовЗаполнитьРеквизитыДокументов1С();
    
    ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит();
    
    ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации();

КонецПроцедуры


&НаКлиенте
Процедура Обновить(Команда)
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1С();
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит();
	
	ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьВ1СЗвит(Команда)
	
	ТаблицаДокументовВыгрузитьДокументыИлиЗапросВ1СЗвит();	
	
	ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит();
	
	ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации();
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаДокументовЗаполнитьНаСервере()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Ссылка КАК Документ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетНаОплатуПокупателю.Дата КАК Дата,
		|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
		|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
		|		СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		СчетНаОплатуПокупателю.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|	ГДЕ
		|		  СчетНаОплатуПокупателю.Организация = &Организация
		|		И СчетНаОплатуПокупателю.Дата МЕЖДУ &НачПериода И &КонПериода 
		|		И НЕ СчетНаОплатуПокупателю.ПометкаУдаления
		|		И СчетНаОплатуПокупателю.Контрагент.ИспользоватьЭДО1СЗвит
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Дата КАК Дата,
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|		РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		РеализацияТоваровУслуг.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		  РеализацияТоваровУслуг.Организация = &Организация
		|		И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода 
		|		И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|		И РеализацияТоваровУслуг.Контрагент.ИспользоватьЭДО1СЗвит
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|		АктОбОказанииПроизводственныхУслуг.Дата КАК Дата,
		|		АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка,
		|		АктОбОказанииПроизводственныхУслуг.Контрагент КАК Контрагент,
		|		АктОбОказанииПроизводственныхУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		АктОбОказанииПроизводственныхУслуг.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
		|	ГДЕ
		|		  АктОбОказанииПроизводственныхУслуг.Организация = &Организация
		|		И АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачПериода И &КонПериода 
		|		И НЕ АктОбОказанииПроизводственныхУслуг.ПометкаУдаления
		|		И АктОбОказанииПроизводственныхУслуг.Контрагент.ИспользоватьЭДО1СЗвит
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|		ВозвратТоваровОтПокупателя.Дата КАК Дата,
		|		ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
		|		ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент,
		|		ВозвратТоваровОтПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВозвратТоваровОтПокупателя.Ответственный КАК Ответственный
		|	ИЗ
		|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|	ГДЕ
		|		  ВозвратТоваровОтПокупателя.Организация = &Организация
		|		И ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачПериода И &КонПериода 
		|		И НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления
		|		И ВозвратТоваровОтПокупателя.Контрагент.ИспользоватьЭДО1СЗвит
		|	) КАК ВложенныйЗапрос
		|{ГДЕ
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.ДоговорКонтрагента,
		|	ВложенныйЗапрос.Ответственный}
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Дата,
		|	ВложенныйЗапрос.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);

	ПостроительЗапроса.ЗаполнитьНастройки();
	
	ПостроительЗапроса.Параметры.Вставить("НачПериода",  НачалоДня(Период.ДатаНачала));
	ПостроительЗапроса.Параметры.Вставить("КонПериода",  КонецДня(Период.ДатаОкончания));
	ПостроительЗапроса.Параметры.Вставить("Организация", Организация);
	
	Отбор = ПостроительЗапроса.Отбор;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементОтбора = Отбор.Добавить("Контрагент");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Контрагент;
		ЭлементОтбора.ВидСравнения  = ?(Контрагент.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЭлементОтбора = Отбор.Добавить("ДоговорКонтрагента");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ДоговорКонтрагента;
		ЭлементОтбора.ВидСравнения  = ?(ДоговорКонтрагента.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ЭлементОтбора = Отбор.Добавить("Ответственный");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Ответственный;
		ЭлементОтбора.ВидСравнения  = ?(Ответственный.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	ПодобранныеДокументы = ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
		
		Если       ЗначениеЗаполнено(ТипДокумента)
			 И НЕ ТипДокумента = ОпределитьТипДокументаПоСсылкеНаСервере(ПодобранныйДокумент.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ = ПодобранныйДокумент.Документ;
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ТаблицаДокументовЗаполнитьНаСервере_ЕРП()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВложенныйЗапрос.Ссылка КАК Документ
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СчетНаОплатуПокупателю.Дата КАК Дата,
	               |		СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	               |		СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	               |		СчетНаОплатуПокупателю.Договор КАК ДоговорКонтрагента,
	               |		СчетНаОплатуПокупателю.Менеджер КАК Ответственный
	               |	ИЗ
	               |		Документ.ЗаказКлиента КАК СчетНаОплатуПокупателю
	               |	ГДЕ
	               |		СчетНаОплатуПокупателю.Организация = &Организация
	               |		И СчетНаОплатуПокупателю.Дата МЕЖДУ &НачПериода И &КонПериода
	               |		И НЕ СчетНаОплатуПокупателю.ПометкаУдаления
	               |		И СчетНаОплатуПокупателю.Контрагент.ИспользоватьЭДО1СЗвит
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		РеализацияТоваровУслуг.Дата,
	               |		РеализацияТоваровУслуг.Ссылка,
	               |		РеализацияТоваровУслуг.Контрагент,
	               |		РеализацияТоваровУслуг.Договор,
	               |		РеализацияТоваровУслуг.Менеджер
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |	ГДЕ
	               |		РеализацияТоваровУслуг.Организация = &Организация
	               |		И РеализацияТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода
	               |		И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	               |		И РеализацияТоваровУслуг.Контрагент.ИспользоватьЭДО1СЗвит
	               |
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АктВыполненныхРабот.Дата,
	               |		АктВыполненныхРабот.Ссылка,
	               |		АктВыполненныхРабот.Контрагент,
	               |		АктВыполненныхРабот.Договор,
	               |		АктВыполненныхРабот.Менеджер
	               |	ИЗ
	               |		Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	               |	ГДЕ
	               |		АктВыполненныхРабот.Организация = &Организация
	               |		И АктВыполненныхРабот.Дата МЕЖДУ &НачПериода И &КонПериода
	               |		И НЕ АктВыполненныхРабот.ПометкаУдаления
	               |		И АктВыполненныхРабот.Контрагент.ИспользоватьЭДО1СЗвит
	               |
				   |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ВозвратТоваровОтКлиента.Дата,
	               |		ВозвратТоваровОтКлиента.Ссылка,
	               |		ВозвратТоваровОтКлиента.Контрагент,
	               |		ВозвратТоваровОтКлиента.Договор,
	               |		ВозвратТоваровОтКлиента.Менеджер
	               |	ИЗ
	               |		Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |	ГДЕ
	               |		ВозвратТоваровОтКлиента.Организация = &Организация
	               |		И ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачПериода И &КонПериода
	               |		И НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
	               |		И ВозвратТоваровОтКлиента.Контрагент.ИспользоватьЭДО1СЗвит
				   |) КАК ВложенныйЗапрос
	               |{ГДЕ
	               |	ВложенныйЗапрос.Контрагент,
	               |	ВложенныйЗапрос.ДоговорКонтрагента,
	               |	ВложенныйЗапрос.Ответственный}
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВложенныйЗапрос.Дата,
	               |	ВложенныйЗапрос.Ссылка
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);

	ПостроительЗапроса.ЗаполнитьНастройки();
	
	ПостроительЗапроса.Параметры.Вставить("НачПериода",  НачалоДня(Период.ДатаНачала));
	ПостроительЗапроса.Параметры.Вставить("КонПериода",  КонецДня(Период.ДатаОкончания));
	ПостроительЗапроса.Параметры.Вставить("Организация", Организация);
	
	Отбор = ПостроительЗапроса.Отбор;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементОтбора = Отбор.Добавить("Контрагент");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Контрагент;
		ЭлементОтбора.ВидСравнения  = ?(Контрагент.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ЭлементОтбора = Отбор.Добавить("ДоговорКонтрагента");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ДоговорКонтрагента;
		ЭлементОтбора.ВидСравнения  = ?(ДоговорКонтрагента.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ЭлементОтбора = Отбор.Добавить("Ответственный");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = Ответственный;
		ЭлементОтбора.ВидСравнения  = ?(Ответственный.ЭтоГруппа, ВидСравнения.ВСпискеПоИерархии, ВидСравнения.Равно);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	ПодобранныеДокументы = ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого ПодобранныйДокумент Из ПодобранныеДокументы Цикл
		
		Если       ЗначениеЗаполнено(ТипДокумента)
			 И НЕ ТипДокумента = ОпределитьТипДокументаПоСсылкеНаСервере(ПодобранныйДокумент.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ = ПодобранныйДокумент.Документ;
	КонецЦикла; 

КонецПроцедуры


&НаСервере
Процедура ТаблицаДокументовЗаполнитьРеквизитыДокументов1С(МассивДокументов = Неопределено)

	Если НЕ ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого СтрокаДок Из ТаблицаДокументов Цикл
			МассивДокументов.Добавить(СтрокаДок.Документ);	
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИдКонфигурации = "ЕРП"  ИЛИ ИдКонфигурации = "BASУТ" Тогда
		РеквизитыДокументов1С = ПолучитьРеквизитыДокументов1С_ЕРП(ИдКонфигурации, МассивДокументов, мЭтоИсходящиеНалоговыеДокументы);	
	Иначе
		РеквизитыДокументов1С = ПолучитьРеквизитыДокументов1С(ИдКонфигурации, МассивДокументов, мЭтоИсходящиеНалоговыеДокументы);	
	КонецЕсли;
	
	// заполняем полученными данными все строки таблицы с указанными ссылками
	Для каждого Документ Из МассивДокументов Цикл
		
		РеквизитыДокумента1С = РеквизитыДокументов1С.Найти(Документ, "Документ");	
		
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			
			Если РеквизитыДокумента1С = Неопределено Тогда
				// фактически очищаем все свойства, т.к. данные получить по ссылке не удалось
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СписокСвойствДокументов1С);
			Иначе
				// заполняем найденными свойствами строку
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РеквизитыДокумента1С);
			КонецЕсли;
			
			// обработаем код ЕДРПОУ организации
			СтрокаТаблицы.Организация_ЕДРПОУ = СокрЛП(Организация_ЕДРПОУ);
			СтрокаТаблицы.Контрагент_Код 	 = СокрЛП(СтрокаТаблицы.Контрагент_Код);
			СтрокаТаблицы.ИДДокумента 		 = РегламентированнаяОтчетностьКлиентСервер.ПолучитьУникальныйИдентификаторДокумента(Документ);
			СтрокаТаблицы.Номер 			 = РегламентированнаяОтчетностьКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, Истина, Истина);
			СтрокаТаблицы.ТипДокумента 		 = ОпределитьТипДокументаПоСсылкеНаСервере(Документ);
			
			// особые реквизиты, из запроса получить невозможно
			ОписаниеОшибки = "";
			
			ПроверитьКорректностьДокумента(СтрокаТаблицы, ОписаниеОшибки);
			
		КонецЦикла;
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ОпределитьТипДокументаПоСсылкеНаСервере(Документ)

	Результат  = Неопределено;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" 
		ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "BASУТ" Тогда
			
		Если    ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			Результат = "Рахунок";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Результат  = "Акт";
			
			// если есть только услуги - то акт, иначе - накладная
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	1 КАК Поле1
			                      |ИЗ
			                      |	Документ.РеализацияТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |	И НЕ Док.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
								  
			Запрос.УстановитьПараметр("Документ", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если  Выборка.Следующий() Тогда
				Результат  = "Накладна";	
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			
			Результат  = "Акт";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			Результат = "Накладна";
			
		КонецЕсли;
		
	Иначе	
	
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			Результат = "Рахунок";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			Результат = "Накладна";

		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			Результат = "Акт";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Результат  = "Накладна";
			
			// если есть только услуги - то акт, иначе - накладная
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""Товары"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.РеализацияТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |
			                      |ОБЪЕДИНИТЬ
			                      |
			                      |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""Услуги""
			                      |ИЗ
			                      |	Документ.РеализацияТоваровУслуг.Услуги КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ");
			Запрос.УстановитьПараметр("Документ", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если  Выборка.Следующий()
				И Выборка.ВидНоменклатуры = "Услуги" Тогда
				Результат  = "Акт";	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ПроверитьКорректностьДокумента(ДанныеДокумента1С, ДокументКорректен_ОписаниеОшибки = "")
	
	ДокументКорректен = НЕ ЗначениеЗаполнено(ДокументКорректен_ОписаниеОшибки);
	
	Если НЕ (ДанныеДокумента1С.Организация_ЕДРПОУ = Организация_ЕДРПОУ) Тогда
		ДокументКорректен_ОписаниеОшибки = ДокументКорректен_ОписаниеОшибки + 
											  ?(ЗначениеЗаполнено(ДокументКорректен_ОписаниеОшибки), Символы.ПС, "") + 
											  НСтр("ru='Код ЕДРПОУ организации документа не совпадает с кодом для Организации из обработки';uk= 'Код ЄДРПОУ організації документа не співпадає з кодом для Організації з обробки'");
		ДокументКорректен = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента1С.Контрагент_код)Тогда
		ДокументКорректен_ОписаниеОшибки = ДокументКорректен_ОписаниеОшибки + 
											 ?(ЗначениеЗаполнено(ДокументКорректен_ОписаниеОшибки), Символы.ПС, "") + 
											 НСтр("ru='Для контрагента не удалось определить Код ЕДРОПУ';uk= 'Для контрагента не вдалося визначити Код ЄДРПОУ'");
		ДокументКорректен = Ложь;
	КонецЕсли;
	
	Если  НЕ ДанныеДокумента1С.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		ДокументКорректен_ОписаниеОшибки = НСтр("ru='Выгрузка документов в валюте не предусмотрена!';uk= 'Вивантаження документів у валюті не передбачено!'");
		
		ДокументКорректен = Ложь;
	КонецЕсли;
	
	ДанныеДокумента1С.ДокументКорректен = ДокументКорректен;
	
	Если НЕ ДокументКорректен Тогда
		ДанныеДокумента1С.ДокументКорректен_ОписаниеОшибки 	= ДокументКорректен_ОписаниеОшибки;
		ДанныеДокумента1С.СостояниеСтр 						= ДокументКорректен_ОписаниеОшибки;
	Иначе
		ДанныеДокумента1С.ДокументКорректен_ОписаниеОшибки 	= "";
		ДанныеДокумента1С.СостояниеСтр 						= "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыДокументов1С_ЕРП(ИдКонфигурации, МассивДокументов, ЭтоИсходящиеНалоговыеДокументы)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ТЧДок.СуммаНДС) КАК СуммаНДС,
	|	ТЧДок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТЧДок
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|   И НЕ Отменено
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервичныйДокументНДС.Ссылка,
	|	СУММА(ПервичныйДокументНДС.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ПервичныйДокументНДС
	|ИЗ
	|	ТЧДок КАК ПервичныйДокументНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервичныйДокументНДС.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервичныйДокумент.Организация КАК Организация,
	|	ПервичныйДокумент.Ссылка КАК Документ,
	|	ПервичныйДокумент.Номер КАК Номер,
	|	ПервичныйДокумент.Дата КАК Дата,
	|	ПервичныйДокумент.Контрагент КАК Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ КАК Контрагент_Код,
	|	ПервичныйДокумент.Договор КАК ДоговорКонтрагента,
	|	ПервичныйДокумент.Валюта КАК ВалютаДокумента,
	|	ПервичныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС КАК СуммаНДСДокумента,
	|	ПервичныйДокумент.Менеджер КАК Ответственный
	|ИЗ
	|	Документ.ЗаказКлиента КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Организация,
	|	ПервичныйДокумент.Ссылка,
	|	ПервичныйДокумент.Номер,
	|	ПервичныйДокумент.Дата,
	|	ПервичныйДокумент.Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ,
	|	ПервичныйДокумент.Договор,
	|	ПервичныйДокумент.Валюта,
	|	ПервичныйДокумент.СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС,
	|	ПервичныйДокумент.Менеджер
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Организация,
	|	ПервичныйДокумент.Ссылка,
	|	ПервичныйДокумент.Номер,
	|	ПервичныйДокумент.Дата,
	|	ПервичныйДокумент.Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ,
	|	ПервичныйДокумент.Договор,
	|	ПервичныйДокумент.Валюта,
	|	ПервичныйДокумент.СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС,
	|	ПервичныйДокумент.Менеджер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Организация КАК Организация,
	|	ПервичныйДокумент.Ссылка КАК Документ,
	|	ПервичныйДокумент.Номер КАК Номер,
	|	ПервичныйДокумент.Дата КАК Дата,
	|	ПервичныйДокумент.Контрагент КАК Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ КАК КонтрагентКод,
	|	ПервичныйДокумент.Договор КАК ДоговорКонтрагента,
	|	ПервичныйДокумент.Валюта КАК ВалютаДокумента,
	|	ПервичныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС КАК СуммаНДСДокумента,
	|	ПервичныйДокумент.Менеджер КАК Ответственный
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов)
	|";
   
				   
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
    Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыДокументов1С(ИдКонфигурации, МассивДокументов, ЭтоИсходящиеНалоговыеДокументы)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ТЧДок.СуммаНДС) КАК СуммаНДС,
	|	ТЧДок.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТЧДок
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ТЧДок.СуммаНДС),
	|	ТЧДок.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТЧДок
	|ГДЕ
	|	ТЧДок.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	ПервичныйДокументНДС.Ссылка,
	|	СУММА(ПервичныйДокументНДС.СуммаНДС) КАК СуммаНДС
	|ПОМЕСТИТЬ ПервичныйДокументНДС
	|ИЗ
	|	ТЧДок КАК ПервичныйДокументНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервичныйДокументНДС.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервичныйДокумент.Организация КАК Организация,
	|	ПервичныйДокумент.Ссылка КАК Документ,
	|	ПервичныйДокумент.Номер КАК Номер,
	|	ПервичныйДокумент.Дата КАК Дата,
	|	ПервичныйДокумент.Контрагент КАК Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ КАК Контрагент_Код,
	|	ПервичныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПервичныйДокумент.ВалютаДокумента КАК ВалютаДокумента,
	|	ПервичныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС КАК СуммаНДСДокумента,
	|	ПервичныйДокумент.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов) 	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Организация КАК Организация,
	|	ПервичныйДокумент.Ссылка КАК Документ,
	|	ПервичныйДокумент.Номер КАК Номер,
	|	ПервичныйДокумент.Дата КАК Дата,
	|	ПервичныйДокумент.Контрагент КАК Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ КАК КонтрагентКод,
	|	ПервичныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПервичныйДокумент.ВалютаДокумента КАК ВалютаДокумента,
	|	ПервичныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС КАК СуммаНДСДокумента,
	|	ПервичныйДокумент.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Организация КАК Организация,
	|	ПервичныйДокумент.Ссылка КАК Документ,
	|	ПервичныйДокумент.Номер КАК Номер,
	|	ПервичныйДокумент.Дата КАК Дата,
	|	ПервичныйДокумент.Контрагент КАК Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ КАК КонтрагентКод,
	|	ПервичныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПервичныйДокумент.ВалютаДокумента КАК ВалютаДокумента,
	|	ПервичныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС КАК СуммаНДСДокумента,
	|	ПервичныйДокумент.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Организация КАК Организация,
	|	ПервичныйДокумент.Ссылка КАК Документ,
	|	ПервичныйДокумент.Номер КАК Номер,
	|	ПервичныйДокумент.Дата КАК Дата,
	|	ПервичныйДокумент.Контрагент КАК Контрагент,
	|	ПервичныйДокумент.Контрагент.КодПоЕДРПОУ КАК КонтрагентКод,
	|	ПервичныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПервичныйДокумент.ВалютаДокумента КАК ВалютаДокумента,
	|	ПервичныйДокумент.СуммаДокумента КАК СуммаДокумента,
	|	ПервичныйДокументНДС.СуммаНДС КАК СуммаНДСДокумента,
	|	ПервичныйДокумент.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ПервичныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныйДокументНДС КАК ПервичныйДокументНДС
	|		ПО (ПервичныйДокументНДС.Ссылка = ПервичныйДокумент.Ссылка)
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В(&МассивДокументов)
	|";
   
				   
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
    Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()

&НаКлиенте
Функция ПодключитьсяКЭДО(МассивДокументов)
	
	Результат = Новый Структура();
	Результат.Вставить("ОписаниеОшибки");
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЕстьПодключениеКЗвит1С  = Неопределено;	
	
	// Для организации без ЕДРПОУ бесполезно подключаться к FREDO ДокМену
	Если Не ЗначениеЗаполнено(Организация_ЕДРПОУ)  Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Для организации ';uk='Для організації '") + Организация + НСтр("ru=' не указан код ЕДРПОУ!';uk=' не вказано код ЄДРПОУ!'");
		Возврат Результат;
	КонецЕсли;
	
	ЕстьПодключениеКЗвит1С = глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация);
	Если Не ЕстьПодключениеКЗвит1С Тогда
		Результат.ОписаниеОшибки = НСтр("ru='<Ошибка взаимодействия с ""FREDO ДокМен"">';uk='<Помилка взаємодії з ""FREDO ДокМен"">'");
		Возврат Результат;
	КонецЕсли;		
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДокументовЗаполнитьРеквизитыДокументов1СЗвит(МассивДокументов = Неопределено)
	
	Если НЕ ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого СтрокаДок Из ТаблицаДокументов Цикл
			МассивДокументов.Добавить(СтрокаДок.Документ);	
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеОшибки = ПодключитьсяКЭДО(МассивДокументов).ОписаниеОшибки;
		
	Для каждого Документ Из МассивДокументов  Цикл
		
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			// фактически очищаем поля
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СписокСвойствДокументов1СЗвит);
			
			// если передали ошибку, то запрос фактически не выполнялся, для всех документов нужно прописать сообщение об ошибке и очистить реквизиты Звит-1С
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				СтрокаТаблицы.СостояниеСтр = ОписаниеОшибки;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.СостояниеСтр) Тогда
				СтрокаТаблицы.Звит1С_ДокументКорректен = Истина;
				СтрокаТаблицы.Звит1С_СовпадаютКлючевыеПоля = Истина;
				СтрокаТаблицы.Звит1С_Состояние = -1;
				СтрокаТаблицы.СостояниеСтр = ПредставлениеСостоянийДокументов.НайтиПоЗначению(-1).Представление;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// больше выполнять нечего по данной задаче
		Возврат;
	КонецЕсли;

	НачДатаЗапроса = Период.ДатаНачала;
	КонДатаЗапроса = КонецДня(НачДатаЗапроса);
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Дата < НачДатаЗапроса Тогда
			НачДатаЗапроса = Строка.Дата;
		КонецЕсли;
		Если Строка.Дата > КонДатаЗапроса Тогда
			КонДатаЗапроса = Строка.Дата;
		КонецЕсли;
	КонецЦикла;
	КонДатаЗапроса = КонецДня(КонДатаЗапроса);
	
	ОбработатьТипДокумента(МассивДокументов, 10103, НачДатаЗапроса, КонДатаЗапроса);
	ОбработатьТипДокумента(МассивДокументов, 10104, НачДатаЗапроса, КонДатаЗапроса);
	ОбработатьТипДокумента(МассивДокументов, 10105, НачДатаЗапроса, КонДатаЗапроса);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТипДокумента(МассивДокументов, docType, НачДатаЗапроса, КонДатаЗапроса)

	ТаблицаДокЗвит1С = глКомпонентаЗвит1С.GetPrimaryReestr(docType, 1, НачДатаЗапроса, КонДатаЗапроса);
	Если ТаблицаДокЗвит1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДокЗвит1С.First("MAIN") Тогда
		ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, МассивДокументов);
		Пока ТаблицаДокЗвит1С.Next("MAIN") Цикл
			ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, МассивДокументов);
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, МассивДокументов)
	
	СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("ИДДокумента",  ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_ID")));
	
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаРезультат Из СтрокиТаблицы Цикл
		
		Если МассивДокументов.Найти(СтрокаРезультат.Документ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРезультат.ДокументКорректен = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультат.Звит1С_Состояние = ТаблицаДокЗвит1С.GetValue("MAIN", "STATUS");		
		
		ТекПредставление = ПредставлениеСостоянийДокументов.НайтиПоЗначению(СтрокаРезультат.Звит1С_Состояние);
		Если НЕ ТекПредставление = Неопределено Тогда
			ТекПредставление = ТекПредставление.Представление;
		КонецЕсли;
		
		СтрокаРезультат.СостояниеСтр = ТекПредставление;			
		
		СтрокаРезультат.Звит1С_ДокументКорректен = (СтрокаРезультат.Звит1С_Состояние > -2);
		Если Не СтрокаРезультат.Звит1С_ДокументКорректен Тогда
			Продолжить; // Документ не может быть идентифицирован. Продолжнение бессмысленно
		КонецЕсли;
		
		СтрокаРезультат.Звит1С_СуммаНДСДокумента = ТаблицаДокЗвит1С.GetValue("MAIN", "Vatsum");		
		СтрокаРезультат.Звит1С_СуммаДокумента = ТаблицаДокЗвит1С.GetValue("MAIN", "DOCSUM");		
		
		// Дополнительно проверим ключевые поля исходящих документов
		Если СтрокаРезультат.Звит1С_Состояние > -1 Тогда	// Документ выгружен	
			ДанныеДокументаЗвит1С = Новый Структура();
			ДанныеДокументаЗвит1С.Вставить("Контрагент_ЕДРПОУ",  ТаблицаДокЗвит1С.GetValue("MAIN", "Partner_EDRPOU"));
			ДанныеДокументаЗвит1С.Вставить("Организация_ЕДРПОУ", ТаблицаДокЗвит1С.GetValue("MAIN", "FIRM_EDRPOU"));
			ДанныеДокументаЗвит1С.Вставить("Номер",              ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_NUM"));
			ДанныеДокументаЗвит1С.Вставить("Дата",               ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_DATE"));			
			
			ТекстОшибки = "";
			Если СОКРЛП(СтрокаРезультат.Контрагент_Код) <> СОКРЛП(ДанныеДокументаЗвит1С.Контрагент_ЕДРПОУ) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru='Код контрагента';uk= 'Код контрагента'")+", ";
			КонецЕсли;
			Если СОКРЛП(СтрокаРезультат.Организация_ЕДРПОУ) <> СОКРЛП(ДанныеДокументаЗвит1С.Организация_ЕДРПОУ) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru='ЕДРПОУ организации';uk= 'ЄДРПОУ організації'")+", ";
			КонецЕсли;
			Если СОКРЛП(СтрокаРезультат.Номер) <> СОКРЛП(ДанныеДокументаЗвит1С.Номер) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru='номер';uk= 'номер'")+", ";
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеДокументаЗвит1С.Дата)
				И НачалоДня(СтрокаРезультат.Дата) <> НачалоДня(ДанныеДокументаЗвит1С.Дата) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru='дата';uk= 'дата'")+", ";
			КонецЕсли;
			Если СтрокаРезультат.СуммаДокумента <> СтрокаРезультат.Звит1С_СуммаДокумента Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru='сумма документа';uk= 'сума документа'")+", ";
			КонецЕсли;
			Если СтрокаРезультат.СуммаНДСДокумента <> СтрокаРезультат.Звит1С_СуммаНДСДокумента Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru='сумма НДС документа';uk= 'сума ПДВ документа'")+", ";
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстОшибки) Тогда
				СтрокаРезультат.Звит1С_СовпадаютКлючевыеПоля = Истина;
			Иначе
				СтрокаРезультат.Звит1С_СовпадаютКлючевыеПоля = Ложь;
				СтрокаРезультат.СостояниеСтр = "" + СтрокаРезультат.СостояниеСтр + НСтр("ru='. Не совпадают ключевые поля: ';uk= '. Не збігаються ключові поля: '")+
				                               Лев(ТекстОшибки, СтрДлина(ТекстОшибки) - СтрДлина(", "));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовУстановитьФлагиВыгрузкиСинхронизации(МассивДокументов = Неопределено)
	
	Если НЕ ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого СтрокаДок Из ТаблицаДокументов Цикл
			МассивДокументов.Добавить(СтрокаДок.Документ);	
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Документ Из МассивДокументов Цикл
		
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ", Документ));
		
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
	
			СтрокаТаблицы.Пометка_Выполнить = Ложь;

			Если СтрокаТаблицы.ДокументКорректен 
			   И СтрокаТаблицы.Звит1С_ДокументКорректен Тогда
			   
			   	// Пометка_Выполнить
				Если (СтрокаТаблицы.Звит1С_Состояние = -1)    // Не выгружен
				 ИЛИ (СтрокаТаблицы.Звит1С_Состояние = 0 И Не СтрокаТаблицы.Звит1С_СовпадаютКлючевыеПоля)   // Выгружен и ключевые поля не совпадают
				 Тогда
					// Если исходящий документ не выгружен, выгруженн но суммы различаются или отклонен то перевыгрузим
					СтрокаТаблицы.Пометка_Выполнить = Истина;						
				КонецЕсли;
				
	 		КонецЕсли;
	
		КонецЦикла;
	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовВыгрузитьДокументыИлиЗапросВ1СЗвит()
	
	МассивСтрокДокументов = ТаблицаДокументов.НайтиСтроки(Новый Структура("Пометка_Выполнить, ДокументКорректен, ВалютаДокумента", Истина, Истина, мВалютаРегламентированногоУчета));
	
	// Выгрузка налоговых документов
	Если МассивСтрокДокументов.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Не выбраны корректные документы для выгрузки/формирования запроса!';uk='Не вибрані коректні документи для вивантаження/формування запиту!'");
		
		// Обращаем внимане на колонку "Пометка" 
		СтарыйЦвет = Элементы.ТаблицаДокументовПометка_Выполнить.ЦветФонаЗаголовка;	
		
		Элементы.ТаблицаДокументовПометка_Выполнить.ЦветФонаЗаголовка = Новый Цвет(255,0,0);
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Элементы.ТаблицаДокументовПометка_Выполнить.ЦветФонаЗаголовка = СтарыйЦвет;
		Возврат;
		
	КонецЕсли;

	БылиОшибки = Ложь;
	БылиФатальныеОшибки = Ложь;
	ДополнительныйТекстСообщения = "";
	
	Для каждого СтрокаТаблицыДокументов Из МассивСтрокДокументов Цикл
		
		ОбработкаПрерыванияПользователя();
		
		ДокументСсылка = СтрокаТаблицыДокументов.Документ;
		
		РезультатВыгрузки = ВыгрузитьДокументВЗвит1С(СтрокаТаблицыДокументов);
		
		Если Не РезультатВыгрузки.ВыгрузкаПрошлаУспешно Тогда
			БылиОшибки = Истина;			
			Если РезультатВыгрузки.ПроизошлаФатальнаяОшибка Тогда
				БылиФатальныеОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатВыгрузки.Описание) Тогда
			
			Если РезультатВыгрузки.ВыгрузкаПрошлаУспешно Тогда
				СтатусСообщенияПриВыгрузке = СтатусСообщения.Информация;
			ИначеЕсли РезультатВыгрузки.ПроизошлаФатальнаяОшибка Тогда
				СтатусСообщенияПриВыгрузке = СтатусСообщения.ОченьВажное;
			Иначе
				СтатусСообщенияПриВыгрузке = СтатусСообщения.Важное;					
			КонецЕсли;
			
			Сообщить(Строка(ДокументСсылка)+" - "+РезультатВыгрузки.Описание, СтатусСообщенияПриВыгрузке);
			
		КонецЕсли;
		
		Если БылиФатальныеОшибки Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылиФатальныеОшибки Тогда
		ТекстСообщения = НСтр("ru='Выгрузка прервана с ошибками';uk= 'Вивантаження перерване з помилками'");
	ИначеЕсли БылиОшибки Тогда
		ТекстСообщения = НСтр("ru='Выгрузка завершена с ошибками';uk= 'Вивантаження завершене з помилками'");
	Иначе
		ТекстСообщения = НСтр("ru='Выгрузка успешно завершена';uk= 'Вивантаження успішно завершене'");;
	КонецЕсли;	
	
	Если Не ПустаяСтрока(ДополнительныйТекстСообщения) Тогда
		ТекстСообщения = ТекстСообщения+Символы.ПС+Символы.ПС+ДополнительныйТекстСообщения;
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстСообщения);		
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяСхемы(Знач ИмяФормы)

	ИмяФормы = ВРЕГ(ИмяФормы);
	
	Если ИмяФормы = ВРЕГ("ФормаОтчетаСчет") Тогда
		Возврат "1CPAXB";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаСчетСНДС") Тогда
		Возврат "1CPAX";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаСчетБезНДС") Тогда
		Возврат "1CPAX0";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаАкт") Тогда
		Возврат "AKT1CB";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаАктСНДС") Тогда
		Возврат "AKT1C";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаАктБезНДС") Тогда
		Возврат "AKT1C0";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаНакладная") Тогда
		Возврат "1CBHB";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаНакладнаяСНДС") Тогда
		Возврат "1CBH";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаНакладнаяБезНДС") Тогда
		Возврат "1CBH0";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаВозвратнаяНакладная") Тогда
		Возврат "ZNFRB";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаВозвратнаяНакладнаяСНДС") Тогда
		Возврат "ZNFR";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаВозвратнаяНакладнаяБезНДС") Тогда
		Возврат "ZNFR0";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаАктПроизвУслуг") Тогда
		Возврат "AKTBFRB";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаАктПроизвУслугСНДС") Тогда
		Возврат "AKTBFR";
	ИначеЕсли ИмяФормы = ВРЕГ("ФормаОтчетаАктПроизвУслугБезНДС") Тогда
		Возврат "AKTBFR0";
	КонецЕсли;	

	Возврат "";
	
КонецФункции

&НаКлиенте
Функция ВыгрузитьДокументВЗвит1С(СтрокаТаблицыДокументов) 
	
	Документ = СтрокаТаблицыДокументов.Документ;
	
	ИмяОтчета = "РегламентированныйОтчетПервичныеДокументыЗвит1С";
	
	Если НЕ ПроверитьВозможностьОткрытияОтчетаНаСервере(ИмяОтчета) Тогда
		ТекстОшибки = НСтр("ru='Не удалось открыть отчет ""';uk='Не вдалося відкрити звіт ""'")+ИмяОтчета+"""";
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;
	
	// получаем основную форму, а из нее действующую форму для данного периода
	ПараметрыОткрытияОсновнойФормыОтчета = Новый Структура;
	ИмяФормы1С = глМенеджерЗвит1С.ОпределитьИмяФормыВыгрузки(Документ);
	
	// открываем действующую форму и получаем из нее название схемы выгрузки
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мПервичныйДокумент",Документ);
	Попытка
		Если РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИмяОтчета) Тогда
		    ТекФорма = ПолучитьФорму("ВнешнийОтчет." + ИмяОтчета + ".Форма." + ИмяФормы1С, ПараметрыФормы, , Организация);
		Иначе			
		    ТекФорма = ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма." + ИмяФормы1С, ПараметрыФормы, , Организация);
		КонецЕсли;
	Исключение
		ТекстОшибки = "Ошибка открытия формы " + ИмяФормы1С + " отчета " + ИмяОтчета;
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецПопытки;
	
	ИмяСхемы = ПолучитьИмяСхемы(ИмяФормы1С);
	СоответствиеОтчета = глМенеджерЗвит1С.ПолучитьСоответствиеОтчетов(ИмяСхемы);
	
	// Попробуем запустить FREDO ДокМен или выведем причины отказа (не установлен, не используется в этой ИБ)
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация) Тогда
		ТекстОшибки = НСтр("ru='Не удалось запустить ""FREDO ДокМен""';uk='Не вдалося запустити ""FREDO ДокМен""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
	КонецЕсли;			
	
	КодПоЕДРПОУ = СтрокаТаблицыДокументов.Организация_ЕДРПОУ;
	ИДДокумента = СтрокаТаблицыДокументов.ИДДокумента;

	ИмяСхемыЗвит1С = ИмяСхемы;
	ТипПериода     = 0;
	НомерВПериоде  = Месяц(СтрокаТаблицыДокументов.Дата);
	Год            = Год(СтрокаТаблицыДокументов.Дата);

	Если глМенеджерЗвит1С.ФлагОтладки Тогда
		Сообщить("FREDO ДокМен. Створення звіту в обліковій системі BAS (ЄДРПОУ """+КодПоЕДРПОУ+""", схема """+ИмяСхемыЗвит1С+""", тип періода """+ТипПериода+
												   """, номер в періоді """+НомерВПериоде+""", рік """+Год+""", внутрішній ІД """+ИДДокумента+""")");
	КонецЕсли;
	
	Попытка
		Результат = глКомпонентаЗвит1С.OpenCreateRTFReport(КодПоЕДРПОУ, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, ИДДокумента);
		РезультатаСоздания = Результат.CreateResult;
	Исключение
		РезультатаСоздания = ИнформацияОбОшибке();		
	КонецПопытки;
	
	// Переберем все возможные варианты 
	Если РезультатаСоздания = 0 Тогда
		
		ОтчетЗвит1С = Результат;
	 	Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("FREDO ДокМен. Створено новий звіт");
		КонецЕсли;
		
	ИначеЕсли РезультатаСоздания = 1 Тогда
		
		ОтчетЗвит1С = Результат;
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("FREDO ДокМен. Відкрито існуючий звіт");
		КонецЕсли;
		
		ТекстОшибки = "";
		ДокументКорректен = ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
		ТекстОшибки = ТекстОшибки + НСтр("ru='. Для выгрузки по новой схеме, необходимо удалить уже существующий документ во ""FREDO ДокМен"".';uk= 
					   		   			  |'. Для вивантаження за новою схемою, необхідно вилучити існуючий документ у ""FREDO ДокМен"".'"); 
		Если Не ДокументКорректен Тогда
			ОтчетЗвит1С = Неопределено; // Освобождаем объект
			Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
			
		КонецЕсли
		
	ИначеЕсли РезультатаСоздания = 2 Тогда
		
		ТекстОшибки = НСтр("ru='Отчет уже отправлен контрагенту';uk= 'Звіт вже відправлений контрагенту'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
 	ИначеЕсли РезультатаСоздания = 3 Тогда
		
		ТекстОшибки = НСтр("ru='Отчет уже принят контрагентом';uk= 'Звіт вже прийнятий контрагентом'");		
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = 4 Тогда
		
		// Позволяем повторную выгрузку отклоненных отчетов
		ОтчетЗвит1С = Результат;
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("FREDO ДокМен. Відкрито існуючий звіт");
		КонецЕсли;
		
		ТекстОшибки = "";
		ДокументКорректен = ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
		Если Не ДокументКорректен Тогда
			ОтчетЗвит1С = Неопределено; // Освобождаем объект
			Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
			
		КонецЕсли
		
	ИначеЕсли РезультатаСоздания = -1 Тогда
		
		ТекстОшибки = НСтр("ru='Общая ошибка ""FREDO ДокМен""';uk= 'Загальна помилка ""FREDO ДокМен""'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
				
	ИначеЕсли РезультатаСоздания = -2 Тогда
		
		ТекстОшибки = НСтр("ru='Ошибка указания периода отчета';uk= 'Помилка вказівки періоду звіту'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -3 Тогда
		
		ТекстОшибки = НСтр("ru='ЕДРПОУ организации указанной в документе не совпадает с текущем ЕДРПОУ в ""FREDO ДокМен""
                            |Переключите текущую организацию в ""FREDO ДокМен"" и повторите выгрузку еще раз';uk= 'ЄДРПОУ організації зазначеної в документі не збігається з поточному ЄДРПОУ в ""FREDO ДокМен""
                            |Переключіть поточну організацію в ""FREDO ДокМен"" і повторіть вивантаження ще раз'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина, Истина);
		
	ИначеЕсли РезультатаСоздания = -4 Тогда
		
		ТекстОшибки = НСтр("ru='Имя схемы "+ИмяСхемыЗвит1С+" задано не верно или схема отсутсвует';uk= 'Назва схеми "+ИмяСхемыЗвит1С+" задано не вірно або схема відсутня'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -5 Тогда
		
		ТекстОшибки = НСтр("ru='Документ вже відправлено контрагенту';uk= 'Документ вже передано контрагенту'");		
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли РезультатаСоздания = -6 Тогда
		
		ТекстОшибки = НСтр("ru='Отсутствует лицензия FREDO ДокМен для работы с ЭДО';uk= 'Відсутня ліцензія в FREDO ДокМен для роботи з ЕДО'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
		
	ИначеЕсли ТипЗнч(РезультатаСоздания) = Тип("ИнформацияОбОшибке") Тогда
		
		// Исключение возникшее в 1С
		ИнформацияОбОшибке = РезультатаСоздания;
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина ;
		КонецЕсли;
		
		Возврат СформироватьРезультатВыгрузкиДокумента(ИнформацияОбОшибке.Описание, Истина);
		
	КонецЕсли;
	
	ОткрыватьОтчет = (глМенеджерЗвит1С.ФлагОтладки ИЛИ глМенеджерЗвит1С.ФлагОтладкиПакетноеТестирование); 
	
	ДопПараметры = Новый Структура("ОтчетЗвит1С, СоответствиеОтчета, НастройкаФормыОтчета, ОткрыватьОтчет", ОтчетЗвит1С, СоответствиеОтчета, ПараметрыФормы, ОткрыватьОтчет);
	
	ДопПараметры.Вставить("ТекФорма", 							  ТекФорма);
	ДопПараметры.Вставить("ДанныеДляСохраненияРасшифровкиОтчета", Новый Структура);
	
	глМенеджерЗвит1С.ЗаполнитьИСохранитьОтчетЗвит1С(Истина, ДопПараметры);
	
	Если НЕ ДопПараметры.Свойство("ФлагУспешногоСохранения") Тогда
		ТекстОшибки = НСтр("ru='Ошибка передачи данных в FREDO ДокМен';uk='Помилка передачі даних в FREDO ДокМен'");
		Возврат СформироватьРезультатВыгрузкиДокумента(ТекстОшибки, Истина);
	КонецЕсли;
	
	Возврат СформироватьРезультатВыгрузкиДокумента(Неопределено, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьОткрытияОтчетаНаСервере(ИмяОтчета)

	Возврат РегламентированнаяОтчетность.ПроверитьВозможностьОткрытияОтчета(ИмяОтчета);	

КонецФункции

// Функция формирует результат работы функции ВыгрузитьДокумент
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьРезультатВыгрузкиДокумента(Описание = Неопределено, Ошибка = Ложь, ЭтоФатальнаяОшибка = Ложь)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ВыгрузкаПрошлаУспешно",    (Не Ошибка));
	ВозвращаемоеЗначение.Вставить("Описание",                 Описание);           // Текст ошибки или информация о выполненных действиях
	ВозвращаемоеЗначение.Вставить("ПроизошлаФатальнаяОшибка", ЭтоФатальнаяОшибка); // Прерывает пакетную выгрузку
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


// Функция проверяет неизменнойсть ключевых параметров перед повторной выгрузкуой отчета
//
&НаКлиенте
Функция ПроверитьКлючевыеПараметрыПередПовторнойВыгрузкой(ОтчетЗвит1С, ТекстОшибки, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, КодПоЕДРПОУ);
	
	ТекстОшибки = "";

	ДатаПериода = Дата(Год, НомерВПериоде, 1);

	Если ИмяСхемыЗвит1С <> ОтчетЗвит1С.CharCode Тогда
		ТекстОшибки = ТекстОшибки+Символы.ПС
					   + НСтр("ru='Схема: ожидается';uk='Схема: очікується'")+" """+ИмяСхемыЗвит1С+""", "
					   + НСтр("ru='обнаружено';uk='виявлено'")+" """+ОтчетЗвит1С.CharCode+"""";
	КонецЕсли;		
	Если ТипПериода <> ОтчетЗвит1С.PeriodType
	 ИЛИ ДатаПериода <> ОтчетЗвит1С.PeriodDate Тогда
		ТекстОшибки = ТекстОшибки+Символы.ПС 
		               + НСтр("ru='Период: ожидается';uk='Період: очікується'")+" """+глМенеджерЗвит1С.ОпределитьТипПериодаЗвит1С(ДатаПериода, ТипПериода)+""" "
					   + НСтр("ru='обнаружено';uk='виявлено'")+" """+глМенеджерЗвит1С.ОпределитьТипПериодаЗвит1С(ОтчетЗвит1С.PeriodDate, ОтчетЗвит1С.PeriodType)+"""";
	КонецЕсли;				
	Если СокрЛП(КодПоЕДРПОУ) <> СокрЛП(ОтчетЗвит1С.FIRM_EDRPOU) Тогда
		ТекстОшибки = ТекстОшибки+Символы.ПС
		               + НСтр("ru='Код ЕДРПОУ: ожидается';uk='Код ЄДРПОУ: очікується'")+" """+КодПоЕДРПОУ+""" "
					   + НСтр("ru='обнаружено';uk='виявлено'")+" """+ОтчетЗвит1С.FIRM_EDRPOU+"""";
	КонецЕсли;				
		
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru='Обнаружен отчет во ""FREDO ДокМен"" соответсвующий выгружаемому из информационной базы документу.
|Изменены ключевые параметры, выгрузка отменена.';uk='Виявлено звіт у ""FREDO ДокМен"" відповідний документу, що вивантажується з інформаційної бази.
|Змінені ключові параметри, вивантаження скасоване.'")+ТекстОшибки;
						  
	    Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
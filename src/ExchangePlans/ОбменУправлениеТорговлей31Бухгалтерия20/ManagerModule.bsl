#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииБсп

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию
// 
// Параметры:
//	Настройки - Структура - Сеодержит настройки по умолчанию
//
Процедура ОпределитьНастройки(Настройки, ИдентификаторНастройки = "") Экспорт
	
	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Истина;
 	Настройки.ПутьКФайлуКомплектаПравилНаПользовательскомСайте = "https://dl.bas-soft.eu/bas-bukhgalteriya/";
	Настройки.ПутьКФайлуКомплектаПравилВКаталогеШаблонов = "\NetHelp\BASAccounting";
	
КонецПроцедуры

//Возвращает возможность использование данного плана обмена в модели сервсиа
 //
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает имя обработки выгрузки данных
//
Функция ИмяОбработкиВыгрузки() Экспорт
	
	Возврат "";
	
КонецФункции // ИмяОбработкиВыгрузки()

// Функция возвращает имя обработки загрузки данных
//
Функция ИмяОбработкиЗагрузки() Экспорт
	
	Возврат "";
	
КонецФункции // ИмяОбработкиЗагрузки()

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки = "") Экспорт
	
	ПоясняющийТекст = НСтр("ru='Позволяет синхронизировать данные между конфигурациями ""BAS Управление торговлей"", ред. 3.2, и ""BAS Бухгалтерия"".
                            |Синхронизация данных выполняется в двустороннем режиме на уровне документов и справочной информации.'
                            |;uk='Дозволяє синхронізувати дані між конфігураціями ""BAS Управління торгівлею"", ред. 3.2, і ""BAS Бухгалтерія"".
                            |Синхронізація даних виконується в двосторонньому режимі на рівні документів та довідкової інформації.'");
	
	Возврат ПоясняющийТекст;
	
КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки = "") Экспорт
	Возврат "ПланОбмена.ОбменУправлениеТорговлей31Бухгалтерия20.Форма.ПодробнаяИнформация";
КонецФункции

// Определяет несколько вариантов настройки расписания выполнения обмена данными;
// Рекомендуется указывать не более 3 вариантов;
// Эти варианты должны быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ВариантыНастройки - СписокЗначений - список расписаний обмена данными
//
Функция ВариантыНастройкиРасписания() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	// Расписание №1
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	
	Расписание1 = Новый РасписаниеРегламентногоЗадания;
	Расписание1.ДниНедели                = ДниНедели;
	Расписание1.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание1.ПериодПовтораДней        = 1; // каждый день
	Расписание1.Месяцы                   = Месяцы;
	
	// Расписание №2
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание2 = Новый РасписаниеРегламентногоЗадания;
	Расписание2.ВремяНачала              = Дата('00010101080000');
	Расписание2.ВремяКонца               = Дата('00010101200000');
	Расписание2.ПериодПовтораВТечениеДня = 3600; // каждый час
	Расписание2.ПериодПовтораДней        = 1; // каждый день
	Расписание2.ДниНедели                = ДниНедели;
	Расписание2.Месяцы                   = Месяцы;
	
	// Расписание №3
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	
	Расписание3 = Новый РасписаниеРегламентногоЗадания;
	Расписание3.ДниНедели         = ДниНедели;
	Расписание3.ВремяНачала       = Дата('00010101020000');
	Расписание3.ПериодПовтораДней = 1; // каждый день
	Расписание3.Месяцы            = Месяцы;
	
	// возвращаемое значение функции
	ВариантыНастройки = Новый СписокЗначений;
	
	ВариантыНастройки.Добавить(Расписание1, НСтр("ru='Один раз в 15 минут, кроме субботы и воскресенья';uk='Один раз на 15 хвилин, крім суботи та неділі'"));
	ВариантыНастройки.Добавить(Расписание2, НСтр("ru='Каждый час с 8:00 до 20:00, ежедневно';uk='Кожну годину з 8:00 до 20:00, щодня'"));
	ВариантыНастройки.Добавить(Расписание3, НСтр("ru='Каждую ночь в 2:00, кроме субботы и воскресенья';uk='Кожну ніч в 2:00, крім суботи та неділі'"));
	
	Возврат ВариантыНастройки;
	
КонецФункции

// Определяет версию платформы базы-приемника для создания СОМ-подключения;
// Возможные варианты возвращаемого значения: "V81"; "V82"
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 3 - версия платформы базы-приемника (V81; V82)
//
Функция ВерсияПлатформыИнформационнойБазы() Экспорт
	
	Возврат "V82";
	
КонецФункции

Функция ПрефиксНастройкиОбменаДанными() Экспорт
	
	Возврат "А";
	
КонецФункции

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для БдУ";
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВыгружатьЦеныНоменклатуры",            Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",      Ложь);
	СтруктураНастроек.Вставить("ВыгружатьУправленческуюОрганизацию",   Ложь);
	СтруктураНастроек.Вставить("СворачиватьДокументыПоСкладу",         Ложь);
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",         НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",            "АвтоматическаяСинхронизация");
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",          "АвтоматическаяСинхронизация");
	СтруктураНастроек.Вставить("ПравилаСозданияДоговоровКонтрагентов", "ПоПартнерам");
	СтруктураНастроек.Вставить("ОбобщенныйСклад",                      Справочники.Склады.ПустаяСсылка());
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",        Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",            Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	СтруктураНастроек.Вставить("УправленческаяОрганизация",            Справочники.Организации.УправленческаяОрганизация);
	
	СтруктураТабличнойЧастиВидыЦенНоменклатуры = Новый Структура("ВидЦенНоменклатуры", Новый Массив);
	СтруктураНастроек.Вставить("ВидыЦенНоменклатуры", СтруктураТабличнойЧастиВидыЦенНоменклатуры);
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура("Организация", Новый Массив);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ПодразделениеПоУмолчанию",                 Справочники.СтруктураПредприятия.ПустаяСсылка());
	СтруктураНастроек.Вставить("РазрешитьПроведениеДокументовПриЗагрузке", Истина);
	СтруктураНастроек.Вставить("СоздаватьПартнеровДляНовыхКонтрагентов",   Истина);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	ТекстОписания = "";
	
	Если НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		ТекстОписания = НСтр("ru='Вся нормативно-справочная информация регистрируется к отправке';uk='Вся нормативно-довідкова інформація реєструється до відправлення'");
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
		ТекстОписания = НСтр("ru='К отправке регистрируется только используемая в документах нормативно-справочная информация';uk='До відправлення реєструється тільки нормативно-довідкова інформація, що використовується у документах'");
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		ТекстОписания = НСтр("ru='Данные отправляться не будут';uk='Дані відправлятися не будуть'");
	КонецЕсли;

	ТекстОписания = ТекстОписания + ";";
	
	Если НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
		
		Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;';uk='Документи автоматично реєструються до відправлення починаючи з %ДатаНачала%;'");
			ТекстОписания = СтрЗаменить(ТекстОписания,"%ДатаНачала%", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=D"));
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Все документы автоматически регистрируются к отправке;';uk='Всі документи автоматично реєструються до відправлення;'");
		КонецЕсли;
		
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Пользователь самостоятельно отбирает и регистрирует документы к отправке;';uk='Користувач самостійно відбирає і реєструє документи до відправки;'");
		
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И Не НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Документы не отправляются;';uk='Документи не надсилаються;'");
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.СворачиватьДокументыПоСкладу Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Все документы сварачиваются по складу: %ОбобщенныйСклад%;';uk='Всі документи згортаються за складом: %ОбобщенныйСклад%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ОбобщенныйСклад%", НастройкаОтборовНаУзле.ОбобщенныйСклад);
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Отправлять данные с отбором по организациям: %ПредставлениеКоллекции%;';uk='Надсилати дані з відбором за організаціями: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	Иначе
		
		Если Не НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
			
			Если НастройкаОтборовНаУзле.ВыгружатьУправленческуюОрганизацию Тогда
				ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Отправлять данные по всем организациям, включая управленческую';uk='Надсилати дані по всіх організаціях, включаючи управлінську'");
			Иначе
				ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Отправлять данные по всем организациям, исключая управленческую';uk='Надсилати дані по всіх організаціях, крім управлінської'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВыгружатьЦеныНоменклатуры Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ВидыЦенНоменклатуры.ВидЦенНоменклатуры;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Отправлять данные о ценах номенклатуры: %ПредставлениеКоллекции%;';uk='Надсилати дані про ціни номенклатури: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	ИначеЕсли Не НастройкаОтборовНаУзле.ВыгружатьЦеныНоменклатуры
		И НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Цены номенклатуры не выгружаются;';uk='Ціни номенклатури не вивантажуються;'");
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	ТекстОписания = НСтр("ru='Подразделение для загружаемых документов по умолчанию: ';uk='Підрозділ для документів, які завантажуються, за замовчуванням : '");
	
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.ПодразделениеПоУмолчанию) Тогда
		ТекстОписания = ТекстОписания + Строка(ЗначенияПоУмолчаниюНаУзле.ПодразделениеПоУмолчанию);
	Иначе
		ТекстОписания = ТекстОписания + НСтр("ru='не указано';uk='не указано'");
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	Если ЗначенияПоУмолчаниюНаУзле.РазрешитьПроведениеДокументовПриЗагрузке Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Полученные новые документы будут проводиться, если не требуют ручного дозаполнения;';uk='Отримані нові документи будуть проводитися, якщо не потребують ручного дозаповнення;'");
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Полученные новые документы, проводиться не будут;';uk='Отримані нові документи, проводитися не будуть;'");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Создавать партнеров для новых контрагентов: ';uk='Створювати партнерів для нових контрагентів: '");
		ТекстОписания = ТекстОписания + Формат(ЗначенияПоУмолчаниюНаУзле.СоздаватьПартнеровДляНовыхКонтрагентов, "БЛ=Нет; БИ=Да");
		ТекстОписания = ТекстОписания + ";";
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru='Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru='BAS Бухгалтерия';uk='BAS Бухгалтерія'");
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	
	Возврат Результат;
	
КонецФункции

Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	Возврат "РежимВыгрузкиПриНеобходимости";
	
КонецФункции

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат ОбменДаннымиУТУП.ИмяКонфигурацииИсточника();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
//  Параметры:
// ВерсияКорреспондента (только чтение) – Строка – версия конфигурации корреспондента, например, "2.1.5.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
	Если ВерсияКорреспондента = "0.0.0.0" Тогда
		ВерсияКорреспондента = "2.0.1.73";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКорреспондента, "2.0.1.73") < 0 Тогда
		
		ВызватьИсключение НСтр("ru='Настройка синхронизации данных поддерживается только с конфигурацией
                                |""BAS Бухгалтерия"" версии 2.0.1.73 и выше.'
                                |;uk='Настройка синхронізації даних підтримується тільки з конфігурацією
                                |""BAS Бухгалтерія"" версії 2.0.1.73 і вище.'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события при отправке данных узла-отправителя.
// Событие возникает при отправке данных узла-отправителя из текущей базы в корреспондент,
// до помещения данных узла в сообщения обмена.
// В обработчике можно изменить отправляемые данные или вовсе отказаться от отправки данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется отправка данных.
// Игнорировать – Булево – признак отказа от выгрузки данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то отправка данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при получении данных узла-отправителя.
// Событие возникает при получении данных узла-отправителя,
// когда данные узла прочитаны из сообщения обмена, но не записаны в информационную базу.
// В обработчике можно изменить полученные данные или вовсе отказаться от получения данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется получение данных.
// Игнорировать – Булево – признак отказа от получения данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то получение данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииДляРаботыОбменаЧерезВнешнееСоединение

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация",      Новый Массив);
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация_Ключ", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",    НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",       "АвтоматическаяСинхронизация");
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",     "АвтоматическаяСинхронизация");
	СтруктураНастроек.Вставить("Организации",                     СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",   Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	СтруктураНастроек = Новый Структура;

	СтруктураНастроек.Вставить("НоменклатурнаяГруппаПоУмолчанию",                       "");
	СтруктураНастроек.Вставить("НоменклатурнаяГруппаПоУмолчанию_Ключ",                  "");
	СтруктураНастроек.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров",      "");
	СтруктураНастроек.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров_Ключ", "");
	СтруктураНастроек.Вставить("РазрешитьПроведениеДокументовПриЗагрузке",              Истина);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Если НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		ТекстОписания = НСтр("ru='Вся нормативно-справочная информация регистрируется к отправке';uk='Вся нормативно-довідкова інформація реєструється до відправлення'");
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
		ТекстОписания = НСтр("ru='К отправке регистрируется только используемая в документах нормативно-справочная информация';uk='До відправлення реєструється тільки нормативно-довідкова інформація, що використовується у документах'");
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		ТекстОписания = НСтр("ru='Данные отправляться не будут';uk='Дані відправлятися не будуть'");
	КонецЕсли;

	ТекстОписания = ТекстОписания + ";";
	
	Если НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
		Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;';uk='Документи автоматично реєструються до відправлення починаючи з %ДатаНачала%;'");
			ТекстОписания = СтрЗаменить(ТекстОписания,"%ДатаНачала%", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=D"));
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Все документы автоматически регистрируются к отправке;';uk='Всі документи автоматично реєструються до відправлення;'");
		КонецЕсли;
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Пользователь самостоятельно отбирает и регистрирует документы к отправке;';uk='Користувач самостійно відбирає і реєструє документи до відправки;'");
	ИначеЕсли НастройкаОтборовНаУзле.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И Не НастройкаОтборовНаУзле.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Документы не отправляются;';uk='Документи не надсилаються;'");
	КонецЕсли;
		
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Отправлять данные с отбором по организациям: %ПредставлениеКоллекции%;';uk='Надсилати дані з відбором за організаціями: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	ТекстОписания = НСтр("ru='Номенклатурная группа для загружаемой номенклатуры по умолчанию: %Значение%';uk='Номенклатурна група для номенклатури, яка завантажується, по умовчанню: %Значение%'");
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.НоменклатурнаяГруппаПоУмолчанию) Тогда
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.НоменклатурнаяГруппаПоУмолчанию));
	Иначе
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru='не указана';uk='не указана'"));
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Статья прочих доходов и расходов при оприходовании товаров: %Значение%';uk='Стаття інших доходів і витрат при оприбуткуванні товарів: %Значение%'");
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров) Тогда
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров));
	Иначе
		ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru='не указана';uk='не указана'"));
	КонецЕсли;
	
	Если ЗначенияПоУмолчаниюНаУзле.РазрешитьПроведениеДокументовПриЗагрузке Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Полученные новые документы будут проводиться, если не требуют ручного дозаполнения;';uk='Отримані нові документи будуть проводитися, якщо не потребують ручного дозаповнення;'");
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru='Полученные новые документы, проводиться не будут;';uk='Отримані нові документи, проводитися не будуть;'");
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

#КонецОбласти

#Область Переопределяемаянастройкадополнениявыгрузки

// Предназначена для настройки вариантов интерактивной настройки выгрузки по сценарию узла.
// Для настройки необходимо установить значения свойств параметров в необходимые значения.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производится настройка
//     Параметры  - Структура        - Параметры для изменения. Содержит поля:
//
//         ВариантБезДополнения - Структура     - настройки типового варианта "Не добавлять".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 1.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантВсеДокументы - Структура      - настройки типового варианта "Добавить все документы за период".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 2.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантПроизвольныйОтбор - Структура - настройки типового варианта "Добавить данные с произвольным отбором".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 3.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантДополнительно - Структура     - настройки дополнительного варианта по сценарию узла.
//                                                Содержит поля:
//             Использование            - Булево            - флаг разрешения использования варианта. По умолчанию Ложь.
//             Порядок                  - Число             - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 4.
//             Заголовок                - Строка            - название варианта для отображения на форме.
//             ИмяФормыОтбора           - Cтрока            - Имя формы, вызываемой для редактирования настроек.
//             ЗаголовокКомандыФормы    - Cтрока            - Заголовок для отрисовки на форме команды открытия формы настроек.
//             ИспользоватьПериодОтбора - Булево            - флаг того, что необходим общий отбор по периоду. По умолчанию Ложь.
//             ПериодОтбора             - СтандартныйПериод - значение периода общего отбора, предлагаемого по умолчанию.
//
//             Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                            Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Можно  использовать специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки, предлагаемого по умолчанию.
//                 Отбор               - ОтборКомпоновкиДанных - отбор по умолчанию. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", необходимо использовать поле "Ссылка.Организация"
Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт
	
	Если Получатель.РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать 
		И Получатель.РежимВыгрузкиСправочников = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		
		Параметры.ВариантВсеДокументы.Использование      = Ложь;
		Параметры.ВариантБезДополнения.Использование     = Ложь;
		Параметры.ВариантПроизвольныйОтбор.Использование = Ложь;
		Параметры.ВариантДополнительно.Использование     = Ложь;
		
	Иначе
		
		//Отключаем вариант "ВариантВсеДокументы"
		
		Параметры.ВариантВсеДокументы.Использование      = Ложь;
		
		//Настраиваем вариант "Без дополнения" 
		Параметры.ВариантБезДополнения.Использование = Истина;
		Параметры.ВариантБезДополнения.Порядок       = 3;
		Параметры.ВариантБезДополнения.Заголовок     = НСтр("ru='Не добавлять документы к отправке';uk='Не додавати документи до відправки'") 
			+ Символы.ПС 
			+ "Отправлять только нормативно-справочную информацию, измененную с момента последней отправки.";
		
		//Настраиваем вариант "Произвольный отбор" 
		Параметры.ВариантПроизвольныйОтбор.Использование = Истина;
		Параметры.ВариантПроизвольныйОтбор.Порядок       = 2;
		
		Если Получатель.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			Параметры.ВариантПроизвольныйОтбор.Заголовок = НСтр("ru='Добавить справочники';uk='Додати довідники'");
		Иначе
			Параметры.ВариантПроизвольныйОтбор.Заголовок = НСтр("ru='Добавить произвольные справочники и документы';uk='Додати довільні довідники та документи'");
		КонецЕсли;
		
		Если Не Получатель.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			// Вычисляем и устанавливаем параметры сценария
			ПараметрыПоУмолчанию = ПараметрыВыгрузкиПоУмолчанию(Получатель);
			
			// Настраиваем вариант "Дополнительно" по сценарию узла
			Параметры.ВариантДополнительно.Использование            = Истина;
			Параметры.ВариантДополнительно.Порядок                  = 1;
			Параметры.ВариантДополнительно.Заголовок                = НСтр("ru='Отправить все документы';uk='Надіслати всі документи'");
			Параметры.ВариантДополнительно.ИмяФормыОтбора           = "ОбщаяФорма.НастройкаВыгрузки";
			Параметры.ВариантДополнительно.ЗаголовокКомандыФормы    = НСтр("ru='Выбрать организации для отбора';uk='Вибрати організації для відбору'");
			Параметры.ВариантДополнительно.ИспользоватьПериодОтбора = Истина;
			Параметры.ВариантДополнительно.ПериодОтбора             = ПараметрыПоУмолчанию.Период;
			//Параметры.ВариантДополнительно.ПредставлениеОтбора      = ПараметрыПоУмолчанию.ПредставлениеОтбора;
			
			// Добавляем строка настройки отбора 
			СтрокаОтбора = Параметры.ВариантДополнительно.Отбор.Добавить();
			СтрокаОтбора.ПолноеИмяМетаданных = "ВсеДокументы";
			СтрокаОтбора.ВыборПериода = Истина;
			СтрокаОтбора.Период       = ПараметрыПоУмолчанию.Период;
			СтрокаОтбора.Отбор        = ПараметрыПоУмолчанию.Отбор;
		Иначе
			Параметры.ВариантДополнительно.Использование            = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает представление отбора для варианта дополнения выгрузки по сценарию узла.
// См. описание "ВариантДополнительно" в процедуре "НастроитьИнтерактивнуюВыгрузку"
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого определяется представление отбора
//     Параметры  - Структура        - Характеристики отбора. Содержит поля:
//         ИспользоватьПериодОтбора - Булево            - флаг того, что необходимо использовать общий отбор по периоду.
//         ПериодОтбора             - СтандартныйПериод - значение периода общего отбора.
//         Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                        Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Могут быть использованы специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки.
//                 Отбор               - ОтборКомпоновкиДанных - поля отбора. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", будет использовано поле "Ссылка.Организация"
//
// Возвращаемое значение: 
//     Строка - описание отбора
//
Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт
	
	Если Параметры.ИспользоватьПериодОтбора Тогда
		Если ЗначениеЗаполнено(Параметры.ПериодОтбора) Тогда
			ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='за период: %1';uk='за період: %1'"), НРег(Параметры.ПериодОтбора));
		Иначе
			ДатаНачалаВыгрузки = Получатель.ДатаНачалаВыгрузкиДокументов;
			Если ЗначениеЗаполнено(ДатаНачалаВыгрузки) Тогда
				ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='начиная с даты начала отправки документов: %1';uk='починаючи з дати початку відправлення документів: %1'"), Формат(ДатаНачалаВыгрузки, "ДЛФ=DD"));
			Иначе
				ОписаниеПериода = НСтр("ru='за весь период учета';uk='за весь період обліку'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОписаниеПериода = "";
	КонецЕсли;
	
	СписокОрганизаций = ОрганизацииОтбораИнтерактивнойВыгрузки(Параметры.Отбор);
	
	Если СписокОрганизаций.Количество()=0 Тогда
		ОписаниеОтбораОрганизации = НСтр("ru='по всем организациям';uk='по всіх організаціях'");
	Иначе
		ОписаниеОтбораОрганизации = "";
		Для Каждого Элемент Из СписокОрганизаций Цикл
			ОписаниеОтбораОрганизации = ОписаниеОтбораОрганизации+ ", " + Элемент.Представление;
		КонецЦикла;
		ОписаниеОтбораОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='с отбором по организациям: %1';uk='з відбором по організаціях: %1'"), СокрЛП(Сред(ОписаниеОтбораОрганизации, 2)));
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Будут отправлены все документы %1,
                 |%2'
                 |;uk='Будуть відправлені всі документи %1,
                 |%2'"),
		ОписаниеПериода,  ОписаниеОтбораОрганизации
	);
	
КонецФункции

// Расчет параметров выгрузки по умолчанию.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производитсят настройка
//
// Возвращаемое значение - Структура - содержит поля:
//     ПредставлениеОтбора - Строка - текстовое описание отбора по умолчанию 
//     Период              - СтандартныйПериод     - значение периода общего отбора по умолчанию
//     Отбор               - ОтборКомпоновкиДанных - отбор
//
Функция ПараметрыВыгрузкиПоУмолчанию(Получатель)
	
	Результат = Новый Структура;
	
	// Период по умолчанию
	Результат.Вставить("Период", Новый СтандартныйПериод);
	Результат.Период.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
	// Отбор по умолчанию и его представление
	КомпоновщикОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	Результат.Вставить("Отбор", КомпоновщикОтбора.Настройки.Отбор);
	
	// Общее представление, период не включаем, так как в этом сценарии поле периода будет редактироваться отдельно
	Результат.Вставить( "ПредставлениеОтбора", 
	                    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	                    НСтр("ru='Будут отправлены все документы за %1';uk='Будуть відправлені всі документи за %1'"),
	                    НРег(Строка(Результат.Период.Вариант))));
	
	Возврат Результат;
КонецФункции

// Возвращает список организаций по таблице отбора (см "ПредставлениеОтбораИнтерактивнойВыгрузки")
// Также используется из демонстрационной формы "НастройкаВыгрузки" этого плана обмена.
//
// Параметры:
//     ТаблицаОтбора - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла. Содержит колонки:
//         ПолноеИмяМетаданных - Строка
//         ВыборПериода        - Булево
//         Период              - СтандартныйПериод
//         Отбор               - ОтборКомпоновкиДанных
//
// Возвращаемое значение:
//     СписокЗначений - значение - ссылка на организацию, представление - наименование
//
Функция ОрганизацииОтбораИнтерактивнойВыгрузки(Знач ТаблицаОтбора) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ТаблицаОтбора.Количество()=0 Или ТаблицаОтбора[0].Отбор.Элементы.Количество()=0 Тогда
		// Нет данных отбора
		Возврат Результат;
	КонецЕсли;
		
	// Мы знаем состав отбора, так как помещали туда сами - или из "НастроитьИнтерактивнуюВыгрузку"
	// или как результат редактирования в форме
	
	СтрокаДанных = ТаблицаОтбора[0].Отбор.Элементы[0];
	Отобранные   = СтрокаДанных.ПравоеЗначение;
	ТипКоллекции = ТипЗнч(Отобранные);
	
	Если ТипКоллекции=Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Отобранные Цикл
			ДобавитьСписокОрганизций(Результат, Элемент.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции=Тип("Массив") Тогда
		ДобавитьСписокОрганизций(Результат, Отобранные);
		 
	ИначеЕсли ТипКоллекции=Тип("СправочникСсылка.Организации") Тогда
		Если Результат.НайтиПоЗначению(Отобранные)=Неопределено Тогда
			Результат.Добавить(Отобранные, Отобранные.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в список органинизаций коллекцию
//
// Параметры:
//     Список      - СписокЗначений - дополняемый список
//     Организации - коллекция организаций
// 
Процедура ДобавитьСписокОрганизций(Список, Знач Организации)
	
	Для Каждого Организация Из Организации Цикл
		
		Если ТипЗнч(Организация)=Тип("Массив") Тогда
			ДобавитьСписокОрганизций(Список, Организация);
			Продолжить;
		КонецЕсли;
		
		Если Список.НайтиПоЗначению(Организация)=Неопределено Тогда
			Список.Добавить(Организация, Организация.Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонстантыИПроверкаПараметровУчета

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	Возврат "";
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	
	ПоясняющийТекст = НСтр("ru='	Перед выполнением обмена необходимо заполнить информацию об организациях, документы по которым будут загружены
    |из приложения BAS Управление торговлей ред. 3.2, а также заполнить счета учета по умолчанию в регистрах сведений Счета учета номенклатуры и Счета расчетов с контрагентами.
    |Это необходимо для корректного проведения документов.'
    |;uk=' Перед виконанням обміну необхідно заповнити інформацію про організації, документи за якими будуть завантажені
    |з програми BAS Управління торгівлею ред. 3.2, а також заповнити рахунки обліку за замовчуванням в регістрах дані Рахунки обліку номенклатури та Рахунки розрахунків з контрагентами.
    |Це необхідно для коректного проведення документів.'");
	
	Возврат ПоясняющийТекст;
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеФункцийИПроцедурФункционалаБсп

//Возвращает режим запуска, в случае интерактивного инициирования синхронизации
//Возвращаемые значения АвтоматическаяСинхронизация Или ИнтерактивнаяСинхронизация
//На основании этих значений запускается либо помощник интерактивного обмена, либо автообмен
Функция РежимЗапускаСинхронизацииДанных(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	//Возврат "";

	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация"
		Или (УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать" 
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация") Тогда
		
		Возврат "АвтоматическаяСинхронизация";
		
	Иначе
		
		Возврат "ИнтерактивнаяСинхронизация";
		
	КонецЕсли;
	
КонецФункции

//Возвращает сценарий работы помощника интерактивного сопостовления
//НеОтправлять, ИнтерактивнаяСинхронизацияДокументов, ИнтерактивнаяСинхронизацияСправочников либо пустую строку
Функция ИнициализироватьСценарийРаботыПомощникаИнтерактивногоОбмена(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	//Возврат "";
	
	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
		
		Возврат "ИнтерактивнаяСинхронизацияДокументов";
		
	ИначеЕсли УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		
		Возврат "НеОтправлять";
		
	ИначеЕсли (УзелИнформационнойБазы.ПравилаОтправкиДокументов = "НеСинхронизировать"
		И УзелИнформационнойБазы.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости")
		ИЛИ УзелИнформационнойБазы.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		
		Возврат "ИнтерактивнаяСинхронизацияСправочников";
		
	КонецЕсли;
	
КонецФункции

//Возвращает значения ограничений объектов узла плана обмена для интерактивной регистрации к обмену
//Структура: ВсеДокументы, ВсеСправочники, ДетальныйОтбор
//Детальный отбор либо неопределено, либо массив объектов метаданных входящих в состав узла (Указывается полное имя метаданных)
Функция ДобавитьГруппыОграничений(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	//Возврат Новый Структура("ВсеДокументы, ВсеСправочники, ДетальныйОтбор", Ложь, Ложь, Неопределено);
	
	СтруктураОграничений = Новый Структура;
	СтруктураОграничений.Вставить("ДетальныйОтбор", Неопределено);
	
	Если УзелИнформационнойБазы.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" 
		Или УзелИнформационнойБазы.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
		СтруктураОграничений.Вставить("ВсеДокументы", Ложь);
	Иначе
		СтруктураОграничений.Вставить("ВсеДокументы", Истина);
	КонецЕсли;
		
	Если УзелИнформационнойБазы.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" 
		Или УзелИнформационнойБазы.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
		СтруктураОграничений.Вставить("ВсеСправочники", Ложь);
	Иначе
		СтруктураОграничений.Вставить("ВсеСправочники", Истина);
	КонецЕсли;
	
	Возврат СтруктураОграничений;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Обработчики_ФормаОбработки_Служебные

Функция ПриИзмененииРеквизитовОбъектаПроверкаРазмерности(Объект, Настройки) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Склады = Новый Массив();
		Склады.Добавить(Объект.Склад);
	Иначе
		Склады = Справочники.ФорматыМагазинов.СкладыФормата(Объект.Формат);
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПараметрыОбеспеченияПотребностей.ПолучитьМакет("ОтборНоменклатуры");
	СхемаКомпоновкиДанных.НаборыДанных.Товары.Запрос =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураСегмента.Номенклатура    КАК Номенклатура,
		|	НоменклатураСегмента.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ ОтборПоСегментам
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		{ГДЕ
		|			НоменклатураСегмента.Номенклатура.*    КАК Номенклатура,
		|			НоменклатураСегмента.Характеристика.*  КАК Характеристика,
		|			НоменклатураСегмента.Сегмент.*         КАК СегментНоменклатуры}
		|ГДЕ
		|	&ИспользуетсяОтборПоСегментуНоменклатуры
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|/////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзменениеАссортиментаТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(Форматы.Склад, ИзменениеАссортимента.ОбъектПланирования) КАК Склад,
		|	ИСТИНА КАК ИспользуетсяОтборАссортимента
		|ПОМЕСТИТЬ ОтборАссортимента
		|ИЗ
		|	Документ.ИзменениеАссортимента КАК ИзменениеАссортимента
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
		|		ПО ИзменениеАссортиментаТовары.Ссылка = ИзменениеАссортимента.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних КАК Форматы
		|		ПО Форматы.ФорматМагазина = ИзменениеАссортимента.ОбъектПланирования
		|{ГДЕ
		|	ИзменениеАссортимента.Ссылка КАК ДокументИзмененияАссортимента}
		|ГДЕ
		|	&ИспользуетсяОтборАссортимента
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Склад
		|;
		|
		|/////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
		|{ВЫБРАТЬ
		|	КоличествоЗаписей КАК КоличествоЗаписей}
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаХарактеристик
		|		ПО НЕ ТаблицаХарактеристик.ПометкаУдаления
		|		 И (ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					И ТаблицаХарактеристик.Владелец = ТаблицаНоменклатуры.Ссылка
		|				ИЛИ ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					И ТаблицаХарактеристик.Владелец = ТаблицаНоменклатуры.ВидНоменклатуры
		|				ИЛИ ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					И ТаблицаХарактеристик.Владелец = ТаблицаНоменклатуры.ВладелецХарактеристик)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
		|		ПО НЕ ТаблицаСклады.ПометкаУдаления
		|		 И НЕ ТаблицаСклады.ЭтоГруппа
		|		 И ТаблицаНоменклатуры.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		
		|		И (НЕ &ИспользоватьОтборСклад ИЛИ ТаблицаСклады.Ссылка В(&Склады))
		|ГДЕ
		|	ТаблицаНоменклатуры.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И (НЕ ТаблицаХарактеристик.Владелец ЕСТЬ NULL
		|		ИЛИ ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
		|		
		|	И (НЕ &ИспользоватьОтборНоменклатура ИЛИ ТаблицаНоменклатуры.Ссылка = &Номенклатура)
		|	И (НЕ &ИспользоватьОтборТоварнаяКатегория ИЛИ ТаблицаНоменклатуры.ТоварнаяКатегория = &ТоварнаяКатегория)
		|{ГДЕ
		|	ТаблицаСклады.Ссылка.* КАК Склад,
		|	ТаблицаНоменклатуры.Ссылка.* КАК Номенклатура,
		|	ТаблицаХарактеристик.Ссылка.* КАК Характеристика}
		|{ГДЕ (ТаблицаНоменклатуры.Ссылка, ЕСТЬNULL(ТаблицаХарактеристик.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика
		|	ИЗ
		|		ОтборПоСегментам КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборПоСегментуНоменклатуры)}
		|{ГДЕ (ТаблицаНоменклатуры.Ссылка, ТаблицаСклады.Ссылка) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Склад          КАК Склад
		|	ИЗ
		|		ОтборАссортимента КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборАссортимента)}";
		
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);

	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, "Товары");
	
	Запрос.УстановитьПараметр("Склады",            Склады);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", Объект.ТоварнаяКатегория);
	Запрос.УстановитьПараметр("Номенклатура",      Объект.Номенклатура);
	Запрос.УстановитьПараметр("СпособОбеспечения", Объект.СпособОбеспечения);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборСклад", ЗначениеЗаполнено(Объект.Склад) Или ЗначениеЗаполнено(Объект.Формат));
	Запрос.УстановитьПараметр("ИспользоватьОтборТоварнаяКатегория", ЗначениеЗаполнено(Объект.ТоварнаяКатегория));
	Запрос.УстановитьПараметр("ИспользоватьОтборНоменклатура",      ЗначениеЗаполнено(Объект.Номенклатура));
	Запрос.УстановитьПараметр("ИспользоватьОтборСпособОбеспечения", ЗначениеЗаполнено(Объект.СпособОбеспечения));
	
	КоличествоЗаписей = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоЗаписей = Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат КоличествоЗаписей;
	
КонецФункции

Процедура ПриИзмененииРеквизитовОбъекта(Объект, Форма, ПолучитьПервые10000, Настройки) Экспорт
	
	Объект.Товары.Очистить();
	КорневыеЭлементы = Форма.Дерево.ПолучитьЭлементы();
	КорневыеЭлементы.Очистить();
	
	Таблица = ПараметрыОбеспечения(Объект, ПолучитьПервые10000, Настройки);
	Таблица.Сортировать(КлючевыеПоляДерева(), Новый СравнениеЗначений);
	
	Объект.Товары.Загрузить(Таблица);
	
	Группы = СтрокиПоГруппам(Объект.Товары);
	Для Индекс = 1 По Группы.Количество() Цикл
		
		МассивСтрок = Группы[Группы.Количество() - Индекс];
		ВставитьВетвьВДерево(МассивСтрок, КорневыеЭлементы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиПоГруппам(Строки)
	
	Группы = Новый Массив();
	Группировка       = Неопределено;
	ИсточникНастройки = Неопределено;
	Склад             = Неопределено;
	Номенклатура      = Неопределено;
	Для Каждого СтрокаТаблицы Из Строки Цикл
		
		Если ИсточникНастройки <> СтрокаТаблицы.ИсточникНастройкиТоварныхОграничений
			Или Группировка <> СтрокаТаблицы.Группировка
			Или ИсточникНастройки = "НоменклатураСклад" И Номенклатура <> СтрокаТаблицы.Номенклатура
			Или ИсточникНастройки = "НоменклатураСклад" И Склад <> СтрокаТаблицы.Склад Тогда
			
			Группировка       = СтрокаТаблицы.Группировка;
			ИсточникНастройки = СтрокаТаблицы.ИсточникНастройкиТоварныхОграничений;
			Номенклатура      = СтрокаТаблицы.Номенклатура;
			Склад             = СтрокаТаблицы.Склад;
			
			НоваяГруппа = Новый Массив();
			Группы.Добавить(НоваяГруппа);
			
		КонецЕсли;
		
		НоваяГруппа.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Возврат Группы;
	
КонецФункции

Процедура ПриОкончанииРедактированияСтроки(Объект, Форма) Экспорт
	
	Идентификаторы = Новый Массив();
	Настройка = Новый Структура(ПоляТоварногоОграничения());
	
	Если Форма.ОтображениеСписка = НСтр("ru='Список';uk='Список'") Тогда
		
		Идентификаторы.Добавить(Форма.Элементы.Товары.ТекущаяСтрока);
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Форма.Элементы.Товары.ТекущаяСтрока);
		СпособОбеспечения = СтрокаТовары.СпособОбеспечения;
		ЗаполнитьЗначенияСвойств(Настройка, СтрокаТовары);
		
	Иначе
		
		СтрокаДерева = Форма.Дерево.НайтиПоИдентификатору(Форма.Элементы.Дерево.ТекущаяСтрока);
		СпособОбеспечения = СтрокаДерева.СпособОбеспечения;
		ЗаполнитьЗначенияСвойств(Настройка, СтрокаДерева);
		
		Если СтрокаДерева.ЭлементГруппа = 0 Тогда
			Идентификаторы.Добавить(СтрокаДерева.ИдентификаторСвязи);
		Иначе
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
				Идентификаторы.Добавить(ПодчиненнаяСтрока.ИдентификаторСвязи);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	ТаблицаТоваров = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, "Номенклатура, Характеристика, Склад, Группировка, ИсточникНастройкиТоварныхОграничений");
	ОбработанныеСтроки = РегистрыСведений.ТоварныеОграничения.ИзменитьТоварноеОграничение(ТаблицаТоваров, Настройка);
	
	Для Каждого Идентификатор Из ОбработанныеСтроки Цикл
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		ИзменитьТоварноеОграничениеВСтроке(СтрокаТаблицы, Форма.Дерево, Настройка);
	КонецЦикла;
	
	Если Форма.ОтображениеСписка = НСтр("ru='Список';uk='Список'") Или СтрокаДерева.ЭлементГруппа = 0 Тогда
		
		ОбработанныеСтроки = РегистрыСведений.ВариантыОбеспеченияТоварами.ЗаполнитьСпособОбеспечения(ТаблицаТоваров, СпособОбеспечения);
		РеквизитыСпособа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпособОбеспечения, "СрокИсполненияЗаказа,ОбеспечиваемыйПериод");
		Для Каждого Идентификатор Из ОбработанныеСтроки Цикл
			
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			ОбновитьПараметрыСпособаОбеспеченияСтроки(СтрокаТаблицы, Форма.Дерево, СпособОбеспечения, РеквизитыСпособа);
			
		КонецЦикла;
		
		ТаблицаРабот = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, "Номенклатура, Характеристика", Ложь);
		
		ОбработанныеСтроки = РегистрыСведений.ВариантыОбеспеченияРаботами.ЗаполнитьСпособОбеспечения(ТаблицаРабот, СпособОбеспечения);
		Для Каждого Идентификатор Из ОбработанныеСтроки Цикл
			
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			ОбновитьПараметрыСпособаОбеспеченияСтроки(СтрокаТаблицы, Форма.Дерево, СпособОбеспечения, РеквизитыСпособа, Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
Конецпроцедуры

Функция СтатистикаПотребления(ТаблицаТоваров, АдресГрафикаБезКалендаря) Экспорт
	
	ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(
		ТекущаяДата(), ПериодКлассификации, - КоличествоПериодовКлассификации);
	ПериодКлассификацииДатаНачала    = Период.ДатаНачала;
	ПериодКлассификацииДатаОкончания = Период.ДатаОкончания;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ГрафикБезКалендаря", ПолучитьИзВременногоХранилища(АдресГрафикаБезКалендаря));
		Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаТоваров);
		Запрос.УстановитьПараметр("ПериодКлассификацииДатаНачала",    ПериодКлассификацииДатаНачала);
		Запрос.УстановитьПараметр("ПериодКлассификацииДатаОкончания", КонецДня(ПериодКлассификацииДатаОкончания));
		Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
			ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Идентификатор  КАК ИдентификаторСтроки,
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад          КАК Склад
		|ПОМЕСТИТЬ ТоварыСреднедневногоПотребления
		|ИЗ
		|	&ТаблицаОтбора КАК Товары
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|/////////////////////////////////////////////////////////////
		|"
		+ Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаСтатистикиПотребления()
		+ "ВЫБРАТЬ
		|	Товары.ИдентификаторСтроки                       КАК Идентификатор,
		|	ЕСТЬNULL(Статистика.СреднедневноеПотребление, 0) КАК СреднедневноеПотреблениеРасчетное,
		|	ЕСТЬNULL(Статистика.ДисперсияПотребления, 0)     КАК ДисперсияПотребления,
		|	ЕСТЬNULL(Статистика.ПотреблениеСтабильно, 0)     КАК ПотреблениеСтабильно
		|ИЗ
		|	ТоварыСреднедневногоПотребления КАК Товары
		|	ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаПотребления КАК Статистика
		|	ПО Товары.Номенклатура      = Статистика.Номенклатура
		|		И Товары.Характеристика = Статистика.Характеристика
		|		И Товары.Склад          = Статистика.Склад";
		
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Выборка;
	
КонецФункции

Процедура ЗаполнитьСтатистикуПотребления(СтрокаТовары, Выборка) Экспорт
	
	СтрокаТовары.СреднедневноеПотреблениеРасчетное = Выборка.СреднедневноеПотреблениеРасчетное;
	
	Если Выборка.ДисперсияПотребления = Null Или Выборка.ДисперсияПотребления < 0 Тогда
		СреднееОтклонение = 0;
	Иначе
		СреднееОтклонение = Pow(Выборка.ДисперсияПотребления, 0.5);
	КонецЕсли;
	
	Если Выборка.СреднедневноеПотреблениеРасчетное > 0 Тогда
		СтрокаТовары.ВариацияПотребления = СреднееОтклонение / Выборка.СреднедневноеПотреблениеРасчетное * 100;
	Иначе
		СтрокаТовары.ВариацияПотребления = 0;
	КонецЕсли;
	
	СтрокаТовары.ПотреблениеСтабильно       = Выборка.ПотреблениеСтабильно;
	СтрокаТовары.ПотреблениеВДеньРассчитано = Истина;
	
КонецПРоцедуры

#КонецОбласти

#Область Команды_ФормаОбработки_Служебные

Процедура Сгруппировать(Объект, Форма, РеквизитыГруппировки) Экспорт
	
	Идентификаторы = ВыделенныеСтроки(Форма);
	
	ПерваяСтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Идентификаторы[0]);
	ТаблицаТоваров = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, "Номенклатура, Характеристика, Склад");
	Результат = РегистрыСведений.ТоварныеОграничения.Сгруппировать(ТаблицаТоваров, РеквизитыГруппировки, ПерваяСтрокаТовары);
	
	Если Результат.ОбработанныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	СтарыеГруппировки = Новый Соответствие();
	Для Каждого Идентификатор Из Результат.ОбработанныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		СтарыеГруппировки.Вставить(СтрокаТаблицы.Группировка);
		
		СтрокаТаблицы.Группировка = Результат.Группировка;
		СтрокаТаблицы.ИсточникНастройкиТоварныхОграничений = "Группировка";
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПерваяСтрокаТовары, ПоляТоварногоОграничения());
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Идентификаторы = ИдентификаторыСвязи(Объект.Товары, Результат.ОбработанныеСтроки, Ложь);
	УдалитьИзДерева(Форма.Дерево, Идентификаторы);
	ВставитьВетвьВДерево(МассивСтрок, Форма.Дерево.ПолучитьЭлементы());
	
	УдалитьНеиспользуемыеГруппировки(СтарыеГруппировки);
	
КонецПроцедуры

Процедура ПеренестиВГруппу(Объект, Форма, Группировка) Экспорт
	
	Идентификаторы = ВыделенныеСтроки(Форма);
	
	ТаблицаТоваров = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, "Номенклатура, Характеристика, Склад");
	ОбработанныеСтроки = РегистрыСведений.ТоварныеОграничения.ПеренестиВГруппу(ТаблицаТоваров, Группировка);
	
	Если ОбработанныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ИдентификаторыСвязи(Объект.Товары, ОбработанныеСтроки, Ложь);
	УдалитьИзДерева(Форма.Дерево, Идентификаторы);
	
	МассивСтрок = Новый Массив();
	СтарыеГруппировки = Новый Соответствие();
	Если ТипЗнч(Группировка) = Тип("СправочникСсылка.Номенклатура") Тогда
		Настройка = ПараметрыОбеспеченияНоменклатурыНаСкладе(Группировка, ТаблицаТоваров[0].Склад);
	Иначе
		Настройка = ПараметрыОбеспеченияГруппировки(Группировка);
	КонецЕсли;
	
	Для Каждого Идентификатор Из ОбработанныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		СтарыеГруппировки.Вставить(СтрокаТаблицы.Группировка);
		
		Если ТипЗнч(Группировка) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаТаблицы.Группировка = Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка();
			СтрокаТаблицы.ИсточникНастройкиТоварныхОграничений = "НоменклатураСклад";
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Настройка);
		Иначе
			СтрокаТаблицы.Группировка = Группировка;
			СтрокаТаблицы.ИсточникНастройкиТоварныхОграничений = "Группировка";
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Настройка);
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	КорневыеЭлементы = Форма.Дерево.ПолучитьЭлементы();
	НайденнаяСтрокаГруппировки = Неопределено;
	Для Каждого Элемент Из КорневыеЭлементы Цикл
		
		Если Элемент.Группировка = Группировка
			Или ТипЗнч(Группировка) = Тип("СправочникСсылка.Номенклатура")
				И Элемент.Номенклатура = Группировка
				И Элемент.Склад =  ТаблицаТоваров[0].Склад Тогда
			
			НайденнаяСтрокаГруппировки = Элемент;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденнаяСтрокаГруппировки = Неопределено Тогда
		
		ВставитьВетвьВДерево(МассивСтрок, КорневыеЭлементы);
		
	Иначе
		
		ВставитьСтрокиВВетвьДерева(МассивСтрок, КорневыеЭлементы, НайденнаяСтрокаГруппировки);
		
	КонецЕсли;
	
	УдалитьНеиспользуемыеГруппировки(СтарыеГруппировки);
	
КонецПроцедуры

Процедура ИсключитьИзГруппы(Объект, Форма) Экспорт
	
	Идентификаторы = ВыделенныеСтроки(Форма);
	
	ТаблицаТоваров = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, "Номенклатура, Характеристика, Склад");
	ОбработанныеСтроки = РегистрыСведений.ТоварныеОграничения.ИсключитьИзГруппы(ТаблицаТоваров);
	
	Если ОбработанныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ИдентификаторыСвязи(Объект.Товары, ОбработанныеСтроки, Ложь);
	УдалитьИзДерева(Форма.Дерево, Идентификаторы);
	
	МассивСтрок = Новый Массив();
	СтарыеГруппировки = Новый Соответствие();
	Для Каждого Идентификатор Из ОбработанныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		СтарыеГруппировки.Вставить(СтрокаТаблицы.Группировка);
		
		СтрокаТаблицы.Группировка = Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка();
		СтрокаТаблицы.ИсточникНастройкиТоварныхОграничений = "НоменклатураХарактеристикаСклад";
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	КорневыеЭлементы = Форма.Дерево.ПолучитьЭлементы();
	ВставитьСтрокиВВетвьДерева(МассивСтрок, КорневыеЭлементы, Неопределено);
	
	УдалитьНеиспользуемыеГруппировки(СтарыеГруппировки);
	
КонецПроцедуры

Функция ИзменитьТоварноеОграничение(Объект, Форма, ПараметрыДействия) Экспорт
	
	Если ПараметрыДействия.Действие = "ЗаполнениеРесурса" Тогда
		Идентификаторы = ВыделенныеСтрокиБезПодчиненных(Форма, Истина, ПараметрыДействия.ИмяРесурса);
	Иначе
		Идентификаторы = ВыделенныеСтрокиБезПодчиненных(Форма);
	КонецЕсли;
	
	ЗаполняемыеПоля = "Номенклатура, Характеристика, Склад, Группировка, ИсточникНастройкиТоварныхОграничений," + ПоляТоварногоОграничения();
	ТаблицаТоваров = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, ЗаполняемыеПоля);
	ОбработанныеСтроки = РегистрыСведений.ТоварныеОграничения.ИзменитьТоварноеОграничение(ТаблицаТоваров, ПараметрыДействия);
	
	Если ОбработанныеСтроки.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Каждого Идентификатор Из ОбработанныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		ИзменитьТоварноеОграничениеВСтроке(СтрокаТаблицы, Форма.Дерево, ПараметрыДействия);
		
	КонецЦикла;
	
	Возврат ОбработанныеСтроки.Количество();
	
КонецФункции

Функция ЗаполнениеРесурсаДоступно(Строка, Ресурс)
	
	Если Строка.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс Тогда
		
		Возврат Ресурс = "МинимальноеКоличествоЗапаса" Или Ресурс = "МаксимальноеКоличествоЗапаса";
		
	ИначеЕсли Строка.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике Тогда
		
		Возврат Ресурс = "СтраховоеКоличествоЗапаса";
		
	ИначеЕсли Строка.МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме Тогда
		
		Возврат Ресурс = "СреднедневноеПотребление" Или Ресурс = "СтраховоеКоличествоЗапаса";
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьСпособОбеспечения(Объект, Форма, СпособОбеспечения) Экспорт
	
	Идентификаторы = ВыделенныеСтроки(Форма);
	ТаблицаТоваров = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, "Номенклатура, Характеристика, Склад");
	ОбработанныеСтроки = РегистрыСведений.ВариантыОбеспеченияТоварами.ЗаполнитьСпособОбеспечения(ТаблицаТоваров, СпособОбеспечения);
	
	ТаблицаРабот = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, "Номенклатура, Характеристика", Ложь);
	ОбработанныеСтрокиРаботы = РегистрыСведений.ВариантыОбеспеченияРаботами.ЗаполнитьСпособОбеспечения(ТаблицаРабот, СпособОбеспечения);
	
	Если ОбработанныеСтроки.Количество() = 0 И ОбработанныеСтрокиРаботы.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	РеквизитыСпособа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СпособОбеспечения, "СрокИсполненияЗаказа,ОбеспечиваемыйПериод");
	Для Каждого Идентификатор Из ОбработанныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		ОбновитьПараметрыСпособаОбеспеченияСтроки(СтрокаТаблицы, Форма.Дерево, СпособОбеспечения, РеквизитыСпособа);
		
	КонецЦикла;
	
	Для Каждого Идентификатор Из ОбработанныеСтрокиРаботы Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		ОбновитьПараметрыСпособаОбеспеченияСтроки(СтрокаТаблицы, Форма.Дерево, СпособОбеспечения, РеквизитыСпособа, Ложь);
		
	КонецЦикла;
	
	Возврат ОбработанныеСтроки.Количество() + ОбработанныеСтрокиРаботы.Количество();
	
КонецФункции

Процедура РассчитатьСтатистикуПотребления(Объект, Форма) Экспорт
	
	Идентификаторы = ВыделенныеСтроки(Форма);
	ТаблицаТоваров = ВыбранныеСтрокиВТаблицу(Объект.Товары, Идентификаторы, "Номенклатура, Характеристика, Склад");
	
	Выборка = СтатистикаПотребления(ТаблицаТоваров, Форма.АдресГрафикаБезКалендаря);
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Выборка.Идентификатор);
		ЗаполнитьСтатистикуПотребления(СтрокаТовары, Выборка);
		ЗаполнитьЗначенияСвойств(Форма.Дерево.НайтиПоИдентификатору(СтрокаТовары.ИдентификаторСвязи), СтрокаТовары, ПоляСтатистики());
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Запросы

Функция ПараметрыОбеспечения(Отбор, ПолучитьПервые10000, Настройки)
	
	Если ЗначениеЗаполнено(Отбор.Склад) Тогда
		Склады = Новый Массив();
		Склады.Добавить(Отбор.Склад);
	Иначе
		Склады = Справочники.ФорматыМагазинов.СкладыФормата(Отбор.Формат);
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПараметрыОбеспеченияПотребностей.ПолучитьМакет("ОтборНоменклатуры");
	СхемаКомпоновкиДанных.НаборыДанных.Товары.Запрос = ВременнаяТаблицаТовары(ПолучитьПервые10000);
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);

	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, "Товары");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Склады",            Склады);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", Отбор.ТоварнаяКатегория);
	Запрос.УстановитьПараметр("Номенклатура",      Отбор.Номенклатура);
	Запрос.УстановитьПараметр("СпособОбеспечения", Отбор.СпособОбеспечения);
	
	Запрос.УстановитьПараметр("ИспользоватьОтборСклад", ЗначениеЗаполнено(Отбор.Склад) Или ЗначениеЗаполнено(Отбор.Формат));
	Запрос.УстановитьПараметр("ИспользоватьОтборТоварнаяКатегория", ЗначениеЗаполнено(Отбор.ТоварнаяКатегория));
	Запрос.УстановитьПараметр("ИспользоватьОтборНоменклатура",      ЗначениеЗаполнено(Отбор.Номенклатура));
	Запрос.УстановитьПараметр("ИспользоватьОтборСпособОбеспечения", ЗначениеЗаполнено(Отбор.СпособОбеспечения));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Выполнить();
	
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапроса.Добавить(ВременнаяТаблицаФорматыСкладов()               + КонецТекстаЗапроса(), "");
	ТекстыЗапроса.Добавить(ВременнаяТаблицаПоляСвязиТоварныеОграничения() + КонецТекстаЗапроса(), "");
	ТекстыЗапроса.Добавить(РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения(""), "");
	
	ТекстыЗапроса.Добавить(ТекстЗапросаПараметрыОбеспечения(), "ПараметрыОбеспечения");
	
	Пакет = Новый Структура();
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Пакет);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Возврат Пакет.ТаблицаПараметрыОбеспечения;
	
КонецФункции

Функция ПараметрыОбеспеченияГруппировки(Группировка)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТоварныеОграничения.МетодОбеспеченияПотребностей           КАК МетодОбеспеченияПотребностей,
		|	ТаблицаТоварныеОграничения.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.СреднедневноеПотребление               КАК СреднедневноеПотребление,
		|	ТаблицаТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса,
		|	ТаблицаТоварныеОграничения.УпаковкаЗаказа                         КАК УпаковкаЗаказа
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ТаблицаТоварныеОграничения
		|ГДЕ
		|	ТаблицаТоварныеОграничения.Склад            = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ТаблицаТоварныеОграничения.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТаблицаТоварныеОграничения.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ТаблицаТоварныеОграничения.Группировка = &Группировка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Группировка", Группировка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура("МетодОбеспеченияПотребностей, МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса, СтраховоеКоличествоЗапаса,
		|СреднедневноеПотребление, ОбеспечениеЗаказовПриПоддержанииЗапаса, УпаковкаЗаказа");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОбеспеченияНоменклатурыНаСкладе(Номенклатура, Склад)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаТоварныеОграничения.МетодОбеспеченияПотребностей,
		|		ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)) КАК МетодОбеспеченияПотребностей,
		|	ТаблицаТоварныеОграничения.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.СреднедневноеПотребление               КАК СреднедневноеПотребление,
		|	ТаблицаТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса,
		|	ТаблицаТоварныеОграничения.УпаковкаЗаказа                         КАК УпаковкаЗаказа
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ТаблицаТоварныеОграничения
		|ГДЕ
		|	ТаблицаТоварныеОграничения.Склад            = &Склад
		|	И ТаблицаТоварныеОграничения.Номенклатура   = &Номенклатура
		|	И ТаблицаТоварныеОграничения.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ТаблицаТоварныеОграничения.Группировка    = ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура("МетодОбеспеченияПотребностей, МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса, СтраховоеКоличествоЗапаса,
		|СреднедневноеПотребление, ОбеспечениеЗаказовПриПоддержанииЗапаса, УпаковкаЗаказа");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ВременнаяТаблицаФорматыСкладов()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаФорматы.Склад          КАК Склад,
		|	ТаблицаФорматы.ФорматМагазина КАК ФорматМагазина
		|ПОМЕСТИТЬ ВтФорматыСкладов
		|ИЗ
		|	РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних(,
		|		НЕ &ИспользоватьОтборСклад ИЛИ Склад В(&Склады)) КАК ТаблицаФорматы
		|ГДЕ
		|	ТаблицаФорматы.ФорматМагазина <> ЗНАЧЕНИЕ(Справочник.ФорматыМагазинов.ПустаяСсылка)";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаТовары(ПолучитьПервые10000)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураСегмента.Номенклатура    КАК Номенклатура,
		|	НоменклатураСегмента.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ ОтборПоСегментам
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		{ГДЕ
		|			НоменклатураСегмента.Номенклатура.*    КАК Номенклатура,
		|			НоменклатураСегмента.Характеристика.*  КАК Характеристика,
		|			НоменклатураСегмента.Сегмент.*         КАК СегментНоменклатуры}
		|ГДЕ
		|	&ИспользуетсяОтборПоСегментуНоменклатуры
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|/////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИзменениеАссортиментаТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(Форматы.Склад, ИзменениеАссортимента.ОбъектПланирования) КАК Склад,
		|	ИСТИНА КАК ИспользуетсяОтборАссортимента
		|ПОМЕСТИТЬ ОтборАссортимента
		|ИЗ
		|	Документ.ИзменениеАссортимента КАК ИзменениеАссортимента
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
		|		ПО ИзменениеАссортиментаТовары.Ссылка = ИзменениеАссортимента.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененияФорматовМагазинов.СрезПоследних КАК Форматы
		|		ПО Форматы.ФорматМагазина = ИзменениеАссортимента.ОбъектПланирования
		|{ГДЕ
		|	ИзменениеАссортимента.Ссылка КАК ДокументИзмененияАссортимента}
		|ГДЕ
		|	&ИспользуетсяОтборАссортимента
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Склад
		|;
		|
		|/////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
		|	ТаблицаНоменклатуры.Ссылка КАК Номенклатура,
		|	
		|	ЕСТЬNULL(ТаблицаХарактеристик.Ссылка,
		|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	
		|	ЕСТЬNULL(ТаблицаСклады.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Склад
		|	
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТаблицаХарактеристик
		|		ПО НЕ ТаблицаХарактеристик.ПометкаУдаления
		|		 И (ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					И ТаблицаХарактеристик.Владелец = ТаблицаНоменклатуры.Ссылка
		|				ИЛИ ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					И ТаблицаХарактеристик.Владелец = ТаблицаНоменклатуры.ВидНоменклатуры
		|				ИЛИ ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					И ТаблицаХарактеристик.Владелец = ТаблицаНоменклатуры.ВладелецХарактеристик)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаСклады
		|		ПО НЕ ТаблицаСклады.ПометкаУдаления
		|		 И НЕ ТаблицаСклады.ЭтоГруппа
		|		 И ТаблицаНоменклатуры.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		
		|		И (НЕ &ИспользоватьОтборСклад ИЛИ ТаблицаСклады.Ссылка В(&Склады))
		|{ГДЕ
		|	ТаблицаСклады.Ссылка.* КАК Склад,
		|	ТаблицаНоменклатуры.Ссылка.* КАК Номенклатура,
		|	ТаблицаХарактеристик.Ссылка.* КАК Характеристика}
		|{ГДЕ (ТаблицаНоменклатуры.Ссылка, ЕСТЬNULL(ТаблицаХарактеристик.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) В(
		|	ВЫБРАТЬ
		|		ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|		ТаблицаОтбора.Характеристика КАК Характеристика
		|	ИЗ
		|		ОтборПоСегментам КАК ТаблицаОтбора
		|	ГДЕ
		|		&ИспользуетсяОтборПоСегментуНоменклатуры)}
		|{ГДЕ (ТаблицаНоменклатуры.Ссылка, ТаблицаСклады.Ссылка) В(
		|	ВЫБРАТЬ
		|		ТаблицаИзмененияАссоримента.Номенклатура КАК Номенклатура,
		|		ТаблицаИзмененияАссоримента.Склад        КАК Склад
		|	ИЗ
		|		ОтборАссортимента КАК ТаблицаИзмененияАссоримента
		|	ГДЕ
		|		&ИспользуетсяОтборАссортимента)}
		|ГДЕ
		|	ТаблицаНоменклатуры.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И (НЕ ТаблицаХарактеристик.Владелец ЕСТЬ NULL
		|		ИЛИ ТаблицаНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать))
		|		
		|	И (НЕ &ИспользоватьОтборНоменклатура ИЛИ ТаблицаНоменклатуры.Ссылка = &Номенклатура)
		|	И (НЕ &ИспользоватьОтборТоварнаяКатегория ИЛИ ТаблицаНоменклатуры.ТоварнаяКатегория = &ТоварнаяКатегория)
		|	И (НЕ ТаблицаСклады.Ссылка ЕСТЬ NULL
		|		ИЛИ ТаблицаНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			И ТаблицаНоменклатуры.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			И НЕ &ИспользоватьОтборСклад)
		|;
		|
		|///////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад
		|{ВЫБРАТЬ
		|	Склад                 КАК Склад,
		|	Номенклатура          КАК Номенклатура,
		|	Характеристика        КАК Характеристика}
		|ИЗ
		|	ВтТовары КАК Таблица";
		
		Если Не ПолучитьПервые10000 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 10000", "");
		КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаПоляСвязиТоварныеОграничения()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	
		|	ВЫБОР КОГДА ТаблицаТоварныеОграничения.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка) ТОГДА
		|				ТаблицаТоварныеОграничения.Группировка
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка)
		|		КОНЕЦ КАК ГруппировкаСвязи,
		|	
		|	ВЫБОР КОГДА ТаблицаТоварныеОграничения.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка) ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИНАЧЕ
		|				Таблица.Номенклатура
		|		КОНЕЦ КАК НоменклатураСвязи,
		|	
		|	ВЫБОР КОГДА ТаблицаТоварныеОграничения.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка) ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаТоварныеОграничения.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|		КОНЕЦ КАК ХарактеристикаСвязи,
		|	
		|	ВЫБОР КОГДА ТаблицаТоварныеОграничения.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка) ТОГДА
		|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ
		|				Таблица.Склад
		|		КОНЕЦ КАК СкладСвязи,
		|	
		|	ВЫБОР КОГДА ТаблицаТоварныеОграничения.Группировка <> ЗНАЧЕНИЕ(Справочник.ГруппировкиТоварныхОграничений.ПустаяСсылка) ТОГДА
		|				""Группировка""
		|			КОГДА Таблица.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) И ТаблицаТоварныеОграничения.Характеристика ЕСТЬ NULL ТОГДА
		|				""НоменклатураСклад""
		|			ИНАЧЕ
		|				""НоменклатураХарактеристикаСклад""
		|		КОНЕЦ КАК ИсточникНастройки
		|	
		|ПОМЕСТИТЬ ВтПоляСвязиТоварныеОграничения
		|ИЗ
		|	ВтТовары КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТаблицаТоварныеОграничения
		|		ПО ТаблицаТоварныеОграничения.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаТоварныеОграничения.Характеристика = Таблица.Характеристика
		|		 И ТаблицаТоварныеОграничения.Склад          = Таблица.Склад";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПараметрыОбеспечения()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура     КАК Номенклатура,
		|	Таблица.Характеристика   КАК Характеристика,
		|	Таблица.Склад            КАК Склад,
		|	Таблица.ГруппировкаСвязи КАК Группировка,
		|	
		|	СпрСпособОбеспеченияУнаследованный.СрокИсполненияЗаказа КАК СрокИсполненияЗаказаСхемы,
		|	СпрСпособОбеспеченияУнаследованный.ОбеспечиваемыйПериод КАК ОбеспечиваемыйПериодСхемы,
		|	
		|	ВЫБОР КОГДА ТаблицаСпособыОбеспечения.ИсточникНастройки = ""НоменклатураХарактеристикаСклад"" ТОГДА
		|				СпрСпособОбеспечения.Ссылка
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)
		|		КОНЕЦ                                 КАК СпособОбеспечения,
		|	
		|	СпрСпособОбеспечения.СрокИсполненияЗаказа КАК СрокИсполненияЗаказа,
		|	СпрСпособОбеспечения.ОбеспечиваемыйПериод КАК ОбеспечиваемыйПериод,
		|	
		|	ЕСТЬNULL(ТаблицаТоварныеОграничения.МетодОбеспеченияПотребностей,
		|		ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)) КАК МетодОбеспеченияПотребностей,
		|	
		|	ТаблицаТоварныеОграничения.МинимальноеКоличествоЗапаса            КАК МинимальноеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.МаксимальноеКоличествоЗапаса           КАК МаксимальноеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.СтраховоеКоличествоЗапаса              КАК СтраховоеКоличествоЗапаса,
		|	ТаблицаТоварныеОграничения.СреднедневноеПотребление               КАК СреднедневноеПотребление,
		|	ТаблицаТоварныеОграничения.ОбеспечениеЗаказовПриПоддержанииЗапаса КАК ОбеспечениеЗаказовПриПоддержанииЗапаса,
		|	ТаблицаТоварныеОграничения.УпаковкаЗаказа                         КАК УпаковкаЗаказа,
		|	Таблица.ИсточникНастройки                                         КАК ИсточникНастройкиТоварныхОграничений,
		|	
		|	ТаблицаСпособыОбеспечения.ИсточникНастройки                       КАК ИсточникНастройкиСпособаОбеспечения,
		|	
		|	СпрНоменклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.ТипНоменклатуры   КАК ТипНоменклатуры,
		|	СпрНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	ТаблицаФорматы.ФорматМагазина     КАК Формат
		|ИЗ
		|	ВтПоляСвязиТоварныеОграничения КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварныеОграничения КАК ТаблицаТоварныеОграничения
		|		ПО ТаблицаТоварныеОграничения.Номенклатура   = Таблица.НоменклатураСвязи
		|		 И ТаблицаТоварныеОграничения.Характеристика = Таблица.ХарактеристикаСвязи
		|		 И ТаблицаТоварныеОграничения.Склад          = Таблица.СкладСвязи
		|		 И ТаблицаТоварныеОграничения.Группировка    = Таблица.ГруппировкаСвязи
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтФорматыСкладов КАК ТаблицаФорматы
		|		ПО ТаблицаФорматы.Склад = Таблица.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО СпрНоменклатура.Ссылка = Таблица.Номенклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособыОбеспечения
		|		ПО ТаблицаСпособыОбеспечения.Номенклатура   = Таблица.Номенклатура
		|		 И ТаблицаСпособыОбеспечения.Характеристика = Таблица.Характеристика
		|		 И ТаблицаСпособыОбеспечения.Склад          = Таблица.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
		|		ПО СпрСпособОбеспечения.Ссылка = ТаблицаСпособыОбеспечения.СпособОбеспеченияПотребностей
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспеченияУнаследованный
		|		ПО СпрСпособОбеспеченияУнаследованный.Ссылка = ТаблицаСпособыОбеспечения.СпособОбеспеченияПотребностейУнаследованный
		|ГДЕ
		|	НЕ &ИспользоватьОтборСпособОбеспечения ИЛИ СпрСпособОбеспечения.Ссылка = &СпособОбеспечения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция КонецТекстаЗапроса()
	Возврат "
		|;
		|
		|/////////////////////////////////////
		|";
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

Функция ДобавитьКомандуУстановитьПараметрыОбеспеченияПотребностей(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПараметрыОбеспеченияПотребностей) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.УстановитьПараметрыОбеспеченияПотребностей";
		КомандаСоздатьНаОсновании.Идентификатор = "УстановитьПараметрыОбеспеченияПотребностей";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Параметры обеспечения потребностей';uk='Параметри забезпечення потреб'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьРасширенноеОбеспечениеПотребностей";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ФормаОбработки_СинхронизацияТаблицыИДерева

Функция ПоляТоварногоОграничения()
	
	Возврат "МетодОбеспеченияПотребностей, МинимальноеКоличествоЗапаса, МаксимальноеКоличествоЗапаса, СреднедневноеПотребление,
		|СтраховоеКоличествоЗапаса, ОбеспечениеЗаказовПриПоддержанииЗапаса, УпаковкаЗаказа";
	
КонецФункции

Функция ЭтоПодчиненныйЭлемент(СтрокаТовары)
	
	ИсточникНастройки = СтрокаТовары.ИсточникНастройкиТоварныхОграничений;
	Возврат ИсточникНастройки = "НоменклатураСклад" Или ИсточникНастройки = "Группировка";
	
КонецФункции

Процедура ВставитьВетвьВДерево(МассивСтрок, КорневыеЭлементы)
	
	Если ЭтоПодчиненныйЭлемент(МассивСтрок[0]) Тогда
		
		Настройка = Новый Структура(ПоляТоварногоОграничения());
		ЗаполнитьЗначенияСвойств(Настройка, МассивСтрок[0]);
		
		КлючевыеПоля = Новый Структура(КлючевыеПоляДерева(МассивСтрок[0].ИсточникНастройкиТоварныхОграничений));
		ЗаполнитьЗначенияСвойств(КлючевыеПоля, МассивСтрок[0]);
		
		СтрокаГруппировки = КорневыеЭлементы.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаГруппировки, Настройка);
		ЗаполнитьЗначенияСвойств(СтрокаГруппировки, КлючевыеПоля);
		СлужебныеПоля = "ТипНоменклатуры";
		ЗаполнитьЗначенияСвойств(СтрокаГруппировки, МассивСтрок[0], СлужебныеПоля);
		СтрокаГруппировки.ЭлементГруппа = 1;
		СформироватьПредставлениеЭлементаДерева(СтрокаГруппировки);
		
		Родитель = СтрокаГруппировки;
		
	Иначе
		
		Родитель = Неопределено;
		
	КонецЕсли;
	
	ВставитьСтрокиВВетвьДерева(МассивСтрок, КорневыеЭлементы, Родитель);
	
КонецПроцедуры

Процедура ВставитьСтрокиВВетвьДерева(Строки, КорневыеЭлементы, Родитель, Индекс = 0)
	
	Для Каждого СтрокаТаблицы Из Строки Цикл
		
		Если Родитель <> Неопределено Тогда
			НоваяСтрока = Родитель.ПолучитьЭлементы().Вставить(Индекс);
			НоваяСтрока.ЭтоПодчиненныйЭлемент = Истина;
		Иначе
			НоваяСтрока = КорневыеЭлементы.Вставить(Индекс);
			НоваяСтрока.ЭтоПодчиненныйЭлемент = Ложь;
		КонецЕсли;
		Индекс = Индекс + 1;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ИдентификаторСвязи = СтрокаТаблицы.ПолучитьИдентификатор();
		СтрокаТаблицы.ИдентификаторСвязи = НоваяСтрока.ПолучитьИдентификатор();
		СформироватьПредставлениеЭлементаДерева(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПредставлениеЭлементаДерева(СтрокаДерева)
	
	Если СтрокаДерева.ЭлементГруппа = 1 Тогда
		
		Если ЗначениеЗаполнено(СтрокаДерева.Группировка) Тогда
			
			СтрокаДерева.Представление = Строка(СтрокаДерева.Группировка);
			
		Иначе
			
			СтрокаДерева.Представление = Строка(СтрокаДерева.Номенклатура);
			Если ЗначениеЗаполнено(СтрокаДерева.Склад) Тогда
				СтрокаДерева.Представление = СтрокаДерева.Представление + ", " + Строка(СтрокаДерева.Склад);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаДерева.Представление = Строка(СтрокаДерева.Номенклатура);
		Если ЗначениеЗаполнено(СтрокаДерева.Характеристика) Тогда
			СтрокаДерева.Представление = СтрокаДерева.Представление + ", " + Строка(СтрокаДерева.Характеристика);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторыСвязи(Коллекция, ИсходныеИдентификаторы, ЭтоДерево)
	
	Идентификаторы = Новый Массив();
	Для Каждого Идентификатор Из ИсходныеИдентификаторы Цикл
		
		СтрокаДерева = Коллекция.НайтиПоИдентификатору(Идентификатор);
		
		Если Не ЭтоДерево Или СтрокаДерева.ЭлементГруппа = 0 Тогда // это элемент
			
			Идентификаторы.Добавить(СтрокаДерева.ИдентификаторСвязи);
			
		Иначе // необходимо выбрать все подчиненные элементы группы
			
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Идентификаторы.Добавить(ПодчиненнаяСтрока.ИдентификаторСвязи);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ВыбранныеСтрокиВТаблицу(Коллекция, Идентификаторы, ПоляКоллекции, Товары = Истина)
	
	Таблица = Коллекция.Выгрузить(Новый Массив(), ПоляКоллекции);
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		СтрокаКоллекции = Коллекция.НайтиПоИдентификатору(Идентификатор);
		
		Если Товары И СтрокаКоллекции.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			Продолжить;
		ИначеЕсли Не Товары И СтрокаКоллекции.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		НоваяСтрока.Идентификатор = Идентификатор;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ВыделенныеСтроки(Форма)
	
	Если Форма.ОтображениеСписка = НСтр("ru='Список';uk='Список'") Тогда
		Идентификаторы = Форма.Элементы.Товары.ВыделенныеСтроки;
	Иначе
		Идентификаторы = ИдентификаторыСвязи(Форма.Дерево, Форма.Элементы.Дерево.ВыделенныеСтроки, Истина);
	КонецЕсли;
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ВыделенныеСтрокиБезПодчиненных(Форма, ЗаполнениеРесурса = Ложь, Ресурс = "")
	
	Идентификаторы = Новый Массив();
	
	Если Форма.ОтображениеСписка = НСтр("ru='Список';uk='Список'") Тогда
		
		Для Каждого Идентификатор Из Форма.Элементы.Товары.ВыделенныеСтроки Цикл
			
			СтрокаТовары = Форма.Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			
			Если ЗаполнениеРесурса И Не ЗаполнениеРесурсаДоступно(СтрокаТовары, Ресурс) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТовары.ИсточникНастройкиТоварныхОграничений = "НоменклатураХарактеристикаСклад" Тогда
				Идентификаторы.Добавить(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Идентификатор Из Форма.Элементы.Дерево.ВыделенныеСтроки Цикл
			
			СтрокаДерева = Форма.Дерево.НайтиПоИдентификатору(Идентификатор);
			Если ЗаполнениеРесурса И Не ЗаполнениеРесурсаДоступно(СтрокаДерева, Ресурс) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДерева.ЭлементГруппа = 0 Тогда // это элемент
				
				Если Не СтрокаДерева.ЭтоПодчиненныйЭлемент Тогда
					Идентификаторы.Добавить(СтрокаДерева.ИдентификаторСвязи);
				КонецЕсли;
				
			Иначе // необходимо выбрать все подчиненные элементы группы
				
				Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
					
					Идентификаторы.Добавить(ПодчиненнаяСтрока.ИдентификаторСвязи);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Идентификаторы;
	
КонецФункции

Функция КлючевыеПоляДерева(ИсточникНастройки = "")
	
	Если ИсточникНастройки = "Группировка" Тогда
		Возврат "ИсточникНастройкиТоварныхОграничений, Группировка";
	Иначе
		Возврат "ИсточникНастройкиТоварныхОграничений, Группировка, Номенклатура, Склад";
	КонецЕсли;
	
КонецФункции

Функция ПоляСтатистики()
	Возврат "ПотреблениеСтабильно, ВариацияПотребления, СреднедневноеПотреблениеРасчетное";
КонецФункции

#КонецОбласти

#Область Прочие

Процедура ИзменитьТоварноеОграничениеВСтроке(СтрокаТаблицы, Дерево, ПараметрыДействия)
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыДействия);
	СтрокаДерева = Дерево.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСвязи);
	ЗаполнитьЗначенияСвойств(СтрокаДерева, ПараметрыДействия);
	Если СтрокаДерева.ЭтоПодчиненныйЭлемент Тогда
		
		Родитель = СтрокаДерева.Получитьродителя();
		ЗаполнитьЗначенияСвойств(Родитель, ПараметрыДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыСпособаОбеспеченияСтроки(СтрокаТаблицы, Дерево, СпособОбеспечения, РеквизитыСпособа, Товар = Истина)
	
	СтрокаТаблицы.СпособОбеспечения = СпособОбеспечения;
	Если ЗначениеЗаполнено(СпособОбеспечения) Тогда
		СтрокаТаблицы.СрокИсполненияЗаказа = РеквизитыСпособа.СрокИсполненияЗаказа;
		СтрокаТаблицы.ОбеспечиваемыйПериод = РеквизитыСпособа.ОбеспечиваемыйПериод;
		СтрокаТаблицы.ИсточникНастройкиСпособаОбеспечения = "НоменклатураХарактеристикаСклад";
	Иначе
		СтрокаТаблицы.СрокИсполненияЗаказа = СтрокаТаблицы.СрокИсполненияЗаказаСхемы;
		СтрокаТаблицы.ОбеспечиваемыйПериод = СтрокаТаблицы.ОбеспечиваемыйПериодСхемы;
		
		Если Товар Тогда
			СтрокаТаблицы.ИсточникНастройкиСпособаОбеспечения = "СхемаОбеспечения";
		Иначе
			СтрокаТаблицы.ИсточникНастройкиСпособаОбеспечения = "Номенклатура";
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСвязи);
	ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы,
		"СрокИсполненияЗаказа, ОбеспечиваемыйПериод, ИсточникНастройкиСпособаОбеспечения, СпособОбеспечения");
	
КонецПроцедуры

Функция УдалитьИзДерева(Дерево, Идентификаторы)
	
	КореньДерева = Дерево.ПолучитьЭлементы();
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		СтрокаДерева = Дерево.НайтиПоИдентификатору(Идентификатор);
		
		Родитель = СтрокаДерева.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			
			КореньДерева.Удалить(СтрокаДерева);
			
		Иначе
			
			Ветвь = Родитель.ПолучитьЭлементы();
			Ветвь.Удалить(СтрокаДерева);
			Если Ветвь.Количество() = 0 Тогда
				КореньДерева.Удалить(Родитель);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура УдалитьНеиспользуемыеГруппировки(Группировки)
	
	МассивСсылок = Новый Массив();
	Для Каждого Элемент Из Группировки Цикл
		
		МассивСсылок.Добавить(Элемент.Ключ);
		
	КонецЦикла;
	Справочники.ГруппировкиТоварныхОграничений.УдалитьНеиспользуемыеГруппировки(МассивСсылок);
	
КонецПроцедуры

Функция ПолучитьЗапросСОтборамиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, КомпоновщикНастроек, ИмяНабораДанных)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	ВключитьОтборПоИзменениюАссортимента(КомпоновщикНастроек);

	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных,
		КомпоновщикНастроек.ПолучитьНастройки(),,,, Ложь);

	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Запрос);

	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл

		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);

	КонецЦикла;
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
	Возврат Запрос;

КонецФункции

Процедура ВключитьОтборПоИзменениюАссортимента(ОбъектНастройки)
	
	ПараметрИспользуетсяОтбор = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		ОбъектНастройки.Настройки, 
		"ИспользуетсяОтборАссортимента");
	
	ПараметрИспользуетсяОтбор.Значение      = Ложь;
	ПараметрИспользуетсяОтбор.Использование = Ложь;
	
	НастройкиОсновнойСхемы = ОбъектНастройки.ПолучитьНастройки();
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиОсновнойСхемы.Отбор, "ДокументИзмененияАссортимента");
	ИспользуетсяОтбор = Ложь;
	
	Для каждого ЭлементОтбора из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			ИспользуетсяОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ОбъектНастройки, "ИспользуетсяОтборАссортимента", Истина, ИспользуетсяОтбор);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//Процедура ЗаполнитьПоОтбору. Помещает во временное хранилище таблицу, содержащую результат
//выполнения запроса логистических параметров.
//
//Параметры:
//	- Параметры - Структура, содержит два параметра:
//		- Запрос - Запрос - исходный запрос списка товаров/работ
//	- АдресРезультата - Строка - Адрес временного хранилища, в которое необходимо поместить результат.
//
Процедура ЗаполнитьСписокТоваровПоОтбору(ПараметрыЗадания, АдресРезультата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПараметрыЗадания.ТекстЗапроса;
	Для Каждого Параметр Из ПараметрыЗадания.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), АдресРезультата);
	
КонецПроцедуры

//Функция ПраваДоступаНаЗаписьСпособаИлиМетода. Получает право на изменение/добавление в логистические регистры.
//В частности используется при настройке форм работы с логистическими параметрами.
//Возвращаемое значение - структура со следующими полями:
//	ВариантыОбеспечения - Булево, истина, если есть необходимые права на регистры "ВариантыОбеспеченияТоварами",
//		"ВариантыОбеспеченияРаботами".
//	ТоварныеОграничения - Булево, истина, если есть необходимые права на регистр "ТоварныеОграничения".
//
Функция ПраваДоступаНаЗаписьСпособаИлиМетода() Экспорт
	
	Результат = Новый Структура("ВариантыОбеспечения, ТоварныеОграничения");
	Результат.ВариантыОбеспечения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыОбеспеченияТоварами)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ВариантыОбеспеченияТоварами)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыОбеспеченияРаботами)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ВариантыОбеспеченияРаботами);
	Результат.ТоварныеОграничения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ТоварныеОграничения)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ТоварныеОграничения);
	Возврат Результат;
	
КонецФункции

#КонецЕсли
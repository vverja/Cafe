
#Область ПрограммныйИнтерфейс

Функция ПараметрыПослеЗагрузкиДанных() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПроверятьНаИспользованиеИмпортныхТоваров", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеИмпортныхЗакупок", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеКомиссииПриЗакупках", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеКомиссииПриПродажах", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеДоговоров", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеРозничныхПродаж", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеПеремещений", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеНесколькихВидовНоменклатуры", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеАлкогольнойПродукцииВРознице", Истина);
	Параметры.Вставить("ПроверятьНаИспользованиеОтгрузкиБезПереходаПраваСобственности", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Определяет перечень доступных версий универсального формата EnterpriseData.
//
// Параметры:
//  ВерсииФормата - Соответствие - Соответствие номера версии формата общему модулю,
//                  в котором находятся обработчики выгрузки/загрузки для данной версии.
//
Процедура ДоступныеВерсииУниверсальногоФормата(ВерсииФормата) Экспорт
	
	ВерсииФормата.Вставить("1.0", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.1", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.2", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.3", МенеджерОбменаЧерезУниверсальныйФормат);

КонецПроцедуры

// Обработчик после загрузки данных.
// Используется в типовых правилах конвертации при обменах и переносах данных.
// Вызывается из соответствующего обработчика событий "После загрузки данных" правил конвертации.
//
// Параметры:
//  Параметры - Структура - структура со свойствами:
//            * ПроверятьНаИспользованиеИмпортныхТоваров - Булево - Если Истина - будет включено использование
//              импортных товаров при необходимости (если в базе есть элементы справочника "Номера ГТД").
//            * ПроверятьНаИспользованиеИмпортныхЗакупок - Булево - Если Истина - будет включено использование
//              импортных закупок (если в базе есть соответствующие операции).
//            * ПроверятьНаИспользованиеКомиссииПриЗакупках - Булево - Если Истина - будет включено использование
//              комиссии при закупках (если в базе есть соответствующие операции).
//            * ПроверятьНаИспользованиеКомиссииПриПродажах - Булево - Если Истина - будет включено использование
//              комиссии при продажах (если в базе есть соответствующие операции).
//            * ПроверятьНаИспользованиеДоговоров - Булево - Если Истина - будет включено использование
//              договоров контрагентов (если в базе есть хотя бы один договор с покупателем).
//            * ПроверятьНаИспользованиеРозничныхПродаж - Булево - Если Истина - будет включено использование
//              розничных продаж (если в базе есть соответствующие операции).
//            * ПроверятьНаИспользованиеПеремещений - Булево - Если Истина - будет включено использование
//              перемещений товаров (если в базе есть соответствующие операции).
//            * ПроверятьНаИспользованиеНесколькихВидовНоменклатуры - Булево - Если Истина - будет включено использование
//              нескольких видов номенклатуры (если видов номенклатуры от 3 и более).
//            * ПроверятьНаИспользованиеАлкогольнойПродукцииВРознице - Булево - Если Истина - будет включено
//              использование розничных продаж алкогольной продукции (если в базе есть виды номенклатуры с.
//              признаком "Алкогольная продукция").
//            * ПроверятьНаИспользованиеОтгрузкиБезПереходаПраваСобственности - Булево - Если Истина - будет включено
//              использование операций отгрузки без перехода права собственности (если в базе есть соответствующие
//              операции.
//
Процедура ПослеЗагрузкиДанных(Параметры) Экспорт
	
	Если Параметры.ПроверятьНаИспользованиеИмпортныхТоваров
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД");
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьИмпортныеТовары.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПроверятьНаИспользованиеИмпортныхЗакупок
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК Док
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)");
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьИмпортныеЗакупки.Установить(Истина);
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары") Тогда
				Константы.ИспользоватьИмпортныеТовары.Установить(Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПроверятьНаИспользованиеКомиссииПриЗакупках
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Документ.ОтчетКомитенту КАК Док
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)");
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьКомиссиюПриЗакупках.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПроверятьНаИспользованиеКомиссииПриПродажах
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК Док
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Док
		|ГДЕ
		|	Док.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)");
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Если Константы.ИспользованиеСоглашенийСКлиентами.Получить() = Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
				ВключитьИспользованиеСоглашенийСКлиентамиПриНеобходимости();
				Если Константы.ИспользованиеСоглашенийСКлиентами.Получить() = Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
					Константы.ИспользованиеСоглашенийСКлиентами.Установить(Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения);
				КонецЕсли;
			КонецЕсли;
			Константы.ИспользоватьКомиссиюПриПродажах.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПроверятьНаИспользованиеДоговоров Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК Спр
			|ГДЕ
			|	Спр.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)");
			
			Если Не Запрос.Выполнить().Пустой() Тогда
				Константы.ИспользоватьДоговорыСКлиентами.Установить(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК Спр
			|ГДЕ
			|	Спр.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)");
			
			Если Не Запрос.Выполнить().Пустой() Тогда
				Константы.ИспользоватьДоговорыСПоставщиками.Установить(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПроверятьНаИспользованиеРозничныхПродаж
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК Док
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ)");
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьРозничныеПродажи.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПроверятьНаИспользованиеПеремещений
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Док");
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьПеремещениеТоваров.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	Если Параметры.ПроверятьНаИспользованиеНесколькихВидовНоменклатуры
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") Тогда
		
		Запрос = Новый Запрос(
				"ВЫБРАТЬ 
				|	Количество(Спр.Ссылка) КАК Количество
				|ИЗ
				|	Справочник.ВидыНоменклатуры КАК Спр");
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Если Выборка.Количество > 2 Тогда
			Константы.ИспользоватьНесколькоВидовНоменклатуры.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	Если Параметры.ПроверятьНаИспользованиеОтгрузкиБезПереходаПраваСобственности
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Док
		|ГДЕ Док.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)");
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьОтгрузкуБезПереходаПраваСобственности.Установить(Истина);
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
				Константы.ИспользоватьСтатусыРеализацийТоваровУслуг.Установить(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ВыгрузкаЗагрузкаДанныхВСервисе

// Процедура-обработчик события "ПередЗагрузкойОбъекта" для механизма выгрузки/загрузки данных в сервисе
// Описание параметров см. в комментарии к ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковЗагрузкиДанных
// 
Процедура ПередЗагрузкойОбъекта(Контейнер, Объект, Артефакты, Отказ) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("РегистрироватьДанныеПервичныхДокументов", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВключитьИспользованиеСоглашенийСКлиентамиПриНеобходимости()
	
	ТекущееЗначениеКонстанты = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК Спр
	|ГДЕ
	|	Спр.Типовое = ИСТИНА
	|	И Спр.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК Спр
	|ГДЕ
	|	Спр.Типовое = ЛОЖЬ
	|	И Спр.ПометкаУдаления = ЛОЖЬ");
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ЕстьТиповые = Не РезультатыЗапроса[0].Пустой();
	ЕстьИндивидуальные = Не РезультатыЗапроса[1].Пустой();
	
	Если ЕстьТиповые И ЕстьИндивидуальные Тогда
		
		Если ТекущееЗначениеКонстанты <> Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения Тогда
			Константы.ИспользованиеСоглашенийСКлиентами.Установить(Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения);
		КонецЕсли;
		
	ИначеЕсли ЕстьТиповые Тогда
		
		Если ТекущееЗначениеКонстанты <> Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения
			И ТекущееЗначениеКонстанты <> Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения Тогда
			Константы.ИспользованиеСоглашенийСКлиентами.Установить(Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения);
		КонецЕсли;
		
	ИначеЕсли ЕстьИндивидуальные Тогда
		
		Если ТекущееЗначениеКонстанты <> Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения
			И ТекущееЗначениеКонстанты <> Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения Тогда
			Константы.ИспользованиеСоглашенийСКлиентами.Установить(Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения);
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущееЗначениеКонстанты) Тогда
		Константы.ИспользованиеСоглашенийСКлиентами.Установить(Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	Шапка.СпособДоставки    КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Т.Склад                 КАК Склад,
	|	ИСТИНА КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки  КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка,
	|		Т.Склад КАК Склад
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|		И НЕ Т.Отменено
	|		И Т.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка,
	|		Т.Склад) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК Шапка
	|		ПО Шапка.Ссылка = Т.Ссылка
	|			И Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса получения товаров к доставке по распоряжению
//
Функция ТекстЗапросаТоварыКДоставке() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	Т.Назначение,
	|	СУММА(Т.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка В(&Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПоступлениеТоваровУслуг.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	КомандаСоздатьНаОсновании = Документы.РегистрацияЦенНоменклатурыПоставщика.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если КомандаСоздатьНаОсновании <> Неопределено Тогда
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Регистрация цен поставщика';uk='Реєстрація цін постачальника'");
	КонецЕсли; 
	
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.УстановкаЦенНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандыСоздатьНаОснованииПисмаПоШаблону(КомандыСоздатьНаОсновании);
	
	Если ПравоДоступа("Добавление", Метаданные.БизнесПроцессы.СогласованиеЗакупки) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.БизнесПроцессы.СогласованиеЗакупки.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Согласование заказа поставщику';uk='Погодження замовлення постачальнику'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьСогласованиеЗаказовПоставщикам";
	   
	КонецЕсли;
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
    
	Документы.УпаковочныйЛист.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ЗаказПоставщику.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ЗаказПоставщику);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыПоставщикам";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция ДобавитьКомандуСоздатьНаОснованииЗаказыПоставщикам(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.СозданиеЗаказовПоставщикамНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СозданиеЗаказовПоставщикамНаОсновании";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Заказы поставщикам';uk='Замовлення постачальникам'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыПоставщикам";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализПричинОтмены(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийЗакупок(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента";
	КонецЕсли;

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуРезультатыСогласованияЗакупкиПоДокументу(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	// ФормаСпискаДокументов
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийЗакупок(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализПричинОтмены(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 3;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	
	МассивВсехРеквизитов.Добавить("Товары.СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("Товары.АналитикаРасходов");
	
	МассивВсехРеквизитов.Добавить("Товары.ПроцентРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.Цена");
	МассивВсехРеквизитов.Добавить("Товары.Сумма");
	МассивВсехРеквизитов.Добавить("Товары.СуммаСНДС");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
	 Или Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		
		
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		
		МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.Цена");
		МассивРеквизитовОперации.Добавить("Товары.Сумма");
		МассивРеквизитовОперации.Добавить("Товары.СуммаСНДС");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда	
		
		МассивРеквизитовОперации.Добавить("Товары.Цена");
		МассивРеквизитовОперации.Добавить("Товары.Сумма");
		МассивРеквизитовОперации.Добавить("Товары.СуммаСНДС");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда	
		
		
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		
		МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		
		МассивРеквизитовОперации.Добавить("Товары.Цена");
		МассивРеквизитовОперации.Добавить("Товары.Сумма");
		МассивРеквизитовОперации.Добавить("Товары.СуммаСНДС");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
	      ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт Тогда
		// Нет ни одного реквизита зависящего от операции
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|
	|	ДанныеДокумента.СуммаДокумента
	|	+ ЕСТЬNULL(ТаблицаСуммСверхЗаказа.СуммаВзаиморасчетов, 0)
	|		КАК СуммаВзаиморасчетов,
	|
	|	ДанныеДокумента.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|		ИЗ
	|			Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|		ГДЕ
	|			ТаблицаТовары.Ссылка.Проведен
	|			И ТаблицаТовары.ЗаказПоставщику = &ДокументСсылка
	|			И ТаблицаТовары.КодСтроки = 0
	|	) КАК ТаблицаСуммСверхЗаказа
	|	ПО
	|		Истина
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, СуммаДокумента, СуммаВзаиморасчетов",
		Дата,
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		ХозяйственнаяОперация,
		СуммаДокумента,
		СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса = ЗакупкиСервер.ТекстЗапросаКонтрольЗаказаПослеПроведения();
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР КОГДА втОстаткиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	втОстаткиПоЗаказам
		|ПО
		|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказПоставщику
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	КонтролироватьПоступление = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
	КонтролироватьРасчеты     = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
	ИспользоватьСтатусы       = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("КонтролироватьПоступление", КонтролироватьПоступление);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты",     КонтролироватьРасчеты);
	Запрос.УстановитьПараметр("ИспользоватьСтатусы",       ИспользоватьСтатусы);
	
	Возврат Запрос;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ПОМЕСТИТЬ
		|	втОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&МассивДокументов)) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	&КонтролироватьПоступление
		|	И &ИспользоватьСтатусы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
		|			ЗаказПоставщику В (&МассивДокументов)) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И &ИспользоватьСтатусы
		|	И РасчетыСПоставщикамиОстатки.КОплатеОстаток < 0
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР КОГДА втОстаткиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	втОстаткиПоЗаказам
		|ПО
		|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказПоставщику
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	КонтролироватьПоступление = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
	КонтролироватьРасчеты     = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
	ИспользоватьСтатусы       = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("КонтролироватьПоступление", КонтролироватьПоступление);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты",     КонтролироватьРасчеты);
	Запрос.УстановитьПараметр("ИспользоватьСтатусы",       ИспользоватьСтатусы);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
		И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ поставлен не полностью';uk='У документа %Документ% статус ""%Статус%"" не встановлений, оскільки замовлення поставлене не повністю'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику);
	
КонецФункции

// Возвращает текст запроса для получениях доступных назначений
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Возврат Справочники.Назначения.ТекстЗапросаНазначенийРасширенный();
	
КонецФункции

#Область РасчетСостояний

// Осуществляет вычисление текущего состояния заказа поставщику
//
// Параметры:
//	ЗаказПоставщику         - ДокументСсылка.ЗаказПоставщику - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ЗаказПоставщику, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаказПоставщику.Проведен)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ПустаяСсылка)
			|		ИНАЧЕ
			|			ЕСТЬNULL(СостоянияЗаказовПоставщикам.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт))
			|	КОНЕЦ КАК Состояние,
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаказПоставщику.Проведен)
			|			ТОГДА ЛОЖЬ
			|		КОГДА (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт) И &ИспользоватьСтатусы)
			|			ТОГДА ЛОЖЬ
			|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|				И &ТекущаяДата > СостоянияЗаказовПоставщикам.ДатаСобытия 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СостояниеПросрочено,
			|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.СуммаОплаты,0) КАК СуммаОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.ПроцентОплаты,0) КАК ПроцентОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.СуммаПоступления,0) КАК СуммаПоступления,
			|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.ПроцентПоступления,0) КАК ПроцентПоступления,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.Проведен И
			|		((ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0) ИЛИ
			|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ЕСТЬNULL(СостоянияЗаказовПоставщикам.ПроцентДолга,0) КАК ПроцентДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.Проведен И
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|	ТОГДА
			|		ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток,0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,,ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
			|ПО
			|	СостоянияЗаказовПоставщикам.Заказ = ДокументЗаказПоставщику.Ссылка
			|ГДЕ
			|	ДокументЗаказПоставщику.Ссылка = &ЗаказПоставщику
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаказПоставщику));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ИспользоватьСтатусы", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает текст запроса для расчета состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийЗаказов() Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ 
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказПоставщику.Проведен
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ПустаяСсылка)
		|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяСогласование)
		|// ОЖИДАЕТСЯ АВАНС ДО ПОДТВЕРЖДЕНИЯ /////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяАвансДоПодтверждения)
		|// ОЖИДАЕТСЯ ПОДТВЕРЖДЕНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПодтверждение)
		|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ПОСТУПЛЕНИЯ //////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам ИЛИ 
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)) И
		|		ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПредоплатаДоПоступления)
		|// ГОТОВ К ПОСТУПЛЕНИЮ //////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноОстаток, 0) <> 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКПоступлению)
		|// ОЖИДАЕТСЯ ПОСТУПЛЕНИЕ //////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|		 ИЛИ ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И ЕСТЬNULL(ЗаказыПоставщикамОстатки.КОформлениюОстаток, 0) <> 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПоступление)
		|// ОЖИДАЕТСЯ ОПЛАТА ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
		|		И ДокументЗаказПоставщику.СуммаДокумента - ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения - ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0
		|		И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0
		|		И ЕСТЬNULL(ЗаказыПоставщикамОстатки.КОформлениюОстаток, 0) = 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяОплатаПослеПоступления)
		|// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКЗакрытию)
		|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт) И НЕ &НеИспользоватьСтатусыЗаказовПоставщикам) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)
		|КОНЕЦ КАК Состояние,
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказПоставщику.Проведен
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1)
		|// ДАТА СОГЛАСОВАНИЯ ///////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
		|	ТОГДА
		|		ДокументЗаказПоставщику.ДатаСогласования
		|// ДАТА АВАНСА /////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПЕРВОГО ПОСТУПЛЕНИЯ ////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ДокументЗаказПоставщику.ДатаПервогоПоступления
		|// ДАТА ПРЕДОПЛАТЫ /////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам ИЛИ 
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)) И
		|		ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И 
		|		ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноОстаток, 0) <> 0 ИЛИ ЕСТЬNULL(ЗаказыПоставщикамОстатки.КОформлениюОстаток, 0) <> 0
		|	ТОГДА
		|		
		|		ЕСТЬNULL(ДатыПоступленияЗаказовПоставщикам.МинимальнаяДатаПоступления, ДокументЗаказПоставщику.ДатаПервогоПоступления)
		|// ДАТА ОПЛАТЫ ПОСЛЕ ПОСТУПЛЕНИЯ ///////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		ДокументЗаказПоставщику.СуммаДокумента - ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения - ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|КОНЕЦ КАК ДатаСобытия,
		|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) И
		|		ДокументЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОплаты,
		|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) И
		|		ДокументЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) * 100 / ДокументЗаказПоставщику.СуммаДокумента КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОплаты,
		|// СУММА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0)
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаПоступления,
		|// ПРОЦЕНТ ПОСТУПЛЕНИЯ //////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0) * 100 / ДокументЗаказПоставщику.СуммаДокумента КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентПоступления,
		|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.Проведен И
		|		((ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0) ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаДолга,
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ((ВЫБОР КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) > 0 ТОГДА
		|			ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0)
		|		ИНАЧЕ
		|			ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0)
		|		КОНЕЦ
		|		* 100
		|		/ ДокументЗаказПоставщику.СуммаДокумента) КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентДолга,
		|	ДокументЗаказПоставщику.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,,ЗаказПоставщику В (&МассивЗаказов)) КАК РасчетыСПоставщикамиОстатки
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = РасчетыСПоставщикамиОстатки.ЗаказПоставщику
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&МассивЗаказов)) КАК ЗаказыПоставщикамОстатки
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыАктуальностиЗаказовПоставщикам КАК ДатыАктуальностиРасчетов
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = ДатыАктуальностиРасчетов.ОбъектРасчетов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыПоступленияЗаказовПоставщикам КАК ДатыПоступленияЗаказовПоставщикам
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = ДатыПоступленияЗаказовПоставщикам.ЗаказПоставщику
		|ГДЕ
		|	ДокументЗаказПоставщику.Ссылка В (&МассивЗаказов)
		|
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Осуществляет инициализацию структуры состояния выполнения документа
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИницициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСПоставщиками", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицуЗаказано", 2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление", 3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление", 4);
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиПоступления", Истина);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыПоступления", ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам"));
	
	Возврат СтруктураСостояние
	
КонецФункции

Функция МетаданныеДокумента() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата                             КАК Период,
	|	ЗаказПоставщику.Валюта                           КАК Валюта,
	|	ЗаказПоставщику.Соглашение.Валюта                КАК ВалютаСоглашения,
	|	ЗаказПоставщику.ЦенаВключаетНДС                  КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.Соглашение.ЦенаВключаетНДС       КАК ЦенаВключаетНДССоглашения,
	|	ЗаказПоставщику.Статус                           КАК Статус,
	|	ЗаказПоставщику.Партнер                          КАК Партнер,
	|	ЗаказПоставщику.Контрагент                       КАК Контрагент,
	|	ЗаказПоставщику.Организация                      КАК Организация,
	|	ЗаказПоставщику.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
	|	ЗаказПоставщику.Соглашение                       КАК Соглашение,
	|	ЗаказПоставщику.РегистрироватьЦеныПоставщика     КАК РегистрироватьЦеныПоставщика, 
	|	ЗаказПоставщику.Соглашение.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ЗаказПоставщику.Договор                          КАК Договор,
	|	ЗаказПоставщику.ВернутьМногооборотнуюТару        КАК ВернутьМногооборотнуюТару,
	|	ЗаказПоставщику.ТребуетсяЗалогЗаТару             КАК ТребуетсяЗалогЗаТару,
	|	
	|	ВЫБОР КОГДА ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоНакладным,
	|	ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ЗаказПоставщику.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре
	|
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                       Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                       Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Статус",                       Реквизиты.Статус);
	Запрос.УстановитьПараметр("ЗаказПоставщику",              ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",              Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",        Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",    РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("РегистрироватьЦеныПоставщика", Реквизиты.РегистрироватьЦеныПоставщика);
	Запрос.УстановитьПараметр("Валюта",                       Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ВалютаСоглашения",             Реквизиты.ВалютаСоглашения);
	Запрос.УстановитьПараметр("Соглашение",                   Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("Договор",                      Реквизиты.Договор);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",           Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным",           Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("ЦенаВключаетНДССоглашения",    Реквизиты.ЦенаВключаетНДССоглашения);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару",    Реквизиты.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару",         Реквизиты.ТребуетсяЗалогЗаТару);
	Запрос.УстановитьПараметр("Партнер",                      Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре",    Реквизиты.ГрафикИсполненияВДоговоре);

	Если Справочники.СоглашенияСПоставщиками.СоглашениеИспользуетсяПриПриемке(Реквизиты.ВариантПриемкиТоваров)
		И ЕстьОрдерныеСкладыВТЧТовары(ДокументСсылка) Тогда

		// Документ нужен если есть хотя бы 1 ордерный склад.
		Запрос.УстановитьПараметр("Распоряжение",        Справочники.СоглашенияСПоставщиками.ПолучитьСоздатьДокументРегистрации(Реквизиты.Соглашение));
		Запрос.УстановитьПараметр("ДокументПоступления", Реквизиты.Соглашение);

	Иначе

		Запрос.УстановитьПараметр("Распоряжение",        ДокументСсылка);
		Запрос.УстановитьПараметр("ДокументПоступления", ДокументСсылка);

	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                                                 КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			ТаблицаТовары.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК Склад,
	|	ВЫБОР КОГДА  (НЕ ТаблицаТовары.Отменено)
	|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)) ТОГДА
	|			ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                             КАК КОформлению,
	|	ТаблицаТовары.Количество                                          КАК Заказано,
	|	НЕОПРЕДЕЛЕНО                                                      КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                                 КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			ТаблицаТовары.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК Склад,
	|	0                                                                 КАК КОформлению,
	|	-ТаблицаТовары.Количество                                         КАК Заказано,
	|	ТаблицаТовары.ПричинаОтмены                                       КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.НомерСтроки                     КАК НомерСтроки,
	|	КонецПериода(ЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК Период,
	|	КонецПериода(ЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК ДатаПлатежа,
	|	&Период                                            КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ЭтапыГрафикаОплаты.Ссылка
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	&Валюта                                            КАК Валюта,
	|	ЭтапыГрафикаОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
	|	0                                                  КАК Сумма,
	|	
	|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
	|		ЭтапыГрафикаОплаты.СуммаПлатежа + ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару
	|	ИНАЧЕ
	|		ЭтапыГрафикаОплаты.СуммаПлатежа
	|	КОНЕЦ КАК КОплате,
	|	
	|	0                                                  КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) 
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт) 
	|	И ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
	|		ЭтапыГрафикаОплаты.СуммаПлатежа + ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару
	|	ИНАЧЕ
	|		ЭтапыГрафикаОплаты.СуммаПлатежа
	|	КОНЕЦ > 0
	|	И НЕ &РасчетыПоНакладным
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)                КАК НомерСтроки,
	|	КонецПериода(ТаблицаТовары.ДатаПоступления, ДЕНЬ)  КАК Период,
	|	Неопределено                                       КАК ДатаПлатежа,
	|	Неопределено                                       КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	&Валюта                                            КАК Валюта,
	|	Неопределено                                       КАК ФормаОплаты,
	|	0                                                  КАК Сумма,
	|	0                                                  КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                     КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И Не ТаблицаТовары.Отменено
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|		)
	|	И НЕ &РасчетыПоНакладным
	|	И НЕ &ГрафикИсполненияВДоговоре
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ &ТребуетсяЗалогЗаТару
	|		ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|СГРУППИРОВАТЬ ПО
	|	КонецПериода(ТаблицаТовары.ДатаПоступления, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки     КАК НомерСтроки,
	|	ТаблицаТовары.ДатаПоступления КАК Период,
	|	&Распоряжение                 КАК Распоряжение,
	|	ТаблицаТовары.Склад           КАК Склад,
	|	ТаблицаТовары.Номенклатура    КАК Номенклатура,
	|	ТаблицаТовары.Назначение      КАК Назначение,
	|	ТаблицаТовары.Характеристика  КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                     КАК ПланируемоеПоступление,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                     КАК ПланируемоеПоступлениеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&ДокументПоступления                   КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КПоступлению,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|						ТОГДА ТаблицаТовары.Назначение
	|				КОНЕЦ
	|	КОНЕЦ				       КАК Назначение
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ТаблицаТовары.ДатаПоступления >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаКурсыВалют";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаТовары";
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.Номенклатура           КАК Номенклатура,
	|	Товары.Характеристика         КАК Характеристика,
	|	Товары.ВидЦеныПоставщика      КАК ВидЦеныПоставщика,
	|	Товары.Упаковка               КАК Упаковка,
	|	Товары.СтавкаНДС              КАК СтавкаНДС,
	|	Товары.Цена                   КАК Цена
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|ПО
	|	КурсыВалюты.Валюта = &Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалютыСоглашения
	|ПО
	|	КурсыВалютыСоглашения.Валюта = &ВалютаСоглашения
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &РегистрироватьЦеныПоставщика
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ТоварыСРазличнымиУпаковкамиЦенами";
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	Товары.Характеристика                   КАК Характеристика,
	|	Товары.ВидЦеныПоставщика                КАК ВидЦеныПоставщика,
	|	СРЕДНЕЕ(
	|		Товары.Цена / ВЫБОР
	|				КОГДА
	|					Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА
	|					&ТекстЗапросаКоэффициентУпаковки
	|				ИНАЧЕ
	|					1
	|			КОНЕЦ
	|	) КАК ЦенаЗаБазовуюЕдиницу,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка)  КАК КоличествоРазличныхУпаковок
	|ПОМЕСТИТЬ
	|	ТоварыСРазличнымиУпаковкамиЦенами
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦеныПоставщика
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЦеныНоменклатурыПоставщиков";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ТоварыСРазличнымиУпаковкамиЦенами", ТекстыЗапроса) Тогда
		ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(Товары.НоменклатураПоставщика) КАК НоменклатураПоставщика,
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	Товары.Характеристика                   КАК Характеристика,
	|	Товары.ВидЦеныПоставщика                КАК ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта         КАК Валюта,
	|	&Период                                 КАК Период,
	|	&Партнер                                КАК Партнер,
	|	МИНИМУМ(ВЫБОР
	|				КОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|				ТОГДА
	|					ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ИНАЧЕ
	|					Товары.Упаковка
	|				КОНЕЦ
	|			) КАК Упаковка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(ВЫБОР
	|				КОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|				ТОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.ЦенаЗаБазовуюЕдиницу
	|				ИНАЧЕ
	|					Товары.Цена
	|				КОНЕЦ
	|				* ВЫБОР
	|					КОГДА
	|						&ЦенаВключаетНДС И НЕ Товары.ВидЦеныПоставщика.ЦенаВключаетНДС
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|							ТОГДА
	|								1
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|							ТОГДА
	|								100/120
    |							КОГДА
    |								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
    |							ТОГДА
    |								100/114
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|							ТОГДА
	|								100/107
	|						КОНЕЦ
	|					КОГДА
	|						НЕ &ЦенаВключаетНДС И Товары.ВидЦеныПоставщика.ЦенаВключаетНДС
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|							ТОГДА
	|								1
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|							ТОГДА
	|								1.20
    |							КОГДА
    |								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС14)
    |							ТОГДА
    |								1.14
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7)
	|							ТОГДА
	|								1.07
	|						КОНЕЦ
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ
	|			* ВЫБОР
	|				КОГДА
	|					&Валюта <> Товары.ВидЦеныПоставщика.Валюта
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|							/ (КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				ИНАЧЕ 
	|					1
	|			КОНЕЦ) КАК Число(15,2)) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТоварыСРазличнымиУпаковкамиЦенами КАК ТоварыСРазличнымиУпаковкамиЦенами
	|ПО
	|	Товары.Номенклатура = ТоварыСРазличнымиУпаковкамиЦенами.Номенклатура
	|	И Товары.Характеристика = ТоварыСРазличнымиУпаковкамиЦенами.Характеристика
	|	И Товары.ВидЦеныПоставщика = ТоварыСРазличнымиУпаковкамиЦенами.ВидЦеныПоставщика
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|ПО
	|	КурсыВалюты.Валюта = &Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
	|ПО
	|	КурсыВалютыЦены.Валюта = Товары.ВидЦеныПоставщика.Валюта
	|ГДЕ
	|	Не Товары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	-ТаблицаТовары.Количество              КАК КЗаказу
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказовРаботами";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТовары.Подразделение            КАК Подразделение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	ТаблицаТовары.Количество               КАК КОбеспечению
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если Пользователи.РолиДоступны("ДобавлениеИзменениеЗаказовПоставщикам") Тогда
		
		// Заказ поставщику
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказПоставщику";
		КомандаПечати.Представление = НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ЗаказПоставщику");
		
	КонецЕсли;

	Если Пользователи.РолиДоступны("ДобавлениеИзменениеЗаказовПоставщикам")
		 И ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
		 
		 // Заказ поставщику по данным поставщика
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказПоставщику";
		КомандаПечати.Представление = НСтр("ru='Заказ поставщику по данным поставщика';uk='Замовлення постачальнику за даними постачальника'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ЗаказПоставщикуПоДаннымПоставщика");
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаТоварыУслуги(МассивОбъектов, ПараметрыПечати, ПараметрыВывода) Экспорт		
	
	Запрос = Новый Запрос();
	ТекстЗапроса = " 
	|ВЫБРАТЬ 
	|   ИСТИНА КАК УчитыватьНДС,
	|   Товары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаУчитыватьНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов) И Товары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|СГРУППИРОВАТЬ ПО Товары.Ссылка 
	|;
	|ВЫБРАТЬ
	|	Документы.Ссылка										КАК Ссылка,
	|	Документы.Номер											КАК Номер,
	|	Документы.Дата											КАК Дата,
	|	Документы.Организация									КАК Организация,
	|	Документы.Организация									КАК Заказчик,
	|
	|   ЕСТЬNULL(ТаблицаУчитыватьНДС.УчитыватьНДС, Ложь) КАК УчитыватьНДС,
	|	Документы.ЦенаВключаетНДС								КАК ЦенаВключаетНДС,
	|
	|	Документы.Организация.Префикс							КАК Префикс,
	|	Документы.Контрагент									КАК Контрагент,
	|	Документы.Контрагент									КАК Исполнитель,
	|	Документы.БанковскийСчет								КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента			КАК БанковскийСчетТекстКорреспондента,
	|	Документы.Валюта										КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо						КАК Менеджер,
	|	Документы.ДополнительнаяИнформация						КАК ДополнительнаяИнформация,
	|
	|	ВЫБОР Документы.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада) ТОГДА
	|			Документы.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада) ТОГДА
	|			Документы.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи) ТОГДА
	|			Документы.АдресДоставкиПеревозчика
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ													КАК АдресДоставки,
	|
	|	НЕОПРЕДЕЛЕНО											КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО											КАК Грузополучатель,
	// Параметры для выбора областей макета отчета
	|	ЛОЖЬ													КАК ПоказыватьНДСВСтроках,
	|	ИСТИНА													КАК ИспользоватьАвтоСкидки,
	|	&Тип													КАК Тип,
	|	&ПредставлениеДокумента									КАК ПредставлениеДокумента,
	|	&ПредставлениеВОшибке									КАК ПредставлениеВОшибке
	|
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаУчитыватьНДС КАК ТаблицаУчитыватьНДС
	|		ПО Документы.Ссылка = ТаблицаУчитыватьНДС.Ссылка
	|
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ВариантОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПроцентПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК СуммаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.НоменклатураПоставщика.Наименование				КАК НаименованиеНоменклатурыИсполнителя,
	|	Товары.НоменклатураПоставщика.Код						КАК КодИсполнителя,
	|	Товары.НоменклатураПоставщика.Артикул					КАК АртикулИсполнителя,
	|	Товары.ВидЦеныПоставщика								КАК ВидЦеныИсполнителя,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаПоступления									КАК ДатаПоступления,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	Товары.Цена												КАК Цена,
	|	Товары.СуммаРучнойСкидки								КАК СуммаСкидки,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки					КАК СуммаБезСкидки,
	|	Товары.Сумма											КАК Сумма,
	|	Товары.СтавкаНДС										КАК СтавкаНДС,
	|	Товары.СуммаНДС											КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ВЫБОР КОГДА Товары.Ссылка.ВернутьМногооборотнуюТару
	|			  И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Отменено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.Текст = ТекстЗапроса;
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("Тип",					ПараметрыПечати["Тип"]);
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;	
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'",КодЯзыкаПечать));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru='заказа поставщику';uk='замовлення постачальнику'",КодЯзыкаПечать));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[2]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[3]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	
КонецПроцедуры

Функция ДоступныеДляШаблоновПечатныеФормы() Экспорт

	МассивДоступныхПечатныхФорм = Новый Массив;
	
	МассивДоступныхПечатныхФорм.Добавить(ШаблоныСообщенийСервер.СтруктураПараметровДоступнойПечатнойФормы(
	                                     "ЗаказПоставщику", НСтр("ru='Заказ поставщику';uk='Замовлення постачальнику'"),
	                                     "Обработка.ПечатьЗаказовНаТоварыУслуги", Новый Структура("Тип", "ЗаказПоставщику")));
	
	Возврат МассивДоступныхПечатныхФорм

КонецФункции

#КонецОбласти

#Область АвтозаполнениеСтатуса

// Осуществляет вычисление максимально возможного статуса заказа поставщику
//
Функция МаксимальныйСтатусЗаказаПоставщику(ПараметрыРасчета, КэшированныеЗначения = Неопределено) Экспорт
	
	МаксимальныйСтатусДокумента = Перечисления.СтатусыЗаказовПоставщикам.ПустаяСсылка();
	
	ЕстьАвансДоПодтверждения				= ЕстьАвансДоПодтверждения(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТолькоЭтапОплатыПредоплатаДоПоступления	= ТолькоЭтапОплатыПредоплатаДоПоступления(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ЕстьПредоплатаДоПоступления				= ЕстьПредоплатаДоПоступления(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТолькоКредитныйЭтапОплаты				= ТолькоКредитныйЭтапОплаты(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТребуетсяКонтрольСтатусаПоОбеспечению	= Ложь;
	ТребуетсяКонтрольСтатусаПоПоступлению   = Ложь;
	
	Если ПараметрыРасчета.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") 
			ИЛИ ПараметрыРасчета.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт") 
			ИЛИ ПараметрыРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
			ИЛИ ПараметрыРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			
		МаксимальныйСтатусДокумента = МаксимальныйСтатусЗаказаПоПоступлению(ПараметрыРасчета);
		
	// Вычислим статус когда расчетов по документу еще нет
	ИначеЕсли Не ПараметрыРасчета.Проведен И ЕстьАвансДоПодтверждения Тогда
			
		МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
		
		ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
		
	ИначеЕсли Не ПараметрыРасчета.Проведен И ЕстьПредоплатаДоПоступления Тогда
			
		МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
		
		ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
		
	ИначеЕсли Не ПараметрыРасчета.Проведен И ТолькоКредитныйЭтапОплаты Тогда
			
		МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
		
		ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
		
	ИначеЕсли ПараметрыРасчета.ВсеСтрокиОтменены Тогда
			
		МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		
		ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
		
	Иначе
		
		МаксимальныйСтатусЗаказаПоРасчетам = МаксимальныйСтатусЗаказаПоРасчетам(ПараметрыРасчета);
		
		Если МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован
			Или МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Согласован Тогда
			
			МаксимальныйСтатусДокумента = МаксимальныйСтатусЗаказаПоРасчетам;
			
			Возврат МаксимальныйСтатусДокумента;
			
		КонецЕсли;
		
		ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяКонтрольСтатусаПоПоступлению Тогда
		МаксимальныйСтатусЗаказаПоПоступлению = МаксимальныйСтатусЗаказаПоПоступлению(ПараметрыРасчета);
		
		// Установим минимальный из полученных статусов
		ВозможныеСтатусы = СтатусыПоПорядку(Перечисления.СтатусыЗаказовПоставщикам.НеСогласован, Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
		
		ИндексМаксСтатусаПоРасчетам = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаказаПоРасчетам);
		ИндексМаксСтатусаПоПоступлению = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаказаПоПоступлению);
		
		МинимальныйИндексСтатуса = Мин(ИндексМаксСтатусаПоРасчетам, ИндексМаксСтатусаПоПоступлению);
		
		МаксимальныйСтатусДокумента = ВозможныеСтатусы.Получить(МинимальныйИндексСтатуса);
		
	КонецЕсли;
	
	Возврат МаксимальныйСтатусДокумента;
	
КонецФункции

Функция ЕстьАвансДоПодтверждения(ЭтапыГрафикаОплаты)
	
	ЕстьАвансДоПодтверждения = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьАвансДоПодтверждения = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьАвансДоПодтверждения;
	
КонецФункции

Функция ТолькоЭтапОплатыПредоплатаДоПоступления(ЭтапыГрафикаОплаты)
	
	ТолькоЭтапОплатыПредоплатаДоОтгрузки = Ложь;
	
	Если ЭтапыГрафикаОплаты.Количество() = 1 Тогда
		
		ТолькоЭтапОплатыПредоплатаДоОтгрузки = ЕстьПредоплатаДоПоступления(ЭтапыГрафикаОплаты);
		
	КонецЕсли;
	
	Возврат ТолькоЭтапОплатыПредоплатаДоОтгрузки;
	
КонецФункции

Функция ЕстьПредоплатаДоПоступления(ЭтапыГрафикаОплаты)
	
	ЕстьПредоплатаДоПоступления = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьПредоплатаДоПоступления = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьПредоплатаДоПоступления;
	
КонецФункции

Функция ТолькоКредитныйЭтапОплаты(ЭтапыГрафикаОплаты)
	
	ТолькоКредитныйЭтапОплаты = Ложь;
	
	ОтборПоКредитномуЭтапу = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления);
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоКредитномуЭтапу);
	
	Если ЭтапыГрафикаОплаты.Количество() = 1 ИЛИ ЭтапыГрафикаОплаты.Количество() = НайденныеСтроки.Количество()Тогда
		
		ТолькоКредитныйЭтапОплаты = ЕстьКредитПослеПоступления(ЭтапыГрафикаОплаты);
		
	КонецЕсли;
	
	Возврат ТолькоКредитныйЭтапОплаты;
	
КонецФункции

Функция СтатусыПоПорядку(НачальныйСтатус, КонечныйСтатус)
	
	СтатусыВПорядкеУбывания = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоСтатусамПоПорядку();
	
	Запрос.УстановитьПараметр("НачальныйСтатус", НачальныйСтатус);
	Запрос.УстановитьПараметр("КонечныйСтатус", КонечныйСтатус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		СтатусыВПорядкеУбывания = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат СтатусыВПорядкеУбывания;
		
КонецФункции

Функция ЕстьКредитПослеПоступления(ЭтапыГрафикаОплаты)
	
	ЕстьКредитПослеПоступления = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьКредитПослеПоступления = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьКредитПослеПоступления;
	
КонецФункции

Функция ТекстЗапросаПоСтатусамПоПорядку()
	
	Текст = "ВЫБРАТЬ
	|	СтатусыЗаказовПоставщикам.Порядок
	|ПОМЕСТИТЬ НачальныйСтатус
	|ИЗ
	|	Перечисление.СтатусыЗаказовПоставщикам КАК СтатусыЗаказовПоставщикам
	|ГДЕ
	|	СтатусыЗаказовПоставщикам.Ссылка = &НачальныйСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыЗаказовПоставщикам.Порядок
	|ПОМЕСТИТЬ КонечныйСтатус
	|ИЗ
	|	Перечисление.СтатусыЗаказовПоставщикам КАК СтатусыЗаказовПоставщикам
	|ГДЕ
	|	СтатусыЗаказовПоставщикам.Ссылка = &КонечныйСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПослеТекущего.Ссылка
	|ИЗ
	|	КонечныйСтатус КАК КонечныйСтатус
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтатусыЗаказовПоставщикам.Ссылка КАК Ссылка
	|		ИЗ
	|			НачальныйСтатус КАК НачальныйСтатус
	|				ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.СтатусыЗаказовПоставщикам КАК СтатусыЗаказовПоставщикам
	|				ПО (СтатусыЗаказовПоставщикам.Порядок >= НачальныйСтатус.Порядок)) КАК СтатусыПослеТекущего
	|		ПО КонечныйСтатус.Порядок >= СтатусыПослеТекущего.Ссылка.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыПослеТекущего.Ссылка.Порядок";
	
	Возврат Текст;
	
КонецФункции

Функция МаксимальныйСтатусЗаказаПоРасчетам(ПараметрыРасчета)
	
	МаксимальныйСтатусЗаказаПоРасчетам = ПараметрыРасчета.Статус;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам();
	Запрос.УстановитьПараметр("Заказ", ПараметрыРасчета.Заказ);
	Запрос.УстановитьПараметр("Проведен", ПараметрыРасчета.Проведен);
	Запрос.УстановитьПараметр("Статус", ПараметрыРасчета.Статус);
	Запрос.УстановитьПараметр("СуммаАвансаДоПодтверждения", ПараметрыРасчета.СуммаАвансаДоПодтверждения);
	Запрос.УстановитьПараметр("СуммаПредоплатыДоПоступления", ПараметрыРасчета.СуммаПредоплатыДоПоступления);
	Запрос.УстановитьПараметр("СуммаДокумента", ПараметрыРасчета.СуммаДокумента);
	Запрос.УстановитьПараметр("ПорядокРасчетов", ПараметрыРасчета.ПорядокРасчетов);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		МаксимальныйСтатусЗаказаПоРасчетам = Выборка.МаксимальныйСтатусЗаказа;
		
	// Все расчеты выполнены или отсутствуют
	Иначе
		Если ПараметрыРасчета.Проведен Тогда
			МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МаксимальныйСтатусЗаказаПоРасчетам;
	
КонецФункции

Функция ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам()
	
	ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ &Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка)
	|
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|
	|		КОГДА &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|				ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
	|
	|		// Сумма аванса не оплачена
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
	|				И &СуммаАвансаДоПодтверждения > 0
	|				И ЕСТЬNULL(СостояниеРасчетов.КОплатеПриход, 0) < &СуммаАвансаДоПодтверждения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|
	|		// Сумма предоплаты до поступления не оплачена
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
	|				И &СуммаПредоплатыДоПоступления >0 
	|				И ЕСТЬNULL(СостояниеРасчетов.КОплатеПриход, 0) < &СуммаПредоплатыДоПоступления + &СуммаАвансаДоПодтверждения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
	|
	|		// Аванс и предоплата до поступления оплачены
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
	|				И (ЕСТЬNULL(СостояниеРасчетов.КОплатеПриход, 0) < (&СуммаПредоплатыДоПоступления + &СуммаАвансаДоПодтверждения))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
	|
	|		// Кредит не оплачен
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
	|				И (&СуммаДокумента - (&СуммаАвансаДоПодтверждения + &СуммаПредоплатыДоПоступления) > 0
	|				И ЕСТЬNULL(СостояниеРасчетов.КОплатеКонечныйОстаток, 0) < 0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
	|
	|		//Все оплачено и отгружено
	|		КОГДА &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка)
	|	КОНЕЦ КАК МаксимальныйСтатусЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.КОплатеПриход КАК КОплатеПриход,
	|		РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток КАК КОплатеКонечныйОстаток,
	|		0 КАК СуммаОстаток,
	|		РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК ЗаказПоставщику
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(, , , , ЗаказПоставщику = &Заказ) КАК РасчетыСПоставщикамиОстатки) КАК СостояниеРасчетов
	|";
	
	Возврат ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам;
	
КонецФункции

Функция МаксимальныйСтатусЗаказаПоПоступлению(ПараметрыРасчета)
	
	МаксимальныйСтатусЗаказаПоПоступлению = ПараметрыРасчета.Статус;
	
	Если МаксимальныйСтатусЗаказаПоПоступлению = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
		Возврат МаксимальныйСтатусЗаказаПоПоступлению;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасчетаМаксимальногоСтатусаПоПоступлению();
	Запрос.УстановитьПараметр("Заказ", ПараметрыРасчета.Заказ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		МаксимальныйСтатусЗаказаПоПоступлению = Выборка.МаксимальныйСтатусЗаказа;
		
	ИначеЕсли НЕ ПараметрыРасчета.Проведен Тогда
		МаксимальныйСтатусЗаказаПоПоступлению = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
	Иначе
		МаксимальныйСтатусЗаказаПоПоступлению = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	КонецЕсли;
	
	Возврат МаксимальныйСтатусЗаказаПоПоступлению;
	
КонецФункции

Функция ТекстЗапросаРасчетаМаксимальногоСтатусаПоПоступлению()
	
	ТекстЗапросаРасчетаМаксимальногоСтатусаПоПоступлению = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтатусызаказовПоставщикам.КПоступлению) КАК МаксимальныйСтатусЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ТаблицаПоступлений.КОформлениюОстаток)  КАК КОформлениюОстаток,
	|		СУММА(ТаблицаПоступлений.КПоступлениюОстаток) КАК КПоступлениюОстаток,
	|		СУММА(ТаблицаПоступлений.ЗаказаноОстаток)     КАК ЗаказаноОстаток,
	|		ТаблицаПоступлений.ЗаказПоставщику КАК ЗаказПоставщику
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаказыПоставщикамОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
	|			0 КАК КПоступлениюОстаток,
	|			ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|			ЗаказыПоставщикамОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
	|		ИЗ
	|			РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			ТоварыКПоступлениюОстатки.КПоступлениюОстаток,
	|			ТоварыКПоступлениюОстатки.ДокументПоступления,
	|			0
	|		ИЗ
	|			РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &Заказ) КАК ТоварыКПоступлениюОстатки) КАК ТаблицаПоступлений
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПоступлений.ЗаказПоставщику) КАК СостояниеПоступлений
	|ГДЕ
	|	ЕСТЬNULL(СостояниеПоступлений.КОформлениюОстаток, 0) > 0 
	|				ИЛИ ЕСТЬNULL(СостояниеПоступлений.КПоступлениюОстаток, 0) > 0 
	|				ИЛИ ЕСТЬNULL(СостояниеПоступлений.ЗаказаноОстаток, 0) > 0
	|";
	
	Возврат ТекстЗапросаРасчетаМаксимальногоСтатусаПоПоступлению;
	
КонецФункции

Функция РассчитатьСтатусДокументаСервер(Объект, КоличествоОбработанных) Экспорт
	
	СтатусДоРасчета = Объект.Статус;
	
	СтатусРасчитан = Ложь;
	
	Если СтатусДоРасчета <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
		ЗаполнитьПередРасчетомМаксимальногоСтатуса(Объект);
		
		ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(Объект, "Товары", "Отменено");
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Заказ", Объект.Ссылка);
		ПараметрыРасчета.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыРасчета.Вставить("Проведен", Объект.Проведен);
		ПараметрыРасчета.Вставить("Статус", Объект.Статус);
		ПараметрыРасчета.Вставить("СуммаАвансаДоПодтверждения", Объект.СуммаАвансаДоПодтверждения);
		ПараметрыРасчета.Вставить("СуммаПредоплатыДоПоступления", Объект.СуммаПредоплатыДоПоступления);
		ПараметрыРасчета.Вставить("СуммаДокумента", Объект.СуммаДокумента);
		ПараметрыРасчета.Вставить("Договор", Объект.Договор);
		ПараметрыРасчета.Вставить("ПорядокРасчетов", ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект));
		ПараметрыРасчета.Вставить("Склад", Объект.Склад);
		ПараметрыРасчета.Вставить("ЖелаемаяДатаПоступления", Объект.ЖелаемаяДатаПоступления);
		ПараметрыРасчета.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить()));
		ПараметрыРасчета.Вставить("ЭтапыГрафикаОплаты", Объект.ЭтапыГрафикаОплаты);
		ПараметрыРасчета.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
		ПараметрыРасчета.Вставить("ПоступлениеОднойДатой", Объект.ПоступлениеОднойДатой);
		ПараметрыРасчета.Вставить("ВсеСтрокиОтменены", ВсеСтрокиОтменены);
		
		Объект.Статус = МаксимальныйСтатусЗаказаПоставщику(ПараметрыРасчета);
		
		Если НЕ СтатусДоРасчета = Объект.Статус Тогда
			СтатусРасчитан = Истина;
			КоличествоОбработанных = КоличествоОбработанных + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРасчитан
	
КонецФункции

Процедура ЗаполнитьПередРасчетомМаксимальногоСтатуса(Объект)
	
	// Заполним необходимые для расчета статуса данные
	
	Если ЗакупкиВызовСервера.ДатаПоступленияПустая(Объект, "Товары") Тогда
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		Иначе
			ДатаПоступления = ТекущаяДата();
		КонецЕсли;

		Если Объект.ПоступлениеОднойДатой Тогда
			ЗаполнитьПустуюДатуПоступленияСервер(Объект, ДатаПоступления, Неопределено);
		Иначе
			ЗаполнитьПустыеДатыПоступленияСервер(Объект, ДатаПоступления);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПустуюДатуПоступленияСервер(Объект, ДатаПоступления, Знач МассивВыделенныхСтрок)

	Если МассивВыделенныхСтрок = Неопределено Тогда

		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;

	КонецЕсли;
	
	Объект.ДатаПоступления = ДатаПоступления;

КонецПроцедуры

Процедура ЗаполнитьПустыеДатыПоступленияСервер(Объект, ДатаПоступления);
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ЕстьОрдерныеСкладыВТЧТовары(ЗаказСсылка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ЗаказСсылка
	|	И Товары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И Товары.ДатаПоступления >= Товары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении");
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("Состояние", Перечисления.СостоянияЗаказовПоставщикам.ПустаяСсылка());
	СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено", Ложь);
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаСпискаДокументов";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПоставщику))
		И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументЗаказПоставщику.Ссылка) КАК ЗаказыПоставщикамВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности >= СостоянияЗаказовПоставщикам.ДатаСобытия ТОГДА
	|			СостоянияЗаказовПоставщикам.Заказ
	|		КОНЕЦ) КАК ЗаказыПоставщикамНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовПоставщикам.ДатаСобытия 
	|				И СостоянияЗаказовПоставщикам.Состояние В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяАвансДоПодтверждения),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПредоплатаДоПоступления),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяОплатаПослеПоступления)) ТОГДА
	|			СостоянияЗаказовПоставщикам.Заказ
	|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченаОплата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовПоставщикам.ДатаСобытия 
	|				И СостоянияЗаказовПоставщикам.Состояние В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяСогласование),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПодтверждение),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКПоступлению),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПоступление)) ТОГДА
	|			СостоянияЗаказовПоставщикам.Заказ
	|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченоИсполнение
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|		ПО (СостоянияЗаказовПоставщикам.Заказ = ДокументЗаказПоставщику.Ссылка)}
	|ГДЕ
	|	(НЕ (СостоянияЗаказовПоставщикам.Заказ ЕСТЬ NULL) ИЛИ НЕ ДокументЗаказПоставщику.Проведен)
	|	И ДокументЗаказПоставщику.Менеджер = &Пользователь
	|	И СостоянияЗаказовПоставщикам.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)
	|	И (НЕ ДокументЗаказПоставщику.ПометкаУдаления)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаказыПоставщикам
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ЗаказыПоставщикам";
	ДелоРодитель.Представление  = НСтр("ru='Заказы поставщикам';uk='Замовлення постачальникам'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
	
	// ЗаказыПоставщикамВсегоВРаботе
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамВсегоВРаботе";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru='Всего заказов в работе';uk='Всього в роботі замовлень'");
	Дело.Количество     = Результат.ЗаказыПоставщикамВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	// ЗаказыПоставщикамНаСегодня
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Сегодня';uk='Сьогодні'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамНаСегодня";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамНаСегодня > 0;
	Дело.Представление  = НСтр("ru='На сегодня';uk='На сьогодні'");
	Дело.Количество     = Результат.ЗаказыПоставщикамНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	// ЗаказыПоставщикамПросроченаОплата
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОжидающиеОплаты");
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Просрочен';uk='Прострочений'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамПросроченаОплата";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамПросроченаОплата > 0;
	Дело.Представление  = НСтр("ru='Просрочена оплата по заказам';uk='Прострочена оплата по замовленнях'");
	Дело.Количество     = Результат.ЗаказыПоставщикамПросроченаОплата;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	// ЗаказыПоставщикамПросроченоИсполнение
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОжидающиеИсполнения");
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Просрочен';uk='Прострочений'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамПросроченоИсполнение";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамПросроченоИсполнение > 0;
	Дело.Представление  = НСтр("ru='Просрочено исполнение заказов';uk='Прострочено виконання замовлень'");
	Дело.Количество     = Результат.ЗаказыПоставщикамПросроченоИсполнение;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	Если Результат.ЗаказыПоставщикамВсегоВРаботе > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Процедура ЗаполнитьВидЦеныПоставщикаВТабличнойЧастиТовары_ДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ЗаказПоставщикуТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО (Соглашения.Ссылка = ЗаказПоставщикуТовары.Ссылка.Соглашение)
	|ГДЕ
	|	ЗаказПоставщикуТовары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Соглашения.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
    |";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
        Параметры, 
        Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")
    );	

КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
// Заполняет "ВидЦеныПоставщика" в табличных частях документа и обновляет движения по регистру сведений ЦеныНоменклатурыПоставщиков
Процедура ЗаполнитьВидЦеныПоставщикаВТабличнойЧастиТовары(Параметры) Экспорт
    
    ПолноеИмяОбъекта = "Документ.ЗаказПоставщику";
    
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяОбъекта, 
        МенеджерВременныхТаблиц
    );
    
    Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
    
	ЗапросПоДокументам = Новый Запрос;
    ЗапросПоДокументам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоДокументам.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
	|	Соглашения.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	ЗаказПоставщикуТовары.Ссылка.Партнер                      КАК Партнер,
	|	ЗаказПоставщикуТовары.Ссылка.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработки КАК ДокументыКОбработке
	|		    ПО ЗаказПоставщикуТовары.Ссылка = ДокументыКОбработке.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО (Соглашения.Ссылка = ЗаказПоставщикуТовары.Ссылка.Соглашение)
	|ГДЕ
    |	ЗаказПоставщикуТовары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|	И Соглашения.ВидЦеныПоставщика <> ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
    |";
    
    ЗапросПоДокументам.Текст = СтрЗаменить(ЗапросПоДокументам.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
    
    Выборка = ЗапросПоДокументам.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка	
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЦеныНоменклатурыПоставщиков.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
            
            // Если объект ранее был удален или обработан другими сеансами, пропускаем его
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
            КонецЕсли;
            
    		Если ЗначениеЗаполнено(Выборка.ВидЦеныПоставщика) Тогда
    			ВидЦеныПоставщика = Выборка.ВидЦеныПоставщика;
    		Иначе
    			ВидЦеныПоставщика = ЗначениеНастроекПовтИсп.ВидЦеныПоставщикаПоУмолчанию(Выборка.Партнер);
            КонецЕсли;
            
    		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
    			Если ЗначениеЗаполнено(СтрокаТЧ.ВидЦеныПоставщика) Тогда
    				Продолжить;
    			КонецЕсли;
    			СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
    		КонецЦикла;
            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
            
			Если Выборка.РегистрироватьЦеныПоставщика И ДокументОбъект.Проведен Тогда
				
				НаборЗаписей = РегистрыСведений.ЦеныНоменклатурыПоставщиков.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Значение = ДокументОбъект.Ссылка;
				НаборЗаписей.Отбор.Регистратор.Использование = Истина;
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Выбран() Тогда
					
					Для Каждого СтрокаТЧ Из НаборЗаписей Цикл
						
						Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидЦеныПоставщика) Тогда
							СтрокаТЧ.ВидЦеныПоставщика = ВидЦеныПоставщика;
						КонецЕсли;
						
						СтрокаТЧ.Соглашение = Неопределено;
						СтрокаТЧ.Партнер    = Выборка.Партнер;
						
					КонецЦикла;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					
				КонецЕсли;
				
            КонецЕсли;
            
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
            ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
										
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяОбъекта
    );
    
КонецПроцедуры

Процедура ЗаполнитьСпособДоставкиПоУмолчаниюЗарегистрироватьКОбработке(Параметры) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Дата,
	|	Т.Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Т
	|ГДЕ
	|	Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результат.Ссылка);
	КонецЦикла;
	

КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
Процедура ЗаполнитьСпособДоставкиПоУмолчанию(Параметры) Экспорт

    ДоставкаТоваров.ЗаполнитьСпособДоставкиПоУмолчанию(Параметры, Метаданные.Документы.ЗаказПоставщику);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли

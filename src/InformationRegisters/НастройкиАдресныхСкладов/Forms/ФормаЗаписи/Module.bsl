
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Запись, ЭтотОбъект);
	
	ЕдиницаИзмеренияВеса   = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	УстановитьУмолчания();
	
	Если Запись.НастройкаФормированияПоРабочимУчасткамПодпитка = "НастройкаФормированияПоРабочимУчасткам" Тогда
		ЗаполнитьОграниченияПоРабочемуУчасткуПодпитка();
	КонецЕсли;
	
	Если Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "НастройкаФормированияПоРабочимУчасткам" Тогда
		ЗаполнитьОграниченияПоРабочемуУчасткуОтбор();
	КонецЕсли;
	
	Если Параметры.Ключ.Пустой() Тогда
		
		ТекстИсключения = НСтр("ru='Создавать настройки можно только из форм склада (помещения) с адресным хранением остатков.';uk='Створювати настройку можна тільки з форм складу (приміщення) з адресним зберіганням залишків.'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ПриОткрытииПерейтиНаВкладку = "";
	Параметры.Свойство("ПриОткрытииПерейтиНаВкладку",ПриОткрытииПерейтиНаВкладку);
	Если ПриОткрытииПерейтиНаВкладку = "НастройкиСозданияПересчетовТоваров" Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.НастройкиСозданияПересчетовТоваров;
	КонецЕсли;
	
	Элементы.РегламентныеЗадания.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВСписке", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Создание регламентных заданий (получение уникального идентификатора)
	УстановитьПривилегированныйРежим(Истина);
	
	// Задание прогноза подпитки
	НаименованиеЗадания = НСтр("ru='Прогноз расхода упаковок (%ПредставлениеСклада%)';uk='Прогноз видатку упаковок (%ПредставлениеСклада%)'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, 
		"%ПредставлениеСклада%", 
		СкладыСервер.ПолучитьПредставлениеСклада(ТекущийОбъект.Склад,
			ТекущийОбъект.Помещение));
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Запись.ИспользоватьПодпитку);
	ПараметрыЗадания.Вставить("Наименование", Лев(НаименованиеЗадания, 128));
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(ТекущийОбъект.Склад);
	ПараметрыРегламентногоЗадания.Добавить(ТекущийОбъект.Помещение);
	
	ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРасчетаПоказателейПрогноза);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.РегламентноеЗаданиеРасчетаПоказателейПрогноза) Тогда
		Задание = Неопределено;
	Иначе
		Задание = РегламентныеЗаданияСервер.Задание(ТекущийОбъект.РегламентноеЗаданиеРасчетаПоказателейПрогноза);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.РасчетПоказателейПрогнозаРасходаУпаковок);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	
	ТекущийОбъект.РегламентноеЗаданиеРасчетаПоказателейПрогноза = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	//Задание на создание заданий на подпитку
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Запись.ИспользоватьПодпитку 
		И Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаПодпитку);
	
	НаименованиеЗадания = НСтр("ru='Создание заданий на подпитку на складе ""%ПредставлениеСклада%""';uk='Створення завдань на підживлення на складі ""%ПредставлениеСклада%""'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, 
		"%ПредставлениеСклада%", 
		СкладыСервер.ПолучитьПредставлениеСклада(ТекущийОбъект.Склад,
			ТекущийОбъект.Помещение));
	ПараметрыЗадания.Вставить("Наименование", НаименованиеЗадания);
	
	СтруктураПараметров = СкладыСервер.СтруктураПараметровСозданияЗаданийНаОтборПодпитку();
	СтруктураПараметров.Склад = ТекущийОбъект.Склад;
	СтруктураПараметров.Помещение = ТекущийОбъект.Помещение;
	СтруктураПараметров.НастройкаФормированияПоРабочимУчасткам = ТекущийОбъект.НастройкаФормированияПоРабочимУчасткамОтбор;
	СтруктураПараметров.ОграничиватьПоВесу = ТекущийОбъект.ОграничиватьПоВесуОтбор;
	СтруктураПараметров.ОграничиватьПоОбъему = ТекущийОбъект.ОграничиватьПоОбъемуОтбор;
	СтруктураПараметров.ОграничениеПоВесу = ТекущийОбъект.ОграничениеПоВесуОтбор;
	СтруктураПараметров.ОграничениеПоОбъему = ТекущийОбъект.ОграничениеПоОбъемуОтбор;
	СтруктураПараметров.РабочийУчасток = ТекущийОбъект.РабочийУчастокОтбор;
	СтруктураПараметров.ПоВсемРаспоряжениям = Истина;
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(СтруктураПараметров);
	ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);
	ПараметрыЗадания.Вставить("Расписание", РасписаниеСозданияЗаданийНаПодпитку);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийнаПодпитку) Тогда
		Задание = Неопределено;
	Иначе
		Задание = РегламентныеЗаданияСервер.Задание(ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийнаПодпитку);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПодпитку);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	
	ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийнаПодпитку = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	//Задание на создание заданий на отбор
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаОтбор);
	
	НаименованиеЗадания = НСтр("ru='Создание заданий на отбор на складе ""%ПредставлениеСклада%""';uk='Створення завдань на відбір на складі ""%ПредставлениеСклада%""'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, 
		"%ПредставлениеСклада%", 
		СкладыСервер.ПолучитьПредставлениеСклада(ТекущийОбъект.Склад,
			ТекущийОбъект.Помещение));
	ПараметрыЗадания.Вставить("Использование", НаименованиеЗадания);
	
	СтруктураПараметров = СкладыСервер.СтруктураПараметровСозданияЗаданийНаОтборПодпитку();
	СтруктураПараметров.Склад = ТекущийОбъект.Склад;
	СтруктураПараметров.Помещение = ТекущийОбъект.Помещение;
	СтруктураПараметров.НастройкаФормированияПоРабочимУчасткам = ТекущийОбъект.НастройкаФормированияПоРабочимУчасткамОтбор;
	СтруктураПараметров.ОграничиватьПоВесу = ТекущийОбъект.ОграничиватьПоВесуОтбор;
	СтруктураПараметров.ОграничиватьПоОбъему = ТекущийОбъект.ОграничиватьПоОбъемуОтбор;
	СтруктураПараметров.ОграничениеПоВесу = ТекущийОбъект.ОграничениеПоВесуОтбор;
	СтруктураПараметров.ОграничениеПоОбъему = ТекущийОбъект.ОграничениеПоОбъемуОтбор;
	СтруктураПараметров.РабочийУчасток = ТекущийОбъект.РабочийУчастокОтбор;
	СтруктураПараметров.ПоВсемРаспоряжениям = Истина;
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(СтруктураПараметров);
	
	ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);
	ПараметрыЗадания.Вставить("Расписание", РасписаниеСозданияЗаданийНаОтбор);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийНаОтбор) Тогда
		Задание = Неопределено;
	Иначе
		Задание = РегламентныеЗаданияСервер.Задание(ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийНаОтбор);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СозданиеЗаданийНаОтбор);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	
	ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийнаОтбор = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	//Задания на создание пересчетов товров
	СтрокиЗаданийКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданий Цикл
				
		Если Не ЗначениеЗаполнено(СтрокаТаблицыРегламентныхЗаданий.Идентификатор) Тогда
			Задание = Неопределено;
		Иначе
			Задание = РегламентныеЗаданияСервер.Задание(СтрокаТаблицыРегламентныхЗаданий.Идентификатор);
		КонецЕсли;
		
		Если СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Удаление" Тогда
			
			Если Задание <> Неопределено Тогда 
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЕсли;
			СтрокиЗаданийКУдалению.Добавить(СтрокаТаблицыРегламентныхЗаданий);
			
		Иначе // "Создание" или "Изменение"
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Наименование", СтрокаТаблицыРегламентныхЗаданий.Наименование);
			ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", СтрокаТаблицыРегламентныхЗаданий.ИнтервалПовтораПриАварийномЗавершении);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", СтрокаТаблицыРегламентныхЗаданий.КоличествоПовторовПриАварийномЗавершении);
			ПараметрыЗадания.Вставить("Расписание", СтрокаТаблицыРегламентныхЗаданий.Расписание);
			ПараметрыРегламентногоЗадания = Новый Массив;
			ПараметрыРегламентногоЗадания.Добавить(СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов);
			ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);
			
			Если Задание = Неопределено Тогда
				ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПересчетТоваров);
				Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
				СтрокаТаблицыРегламентныхЗаданий.Идентификатор = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
			Иначе
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицыРегламентныхЗаданий Из СтрокиЗаданийКУдалению Цикл
		ТаблицаРегламентныхЗаданий.Удалить(СтрокаТаблицыРегламентныхЗаданий);
	КонецЦикла; 
	
	ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров = "";
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданий Цикл
		ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров = 
			ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров 
			+ ?(ЗначениеЗаполнено(ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров),",","") 
			+ Строка(СтрокаТаблицыРегламентныхЗаданий.Идентификатор);
	КонецЦикла;
				
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьУмолчания();
	
	РасписаниеРасчетаПоказателейПрогноза = Новый РасписаниеРегламентногоЗадания;
	РасписаниеСозданияЗаданийНаПодпитку  = Новый РасписаниеРегламентногоЗадания;
	РасписаниеСозданияЗаданийНаОтбор	 = Новый РасписаниеРегламентногоЗадания;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = Запись.РегламентноеЗаданиеРасчетаПоказателейПрогноза;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	Если Задание <> Неопределено Тогда
		РасписаниеРасчетаПоказателейПрогноза = Задание.Расписание;
		Элементы.РасписаниеСтрокой.Заголовок = Строка(РасписаниеРасчетаПоказателейПрогноза);
	КонецЕсли;
	
	ИдентификаторЗадания = Запись.РегламентноеЗаданиеСозданиеЗаданийнаПодпитку;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	Если Задание <> Неопределено Тогда
		РасписаниеСозданияЗаданийНаПодпитку   						   = Задание.Расписание;
		Элементы.РасписаниеСозданияЗаданийНаПодпиткуСтрокой.Заголовок  = Строка(РасписаниеСозданияЗаданийНаПодпитку);
	КонецЕсли;
	
	ИдентификаторЗадания = Запись.РегламентноеЗаданиеСозданиеЗаданийНаОтбор;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	Если Задание <> Неопределено Тогда
		РасписаниеСозданияЗаданийНаОтбор	   						= Задание.Расписание;
		Элементы.РасписаниеСозданияЗаданийНаОтборСтрокой.Заголовок  = Строка(РасписаниеСозданияЗаданийНаОтбор);
	КонецЕсли;
	
	ТаблицаРегламентныхЗаданий.Очистить();	
	
	Если ЗначениеЗаполнено(Запись.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров) Тогда
		МассивИдентификаторов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запись.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров);
		Для Каждого ИдентификаторЗаданияСтрока Из МассивИдентификаторов Цикл
			ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗаданияСтрока);
			Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
			Если Задание <> Неопределено Тогда
				СтрокаТаблицыРегламентныхЗаданий = ТаблицаРегламентныхЗаданий.Добавить();
				СтрокаТаблицыРегламентныхЗаданий.ОтображатьВСписке = Истина;
				СтрокаТаблицыРегламентныхЗаданий.Идентификатор = ИдентификаторЗадания;
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРегламентныхЗаданий, Задание, 
							"Наименование, Расписание, ИнтервалПовтораПриАварийномЗавершении, КоличествоПовторовПриАварийномЗавершении");
												
				ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПересчетовТоваров(
					СтрокаТаблицыРегламентныхЗаданий.Идентификатор,
					СтрокаТаблицыРегламентныхЗаданий.ДатаОкончания, 
					СтрокаТаблицыРегламентныхЗаданий.СостояниеВыполнения,
					Ложь);
					
				Если Задание.Параметры.Количество() > 0 Тогда
					СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов = Задание.Параметры[0];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ СкладыСервер.ИспользоватьРабочиеУчастки(Запись.Склад, Запись.Помещение) Тогда
		Элементы.ГруппаНастройкиПоРабочимУчасткамЛево.Доступность 			= Ложь;
		Элементы.РабочийУчасток.Доступность 								= Ложь;
		
		Элементы.ГруппаНастройкиПодпиткиПоРабочимУчасткамЛево.Доступность 	= Ложь;
		Элементы.РабочийУчастокПодпитка.Доступность 					  	= Ложь;		  
	КонецЕсли;
	
	Элементы.РегламентныеЗадания.Доступность = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиАдресныхСкладов);
	
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьПодпиткуПриИзменении(Элемент)
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеСозданиеЗаданийНаПодпиткуПриИзменении(Элемент)
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеСозданиеЗаданийНаОтборПриИзменении(Элемент)
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормированияПоРабочимУчасткамПриИзменении(Элемент)
	Если Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "ПоОдномуРабочемуУчастку"
		И ЗначениеЗаполнено(Запись.РабочийУчастокОтбор) Тогда
		РабочийУчастокОтборПриИзмененииСервер();
	Иначе
		УстановитьДоступность(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормированияПодпиткиПоРабочимУчасткамПриИзменении(Элемент)
	Если Запись.НастройкаФормированияПоРабочимУчасткамПодпитка = "ПоОдномуРабочемуУчастку"
		И ЗначениеЗаполнено(Запись.РабочийУчастокПодпитка) Тогда
		РабочийУчастокПодпиткаПриИзмененииСервер();
	Иначе
		УстановитьДоступность(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьПоОбъемуПриИзменении(Элемент)
	Элементы.ГруппаОграничениеПоОбъему.Доступность = Запись.ОграничиватьПоОбъемуОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьПоВесуПриИзменении(Элемент)
	Элементы.ГруппаОграничениеПоВесу.Доступность = Запись.ОграничиватьПоВесуОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьПоВесуПодпиткаПриИзменении(Элемент)
	Элементы.ГруппаОграничениеПоВесуПодпитка.Доступность = Запись.ОграничиватьПоВесуПодпитка;
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьПоОбъемуПодпиткаПриИзменении(Элемент)
	Элементы.ГруппаОграничениеПоОбъемуПодпитка.Доступность = Запись.ОграничиватьПоОбъемуПодпитка;
КонецПроцедуры

&НаКлиенте
Процедура РабочийУчастокПриИзменении(Элемент)
	РабочийУчастокОтборПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура РабочийУчастокПодпиткаПриИзменении(Элемент)
	РабочийУчастокПодпиткаПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписаниеРасчетаПоказателейПрогноза(Команда)
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРасчетаПоказателейПрогноза);
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеРасчетаПоказателейПрогнозаЗавершение", ЭтотОбъект, Новый Структура("ДиалогРасписания", ДиалогРасписания)));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРасчетаПоказателейПрогнозаЗавершение(Расписание, ДополнительныеПараметры) Экспорт
    
    ДиалогРасписания = ДополнительныеПараметры.ДиалогРасписания;
    
    
    Если Расписание <> Неопределено Тогда
        
        Если РасписаниеРасчетаПоказателейПрогноза <> ДиалогРасписания.Расписание Тогда
            Модифицированность = Истина;
            РасписаниеРасчетаПоказателейПрогноза = ДиалогРасписания.Расписание;
            Элементы.РасписаниеСтрокой.Заголовок = Строка(РасписаниеРасчетаПоказателейПрогноза);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеСозданияЗаданийНаПодпитку(Команда)
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеСозданияЗаданийНаПодпитку);
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеСозданияЗаданийНаПодпиткуЗавершение", ЭтотОбъект, Новый Структура("ДиалогРасписания", ДиалогРасписания)));
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеСозданияЗаданийНаПодпиткуЗавершение(Расписание, ДополнительныеПараметры) Экспорт
    
    ДиалогРасписания = ДополнительныеПараметры.ДиалогРасписания;
    
    
    Если Расписание <> Неопределено Тогда
        
        Если РасписаниеСозданияЗаданийНаПодпитку <> ДиалогРасписания.Расписание Тогда
            Модифицированность = Истина;
            РасписаниеСозданияЗаданийНаПодпитку   						   = ДиалогРасписания.Расписание;
            Элементы.РасписаниеСозданияЗаданийНаПодпиткуСтрокой.Заголовок  = Строка(РасписаниеСозданияЗаданийНаПодпитку);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеСозданияЗаданийНаОтбор(Команда)
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеСозданияЗаданийНаОтбор);
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеСозданияЗаданийНаОтборЗавершение", ЭтотОбъект, Новый Структура("ДиалогРасписания", ДиалогРасписания)));
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеСозданияЗаданийНаОтборЗавершение(Расписание, ДополнительныеПараметры) Экспорт
    
    ДиалогРасписания = ДополнительныеПараметры.ДиалогРасписания;
    
    
    Если Расписание <> Неопределено Тогда
        
        Если РасписаниеСозданияЗаданийНаОтбор <> ДиалогРасписания.Расписание Тогда
            Модифицированность = Истина;
            РасписаниеСозданияЗаданийНаОтбор   						  	= ДиалогРасписания.Расписание;
            Элементы.РасписаниеСозданияЗаданийНаОтборСтрокой.Заголовок  = Строка(РасписаниеСозданияЗаданийНаОтбор);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегламентныеЗадания

&НаКлиенте
Процедура РегламентныеЗаданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПересчетов(?(Копирование, "Скопировать", "Добавить"));
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПересчетов("Редактировать");
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
		
	Модифицированность = Истина;
	
	ТекущаяСтрока = ТаблицаРегламентныхЗаданий.НайтиПоИдентификатору(Элементы.РегламентныеЗадания.ТекущаяСтрока);
	ТекущаяСтрока.СостояниеМодификации = "Удаление";
	ТекущаяСтрока.ОтображатьВСписке = Ложь;
	Элементы.РегламентныеЗадания.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВСписке", Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещений

&НаКлиенте
Процедура РедактированияРегламентногоЗаданияНаСозданиеПересчетовЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	Действие = "";
	Результат.Свойство("Действие",Действие);
	Если Действие = "Отмена" Тогда
		// действия при закрытии формы по кнопке "Отмена"
		Возврат;
	ИначеЕсли Действие = "ЗакрытьИСохранитьРегламентноеЗадание" Тогда
		// действия при закрытии формы по кнопке "Закрыть и сохранить регламентное задание"
		Модифицированность = Истина;
		
		ДействиеНадРегламентнымЗаданием = "";
		Результат.Свойство("ДействиеНадРегламентнымЗаданием",ДействиеНадРегламентнымЗаданием);
		Если ДействиеНадРегламентнымЗаданием = "Скопировать" ИЛИ ДействиеНадРегламентнымЗаданием = "Добавить" Тогда
			СтрокаТаблицыРегламентныхЗаданий = ТаблицаРегламентныхЗаданий.Добавить();
			СтрокаТаблицыРегламентныхЗаданий.ОтображатьВСписке = Истина;
			СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Создание";
			СтрокаТаблицыРегламентныхЗаданий.Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ИначеЕсли ДействиеНадРегламентнымЗаданием = "Редактировать" Тогда
			СтрокаТаблицыРегламентныхЗаданий = Элементы.РегламентныеЗадания.ТекущиеДанные;
			СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = ?(СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Создание","Создание","Изменение");
		КонецЕсли;
			
		Результат.Свойство("РасписаниеРегламентногоЗадания",				СтрокаТаблицыРегламентныхЗаданий.Расписание);
		Результат.Свойство("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	СтрокаТаблицыРегламентныхЗаданий.ИнтервалПовтораПриАварийномЗавершении);
		Результат.Свойство("ПриОшибкахПовторятьРегламентноеЗадание",		СтрокаТаблицыРегламентныхЗаданий.КоличествоПовторовПриАварийномЗавершении);
		Результат.Свойство("НаименованиеРегламентногоЗадания",				СтрокаТаблицыРегламентныхЗаданий.Наименование);
		Результат.Свойство("НастройкиСозданияПересчетов",					СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов);
		СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов.Вставить("Склад", Запись.Склад);
		СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов.Вставить("Помещение", Запись.Помещение);
	КонецЕсли;
	
	ОбновитьИнформациюОСостоянииРегламентныхЗаданийНаСозданиеПересчетовТоваровСервер();
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(Форма)
	Форма.Элементы.КоличествоДнейАнализа.Доступность              = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.МинимальнаяВероятностьОтгрузки.Доступность     = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаX.Доступность = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаY.Доступность = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаZ.Доступность = Форма.Запись.ИспользоватьПодпитку;
	
	Форма.Элементы.НастроитьРасписаниеРасчетаПоказателейПрогноза.Доступность        = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.НастроитьРасписаниеСозданияЗаданийНаПодпитку.Доступность 		= Форма.Запись.ИспользоватьПодпитку
	И Форма.Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаПодпитку;
	Форма.Элементы.ИспользоватьАвтоматическоеСозданиеЗаданийНаПодпитку.Доступность	= Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.ДопНастройкиСозданияЗаданийНаПодпитку.Доступность				= Форма.Запись.ИспользоватьПодпитку
	И Форма.Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаПодпитку;
	Форма.Элементы.НастроитьРасписаниеСозданияЗаданийНаОтбор.Доступность    		= Форма.Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаОтбор;
	Форма.Элементы.ДопНастройкиСозданияЗаданийНаОтбор.Доступность					= Форма.Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаОтбор;
	
	Форма.Элементы.РабочийУчасток.Доступность 				= Форма.Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "ПоОдномуРабочемуУчастку";
	Форма.Элементы.ГруппаОграничениеПоОбъему.Доступность 	= Форма.Запись.ОграничиватьПоОбъемуОтбор;
	Форма.Элементы.ГруппаОграничениеПоВесу.Доступность   	= Форма.Запись.ОграничиватьПоВесуОтбор;
	
	Если Форма.Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "СРазбиениемПоРабочимУчасткам" Тогда
		Форма.Элементы.ГруппаНастройкиПравоОграничения.ТекущаяСтраница = Форма.Элементы.СтраницаОграничиватьНадпись;
		Форма.Элементы.ГруппаНастройкиЛевоОграничения.ТекущаяСтраница  = Форма.Элементы.СтраницаОрганичиватьПустая;
	Иначе
		Форма.Элементы.ГруппаНастройкиПравоОграничения.ТекущаяСтраница = Форма.Элементы.СтраницаОграничиватьФлаги;
		Форма.Элементы.ГруппаНастройкиЛевоОграничения.ТекущаяСтраница  = Форма.Элементы.СтраницаОграничиватьПоля;
	КонецЕсли;
	
	Форма.Элементы.РабочийУчастокПодпитка.Доступность = Форма.Запись.НастройкаФормированияПоРабочимУчасткамПодпитка = "ПоОдномуРабочемуУчастку";
	Форма.Элементы.ГруппаОграничениеПоОбъемуПодпитка.Доступность 	= Форма.Запись.ОграничиватьПоОбъемуПодпитка;
	Форма.Элементы.ГруппаОграничениеПоВесуПодпитка.Доступность   	= Форма.Запись.ОграничиватьПоВесуПодпитка;
	
	Если Форма.Запись.НастройкаФормированияПоРабочимУчасткамПодпитка = "СРазбиениемПоРабочимУчасткам" Тогда
		Форма.Элементы.ГруппаНастройкиПравоОграниченияПодпитка.ТекущаяСтраница = Форма.Элементы.СтраницаОграничиватьНадписьПодпитка;
		Форма.Элементы.ГруппаНастройкиЛевоОграниченияПодпитка.ТекущаяСтраница  = Форма.Элементы.СтраницаОрганичиватьПустаяПодпитка;
	Иначе
		Форма.Элементы.ГруппаНастройкиПравоОграниченияПодпитка.ТекущаяСтраница = Форма.Элементы.СтраницаОграничиватьФлагиПодпитка;
		Форма.Элементы.ГруппаНастройкиЛевоОграниченияПодпитка.ТекущаяСтраница  = Форма.Элементы.СтраницаОграничиватьПоляПодпитка;
	КонецЕсли;
	
	Форма.Элементы.РегламентныеЗадания.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВСписке", Истина);
	 
КонецПроцедуры

&НаСервере
Процедура УстановитьУмолчания()
	
	Если Не ЗначениеЗаполнено(Запись.РабочийУчастокПодпитка) Тогда
		Запись.РабочийУчастокПодпитка = Справочники.РабочиеУчастки.РабочийУчастокПоУмолчанию(Запись.Склад,Запись.Помещение);
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Запись.РабочийУчастокОтбор) Тогда
		Запись.РабочийУчастокОтбор = Справочники.РабочиеУчастки.РабочийУчастокПоУмолчанию(Запись.Склад,Запись.Помещение);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.НастройкаФормированияПоРабочимУчасткамПодпитка)
		Или Не СкладыСервер.ИспользоватьРабочиеУчастки(Запись.Склад, Запись.Помещение) Тогда
		Запись.НастройкаФормированияПоРабочимУчасткамПодпитка = "БезРазбиенияПоРабочимУчасткам";
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Запись.НастройкаФормированияПоРабочимУчасткамОтбор)
		Или Не СкладыСервер.ИспользоватьРабочиеУчастки(Запись.Склад, Запись.Помещение) Тогда
		Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "БезРазбиенияПоРабочимУчасткам";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РабочийУчастокОтборПриИзмененииСервер()
	ЗаполнитьОграниченияПоРабочемуУчасткуОтбор();
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияПоРабочемуУчасткуОтбор()
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.РабочийУчастокОтбор,
	"ОграничиватьПоВесу,ОграничениеПоВесу,ОграничиватьПоОбъему,ОграничениеПоОбъему");
	
	Запись.ОграничиватьПоВесуОтбор = ЗначенияРеквизитов.ОграничиватьПоВесу;
	Запись.ОграничениеПоВесуОтбор = ЗначенияРеквизитов.ОграничениеПоВесу;
	Запись.ОграничиватьПоОбъемуОтбор = ЗначенияРеквизитов.ОграничиватьПоОбъему;
	Запись.ОграничениеПоОбъемуОтбор = ЗначенияРеквизитов.ОграничениеПоОбъему; 
КонецПроцедуры

&НаСервере
Процедура РабочийУчастокПодпиткаПриИзмененииСервер()
	ЗаполнитьОграниченияПоРабочемуУчасткуПодпитка();
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияПоРабочемуУчасткуПодпитка()
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.РабочийУчастокПодпитка,
	"ОграничиватьПоВесу,ОграничениеПоВесу,ОграничиватьПоОбъему,ОграничениеПоОбъему");
	
	Запись.ОграничиватьПоВесуПодпитка = ЗначенияРеквизитов.ОграничиватьПоВесу;
	Запись.ОграничениеПоВесуПодпитка = ЗначенияРеквизитов.ОграничениеПоВесу;
	Запись.ОграничиватьПоОбъемуПодпитка = ЗначенияРеквизитов.ОграничиватьПоОбъему;
	Запись.ОграничениеПоОбъемуПодпитка = ЗначенияРеквизитов.ОграничениеПоОбъему;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПересчетов(Действие)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад", Запись.Склад);
	ПараметрыФормы.Вставить("Помещение", Запись.Помещение);
	ПараметрыФормы.Вставить("ДействиеНадРегламентнымЗаданием",Действие);
	ТекущиеДанные = Элементы.РегламентныеЗадания.ТекущиеДанные;
	Если Действие = "Редактировать" ИЛИ Действие = "Скопировать" Тогда
		ПараметрыФормы.Вставить("НаименованиеРегламентногоЗадания", 			ТекущиеДанные.Наименование);
		ПараметрыФормы.Вставить("РасписаниеРегламентногоЗадания",				ТекущиеДанные.Расписание);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьРегламентноеЗадание", 		ТекущиеДанные.КоличествоПовторовПриАварийномЗавершении);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	ТекущиеДанные.ИнтервалПовтораПриАварийномЗавершении);
		Если ТекущиеДанные.НастройкиСозданияПересчетов = Неопределено Тогда
			ПараметрыФормы.Вставить("НастройкиСозданияПересчетов", 
				Новый Структура("ПересчетПоНаполненности,ПересчетПоОсобымУсловиям,
					|ПересчетСомнительныхЯчеек,ПересчетПоНастройкамПериодичности,ПересчетПоЯчейкамСОтрицательнымиОстатками,НастройкиОтбора,
					|РазбиватьПоРабочимУчасткам,РазбиватьПоКоличествуЯчеек,КоличествоЯчеекВЗадании"));
		Иначе
			ПараметрыФормы.Вставить("НастройкиСозданияПересчетов", ТекущиеДанные.НастройкиСозданияПересчетов);
		КонецЕсли;
	Иначе // "Добавить"
		НаименованиеРегламентногоЗадания = НСтр("ru='Создание заданий на пересчет товаров на складе ""%ПредставлениеСклада%""';uk='Створення завдань на перерахунок товарів на складі ""%ПредставлениеСклада%""'");
		НаименованиеРегламентногоЗадания = СтрЗаменить(НаименованиеРегламентногоЗадания, "%ПредставлениеСклада%" , ПолучитьПредставлениеСклада(Запись.Склад,
																														Запись.Помещение));
		ПараметрыФормы.Вставить("НаименованиеРегламентногоЗадания", 			НаименованиеРегламентногоЗадания);
		ПараметрыФормы.Вставить("РасписаниеРегламентногоЗадания",				Новый РасписаниеРегламентногоЗадания);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьРегламентноеЗадание", 		0);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	0);
		ПараметрыФормы.Вставить("НастройкиСозданияПересчетов", 					
			Новый Структура("ПересчетПоНаполненности,ПересчетПоОсобымУсловиям,
				|ПересчетСомнительныхЯчеек,ПересчетПоНастройкамПериодичности,ПересчетПоЯчейкамСОтрицательнымиОстатками,НастройкиОтбора,
				|РазбиватьПоРабочимУчасткам,РазбиватьПоКоличествуЯчеек,КоличествоЯчеекВЗадании"));
	КонецЕсли;
	
	ОповещениеОкончаниеРедактированияРегламентногоЗаданияСозданияПересчетов = 
		Новый ОписаниеОповещения("РедактированияРегламентногоЗаданияНаСозданиеПересчетовЗавершение", ЭтаФорма);
		
	ОткрытьФорму("Документ.ПересчетТоваров.Форма.ФормаНастроекСозданияЗаданийНаПересчет", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОповещениеОкончаниеРедактированияРегламентногоЗаданияСозданияПересчетов, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСклада(Склад, Помещение = "")
	Возврат СкладыСервер.ПолучитьПредставлениеСклада(Склад, Помещение);
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюОСостоянииРегламентныхЗаданийНаСозданиеПересчетовТоваровСервер()
	
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданий Цикл
		Если СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Изменение" 
			ИЛИ СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "" Тогда
			ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПересчетовТоваров(СтрокаТаблицыРегламентныхЗаданий.Идентификатор,СтрокаТаблицыРегламентныхЗаданий.ДатаОкончания, СтрокаТаблицыРегламентныхЗаданий.СостояниеВыполнения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПересчетовТоваров(Знач ИдентификаторЗадания, ДатаОкончания, СостояниеВыполнения, Знач УстанавливатьПривилегированныйРежим = Истина)
	
	Если УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТекущееРегламентноеЗадание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	СвойстваПоследнегоФоновогоЗадания = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(ТекущееРегламентноеЗадание);
	
	Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда	
		ТекстНеОпределено 	= РегламентныеЗаданияСлужебный.ТекстНеОпределено();
		ДатаОкончания       = ТекстНеОпределено;
		СостояниеВыполнения = ТекстНеОпределено;	
	Иначе
		ДатаОкончания       = ?(ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения), СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения, "<>");
		СостояниеВыполнения = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

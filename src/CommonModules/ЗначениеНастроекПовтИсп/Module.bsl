
#Область ПрограммныйИнтерфейс

#Область ФункцииПолученияЗначенийПоУмолчанию

// Возвращает банковский счет контрагента, если он один в ИБ
// Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
// Если банковский счет не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе банковский счет. Если банковский счет
// в базе не один - возвращает пустую ссылку на банковский счет
// Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено
//
// Параметры:
// Контрагент     - СправочникСсылка.Контрагенты - Контрагент, для которой необходимо получить счет
// ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// получения банковского счета
// БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет, который нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.БанковскиеСчетаКонтрагентов
//
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Знач Контрагент, Знач ФормаОплаты = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Безналичная)
		И Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Контрагент)) Тогда
		
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Контрагент);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчетКонтрагентаПоУмолчанию()

// Возвращает банковский счет организации, если он один в ИБ
// Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
// Если банковский счет не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе банковский счет. Если банковский счет
// в базе не один - возвращает пустую ссылку на банковский счет
// Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено
//
// Параметры:
// СтруктураПараметров - Структура - Структура параметров для определения счета
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// 									получения банковского счета
// 		* БанковскийСчет 		  - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности счета
//
// Возвращаемое значение:
// СправочникСсылка.БанковскиеСчетаОрганизаций
//													
Функция ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	КонецЕсли;
	
	Организация 			= СтруктураПараметров.Организация;
	ФормаОплаты 			= СтруктураПараметров.ФормаОплаты;
	БанковскийСчет 			= СтруктураПараметров.БанковскийСчет;
	Валюта					= СтруктураПараметров.Валюта;
	НаправлениеДеятельности	= СтруктураПараметров.НаправлениеДеятельности;
		
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Безналичная)
		И Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Организация) Или Организация = Неопределено) Тогда
		
		Возврат Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, Валюта, НаправлениеДеятельности);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчетОрганизацииПоУмолчанию()

// Получает организацию, если она одна в ИБ
// Если переданная в качестве параметра организация уже заполнена - возвращает ее.
// Если организация не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе организацию. Если организация
// в базе не одна - возвращает пустую ссылку на организацию
//
// Параметры:
// Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Организации
//
Функция ПолучитьОрганизациюПоУмолчанию(Знач Организация = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	Иначе
		Возврат Организация;
	КонецЕсли;
	
КонецФункции // ПолучитьОрганизациюПоУмолчанию()

// Получает подразделение-диспетчер, если оно одно в ИБ
// Если переданный параметр подразделение-диспетчер уже заполнен - возвращает его.
// Если подразделение-диспетчер не передано в качестве параметра или передано пустое,
//	возвращает единственное в информационной базе подразделение-диспетчер. 
// Если подразделений-диспетчеров в базе несколько, 
//	возвращает подразделение-диспетчер из настроек пользователя.
// Если подразделение-диспетчер не указано в настройках пользователя,
//	возвращает пустое подразделение.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, которое нужно заполнить
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя
//
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия
//
Функция ПолучитьПодразделениеДиспетчерПоУмолчанию(Знач Подразделение = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Справочники.СтруктураПредприятия.ПолучитьПодразделениеДиспетчерПоУмолчанию(Пользователь);
	Иначе
		Возврат Подразделение;
	КонецЕсли;
	
КонецФункции // ПолучитьПодразделениеДиспетчер()

//Фукнция возращает стуктуру с параметрами шаблона серий номенклатуры
//	Параметры:
//			ВидНоменклатуры    - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, параметры серий которого которой нужно получить
//			СкладПодразделение - СправочникСсылка.Склады, СправочникСсылка.СтруктураПредприятия - склад или производственное подразделение
//									для которого нужно получить настройки серий. Если значение не задано - возвращаются настройки, которые
//									от склада не зависят
//	Возвращаемое значение
//		Структура - см. Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий 
//
Функция НастройкиИспользованияСерий(ВидНоменклатуры, СкладПодразделение = Неопределено) Экспорт
	Возврат Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий(ВидНоменклатуры, СкладПодразделение);
КонецФункции

// Процедура получает метод оценки стоимости товаров.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация
//	Дата - Дата, на которую необходимо получить метод оценки
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - Метод оценки стоимости товаров
//
Функция ПолучитьМетодОценкиСтоимостиТоваров(Организация, Дата) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СпрУчетнаяПолитика.МетодОценкиСтоимостиТоваров КАК МетодОценки
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|		&Период, Организация = &Организация
	|		) КАК Настройка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|	ПО Настройка.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка");
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.МетодОценки;
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьМетодОценкиСтоимостиТоваров()

// Получает статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС
//
Функция ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	
КонецФункции // ПолучитьСтатьюДвиженияДенежныхСредств()

// Получает подразделение выбранного пользователя.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - Текущий пользователь
//
// Возвращаемое значение:
//	СправочникСсылка.Подразделения - Подразделение пользователя
//
Функция ПодразделениеПользователя(Пользователь, Подразделение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = Справочники.Пользователи.ПолучитьРеквизитыПользователя(Пользователь).Подразделение;
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции // ПодразделениеПользователя()

// Возвращает структуру по ответственному лицу указанного склада
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Стуктура - Структура с полями: "Отвественный" и "ОтветственныйДолжность"
//
Функция ПолучитьОтветственногоПоСкладу(Склад) Экспорт
	
	Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТекущийОтветственный, ТекущаяДолжностьОтветственного");
	
	Если ЗначениеЗаполнено(Структура.ТекущийОтветственный) ИЛИ ЗначениеЗаполнено(Структура.ТекущаяДолжностьОтветственного) Тогда
		
		Возврат Новый Структура("Ответственный, ОтветственныйДолжность",
			Структура.ТекущийОтветственный,
			Структура.ТекущаяДолжностьОтветственного);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции //ПолучитьОтветственногоПоСкладу()


// Возвращает признак ЭтоГруппа для указанного склада
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Булево
//
Функция ПолучитьПризнакСкладГруппа(Склад) Экспорт
	
	Если ЗначениеЗаполнено(Склад)Тогда
		Возврат Справочники.Склады.ЭтоГруппа(Склад);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает адрес указанного склада
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Строка - Адрес указанного склада
//
Функция ПолучитьАдресСклада(Склад) Экспорт
		
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Склад, Справочники.ВидыКонтактнойИнформации.АдресСклада);	
	
КонецФункции //ПолучитьАдресСклада()

Функция НалоговоеНазначениеОрганизации(Знач Организация, Знач Дата, Знач НалоговоеНазначение) Экспорт 
	Если Не ЗначениеЗаполнено(НалоговоеНазначение) Тогда
		Возврат НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата, Ложь);
	Иначе
		Возврат НалоговоеНазначение;
	КонецЕсли;
КонецФункции // НалоговоеНазначениеОрганизации()


// Возвращает массив ссылок на группы складов, в иерархию которых входит указанный склад
//
Функция ИерархияГрупп(Склад) Экспорт
	Возврат Справочники.Склады.ИерархияГрупп(Склад);	
КонецФункции

// Функция определяет, используются или нет группы доступа физических лиц.
// ИСПОЛЬЗУЕТСЯ СИНХРОНИЗАЦИЕЙ ДАННЫХ
//
Функция ИспользуютсяГруппыДоступаФизическихЛиц() Экспорт
	
	Возврат Справочники.ГруппыДоступаФизическихЛиц.ИспользуютсяГруппыДоступа();
	
КонецФункции

// Получает сценарий по типу плана если он один в ИБ
// Если переданная в качестве параметра Сценарий уже заполнен - возвращает его.
// Если Сценарий не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе сценарий. Если Сценарий планирования
// в базе не один - возвращает пустую ссылку на сценарий
//
// Параметры:
//   ТипПлана - ПеречислениеСсылка.ТипыПланов - Тип плана: план продаж, план закупок и т.д.
//   Сценарий - СправочникСсылка.СценарииТоварногоПланирования - Сценарий, который нужно заполнить
//
// Возвращаемое значение:
//   СправочникСсылка.СценарииТоварногоПланирования
//
Функция ПолучитьСценарийПоУмолчанию(Знач ТипПлана, Знач Сценарий = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат Планирование.ПолучитьСценарийПоУмолчанию(ТипПлана);
	Иначе
		Возврат Сценарий;
	КонецЕсли;
	
КонецФункции // ПолучитьСценарийПоУмолчанию()

// Возвращает валюту регламентированного учета
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту РУ. Если валюта РУ не заполнена - возвращает пустую ссылку на валюту
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты
//
Функция ПолучитьВалютуРегламентированногоУчета(Знач Валюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		Возврат Валюта;
	КонецЕсли;
	
КонецФункции // ПолучитьВалютуУправленческогоУчета()

Функция ВидЦеныПоставщикаПоУмолчанию(Поставщик) Экспорт
	
	ВидЦены = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыЦенПоставщиков.Ссылка
	|ИЗ
	|	Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	|ГДЕ
	|	ВидыЦенПоставщиков.Владелец = &Владелец");
	
	Запрос.УстановитьПараметр("Владелец", Поставщик);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Если Выборка.Следующий() Тогда
			ВидЦены = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидЦены
	
КонецФункции

#КонецОбласти

#Область ФункцииПолученияНастроек

// Возвращает налогообложение НДС по организации
//
// Параметры:
// Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить
//
// Возвращаемое значение:
// ПеречислениеСсылка.ТипыНалогообложенияНДС
//
Функция ПолучитьНалогообложениеНДС(Знач Организация, Знач Контрагент, Знач Дата, Знач ЭтоПродажа = Истина) Экспорт	
	
	Возврат НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДС(Организация, Контрагент, Дата, ЭтоПродажа);
	
КонецФункции // ПолучитьНалогообложениеНДС()

// Возвращает налоговое назначение организации по умолчанию
//
// Параметры:
// Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат
//
Функция ПолучитьНалоговоеНазначениеНДС(Знач Организация, Знач Контрагент, Знач Дата, Знач ЭтоПродажа = Истина) Экспорт	
	Возврат НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДС(Организация, Контрагент, Дата, ЭтоПродажа);
КонецФункции // ПолучитьНалоговоеНазначениеНДС()

Функция ПолучитьНалоговоеНазначениеНДСПродажи(Знач Организация, Знач Дата) Экспорт	
	Возврат НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДС(Организация, Неопределено, Дата, Истина);
КонецФункции // ПолучитьНалоговоеНазначениеНДСПродажи()

Функция ПолучитьНалоговоеНазначениеНДСЗакупки(Знач Организация, Знач Контрагент, Знач Дата) Экспорт	
	Возврат НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДС(Организация, Контрагент, Дата, Ложь);
КонецФункции // ПолучитьНалоговоеНазначениеНДСЗакупки()

Функция ПолучитьФлагАвторасчетНДС(Знач Организация, Знач Дата) Экспорт	
	НалогообложениеНДСПоУмолчанию     = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Организация, Неопределено, Дата, Истина);
	АвторасчетНДС			          = НДСИсходящийСервер.ПолучитьФлагАвторасчетНДС(НалогообложениеНДСПоУмолчанию);
	Возврат АвторасчетНДС;
КонецФункции // ПолучитьФлагАвторасчетНДС()

// Определяет обязательность указания направления деятельности для раздела "УчетДоходов".
// Если во всех созданых направлениях есть хотя бы один сброшенный флаг заданного раздела,
// то указывать направление деятельности необязательно.
// Иначе если во всех направлениях все флаги заданного раздела взведены, то указание направления обязательно.
//
// Возвращаемое значение:
//  Истина если указание направления деятельности обязательно
Функция УказыватьНаправлениеВДоходах() Экспорт
	
	Возврат Справочники.НаправленияДеятельности.ОбязательноеУказаниеНаправленияДеятельности("УчетДоходов");
	
КонецФункции

// Определяет обязательность указания направления деятельности для раздела "УчетЗатрат
// Если во всех созданых направлениях есть хотя бы один сброшенный флаг заданного раздела,
// то указывать направление деятельности необязательно.
// Иначе если во всех направлениях все флаги заданного раздела взведены, то указание направления обязательно.
//
// Возвращаемое значение:
//  Истина если указание направления деятельности обязательно
Функция УказыватьНаправлениеВЗатратах() Экспорт
	
	Возврат Справочники.НаправленияДеятельности.ОбязательноеУказаниеНаправленияДеятельности("УчетЗатрат");
	
КонецФункции

// Определяет обязательность указания направления деятельности для раздела "УчетДенежныхСредствРаздельно"
// Если во всех созданых направлениях есть хотя бы один сброшенный флаг заданного раздела,
// то указывать направление деятельности необязательно.
// Иначе если во всех направлениях все флаги заданного раздела взведены, то указание направления обязательно.
//
// Возвращаемое значение:
//  Истина если указание направления деятельности обязательно
Функция УказыватьНаправлениеНаБанковскихСчетахИКассах() Экспорт
	
	Возврат Справочники.НаправленияДеятельности.ОбязательноеУказаниеНаправленияДеятельности("УчетДенежныхСредствРаздельно");
	
КонецФункции

// Определяет обязательность указания направления деятельности для раздела "УчетВнеоборотныхАктивов"
// Если во всех созданых направлениях есть хотя бы один сброшенный флаг заданного раздела,
// то указывать направление деятельности необязательно.
// Иначе если во всех направлениях все флаги заданного раздела взведены, то указание направления обязательно.
//
// Возвращаемое значение:
//  Истина если указание направления деятельности обязательно
Функция УказыватьНаправлениеВоВнеоборотныхАктивах() Экспорт
	
	Возврат Справочники.НаправленияДеятельности.ОбязательноеУказаниеНаправленияДеятельности("УчетВнеоборотныхАктивов");
	
КонецФункции

Функция ПолучитьДатуНачалаПереходаНаСтандартIBAN() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НайденноеЗначение = Константы.ДатаНачалаПереходаНаСтандартIBAN.Получить();
	Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
		НайденноеЗначение = '20190805';
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Функция ПолучитьДатуОкончанияПереходаНаСтандартIBAN() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НайденноеЗначение = Константы.ДатаОкончанияПереходаНаСтандартIBAN.Получить();
	Если НЕ ЗначениеЗаполнено(НайденноеЗначение) Тогда
		НайденноеЗначение = '20200112';
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

#КонецОбласти

#Область ФункцииПолученияЗначенийПоУмолчанию

// Возвращает склад, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, который нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Склады
//
Функция ПолучитьСкладПоУмолчанию(Знач Склад = Неопределено, УчитыватьГруппыСкладов = Ложь, ИсключитьГруппыДоступныеВЗаказах=Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Справочники.Склады.СкладПоУмолчанию(УчитыватьГруппыСкладов, ИсключитьГруппыДоступныеВЗаказах);
	Иначе
		Возврат Склад;
	КонецЕсли;
	
КонецФункции 

// Возвращает склад, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, который нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Склады
//
Функция ПолучитьРозничныйСкладПоУмолчанию(Знач Склад = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Справочники.Склады.РозничныйСкладПоУмолчанию();
	Иначе
		Возврат Склад;
	КонецЕсли;
	
КонецФункции

// Возвращает кассу организации, если она одна в ИБ
// Если переданная в качестве параметра касса уже заполнена - возвращает ее.
// Если касса не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе кассу. Если касса
// в базе не одна - возвращает пустую ссылку на кассу
// Возвращает кассу, только если переданная форма оплаты наличная или Неопределено
//
// Параметры:
// СтруктураПараметров - Структура - Структура параметров для определения кассы
// 		* Организация    		  - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// 		* ФормаОплаты    		  - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
//				 					получения кассы
// 		* Касса					  - СправочникСсылка.Кассы - Касса, которую нужно заполнить
//      * Валюта		 		  - СправочникСсылка.Валюты - Валюта счета
//		* НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - желательное направление деятельности кассы
//
// Возвращаемое значение:
// СправочникСсылка.Кассы
//
Функция ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	КонецЕсли;
	
	Организация 			= СтруктураПараметров.Организация;
	ФормаОплаты 			= СтруктураПараметров.ФормаОплаты;
	Касса		 			= СтруктураПараметров.Касса;
	Валюта					= СтруктураПараметров.Валюта;
	НаправлениеДеятельности	= СтруктураПараметров.НаправлениеДеятельности;
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Наличная)
		И Не ЗначениеЗаполнено(Касса) И (ЗначениеЗаполнено(Организация) Или Организация = Неопределено) Тогда
		Возврат Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация, Валюта, НаправлениеДеятельности);
	Иначе
		Возврат Касса;
	КонецЕсли;
	
КонецФункции // ПолучитьКассуОрганизацииПоУмолчанию()

// Возвращает контактное лицо по умолчанию, если оно одно для указанного партнера
//
// Параметры:
// 		Партнер - СправочникСсылка.Партнеры
//
// Возвращаемое значение:
// 		СправочникСсылка.КонтактныеЛицаПартнеров
//
Функция ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Знач Партнер) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	КонтактныеЛицаПартнеров.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер");
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	
КонецФункции

// Функция возвращает массив префиксов весовых штрихкодов
Функция ПолучитьПрефиксыВесовыхШтрихкодов() Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	ДиапазоныВесовыхШтрихкодов = ДиапазоныВесовыхШтрихкодов();
	Для Каждого СтрокаТЧ Из ДиапазоныВесовыхШтрихкодов Цикл
		ВозвращаемоеЗначение.Добавить(Прав(СтрокаТЧ.Диапазон, 1));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает складскую группу номенклатуры, если она одна в ИБ
// Если переданная в качестве параметра складская группа уже заполнена - возвращает ее.
// Если складская группа не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе складскую группу. Если складская группа
// в базе не одна - возвращает пустую ссылку на складскую группу
//
// Параметры:
// 		СкладскаяГруппаНоменклатуры - СправочникСсылка.СкладскиеГруппыНоменклатуры - складская группа, которую
// 						нужно заполнить
// Возвращаемое значение:
// 		СправочникСсылка.СкладскиеГруппыНоменклатуры
//
Функция СкладскаяГруппаНоменклатурыПоУмолчанию(Знач СкладскаяГруппаНоменклатуры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СкладскаяГруппаНоменклатуры) Тогда
		Возврат Справочники.СкладскиеГруппыНоменклатуры.СкладскаяГруппаНоменклатурыПоУмолчанию();
	Иначе
		Возврат СкладскаяГруппаНоменклатуры;
	КонецЕсли;
	
КонецФункции

// Получает складскую группу упаковок, если она одна в ИБ
// Если переданная в качестве параметра складская группа уже заполнена - возвращает ее.
// Если складская группа не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе складскую группу. Если складская группа
// в базе не одна - возвращает пустую ссылку на складскую группу
//
// Параметры:
// 		СкладскаяГруппаУпаковок - СправочникСсылка.СкладскиеГруппыУпаковок - складская группа, которую
// 						нужно заполнить
// Возвращаемое значение:
// 		СправочникСсылка.СкладскиеГруппыУпаковок
//
Функция СкладскаяГруппаУпаковокПоУмолчанию(Знач СкладскаяГруппаУпаковок = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СкладскаяГруппаУпаковок) Тогда
		Возврат Справочники.СкладскиеГруппыУпаковок.СкладскаяГруппаУпаковокПоУмолчанию();
	Иначе
		Возврат СкладскаяГруппаУпаковок;
	КонецЕсли;
	
КонецФункции

// Возвращает формат магазина, если он один в ИБ
//
// Параметры:
// ОбъектПланирования - СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады - объект планирования, который нужно заполнить
// Возвращаемое значение:
// СправочникСсылка.ФорматыМагазинов, СправочникСсылка.Склады
//
Функция ПолучитьОбъектПланированияПоУмолчанию(Знач ОбъектПланирования = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ОбъектПланирования) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьФорматыМагазинов") Тогда
			Возврат Справочники.ФорматыМагазинов.ПолучитьФорматМагазинаПоУмолчанию();
		Иначе
			Возврат Справочники.Склады.СкладПоУмолчанию();
		КонецЕсли; 
	Иначе
		Возврат ОбъектПланирования;
	КонецЕсли;
	
КонецФункции

// Возвращает вид цены, если он один в ИБ
// Если переданный в качестве параметра вид цены уже заполнен - возвращает его.
// Если вид цены не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе вид цены. Если видов цен
// в базе несколько - возвращает пустую ссылку на вид цены
//
// Параметры:
// ВидЦены                                   - СправочникСсылка.ВидыЦен - Вид цены, который нужно заполнить
// ЦенаВключаетНДС                           - Булево - Признак включения НДС в цену.
// ИспользоватьПриПродаже                    - Булево - Выбор вида цены для продажи
// ИспользоватьПриПередачеМеждуОрганизациями - Булево - Выбор вида цены для передачи между организациями
//
// Возвращаемое значение:
// СправочникСсылка.ВидЦены
//
Функция ВидЦеныПоУмолчанию(Знач ВидЦены = Неопределено, ЦенаВключаетНДС = Неопределено, ИспользоватьПриПродаже = Неопределено, ИспользоватьПриПередачеМеждуОрганизациями = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		
		ПараметрыОтбора = Новый Структура;
		
		Если ЦенаВключаетНДС <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
		КонецЕсли;
		Если ИспользоватьПриПродаже <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ИспользоватьПриПродаже", ИспользоватьПриПродаже);
		КонецЕсли;
		Если ИспользоватьПриПередачеМеждуОрганизациями <> Неопределено Тогда
			ПараметрыОтбора.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", ИспользоватьПриПередачеМеждуОрганизациями);
		КонецЕсли;
		
		Возврат Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦены, ПараметрыОтбора);
		
	Иначе
		Возврат ВидЦены;
	КонецЕсли;
	
КонецФункции

#Область Штрихкодирование

// Возвращает диапазон весовых штрихкодов по умолчанию.
//
// Параметры:
//		Нет
// Возвращаемое значение:
//		Строка - диапазон по умолчанию
//
Функция ДиапазонВесовыхШтрихкодовПоУмолчанию() Экспорт
	
	Диапазоны = ДиапазоныВесовыхШтрихкодов();
	Для Каждого СтрокаТЧ Из Диапазоны Цикл
		Возврат СтрокаТЧ.Диапазон;	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает массив диапазонов весовых штрихкодов.
//
// Параметры:
//		Нет
// Возвращаемое значение:
//		Массив - диапазоны штрихкодов
//
Функция ДиапазоныВесовыхШтрихкодов() Экспорт
	
	ДиапазоныВесовыхШтрихкодов = Новый Массив;
	
	НастройкиДиапазоновШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.НастройкиДиапазоновШтрихкодов();
	Для Каждого Настройка Из НастройкиДиапазоновШтрихкодов Цикл
		Если Настройка.Весовой Тогда
			ДиапазоныВесовыхШтрихкодов.Добавить(Настройка);
		КонецЕсли
	КонецЦикла;
	
	Возврат ДиапазоныВесовыхШтрихкодов;
	
КонецФункции

// Возвращает массив диапазонов штучных штрихкодов.
//
// Параметры:
//		Нет
// Возвращаемое значение:
//		Массив - диапазоны штрихкодов
//
Функция ДиапазоныШтучныхШтрихкодов() Экспорт
	
	ДиапазоныШтучныхШтрихкодов = Новый Массив;
	
	НастройкиДиапазоновШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.НастройкиДиапазоновШтрихкодов();
	Для Каждого Настройка Из НастройкиДиапазоновШтрихкодов Цикл
		Если Не Настройка.Весовой Тогда
			ДиапазоныШтучныхШтрихкодов.Добавить(Настройка);
		КонецЕсли
	КонецЦикла;
	
	Возврат ДиапазоныШтучныхШтрихкодов;
	
КонецФункции

#КонецОбласти

#Область СкидкиНаценки

Функция КоличествоИсточниковСкидокНаценок() Экспорт
	
	СтруктураКВозврату = Новый Структура;
	СтруктураКВозврату.Вставить("ВсегоНаСкладах", 0);
	СтруктураКВозврату.Вставить("ВсегоВТиповыхСоглашениях", 0);
	СтруктураКВозврату.Вставить("ВсегоВИндивидуальныхСоглашениях", 0);
	СтруктураКВозврату.Вставить("ВсегоВКартахЛояльности", 0);
	
	ТекстЗапросаПоВидамКартамЛояльности = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВидыКартЛояльности.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности";
	
	ТекстЗапросаПоСкладам = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(Склады.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа";
	
	ТекстЗапросаПоИндивидуальнымСоглашениям = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(СоглашенияСКлиентами.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	НЕ СоглашенияСКлиентами.Типовое";
	
	ТекстЗапросаПоТиповымСоглашениям = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(СоглашенияСКлиентами.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Типовое";
	
	Запрос = Новый Запрос;
	КоличествоЗапросов = 0;
	СоотвествиеДанныхНомерамЗапроса = Новый Соответствие;
	ТекстЗапросаПостфикс = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности")
		И ПравоДоступа("Чтение", Метаданные.Справочники.КартыЛояльности) Тогда
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПоВидамКартамЛояльности;
		СоотвествиеДанныхНомерамЗапроса.Вставить(КоличествоЗапросов, "ВсегоВКартахЛояльности");
		КоличествоЗапросов = КоличествоЗапросов + 1;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов")
		И ПравоДоступа("Чтение", Метаданные.Справочники.Склады) Тогда
		
		Запрос.Текст = Запрос.Текст + ?(КоличествоЗапросов = 0 , "", ТекстЗапросаПостфикс) + ТекстЗапросаПоСкладам;
		СоотвествиеДанныхНомерамЗапроса.Вставить(КоличествоЗапросов, "ВсегоНаСкладах");
		КоличествоЗапросов = КоличествоЗапросов + 1;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами")
		И ПравоДоступа("Чтение", Метаданные.Справочники.СоглашенияСКлиентами) Тогда
		
		Запрос.Текст = Запрос.Текст + ?(КоличествоЗапросов = 0 , "", ТекстЗапросаПостфикс) + ТекстЗапросаПоИндивидуальнымСоглашениям;
		СоотвествиеДанныхНомерамЗапроса.Вставить(КоличествоЗапросов, "ВсегоВИндивидуальныхСоглашениях");
		КоличествоЗапросов = КоличествоЗапросов + 1;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами") 
		И ПравоДоступа("Чтение", Метаданные.Справочники.СоглашенияСКлиентами) Тогда
		
		Запрос.Текст = Запрос.Текст + ?(КоличествоЗапросов = 0 , "", ТекстЗапросаПостфикс) + ТекстЗапросаПоТиповымСоглашениям;
		СоотвествиеДанныхНомерамЗапроса.Вставить(КоличествоЗапросов, "ВсегоВТиповыхСоглашениях");
		КоличествоЗапросов = КоличествоЗапросов + 1;
		
	КонецЕсли;
	
	Если КоличествоЗапросов > 0 Тогда
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Для Инд = 1 По КоличествоЗапросов Цикл 
			
			Выборка = РезультатЗапроса[Инд - 1].Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураКВозврату[СоотвествиеДанныхНомерамЗапроса.Получить(Инд-1)] = Выборка.КоличествоОбъектов;
			КонецЕсли;
			
		КонецЦикла
		
	КонецЕсли;
	
	Возврат СтруктураКВозврату;
	
КонецФункции

#КонецОбласти

#Область ДоступКРеквизитамОбъектовМетаданных

// Возвращает перечень реквизитов справочника, недоступных для изменения текущему пользователю.
//
// Параметры:
//		ИмяСправочника - Строка - имя справочника как оно задано в метаданных
//		ЭтоГруппа - Булево - проверять реквизиты группы или элемента справочника
//		НепроверяемыеРеквизиты - Строка - перечень реквизитов, которые могут быть "законно" изменены программно, при записи элемента
// Возвращаемое значение:
//		Строка - список недоступных реквизитов, разделенных запятыми.
//
Функция НедоступныеДляРедактированияРеквизитыСправочника(ИмяСправочника, ЭтоГруппа = Ложь, НепроверяемыеРеквизиты = "") Экспорт
	
	Реквизиты = "";
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Реквизиты; // все реквизиты доступны для редактирования
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	ИсключаемыеРеквизиты  = Новый Структура(
		"Предопределенный,Ссылка,ЭтоГруппа" + ?(ПустаяСтрока(НепроверяемыеРеквизиты), "", "," + НепроверяемыеРеквизиты));
	
	Для Каждого МетаданныеРеквизита Из МетаданныеСправочника.СтандартныеРеквизиты Цикл
		Если НЕ ИсключаемыеРеквизиты.Свойство(МетаданныеРеквизита.Имя)
		 И НЕ ПравоДоступа("Редактирование", МетаданныеСправочника,, МетаданныеРеквизита.Имя) Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ",") + МетаданныеРеквизита.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеСправочника.Реквизиты Цикл
		Если НЕ ЭтоГруппа И МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
		 ИЛИ ЭтоГруппа И МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
			Продолжить; // реквизит не используется
		КонецЕсли;
		Если НЕ ИсключаемыеРеквизиты.Свойство(МетаданныеРеквизита.Имя)
		 И НЕ ПравоДоступа("Редактирование", МетаданныеРеквизита) Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ",") + МетаданныеРеквизита.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает структуру реквизитов справочника.
//
// Параметры:
//		ИмяСправочника - Строка - имя справочника как оно задано в метаданных
// Возвращаемое значение:
//		Структура - стандартные и обычные реквизиты справочника.
//
Функция РеквизитыСправочника(ИмяСправочника) Экспорт
	
	СтруктураРеквизитов   = Новый Структура;
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	
	Для Каждого Реквизит Из МетаданныеСправочника.СтандартныеРеквизиты Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Синоним);
	КонецЦикла;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

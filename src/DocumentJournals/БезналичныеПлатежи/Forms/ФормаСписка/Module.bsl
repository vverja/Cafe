
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьРеквизиты();
	УстановитьКонстантыСписков();
	ЗаполнитьКомандыСозданияДокументов();
	
	УстановитьОтборДинамическихСписков();
	УстановитьВидимость();
	
	ОбновитьИтоги();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ЗаказыКОплате", "ЗаказыКОплатеДата");
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ЗаказыКПоступлению", "ЗаказыКПоступлениюДата");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НачалоПериода             = Настройки.Получить("НачалоПериода");
	КонецПериода              = Настройки.Получить("КонецПериода");
	
	БанковскийСчетОтбор       = Настройки.Получить("БанковскийСчетОтбор");
	Контрагент                = Настройки.Получить("Контрагент");
	ПроведеноБанкомОтбор      = Настройки.Получить("ПроведеноБанкомОтбор");
	ДатаКОплате               = Настройки.Получить("ДатаКОплате");
	
	СписокОпераций            = Настройки.Получить("СписокОперацийПоступления");
	ИнициализироватьСписокОперацийПоступления();
	Если СписокОпераций <> Неопределено Тогда
		Для каждого Операция Из СписокОпераций Цикл
			Если Операция.Пометка Тогда
				ОперацияСписка = СписокОперацийПоступления.НайтиПоЗначению(Операция.Значение);
				Если ОперацияСписка <> Неопределено Тогда
					ОперацияСписка.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СписокОперацийПоступленияПредставление = СписокОперацийПоступленияПредставление(СписокОперацийПоступления);
	
	СписокОпераций            = Настройки.Получить("СписокОперацийОплаты");
	ИнициализироватьСписокОперацийОплаты();
	Если СписокОпераций <> Неопределено Тогда
		Для каждого Операция Из СписокОпераций Цикл
			Если Операция.Пометка Тогда
				ОперацияСписка = СписокОперацийОплаты.НайтиПоЗначению(Операция.Значение);
				Если ОперацияСписка <> Неопределено Тогда
					ОперацияСписка.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СписокОперацийОплатыПредставление = СписокОперацийОплатыПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия", ИмяСобытия)), МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ОбработкаОповещенияФрагмент(ИмяСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	
	ОбработкаОповещенияФрагмент(ИмяСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия)
	
	ИменаСобытийОбновленияИтогов = Новый Массив;
	ИменаСобытийОбновленияИтогов.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ПоступлениеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ПриходныйКассовыйОрдер");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_ЗаявкаНаРасходованиеДенежныхСредств");
	ИменаСобытийОбновленияИтогов.Добавить("Запись_РаспоряжениеНаПеремещениеДенежныхСредств");
	
	ИменаСобытийОбновленияСпискаКОплате = Новый Массив;
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_ЗаявкаНаРасходованиеДенежныхСредств");
	ИменаСобытийОбновленияСпискаКОплате.Добавить("Запись_РаспоряжениеНаПеремещениеДенежныхСредств");
	
	ИменаСобытийОбновленияСпискаКПоступлению = Новый Массив;
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_ПоступлениеБезналичныхДенежныхСредств");
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_ПриходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_ОперацияПоПлатежнойКарте");
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_РасходныйКассовыйОрдер");
	ИменаСобытийОбновленияСпискаКПоступлению.Добавить("Запись_СписаниеБезналичныхДенежныхСредств");
	
	Если ИменаСобытийОбновленияИтогов.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	Если ИменаСобытийОбновленияСпискаКОплате.Найти(ИмяСобытия) <> Неопределено
		И (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкиКОплате
			Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаказыКОплате) Тогда
		Элементы[СписокКОплате].Обновить();
	КонецЕсли;
	
	Если ИменаСобытийОбновленияСпискаКПоступлению.Найти(ИмяСобытия) <> Неопределено
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
		Элементы.ЗаказыКПоступлению.Обновить();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.СписокПлатежей.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БанковскийСчетОтборПриИзменении(Элемент)
	
	БанковскийСчетОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетОтборПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков();
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаПлатежи Тогда
		Элементы.СписокПлатежей.Обновить();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКПоступлению Тогда
		Элементы.ЗаказыКПоступлению.Обновить();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаявкиКОплате Тогда
		Элементы.ЗаявкиКОплате.Обновить();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаказыКОплате Тогда
		Элементы.ЗаказыКОплате.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСписков

#Область ОбработчикиСобытийЭлементовСпискаПлатежей

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НачалоПериода > КонецПериода И ЗначениеЗаполнено(КонецПериода) Тогда
		НачалоПериода = КонецПериода;
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если КонецПериода < НачалоПериода И ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьПериодЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		ЭтаФорма,
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "КонецПериода"),
		Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		ПериодПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведеноБанкомОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВспомогательныйСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовСпискаКПоступлению

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций, Заголовок, ВыводитьПредупреждение", СписокОперацийПоступления, НСтр("ru='Основания платежа';uk='Підстави платежу'"), Истина), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийПоступления.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКПоступлениюОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийПоступления = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Для Каждого ЭлементСписка Из СписокОперацийПоступления Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийПоступленияПредставление = СписокОперацийПоступленияПредставление(СписокОперацийПоступления);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаКОплате

&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	
	ДатаПлатежаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПлатежаПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	ОбновитьКОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКПоступлениюПриИзменении(Элемент)
	
	ДатаКПоступлениюПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаКПоступлениюПриИзмененииНаСервере()
	
	УстановитьОтборДинамическихСписков();
	ОбновитьКПоступлению();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
			Новый Структура("СписокОпераций", СписокОперацийОплаты), Элемент);
	Иначе
		ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
			Новый Структура("СписокОпераций, Заголовок, ВыводитьПредупреждение", СписокОперацийОплаты, НСтр("ru='Основания платежа';uk='Підстави платежу'"), Истина), Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийОплаты.ЗаполнитьПометки(Ложь);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКОплатеОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийОплаты = ВыбранноеЗначение;
	Иначе
		
		Для Каждого ЭлементСписка Из СписокОперацийОплаты Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	СписокОперацийОплатыПредставление = СписокОперацийОплатыПредставление(СписокОперацийОплаты);
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.СписокПлатежей);
	
КонецПроцедуры
// Конец ВводНаОсновании

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.СписокПлатежей);
	
КонецПроцедуры

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.СписокПлатежей);
	
КонецПроцедуры
// Конец МенюОтчеты

#Область СозданиеДокументов

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	
	ИмяХозОперации = Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрДлина("СоздатьПоступление"));
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ХозяйственнаяОперация", НастройкиФормы.ХозОперацииПоступления[ИмяХозОперации]);
	СтруктураОтбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
	СтруктураОтбор.Вставить("Организация", Организация);
	СтруктураОтбор.Вставить("Валюта", ВалютаСчета);
	
	Если СтруктураОтбор.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	Иначе
		
		ТипПлатежа = СоответствиеХозОперацийТипамПлатежей().Получить(НастройкиФормы.ХозОперацииПоступления[ИмяХозОперации]);
		Если ТипПлатежа <> Неопределено Тогда
			СтруктураОтбор.Вставить("ТипПлатежногоДокумента", ТипПлатежа);
			Если ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер")
				Или ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение") Тогда
				СтруктураОтбор.Вставить("ПроведеноБанком", Истина);
			КонецЕсли;
			СтруктураОтбор.Вставить("ДатаПроведенияБанком", ТекущаяДата());
		КонецЕсли;
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.ПоступлениеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписание(Команда)
	
	ИмяХозОперации = Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрДлина("СоздатьСписание"));
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("ХозяйственнаяОперация", НастройкиФормы.ХозОперацииСписания[ИмяХозОперации]);
	СтруктураОтбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
	СтруктураОтбор.Вставить("Организация", Организация);
	СтруктураОтбор.Вставить("Валюта", ВалютаСчета);
	
	Если СтруктураОтбор.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка") Тогда
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	Иначе
		ТипПлатежа = СоответствиеХозОперацийТипамПлатежей().Получить(НастройкиФормы.ХозОперацииСписания[ИмяХозОперации]);
		Если ТипПлатежа <> Неопределено Тогда
			СтруктураОтбор.Вставить("ТипПлатежногоДокумента", ТипПлатежа);
			Если ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.БанковскийОрдер")
				Или ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер")
				Или ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение") Тогда
				СтруктураОтбор.Вставить("ПроведеноБанком", Истина);
			КонецЕсли;
			СтруктураОтбор.Вставить("ДатаПроведенияБанком", ТекущаяДата());
		КонецЕсли;
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
		
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьПроведениеБанком(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокПлатежей);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДок = ВыделенныеСтроки.Количество();
	Для Инд = 1 по КоличествоДок Цикл
		Если ТипЗнч(ВыделенныеСтроки[КоличествоДок - Инд]) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			Или ТипЗнч(ВыделенныеСтроки[КоличествоДок - Инд]) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ВыделенныеСтроки.Удалить(КоличествоДок - Инд);
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьСообщения();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'"));
		Возврат;
	КонецЕсли;
	
	ПриУстановкеПроведенияБанком = Новый ОписаниеОповещения("ПриУстановкеПроведенияБанком", ЭтаФорма, ВыделенныеСтроки);
	ПоказатьВводДаты(ПриУстановкеПроведенияБанком, ТекущаяДата(), НСтр("ru='Укажите дату проведения банком';uk='Вкажіть дату проведення банком'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУстановкеПроведенияБанком(ДатаПроведенияБанком, МассивДокументов) Экспорт
	
	Если ДатаПроведенияБанком <> Неопределено Тогда
		
		КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
			МассивДокументов,
			"ПроведеноБанком",
			Новый Структура("ДатаПроведенияБанком", ДатаПроведенияБанком));
		
		Элементы.СписокПлатежей.Обновить();
		ОбновитьИтоги();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВБанк(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ВыгрузкаВБанк",
		Новый Структура("БанковскийСчет", БанковскийСчетОтбор),
		Элементы.СписокПлатежей);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВыписки(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ЗагрузкаВыписки",
		Новый Структура("БанковскийСчет", БанковскийСчетОтбор),
		Элементы.СписокПлатежей);

	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПоДням(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.ВидимостьКомандВариантовОтчетов = Истина;
	
	ПараметрыФормы.КлючНазначенияИспользования = "ВедомостьПоДням";
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		Отбор.Вставить("ПериодОтчета", Новый СтандартныйПериод(НачалоПериода, КонецПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		Отбор.Вставить("БанковскийСчет", БанковскийСчетОтбор);
		Отбор.Вставить("Валюта", ВалютаСчета);
		ПараметрыФормы.КлючВарианта = "ВедомостьПоДнямОдинСчет";
	Иначе
		ПараметрыФормы.КлючВарианта = "ВедомостьПоДням";
	КонецЕсли;
	ПараметрыФормы.Отбор = Отбор;
	
	ОткрытьФорму("Отчет.ВедомостьБезналичныхДенежныхСредств.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		);
	
КонецПроцедуры

&НаКлиенте
Процедура Оплатить(Команда)
	
	СтрокаТаблицы = Элементы.ЗаказыКОплате.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		
		СтруктураОснование = Новый Структура("ЗаказПоставщику, СуммаКОплате",
			СтрокаТаблицы.Ссылка,
			СтрокаТаблицы.СуммаКОплате);
			СтруктураОснование.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураОснование.Вставить("БанковскийСчет", БанковскийСчетОтбор);
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
		
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта",
			СтруктураПараметры,
			Элементы.СписокПлатежей);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокПлатежей);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокПлатежей);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьРеквизиты()
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ИспользоватьЗаявкиНаРасходованиеДенежныхСредств = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	НесколькоРасчетныхСчетов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользоватьСчетаНаОплату = ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам");
	
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		СписокКОплате = "ЗаявкиКОплате";
	Иначе
		СписокКОплате = "ЗаказыКОплате";
	КонецЕсли;
	
	ЗаказыКПоступлению.ТекстЗапроса = ДенежныеСредстваСервер.ТекстЗапросаЗаказыКПоступлению();
	Если Не ИспользоватьСчетаНаОплату Тогда
		ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("ВыводитьСчетаНаОплату", Ложь);
	КонецЕсли;
	Если Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("ВыводитьРаспоряженияНаПеремещение", Ложь);
	КонецЕсли;
	ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("ТипыПолучателейДенежныхСредствВПути", Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	
	Если Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		ТекстЗапросаЗаказыКОплате = ДенежныеСредстваСервер.ТекстЗапросаЗаказыКОплате();
		ЗаказыКОплате.ТекстЗапроса = ТекстЗапросаЗаказыКОплате;
	КонецЕсли;
	
	Если Не НесколькоРасчетныхСчетов Тогда
		БанковскийСчетОтбор = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода)
		Или Не ЗначениеЗаполнено(КонецПериода) Тогда
		НачалоПериода = НачалоДня(ТекущаяДата());
		КонецПериода = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	СтандартнаяДата = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоМесяца);
	ДатаКОплате = СтандартнаяДата.Дата;
	
	Если Не ЗначениеЗаполнено(ПроведеноБанкомОтбор) Тогда
		ПроведеноБанкомОтбор = "ВсеПлатежи";
	КонецЕсли;
	
	ОписаниеОтборов = Новый Соответствие;
	ОписаниеОтборов.Вставить("Организация", Тип("СправочникСсылка.Организации"));
	УправлениеДоступом.НастроитьОтборыДинамическогоСписка(СписокПлатежей, ОписаниеОтборов);
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		РазрешенныеОрганизации = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка("ЖурналДокументов.БезналичныеПлатежи", Тип("СправочникСсылка.Организации"));
		ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("РазрешенныеЗначенияПоляОрганизация", РазрешенныеОрганизации);
		Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
			ЗаявкиКОплате.Параметры.УстановитьЗначениеПараметра("РазрешенныеЗначенияПоляОрганизация", РазрешенныеОрганизации);
		Иначе
			ЗаказыКОплате.Параметры.УстановитьЗначениеПараметра("РазрешенныеЗначенияПоляОрганизация", РазрешенныеОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьСписокОперацийПоступления();
	ИнициализироватьСписокОперацийОплаты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СписокПлатежейВалюта");
	МассивЭлементов.Добавить("ЗаказыКПоступлениюВалюта");
	МассивЭлементов.Добавить("ЗаявкиКОплатеВалюта");
	МассивЭлементов.Добавить("ЗаказыКОплатеВалюта");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтраницаЗаявкиКОплате");
	ВидимостьЭлементов.Вставить(МассивЭлементов, ИспользоватьЗаявкиНаРасходованиеДенежныхСредств);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СтраницаЗаказыКОплате");
	ВидимостьЭлементов.Вставить(МассивЭлементов, Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("БанковскийСчетОтбор");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("ЗаказыКПоступлениюБанковскийСчет");
	МассивЭлементов.Добавить("ЗаявкиКОплатеБанковскийСчет");
	МассивЭлементов.Добавить("ЗаказыКОплатеБанковскийСчет");
	ВидимостьЭлементов.Вставить(МассивЭлементов, НесколькоРасчетныхСчетов);
	
	Для Каждого ЭлементСоответствия из ВидимостьЭлементов Цикл
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			ЭлементСоответствия.Ключ,
			"Видимость",
			ЭлементСоответствия.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыСозданияДокументов()
	
	ИспользоватьОплатуПлатежнымиКартами                 = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	ИспользоватьПередачиТоваровМеждуОрганизациями       = ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями");
	ИспользоватьНесколькоСчетов                         = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользоватьКредитыДепозиты                         = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов");
	ИспользоватьНесколькоВалют                          = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьОбособленныеПодразделения               = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
	ИспользоватьИмпортныеЗакупки                        = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	ИспользоватьЗаймыСотрудникам                        = Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ХозОперацииПоФО = Новый Соответствие;
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте,              ИспользоватьОплатуПлатежнымиКартами);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации,  ИспользоватьПередачиТоваровМеждуОрганизациями);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,              ИспользоватьОбособленныеПодразделения);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета,        ИспользоватьНесколькоСчетов);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам,           ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам,          ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным,     ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты,                              ИспользоватьНесколькоВалют);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации,      ИспользоватьПередачиТоваровМеждуОрганизациями);
	
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне,                            ИспользоватьИмпортныеЗакупки);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию,        ИспользоватьПередачиТоваровМеждуОрганизациями);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств,              ИспользоватьОбособленныеПодразделения);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет,        ИспользоватьНесколькоСчетов);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам,                               ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты,                         ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов,                                   ИспользоватьКредитыДепозиты);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику,                          ИспользоватьЗаймыСотрудникам);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником,                      ИспользоватьЗаймыСотрудникам);
	ХозОперацииПоФО.Вставить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию,       ИспользоватьПередачиТоваровМеждуОрганизациями);
	
	
	НастройкиФормы = Новый Структура;
	
	// Поступление
	ХозОперацииПоступления = Новый Соответствие;
	
	ГруппыОпераций = Новый Массив;
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации, НСтр("ru='Поступление от другой организации';uk='Надходження від іншої організації'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств, НСтр("ru='Внутренняя передача';uk='Внутрішня передача'"));
	ГруппыОпераций.Добавить(Операции); // Оплата
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета, НСтр("ru='Поступление с другого счета';uk='Надходження з іншого рахунку'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк, НСтр("ru='Сдача наличных в банк';uk='Здача готівки в банк'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет, НСтр("ru='Инкассация в банк';uk='Інкасація в банк'"));
	ГруппыОпераций.Добавить(Операции); // Перемещения
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам, НСтр("ru='Поступление по кредитам и займам полученным';uk='Надходження за кредитами і позиками отриманими'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам, НСтр("ru='Поступление по депозитам';uk='Надходження за депозитами'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным, НСтр("ru='Погашение займа контрагентом';uk='Погашення позики контрагентом'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником, НСтр("ru='Погашение займа сотрудником';uk='Погашення позики співробітником'"));
	ГруппыОпераций.Добавить(Операции); // Кредиты, депозиты
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств, НСтр("ru='Прочее поступление';uk='Інше надходження'"));
	ГруппыОпераций.Добавить(Операции); // Прочее
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика, НСтр("ru='Возврат от поставщика';uk='Повернення від постачальника'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника, НСтр("ru='Возврат от подотчетника';uk='Повернення від підзвітника'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации, НСтр("ru='Возврат от другой организации';uk='Повернення від іншої організації'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту);
	ГруппыОпераций.Добавить(Операции); // Возвраты
	
	инд = 1;
	Для каждого ГруппаОпераций из ГруппыОпераций Цикл
		
		ГруппаКоманд = Элементы.Вставить("ГруппаСоздатьПоступление" + Строка(инд), Тип("ГруппаФормы"), Элементы.СписокСоздатьПоступление);
		ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
		инд = инд + 1;
		
		Для каждого Операция из ГруппаОпераций Цикл
			
			ОперацияВключена = Истина;
			ИспользованиеХО = ХозОперацииПоФО.Получить(Операция.Значение);
			Если ИспользованиеХО <> Неопределено Тогда
				ОперацияВключена = ИспользованиеХО;
			КонецЕсли;
			
			Если ОперацияВключена Тогда
				ИмяХозОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(Операция.Значение);
				ХозОперацииПоступления.Вставить(ИмяХозОперации, Операция.Значение);
				
				КомандаСоздатьДокумент = Команды.Добавить("СоздатьПоступление" + ИмяХозОперации);
				КомандаСоздатьДокумент.Действие = "СоздатьПоступление";
				КомандаСоздатьДокумент.Заголовок = ?(ЗначениеЗаполнено(Операция.Представление), Операция.Представление, Строка(Операция.Значение));
				
				ЭлементСоздатьДокумент = Элементы.Вставить("СоздатьПоступление" + ИмяХозОперации, Тип("КнопкаФормы"), ГруппаКоманд);
				ЭлементСоздатьДокумент.ИмяКоманды = КомандаСоздатьДокумент.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НастройкиФормы.Вставить("ХозОперацииПоступления", ХозОперацииПоступления);
	
	// Списание
	ХозОперацииСписания = Новый Соответствие;
	
	ГруппыОпераций = Новый Массив;
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику, НСтр("ru='Выдача подотчетнику';uk='Видача підзвітній особі'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию, НСтр("ru='Оплата другой организации';uk='Оплата іншій організації'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств, НСтр("ru='Внутренняя передача';uk='Внутрішня передача'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	ГруппыОпераций.Добавить(Операции); // Оплата
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет, НСтр("ru='Перечисление на другой счет';uk='Перерахування на інший рахунок'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка, НСтр("ru='Поступление наличных из банка';uk='Надходження готівки з банку'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств, НСтр("ru='Инкассация из банка';uk='Інкасація з банку'"));
	ГруппыОпераций.Добавить(Операции); // Перемещения
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймов, НСтр("ru='Выдача займа контрагенту';uk='Видача позики контрагенту'"));
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику, НСтр("ru='Выдача займа сотруднику';uk='Видача позики співробітнику'"));
	ГруппыОпераций.Добавить(Операции); // Кредиты, депозиты
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств, НСтр("ru='Прочий расход';uk='Інші витрати'"));
	ГруппыОпераций.Добавить(Операции); // Прочее
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию, НСтр("ru='Возврат другой организации';uk='Повернення іншої організації'"));
	ГруппыОпераций.Добавить(Операции); // Возвраты
	
	инд = 1;
	Для каждого ГруппаОпераций из ГруппыОпераций Цикл
		
		ГруппаКоманд = Элементы.Вставить("ГруппаСоздатьСписание" + Строка(инд), Тип("ГруппаФормы"), Элементы.СписокСоздатьСписание);
		ГруппаКоманд.Вид = ВидГруппыФормы.ГруппаКнопок;
		инд = инд + 1;
		
		Для каждого Операция из ГруппаОпераций Цикл
			
			ОперацияВключена = Истина;
			ИспользованиеХО = ХозОперацииПоФО.Получить(Операция.Значение);
			Если ИспользованиеХО <> Неопределено Тогда
				ОперацияВключена = ИспользованиеХО;
			КонецЕсли;
			
			Если ОперацияВключена Тогда
				ИмяХозОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(Операция.Значение);
				ХозОперацииСписания.Вставить(ИмяХозОперации, Операция.Значение);
				
				КомандаСоздатьДокумент = Команды.Добавить("СоздатьСписание" + ИмяХозОперации);
				КомандаСоздатьДокумент.Действие = "СоздатьСписание";
				КомандаСоздатьДокумент.Заголовок = ?(ЗначениеЗаполнено(Операция.Представление), Операция.Представление, Строка(Операция.Значение));
				
				ЭлементСоздатьДокумент = Элементы.Вставить("СоздатьСписание" + ИмяХозОперации, Тип("КнопкаФормы"), ГруппаКоманд);
				ЭлементСоздатьДокумент.ИмяКоманды = КомандаСоздатьДокумент.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НастройкиФормы.Вставить("ХозОперацииСписания", ХозОперацииСписания);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКонстантыСписков()
	
	ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("ПоступлениеОплатыОтКлиента", НСтр("ru='Поступление оплаты от клиента';uk='Надходження оплати від клієнта'"));
	ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("ВозвратОтПоставщика", НСтр("ru='Возврат от поставщика';uk='Повернення від постачальника'"));
	ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("ВозвратОтПодотчетника", НСтр("ru='Возврат от подотчетника';uk='Повернення від підзвітника'"));
	
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокОперацийОплаты()
	
	СписокОпераций = Новый СписокЗначений;
	
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		
		Операции = Перечисления.ХозяйственныеОперации;
		
		СписокОпераций.Добавить(Операции.ОплатаПоставщику);
		СписокОпераций.Добавить(Операции.ВозвратОплатыКлиенту);
		СписокОпераций.Добавить(Операции.ВыдачаДенежныхСредствПодотчетнику, НСтр("ru='Выдача подотчетнику';uk='Видача підзвітній особі'"));
		СписокОпераций.Добавить(Операции.ПеречислениеВБюджет, НСтр("ru='Перечисление налога';uk='Перерахування податку'"));
		СписокОпераций.Добавить(Операции.ПеречислениеТаможне, НСтр("ru='Таможенный платеж';uk='Митний платіж'"));
		СписокОпераций.Добавить(Операции.КонвертацияВалюты);
		СписокОпераций.Добавить(Операции.ОплатаДенежныхСредствВДругуюОрганизацию, НСтр("ru='Оплата в другую организацию';uk='Оплата в іншу організацію'"));
		СписокОпераций.Добавить(Операции.ВозвратДенежныхСредствВДругуюОрганизацию, НСтр("ru='Возврат в другую организацию';uk='Повернення в іншу організацію'"));
		СписокОпераций.Добавить(Операции.ВнутренняяПередачаДенежныхСредств, НСтр("ru='Внутренняя передача';uk='Внутрішня передача'"));
		СписокОпераций.Добавить(Операции.ВыплатаЗарплаты);
		СписокОпераций.Добавить(Операции.ПрочиеРасходы);
		СписокОпераций.Добавить(Операции.ПрочаяВыдачаДенежныхСредств, НСтр("ru='Прочая выдача';uk='Інша видача'"));
		СписокОпераций.Добавить(Операции.ОплатаПоКредитам);
		СписокОпераций.Добавить(Операции.ПеречислениеНаДепозиты);
		СписокОпераций.Добавить(Операции.ПеречислениеДенежныхСредствНаДругойСчет);
		СписокОпераций.Добавить(Операции.ПоступлениеДенежныхСредствИзБанка);
		СписокОпераций.Добавить(Операции.СнятиеНаличныхДенежныхСредств);
		
	Иначе
	
		СписокОпераций.Добавить("ВыводитьДокументыРасчетов", НСтр("ru='Документы расчетов';uk='Документи розрахунків'"));
		СписокОпераций.Добавить("ВыводитьВозвратыОтКлиентов", НСтр("ru='Возвраты от клиентов';uk='Повернення від клієнтів'"));
		
		
	КонецЕсли;
	
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Если Операция.Пометка Тогда
			ОперацияСписка = СписокОпераций.НайтиПоЗначению(Операция.Значение);
			Если ОперацияСписка <> Неопределено Тогда
				ОперацияСписка.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокОперацийОплаты = СписокОпераций;
	
	Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Элементы.СписокОперацийКОплатеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	Элементы.ЗаказыСписокОперацийКОплатеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийОплаты Цикл
		Элементы.ЗаказыСписокОперацийКОплатеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокОперацийПоступления()
	
	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить("ВыводитьДокументыРасчетов", НСтр("ru='Документы расчетов';uk='Документи розрахунків'"));
	Если ИспользоватьСчетаНаОплату Тогда
		СписокОпераций.Добавить("ВыводитьСчетаНаОплату", НСтр("ru='Счета на оплату';uk='Рахунки на оплату'"));
	КонецЕсли;
	СписокОпераций.Добавить("ВыводитьВозвратыОтПоставщиков", НСтр("ru='Возвраты от поставщиков';uk='Повернення від постачальників'"));
	СписокОпераций.Добавить("ВыводитьВозвратыОтПодотчетников", НСтр("ru='Возвраты от подотчетников';uk='Повернення від підзвітних особ'"));
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		СписокОпераций.Добавить("ВыводитьРаспоряженияНаПеремещение", НСтр("ru='Распоряжения на перемещение';uk='Розпорядження на переміщення'"));
	КонецЕсли;
	СписокОпераций.Добавить("ВыводитьДенежныеСредстваВПути", НСтр("ru='Денежные средства в пути';uk='Грошові кошти в дорозі'"));
	
	СписокОперацийПоступления = СписокОпераций;
	
	Элементы.СписокОперацийКПоступлениюОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийПоступления Цикл
		Элементы.СписокОперацийКПоступлениюОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СоответствиеХозОперацийТипамПлатежей()
	
	СоответствиеХОТипамПлатежей = Новый Соответствие;
	СоответствиеХОТипамПлатежей.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств"),
		ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
	СоответствиеХОТипамПлатежей.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте"),
		ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
	СоответствиеХОТипамПлатежей.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет"),
		ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер"));
	
	Возврат СоответствиеХОТипамПлатежей;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	Если ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОтбор);
		Организация = РеквизитыСчета.Организация;
		ВалютаСчета = РеквизитыСчета.Валюта;
		Элементы.НадписьБанковскийСчет.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Банковский счет %1, %2';uk='Банківський рахунок %1, %2'"), Строка(ВалютаСчета), СокрЛП(БанковскийСчетОтбор));
	Иначе
		Организация = Неопределено;
		ВалютаСчета = Неопределено;
		Элементы.НадписьБанковскийСчет.Заголовок = НСтр("ru='<Банковский счет не задан>';uk='<Банківський рахунок не заданий>'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода) и Не ЗначениеЗаполнено(КонецПериода) Тогда
		Элементы.НадписьПериодВыписки.Заголовок = НСтр("ru='За период <без ограничения>';uk='За період <без обмеження>'")
	Иначе
		Элементы.НадписьПериодВыписки.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='За период с %1 по %2';uk='За період з %1 по %2'"),
				?(ЗначениеЗаполнено(НачалоПериода), Формат(НачалоПериода, "ДЛФ=Д"), НСтр("ru='<без ограничения>';uk='<без обмеження>'")),
				?(ЗначениеЗаполнено(КонецПериода), Формат(КонецПериода, "ДЛФ=Д"), НСтр("ru='<без ограничения>';uk='<без обмеження>'")));
	КонецЕсли;
	
	// Общие отборы
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	СписокСчетов.Добавить(Неопределено);
	
	МассивСписков = Новый Массив;
	МассивСписков.Добавить("СписокПлатежей");
	МассивСписков.Добавить("ЗаказыКПоступлению");
	МассивСписков.Добавить(СписокКОплате);
	
	Для каждого ИмяСписка из МассивСписков Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[ИмяСписка],
			"Организация",
			СписокОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(Организация));
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[ИмяСписка],
			"БанковскийСчет",
			СписокСчетов,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(БанковскийСчетОтбор));
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[ИмяСписка],
			"Валюта",
			ВалютаСчета,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(ВалютаСчета));
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[ИмяСписка],
			"КонтрагентПредставление",
			КонтрагентПредставление,
			ВидСравненияКомпоновкиДанных.Содержит,
			,
			ЗначениеЗаполнено(КонтрагентПредставление));
	КонецЦикла;
	
	// Список платежей
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	СписокПлатежей.Параметры.УстановитьЗначениеПараметра("КонецПериода", ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецПериода));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПлатежей,
		"ПроведеноБанком",
		?(ПроведеноБанкомОтбор = "Проведенные", Истина, Ложь),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ПроведеноБанкомОтбор <> "ВсеПлатежи");
	
	// Заявки и заказы к оплате
	Граница = Новый Граница(?(ЗначениеЗаполнено(ДатаКОплате), КонецДня(ДатаКОплате), ДатаКОплате), ВидГраницы.Включая);
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		ЗаявкиКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	Иначе
		ЗаказыКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	КонецЕсли;
	
	// Заказы к поступлению
	Граница = Новый Граница(?(ЗначениеЗаполнено(ДатаКПоступлению), КонецДня(ДатаКПоступлению), ДатаКПоступлению), ВидГраницы.Включая);
	ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	
	Для каждого ЭлементСписка Из СписокОперацийПоступления Цикл
		ЗаказыКПоступлению.Параметры.УстановитьЗначениеПараметра(ЭлементСписка.Значение, ЭлементСписка.Пометка);
	КонецЦикла;
	
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		
		ВыбранныеОперации = Новый Массив;
		Для Каждого ЭлементСписка Из СписокОперацийОплаты Цикл
			Если ЭлементСписка.Пометка Тогда
				ВыбранныеОперации.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[СписокКОплате],
			"ХозяйственнаяОперация",
			ВыбранныеОперации,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина);
	Иначе
		Для каждого ЭлементСписка Из СписокОперацийОплаты Цикл
			ЗаказыКОплате.Параметры.УстановитьЗначениеПараметра(ЭлементСписка.Значение, ЭлементСписка.Пометка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	ОбновитьОстаткиДенежныхСредств();
	
	ОбновитьОстаткиИОбороты();
	ОбновитьКПоступлению();
	ОбновитьКОплате();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиДенежныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаОстаток        КАК ТекущийОстаток,
	|	ДенежныеСредстваБезналичные.КСписаниюОстаток    КАК КСписаниюВсего
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(, БанковскийСчет = &БанковскийСчет) КАК ДенежныеСредстваБезналичные
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчетОтбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийОстаток = Выборка.ТекущийОстаток;
		КСписаниюВсего = Выборка.КСписаниюВсего;
	Иначе
		ТекущийОстаток = 0;
		КСписаниюВсего = 0;
	КонецЕсли;
	
	ДоступноВсего = ТекущийОстаток - КСписаниюВсего;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиИОбороты()
	
	НачальныйОстаток = 0;
	Поступление = 0;
	Списание = 0;
	КонечныйОстаток = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваБезналичные.СуммаНачальныйОстаток КАК НачальныйОстаток,
	|	ДенежныеСредстваБезналичные.СуммаПриход КАК Поступление,
	|	ДенежныеСредстваБезналичные.СуммаРасход КАК Списание,
	|	ДенежныеСредстваБезналичные.СуммаКонечныйОстаток КАК КонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, БанковскийСчет = &БанковскийСчет) КАК ДенежныеСредстваБезналичные
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",
		?(ЗначениеЗаполнено(КонецПериода), Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая), КонецПериода));
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчетОтбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачальныйОстаток = Выборка.НачальныйОстаток;
		Поступление = Выборка.Поступление;
		Списание = Выборка.Списание;
		КонечныйОстаток = Выборка.КонечныйОстаток;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКОплате()
	
	Если Не ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		КОплатеВсего = 0;
		ДоступноМинусКОплате = 0;
		Возврат;
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Неопределено);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	
	Если ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЗаявкиКОплате.Сумма) КАК КОплатеВсего
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР КОГДА ДенежныеСредстваКВыплате.СуммаОстаток < 0 ТОГДА
		|		-ДенежныеСредстваКВыплате.СуммаОстаток
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(&ДатаПлатежа, ) КАК ДенежныеСредстваКВыплате
		|		
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств) В (
		|			ТИП(Документ.ЗаявкаНаРасходованиеДенежныхСредств),
		|			ТИП(Документ.РаспоряжениеНаПеремещениеДенежныхСредств)
		|			)
		|		И ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств.Статус В (
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате)
		|			)
		|		И ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств.КассаБанковскийСчет В (&СписокСчетов)
		|		И (ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств.Организация В (&СписокОрганизаций)
		|			ИЛИ НЕ &ОрганизацияЗаполнена)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР КОГДА ДенежныеСредстваКВыплате.СуммаОстаток < 0 ТОГДА
		|			-ДенежныеСредстваКВыплате.СуммаОстаток
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(&ДатаПлатежа, ) КАК ДенежныеСредстваКВыплате
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.ВедомостиНаВыплатуЗарплаты КАК ТаблицаВедомостей
		|		ПО
		|			ТаблицаВедомостей.Ведомость = ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств
		|			И ТаблицаВедомостей.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) 
		|			И ТаблицаВедомостей.Ссылка.КассаБанковскийСчет В (&СписокСчетов)
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств) НЕ В (
		|			ТИП(Документ.ЗаявкаНаРасходованиеДенежныхСредств),
		|			ТИП(Документ.РаспоряжениеНаПеремещениеДенежныхСредств)
		|		)
		|		И (ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств.Организация В (&СписокОрганизаций)
		|			ИЛИ НЕ &ОрганизацияЗаполнена)
		|	) КАК ЗаявкиКОплате
		|";
		
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
		Запрос.УстановитьПараметр("ОрганизацияЗаполнена", ЗначениеЗаполнено(Организация));
		Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
		
		Граница = Новый Граница(?(ЗначениеЗаполнено(ДатаКОплате), КонецДня(ДатаКОплате), ДатаКОплате), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаПлатежа", Граница);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КОплатеВсего = Выборка.КоплатеВсего;
		Иначе
			КОплатеВсего = 0;
		КонецЕсли;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(-РасчетыСПоставщиками.КОплатеОстаток) КАК КОплатеВсего
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа, ЗаказПоставщику <> НЕОПРЕДЕЛЕНО) КАК РасчетыСПоставщиками
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
		|ГДЕ
		|	РасчетыСПоставщиками.КОплатеОстаток < 0
		|	И (РегистрАналитикаУчетаПоПартнерам.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	СУММА(-РасчетыСКлиентами.КОплатеОстаток) КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаПлатежа, ЗаказКлиента ССЫЛКА Документ.ВозвратТоваровОтКлиента) КАК РасчетыСКлиентами
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
		|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
		|	
		|ГДЕ
		|	РасчетыСКлиентами.КОплатеОстаток < 0
		|	И РасчетыСКлиентами.ЗаказКлиента.СпособКомпенсации = ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства)
		|	И (РегистрАналитикаУчетаПоПартнерам.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Граница = Новый Граница(?(ЗначениеЗаполнено(ДатаКОплате), КонецДня(ДатаКОплате), ДатаКОплате), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаПлатежа", Граница);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			КОплатеВсего = Выборка.КОплатеВсего;
		Иначе
			КОплатеВсего = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступноМинусКОплате = ДоступноВсего - КОплатеВсего;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКПоступлению()
	
	Если Не ЗначениеЗаполнено(БанковскийСчетОтбор) Тогда
		КПоступлениюВсего = 0;
		Возврат;
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(БанковскийСчетОтбор);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	СписокСчетов.Добавить(Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|
	|	СУММА(ЗаказыКПоступлению.Сумма) КАК КПоступлениюВсего
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСКлиентами.КОплатеОстаток КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаПлатежа,
	|			ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	|			И ТИПЗНАЧЕНИЯ(ЗаказКлиента) <> ТИП(Документ.ПередачаТоваровМеждуОрганизациями)) КАК РасчетыСКлиентами
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|			ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|	ГДЕ
	|		РасчетыСКлиентами.КОплатеОстаток > 0
	|		И (КлючиАналитики.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И РасчетыСКлиентами.Валюта = &Валюта
	|		И ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В
	|			(ТИП(Документ.РеализацияТоваровУслуг), ТИП(Документ.АктВыполненныхРабот)) ТОГДА
	|			ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.БанковскийСчетОрганизации, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСКлиентами.ЗаказКлиента.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))
	|		КОНЕЦ В (&СписокСчетов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщиками.КОплатеОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа, ЗаказПоставщику ССЫЛКА Документ.ВозвратТоваровПоставщику) КАК РасчетыСПоставщиками
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|			ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
	|	ГДЕ
	|		РасчетыСПоставщиками.КОплатеОстаток > 0
	|		И (КлючиАналитики.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И РасчетыСПоставщиками.Валюта = &Валюта
	|		И ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)) В (&СписокСчетов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДенежныеСредства.СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ДатаПлатежа, ) КАК ДенежныеСредства
	|	
	|	ГДЕ
	|		ДенежныеСредства.СуммаОстаток > 0
	|		И (ДенежныеСредства.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И ДенежныеСредства.Валюта = &Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДенежныеСредства.СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваВПути.Остатки(&ДатаПлатежа,
	|			Получатель В (&СписокСчетов)
	|			И ВидПереводаДенежныхСредств В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ИнкассацияВБанк),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПеречислениеНаДругойСчет))
	|			) КАК ДенежныеСредства
	|	
	|	ГДЕ
	|		ДенежныеСредства.СуммаОстаток > 0
	|		И (ДенежныеСредства.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И ДенежныеСредства.Валюта = &Валюта
	|	
	|	) КАК ЗаказыКПоступлению
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта", ВалютаСчета);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	Граница = Новый Граница(?(ЗначениеЗаполнено(ДатаКПоступлению), КонецДня(ДатаКПоступлению), ДатаКПоступлению), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаПлатежа", Граница);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		КПоступлениюВсего = Выборка.КПоступлениюВсего;
	Иначе
		КПоступлениюВсего = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокОперацийПоступленияПредставление(СписокОпераций)
	
	СписокОперацийПоступленияПредставление = "";
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОперацийПоступленияПредставление = СписокОперацийПоступленияПредставление +
				?(ЗначениеЗаполнено(СписокОперацийПоступленияПредставление), ", ", "") + ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОперацийПоступленияПредставление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокОперацийОплатыПредставление(СписокОпераций)
	
	СписокОперацийОплатыПредставление = "";
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОперацийОплатыПредставление = СписокОперацийОплатыПредставление
				+ ?(ЗначениеЗаполнено(СписокОперацийОплатыПредставление), ", ", "")
				+ ?(ЗначениеЗаполнено(ЭлементСписка.Представление), ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОперацийОплатыПредставление;
	
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Знач Оповещение, Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(Новый ОписаниеОповещения("ОбработатьШтрихкодыЗавершение", ЭтотОбъект, Новый Структура("Данные, Оповещение", Данные, Оповещение)), Ссылка);
		Возврат;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	ОбработатьШтрихкодыФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыЗавершение(ДополнительныеПараметры) Экспорт
	
	Данные = ДополнительныеПараметры.Данные;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ОбработатьШтрихкодыФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыФрагмент(Знач Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеПоРаспоряжению(Команда)
	
	ТекущиеДанные = Элементы.ЗаказыКПоступлению.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			
			СтруктураОснование = Новый Структура;
			СтруктураОснование.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
			СтруктураОснование.Вставить("Организация", ТекущиеДанные.Организация);
			СтруктураОснование.Вставить("КОплате", ТекущиеДанные.СуммаКОплате);
			СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
		Иначе
			
			СтруктураПараметры.Вставить("Основание", ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	Иначе
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Организация", ТекущиеДанные.Организация);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ТекущиеДанные.ХозяйственнаяОперация);
		Если НесколькоРасчетныхСчетов Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", ТекущиеДанные.БанковскийСчет);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("КассаОтправитель", ТекущиеДанные.Плательщик);
		ДанныеЗаполнения.Вставить("БанковскийСчетОтправитель", ТекущиеДанные.Плательщик);
		ДанныеЗаполнения.Вставить("Контрагент", ТекущиеДанные.Плательщик);
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТекущиеДанные.СуммаКОплате);
		ДанныеЗаполнения.Вставить("ПодотчетноеЛицо", ТекущиеДанные.Плательщик);
		
		Если ТекущиеДанные.Свойство("Валюта") Тогда
			ДанныеЗаполнения.Вставить("Валюта", ТекущиеДанные.Валюта);
		КонецЕсли;
		
		Если ТекущиеДанные.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
			ДанныеЗаполнения.Вставить("СуммаКонвертации", ТекущиеДанные.СуммаКОплате);
			ДанныеЗаполнения.Вставить("ВалютаКонвертации", ТекущиеДанные.Валюта);
		КонецЕсли;
		
		ТипПлатежа = СоответствиеХозОперацийТипамПлатежей().Получить(ТекущиеДанные.ХозяйственнаяОперация);
		Если ТипПлатежа <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("ТипПлатежногоДокумента", ТипПлатежа);
			Если ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер")
				Или ТипПлатежа = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение") Тогда
				ДанныеЗаполнения.Вставить("ПроведеноБанком", Истина);
			КонецЕсли;
			ДанныеЗаполнения.Вставить("ДатаПроведенияБанком", ТекущаяДата());
		КонецЕсли;
		
		СтруктураПараметры.Вставить("Основание", ДанныеЗаполнения);
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПоступлениеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.ЗаказыКПоступлению);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
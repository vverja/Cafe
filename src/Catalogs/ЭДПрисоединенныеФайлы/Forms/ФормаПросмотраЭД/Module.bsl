
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ОбъектСправочника = Параметры.Ключ.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.МассивОтпечатков) Тогда
		СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(Параметры.МассивОтпечатков, УникальныйИдентификатор);
	КонецЕсли;
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеЭД, "СпособОбменаЭД");

	ИнициализацияДанныхНаСервере(Отказ);
	
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.ГруппаКомандЕще.Видимость = Ложь;
		Элементы.ОсновныеКоманды.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
		Элементы.ТекстДокументИБ.Заголовок = НСтр("ru='Настройка ЭДО';uk='Настройка ЕДО'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.КлючУникальности = Объект.Ссылка;
	
	Если НЕ Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЭтоАдресВременногоХранилища(АдресФайлаВХранилище) Тогда
			#Если ВебКлиент Тогда
				ПутьКФайлуПросмотра = АдресФайлаВХранилище;
			#Иначе
				ПутьКФайлуПросмотра = ПолучитьИмяВременногоФайла(РасширениеФайла);
				ДДФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
				ДДФайла.Записать(ПутьКФайлуПросмотра);
			#КонецЕсли
			Если СтрНайти("HTML PDF DOCX XLSX", ВРег(РасширениеФайла)) > 0 Тогда
				Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДругойФормат;
				Элементы.СтраницаТабличныйДокумент.Видимость = Ложь;
			Иначе
				#Если НЕ ВебКлиент Тогда
					ЗапуститьПриложение(ПутьКФайлуПросмотра);
				#КонецЕсли
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ДопДанные") Тогда
		СохранитьЭДНаДиск(Неопределено);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Описание = Новый ОписаниеОповещения("ПослеПолученияОтпечатков", ЭтотОбъект);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Описание, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	ИначеЕсли ИмяСобытия = "ОповеститьОСозданииУведомления" И Параметр = Объект.Ссылка Тогда
		ПоместитьТекстУточненияВОбъект(ТекстУточнения);
		ИзменитьВидимостьДоступность();
		СтатусОтклонен = Истина;
		ИзменитьСтатусОтклонить();
		Оповестить("ОбновитьСостояниеЭД");
	ИначеЕсли ИмяСобытия = "ПроведенаПроверкаЭП" Тогда
		Для Каждого ЭД Из Параметр Цикл
			Если ЭД = Объект.Ссылка Тогда
				ОбновитьОтображениеДанных();
				ЗаполнитьТаблицуЭП();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	ОбновитьВидимостьДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ИДПараметра = "ЭлектронноеВзаимодействие." + УникальныйИдентификатор;
	ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
	Если ПараметрыФормы <> Неопределено Тогда
		ПараметрыПриложения.Удалить(ИДПараметра);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура ТекстДокументИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.ВладелецФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВыводДопДанныхПриИзменении(Элемент)
	
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	ИзменитьТекстСопроводительнойЗаписки(Объект.ДополнительнаяИнформация);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыЭП

&НаКлиенте
Процедура ЭППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ТаблицаЭП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда
		ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ОбменСКонтрагентамиКлиент.ПерезаполнитьДокумент(Объект.ВладелецФайла, ЭтотОбъект, , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьАннулироватьЭД(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Модифицированность = Ложь;
	ТекстВопроса = НСтр("ru='Внимание! Не рекомендуется выбирать документ отражения в учете вручную. Продолжить?';uk='Увага! Не рекомендується вибирати документ відображення в обліку вручну. Продовжити?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументПродолжить", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	ПрисоединенныйФайл = Объект.Ссылка;
	ДанныеФайла = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП(ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ТаблицаЭП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийЭДО(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ТаблицаЭП.ТекущиеДанные.НомерСтроки, Элементы.ТаблицаЭП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru='Выберите сертификат в списке установленных подписей.';uk='Виберіть сертифікат в списку встановлених підписів.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.УтвердитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправитьЭД(Команда)
	
	ОчиститьСообщения();
	ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ОбменСКонтрагентамиКлиент.ОтправитьПовторноЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	ОчиститьСообщения();
	ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	ОтклонитьАннулироватьЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ОтклонитьАннулирование = Ложь;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОтклонитьАннулирование = Истина;
	ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	Комментарий = "";
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ОбработатьПеренаправлениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДополнительнаяИнформация) Тогда
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании(Объект.ВладелецФайла, Новый Структура("Источник", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЭДОПродолжить", ЭтотОбъект);
	ВводСтрокиЗаголовок = НСтр("ru='Укажите причины завершения документооброта';uk='Вкажіть причини завершення документообігу'");
	ПоказатьВводСтроки(Оповещение, , ВводСтрокиЗаголовок, , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияДанныхНаСервере(Отказ)
	
	ТабличныйДокументКопияВерна = ПолучитьОбщийМакет("ЭД_ИдентификаторДокумента").ПолучитьОбласть("КопияВерна");
	ТабличныйДокументКопияВерна.Параметры.ДатаПечати = Формат(ТекущаяДатаСеанса(), "ДЛФ=DD");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтатусОтклонен = (Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
			ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ Объект.Ссылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
			
		ТребуетсяПодпись = НеобходимоПодписать();
		ОбновитьСтатусЭД();
		Заголовок = ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
		ЗаполнитьТаблицуЭП();
		
		Если НЕ Отказ Тогда
			ВыполнитьПросмотрЭДИзБДСервер(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПерезаполнитьКомментарии();

	МассивОтпечатков = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
	СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(МассивОтпечатков, УникальныйИдентификатор);
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекстСопроводительнойЗаписки(ТекстЗаписки)
	
	СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", ТекстЗаписки);
	ИзменитьЗначенияРеквизитовНаСервере(Объект.Ссылка, СтруктураПараметров);
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("Описание") И ЗначениеЗаполнено(Ссылка.Ответственный) Тогда
		СтруктураПараметров.Вставить("Ответственный", Ссылка.Ответственный);
	КонецЕсли;
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеренаправлениеЭД()
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(Объект.Ссылка);
	ОбменСКонтрагентамиСлужебныйКлиент.ИзменитьОтветственного(МассивЭД, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
		|	ЖурналСобытийЭД.Дата КАК Дата,
		|	ЖурналСобытийЭД.СтатусЭД,
		|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
		|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru='%1, %2 (статус - %3, ответственный - %4):
        |%5'
        |;uk='%1, %2 (статус - %3, відповідальний - %4):
        |%5'");
	ПредыдущийКоммент = "";
	ПервыйКоммент = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКоммент = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКоммент = ТекущийКоммент Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКоммент = ТекущийКоммент;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКоммент);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКоммент = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКоммент = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКоммент, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКоммент = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальныйИДВнешний(ЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "УникальныйИДВнешний");
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Отклонен);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Объект.Ссылка, СтруктураПараметров, Ложь);
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступность()
	
	Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатков = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
	Иначе
		МассивОтпечатков = Новый Массив;
	КонецЕсли;

	ЕстьПравоОбработки = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь);
	ЕстьВозможностьПодписания = ЕстьПравоОбработки И ЗначениеЗаполнено(МассивОтпечатков)
		И ДоступныДляПодписиСертификаты(МассивОтпечатков);
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	
	МожноОтклонитьЭтотЭД = ЕстьПравоОбработки И ОбменСКонтрагентамиСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД);
	МожноАннулироватьЭтотЭД = ЕстьПравоОбработки И ОбменСКонтрагентамиСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
	Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ДОЗакрыт		= ОбменСКонтрагентамиСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.ВладелецФайла);
	СтатусОтклонен	= ОбменСКонтрагентамиСлужебныйВызовСервера.ЭДОтклонен(Объект.СтатусЭД);
	ЭтоСлужебный	= ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Объект.Ссылка);
	
	ЭДТитулПродавца	= Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
						ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
						ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
					
						
		
	СостоянияЭДОЗавершен = Новый Массив;
	СостоянияЭДОЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЭДОЗавершен.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	
	ДОЗавершен = ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьСостояниеЭДО(Объект.ВладелецФайла, СостоянияЭДОЗавершен);
	
	Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")
		И ЭлектронноеВзаимодействиеСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаУтвердить.Заголовок = НСтр("ru='Утвердить и отправить';uk='Затвердити та відправити'");
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеСлужебный.НемедленнаяОтправкаЭД() Тогда
		КомандаПодписиОтправки = Элементы.КомандаПодписатьОтправить;
	Иначе
		КомандаПодписиОтправки = Элементы.КомандаПодписать;
	КонецЕсли;
	Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандВх;
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			Элементы.КомандаПерезаполнитьДокументУчета.Видимость = Ложь;
		ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			Элементы.КомандаПерезаполнитьДокументУчета.Заголовок = НСтр("ru='Сопоставить номенклатуру';uk='Зіставити номенклатуру'");
			Элементы.КомандаВыбратьДокумент.Видимость = Ложь;
		КонецЕсли;
		
		ЭтоПолученныйКаталогТоваров = Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
			И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен;
		Элементы.КомандаПерезаполнитьДокументУчета.Доступность = НЕ СтатусОтклонен И НЕ(ЭтоПолученныйКаталогТоваров);
		
		ВерсияФорматаПакета = ОбменСКонтрагентамиСлужебный.ВерсияПакетаЭД(Объект.Ссылка);
		ЭтоСчетВерсии30 = (Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату)
			И (ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30);
			
		
		Элементы.КомандаУтвердить.Доступность = Не ДОЗакрыт
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			И НЕ(Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении));
			
		КомандаПодписиОтправки.Видимость   = (ЕстьВозможностьПодписания
					ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				И ТребуетсяПодпись
				И Не ЭтоСчетВерсии30;
			
		КомандаПодписиОтправки.Доступность = НЕ СтатусОтклонен И Не ДОЗакрыт И ОтраженВУчете
				И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				И Не ВторойТитулПодписан();
			
		Элементы.ЗаголовокОтраженВУчете.Доступность = НЕ СтатусОтклонен;
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		Элементы.КомандаВыбратьДокумент.Видимость = Ложь;
		Элементы.КомандаПерезаполнитьДокументУчета.Видимость = Ложь;
		
		КомандаПодписиОтправки.Видимость   = (ЕстьВозможностьПодписания ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан) И ТребуетсяПодпись;
		КомандаПодписиОтправки.Доступность = НЕ СтатусОтклонен И Не ДОЗакрыт
			И (ОтраженВУчете ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
				ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении)
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
			
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
			Элементы.КомандаОтправитьПовторно.Видимость = Истина;
			Элементы.КомандаОтправитьПовторно.Доступность = НЕ СтатусОтклонен
				И ОтраженВУчете
				ИЛИ (Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
					ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении);
		КонецЕсли;
		
		ЗапискаДоступна = (НЕ ЭтоСлужебный
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке));
		
		Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ ЗапискаДоступна;
		Элементы.ОчиститьЗаписку.Доступность = ЗапискаДоступна;
		
		Элементы.КомандаУтвердить.Видимость = НЕ (ЕстьВозможностьПодписания И ТребуетсяПодпись);
		Элементы.КомандаУтвердить.Доступность = НЕ ДОЗакрыт И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
	ИначеЕсли Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		Элементы.КомандаВыбратьДокумент.Видимость = Ложь;
		Элементы.КомандаПодписать.Видимость     = ЕстьВозможностьПодписания;
		Элементы.КомандаПодписать.Доступность   = (ЕстьВозможностьПодписания
			И НЕ СтатусОтклонен И Объект.СтатусЭД <> Перечисления.СтатусыЭД.ПолностьюПодписан);
		Элементы.КомандаУтвердить.Видимость   = НЕ ЕстьВозможностьПодписания;
		Элементы.КомандаУтвердить.Доступность = (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
		
	КонецЕсли;
	
	Элементы.СтраницаСтатусов.Видимость = Ложь;
	
	Элементы.КомандаАннулировать.Доступность = МожноАннулироватьЭтотЭД;
	Элементы.КомандаОтклонить.Доступность = (НЕ (СтатусОтклонен ИЛИ ЭтоСлужебный ИЛИ ДОЗакрыт) И МожноОтклонитьЭтотЭД)
		И Не ЕстьОтправленноеУведомление();
		
	Элементы.ГруппаКомандАннулирование.Видимость = Ложь;
	
	
	Если СтатусОтклонен Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.Ссылка.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		
		Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			Элементы.ПричиныОтклоненияПричинаОтклонения.Заголовок = НСтр("ru='Ошибка обмена';uk='Помилка обміну'");
			НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		КонецЕсли;
		
	ИначеЕсли ЭДОАннулированИлиВПроцессе() Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = СсылкаНаЭД.ПричинаОтклонения;
		
		Элементы.СтраницаОтклонение.Видимость = Истина;
		
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru='Причина аннулирования:';uk='Причина анулювання:'");
		Элементы.КомандаОтклонить.Доступность = Ложь;
		Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			И Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЭлектронныйДокументВладелец, "СтатусЭД") = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			Элементы.ГруппаКомандАннулирование.Видимость = Истина;
			Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
			Элементы.КомандаАннулировать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.КомандаПеренаправить.Видимость = НЕ ЭтоСлужебный;
	
	Элементы.СтраницаКомментарии.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(ВсеКомментарии);
	Элементы.СтраницаСопроводительнаяЗаписка.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.ДополнительнаяИнформация);
	
	Элементы.КомандаЖурналСобытийЭДО.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусЭД()
	
	СтатусЭД = Объект.Ссылка.СтатусЭД;
	ДатаИзмененияСтатусаЭД = Объект.Ссылка.ДатаИзмененияСтатусаЭД;
	
	ТекстСостояния = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.ВладелецФайла);
	ТекстДокументИБ = Строка(Объект.ВладелецФайла);
	
	ЗапросПоОтражению = Новый Запрос;
	ЗапросПоОтражению.УстановитьПараметр("СсылкаНаОбъект", Объект.ВладелецФайла);
	
	ЗапросПоОтражению.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЭлектронныйДокумент, "ДатаФормированияЭДОтправителем");
		ОтраженВУчете = (Объект.Ссылка = Выборка.ЭлектронныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭП()
	
	ТаблицаВременная = РеквизитФормыВЗначение("ТаблицаЭП");
	ТаблицаВременная.Очистить();
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "СоглашениеЭД,ВидЭД,ЭлектронныеПодписи");
	СоглашениеЭД = СвойстваЭД.СоглашениеЭД;
	
	ПроверятьСертификатыПодписей = Ложь;
	Если ЗначениеЗаполнено(СоглашениеЭД) Тогда
		ПроверятьСертификатыПодписей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПроверятьСертификатыПодписей");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СоглашениеЭД) ИЛИ НЕ ПроверятьСертификатыПодписей Тогда

		ВидЭД = СвойстваЭД.ВидЭД;

		ЭлПодписи = СвойстваЭД.ЭлектронныеПодписи.Выгрузить();

		Для Каждого ТекСтрока Из ЭлПодписи Цикл
			НоваяСтрока = ТаблицаВременная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
			НоваяСтрока.НомерСтроки = ТаблицаВременная.Количество();
		КонецЦикла;

		ЗначениеВРеквизитФормы(ТаблицаВременная, "ТаблицаЭП");

	Иначе
		МассивОтпечатковОжидаемыхСертификатов = ОбменСКонтрагентамиСлужебный.ОтпечаткиОжидаемыхСертификатов(Объект.Ссылка);

		Для Каждого ТекСтрока Из Объект.Ссылка.ЭлектронныеПодписи Цикл
			НоваяСтрока = ТаблицаВременная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
				НоваяСтрока.ОтсутствуетВСписке = Истина;
				НоваяСтрока.ВыводКартинки = 1;
			Иначе
				НоваяСтрока.ВыводКартинки = 0;
			КонецЕсли;
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		ЗначениеВРеквизитФормы(ТаблицаВременная, "ТаблицаЭП");

	КонецЕсли;
	
	Элементы.СтраницаПодписиИСтатусы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Подписи %1';uk='Підписи %1'"), 
		?(ТаблицаВременная.Количество() = 0, "", "(" + ТаблицаВременная.Количество() + ") "));
		
	Если ТаблицаЭП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВернаПредставление = ?(ТекСтрока.ПодписьВерна, НСтр("ru='Верна';uk='Вірна'"), НСтр("ru='Неверна';uk='Невірна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru='Не проверена';uk='Не перевірена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать()
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если НЕ СтатусОтклонен Тогда
		
		Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.Ссылка.ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
			ФлагПодписи = Истина;
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ФлагПодписи = Объект.Ссылка.ПодписанЭП;
			ИначеЕсли Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				
				Если Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					
					ФлагПодписи = Объект.ЭлектронныйДокументВладелец.ПодписанЭП;
					
				Иначе
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП
					|ИЗ
					|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Продавец)
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
					|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
					|				ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
					|			ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
					|		КОНЕЦ
					|	И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
					|			ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
					|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка",        Объект.Ссылка.СоглашениеЭД);
					Запрос.УстановитьПараметр("ВидЭД",         Объект.Ссылка.ВидЭД);
					Запрос.УстановитьПараметр("НаправлениеЭД", Объект.Ссылка.НаправлениеЭД);
					
					Результат = Запрос.Выполнить().Выбрать();
					Результат.Следующий();
					
					ФлагПодписи = Результат.ИспользоватьЭП;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Функция ДоступныДляПодписиСертификаты(МассивОтпечатков)
	
	ЕстьДоступныеСертифкаты = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДоступныеСертификаты(МассивОтпечатков, Объект.Ссылка);
	
	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	ВозвращаемыйПараметр = ИспользуютсяЭП И ЕстьДоступныеСертифкаты И ТребуетсяПодпись;
		
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПросмотрЭДИзБДСервер(Отказ = Ложь)
	
	СтруктураПодписей = Новый Структура();
	СтруктураПодписей.Вставить("Подписи", ТаблицаЭП.Выгрузить(, "КомуВыданСертификат, НомерСтроки"));
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
	
	ДанныеЭД = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(Объект.Ссылка, ПараметрыПросмотра);
	
	Если ДанныеЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокументФормы = ДанныеЭД;
		ИсходныйТабличныйДокумент = ДанныеЭД;
		ОпределитьНаличиеДопДанныхСкрытьФлаг();
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
		Элементы.СтраницаДругойФормат.Видимость = Ложь;
		Элементы.СтраницаТабличныйДокумент.Видимость = Истина;
		
		ОбновитьВидимостьДополнительнойИнформации();
		Элементы.КомандаОтображатьКопияВерна.Пометка= Истина;

	Иначе
		Элементы.СтраницаДругойФормат.Видимость = Истина;
		Элементы.СтраницаТабличныйДокумент.Видимость = Ложь;
		Если ТипЗнч(ДанныеЭД) = Тип("Строка") Тогда
			АдресФайлаВХранилище = ДанныеЭД;
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ЗаполнитьТаблицуЭП();
	ВыполнитьПросмотрЭДИзБДСервер();
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	ОбновитьСтатусЭД();
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПерепривязатьЭлектронныйДокумент(ВыбранноеЗначение)
	
	ЭлектронныйДокумент = РеквизитФормыВЗначение("Объект");
	СтарыйВладелец = ЭлектронныйДокумент.ВладелецФайла;
	ЭлектронныйДокумент.ВладелецФайла = ВыбранноеЗначение;
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент.Автор) Тогда
		ЭлектронныйДокумент.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	ЭлектронныйДокумент.Записать();
	
	ОбновитьСостояниеЭДВладельцев(ЭлектронныйДокумент.Ссылка, СтарыйВладелец, ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ЭлектронныйДокумент, "Объект");
	
	ТекстДокументИБ = Строка(Объект.ВладелецФайла.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭДВладельцев(ЭД, СтарыйВладелец, НовыйВладелец)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаСтарыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	(НЕ СостоянияЭД.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка))
	|	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаНовыйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Запрос.УстановитьПараметр("СсылкаНаСтарыйДокумент", СтарыйВладелец);
	Запрос.УстановитьПараметр("СсылкаНаНовыйДокумент", НовыйВладелец);
	
	Выборка = Запрос.ВыполнитьПакет();
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(СтарыйВладелец, Неопределено);
	
	Результат2 = Выборка[1].Выбрать();
	Если НЕ Результат2.Следующий() Тогда
		ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(НовыйВладелец, ЭД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	
	СтруктураСертификата = ОбменСКонтрагентамиСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = ТаблицаЭП[НомерСтроки-1].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка.СоглашениеЭД) Тогда
		Возврат ;
	КонецЕсли;
	
	ОбъектЭД = РеквизитФормыВЗначение("Объект");
	НайденнаяСтрока = ОбъектЭД.ЭлектронныеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = Объект.Ссылка.СоглашениеЭД.ПолучитьОбъект();
		
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат;
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		
		СертификатДобавлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда 
		ТекстВопроса = НСтр("ru='Добавить сертификат %1 в список ожидаемых сертификатов контрагента?';uk='Додати сертифікат %1 у список очікуваних сертифікатів контрагента?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ДанныеПодписи.КомуВыданСертификат);
		ДопДанные = Новый Структура("ДанныеПодписи", ДанныеПодписи);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСертификатВДоверенныеЗавершить", ЭтотОбъект, ДопДанные);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТекстУточненияВОбъект(ТекстУточнения)
	
	ЭлектронныйДокумент = Объект.Ссылка.ПолучитьОбъект();
	ЭлектронныйДокумент.ПричинаОтклонения = ТекстУточнения;
	ЭлектронныйДокумент.Записать();
	ЗначениеВРеквизитФормы(ЭлектронныйДокумент, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДополнительнойИнформации()
	
	ТабличныйДокументФормы = ИсходныйТабличныйДокумент.ПолучитьОбласть();
	
	Если ОтключитьВыводДопДанных Тогда
		ИменаОбластей = "ОбластьДД, ОбластьДДСЭП, ОбластьДДБезЭП, ОбластьДДСЭП_УС, ОбластьДДСЭП_У, ОбластьДДСЭП_С";
		ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ТабличныйДокументФормы, ИменаОбластей);
		
		ИменаОбластей = "ДопДанныеШапки_Шапка";
		ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ТабличныйДокументФормы, ИменаОбластей,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	// Добавление области Копия верна
	Если Не ОтключитьВыводКопияВерна Тогда
		ТабличныйДокументФормы.Вывести(ТабличныйДокументКопияВерна);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеДопДанныхСкрытьФлаг()
	
	СсылкаНаЭД = Объект.Ссылка;
	
	Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик 
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		
		Тогда
		
		ЕстьДопДанные = Истина;
	Иначе
		
		ЕстьДопДанные = Ложь;
	КонецЕсли;
	Элементы.ОтключитьВыводДопДанных.Видимость = ЕстьДопДанные;
	
КонецПроцедуры

&НаСервере
Функция ЭДОАннулированИлиВПроцессе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Аннулирован
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД
	|	И ВЫБОР
	|			КОГДА ЭДВладелецЭД.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовСАннулированием)
	|			ИНАЧЕ ЭДВладелецЭД.СтатусЭД В (&СписокСтатусовСАннулированием)
	|		КОНЕЦ";
		
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	Запрос.УстановитьПараметр("СписокСтатусовСАннулированием", МассивСостояний);
	Запрос.УстановитьПараметр("ЭД", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(СсылкаНаЭД, ОтклонитьАннулирование);
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭД(Отклонить = Ложь)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьАннулироватьЭДПродолжить", ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = Объект.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	ПараметрыЭД = Новый Структура("Организация, Отклонить, ОписаниеОповещения",
		Объект.Организация, Отклонить, ОписаниеОповещения);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, ПараметрыЭД);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьЭДОСервере(Результат)
	
	НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	
	ВладелецЭД = Объект.ВладелецФайла;
	ИзменяемыеДокументы = Новый Массив;
	ИзменяемыеДокументы.Добавить(ВладелецЭД);
	
	ПараметрыЭД = Новый Структура;
	
	Если Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
	Иначе
		СтатусЭД = Перечисления.СтатусыЭД.Доставлен;
	КонецЕсли;
	
		
	ПараметрыЭД.Вставить("СтатусЭД", СтатусЭД);
	ПараметрыЭД.Вставить("Описание", Результат);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Объект.Ссылка, ПараметрыЭД, Ложь);
	
	ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние);
	
КонецПроцедуры

&НаСервере
функция ЕстьОтправленноеУведомление()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""1"" КАК Поле1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	|	И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусЭД";
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭД.УведомлениеОбУточнении);
	Запрос.УстановитьПараметр("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
	
	Результат = Запрос.Выполнить();
	ЕстьУведомление = Истина;
	Если Результат.Пустой() Тогда
		ЕстьУведомление = Ложь;
	КонецЕсли;
	
	Возврат ЕстьУведомление;
	
КонецФункции

&НаСервере
Функция ВторойТитулПодписан()
	
	Результат = Ложь;
	ФайлВторогоТитула = Неопределено; 
	Если ФайлВторогоТитула = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлВторогоТитула, "СтатусЭД");
	Если Статус = Перечисления.СтатусыЭД.ПодготовленКОтправке
		Или Статус = Перечисления.СтатусыЭД.Отправлен
		Или Статус = Перечисления.СтатусыЭД.ПереданОператору
		Или Статус = Перечисления.СтатусыЭД.Доставлен Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ЗавершитьЭДОПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЭДОСервере(Результат);
	
	Оповестить("ОбновитьСостояниеЭД");

КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатков(Отпечатки, Параметры = Неопределено) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаМассивОтпечатков) Тогда
		МассивОтпечатковСервера = ПолучитьИзВременногоХранилища(СсылкаНаМассивОтпечатков);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатков, МассивОтпечатковСервера, Истина);
	КонецЕсли;
	
	СсылкаНаМассивОтпечатков = ПоместитьВоВременноеХранилище(МассивОтпечатков, УникальныйИдентификатор);
	
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ПерепривязатьЭлектронныйДокумент(Результат);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыбЗнач = Объект.ВладелецФайла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументЗавершить", ЭтотОбъект);
		Подсказка = НСтр("ru='Укажите документ отражения в учете';uk='Вкажіть документ відображення в обліку'");
		ПоказатьВводЗначения(ОписаниеОповещения, ВыбЗнач, Подсказка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенныеЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ДанныеПодписи = Неопределено;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ПоказатьСертификат(Элементы.ТаблицаЭП.ТекущиеДанные.НомерСтроки,Элементы.ТаблицаЭП.ТекущиеДанные.Отпечаток);
	ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДанныеПодписи", ДанныеПодписи)
		И ЗначениеЗаполнено(ДанныеПодписи) Тогда
		// Добавим сертификат в Соглашение.
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru='Ошибка добавления сертификата подписи в список ожидаемых сертификатов!';uk='Помилка додавання сертифікату підпису в список очікуваних сертифікатів!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭП();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭДПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ИзменитьВидимостьДоступность();
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаЭП = ТаблицаЭП.Получить(Расшифровка - 1);
	
	ДобавитьСертификатВДоверенные(СтрокаЭП);
	
	Если СтрокаЭП <> Неопределено И НЕ СтрокаЭП.ОтсутствуетВСписке Тогда
		ПоказатьСертификат(СтрокаЭП.НомерСтроки, СтрокаЭП.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("РежимОткрытияОкна") Тогда
		ЭтотОбъект.РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьМодифицированностьФормы = Истина;
		
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
		Объект.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Наименование = Строка(Объект.Контрагент);
		КонецЕсли;
		
		Если Параметры.Свойство("Организация") Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		
		// Заполним по умолчанию профиль настроек ЭДО.
		Если Не ЗначениеЗаполнено(Объект.ПрофильНастроекЭДО) Тогда
			УстановитьЗначенияПоУмолчанию();
		КонецЕсли;
		// При создании из профиля настроек ЭДО, он передается в настройку.
		Если ЗначениеЗаполнено(Объект.ПрофильНастроекЭДО) Тогда
			ПрофильНастроекЭДОПриИзмененииНаСервере();
		КонецЕсли;
		
		ПодготовитьФорму();
	КонецЕсли;
	
	ОбновитьСтатусПодключения();
	
	СкрытьПодменюЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Если объект - является соглашением-Интеркампани, то ничего
	// не выполняем на сервере и при переходе процедуру при открытии, откроем нужную форму.
	Если Объект.ЭтоИнтеркампани Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// При заполнении настройки ЭДО на сервере взведем модифицированность вручную.
	Если УстановитьМодифицированностьФормы Тогда
		ЭтотОбъект.Модифицированность = истина;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
		Элементы.КаталогИсходящихДокументов.КнопкаВыбора = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Прочитать();
		
		ОбновитьСтатусПодключения();
		ЭтаФорма.ОбновитьОтображениеДанных();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ИспользованиеИдентификатораКонтрагентаУникально(Отказ);
	
КонецПроцедуры

// Сохранение сертификатов в объекте из хранилища
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого ДанныеСтроки Из Объект.СертификатыПодписейКонтрагента Цикл
		Если НЕ ПустаяСтрока(ДанныеСтроки.АдресФайлаВХранилище) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресФайлаВХранилище);
			ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
			ТекущийОбъект.СертификатыПодписейКонтрагента[ДанныеСтроки.НомерСтроки - 1].Сертификат = ХранилищеЗначения;
		КонецЕсли;
	КонецЦикла; 
	
	// Помещение нового сертификата шифрования из временного хранилища
	Если Не ПустаяСтрока(АдресСертификатаКонтрагентаДляШифрования) И НЕ ПустаяСтрока(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресСертификатаКонтрагентаДляШифрования);
		ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = ХранилищеЗначения;
	ИначеЕсли ПустаяСтрока(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда 
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура СостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийЭД.Закрыто")
		ИЛИ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийЭД.ОжидаетсяСогласование") Тогда
		
		Если ЧерезОператораЭДО Тогда
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru='При отмене действия соглашения необходимо отклонить приглашение.
                                    |Отклонить?'
                                    |;uk='При скасуванні дії оферти необхідно відхилити запрошення.
                                    |Відхилити?'");
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеСостояния", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Отсоединен");
			ОбновитьСтатусПодключения(Истина);
		КонецЕсли;
	Иначе
		Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
		ОбновитьСтатусПодключения(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильНастроекЭДОПриИзменении(Элемент)
	
	ПрофильНастроекЭДОПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Объект.Наименование = Строка(Объект.Контрагент) + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		", " + Строка(Объект.ДоговорКонтрагента), "");
	
КонецПроцедуры

// Настройки обмена через оператора

&НаКлиенте
Процедура ИдентификаторКонтрагентаПриИзменении(Элемент)
	
	Объект.ИдентификаторКонтрагента = СокрЛП(Объект.ИдентификаторКонтрагента);
	ОпределитьИспользуемыеСпособыОбменаЭД(Неопределено, Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

// Настройки прямого обмена
&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент.ТекстРедактирования, Объект.КаталогВходящихДокументов);
	
	ОбновитьВходящийКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовПриИзменении(Элемент)
	
	ОбновитьВходящийКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент.ТекстРедактирования, Объект.КаталогИсходящихДокументов);
	
	ОбновитьИсходящийКаталог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовПриИзменении(Элемент)
	
	ОбновитьИсходящийКаталог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШифроватьДанныеПакетаЭДПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеШифрованияДанных", ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки)
		ИЛИ ЗначениеЗаполнено(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		ТекстВопроса = НСтр("ru='Настройки шифрования будут очищены. Продолжить?';uk='Настройки шифрування будуть очищені. Продовжити?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСертификатыПодписейПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеПроверкиСертификатов", ЭтотОбъект);
	Если Объект.СертификатыПодписейКонтрагента.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru='Настройки проверка сертификатов подписи контрагентов будут очищены. Продолжить?';uk='Настройки перевірки сертифікатів підпису контрагентів будуть очищені. Продовжити?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ПоместитьВХранилищеСертификат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьВыборФайлаСертификатаШифрования", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, , , Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура;
	ИмяФормыВыбора = ИмяФормыВыбораДоговора(ПараметрыОткрытия);
	
	Попытка
		СтандартнаяОбработка = Ложь;
		ОбработкаПродолжения = Новый ОписаниеОповещения("ДоговорКонтрагентаПродолжениеВыбора", ЭтотОбъект);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия,,,,,
			ОбработкаПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		СтандартнаяОбработка = Истина;
		ВидОперации = НСтр("ru='Открытие формы выбора договора';uk='Відкриття форми вибору договору'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru='Ошибка открытия формы выбора договора';uk='Помилка відкриття форми вибору договору'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 2);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийКомандФормы

&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='В текущую настройку ЭДО внесены изменения. Записать?';uk='У поточну настройку ЕДО внесені зміни. Записати?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашение(Команда)
	
	ДопПараметры = Новый Структура("Действие", "Принять");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект, ДопПараметры);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='В текущую настройку ЭДО внесены изменения. Записать?';uk='У поточну настройку ЕДО внесені зміни. Записати?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашение(Команда)
	
	ДопПараметры = Новый Структура("Действие", "Отклонить");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект, ДопПараметры);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='В текущую настройку ЭДО внесены изменения. Записать?';uk='У поточну настройку ЕДО внесені зміни. Записати?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроек(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ТестНастроекПродолжить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='В текущую настройку ЭДО внесены изменения. Продолжить выполнение теста?';uk='У поточну настройку ЕДО внесені зміни. Продовжити виконання тесту?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", НСтр("ru='Сохранить и выполнить тест.';uk='Зберегти і виконати тест.'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru='Отменить тест.';uk='Скасувати тест.'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , "Выполнить", НСтр("ru='Тест настроек';uk='Тест настройок'"));
	Иначе
		ТестНастроекПродолжить("Выполнить", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРасширенныйРежимНастройкиСоглашения(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьВключениеРасширенногоРежимаНастройки", ЭтотОбъект);
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		ТекстВопроса = НСтр("ru='Изменения расширенного режима будут очищены.
            |Продолжить?'
            |;uk='Зміни розширеного режиму будуть очищені.
            |Продовжити?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Объект.РасширенныйРежимНастройкиСоглашения = Не Объект.РасширенныйРежимНастройкиСоглашения;
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРасширенныйРежимНастройкиСоглашенияНаСервере()
	
	ИсходящиеДокументыПрофиляНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПрофильНастроекЭДО,
		"ИсходящиеДокументы");
	
	// Загружаем ТЧ из профиля настроек ЭДО.
	Объект.ИсходящиеДокументы.Загрузить(ИсходящиеДокументыПрофиляНастроек.Выгрузить());
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользуемыеСпособыОбменаЭД(Объект.ПрофильНастроекЭДО, Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	ИсходящиеДокументыПередНачаломИзмененияНаСервере(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ИсходящиеДокументыПередНачаломИзмененияНаСервере(Отказ)
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения Тогда
		ТекстСообщения = НСтр("ru='Изменение табличной части ""Электронные документы"" возможно:
        |""групповое"" - в Профиле настроек ЭДО;
        |""индивидуальное"" - в расширенном режиме настроек.'
        |;uk='Зміна табличної частини ""Електронні документи"" можлива:
        |""групове"" - в Профілі настройок ЕДО;
        |""індивідуальне"" - в розширеному режимі настройок.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыФормировать" Тогда
		ЗначениеЭлемента = Элемент.ТекущиеДанные.Формировать;
		Если Не ЗначениеЭлемента Тогда
			Элемент.ТекущиеДанные.ИспользоватьЭП = ЗначениеЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИспользоватьЭП И НЕ Элемент.ТекущиеДанные.Формировать Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭП" Тогда
			Элемент.ТекущиеДанные.Формировать = Истина;
		Иначе
			Элемент.ТекущиеДанные.ИспользоватьЭП = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД")
		ИЛИ Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Элемент.ТекущиеДанные.СпособОбменаЭД) Тогда
		
		Элемент.ТекущиеДанные.ИспользоватьЭП = Элемент.ТекущиеДанные.Формировать;
	ИначеЕсли Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КаталогТоваров") Тогда
		
		ИспользуетсяКаталогВСоглашении = Элемент.ТекущиеДанные.Формировать;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПрофильНастроекЭДОПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.ИсходящиеДокументы.ТекущаяСтрока;
	ИсходящиеДокументыПрофильНастроекЭДОПриИзмененииНаСервере(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("CML 2.08", "CML 2.08");
	СписокВыбора.Добавить("CML 4.02", "CML 4.02");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыСертификатыПодписей

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
		ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Обработчик = Новый ОписаниеОповещения("ФайлОбработкаВыбора", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, , , Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
	ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФорму()
	
	ОпределитьИспользуемыеСпособыОбменаЭД();
	
	Если ЧерезКаталог ИЛИ ЧерезЭлектроннуюПочту ИЛИ ЧерезFTP Тогда
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеПодписиЭД") Тогда
			
			Если Объект.ШифроватьДанныеПакетаЭД Тогда
				
				ДокументОбъект = РеквизитФормыВЗначение("Объект");
				ДвоичныеДанныеСертификата  = ДокументОбъект.СертификатКонтрагентаДляШифрования.Получить();
				Если ДвоичныеДанныеСертификата <> Неопределено Тогда
					СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
					ПредставлениеСертификатаКонтрагентаДляШифрования = ПредставлениеСертификата;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
		Объект.Контрагент = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку(ИмяПрикладногоСправочника);
	КонецЕсли;
	
	ИспользуетсяДополнительнаяАналитикаПартнеры = ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры();
	Если ИспользуетсяДополнительнаяАналитикаПартнеры И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ИмяРеквизитаПартнераКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаПартнераКонтрагента);
	КонецЕсли;
	
	АктуальныеЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	Если Не АктуальныеЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		
		ИспользуетсяКаталогВПрограмме = Истина;
		ПараметрыОтбора = Новый Структура("ИсходящийДокумент, Формировать", Перечисления.ВидыЭД.КаталогТоваров, Истина);
		Если Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			ИспользуетсяКаталогВСоглашении = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		ПараметрыАутентификацииНаСайте = СтандартныеПодсистемыСервер.ПараметрыАутентификацииНаСайте();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Партнер.Видимость = Ложь;
	Если Форма.ИспользуетсяДополнительнаяАналитикаПартнеры
		И ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьПартнеровИКонтрагентов") Тогда
		
		Элементы.Партнер.Видимость = Истина;
	КонецЕсли;
	
	Если Форма.ЧерезКаталог Тогда
		
		ОбновитьПутиКаталоговОбмена(Форма);
		
	КонецЕсли;
	
	Элементы.ОтправитьПриглашение.Видимость                              = Форма.ЧерезОператораЭДО
		И (Объект.СтатусПодключения  = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить")
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Отсоединен")
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Ошибка"));
	Элементы.ПринятьПриглашение.Видимость                                = Форма.ЧерезОператораЭДО
		И Объект.СтатусПодключения   = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие");
	Элементы.ОтклонитьПриглашение.Видимость                              = Форма.ЧерезОператораЭДО
		И Объект.СтатусПодключения   = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие");
	
	// Прямой обмен
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезКаталог.Видимость          = Форма.ЧерезКаталог;
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезЭлектроннуюПочту.Видимость = Форма.ЧерезЭлектроннуюПочту;
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезFTP.Видимость              = Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбмена.Видимость                      = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбменаШифрование.Видимость            = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбменаДоверенныеСертификаты.Видимость = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	
	// РасширенныйРежимНастройкиСоглашения
	Элементы.ФормаВключитьРасширенныйРежимНастройкиСоглашения.Заголовок = НСтр("ru='Включить расширенный режим настроек ЭДО';uk='Включити розширений режим настройок ЕДО'");
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		Элементы.ФормаВключитьРасширенныйРежимНастройкиСоглашения.Заголовок = НСтр("ru='Выключить расширенный режим настроек ЭДО';uk='Вимкнути розширений режим настройок ЕДО'");
	КонецЕсли;
	
	Элементы.ПрофильНастроекЭДО.Видимость                         = Не Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИдентификаторОрганизации.Видимость                   = Не Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИдентификаторКонтрагента.Видимость                   = Не Объект.РасширенныйРежимНастройкиСоглашения;
	
	Элементы.ИсходящиеДокументыИдентификаторКонтрагента.Видимость = Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИсходящиеДокументыИдентификаторОрганизации.Видимость = Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИсходящиеДокументыПрофильНастроекЭДО.Видимость       = Объект.РасширенныйРежимНастройкиСоглашения;
	
	Элементы.ДекорацияСтатусПодключения.Ширина = ?(Объект.РасширенныйРежимНастройкиСоглашения, 14, 17);
	
	// Использование ЭП
	Элементы.ИсходящиеДокументыИспользоватьЭП.Видимость = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД") И (Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP);
	Элементы.ГруппаНастройкиПрямогоОбменаШифрование.Видимость = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	Элементы.ГруппаШифрованиеДанныхПакетаЭД.Видимость                          = Объект.ШифроватьДанныеПакетаЭД;
	Элементы.ГруппаНастройкиПрямогоОбменаДоверенныеСертификатыСписок.Видимость = Объект.ПроверятьСертификатыПодписей;
	
	// Доступные состояния соглашения.
	Элементы.Состояние.Доступность = Не Форма.ЧерезОператораЭДО
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПутиКаталоговОбмена(Форма)
	
	ОбновитьВходящийКаталога(Форма);
	ОбновитьИсходящийКаталог(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВходящийКаталога(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ШаблонЗаголовка = НСтр("ru='Полный путь: %1';uk='Повний шлях: %1'");
	
	КаталогВходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			Форма.ПутьКРодительскомуКаталогуПрофильНастроекЭДО, Объект.КаталогВходящихДокументов);
		
	Элементы.ПояснениеКаталогаВходящихДокументов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, КаталогВходящихДокументов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсходящийКаталог(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ШаблонЗаголовка = НСтр("ru='Полный путь: %1';uk='Повний шлях: %1'");
	
	КаталогИсходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			Форма.ПутьКРодительскомуКаталогуПрофильНастроекЭДО, Объект.КаталогИсходящихДокументов);
			
	Элементы.ПояснениеКаталогаИсходящихДокументов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, КаталогИсходящихДокументов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	&Организация";
	
	ТекстЗапросаОрганизация = "ИСТИНА";
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстЗапросаОрганизация = "ПрофилиНастроекЭДО.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Организация", ТекстЗапросаОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Объект.ПрофильНастроекЭДО = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Объект.Наименование = Строка(Объект.Контрагент) + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		", " + Строка(Объект.ДоговорКонтрагента), "");
		
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		Объект.ИдентификаторКонтрагента = "";
		Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
		ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
	Иначе
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	ОпределитьИспользуемыеСпособыОбменаЭД(Неопределено, Объект.ИдентификаторКонтрагента);
	
	Если ИспользуетсяДополнительнаяАналитикаПартнеры И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ИмяРеквизитаПартнераКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаПартнераКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрофильНастроекЭДОПриИзмененииНаСервере()
	
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПрофильНастроекЭДО,
		"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы");
		
	Объект.Организация                 = ПараметрыПрофиляНастроек.Организация;
	Объект.СпособОбменаЭД              = ПараметрыПрофиляНастроек.СпособОбменаЭД;
	Объект.ИдентификаторОрганизации    = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
	
	// Загружаем ТЧ из профиля настроек ЭДО.
	Объект.ИсходящиеДокументы.Загрузить(ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить());
	Объект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
	
	Объект.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(ПараметрыПрофиляНастроек.СпособОбменаЭД) Тогда
		Объект.ИдентификаторКонтрагента = "";
		Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
		Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
	Иначе
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	ОпределитьИспользуемыеСпособыОбменаЭД(Объект.ПрофильНастроекЭДО, Объект.ИдентификаторКонтрагента);
	
	ОбновитьСтатусПодключения();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИсходящиеДокументыПрофильНастроекЭДОПриИзмененииНаСервере(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ПрофильНастроекЭДО,
		"ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений");
		
	ДанныеСтроки.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
	ДанныеСтроки.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
	ДанныеСтроки.ИдентификаторКонтрагента = "";
	
	Если ПараметрыПрофиляНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		Если ЧерезОператораЭДО Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
			НайденныеСтроки = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторКонтрагента) Тогда
					ДанныеСтроки.ИдентификаторКонтрагента = Строка.ИдентификаторКонтрагента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	Иначе
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, ДанныеСтроки.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользуемыеСпособыОбменаЭД();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользуемыеСпособыОбменаЭД(ПрофильНастроекЭДО = Неопределено, ИдентификаторКонтрагента = Неопределено)
	
	ЧерезОператораЭДО     = Ложь;
	ЧерезКаталог          = Ложь;
	ЧерезЭлектроннуюПочту = Ложь;
	ЧерезFTP              = Ложь;
	
	// При изменении Профиля настроек ЭДО в шапке Настроек.
	Если ПрофильНастроекЭДО <> Неопределено Тогда
		ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
			"Организация, ИдентификаторОрганизации, СпособОбменаЭД");
	КонецЕсли;
	
	// Получим электронную почту контрагента для дальнейшего использования.
	ЭлектроннаяПочта = ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента(Объект.Контрагент);
	
	Для каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
		
		Если ПрофильНастроекЭДО <> Неопределено Тогда
			СтрокаТаблицы.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
			СтрокаТаблицы.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
			СтрокаТаблицы.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
		КонецЕсли;
			
		Если ИдентификаторКонтрагента <> Неопределено Тогда
			СтрокаТаблицы.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")Тогда
			ЧерезОператораЭДО = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаДляПриглашения) Тогда
				Объект.ЭлектроннаяПочтаДляПриглашения = ЭлектроннаяПочта;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
			ЧерезЭлектроннуюПочту = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаКонтрагента) Тогда
				Объект.ЭлектроннаяПочтаКонтрагента = ЭлектроннаяПочта;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
			ЧерезКаталог = Истина;
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.ПрофильНастроекЭДО, "РесурсВходящихДокументов");
			
			ШаблонНаименование = НСтр("ru='%1_%2';uk='%1_%2'");
			ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагента");
			НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаНаименованиеКонтрагента);
			
			ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеОрганизации");
			НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, ИмяРеквизитаНаименованиеОрганизации);
			Если Не ЗначениеЗаполнено(Объект.КаталогВходящихДокументов) Тогда
				Объект.КаталогВходящихДокументов = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонНаименование,
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""),
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""))," ", "");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.КаталогИсходящихДокументов) Тогда
				Объект.КаталогИсходящихДокументов = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонНаименование,
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""),
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""))," ", "");
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
			ЧерезFTP = Истина;
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.ПрофильНастроекЭДО, "РесурсВходящихДокументов");
			
			ШаблонНаименование = НСтр("ru='%1_%2';uk='%1_%2'");
			ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагента");
			НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаНаименованиеКонтрагента);
			
			ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеОрганизации");
			НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, ИмяРеквизитаНаименованиеОрганизации);
			
			Если Не ЗначениеЗаполнено(Объект.КаталогВходящихДокументовFTP) Тогда
				Объект.КаталогВходящихДокументовFTP = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонНаименование,
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""),
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""))," ", "");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.КаталогИсходящихДокументовFTP) Тогда
				Объект.КаталогИсходящихДокументовFTP = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонНаименование,
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""),
					ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""))," ", "");
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
			ИспользуетсяКаталогВПрограмме = Истина;
			Если СтрокаТаблицы.Формировать Тогда
				ИспользуетсяКаталогВСоглашении = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКаталога(ПутьККаталогу, КаталогДокументов)
	
#Если НЕ ВебКлиент Тогда
		
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогКаталога.Заголовок = НСтр("ru='Укажите каталог для обмена ЭД';uk='Вкажіть каталог для обміну ЕД'");
	
	КаталогОбмена = ПутьКРодительскомуКаталогуПрофильНастроекЭДО;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			ПутьККаталогу);
		
		КаталогНаДиске  = Новый Файл(ПутьОбмена);
		Если КаталогНаДиске.Существует() Тогда
			КаталогОбмена = ПутьОбмена;
		КонецЕсли;
	КонецЕсли;
	ДиалогКаталога.Каталог = КаталогОбмена;
	
	Если ДиалогКаталога.Выбрать() Тогда
		СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДиалогКаталога.Каталог, Истина);
		КаталогДокументов = СтруктураФайла.Имя;
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеПоТабЧасти(ВыбранноеЗначение, АдресВХранилище = Неопределено)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отпечаток = "";
	ДвоичныеДанные = Неопределено;
	ПредставлениеСертификата = "";
	
	Если АдресВХранилище <> Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru='Файл сертификата должен быть в формате DER X.509, операция прервана.';uk='Файл сертифіката повинен бути у форматі DER X. 509, операція перервана.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
	КонецЕсли;
	
	ДанныеСтроки = Объект.СертификатыПодписейКонтрагента.НайтиПоИдентификатору(ВыбранноеЗначение);
	ДанныеСтроки.Отпечаток  = Отпечаток;
	ДанныеСтроки.ПредставлениеСертификатаКонтрагента = ПредставлениеСертификата;

	ДанныеСтроки.АдресФайлаВХранилище = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеСертификат(АдресВХранилище = Неопределено)
	
	ПредставлениеСертификата = "";
	
	Если АдресВХранилище <> Неопределено Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru='Файл сертификата должен быть в формате DER X.509, операция прервана.';uk='Файл сертифіката повинен бути у форматі DER X. 509, операція перервана.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
		
	КонецЕсли;
	
	ПредставлениеСертификатаКонтрагентаДляШифрования = ПредставлениеСертификата;
	
	АдресСертификатаКонтрагентаДляШифрования = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификатор(ИмяСправочника, СсылкаНаИсточникИдентификатора, ИскомыйИдентификатор)
	
	Если ИмяСправочника = "Контрагенты" Тогда
		ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
		ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаИсточникИдентификатора,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
		
		СтрокаЗаполнения = Строка(ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента])
			+ "_" + Строка(ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		ИскомыйИдентификатор = СокрЛП(СтрокаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользованиеИдентификатораКонтрагентаУникально(Отказ)
	
	// Проверка на уникальное использование настройки ЭДО по реквизитам: ИдентификаторКонтрагента.
	Отбор = Новый Структура;
	Отбор.Вставить("Формировать", Истина);
	Таблица = Объект.ИсходящиеДокументы.Выгрузить(Отбор);
	
	МассивИдКонтрагентов = Таблица.ВыгрузитьКолонку("ИдентификаторКонтрагента");
	
	ЗапросПоИД = Новый Запрос;
	ЗапросПоИД.УстановитьПараметр("ТекущаяНастройка",     Объект.Ссылка);
	ЗапросПоИД.УстановитьПараметр("Организация",          Объект.Организация);
	ЗапросПоИД.УстановитьПараметр("ПрофильНастроекЭДО",   Объект.ПрофильНастроекЭДО);
	ЗапросПоИД.УстановитьПараметр("Контрагент",           Объект.Контрагент);
	ЗапросПоИД.УстановитьПараметр("МассивИдКонтрагентов", МассивИдКонтрагентов);
	ЗапросПоИД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация КАК Организация,
	|	НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка <> &ТекущаяНастройка
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|	И НастройкиЭДОИсходящиеДокументы.Формировать
	|	И НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента В (&МассивИдКонтрагентов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента";
	
	Результат = ЗапросПоИД.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблонСообщения = НСтр("ru='Идентификатор контрагента %1
            |уже используется в настройке ЭДО между контрагентом %2 и организацией %3'
            |;uk='Ідентифікатор контрагента %1
            |вже використовується в настройці ЕДО між контрагентом %2 і організацією %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ИдентификаторКонтрагента,
			Выборка.Контрагент, Выборка.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусПодключения(ОбновитьДатуИзмененияСтатуса = Ложь)
	
	Если ОбновитьДатуИзмененияСтатуса Тогда
		ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
	КонецЕсли;
	
	СтатусПодключения = "" + Объект.СтатусПодключения;
	Если ЗначениеЗаполнено(Объект.ДатаИзмененияСтатуса) Тогда
		СтатусПодключения = СтатусПодключения + " "+ "("+ Формат(Объект.ДатаИзмененияСтатуса ,"ДФ=dd.MM.yyyy")+")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПодменюЭДО()
	
	ВидыЭД = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(ВидыЭД);
	Если ВидыЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		Элементы.КомандыЭДО.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Тестирование настроек ЭДО
&НаСервере
Функция ПараметрыПрофиляНастроекЭДО(ПрофильНастроекЭДО)
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"РесурсВходящихДокументов, СертификатыПодписейОрганизации");
	ВыборкаСертификатов = ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации.Выбрать();
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	Если ВыборкаСертификатов.Количество() > 0 Тогда
		Пока ВыборкаСертификатов.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСертификатов.Сертификат.Пользователь)
				ИЛИ ВыборкаСертификатов.Сертификат.Пользователь = ПараметрыСеанса.ТекущийПользователь Тогда
				Сертификат = ВыборкаСертификатов.Сертификат;
				ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
				ПараметрыСертификата.Вставить("СертификатПодписи", Сертификат);
				СоотвСертификатовИИхСтруктур.Вставить(Сертификат, ПараметрыСертификата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыПрофиляНастроекЭДО.Вставить("СертификатыПодписейОрганизации", СоотвСертификатовИИхСтруктур);
	
	Возврат ПараметрыПрофиляНастроекЭДО;
	
КонецФункции

&НаСервере
Процедура ТестСвязиПрямогоОбменаНаСервере(КаталогВходящихДокументов, КаталогИсходящихДокументов, ПрофильНастроекЭДО)
	
	// Блок проверки доступа к каталогам.
	ШаблонСообщения = НСтр("ru='Проверка доступа к каталогам обмена.
        |%1'
        |;uk='Перевірка доступу до каталогів обміну.
        |%1'");
	Попытка
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогВходящихДокументов)
			И ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогИсходящихДокументов) Тогда
			РезультатТеста = НСтр("ru='Пройден успешно.';uk='Пройдено успішно.'");
		Иначе
			РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("107");
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru='%1
        |%2'
        |;uk='%1
        |%2'");
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("107");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru='Тест обмена по профилю %1.';uk='Тест обміну за профілем %1.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ТестСвязиОбменаЧерезFTPНаСервере(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов)
	
	ОбменСКонтрагентамиСлужебный.ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные обработчики асинхронных диалогов

&НаКлиенте
Процедура ЗакончитьИзменениеШифрованияДанных(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			ПустаяСсылка = ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка");
			Объект.СертификатОрганизацииДляРасшифровки = ПустаяСсылка;
			
			// Очистка сертификата контрагента
			ПоместитьВХранилищеСертификат();
		Иначе
			Объект.ШифроватьДанныеПакетаЭД = Не Объект.ШифроватьДанныеПакетаЭД;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьИзменениеПроверкиСертификатов(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			Объект.СертификатыПодписейКонтрагента.Очистить();
		Иначе
			Объект.ПроверятьСертификатыПодписей = Не Объект.ПроверятьСертификатыПодписей;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОбработкуПриглашений(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО",               Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
	Действие = "";
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Действие", Действие) Тогда
		Если Действие = "Принять" Тогда
			ПараметрыФормы.Вставить("Принять", Истина);
		ИначеЕсли Действие = "Отклонить" Тогда
			ПараметрыФормы.Вставить("Отклонить", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроекПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = "Отменить" Тогда
			Возврат;
		ИначеЕсли Модифицированность Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	СертификатыКПроверке = Новый Структура;
	СертификатыКПроверке.Вставить("СертификатыПодписейОрганизации", Новый Соответствие);
	
	Если ЧерезОператораЭДО Тогда
		Состояние(НСтр("ru='Тест настроек.';uk='Тест настройок.'"),
			,
			НСтр("ru='Выполняется тестирование обмена ЭД через сервис ЭДО. Подождите...';uk='Виконується тестування обміну ЕД через сервіс ЕДО. Почекайте...'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервиса1СЭДО(РезультатВыполнения = Неопределено, Контекст = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
	СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
	
	Оповещение = Новый ОписаниеОповещения("ТестНастроекПрямогоЭДО", ЭтотОбъект);
	Если Не ЗначениеЗаполнено(СтрокаТаблицыИсходящихДокументов) Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПрофильНастроекЭДО", СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
	Контекст.Вставить("ОповещениеПослеВыполнения", Оповещение);

	Если ТипЗнч(ПараметрыАутентификацииНаСайте) <> Тип("Структура") ИЛИ Не ЗначениеЗаполнено(ПараметрыАутентификацииНаСайте.Пароль) Тогда
		СтандартныеПодсистемыКлиент.АвторизоватьНаСайтеПоддержкиПользователей(ЭтотОбъект,
			Новый ОписаниеОповещения("ТестСвязиСервисаЭДОАвторизация", ЭтотОбъект, Контекст));
	Иначе
		ТестСвязиСервисаЭДОАвторизация(ПараметрыАутентификацииНаСайте, Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОАвторизация(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		ПараметрыАутентификацииНаСайте = Неопределено;
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификацииНаСайте = ПараметрыАутентификации;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроекПрямогоЭДО(РезультатВыполнения = Неопределено, Контекст = Неопределено) Экспорт
	
	Если ЧерезЭлектроннуюПочту Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);

		Состояние(НСтр("ru='Тест настроек.';uk='Тест настройок.'"),
			,
			НСтр("ru='Выполняется тестирование обмена ЭД через электронную почту. Подождите...';uk='Виконується тестування обміну ЕД через електронну пошту. Почекайте...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		РаботаСПочтовымиСообщениямиКлиент.ПроверитьУчетнуюЗапись(ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов);
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если ЧерезКаталог Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Состояние(НСтр("ru='Тест настроек.';uk='Тест настройок.'"),
		,
		НСтр("ru='Выполняется тестирование обмена ЭД через каталог. Подождите...';uk='Виконується тестування обміну ЕД через каталог. Почекайте...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов;
		
		ТестСвязиПрямогоОбменаНаСервере(
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогВходящихДокументов),
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогИсходящихДокументов),
			СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если ЧерезFTP Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		
		Состояние(НСтр("ru='Тест настроек.';uk='Тест настройок.'"),
			,
			НСтр("ru='Выполняется тестирование обмена ЭД через FTP. Подождите...';uk='Виконується тестування обміну ЕД через FTP. Почекайте...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов;
		
		ТестСвязиОбменаЧерезFTPНаСервере(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО,
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогВходящихДокументовFTP),
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогИсходящихДокументовFTP));
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПроверитьСвязьЭДО(Отпечатки, Контекст = Неопределено) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
												МассивОтпечатковСертификатов, Контекст.ПрофильНастроекЭДО);
	
	МассивСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Соответствие Цикл
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МассивСертификатов) Тогда
		ШаблонСообщения = НСтр("ru='Тест обмена по профилю: %1.
                                    |В профиле нет доступных сертификатов. Тест не выполнен.'
                                    |;uk='Тест обміну за профілем: %1.
                                    |В профілі немає доступних сертифікатів. Тест не виконаний.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контекст.ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		Возврат;
	КонецЕсли;
	
	ОбработкаПолученияМаркера = Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификата", ЭтотОбъект, Контекст);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ДействияПослеТестаСвязиЭДО", ЭтотОбъект, Контекст);
	
	ОписаниеДанных = Новый Структура;
	
	ШаблонОперация = НСтр("ru='Тест аутентификации: %1';uk='Тест аутентифікації: %1'");
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОперация, Контекст.ПрофильНастроекЭДО);
	ОписаниеДанных.Вставить("Операция",            Операция);

	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("Данные",              ОбработкаПолученияМаркера);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификата(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И Не РезультатВыполнения.ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		
		Возврат;
	КонецЕсли;
	РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Контекст.ПрофильНастроекЭДО);
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи",        РезультатВыполнения.ОписаниеДанных.ВыбранныйСертификат.Ссылка);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД",           РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера,
		ПараметрыАутентификацииНаСайте);
	Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.ОписаниеДанных.Данные = ЗашифрованныеДанные;
	ВыполнитьОбработкуОповещения(РезультатВыполнения.Оповещение, РезультатВыполнения.ОписаниеДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеТестаСвязиЭДО(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Если РезультатВыполнения.Успех = Истина Тогда
			ШаблонСообщения = НСтр("ru='Тест обмена по профилю: %1
                                        |Пройден успешно.'
                                        |;uk='Тест обміну за профілем: %1
                                        |Пройдено успішно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контекст.ПрофильНастроекЭДО);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуСертификата(ПрофильЭДО, ДляАвторизации = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПрофильЭДО", ПрофильЭДО);
	ДополнительныеПараметры.Вставить("ДляАвторизации", ДляАвторизации);
	Оповещение = Новый ОписаниеОповещения(
		"ПослеПолученияОтпечатковВыполнитьПроверкуСертификатов", ЭтотОбъект, ДополнительныеПараметры);
		
	ВыдаватьОшибку = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, ВыдаватьОшибку);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковВыполнитьПроверкуСертификатов(Отпечатки, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ПрофильЭДО = ДополнительныеПараметры.ПрофильЭДО;
	ДляАвторизации = ДополнительныеПараметры.ДляАвторизации;
	
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
		МассивОтпечатковСертификатов, ПрофильЭДО);
	
	Сертификат = Неопределено;
	ПараметрыСертификата = Неопределено;
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		ТекСертификат = КлючЗначение.Ключ;
		Если Сертификат = Неопределено Тогда
			// Если в соответствии нет сертификатов с сохраненным паролем, то для теста возьмем первый из списка сертификат.
			Сертификат = ТекСертификат;
			ПараметрыСертификата = КлючЗначение.Значение;
		КонецЕсли;
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			Сертификат = ТекСертификат;
			ПараметрыСертификата = КлючЗначение.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Сертификат = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Тест обмена по профилю %1. В профиле нет доступных сертификатов.
            |Тест не выполнен.'
            |;uk='Тест обміну за профілем %1. В профілі немає доступних сертифікатів.
            |Тест не виконаний.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ОбменСКонтрагентамиСлужебныйКлиент.ТестНастроекСПроверкойСертификата(Сертификат, , ДляАвторизации, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВключениеРасширенногоРежимаНастройки(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВключитьРасширенныйРежимНастройкиСоглашенияНаСервере();
		Объект.РасширенныйРежимНастройкиСоглашения = Не Объект.РасширенныйРежимНастройкиСоглашения;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбработкаВыбора(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	// Для обновления представления сертификата на форме
	Если Результат = Истина Тогда
		ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
		ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока, Адрес);
		
		ДанныеСтроки = Объект.СертификатыПодписейКонтрагента.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.ПредставлениеСертификатаКонтрагента = ДанныеСтроки.ПредставлениеСертификатаКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьИзменениеСостояния(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НастройкаЭДО",     Объект.Ссылка);
		ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
		ПараметрыФормы.Вставить("Отклонить",                  Истина);
		
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаСертификатаШифрования(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоместитьВХранилищеСертификат(Адрес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОрганизацииДляРасшифровкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора", , Элемент);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Организация", Объект.Организация,
		ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОрганизацииДляРасшифровкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьСертификатВТЧ(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатВТЧ(ВыбранноеЗначение)
	
	Объект.СертификатОрганизацииДляРасшифровки = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтаФорма.ЧерезКаталог ИЛИ ЭтаФорма.ЧерезЭлектроннуюПочту ИЛИ ЭтаФорма.ЧерезFTP Тогда
		
		Если (ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки) И Не ЗначениеЗаполнено(ПредставлениеСертификатаКонтрагентаДляШифрования))
			ИЛИ (Не ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки) И ЗначениеЗаполнено(ПредставлениеСертификатаКонтрагентаДляШифрования)) Тогда
		
			ТекстСообщения = НСтр("ru='Для корректной работы шифрования необходимо
                                        |одновременно указывать сертификаты шифрования для организации и контрагента.'
                                        |;uk='Для коректної роботи шифрування необхідно
                                        |одночасно зазначати сертифікати шифрування для організації та контрагента.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяФормыВыбораДоговора(ПараметрыОткрытия)
	
	Если ТипЗнч(Объект.ДоговорКонтрагента.Владелец) = ТипЗнч(Объект.Контрагент) Тогда
		ЭлементОтбора = "Владелец";
	ИначеЕсли Объект.ДоговорКонтрагента.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		ЭлементОтбора = "Контрагент";
	Иначе
		ЭлементОтбора = Неопределено;
	КонецЕсли;
	
	ИспользоватьОтборПоОрганизации = Ложь;
	Если Объект.ДоговорКонтрагента.Метаданные().Реквизиты.Найти("Организация") <> Неопределено
		И ТипЗнч(Объект.ДоговорКонтрагента.Организация) = ТипЗнч(Объект.Организация) Тогда
			ИспользоватьОтборПоОрганизации = Истина;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЭлементОтбора <> Неопределено Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(ЭлементОтбора, Объект.Контрагент);
		Если ИспользоватьОтборПоОрганизации Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ИмяФормыВыбора = "Справочник."
		+ Объект.ДоговорКонтрагента.Метаданные().Имя + "."
		+ Объект.ДоговорКонтрагента.Метаданные().ОсновнаяФормаДляВыбора.Имя;
	
	Возврат ИмяФормыВыбора;
	
КонецФункции

&НаКлиенте
Процедура ДоговорКонтрагентаПродолжениеВыбора(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ДоговорКонтрагента = Результат;
		ДоговорКонтрагентаПриИзменении(Неопределено);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

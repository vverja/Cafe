#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Метод возвращает значение константы "Номер задания к расчету себестоимости", считанной при разделяемой блокировке.
//
Функция ПолучитьНомерЗадания() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКРасчетуСебестоимости");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	НомерЗадания = Константы.НомерЗаданияКРасчетуСебестоимости.Получить();
	
	ЗафиксироватьТранзакцию();
	
	Возврат НомерЗадания;
	
КонецФункции

// Метод создает запись регистра с заданными параметрами.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо выполнить перерасчет себестоимости
//	ДокументЗадания - ДокументСсылка - документ регистратор создавший движение в зависимых регистрах
//	Организация - СправочникСсылка.Организации - организация, по которой необходим перерасчет
//  НомерЗадания - Число - номер задания расчета себестоимости; если не задано, то будет установлено значение из соответствующей константы
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания = Неопределено, Организация = Неопределено, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументЗадания) И НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Создаем записи для каждой организации ИБ
		МассивОрганизаций = ПартионныйУчет.СвязиОрганизацийПоСхемеИнтеркампани();
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			// Попытаемся определить организацию по-умолчанию.
			// Если не удастся, то будет вызвано платформенное исключение при записи.
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(Организация);
		
	КонецЕсли;
	
	Если НомерЗадания = Неопределено Тогда
		НомерЗадания = ПолучитьНомерЗадания();
	КонецЕсли;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьМенеджерЗаписи();
		НаборЗаписей.Месяц        = НачалоМесяца(ПериодЗадания);
		НаборЗаписей.Документ     = ДокументЗадания;
		НаборЗаписей.Организация  = ТекущаяОрганизация;
		НаборЗаписей.НомерЗадания = НомерЗадания;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания расчета себестоимости; если не задано, то будет установлено значение из соответствующей константы
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура("Месяц, Организация, Документ");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
		СоздатьЗаписьРегистра(СтруктураПолей.Месяц, СтруктураПолей.Документ, СтруктураПолей.Организация, НомерЗадания);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Метод выводит в табличный документ предупреждение,
//если отчет формируетя по неактуальным данным
//Параметры:
//	Макет - ТабличныйДокумент - Макет, в который выводится предупреждение
//	ПараметрыРасчета - Структура - Свойства, в которых указаны данные о границах расчета
Процедура ВывестиАктуальностьРасчета(Макет, ПараметрыРасчета) Экспорт
	Если ПараметрыРасчета.Свойство("ГраницаРасчета") И ЗначениеЗаполнено(ПараметрыРасчета.ГраницаРасчета) Тогда
		ТаблицаПредупреждение = Новый ТабличныйДокумент;
		ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
		ТекстПредупреждения = НСтр("ru='Распределение партий выполнено до %ДатаАктуальности. 
                                    |Запущено задание к распределению партий с %ДатаНачалаРаспределения (требуется распределить партии для %КоличествоДокументов). 
                                    |После распределения Вам будет предложено переформировать отчет.'
                                    |;uk='Розподіл партій виконано до %ДатаАктуальности. 
                                    |Запущено завдання до розподілу партій з %ДатаНачалаРаспределения (потрібно розподілити партії для %КоличествоДокументов). 
                                    |Після розподілу Вам буде запропоновано переформувати звіт.'");
		ДатаАктуальности = КонецМесяца(ПараметрыРасчета.ГраницаРасчета - 1);
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаАктуальности", Формат(ДатаАктуальности, "ДФ=dd.MM.yyyy; ДЛФ=D"));
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%ДатаНачалаРаспределения", Формат(ПараметрыРасчета.ГраницаРасчета, "ДФ=dd.MM.yyyy; ДЛФ=D"));
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%КоличествоДокументов", ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КоличествоДокументов));
		ОбластьПредупреждение.Текст = ТекстПредупреждения;
		ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		Макет.ВставитьОбласть(ОбластьПредупреждение, Макет.Область(1,1,1,1), ТипСмещенияТабличногоДокумента.ПоВертикали);
	ИначеЕсли ПараметрыРасчета.Свойство("ГраницаПартионногоУчета") Тогда
		ПараметрыРасчета.Удалить("ГраницаПартионногоУчета");
		ПараметрыРасчета.Удалить("НомерЗадания");
	КонецЕсли;
КонецПроцедуры

Функция КоличествоНеактуальныхДокументов(Период, НомерЗадания) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Задания.Документ) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &Период
	|	И Задания.НомерЗадания <= &НомерЗадания
	|");
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания + 1);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		КоличествоДокументов = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	
	Возврат КоличествоДокументов;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИБ


// Обработчик обновления BAS УТ 3.2.1
// При перезаполнении раздела учета в движениях по себестоимости документа ПеремещениеТоваров
// создаются записи заданий к расчету себестоимости
Процедура ПерезаполнитьРазделУчетаСебестоимость() Экспорт
    
    Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
    КонецЕсли;    
    
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
    |   ВЫРАЗИТЬ(Записи.Регистратор КАК Документ.ПеремещениеТоваров).Организация КАК Организация,
    |   ВЫРАЗИТЬ(Записи.Регистратор КАК Документ.ПеремещениеТоваров).ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Записи.Период, МЕСЯЦ)) КАК Месяц
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Записи
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Записи.Регистратор) = ТИП(Документ.ПеремещениеТоваров)
	|	И Записи.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|	И Записи.ВидЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
    |СГРУППИРОВАТЬ ПО
    |   ВЫРАЗИТЬ(Записи.Регистратор КАК Документ.ПеремещениеТоваров).Организация,
    |   ВЫРАЗИТЬ(Записи.Регистратор КАК Документ.ПеремещениеТоваров).ОрганизацияПолучатель
	|УПОРЯДОЧИТЬ ПО 
    |	МИНИМУМ(НАЧАЛОПЕРИОДА(Записи.Период, МЕСЯЦ)) ВОЗР
	|");
    
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
        СоздатьЗаписьРегистра(Выборка.Месяц,, Выборка.Организация);
        СоздатьЗаписьРегистра(Выборка.Месяц,, Выборка.ОрганизацияПолучатель);
    КонецЦикла;
    
КонецПроцедуры
    


#КонецОбласти

#КонецЕсли

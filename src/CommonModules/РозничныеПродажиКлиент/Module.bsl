
#Область ПрограммныйИнтерфейс

// Открывает кассовую смену
//
// Параметры:
//  ПараметрыКассыККМ - Структура - Параметры кассы ККМ (ИдентификаторУстройства, ИспользоватьБезПодключенияОборудования, КассаККМ)
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции
//
Процедура ОткрытьКассовуюСмену(ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	Результат = Ложь;
	
	ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ОписаниеОшибки = "";
	
	ОборудованиеПодключено = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройства);
	
	Если ОборудованиеПодключено Или ИспользоватьБезПодключенияОборудования Тогда
		
		СменаОткрытаНаУстройстве = Ложь;
		Если Не ИспользоватьБезПодключенияОборудования Тогда
			
			ВходныеПараметры  = Неопределено;
			ВыходныеПараметры = Неопределено;
			
			//Открыть смену на фискальном регистраторе
			СменаОткрытаНаУстройстве = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
			                                                        "OpenDay",
			                                                        ВходныеПараметры,
			                                                        ВыходныеПараметры);
			
		КонецЕсли;
		
		Если СменаОткрытаНаУстройстве Или ИспользоватьБезПодключенияОборудования Тогда
			
			Результат = РозничныеПродажиВызовСервера.ОткрытьКассовуюСмену(ПараметрыКассыККМ.КассаККМ, ОписаниеОшибки);
			
			Если Не Результат Тогда
				
				ТекстСообщения = НСтр("ru='При открытии смены произошла ошибка.
                                            |Смена не открыта.
                                            |Дополнительное описание:
                                            |%ДополнительноеОписание%'
                                            |;uk='При відкритті зміни сталася помилка.
                                            |Зміна не відкрита.
                                            |Додатковий опис:
                                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='При открытии смены произошла ошибка.
                                  |Смена не открыта на фискальном регистраторе.
                                  |Дополнительное описание:
                                  |%ДополнительноеОписание%'
                                  |;uk='При відкритті зміни сталася помилка.
                                  |Зміна не відкрита на фіскальному реєстраторі.
                                  |Додатковий опис:
                                  |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
			                             "%ДополнительноеОписание%",
			                             ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Фискальный регистратор не подключен. Кассовая смена не открыта.';uk='Фіскальний реєстратор не підключений. Касова зміна не відкрита.'"));
		
	КонецЕсли;
	
	Если ОписаниеОповещенияЗавершение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Закрывает кассовую смену
//
// Параметры:
//  ПараметрыКассыККМ - Структура - Параметры кассы ККМ (ИдентификаторУстройства, ИспользоватьБезПодключенияОборудования, КассаККМ)
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции
//
Процедура ЗакрытьКассовуюСмену(ПараметрыКассыККМ, ОписаниеОповещенияЗавершение = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ОборудованиеПодключено = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройства);
	
	Если ОборудованиеПодключено Или ИспользоватьБезПодключенияОборудования Тогда
		
		СнятZОтчетНаУстройстве = Ложь;
		Если Не ИспользоватьБезПодключенияОборудования Тогда
			
			ВходныеПараметры  = Неопределено;
			ВыходныеПараметры = Неопределено;
			
			СнятZОтчетНаУстройстве = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
			                                                        "PrintZReport",
			                                                        ВходныеПараметры,
			                                                        ВыходныеПараметры);
			
		КонецЕсли;
		
		Если Не СнятZОтчетНаУстройстве И Не ИспользоватьБезПодключенияОборудования Тогда
			
			ТекстВопроса = НСтр("ru='При снятии отчета на фискальном регистраторе произошла ошибка.
                                |""%ОписаниеОшибки%""
                                |
                                |Если смена на фискальном регистраторе закрыта, то
                                |нажмите ""Да"" для формирования отчета о розничных продажах.
                                |
                                |Закрыть смену?'
                                |;uk='При знятті звіту на фіскальному реєстраторі сталася помилка.
                                |""%ОписаниеОшибки%""
                                |
                                |Якщо зміна на фіскальному реєстраторі закрита, то
                                |натисніть ""Так"" для формування звіту про роздрібні продажі.
                                |
                                |Закрити зміну?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
			ДополнительныеПараметры.Вставить("ОписаниеОшибки", ВыходныеПараметры[1]);
			ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
			ДополнительныеПараметры.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
			ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ЗакрытьКассовуюСменуФрагмент", РозничныеПродажиКлиент, ДополнительныеПараметры),
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет,
				,
				КодВозвратаДиалога.Нет);
			Возврат;
			
		Иначе
			
			СформироватьОтчетОРозничныхПродажах(ПараметрыКассыККМ.КассаККМ);
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Истина);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Фискальный регистратор не подключен. Отчет не напечатан и смена не закрыта на фискальном регистраторе.';uk='Фіскальний реєстратор не підключений. Звіт не надрукований і зміна не закрита на фіскальному реєстраторі.'"));
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготовливает данные для вывода на дисплей покупателя
//
// Параметры:
//  Заголовок - Строка - Заголовок выводимого на дисплей покупателя значения
//  Значение - Число, Строка - Выводимое значение (Сумма)
//
Функция ПодготовитьСтрокуКВыводуНаДисплейПокупателя(Заголовок = "", Значение = "") Экспорт
	
	Результат = "";
	
	ДлинаТекста     = 20;
	Пробелы20       = "                    ";
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	
	ЗначениеИтог = Формат(Значение, ФорматнаяСтрока);
	
	ДлинаЗначения = СтрДлина(ЗначениеИтог);
	ДлинаЗаголовка = СтрДлина(Заголовок);
	Если ДлинаЗначения + ДлинаЗаголовка > ДлинаТекста Тогда
		Результат = Лев(ЗначениеИтог, ДлинаТекста);
	ИначеЕсли ДлинаЗначения + ДлинаЗаголовка = ДлинаТекста Тогда
		Результат = Заголовок + ЗначениеИтог;
	Иначе
		Результат = Заголовок + Лев(Пробелы20, ДлинаТекста - ДлинаЗаголовка - ДлинаЗначения) + ЗначениеИтог;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область УправлениеСостояниемСмены

// Контролирует параметры текущей кассовой смены, при необходимости открывает и закрывает кассовую смену.
//
// Параметры:
//  Форма - Форма - Форма документа в которой выполняется контроль кассовой смены
//  ОписаниеОповещенияЗавершение - ОписаниеОповещения - Описание оповещения при завершении операции
//
Процедура ОбработатьСостояниеСмены(Форма, ОписаниеОповещенияЗавершение) Экспорт
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "КассаККМ") Тогда
		КассаККМ = Форма.Объект.КассаККМ;
	Иначе
		КассаККМ = Форма.КассаККМ;
	КонецЕсли;
	
	Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
	ЗаполнитьЗначенияСвойств(Форма.Объект, Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
	
	Если Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И Форма.ПраваДоступа.ОткрытьСмену Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ОткрытьКассовуюСмену", НСтр("ru='Открыть смену';uk='Відкрити зміну'"));
		Кнопки.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УправлениеСостояниемСменыОбработкаКоманды", РозничныеПродажиКлиент, ДополнительныеПараметры),
			НСтр("ru='Перед выполнением операции требуется открыть новую кассовую смену.';uk='Перед виконанням операції потрібно відкрити нову касову зміну.'"), Кнопки);
		Возврат;
		
	ИначеЕсли Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И Не Форма.ПраваДоступа.ОткрытьСмену Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Кассовая смена не открыта.';uk='Касова зміна не відкрита.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Форма.СтруктураСостояниеКассовойСмены.Ошибка24Часа
		И Форма.ПраваДоступа.ОткрытьСмену
		И Форма.ПраваДоступа.ЗакрытьСмену Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ЗакрытьИОткрытьКассовуюСмену", НСтр("ru='Открыть смену';uk='Відкрити зміну'"));
		Кнопки.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаОповещения", ОписаниеОповещенияЗавершение);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УправлениеСостояниемСменыОбработкаКоманды", РозничныеПродажиКлиент, ДополнительныеПараметры),
			НСтр("ru='С момента открытия смены прошло более 24 часов. Перед выполнением операции требуется открыть новую кассовую смену.';uk='З моменту відкриття зміни пройшло більше 24 годин. Перед виконанням операції потрібно відкрити нову касову зміну.'"), Кнопки);
		Возврат;
		
	ИначеЕсли Не Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта
		И (Не Форма.ПраваДоступа.ОткрытьСмену ИЛИ Не Форма.ПраваДоступа.ЗакрытьСмену) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='С момента открытия смены прошло более 24 часов. Перед выполнением операции требуется открыть новую кассовую смену.';uk='З моменту відкриття зміни пройшло більше 24 годин. Перед виконанням операції потрібно відкрити нову касову зміну.'"));
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаПлатежнымиКартами

// Вызывает процедуры оплаты платежной картой
//
// Параметры:
//  РезультатПроведения - Булево - Признак успешного проведения оплачиваемого чека ККМ
//  ДополнительныеПараметры - Структура
//
Процедура ДобавитьОплатуКартой(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	ОписаниеОшибки = "";
	
	НомерКарты = "";
	
	Если РезультатПроведения Тогда
		
		Если ДополнительныеПараметры.ЭквайринговыеТерминалы.Количество() = 1 Тогда
			
			ДополнительныеПараметры.СтруктураЭквайринговыйТерминал = ДополнительныеПараметры.ЭквайринговыеТерминалы[0].Значение;
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ      = ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
			
		ИначеЕсли ДополнительныеПараметры.ЭквайринговыеТерминалы.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
			
			Для каждого Терминал Из ДополнительныеПараметры.ЭквайринговыеТерминалы Цикл
				ПараметрыФормы.СписокВыбора.Добавить(Терминал.Значение, Терминал.Значение.Ссылка);
			КонецЦикла;
			
			ОткрытьФорму(
				"Документ.ЧекККМ.Форма.ВыборЭквайринговогоТерминала",
				ПараметрыФормы,,,,,
				Новый ОписаниеОповещения(
					"ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала",
					РозничныеПродажиКлиент, ДополнительныеПараметры),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
			
		Иначе
			
			ИдентификаторУстройстваЭТ = Неопределено;
			СтруктураЭквайринговыйТерминал = Неопределено;
			
		КонецЕсли;
		
		ДобавитьОплатуКартойФрагмент(ДополнительныеПараметры);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаОплатыПлатежнымиКартами

// Вызывает процедуры отмены оплаты платежной картой
//
// Параметры:
//  РезультатПроведения - Булево - Признак успешного проведения оплачиваемого чека ККМ
//  ДополнительныеПараметры - Структура
//
Процедура ОтменитьОплатуКартой(РезультатПроведения, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не РезультатПроведения Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
		Возврат;
	КонецЕсли;
	
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки = "";
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
	
	ИдентификаторУстройстваЭТ = Неопределено;
	Для каждого Терминал Из ДополнительныеПараметры.Форма.ЭквайринговыеТерминалы Цикл
		Если Терминал.Значение.Ссылка = ТекущиеДанные.ЭквайринговыйТерминал Тогда
			СтруктураЭквайринговыйТерминал = Терминал.Значение;
			ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) Или (СтруктураЭквайринговыйТерминал <> Неопределено И СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
		
		Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
			РезультатЭТ = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваЭТ);
		Иначе
			РезультатЭТ = Истина;
		КонецЕсли;
		
		Если РезультатЭТ Тогда
			
			ИдентификаторУстройстваФР              = ДополнительныеПараметры.Форма.ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ДополнительныеПараметры.Форма.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			РезультатФР = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваФР);
			
			Если РезультатФР Или ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Новый Массив();
					ВыходныеПараметры = Неопределено;
					
					ВходныеПараметры.Добавить(СуммаОперации);
					ВходныеПараметры.Добавить(НомерСсылкиОперации);
					ВходныеПараметры.Добавить(НомерЧекаЭТ);
					
					// Выполнение операции на ЭТ
					РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(
						ИдентификаторУстройстваЭТ,
						"AuthorizeVoid",
						ВходныеПараметры,
						ВыходныеПараметры);
					
					Если РезультатЭТ Тогда
						
						СтрокаСлипЧека = ВыходныеПараметры[0][1];
						
						Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
							глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
						КонецЕсли;
						
						НомерКарты          = "";
						НомерСсылкиОперации = "";
						НомерЧекаЭТ         = "";
						
					Иначе
						
						ТекстОписаниеОшибки = ВыходныеПараметры[1];
						
					КонецЕсли;
					
					ПараметрыФрагмента = Новый Структура;
					ПараметрыФрагмента.Вставить("СуммаОперации",       СуммаОперации);
					ПараметрыФрагмента.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
					ПараметрыФрагмента.Вставить("НомерЧекаЭТ",         НомерЧекаЭТ);
					ПараметрыФрагмента.Вставить("РезультатФР", РезультатФР);
					ПараметрыФрагмента.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
					ПараметрыФрагмента.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
					ПараметрыФрагмента.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
					ПараметрыФрагмента.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
					ПараметрыФрагмента.Вставить("СтрокаОплаты", ТекущиеДанные);
					ПараметрыФрагмента.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
					ПараметрыФрагмента.Вставить("Форма", ДополнительныеПараметры.Форма);
					ПараметрыФрагмента.Вставить("Валюта", ДополнительныеПараметры.Валюта);
					
					ОтменаОплатыКартойПослеЗавершенияАвторизации(РезультатЭТ, ПараметрыФрагмента);
					
				Иначе
					
					ТекстВопроса = НСтр("ru='Требуется выполнить операцию отмены оплаты на эквайринговом терминале.';uk='Потрібно виконати операцію скасування оплати на еквайринговому терміналі.'") + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Сумма операции:';uk='Сума операції:'")  + " "+ СуммаОперации       + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Номер карты:';uk='Номер карти:'")     + " "+ НомерКарты          + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Ссылочный номер:';uk='Посилальний номер:'") + " "+ НомерСсылкиОперации + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Номер чека:';uk='Номер чека:'")      + " "+ НомерЧекаЭТ         + Символы.ПС;
					ТекстВопроса = ТекстВопроса + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru='Операция отмены оплаты на эквайринговом терминале прошла успешно?';uk='Операція скасування оплати на еквайринговому терміналі пройшла успішно?'");
					
					ПараметрыФрагмента = Новый Структура;
					ПараметрыФрагмента.Вставить("СуммаОперации",       СуммаОперации);
					ПараметрыФрагмента.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
					ПараметрыФрагмента.Вставить("НомерЧекаЭТ",         НомерЧекаЭТ);
					ПараметрыФрагмента.Вставить("РезультатФР",         РезультатФР);
					ПараметрыФрагмента.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
					ПараметрыФрагмента.Вставить("СтрокаСлипЧека", "");
					ПараметрыФрагмента.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
					ПараметрыФрагмента.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
					ПараметрыФрагмента.Вставить("СтрокаОплаты", ТекущиеДанные);
					ПараметрыФрагмента.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
					ПараметрыФрагмента.Вставить("Форма", ДополнительныеПараметры.Форма);
					ПараметрыФрагмента.Вставить("Валюта", ДополнительныеПараметры.Валюта);
					
					ПоказатьВопрос(
						Новый ОписаниеОповещения("ОтменаОплатыКартойПослеВопросаОЗавершенииАвторизации", РозничныеПродажиКлиент, ПараметрыФрагмента),
						ТекстВопроса,
						РежимДиалогаВопрос.ДаНет);
					
				КонецЕсли;
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Эквайринговый терминал не подключен. Операция по карте не выполнена.';uk='Еквайринговий термінал не підключений. Операція по картці не виконана.'"));
				
				ВыполнитьОбработкуОповещения(
					ОповещениеПриЗавершении,
					Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Эквайринговый терминал не подключен. Операция по карте не выполнена.';uk='Еквайринговий термінал не підключений. Операція по картці не виконана.'"));
			
			ВыполнитьОбработкуОповещения(
				ОповещениеПриЗавершении,
				Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Ложь, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьОтчетОРозничныхПродажах(КассаККМ)
	
	ОписаниеОшибки = "";
	МассивДокументов = РозничныеПродажиВызовСервера.ЗакрытьКассовуюСмену(КассаККМ, Ложь, ОписаниеОшибки);
	
	// Все результирующие документы выводим пользователю.
	Для Каждого Документ Из МассивДокументов Цикл
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ, ПровестиПриОткрытии", Документ, Истина));
		
	КонецЦикла;
	
	// Текст ошибки должен появиться в окне открытого документа.
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru='Смена закрыта на фискальном регистраторе.
                              |Дополнительное описание:
                              |%ДополнительноеОписание%'
                              |;uk='Зміна закрита на фіскальному реєстраторі.
                              |Додатковий опис:
                              |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Оповестить("Запись_ОтчетОРозничныхПродажах", Новый Структура, МассивДокументов);
	
КонецПроцедуры

Процедура ЗакрытьКассовуюСменуФрагмент(РезультатВопроса, Параметры) Экспорт
	
	Результат = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если Не Результат И Не Параметры.ИспользоватьБезПодключенияОборудования Тогда
		
		ТекстСообщения = НСтр("ru='При снятии отчета на фискальном регистраторе произошла ошибка.
                             |""%ОписаниеОшибки%""
                             |Отчет на фискальном регистраторе не сформирован.'
                             |;uk='При знятті звіту на фіскальному реєстраторі сталася помилка.
                             |""%ОписаниеОшибки%""
                             |Звіт на фіскальному реєстраторі не сформований.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Параметры.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Параметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещенияЗавершение, Ложь);
		КонецЕсли;
		
	Иначе
		
		СформироватьОтчетОРозничныхПродажах(Параметры.ПараметрыКассыККМ.КассаККМ);
		
		Если Параметры.ОписаниеОповещенияЗавершение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещенияЗавершение, Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#Область УправлениеСостояниемСмены

Процедура УправлениеСостояниемСменыОбработкаКоманды(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "ОткрытьКассовуюСмену" Тогда
		РозничныеПродажиКлиент.ОткрытьКассовуюСмену(
			ДополнительныеПараметры.Форма.ПараметрыКассыККМ,
			Новый ОписаниеОповещения("УправлениеСостояниемСменыПослеОткрытияКассовойСмены", РозничныеПродажиКлиент, ДополнительныеПараметры));
	КонецЕсли;
	
	Если Результат = "ЗакрытьИОткрытьКассовуюСмену" Тогда
		РозничныеПродажиКлиент.ЗакрытьКассовуюСмену(
			ДополнительныеПараметры.Форма.ПараметрыКассыККМ,
			Новый ОписаниеОповещения("УправлениеСостояниемСменыПослеЗакрытияКассовойСмены", РозничныеПродажиКлиент, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСостояниемСменыПослеЗакрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма.Объект, "КассаККМ") Тогда
			КассаККМ = ДополнительныеПараметры.Форма.Объект.КассаККМ;
		Иначе
			КассаККМ = ДополнительныеПараметры.Форма.КассаККМ;
		КонецЕсли;
		
		ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
		
		Если Не ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
			РозничныеПродажиКлиент.ОткрытьКассовуюСмену(ДополнительныеПараметры.Форма.ПараметрыКассыККМ, ДополнительныеПараметры.ОбработкаОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСостояниемСменыПослеОткрытияКассовойСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДополнительныеПараметры.Форма.Объект, "КассаККМ") Тогда
			КассаККМ = ДополнительныеПараметры.Форма.Объект.КассаККМ;
		Иначе
			КассаККМ = ДополнительныеПараметры.Форма.КассаККМ;
		КонецЕсли;
		
		ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(КассаККМ);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.Форма.Объект, ДополнительныеПараметры.Форма.СтруктураСостояниеКассовойСмены,,"Кассир");
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаПлатежнымиКартами

Процедура ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала(СтруктураЭквайринговыйТерминал, ДополнительныеПараметры) Экспорт
	
	Если СтруктураЭквайринговыйТерминал <> Неопределено Тогда
		ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	Иначе
		ИдентификаторУстройстваЭТ = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры.ИдентификаторУстройстваЭТ      = ИдентификаторУстройстваЭТ;
	ДополнительныеПараметры.СтруктураЭквайринговыйТерминал = СтруктураЭквайринговыйТерминал;
	
	ДобавитьОплатуКартойФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

Функция ДобавитьОплатуКартойФрагмент(ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторУстройстваЭТ) Или (ДополнительныеПараметры.СтруктураЭквайринговыйТерминал <> Неопределено И ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
		
		Если Не ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
			РезультатЭТ = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ДополнительныеПараметры.ИдентификаторУстройстваЭТ);
		Иначе
			РезультатЭТ = Истина;
		КонецЕсли;
		
		Если РезультатЭТ Тогда
			
			ИдентификаторУстройстваФР = ДополнительныеПараметры.ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ДополнительныеПараметры.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			РезультатФР = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ИдентификаторУстройстваФР);
			
			Если РезультатФР Или ИспользоватьБезПодключенияОборудования Тогда
				
				// Предварительно авторизуем операцию
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("Сумма",       ДополнительныеПараметры.ФормаАвторизации_Сумма);
				ПараметрыФормы.Вставить("ПределСуммы", ДополнительныеПараметры.ФормаАвторизации_ПределСуммы);
				ПараметрыФормы.Вставить("Валюта",      ДополнительныеПараметры.Валюта);
				
				Если ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
					ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
				КонецЕсли;
				
				ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
				ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
				ДополнительныеПараметры.Вставить("РезультатФР", РезультатФР);
				
				ОткрытьФорму(
					"Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,,
					Новый ОписаниеОповещения(
						"ДобавитьОплатуКартойЗавершение",
						РозничныеПродажиКлиент,
						ДополнительныеПараметры),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Фискальный регистратор не подключен. Операция по карте не выполнена.';uk='Фіскальний реєстратор не підключений. Операція по картці не виконана.'"));
				
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
				
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Эквайринговый терминал не подключен. Операция по карте не выполнена.';uk='Еквайринговий термінал не підключений. Операція по картці не виконана.'"));
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
			
		КонецЕсли;
		
	Иначе
		
		// Не выбран эквайринговый терминал
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОплатуКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
		Возврат;
	КонецЕсли;
	
	// Предварительно авторизуем операцию
	
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;
	
	ВходныеПараметры.Добавить(Результат.Сумма);
	ВходныеПараметры.Добавить(Результат.НомерКарты);
	ВходныеПараметры.Добавить(Результат.НомерЧека);
	
	СуммаОперации       = Результат.Сумма;
	НомерКарты          = Результат.НомерКарты;
	НомерСсылкиОперации = Результат.СсылочныйНомер;
	НомерЧекаЭТ         = Результат.НомерЧека;
	
	Если Не ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
		
		// Выполнение операции на ЭТ
		РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ,
			"AuthorizeSales",
			ВходныеПараметры,
			ВыходныеПараметры);
		
		Если РезультатЭТ Тогда
			
			СтрокаСлипЧека = ВыходныеПараметры[3][1];
			
			Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
				глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
			КонецЕсли;
			
			НомерКарты = ?(Не ПустаяСтрока(НомерКарты) 
			И ПустаяСтрока(СтрЗаменить(СокрЛП(ВыходныеПараметры[0]), "*", "")), НомерКарты, ВыходныеПараметры[0]);
			
			НомерСсылкиОперации = ВыходныеПараметры[1];
			НомерЧекаЭТ = ВыходныеПараметры[2];
			Если ВыходныеПараметры.Количество() >= 5 Тогда
				КодАвторизации = ВыходныеПараметры[4];
			Иначе
				КодАвторизации = "";
			КонецЕсли;
			
		Иначе
			
			ТекстОписаниеОшибки = ВыходныеПараметры[1];
			
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("КодАвторизации", КодАвторизации);
		ДополнительныеПараметры.Вставить("НомерКарты", НомерКарты);
		ДополнительныеПараметры.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
		ДополнительныеПараметры.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
		ДополнительныеПараметры.Вставить("СуммаОперации", СуммаОперации);
		ДополнительныеПараметры.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
		ДополнительныеПараметры.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
		
		ОплатаКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры);
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Требуется выполнить операцию оплаты на эквайринговом терминале.';uk='Потрібно виконати операцію оплати на еквайринговому терміналі.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru='Сумма операции:';uk='Сума операції:'")        + " "+ СуммаОперации  + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru='Операция оплаты на эквайринговом терминале прошла успешно?';uk='Операція оплати на еквайринговому терміналі пройшла успішно?'");
		
		ДополнительныеПараметры.Вставить("КодАвторизации", КодАвторизации);
		ДополнительныеПараметры.Вставить("НомерКарты", НомерКарты);
		ДополнительныеПараметры.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
		ДополнительныеПараметры.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
		ДополнительныеПараметры.Вставить("СуммаОперации", СуммаОперации);
		ДополнительныеПараметры.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
		ДополнительныеПараметры.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
		ДополнительныеПараметры.Вставить("РезультатЭТ", РезультатЭТ);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОплатаКартойПослеВопросаОЗавершенииАвторизации",
			РозничныеПродажиКлиент,
			ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОплатаКартойПослеВопросаОЗавершенииАвторизации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если РезультатЭТ Тогда
		
		СтрокаСлипЧека = СтрШаблон(
			НСтр("ru='Произведена оплата на сумму %1 %2';uk='Проведена оплата на суму %1 %2'"),
			ДополнительныеПараметры.СуммаОперации,
			ДополнительныеПараметры.Валюта);
		
	Иначе
		
		СтрокаСлипЧека = "";
		ТекстОписаниеОшибки = НСтр("ru='Операция отменена';uk='Операція скасована'");
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтрокаСлипЧека",      СтрокаСлипЧека);
	ДополнительныеПараметры.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
	
	ОплатаКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОплатаКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры)
	
	Если Не РезультатЭТ Тогда
		
		ТекстСообщения = НСтр("ru='При выполнении операции возникла ошибка:
                                    |""%ОписаниеОшибки%"".
                                    |Оплата по карте не была произведена.'
                                    |;uk='При виконанні операції виникла помилка:
                                    |""%ОписаниеОшибки%"".
                                    |Оплата по карті не була виконана.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ОписаниеОшибки%",
			ДополнительныеПараметры.ТекстОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
	
	Иначе
		
		РезультатФР = Ложь;
		Если Не ПустаяСтрока(ДополнительныеПараметры.СтрокаСлипЧека)
			И Не ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования Тогда
			
			ВходныеПараметры = Новый Массив();
			ВходныеПараметры.Добавить(ДополнительныеПараметры.СтрокаСлипЧека);
			ВыходныеПараметры = Неопределено;
			
			РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(
				ДополнительныеПараметры.ИдентификаторУстройстваФР,
				"PrintText",
				ВходныеПараметры,
				ВыходныеПараметры);
			
		КонецЕсли;
		
		Если Не РезультатФР
			И Не ПустаяСтрока(ДополнительныеПараметры.СтрокаСлипЧека)
			И Не ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибкиФР = ВыходныеПараметры[1];
			
			ВходныеПараметры  = Новый Массив();
			ВыходныеПараметры = Неопределено;
			
			ВходныеПараметры.Добавить(ДополнительныеПараметры.СуммаОперации);
			ВходныеПараметры.Добавить(ДополнительныеПараметры.НомерСсылкиОперации);
			ВходныеПараметры.Добавить(ДополнительныеПараметры.НомерЧекаЭТ);
			
			// Выполнение операции на ЭТ
			МенеджерОборудованияКлиент.ВыполнитьКоманду(
				ДополнительныеПараметры.ИдентификаторУстройстваЭТ,
				"EmergencyVoid",
				ВходныеПараметры,
				ВыходныеПараметры);
			
			ТекстСообщения = НСтр("ru='При печати слип-чека возникла ошибка:
                                        |""%ОписаниеОшибки%"".
                                        |Операция по карте была отменена.'
                                        |;uk='При друку сліп-чека виникла помилка:
                                        |""%ОписаниеОшибки%"".
                                        |Операція по карті була скасована.'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения,
			                             "%ОписаниеОшибки%",
			                             ОписаниеОшибкиФР);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Неопределено);
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтменаОплатыПлатежнымиКартами

Процедура ОтменаОплатыКартойПослеВопросаОЗавершенииАвторизации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если РезультатЭТ Тогда
		
		СтрокаСлипЧека = СтрШаблон(
			НСтр("ru='Отменена оплата на сумму %1 %2';uk='Скасована оплата на суму %1 %2'"),
			ДополнительныеПараметры.СуммаОперации,
			ДополнительныеПараметры.Валюта);
		
	Иначе
		
		СтрокаСлипЧека = "";
		ТекстОписаниеОшибки = НСтр("ru='Операция отменена';uk='Операція скасована'");
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтрокаСлипЧека",      СтрокаСлипЧека);
	ДополнительныеПараметры.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
	
	ОтменаОплатыКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОтменаОплатыКартойПослеЗавершенияАвторизации(РезультатЭТ, ДополнительныеПараметры)
	
	Если Не РезультатЭТ Тогда
		
		ТекстСообщения = НСтр("ru='При выполнении операции возникла ошибка:
            |""%ОписаниеОшибки%"".
            |Отмена по карте не была произведена.'
            |;uk='При виконанні операції виникла помилка:
            |""%ОписаниеОшибки%"".
            |Скасування по карті не було виконано.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ОписаниеОшибки%",
			ДополнительныеПараметры.ТекстОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Ложь, Ложь));
		
	Иначе
		
		РезультатФР = Ложь;
		Если Не ПустаяСтрока(ДополнительныеПараметры.СтрокаСлипЧека)
			И Не ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования Тогда
			
			ВходныеПараметры  = Новый Массив();
			ВходныеПараметры.Добавить(ДополнительныеПараметры.СтрокаСлипЧека);
			ВыходныеПараметры = Неопределено;
			
			РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(
				ДополнительныеПараметры.ИдентификаторУстройстваФР,
				"PrintText",
				ВходныеПараметры,
				ВыходныеПараметры);
			
		КонецЕсли;
		
		Если Не РезультатФР
			И Не ПустаяСтрока(ДополнительныеПараметры.СтрокаСлипЧека)
			И Не ДополнительныеПараметры.ИспользоватьБезПодключенияОборудования Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru='При печати слип-чека возникла ошибка:
                |""%1"".
                |Операция по карте была отменена.'
                |;uk='При друці сліп-чека виникла помилка:
                |""%1"".
                |Операція по картці була скасована.'"), ВыходныеПараметры[1]));
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартойЗавершение", ДополнительныеПараметры.Форма, ДополнительныеПараметры));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтменитьОплатуПлатежнымиКартамиПоследовательно(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() > 0 Тогда
		
		СтрокаОплаты = ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами[ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() - 1];
		ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Удалить(ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Найти(СтрокаОплаты));
		
		ПараметрыОтмены = Новый Структура;
		ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиПоследовательно", РозничныеПродажиКлиент, ДополнительныеПараметры));
		ПараметрыОтмены.Вставить("ТекущиеДанные", СтрокаОплаты);
		ПараметрыОтмены.Вставить("Форма", ДополнительныеПараметры.Форма);
		ПараметрыОтмены.Вставить("Валюта", ДополнительныеПараметры.Валюта);
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартой", ДополнительныеПараметры.Форма, ПараметрыОтмены));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Процедура ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено 
		И РезультатВыбора.Действие = "ОтменитьОплату" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КодАвторизации");
		ПараметрыОтбора.Вставить("НомерПлатежнойКарты");
		ПараметрыОтбора.Вставить("НомерСтроки");
		ПараметрыОтбора.Вставить("НомерЧекаЭТ");
		ПараметрыОтбора.Вставить("СсылочныйНомер");
		ПараметрыОтбора.Вставить("Сумма");
		ПараметрыОтбора.Вставить("ЭквайринговыйТерминал");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, РезультатВыбора.ВыбраннаяСтрока);
		
		НайденныеСтроки = ДополнительныеПараметры.Форма.Объект.ОплатаПлатежнымиКартами.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ПараметрыОтмены = Новый Структура;
			ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиЗавершение", ДополнительныеПараметры.Форма, ДополнительныеПараметры));
			ПараметрыОтмены.Вставить("ТекущиеДанные", НайденныеСтроки[0]);
			ПараметрыОтмены.Вставить("Форма", ДополнительныеПараметры.Форма);
			ПараметрыОтмены.Вставить("Валюта", ДополнительныеПараметры.Валюта);
			
			ВыполнитьОбработкуОповещения(
				Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартой", ДополнительныеПараметры.Форма, ПараметрыОтмены));
			
		КонецЕсли;
		
	ИначеЕсли РезультатВыбора <> Неопределено 
		И РезультатВыбора.Действие = "НапечататьСлипЧек" Тогда
		
		//
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

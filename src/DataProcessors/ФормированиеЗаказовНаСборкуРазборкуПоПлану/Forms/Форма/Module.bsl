
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Обработка = РеквизитФормыВЗначение("Объект");
	
	ИспользоватьЗаказыНаСборку   = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад);
	КонецЕсли; 
	
	ИнициализироватьКомпоновщикНастроек(Обработка);
	ВосстановитьНастройки();
	Параметры.ИспользуемыеЗначенияРеквизитов = Новый Структура("Сценарий, Склад");
	ЗаполнитьЗначенияСвойств(Параметры.ИспользуемыеЗначенияРеквизитов, Объект);
	
	Элементы.ГруппаОтборСклад.Видимость                  = ИспользоватьНесколькоСкладов;
	Элементы.ФормированиеЗаказовЗаполнитьСклад.Видимость = ИспользоватьНесколькоСкладов;
	
	ОтборСклад = ЗначениеЗаполнено(Объект.Склад);
	Элементы.Склад.Доступность = ОтборСклад = 1;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ИспользоватьЗаказыНаСборку Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Для формирования заказов необходимо включить настройку ""Заказы на сборку (разборку)"" в ""Администрирование -> Склад и доставка""';uk='Для формування замовлень необхідно включити настройку ""Замовлення на збирання (розбирання)"" в ""Адміністрування -> Склад і доставка""'"));
		Отказ = Истина;
		Возврат;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки()

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		Настройки.Вставить("Объект.Склад", ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство" Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ОтборСклад = 1 И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Склад"" не заполнено';uk='Поле ""Склад"" не заповнено'"),
			,
			"Объект.Склад",
			, 
			Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПериодЗаказаОкончание) И Объект.ПериодЗаказаОкончание < Объект.ПериодЗаказаНачало Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Окончание периода заказа должно быть больше начала периода.';uk='Закінчення періоду замовлення повинно бути більше початку періоду.'"),
			,
			"Объект.ПериодЗаказаОкончание",
			, 
			Отказ);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ПериодПоступленияОкончание) И Объект.ПериодПоступленияОкончание < Объект.ПериодПоступленияНачало Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Окончание периода поступления должно быть больше начала периода.';uk='Закінчення періоду надходження повинно бути більше початку періоду.'"),
			,
			"Объект.ПериодПоступленияОкончание",
			, 
			Отказ);
		
	КонецЕсли; 
	
	Если НЕ Объект.РежимЗаполненияДанных Тогда
		
		РеквизитыПроверки = Новый Структура;
		РеквизитыПроверки.Вставить("Номенклатура", НСтр("ru='Номенклатура';uk='Номенклатура'"));
		РеквизитыПроверки.Вставить("Склад", НСтр("ru='Склад';uk='Склад'"));
		РеквизитыПроверки.Вставить("ВариантКомплектации", НСтр("ru='Комплектация';uk='Комплектація'"));
		
		
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%1"" в строке %2.';uk='Не заповнена колонка ""%1"" в рядку %2.'");
		Для каждого СтрокаДанныеЗаказа Из Объект.ФормированиеЗаказов Цикл
			Если НЕ СтрокаДанныеЗаказа.ОтметитьКЗаказу ИЛИ СтрокаДанныеЗаказа.КоличествоУпаковок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого РеквизитТЧ Из РеквизитыПроверки Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаДанныеЗаказа[РеквизитТЧ.Ключ]) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонСообщения, 
												РеквизитТЧ.Значение,
												СтрокаДанныеЗаказа.НомерСтроки);
												
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ФормированиеЗаказов", СтрокаДанныеЗаказа.НомерСтроки, РеквизитТЧ.Ключ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	Элементы.Склад.Доступность = ОтборСклад = 1;
	Если ОтборСклад = 0 Тогда
		Объект.Склад = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоступленияНачалоПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоступленияОкончаниеПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаказаНачалоПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаказаОкончаниеПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("НачалоПериода", 	ТекСтрока.НачалоПериодаСборки);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ДатаОкончанияСборки));
	
	КлючСтроки.Вставить("Склад", 	           ТекСтрока.Склад);
	КлючСтроки.Вставить("ВариантКомплектации", ТекСтрока.ВариантКомплектации);
	КлючСтроки.Вставить("ТипОперации",         ТекСтрока.ТипОперации);
	КлючСтроки.Вставить("Сценарий", 		   Параметры.ИспользуемыеЗначенияРеквизитов.Сценарий);
	
	СписокДокументов = ПолучитьСписокПлановПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаПланаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ';uk='Виберіть документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("НачалоПериода",    ТекСтрока.НачалоПериодаСборки);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ДатаОкончанияСборки));
	
	КлючСтроки.Вставить("Склад", 	           ТекСтрока.Склад);
	КлючСтроки.Вставить("ВариантКомплектации", ТекСтрока.ВариантКомплектации);
	КлючСтроки.Вставить("ТипОперации",         ТекСтрока.ТипОперации);
	
	СписокДокументов = ПолучитьСписокЗаказовПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаЗаказаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ';uk='Виберіть документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущаяСтрока;
	ОбновитьСрокСборкиПриИзмененииСклада(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ФормированиеЗаказовНаСборкуРазборкуПоПлану.Форма.Команда.Далее");
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		
		ОчиститьСообщения();
		
		СтруктураПоиска = Новый Структура("ОтметитьКЗаказу", Истина);
	 	КорзинаЗаказов = Объект.ФормированиеЗаказов.НайтиСтроки(СтруктураПоиска);
		
		Если КорзинаЗаказов.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Нет заказов к оформлению. Отметьте флажком количество в колонке <К заказу>.';uk='Немає замовлень до оформлення. Позначте прапорцем кількість в колонці <До замовлення>.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		СоздатьЗаказыНаСервере();
		
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Ссылка",
			СформированныеЗаказы,
			ВидСравненияКомпоновкиДанных.ВСписке,
			НСтр("ru='Сформированные заказы';uk='Сформовані замовлення'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Если СформированныеЗаказы.Количество() > 0 Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить заказы';uk='Вилучити замовлення'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("НазадЗавершение", ЭтотОбъект), 
				НСтр("ru='Список созданных заказов не пуст. Созданные заказы будут удалены. Удалить заказы и продолжить?';uk='Список створених замовлень не порожній. Створені замовлення будуть видалені. Видалити замовлення та продовжити?'"),
				Кнопки);
			Возврат;
		КонецЕсли;
		
		ОчиститьСообщения();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаказыНаСервере(СформированныеЗаказы.ВыгрузитьЗначения());
	СформированныеЗаказы.Очистить();
	
	ОчиститьСообщения();
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьНоменклатуру(Команда)
	
	ПараметрыФормы = Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек);
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаСборкуРазборкуПоПлану.Форма.ФормаОтбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ФормированиеЗаказовНаСборкуРазборкуПоПлану.Форма.Команда.Заполнить");
	
	Объект.РежимЗаполненияДанных = Истина;
	Если НЕ ПроверитьЗаполнение() Тогда
		Объект.РежимЗаполненияДанных = Ложь;
		Возврат
	КонецЕсли;
	Объект.РежимЗаполненияДанных = Ложь;
	
	Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр("ru='В таблице имеются строки. При заполнении строки будут очищены. Продолжить?';uk='В таблиці є рядки. При заповненні рядка будуть очищені. Продовжити?'"), Режим, 0);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
    
    Перем ТекстОшибки;
    
    Объект.ФормированиеЗаказов.Очистить();
    ОбновитьНаСервере();
    Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
        ТекстОшибки = НСтр("ru='В выбранном периоде нет утвержденного плана для сценария, соответствующего установленным отборам.';uk='В вибраному періоді немає затвердженого плану для сценарію, що відповідає встановленим відборам.'");
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
    КонецЕсли;
    ЗаполнитьЗначенияСвойств(Параметры.ИспользуемыеЗначенияРеквизитов, Объект);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаказов(Команда)
	
	ОткрытьФорму("Документ.ЗаказНаСборку.ФормаСписка"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеЗаказов(Команда)
	
	Объект.ФормированиеЗаказов.Очистить();
	СформированныеЗаказы.Очистить();
	
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
	УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаЗаказа(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалПериодаЗаказаЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодЗаказаНачало", "ПериодЗаказаОкончание"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаСборки(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалПериодаСборкиЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодПоступленияНачало", "ПериодПоступленияОкончание"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСклад(Команда)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ФормированиеЗаказов.ВыделенныеСтроки;
	СтруктураОтбора = Новый Структура("ЭтоГруппа", Ложь);
	СтруктураПараметров = Новый Структура("Отбор, ВыборГруппИЭлементов", СтруктураОтбора, ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    ВыбранныйСклад = Результат;
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьНаСервере()
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных();
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	Запрос.УстановитьПараметр("Склад", 	  Объект.Склад);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Объект.ФормированиеЗаказов.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаЗаказа ИЗ Объект.ФормированиеЗаказов Цикл
			СтрокаЗаказа.Период.ДатаНачала    = СтрокаЗаказа.НачалоПериодаСборки;
			СтрокаЗаказа.Период.ДатаОкончания = СтрокаЗаказа.ДатаОкончанияСборки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросСОтборамиКомпоновкиДанных()
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода",       Объект.ПериодПоступленияНачало);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОкончаниеПериода",    Объект.ПериодПоступленияОкончание);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаНачалаЗаказа",    Объект.ПериодЗаказаНачало);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаОкончанияЗаказа", Объект.ПериодЗаказаОкончание);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , , Ложь, );
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции 

#КонецОбласти

#Область РаботаСЗаказами

&НаСервере
Процедура СоздатьЗаказыНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстОшибкиЗаписи = НСтр("ru='%1 невозможно записать документ по причине:
                                |%2'
                                |;uk='%1 неможливо записати документ з причини:
                                |%2'");
	ТекстОшибкиЗаполнения = НСтр("ru='%1 невозможно провести по причине некорректного заполнения.';uk='%1 неможливо провести через некоректне заповнення.'");
	
	
	СпособыОбеспечения = Новый Соответствие;
	
	Для каждого СтрокаДанныеЗаказа Из Объект.ФормированиеЗаказов Цикл
		Если НЕ СтрокаДанныеЗаказа.ОтметитьКЗаказу ИЛИ СтрокаДанныеЗаказа.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура("ТипОперации,Склад,Номенклатура,Характеристика,ВариантКомплектации, Количество,
			|КоличествоУпаковок, Упаковка, НачалоСборкиРазборки, ОкончаниеСборкиРазборки, ДлительностьСборкиРазборки");
		
		ДанныеЗаполнения.Вставить("ДлительностьСборкиРазборки", СтрокаДанныеЗаказа.ДлительностьСборкиРазборки);
		
		ДокументОбъект = Документы.ЗаказНаСборку.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ДокументОбъект.Комментарий = НСтр("ru='Сформирован автоматически обработкой ""Формирование заказов на сборку (разборку) по плану"".';uk='Сформований автоматично обробкою ""Формування замовлень на збирання (розбирання) за планом"".'");
		
		Если ЗначениеЗаполнено(СтрокаДанныеЗаказа.СпособОбеспечения) Тогда
		
			ПараметрыСпособа = СпособыОбеспечения.Получить(СтрокаДанныеЗаказа.СпособОбеспечения);
			Если ПараметрыСпособа = Неопределено Тогда
			
				ПараметрыСпособа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанныеЗаказа.СпособОбеспечения, "Организация, Подразделение, ДлительностьВДнях");
				СпособыОбеспечения.Вставить(СтрокаДанныеЗаказа.СпособОбеспечения, ПараметрыСпособа);
				
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ПараметрыСпособа.ДлительностьВДнях) Тогда
				ДанныеЗаполнения.ДлительностьСборкиРазборки = ПараметрыСпособа.ДлительностьВДнях;
			КонецЕсли; 
			
			ДанныеЗаполнения.Вставить("Организация", ПараметрыСпособа.Организация);
			ДанныеЗаполнения.Вставить("Подразделение", ПараметрыСпособа.Подразделение);
			
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДанныеЗаказа);
		
		ОкончаниеСборкиРазборки = НачалоДня(СтрокаДанныеЗаказа.НачалоПериодаСборки);
		
		ДанныеЗаполнения.ДлительностьСборкиРазборки = Макс(ДанныеЗаполнения.ДлительностьСборкиРазборки - 1, 0);
		
		НачалоСборкиРазборки = Неопределено;
		Если ЗначениеЗаполнено(СтрокаДанныеЗаказа.Календарь) 
			И ДанныеЗаполнения.ДлительностьСборкиРазборки <> 0 Тогда
				
			НачалоСборкиРазборки = ПолучитьДатуПоКалендарю(
											СтрокаДанныеЗаказа.Календарь, 
											ОкончаниеСборкиРазборки, 
											-ДанныеЗаполнения.ДлительностьСборкиРазборки);
		КонецЕсли;
		
		Если НачалоСборкиРазборки = Неопределено Тогда
			НачалоСборкиРазборки = ОкончаниеСборкиРазборки - ДанныеЗаполнения.ДлительностьСборкиРазборки * 86400;
		КонецЕсли;
		
		ДанныеЗаполнения.НачалоСборкиРазборки = НачалоСборкиРазборки;
		ДанныеЗаполнения.ОкончаниеСборкиРазборки = ОкончаниеСборкиРазборки;
		
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		
		Попытка
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Сообщения = ПолучитьСообщенияПользователю(Истина);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаполнения, Строка(ДокументОбъект.Ссылка)), 
					ДокументОбъект);
			КонецЕсли;
			
			СформированныеЗаказы.Добавить(ДокументОбъект.Ссылка);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(НСтр("ru='Формирование заказов на сборку (разборку) по плану';uk='Формування замовлень на збирання (розбирання) за планом'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ТекстОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаписи, Строка(ДокументОбъект.Ссылка), ТекстОшибки),
				ДокументОбъект);
			
		КонецПопытки; 
		
	КонецЦикла; 
	
	ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка",
		СформированныеЗаказы,
		ВидСравненияКомпоновкиДанных.ВСписке,
		НСтр("ru='Сформированные заказы';uk='Сформовані замовлення'"),
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуПоКалендарю(Знач ГрафикРаботы, Знач ДатаОт, Знач КоличествоДней)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарныеГрафики.Год,
	|	МАКСИМУМ(КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода) КАК ДнейВГрафике
	|ПОМЕСТИТЬ ВТКоличествоДнейВГрафикеПоГодам
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &ГрафикРаботы
	|	И КалендарныеГрафики.ДеньВключенВГрафик
	|
	|СГРУППИРОВАТЬ ПО
	|	КалендарныеГрафики.Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоДнейВГрафикеПоГодам.Год,
	|	СУММА(ЕСТЬNULL(КоличествоДнейПредыдущихГодов.ДнейВГрафике, 0)) КАК ДнейВГрафике
	|ПОМЕСТИТЬ ВТКоличествоДнейСУчетомПредыдущихГодов
	|ИЗ
	|	ВТКоличествоДнейВГрафикеПоГодам КАК КоличествоДнейВГрафикеПоГодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоДнейВГрафикеПоГодам КАК КоличествоДнейПредыдущихГодов
	|		ПО (КоличествоДнейПредыдущихГодов.Год < КоличествоДнейВГрафикеПоГодам.Год)
	|
	|СГРУППИРОВАТЬ ПО
	|	КоличествоДнейВГрафикеПоГодам.Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода) КАК КоличествоДнейВГрафикеСНачалаГода
	|ПОМЕСТИТЬ ВТКоличествоДнейВГрафикеНаДатуОтсчета
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ДатаГрафика >= &ДатаОт
	|	И КалендарныеГрафики.Год = ГОД(&ДатаОт)
	|	И КалендарныеГрафики.Календарь = &ГрафикРаботы
	|	И КалендарныеГрафики.ДеньВключенВГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КалендарныеГрафики.ДатаГрафика, НЕОПРЕДЕЛЕНО) КАК ДатаПоКалендарю
	|ИЗ
	|	ВТКоличествоДнейВГрафикеНаДатуОтсчета КАК КоличествоДнейВГрафикеНаДатуОтсчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоДнейСУчетомПредыдущихГодов КАК КоличествоДнейСУчетомПредыдущихГодовНаДатуОтсчета
	|		ПО (КоличествоДнейСУчетомПредыдущихГодовНаДатуОтсчета.Год = ГОД(&ДатаОт))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоДнейСУчетомПредыдущихГодов КАК КоличествоДнейСУчетомПредыдущихГодов
	|			ПО (КоличествоДнейСУчетомПредыдущихГодов.Год = КалендарныеГрафики.Год)
	|		ПО (КоличествоДнейВГрафикеНаДатуОтсчета.КоличествоДнейВГрафикеСНачалаГода + КоличествоДнейСУчетомПредыдущихГодовНаДатуОтсчета.ДнейВГрафике + &КоличествоДней = КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода + КоличествоДнейСУчетомПредыдущихГодов.ДнейВГрафике)
	|			И (КалендарныеГрафики.Календарь = &ГрафикРаботы)
	|			И (КалендарныеГрафики.ДеньВключенВГрафик)";
	
	Запрос.УстановитьПараметр("ДатаОт", НачалоДня(ДатаОт));
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПоКалендарю;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции
 
//Удаляет заказы на сервере с контролем ссылочной целостности.
&НаСервереБезКонтекста
Функция УдалитьЗаказыНаСервере(СсылкиНаУдаление)
	
	ТабСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	Сообщение = Новый СообщениеПользователю();
	ТекстСообщения = "ru = ""Имеются ссылки на объект %1  %2. Документ не удален""";
	Для Каждого Ссылка из ТабСсылок Цикл
		
		Если Ссылка[0] <> Ссылка[1] Тогда
			
			Сообщение.Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1])); 
			Сообщение.Сообщить();
			
			Индекс = СсылкиНаУдаление.Найти(Ссылка[0]);
			Если Индекс <> Неопределено Тогда
			
				СсылкиНаУдаление.Удалить(Индекс);
			
			КонецЕсли;
		
	КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСНастройкамиПользователя

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(Обработка)
	
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетКомпоновки");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПользовательскиеНастройки",  КомпоновщикНастроек.ПользовательскиеНастройки);
	Настройки.Вставить("Сценарий",                   Объект.Сценарий);
	Настройки.Вставить("Склад",                      Объект.Склад);
	Настройки.Вставить("ПериодПоступленияНачало",    Объект.ПериодПоступленияНачало);
	Настройки.Вставить("ПериодПоступленияОкончание", Объект.ПериодПоступленияОкончание);
	Настройки.Вставить("ПериодПоступленияНачало",    Объект.ПериодЗаказаНачало);
	Настройки.Вставить("ПериодПоступленияОкончание", Объект.ПериодЗаказаОкончание);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ФормированиеЗаказовНаСборкуРазборкуПоПлану", "Настройки", Настройки);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЗаказовНаСборкуРазборкуПоПлану", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда

		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		ЗначениеНастроек.Свойство("Сценарий", 			        Объект.Сценарий);
		ЗначениеНастроек.Свойство("Склад", 		                Объект.Склад);
		ЗначениеНастроек.Свойство("ПериодПоступленияНачало", 	Объект.ПериодПоступленияНачало);
		ЗначениеНастроек.Свойство("ПериодПоступленияОкончание", Объект.ПериодПоступленияОкончание);
		ЗначениеНастроек.Свойство("ПериодЗаказаНачало", 	    Объект.ПериодЗаказаНачало);
		ЗначениеНастроек.Свойство("ПериодЗаказаОкончание",      Объект.ПериодЗаказаОкончание);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПошаговогоМастера

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанели(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
				
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг1;
		Элементы.ДалееШаг1.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг2;
		Элементы.ЗавершитьФормированиеЗаказовШаг2.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Страница = Форма.Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница;
	
	Если Страница = Форма.Элементы.СтраницаШаг1 Тогда		
		
		Форма.Элементы.ПодЗаголовок.Заголовок = НСтр("ru='Шаг 1 из 2. Определение заказов';uk='Крок 1 з 2. Визначення замовлень'");
		
	ИначеЕсли Страница = Форма.Элементы.СтраницаШаг2 Тогда		
		
		Форма.Элементы.ПодЗаголовок.Заголовок = НСтр("ru='Шаг 2 из 2. Уточнение сформированных заказов';uk='Крок 2 із 2. Уточнення сформованих замовлень'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура УстановитьИнтервалПериодаЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаСборкиЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ФормированиеЗаказовХарактеристика",
																		     "Объект.ФормированиеЗаказов.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФормированиеЗаказовВариантКомплектации.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФормированиеЗаказовСклад.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.ОтметитьКЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере 
Процедура ПереключитьФлажки(Устанавливать)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Устанавливать И НЕ СтрокаТаблицы.ОтметитьКЗаказу И СтрокаТаблицы.КоличествоУпаковок > 0 Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Истина;
			
		ИначеЕсли Не Устанавливать И СтрокаТаблицы.ОтметитьКЗаказу Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПлановПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ПланыСборкиРазборкиОбороты.КоличествоОборот) КАК Количество,
	|	ПланыСборкиРазборкиОбороты.Регистратор КАК Документ,
	|	ДокПланСборкиРазборки.МоментВремени КАК МоментВремени,
	|	ДокПланСборкиРазборки.Дата КАК ДатаДокумента,
	|	ДокПланСборкиРазборки.Номер КАК НомерДокумента
	|ИЗ
	|	РегистрНакопления.ПланыСборкиРазборки.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И ТипОперации = &ТипОперации
	|				И Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВариантКомплектации = &ВариантКомплектации) КАК ПланыСборкиРазборкиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланСборкиРазборки КАК ДокПланСборкиРазборки
	|		ПО ПланыСборкиРазборкиОбороты.Регистратор = ДокПланСборкиРазборки.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыСборкиРазборкиОбороты.Регистратор,
	|	ДокПланСборкиРазборки.МоментВремени,
	|	ДокПланСборкиРазборки.Дата,
	|	ДокПланСборкиРазборки.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (№ %2 от %3)';uk='%1 (№ %2 від %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗаказовПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗаказНаСборку.Количество) КАК Количество,
	|	ЗаказНаСборку.Ссылка КАК Документ,
	|	ЗаказНаСборку.Дата КАК ДатаДокумента,
	|	ЗаказНаСборку.Номер КАК НомерДокумента
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаСборку.Склад = &Склад
	|		КОНЕЦ
	|	И ЗаказНаСборку.ВариантКомплектации = &ВариантКомплектации
	|	И ЗаказНаСборку.Номенклатура = &Номенклатура
	|	И ЗаказНаСборку.Характеристика = &Характеристика
	|	И ЗаказНаСборку.ТипОперации = &ТипОперации
	|	И ЗаказНаСборку.Количество <> 0
	|	И ЗаказНаСборку.Проведен
	|	И ВЫБОР
	|			КОГДА ЗаказНаСборку.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
	|				ТОГДА ЗаказНаСборку.ОкончаниеСборкиРазборки МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|			ИНАЧЕ ЗаказНаСборку.НачалоСборкиРазборки МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаСборку.Ссылка,
	|	ЗаказНаСборку.Дата,
	|	ЗаказНаСборку.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаСборку.МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (№ %2 от %3)';uk='%1 (№ %2 від %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьНачалоОкончаниеПериодаПлана(Сценарий, НачалоПериода, ОкончаниеПериода)

	Запрос = новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ)
	               |		ИНАЧЕ &НачалоПериода
	               |	КОНЕЦ КАК НачалоПериода,
	               |	ВЫБОР
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ГОД)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ПОЛУГОДИЕ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, КВАРТАЛ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, МЕСЯЦ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕКАДА)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, НЕДЕЛЯ)
	               |		ИНАЧЕ &ОкончаниеПериода
	               |	КОНЕЦ КАК ОкончаниеПериода";
				   
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
	Запрос.УстановитьПараметр("Периодичность", 		Периодичность);   
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);   
	Запрос.УстановитьПараметр("ОкончаниеПериода", 	КонецДня(ОкончаниеПериода));   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ГраницыПериода = Новый Структура();
	ГраницыПериода.Вставить("НачалоПериода", 	?(ЗначениеЗаполнено(НачалоПериода), 	Выборка.НачалоПериода, 		НачалоПериода));
	ГраницыПериода.Вставить("ОкончаниеПериода", ?(ЗначениеЗаполнено(ОкончаниеПериода), 	Выборка.ОкончаниеПериода, 	ОкончаниеПериода));
	
	Возврат ГраницыПериода;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненныхСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.ФормированиеЗаказов, МассивВыделенныхСтрок, Склад);
	
	ОбновитьСрокСборкиПриИзмененииСклада(МассивВыделенныхСтрок);
	
	Возврат ЗаполненныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьСрокСборкиПриИзмененииСклада(СписокСтрок)
	
	Если ТипЗнч(СписокСтрок) = Тип("Массив") Тогда
		ИзмененныеСтроки = СписокСтрок;
	Иначе
		ИзмененныеСтроки = Новый Массив;
		ИзмененныеСтроки.Добавить(СписокСтрок);
	КонецЕсли; 
	
	СтрокиДляОбработки = Новый Массив;
	СоответствиеСтрок = Новый Соответствие;
	Для каждого ИдентификаторСтроки Из ИзмененныеСтроки Цикл
		ДанныеСтроки = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокиДляОбработки.Добавить(ДанныеСтроки);
		СоответствиеСтрок.Вставить(ДанныеСтроки.НомерСтроки, ДанныеСтроки);
	КонецЦикла; 
	
	ТаблицаЗаказы = Объект.ФормированиеЗаказов.Выгрузить(СтрокиДляОбработки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗаказы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗаказы.Склад КАК Склад,
	|	ТаблицаЗаказы.Календарь КАК Календарь,
	|	ТаблицаЗаказы.НачалоПериодаСборки КАК НачалоПериодаСборки,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаЗаказы
	|ИЗ
	|	&ТаблицаЗаказы КАК ТаблицаЗаказы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Склад          КАК Склад,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ТаблицаЗаказы КАК Таблица
	|;
	|
	|//////////////////////////////////////////////
	|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ") + "
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.Календарь,
	|	КалендарныеГрафики.Год,
	|	МАКСИМУМ(КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода) КАК КоличествоДнейВГрафикеСНачалаГода
	|ПОМЕСТИТЬ ГрафикиКоличествоДнейВПрошломГоду
	|ИЗ
	|	ТаблицаЗаказы КАК ТаблицаЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО ТаблицаЗаказы.Календарь = КалендарныеГрафики.Календарь
	|			И (ГОД(ТаблицаЗаказы.НачалоПериодаСборки) - 1 = КалендарныеГрафики.Год)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.Календарь,
	|	КалендарныеГрафики.Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(Способы.СрокИсполненияЗаказа, 0) КАК ДнейДоЗаказа,
	|	ЕСТЬNULL(Способы.ДлительностьВДнях, 0) КАК ДлительностьСборкиРазборки,
	|	ТаблицаЗаказы.Календарь КАК Календарь,
	|	ТаблицаЗаказы.НачалоПериодаСборки КАК НачалоПериодаСборки,
	|	ЕСТЬNULL(Способы.Ссылка, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)) КАК СпособОбеспечения
	|ПОМЕСТИТЬ ТаблицаЗаказыИСрокИсполнения
	|ИЗ
	|	ТаблицаЗаказы КАК ТаблицаЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособыОбеспечения
	|		ПО ТаблицаСпособыОбеспечения.Номенклатура   = ТаблицаЗаказы.Номенклатура
	|		 И ТаблицаСпособыОбеспечения.Характеристика = ТаблицаЗаказы.Характеристика
	|		 И ТаблицаСпособыОбеспечения.Склад          = ТаблицаЗаказы.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК Способы
	|		ПО Способы.Ссылка = ТаблицаСпособыОбеспечения.СпособОбеспеченияПотребностей
	|		 И Способы.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.СборкаРазборка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗаказы.ДнейДоЗаказа КАК ДнейДоЗаказа,
	|	ТаблицаЗаказы.ДлительностьСборкиРазборки КАК ДлительностьСборкиРазборки,
	|	ВЫБОР
	|		КОГДА ГрафикДатаСборки.ДатаГрафика ЕСТЬ NULL 
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаЗаказы.НачалоПериодаСборки, ДЕНЬ, -ТаблицаЗаказы.ДнейДоЗаказа)
	|		ИНАЧЕ ГрафикДатаЗаказа.ДатаГрафика
	|	КОНЕЦ КАК ДатаЗаказа,
	|	ТаблицаЗаказы.СпособОбеспечения
	|ИЗ
	|	ТаблицаЗаказыИСрокИсполнения КАК ТаблицаЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГрафикДатаСборки
	|		ПО ТаблицаЗаказы.Календарь = ГрафикДатаСборки.Календарь
	|			И ТаблицаЗаказы.НачалоПериодаСборки = ГрафикДатаСборки.ДатаГрафика
	|			И (ГОД(ТаблицаЗаказы.НачалоПериодаСборки) = ГрафикДатаСборки.Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиКоличествоДнейВПрошломГоду КАК ГрафикиПрошлыйГод
	|		ПО (ГОД(ТаблицаЗаказы.НачалоПериодаСборки) - 1 = ГрафикиПрошлыйГод.Год)
	|			И (ВЫБОР
	|				КОГДА НЕ ГрафикДатаСборки.ДатаГрафика ЕСТЬ NULL 
	|						И ЕСТЬNULL(ГрафикДатаСборки.КоличествоДнейВГрафикеСНачалаГода, 0) < ТаблицаЗаказы.ДнейДоЗаказа
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ГрафикДатаЗаказа
	|		ПО ТаблицаЗаказы.Календарь = ГрафикДатаЗаказа.Календарь
	|			И (ГрафикДатаЗаказа.ДеньВключенВГрафик)
	|			И (ВЫБОР
	|				КОГДА НЕ ГрафикДатаСборки.ДатаГрафика ЕСТЬ NULL 
	|						И ЕСТЬNULL(ГрафикДатаСборки.КоличествоДнейВГрафикеСНачалаГода, 0) < ТаблицаЗаказы.ДнейДоЗаказа
	|					ТОГДА ГОД(ТаблицаЗаказы.НачалоПериодаСборки) - 1 = ГрафикДатаЗаказа.Год
	|				ИНАЧЕ ГОД(ТаблицаЗаказы.НачалоПериодаСборки) = ГрафикДатаЗаказа.Год
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА НЕ ГрафикДатаСборки.ДатаГрафика ЕСТЬ NULL 
	|						И ЕСТЬNULL(ГрафикДатаСборки.КоличествоДнейВГрафикеСНачалаГода, 0) < ТаблицаЗаказы.ДнейДоЗаказа
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(ГрафикиПрошлыйГод.КоличествоДнейВГрафикеСНачалаГода, 0) - (ТаблицаЗаказы.ДнейДоЗаказа - ЕСТЬNULL(ГрафикДатаСборки.КоличествоДнейВГрафикеСНачалаГода, 0)) <= 0
	|								ТОГДА ГрафикДатаЗаказа.КоличествоДнейВГрафикеСНачалаГода = 1
	|							ИНАЧЕ ЕСТЬNULL(ГрафикиПрошлыйГод.КоличествоДнейВГрафикеСНачалаГода, 0) - (ТаблицаЗаказы.ДнейДоЗаказа - ЕСТЬNULL(ГрафикДатаСборки.КоличествоДнейВГрафикеСНачалаГода, 0)) = ГрафикДатаЗаказа.КоличествоДнейВГрафикеСНачалаГода
	|						КОНЕЦ
	|				ИНАЧЕ ЕСТЬNULL(ГрафикДатаСборки.КоличествоДнейВГрафикеСНачалаГода, 0) - ТаблицаЗаказы.ДнейДоЗаказа = ГрафикДатаЗаказа.КоличествоДнейВГрафикеСНачалаГода
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("ТаблицаЗаказы", ТаблицаЗаказы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаЗаказа = СоответствиеСтрок.Получить(Выборка.НомерСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Выборка, "ДатаЗаказа, ДнейДоЗаказа, ДлительностьСборкиРазборки, СпособОбеспечения");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаПланаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ПланСборкиРазборки.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ВыборДокументаЗаказаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ЗаказНаСборку.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#КонецОбласти

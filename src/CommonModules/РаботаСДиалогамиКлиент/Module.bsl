
#Область ПрограммныйИнтерфейс

// Вызывается при выборе дате актуальности или даты события
//  Изменяет значение даты актуальности или даты события в зависимости от выбранного значения
//
// Параметры:
//  ВыбранноеЗначение		 - Строка	 - выбранное значение отбора
//  СтандартнаяОбработка	 - Булево			 - Флаг стандартной обработки события
//  Форма					 - УправляемаяФорма	 - форма списка документов
//  Список					 - ДинамическийСписок - Список документов
//  ИмяРеквизитаАктуальность - Строка			 - имя реквизита строки отбора по актуальности
//  ИмяРеквизитаДатаСобытия	 - Строка			 - имя реквизита даты, на которую документ будет просрочен
//
Процедура ПриВыбореОтбораПоАктуальности(ВыбранноеЗначение, 
	СтандартнаяОбработка, Форма, Список, ИмяРеквизитаАктуальность, ИмяРеквизитаДатаСобытия) Экспорт
	
	Если СтрНайти(ВыбранноеЗначение, НСтр("ru='Истекает на дату';uk='Закінчується на дату'")) > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Список",            Список);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаАктуальность",      ИмяРеквизитаАктуальность);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаДатаСобытия",       ИмяРеквизитаДатаСобытия);
		
		Оповещение = Новый ОписаниеОповещения("ПриВыбореОтбораПоАктуальностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоясняющийТекст = НСтр("ru='Выберите дату для вывода просроченных документов:';uk='Виберіть дату для виведення прострочених документів:'") + " ";
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДаты",
			Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),
			,
			,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Возврат;
	Иначе
		ДатаСобытия = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает диалог ввода даты. В случае ввода пустой даты - предлагает диалог ввода даты еще раз
//
// Параметры:
// 		Дата - Дата - Начальное значение даты диалога. В эту дату будет помещен результат диалога
// 		Подсказка - Строка - Текст заголовка диалога ввода даты
// 		ЧастьДаты - ЧастиДаты
// 		ОповещениеОВыборе - ОписаниеОповещения - описание оповещения после выбора даты
//
// Возвращаемое значение:
// 		Булево - Истина - в случае если дата введена, Ложь - в случае если пользователь отказался от ввода
//
Процедура ВвестиДатуСКонтролемПустогоЗначения(Дата, Подсказка, ЧастьДаты, ОповещениеОВыборе) Экспорт
	
	ДатаВведена = Ложь;
	ВременноеЗначениеДаты = Дата;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Дата", Дата);
	ДополнительныеПараметры.Вставить("Подсказка", Подсказка);
	ДополнительныеПараметры.Вставить("ЧастьДаты", ЧастьДаты);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе", ОповещениеОВыборе);
	
	ПоказатьВводДаты(Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора", ЭтотОбъект, ДополнительныеПараметры),
		Дата, Подсказка, ЧастьДаты);
	
КонецПроцедуры

Процедура ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
	Иначе
		Если ВыбраннаяДата <> Дата('00010101000000') Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбраннаяДата);
		Иначе
			ПоказатьПредупреждение(
				Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияПослеПредупреждения", ЭтотОбъект, ДополнительныеПараметры),
				НСтр("ru='Поле ""Дата"" не заполнено';uk='Поле ""Дата"" не заповнене'"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВвестиДатуСКонтролемПустогоЗначенияПослеПредупреждения(ДополнительныеПараметры) Экспорт
	
	ВвестиДатуСКонтролемПустогоЗначения(
		ДополнительныеПараметры.Дата,
		ДополнительныеПараметры.Подсказка,
		ДополнительныеПараметры.ЧастьДаты,
		ДополнительныеПараметры.ОповещениеОВыборе);
	
КонецПроцедуры

// Проверяет наличие выделенных в списке строк
//
// Параметры:
// Список - ДинамическийСписок
//
// Возвращаемое значение:
// Булево - Ложь - если в списке нет выделенных строк, иначе Истина
//
Функция ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для н = 0 По Список.ВыделенныеСтроки.Количество()-1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[н]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[н]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'"));
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции // ПроверитьНаличиеВыделенныхВСпискеСтрок()

// Проверяет наличие выделенных в списке ссылок и возвращает массив
//
// Параметры:
// 		Список - ДинамическийСписок
//
// Возвращаемое значение:
// 		Массив - Массив выделенных с списке ссылок
//
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для н = 0 По Список.ВыделенныеСтроки.Количество()-1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[н]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[н]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции // ПроверитьПолучитьВыделенныеВСпискеСсылки()

Функция ПроверитьНаличиеСтрокВСписке(Список, ПредставлениеСписка) Экспорт
	
	Если Список.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не введено ни одной строки в список ""%ПредставлениеСписка%""';uk='Не введено жодного рядка в список ""%ПредставлениеСписка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСписка%", ПредставлениеСписка);
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриВыбореОтбораПоАктуальностиЗавершение(ДатаВыбора, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ЗначениеЗаполнено(ДатаВыбора) Тогда
		
		Форма[ДополнительныеПараметры.ИмяРеквизитаДатаСобытия]       = ДатаВыбора;
		Актуальность      = НСтр("ru='Истекает на %Дата%';uk='Закінчується на %Дата%'");
		Актуальность      = СтрЗаменить(Актуальность, "%Дата%", Формат(ДатаВыбора, "ДФ=dd.MM.yyyy "));
		Форма[ДополнительныеПараметры.ИмяРеквизитаАктуальность] = Актуальность
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(
		ДополнительныеПараметры.Список, 
		Форма[ДополнительныеПараметры.ИмяРеквизитаАктуальность], 
		Форма[ДополнительныеПараметры.ИмяРеквизитаДатаСобытия]);
		
	
	Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти

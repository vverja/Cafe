#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Обеспечение

// Получает оформленное накладными по заказам количество.
//
// Параметры:
//  ТаблицаОтбора	 - ТаблицаЗначений	 - Таблица с полями "Ссылка" и "КодСтроки", строки должны быть уникальными.
//  Поступление		 - Булево			 - Признак необходимости выполнить запрос не по отгруженным позициям, а по принятым
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с полями "Ссылка", "КодСтроки", "Количество". Для каждой пары Заказ-КодСтроки содержит
//  оформленное накладными количество.
//
Функция ТаблицаОформлено(ТаблицаОтбора, Поступление = Ложь) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка    КАК Ссылка,
		|	Таблица.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВтОтбор
		|ИЗ
		|	&ТаблицаОтбора КАК Таблица
		|ГДЕ
		|	Таблица.КодСтроки > 0
		|;
		|
		|////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отбор.КодСтроки КАК КодСтроки,
		|	Отбор.Ссылка    КАК Ссылка,
		|	МАКСИМУМ(РегистрЗаказы.Номенклатура)   КАК Номенклатура,
		|	МАКСИМУМ(РегистрЗаказы.Характеристика) КАК Характеристика,
		|	МАКСИМУМ(РегистрЗаказы.ЗаказНаСборку.Склад) КАК Склад,
		|	МАКСИМУМ(РегистрЗаказы.Серия)          КАК Серия,
		|	СУММА(РегистрЗаказы.КОформлению) КАК Количество
		|ИЗ
		|	ВтОтбор КАК Отбор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаСборку КАК РегистрЗаказы
		|		ПО РегистрЗаказы.ЗаказНаСборку = Отбор.Ссылка
		|		 И РегистрЗаказы.КодСтроки = Отбор.КодСтроки
		|		 И РегистрЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|        И РегистрЗаказы.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
		|		 И РегистрЗаказы.КОформлению <> 0
		|		 И РегистрЗаказы.Активность
		|СГРУППИРОВАТЬ ПО
		|	Отбор.Ссылка, Отбор.КодСтроки";
		
	Если Поступление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТипыДвиженияЗапасов.Отгрузка", "ТипыДвиженияЗапасов.Поступление");
	КонецЕсли;	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Таблица.Индексы.Добавить("Ссылка, КодСтроки");
	
	Возврат Таблица;
	
КонецФункции

//Возвращает текст запроса заказанного количества из заказов, согласно отборам компоновки.
//Строки заказов с вариантами обеспечения Отгрузить и Отгрузить обособленно не учитываются.
//Текст запроса используется в обработке "Состояние обеспечения" для получения заказанного по заказам количества.
//
//Параметры:
// ЕстьФильтр - Булево - признак необходимости получения данных с учетом отбора компоновки.
//
//Возвращаемое значение:
// Строка - текст запроса.
//
Функция ТекстЗапросаЗаказовКОбеспечению(ЕстьФильтр) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.ЗаказНаСборку         КАК Заказ,
		|	Т.КодСтроки             КАК КодСтроки,
		|	Т.ЗаказаноОстаток - Т.КОформлениюОстаток КАК Количество
		|ПОМЕСТИТЬ ВтРегистрЗаказыНаСборку
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(,
		|		{ЗаказНаСборку.*  КАК Заказ} ЗаказНаСборку В (&Заказы)) КАК Т
		|ГДЕ
		|	Т.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
		|	И Т.ЗаказаноОстаток > Т.КОформлениюОстаток
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ, КодСтроки
		|;
		|
		|////////////////////////////////////////////
		|";

	Если Не ЕстьФильтр Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ЗаказНаСборку В (&Заказы)", "");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

//Возвращает текст запроса заказов, согласно отборам компоновки.
//Строки заказов с вариантами обеспечения Отгрузить и Отгрузить обособленно не учитываются.
//Текст запроса используется в обработке "Состояние обеспечения" для получения заказов,
//содержащих указанную номенклатуру на указанном складе.
//
//Возвращаемое значение:
// Строка - текст запроса.
//
Функция ТекстЗапросаЗаказовНоменклатуры() Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.ЗаказНаСборку КАК Заказ
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
		|		{ЗаказНаСборку.Склад.* КАК Склад, Номенклатура.* КАК Номенклатура}) КАК Т
		|ГДЕ
		|	Т.ЗаказаноОстаток > Т.КОформлениюОстаток";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область Состояния

// Возвращает текст запроса для расчета количества товара которое осталось собрать/разобрать
// 
// Возвращаемое значение:
//   - Строка
//
Функция ВременнаяТаблицаОстаткиЗаказов() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ЗаказНаСборку   КАК Распоряжение,
		|	Таблица.ЗаказаноОстаток КАК КоличествоЗаказано
		|ПОМЕСТИТЬ ВтОстаткиЗаказов
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В(&МассивЗаказов)) КАК Таблица";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Возвращает незакрытые (не полностью оформленные) заказы
//
// Параметры:
//  Склад						 - СправочникСсылка.Склады - 
//  ДатаПроверкиОрдерногоСклада	 - Дата - Дата начала применения ордерной схемы на складе
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция РаспоряженияРМВнутреннееТовародвижение(Склад, РаспоряженияДляПересчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗаказыНаСборкуОстаткиИОбороты.КОформлениюРасход)     КАК КОформлениюРасход,
	|	СУММА(ЗаказыНаСборкуОстаткиИОбороты.КОформлениюПриход)     КАК КОформлениюПриход,
	|	ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку                КАК Ссылка,
	|	Заказ.Склад                                                КАК Склад,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В РАСХОДНОМ ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА Склады.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ                                                  КАК СостояниеОрдера,
	|// ПРОВЕРКА НА ОТСУТСТВИЕ НЕОБХОДИМОСТИ В ПРИХОДНОМ ОРДЕРЕ
	|	ВЫБОР
	|		КОГДА СкладыПриемки.Ссылка ЕСТЬ NULL ТОГДА
	|		4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
	|		ИНАЧЕ
	|		0 // ОРДЕРНАЯ СХЕМА. ЗНАЧЕНИЕ ПО УМОЛЧАНИЮ
	|	КОНЕЦ                                                  КАК СостояниеПриходногоОрдера
	|ПОМЕСТИТЬ втДанныеРегистраПоДокументуВЦелом
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.ОстаткиИОбороты() КАК ЗаказыНаСборкуОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказ
	|		ПО ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку = Заказ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО Заказ.Склад = Склады.Ссылка
	|			И (Склады.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|			И (Склады.ДатаНачалаОрдернойСхемыПриОтгрузке <= Заказ.НачалоСборкиРазборки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыПриемки
	|		ПО Заказ.Склад = СкладыПриемки.Ссылка
	|			И (СкладыПриемки.ИспользоватьОрдернуюСхемуПриПоступлении)
	|			И (СкладыПриемки.ДатаНачалаОрдернойСхемыПриПоступлении <= Заказ.НачалоСборкиРазборки)
	|
	|ГДЕ
	|	НЕ Заказ.Склад ЕСТЬ NULL
	|//ТекстУсловия
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку,
	|	Заказ.Склад,
	|	Склады.Ссылка,
	|	СкладыПриемки.Ссылка
	|
	|// ПРОВЕРКА НА ГОТОВНОСТЬ ЗАКАЗА К ОФОРМЛЕНИЮ ПО КОМПЛЕКТАМ И КОМПЛЕКТУЮЩИМ
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЗаказыНаСборкуОстаткиИОбороты.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление)
	|		И ЗаказыНаСборкуОстаткиИОбороты.КОформлениюПриход > 0)
	|	И МАКСИМУМ(ЗаказыНаСборкуОстаткиИОбороты.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|		И ЗаказыНаСборкуОстаткиИОбороты.КОформлениюПриход > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаСборкуОстаткиИОбороты.Номенклатура,
	|	ЗаказыНаСборкуОстаткиИОбороты.Характеристика,
	|	ЗаказыНаСборкуОстаткиИОбороты.Серия,
	|	ВЫБОР
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ И КОНКРЕТНАЯ СТРОКА ПОЛНОСТЬЮ ОФОРМЛЕНА
	|		КОГДА ЗаказыНаСборкуОстаткиИОбороты.КОформлениюКонечныйОстаток = 0
	|			И ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 0
	|// В ЦЕЛОМ ПО ДОКУМЕНТУ БЫЛО СПИСАНИЕ ПО РЕСУРСУ КОФОРМЛЕНИЮ
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.КОформлениюРасход, 0) > 0
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СостояниеНакладной,
	|	ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку КАК Ссылка,
	|	ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку.Склад КАК Склад,
	|	ДанныеДокумента.СостояниеОрдера КАК СостояниеОрдера,
	|	ДанныеДокумента.СостояниеПриходногоОрдера КАК СостояниеПриходногоОрдера
	|ПОМЕСТИТЬ втДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.ОстаткиИОбороты() КАК ЗаказыНаСборкуОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеРегистраПоДокументуВЦелом КАК ДанныеДокумента
	|		ПО ЗаказыНаСборкуОстаткиИОбороты.ЗаказНаСборку = ДанныеДокумента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТИПЗНАЧЕНИЯ(втДанныеРегистра.Ссылка) КАК Тип,
	|	МАКСИМУМ(втДанныеРегистра.СостояниеНакладной) КАК СостояниеНакладной,
	|	втДанныеРегистра.Ссылка,
	|	втДанныеРегистра.Склад,
	|	втДанныеРегистра.Склад КАК СкладПолучатель,
	|	МАКСИМУМ(втДанныеРегистра.СостояниеОрдера) КАК СостояниеОрдера,
	|	МАКСИМУМ(втДанныеРегистра.СостояниеПриходногоОрдера) КАК СостояниеПриходногоОрдера
	|ИЗ
	|	втДанныеРегистра КАК втДанныеРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ТИПЗНАЧЕНИЯ(втДанныеРегистра.Ссылка),
	|	втДанныеРегистра.Ссылка,
	|	втДанныеРегистра.Склад
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(втДанныеРегистра.СостояниеНакладной) > 0";
	
	ТекстУсловийВиртуальнойТаблицы = "";
	ТекстУсловия = "";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстУсловия = "И Заказ.Склад = &Склад";
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловийВиртуальнойТаблицы = "ЗаказНаСборку В (&Распоряжения)";
		Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийВиртуальнойТаблицы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОстаткиИОбороты(", "ОстаткиИОбороты(" + ", , , , " + ТекстУсловийВиртуальнойТаблицы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловия) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстУсловия", ТекстУсловия);
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаСборку) Тогда
		Результат = Запрос.Выполнить().Выгрузить();
		Возврат Результат;
	Иначе
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;
	
КонецФункции

// Возвращает остаток к оформлению по переданному списку заказов
//
// Параметры:
//  МассивЗаказов	 - Массив - Массив заказов
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов, ПоШапке = Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	
	Если ПоШапке Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыНаСборкуОстатки.Номенклатура,
		|	ЗаказыНаСборкуОстатки.Характеристика,
		|	ВЫБОР КОГДА Заказ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих) ТОГДА
		|			Заказ.Назначение
		|		КОГДА Заказ.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|			Заказ.Назначение
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	ЗаказыНаСборкуОстатки.КодСтроки,
		|	ЗаказыНаСборкуОстатки.Серия КАК Серия,
		|	ЗаказыНаСборкуОстатки.КОформлениюОстаток КАК Количество,
		|	ЗаказыНаСборкуОстатки.ЗаказНаСборку
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В (&Заказы)) КАК ЗаказыНаСборкуОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказ
		|		ПО ЗаказыНаСборкуОстатки.ЗаказНаСборку = Заказ.Ссылка
		|		 И ЗаказыНаСборкуОстатки.Номенклатура = Заказ.Номенклатура // Использование связи по номенклатуре позволяет всегда получать остатки комплектов
		|		 И ЗаказыНаСборкуОстатки.Характеристика = Заказ.Характеристика
		|
		|ГДЕ (Заказ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|	И ЗаказыНаСборкуОстатки.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление)
		|	ИЛИ Заказ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|				И ЗаказыНаСборкуОстатки.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка))";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыНаСборкуОстатки.Номенклатура,
		|	ЗаказыНаСборкуОстатки.Характеристика,
		|	ВЫБОР 
		|		КОГДА Заказ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие) ТОГДА
		|				Таблица.Назначение
		|		КОГДА Таблица.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|					ВЫБОР КОГДА Заказ.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|						Заказ.НазначениеТовары
		|					ИНАЧЕ
		|						Заказ.Назначение
		|					КОНЕЦ
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение,
		|	ЗаказыНаСборкуОстатки.КодСтроки,
		|	ЗаказыНаСборкуОстатки.Серия,
		|	ЗаказыНаСборкуОстатки.КОформлениюОстаток КАК Количество,
		|	ЗаказыНаСборкуОстатки.ЗаказНаСборку
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В (&Заказы)) КАК ЗаказыНаСборкуОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказ
		|		ПО ЗаказыНаСборкуОстатки.ЗаказНаСборку = Заказ.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК Таблица
		|		ПО ЗаказыНаСборкуОстатки.ЗаказНаСборку = Таблица.Ссылка
		|		 И ЗаказыНаСборкуОстатки.КодСтроки = Таблица.КодСтроки
		|		 И ЗаказыНаСборкуОстатки.Номенклатура = Таблица.Номенклатура // Использование связи по номенклатуре позволяет всегда получать остатки комплектующих
		|		 И ЗаказыНаСборкуОстатки.Характеристика = Таблица.Характеристика
		|
		|ГДЕ (Заказ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|	И ЗаказыНаСборкуОстатки.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
		|	ИЛИ Заказ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|				И ЗаказыНаСборкуОстатки.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление))";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	КодыСтрокЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат КодыСтрокЗаказов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления


Процедура ИсправитьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ЗаказыНаСборку";
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК РеквизитыЗаказа
		|		ПО РеквизитыЗаказа.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	РеквизитыЗаказа.Проведен
		|	И РеквизитыЗаказа.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|	И(
		|		ТаблицаДокумента.СтатусУказанияСерий = 10
		|			И ТаблицаДокумента.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИЛИ ТаблицаДокумента.СтатусУказанияСерий В(11, 15)
		|			И ТаблицаДокумента.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.СборкаТоваров.Товары КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК РеквизитыНакладной
		|		ПО РеквизитыНакладной.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	РеквизитыНакладной.Проведен
		|	И РеквизитыНакладной.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|	И ТаблицаДокумента.СтатусУказанияСерий = 10
		|	И ТаблицаДокумента.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаСборку КАК Регистр
		|		ПО Регистр.ЗаказНаСборку = ТаблицаДокумента.Ссылка
		|		И ТИПЗНАЧЕНИЯ(Регистр.Регистратор) = ТИП(Документ.СборкаТоваров)
		|ГДЕ
		|	ТаблицаДокумента.Проведен
		|	И ТаблицаДокумента.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНакомплектующие)
		|	И ТаблицаДокумента.СтатусУказанияСерий В(11, 15)";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	ИмяРегистра = "ЗаказыНаСборку";
	
	ТекстЗапросаАдаптированный = Документы.ЗаказНаСборку.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаАдаптированный, ПолноеИмяРегистра, "Документ.ЗаказНаСборку");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	ТекстЗапросаАдаптированный = Документы.СборкаТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаАдаптированный, ПолноеИмяРегистра, "Документ.СборкаТоваров");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
#Область СборкаТоваров
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноПривязатьКНовымЗаказамПослеРазбиенияЗаказов();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказНаСборку
	Регистраторы = Документы.ЗаказНаСборку.ЗаказыНаРазборкуКоторыеНужноРазбитьПередЗаполнениемСерий();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноРазбитьПоВариантуОбеспечения();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Регистраторы = Документы.ЗаказНаСборку.ЗаказыНаРазборкуТЧКоторыхНужноРазбитьПослеЗаполненияСерийВНакладных();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
Процедура ИсправитьДвижения(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.ЗаказНаСборку");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
	    "РегистрНакопления.ЗаказыНаСборку",
	    Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаВерсию2_1_12(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ЗаказыНаСборку";
	ИмяРегистра = "ЗаказыНаСборку";
	
	// СборкаТоваров
	ТекстЗапросаМеханизмаПроведения = Документы.СборкаТоваров.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.СборкаТоваров");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаВерсию2_1_12(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	Регистраторы.Добавить("Документ.СборкаТоваров");
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
	    "РегистрНакопления.ЗаказыНаСборку",
	    Параметры.Очередь
    );
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли
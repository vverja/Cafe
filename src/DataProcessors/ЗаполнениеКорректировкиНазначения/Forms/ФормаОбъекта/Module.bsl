
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	//Проверка возможности открытия формы /отказ от открытия формы.
	Если Не Параметры.Свойство("Назначение") 
		И Не Параметры.Свойство("Заказ") Тогда
		ТекстИсключения = НСтр("ru='Форма не предназначена для непосредственного открытия.';uk='Форма не призначена для безпосереднього відкриття.'");
		ВызватьИсключение ТекстИсключения;
		Возврат;
	КонецЕсли;
	
	СнятиеРезерва = Параметры.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или Параметры.ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям;
	
	ВидОперации = Параметры.ВидОперации;
	
	Если Параметры.Свойство("Назначение") Тогда
		Назначение = Параметры.Назначение;
		Заказ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Назначение, "Заказ");
	Иначе
		Заказ = Параметры.Заказ;
		Назначение = Документы.КорректировкаНазначенияТоваров.ПолучитьНазначениеЗаказа(Заказ);
	КонецЕсли;
	
	
	Если Параметры.Свойство("КорректировкаНазначения") Тогда
		КорректировкаНазначения = Параметры.КорректировкаНазначения;
	КонецЕсли;
	
	Если Параметры.Свойство("УникальныйИдентификаторДляВременногоХранилища") Тогда
		УникальныйИдентификаторДляВременногоХранилища = Параметры.УникальныйИдентификаторДляВременногоХранилища;
	Иначе
		УникальныйИдентификаторДляВременногоХранилища = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда

		Организация = Параметры.Организация;
		Если Параметры.Свойство("Мастер") И Параметры.Мастер И ЗначениеЗаполнено(Заказ) Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Организация");
		КонецЕсли;
		
	КонецЕсли;
	
	ТолькоЗаказыОрганизации = ЗначениеЗаполнено(Организация)
		И(ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать
			Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	ЗадатьЗначенияПоУмолчанию();
	
	НастроитьЭлементыФормыПриСоздании();
	
	ЗаполнитьТаблицу();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТолькоЗаказыОрганизацииПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Элемент.ТолькоЗаказыОрганизации.ПриИзменении");
	
	ЗаполнитьТаблицу();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВидОперацииПереключательПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Элемент.ВидОперацииПереключатель.ПриИзменении");
	
	ВидОперацииПереключательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтроки(Команда)
	
	ОтметитьСтроки(Истина);
	
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)
	
	ОтметитьСтроки(Ложь);
	
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Элемент.ОтборРезервированияПоСкладуОтгрузки.ПриИзменении");
	
	РежимПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Команда.Далее");
	
	СтруктураВозврата = ДалееНаСервере();
	СтруктураСозданияДокумента = СтруктураВозврата.СтруктураСозданияДокумента;
	
	Если СтруктураВозврата.СменаСтраницы Тогда
		
		Для Каждого Строка Из ДеревоПомещенияЯчейки.ПолучитьЭлементы() Цикл
			Элементы.ДеревоПомещенияЯчейки.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	ИначеЕсли Параметры.Мастер И ЗначениеЗаполнено(СтруктураСозданияДокумента.Ошибка) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураСозданияДокумента.Ошибка);
		
	Иначе
		
		Если ЗначениеЗаполнено(СтруктураСозданияДокумента) И Параметры.Мастер Тогда
			Если СтруктураСозданияДокумента.Проведен Тогда
				НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(СтруктураСозданияДокумента.Документ);
				ПоказатьОповещениеПользователя(НСтр("ru='Создана корректировка назначения товаров';uk='Створене коригування призначення товарів'"), НавигационнаяСсылкаДокумента, СтруктураСозданияДокумента.Документ);
				Закрыть();
			КонецЕсли;
		Иначе
			АдресВХранилище = ПоместитьТоварыВХранилище();
			ОповеститьОВыборе(Новый Структура("ТаблицаТовары, ВидОперации", АдресВХранилище, ВидОперации));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам Тогда
		
		Если Модифицированность Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОтменаЗавершение", ЭтотОбъект), НСтр("ru='Закрыть мастер создания корректировки назначения товаров?';uk='Закрити майстер створення коригування призначення товарів?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоПомещениямЯчейкам Тогда
		Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам;
	Иначе
		Закрыть();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьРезервыСверхПотребностей(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Команда.СнятьРезервыСверхПотребности");
	
	СнятьРезервыСверхПотребностейСервер();
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеРезервы(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Команда.СнятьВсеРезервы");
	
	СнятьВсеРезервыСервер();
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОтметкаПриИзменении(Элемент)
	
	СтруктураОтбора = Новый Структура();
	
	Если ФильтрОтметка Тогда
		СтруктураОтбора.Вставить("Отметка", Истина);
	КонецЕсли;
	
	Элементы.ТаблицаТовары.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаТовары

&НаКлиенте
Процедура ТаблицаТоварыСтрокаВыбранаПриИзменении(Элемент)
	
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаТовары.ТекущиеДанные;
	ТекущаяСтрока.Отметка = ТекущаяСтрока.Количество > 0;
	
	СформироватьИнформационнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ЗаполнениеКорректировкиНазначения.ФормаОбъекта.Элемент.ТаблицаТовары.ПриАктивизацииСтроки");
	
	ПодключитьОбработчикОжидания("СформироватьИнформационнуюСтроку", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваПомещенияИЯчейки

&НаКлиенте
Процедура ДеревоПомещенияЯчейкиКоличествоВетвьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПомещенияЯчейки.ТекущиеДанные;
	
	СтруктураПересчетаЕдиниц = Новый Структура();
	СтруктураПересчетаЕдиниц.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураПересчетаЕдиниц, Неопределено);
	
	ТекущаяСтрока.Отметка = ТекущаяСтрока.Количество > 0;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомандыФормыПродолжение

&НаСервере
Процедура СнятьРезервыСверхПотребностейСервер()
	
	Документы.КорректировкаНазначенияТоваров.СнятьРезервы(ТаблицаТовары, Истина);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеРезервыСервер()
	
	Документы.КорректировкаНазначенияТоваров.СнятьРезервы(ТаблицаТовары, Ложь);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СоздатьДокумент()
	
	СтруктураСозданияДокумента = Новый Структура("Документ, Проведен, Ошибка");
	
	Документ = Документы.КорректировкаНазначенияТоваров.СоздатьДокумент();
	
	Документ.Заказ = Заказ;
	Документ.Назначение = Назначение;
	Документ.ВидОперации = ВидОперации;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Документ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Организация");
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.Количество > 0 И Строка.Отметка Тогда
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТоварыКПереносу = ТаблицаТовары.Выгрузить(МассивСтрок);
	
	Если ТоварыКПереносу.Количество() > 0 Тогда
		
		Документ.Товары.Загрузить(ТоварыКПереносу);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Документ.Товары, СтруктураДействий, Неопределено);
		
		ПараметрыУказанияСерий = Документы.КорректировкаНазначенияТоваров.ПараметрыУказанияСерий(Документ);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Документ, ПараметрыУказанияСерий);
		
		Документ.Дата = ТекущаяДата();
		Документ.УстановитьНовыйНомер();
		
		Документ.Записать(РежимЗаписиДокумента.Запись);
		
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			СтруктураСозданияДокумента.Проведен = Истина;
		Исключение
			СтруктураСозданияДокумента.Проведен = Ложь;
		КонецПопытки;
		
		СтруктураСозданияДокумента.Документ = Документ.Ссылка;
		
	Иначе
		СтруктураСозданияДокумента.Ошибка = НСтр("ru='Не выбрано ни одной строки. Создание документа невозможно.';uk='Не обрано жодного рядка. Створення документа неможливе.'");
	КонецЕсли;
	
	Возврат СтруктураСозданияДокумента;
	
КонецФункции

&НаСервере
Процедура ПеренестиДанныеДереваВТаблицу()
	
	СтруктураПоиска = Новый Структура("ИсходноеНазначение, Номенклатура, Характеристика, Склад");
	
	Для Каждого Корень Из ДеревоПомещенияЯчейки.ПолучитьЭлементы() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Корень);
		СтруктураПоиска.ИсходноеНазначение = Корень.Назначение;
		
		Ветви = Корень.ПолучитьЭлементы();
		
		Если Ветви.Количество() > 0 Тогда
			НайденныеСтроки = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если Ветви.Количество() > 1 Тогда
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						ТаблицаТовары.Удалить(НайденнаяСтрока);
					КонецЦикла;
					
					Для Каждого Ветвь Из Ветви Цикл
						
						Если Ветвь.Отметка И Ветвь.Количество > 0 Тогда
							НоваяСтрока = ТаблицаТовары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Ветвь, "Помещение, Ячейка, Серия, Упаковка, Количество, Отметка");
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					НайденнаяСтрока = НайденныеСтроки[0];
					НайденнаяВетвь = Ветви[0];
					
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, НайденнаяВетвь, "Помещение, Ячейка, Серия, Упаковка, Количество, Отметка");
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакТребованияПомещенияИЯчейки()
	
	МассивТребуемыхСтрок = Новый Массив();
	
	ТребуетсяШаг2 = Ложь;
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		ИспользоватьСкладскиеПомещения = СкладыСервер.ИспользоватьСкладскиеПомещения(Строка.Склад);
		ИспользоватьСерииНоменклатуры = СкладыСервер.ИспользованиеСерийНаСкладе(Строка.Склад, Ложь);
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Строка.Склад);
		
		Если ИспользоватьСкладскиеПомещения
			Или ИспользоватьСерииНоменклатуры.ИспользоватьСерииНоменклатуры
			Или ИспользоватьАдресноеХранение Тогда
			
			Строка.ТребуетсяШаг2 = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяШаг2()
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.ТребуетсяШаг2 И Строка.Отметка И Строка.Количество > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	МассивСтрок = Новый Массив();
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.Количество > 0 И Строка.Отметка Тогда
			 МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТоварыКПереносу = ТаблицаТовары.Выгрузить(МассивСтрок);
	
	Результат = Новый Структура("Товары", ТоварыКПереносу);
	АдресВХранилище = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификаторДляВременногоХранилища);
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ДеревоПомещенияЯчейкиЕдиницаИзмерения", "ДеревоПомещенияЯчейки.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ТоварыНоменклатураЕдиницаИзмерения", "ТаблицаТовары.Упаковка");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЗаказ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиХарактеристика.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЗаказИсточник.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиСклад.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличествоВетвь1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомещенияЯчейки.ЭтоКорень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиСерия.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиПомещение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЯчейка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиОтметка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличествоВетвь.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомещенияЯчейки.ЭтоКорень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЗаказ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиХарактеристика.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЗаказИсточник.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиСклад.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличество.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличествоВетвь1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомещенияЯчейки.ЭтоКорень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиСерия.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиПомещение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиЯчейка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиОтметка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПомещенияЯчейкиКоличествоВетвь.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПомещенияЯчейки.ЭтоКорень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИнформационнуюСтроку()
	
	Строка = Элементы.ТаблицаТовары.ТекущиеДанные;
	
	Если Строка <> Неопределено Тогда
		
		СформироватьИнформационнуюСтрокуСервер(Строка.Назначение);
		
		СтрокаИтогов = ИтогиЗаказа.НайтиПоИдентификатору(Строка.ИдентификаторСтрокиИтогов);
		
		ИтогиСклад = "";
		
		Если СтрокаИтогов <> Неопределено Тогда
			
			ИтогиСклад = ?(ИспользоватьНесколькоСкладов, Строка(СтрокаИтогов.Склад), "");
			
			ИтогиПотребность = СтрокаИтогов.Потребность;
			ИтогиОбеспечено = СтрокаИтогов.Обеспечено + СтрокаИтогов.Количество;
			ИтогиНаСкладе = СтрокаИтогов.НаСкладе + СтрокаИтогов.Количество;
			
			Если ИтогиОбеспечено < 0 Или ИтогиОбеспечено > ИтогиПотребность Тогда
				Элементы.ИтогиОбеспечено.ЦветТекста = ЦветОтрицательногоЧисла;
			Иначе
				Элементы.ИтогиОбеспечено.ЦветТекста = ЦветТекстаПоля;
			КонецЕсли;
			
			Если ИтогиНаСкладе < 0 Или ИтогиНаСкладе > ИтогиПотребность Тогда
				Элементы.ИтогиНаСкладе.ЦветТекста = ЦветОтрицательногоЧисла;
			Иначе
				Элементы.ИтогиНаСкладе.ЦветТекста = ЦветТекстаПоля;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаголовокКлючСтроки = Строка(Строка.Номенклатура)
			+ Строка(?(ЗначениеЗаполнено(Строка.Характеристика), ", " + Строка.Характеристика, "")
			+ ?(ЗначениеЗаполнено(ИтогиСклад), ", " + ИтогиСклад, ""));
		
		ИтогиАналитикаНоменклатуры = ЗаголовокКлючСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформационнуюСтрокуСервер(НазначениеДляИтога)
	
	ПерезаполнитьКоличествоВТаблицеИтогов();
	РассчитатьИтогиПоЗаказу(НазначениеДляИтога);
	
	УстановитьДоступностьИЗаголовокКнопокОтменаДалее();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	СнятиеРезерва = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям;
		
	СнятьРезервВсехДокументов = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям;
	
	ТаблицаЗаполнена = ТаблицаТовары.Количество() > 0;
	
	Если Не ЕстьТоварыКОбособленномуОбеспечению Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.НетТоваровКОбособленномуОбеспечению;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Отмена.КнопкаПоУмолчанию = Истина;
		Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
		
	ИначеЕсли СнятиеРезерва И Не ТаблицаЗаполнена И Не ЕстьДоступныйРезервОстаток Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.НетДанных;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Отмена.КнопкаПоУмолчанию = Истина;
		Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
		
	ИначеЕсли Не СнятиеРезерва И Не ЕстьДоступныйРезервОстаток Тогда
		
		Элементы.ГруппаДанныеТаблицыТовары.ТекущаяСтраница = Элементы.НетДанныхДляРезервирования;
		
		Элементы.ГруппаКоманднаяПанель.Доступность = Ложь;
		Элементы.ФильтрОтметка.Доступность = Ложь;
		Элементы.ТаблицаТоварыВыбратьТовары1.Доступность = Ложь;
		Элементы.ТаблицаТоварыИсключитьТовары1.Доступность = Ложь;
		Элементы.ТаблицаТоварыНайти1.Доступность = Ложь;
		Элементы.ТаблицаТоварыОтменитьПоиск1.Доступность = Ложь;
		Элементы.ТаблицаТоварыВывестиСписок.Доступность = Ложь;
		
		Элементы.Далее.Видимость = Ложь;
		Элементы.Отмена.КнопкаПоУмолчанию = Истина;
		Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаДанныеТаблицыТовары.ТекущаяСтраница = Элементы.ГруппаТаблицаТовары;
		
		Элементы.ГруппаКоманднаяПанель.Доступность = Истина;
		Элементы.ФильтрОтметка.Доступность = Истина;
		Элементы.ТаблицаТоварыВыбратьТовары1.Доступность = Истина;
		Элементы.ТаблицаТоварыИсключитьТовары1.Доступность = Истина;
		Элементы.ТаблицаТоварыНайти1.Доступность = Истина;
		Элементы.ТаблицаТоварыОтменитьПоиск1.Доступность = Истина;
		Элементы.ТаблицаТоварыВывестиСписок.Доступность = Истина;
		
		Если СнятиеРезерва Тогда
			Элементы.ВидОперацииПереключатель.Видимость = Ложь;
			Элементы.ДеревоПомещенияЯчейкиРезерв.Заголовок = НСтр("ru='Резерв';uk='Резерв'");
		Иначе
			Элементы.ВидОперацииПереключатель.Видимость = Истина;
			Элементы.ДеревоПомещенияЯчейкиРезерв.Заголовок = НСтр("ru='Доступно';uk='Доступно'");
		КонецЕсли;
		
		УстановитьДоступностьИЗаголовокКнопокОтменаДалее();
		
		Если Документы.КорректировкаНазначенияТоваров.КонтролироватьПревышениеПотребностиПоЗаказу(Заказ) Тогда
			Элементы.СнятьРезервыСверхПотребностей.Видимость = Ложь;
			Элементы.ОтборРезервированияПоСкладуОтгрузки.Видимость = Ложь;
			Если Не СнятиеРезерва Тогда
				Элементы.СнятьВсеРезервы.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
			Элементы.ОтборРезервированияПоСкладуОтгрузки.Видимость = Ложь;
			Если Не СнятиеРезерва Тогда
				Элементы.ГруппаПереключатели.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не РольДоступна(Метаданные.Роли.ДобавлениеИзменениеКорректировокНазначенияТоваровРасширенный)
			И Не РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			Элементы.ВидОперацииПереключатель.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИЗаголовокКнопокОтменаДалее()
	
	КомандаОтмена = Команды.Найти("Отмена");
	КомандаДалее = Команды.Найти("Далее");
	
	ТекстНазад = НСтр("ru='Назад';uk='Назад'");
	ТекстОтмена = НСтр("ru='Отмена';uk='Відмінити'");
	
	ТекстДалее = НСтр("ru='Далее';uk='Далі'");
	ТекстСоздатьДокумент = НСтр("ru='Создать документ';uk='Створити документ'");
	ТекстПеренестиВДокумент = НСтр("ru='Перенести в документ';uk='Перенести в документ'");
	
	ТребуетсяШаг2 = ТребуетсяШаг2();
	
	// Процедура может быть вызвана только если ТЧ Товары доступна - в этом случае необходимо вернуть кнопку Далее
	// если ранее она была скрыта из-за отсутствия данных для заполнения
	Если Не Элементы.Далее.Видимость Тогда
		Элементы.Далее.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если ТребуетсяШаг2 И Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам Тогда
		Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
		КомандаДалее.Заголовок = ТекстДалее;
		КомандаДалее.Подсказка = ТекстДалее;
		КомандаОтмена.Заголовок = ТекстОтмена;
		КомандаОтмена.Подсказка = ТекстОтмена;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам Тогда
		Если Параметры.Мастер Тогда
			Элементы.ТекстБудетСозданаКорректировка.Видимость = Истина;
			КомандаДалее.Заголовок = ТекстСоздатьДокумент;
			КомандаДалее.Подсказка = ТекстСоздатьДокумент;
		Иначе
			Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
			КомандаДалее.Заголовок = ТекстПеренестиВДокумент;
			КомандаДалее.Подсказка = ТекстПеренестиВДокумент;
		КонецЕсли;
		КомандаОтмена.Заголовок = ТекстОтмена;
		КомандаОтмена.Подсказка = ТекстОтмена;
	Иначе
		Если Параметры.Мастер Тогда
			Элементы.ТекстБудетСозданаКорректировка.Видимость = Истина;
			КомандаДалее.Заголовок = ТекстСоздатьДокумент;
			КомандаДалее.Подсказка = ТекстСоздатьДокумент;
		Иначе
			Элементы.ТекстБудетСозданаКорректировка.Видимость = Ложь;
			КомандаДалее.Заголовок = ТекстПеренестиВДокумент;
			КомандаДалее.Подсказка = ТекстПеренестиВДокумент;
		КонецЕсли;
		КомандаОтмена.Заголовок = ТекстНазад;
		КомандаОтмена.Подсказка = ТекстНазад;
	КонецЕсли;
	
	ДоступностьКнопкиДалее = ТаблицаТовары.Количество() > 0 Или ДеревоПомещенияЯчейки.ПолучитьЭлементы().Количество() > 0;
	Элементы.Далее.Доступность = ДоступностьКнопкиДалее;
	
КонецПроцедуры

&НаСервере
Процедура ЗадатьЗначенияПоУмолчанию()
	
	ИспользоватьУчетЗатратПоНаправлениямДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	Если ИспользоватьУчетЗатратПоНаправлениямДеятельности Тогда
		НазначениеЗаказВШапке = Назначение;
	Иначе
		НазначениеЗаказВШапке = Заказ;
		Элементы.ВидОперацииПереключатель.Заголовок = НСтр("ru='Использовать резервы других заказов';uk='Використовувати резерви інших замовлень'");
	КонецЕсли;
	
	ВидОперацииПереключатель = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
	
	
	ЦветОтрицательногоЧисла = ЦветаСтиля.ЦветОтрицательногоЧисла;
	ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
		ЕстьТоварыКОбособленномуОбеспечению = Истина;
		ЕстьДоступныйРезервОстаток = Истина;
	Иначе
		ЕстьТоварыКОбособленномуОбеспечению = Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(Назначение);
		ЕстьДоступныйРезервОстаток = Документы.КорректировкаНазначенияТоваров.ЕстьДоступныйРезервОстаток(Назначение, ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Элементы.ТолькоЗаказыОрганизации.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать);
	
	Элементы.ТолькоЗаказыОрганизации.Заголовок = СтрЗаменить(НСтр("ru='Только заказы организации ""%1""';uk='Тільки замовлення організації ""%1""'"), "%1", Организация);
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
		
		Если ИспользоватьУчетЗатратПоНаправлениямДеятельности Тогда
			Заголовок = СтрЗаменить(НСтр("ru='Снятие резерва (Назначение: %1)';uk='Зняття резерву (Призначення: %1)'"), "%1", НазначениеЗаказВШапке);
		Иначе
			Заголовок = СтрЗаменить(НСтр("ru='Снятие резерва (%1)';uk='Зняття резерву (%1)'"), "%1", НазначениеЗаказВШапке);
		КонецЕсли;
		
		Элементы.ТаблицаТоварыКоличество.Заголовок = НСтр("ru='К снятию резерва';uk='До зняття резерву'");
		
		Элементы.ДеревоПомещенияЯчейкиГруппаКоличествоВертикальная.Заголовок = НСтр("ru='К снятию резерва';uk='До зняття резерву'");
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям Тогда
			
			Элементы.ТаблицаТоварыЗаказ.Видимость = Не ИспользоватьУчетЗатратПоНаправлениямДеятельности;
			Элементы.ТаблицаТоварыИсходноеНазначение.Видимость = ИспользоватьУчетЗатратПоНаправлениямДеятельности;
			
			Элементы.ДеревоПомещенияЯчейкиЗаказ.Видимость = Истина;
			
			Заголовок = НСтр("ru='Снятие резерва по многим назначениям';uk='Зняття резерву за багатьма призначеннями'");
		КонецЕсли;
		
		Элементы.ГруппаПереключатели.ТекущаяСтраница = Элементы.ГруппаРежимСнятиеРезервов;
		Элементы.ВидОперацииПереключатель.Видимость = Ложь;
		
		НадписьСкладЗаказ = НСтр("ru='Склад';uk='Склад'");
		НадписьСвободныйОстаток = НСтр("ru='Свободный остаток';uk='Вільний залишок'");
		
	Иначе
		
		Если ИспользоватьУчетЗатратПоНаправлениямДеятельности  Тогда
			Заголовок = СтрЗаменить(НСтр("ru='Резервирование (Назначение: %1)';uk='Резервування (Призначення: %1)'"), "%1", НазначениеЗаказВШапке);
		Иначе
			Заголовок = СтрЗаменить(НСтр("ru='Резервирование (%1)';uk='Резервування (%1)'"), "%1", НазначениеЗаказВШапке);
		КонецЕсли;
		
		Элементы.ТаблицаТоварыКоличество.Заголовок = НСтр("ru='К резервированию';uk='До резервування'");
		
		Элементы.ДеревоПомещенияЯчейкиГруппаКоличествоВертикальная.Заголовок = НСтр("ru='К резервированию';uk='До резервування'");
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать 
			И ИспользоватьУчетЗатратПоНаправлениямДеятельности Тогда
			НадписьСкладЗаказ = НСтр("ru='Назначение, Склад';uk='Призначення, Склад'");
			НадписьСвободныйОстаток = НСтр("ru='Доступно';uk='Доступно'");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать 
			И Не ИспользоватьУчетЗатратПоНаправлениямДеятельности Тогда
			НадписьСкладЗаказ = НСтр("ru='Заказ, Склад';uk='Замовлення, Склад'");
			НадписьСвободныйОстаток = НСтр("ru='Доступно';uk='Доступно'");
		Иначе
			НадписьСкладЗаказ = НСтр("ru='Склад';uk='Склад'");
			НадписьСвободныйОстаток = НСтр("ru='Свободный остаток';uk='Вільний залишок'");
		КонецЕсли;
		
		Элементы.ГруппаПереключатели.ТекущаяСтраница = Элементы.ГруппаРежимРезервирование;
		
		ВидОперацииПереключательВидимость = Истина;
		
		
		Элементы.ВидОперацииПереключатель.Видимость = ВидОперацииПереключательВидимость;
		
	КонецЕсли;
	
	Элементы.ТаблицаТоварыСкладЗаказИсточник.Заголовок = НадписьСкладЗаказ;
	Элементы.ТаблицаТоварыСкладЗаказИсточник.Подсказка = НадписьСкладЗаказ;
	
	Элементы.ТаблицаТоварыСвободныйОстаток.Заголовок = НадписьСвободныйОстаток;
	Элементы.ТаблицаТоварыСвободныйОстаток.Подсказка = НадписьСвободныйОстаток;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево()
	
	ЭлементыДерева = ДеревоПомещенияЯчейки.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	СнятиеРезервов = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезерв
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	РежимСнятьРезерваПоМножествуДокументов = (ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям);
	
	ТаблицаПомещенияЯчейки = Документы.КорректировкаНазначенияТоваров.ТаблицаПомещенияЯчейкиПоТоварам(ТаблицаТовары.Выгрузить(), КорректировкаНазначения);
	
	СтруктураЗаполнения = Новый Структура("Назначение, Номенклатура, Характеристика, Склад");
	
	КоличествоОстаток = 0;
	
	ЕдиницаИзмерения = Неопределено;
	
	Для Каждого Строка Из ТаблицаПомещенияЯчейки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Серия) И Не ЗначениеЗаполнено(Строка.Помещение) И Не ЗначениеЗаполнено(Строка.Ячейка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураЗаполнения.Назначение <> Строка.Назначение
			Или СтруктураЗаполнения.Номенклатура <> Строка.Номенклатура
			Или СтруктураЗаполнения.Характеристика <> Строка.Характеристика
			Или СтруктураЗаполнения.Склад <> Строка.Склад Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Строка);
			
			НовыйКорень = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйКорень, Строка,,"Серия, Помещение, Ячейка, Обеспечено, СвободныйОстаток");
			
			Если Не СнятиеРезервов Тогда
				НовыйКорень.Обеспечено = Строка.СвободныйОстаток;
			КонецЕсли;
			
			НовыйКорень.КоличествоУпаковок = Строка.Количество;
			
			ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "ЕдиницаИзмерения");
			НовыйКорень.Упаковка = ЕдиницаИзмерения;
			
			НовыйКорень.ЭтоКорень = Истина;
			КоличествоОстаток = НовыйКорень.Количество;
			
			СтрокиКорня = НовыйКорень.ПолучитьЭлементы();
			
		КонецЕсли;
		
		Если СнятиеРезервов Тогда
			НовыйКорень.Обеспечено = НовыйКорень.Обеспечено + Строка.Обеспечено;
		КонецЕсли;
		
		Если (КоличествоОстаток > 0 Или Строка.Обеспечено > 0)
			И (ЗначениеЗаполнено(Строка.Серия) Или ЗначениеЗаполнено(Строка.Помещение) Или ЗначениеЗаполнено(Строка.Ячейка)) Тогда
			НоваяВетвь = СтрокиКорня.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяВетвь, Строка, "Номенклатура, Характеристика, Серия, Помещение, Ячейка, Упаковка, Обеспечено, СвободныйОстаток");
			Если НоваяВетвь.Обеспечено > КоличествоОстаток Тогда
				НоваяВетвь.Количество = КоличествоОстаток;
				КоличествоОстаток = 0;
			Иначе
				НоваяВетвь.Количество = НоваяВетвь.Обеспечено;
				КоличествоОстаток = КоличествоОстаток - НоваяВетвь.Обеспечено;
			КонецЕсли;
			
			НоваяВетвь.Обеспечено = Строка.ОбеспеченоУпаковок;
			
			НоваяВетвь.Отметка = НоваяВетвь.Количество > 0;
			
			СтруктураПересчетаЕдиниц = Новый Структура();
			СтруктураПересчетаЕдиниц.Вставить("ПересчитатьКоличествоУпаковок");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяВетвь, СтруктураПересчетаЕдиниц, Неопределено);

		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоКорней = ЭлементыДерева.Количество() - 1;
	Для н = 0 По КоличествоКорней Цикл
		Индекс = КоличествоКорней - н;
		Корень = ЭлементыДерева[Индекс];
		Если Корень.ПолучитьЭлементы().Количество() = 0 Тогда
			ЭлементыДерева.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицу()
	
	ТолькоСкладОтгрузки = Документы.КорректировкаНазначенияТоваров.КонтролироватьПревышениеПотребностиПоЗаказу(Заказ);
	
	СтруктураЗаполнения = Документы.КорректировкаНазначенияТоваров.ЗаполнитьТаблицуСнятияУстановкиРезервов(ВидОперации, Назначение, КорректировкаНазначения, 
		ОтборРезервированияПоСкладуОтгрузки Или ТолькоСкладОтгрузки, ?(ТолькоЗаказыОрганизации, Организация, Неопределено));
	Таблица = СтруктураЗаполнения.ТаблицаЗаполненияКорректировки;
	
	ЗаполнитьТаблицуИтогов(СтруктураЗаполнения.ТаблицаИтогов, Таблица);
	ПерезаполнитьКоличествоВТаблицеИтогов(Таблица);
	
	ТаблицаТовары.Загрузить(Таблица);
	
	УстановитьПризнакТребованияПомещенияИЯчейки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИтогов(ТаблицаИтогов, Таблица)
	
	ПараметрыОтбораТоваров = Новый Структура("Назначение, Номенклатура, Характеристика, Склад");
	
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") И Таблица.Колонки.Найти("ИдентификаторСтрокиИтогов") = Неопределено Тогда
		Таблица.Колонки.Добавить("ИдентификаторСтрокиИтогов");
	КонецЕсли;
	
	ИтогиЗаказа.Очистить();
	
	// Подготовка таблицы итогов
	Для Каждого Строка Из ТаблицаИтогов Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораТоваров, Строка);
		
		НайденныеСтрокиТоваров = Таблица.НайтиСтроки(ПараметрыОтбораТоваров);
		
		Если НайденныеСтрокиТоваров.Количество() = 0 Тогда
			ДобавитьСтрокуТаблицыИтогов(Строка, НайденныеСтрокиТоваров);
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтрокиТоваров Цикл
				ДобавитьСтрокуТаблицыИтогов(Строка, НайденныеСтрокиТоваров);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТаблицыИтогов(ДанныеСтроки, НайденныеСтрокиТоваров)
	
	СтрокаИтогов = ИтогиЗаказа.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаИтогов, ДанныеСтроки);
	
	ИдентификаторСтрокиИтогов = СтрокаИтогов.ПолучитьИдентификатор();
	Для Каждого СтрокаТоваров Из НайденныеСтрокиТоваров Цикл
		СтрокаТоваров.ИдентификаторСтрокиИтогов = ИдентификаторСтрокиИтогов;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКоличествоВТаблицеИтогов(Таблица = Неопределено)
	
	Сложить = ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.Резервировать
		Или ВидОперации = Перечисления.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать;
		
	Если Не ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		Таблица = ТаблицаТовары;
	КонецЕсли;
		
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") И Таблица.Колонки.Найти("ИдентификаторСтрокиИтогов") = Неопределено Тогда
		Таблица.Колонки.Добавить("ИдентификаторСтрокиИтогов");
	КонецЕсли;
	
	Для Каждого СтрокаИтогов Из ИтогиЗаказа Цикл
		СтрокаИтогов.Количество = 0;
	КонецЦикла;
	
	Для Каждого Строка Из Таблица Цикл
		СтрокаИтогов = ИтогиЗаказа.НайтиПоИдентификатору(Строка.ИдентификаторСтрокиИтогов);
		Если Строка.Отметка Тогда
			ДобавитьВычестьКоличество = ?(Сложить, Строка.Количество, -Строка.Количество);
		Иначе
			ДобавитьВычестьКоличество = 0;
		КонецЕсли;
		СтрокаИтогов.Количество = СтрокаИтогов.Количество + ДобавитьВычестьКоличество;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиПоЗаказу(НазначениеДляИтога)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Назначение", НазначениеДляИтога);
	
	СтрокиИтогов = ИтогиЗаказа.НайтиСтроки(ПараметрыОтбора);
	
	НеОбеспечен = 0;
	ЧастичноОбеспечено = 0;
	ПолностьюОбеспечен = 0;
	ОбеспеченСверхПотребности = 0;
	
	НетВНаличииНаСкладеОтгрузки = 0;
	ЧастичноВНаличииНаСкладеОтгрузки = 0;
	ПолностьюВНаличииНаСкладеОтгрузки = 0;
	СверхПотребностиВНаличииНаСкладеОтгрузки = 0;
	
	Для Каждого СтрокаИтогов Из СтрокиИтогов Цикл
		
		ОбеспеченоНаВсехСкладах = СтрокаИтогов.Обеспечено + СтрокаИтогов.Количество;
		ВНаличии = СтрокаИтогов.НаСкладе + СтрокаИтогов.Количество;
		Потребность = СтрокаИтогов.Потребность - ОбеспеченоНаВсехСкладах;
		
		// Расчет итогов в целом по заказу
		Если Потребность <= 0 И ОбеспеченоНаВсехСкладах > 0 Тогда
			ПолностьюОбеспечен = ПолностьюОбеспечен + 1;
			Если Потребность < 0 Тогда
				ОбеспеченСверхПотребности = Истина;
			КонецЕсли;
		ИначеЕсли Потребность > 0 И ОбеспеченоНаВсехСкладах > 0 Тогда
			ЧастичноОбеспечено = ЧастичноОбеспечено + 1;
		ИначеЕсли СтрокаИтогов.ПотребностьОсновногоСклада Тогда
			НеОбеспечен = НеОбеспечен + 1;
		КонецЕсли;
		
		Если СтрокаИтогов.ПотребностьОсновногоСклада Тогда
			Если Потребность <= 0
				И СтрокаИтогов.ПотребностьОсновногоСклада Тогда
				ПолностьюВНаличииНаСкладеОтгрузки = ПолностьюВНаличииНаСкладеОтгрузки + 1;
				Если Потребность < 0 Тогда
					СверхПотребностиВНаличииНаСкладеОтгрузки = СверхПотребностиВНаличииНаСкладеОтгрузки + 1;
				КонецЕсли;
			ИначеЕсли ВНаличии > 0
				И СтрокаИтогов.ПотребностьОсновногоСклада Тогда
				ЧастичноВНаличииНаСкладеОтгрузки = ЧастичноВНаличииНаСкладеОтгрузки + 1;
			Иначе
				НетВНаличииНаСкладеОтгрузки = НетВНаличииНаСкладеОтгрузки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Строковое представление итогов в целом по заказу
	Если НеОбеспечен >= 0 И ЧастичноОбеспечено = 0 И ПолностьюОбеспечен = 0 Тогда
		ТекстЗаказОбеспечен = НСтр("ru='Не обеспечен';uk='Не забезпечений'");
		
		Элементы.ДекорацияСостояниеЗначение.Заголовок = ТекстЗаказОбеспечен;
		Элементы.ДекорацияСостояниеЗначение.ЦветФона = ЦветаСтиля.ЦветФонаНеОбеспечен;
	ИначеЕсли ОбеспеченСверхПотребности > 0 И НеОбеспечен = 0 И ЧастичноОбеспечено = 0 Тогда
		ТекстЗаказОбеспечен = НСтр("ru='Обеспечен сверх потребности';uk='Забезпечено понад потреби'");
		
		Элементы.ДекорацияСостояниеЗначение.Заголовок = ТекстЗаказОбеспечен;
		Элементы.ДекорацияСостояниеЗначение.ЦветФона = ЦветаСтиля.ЦветФонаПолностьюОбеспечен;
	ИначеЕсли ПолностьюОбеспечен > 0 И НеОбеспечен = 0 И ЧастичноОбеспечено = 0 Тогда
		ТекстЗаказОбеспечен = НСтр("ru='Полностью обеспечен';uk='Повністю забезпечений'");
		
		Элементы.ДекорацияСостояниеЗначение.Заголовок = ТекстЗаказОбеспечен;
		Элементы.ДекорацияСостояниеЗначение.ЦветФона = ЦветаСтиля.ЦветФонаПолностьюОбеспечен;
	Иначе
		ТекстЗаказОбеспечен = НСтр("ru='Частично обеспечен';uk='Частково забезпечений'");
		
		Элементы.ДекорацияСостояниеЗначение.Заголовок = ТекстЗаказОбеспечен;
		Элементы.ДекорацияСостояниеЗначение.ЦветФона = ЦветаСтиля.ЦветФонаЧастичноОбеспечен;
	КонецЕсли;
	
	Если НетВНаличииНаСкладеОтгрузки >= 0 И ЧастичноВНаличииНаСкладеОтгрузки = 0 И ПолностьюВНаличииНаСкладеОтгрузки = 0 Тогда
		ТекстЗаказВНаличииНаСкладеОтгрузки = НСтр("ru='Нет позиций на складе отгрузки';uk='Немає позицій на складі відвантаження'");
		
		Элементы.ДекорацияВНаличииНаСкладеОтгрузкиЗначение.Заголовок = ТекстЗаказВНаличииНаСкладеОтгрузки;
		Элементы.ДекорацияВНаличииНаСкладеОтгрузкиЗначение.ЦветФона = ЦветаСтиля.ЦветФонаНеОбеспечен;
	ИначеЕсли СверхПотребностиВНаличииНаСкладеОтгрузки > 0 И НетВНаличииНаСкладеОтгрузки = 0 И ЧастичноВНаличииНаСкладеОтгрузки = 0 Тогда
		ТекстЗаказВНаличииНаСкладеОтгрузки = НСтр("ru='Сверх потребности на складе отгрузки';uk='Понад потреби на складі відвантаження'");
		
		Элементы.ДекорацияВНаличииНаСкладеОтгрузкиЗначение.Заголовок = ТекстЗаказВНаличииНаСкладеОтгрузки;
		Элементы.ДекорацияВНаличииНаСкладеОтгрузкиЗначение.ЦветФона = ЦветаСтиля.ЦветФонаПолностьюОбеспечен;
	ИначеЕсли ПолностьюВНаличииНаСкладеОтгрузки > 0 И НетВНаличииНаСкладеОтгрузки = 0 И ЧастичноВНаличииНаСкладеОтгрузки = 0 Тогда
		ТекстЗаказВНаличииНаСкладеОтгрузки = НСтр("ru='Полностью на складе отгрузки';uk='Повністю на складі відвантаження'");
		
		Элементы.ДекорацияВНаличииНаСкладеОтгрузкиЗначение.Заголовок = ТекстЗаказВНаличииНаСкладеОтгрузки;
		Элементы.ДекорацияВНаличииНаСкладеОтгрузкиЗначение.ЦветФона = ЦветаСтиля.ЦветФонаПолностьюОбеспечен;
	Иначе
		ТекстЗаказВНаличииНаСкладеОтгрузки = НСтр("ru='Частично на складе отгрузки';uk='Частково на складі відвантаження'");
		
		Элементы.ДекорацияВНаличииНаСкладеОтгрузкиЗначение.Заголовок = ТекстЗаказВНаличииНаСкладеОтгрузки;
		Элементы.ДекорацияВНаличииНаСкладеОтгрузкиЗначение.ЦветФона = ЦветаСтиля.ЦветФонаЧастичноОбеспечен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтроки(Значение)

	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		СтрокаТоваров.Отметка = Значение;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПереключательПриИзмененииНаСервере()
	
	ВидОперации = ?(ВидОперацииПереключатель, ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.РезервироватьИКорректировать"), 
		ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать"));
	
	НастроитьЭлементыФормыПриСоздании();
	ЗаполнитьТаблицу();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура РежимПриИзмененииНаСервере()
	ЗаполнитьТаблицу();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Функция ДалееНаСервере()
	
	Перем СтруктураСозданияДокумента;
	
	СтруктураВозврата = Новый Структура("СменаСтраницы", Ложь);
	
	ТребуетсяШаг2 = ТребуетсяШаг2();
	
	Если ТребуетсяШаг2 И Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоСкладам Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.ШагПоПомещениямЯчейкам;
		
		ЗаполнитьДерево();
		
		СтруктураВозврата.СменаСтраницы = Истина;
		
	Иначе
		
		ПеренестиДанныеДереваВТаблицу();
		
		Если Параметры.Мастер Тогда
			СтруктураСозданияДокумента = СоздатьДокумент();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	СтруктураВозврата.Вставить("СтруктураСозданияДокумента", СтруктураСозданияДокумента);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

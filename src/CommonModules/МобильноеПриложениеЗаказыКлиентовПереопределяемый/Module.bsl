////////////////////////////////////////////////////////////////////////////////
//МОДУЛЬ СОДЕРЖИТ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПАКЕТАМИ ОБМЕНА С МОБИЛЬНЫМ ПРИЛОЖЕНИЕМ "ЗАКАЗЫ":
// - работа с узлами обмена
// - выгрузка объектов обмена
// - загрузка объектов обмена
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВыгрузкаДанных

// Записывает информацию по остаткам в сообщение для обмена для узла обмена с мобильным приложением.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - сообщение обмена;
//  УзелОбмена - узел обмена с мобильным приложением;
//  ДопСвойства - Структура - содержит данные для продолжения обмена.
//
Процедура ВыгрузитьДоступныеОстатки(ЗаписьXML, УзелОбмена, ДопСвойства) Экспорт
	
	Если НЕ ДопСвойства = Неопределено Тогда
		ТаблицаОстатков = ДопСвойства.ТаблицаОстатков;
		ВыгруженныеОбъекты = ДопСвойства.ВыгруженныеОбъекты;
	Иначе
		ТаблицаОстатков = ДанныеДляВыгрузкиОстатков(УзелОбмена);
		ВыгруженныеОбъекты = Новый Соответствие;
	КонецЕсли;
	
	ВремяНачалаОбмена = ТекущаяДатаСеанса();
	ТребуетсяПродолжение = Ложь;
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		// Проверим корректность характеристики номенклатуры.
		СтруктураПоискаСсылки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
			СтрокаОстатков.Номенклатура, СтрокаОстатков.Характеристика, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		Если СтруктураПоискаСсылки.ХарактеристикиИспользуются
			И НЕ ЗначениеЗаполнено(СтруктураПоискаСсылки.Характеристика) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторНоменклатуры = СокрЛП(СтрокаОстатков.Номенклатура.УникальныйИдентификатор());
		ИдентификаторХарактеристики = ?(ЗначениеЗаполнено(СтрокаОстатков.Характеристика),
			СокрЛП(СтрокаОстатков.Характеристика.УникальныйИдентификатор()), "");
		Если СтруктураПоискаСсылки.ХарактеристикиИспользуются Тогда
			СтрокаОстатков.ref = ИдентификаторОбъектаМП(ИдентификаторНоменклатуры, ИдентификаторХарактеристики, "");
		Иначе
			СтрокаОстатков.ref = ИдентификаторНоменклатуры;
		КонецЕсли;
		СтрокаОстатков.СкладRef = СокрЛП(СтрокаОстатков.Склад.УникальныйИдентификатор());
		ЗаписатьСтрокуОстатковXML(ЗаписьXML, СтрокаОстатков);
		СтрокаОстатков.Выгружен = Истина;
		ВремяВыгрузкиОстатков = ТекущаяДатаСеанса();
		Если ВремяВыгрузкиОстатков - ВремяНачалаОбмена > 30 Тогда
			ТребуетсяПродолжение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДопСвойства = Новый Структура("Продолжение", Ложь);
	Если ТребуетсяПродолжение Тогда
		ВыгруженныеСтроки = ТаблицаОстатков.НайтиСтроки(Новый Структура("Выгружен", Истина));
		Для каждого СтрокаКУдалению Из ВыгруженныеСтроки Цикл
			ТаблицаОстатков.Удалить(СтрокаКУдалению);
		КонецЦикла;
		ДопСвойства.Вставить("Продолжение", Истина);
		ДопСвойства.Вставить("ТаблицаОстатков", ТаблицаОстатков);
		ДопСвойства.Вставить("ВыгруженныеОбъекты", ВыгруженныеОбъекты);
	КонецЕсли;
КонецПроцедуры

// Записывает данные заданий в сообщение для обмена для узла обмена с мобильным приложением.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - сообщение обмена
//  УзелОбмена - узел обмена с мобильным приложением
//
Процедура ВыгрузитьЗаданияДляОбмена(ЗаписьXML, УзелОбмена, СообщениеОбмена, НомерСообщения) Экспорт
	
	ФильтрИзменений = Новый Массив;
	ФильтрИзменений.Добавить(Метаданные.Документы.ЗаданиеТорговомуПредставителю);
	
	МассивИзменений = МассивИзменений(УзелОбмена, НомерСообщения, ФильтрИзменений);
	
	ИспользоватьСоглашенияИлиДоговоры = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	Для Каждого Данные Из МассивИзменений Цикл
		
		Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
			// Удаление объекта не передаем в основную ИБ.
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
			Продолжить;
		КонецЕсли;
				
		Если ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю") Тогда
			Если НЕ (Данные.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.КОтработке
			ИЛИ Данные.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано) Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Данные.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано Тогда
			ЗаписатьПечатнуюФормуЗаказаПоЗаданию(ЗаписьXML, Данные)
		Иначе
			ОбработатьОбъектПередЗаписьюВПакетОбмена(Данные);
			ЗаписатьЗаданиеВПакетОбмена(ЗаписьXML, Данные, ИспользоватьСоглашенияИлиДоговоры);
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
	КонецЦикла;
КонецПроцедуры

// Записывает данные клиентов в сообщение для обмена для узла обмена с мобильным приложением.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - сообщение обмена;
//  УзелОбмена - узел обмена с мобильным приложением;
//  ДопСвойства - Структура - содержит данные для продолжения обмена.
//
Процедура ВыгрузитьКлиентовДляОбмена(ЗаписьXML, УзелОбмена, ДопСвойства) Экспорт
	
	Если НЕ ДопСвойства = Неопределено Тогда
		ТаблицаИзмененных = ДопСвойства.ТаблицаИзмененных;
		ВыгруженныеОбъекты = ДопСвойства.ВыгруженныеОбъекты;
	Иначе
		ТаблицаИзмененных = ДанныеДляВыгрузкиКлиентов(УзелОбмена);
		ВыгруженныеОбъекты = Новый Соответствие;
	КонецЕсли;
	
	ТаблицаСоответствийДляИндивидуальныхЦен = Новый ТаблицаЗначений;
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("Соглашение",
		Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("ИдентификаторУсловияПродаж",
		Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("ИдентификаторСоглашения",
		Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("ВидЦены",
		Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("СегментНоменклатуры",
		Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("Валюта",
		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("Склад",
		Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("ИспользоватьХарактеристики",
		Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствийДляИндивидуальныхЦен.Колонки.Добавить("ИспользоватьСегментыНоменклатуры",
		Новый ОписаниеТипов("Булево"));
	
	ИспользуютсяСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	ИспользуетсяНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьСоглашенияИлиДоговоры = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ВремяНачалаОбмена = ТекущаяДатаСеанса();
	ТребуетсяПродолжение = Ложь;
	Для Каждого СтрокаДанных Из ТаблицаИзмененных Цикл
		ТаблицаСоответствийДляИндивидуальныхЦен.Очистить();
		// Если требуется удаление партнера, то, необходимо записать удаление данных.
		// Для ситуаций, когда партнер перестал быть клиентом, или не доступен пользователю МП.
		ТребуетсяУдалениеПартнера = СтрокаДанных.ТребуетсяУдалениеПартнера;
		Если ТребуетсяУдалениеПартнера Тогда
			Если ВыгруженныеОбъекты.Получить(СтрокаДанных.ПартнерКВыгрузке) = Неопределено Тогда
				ВыгруженныеОбъекты.Вставить(СтрокаДанных.ПартнерКВыгрузке, СтрокаДанных.ПартнерКВыгрузке);
				// Получаем значение с возможным удалением данных.
				Данные = СтрокаДанных.ПартнерКВыгрузке.ПолучитьОбъект();
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
				МобильноеПриложениеЗаказыКлиентов.УдалениеДанных(Данные);
				Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
				КонецЕсли;
				ВыгрузитьКонтактныхЛицКлиента(ЗаписьXML, СтрокаДанных.ПартнерКВыгрузке, Истина);
			КонецЕсли;
			СтрокаДанных.Выгружен = Истина;
			Продолжить;
		КонецЕсли;
		
		// Если требуется удаление информации о партнере, то, необходимо записать удаление данных.
		// Для ситуаций, когда пользователю МП недоступно редактирование партнеров.
		ТребуетсяУдаление = СтрокаДанных.ТребуетсяУдаление;
		Если ТребуетсяУдаление И НЕ ВозможностьДобавленияИзмененияПартнеров() Тогда
			Если ВыгруженныеОбъекты.Получить(СтрокаДанных.ПартнерКВыгрузке) = Неопределено Тогда
				ВыгруженныеОбъекты.Вставить(СтрокаДанных.ПартнерКВыгрузке, СтрокаДанных.ПартнерКВыгрузке);
				Данные = СтрокаДанных.ПартнерКВыгрузке.ПолучитьОбъект();
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
				МобильноеПриложениеЗаказыКлиентов.УдалениеДанных(Данные);
				Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
				КонецЕсли;
				ВыгрузитьКонтактныхЛицКлиента(ЗаписьXML, СтрокаДанных.ПартнерКВыгрузке, Истина);
			КонецЕсли;
			СтрокаДанных.Выгружен = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ВыгруженныеОбъекты.Получить(СтрокаДанных.ПартнерКВыгрузке) = Неопределено Тогда
			ИнформацияОПартнере = ИнформацияОПартнере(СтрокаДанных);
			ЗаписатьСправочник(ЗаписьXML, ИнформацияОПартнере, "Клиенты");
			ВыгрузитьКонтактныхЛицКлиента(ЗаписьXML, СтрокаДанных.ПартнерКВыгрузке, Ложь);
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, СтрокаДанных.ПартнерКВыгрузке.ПолучитьОбъект());
			ВыгруженныеОбъекты.Вставить(СтрокаДанных.ПартнерКВыгрузке, СтрокаДанных.ПартнерКВыгрузке);
		КонецЕсли;
		
		Если ВыгруженныеОбъекты.Получить(СтрокаДанных.КонтрагентСсылка) = Неопределено Тогда
			Данные = СтрокаДанных.КонтрагентСсылка.ПолучитьОбъект();
			Если НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты") Тогда
				МобильноеПриложениеЗаказыКлиентов.УдалениеДанных(Данные);
			КонецЕсли;
			Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
			Иначе
				ИнформацияОКонтрагенте = ИнформацияОКонтрагенте(СтрокаДанных);
				ЗаписатьСправочник(ЗаписьXML, ИнформацияОКонтрагенте, "Контрагенты");
			КонецЕсли;
			ВыгруженныеОбъекты.Вставить(СтрокаДанных.КонтрагентСсылка, СтрокаДанных.КонтрагентСсылка);
		КонецЕсли;
		
		Если ТребуетсяУдаление Тогда
			СтрокаДанных.Выгружен = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ИспользоватьСоглашенияИлиДоговоры Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДанных.ИдУсловиеПродаж)
				ИЛИ ЗначениеЗаполнено(СтрокаДанных.ИдУсловиеПродаж)
				И ВыгруженныеОбъекты.Получить(СтрокаДанных.ИдУсловиеПродаж) = Неопределено Тогда
				
				Данные = СтрокаДанных.Соглашение.ПолучитьОбъект();
				УдалитьУсловиеПродаж = Ложь;
				Если НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.СоглашенияСКлиентами") Тогда
					УдалитьУсловиеПродаж = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.Договор) Тогда
					Данные = СтрокаДанных.Договор.ПолучитьОбъект();
					УдалитьУсловиеПродаж = Ложь;
					Если НЕ ТипЗнч(Данные) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
						УдалитьУсловиеПродаж = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ УдалитьУсловиеПродаж Тогда
					СтрокаСоглашения = СоглашениеСКлиентомПоОрганизацииИВидуЦен(СтрокаДанных);
					Если Не СтрокаСоглашения = Неопределено Тогда
						ЗаписатьСправочник(ЗаписьXML, СтрокаСоглашения, "ДоговорыКлиентов");
						Если СтрокаДанных.СоглашениеДействует Тогда
							ЗаписатьПравилаПродаж(ЗаписьXML, СтрокаДанных);
						КонецЕсли;
						ВыгруженныеОбъекты.Вставить(СтрокаДанных.ИдУсловиеПродаж, СтрокаДанных.ИдУсловиеПродаж);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ СтрокаДанных.СоглашениеДействует = Неопределено И СтрокаДанных.СоглашениеДействует Тогда
				Если СтрокаДанных.СоглашениеТиповое 
					Или НЕ СтрокаДанных.ЕстьУточнениеЦен Тогда
					СтрокаДанных.Выгружен = Истина;
					Продолжить;
				КонецЕсли;
				СтрокаСоответствия = ТаблицаСоответствийДляИндивидуальныхЦен.Добавить();
				СтрокаСоответствия.Соглашение = СтрокаДанных.Соглашение;
				СтрокаСоответствия.ИдентификаторУсловияПродаж = СтрокаДанных.ИдУсловиеПродаж;
				СтрокаСоответствия.ИдентификаторСоглашения = СокрЛП(СтрокаДанных.Соглашение.УникальныйИдентификатор());
				СтрокаСоответствия.ВидЦены = СтрокаДанных.ВидЦены;
				Если ИспользуютсяСегментыНоменклатуры Тогда
					СтрокаСоответствия.СегментНоменклатуры = СтрокаДанных.СоглашениеСегментНоменклатуры;
				КонецЕсли;
				Если ИспользуетсяНесколькоСкладов Тогда
					СтрокаСоответствия.Склад = СтрокаДанных.СоглашениеСклад;
				Иначе
					СтрокаСоответствия.Склад = Справочники.Склады.СкладПоУмолчанию();
				КонецЕсли;
				СтрокаСоответствия.ИспользоватьСегментыНоменклатуры = ИспользуютсяСегментыНоменклатуры
				И ЗначениеЗаполнено(СтрокаСоответствия.СегментНоменклатуры);
				ТаблицаСоответствийДляИндивидуальныхЦен.ЗаполнитьЗначения(
				МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов(), "Валюта");
				ТаблицаСоответствийДляИндивидуальныхЦен.ЗаполнитьЗначения(
					ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"), "ИспользоватьХарактеристики");
				ЗаписатьИндивидуальныеЦеныКлиента(ЗаписьXML, УзелОбмена, ВыгруженныеОбъекты,
				ТаблицаСоответствийДляИндивидуальныхЦен);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДанных.Выгружен = Истина;
		ВремяВыгрузкиПартнера = ТекущаяДатаСеанса();
		Если ВремяВыгрузкиПартнера - ВремяНачалаОбмена > 30 Тогда
			ТребуетсяПродолжение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДопСвойства = Новый Структура("Продолжение", Ложь);
	Если ТребуетсяПродолжение Тогда
		ВыгруженныеСтроки = ТаблицаИзмененных.НайтиСтроки(Новый Структура("Выгружен", Истина));
		Для каждого СтрокаКУдалению Из ВыгруженныеСтроки Цикл
			ТаблицаИзмененных.Удалить(СтрокаКУдалению);
		КонецЦикла;
		ДопСвойства.Вставить("Продолжение", Истина);
		ДопСвойства.Вставить("ТаблицаИзмененных", ТаблицаИзмененных);
		ДопСвойства.Вставить("ВыгруженныеОбъекты", ВыгруженныеОбъекты);
	Иначе
		ОчиститьНеПопавшиеВОтбор(ЗаписьXML, УзелОбмена);
	КонецЕсли;
КонецПроцедуры

// Записывает данные клиентов в сообщение для обмена для узла обмена с мобильным приложением.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - сообщение обмена;
//  Клиент - СправочникСсылка.Клиент - клиент, чьих контактных лиц необходимо выгрузить в обмен;
//  УдалениеДанных - Булево - флаг передачи удаления данных для контактных лиц клиента.
//
Процедура ВыгрузитьКонтактныхЛицКлиента(ЗаписьXML, Клиент, УдалениеДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = МобильноеПриложениеЗаказыКлиентовПовтИсп.ТекстЗапросаКонтактныхЛицКлиента();
	Запрос.УстановитьПараметр("Партнер", Клиент);
	Запрос.УстановитьПараметр("КодВладельца", СокрЛП(Клиент.УникальныйИдентификатор()));
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДанных Из Результат Цикл
		Данные = СтрокаДанных.Ссылка.ПолучитьОбъект();
		Если УдалениеДанных Тогда
			МобильноеПриложениеЗаказыКлиентов.УдалениеДанных(Данные);
		КонецЕсли;
		Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
			Продолжить;
		КонецЕсли;
		СтруктураКонтактногоЛица = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураКонтактногоЛица();
		ЗаполнитьЗначенияСвойств(СтруктураКонтактногоЛица, СтрокаДанных);
		СтруктураКонтактногоЛица.ref = СокрЛП(СтрокаДанных.Ссылка.УникальныйИдентификатор());
		СтруктураКонтактногоЛица.ERPКод = СтруктураКонтактногоЛица.ref;
		ЗаписатьКонтактнуюИнформацию(СтруктураКонтактногоЛица, СтрокаДанных.Ссылка, "КонтактныеЛицаПартнеров");
		ЗаписатьСправочник(ЗаписьXML, СтруктураКонтактногоЛица, "КонтактныеЛицаКлиентов");
	КонецЦикла;
КонецПроцедуры

// Заполняет сообщение обмена информацией по настройкам приложения для мобильного приложения.
//
// Параметры:
//  УзелОбмена - узел обмена с мобильным приложением;
//  СтруктураОтвета - Структура - сообщение обмена.
//
Процедура ВыгрузитьНастройкиДляОбмена(УзелОбмена, СтруктураОтвета) Экспорт
	
	РеквизитыУзла = МобильноеПриложениеЗаказыКлиентов.РеквизитыУзла(УзелОбмена);
	НаборКонстант = Константы.СоздатьНабор("ИспользоватьЗаказыКлиентов,
		|ИспользованиеСоглашенийСКлиентами, ИспользоватьДоговорыСКлиентами,
		|ИспользоватьПартнеровКакКонтрагентов, ИспользоватьКомиссиюПриПродажах, ИспользоватьРучныеСкидкиВПродажах,
		|ИспользоватьСкладыВТабличнойЧастиДокументовПродажи, ИспользоватьРасширенныеВозможностиЗаказаКлиента,
		|ИспользованиеЗаданийТорговымПредставителям, ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре,
		|ЕдиницаИзмеренияВеса, ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов");
		
	НаборКонстант.Прочитать();
	ДоступныеФункции = ПроверкаПользователяМобильногоПриложения();
	
	СтруктураОтвета.Вставить("AddChangeCustomer", ДоступныеФункции.ИзменениеКлиентов);
	СтруктураОтвета.Вставить("AddChangeCustomerOrders",
		НаборКонстант.ИспользоватьЗаказыКлиентов И ДоступныеФункции.ЗаказыКлиентов);
	ИспользованиеСоглашенийСКлиентами = ?(ЗначениеЗаполнено(НаборКонстант.ИспользованиеСоглашенийСКлиентами),
		Перечисления.ИспользованиеСоглашенийСКлиентами.Индекс(НаборКонстант.ИспользованиеСоглашенийСКлиентами), 0);
	СтруктураОтвета.Вставить("UsingCustomerAgreement", ИспользованиеСоглашенийСКлиентами);
	СтруктураОтвета.Вставить("UsePricesInOrderLine", Истина);
	СтруктураОтвета.Вставить("UseCustomerContract", НаборКонстант.ИспользоватьДоговорыСКлиентами);
	СтруктураОтвета.Вставить("UseGoodsBalance", Истина);
	СтруктураОтвета.Вставить("PartnersHowContractors", НаборКонстант.ИспользоватьПартнеровКакКонтрагентов);
	СтруктураОтвета.Вставить("UseCommission", НаборКонстант.ИспользоватьКомиссиюПриПродажах);
	СтруктураОтвета.Вставить("UseManualDiscounts", НаборКонстант.ИспользоватьРучныеСкидкиВПродажах);
	СтруктураОтвета.Вставить("UseStoreInOrderLine", НаборКонстант.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи);
	СтруктураОтвета.Вставить("UseOrderStatus", НаборКонстант.ИспользоватьРасширенныеВозможностиЗаказаКлиента);
	СтруктураОтвета.Вставить("ChangePriceInOrder", ДоступныеФункции.ИзменениеЦен);
	СтруктураОтвета.Вставить("FrequencyExchangeRates", 0);
	СтруктураОтвета.Вставить("FrequencyExchangeBalance", 0);
	СтруктураОтвета.Вставить("PrefixIB", РеквизитыУзла.ПрефиксДляДанныхМобильногоУстройства);
	СтруктураОтвета.Вставить("MessageNumberIn", РеквизитыУзла.НомерПринятого);
	СтруктураОтвета.Вставить("MessageNumberOut", РеквизитыУзла.НомерОтправленного);
	Если ДоступныеФункции.Задания Тогда
		ИспользованиеЗаданий = ?(ЗначениеЗаполнено(НаборКонстант.ИспользованиеЗаданийТорговымПредставителям),
			Перечисления.ИспользованиеЗаданийТорговымПредставителям.Индекс(
				НаборКонстант.ИспользованиеЗаданийТорговымПредставителям), 0);
	Иначе
		ИспользованиеЗаданий = 0;
	КонецЕсли;
	СтруктураОтвета.Вставить("UsingJobTargets", ИспользованиеЗаданий);
	СтруктураОтвета.Вставить("DetailJobTargets", НаборКонстант.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре);
	СтруктураОтвета.Вставить("UseCashPayment",
		(ДоступныеФункции.Касса
			И ?(РеквизитыУзла.ИспользоватьПКОДляРегистрацииОплаты = Неопределено, Ложь,
					РеквизитыУзла.ИспользоватьПКОДляРегистрацииОплаты))
		ИЛИ (ДоступныеФункции.Доверенности
			И ?(РеквизитыУзла.ИспользоватьДоверенностиДляРегистрацииОплаты = Неопределено, Ложь,
					РеквизитыУзла.ИспользоватьДоверенностиДляРегистрацииОплаты)));
	СтруктураОтвета.Вставить("UseCashRegister", ДоступныеФункции.Касса
		И ЗначениеЗаполнено(РеквизитыУзла.Касса));
	СтруктураОтвета.Вставить("UseCardPayment", ДоступныеФункции.ПлатежнаяКарта
		И ЗначениеЗаполнено(РеквизитыУзла.ЭквайринговыйТерминал));
	СтруктураОтвета.Вставить("CardsTypes", "");
	СтруктураОтвета.Вставить("UsePushNotifications", ?(РеквизитыУзла.ОтправляютсяPushУведомления = Неопределено,
		Ложь, РеквизитыУзла.ОтправляютсяPushУведомления));
	СтруктураОтвета.Вставить("GoogleCloudProjectNumber", РеквизитыУзла.НомерПриложенияGoogleCloud);
	СтруктураОтвета.Вставить("UseImages", ?(РеквизитыУзла.ПередаватьИзображенияТоваров = Неопределено,
		Ложь, РеквизитыУзла.ПередаватьИзображенияТоваров));
	СтруктураОтвета.Вставить("UseWeight", ?(РеквизитыУзла.ИспользоватьВесовыеХарактеристики = Неопределено,
		Ложь, РеквизитыУзла.ИспользоватьВесовыеХарактеристики));
	Если ЗначениеЗаполнено(НаборКонстант.ЕдиницаИзмеренияВеса) Тогда
		СтруктураОтвета.Вставить("UnitWeight", СокрЛП(НаборКонстант.ЕдиницаИзмеренияВеса.УникальныйИдентификатор()));
	Иначе
		СтруктураОтвета.Вставить("UnitWeight", МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор());
	КонецЕсли;
	СтруктураОтвета.Вставить("UseRequestsToReturnOfGoodsByClient",
		ДоступныеФункции.ЗаявкиНаВозврат И НаборКонстант.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов);
	
	СтруктураОтвета.ResultMessage = "";
	СтруктураОтвета.Success = Истина;
КонецПроцедуры

// Записывает информацию по ценам в сообщение для обмена для узла обмена с мобильным приложением.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - сообщение обмена;
//  УзелОбмена - Узел плана обмена с мобильным приложением;
//  НомерСообщения - Число - номер сообщения обмена с мобильным приложением;
//  ВсеЦены - Булево - флаг выгрузки всех цен;
//  ДопСвойства - Структура - содержит данные для продолжения обмена.
//
Процедура ВыгрузитьПрайсЛистДляОбмена(ЗаписьXML, СообщениеОбмена, УзелОбмена, НомерСообщения, ВсеЦены, ДопСвойства) Экспорт
	
	Если НЕ ДопСвойства = Неопределено Тогда
		ТаблицаПрайсЛиста = ДопСвойства.ТаблицаПрайсЛиста;
		ВыгруженныеОбъекты = ДопСвойства.ВыгруженныеОбъекты;
	Иначе
		Изменения = ИзмененияПрайсЛиста(УзелОбмена, ВсеЦены);
		ТаблицаПрайсЛиста = ПрайсЛистТорговогоПредставителя(УзелОбмена, Изменения);
		ВыгруженныеОбъекты = Новый Соответствие;
	КонецЕсли;

	Если ТаблицаПрайсЛиста.Количество() = 0 Тогда
		ДопСвойства = Новый Структура;
		ДопСвойства.Вставить("Продолжение", Ложь);
		СообщениеОбмена = НСтр("ru='Нет доступных цен.';uk='Немає доступних цін.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат;
	КонецЕсли;
	ВремяНачалаОбмена = ТекущаяДатаСеанса();
	ТребуетсяПродолжение = Ложь;
	КоличествоСтрокПрайса = 0;
	Для каждого СтрокаПрайсЛиста Из ТаблицаПрайсЛиста Цикл
		
		// Выгружаем объекты из строки прайса.
		ВыгрузитьОбъектыСсылочногоТипа(ЗаписьXML, ВыгруженныеОбъекты, СтрокаПрайсЛиста, УзелОбмена);
		// Выгружаем саму строку прайса.
		ЗаписатьСтрокуПрайсЛиста(ЗаписьXML, СтрокаПрайсЛиста);
		
		СтрокаПрайсЛиста.Выгружен = Истина;
		ВремяВыгрузкиЦены = ТекущаяДатаСеанса();
		КоличествоСтрокПрайса = КоличествоСтрокПрайса + 1;
		Если ВремяВыгрузкиЦены - ВремяНачалаОбмена > 30
			ИЛИ КоличествоСтрокПрайса > 1000 Тогда
			ТребуетсяПродолжение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДопСвойства = Новый Структура("Продолжение", Ложь);
	Если ТребуетсяПродолжение Тогда
		ВыгруженныеСтроки = ТаблицаПрайсЛиста.НайтиСтроки(Новый Структура("Выгружен", Истина));
		Для каждого СтрокаКУдалению Из ВыгруженныеСтроки Цикл
			ТаблицаПрайсЛиста.Удалить(СтрокаКУдалению);
		КонецЦикла;
		ДопСвойства.Вставить("Продолжение", Истина);
		ДопСвойства.Вставить("ТаблицаПрайсЛиста", ТаблицаПрайсЛиста);
		ДопСвойства.Вставить("ВыгруженныеОбъекты", ВыгруженныеОбъекты);
	Иначе
		Если ВсеЦены Тогда
			ОчиститьРегистрациюНоменклатурыИКартинокНеПопавшихВОбмен(УзелОбмена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Записывает данные справочников в сообщение для обмена для узла обмена с мобильным приложением.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML - сообщение обмена
//  УзелОбмена - узел обмена с мобильным приложением
//
Процедура ВыгрузитьСправочникиДляОбмена(ЗаписьXML, УзелОбмена) Экспорт
	
	ТаблицаСправочников = ДанныеДляВыгрузкиСправочников(УзелОбмена);
	
	ВыгруженныеОбъекты = Новый Массив;
	Для каждого СтрокаСправочников Из ТаблицаСправочников Цикл
		
		Если ЗначениеЗаполнено(СтрокаСправочников.ВалютаСсылка) Тогда
			ЗаписатьВалютуСтроки(ЗаписьXML, СтрокаСправочников);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСправочников.СтранаСсылка) Тогда
			ЗаписатьСтрануСтроки(ЗаписьXML, СтрокаСправочников, ВыгруженныеОбъекты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСправочников.ВидКИСсылка) Тогда
			ЗаписатьВидКИСтроки(ЗаписьXML, СтрокаСправочников, ВыгруженныеОбъекты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСправочников.ОрганизацияСсылка) Тогда
			ЗаписатьОрганизациюСтроки(ЗаписьXML, СтрокаСправочников);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСправочников.ВидЦеныСсылка) Тогда
			ЗаписатьВидЦеныСтроки(ЗаписьXML, СтрокаСправочников);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСправочников.СкладСсылка) Тогда
			ЗаписатьСкладСтроки(ЗаписьXML, СтрокаСправочников, ВыгруженныеОбъекты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаСправочников.ЕдиницаВесаСсылка) Тогда
			ЗаписатьЕдиницуВесаСтроки(ЗаписьXML, СтрокаСправочников);
		КонецЕсли;
	КонецЦикла;
	ЗаписатьСостоянияЗаявкиНаВозврат(ЗаписьXML,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Код"));
КонецПроцедуры

// Возвращает ответные данные по статусам заказов клиентов.
//
// Параметры:
//  ОтветноеСообщение - ЗаписьXML – ответное сообщение по статусам заказов клиентов;
//  ИдентификаторыЗаказов – Массив - массив прочитанных идентификаторов заказов клиентов.
//
// Возвращаемое значение:
//  ОтветныеДанные - Массив - массив, содержащий данные по статусам заказов клиентов.
//
Функция ОтветныеДанныеСтатусыЗаказовКлиентов(ОтветноеСообщение, Знач ИдентификаторыЗаказов) Экспорт
	
	ЗаказыКлиентов = Новый Массив;
	
	Для каждого ИдентификаторЗаказа Из ИдентификаторыЗаказов Цикл
		
		Если ТипЗнч(ИдентификаторЗаказа) = Тип("Строка") Тогда
			ЗаказКлиента = Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторЗаказа));
		Иначе
			ЗаказКлиента = ИдентификаторЗаказа;
		КонецЕсли;
		
		ЗаказОбъект = ЗаказКлиента.ПолучитьОбъект();
		
		Если ЗаказОбъект = Неопределено Тогда
			МобильноеПриложениеЗаказыКлиентов.УдалениеДанных(ЗаказКлиента);
			СериализаторXDTO.ЗаписатьXML(ОтветноеСообщение, ЗаказКлиента);
			Продолжить;
		КонецЕсли;
		
		ЗаказыКлиентов.Добавить(ЗаказКлиента);
		
	КонецЦикла;
	
	Возврат ИнформацияПоСтатусамЗаказовКлиентов(ЗаказыКлиентов);
КонецФункции

// Возвращает ответные данные по статусам заявок на возврат.
//
// Параметры:
//  ОтветноеСообщение - ЗаписьXML – ответное сообщение по статусам заказов клиентов;
//  Идентификаторы – Массив - массив прочитанных идентификаторов заявок на возврат.
//
// Возвращаемое значение:
//  ОтветныеДанные - Массив - массив, содержащий данные по статусам заявок на возврат.
//
Функция ОтветныеДанныеСтатусыЗаявкиНаВозврат(ОтветноеСообщение, Знач Идентификаторы) Экспорт
	
	ЗаявкиНаВозврат = Новый Массив;
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		
		Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
			ЗаявкаНаВозврат = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолучитьСсылку(
				Новый УникальныйИдентификатор(Идентификатор));
		Иначе
			ЗаявкаНаВозврат = Идентификатор;
		КонецЕсли;
		
		ЗаявкаОбъект = ЗаявкаНаВозврат.ПолучитьОбъект();
		
		Если ЗаявкаОбъект = Неопределено Тогда
			МобильноеПриложениеЗаказыКлиентов.УдалениеДанных(ЗаявкаНаВозврат);
			СериализаторXDTO.ЗаписатьXML(ОтветноеСообщение, ЗаявкаНаВозврат);
			Продолжить;
		КонецЕсли;
		
		ЗаявкиНаВозврат.Добавить(ЗаявкаНаВозврат);
	КонецЦикла;
	
	Возврат ИнформацияПоСтатусамЗаявокНаВозвратТоваров(ЗаявкиНаВозврат);
КонецФункции

#КонецОбласти

#Область СозданиеДанных

// Записывает элемент справочника "Договоры контрагентов".
//
// Параметры:
//  МобильныйДоговор - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьДоговорСоглашение(МобильныйДоговор, Сообщение) Экспорт
	
	НаборКонстант = Константы.СоздатьНабор("ИспользованиеСоглашенийСКлиентами, ИспользоватьДоговорыСКлиентами,
	|ИспользоватьКомиссиюПриПродажах, ИспользоватьСогласованиеСоглашенийСКлиентами,
	|ИспользоватьСегментыПартнеров");
	НаборКонстант.Прочитать();
	
	ИспользованиеСоглашенийСКлиентами = НаборКонстант.ИспользованиеСоглашенийСКлиентами;
	ИспользуютсяСоглашения =
		НЕ ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать;
	ИспользуютсяТолькоТиповые = 
		ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения;
	ИспользуютсяИндивидуальныеСоглашения = ИспользуютсяСоглашения 
		И НЕ ИспользуютсяТолькоТиповые;
	ИспользоватьСогласованиеСоглашенийСКлиентами = НаборКонстант.ИспользоватьСогласованиеСоглашенийСКлиентами;
	ИспользуютсяСегментыПартнеров = НаборКонстант.ИспользоватьСегментыПартнеров;
	ИспользуютсяДоговоры = НаборКонстант.ИспользоватьДоговорыСКлиентами;
	ЕстьКомиссия = НаборКонстант.ИспользоватьКомиссиюПриПродажах;
	ПустойИдентификатор = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ref", МобильныйДоговор.ref);
	СтруктураОтвета.Вставить("ERPКодДоговора", ПустойИдентификатор);
	СтруктураОтвета.Вставить("ERPКодСоглашения", ПустойИдентификатор);
	СтруктураОтвета.Вставить("ТипОбъекта", "ДоговорыКлиентов");
	СтруктураОтвета.Вставить("Успешно", Ложь);
	
	СоответствиеУсловийПродаж = Новый Структура;
	СоответствиеУсловийПродаж.Вставить("ИдУсловиеПродаж", МобильныйДоговор.ref);
	СоответствиеУсловийПродаж.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СоответствиеУсловийПродаж.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
	СоответствиеУсловийПродаж.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	СоответствиеУсловийПродаж.Вставить("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	СоответствиеУсловийПродаж.Вставить("Соглашение",
		ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка"));
	СоответствиеУсловийПродаж.Вставить("Договор",
		ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	
	Если МобильныйДоговор.Комиссия Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		ТипДоговора = Справочники.ДоговорыКонтрагентов.ТипДоговора(ХозяйственнаяОперация);
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		ТипДоговора = Справочники.ДоговорыКонтрагентов.ТипДоговора(ХозяйственнаяОперация);
	КонецЕсли;
	
	ПартнерСсылка = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйДоговор.Клиент));
	ПартнерОбъект = ПартнерСсылка.ПолучитьОбъект();
	ЭтоНовыйПартнер = ПартнерОбъект = Неопределено;
	
	КонтрагентСсылка = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйДоговор.Контрагент));
	КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
	ЭтоНовыйКонтрагент = КонтрагентОбъект = Неопределено;
	
	ОрганизацияСсылка = 
		Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйДоговор.Организация));
	ВидЦеныСсылка = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйДоговор.ВидЦены));
	СкладСсылка = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйДоговор.Склад));
	
	СоответствиеУсловийПродаж.Вставить("Организация", ОрганизацияСсылка);
	СоответствиеУсловийПродаж.Вставить("ВидЦены", ВидЦеныСсылка);
	СоответствиеУсловийПродаж.Вставить("Партнер", ПартнерСсылка);
	СоответствиеУсловийПродаж.Вставить("Контрагент", КонтрагентСсылка);
	
	ЭтоНовыйДоговор = НЕ ЗначениеЗаполнено(МобильныйДоговор.ERPКодСоглашения);
	
	Если Не ЭтоНовыйДоговор Тогда
		СоглашениеСсылка = 
			Справочники.СоглашенияСКлиентами.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйДоговор.ERPКодСоглашения));
		СоглашениеОбъект = СоглашениеСсылка.ПолучитьОбъект();
		Если СоглашениеОбъект = Неопределено Тогда
			СтруктураОтвета.Вставить("Успешно", Ложь);
			Сообщение.Добавить(СтруктураОтвета);
			Возврат;
		КонецЕсли;
		СтруктураОтвета.Вставить("ERPКодСоглашения", МобильныйДоговор.ERPКодСоглашения);
		ЕстьИзменения = Ложь;
		Если ЗначениеЗаполнено(МобильныйДоговор.Дата)
			И НЕ СоглашениеОбъект.Дата = МобильныйДоговор.Дата Тогда
			СоглашениеОбъект.Дата = МобильныйДоговор.Дата;
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(МобильныйДоговор.Номер)
			И НЕ СоглашениеОбъект.Номер = МобильныйДоговор.Номер Тогда
			СоглашениеОбъект.Номер = МобильныйДоговор.Номер;
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(МобильныйДоговор.Description)
			И НЕ СоглашениеОбъект.Наименование = МобильныйДоговор.Description Тогда
			СоглашениеОбъект.Наименование = МобильныйДоговор.Description;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СоглашениеОбъект.Организация)
			И НЕ СоглашениеОбъект.Организация = ОрганизацияСсылка Тогда
			СоглашениеОбъект.Организация = ОрганизацияСсылка;
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СоглашениеОбъект.ВидЦен)
			И НЕ СоглашениеОбъект.ВидЦен = ВидЦеныСсылка Тогда
			СоглашениеОбъект.ВидЦен = ВидЦеныСсылка;
			СоглашениеОбъект.ЦенаВключаетНДС = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеОбъект.ВидЦен, "ЦенаВключаетНДС");
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если НЕ СоглашениеОбъект.ХозяйственнаяОперация = ХозяйственнаяОперация Тогда
			СоглашениеОбъект.ХозяйственнаяОперация = ХозяйственнаяОперация;
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если НЕ СоглашениеОбъект.Склад = СкладСсылка Тогда
			СоглашениеОбъект.Склад = СкладСсылка;
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			ЗаполнитьСправочникСоглашенияПриИзменении(СоглашениеОбъект);
			СоглашениеОбъект.ОбменДанными.Загрузка = Истина;
			Попытка
				СоглашениеОбъект.Записать();
			Исключение
				СтруктураОтвета.Вставить("Успешно", Ложь);
				Сообщение.Добавить(СтруктураОтвета);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		СоответствиеУсловийПродаж.Вставить("Соглашение", СоглашениеОбъект.Ссылка);
		Если СоглашениеСсылка.ИспользуютсяДоговорыКонтрагентов Тогда
			ДоговорСсылка = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(
				Новый УникальныйИдентификатор(МобильныйДоговор.ERPКодДоговора));
			ДоговорОбъект = ДоговорСсылка.ПолучитьОбъект();
			Если НЕ ДоговорОбъект = Неопределено Тогда
				СтруктураОтвета.Вставить("ERPКодДоговора", МобильныйДоговор.ERPКодДоговора);
				ЕстьИзменения = Ложь;
				Если ДоговорОбъект.Организация = ОрганизацияСсылка Тогда
					ДоговорОбъект.Организация = ОрганизацияСсылка;
					ЕстьИзменения = Истина;
				КонецЕсли;
				Если НЕ ДоговорОбъект.ХозяйственнаяОперация = ХозяйственнаяОперация Тогда
					ДоговорОбъект.ХозяйственнаяОперация = ХозяйственнаяОперация;
					ДоговорОбъект.ТипДоговора = ТипДоговора;
					ЕстьИзменения = Истина;
				КонецЕсли;
				Если ЕстьИзменения Тогда
					ДоговорОбъект.ОбменДанными.Загрузка = Истина;
					Попытка
						ДоговорОбъект.Записать();
						СтруктураОтвета.Вставить("Успешно", Истина);
						Сообщение.Добавить(СтруктураОтвета);
					Исключение
						СтруктураОтвета.Вставить("Успешно", Ложь);
						Сообщение.Добавить(СтруктураОтвета);
						Возврат;
					КонецПопытки;
				КонецЕсли;
			Иначе
				СтруктураОтвета.Вставить("Успешно", Ложь);
				Сообщение.Добавить(СтруктураОтвета);
				Возврат;
			КонецЕсли;
			СоответствиеУсловийПродаж.Вставить("Договор", ДоговорОбъект.Ссылка);
		Иначе
			СтруктураОтвета.Вставить("Успешно", Истина);
			Сообщение.Добавить(СтруктураОтвета);
			Возврат;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			СтарыйНабор = 
				РегистрыСведений.СоответствиеУсловийПродажМобильногоПриложения1СЗаказы.СоздатьНаборЗаписей();
			СтарыйНабор.Отбор.ИдУсловиеПродаж.Установить(МобильныйДоговор.ref);
			СтарыйНабор.Записать(Истина);
			НовоеУсловиеПродажУзелОбмена(СоответствиеУсловийПродаж, МобильныйДоговор.ref);
		КонецЕсли;
	Иначе
		Если ИспользуютсяИндивидуальныеСоглашения Тогда
			СоглашениеОбъект = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
			СоглашениеОбъект.Типовое = Ложь;
			СоглашениеОбъект.Партнер = ПартнерСсылка;
			СоглашениеОбъект.Контрагент = КонтрагентСсылка;
			СоглашениеОбъект.Организация = ОрганизацияСсылка;
			СоглашениеОбъект.ХозяйственнаяОперация = ХозяйственнаяОперация;
			СоглашениеОбъект.ВидЦен = ВидЦеныСсылка;
			СоглашениеОбъект.ЦенаВключаетНДС = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеОбъект.ВидЦен, "ЦенаВключаетНДС");
			СоглашениеОбъект.Склад = СкладСсылка;
			СоглашениеОбъект.Валюта = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
			СоглашениеОбъект.Дата = МобильныйДоговор.Дата;
			СоглашениеОбъект.Номер = МобильныйДоговор.Номер;
			СоглашениеОбъект.Наименование = МобильныйДоговор.Description;
			ВСоглашенииИспользуютсяДоговоры = ИспользуютсяДоговоры И МобильныйДоговор.ИспользуютсяДоговорыКонтрагентов;
			СоглашениеОбъект.ИспользуютсяДоговорыКонтрагентов = ВСоглашенииИспользуютсяДоговоры;
			ЗаполнитьСправочникСоглашенияПриИзменении(СоглашениеОбъект);
			СоглашениеОбъект.ОбменДанными.Загрузка = Истина;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияДляУправленияТорговымиПредставителями")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияТорговымПредставителямДляПланирования") Тогда
				СоглашениеОбъект.ИспользуетсяВРаботеТорговыхПредставителей = Истина;
			КонецЕсли;
			Попытка
				СоглашениеОбъект.Записать();
				ERPКодСоглашения = СокрЛП(СоглашениеОбъект.Ссылка.УникальныйИдентификатор());
				СтруктураОтвета.Вставить("ERPКодСоглашения", ERPКодСоглашения);
				Соглашение = СоглашениеОбъект.Ссылка;
				СоответствиеУсловийПродаж.Вставить("Соглашение", Соглашение);
			Исключение
				СтруктураОтвета.Вставить("Успешно", Ложь);
				Сообщение.Добавить(СтруктураОтвета);
				Возврат;
			КонецПопытки;
		Иначе
			Запрос = Новый Запрос(МобильноеПриложениеЗаказыКлиентовПовтИсп.ТекстЗапросаПоискаТиповыхСоглашений());
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
			Запрос.УстановитьПараметр("Организация", ОрганизацияСсылка);
			Запрос.УстановитьПараметр("ВидЦен", ВидЦеныСсылка);
			Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
			Запрос.УстановитьПараметр("Склад", СкладСсылка);
			Запрос.УстановитьПараметр("ИспользуютсяСегментыПартнеров", ИспользуютсяСегментыПартнеров);
			Запрос.УстановитьПараметр("ЭтоНовыйПартнер", ЭтоНовыйПартнер);
			
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Соглашение = Выборка.Соглашение;
				ERPКодСоглашения = СокрЛП(Соглашение.УникальныйИдентификатор());
				ВСоглашенииИспользуютсяДоговоры = Соглашение.ИспользуютсяДоговорыКонтрагентов;
				СтруктураОтвета.Вставить("ERPКодСоглашения", ERPКодСоглашения);
				СоответствиеУсловийПродаж.Вставить("Соглашение", Соглашение);
			Иначе
				СтруктураОтвета.Вставить("Успешно", Ложь);
				Сообщение.Добавить(СтруктураОтвета);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ВСоглашенииИспользуютсяДоговоры Тогда
			ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			ДоговорОбъект.ТипДоговора = ТипДоговора;
			ДоговорОбъект.ХозяйственнаяОперация = ХозяйственнаяОперация;
			ДоговорОбъект.Организация = ОрганизацияСсылка;
			ДоговорОбъект.Партнер = ПартнерСсылка;
			ДоговорОбъект.Контрагент = КонтрагентСсылка;
			ДоговорОбъект.Менеджер = Пользователи.ТекущийПользователь();
			ДоговорОбъект.ВалютаВзаиморасчетов = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
			ДоговорОбъект.Дата = МобильныйДоговор.Дата;
			ДоговорОбъект.Номер = МобильныйДоговор.Номер;
			ДоговорОбъект.Наименование = МобильныйДоговор.Description;
			ДоговорОбъект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				ДоговорОбъект.Организация, ДоговорОбъект.ВалютаВзаиморасчетов);
			ДоговорОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
			ДоговорОбъект.ПорядокОплаты = Соглашение.ПорядокОплаты;
			ДоговорОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
			ДоговорОбъект.ОбменДанными.Загрузка = Истина;
			Попытка
				ДоговорОбъект.Записать();
				ERPКодДоговора = СокрЛП(ДоговорОбъект.Ссылка.УникальныйИдентификатор());
				СтруктураОтвета.Вставить("ERPКодДоговора", ERPКодДоговора);
				СоответствиеУсловийПродаж.Вставить("Договор", ДоговорОбъект.Ссылка);
			Исключение
				СтруктураОтвета.Вставить("Успешно", Ложь);
				Сообщение.Добавить(СтруктураОтвета);
				Возврат;
			КонецПопытки;
		КонецЕсли;
		СтруктураОтвета.Вставить("Успешно", Истина);
		Сообщение.Добавить(СтруктураОтвета);
		НовоеУсловиеПродажУзелОбмена(СоответствиеУсловийПродаж, МобильныйДоговор.ref);
	КонецЕсли;
КонецПроцедуры

// Записывает документ "Задание торговому представителю".
//
// Параметры:
//  МобильноеЗадание - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьЗаданиеТорговомуПредставителю(МобильноеЗадание, УзелОбмена, Сообщение, НастройкиЗадания) Экспорт
	
	РеквизитыУзла = МобильноеПриложениеЗаказыКлиентов.РеквизитыУзла(УзелОбмена);
	
	ИспользованиеЗаданий = Константы.ИспользованиеЗаданийТорговымПредставителям.Получить();
	ДетализироватьЗадания = Константы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Получить();
	
	ЗаданиеТорговомуПредставителю = 
		Документы.ЗаданиеТорговомуПредставителю.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильноеЗадание.ref));
	
	ЗаданиеОбъект = ЗаданиеТорговомуПредставителю.ПолучитьОбъект();
	
	Если ЗаданиеОбъект = Неопределено Тогда
		Попытка
			ЗаданиеОбъект = Документы.ЗаданиеТорговомуПредставителю.СоздатьДокумент();
		Исключение
			Инфо = ИнформацияОбОшибке();
		КонецПопытки;
		ЗаданиеОбъект.УстановитьСсылкуНового(ЗаданиеТорговомуПредставителю);
		ЗаданиеОбъект.Дата = МобильноеЗадание.Date;
		ЗаданиеОбъект.Номер = МобильноеЗадание.Number;
		ЗаданиеОбъект.ТорговыйПредставитель = Пользователи.ТекущийПользователь();
		ЗаданиеОбъект.Куратор = РеквизитыУзла.Куратор;
		ЗаданиеОбъект.ДетализацияПоНоменклатуре = ДетализироватьЗадания;
	Иначе
		Отказ = Ложь;
		ПроверитьВозможностьИзмененияЗадания(ЗаданиеТорговомуПредставителю, УзелОбмена, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Проведен = МобильноеЗадание.Posted;	
	ЗаданиеОбъект.ПометкаУдаления = МобильноеЗадание.DeletionMark;
		
	ЗаданиеОбъект.Валюта			= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильноеЗадание.Валюта));
	ЗаданиеОбъект.ВремяНачала	= МобильноеЗадание.ВремяНачала;
	ЗаданиеОбъект.ВремяОкончания	= МобильноеЗадание.ВремяОкончания;
	ЗаданиеОбъект.ДатаВизитаПлан	= МобильноеЗадание.ДатаВизитаПлан;
	ЗаданиеОбъект.ДатаВизитаФакт	= МобильноеЗадание.ДатаВизитаФакт;
	
	СоглашениеДоговор			= СтруктураДоговораСоглашения(МобильноеЗадание.ДоговорКлиента);
	ЗаданиеОбъект.Договор			= СоглашениеДоговор.Договор;
	ЗаданиеОбъект.Соглашение		= СоглашениеДоговор.Соглашение;
	ЗаданиеОбъект.ХозяйственнаяОперация	= СоглашениеДоговор.ХозяйственнаяОперация;
	
	ЗаданиеОбъект.ЖелаемаяДатаОтгрузки	= МобильноеЗадание.ЖелаемаяДатаОтгрузки;
	ЗаданиеОбъект.Комментарий			= МобильноеЗадание.Комментарий;

	ЗаданиеОбъект.Партнер			= Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильноеЗадание.Клиент));
	ЗаданиеОбъект.Контрагент		= Справочники.Контрагенты.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильноеЗадание.Контрагент));
	ЗаданиеОбъект.Организация		= Справочники.Организации.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильноеЗадание.Организация));
	ЗаданиеОбъект.Склад			= Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильноеЗадание.Склад));
	ЗаданиеОбъект.ЗаполнитьУсловияПродажПоCоглашению();
	
	ТабличнаяЧастьТовары = ЗаданиеОбъект.Товары;
	ТабличнаяЧастьТовары.Очистить();
	
	Для Каждого СтрокаТовара Из МобильноеЗадание.Товары Цикл
		СтрокаДокумента = ТабличнаяЧастьТовары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТовара, "Количество, КоличествоУпаковок, КоличествоПлан,
			|КоличествоУпаковокПлан, ПроцентРучнойСкидки, Сумма, СуммаНДС, СуммаРучнойСкидки, СуммаСНДС, Цена");
		
		СтрокаДокумента.ВидЦены
			= Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовара.ВидЦены));
		
		НоменклатураХарактеристикаУпаковка	= СтруктураНоменклатураХарактеристикаУпаковка(СтрокаТовара.Номенклатура,
			СтрокаТовара.Упаковка);
		СтрокаДокумента.Номенклатура		= НоменклатураХарактеристикаУпаковка.Номенклатура;
		Если ЗначениеЗаполнено(НоменклатураХарактеристикаУпаковка.Характеристика) Тогда
			СтрокаДокумента.Характеристика		= НоменклатураХарактеристикаУпаковка.Характеристика;
		КонецЕсли;
		Если ЗначениеЗаполнено(НоменклатураХарактеристикаУпаковка.Упаковка) Тогда
			СтрокаДокумента.Упаковка			= НоменклатураХарактеристикаУпаковка.Упаковка;
			СтрокаДокумента.Цена				= СтрокаДокумента.Цена * НоменклатураХарактеристикаУпаковка.УпаковкаКоэффициент;
		Иначе
			СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ЗаданиеОбъект.НалогообложениеНДС);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗадание(СтруктураДействий, ЗаданиеОбъект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДокумента, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ТабличнаяЧастьЗадачи = ЗаданиеОбъект.Задачи;
	ТабличнаяЧастьЗадачи.Очистить();
	
	Для Каждого СтрокаЗадачи Из МобильноеЗадание.Задачи Цикл
		
		СтрокаДокумента = ТабличнаяЧастьЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаЗадачи);
	КонецЦикла;
	
	СтараяВалюта = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
	НоваяВалюта = ЗаданиеОбъект.Валюта;
	
	Если НЕ СтараяВалюта = НоваяВалюта Тогда
		
		ДатаДокумента               = ЗаданиеОбъект.Дата;
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, ДатаДокумента);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			ЗаданиеОбъект.Товары,
			ЗаданиеОбъект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СокрЛП(МобильноеЗадание.Статус)) Тогда
		Если Перечисления.СтатусыЗаданийТорговымПредставителям[СокрЛП(МобильноеЗадание.Статус)] =
			Перечисления.СтатусыЗаданийТорговымПредставителям.НеПодготовлено И ИспользованиеЗаданий = 
			Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования Тогда
			ЗаданиеОбъект.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.КОтработке;
			ЗаполнитьДанныеЗаданияПоНастройкамМП(ЗаданиеОбъект, НастройкиЗадания);
		Иначе
			ЗаданиеОбъект.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям[СокрЛП(МобильноеЗадание.Статус)];
		КонецЕсли;
	Иначе
		ЗаданиеОбъект.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.ПустаяСсылка();
	КонецЕсли;
	
	ЗаданиеОбъект.Записать();
	ЗаписатьИнформациюПоСтатусуЗаданияТорговомуПредставителю(Сообщение, ЗаданиеОбъект.Ссылка);
	
	Если Перечисления.СтатусыЗаданийТорговымПредставителям[СокрЛП(МобильноеЗадание.Статус)] =
		Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано И ИспользованиеЗаданий = 
		Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования Тогда
		ЗаказОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ЗаказОбъект.Дата = ТекущаяДата();
		ЗаказОбъект.Заполнить(ЗаданиеОбъект.Ссылка);
		ЗаказОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

// Записывает документ "Заказ клиента".
//
// Параметры:
//  МобильныеДанные - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьЗаказКлиента(МобильныеДанные, Сообщение) Экспорт
	
	ЗаказКлиента = Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныеДанные.ref));
	
	ДокументОбъект = ЗаказКлиента.ПолучитьОбъект();
	
	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ЗаказКлиента);
		ДокументОбъект.Дата = МобильныеДанные.Date;
		ДокументОбъект.Номер = МобильныеДанные.Number;
		ИнициализироватьДокумент(ДокументОбъект);
	Иначе
		Отказ = Ложь;
		ПроверитьВозможностьИзменения(ЗаказКлиента, Отказ);
		Если Отказ Тогда
			ЗаписатьИнформациюПоСтатусуЗаказаКлиента(Сообщение, ЗаказКлиента);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, МобильныеДанные);
	ЗаполнитьИнформациюПоДоставке(ДокументОбъект, МобильныеДанные, 0);
	
	ДокументОбъект.ДатаОтгрузки = МобильныеДанные.ДатаОтгрузки;
	ДокументОбъект.ЖелаемаяДатаОтгрузки = МобильныеДанные.ЖелаемаяДатаОтгрузки;
	
	// Создан по Заданию ТП.
	ДокументОснование = Документы.ЗаданиеТорговомуПредставителю.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильныеДанные.ДокументОснование));
	Если НЕ ДокументОснование.Пустая() Тогда
		ДокументОснованиеОбъект = ДокументОснование.ПолучитьОбъект();
		Если НЕ ДокументОснованиеОбъект = Неопределено Тогда
			ДокументОбъект.ДокументОснование = ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТоварнуюЧасть(ДокументОбъект, МобильныеДанные.Товары, 0);
	
	ВыполнитьЗаписьПроведениеДокумента(ДокументОбъект, Сообщение, МобильныеДанные.Posted, 0);
КонецПроцедуры

// Записывает документ "Заявка на возврат товаров от клиента".
//
// Параметры:
//  МобильныеДанные - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьЗаявкуНаВозвратТоваровОтКлиента(МобильныеДанные, Сообщение) Экспорт
	
	ЗаявкаНаВозврат = 
		Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныеДанные.ref));
	
	ДокументОбъект = ЗаявкаНаВозврат.ПолучитьОбъект();
	
	Если ДокументОбъект = Неопределено Тогда
		ДокументОбъект = Документы.ЗаявкаНаВозвратТоваровОтКлиента.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ЗаявкаНаВозврат);
		ДокументОбъект.Дата = МобильныеДанные.Date;
		ДокументОбъект.Номер = МобильныеДанные.Number;
		ИнициализироватьДокумент(ДокументОбъект);
	Иначе
		Отказ = Ложь;
		ПроверитьВозможностьИзменения(ЗаявкаНаВозврат, Отказ);
		Если Отказ Тогда
			ЗаписатьИнформациюПоСтатусуЗаявкиНаВозврат(Сообщение, ЗаявкаНаВозврат);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, МобильныеДанные);
	ЗаполнитьИнформациюПоДоставке(ДокументОбъект, МобильныеДанные, 1);
	
	ДокументОбъект.ДатаПоступления = МобильныеДанные.ДатаПоступления;
	ДокументОбъект.ЖелаемаяДатаПоступления = МобильныеДанные.ЖелаемаяДатаПоступления;
	ДокументОбъект.ПричинаВозврата = МобильныеДанные.ПричинаВозврата;
	Если ЗначениеЗаполнено(МобильныеДанные.СпособКомпенсации) Тогда
		ДокументОбъект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров[МобильныеДанные.СпособКомпенсации];
	Иначе
		ДокументОбъект.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ОставитьВКачествеАванса;
	КонецЕсли;
	
	СозданНаОсновании = Ложь;
	Если ЗначениеЗаполнено(МобильныеДанные.ДокументОснование) Тогда
		// Создан по Заданию ТП.
		ДокументОснование = Документы.ЗаданиеТорговомуПредставителю.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильныеДанные.ДокументОснование));
		Если НЕ ДокументОснование.Пустая() Тогда
			ДокументОснованиеОбъект = ДокументОснование.ПолучитьОбъект();
			Если НЕ ДокументОснованиеОбъект = Неопределено Тогда
				СозданНаОсновании = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Создан по Заказу клиента.
		Если НЕ СозданНаОсновании Тогда
			ДокументОснование = Документы.ЗаказКлиента.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильныеДанные.ДокументОснование));
			Если НЕ ДокументОснование.Пустая() Тогда
				ДокументОснованиеОбъект = ДокументОснование.ПолучитьОбъект();
				Если НЕ ДокументОснованиеОбъект = Неопределено Тогда
					СозданНаОсновании = Истина;
					ДокументОбъект.ДокументРеализации = РеализацияПоЗаказу(ДокументОснование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СозданНаОсновании Тогда
		ТекстКомментария = СтрШаблон(НСтр("ru='<Создан по документу: %1/>';uk='<Створений за документом: %1/>'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СокрЛП(ДокументОснование));
		ДокументОбъект.Комментарий = ТекстКомментария;
	КонецЕсли;
	
	ЗаполнитьТоварнуюЧасть(ДокументОбъект, МобильныеДанные.Товары, 1);
	
	ВыполнитьЗаписьПроведениеДокумента(ДокументОбъект, Сообщение, МобильныеДанные.Posted, 1);
КонецПроцедуры

// Записывает элемент справочника "Партнеры".
//
// Параметры:
//  МобильныйКлиент - ОбъектXDTO - полученные данные обмена;
//  УзелОбмена - Узел плана обмена с мобильным приложением;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьКлиента(МобильныйКлиент, УзелОбмена, Сообщение) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ref", МобильныйКлиент.ref);
	СтруктураОтвета.Вставить("ERPКодДоговора", Символы.НПП);
	СтруктураОтвета.Вставить("ERPКодСоглашения", Символы.НПП);
	СтруктураОтвета.Вставить("ТипОбъекта", "Клиенты");
	СтруктураОтвета.Вставить("Успешно", Ложь);
	
	ЭтоНовыйПартнер = НЕ ЗначениеЗаполнено(МобильныйКлиент.ERPКод);
	
	ПартнерСсылка = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйКлиент.ref));
	
	Партнер = ПартнерСсылка.ПолучитьОбъект();
		
	Если Партнер = Неопределено Тогда
		Партнер = Справочники.Партнеры.СоздатьЭлемент();
		Партнер.УстановитьСсылкуНового(ПартнерСсылка);
		Партнер.Код = МобильныйКлиент.Code;
		Партнер.Клиент = Истина;
		Партнер.ОсновнойМенеджер = ПараметрыСеанса.ТекущийПользователь;
		Партнер.ДатаРегистрации = ТекущаяДатаСеанса();
		Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияДляУправленияТорговымиПредставителями")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияТорговымПредставителямДляПланирования") Тогда
			Партнер.ОбслуживаетсяТорговымиПредставителями = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИспользуютсяГруппыДоступаПартнеров = Справочники.ГруппыДоступаПартнеров.ИспользуютсяГруппыДоступа();
	Если ИспользуютсяГруппыДоступаПартнеров
		И НЕ ЗначениеЗаполнено(Партнер.ГруппаДоступа) Тогда
		Партнер.ГруппаДоступа = ГруппаДоступаПартнера();
	КонецЕсли;
	
	ПометкаУдаления = МобильныйКлиент.DeletionMark;
	Партнер.ПометкаУдаления = ПометкаУдаления;
	Партнер.Наименование = МобильныйКлиент.Description;
	Партнер.НаименованиеПолное = МобильныйКлиент.Description;
	Партнер.Родитель = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйКлиент.Parent));
	
	КонтактнаяИнформацияПартнера = Партнер.КонтактнаяИнформация;
	КонтактнаяИнформацияПартнера.Очистить();
	
	Если НЕ МобильныйКлиент.Свойства().Получить("КонтактнаяИнформация") = Неопределено Тогда
		Для Каждого СтрокаКИ Из МобильныйКлиент.КонтактнаяИнформация Цикл
			НоваяСтрока = КонтактнаяИнформацияПартнера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ, , "Тип, Вид");
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаКИ.Вид));
			НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации[СтрокаКИ.Тип];
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МобильныйКлиент.ДополнительнаяИнформацияПоДоставке) 
		И НЕ Партнер.Комментарий = МобильныйКлиент.ДополнительнаяИнформацияПоДоставке Тогда
		Партнер.Комментарий = МобильныйКлиент.ДополнительнаяИнформацияПоДоставке;
	КонецЕсли;
	
	Если Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		Партнер.Пол = Перечисления.ПолФизическогоЛица.ПустаяСсылка();
		Партнер.ДатаРождения = Дата(1,1,1);
	КонецЕсли;
	
	Партнер.ОбменДанными.Загрузка = Истина;
	
	Попытка
		
		Партнер.Записать();
		
		Если Не ЭтоНовыйПартнер И Не Партнер.ЭтоГруппа Тогда
			
			Если ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПартнерСсылка, "ПометкаУдаления") Тогда
				Справочники.КлючиАналитикиУчетаПоПартнерам.УстановитьПометкуУдаления(Новый Структура("Партнер",
					ПартнерСсылка), ПометкаУдаления);
				Справочники.ВидыЗапасов.УстановитьПометкуУдаления(Новый Структура("Партнер", ПартнерСсылка), ПометкаУдаления);
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
					КонтрагентПартнера = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ПартнерСсылка);
					Если НЕ КонтрагентПартнера.Пустая() Тогда
						КонтрагентПартнера.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(ПартнерСсылка);
		
		СтруктураОтвета.Вставить("Успешно", Истина);
	Исключение
		СтруктураОтвета.Вставить("Успешно", Ложь);
	КонецПопытки;
	
	Если ЭтоНовыйПартнер И СтруктураОтвета.Успешно Тогда
		ЗаписатьСегментыПартнера(ПартнерСсылка, УзелОбмена);
	КонецЕсли;
	
	Сообщение.Добавить(СтруктураОтвета);
КонецПроцедуры

// Записывает элемент справочника "Контактные лица партнеров".
//
// Параметры:
//  МобильноеКонтактноеЛицо - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьКонтактноеЛицоКлиента(МобильныеДанные, Сообщение) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ref", МобильныеДанные.ref);
	СтруктураОтвета.Вставить("ERPКодДоговора", Символы.НПП);
	СтруктураОтвета.Вставить("ERPКодСоглашения", Символы.НПП);
	СтруктураОтвета.Вставить("ТипОбъекта", "КонтактныеЛицаКлиентов");
	СтруктураОтвета.Вставить("Успешно", Ложь);
	
	ЭтоНовоеКЛ = НЕ ЗначениеЗаполнено(МобильныеДанные.ERPКод);
	
	КонтактноеЛицоСсылка =
		Справочники.КонтактныеЛицаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныеДанные.ref));
	
	КонтактноеЛицо = КонтактноеЛицоСсылка.ПолучитьОбъект();
		
	Если КонтактноеЛицо = Неопределено Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		КонтактноеЛицо.УстановитьСсылкуНового(КонтактноеЛицоСсылка);
		КонтактноеЛицо.Владелец = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныеДанные.Owner));
		КонтактноеЛицо.Автор = ПараметрыСеанса.ТекущийПользователь;
		КонтактноеЛицо.ДатаРегистрацииСвязи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПометкаУдаления = МобильныеДанные.DeletionMark;
	КонтактноеЛицо.ПометкаУдаления = ПометкаУдаления;
	КонтактноеЛицо.Наименование = МобильныеДанные.Description;
	КонтактноеЛицо.ДатаРождения = МобильныеДанные.ДатаРождения;
	КонтактноеЛицо.ДолжностьПоВизитке = МобильныеДанные.ДолжностьПоВизитке;
	КонтактноеЛицо.Комментарий = МобильныеДанные.Комментарий;
	
	КонтактнаяИнформацияКЛ = КонтактноеЛицо.КонтактнаяИнформация;
	КонтактнаяИнформацияКЛ.Очистить();
	
	Если НЕ МобильныеДанные.Свойства().Получить("КонтактнаяИнформация") = Неопределено Тогда
		Для Каждого СтрокаКИ Из МобильныеДанные.КонтактнаяИнформация Цикл
			НоваяСтрока = КонтактнаяИнформацияКЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ, , "Тип, Вид");
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаКИ.Вид));
			НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации[СтрокаКИ.Тип];
		КонецЦикла;
	КонецЕсли;
	
	КонтактноеЛицо.ОбменДанными.Загрузка = Истина;
	
	Попытка
		КонтактноеЛицо.Записать();
		СтруктураОтвета.Вставить("Успешно", Истина);
	Исключение
		СтруктураОтвета.Вставить("Успешно", Ложь);
	КонецПопытки;
	
	Сообщение.Добавить(СтруктураОтвета);
КонецПроцедуры

// Записывает элемент справочника "Контрагенты".
//
// Параметры:
//  МобильныйКонтрагент - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьКонтрагента(МобильныйКонтрагент, Сообщение) Экспорт
	
	ПустойИдентификатор = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ref", МобильныйКонтрагент.ref);
	СтруктураОтвета.Вставить("ERPКодДоговора", Символы.НПП);
	СтруктураОтвета.Вставить("ERPКодСоглашения", Символы.НПП);
	СтруктураОтвета.Вставить("ТипОбъекта", "Контрагенты");
	СтруктураОтвета.Вставить("Успешно", Ложь);
	
	ЭтоНовыйКонтрагент = НЕ ЗначениеЗаполнено(МобильныйКонтрагент.ERPКод);
	
	КонтрагентСсылка = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйКонтрагент.ref));
	
	Контрагент = КонтрагентСсылка.ПолучитьОбъект();
	
	ЭтоНовыйКонтрагент = Ложь;
	Если Контрагент = Неопределено Тогда
		ЭтоНовыйКонтрагент = Истина;
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.УстановитьСсылкуНового(КонтрагентСсылка);
	КонецЕсли;
	
	ПометкаУдаления = МобильныйКонтрагент.DeletionMark;
	Контрагент.ПометкаУдаления = ПометкаУдаления;
	
	Если Не Контрагент.Наименование = МобильныйКонтрагент.Description Тогда
		Контрагент.Наименование = МобильныйКонтрагент.Description;
	КонецЕсли;
	
	Если Не Контрагент.КодПоЕДРПОУ = МобильныйКонтрагент.КодПоЕДРПОУ Тогда
		Контрагент.КодПоЕДРПОУ = МобильныйКонтрагент.КодПоЕДРПОУ;
	КонецЕсли;
	
	Если Не Контрагент.НаименованиеПолное = МобильныйКонтрагент.НаименованиеПолное Тогда
		Контрагент.НаименованиеПолное = МобильныйКонтрагент.НаименованиеПолное;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МобильныйКонтрагент.ЮрФизЛицо) Тогда
		ЮрФизЛицо = Перечисления.ЮрФизЛицо[МобильныйКонтрагент.ЮрФизЛицо];
		
		Если Не Контрагент.ЮрФизЛицо = ЮрФизЛицо Тогда
			Контрагент.ЮрФизЛицо = ЮрФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент.ЮрФизЛицо) Тогда
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	Если ЭтоНовыйКонтрагент Тогда
		ПартнерСсылка = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныйКонтрагент.Клиент));
		Контрагент.Партнер = ПартнерСсылка;
	КонецЕсли;
	
	Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		ИЛИ Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	ИначеЕсли Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
	КонецЕсли;
	
	Контрагент.ОбменДанными.Загрузка = Истина;
	
	Попытка
		Контрагент.Записать();
		
		// Обработка смены пометки удаления.
		Если Не ЭтоНовыйКонтрагент Тогда
			
			Если ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "ПометкаУдаления") Тогда
				Справочники.КлючиАналитикиУчетаПоПартнерам.УстановитьПометкуУдаления(
					Новый Структура("Контрагент", КонтрагентСсылка), ПометкаУдаления);
			КонецЕсли;
			
		КонецЕсли;
		СтруктураОтвета.Вставить("Успешно", Истина);
	Исключение
		СтруктураОтвета.Вставить("Успешно", Ложь);
	КонецПопытки;
	
	Сообщение.Добавить(СтруктураОтвета);
КонецПроцедуры

// Записывает документ "Оплата клиента" из мобильного приложения.
//
// Параметры:
//  МобильнаяОплата - ОбъектXDTO - полученные данные обмена;
//  Сообщение - массив - массив содержащий данные для ответного сообщения.
//
Процедура СоздатьОбновитьОплатуКлиента(МобильнаяОплата, УзелОбмена, Сообщение) Экспорт
	
	РеквизитыУзла = МобильноеПриложениеЗаказыКлиентов.РеквизитыУзла(УзелОбмена);
	
	ЕстьЭквайринговыеОперации = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") И 
		ЗначениеЗаполнено(РеквизитыУзла.ЭквайринговыйТерминал);
	ЕстьПриемНаличныхПоКассе = РеквизитыУзла.ИспользоватьПКОДляРегистрацииОплаты;
	ЕстьПриемНаличныхПоДоверенности = ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ")
		И РеквизитыУзла.ИспользоватьДоверенностиДляРегистрацииОплаты;
		
	ФормаОплаты = Перечисления.ФормыОплаты[СокрЛП(МобильнаяОплата.ФормаОплаты)];
	СтруктураОплаты = Новый Структура;
	СтруктураОплаты.Вставить("МобильнаяОплата", МобильнаяОплата);
	Если ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
		Если ЕстьЭквайринговыеОперации Тогда
			СтруктураОплаты.Вставить("СтатьяДДСЭквайринг", РеквизитыУзла.СтатьяДДСЭквайринг);
			СтруктураОплаты.Вставить("ЭквайринговыйТерминал", РеквизитыУзла.ЭквайринговыйТерминал);
			СоздатьОбновитьЭквайринговуюОперацию(СтруктураОплаты, Сообщение);
		КонецЕсли;
	Иначе
		Если ЕстьПриемНаличныхПоКассе Тогда
			СтруктураОплаты.Вставить("СтатьяДДСНаличные", РеквизитыУзла.СтатьяДДСНаличные);
			СтруктураОплаты.Вставить("Касса", РеквизитыУзла.Касса);
			СоздатьОбновитьПриходныйКассовыйОрдер(СтруктураОплаты, Сообщение);
		ИначеЕсли ЕстьПриемНаличныхПоДоверенности Тогда
			СоздатьОбновитьДоверенность(СтруктураОплаты, Сообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РегистрацияДанныхДляОбмена

// Регистрирует объекты в узлах обмена мобильного приложения.
//
// Параметры:
//  МассивУзлов - Массив - содержит узлы для регистрации изменений объекта
//  Объект - объект для которого регистрируются изменения
//
Процедура ЗарегистрироватьИзмененияДляУзловОбмена(МассивУзлов, Объект) Экспорт
	
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		
		СтруктураРегистрации = ВидыПрайсовДляРегистрации(Объект);
		Если СтруктураРегистрации.ОбщийПрайсЛист Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект);
		КонецЕсли;
		Если СтруктураРегистрации.ПартнерыДляРегистрации.Количество()>0 Тогда
			Для Каждого Партнер Из СтруктураРегистрации.ПартнерыДляРегистрации Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Партнер);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		Если ЗначениеЗаполнено(Объект.ВладелецФайла) Тогда
			Для Каждого УзелОбмена Из МассивУзлов Цикл
				РеквизитыУзла = МобильноеПриложениеЗаказыКлиентов.РеквизитыУзла(УзелОбмена);
				Если РеквизитыУзла.ПередаватьИзображенияТоваров Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
		ОбъектВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВладелецФайла");
		Если ЗначениеЗаполнено(ОбъектВладелецФайла) Тогда
			Для Каждого УзелОбмена Из МассивУзлов Цикл
				РеквизитыУзла = МобильноеПриложениеЗаказыКлиентов.РеквизитыУзла(УзелОбмена);
				Если РеквизитыУзла.ПередаватьИзображенияТоваров Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Номенклатура") Тогда
		Если Объект.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
	Иначе
		ЗарегистрироватьВсехПартнеров = Ложь;
		
		ПартнерыДляРегистрации = ПартнерыДляРегистрации(Объект.Ссылка, ЗарегистрироватьВсехПартнеров);
		
		Если ЗарегистрироватьВсехПартнеров Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Метаданные.Справочники.Партнеры);
		Иначе
			Для Каждого Партнер Из ПартнерыДляРегистрации Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Партнер);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Регистрирует изменения с типом "Справочник.Партнеры" на узле плана обмена по переданным параметрам.
// Если переданный параметр "ВсеКлиенты" = Истина, регистрируются все элементы справочника "Партнеры",
// если переданный параметр "УникальныйИдентификатор" не пустой,
// зарегистрируется только один объект по переданной ссылке.
//
// Параметры:
//  УзелОбмена - узел обмена с мобильным приложением;
//  ВсеКлиенты - Булево - флаг регистрации всех элементов справочника "Партнеры";
//  УникальныйИдентификатор - Строка -
//    строковое представление уникального идентификатора элементов справочника "Партнеры";
//  Отказ - Булево - признак выполнения регистрации объектов;
//  СообщениеОбмена - Строка - строка, в которую запишется информация об ошибке выполнения.
//
Процедура ЗарегистрироватьИзмененияКлиентовДляПланаОбмена(УзелОбмена, ВсеКлиенты, УникальныйИдентификатор, Отказ,
			СообщениеОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
			Клиент = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификатор));
			КлиентОбъект = Клиент.ПолучитьОбъект();
			Если КлиентОбъект = Неопределено Тогда
				КлиентОбъект = Новый УдалениеОбъекта(Клиент);
			КонецЕсли;
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, КлиентОбъект);
		Иначе
			Если ВсеКлиенты Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Партнеры);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Инфо = ИнформацияОбОшибке();
		СообщениеОбмена = Инфо.Описание;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает узел обмена по идентификатору мобильного приложения и текущему пользователю.
//
// Параметры:
//  СтруктураОтвета - Стурктура – ответное сообщение;
//  ИдентификаторМобильногоУстройства – Строка - не изменяемый код мобильного приложения, используется как код узла плана обмена;
//  ТекущийПользователь - Справочник.Пользователи, Неопределено - текущий пользователь сеанса.
//
// Возвращаемое значение:
//  НайденныйУзел - Узел обмена "Мобильное приложение "Заказы клиентов"".
//
Функция НайтиУзелОбмена(СтруктураОтвета, ИдентификаторМобильногоУстройства, ТекущийПользователь = Неопределено) Экспорт
	
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	НайденныйУзел = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛОЖЬ КАК НовыйУзел,
	|	МобильноеПриложениеЗаказыКлиентов.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеЗаказыКлиентов КАК МобильноеПриложениеЗаказыКлиентов
	|ГДЕ
	|	МобильноеПриложениеЗаказыКлиентов.Код = &Код
	|	И МобильноеПриложениеЗаказыКлиентов.Пользователь = &ТекущийПользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	МобильноеПриложениеЗаказыКлиентов.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеЗаказыКлиентов КАК МобильноеПриложениеЗаказыКлиентов
	|ГДЕ
	|	МобильноеПриложениеЗаказыКлиентов.Код = &КодНовогоУзла
	|	И МобильноеПриложениеЗаказыКлиентов.Пользователь = &ТекущийПользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	НовыйУзел");
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Код", ИдентификаторМобильногоУстройства);
	Запрос.УстановитьПараметр("КодНовогоУзла", СокрЛП(ТекущийПользователь.УникальныйИдентификатор()));
	
	Результат = Запрос.Выполнить();
	
	ТекстОтвета = "";
	Если Результат.Пустой() Тогда
		ТекстОтвета = СтрШаблон(НСтр("ru='Синхронизация с устройством не настроена.
            |Не найден узел обмена для пользователя : %1'
            |;uk='Синхронізація з пристроєм не настроєна.
            |Не знайдений вузол обміну для користувача : %1'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			СокрЛП(ТекущийПользователь));
		СтруктураОтвета.ResultMessage = ТекстОтвета;
		СтруктураОтвета.Success = Ложь;
		Возврат НайденныйУзел;
	КонецЕсли;
	
	ВыбранныеУзлы = Результат.Выбрать();
	ВыбранныеУзлы.Следующий();
	
	НайденныйУзел = ВыбранныеУзлы.Ссылка;
	
	Если ВыбранныеУзлы.НовыйУзел Тогда
		УзелОбъект = НайденныйУзел.ПолучитьОбъект();
		УзелОбъект.Код = ИдентификаторМобильногоУстройства;
		Попытка
			УзелОбъект.Записать();
			ТекстОтвета = СокрЛП(НайденныйУзел.Наименование);
		Исключение
			ТекстОтвета = НСтр("ru='Для устройства уже определен другой пользователь приложения.
            |Сценарий использования одного устройства разными пользователями одновременно не поддерживается
            |текущей версией конфигурации. Если другой пользователь больше не использует это устройство,
            |обратитесь к администратору вашей ИБ для открепления настройки другого пользователя от этого устройства.'
            |;uk='Для пристрою вже визначений інший користувач програми.
            |Сценарій використання одного пристрою різними користувачами одночасно не підтримується
            |поточною версією конфігурації. Якщо інший користувач більше не використовує це пристрій,
            |зверніться до адміністратора вашої ІБ для відкріплення настройки  іншого користувача від цього пристрою.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СтруктураОтвета.ResultMessage = ТекстОтвета;
			СтруктураОтвета.Success = Ложь;
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	СтруктураОтвета.ResultMessage = ТекстОтвета;
	СтруктураОтвета.Success = Истина;
	
	Возврат НайденныйУзел;
КонецФункции

// Возвращает новый префикс для данных мобильного устройства.
//
// Возвращаемое значение:
//  НовыйПрефиксДляДанныхМобильногоУстройства - Строка.
//
Функция НовыйПрефиксДляДанныхМобильногоУстройства() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйПрефиксДляДанныхМобильногоУстройства = "АА";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(МобильноеПриложениеЗаказыКлиентов.ПрефиксДляДанныхМобильногоУстройства КАК СТРОКА(2)) КАК ПрефиксДляДанныхМобильногоУстройства
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеЗаказыКлиентов КАК МобильноеПриложениеЗаказыКлиентов
	|ГДЕ
	|	НЕ МобильноеПриложениеЗаказыКлиентов.ПрефиксДляДанныхМобильногоУстройства = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрефиксДляДанныхМобильногоУстройства Убыв");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат НовыйПрефиксДляДанныхМобильногоУстройства;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	ТекущийПрефикс = Выборка.ПрефиксДляДанныхМобильногоУстройства;
	
	ПервыйСимвол = Макс(1040, КодСимвола(ТекущийПрефикс, 1));
	ВторойСимвол = Макс(1040, КодСимвола(ТекущийПрефикс, 2));
	
	Если ВторойСимвол < 1071 Тогда
		ВторойСимвол = ВторойСимвол + 1;
	Иначе
		ВторойСимвол = 1040;
		ПервыйСимвол = ПервыйСимвол + 1;
		Если ПервыйСимвол > 1071 Тогда
			// Нумерация закончилась.
			ПервыйСимвол = 1071;
			ВторойСимвол = 1071;
		КонецЕсли;
	КонецЕсли;
	
	НовыйПрефиксДляДанныхМобильногоУстройства = Символ(ПервыйСимвол)+Символ(ВторойСимвол);
	
	Возврат НовыйПрефиксДляДанныхМобильногоУстройства;
КонецФункции

// Возвращает результат проверки префикса для данных мобильного устройства.
//
// Параметры:
//  Ссылка - Узел обмена "Мобильное приложение "Заказы клиентов"";
//  Префикс – Строка - проверяемый префикс для данных мобильного устройства.
//
// Возвращаемое значение:
//  Булево - истина, когда префикс уже исползуется на другом узле.
//
Функция ПроверитьПрефиксДляДанныхМобильногоУстройства(Ссылка, Префикс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(МобильноеПриложениеЗаказыКлиентов.ПрефиксДляДанныхМобильногоУстройства КАК СТРОКА(2)) КАК ПрефиксДляДанныхМобильногоУстройства
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеЗаказыКлиентов КАК МобильноеПриложениеЗаказыКлиентов
	|ГДЕ
	|	НЕ МобильноеПриложениеЗаказыКлиентов.Ссылка = &Ссылка
	|	И (ВЫРАЗИТЬ(МобильноеПриложениеЗаказыКлиентов.ПрефиксДляДанныхМобильногоУстройства КАК СТРОКА(2))) = &Префикс");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Префикс", Префикс);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

// Возвращает структуру, содержащую значения доступных пользователю функций мобильного приложения.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи – пользователь мобильного приложения.
//
// Возвращаемое значение:
//  Структура - структура, содержащая значения доступных пользователю функций.
//
Функция ПроверкаПользователяМобильногоПриложения(Пользователь = Неопределено) Экспорт 
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ДоступныеФункции = Новый Структура;
	ДоступныеФункции.Вставить("Касса",
		Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеДокументовПоКассе", Пользователь));
	ДоступныеФункции.Вставить("Доверенности",
		Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеВыданныхДоверенностей", Пользователь));
	ДоступныеФункции.Вставить("ПлатежнаяКарта",
		Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеОперацийПоПлатежнымКартам", Пользователь));
	ДоступныеФункции.Вставить("ПользовательМобильногоПриложения",
		Пользователи.РолиДоступны("ПолныеПрава, ИспользованиеМобильногоПриложения1СЗаказы", Пользователь));
	ДоступныеФункции.Вставить("ЗаказыКлиентов",
		Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеЗаказовКлиентов", Пользователь));
	ДоступныеФункции.Вставить("ИзменениеЦен",
		Пользователи.РолиДоступны("ПолныеПрава, ОтклонениеОтУсловийПродаж", Пользователь));
	ДоступныеФункции.Вставить("ИзменениеКлиентов", ВозможностьДобавленияИзмененияПартнеров());
	ДоступныеФункции.Вставить("Задания",
		Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеЗаданийТорговымПредставителям", Пользователь));
	ДоступныеФункции.Вставить("ЗаявкиНаВозврат",
		Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеЗаявокНаВозвратТоваровОтКлиента", Пользователь));
	
	Возврат ДоступныеФункции;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаписьОбъектовСправочниковВОбмен

Процедура ЗаписатьКонтактнуюИнформацию(ИнформацияПоОбъекту, Знач СсылкаНаОбъект, Знач ИмяСправочника)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СправочникКонтактнаяИнформация.Тип КАК Тип,
	|	СправочникКонтактнаяИнформация.Вид КАК Вид,
	|	СправочникКонтактнаяИнформация.Представление КАК Представление,
	|	СправочникКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	СправочникКонтактнаяИнформация.Страна КАК Страна,
	|	СправочникКонтактнаяИнформация.Регион КАК Регион,
	|	СправочникКонтактнаяИнформация.Город КАК Город,
	|	СправочникКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	СправочникКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	СправочникКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	СправочникКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
	|ИЗ
	|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК СправочникКонтактнаяИнформация
	|ГДЕ
	|	НЕ СправочникКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации)
	|	И НЕ СправочникКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Skype)
	|	И СправочникКонтактнаяИнформация.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	ЗаписатьКонтактнуюИнформациюСправочника(ИнформацияПоОбъекту, ТабРезультат, ИмяСправочника);
КонецПроцедуры

Процедура ЗаписатьКонтактнуюИнформациюСправочника(ИнформацияПоОбъекту, Знач ТаблицаКИ,  Знач ИмяСправочника)
	
	ИмяСправочника = СтрЗаменить(ИмяСправочника, НСтр("ru='Партнер';uk='Партнер'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		НСтр("ru='Клиент';uk='Клієнт'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	URIИмен = МобильноеПриложениеЗаказыКлиентовПовтИсп.URIПространстваИмен();
	ЛокальноеИмяОбъекта = "CatalogTabularSectionRow." + ИмяСправочника + ".КонтактнаяИнформация";
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, ЛокальноеИмяОбъекта);
	МассивСтрокКонтактнойИнформации = Новый Массив;
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
		ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтрокаКИ,, "Тип, Вид, ЗначенияПолей");
		Если ЗначениеЗаполнено(СтрокаКИ.Тип) Тогда
			ТипКИ = 
				Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ТипКИСТрокой = 
				Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.Получить(ТипКИ).Имя;
		Иначе
			ТипКИСТрокой = "";
		КонецЕсли;
		ОбъектОбмена.Тип = ТипКИСТрокой;
		Если ЗначениеЗаполнено(СтрокаКИ.Вид) Тогда
			ИдентификаторВидаКИ = СокрЛП(СтрокаКИ.Вид.УникальныйИдентификатор());
		Иначе
			ИдентификаторВидаКИ = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
		КонецЕсли;
		ОбъектОбмена.Вид = ИдентификаторВидаКИ;
		Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
			ОбъектОбмена.Представление = СтрокаКИ.Представление;
		Иначе
			ОбъектОбмена.Представление = Символы.НПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) Тогда
			ОбъектОбмена.ЗначенияПолей = СтрокаКИ.ЗначенияПолей;
		Иначе
			ОбъектОбмена.ЗначенияПолей = Символы.НПП;
		КонецЕсли;
		МассивСтрокКонтактнойИнформации.Добавить(ОбъектОбмена);
	КонецЦикла;
	
	ИнформацияПоОбъекту.КонтактнаяИнформация = МассивСтрокКонтактнойИнформации;
КонецПроцедуры

Процедура ЗаписатьСправочник(ЗаписьXML, Знач СтруктураСправочника, Знач ИмяСправочника)
	
	URIИмен = МобильноеПриложениеЗаказыКлиентовПовтИсп.URIПространстваИмен();
	ЛокальноеИмяОбъекта = "CatalogObject." + ИмяСправочника;
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, ЛокальноеИмяОбъекта);
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗагрузитьКИ = Ложь;
	ИсключаемоеСвойство = "";
	Если СтруктураСправочника.Свойство("КонтактнаяИнформация") Тогда
		ЗагрузитьКИ = Истина;
		ИсключаемоеСвойство = "КонтактнаяИнформация";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтруктураСправочника,, ИсключаемоеСвойство);
	Если ЗагрузитьКИ Тогда
		Для Каждого СтрокаКИ Из СтруктураСправочника.КонтактнаяИнформация Цикл
			ОбъектОбмена.КонтактнаяИнформация.Добавить(СтрокаКИ);
		КонецЦикла;
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
КонецПроцедуры

#КонецОбласти

#Область ЗаписьОсновныхСправочниковВОбмен

Процедура ЗаписатьВалютуСтроки(ЗаписьXML, Знач СтрокаДанных)
	
	СтруктураВалюты = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураВалюты();
	
	СтруктураВалюты.ref				= СокрЛП(СтрокаДанных.ВалютаСсылка.УникальныйИдентификатор());
	СтруктураВалюты.DeletionMark	= СтрокаДанных.ВалютаПометкаУдаления;
	СтруктураВалюты.Description		= СтрокаДанных.ВалютаНаименование;
	СтруктураВалюты.Code			= СтрокаДанных.ВалютаКод;
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураВалюты, "Валюты");
КонецПроцедуры

Процедура ЗаписатьВидКИСтроки(ЗаписьXML, Знач СтрокаДанных, ВыгруженныеОбъекты)
		
	Если СтрокаДанных.ВидКИТип = 
			Перечисления.ТипыКонтактнойИнформации.Skype Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВидаКИ = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураВидаКИ(Ложь);
	
	СтруктураВидаКИ.ref = СокрЛП(СтрокаДанных.ВидКИСсылка.УникальныйИдентификатор());
	СтруктураВидаКИ.DeletionMark = СтрокаДанных.ВидКИПометкаУдаления;
	СтруктураВидаКИ.IsFolder = СтрокаДанных.ВидКИЭтоГруппа;
	СтруктураВидаКИ.Description = ЗаменитьПартнераНаКлиента(СтрокаДанных.ВидКИНаименование);
	СтруктураВидаКИ.PredefinedDataName = ЗаменитьПартнераНаКлиента(СтрокаДанных.ВидКИИмяПредопределенныхДанных);
	СтруктураВидаКИ.РеквизитДопУпорядочивания = СтрокаДанных.ВидКИРеквизитДопУпорядочивания;
	СтруктураВидаКИ.РедактированиеТолькоВДиалоге = СтрокаДанных.ВидКИРедактированиеТолькоВДиалоге;
	СтруктураВидаКИ.МожноИзменятьСпособРедактирования = СтрокаДанных.ВидКИМожноИзменятьСпособРедактирования;
	СтруктураВидаКИ.АдресТолькоРоссийский = СтрокаДанных.ВидКИАдресТолькоРоссийский;
	СтруктураВидаКИ.ВключатьСтрануВПредставление = СтрокаДанных.ВидКИВключатьСтрануВПредставление;
	СтруктураВидаКИ.ОбязательноеЗаполнение = СтрокаДанных.ВидКИОбязательноеЗаполнение;
	СтруктураВидаКИ.ПроверятьКорректность = СтрокаДанных.ВидКИПроверятьКорректность;
	СтруктураВидаКИ.СкрыватьНеактуальныеАдреса = СтрокаДанных.ВидКИСкрыватьНеактуальныеАдреса;
	СтруктураВидаКИ.Подсказка = СтрокаДанных.ВидКИПодсказка;
	СтруктураВидаКИ.РазрешитьВводНесколькихЗначений = СтрокаДанных.ВидКИРазрешитьВводНесколькихЗначений;
	СтруктураВидаКИ.ERPКод = СтруктураВидаКИ.ref;
	// Поддержка мобильного приложения до версии 3.0.2.
	СтруктураВидаКИ.ЗапрещатьВводНекорректного = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ВидКИТип) Тогда
		ТипКИ = 
			Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаДанных.ВидКИТип);
		ТипКИСТрокой = 
			Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления.Получить(ТипКИ).Имя;
	Иначе
		ТипКИСТрокой = "";
	КонецЕсли;
	СтруктураВидаКИ.Тип = ТипКИСТрокой;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ВидКИРодитель) Тогда
		ИдентификаторРодителя = СокрЛП(СтрокаДанных.ВидКИРодитель.УникальныйИдентификатор());
		Если ВыгруженныеОбъекты.Найти(СтрокаДанных.ВидКИРодитель) = Неопределено Тогда
			ЗаписатьГруппуВидаКИ(ЗаписьXML, СтрокаДанных.ВидКИРодитель, ВыгруженныеОбъекты);
		КонецЕсли;
		СтруктураВидаКИ.Parent = ИдентификаторРодителя;
	Иначе
		СтруктураВидаКИ.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	КонецЕсли;
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураВидаКИ, "ВидыКонтактнойИнформации");
КонецПроцедуры

Процедура ЗаписатьВидЦеныСтроки(ЗаписьXML, Знач СтрокаДанных)
	
	СтруктураВидаЦены = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураВидаЦены();
	
	СтруктураВидаЦены.ref				= СокрЛП(СтрокаДанных.ВидЦеныСсылка.УникальныйИдентификатор());
	СтруктураВидаЦены.DeletionMark		= СтрокаДанных.ВидЦеныПометкаУдаления;
	СтруктураВидаЦены.ERPКод			= СтруктураВидаЦены.ref;
	СтруктураВидаЦены.ЦенаВключаетНДС	= СтрокаДанных.ВидЦеныЦенаВключаетНДС;
	
	ВалютаЦены = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
	СтруктураВидаЦены.ВалютаЦены = МобильноеПриложениеЗаказыКлиентовПовтИсп.ИдентификаторВалютыЗаказов();
	
	ИнформацияНДС = СтрНайти(СтрокаДанных.ВидЦеныНаименование, НСтр("ru='НДС';uk='ПДВ'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Наименование = СтрокаДанных.ВидЦеныНаименование;
	
	Если ИнформацияНДС = 0 Тогда
		Если СтруктураВидаЦены.ЦенаВключаетНДС Тогда
			ТекстПроНДС = НСтр("ru='(с НДС)';uk='(з ПДВ)'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Иначе
			ТекстПроНДС = НСтр("ru='(без НДС)';uk='(без ПДВ)'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
		Наименование = Наименование + " "+ ТекстПроНДС;
	КонецЕсли;
	СтруктураВидаЦены.Description = Наименование;
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураВидаЦены, "ВидыЦен");
КонецПроцедуры

Процедура ЗаписатьГруппуВидаКИ(ЗаписьXML, Знач СсылкаНаОбъект, ВыгруженныеОбъекты)
	
	ВыгруженныеОбъекты.Добавить(СсылкаНаОбъект);
	
	СтруктураВидаКИ = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураВидаКИ(Истина);
	
	СтрокаЗапросаРеквизитов = "ЭтоГруппа, ПометкаУдаления, Наименование, Родитель, ИмяПредопределенныхДанных";
	СтрокаДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, СтрокаЗапросаРеквизитов);
	
	СтруктураВидаКИ.ref = СокрЛП(СсылкаНаОбъект.УникальныйИдентификатор());
	СтруктураВидаКИ.DeletionMark = СтрокаДанных.ПометкаУдаления;
	СтруктураВидаКИ.IsFolder = СтрокаДанных.ЭтоГруппа;
	СтруктураВидаКИ.Description = ЗаменитьПартнераНаКлиента(СтрокаДанных.Наименование);
	СтруктураВидаКИ.PredefinedDataName = ЗаменитьПартнераНаКлиента(СтрокаДанных.ИмяПредопределенныхДанных);
	СтруктураВидаКИ.ERPКод = СтруктураВидаКИ.ref;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Родитель) Тогда
		ИдентификаторРодителя = СокрЛП(СсылкаНаОбъект.Родитель.УникальныйИдентификатор());
		Если ВыгруженныеОбъекты.Найти(СсылкаНаОбъект.Родитель) = Неопределено Тогда
			ЗаписатьГруппуВидаКИ(ЗаписьXML, СсылкаНаОбъект.Родитель, ВыгруженныеОбъекты);
		КонецЕсли;
		СтруктураВидаКИ.Parent = ИдентификаторРодителя;
	Иначе
		СтруктураВидаКИ.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	КонецЕсли;
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураВидаКИ, "ВидыКонтактнойИнформации");
КонецПроцедуры

Процедура ЗаписатьЕдиницуВесаСтроки(ЗаписьXML, Знач СтрокаДанных)
	
	СтруктураЕдиницыВеса = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЕдиницыИзмерения();
	
	СтруктураЕдиницыВеса.ref				= СокрЛП(СтрокаДанных.ЕдиницаВесаСсылка.УникальныйИдентификатор());
	СтруктураЕдиницыВеса.DeletionMark		= СтрокаДанных.ЕдиницаВесаПометкаУдаления;
	СтруктураЕдиницыВеса.Code				= СтрокаДанных.ЕдиницаВесаКод;
	СтруктураЕдиницыВеса.Description		= СтрокаДанных.ЕдиницаВесаНаименование;
	СтруктураЕдиницыВеса.PredefinedDataName = СтрокаДанных.ЕдиницаВесаИмяПредопределенныхДанных;
	СтруктураЕдиницыВеса.НаименованиеПолное = СтрокаДанных.ЕдиницаВесаНаименованиеПолное;
	СтруктураЕдиницыВеса.МеждународноеСокращение = СтрокаДанных.ЕдиницаВесаМеждународноеСокращение;
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураЕдиницыВеса, "ЕдиницыИзмерения");
КонецПроцедуры

Процедура ЗаписатьОрганизациюСтроки(ЗаписьXML, Знач СтрокаДанных)
	
	СтруктураОрганизации = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураОрганизации();
	
	СтруктураОрганизации.ref			= СокрЛП(СтрокаДанных.ОрганизацияСсылка.УникальныйИдентификатор());
	СтруктураОрганизации.DeletionMark	= СтрокаДанных.ОрганизацияПометкаУдаления;
	СтруктураОрганизации.Description	= СтрокаДанных.ОрганизацияНаименование;
	СтруктураОрганизации.ERPКод			= СтруктураОрганизации.ref;
	СтруктураОрганизации.Префикс		= СтрокаДанных.ОрганизацияПрефикс;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ОрганизацияСистемаНалогообложенияСсылка) Тогда
		СистемаНалогообложения = 
			Перечисления.СистемыНалогообложения.Индекс(СтрокаДанных.ОрганизацияСистемаНалогообложенияСсылка);
		СистемаНалогообложенияИМЯ = 
			Метаданные.Перечисления.СистемыНалогообложения.ЗначенияПеречисления.Получить(СистемаНалогообложения).Имя;
		Если  СтрНайти(СистемаНалогообложенияИМЯ, "НДС") > 0 Тогда
			СистемаНалогообложенияСтрокой = "Общая";
		Иначе 
			СистемаНалогообложенияСтрокой = "Упрощенная";
		КонецЕсли;
	Иначе
		СистемаНалогообложенияСтрокой = "";
	КонецЕсли;
	СтруктураОрганизации.СистемаНалогообложения = СистемаНалогообложенияСтрокой;
	
	ЗаписатьКонтактнуюИнформацию(СтруктураОрганизации, СтрокаДанных.ОрганизацияСсылка, "Организации");
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураОрганизации, "Организации");
КонецПроцедуры

Процедура ЗаписатьСкладСтроки(ЗаписьXML, Знач СтрокаДанных, ВыгруженныеОбъекты)
	
	СтруктураСклада = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураСклада(Ложь);
	
	СтруктураСклада.ref				= СокрЛП(СтрокаДанных.СкладСсылка.УникальныйИдентификатор());
	СтруктураСклада.DeletionMark	= СтрокаДанных.СкладПометкаУдаления;
	СтруктураСклада.Description		= СтрокаДанных.СкладНаименование;
	СтруктураСклада.IsFolder		= СтрокаДанных.СкладЭтоГруппа;
	СтруктураСклада.ERPКод			= СтруктураСклада.ref;
	СтруктураСклада.УдалитьАдрес			= "";
	СтруктураСклада.УдалитьТелефон			= "";
	СтруктураСклада.УдалитьЭлектроннаяПочта	= "";
	
	Если ЗначениеЗаполнено(СтрокаДанных.СкладРодительСсылка) Тогда
		ИдентификаторРодителя = СокрЛП(СтрокаДанных.СкладРодительСсылка.УникальныйИдентификатор());
		Если ВыгруженныеОбъекты.Найти(СтрокаДанных.СкладРодительСсылка) = Неопределено Тогда
			ИнформацияПоИерархии = ГруппаСкладовДляВыбораЗаказе(СтруктураСклада.ref, СтрокаДанных.СкладРодительСсылка, Истина);
			СтруктураСкладаРодитель = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураСклада(Истина);
			СтруктураСкладаРодитель.ref				= ИдентификаторРодителя;
			СтруктураСкладаРодитель.DeletionMark	= СтрокаДанных.СкладРодительПометкаУдаления;
			СтруктураСкладаРодитель.Description		= СтрокаДанных.СкладРодительНаименование;
			СтруктураСкладаРодитель.IsFolder		= СтрокаДанных.СкладРодительЭтоГруппа;
			СтруктураСкладаРодитель.ERPКод			= СтруктураСкладаРодитель.ref;
			СтруктураСкладаРодитель.Parent			= ИнформацияПоИерархии.ИдентификаторРодителя;
			ЗаписатьСправочник(ЗаписьXML, СтруктураСкладаРодитель, "Склады");
			ВыгруженныеОбъекты.Добавить(СтрокаДанных.СкладРодительСсылка);
			Для каждого ДанныеСклада Из ИнформацияПоИерархии.СкладыДанные Цикл
				ИнформацияПоСкладу = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураСклада(Истина);
				ЗаполнитьЗначенияСвойств(ИнформацияПоСкладу, ДанныеСклада);
				ЗаписатьСправочник(ЗаписьXML, ИнформацияПоСкладу, "Склады");
			КонецЦикла;
		Иначе
			ИнформацияПоИерархии = ГруппаСкладовДляВыбораЗаказе(СтруктураСклада.ref, СтрокаДанных.СкладРодительСсылка, Ложь);
		КонецЕсли;
		СтруктураСклада.Parent			= ИдентификаторРодителя;
		СтруктураСклада.ГруппаСкладов	= ИнформацияПоИерархии.ИдентификаторГруппы;
	Иначе
		СтруктураСклада.Parent			= МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
		СтруктураСклада.ГруппаСкладов	= СтруктураСклада.ref;
	КонецЕсли;
	
	ЗаписатьКонтактнуюИнформацию(СтруктураСклада, СтрокаДанных.СкладСсылка, "Склады");
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураСклада, "Склады");
КонецПроцедуры

Процедура ЗаписатьСтрануСтроки(ЗаписьXML, Знач СтрокаДанных, ВыгруженныеОбъекты)
	
	СтруктураСтраны = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураСтраны();
	
	СтруктураСтраны.ref					= СокрЛП(СтрокаДанных.СтранаСсылка.УникальныйИдентификатор());
	СтруктураСтраны.DeletionMark		= СтрокаДанных.СтранаПометкаУдаления;
	СтруктураСтраны.Code				= СтрокаДанных.СтранаКод;
	СтруктураСтраны.Description			= СтрокаДанных.СтранаНаименование;
	СтруктураСтраны.PredefinedDataName	= СтрокаДанных.СтранаИмяПредопределенныхДанных;
	СтруктураСтраны.НаименованиеПолное	= СтрокаДанных.СтранаНаименованиеПолное;
	СтруктураСтраны.КодАльфа2			= СтрокаДанных.СтранаКодАльфа2;
	СтруктураСтраны.КодАльфа3			= СтрокаДанных.СтранаКодАльфа3;
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураСтраны, "СтраныМира");
КонецПроцедуры

Процедура ЗаписатьСостоянияЗаявкиНаВозврат(ЗаписьXML, ИдентификаторМобильногоУстройства)
	
	ВыгружатьСостояниеЗаявок = Истина;
	ЗаписьВерсииПриложения = 
		РегистрыСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы.СоздатьНаборЗаписей();
	ЗаписьВерсииПриложения.Отбор["ИдНоменклатуры"].Значение = ИдентификаторМобильногоУстройства;
	ЗаписьВерсииПриложения.Отбор["ИдНоменклатуры"].Использование = Истина;
	ЗаписьВерсииПриложения.Прочитать();
	Если ЗаписьВерсииПриложения.Количество()>0 Тогда
		ВыгружатьСостояниеЗаявок = Ложь;
	КонецЕсли;
	
	Если ВыгружатьСостояниеЗаявок Тогда
		СтруктураСостояния = Новый Структура;
		Для Каждого Значение Из Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов Цикл
			
			Индекс = Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Индекс(Значение);
			СтруктураСостояния.Вставить("Description", СокрЛП(Значение));
			СтруктураСостояния.Вставить("Порядок", Индекс + 2);
			СтруктураСостояния.Вставить("ERPКод", 
				Метаданные.Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ЗначенияПеречисления.Получить(Индекс).Имя);
			ЗаписатьСправочник(ЗаписьXML, СтруктураСостояния, "СостоянияЗаявокНаВозвратТоваровОтКлиентов");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДанныеДляВыгрузки

Функция ДанныеДляВыгрузкиИндивидуальныхПрайсов(Узел, СтрокаСоглашения)
	
	КомпоновщикНастроек = КомпоновщикНастроекВыгрузкиИндивидуальныхПрайсов(Узел, СтрокаСоглашения);
	
	СхемаВыгрузкиИндивидуальныхПрайсов = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет(
		"СхемаВыгрузкиИндивидуальныхПрайсов");
	
	ТаблицаИндивидуальныхПрайсов = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузкиИндивидуальныхПрайсов,
			КомпоновщикНастроек.ПолучитьНастройки(),
			,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		Инфо = ИнформацияОбОшибке();
		Возврат ТаблицаИндивидуальныхПрайсов;
	КонецПопытки;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаИндивидуальныхПрайсов);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ПроцессорВывода.ЗакончитьВывод();
	
	Возврат ТаблицаИндивидуальныхПрайсов;
КонецФункции

Функция ДанныеДляВыгрузкиКлиентов(Узел)
	
	КомпоновщикНастроек = КомпоновщикНастроекВыгрузкиКлиентов(Узел);
	
	СхемаВыгрузкиПартнеров = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет(
		"СхемаВыгрузкиПартнеров");
		
	ТаблицаПартнеров = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузкиПартнеров, КомпоновщикНастроек.ПолучитьНастройки(),
			,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		Инфо = ИнформацияОбОшибке();
		Возврат ТаблицаПартнеров;
	КонецПопытки;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПартнеров);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ПроцессорВывода.ЗакончитьВывод();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		ТаблицаПартнеров.Колонки.Добавить("ПартнерВремяДоставкиС", Новый ОписаниеТипов("Дата"));
		ТаблицаПартнеров.Колонки.Добавить("ПартнерВремяДоставкиПо", Новый ОписаниеТипов("Дата"));
		ТаблицаПартнеров.Колонки.Добавить("Самовывоз", Новый ОписаниеТипов("Булево"));
		ТаблицаПартнеров.ЗаполнитьЗначения(Истина, "Самовывоз");
		ТаблицаПартнеров.ЗаполнитьЗначения(Дата("00010101000000"), "ПартнерВремяДоставкиС");
		ТаблицаПартнеров.ЗаполнитьЗначения(Дата("00010101000000"), "ПартнерВремяДоставкиПо");
	КонецЕсли;
	Если ТаблицаПартнеров.Колонки.Найти("ПартнерСкладСсылка") = Неопределено Тогда
		ТаблицаПартнеров.Колонки.Добавить("ПартнерСкладСсылка", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	Если ТаблицаПартнеров.Колонки.Найти("ПартнерФормаОплатыСсылка") = Неопределено Тогда
		ТаблицаПартнеров.Колонки.Добавить("ПартнерФормаОплатыСсылка", Новый ОписаниеТипов("ПеречислениеСсылка.ФормыОплаты"));
	КонецЕсли;
	
	Возврат ТаблицаПартнеров;
КонецФункции

Функция ДанныеДляВыгрузкиОстатков(Узел)
	
	КомпоновщикНастроек = КомпоновщикНастроекВыгрузкиОстатков(Узел);
	
	СхемаВыгрузкиОстатков = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет(
		"СхемаВыгрузкиОстатковНоменклатуры");
	
	Набор = СхемаВыгрузкиОстатков.НаборыДанных.Найти("ОсновнойНаборДанных");
	Поля = "СвободныеОстаткиОстатки.Номенклатура,СвободныеОстаткиОстатки.Характеристика,СвободныеОстаткиОстатки.Склад";
	Набор.Запрос = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Набор.Запрос, "ПодстановкаТоварногоОграничения", Поля);
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузкиОстатков, КомпоновщикНастроек.ПолучитьНастройки(),
			,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		Инфо = ИнформацияОбОшибке();
		Возврат ТаблицаОстатков;
	КонецПопытки;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаОстатков);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ПроцессорВывода.ЗакончитьВывод();
	
	Если ТаблицаОстатков.Колонки.Найти("Характеристика") = Неопределено Тогда
		ТаблицаОстатков.Колонки.Добавить("Характеристика",
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Возврат ТаблицаОстатков;
КонецФункции

Функция ДанныеДляВыгрузкиПрайсов(Узел, ФильтрыПрайсЛиста)
	
	КомпоновщикНастроек = КомпоновщикНастроекВыгрузкиПрайсов(Узел, ФильтрыПрайсЛиста);
	
	СхемаВыгрузкиПрайсов = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет("СхемаВыгрузкиПрайсов");
	
	ТаблицаПрайсов = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузкиПрайсов, КомпоновщикНастроек.ПолучитьНастройки(),
			,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		Инфо = ИнформацияОбОшибке();
		Возврат ТаблицаПрайсов;
	КонецПопытки;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПрайсов);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ПроцессорВывода.ЗакончитьВывод();
	
	Возврат ТаблицаПрайсов;
КонецФункции

Функция ДанныеДляВыгрузкиСправочников(Узел)
	
	КомпоновщикНастроек = КомпоновщикНастроекВыгрузкиСправочников(Узел);
	
	СхемаВыгрузкиСправочников = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет(
		"СхемаВыгрузкиОсновныхСправочников");
		
	ТаблицаСправочников = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаВыгрузкиСправочников,
			КомпоновщикНастроек.ПолучитьНастройки(),
			,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		Инфо = ИнформацияОбОшибке();
		Возврат ТаблицаСправочников;
	КонецПопытки;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаСправочников);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ПроцессорВывода.ЗакончитьВывод();
	
	Возврат ТаблицаСправочников;
КонецФункции

Функция КомпоновщикНастроекВыгрузкиИндивидуальныхПрайсов(Узел, СтрокаСоглашения)
	
	СхемаВыгрузкиСправочников = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет(
		"СхемаВыгрузкиИндивидуальныхПрайсов");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузкиСправочников));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузкиСправочников.НастройкиПоУмолчанию);
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Узел");
	ПараметрСКД.Значение = Узел;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Валюта");
	ПараметрСКД.Значение = СтрокаСоглашения.Валюта;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	ПараметрСКД.Значение = ТекущаяДатаСеанса();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьХарактеристики");
	ПараметрСКД.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СоглашениеСКлиентом");
	ПараметрСКД.Значение = СтрокаСоглашения.Соглашение;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидЦеныПоСоглашению");
	ПараметрСКД.Значение = СтрокаСоглашения.ВидЦены;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("УправленческаяОрганизацияНеИспользуется");
	ПараметрСКД.Значение = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
	ПараметрСКД.Использование = Истина;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НастройкиКомпоновщикаИзНастройкиОбмена = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПолучитьНастройкиОбмена(Узел);
	
	ИспользуетсяОтборПоСегментуНоменклатуры = Ложь;
	ИспользоватьВесовыеХарактеристики = Ложь;
	ПередаватьИзображенияТоваров = Ложь;
	
	ПолеСклад = Новый ПолеКомпоновкиДанных("Склад");
	ПолеСегментНоменклатуры = Новый ПолеКомпоновкиДанных("СегментНоменклатуры");
	ПолеСегментПартнеров = Новый ПолеКомпоновкиДанных("СегментПартнеров");
	ПолеСоглашение = Новый ПолеКомпоновкиДанных("Соглашение");
	ПолеИспользоватьВесовыеХарактеристики = Новый ПолеКомпоновкиДанных("ИспользоватьВесовыеХарактеристики");
	ПолеПередаватьИзображенияТоваров = Новый ПолеКомпоновкиДанных("ПередаватьИзображенияТоваров");
	
	Если НЕ НастройкиКомпоновщикаИзНастройкиОбмена = Неопределено Тогда
		МассивУдаляемых = Новый Массив;
		Для каждого ЭлементОтбора ИЗ НастройкиКомпоновщикаИзНастройкиОбмена.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментПартнеров
					ИЛИ ЭлементОтбора.ЛевоеЗначение = ПолеСоглашение
					ИЛИ ЭлементОтбора.ЛевоеЗначение = ПолеСклад Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора,
					"ИдентификаторПользовательскойНастройки, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Использование");
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментНоменклатуры Тогда
					ИспользуетсяОтборПоСегментуНоменклатуры = Истина;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ПолеИспользоватьВесовыеХарактеристики Тогда
					ИспользоватьВесовыеХарактеристики = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ПолеПередаватьИзображенияТоваров Тогда
					ПередаватьИзображенияТоваров = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
				Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
					МассивУдаляемых.Добавить(НовыйЭлемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого КУдалению Из МассивУдаляемых Цикл
			Отбор.Элементы.Удалить(КУдалению);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользуетсяОтборПоСегментуНоменклатуры");
	ПараметрСКД.Значение = ИспользуетсяОтборПоСегментуНоменклатуры;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьВесовыеХарактеристики");
	ПараметрСКД.Значение = ИспользоватьВесовыеХарактеристики;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПередаватьИзображенияТоваров");
	ПараметрСКД.Значение = ПередаватьИзображенияТоваров;
	ПараметрСКД.Использование = Истина;
	
	Возврат КомпоновщикНастроек;
КонецФункции

Функция КомпоновщикНастроекВыгрузкиКлиентов(Узел)
	
	СхемаВыгрузкиПартнеров = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет("СхемаВыгрузкиПартнеров");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузкиПартнеров)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузкиПартнеров.НастройкиПоУмолчанию);
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	ПараметрСКД.Значение = ТекущаяДатаСеанса();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Узел");
	ПараметрСКД.Значение = Узел;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПустаяСтрока");
	ПараметрСКД.Значение = "";
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("УправленческаяОрганизацияНеИспользуется");
	ПараметрСКД.Значение = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользованиеСоглашений");
	ПараметрСКД.Значение = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Валюта");
	ПараметрСКД.Значение = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьЗапретОтгрузки");
	ПараметрСКД.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретОтгрузки");
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекстСегментОтгрузкаЗапрещена");
	ПараметрСКД.Значение = НСтр("ru='Клиент входит в сегмент партнеров, которым отгрузка запрещена.';uk='Клієнт входить до сегменту партнерів, яким відвантаження заборонено.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекстПартнерПометкаУдаления");
	ПараметрСКД.Значение = НСтр("ru='Клиент помечен на удаление.';uk='Клієнт позначений для вилучення.'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПараметрСКД.Использование = Истина;
	
	ИспользоватьСоглашенияИлиДоговоры = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьСоглашенияИлиДоговоры");
	ПараметрСКД.Значение = ИспользоватьСоглашенияИлиДоговоры;
	ПараметрСКД.Использование = Истина;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НастройкиКомпоновщикаИзНастройкиОбмена = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПолучитьНастройкиОбмена(Узел);
	
	ПолеСклад = Новый ПолеКомпоновкиДанных("Склад");
	ПолеСегментНоменклатуры =  Новый ПолеКомпоновкиДанных("СегментНоменклатуры");
	ПолеСегментПартнеров = Новый ПолеКомпоновкиДанных("СегментПартнеров");
	ПолеОрганизация = Новый ПолеКомпоновкиДанных("Организация");
	
	ИспользуетсяОтборПоСегментуПартнеров = Ложь;
	Если НЕ НастройкиКомпоновщикаИзНастройкиОбмена = Неопределено Тогда
		Для каждого ЭлементОтбора ИЗ НастройкиКомпоновщикаИзНастройкиОбмена.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				// Не участвуют в отборе клиентов фильтры: "Склад", "СегментНоменклатуры".
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСклад
					ИЛИ ЭлементОтбора.ЛевоеЗначение = ПолеСегментНоменклатуры Тогда
					Продолжить;
				КонецЕсли;
				// Не участвует в отборе клиентов фильтр: "Организация", если не используются соглашения и договоры.
				Если ЭлементОтбора.ЛевоеЗначение = ПолеОрганизация
					И НЕ ИспользоватьСоглашенияИлиДоговоры Тогда
					Продолжить;
				КонецЕсли;
				// Не участвуют в отборе фильтры шапки узла обмена.
				Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора,
					"ИдентификаторПользовательскойНастройки, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Использование");
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментПартнеров Тогда
					ИспользуетсяОтборПоСегментуПартнеров = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользуютсяСегментыПартнеров");
	ПараметрСКД.Значение = ИспользуетсяОтборПоСегментуПартнеров;
	ПараметрСКД.Использование = Истина;
	
	Возврат КомпоновщикНастроек;
КонецФункции

Функция КомпоновщикНастроекВыгрузкиОстатков(Узел)
	
	СхемаВыгрузкиОстатков = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет(
		"СхемаВыгрузкиОстатковНоменклатуры");

	Набор = СхемаВыгрузкиОстатков.НаборыДанных.Найти("ОсновнойНаборДанных");
	Поля = "СвободныеОстаткиОстатки.Номенклатура,СвободныеОстаткиОстатки.Характеристика,СвободныеОстаткиОстатки.Склад";
	Набор.Запрос = РегистрыСведений.ТоварныеОграничения.ПодставитьСоединение(Набор.Запрос, "ПодстановкаТоварногоОграничения", Поля);

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузкиОстатков));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузкиОстатков.НастройкиПоУмолчанию);
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	ПараметрСКД.Значение = ТекущаяДатаСеанса();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьХарактеристики");
	ПараметрСКД.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ПараметрСКД.Использование = Истина;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НастройкиКомпоновщикаИзНастройкиОбмена = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПолучитьНастройкиОбмена(Узел);
	
	ПолеСегментНоменклатуры =  Новый ПолеКомпоновкиДанных("СегментНоменклатуры");
	ПолеСегментПартнеров = Новый ПолеКомпоновкиДанных("СегментПартнеров");
	ПолеСоглашение =  Новый ПолеКомпоновкиДанных("Соглашение");
	ПолеОрганизация =  Новый ПолеКомпоновкиДанных("Организация");
	
	ИспользуетсяОтборПоСегментуНоменклатуры = Ложь;
	Если НЕ НастройкиКомпоновщикаИзНастройкиОбмена = Неопределено Тогда
		МассивУдаляемых = Новый Массив;
		Для каждого ЭлементОтбора ИЗ НастройкиКомпоновщикаИзНастройкиОбмена.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментПартнеров
					ИЛИ ЭлементОтбора.ЛевоеЗначение = ПолеСоглашение
					ИЛИ ЭлементОтбора.ЛевоеЗначение = ПолеОрганизация Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора,
					"ИдентификаторПользовательскойНастройки, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Использование");
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментНоменклатуры Тогда
					ИспользуетсяОтборПоСегментуНоменклатуры = Истина;
				КонецЕсли;
				Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
					МассивУдаляемых.Добавить(НовыйЭлемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого КУдалению Из МассивУдаляемых Цикл
			Отбор.Элементы.Удалить(КУдалению);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользуетсяОтборПоСегментуНоменклатуры");
	ПараметрСКД.Значение = ИспользуетсяОтборПоСегментуНоменклатуры;
	ПараметрСКД.Использование = Истина;
	
	Возврат КомпоновщикНастроек;
КонецФункции

Функция КомпоновщикНастроекВыгрузкиПрайсов(Узел, ФильтрыПрайсЛиста)
	
	СхемаВыгрузкиСправочников = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет("СхемаВыгрузкиПрайсов");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузкиСправочников)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузкиСправочников.НастройкиПоУмолчанию);
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Узел");
	ПараметрСКД.Значение = Узел;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Валюта");
	ПараметрСКД.Значение = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	ПараметрСКД.Значение = ТекущаяДатаСеанса();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьХарактеристики");
	ПараметрСКД.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("УправленческаяОрганизацияНеИспользуется");
	ПараметрСКД.Значение = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ЕстьИзменения");
	ПараметрСКД.Значение = ФильтрыПрайсЛиста.ЕстьИзменения;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивНоменклатуры");
	ПараметрСКД.Значение = ФильтрыПрайсЛиста.Номенклатура;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивХарактеристик");
	ПараметрСКД.Значение = ФильтрыПрайсЛиста.Характеристика;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивВидовЦен");
	ПараметрСКД.Значение = ФильтрыПрайсЛиста.ВидЦены;
	ПараметрСКД.Использование = Истина;
	
	ИспользованиеСоглашенийСКлиентами = Константы.ИспользованиеСоглашенийСКлиентами.Получить();
	ТолькоИндивидуальныеСоглашения = 
		ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НеИспользуютсяСоглашения");
	ПараметрСКД.Значение = ТолькоИндивидуальныеСоглашения
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ПараметрСКД.Использование = Истина;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НастройкиКомпоновщикаИзНастройкиОбмена = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПолучитьНастройкиОбмена(Узел);
	
	ИспользуетсяОтборПоСегментуНоменклатуры = Ложь;
	ИспользоватьВесовыеХарактеристики = Ложь;
	ПередаватьИзображенияТоваров = Ложь;
	
	ПолеСклад = Новый ПолеКомпоновкиДанных("Склад");
	ПолеСегментНоменклатуры =  Новый ПолеКомпоновкиДанных("СегментНоменклатуры");
	ПолеСегментПартнеров = Новый ПолеКомпоновкиДанных("СегментПартнеров");
	ПолеИспользоватьВесовыеХарактеристики = Новый ПолеКомпоновкиДанных("ИспользоватьВесовыеХарактеристики");
	ПолеПередаватьИзображенияТоваров = Новый ПолеКомпоновкиДанных("ПередаватьИзображенияТоваров");
	
	Если НЕ НастройкиКомпоновщикаИзНастройкиОбмена = Неопределено Тогда
		МассивУдаляемых = Новый Массив;
		Для каждого ЭлементОтбора ИЗ НастройкиКомпоновщикаИзНастройкиОбмена.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментПартнеров Тогда
					Продолжить;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСклад Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора,
					"ИдентификаторПользовательскойНастройки, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Использование");
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментНоменклатуры Тогда
					ИспользуетсяОтборПоСегментуНоменклатуры = Истина;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ПолеИспользоватьВесовыеХарактеристики Тогда
					ИспользоватьВесовыеХарактеристики = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ПолеПередаватьИзображенияТоваров Тогда
					ПередаватьИзображенияТоваров = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
				Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
					МассивУдаляемых.Добавить(НовыйЭлемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого КУдалению Из МассивУдаляемых Цикл
			Отбор.Элементы.Удалить(КУдалению);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользуетсяОтборПоСегментуНоменклатуры");
	ПараметрСКД.Значение = ИспользуетсяОтборПоСегментуНоменклатуры;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьВесовыеХарактеристики");
	ПараметрСКД.Значение = ИспользоватьВесовыеХарактеристики;
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПередаватьИзображенияТоваров");
	ПараметрСКД.Значение = ПередаватьИзображенияТоваров;
	ПараметрСКД.Использование = Истина;
	
	Возврат КомпоновщикНастроек;
КонецФункции

Функция КомпоновщикНастроекВыгрузкиСправочников(Узел)
	
	СхемаВыгрузкиСправочников = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет(
		"СхемаВыгрузкиОсновныхСправочников");
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаВыгрузкиСправочников));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаВыгрузкиСправочников.НастройкиПоУмолчанию);
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Валюта");
	ПараметрСКД.Значение = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
	ПараметрСКД.Значение = ТекущаяДатаСеанса();
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПустаяСтрока");
	ПараметрСКД.Значение = "";
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("УправленческаяОрганизацияНеИспользуется");
	ПараметрСКД.Значение = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
	ПараметрСКД.Использование = Истина;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ЕдиницаВеса");
	ПараметрСКД.Значение = Константы.ЕдиницаИзмеренияВеса.Получить();
	ПараметрСКД.Использование = Истина;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НастройкиКомпоновщикаИзНастройкиОбмена = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПолучитьНастройкиОбмена(Узел);
	
	ПолеСегментНоменклатуры =  Новый ПолеКомпоновкиДанных("СегментНоменклатуры");
	ПолеСегментПартнеров = Новый ПолеКомпоновкиДанных("СегментПартнеров");
	ПолеСоглашение =  Новый ПолеКомпоновкиДанных("Соглашение");
	
	Если НЕ НастройкиКомпоновщикаИзНастройкиОбмена = Неопределено Тогда
		Для каждого ЭлементОтбора ИЗ НастройкиКомпоновщикаИзНастройкиОбмена.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментПартнеров
					ИЛИ ЭлементОтбора.ЛевоеЗначение = ПолеСоглашение
					ИЛИ ЭлементОтбора.ЛевоеЗначение = ПолеСегментНоменклатуры Тогда
					Продолжить;
				КонецЕсли;
				// Не участвуют в отборе фильтры шапки узла обмена.
				Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора,
					"ИдентификаторПользовательскойНастройки, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Использование");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КомпоновщикНастроек;
КонецФункции

#КонецОбласти

#Область ДанныеДляРегистрации

Функция ВидыПрайсовДляРегистрации(НаборЗаписей)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураРегистрации = Новый Структура("ОбщийПрайсЛист, ПартнерыДляРегистрации");
	
	ВидыПрайсов = НаборЗаписей.ВыгрузитьКолонку("ВидЦены");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	НЕ &СоглашенияИспользуются
	|	И ВидыЦен.ИспользоватьПриПродаже
	|	И ВидыЦен.Ссылка В(&ВидыПрайсов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиПродажа.ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентамиПродажа
	|ГДЕ
	|	СоглашенияСКлиентамиПродажа.Типовое
	|	И (СоглашенияСКлиентамиПродажа.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ИЛИ СоглашенияСКлиентамиПродажа.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
	|	И СоглашенияСКлиентамиПродажа.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И ВЫБОР
	|			КОГДА &ИспользуетсяСогласование
	|				ТОГДА СоглашенияСКлиентамиПродажа.Согласован
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ СоглашенияСКлиентамиПродажа.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НЕ СоглашенияСКлиентамиПродажа.ДатаНачалаДействия > &Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ СоглашенияСКлиентамиПродажа.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НЕ СоглашенияСКлиентамиПродажа.ДатаОкончанияДействия < &Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентамиПродажа.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентамиПродажа.ВидЦен.ИспользоватьПриПродаже
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентамиПродажа.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентамиПродажа.ВидЦен В (&ВидыПрайсов)
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиПродажа.Партнер КАК Партнер
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентамиПродажа
	|ГДЕ
	|	НЕ СоглашенияСКлиентамиПродажа.Типовое
	|	И (СоглашенияСКлиентамиПродажа.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ИЛИ СоглашенияСКлиентамиПродажа.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
	|	И СоглашенияСКлиентамиПродажа.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И ВЫБОР
	|			КОГДА &ИспользуетсяСогласование
	|				ТОГДА СоглашенияСКлиентамиПродажа.Согласован
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ СоглашенияСКлиентамиПродажа.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НЕ СоглашенияСКлиентамиПродажа.ДатаНачалаДействия > &Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ СоглашенияСКлиентамиПродажа.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НЕ СоглашенияСКлиентамиПродажа.ДатаОкончанияДействия < &Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентамиПродажа.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентамиПродажа.ВидЦен.ИспользоватьПриПродаже
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СоглашенияСКлиентамиПродажа.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СоглашенияСКлиентамиПродажа.ВидЦен В (&ВидыПрайсов)
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиПродажа.Ссылка.Партнер
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиПродажа
	|ГДЕ
	|	НЕ СоглашенияСКлиентамиПродажа.Ссылка.Типовое
	|	И (СоглашенияСКлиентамиПродажа.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ИЛИ СоглашенияСКлиентамиПродажа.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
	|	И ВЫБОР
	|			КОГДА &ИспользуетсяСогласование
	|				ТОГДА СоглашенияСКлиентамиПродажа.Ссылка.Согласован
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СоглашенияСКлиентамиПродажа.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И ВЫБОР
	|			КОГДА НЕ СоглашенияСКлиентамиПродажа.Ссылка.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НЕ СоглашенияСКлиентамиПродажа.Ссылка.ДатаНачалаДействия > &Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ СоглашенияСКлиентамиПродажа.Ссылка.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НЕ СоглашенияСКлиентамиПродажа.Ссылка.ДатаОкончанияДействия < &Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СоглашенияСКлиентамиПродажа.ВидЦены.ИспользоватьПриПродаже
	|	И СоглашенияСКлиентамиПродажа.ВидЦены В(&ВидыПрайсов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиПродажа.Ссылка.Партнер
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиПродажа
	|ГДЕ
	|	НЕ СоглашенияСКлиентамиПродажа.Ссылка.Типовое
	|	И (СоглашенияСКлиентамиПродажа.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ИЛИ СоглашенияСКлиентамиПродажа.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
	|	И ВЫБОР
	|			КОГДА &ИспользуетсяСогласование
	|				ТОГДА СоглашенияСКлиентамиПродажа.Ссылка.Согласован
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СоглашенияСКлиентамиПродажа.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И ВЫБОР
	|			КОГДА НЕ СоглашенияСКлиентамиПродажа.Ссылка.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НЕ СоглашенияСКлиентамиПродажа.Ссылка.ДатаНачалаДействия > &Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ СоглашенияСКлиентамиПродажа.Ссылка.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НЕ СоглашенияСКлиентамиПродажа.Ссылка.ДатаОкончанияДействия < &Период
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СоглашенияСКлиентамиПродажа.ВидЦен.ИспользоватьПриПродаже
	|	И СоглашенияСКлиентамиПродажа.ВидЦен В(&ВидыПрайсов)");
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидыПрайсов", ВидыПрайсов);
	Запрос.УстановитьПараметр("СоглашенияИспользуются", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	Запрос.УстановитьПараметр("ИспользуетсяСогласование",
		ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеСоглашенийСКлиентами"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураРегистрации.ОбщийПрайсЛист = НЕ МассивРезультатов[0].Пустой();
	
	СтруктураРегистрации.ПартнерыДляРегистрации = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("Партнер");
	
	Возврат СтруктураРегистрации;
КонецФункции

Процедура КонтрагентыДляРегистрации(ПартнерыДляРегистрации, Контрагент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСоВсехИерархией(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер"), СписокПартнеров);
		Для Каждого Элемент Из СписокПартнеров Цикл
			ПартнерыДляРегистрации.Добавить(Элемент.Значение);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИерархияПартнеров.Родитель КАК Партнер
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ИерархияПартнеров.Родитель = Контрагенты.Партнер
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПартнеров = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Партнер");
	
	Для каждого ЭлементМассива Из МассивПартнеров Цикл
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСоВсехИерархией(ЭлементМассива, СписокПартнеров);
		Для Каждого Элемент Из СписокПартнеров Цикл
			ПартнерыДляРегистрации.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПартнерыДляРегистрации(Ссылка, ЗарегистрироватьВсехПартнеров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПартнерыДляРегистрации = Новый Массив;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
		ПартнерыДляРегистрации.Добавить(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ПартнерыДляРегистрации.Добавить(Ссылка.Владелец);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		КонтрагентыДляРегистрации(ПартнерыДляРегистрации, Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		КонтрагентыДляРегистрации(ПартнерыДляРегистрации, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Контрагент"));
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		СоглашенияСКлиентамиДляРегистрации(ПартнерыДляРегистрации, ЗарегистрироватьВсехПартнеров, Ссылка);
	КонецЕсли;
	
	Возврат ПартнерыДляРегистрации;
КонецФункции

Процедура СоглашенияСКлиентамиДляРегистрации(ПартнерыДляРегистрации, ЗарегистрироватьВсехПартнеров, Соглашение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "Типовое") Тогда
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСоВсехИерархией(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "Партнер"), СписокПартнеров);
		Для Каждого Элемент Из СписокПартнеров Цикл
			ПартнерыДляРегистрации.Добавить(Элемент.Значение);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СегментПартнера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "СегментПартнеров");
	
	Если НЕ ЗначениеЗаполнено(СегментПартнера) Тогда
		ЗарегистрироватьВсехПартнеров = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПартнерыСегмента.Партнер КАК Партнер
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|ГДЕ
	|	ПартнерыСегмента.Сегмент = &СегментПартнера");
	
	Запрос.УстановитьПараметр("СегментПартнера", СегментПартнера);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПартнеров = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Партнер");
	
	Для каждого ЭлементМассива Из МассивПартнеров Цикл
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСоВсехИерархией(ЭлементМассива, СписокПартнеров);
		Для Каждого Элемент Из СписокПартнеров Цикл
			ПартнерыДляРегистрации.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьРегистрациюНоменклатурыИКартинокНеПопавшихВОбмен(УзелОбмена)
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Метаданные.Справочники.Номенклатура);
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Метаданные.Справочники.НоменклатураПрисоединенныеФайлы);
КонецПроцедуры

#КонецОбласти

#Область Создание_документов

Процедура ВыполнитьЗаписьПроведениеДокумента(ДокументОбъект, Сообщение, Проведен, ТипДокумента);
	
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если ТипДокумента = 0 Тогда
			ЗаписатьИнформациюПоСтатусуЗаказаКлиента(Сообщение, ДокументОбъект.Ссылка, Истина, Истина);
		Иначе
			ЗаписатьИнформациюПоСтатусуЗаявкиНаВозврат(Сообщение, ДокументОбъект.Ссылка, Истина, Истина);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.Проведение, ?(ДокументОбъект.Проведен,
	РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
	
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
		Если ТипДокумента = 0 Тогда
			ЗаписатьИнформациюПоСтатусуЗаказаКлиента(Сообщение, ДокументОбъект.Ссылка, Истина);
		Иначе
			ЗаписатьИнформациюПоСтатусуЗаявкиНаВозврат(Сообщение, ДокументОбъект.Ссылка, Истина);
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если ТипДокумента = 0 Тогда
			ЗаписатьИнформациюПоСтатусуЗаказаКлиента(Сообщение, ДокументОбъект.Ссылка, Истина, Истина);
		Иначе
			ЗаписатьИнформациюПоСтатусуЗаявкиНаВозврат(Сообщение, ДокументОбъект.Ссылка, Истина, Истина);
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьТоварнуюЧасть(ДокументОбъект, МобильныеДанныеТовары, ТипДокумента)
	
	Если ТипДокумента = 0 Тогда
		ТабличнаяЧастьТовары = ДокументОбъект.Товары;
	ИначеЕсли ТипДокумента = 1 Тогда
		ТабличнаяЧастьТовары = ДокументОбъект.ВозвращаемыеТовары;
	КонецЕсли;
	ТабличнаяЧастьТовары.Очистить();
	
	// Выполняем необходимые операции для дозаполнения/проверки для строки ТЧ.
	ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение,
	"ОбеспечиватьЗаказыОбособленно");
	ДанныеДокументаСтруктура = Новый Структура("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС");
	
	Если ТипДокумента = 0 Тогда
		СтруктураДействий.Вставить("ЗаполнитьСодержание",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(
		ДанныеДокументаСтруктура, Ложь));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение",
		Новый Структура("ЗаполнитьОбособленно", ЗаполнитьОбособленно));
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ДокументОбъект, ТипДокумента);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	Для Каждого СтрокаТовара Из МобильныеДанныеТовары Цикл
		СтрокаДокумента = ТабличнаяЧастьТовары.Добавить();
		
		Если ТипДокумента = 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТовара, "Количество, КоличествоУпаковок, Отменено, Цена,
				|ПроцентРучнойСкидки, СуммаРучнойСкидки");
		ИначеЕсли ТипДокумента = 1 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТовара, "Количество, КоличествоУпаковок, Отменено, Цена");
		КонецЕсли;
		
		СтрокаДокумента.ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовара.ВидЦены));
		
		НоменклатураХарактеристикаУпаковка = СтруктураНоменклатураХарактеристикаУпаковка(СтрокаТовара.Номенклатура,
			СтрокаТовара.Упаковка);
		СтрокаДокумента.Номенклатура = НоменклатураХарактеристикаУпаковка.Номенклатура;
		Если ЗначениеЗаполнено(НоменклатураХарактеристикаУпаковка.Характеристика) Тогда
			СтрокаДокумента.Характеристика = НоменклатураХарактеристикаУпаковка.Характеристика;
		КонецЕсли;
		Если ЗначениеЗаполнено(НоменклатураХарактеристикаУпаковка.Упаковка) Тогда
			СтрокаДокумента.Упаковка = НоменклатураХарактеристикаУпаковка.Упаковка;
			СтрокаДокумента.Цена = СтрокаДокумента.Цена * НоменклатураХарактеристикаУпаковка.УпаковкаКоэффициент;
		Иначе
			СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
		КонецЕсли;
		
		Если ТипДокумента = 0 Тогда
			СтрокаДокумента.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки;
			СтрокаДокумента.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовара.Склад));
		ИначеЕсли ТипДокумента = 1 Тогда
			СтрокаДокумента.ДатаПоступления = ДокументОбъект.ДатаПоступления;
			СтрокаДокумента.ДокументРеализации = ДокументОбъект.ДокументРеализации;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДокумента, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	// Выполняем необходимые операции для дозаполнения/проверки ТЧ.
	Если ДокументОбъект.НеОтгружатьЧастями Тогда
		Если ТипДокумента = 0 Тогда
			ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(ТабличнаяЧастьТовары, "ДатаОтгрузки",
				ДокументОбъект.ДатаОтгрузки);
		ИначеЕсли ТипДокумента = 1 Тогда
			ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(ТабличнаяЧастьТовары, "ДатаПоступления",
				ДокументОбъект.ДатаПоступления);
		КонецЕсли;
	КонецЕсли;
	
	СтараяВалюта = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
	НоваяВалюта = ДокументОбъект.Валюта;
	
	Если НЕ СтараяВалюта = НоваяВалюта Тогда
		
		ДатаДокумента               = ДокументОбъект.Дата;
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, ДатаДокумента);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			ТабличнаяЧастьТовары,
			ДокументОбъект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
	КонецЕсли;
	
	Если ТипДокумента = 0 Тогда
		ДокументыМенеджер = Документы.ЗаказКлиента;
	ИначеЕсли ТипДокумента = 1 Тогда
		ДокументыМенеджер = Документы.ЗаявкаНаВозвратТоваровОтКлиента;
	КонецЕсли;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект,
		ДокументыМенеджер));
	
	Если ТипДокумента = 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	ИначеЕсли ТипДокумента = 1 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.Возвращаемые);
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, МобильныеДанные)
	
	ДокументОбъект.ПометкаУдаления = МобильныеДанные.DeletionMark;
	ДокументОбъект.Комментарий = МобильныеДанные.Комментарий;
	
	ДокументОбъект.Валюта = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныеДанные.Валюта));
	ДокументОбъект.Партнер = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныеДанные.Клиент));
	ДокументОбъект.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильныеДанные.Контрагент));
	ОрганизацияЗаказа = Справочники.Организации.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильныеДанные.Организация));
	ДокументОбъект.Организация = ?(ЗначениеЗаполнено(ОрганизацияЗаказа), ОрганизацияЗаказа, ДокументОбъект.Организация);
	
	СкладЗаказа = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильныеДанные.Склад));
	ДокументОбъект.Склад = ?(ЗначениеЗаполнено(СкладЗаказа), СкладЗаказа, ДокументОбъект.Склад);
	
	СоглашениеДоговор = СтруктураДоговораСоглашения(МобильныеДанные.ДоговорКлиента);
	ДокументОбъект.Договор = СоглашениеДоговор.Договор;
	ДокументОбъект.Соглашение = СоглашениеДоговор.Соглашение;
	ДокументОбъект.ХозяйственнаяОперация = СоглашениеДоговор.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ДокументОбъект.ЗаполнитьУсловияПродажПоCоглашению();
	Иначе
		ДокументОбъект.ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ХозяйственнаяОперация) Тогда
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;
	
	ДокументОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ВозможностьДобавленияИзмененияПартнеров()
	
	НаборКонстант = Константы.СоздатьНабор("ИспользованиеСоглашенийСКлиентами, ИспользоватьДоговорыСКлиентами");
	НаборКонстант.Прочитать();
	ВозможностьДобавленияИзмененияПартнеров =
		Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеИнформацииПоПартнерам");
	Если НаборКонстант.ИспользованиеСоглашенийСКлиентами =
		Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения Тогда
			ВозможностьДобавленияИзмененияПартнеров = ВозможностьДобавленияИзмененияПартнеров
				И Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеТиповыхСоглашенийСКлиентами,
					|ДобавлениеИзменениеИндивидуальныхСоглашенийСКлиентами");
	ИначеЕсли НаборКонстант.ИспользованиеСоглашенийСКлиентами =
		Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения Тогда
			ВозможностьДобавленияИзмененияПартнеров = ВозможностьДобавленияИзмененияПартнеров
				И Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеТиповыхСоглашенийСКлиентами");
	ИначеЕсли НаборКонстант.ИспользованиеСоглашенийСКлиентами =
		Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения Тогда
			ВозможностьДобавленияИзмененияПартнеров = ВозможностьДобавленияИзмененияПартнеров
				И Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеИндивидуальныхСоглашенийСКлиентами");
	КонецЕсли;
	Если НаборКонстант.ИспользоватьДоговорыСКлиентами Тогда
		ВозможностьДобавленияИзмененияПартнеров = ВозможностьДобавленияИзмененияПартнеров
			И Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеДоговоровКонтрагентов");
	КонецЕсли;
		
	Возврат ВозможностьДобавленияИзмененияПартнеров;
КонецФункции

Процедура ВыгрузитьОбъектыСсылочногоТипа(ЗаписьXML, ВыгруженныеОбъекты, СтрокаПрайсЛиста, УзелОбмена)
	
	// Запишем вид цены выгружаемой строки прайса.
	Если ЗначениеЗаполнено(СтрокаПрайсЛиста.ВидЦеныСсылка)
		И ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.ВидЦеныСсылка) = Неопределено Тогда
		ЗаписатьВидЦеныСтроки(ЗаписьXML, СтрокаПрайсЛиста);
		ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.ВидЦеныСсылка, СтрокаПрайсЛиста.ВидЦеныСсылка);
	КонецЕсли;
	
	// Запишем родителя номенклатуры выгружаемой строки прайса.
	Если ЗначениеЗаполнено(СтрокаПрайсЛиста.НоменклатураРодитель)
		И ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.НоменклатураРодитель) = Неопределено Тогда
		
		СтруктураРодителяНоменклатуры = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураРодителяНоменклатуры();
		
		СтруктураРодителяНоменклатуры.Ref = СокрЛП(СтрокаПрайсЛиста.НоменклатураРодитель.УникальныйИдентификатор());
		СтруктураРодителяНоменклатуры.DeletionMark = СтрокаПрайсЛиста.НоменклатураРодительПометкаУдаления;
		СтруктураРодителяНоменклатуры.Description = СокрЛП(СтрокаПрайсЛиста.НоменклатураРодитель);
		СтруктураРодителяНоменклатуры.IsFolder = Истина;
		СтруктураРодителяНоменклатуры.Code = СтрокаПрайсЛиста.НоменклатураРодительКод;
		СтруктураРодителяНоменклатуры.ERPКодНоменклатура = СтруктураРодителяНоменклатуры.Ref;
		СтруктураРодителяНоменклатуры.СтрокаПоиска = СокрЛП(СтруктураРодителяНоменклатуры.Code)
			+СокрЛП(СтруктураРодителяНоменклатуры.Description);
		
		Если НЕ ЗначениеЗаполнено(СтрокаПрайсЛиста.НоменклатураРодительРодитель) Тогда
			СтруктураРодителяНоменклатуры.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			ЗаписатьСправочник(ЗаписьXML, СтруктураРодителяНоменклатуры, "Номенклатура");
		Иначе
			СтруктураРодителяНоменклатуры.Parent = 
				СокрЛП(СтрокаПрайсЛиста.НоменклатураРодительРодитель.УникальныйИдентификатор());
			ЗаписатьСправочник(ЗаписьXML, СтруктураРодителяНоменклатуры, "Номенклатура");
			Родитель = СтрокаПрайсЛиста.НоменклатураРодительРодитель;
			Пока ЗначениеЗаполнено(Родитель) Цикл
				Если ВыгруженныеОбъекты.Получить(Родитель) = Неопределено Тогда
					ЗаписатьРодителяНоменклатуры(ЗаписьXML, Родитель);
					ВыгруженныеОбъекты.Вставить(Родитель, Родитель);
				КонецЕсли;
				Родитель = Родитель.Родитель;
			КонецЦикла;
		КонецЕсли;
		ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.НоменклатураРодитель, СтрокаПрайсЛиста.НоменклатураРодитель);
	КонецЕсли;
	
	// Запишем вид номенклатуры выгружаемой строки прайса.
	Если ЗначениеЗаполнено(СтрокаПрайсЛиста.НоменклатураВидНоменклатуры)
			И ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.НоменклатураВидНоменклатуры) = Неопределено Тогда
		СтруктураВидаНоменклатуры				= МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураВидаНоменклатуры();
		СтруктураВидаНоменклатуры.Ref			= СокрЛП(СтрокаПрайсЛиста.НоменклатураВидНоменклатуры.УникальныйИдентификатор());
		СтруктураВидаНоменклатуры.DeletionMark	= СтрокаПрайсЛиста.НоменклатураВидНоменклатурыПометкаУдаления;
		СтруктураВидаНоменклатуры.Description	= СокрЛП(СтрокаПрайсЛиста.НоменклатураВидНоменклатуры);
		СтруктураВидаНоменклатуры.IsFolder		= Ложь;
		СтруктураВидаНоменклатуры.ERPКод		= СтруктураВидаНоменклатуры.Ref;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПрайсЛиста.НоменклатураВидНоменклатурыРодитель) Тогда
			СтруктураВидаНоменклатуры.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			ЗаписатьСправочник(ЗаписьXML, СтруктураВидаНоменклатуры, "ВидыНоменклатуры");
		Иначе
			СтруктураВидаНоменклатуры.Parent = 
				СокрЛП(СтрокаПрайсЛиста.НоменклатураВидНоменклатурыРодитель.УникальныйИдентификатор());
			ЗаписатьСправочник(ЗаписьXML, СтруктураВидаНоменклатуры, "ВидыНоменклатуры");
			Родитель = СтрокаПрайсЛиста.НоменклатураВидНоменклатурыРодитель;
			Пока ЗначениеЗаполнено(Родитель) Цикл
				Если ВыгруженныеОбъекты.Получить(Родитель) = Неопределено Тогда
					ЗаписатьВидНоменклатуры(ЗаписьXML, Родитель);
					ВыгруженныеОбъекты.Вставить(Родитель, Родитель);
					Родитель = Родитель.Родитель;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.НоменклатураВидНоменклатуры,
			СтрокаПрайсЛиста.НоменклатураВидНоменклатуры);
	КонецЕсли;
	
	// Запишем ценовую группу номенклатуры выгружаемой строки прайса.
	Если ЗначениеЗаполнено(СтрокаПрайсЛиста.НоменклатураЦеноваяГруппа)
			И ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.НоменклатураЦеноваяГруппа) = Неопределено Тогда
		СтруктураЦеноваяГруппа				= МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЦеновойГруппы();
		СтруктураЦеноваяГруппа.Ref			= СокрЛП(СтрокаПрайсЛиста.НоменклатураЦеноваяГруппа.УникальныйИдентификатор());
		СтруктураЦеноваяГруппа.DeletionMark	= СтрокаПрайсЛиста.НоменклатураЦеноваяГруппаПометкаУдаления;
		СтруктураЦеноваяГруппа.Description	= СокрЛП(СтрокаПрайсЛиста.НоменклатураЦеноваяГруппа);
		СтруктураЦеноваяГруппа.Описание		= СтрокаПрайсЛиста.НоменклатураЦеноваяГруппаОписание;
		
		ЗаписатьСправочник(ЗаписьXML, СтруктураЦеноваяГруппа, "ЦеновыеГруппы");
		
		ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.НоменклатураЦеноваяГруппа, СтрокаПрайсЛиста.НоменклатураЦеноваяГруппа);
	КонецЕсли;
	
	// Запишем единицу измерения номенклатуры выгружаемой строки прайса.
	Если ЗначениеЗаполнено(СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения)
			И ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения) = Неопределено Тогда
		СтруктураЕдиницыИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЕдиницыИзмерения();
		СтруктураЕдиницыИзмерения.Ref = СокрЛП(СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения.УникальныйИдентификатор());
		СтруктураЕдиницыИзмерения.DeletionMark = СтрокаПрайсЛиста.НоменклатураЕдиницаИзмеренияПометкаУдаления;
		СтруктураЕдиницыИзмерения.Description = СокрЛП(СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения);
		СтруктураЕдиницыИзмерения.Code = СтрокаПрайсЛиста.НоменклатураЕдиницаИзмеренияКод;
		СтруктураЕдиницыИзмерения.PredefinedDataName = "";
		СтруктураЕдиницыИзмерения.МеждународноеСокращение = 
			СтрокаПрайсЛиста.НоменклатураЕдиницаИзмеренияМеждународноеСокращение;
		СтруктураЕдиницыИзмерения.НаименованиеПолное = 
			СтрокаПрайсЛиста.НоменклатураЕдиницаИзмеренияНаименованиеПолное;
		
		ЗаписатьСправочник(ЗаписьXML, СтруктураЕдиницыИзмерения, "ЕдиницыИзмерения");
		
		ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения,
		СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения);
	КонецЕсли;
	
	// Запишем упаковку выгружаемой строки прайса.
	Если ЗначениеЗаполнено(СтрокаПрайсЛиста.УпаковкаСсылка)
		И ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.Упаковка) = Неопределено Тогда
		СтруктураУпаковки		= СтруктураУпаковки();
		СтруктураУпаковки.Ref	= СтрокаПрайсЛиста.Упаковка;
		СтруктураУпаковки.Owner = СтрокаПрайсЛиста.Номенклатура;
		СтруктураУпаковки.Description	= СокрЛП(СтрокаПрайсЛиста.УпаковкаСсылка);
		
		СтруктураУпаковки.DeletionMark = СтрокаПрайсЛиста.УпаковкиНоменклатурыПометкаУдаления;
		СтруктураУпаковки.ERPКод = СокрЛП(СтрокаПрайсЛиста.УпаковкаСсылка.УникальныйИдентификатор());
		СтруктураУпаковки.Коэффициент = СтрокаПрайсЛиста.УпаковкиНоменклатурыКоэффициент;
		СтруктураУпаковки.НаименованиеПолное = СтрокаПрайсЛиста.УпаковкиНоменклатурыНаименование;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПрайсЛиста.УпаковкиНоменклатурыРодитель) Тогда
			СтруктураУпаковки.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
		Иначе
			СтруктураЗаписиУпаковки = Новый Структура;
			СтруктураЗаписиУпаковки.Вставить("УпаковкаСсылка", СтрокаПрайсЛиста.УпаковкиНоменклатурыРодитель);
			СтруктураЗаписиУпаковки.Вставить("ИдНоменклатуры", СтрокаПрайсЛиста.ИдНоменклатуры);
			СтруктураЗаписиУпаковки.Вставить("ИдХарактеристики", СтрокаПрайсЛиста.ИдХарактеристики);
			СтруктураЗаписиУпаковки.Вставить("НоменклатураМП", СтрокаПрайсЛиста.Номенклатура);
			СтруктураЗаписиУпаковки.Вставить("Номенклатура", СтрокаПрайсЛиста.НоменклатураСсылка);
			
			СтруктураУпаковки.Parent = ИдентификаторУпаковкиМП(ЗаписьXML, ВыгруженныеОбъекты, СтруктураЗаписиУпаковки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмерения) Тогда
			СтруктураУпаковки.ЕдиницаИзмерения = 
			СокрЛП(СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмерения.УникальныйИдентификатор());
			Если ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмерения) = Неопределено Тогда
				
				СтруктураЕдиницыИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЕдиницыИзмерения();
				СтруктураЕдиницыИзмерения.Ref = 
				СокрЛП(СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмерения.УникальныйИдентификатор());
				СтруктураЕдиницыИзмерения.DeletionMark = СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмеренияПометкаУдаления;
				СтруктураЕдиницыИзмерения.Description = СокрЛП(СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмерения);
				СтруктураЕдиницыИзмерения.Code = СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмеренияКод;
				СтруктураЕдиницыИзмерения.PredefinedDataName = 
				СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмеренияИмяПредопределенныхДанных;
				СтруктураЕдиницыИзмерения.МеждународноеСокращение = 
				СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмеренияМеждународноеСокращение;
				СтруктураЕдиницыИзмерения.НаименованиеПолное = 
				СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмеренияНаименованиеПолное;
				
				ЗаписатьСправочник(ЗаписьXML, СтруктураЕдиницыИзмерения, "ЕдиницыИзмерения");
				
				ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмерения,
				СтрокаПрайсЛиста.УпаковкиНоменклатурыЕдиницаИзмерения);
			КонецЕсли;
		Иначе
			СтруктураУпаковки.ЕдиницаИзмерения = СокрЛП(СтрокаПрайсЛиста.УпаковкаСсылка.УникальныйИдентификатор());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмерения) 
			И СтрокаПрайсЛиста.ИспользоватьВес Тогда
			
			СтруктураУпаковки.Вес = СтрокаПрайсЛиста.УпаковкиНоменклатурыВес;
			СтруктураУпаковки.ВесЕдиницаИзмерения = 
				СокрЛП(СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмерения.УникальныйИдентификатор());
			Если ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмерения) = Неопределено Тогда
				
				СтруктураЕдиницыИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЕдиницыИзмерения();
				СтруктураЕдиницыИзмерения.Ref = 
				СокрЛП(СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмерения.УникальныйИдентификатор());
				СтруктураЕдиницыИзмерения.DeletionMark = СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмеренияПометкаУдаления;
				СтруктураЕдиницыИзмерения.Description = СокрЛП(СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмерения);
				СтруктураЕдиницыИзмерения.Code = СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмеренияКод;
				СтруктураЕдиницыИзмерения.PredefinedDataName = 
				СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмеренияИмяПредопределенныхДанных;
				СтруктураЕдиницыИзмерения.МеждународноеСокращение = 
				СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмеренияМеждународноеСокращение;
				СтруктураЕдиницыИзмерения.НаименованиеПолное = 
				СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмеренияНаименованиеПолное;
				
				ЗаписатьСправочник(ЗаписьXML, СтруктураЕдиницыИзмерения, "ЕдиницыИзмерения");
				
				ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмерения,
				СтрокаПрайсЛиста.УпаковкиНоменклатурыВесЕдиницаИзмерения);
			КонецЕсли;
		Иначе
			СтруктураУпаковки.ВесЕдиницаИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			СтруктураУпаковки.Вес = 0;
		КонецЕсли;
		
		ЗаписатьСправочник(ЗаписьXML, СтруктураУпаковки, "УпаковкиНоменклатуры");
		
		// Запишем иерархию упаковок упаковки выгружаемой строки прайса,
		// если используются упаковки для номенклатуры.
		СтруктураЗаписиУпаковки = Новый Структура;
		СтруктураЗаписиУпаковки.Вставить("УпаковкаСсылка", СтрокаПрайсЛиста.УпаковкаСсылка);
		СтруктураЗаписиУпаковки.Вставить("ИдНоменклатуры", СтрокаПрайсЛиста.ИдНоменклатуры);
		СтруктураЗаписиУпаковки.Вставить("ИдХарактеристики", СтрокаПрайсЛиста.ИдХарактеристики);
		СтруктураЗаписиУпаковки.Вставить("НоменклатураМП", СтрокаПрайсЛиста.Номенклатура);
		СтруктураЗаписиУпаковки.Вставить("НоменклатураСсылка", СтрокаПрайсЛиста.НоменклатураСсылка);
		ЗаписатьИерархиюУпаковок(ЗаписьXML, ВыгруженныеОбъекты, СтруктураЗаписиУпаковки);
		
		ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.Упаковка, СтрокаПрайсЛиста.Упаковка);
	КонецЕсли;
	
	// Запишем номенклатуру выгружаемой строки прайса.
	Если ЗначениеЗаполнено(СтрокаПрайсЛиста.Номенклатура) И (СтрокаПрайсЛиста.ТребуетсяОтправкаТовара)
			И ВыгруженныеОбъекты.Получить(СтрокаПрайсЛиста.Номенклатура) = Неопределено Тогда
		
		НаименованиеНоменклатурыМП = СокрЛП(СтрокаПрайсЛиста.НоменклатураСсылка) + 
									?(СтрокаПрайсЛиста.ХарактеристикиИспользуются,
									" (" + СокрЛП(СтрокаПрайсЛиста.ХарактеристикаСсылка) + ")", "");
		
		ПолноеНаименованиеНоменклатурыМП = СокрЛП(СтрокаПрайсЛиста.НоменклатураНаименованиеПолное) + 
									?(СтрокаПрайсЛиста.ХарактеристикиИспользуются,
									" (" + СокрЛП(СтрокаПрайсЛиста.ХарактеристикаНаименованиеПолное) + ")", "");
		
		СтруктураНоменклатуры = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураНоменклатуры();
		
		СтруктураНоменклатуры.Ref			= СтрокаПрайсЛиста.Номенклатура;
		СтруктураНоменклатуры.DeletionMark	= СтрокаПрайсЛиста.НоменклатураПометкаУдаления;
		СтруктураНоменклатуры.Description	= НаименованиеНоменклатурыМП;
		
		СтруктураНоменклатуры.IsFolder	= ЛОЖЬ;
		СтруктураНоменклатуры.Parent	= СокрЛП(СтрокаПрайсЛиста.НоменклатураРодитель.УникальныйИдентификатор());
		СтруктураНоменклатуры.Code		= СтрокаПрайсЛиста.НоменклатураКод;
		
		СтруктураНоменклатуры.ERPКодНоменклатура	= СтрокаПрайсЛиста.ИдНоменклатуры;
		СтруктураНоменклатуры.ERPКодХарактеристика	= СтрокаПрайсЛиста.ИдХарактеристики;
		СтруктураНоменклатуры.Артикул				= СтрокаПрайсЛиста.НоменклатураАртикул;
		СтруктураНоменклатуры.ВидНоменклатуры		=
			СокрЛП(СтрокаПрайсЛиста.НоменклатураВидНоменклатуры.УникальныйИдентификатор());
		СтруктураНоменклатуры.ЕдиницаИзмерения		=
			СокрЛП(СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения.УникальныйИдентификатор());
		СтруктураНоменклатуры.НаименованиеПолное	= ПолноеНаименованиеНоменклатурыМП;
		СтруктураНоменклатуры.СтавкаНДСЧислом		=
			ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаПрайсЛиста.СтавкаНДССсылка)/100;
		СтруктураНоменклатуры.Услуга				= СтрокаПрайсЛиста.Услуга;
		СтруктураНоменклатуры.ЦеноваяГруппа			= СокрЛП(СтрокаПрайсЛиста.НоменклатураЦеноваяГруппа.УникальныйИдентификатор());
		СтруктураНоменклатуры.СтрокаПоиска			= СокрЛП(СтруктураНоменклатуры.Code)
			+ СокрЛП(СтруктураНоменклатуры.Description) + СокрЛП(СтруктураНоменклатуры.Артикул);
		СтруктураНоменклатуры.Описание				= СтрокаПрайсЛиста.НоменклатураОписание;
			
		// Запишем единицу измерения номенклатуры выгружаемой строки прайса как упаковку,
		// если используются Задания и Задания детализируются по номенклатуре.
		НоменклатураЕдиницаИзмеренияКакУпаковка = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
		Если ЗначениеЗаполнено(СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения)
			И СтрокаПрайсЛиста.ВыгружатьЕдиницуИзмеренияКакУпаковку Тогда
			
			СтруктураЗаписиУпаковки = Новый Структура;
			СтруктураЗаписиУпаковки.Вставить("УпаковкаСсылка", СтрокаПрайсЛиста.НоменклатураЕдиницаИзмерения);
			СтруктураЗаписиУпаковки.Вставить("ИдНоменклатуры", СтрокаПрайсЛиста.ИдНоменклатуры);
			СтруктураЗаписиУпаковки.Вставить("ИдХарактеристики", СтрокаПрайсЛиста.ИдХарактеристики);
			СтруктураЗаписиУпаковки.Вставить("НоменклатураМП", СтрокаПрайсЛиста.Номенклатура);
			СтруктураЗаписиУпаковки.Вставить("Номенклатура", СтрокаПрайсЛиста.НоменклатураСсылка);
			СтруктураЗаписиУпаковки.Вставить("ЭтоЕдиницаИзмеренияВеса", Ложь);
			НоменклатураЕдиницаИзмеренияКакУпаковка = 
			ИдентификаторУпаковкиМП(ЗаписьXML, ВыгруженныеОбъекты, СтруктураЗаписиУпаковки);
			ВыгруженныеОбъекты.Вставить(НоменклатураЕдиницаИзмеренияКакУпаковка, НоменклатураЕдиницаИзмеренияКакУпаковка);
		КонецЕсли;
		
		СтруктураНоменклатуры.ЕдиницаЗаказа = ?(ЗначениеЗаполнено(СтрокаПрайсЛиста.Упаковка), СтрокаПрайсЛиста.Упаковка,
			НоменклатураЕдиницаИзмеренияКакУпаковка);
			
		// Запишем единицу измерения веса номенклатуры выгружаемой строки прайса.
		// Она так же может участвовать в подборе в заказ.
		Если ЗначениеЗаполнено(СтрокаПрайсЛиста.ВесУпаковкаСсылка)
			И СтрокаПрайсЛиста.ИспользоватьВес Тогда
			
			СтруктураЗаписиУпаковки = Новый Структура;
			СтруктураЗаписиУпаковки.Вставить("УпаковкаСсылка", СтрокаПрайсЛиста.ВесУпаковкаСсылка);
			СтруктураЗаписиУпаковки.Вставить("ИдНоменклатуры", СтрокаПрайсЛиста.ИдНоменклатуры);
			СтруктураЗаписиУпаковки.Вставить("ИдХарактеристики", СтрокаПрайсЛиста.ИдХарактеристики);
			СтруктураЗаписиУпаковки.Вставить("НоменклатураМП", СтрокаПрайсЛиста.Номенклатура);
			СтруктураЗаписиУпаковки.Вставить("Номенклатура", СтрокаПрайсЛиста.НоменклатураСсылка);
			СтруктураЗаписиУпаковки.Вставить("ЭтоЕдиницаИзмеренияВеса", Истина);
			СтруктураНоменклатуры.ВесЕдиницаИзмерения = 
				ИдентификаторУпаковкиМП(ЗаписьXML, ВыгруженныеОбъекты, СтруктураЗаписиУпаковки);
			СтруктураНоменклатуры.Вставить("ВесЗнаменатель", СтрокаПрайсЛиста.ВесЗнаменатель);
			СтруктураНоменклатуры.Вставить("ВесИспользовать", СтрокаПрайсЛиста.ВесИспользовать);
			СтруктураНоменклатуры.Вставить("ВесМожноУказыватьВДокументах", СтрокаПрайсЛиста.ВесМожноУказыватьВДокументах);
			СтруктураНоменклатуры.Вставить("ВесЧислитель", СтрокаПрайсЛиста.ВесЧислитель);
			ВыгруженныеОбъекты.Вставить(СтруктураНоменклатуры.ВесЕдиницаИзмерения, СтруктураНоменклатуры.ВесЕдиницаИзмерения);
		Иначе
			СтруктураНоменклатуры.ВесЕдиницаИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			СтруктураНоменклатуры.Вставить("ВесЗнаменатель", 1);
			СтруктураНоменклатуры.Вставить("ВесИспользовать", Ложь);
			СтруктураНоменклатуры.Вставить("ВесМожноУказыватьВДокументах", Ложь);
			СтруктураНоменклатуры.Вставить("ВесЧислитель", 0);
		КонецЕсли;
		
		// Запишем картинку номеклатуры выгружаемой строки прайса.
		Если ЗначениеЗаполнено(СтрокаПрайсЛиста.ФайлКартинкиСсылка) Тогда
			СтруктураНоменклатуры.ФайлКартинки = 
				ИдентификаторФайлаКартинки(ЗаписьXML, ВыгруженныеОбъекты, СтрокаПрайсЛиста, УзелОбмена);
		Иначе
			СтруктураНоменклатуры.ФайлКартинки = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
		КонецЕсли;
		
		ЗаписатьСправочник(ЗаписьXML, СтруктураНоменклатуры, "Номенклатура");
		ВыгруженныеОбъекты.Вставить(СтрокаПрайсЛиста.Номенклатура, НаименованиеНоменклатурыМП);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, СтрокаПрайсЛиста.НоменклатураСсылка);
	КонецЕсли;
КонецПроцедуры

Функция ГруппаДоступаПартнера()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Партнеры.Ссылка,
	|	Партнеры.ГруппаДоступа
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.ГруппаДоступа = ЗНАЧЕНИЕ(Справочник.ГруппыДоступаПартнеров.ПустаяСсылка)");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ГруппаДоступа;
КонецФункции

Функция ГруппаСкладовДляВыбораЗаказе(ИдентификаторСклада, СкладРодитель, Выгружать)
	
	ГруппаСкладовДляВыбора = Новый Структура("ИдентификаторРодителя, ИдентификаторГруппы, СкладыДанные",,, Новый Массив);
	СкладыВТЧ = ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК СкладСсылка,
	|	Склады.ЭтоГруппа КАК IsFolder,
	|	Склады.ПометкаУдаления КАК DeletionMark,
	|	Склады.Наименование КАК Description,
	|	Склады.Родитель КАК СкладРодитель,
	|	Склады.ВыборГруппы
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Склад
	|ИТОГИ ПО
	|	СкладСсылка ТОЛЬКО ИЕРАРХИЯ");
	Запрос.УстановитьПараметр("Склад", СкладРодитель);
	ИерархияСклада = Запрос.Выполнить().Выгрузить();
	Если ИерархияСклада.Количество() = 0 Тогда
		ГруппаСкладовДляВыбора.ИдентификаторРодителя = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
		ГруппаСкладовДляВыбора.ИдентификаторГруппы = ИдентификаторСклада;
		Возврат ГруппаСкладовДляВыбора;
	КонецЕсли;
	
	СкладыДляВыгрузки = Новый Массив ;
	ГруппаСкладов = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Для Каждого Строка Из ИерархияСклада Цикл
		Если НЕ ЗначениеЗаполнено(Строка.СкладСсылка) Тогда
			Продолжить;
		КонецЕсли;
		Если СкладыВТЧ Тогда
			Если НЕ ЗначениеЗаполнено(ГруппаСкладов)
				И НЕ Строка.ВыборГруппы = ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.Запретить") Тогда
				ГруппаСкладов = Строка.СкладСсылка;
			КонецЕсли;
			Если ЗначениеЗаполнено(ГруппаСкладов)
				И Строка.ВыборГруппы = ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.Запретить") Тогда
				ГруппаСкладов = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		Если Строка.СкладСсылка = СкладРодитель Тогда
			Если НЕ ЗначениеЗаполнено(Строка.СкладРодитель) Тогда
				ГруппаСкладовДляВыбора.ИдентификаторРодителя = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			Иначе
				ГруппаСкладовДляВыбора.ИдентификаторРодителя = СокрЛП(Строка.СкладРодитель.УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		Если Выгружать И (НЕ Строка.СкладСсылка = СкладРодитель) Тогда
			СтруктураСклада = Новый Структура;
			СтруктураСклада.Вставить("ref");
			СтруктураСклада.Вставить("DeletionMark");
			СтруктураСклада.Вставить("Description");
			СтруктураСклада.Вставить("IsFolder");
			СтруктураСклада.Вставить("Parent");
			СтруктураСклада.Вставить("ERPКод");
			ЗаполнитьЗначенияСвойств(СтруктураСклада, Строка);
			СтруктураСклада.ref = СокрЛП(Строка.СкладСсылка.УникальныйИдентификатор());
			СтруктураСклада.ERPКод = СтруктураСклада.ref;
			Если НЕ ЗначениеЗаполнено(Строка.СкладРодитель) Тогда
				СтруктураСклада.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			Иначе
				СтруктураСклада.Parent = СокрЛП(Строка.СкладРодитель.УникальныйИдентификатор());
			КонецЕсли;
			СкладыДляВыгрузки.Добавить(СтруктураСклада);
		КонецЕсли;
	КонецЦикла;
	ГруппаСкладовДляВыбора.СкладыДанные = СкладыДляВыгрузки;
	
	Если СкладыВТЧ Тогда
		Если НЕ ЗначениеЗаполнено(ГруппаСкладов) Тогда
			ГруппаСкладовДляВыбора.ИдентификаторГруппы = ИдентификаторСклада;
		Иначе
			ГруппаСкладовДляВыбора.ИдентификаторГруппы = СокрЛП(ГруппаСкладов.УникальныйИдентификатор());
		КонецЕсли;
	Иначе
		ГруппаСкладовДляВыбора.ИдентификаторГруппы = ИдентификаторСклада;
	КонецЕсли;
	
	Возврат ГруппаСкладовДляВыбора;
КонецФункции

Функция ДвоичныеДанныеФайла(Знач ПрисоединенныйФайл)
	
	УстановитьПривилегированныйРежим(Истина);
	ДвоичныеДанныеФайла = "";
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	Если ФайлОбъект = Неопределено Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ХранимыйФайл
		|ИЗ
		|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДвоичныеДанныеФайла = Выборка.ХранимыйФайл.Получить();
		Иначе
			// Запись в журнал регистрации.
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru='Двоичные данные файла отсутствуют в регистре ПрисоединенныеФайлы
                           |
                           |Ссылка на файл: ""%1"".'
                           |;uk='Двійкові дані файлу відсутні в регістрі ПрисоединенныеФайлы
                           |
                           |Посилання на файл: ""%1"".'"),
				ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
			ЗаписьЖурналаРегистрации(НСтр("ru='Файлы.Открытие файла';uk='Файли.Відкриття файлу'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				СообщениеОбОшибке);
			ДвоичныеДанныеФайла = "";
		КонецЕсли;
	Иначе
		ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		
		Попытка
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПолныйПуть);
		Исключение
			// Запись в журнал регистрации.
			СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
			ЗаписьЖурналаРегистрации(НСтр("ru='Файлы.Получение файла из тома';uk='Файли.Отримання файла з тома'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				СообщениеОбОшибке);
			ДвоичныеДанныеФайла = "";
		КонецПопытки;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеФайла;
КонецФункции

Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ТипДокумента)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ТипДокумента = 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗадание(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
КонецПроцедуры

Функция ДосьеПартнера(Знач Партнер)
	
	ИнформацияОПартнере = Новый Структура("Досье, КонтактныеТелефоны");
	Отчет = Отчеты.ДосьеПартнера.Создать();
	Отчет.Контакты = Истина;
	Отчет.ДанныеКлиента = Истина;
	Отчет.ДанныеПоставщика = Ложь;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Отчет.СформироватьОтчет(ТабличныйДокумент, Партнер);
	
	ИнформацияОПартнере.Досье = ТабличныйДокумент;
	
	СписокКонтактов = Новый СписокЗначений;
	ИнформацияОПартнере.КонтактныеТелефоны = СписокКонтактов;
	
	Возврат Новый ХранилищеЗначения(ИнформацияОПартнере, Новый СжатиеДанных(9));
КонецФункции

Процедура ЗаписатьВидНоменклатуры(ЗаписьXML, ВидНоменклатуры)
	
	СтруктураВидаНоменклатуры = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураВидаНоменклатуры();
	
	СтрокаЗапросаРеквизитов = "IsFolder, DeletionMark, Description, Родитель";
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидНоменклатуры, СтрокаЗапросаРеквизитов);
	
	ЗаполнитьЗначенияСвойств(СтруктураВидаНоменклатуры, РеквизитыОбъекта);
	СтруктураВидаНоменклатуры.Ref = СокрЛП(ВидНоменклатуры.УникальныйИдентификатор());
	СтруктураВидаНоменклатуры.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Родитель) Тогда
		СтруктураВидаНоменклатуры.Parent = СокрЛП(РеквизитыОбъекта.Родитель.УникальныйИдентификатор());
	КонецЕсли;
	
	СтруктураВидаНоменклатуры.ERPКод = СтруктураВидаНоменклатуры.Ref;
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураВидаНоменклатуры, "ВидыНоменклатуры");
КонецПроцедуры

Процедура ЗаписатьДоступныеСегментыПартнеров(Партнер, МассивСегментов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого Сегмент Из МассивСегментов Цикл
		
		ПартнерыСегмента = РегистрыСведений.ПартнерыСегмента.СоздатьМенеджерЗаписи();
		ПартнерыСегмента.Партнер = Партнер;
		ПартнерыСегмента.Сегмент = Сегмент;
		ПартнерыСегмента.Записать(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ЗаписатьЗаданиеВПакетОбмена(ЗаписьXML, Данные, ИспользоватьСоглашенияИлиДоговоры)
	
	URIПространстваИмен = МобильноеПриложениеЗаказыКлиентовПовтИсп.URIПространстваИмен();
	
	ТипОбъекта = 
		ФабрикаXDTO.Тип(URIПространстваИмен, "DocumentObject.ЗаданиеТорговомуПредставителю");
	ТипОбъектаТовары = 
		ФабрикаXDTO.Тип(URIПространстваИмен, "DocumentTabularSectionRow.ЗаданиеТорговомуПредставителю.Товары");
	ТипОбъектаЗадачи = 
		ФабрикаXDTO.Тип(URIПространстваИмен, "DocumentTabularSectionRow.ЗаданиеТорговомуПредставителю.Задачи");
	ТипОбъектаДолгиПоЗаказам = 
		ФабрикаXDTO.Тип(URIПространстваИмен, "DocumentTabularSectionRow.ЗаданиеТорговомуПредставителю.ДолгиПоЗаказам");
	ТипОбъектаРасшифровка = 
		ФабрикаXDTO.Тип(URIПространстваИмен, 
		"DocumentTabularSectionRow.ЗаданиеТорговомуПредставителю.РасшифровкаДебиторскойЗадолженности");
		
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	МобильноеЗадание = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Для каждого Свойство Из МобильноеЗадание.Свойства() Цикл
		Если СвойствоСсылка(Свойство, Данные) Тогда 
			Если НЕ СокрЛП(Свойство) = "Товары" И НЕ СокрЛП(Свойство) = "Задачи" И НЕ СокрЛП(Свойство) = "ДолгиПоЗаказам"
			И НЕ СокрЛП(Свойство) = "РасшифровкаДебиторскойЗадолженности" И НЕ СокрЛП(Свойство) = "ДоговорКлиента"
			И НЕ СокрЛП(Свойство) = "Клиент" И НЕ СокрЛП(Свойство) = "СтатусОбмена" Тогда
				МобильноеЗадание[СокрЛП(Свойство)] = Сериализатор.XMLСтрока(Данные[СокрЛП(Свойство)]);
			КонецЕсли;
		Иначе
			Если НЕ СокрЛП(Свойство) = "Товары" И НЕ СокрЛП(Свойство) = "Задачи" И НЕ СокрЛП(Свойство) = "ДолгиПоЗаказам"
			И НЕ СокрЛП(Свойство) = "РасшифровкаДебиторскойЗадолженности" Тогда
				МобильноеЗадание[СокрЛП(Свойство)] = Данные[СокрЛП(Свойство)];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МобильноеЗадание.Клиент = Сериализатор.XMLСтрока(Данные.Партнер);
	
	Если ИспользоватьСоглашенияИлиДоговоры Тогда
		
		ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Соглашение, "ВидЦен");
		
		ЕстьДоговор = ЗначениеЗаполнено(Данные.Договор);
		СтруктураИдУсловийПродаж = Новый Структура;
		СтруктураИдУсловийПродаж.Вставить("Организация", Данные.Организация);
		СтруктураИдУсловийПродаж.Вставить("ВидЦены", ВидЦены);
		СтруктураИдУсловийПродаж.Вставить("Партнер", Данные.Партнер);
		СтруктураИдУсловийПродаж.Вставить("Соглашение", Данные.Соглашение);
		СтруктураИдУсловийПродаж.Вставить("Контрагент", Данные.Контрагент);
		СтруктураИдУсловийПродаж.Вставить("Договор", ?(ЕстьДоговор, Данные.Договор,
			Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
		МобильноеЗадание.ДоговорКлиента = ИдентификаторУсловияПродаж(СтруктураИдУсловийПродаж);
	Иначе
		МобильноеЗадание.ДоговорКлиента = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	КонецЕсли;
	
	// Данные ТЧ "Товары".
	Если Данные.Товары.Количество() > 0 Тогда
		Для Каждого СтрокаТЧ Из Данные.Товары Цикл
			МобильноеЗаданиеТовары = ФабрикаXDTO.Создать(ТипОбъектаТовары);
			Для Каждого Свойство Из МобильноеЗаданиеТовары.Свойства() Цикл
				Если ОбщегоНазначения.ЗначениеСсылочногоТипа(СтрокаТЧ[СокрЛП(Свойство)]) Тогда
					МобильноеЗаданиеТовары[СокрЛП(Свойство)] = Сериализатор.XMLСтрока(СтрокаТЧ[СокрЛП(Свойство)]);
				Иначе
					МобильноеЗаданиеТовары[СокрЛП(Свойство)] = СтрокаТЧ[СокрЛП(Свойство)];
				КонецЕсли;
			КонецЦикла;
			СтруктураПоискаСсылки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
			СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			Если СтруктураПоискаСсылки.ХарактеристикиИспользуются
				И НЕ ЗначениеЗаполнено(СтруктураПоискаСсылки.Характеристика) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторНоменклатуры = СокрЛП(СтрокаТЧ.Номенклатура.УникальныйИдентификатор());
			ИдентификаторХарактеристики = ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика),
			СокрЛП(СтрокаТЧ.Характеристика.УникальныйИдентификатор()), "");
			Если СтруктураПоискаСсылки.ХарактеристикиИспользуются Тогда
				МобильноеЗаданиеТовары.Номенклатура = ИдентификаторОбъектаМП(ИдентификаторНоменклатуры,
					ИдентификаторХарактеристики, "");
			Иначе
				МобильноеЗаданиеТовары.Номенклатура = ИдентификаторНоменклатуры;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
				ИдУпаковки = Сериализатор.XMLСтрока(СтрокаТЧ.Упаковка);
				Если ТипЗнч(СтрокаТЧ.Упаковка.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					СоответствиеУпаковки = ИдУпаковки;
				Иначе
					СоответствиеУпаковки = ИдентификаторОбъектаМП(ИдентификаторНоменклатуры, ИдентификаторХарактеристики, ИдУпаковки);
				КонецЕсли;
			Иначе
				ИдУпаковки = Сериализатор.XMLСтрока(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ЕдиницаИзмерения"));
				СоответствиеУпаковки = ИдентификаторОбъектаМП(ИдентификаторНоменклатуры, ИдентификаторХарактеристики, ИдУпаковки);
			КонецЕсли;
			МобильноеЗаданиеТовары.Упаковка = СоответствиеУпаковки;
			
			МобильноеЗадание.Товары.Добавить(МобильноеЗаданиеТовары);
		КонецЦикла;
	КонецЕсли;
	
	// Данные ТЧ "Задачи".
	Если Данные.Задачи.Количество() > 0 Тогда
		Для Каждого ЭлементСписка Из Данные.Задачи Цикл
			МобильноеЗаданиеЗадачи = ФабрикаXDTO.Создать(ТипОбъектаЗадачи);
			ЗаполнитьЗначенияСвойств(МобильноеЗаданиеЗадачи, ЭлементСписка);
			МобильноеЗадание.Задачи.Добавить(МобильноеЗаданиеЗадачи);
		КонецЦикла;
	КонецЕсли;

	// Данные ТЧ "ДолгиПоЗаказам".
	Если Данные.ДолгиПоЗаказам.Количество() > 0 Тогда
		Для Каждого СтрокаТЧ Из Данные.ДолгиПоЗаказам Цикл
			МобильноеЗаданиеДолгиПоЗаказам = ФабрикаXDTO.Создать(ТипОбъектаДолгиПоЗаказам);
			Для Каждого Свойство Из МобильноеЗаданиеДолгиПоЗаказам.Свойства() Цикл
				Если ОбщегоНазначения.ЗначениеСсылочногоТипа(СтрокаТЧ[СокрЛП(Свойство)]) Тогда
					МобильноеЗаданиеДолгиПоЗаказам[СокрЛП(Свойство)] = Сериализатор.XMLСтрока(СтрокаТЧ[СокрЛП(Свойство)]);
				Иначе
					МобильноеЗаданиеДолгиПоЗаказам[СокрЛП(Свойство)] = СтрокаТЧ[СокрЛП(Свойство)];
				КонецЕсли;
			КонецЦикла;
			МобильноеЗадание.ДолгиПоЗаказам.Добавить(МобильноеЗаданиеДолгиПоЗаказам);
		КонецЦикла;
	КонецЕсли;
	
	// Данные ТЧ "РасшифровкаДебиторскойЗадолженности".
	Если Данные.РасшифровкаДебиторскойЗадолженности.Количество() > 0 Тогда
		Для Каждого СтрокаТЧ Из Данные.РасшифровкаДебиторскойЗадолженности Цикл
			МобильноеЗаданиеРасшифровка = ФабрикаXDTO.Создать(ТипОбъектаРасшифровка);
			Для Каждого Свойство Из МобильноеЗаданиеРасшифровка.Свойства() Цикл
				Если ОбщегоНазначения.ЗначениеСсылочногоТипа(СтрокаТЧ[СокрЛП(Свойство)]) Тогда
					МобильноеЗаданиеРасшифровка[СокрЛП(Свойство)] = Сериализатор.XMLСтрока(СтрокаТЧ[СокрЛП(Свойство)]);
				Иначе
					МобильноеЗаданиеРасшифровка[СокрЛП(Свойство)] = СтрокаТЧ[СокрЛП(Свойство)];
				КонецЕсли;
			КонецЦикла;
			МобильноеЗадание.РасшифровкаДебиторскойЗадолженности.Добавить(МобильноеЗаданиеРасшифровка);
		КонецЦикла;
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, МобильноеЗадание);
КонецПроцедуры

Процедура ЗаписатьИерархиюУпаковок(ЗаписьXML, ВыгруженныеОбъекты, СтруктураЗаписиУпаковки)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	УпаковкиНоменклатуры = УпаковкиНоменклатуры(СтруктураЗаписиУпаковки.НоменклатураСсылка,
		СтруктураЗаписиУпаковки.УпаковкаСсылка);
	
	Если УпаковкиНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока УпаковкиНоменклатуры.Следующий() Цикл
		
		ИдУпаковки = СокрЛП(УпаковкиНоменклатуры.УпаковкаСсылка.УникальныйИдентификатор());
		Если ТипЗнч(УпаковкиНоменклатуры.УпаковкаВладелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			СоответствиеУпаковки = СокрЛП(УпаковкиНоменклатуры.УпаковкаСсылка.УникальныйИдентификатор());
		Иначе
			СоответствиеУпаковки = ИдентификаторОбъектаМП(СтруктураЗаписиУпаковки.ИдНоменклатуры,
					СтруктураЗаписиУпаковки.ИдХарактеристики, ИдУпаковки);
		КонецЕсли;
		Если ВыгруженныеОбъекты.Получить(СоответствиеУпаковки) = Неопределено Тогда
			
			СтруктураУпаковки = СтруктураУпаковки();
			СтруктураУпаковки.Ref = СоответствиеУпаковки;
			СтруктураУпаковки.Owner = СтруктураЗаписиУпаковки.НоменклатураМП;
			СтруктураУпаковки.Description = СокрЛП(УпаковкиНоменклатуры.УпаковкаСсылка);
			СтруктураУпаковки.ERPКод = ИдУпаковки;
			СтруктураУпаковки.НаименованиеПолное = СтруктураУпаковки.Description;
			
			СтруктураУпаковки.DeletionMark = УпаковкиНоменклатуры.ПометкаУдаления;
			СтруктураУпаковки.Коэффициент = УпаковкиНоменклатуры.Коэффициент;
			СтруктураУпаковки.Вес = УпаковкиНоменклатуры.Вес;
			
			Если НЕ ЗначениеЗаполнено(УпаковкиНоменклатуры.Родитель) Тогда
				СтруктураУпаковки.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			Иначе
				СтруктураУпаковки.Parent = СокрЛП(УпаковкиНоменклатуры.Родитель.УникальныйИдентификатор());
			КонецЕсли;
			
			
			
			Если ЗначениеЗаполнено(УпаковкиНоменклатуры.ЕдиницаИзмерения) Тогда
				СтруктураУпаковки.ЕдиницаИзмерения =
					СокрЛП(УпаковкиНоменклатуры.ЕдиницаИзмерения.УникальныйИдентификатор());
				Если ВыгруженныеОбъекты.Получить(УпаковкиНоменклатуры.ЕдиницаИзмерения) = Неопределено Тогда
					
					СтруктураЕдиницыИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЕдиницыИзмерения();
					СтруктураЕдиницыИзмерения.Ref = СокрЛП(УпаковкиНоменклатуры.ЕдиницаИзмерения.УникальныйИдентификатор());
					СтруктураЕдиницыИзмерения.DeletionMark = УпаковкиНоменклатуры.ЕдиницаИзмеренияПометкаУдаления;
					СтруктураЕдиницыИзмерения.Description = УпаковкиНоменклатуры.ЕдиницаИзмеренияНаименование;
					СтруктураЕдиницыИзмерения.Code = УпаковкиНоменклатуры.ЕдиницаИзмеренияКод;
					СтруктураЕдиницыИзмерения.PredefinedDataName = УпаковкиНоменклатуры.ЕдиницаИзмеренияИмяПредопределенныхДанных;
					СтруктураЕдиницыИзмерения.МеждународноеСокращение = УпаковкиНоменклатуры.ЕдиницаИзмеренияМеждународноеСокращение;
					СтруктураЕдиницыИзмерения.НаименованиеПолное = УпаковкиНоменклатуры.ЕдиницаИзмеренияНаименованиеПолное;
					
					ЗаписатьСправочник(ЗаписьXML, СтруктураЕдиницыИзмерения, "ЕдиницыИзмерения");
					
					ВыгруженныеОбъекты.Вставить(УпаковкиНоменклатуры.ЕдиницаИзмерения, УпаковкиНоменклатуры.ЕдиницаИзмерения);
				КонецЕсли;
			Иначе
				СтруктураУпаковки.ЕдиницаИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(УпаковкиНоменклатуры.ВесЕдиницаИзмерения) Тогда
				СтруктураУпаковки.ВесЕдиницаИзмерения =
					СокрЛП(УпаковкиНоменклатуры.ВесЕдиницаИзмерения.УникальныйИдентификатор());
				Если ВыгруженныеОбъекты.Получить(УпаковкиНоменклатуры.ВесЕдиницаИзмерения) = Неопределено Тогда
					
					СтруктураЕдиницыИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЕдиницыИзмерения();
					СтруктураЕдиницыИзмерения.Ref = СокрЛП(УпаковкиНоменклатуры.ВесЕдиницаИзмерения.УникальныйИдентификатор());
					СтруктураЕдиницыИзмерения.DeletionMark = УпаковкиНоменклатуры.ВесЕдиницаИзмеренияПометкаУдаления;
					СтруктураЕдиницыИзмерения.Description = УпаковкиНоменклатуры.ВесЕдиницаИзмеренияНаименование;
					СтруктураЕдиницыИзмерения.Code = УпаковкиНоменклатуры.ВесЕдиницаИзмеренияКод;
					СтруктураЕдиницыИзмерения.PredefinedDataName = УпаковкиНоменклатуры.ВесЕдиницаИзмеренияИмяПредопределенныхДанных;
					СтруктураЕдиницыИзмерения.МеждународноеСокращение =
						УпаковкиНоменклатуры.ВесЕдиницаИзмеренияМеждународноеСокращение;
					СтруктураЕдиницыИзмерения.НаименованиеПолное = УпаковкиНоменклатуры.ВесЕдиницаИзмеренияНаименованиеПолное;
					
					ЗаписатьСправочник(ЗаписьXML, СтруктураЕдиницыИзмерения, "ЕдиницыИзмерения");
					
					ВыгруженныеОбъекты.Вставить(УпаковкиНоменклатуры.ВесЕдиницаИзмерения, УпаковкиНоменклатуры.ВесЕдиницаИзмерения);
				КонецЕсли;
			Иначе
				СтруктураУпаковки.ВесЕдиницаИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			КонецЕсли;
			
			ЗаписатьСправочник(ЗаписьXML, СтруктураУпаковки, "УпаковкиНоменклатуры");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьИндивидуальныеЦеныКлиента(ЗаписьXML, УзелОбмена, ВыгруженныеОбъекты,
	ТаблицаСоответствийДляИндивидуальныхЦен)
	
	Для Каждого СтрокаСоглашения ИЗ ТаблицаСоответствийДляИндивидуальныхЦен Цикл
		ТаблицаИндивидуальныхЦен = ИндивидуальныйПрайс(УзелОбмена, СтрокаСоглашения);
		Для каждого СтрокаПрайсЛиста Из ТаблицаИндивидуальныхЦен Цикл
			ВыгрузитьОбъектыСсылочногоТипа(ЗаписьXML, ВыгруженныеОбъекты, СтрокаПрайсЛиста, УзелОбмена);
			ЗаписатьСтрокуИндивидуальныхЦенКлиента(ЗаписьXML, СтрокаПрайсЛиста);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьИнформациюПоСтатусуЗаданияТорговомуПредставителю(Сообщение, Знач ЗаданиеТорговомуПредставителю)
	
	Структура = Новый Структура;
	Структура.Вставить("ref", СокрЛП(ЗаданиеТорговомуПредставителю.Ссылка.УникальныйИдентификатор()));
	Структура.Вставить("Статус", "Закрыт");
	Структура.Вставить("ПечатнаяФормаЗаказа", Символы.НПП);
	
	Сообщение.Добавить(Структура);
КонецПроцедуры

Процедура ЗаписатьИнформациюПоСтатусуЗаказаКлиента(Сообщение, Знач ЗаказКлиента, Знач Изменен = Ложь, Ошибка = Ложь)
	
	ИнформацияПоСтатусуЗаказа = Новый Структура;
	ИнформацияПоСтатусуЗаказа.Вставить("ref", "");
	ИнформацияПоСтатусуЗаказа.Вставить("Статус", "");
	ИнформацияПоСтатусуЗаказа.Вставить("Проведен", Ложь);
	ИнформацияПоСтатусуЗаказа.Вставить("ПометкаУдаления", Ложь);
	ИнформацияПоСтатусуЗаказа.Вставить("Состояние", "");
	ИнформацияПоСтатусуЗаказа.Вставить("Просрочен", Ложь);
	ИнформацияПоСтатусуЗаказа.Вставить("ДатаОтгрузки", Дата("00010101000000"));
	ИнформацияПоСтатусуЗаказа.Вставить("Изменен", Ложь);
	ИнформацияПоСтатусуЗаказа.Вставить("СуммаДолгаПоДокументуУП", 0);
	
	ЗаказыКлиентов = Новый Массив;
	ЗаказыКлиентов.Добавить(ЗаказКлиента);
	РезультатЗапросаПоЗаказуКлиентаИБ = РезультатЗапросаПоДокументамЗаказКлиента(ЗаказыКлиентов);
	Если РезультатЗапросаПоЗаказуКлиентаИБ.Пустой() Тогда
		ИнформацияПоСтатусуЗаказа.Вставить("ПечатнаяФормаДокумента",
			Новый ХранилищеЗначения(Новый ТабличныйДокумент, Новый СжатиеДанных(9)));
		Сообщение.Добавить(ИнформацияПоСтатусуЗаказа);
		Возврат;
	КонецЕсли;
	
	ЗаказКлиентаИБ = РезультатЗапросаПоЗаказуКлиентаИБ.Выбрать();
	ЗаказКлиентаИБ.Следующий();
	
	ИнформацияПоСтатусуЗаказа.Вставить("ref", СокрЛП(ЗаказКлиентаИБ.Ссылка.УникальныйИдентификатор()));
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ЗаказКлиента);
	ТекущаяСтруктураТипов = Новый Соответствие;
	ТекущаяСтруктураТипов.Вставить("Документ.ЗаказКлиента", ОбъектыПечати.ВыгрузитьЗначения());
	ПараметрыВывода = Новый Структура("КодЯзыкаДляМногоязычныхПечатныхФорм", Локализация.ПолучитьЯзыкФормированияПечатныхФорм());	
	ТабличныйДокумент = Обработки.ПечатьЗаказовНаТоварыУслуги.СформироватьПечатнуюФормуЗаказаКлиента(
		ТекущаяСтруктураТипов, ОбъектыПечати, Неопределено, ПараметрыВывода);
	ИнформацияПоСтатусуЗаказа.Вставить("ПечатнаяФормаДокумента",
		Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	Если НЕ Ошибка Тогда
		
		Если ЗначениеЗаполнено(ЗаказКлиентаИБ.Статус) Тогда
			СтатусИндекс = Перечисления.СтатусыЗаказовКлиентов.Индекс(ЗаказКлиента.Статус);
			Статус = Метаданные.Перечисления.СтатусыЗаказовКлиентов.ЗначенияПеречисления.Получить(СтатусИндекс).Имя;
		Иначе
			Статус = Символы.НПП;
		КонецЕсли;
		СостояниеЗаказа = Новый Структура;
		СостояниеЗаказа.Вставить("Состояние", Перечисления.СостоянияЗаказовКлиентов.ПустаяСсылка());
		СостояниеЗаказа.Вставить("СостояниеПросрочено", Ложь);
		СостояниеЗаказа.Вставить("СуммаДолга", 0);
		СостояниеЗаказа.Вставить("СуммаКОплате", 0);
		
		Документы.ЗаказКлиента.РассчитатьСостояние(ЗаказКлиентаИБ.Ссылка, ЗаказКлиентаИБ.Договор, СостояниеЗаказа);
		
		Если ЗначениеЗаполнено(СостояниеЗаказа.Состояние) Тогда
			СостояниеИндекс = Перечисления.СостоянияЗаказовКлиентов.Индекс(СостояниеЗаказа.Состояние);
			Состояние = Метаданные.Перечисления.СостоянияЗаказовКлиентов.ЗначенияПеречисления.Получить(СостояниеИндекс).Имя;
		Иначе
			Состояние = Символы.НПП;
		КонецЕсли;
		
		ИнформацияПоСтатусуЗаказа.Вставить("Статус", СокрЛП(Статус));
		ИнформацияПоСтатусуЗаказа.Вставить("Проведен", ЗаказКлиентаИБ.Проведен);
		ИнформацияПоСтатусуЗаказа.Вставить("ПометкаУдаления", ЗаказКлиентаИБ.ПометкаУдаления);
		ИнформацияПоСтатусуЗаказа.Вставить("Состояние", СокрЛП(Состояние));
		ИнформацияПоСтатусуЗаказа.Вставить("Просрочен", СостояниеЗаказа.СостояниеПросрочено);
		ИнформацияПоСтатусуЗаказа.Вставить("ДатаОтгрузки", ЗаказКлиентаИБ.ДатаОтгрузки);
		ИнформацияПоСтатусуЗаказа.Вставить("Изменен", Изменен);
		ИнформацияПоСтатусуЗаказа.Вставить("СуммаДокументаУП", ЗаказКлиентаИБ.СуммаДокумента);
		ИнформацияПоСтатусуЗаказа.Вставить("СуммаНДСДокументаУП", ЗаказКлиентаИБ.СуммаНДС);
		
		Если ЗаказКлиентаИБ.ПорядокРасчетовДоговор Тогда
			СуммаДолгаПоДокументуУП = Мин(ЗаказКлиентаИБ.СуммаДокумента, СостояниеЗаказа.СуммаКОплате);
			//Если ЗаказКлиентаИБ.УстановленСрокОплаты Тогда
			//	ИнформацияПоСтатусуЗаказа.Вставить("ДатаСледующегоПлатежа", ЗаказКлиентаИБ.СрокОплаты);
			//КонецЕсли;
		Иначе
			СуммаДолгаПоДокументуУП = СостояниеЗаказа.СуммаДолга;
			ИнформацияПоСтатусуЗаказа.Вставить("ДатаСледующегоПлатежа", СледущаяДатаПлатежаПоЗаказу(ЗаказКлиентаИБ.Ссылка));
		КонецЕсли;
		
		ИнформацияПоСтатусуЗаказа.Вставить("СуммаДолгаПоДокументуУП", СуммаДолгаПоДокументуУП);
		
		Если ЗаказКлиентаИБ.СуммаПредоплаты > 0 Тогда
			ИнформацияПоСтатусуЗаказа.Вставить("ДатаПредоплатыПоДокументу", ДатаПредоплатыПоЗаказу(ЗаказКлиентаИБ.Ссылка));
			ИнформацияПоСтатусуЗаказа.Вставить("СуммаПредоплатыПоДокументу", ЗаказКлиентаИБ.СуммаПредоплаты);
		КонецЕсли;
		
	КонецЕсли;

	Сообщение.Добавить(ИнформацияПоСтатусуЗаказа);
КонецПроцедуры

Процедура ЗаписатьИнформациюПоСтатусуЗаявкиНаВозврат(Сообщение, Знач ЗаявкаНаВозвратТоваров, Знач Изменен = Ложь, Ошибка = Ложь)
	
	ИнформацияПоСтатусу = Новый Структура;
	ИнформацияПоСтатусу.Вставить("ref", "");
	ИнформацияПоСтатусу.Вставить("Статус", "");
	ИнформацияПоСтатусу.Вставить("Проведен", Ложь);
	ИнформацияПоСтатусу.Вставить("ПометкаУдаления", Ложь);
	ИнформацияПоСтатусу.Вставить("Состояние", "");
	ИнформацияПоСтатусу.Вставить("ДатаПоступления", Дата("00010101000000"));
	ИнформацияПоСтатусу.Вставить("ДатаОтгрузки", Дата("00010101000000"));
	ИнформацияПоСтатусу.Вставить("Изменен", Ложь);
	ИнформацияПоСтатусу.Вставить("СуммаДокументаУП", 0);
	ИнформацияПоСтатусу.Вставить("СуммаНДСДокументаУП", 0);
	ИнформацияПоСтатусу.Вставить("СуммаДолгаПоДокументуУП", 0);
	
	ЗаявкиНаВозвратТоваров = Новый Массив;
	ЗаявкиНаВозвратТоваров.Добавить(ЗаявкаНаВозвратТоваров);
	РезультатЗапросаПоЗаявкеИБ = РезультатЗапросаПоДокументамЗаявкаНаВозврат(ЗаявкиНаВозвратТоваров);
	
	Если РезультатЗапросаПоЗаявкеИБ.Пустой() Тогда
		ИнформацияПоСтатусу.Вставить("ПечатнаяФормаДокумента",
			Новый ХранилищеЗначения(Новый ТабличныйДокумент, Новый СжатиеДанных(9)));
		Сообщение.Добавить(ИнформацияПоСтатусу);
		Возврат;
	КонецЕсли;
	
	ЗаявкаНаВозвратТоваровИБ = РезультатЗапросаПоЗаявкеИБ.Выбрать();
	ЗаявкаНаВозвратТоваровИБ.Следующий();
	
	ИнформацияПоСтатусу.Вставить("ref", СокрЛП(ЗаявкаНаВозвратТоваровИБ.Ссылка.УникальныйИдентификатор()));
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ЗаявкаНаВозвратТоваров);
	ТекущаяСтруктураТипов = Новый Соответствие;
	ТекущаяСтруктураТипов.Вставить("Документ.ЗаявкаНаВозвратТоваровОтКлиента", ОбъектыПечати.ВыгрузитьЗначения());
	ТабличныйДокумент =
		Обработки.ПечатьЗаявленияНаВозвратТоваровОтКлиента.СформироватьПечатнуюФормуЗаявленияНаВозвратТоваровОтКлиента(
			ТекущаяСтруктураТипов, ОбъектыПечати, Неопределено);
	ИнформацияПоСтатусу.Вставить("ПечатнаяФормаДокумента",
		Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	Если НЕ Ошибка Тогда
		
		Если ЗначениеЗаполнено(ЗаявкаНаВозвратТоваров.Статус) Тогда
			СтатусИндекс = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Индекс(ЗаявкаНаВозвратТоваров.Статус);
			Статус = Метаданные.Перечисления.СтатусыЗаказовКлиентов.ЗначенияПеречисления.Получить(СтатусИндекс).Имя;
		Иначе
			Статус = Символы.НПП;
		КонецЕсли;
		
		СостояниеЗаявки = Новый Структура;
		СостояниеЗаявки.Вставить("Состояние", Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка());
		СостояниеЗаявки.Вставить("СуммаДолга", 0);
		СостояниеЗаявки.Вставить("СуммаКОплате", 0);
		
		Документы.ЗаявкаНаВозвратТоваровОтКлиента.РассчитатьСостояние(ЗаявкаНаВозвратТоваровИБ.Ссылка,
			ЗаявкаНаВозвратТоваровИБ.Договор, СостояниеЗаявки);
		
		Если ЗначениеЗаполнено(СостояниеЗаявки.Состояние) Тогда
			СостояниеИндекс = Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Индекс(СостояниеЗаявки.Состояние);
			Состояние = Метаданные.Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ЗначенияПеречисления.Получить(
				СостояниеИндекс).Имя;
		Иначе
			Состояние = Символы.НПП;
		КонецЕсли;
		
		ИнформацияПоСтатусу.Вставить("Статус", СокрЛП(Статус));
		ИнформацияПоСтатусу.Вставить("Проведен", ЗаявкаНаВозвратТоваровИБ.Проведен);
		ИнформацияПоСтатусу.Вставить("ПометкаУдаления", ЗаявкаНаВозвратТоваровИБ.ПометкаУдаления);
		ИнформацияПоСтатусу.Вставить("Состояние", СокрЛП(Состояние));
		ИнформацияПоСтатусу.Вставить("ДатаПоступления", ЗаявкаНаВозвратТоваровИБ.ДатаПоступления);
		ИнформацияПоСтатусу.Вставить("ДатаОтгрузки", ЗаявкаНаВозвратТоваровИБ.ДатаОтгрузки);
		ИнформацияПоСтатусу.Вставить("Изменен", Изменен);
		ИнформацияПоСтатусу.Вставить("СуммаДокументаУП", ЗаявкаНаВозвратТоваровИБ.СуммаДокумента);
		ИнформацияПоСтатусу.Вставить("СуммаНДСДокументаУП", ЗаявкаНаВозвратТоваровИБ.СуммаНДСДокумента);
		
		Если ЗаявкаНаВозвратТоваровИБ.ПорядокРасчетовДоговор Тогда
			СуммаДолгаПоДокументуУП = Мин(ЗаявкаНаВозвратТоваровИБ.СуммаДокумента, СостояниеЗаявки.СуммаКОплате);
		Иначе
			СуммаДолгаПоДокументуУП = СостояниеЗаявки.СуммаДолга;
		КонецЕсли;
		ИнформацияПоСтатусу.Вставить("СуммаДолгаПоДокументуУП", СуммаДолгаПоДокументуУП);
	КонецЕсли;

	Сообщение.Добавить(ИнформацияПоСтатусу);
КонецПроцедуры

Процедура ЗаписатьПечатнуюФормуЗаказаПоЗаданию(ЗаписьXML, ЗаданиеТорговомуПредставителю)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК СсылкаНаЗаказ
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.ДокументОснование = &ЗаданиеТорговомуПредставителю");

	Запрос.УстановитьПараметр("ЗаданиеТорговомуПредставителю", ЗаданиеТорговомуПредставителю.Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("ref", СокрЛП(ЗаданиеТорговомуПредставителю.Ссылка.УникальныйИдентификатор()));
	Структура.Вставить("Статус", "Закрыт");
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(Выборка.СсылкаНаЗаказ);
	
	ТекущаяСтруктураТипов = Новый Соответствие;
	ТекущаяСтруктураТипов.Вставить("Документ.ЗаказКлиента", ОбъектыПечати.ВыгрузитьЗначения());
	
	ПараметрыВывода = Новый Структура("КодЯзыкаДляМногоязычныхПечатныхФорм", Локализация.ПолучитьЯзыкФормированияПечатныхФорм());
	ТабличныйДокумент = Обработки.ПечатьЗаказовНаТоварыУслуги.СформироватьПечатнуюФормуЗаказаКлиента(
		ТекущаяСтруктураТипов, ОбъектыПечати, Неопределено, ПараметрыВывода);
	

	Структура.Вставить("ПечатнаяФормаЗаказа", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
		
	URIИмен = МобильноеПриложениеЗаказыКлиентовПовтИсп.URIПространстваИмен();
	
	ЛокальноеИмяОбъекта = "JobTargetStatus";
	
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, ЛокальноеИмяОбъекта);
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, Структура);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
КонецПроцедуры

Процедура ЗаписатьПравилаПродаж(ЗаписьXML, СтрокаТаблицы)
	
	URIИмен = МобильноеПриложениеЗаказыКлиентовПовтИсп.URIПространстваИмен();
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "InformationRegisterRecord.ПравилаПродаж");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектОбмена.Клиент = СокрЛП(СтрокаТаблицы.ПартнерКВыгрузке.УникальныйИдентификатор());
	ОбъектОбмена.ДоговорКлиента = СтрокаТаблицы.ИдУсловиеПродаж;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
КонецПроцедуры

Процедура ЗаписатьРодителяНоменклатуры(ЗаписьXML, РодительНоменклатуры)
	
	СтруктураРодителяНоменклатуры = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураРодителяНоменклатуры();
	
	СтрокаЗапросаРеквизитов = "ЭтоГруппа, ПометкаУдаления, Наименование, Родитель, Код";
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РодительНоменклатуры, СтрокаЗапросаРеквизитов);
	
	СтруктураРодителяНоменклатуры.IsFolder = РеквизитыОбъекта.ЭтоГруппа;
	СтруктураРодителяНоменклатуры.Ref = СокрЛП(РодительНоменклатуры.УникальныйИдентификатор());
	СтруктураРодителяНоменклатуры.DeletionMark = РеквизитыОбъекта.ПометкаУдаления;
	СтруктураРодителяНоменклатуры.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Родитель) Тогда
		СтруктураРодителяНоменклатуры.Parent = СокрЛП(РеквизитыОбъекта.Родитель.УникальныйИдентификатор());
	КонецЕсли;
	СтруктураРодителяНоменклатуры.Code = РеквизитыОбъекта.Код;
	СтруктураРодителяНоменклатуры.Description = РеквизитыОбъекта.Наименование;
	СтруктураРодителяНоменклатуры.ERPКодНоменклатура = СтруктураРодителяНоменклатуры.Ref;
	СтруктураРодителяНоменклатуры.СтрокаПоиска = СокрЛП(РеквизитыОбъекта.Код)+СокрЛП(РеквизитыОбъекта.Наименование);
	
	ЗаписатьСправочник(ЗаписьXML, СтруктураРодителяНоменклатуры, "Номенклатура");
КонецПроцедуры

Процедура ЗаписатьСегментыПартнера(Партнер, УзелОбмена)
	
	ИспользуютсяСегментыПартнеров = Константы.ИспользоватьСегментыПартнеров.Получить();
	
	Если Не ИспользуютсяСегментыПартнеров Тогда
		Возврат;
	КонецЕсли;
	
	СхемаСегментов = ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.ПолучитьМакет("ДоступныеСегментыПартнеров");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСегментов)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаСегментов.НастройкиПоУмолчанию);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	
	НастройкиКомпоновщикаИзНастройкиОбмена = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПолучитьНастройкиОбмена(УзелОбмена);
	
	ПолеСегментПартнеров = Новый ПолеКомпоновкиДанных("СегментПартнеров");
	
	ИспользуетсяОтборПоСегменту = Ложь;
	Если НЕ НастройкиКомпоновщикаИзНастройкиОбмена = Неопределено Тогда
		МассивУдаляемых = Новый Массив;
		Для каждого ЭлементОтбора ИЗ НастройкиКомпоновщикаИзНастройкиОбмена.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ПолеСегментПартнеров Тогда
					НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора,
					"ИдентификаторПользовательскойНастройки, ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Использование");
					ИспользуетсяОтборПоСегменту = Истина;
				КонецЕсли;
				Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
					МассивУдаляемых.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого КУдалению Из МассивУдаляемых Цикл
			Отбор.Элементы.Удалить(КУдалению);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ИспользуетсяОтборПоСегменту Тогда
		Возврат;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаСегментов, КомпоновщикНастроек.ПолучитьНастройки(),
		,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаСегментов = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаСегментов);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ПроцессорВывода.ЗакончитьВывод();
	
	Если ТаблицаСегментов.Количество()>0 Тогда
		ЗаписатьДоступныеСегментыПартнеров(Партнер, ТаблицаСегментов.ВыгрузитьКолонку("СегментПартнеров"));
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьСтрокуИндивидуальныхЦенКлиента(ЗаписьXML, Знач СтрокаПрайсЛиста)
	
	URIИмен = МобильноеПриложениеЗаказыКлиентовПовтИсп.URIПространстваИмен();
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "InformationRegisterRecord.ЦеныНоменклатурыПоДоговорамКлиентов");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтрокаПрайсЛиста);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
КонецПроцедуры

Процедура ЗаписатьСтрокуОстатковXML(ЗаписьXML, СтрокаОстатков)

	URIИмен = МобильноеПриложениеЗаказыКлиентовПовтИсп.URIПространстваИмен();
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "InformationRegisterRecord.ТоварыНаСкладах");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектОбмена.Номенклатура = СтрокаОстатков.ref;
	ОбъектОбмена.Склад = СтрокаОстатков.СкладRef;
	ОбъектОбмена.ВНаличии = СтрокаОстатков.ДоступныйОстаток;
	ОбъектОбмена.СостояниеОстаткаИндекс = СтрокаОстатков.СостояниеОстаткаИндекс;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
КонецПроцедуры

Процедура ЗаписатьСтрокуПрайсЛиста(ЗаписьXML, СтрокаПрайсЛиста)
	
	URIИмен = МобильноеПриложениеЗаказыКлиентовПовтИсп.URIПространстваИмен();
	ТипОбъекта = ФабрикаXDTO.Тип(URIИмен, "InformationRegisterRecord.ЦеныНоменклатуры");
	ОбъектОбмена = ФабрикаXDTO.Создать(ТипОбъекта);
	
	ЗаполнитьЗначенияСвойств(ОбъектОбмена, СтрокаПрайсЛиста);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
КонецПроцедуры

Процедура ЗаполнитьДанныеЗаданияПоНастройкамМП(ЗаданиеТорговомуПредставителю, НастройкиЗадания)
			
	ИспользованиеХарактеристик = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	ДетализироватьЗадания = Константы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Получить();
	
	ЗаполнятьЗаданияПоДаннымИсторииПродаж = НастройкиЗадания.ЗаполнятьЗаданияПоДаннымИсторииПродаж;
	ПолучатьИнформациюОРасчетахСКлиентами = НастройкиЗадания.ПолучатьИнформациюОРасчетахСКлиентами;
		
	Если ЗаполнятьЗаданияПоДаннымИсторииПродаж И ДетализироватьЗадания Тогда			
		
		НачалоПериодаАнализаИсторииПродаж = НастройкиЗадания.НачалоПериодаАнализаИсторииПродаж;
		КонецПериодаАнализаИсторииПродаж = НастройкиЗадания.КонецПериодаАнализаИсторииПродаж;
		
		ЗаданиеТорговомуПредставителю.ЗаполнитьПоИсторииПродаж("день",
			НачалоПериодаАнализаИсторииПродаж, КонецПериодаАнализаИсторииПродаж, ИспользованиеХарактеристик);
	КонецЕсли;

	Если ПолучатьИнформациюОРасчетахСКлиентами Тогда	
		ЗаданиеТорговомуПредставителю.ЗаполнитьДанныеОДебиторскойЗадолженности();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьИнформациюПоДоставке(ДокументОбъект, МобильныеДанные, ТипДокумента)
	
	АдресДоставки = МобильныеДанные.АдресДоставки;
	Если НЕ ЗначениеЗаполнено(АдресДоставки) И ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(ДокументОбъект.Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДоставки) Тогда
		ДокументОбъект.АдресДоставки = АдресДоставки;
		ОбщегоНазначенияУТВызовСервера.ЗаполнитьЗначенияПолейКИПоПредставлению(АдресДоставки,
			ДокументОбъект.АдресДоставкиЗначенияПолей);
	Иначе
		ДокументОбъект.АдресДоставки = НСтр("ru='<адрес не указан/>';uk='<адреса не вказана/>'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;
	
	ДокументОбъект.ВремяДоставкиС = МобильныеДанные.ВремяДоставкиС;
	ДокументОбъект.ВремяДоставкиПо = МобильныеДанные.ВремяДоставкиПо;
	ДокументОбъект.ДополнительнаяИнформацияПоДоставке = МобильныеДанные.ДополнительнаяИнформацияПоДоставке;
	
	Если ТипДокумента = 0 Тогда
		СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
	ИначеЕсли ТипДокумента = 1 Тогда
		СпособДоставки = Перечисления.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки;
	КонецЕсли;
	ДокументОбъект.СпособДоставки = ?(МобильныеДанные.Самовывоз, Перечисления.СпособыДоставки.Самовывоз,
		СпособДоставки);
КонецПроцедуры

Процедура ЗаполнитьСправочникСоглашенияПриИзменении(СоглашениеОбъект)

	СоглашениеОбъект.Менеджер = Пользователи.ТекущийПользователь();
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеСоглашенийСКлиентами")
		Или Пользователи.РолиДоступны("ОтклонениеОтУсловийПродаж") Тогда
		СоглашениеОбъект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
	Иначе
		СоглашениеОбъект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
	КонецЕсли;
	СоглашениеОбъект.НалогообложениеНДС = 
		ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(СоглашениеОбъект.Организация, , ТекущаяДатаСеанса());
	СоглашениеОбъект.ПорядокОплаты = 
		Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(
				СоглашениеОбъект.Валюта, СоглашениеОбъект.НалогообложениеНДС);
	СоглашениеОбъект.ГруппаФинансовогоУчета = 
		Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(СоглашениеОбъект.ПорядокОплаты);
	
	Если Не СоглашениеОбъект.ИспользуютсяДоговорыКонтрагентов Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
			ИЛИ СоглашениеОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			СоглашениеОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		Иначе
			СоглашениеОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ЗаменитьПартнераНаКлиента(Знач Строка)
	
	СтрокаЗамены = Строка;
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, НСтр("ru='Партнер';uk='Партнер'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		НСтр("ru='Клиент';uk='Клієнт'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, НСтр("ru='партнер';uk='партнер'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		НСтр("ru='клиент';uk='клієнт'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Возврат СтрокаЗамены;
КонецФункции

Функция ИдентификаторОбъектаМП(Знач ИдНоменклатуры, Знач ИдХарактеристики, Знач ИдУпаковки)
	
	ОбъектМП = СоответствиеОбъектаМП(ИдНоменклатуры, ИдХарактеристики, ИдУпаковки);
	
	Если ОбъектМП = Неопределено Тогда
		ОбъектМП = НовоеСоответствиеОбъектаМП(ИдНоменклатуры, ИдХарактеристики, ИдУпаковки);
	КонецЕсли;
	
	Возврат ОбъектМП;
КонецФункции

Функция ИдентификаторУпаковкиМП(ЗаписьXML, ВыгруженныеОбъекты, СтруктураЗаписиУпаковки)
	
	ИдУпаковки = СокрЛП(СтруктураЗаписиУпаковки.УпаковкаСсылка.УникальныйИдентификатор());
	СоответствиеУпаковки = ИдентификаторОбъектаМП(СтруктураЗаписиУпаковки.ИдНоменклатуры,
		СтруктураЗаписиУпаковки.ИдХарактеристики, ИдУпаковки);
	ЭтоЕдиницаИзмеренияВеса = СтруктураЗаписиУпаковки.Свойство("ЭтоЕдиницаИзмеренияВеса");
	
	Если ВыгруженныеОбъекты.Получить(СоответствиеУпаковки) = Неопределено Тогда
		
		СтруктураУпаковки = СтруктураУпаковки();
		СтруктураУпаковки.Ref = СоответствиеУпаковки;
		СтруктураУпаковки.Owner = СтруктураЗаписиУпаковки.НоменклатураМП;
		СтруктураУпаковки.Description = СокрЛП(СтруктураЗаписиУпаковки.УпаковкаСсылка);
		СтруктураУпаковки.ERPКод = ИдУпаковки;
		СтруктураУпаковки.НаименованиеПолное	= СтруктураУпаковки.Description;
		
		РезультатЗапросаПоУпаковке = РезультатЗапросаПоУпаковке(СтруктураЗаписиУпаковки.УпаковкаСсылка,
			СтруктураЗаписиУпаковки.Номенклатура);
		
		Если РезультатЗапросаПоУпаковке = Неопределено Тогда
			Возврат СоответствиеУпаковки;
		КонецЕсли;
		
		СтруктураУпаковки.DeletionMark = РезультатЗапросаПоУпаковке.ПометкаУдаления;
		СтруктураУпаковки.Коэффициент = РезультатЗапросаПоУпаковке.Коэффициент;
		Если СтруктураЗаписиУпаковки.УпаковкаСсылка = РезультатЗапросаПоУпаковке.ЕдиницаВеса Тогда
			СтруктураУпаковки.Вес = 1;
		ИначеЕсли СтруктураЗаписиУпаковки.УпаковкаСсылка = РезультатЗапросаПоУпаковке.ЕдиницаИзмеренияНоменклатуры Тогда
			СтруктураУпаковки.Вес = РезультатЗапросаПоУпаковке.ВесЕдиницыИзмерения;
		Иначе
			СтруктураУпаковки.Вес = РезультатЗапросаПоУпаковке.Вес;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РезультатЗапросаПоУпаковке.Родитель) Тогда
			СтруктураУпаковки.Parent = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
		Иначе
			СтруктураЗаписиУпаковкиМП = Новый Структура;
			СтруктураЗаписиУпаковкиМП.Вставить("УпаковкаСсылка", РезультатЗапросаПоУпаковке.Родитель);
			СтруктураЗаписиУпаковкиМП.Вставить("ИдНоменклатуры", СтруктураЗаписиУпаковки.ИдНоменклатуры);
			СтруктураЗаписиУпаковкиМП.Вставить("ИдХарактеристики", СтруктураЗаписиУпаковки.ИдХарактеристики);
			СтруктураЗаписиУпаковкиМП.Вставить("НоменклатураМП", СтруктураЗаписиУпаковки.НоменклатураМП);
			СтруктураЗаписиУпаковкиМП.Вставить("Номенклатура", СтруктураЗаписиУпаковки.Номенклатура);
			
			СтруктураУпаковки.Parent =
				ИдентификаторУпаковкиМП(ЗаписьXML, ВыгруженныеОбъекты, СтруктураЗаписиУпаковкиМП);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапросаПоУпаковке.ЕдиницаИзмерения) Тогда
			СтруктураУпаковки.ЕдиницаИзмерения = СокрЛП(РезультатЗапросаПоУпаковке.ЕдиницаИзмерения.УникальныйИдентификатор());
			
			Если ВыгруженныеОбъекты.Получить(РезультатЗапросаПоУпаковке.ЕдиницаИзмерения) = Неопределено Тогда
				
				СтруктураЕдиницыИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЕдиницыИзмерения();
				СтруктураЕдиницыИзмерения.Ref = СокрЛП(РезультатЗапросаПоУпаковке.ЕдиницаИзмерения.УникальныйИдентификатор());
				СтруктураЕдиницыИзмерения.DeletionMark = РезультатЗапросаПоУпаковке.ЕдиницаИзмеренияПометкаУдаления;
				СтруктураЕдиницыИзмерения.Description = РезультатЗапросаПоУпаковке.ЕдиницаИзмеренияНаименование;
				СтруктураЕдиницыИзмерения.Code = РезультатЗапросаПоУпаковке.ЕдиницаИзмеренияКод;
				СтруктураЕдиницыИзмерения.PredefinedDataName =
					РезультатЗапросаПоУпаковке.ЕдиницаИзмеренияИмяПредопределенныхДанных;
				СтруктураЕдиницыИзмерения.МеждународноеСокращение =
					РезультатЗапросаПоУпаковке.ЕдиницаИзмеренияМеждународноеСокращение;
				СтруктураЕдиницыИзмерения.НаименованиеПолное= РезультатЗапросаПоУпаковке.ЕдиницаИзмеренияНаименованиеПолное;
				
				ЗаписатьСправочник(ЗаписьXML, СтруктураЕдиницыИзмерения, "ЕдиницыИзмерения");
				
				ВыгруженныеОбъекты.Вставить(РезультатЗапросаПоУпаковке.ЕдиницаИзмерения,
				РезультатЗапросаПоУпаковке.ЕдиницаИзмерения);
			КонецЕсли;
		Иначе
			СтруктураУпаковки.ЕдиницаИзмерения = СокрЛП(СтруктураЗаписиУпаковки.УпаковкаСсылка.УникальныйИдентификатор());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатЗапросаПоУпаковке.ВесЕдиницаИзмерения) Тогда
			СтруктураУпаковки.ВесЕдиницаИзмерения =
				СокрЛП(РезультатЗапросаПоУпаковке.ВесЕдиницаИзмерения.УникальныйИдентификатор());
			Если ВыгруженныеОбъекты.Получить(РезультатЗапросаПоУпаковке.ВесЕдиницаИзмерения) = Неопределено Тогда
				
				СтруктураЕдиницыИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураЕдиницыИзмерения();
				СтруктураЕдиницыИзмерения.Ref = СокрЛП(РезультатЗапросаПоУпаковке.ВесЕдиницаИзмерения.УникальныйИдентификатор());
				СтруктураЕдиницыИзмерения.DeletionMark = РезультатЗапросаПоУпаковке.ВесЕдиницаИзмеренияПометкаУдаления;
				СтруктураЕдиницыИзмерения.Description = РезультатЗапросаПоУпаковке.ВесЕдиницаИзмеренияНаименование;
				СтруктураЕдиницыИзмерения.Code = РезультатЗапросаПоУпаковке.ВесЕдиницаИзмеренияКод;
				СтруктураЕдиницыИзмерения.PredefinedDataName =
					РезультатЗапросаПоУпаковке.ВесЕдиницаИзмеренияИмяПредопределенныхДанных;
				СтруктураЕдиницыИзмерения.МеждународноеСокращение =
					РезультатЗапросаПоУпаковке.ВесЕдиницаИзмеренияМеждународноеСокращение;
				СтруктураЕдиницыИзмерения.НаименованиеПолное= РезультатЗапросаПоУпаковке.ВесЕдиницаИзмеренияНаименованиеПолное;
				
				ЗаписатьСправочник(ЗаписьXML, СтруктураЕдиницыИзмерения, "ЕдиницыИзмерения");
				
				ВыгруженныеОбъекты.Вставить(РезультатЗапросаПоУпаковке.ЕдиницаИзмерения,
				РезультатЗапросаПоУпаковке.ЕдиницаИзмерения);
			КонецЕсли;
		Иначе
			Если ЭтоЕдиницаИзмеренияВеса Тогда
				СтруктураУпаковки.ВесЕдиницаИзмерения = СокрЛП(СтруктураЗаписиУпаковки.УпаковкаСсылка.УникальныйИдентификатор());
			Иначе
				СтруктураУпаковки.ВесЕдиницаИзмерения = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
		ЗаписатьСправочник(ЗаписьXML, СтруктураУпаковки, "УпаковкиНоменклатуры");
		ВыгруженныеОбъекты.Вставить(СоответствиеУпаковки, СокрЛП(СтруктураЗаписиУпаковки.УпаковкаСсылка));
	КонецЕсли;
	
	Возврат СоответствиеУпаковки;
КонецФункции

Функция ИдентификаторФайлаКартинки(ЗаписьXML, ВыгруженныеОбъекты, СтрокаПрайса, УзелОбмена)
	
	ИдентификаторФайлаКартинки = СокрЛП(СтрокаПрайса.ФайлКартинкиСсылка.УникальныйИдентификатор());
	Если ВыгруженныеОбъекты.Получить(ИдентификаторФайлаКартинки) = Неопределено 
		И (СтрокаПрайса.ТребуетсяОтправкаКартинки) Тогда
		
		РеквизитыФайлаКартинкиXDTO = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураНоменклатурыПрисоединенныеФайлы();
		
		РеквизитыФайлаКартинкиXDTO.Вставить("ref", ИдентификаторФайлаКартинки);
		РеквизитыФайлаКартинкиXDTO.Вставить("DeletionMark", СтрокаПрайса.ФайлКартинкиПометкаУдаления);
		РеквизитыФайлаКартинкиXDTO.Вставить("Description", СтрокаПрайса.ФайлКартинкиНаименование);
		РеквизитыФайлаКартинкиXDTO.Вставить("ВладелецФайла",
			СокрЛП(СтрокаПрайса.ФайлКартинкиВладелецФайла.УникальныйИдентификатор()));
		РеквизитыФайлаКартинкиXDTO.Вставить("ДатаСоздания", СтрокаПрайса.ФайлКартинкиДатаСоздания);
		РеквизитыФайлаКартинкиXDTO.Вставить("Описание", СтрокаПрайса.ФайлКартинкиОписание);
		РеквизитыФайлаКартинкиXDTO.Вставить("Размер", СтрокаПрайса.ФайлКартинкиРазмер);
		РеквизитыФайлаКартинкиXDTO.Вставить("Расширение", СтрокаПрайса.ФайлКартинкиРасширение);
		
		ДвоичныеДанныеФайла = ДвоичныеДанныеФайла(СтрокаПрайса.ФайлКартинкиСсылка);
		РеквизитыФайлаКартинкиXDTO.Вставить("ХранимыйФайл",
			Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9)));
		
		ЗаписатьСправочник(ЗаписьXML, РеквизитыФайлаКартинкиXDTO, "НоменклатураПрисоединенныеФайлы");
		ВыгруженныеОбъекты.Вставить(ИдентификаторФайлаКартинки, ИдентификаторФайлаКартинки);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, СтрокаПрайса.ФайлКартинкиСсылка);
	КонецЕсли;
	Возврат ИдентификаторФайлаКартинки;
КонецФункции

Функция ИдентификаторУсловияПродаж(СтруктураИдУсловийПродаж)
	
	УсловиеПродаж = СоответствиеСоглашения(СтруктураИдУсловийПродаж);
	
	Если УсловиеПродаж = Неопределено Тогда
		УсловиеПродаж = НовоеУсловиеПродажУзелОбмена(СтруктураИдУсловийПродаж);
	КонецЕсли;
	
	Возврат УсловиеПродаж;
КонецФункции

Функция ИзмененияПрайсЛиста(Знач УзелОбмена, Знач ВсеЦены)
	
	// Данные уже могут быть недоступны по правам.
	УстановитьПривилегированныйРежим(Истина);
	
	Изменения = Новый Структура;
	Изменения.Вставить("Номенклатура", Неопределено);
	Изменения.Вставить("Характеристика", Неопределено);
	Изменения.Вставить("ВидЦены", Неопределено);
	
	Если ВсеЦены Тогда
		Изменения.Вставить("ЕстьИзменения", Ложь);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Номенклатура);
		РеквизитыУзла = МобильноеПриложениеЗаказыКлиентов.РеквизитыУзла(УзелОбмена);
		Если РеквизитыУзла.ПередаватьИзображенияТоваров Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.НоменклатураПрисоединенныеФайлы);
		КонецЕсли;
	Иначе
		Изменения.Вставить("ЕстьИзменения", Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.ВидЦены,
	|	ЦеныНоменклатуры.Характеристика
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.Изменения КАК ЦеныИзменения
	|		ПО (ЦеныИзменения.Регистратор = ЦеныНоменклатуры.Регистратор)
	|			И (ТИПЗНАЧЕНИЯ(ЦеныИзменения.Узел) = ТИП(ПланОбмена.МобильноеПриложениеЗаказыКлиентов))
	|			И (ЦеныИзменения.Узел = &Узел)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Изменения;
	КонецЕсли;
	
	ТаблицаИзменений = Результат.Выгрузить();
	Изменения.Вставить("Номенклатура", ТаблицаИзменений.ВыгрузитьКолонку("Номенклатура"));
	Изменения.Вставить("Характеристика", ТаблицаИзменений.ВыгрузитьКолонку("Характеристика"));
	Изменения.Вставить("ВидЦены", ТаблицаИзменений.ВыгрузитьКолонку("ВидЦены"));
	
	Возврат Изменения;
КонецФункции

Функция ИндивидуальныйПрайс(УзелОбмена, СтрокаСоглашения)
	
	ТаблицаПрайса = ДанныеДляВыгрузкиИндивидуальныхПрайсов(УзелОбмена, СтрокаСоглашения);
	
	Если ТаблицаПрайса.Количество() = 0 Тогда
		Возврат ТаблицаПрайса;
	КонецЕсли;
	
	ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	Если ТаблицаПрайса.Колонки.Найти("ЦеноваяГруппа") = Неопределено Тогда
		ТаблицаПрайса.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
	КонецЕсли;
	Если ТаблицаПрайса.Колонки.Найти("ХарактеристикаСсылка") = Неопределено Тогда
		ТаблицаПрайса.Колонки.Добавить("ХарактеристикаСсылка",
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	Если ТаблицаПрайса.Колонки.Найти("ХарактеристикиИспользуются") = Неопределено Тогда
		ТаблицаПрайса.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
		ТаблицаПрайса.ЗаполнитьЗначения(ИспользоватьХарактеристики, "ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если ТаблицаПрайса.Колонки.Найти("ИспользоватьУпаковки") = Неопределено Тогда
		ТаблицаПрайса.Колонки.Добавить("ИспользоватьУпаковки",  Новый ОписаниеТипов("Булево"));
		ТаблицаПрайса.ЗаполнитьЗначения(ИспользоватьУпаковки, "ИспользоватьУпаковки");
	КонецЕсли;
		
	Для Каждого СтрокаПрайса ИЗ ТаблицаПрайса Цикл
		СтрокаПрайса.ДоговорКлиента = СтрокаСоглашения.ИдентификаторУсловияПродаж;
		СтрокаПрайса.ИдНоменклатуры = СокрЛП(СтрокаПрайса.НоменклатураСсылка.УникальныйИдентификатор());
		СтрокаПрайса.ИдХарактеристики = ?(ЗначениеЗаполнено(СтрокаПрайса.ХарактеристикаСсылка),
			СокрЛП(СтрокаПрайса.ХарактеристикаСсылка.УникальныйИдентификатор()), "");
		СтрокаПрайса.ИдУпаковки = СокрЛП(СтрокаПрайса.УпаковкаСсылка.УникальныйИдентификатор());
		СтрокаПрайса.ВидЦены = СокрЛП(СтрокаПрайса.ВидЦеныСсылка.УникальныйИдентификатор());
		СтрокаПрайса.ВидНоменклатуры = СокрЛП(СтрокаПрайса.ВидНоменклатурыСсылка.УникальныйИдентификатор());
		СтрокаПрайса.ЦеноваяГруппа = ?(ИспользоватьЦеновыеГруппы,
			СокрЛП(СтрокаПрайса.ЦеноваяГруппаСсылка.УникальныйИдентификатор()),
			МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор());
		СтрокаПрайса.РодительНоменклатуры = СокрЛП(СтрокаПрайса.РодительНоменклатурыСсылка.УникальныйИдентификатор());
	КонецЦикла;
	
	ТекстЗапроса = МобильноеПриложениеЗаказыКлиентовПовтИсп.ТекстЗапросаРеквизитовОбъектовПрайса(Истина);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПрайса", ТаблицаПрайса);
	ИдивидуальныйПрайс = Запрос.Выполнить().Выгрузить();
	
	СоответствияНоменклатур = ИдивидуальныйПрайс.НайтиСтроки(Новый Структура("ЗаписатьСоответствиеНоменклатуры", Истина));
	Для Каждого СтрокаПрайса Из СоответствияНоменклатур Цикл
		СтрокаПрайса.Номенклатура = ИдентификаторОбъектаМП(СтрокаПрайса.ИдНоменклатуры, СтрокаПрайса.ИдХарактеристики, "");
	КонецЦикла;
	СоответствияУпаковок = ИдивидуальныйПрайс.НайтиСтроки(Новый Структура("ЗаписатьСоответствиеУпаковки", Истина));
	Для Каждого СтрокаПрайса Из СоответствияУпаковок Цикл
		СтрокаПрайса.Упаковка =
			ИдентификаторОбъектаМП(СтрокаПрайса.ИдНоменклатуры, СтрокаПрайса.ИдХарактеристики, СтрокаПрайса.ИдУпаковки);
	КонецЦикла;
	
	ВыгружатьЕдиницуИзмеренияКакУпаковку =
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияДляУправленияТорговымиПредставителями")
		И ПолучитьФункциональнуюОпцию("ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре");
	
	Если ИдивидуальныйПрайс.Колонки.Найти("ВыгружатьЕдиницуИзмеренияКакУпаковку") = Неопределено Тогда
		ИдивидуальныйПрайс.Колонки.Добавить("ВыгружатьЕдиницуИзмеренияКакУпаковку",  Новый ОписаниеТипов("Булево"));
		ИдивидуальныйПрайс.ЗаполнитьЗначения(ВыгружатьЕдиницуИзмеренияКакУпаковку, "ВыгружатьЕдиницуИзмеренияКакУпаковку");
	КонецЕсли;
	
	Возврат ИдивидуальныйПрайс;
КонецФункции

Процедура ИнициализироватьДокумент(ДокументОбъект)
	
	ДокументОбъект.Менеджер = Пользователи.ТекущийПользователь();
	ДокументОбъект.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(ДокументОбъект.Валюта);
	ДокументОбъект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокументОбъект.Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = ДокументОбъект.Организация;
	СтруктураПараметров.БанковскийСчет = ДокументОбъект.БанковскийСчет;
	ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ДокументОбъект.БанковскийСчетКонтрагента	= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		ДокументОбъект.Контрагент, , ДокументОбъект.БанковскийСчетКонтрагента);
		
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = ДокументОбъект.Организация;
	СтруктураПараметров.ФормаОплаты = ДокументОбъект.ФормаОплаты;
	СтруктураПараметров.Касса 		= ДокументОбъект.Касса;
	ДокументОбъект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ДокументОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(
		ДокументОбъект.Менеджер, ДокументОбъект.Подразделение);
	ДокументОбъект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(
		ДокументОбъект.Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
		
	ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение,
	"ОбеспечиватьЗаказыОбособленно");
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
				ДокументОбъект.ДатаОтгрузки = ТекущаяДатаСеанса();
			КонецЕсли;
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		КонецЕсли;
		ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ДокументОбъект.Товары,
			ЗаполнитьОбособленно, ДокументОбъект.Статус);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату;
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
				ДокументОбъект.ДатаОтгрузки = ТекущаяДатаСеанса();
			КонецЕсли;
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
		КонецЕсли;
		ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ДокументОбъект.ЗаменяющиеТовары,
			ЗаполнитьОбособленно, ДокументОбъект.Статус);
		ДокументОбъект.ПоступлениеОднойДатой = Истина;
	КонецЕсли;
	
	ДокументОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
	ДокументОбъект.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ДокументОбъект);
	ДокументОбъект.НеОтгружатьЧастями = Истина;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ДокументОбъект);
КонецПроцедуры

Функция ИнформацияОКонтрагенте(Знач СтрокаТаблицы)
	
	СтруктураКонтрагента = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураКонтрагента();
	
	СтруктураКонтрагента.Ref			= СокрЛП(СтрокаТаблицы.КонтрагентСсылка.УникальныйИдентификатор());
	СтруктураКонтрагента.DeletionMark	= СтрокаТаблицы.КонтрагентDeletionMark;
	СтруктураКонтрагента.Description	= СтрокаТаблицы.КонтрагентDescription;
	СтруктураКонтрагента.ERPКод			= СтруктураКонтрагента.Ref;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентЮрФизЛицо) Тогда
		ЮрФизЛицо = "";
	Иначе
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.Индекс(СтрокаТаблицы.КонтрагентЮрФизЛицо);
		ЮрФизЛицо = Метаданные.Перечисления.ЮрФизЛицо.ЗначенияПеречисления.Получить(ЮрФизЛицо).Имя;
	КонецЕсли;
	
	СтруктураКонтрагента.ЮрФизЛицо = ЮрФизЛицо;
    СтруктураКонтрагента.КодПоЕДРПОУ = СтрокаТаблицы.КонтрагентКодПоЕДРПОУ;
	СтруктураКонтрагента.НаименованиеПолное = СтрокаТаблицы.КонтрагентНаименованиеПолное;
	СтруктураКонтрагента.ПредставлениеКонтрагента = СтрокаТаблицы.КонтрагентНаименованиеПолное
		+ " (" +СтруктураКонтрагента.КодПоЕДРПОУ + ")";
	СтруктураКонтрагента.Клиент = СокрЛП(СтрокаТаблицы.КонтрагентПартнер.УникальныйИдентификатор());
	
	Возврат СтруктураКонтрагента;
КонецФункции

Функция ИнформацияОПартнере(Знач СтрокаТаблицы)
	
	СтруктураПартнера = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураПартнера();
	
	СтруктураПартнера.Ref							= СокрЛП(СтрокаТаблицы.ПартнерКВыгрузке.УникальныйИдентификатор());
	СтруктураПартнера.DeletionMark					= СтрокаТаблицы.ПартнерDeletionMark;
	СтруктураПартнера.Description					= СтрокаТаблицы.ПартнерDescription;
	СтруктураПартнера.Parent						= ?(ЗначениеЗаполнено(СтрокаТаблицы.ПартнерРодительСсылка),
															СокрЛП(СтрокаТаблицы.ПартнерРодительСсылка.УникальныйИдентификатор()),
																МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор());
	СтруктураПартнера.Code							= СтрокаТаблицы.ПартнерCode;
	СтруктураПартнера.ERPКод						= СтруктураПартнера.Ref;
	
	СтруктураПартнера.ВидЦены						= МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	СтруктураПартнера.ВремяДоставкиПо				= СтрокаТаблицы.ПартнерВремяДоставкиПо;
	СтруктураПартнера.ВремяДоставкиС				= СтрокаТаблицы.ПартнерВремяДоставкиС;
	СтруктураПартнера.ОтгрузкаЗапрещена				= СтрокаТаблицы.ПартнерОтгрузкаЗапрещена;
	СтруктураПартнера.ПричинаДобавленияВСтопЛист	= СтрокаТаблицы.ПартнерПричинаДобавленияВСтопЛист;
	СтруктураПартнера.Самовывоз						= СтрокаТаблицы.ПартнерСамовывоз;
	СтруктураПартнера.Склад							= ?(ЗначениеЗаполнено(СтрокаТаблицы.ПартнерСкладСсылка),
															СокрЛП(СтрокаТаблицы.ПартнерСкладСсылка.УникальныйИдентификатор()),
																МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор());
	СтруктураПартнера.СтрокаПоиска 					= СокрЛП(СтруктураПартнера.Description);
	СтруктураПартнера.ДополнительнаяИнформация 		= ДосьеПартнера(СтрокаТаблицы.ПартнерКВыгрузке);
	
	СтруктураПартнера.ДополнительнаяИнформацияПоДоставке	= СтрокаТаблицы.ПартнерДополнительнаяИнформацияПоДоставке;
	
	СтрокаФормаОплаты = "";
	Если ЗначениеЗаполнено(СтрокаТаблицы.ПартнерФормаОплатыСсылка) Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.Индекс(СтрокаТаблицы.ПартнерФормаОплатыСсылка);
		СтрокаФормаОплаты = Метаданные.Перечисления.ФормыОплаты.ЗначенияПеречисления.Получить(ФормаОплаты).Имя;
	КонецЕсли;
	СтруктураПартнера.ФормаОплаты = СтрокаФормаОплаты;
	
	СтруктураПартнера.УдалитьАдрес = "";
	СтруктураПартнера.УдалитьАдресДоставки = "";
	СтруктураПартнера.УдалитьКонтактноеЛицо = "";
	СтруктураПартнера.УдалитьТелефон = "";
	СтруктураПартнера.УдалитьЭлектроннаяПочта = "";
	
	ЗаписатьКонтактнуюИнформацию(СтруктураПартнера, СтрокаТаблицы.ПартнерКВыгрузке, "Партнеры");
	
	Возврат СтруктураПартнера;
КонецФункции

Функция ИнформацияПоСтатусамЗаказовКлиентов(ЗаказыКлиентов)
	
	ОтветныеДанные = Новый Массив;
	
	ЗаказыКлиентовИБ = РезультатЗапросаПоДокументамЗаказКлиента(ЗаказыКлиентов);
	
	Если ЗаказыКлиентовИБ.Пустой() Тогда
		Возврат ОтветныеДанные;
	КонецЕсли;
	
	ВыборкаДокументов = ЗаказыКлиентовИБ.Выбрать();
	
	Пока ВыборкаДокументов.Следующий()Цикл
		
		ЗаказКлиентаИБ = ВыборкаДокументов;
		
		Если ЗначениеЗаполнено(ЗаказКлиентаИБ.Статус) Тогда
			Статус = Перечисления.СтатусыЗаказовКлиентов.Индекс(ЗаказКлиентаИБ.Статус);
			Статус = Метаданные.Перечисления.СтатусыЗаказовКлиентов.ЗначенияПеречисления.Получить(Статус).Имя;
		Иначе
			Статус = Символы.НПП;
		КонецЕсли;
		
		СостояниеЗаказа = Новый Структура;
		СостояниеЗаказа.Вставить("Состояние", Перечисления.СостоянияЗаказовКлиентов.ПустаяСсылка());
		СостояниеЗаказа.Вставить("СостояниеПросрочено", Ложь);
		СостояниеЗаказа.Вставить("СуммаДолга", 0);
		СостояниеЗаказа.Вставить("СуммаКОплате", 0);
		
		Документы.ЗаказКлиента.РассчитатьСостояние(ЗаказКлиентаИБ.Ссылка, ЗаказКлиентаИБ.Договор, СостояниеЗаказа);
		
		Если ЗначениеЗаполнено(СостояниеЗаказа.Состояние) Тогда
			Состояние = Перечисления.СостоянияЗаказовКлиентов.Индекс(СостояниеЗаказа.Состояние);
			Состояние = Метаданные.Перечисления.СостоянияЗаказовКлиентов.ЗначенияПеречисления.Получить(Состояние).Имя;
		Иначе
			Состояние = Символы.НПП;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("ref", СокрЛП(ЗаказКлиентаИБ.Ссылка.УникальныйИдентификатор()));
		Структура.Вставить("Статус", СокрЛП(Статус));
		Структура.Вставить("Проведен", ЗаказКлиентаИБ.Проведен);
		Структура.Вставить("ПометкаУдаления", ЗаказКлиентаИБ.ПометкаУдаления);
		Структура.Вставить("Состояние", СокрЛП(Состояние));
		Структура.Вставить("Просрочен", СостояниеЗаказа.СостояниеПросрочено);
		Структура.Вставить("ДатаОтгрузки", ЗаказКлиентаИБ.ДатаОтгрузки);
		Структура.Вставить("Изменен", Ложь);
		
		ОбъектыПечати = Новый СписокЗначений;
		ОбъектыПечати.Добавить(ЗаказКлиентаИБ.Ссылка);
		ТекущаяСтруктураТипов = Новый Соответствие;
		ТекущаяСтруктураТипов.Вставить("Документ.ЗаказКлиента", ОбъектыПечати.ВыгрузитьЗначения());
		ПараметрыВывода = Новый Структура("КодЯзыкаДляМногоязычныхПечатныхФорм", Локализация.ПолучитьЯзыкФормированияПечатныхФорм());
		ТабличныйДокумент = Обработки.ПечатьЗаказовНаТоварыУслуги.СформироватьПечатнуюФормуЗаказаКлиента(
			ТекущаяСтруктураТипов, ОбъектыПечати, Неопределено, ПараметрыВывода);
		Структура.Вставить("ПечатнаяФормаДокумента", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
		
		Структура.Вставить("СуммаДокументаУП", ЗаказКлиентаИБ.СуммаДокумента);
		Структура.Вставить("СуммаНДСДокументаУП", ЗаказКлиентаИБ.СуммаНДС);
		
		Если ЗаказКлиентаИБ.ПорядокРасчетовДоговор Тогда
			СуммаДолгаПоДокументуУП = Мин(ЗаказКлиентаИБ.СуммаДокумента, СостояниеЗаказа.СуммаКОплате);
		Иначе
			СуммаДолгаПоДокументуУП = СостояниеЗаказа.СуммаДолга;
			Структура.Вставить("ДатаСледующегоПлатежа", СледущаяДатаПлатежаПоЗаказу(ЗаказКлиентаИБ.Ссылка));
		КонецЕсли;
		
		Структура.Вставить("СуммаДолгаПоДокументуУП", СуммаДолгаПоДокументуУП);
		
		Если ЗаказКлиентаИБ.СуммаПредоплаты > 0 Тогда
			Структура.Вставить("ДатаПредоплатыПоДокументу", ДатаПредоплатыПоЗаказу(ЗаказКлиентаИБ.Ссылка));
			Структура.Вставить("СуммаПредоплатыПоДокументу", ЗаказКлиентаИБ.СуммаПредоплаты);
		КонецЕсли;
		
		ОтветныеДанные.Добавить(Структура);
	КонецЦикла;
	
	Возврат ОтветныеДанные;
КонецФункции

Функция ИнформацияПоСтатусамЗаявокНаВозвратТоваров(ЗаявкиНаВозврат)
	
	ОтветныеДанные = Новый Массив;
	
	ЗаявкиНаВозвратИБ = РезультатЗапросаПоДокументамЗаявкаНаВозврат(ЗаявкиНаВозврат);
	
	Если ЗаявкиНаВозвратИБ.Пустой() Тогда
		Возврат ОтветныеДанные;
	КонецЕсли;
	
	ВыборкаДокументов = ЗаявкиНаВозвратИБ.Выбрать();
	
	Пока ВыборкаДокументов.Следующий()Цикл
		
		ЗаявкаНаВозвратИБ = ВыборкаДокументов;
		
		Если ЗначениеЗаполнено(ЗаявкаНаВозвратИБ.Статус) Тогда
			СтатусИндекс = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Индекс(ЗаявкаНаВозвратИБ.Статус);
			Статус = Метаданные.Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.ЗначенияПеречисления.Получить(
				СтатусИндекс).Имя;
		Иначе
			Статус = Символы.НПП;
		КонецЕсли;
		
		СостояниеЗаявки = Новый Структура;
		СостояниеЗаявки.Вставить("Состояние", Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка());
		СостояниеЗаявки.Вставить("СуммаДолга", 0);
		СостояниеЗаявки.Вставить("СуммаКОплате", 0);
		
		Документы.ЗаявкаНаВозвратТоваровОтКлиента.РассчитатьСостояние(ЗаявкаНаВозвратИБ.Ссылка,
			ЗаявкаНаВозвратИБ.Договор, СостояниеЗаявки);
		
		Если ЗначениеЗаполнено(СостояниеЗаявки.Состояние) Тогда
			СостояниеИндекс = Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Индекс(СостояниеЗаявки.Состояние);
			Состояние = Метаданные.Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ЗначенияПеречисления.Получить(СостояниеИндекс).Имя;
		Иначе
			Состояние = Символы.НПП;
		КонецЕсли;
		
		Структура = Новый Структура;
		Структура.Вставить("ref", СокрЛП(ЗаявкаНаВозвратИБ.Ссылка.УникальныйИдентификатор()));
		Структура.Вставить("Статус", СокрЛП(Статус));
		Структура.Вставить("Проведен", ЗаявкаНаВозвратИБ.Проведен);
		Структура.Вставить("ПометкаУдаления", ЗаявкаНаВозвратИБ.ПометкаУдаления);
		Структура.Вставить("Состояние", СокрЛП(Состояние));
		Структура.Вставить("ДатаПоступления", ЗаявкаНаВозвратИБ.ДатаПоступления);
		Структура.Вставить("ДатаОтгрузки", ЗаявкаНаВозвратИБ.ДатаОтгрузки);
		Структура.Вставить("Изменен", Ложь);
		
		ОбъектыПечати = Новый СписокЗначений;
		ОбъектыПечати.Добавить(ЗаявкаНаВозвратИБ.Ссылка);
		ТекущаяСтруктураТипов = Новый Соответствие;
		ТекущаяСтруктураТипов.Вставить("Документ.ЗаявкаНаВозвратТоваровОтКлиента", ОбъектыПечати.ВыгрузитьЗначения());
		ТабличныйДокумент =
			Обработки.ПечатьЗаявленияНаВозвратТоваровОтКлиента.СформироватьПечатнуюФормуЗаявленияНаВозвратТоваровОтКлиента(
				ТекущаяСтруктураТипов, ОбъектыПечати, Неопределено);
		Структура.Вставить("ПечатнаяФормаДокумента", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
		
		Структура.Вставить("СуммаДокументаУП", ЗаявкаНаВозвратИБ.СуммаДокумента);
		Структура.Вставить("СуммаНДСДокументаУП", ЗаявкаНаВозвратИБ.СуммаНДСДокумента);
		
		Если ЗаявкаНаВозвратИБ.ПорядокРасчетовДоговор Тогда
			СуммаДолгаПоДокументуУП = Мин(ЗаявкаНаВозвратИБ.СуммаДокумента, СостояниеЗаявки.СуммаКОплате);
		Иначе
			СуммаДолгаПоДокументуУП = СостояниеЗаявки.СуммаДолга;
		КонецЕсли;
		Структура.Вставить("СуммаДолгаПоДокументуУП", СуммаДолгаПоДокументуУП);
		
		ОтветныеДанные.Добавить(Структура);
	КонецЦикла;
	
	Возврат ОтветныеДанные;
КонецФункции

Функция МассивИзменений(УзелОбмена, НомерСообщения, ФильтрИзменений)
	
	// Данные уже могут быть недоступны по правам.
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИзменений = Новый Массив;
	Для Каждого Фильтр ИЗ ФильтрИзменений Цикл
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, НомерСообщения, Фильтр);
		Пока ВыборкаИзменений.Следующий() Цикл
			МассивИзменений.Добавить(ВыборкаИзменений.Получить());
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивИзменений;
КонецФункции

Функция НовоеСоответствиеОбъектаМП(Знач ИдНоменклатуры, Знач ИдХарактеристики, Знач ИдУпаковки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеОбъектаМП =
		РегистрыСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы.СоздатьМенеджерЗаписи();
	СоответствиеОбъектаМП.ИдНоменклатуры	= ИдНоменклатуры;
	СоответствиеОбъектаМП.ИдХарактеристики	= ИдХарактеристики;
	СоответствиеОбъектаМП.ИдУпаковки		= ИдУпаковки;
	СоответствиеОбъектаМП.ИдОбъектаМП		= СокрЛП(Новый УникальныйИдентификатор());
	
	СоответствиеОбъектаМП.Записать(Истина);
	
	Возврат СоответствиеОбъектаМП.ИдОбъектаМП;
КонецФункции

Функция НовоеУсловиеПродажУзелОбмена(СтруктураИдУсловийПродаж, ИдУсловиеПродаж = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСоответствия = 
		РегистрыСведений.СоответствиеУсловийПродажМобильногоПриложения1СЗаказы.СоздатьМенеджерЗаписи();
	СтрокаСоответствия.Организация	= СтруктураИдУсловийПродаж.Организация;
	СтрокаСоответствия.ВидЦены		= СтруктураИдУсловийПродаж.ВидЦены;
	СтрокаСоответствия.Партнер		= СтруктураИдУсловийПродаж.Партнер;
	СтрокаСоответствия.Соглашение	= СтруктураИдУсловийПродаж.Соглашение;
	СтрокаСоответствия.Контрагент	= СтруктураИдУсловийПродаж.Контрагент;
	СтрокаСоответствия.Договор		= СтруктураИдУсловийПродаж.Договор;
	Если ИдУсловиеПродаж = Неопределено Тогда
		СтрокаСоответствия.ИдУсловиеПродаж	= СокрЛП(Новый УникальныйИдентификатор());
	Иначе
		СтрокаСоответствия.ИдУсловиеПродаж	= ИдУсловиеПродаж;
	КонецЕсли;
	
	Попытка
		СтрокаСоответствия.Записать(Истина);
		ИдентификаторУсловияПродаж = СтрокаСоответствия.ИдУсловиеПродаж;
	Исключение
		ИдентификаторУсловияПродаж = МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор();
	КонецПопытки;
	
	Возврат ИдентификаторУсловияПродаж;
КонецФункции

Процедура ОбработатьОбъектПередЗаписьюВПакетОбмена(Объект)
	
	ИспользованиеЗаданий = Константы.ИспользованиеЗаданийТорговымПредставителям.Получить();
	
	Если ИспользованиеЗаданий =
		Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями Тогда
		Объект.ЗаполнитьДанныеОДебиторскойЗадолженности();
		Объект.ДополнительныеСвойства.Вставить("НеРегистрироватьИзменения", Истина);
		Объект.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьНеПопавшиеВОтбор(ЗаписьXML, УзелОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПартнерыИзменения.Ссылка КАК ПартнерКУдалению
	|ИЗ
	|	Справочник.Партнеры.Изменения КАК ПартнерыИзменения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПартнерыИзменения.Узел) = ТИП(ПланОбмена.МобильноеПриложениеЗаказыКлиентов)
	|	И ПартнерыИзменения.Узел = &Узел");
	
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НеПопавшиеВОтбор = Результат.Выбрать();
	
	Пока НеПопавшиеВОтбор.Следующий() Цикл
		Данные = НеПопавшиеВОтбор.ПартнерКУдалению.ПолучитьОбъект();
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Данные);
		МобильноеПриложениеЗаказыКлиентов.УдалениеДанных(Данные);
		Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПрайсЛистТорговогоПредставителя(УзелОбмена, ФильтрыПрайсЛиста)
	
	ТаблицаПрайса = ДанныеДляВыгрузкиПрайсов(УзелОбмена, ФильтрыПрайсЛиста);
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	Если ТаблицаПрайса.Количество() = 0 Тогда
		Возврат ТаблицаПрайса;
	КонецЕсли;
	ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	Если ТаблицаПрайса.Колонки.Найти("ЦеноваяГруппа") = Неопределено Тогда
		ТаблицаПрайса.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
	КонецЕсли;
	Если ТаблицаПрайса.Колонки.Найти("ХарактеристикаСсылка") = Неопределено Тогда
		ТаблицаПрайса.Колонки.Добавить("ХарактеристикаСсылка",
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	Если ТаблицаПрайса.Колонки.Найти("ХарактеристикиИспользуются") = Неопределено Тогда
		ТаблицаПрайса.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
		ТаблицаПрайса.ЗаполнитьЗначения(ИспользоватьХарактеристики, "ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если ТаблицаПрайса.Колонки.Найти("ИспользоватьУпаковки") = Неопределено Тогда
		ТаблицаПрайса.Колонки.Добавить("ИспользоватьУпаковки", Новый ОписаниеТипов("Булево"));
		ТаблицаПрайса.ЗаполнитьЗначения(ИспользоватьУпаковки, "ИспользоватьУпаковки");
	КонецЕсли;
	
	Для Каждого СтрокаПрайса ИЗ ТаблицаПрайса Цикл
		СтрокаПрайса.ИдНоменклатуры = СокрЛП(СтрокаПрайса.НоменклатураСсылка.УникальныйИдентификатор());
		СтрокаПрайса.ИдХарактеристики = ?(ЗначениеЗаполнено(СтрокаПрайса.ХарактеристикаСсылка),
			СокрЛП(СтрокаПрайса.ХарактеристикаСсылка.УникальныйИдентификатор()), "");
		СтрокаПрайса.ИдУпаковки = СокрЛП(СтрокаПрайса.УпаковкаСсылка.УникальныйИдентификатор());
		СтрокаПрайса.ВидЦены = СокрЛП(СтрокаПрайса.ВидЦеныСсылка.УникальныйИдентификатор());
		СтрокаПрайса.ВидНоменклатуры = СокрЛП(СтрокаПрайса.ВидНоменклатурыСсылка.УникальныйИдентификатор());
		СтрокаПрайса.ЦеноваяГруппа = ?(ИспользоватьЦеновыеГруппы, 
			СокрЛП(СтрокаПрайса.ЦеноваяГруппаСсылка.УникальныйИдентификатор()),
			МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор());
		СтрокаПрайса.РодительНоменклатуры = СокрЛП(СтрокаПрайса.РодительНоменклатурыСсылка.УникальныйИдентификатор());
	КонецЦикла;
	ТекстЗапроса = МобильноеПриложениеЗаказыКлиентовПовтИсп.ТекстЗапросаРеквизитовОбъектовПрайса(Ложь);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПрайса", ТаблицаПрайса);
	ОбщийПрайсЛист = Запрос.Выполнить().Выгрузить();
	
	СоответствияНоменклатур = ОбщийПрайсЛист.НайтиСтроки(Новый Структура("ЗаписатьСоответствиеНоменклатуры", Истина));
	Для Каждого СтрокаПрайса Из СоответствияНоменклатур Цикл
		СтрокаПрайса.Номенклатура = ИдентификаторОбъектаМП(СтрокаПрайса.ИдНоменклатуры, СтрокаПрайса.ИдХарактеристики, "");
	КонецЦикла;
	СоответствияУпаковок = ОбщийПрайсЛист.НайтиСтроки(Новый Структура("ЗаписатьСоответствиеУпаковки", Истина));
	Для Каждого СтрокаПрайса Из СоответствияУпаковок Цикл
		СтрокаПрайса.Упаковка =
			ИдентификаторОбъектаМП(СтрокаПрайса.ИдНоменклатуры, СтрокаПрайса.ИдХарактеристики, СтрокаПрайса.ИдУпаковки);
	КонецЦикла;
		
	ВыгружатьЕдиницуИзмеренияКакУпаковку =
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияДляУправленияТорговымиПредставителями")
		И ПолучитьФункциональнуюОпцию("ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре");
	
	Если ОбщийПрайсЛист.Колонки.Найти("ВыгружатьЕдиницуИзмеренияКакУпаковку") = Неопределено Тогда
		ОбщийПрайсЛист.Колонки.Добавить("ВыгружатьЕдиницуИзмеренияКакУпаковку",  Новый ОписаниеТипов("Булево"));
		ОбщийПрайсЛист.ЗаполнитьЗначения(ВыгружатьЕдиницуИзмеренияКакУпаковку, "ВыгружатьЕдиницуИзмеренияКакУпаковку");
	КонецЕсли;
	
	Возврат ОбщийПрайсЛист;
КонецФункции

Процедура ПроверитьВозможностьИзменения(ДокументСсылка, Отказ)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Если ДокументСсылка.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
				ИЛИ ДокументСсылка.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке
				ИЛИ ДокументСсылка.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если ДокументСсылка.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Если ДокументСсылка.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению
				ИЛИ ДокументСсылка.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке
				ИЛИ ДокументСсылка.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена Тогда
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если ДокументСсылка.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияЗадания(ЗаданиеТорговомуПредставителю, УзелОбмена, Отказ)
	
	Если ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ЗаданиеТорговомуПредставителю) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Функция РеализацияПоЗаказу(Знач ЗаказКлиента)
	
	РеализацияТоваровУслуг = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	РеализацияТоваровУслуг.Ссылка
	|ПОМЕСТИТЬ РТУ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
	|	И РеализацияТоваровУслуг.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	РеализацияТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.ЗаказКлиента = &ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РТУ.Ссылка
	|ИЗ
	|	РТУ КАК РТУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РТУ");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат РеализацияТоваровУслуг;
	КонецЕсли;
	
	Выборка = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если Выборка.Количество() = 1 Тогда
		РеализацияТоваровУслуг = Выборка[0];
	КонецЕсли;
	
	Возврат РеализацияТоваровУслуг;
КонецФункции

Функция РезультатЗапросаПоДокументамЗаказКлиента(Знач ЗаказыКлиентов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Заказ,
	|	СУММА(ВЫБОР
	|			КОГДА Товары.Отменено
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ) КАК СуммаНДСДокумента
	|ПОМЕСТИТЬ ТоварыЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&ЗаказыКлиентов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗаказКлиента.Ссылка КАК Ссылка,
	|	ДокументЗаказКлиента.Договор КАК Договор,
	|	ДокументЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументЗаказКлиента.Проведен КАК Проведен,
	|	ДокументЗаказКлиента.Статус КАК Статус,
	|	ДокументЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДокументЗаказКлиента.СуммаАвансаДоОбеспечения + ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплаты,
	|	ВЫБОР
	|		КОГДА ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПорядокРасчетовДоговор,
	|	ДокументЗаказКлиента.СуммаДокумента,
	//|	ДокументЗаказКлиента.Договор.УстановленСрокОплаты КАК УстановленСрокОплаты,
	//|	ДокументЗаказКлиента.Договор.СрокОплаты КАК СрокОплаты,
	|	ЕСТЬNULL(ТоварыЗаказа.СуммаНДСДокумента, 0) КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказа КАК ТоварыЗаказа
	|		ПО (ТоварыЗаказа.Заказ = ДокументЗаказКлиента.Ссылка)
	|ГДЕ
	|	ДокументЗаказКлиента.Ссылка В(&ЗаказыКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыЗаказа");
	
	Запрос.УстановитьПараметр("ЗаказыКлиентов", ЗаказыКлиентов);
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция РезультатЗапросаПоДокументамЗаявкаНаВозврат(Знач ЗаявкиНаВозврат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Заявка,
	|	СУММА(ВЫБОР
	|			КОГДА Товары.Отменено
	|				ТОГДА 0
	|			ИНАЧЕ Товары.СуммаНДС
	|		КОНЕЦ) КАК СуммаНДСДокумента
	|ПОМЕСТИТЬ ТоварыЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&ЗаявкиНаВозврат)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗаявкаНаВозврат.Ссылка КАК Ссылка,
	|	ДокументЗаявкаНаВозврат.Договор КАК Договор,
	|	ДокументЗаявкаНаВозврат.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументЗаявкаНаВозврат.Проведен КАК Проведен,
	|	ДокументЗаявкаНаВозврат.Статус КАК Статус,
	|	ДокументЗаявкаНаВозврат.ДатаПоступления КАК ДатаПоступления,
	|	ДокументЗаявкаНаВозврат.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ДокументЗаявкаНаВозврат.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПорядокРасчетовДоговор,
	|	ДокументЗаявкаНаВозврат.СуммаДокумента,
	|	ЕСТЬNULL(ТоварыЗаявки.СуммаНДСДокумента, 0) КАК СуммаНДСДокумента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументЗаявкаНаВозврат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаявки КАК ТоварыЗаявки
	|		ПО (ТоварыЗаявки.Заявка = ДокументЗаявкаНаВозврат.Ссылка)
	|ГДЕ
	|	ДокументЗаявкаНаВозврат.Ссылка В(&ЗаявкиНаВозврат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыЗаявки");
	
	Запрос.УстановитьПараметр("ЗаявкиНаВозврат", ЗаявкиНаВозврат);
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция РезультатЗапросаПоУпаковке(Знач УпаковкаЕдиницаИзмерения, Знач Номенклатура)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковкиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
	|	УпаковкиНоменклатуры.Родитель КАК Родитель,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.ПометкаУдаления КАК ЕдиницаИзмеренияПометкаУдаления,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.ИмяПредопределенныхДанных КАК ЕдиницаИзмеренияИмяПредопределенныхДанных,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	&ТекстЗапросаВесУпаковки КАК Вес,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.ПометкаУдаления КАК ВесЕдиницаИзмеренияПометкаУдаления,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.Код КАК ВесЕдиницаИзмеренияКод,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.Наименование КАК ВесЕдиницаИзмеренияНаименование,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.ИмяПредопределенныхДанных КАК ВесЕдиницаИзмеренияИмяПредопределенныхДанных,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.НаименованиеПолное КАК ВесЕдиницаИзмеренияНаименованиеПолное,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.МеждународноеСокращение КАК ВесЕдиницаИзмеренияМеждународноеСокращение,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНоменклатуры,
	|	Номенклатура.ВесЕдиницаИзмерения КАК ЕдиницаВеса,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВесЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ Номенклатура.ВесЧислитель / Номенклатура.ВесЗнаменатель
	|	КОНЕЦ КАК ВесЕдиницыИзмерения
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (Номенклатура.Ссылка = &Номенклатура)
	|			И (УпаковкиНоменклатуры.Ссылка = &УпаковкаЕдиницаИзмерения)");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", "Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаВесУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"УпаковкиНоменклатуры", "Номенклатура"));
		
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", УпаковкаЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции

Функция СвойствоСсылка(Свойство, Данные)
	
	Если СокрЛП(Свойство) = "Ref" ИЛИ СокрЛП(Свойство) = "ДоговорКлиента" 
	ИЛИ СокрЛП(Свойство) = "Клиент" ИЛИ СокрЛП(Свойство) = "Статус"
	ИЛИ СокрЛП(Свойство) = "СтатусОбмена" Тогда 
		Возврат Истина;
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Данные[СокрЛП(Свойство)])) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция СледущаяДатаПлатежаПоЗаказу(Знач Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЗаказКлиента.ДатаОтгрузки, ДЕНЬ)) КАК ДатаОтгрузки,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1))) КАК ПрошлаяДатаПлатежа,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты1.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1))) КАК СледующаяДатаПлатежа
	|ПОМЕСТИТЬ ДатыДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты
	|		ПО (ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка = ЗаказКлиента.Ссылка)
	|			И (ЗаказКлиентаЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки))
	|			И (ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты1
	|		ПО (ЗаказКлиентаЭтапыГрафикаОплаты1.Ссылка = ЗаказКлиента.Ссылка)
	|			И (ЗаказКлиентаЭтапыГрафикаОплаты1.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки))
	|			И (ЗаказКлиентаЭтапыГрафикаОплаты1.ДатаПлатежа > НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ДатыДокумента.СледующаяДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДатыДокумента.СледующаяДатаПлатежа
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ДатыДокумента.ПрошлаяДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДатыДокумента.ПрошлаяДатаПлатежа
	|				ИНАЧЕ ДатыДокумента.ДатаОтгрузки
	|			КОНЕЦ
	|	КОНЕЦ КАК СледующаяДатаПлатежа
	|ИЗ
	|	ДатыДокумента КАК ДатыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыДокумента";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.СледующаяДатаПлатежа;
КонецФункции

Функция ДатаПредоплатыПоЗаказу(Знач Ссылка)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЗаказКлиента.Дата, ДЕНЬ)) КАК ДатаДокумента,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаПредоплаты
	|ПОМЕСТИТЬ ДатыДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты
	|		ПО (ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка = ЗаказКлиента.Ссылка)
	|			И (ЗаказКлиентаЭтапыГрафикаОплаты.ВариантОплаты В (&ВариантыОплаты))
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ДатыДокумента.ДатаПредоплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДатыДокумента.ДатаПредоплаты
	|		ИНАЧЕ ДатыДокумента.ДатаДокумента
	|	КОНЕЦ КАК ДатаПредоплаты
	|ИЗ
	|	ДатыДокумента КАК ДатыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыДокумента";
	
	ВариантыОплаты = Новый Массив;
	ВариантыОплаты.Добавить(Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения);
	ВариантыОплаты.Добавить(Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки);
	Запрос.УстановитьПараметр("ВариантыОплаты", ВариантыОплаты);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ДатаПредоплаты;
КонецФункции

Функция СоглашениеСКлиентомПоОрганизацииИВидуЦен(СтрокаТаблицы)
	
	СтрокаСоглашения = Неопределено;
	
	ВалютаВзаиморасчетов = МобильноеПриложениеЗаказыКлиентовПовтИсп.ВалютаЗаказов();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")
			И СтрокаТаблицы.ИспользуютсяДоговорыКонтрагентов Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			ДоговорОбязателен = Истина;
		Иначе
			ДоговорОбязателен = Ложь;
		КонецЕсли;
	Иначе
		ДоговорОбязателен = Ложь;
	КонецЕсли;
	
	Если ДоговорОбязателен И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Договор) Тогда
		Возврат СтрокаСоглашения;
	КонецЕсли;
	
	СтрокаСоглашения = МобильноеПриложениеЗаказыКлиентовПовтИсп.СтруктураДоговора();
	
	ЕстьДоговор = ЗначениеЗаполнено(СтрокаТаблицы.Договор);
	
	Соглашение = СтрокаТаблицы.Соглашение;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИдУсловиеПродаж) Тогда
		СтруктураИдУсловийПродаж = Новый Структура;
		СтруктураИдУсловийПродаж.Вставить("Организация",	СтрокаТаблицы.Организация);
		СтруктураИдУсловийПродаж.Вставить("ВидЦены",		СтрокаТаблицы.ВидЦены);
		СтруктураИдУсловийПродаж.Вставить("Партнер",		СтрокаТаблицы.ПартнерКВыгрузке);
		СтруктураИдУсловийПродаж.Вставить("Соглашение",		СтрокаТаблицы.Соглашение);
		СтруктураИдУсловийПродаж.Вставить("Контрагент",		СтрокаТаблицы.КонтрагентСсылка);
		СтруктураИдУсловийПродаж.Вставить("Договор",		?(ЕстьДоговор, СтрокаТаблицы.Договор,
			Справочники.ДоговорыКонтрагентов.ПустаяСсылка()));
		СтрокаСоглашения.ref	= ИдентификаторУсловияПродаж(СтруктураИдУсловийПродаж);
		СтрокаТаблицы.ИдУсловиеПродаж = СтрокаСоглашения.ref;
	Иначе
		СтрокаСоглашения.ref	= СтрокаТаблицы.ИдУсловиеПродаж;
	КонецЕсли;
	
	СтрокаСоглашения.DeletionMark		= ?(ЕстьДоговор, СтрокаТаблицы.ДоговорПометкаУдаления 
		ИЛИ СтрокаТаблицы.СоглашениеПометкаУдаления, СтрокаТаблицы.СоглашениеПометкаУдаления);
	СтрокаСоглашения.Description		= СтрокаТаблицы.СоглашениеНаименование 
		+ " (" +СокрЛП(СтрокаТаблицы.КонтрагентСсылка)
		+ ?(ЕстьДоговор,", "+СтрокаТаблицы.ДоговорНаименование, "")
		+ ")";
	СтрокаСоглашения.ERPКодДоговора		= СокрЛП(?(ЕстьДоговор, СтрокаТаблицы.Договор.УникальныйИдентификатор(),
		МобильноеПриложениеЗаказыКлиентовПовтИсп.ПустойИдентификатор()));
	СтрокаСоглашения.ERPКодСоглашения	= СокрЛП(Соглашение.УникальныйИдентификатор());
	СтрокаСоглашения.ВалютаВзаиморасчетов = СокрЛП(ВалютаВзаиморасчетов.УникальныйИдентификатор());
	СтрокаСоглашения.ВидЦены = СокрЛП(СтрокаТаблицы.ВидЦены.УникальныйИдентификатор());
	СтрокаСоглашения.Дата = ?(ЕстьДоговор И ЗначениеЗаполнено(СтрокаТаблицы.ДоговорДата), СтрокаТаблицы.ДоговорДата,
		СтрокаТаблицы.СоглашениеДата);
	СтрокаСоглашения.Действует = СтрокаТаблицы.СоглашениеДействует;
	СтрокаСоглашения.Клиент = СокрЛП(СтрокаТаблицы.ПартнерКВыгрузке.УникальныйИдентификатор());
	СтрокаСоглашения.Комиссия = СтрокаТаблицы.СоглашениеКомиссия;
	СтрокаСоглашения.Контрагент = СокрЛП(СтрокаТаблицы.КонтрагентСсылка.УникальныйИдентификатор());
	СтрокаСоглашения.Номер = ?(ЕстьДоговор И ЗначениеЗаполнено(СтрокаТаблицы.ДоговорНомер), СтрокаТаблицы.ДоговорНомер,
		СтрокаТаблицы.СоглашениеНомер);
	СтрокаСоглашения.Организация = СокрЛП(СтрокаТаблицы.Организация.УникальныйИдентификатор());
	СтрокаСоглашения.Пояснение = СтрокаТаблицы.СоглашениеНаименование + " (" +СокрЛП(СтрокаТаблицы.Организация)
		+", "+СокрЛП(СтрокаТаблицы.КонтрагентСсылка)
		+", "+СокрЛП(СтрокаТаблицы.ВидЦены) + ")";
	ИспользуетсяНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	Если ИспользуетсяНесколькоСкладов Тогда
		СтрокаСоглашения.Склад = СокрЛП(СтрокаТаблицы.СоглашениеСклад.УникальныйИдентификатор());
	Иначе
		СоглашениеСклад = Справочники.Склады.СкладПоУмолчанию();
		СтрокаСоглашения.Склад = СокрЛП(СоглашениеСклад.УникальныйИдентификатор());
	КонецЕсли;
	СтрокаСоглашения.Типовое = СтрокаТаблицы.СоглашениеТиповое;
	СтрокаСоглашения.ЕстьУточнениеЦен = СтрокаТаблицы.ЕстьУточнениеЦен;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
		СтрокаСоглашения.ИспользуютсяДоговорыКонтрагентов = СтрокаТаблицы.ИспользуютсяДоговорыКонтрагентов;
	Иначе
		СтрокаСоглашения.ИспользуютсяДоговорыКонтрагентов = Ложь;
	КонецЕсли;
	УникальныйКлюч = СтрокаСоглашения.Организация+"/"+
		СтрокаСоглашения.Контрагент+"/"+
		СтрокаСоглашения.ВалютаВзаиморасчетов+"/"+
		СтрокаСоглашения.ВидЦены+"/"+
		СтрокаСоглашения.Склад+"/"+
		Формат(СтрокаСоглашения.Комиссия, "БЛ=0; БИ=1");
		
	СтрокаСоглашения.УникальныйКлюч = УникальныйКлюч;
	Если ЗначениеЗаполнено(СтрокаТаблицы.ПартнерФормаОплатыСсылка) Тогда
		ФормаОплаты = Перечисления.ФормыОплаты.Индекс(СтрокаТаблицы.ПартнерФормаОплатыСсылка);
		ФормаОплаты = Метаданные.Перечисления.ФормыОплаты.ЗначенияПеречисления.Получить(ФормаОплаты).Имя;
		СтрокаСоглашения.ФормаОплаты = ФормаОплаты;
	Иначе
		СтрокаСоглашения.ФормаОплаты = "";
	КонецЕсли;
	
	Возврат СтрокаСоглашения;
КонецФункции

Функция СоответствиеНоменклатуры(ИдНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатуры.ИдНоменклатуры,
	|	СоответствиеНоменклатуры.ИдХарактеристики,
	|	СоответствиеНоменклатуры.ИдУпаковки
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы КАК СоответствиеНоменклатуры
	|ГДЕ
	|	СоответствиеНоменклатуры.ИдОбъектаМП = &ИдНоменклатуры";
	
	Запрос.УстановитьПараметр("ИдНоменклатуры", ИдНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	ОбъектМП = Неопределено;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОбъектМП = Выборка;
	Иначе
		ИскомаяНоменклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
		Если НЕ ИскомаяНоменклатура.ПолучитьОбъект() = Неопределено Тогда
			ОбъектМП = Новый Структура("ИдНоменклатуры, ИдХарактеристики, ИдУпаковки", ИдНоменклатуры, "", "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектМП;
КонецФункции

Функция СоответствиеОбъектаМП(Знач ИдНоменклатуры, Знач ИдХарактеристики, Знач ИдУпаковки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатуры.ИдОбъектаМП КАК ОбъектМП
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыМобильногоПриложения1СЗаказы КАК СоответствиеНоменклатуры
	|ГДЕ
	|	СоответствиеНоменклатуры.ИдНоменклатуры = &ИдНоменклатуры
	|	И СоответствиеНоменклатуры.ИдХарактеристики = &ИдХарактеристики
	|	И СоответствиеНоменклатуры.ИдУпаковки = &ИдУпаковки";
	
	Запрос.УстановитьПараметр("ИдНоменклатуры", ИдНоменклатуры);
	Запрос.УстановитьПараметр("ИдХарактеристики", ИдХарактеристики);
	Запрос.УстановитьПараметр("ИдУпаковки", ИдУпаковки);
	
	Результат = Запрос.Выполнить();
	
	ОбъектМП = Неопределено;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОбъектМП = Выборка.ОбъектМП;
	КонецЕсли;
	
	Возврат ОбъектМП;
КонецФункции

Функция СоответствиеСоглашения(СтруктураИдУсловийПродаж)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеУсловийПродаж.ИдУсловиеПродаж КАК ИдУсловиеПродаж
	|ИЗ
	|	РегистрСведений.СоответствиеУсловийПродажМобильногоПриложения1СЗаказы КАК СоответствиеУсловийПродаж
	|ГДЕ
	|	СоответствиеУсловийПродаж.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА &УказанВидЦены
	|				ТОГДА СоответствиеУсловийПродаж.ВидЦены = &ВидЦены
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СоответствиеУсловийПродаж.Партнер = &Партнер
	|	И СоответствиеУсловийПродаж.Соглашение = &Соглашение
	|	И СоответствиеУсловийПродаж.Контрагент = &Контрагент
	|	И СоответствиеУсловийПродаж.Договор = &Договор";
	
	
	Запрос.УстановитьПараметр("Организация", СтруктураИдУсловийПродаж.Организация);
	Запрос.УстановитьПараметр("УказанВидЦены", ЗначениеЗаполнено(СтруктураИдУсловийПродаж.ВидЦены));
	Запрос.УстановитьПараметр("ВидЦены", СтруктураИдУсловийПродаж.ВидЦены);
	Запрос.УстановитьПараметр("Партнер", СтруктураИдУсловийПродаж.Партнер);
	Запрос.УстановитьПараметр("Соглашение", СтруктураИдУсловийПродаж.Соглашение);
	Запрос.УстановитьПараметр("Контрагент", СтруктураИдУсловийПродаж.Контрагент);
	Запрос.УстановитьПараметр("Договор", СтруктураИдУсловийПродаж.Договор);
	
	Результат = Запрос.Выполнить();
	
	ИдУсловиеПродаж = Неопределено;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ИдУсловиеПродаж = Выборка.ИдУсловиеПродаж;
	КонецЕсли;
	
	Возврат ИдУсловиеПродаж;
КонецФункции

Функция СоответствиеУсловияПродаж(ИдУсловиеПродаж)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеУсловийПродаж.Организация,
	|	СоответствиеУсловийПродаж.ВидЦены,
	|	СоответствиеУсловийПродаж.Партнер,
	|	СоответствиеУсловийПродаж.Соглашение,
	|	СоответствиеУсловийПродаж.Контрагент,
	|	СоответствиеУсловийПродаж.Договор
	|ИЗ
	|	РегистрСведений.СоответствиеУсловийПродажМобильногоПриложения1СЗаказы КАК СоответствиеУсловийПродаж
	|ГДЕ
	|	СоответствиеУсловийПродаж.ИдУсловиеПродаж = &ИдУсловиеПродаж";
	
	
	Запрос.УстановитьПараметр("ИдУсловиеПродаж", ИдУсловиеПродаж);
	
	Результат = Запрос.Выполнить();
	
	ИдУсловиеПродаж = Неопределено;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ИдУсловиеПродаж = Выборка;
	КонецЕсли;
	
	Возврат ИдУсловиеПродаж;
КонецФункции

Функция СтруктураУпаковки()
	
	СтруктураУпаковки = Новый Структура;
	СтруктураУпаковки.Вставить("ref");
	СтруктураУпаковки.Вставить("DeletionMark");
	СтруктураУпаковки.Вставить("Description");
	СтруктураУпаковки.Вставить("Owner");
	СтруктураУпаковки.Вставить("Parent");
	
	СтруктураУпаковки.Вставить("ERPКод");
	СтруктураУпаковки.Вставить("ЕдиницаИзмерения");
	СтруктураУпаковки.Вставить("Коэффициент");
	СтруктураУпаковки.Вставить("НаименованиеПолное");
	СтруктураУпаковки.Вставить("Вес");
	СтруктураУпаковки.Вставить("ВесЕдиницаИзмерения");
	
	Возврат СтруктураУпаковки;
КонецФункции

Функция СтруктураДоговораСоглашения(Знач ИдУсловиеПродаж)
	
	Структура = Новый Структура("Договор, Соглашение, ХозяйственнаяОперация");
	СтрокаУсловий = СоответствиеУсловияПродаж(ИдУсловиеПродаж);
	
	Если СтрокаУсловий = Неопределено Тогда
		Возврат Структура;
	КонецЕсли;
	
	Структура.Договор		= СтрокаУсловий.Договор;
	Структура.Соглашение	= СтрокаУсловий.Соглашение;
	
	Если ЗначениеЗаполнено(Структура.Договор) Тогда
		ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Договор, "ХозяйственнаяОперация");
	Иначе
		Структура.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если ЗначениеЗаполнено(Структура.Соглашение) Тогда
			ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Соглашение, "ХозяйственнаяОперация");
		Иначе
			Структура.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		КонецЕсли;
	КонецЕсли;
	
	Структура.ХозяйственнаяОперация = ХозяйственнаяОперация;
	
	Возврат Структура;
КонецФункции

Функция СтруктураНоменклатураХарактеристикаУпаковка(Знач ИдНоменклатура, Знач ИдУпаковка)
	
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Структура.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Структура.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	Структура.Вставить("УпаковкаКоэффициент", 0);
	Структура.Вставить("Услуга", Ложь);
	
	СтрокаНоменклатуры = СоответствиеНоменклатуры(ИдНоменклатура);
	
	Если СтрокаНоменклатуры = Неопределено Тогда
		Возврат Структура;
	КонецЕсли;
	
	Номенклатура = 
		Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаНоменклатуры.ИдНоменклатуры));
	
	Если Номенклатура.ПолучитьОбъект() = Неопределено Тогда
		Структура.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
		Возврат Структура;
	КонецЕсли;
	
	Структура.Вставить("Номенклатура", Номенклатура);
	
	РеквизитыНоменклатуры = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ИспользоватьУпаковки, НаборУпаковок");
	
	ТипНоменклатуры = Номенклатура.ТипНоменклатуры;
	
	Если НЕ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
		И НЕ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара
		И НЕ ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор Тогда
		Структура.Вставить("Услуга", Истина);
	КонецЕсли;
	
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Если ХарактеристикиИспользуются Тогда
			Если НЕ СтрокаНоменклатуры = Неопределено Тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(
					Новый УникальныйИдентификатор(СтрокаНоменклатуры.ИдХарактеристики));
			КонецЕсли;
		Иначе
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Конецесли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Если НЕ Характеристика.ПолучитьОбъект() = Неопределено Тогда
			Структура.Вставить("Характеристика", Характеристика);
		КонецЕсли;
	Иначе
		Структура.Вставить("Характеристика", Характеристика);
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") 
		ИЛИ НЕ РеквизитыНоменклатуры.ИспользоватьУпаковки
		ИЛИ НЕ ЗначениеЗаполнено(РеквизитыНоменклатуры.НаборУпаковок) Тогда
		Возврат Структура;
	КонецЕсли;
	
	Упаковка = Неопределено;
	
	Если РеквизитыНоменклатуры.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры
		И НЕ ХарактеристикиИспользуются Тогда
		Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдУпаковка));
	Иначе
		СтрокаУпаковки = СоответствиеНоменклатуры(ИдУпаковка);
		Если НЕ СтрокаУпаковки = Неопределено Тогда
			Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(
				Новый УникальныйИдентификатор(СтрокаУпаковки.ИдУпаковки));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Упаковка = Неопределено И НЕ Упаковка.ПолучитьОбъект() = Неопределено Тогда
		Структура.Вставить("Упаковка", Упаковка);
		Структура.Вставить("УпаковкаКоэффициент",
			Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(Упаковка.Ссылка, Номенклатура));
	КонецЕсли;
	
	Возврат Структура;
КонецФункции

Функция ПриведенныйНомерДокумента(Номер, НомерИБ)
	
	НовыйНомерИБ = "";
	
	ДлинаНомера = СтрДлина(НомерИБ);
	ПустойНомер = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("0", ДлинаНомера);
	НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерИБ);
	
	ПустойНомерИБ = Лев(Лев(НомерИБ, ДлинаНомера - СтрДлина(НомерБезПрефикса))
		+ ПустойНомер, ДлинаНомера);
	
	НовыйНомерИБ = Лев(ПустойНомерИБ, ДлинаНомера - СтрДлина(Номер)) + Номер;
	
	Возврат НовыйНомерИБ;
КонецФункции

Функция НайденнаяДоверенность(СтруктураПоиска)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоверенностьВыданная.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьВыданная
	|ГДЕ
	|	ДоверенностьВыданная.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|	И ДоверенностьВыданная.Номер = &Номер
	|	И ГОД(ДоверенностьВыданная.Дата) = ГОД(&Дата)
	|	И ДоверенностьВыданная.Партнер = &Партнер
	|	И ДоверенностьВыданная.ФизЛицо = &ФизЛицо";
	
	Запрос.УстановитьПараметр("Номер", СтруктураПоиска.Номер);
	Запрос.УстановитьПараметр("Партнер", СтруктураПоиска.Партнер);
	Запрос.УстановитьПараметр("Дата", СтруктураПоиска.Дата);
	Запрос.УстановитьПараметр("ФизЛицо", СтруктураПоиска.ФизЛицо);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Документы.ДоверенностьВыданная.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
КонецФункции

Процедура СоздатьОбновитьДоверенность(СтруктураОплаты, Сообщение)
	
	СоздатьДоверенность = Ложь;
	
	МобильнаяОплата = СтруктураОплаты.МобильнаяОплата;
	
	ДоверенностьОрганизация = Справочники.Организации.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильнаяОплата.Организация));
	ДоверенностьПартнер = Справочники.Партнеры.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильнаяОплата.Клиент));
	ДоверенностьФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	
	ДоверенностьНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(МобильнаяОплата.НомерВходящегоДокумента);
	ДоверенностьДата = МобильнаяОплата.ДатаВходящегоДокумента;
	
	Доверенность = Документы.ДоверенностьВыданная.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильнаяОплата.ref));
	ДоверенностьВыданная = Доверенность.ПолучитьОбъект();
	
	Если ДоверенностьВыданная = Неопределено Тогда
		ДоверенностьПоОрганизации = Документы.ДоверенностьВыданная.НайтиПоРеквизиту("Организация", ДоверенностьОрганизация);
		Если ДоверенностьПоОрганизации.Пустая() Тогда
			СоздатьДоверенность = Истина;
		Иначе
			НомерПоОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоверенностьПоОрганизации, "Номер");
			НомерДоверенности = ПриведенныйНомерДокумента(ДоверенностьНомер, НомерПоОрганизации);
			СтруктураПоиска = Новый Структура("Номер, Дата, Партнер, ФизЛицо");
			СтруктураПоиска.Номер = НомерДоверенности;
			СтруктураПоиска.Дата = ДоверенностьДата;
			СтруктураПоиска.ФизЛицо = ДоверенностьФизЛицо;
			СтруктураПоиска.Партнер = ДоверенностьПартнер;
			ДоверенностьСсылка = НайденнаяДоверенность(СтруктураПоиска);
			Если ДоверенностьСсылка.Пустая() Тогда
				СоздатьДоверенность = Истина;
			Иначе
				ДоверенностьВыданная = ДоверенностьСсылка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьДоверенность Тогда
		ДоверенностьВыданная = Документы.ДоверенностьВыданная.СоздатьДокумент();
		ДоверенностьВыданная.УстановитьСсылкуНового(Доверенность);
		ДоверенностьВыданная.Дата = ДоверенностьДата;
		ДоверенностьВыданная.Организация = ДоверенностьОрганизация;
		ДоверенностьВыданная.Статус = Перечисления.СтатусыДоверенностей.НеВыдана;
		ДоверенностьВыданная.УстановитьНовыйНомер();
		НомерДоверенности = ПриведенныйНомерДокумента(ДоверенностьНомер, ДоверенностьВыданная.Номер);
		// Проверим, можно ли создать доверенность с номером из приложения.
		// Если есть доверенность с таким номером, то номер у новой доверенности не устанавливаем, оставляем созданный автоматом.
		ДоверенностьСсылка = Документы.ДоверенностьВыданная.НайтиПоНомеру(НомерДоверенности, ДоверенностьДата);
		Если ДоверенностьСсылка.Пустая() Тогда
			ДоверенностьВыданная.Номер = НомерДоверенности;
		КонецЕсли;
	КонецЕсли;
	
	ЗаказКлиента = 
		Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильнаяОплата.ДокументОснование));
	Попытка
		ЗаказОбъект = ЗаказКлиента.ПолучитьОбъект();
	Исключение
		ЗаказОбъект = Неопределено;
	КонецПопытки;
	ЗаполнитьПоЗаказу = Истина;
	Если ЗаказОбъект = Неопределено Тогда
		// Заказа нет в ИБ, заполняем по реквизитам платежа.
		ЗаполнитьПоЗаказу = Ложь;
	КонецЕсли;
	Если ЗаполнитьПоЗаказу Тогда
		ДоверенностьВыданная.Заполнить(ЗаказКлиента);
	Иначе
		ДоверенностьВыданная.Партнер = ДоверенностьПартнер;
		ДоверенностьВыданная.ФизЛицо = ДоверенностьФизЛицо;
		ДоверенностьВыданная.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС;
		ДоверенностьВыданная.Валюта = Справочники.Валюты.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Валюта));
		ДоверенностьВыданная.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Контрагент));
	КонецЕсли;
	
	ДоверенностьВыданная.СуммаДокумента = МобильнаяОплата.СуммаДокумента;
	
	ДоверенностьКомментарий = СтрШаблон(НСтр("ru='Оплата по доверенности №%1 от %2';uk='Оплата за довіреністю №%1 від %2'"),
		ДоверенностьНомер, ДоверенностьДата);
	ДоверенностьВыданная.Комментарий = ДоверенностьКомментарий;
	
	Если НЕ ЗначениеЗаполнено(ДоверенностьВыданная.Контрагент) Тогда
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ДоверенностьВыданная.Партнер,
			ДоверенностьВыданная.Контрагент);
	КонецЕсли;
	
	Проведен = Истина;
	Попытка
		ДоверенностьВыданная.ОбменДанными.Загрузка = Истина;
		ДоверенностьВыданная.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Проведен = Ложь;
	КонецПопытки;
	
	РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.Проведение,
		?(ДоверенностьВыданная.Проведен,
			РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
	Попытка
		ДоверенностьВыданная.ОбменДанными.Загрузка = Ложь;
		ДоверенностьВыданная.Записать(РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
	Исключение
		Проведен = Ложь;
	КонецПопытки;
	
	Структура = Новый Структура;
	Структура.Вставить("ref", МобильнаяОплата.ref);
	Структура.Вставить("Проведен", Проведен);
	Сообщение.Добавить(Структура);
КонецПроцедуры

Процедура СоздатьОбновитьПриходныйКассовыйОрдер(СтруктураОплаты, Сообщение)
	
	МобильнаяОплата = СтруктураОплаты.МобильнаяОплата;
	СтатьяДДСНаличные = СтруктураОплаты.СтатьяДДСНаличные;
	Касса = СтруктураОплаты.Касса;
	
	ПКО = Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильнаяОплата.ref));
	ПриходныйКассовыйОрдер = ПКО.ПолучитьОбъект();
	Если ПриходныйКассовыйОрдер = Неопределено Тогда
		ПриходныйКассовыйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		ПриходныйКассовыйОрдер.УстановитьСсылкуНового(ПКО);
		ПриходныйКассовыйОрдер.Дата = МобильнаяОплата.Date;
	Иначе
		ПриходныйКассовыйОрдер.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	ЗаказКлиента =
		Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильнаяОплата.ДокументОснование));
	Попытка
		ЗаказОбъект = ЗаказКлиента.ПолучитьОбъект();
	Исключение
		ЗаказОбъект = Неопределено;
	КонецПопытки;
	ЗаполнитьПоЗаказу = Истина;
	Если ЗаказОбъект = Неопределено Тогда
		// Заказа нет в ИБ, заполняем по реквизитам платежа.
		ЗаполнитьПоЗаказу = Ложь;
	КонецЕсли;
	Если ЗаполнитьПоЗаказу Тогда
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, "ХозяйственнаяОперация, ПорядокРасчетов");
		Если РеквизитыЗаказа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			Или РеквизитыЗаказа.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			ЗаполнитьПоЗаказу = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПриходныйКассовыйОрдерПартнер = Справочники.Партнеры.ПолучитьСсылку(
		Новый УникальныйИдентификатор(МобильнаяОплата.Клиент));
	Если ЗаполнитьПоЗаказу Тогда
		ПриходныйКассовыйОрдер.Заполнить(ЗаказКлиента);
	Иначе
		ПриходныйКассовыйОрдер.Организация = Справочники.Организации.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Организация));
		ПриходныйКассовыйОрдер.Валюта = Справочники.Валюты.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Валюта));
		ПриходныйКассовыйОрдер.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Контрагент));
		СоглашениеДоговор = СтруктураДоговораСоглашения(МобильнаяОплата.ДоговорКлиента);
		ПриходныйКассовыйОрдерДоговор = СоглашениеДоговор.Договор;
		
		Если ЗначениеЗаполнено(ПриходныйКассовыйОрдерДоговор) Тогда
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
				ЗаказКлиента,
				ПриходныйКассовыйОрдерДоговор,
				ПриходныйКассовыйОрдер.Валюта,
				ПриходныйКассовыйОрдер.РасшифровкаПлатежа,
				ПриходныйКассовыйОрдерПартнер,
				ЗаказКлиента);
		КонецЕсли;
	КонецЕсли;
	
	ПриходныйКассовыйОрдер.СуммаДокумента = МобильнаяОплата.СуммаДокумента;
	ПриходныйКассовыйОрдер.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ПриходныйКассовыйОрдер.Кассир = Пользователи.ТекущийПользователь();
	ПриходныйКассовыйОрдер.Комментарий = СокрЛП(МобильнаяОплата.ПредставлениеДокумента);
	
	Если НЕ ЗначениеЗаполнено(ПриходныйКассовыйОрдер.Контрагент) Тогда
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ПриходныйКассовыйОрдерПартнер,
			ПриходныйКассовыйОрдер.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		Если НЕ ЗначениеЗаполнено(ПриходныйКассовыйОрдер.Касса) Тогда
			ПриходныйКассовыйОрдер.Касса = Касса;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПриходныйКассовыйОрдер.Организация) Тогда
			ПриходныйКассовыйОрдер.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Касса, "Владелец");
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПриходныйКассовыйОрдер.Касса) Тогда
			ПриходныйКассовыйОрдер.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(ПриходныйКассовыйОрдер.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если ПриходныйКассовыйОрдер.РасшифровкаПлатежа.Количество() = 1 Тогда
		Если ПриходныйКассовыйОрдер.СуммаДокумента <> 0 Тогда
			СтрокаТаблицы = ПриходныйКассовыйОрдер.РасшифровкаПлатежа[0];
			СтрокаТаблицы.Сумма = ПриходныйКассовыйОрдер.СуммаДокумента;
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			Если ЗначениеЗаполнено(СтатьяДДСНаличные) Тогда
				СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = СтатьяДДСНаличные;
			КонецЕсли;
		Иначе
			ПриходныйКассовыйОрдер.РасшифровкаПлатежа.Удалить(0);
		КонецЕсли;
	ИначеЕсли ПриходныйКассовыйОрдер.РасшифровкаПлатежа.Количество() = 0
		И ПриходныйКассовыйОрдер.СуммаДокумента > 0 Тогда
		СтрокаТаблицы = ПриходныйКассовыйОрдер.РасшифровкаПлатежа.Добавить();
		СтрокаТаблицы.ВалютаВзаиморасчетов = ПриходныйКассовыйОрдер.Валюта;
		СтрокаТаблицы.Партнер = ПриходныйКассовыйОрдерПартнер;
		СтрокаТаблицы.Сумма = ПриходныйКассовыйОрдер.СуммаДокумента;
		Если ЗначениеЗаполнено(СтатьяДДСНаличные) Тогда
			СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = СтатьяДДСНаличные;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
			СтрокаТаблицы.Заказ = ЗаказКлиента;
			СтрокаТаблицы.ОснованиеПлатежа = ЗаказКлиента;
		КонецЕсли;
	ИначеЕсли ПриходныйКассовыйОрдер.СуммаДокумента = 0 Тогда
		ПриходныйКассовыйОрдер.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	ПриходныйКассовыйОрдер.Проведен = Истина;
	Проведен = Истина;
	Попытка
		ПриходныйКассовыйОрдер.ОбменДанными.Загрузка = Истина;
		ПриходныйКассовыйОрдер.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Проведен = Ложь;
	КонецПопытки;
	
	РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.Проведение,
		?(ПриходныйКассовыйОрдер.Проведен,
			РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
	Попытка
		ПриходныйКассовыйОрдер.ОбменДанными.Загрузка = Ложь;
		ПриходныйКассовыйОрдер.Записать(РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
	Исключение
		Проведен = Ложь;
	КонецПопытки;
	
	Структура = Новый Структура;
	Структура.Вставить("ref", МобильнаяОплата.ref);
	Структура.Вставить("Проведен", Проведен);
	Сообщение.Добавить(Структура);
КонецПроцедуры

Процедура СоздатьОбновитьЭквайринговуюОперацию(СтруктураОплаты, Сообщение)
	
	МобильнаяОплата = СтруктураОплаты.МобильнаяОплата;
	СтатьяДДСЭквайринг = СтруктураОплаты.СтатьяДДСЭквайринг;
	ЭквайринговыйТерминал = СтруктураОплаты.ЭквайринговыйТерминал;
	ЭквайринговаяОперация =
		Документы.ОперацияПоПлатежнойКарте.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильнаяОплата.ref));
		
	ОперацияПоПлатежнойКарте = ЭквайринговаяОперация.ПолучитьОбъект();
	Если ОперацияПоПлатежнойКарте = Неопределено Тогда
		ОперацияПоПлатежнойКарте = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
		ОперацияПоПлатежнойКарте.УстановитьСсылкуНового(ЭквайринговаяОперация);
		ОперацияПоПлатежнойКарте.Дата = МобильнаяОплата.Date;
	Иначе
		Если ОперацияПоПлатежнойКарте.ОплатаВыполнена Тогда
			Структура = Новый Структура;
			Структура.Вставить("ref", СокрЛП(ОперацияПоПлатежнойКарте.Ссылка.УникальныйИдентификатор()));
			Структура.Вставить("Проведен", ОперацияПоПлатежнойКарте.Проведен);
			Сообщение.Добавить(Структура);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаказКлиента =
		Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(МобильнаяОплата.ДокументОснование));
	Попытка
		ЗаказОбъект = ЗаказКлиента.ПолучитьОбъект();
	Исключение
		ЗаказОбъект = Неопределено;
	КонецПопытки;
	ЗаполнитьПоЗаказу = Истина;
	Если ЗаказОбъект = Неопределено Тогда
		// Заказа нет в ИБ, заполняем по реквизитам платежа.
		ЗаполнитьПоЗаказу = Ложь;
	КонецЕсли;
	Если ЗаполнитьПоЗаказу Тогда
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, "ХозяйственнаяОперация, ПорядокРасчетов");
		Если РеквизитыЗаказа.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			Или РеквизитыЗаказа.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			ЗаполнитьПоЗаказу = Ложь;
		КонецЕсли;
	КонецЕсли;
	ОперацияПоПлатежнойКартеПартнер = Справочники.Партнеры.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Клиент));
	Если ЗаполнитьПоЗаказу Тогда
		ОперацияПоПлатежнойКарте.Заполнить(ЗаказКлиента);
	Иначе
		ОперацияПоПлатежнойКарте.Организация = Справочники.Организации.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Организация));
		ОперацияПоПлатежнойКарте.Валюта = Справочники.Валюты.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Валюта));
		ОперацияПоПлатежнойКарте.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(
			Новый УникальныйИдентификатор(МобильнаяОплата.Контрагент));
		СоглашениеДоговор = СтруктураДоговораСоглашения(МобильнаяОплата.ДоговорКлиента);
		ОперацияПоПлатежнойКартеДоговор = СоглашениеДоговор.Договор;
		
		Если ЗначениеЗаполнено(ОперацияПоПлатежнойКартеДоговор) Тогда
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
				ЗаказКлиента,
				ОперацияПоПлатежнойКартеДоговор,
				ОперацияПоПлатежнойКарте.Валюта,
				ОперацияПоПлатежнойКарте.РасшифровкаПлатежа,
				ОперацияПоПлатежнойКартеПартнер,
				ЗаказКлиента);
		КонецЕсли;
	КонецЕсли;
	
	ОперацияПоПлатежнойКарте.СуммаДокумента = МобильнаяОплата.СуммаДокумента;
	ОперацияПоПлатежнойКарте.НеКонтролироватьЗаполнениеЗаявки = Истина;
	ОперацияПоПлатежнойКарте.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ОперацияПоПлатежнойКарте.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
	ОперацияПоПлатежнойКарте.НомерПлатежнойКарты = СокрЛП(МобильнаяОплата.НомерПлатежнойКарты);
	ОперацияПоПлатежнойКарте.ОплатаВыполнена = Истина;
	ОперацияПоПлатежнойКарте.Ответственный = Пользователи.ТекущийПользователь();
	ОперацияПоПлатежнойКарте.Комментарий = СокрЛП(МобильнаяОплата.ПредставлениеДокумента);
	
	Если НЕ ЗначениеЗаполнено(ОперацияПоПлатежнойКарте.Контрагент) Тогда
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ОперацияПоПлатежнойКартеПартнер,
			ОперацияПоПлатежнойКарте.Контрагент);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОперацияПоПлатежнойКарте.Организация) Тогда
		Реквизиты = Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
		ОперацияПоПлатежнойКарте.Организация = Реквизиты.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтатьяДДСЭквайринг)
		И Не ЗначениеЗаполнено(ОперацияПоПлатежнойКарте.СтатьяДвиженияДенежныхСредств) Тогда
		ОперацияПоПлатежнойКарте.СтатьяДвиженияДенежныхСредств = СтатьяДДСЭквайринг;
	КонецЕсли;
	
	Если ОперацияПоПлатежнойКарте.РасшифровкаПлатежа.Количество() = 1 Тогда
		Если ОперацияПоПлатежнойКарте.СуммаДокумента <> 0 Тогда
			СтрокаТаблицы = ОперацияПоПлатежнойКарте.РасшифровкаПлатежа[0];
			СтрокаТаблицы.Сумма = ОперацияПоПлатежнойКарте.СуммаДокумента;
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			Если ЗначениеЗаполнено(СтатьяДДСЭквайринг)
				И Не ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДвиженияДенежныхСредств) Тогда
				СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = СтатьяДДСЭквайринг;
			КонецЕсли;
		Иначе
			ОперацияПоПлатежнойКарте.РасшифровкаПлатежа.Удалить(0);
		КонецЕсли;
	ИначеЕсли ОперацияПоПлатежнойКарте.РасшифровкаПлатежа.Количество() = 0
			И ОперацияПоПлатежнойКарте.СуммаДокумента > 0 Тогда
		СтрокаТаблицы = ОперацияПоПлатежнойКарте.РасшифровкаПлатежа.Добавить();
		СтрокаТаблицы.ВалютаВзаиморасчетов = ОперацияПоПлатежнойКарте.Валюта;
		СтрокаТаблицы.Партнер = ОперацияПоПлатежнойКартеПартнер;
		СтрокаТаблицы.Сумма = ОперацияПоПлатежнойКарте.СуммаДокумента;
		Если ЗначениеЗаполнено(СтатьяДДСЭквайринг) Тогда
			СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = СтатьяДДСЭквайринг;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
			СтрокаТаблицы.Заказ = ЗаказКлиента;
			СтрокаТаблицы.ОснованиеПлатежа = ЗаказКлиента;
		КонецЕсли;
	ИначеЕсли ОперацияПоПлатежнойКарте.СуммаДокумента = 0 Тогда
		ОперацияПоПлатежнойКарте.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	ОперацияПоПлатежнойКарте.Проведен = Истина;
	Проведен = Истина;
	Попытка
		ОперацияПоПлатежнойКарте.ОбменДанными.Загрузка = Истина;
		ОперацияПоПлатежнойКарте.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Проведен = Ложь;
	КонецПопытки;
	
	РежимЗаписи = ?(Проведен, РежимЗаписиДокумента.Проведение,
		?(ОперацияПоПлатежнойКарте.Проведен,
			РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
	Попытка
		ОперацияПоПлатежнойКарте.ОбменДанными.Загрузка = Ложь;
		ОперацияПоПлатежнойКарте.Записать(РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
	Исключение
		Проведен = Ложь;
	КонецПопытки;
	
	Структура = Новый Структура;
	Структура.Вставить("ref", МобильнаяОплата.ref);
	Структура.Вставить("Проведен", Проведен);
	Сообщение.Добавить(Структура);
КонецПроцедуры

Функция ТекстОшибкиПриПолученииФайла(Знач ИнформацияОбОшибке, Знач Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СтрШаблон(
		НСтр("ru='%1
        |
        |Ссылка на файл: ""%2"".'
        |;uk='%1
        |
        |Посилання на файл: ""%2"".'"),
		СообщениеОбОшибке,
		ПолучитьНавигационнуюСсылку(Файл) );
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция УпаковкиНоменклатуры(Номенклатура, Упаковка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УпаковкиНоменклатуры.Владелец КАК УпаковкаВладелец,
	|	УпаковкиНоменклатуры.Ссылка КАК УпаковкаСсылка,
	|	УпаковкиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент,
	|	УпаковкиНоменклатуры.Родитель КАК Родитель,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.ПометкаУдаления КАК ЕдиницаИзмеренияПометкаУдаления,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.ИмяПредопределенныхДанных КАК ЕдиницаИзмеренияИмяПредопределенныхДанных,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения.МеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	&ТекстЗапросаВесУпаковки КАК Вес,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.ПометкаУдаления КАК ВесЕдиницаИзмеренияПометкаУдаления,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.Код КАК ВесЕдиницаИзмеренияКод,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.Наименование КАК ВесЕдиницаИзмеренияНаименование,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.ИмяПредопределенныхДанных КАК ВесЕдиницаИзмеренияИмяПредопределенныхДанных,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.НаименованиеПолное КАК ВесЕдиницаИзмеренияНаименованиеПолное,
	|	УпаковкиНоменклатуры.ВесЕдиницаИзмерения.МеждународноеСокращение КАК ВесЕдиницаИзмеренияМеждународноеСокращение
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (УпаковкиНоменклатуры.Владелец = ВЫБОР
	|				КОГДА Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА Номенклатура.Ссылка
	|				КОГДА НЕ Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА Номенклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (Номенклатура.Ссылка = &Номенклатура)
	|			И (НЕ УпаковкиНоменклатуры.Ссылка = &Упаковка)
	|			И (Номенклатура.ИспользоватьУпаковки)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", "Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаВесУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
		"УпаковкиНоменклатуры", "Номенклатура"));
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостейПовтИсп.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФункциональныеОпции

// Функция возвращает результат - можно ли работать с новостями.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь.
// 
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Булево.
//
Функция РазрешенаРаботаСНовостями() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// Для пользователя без разделителей не заполняются параметры сеанса,
	//  поэтому будет ошибка в "ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя()".

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если (ОбщегоНазначенияПовтИсп.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()) Тогда
		Результат = 
			ПолучитьФункциональнуюОпцию("Новости_РазрешенаРаботаСНовостями")
			И (ЕстьРолиЧтенияНовостей());
	Иначе
		Результат = 
			ПолучитьФункциональнуюОпцию("Новости_РазрешенаРаботаСНовостями")
			И (ЕстьРолиЧтенияНовостей())
			И (НЕ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя());
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает результат - можно ли работать с новостями текущему пользователю.
// Это результат функциональной опции "РазрешенаРаботаСНовостями"
//   И доступны нужные роли
//   И это не внешний пользователь
//   И задан параметр сеанса ТекущийПользователь (т.е. мы не зашли в базу с отключенным списком пользователей).
// Если сеанс запущен без разделителей (пользователь АдминистраторСистемы зашел в область данных),
//   то для него разрешить работу с новостями.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Булево.
//
Функция РазрешенаРаботаСНовостямиТекущемуПользователю() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если (ОбщегоНазначенияПовтИсп.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()) Тогда
		Результат = РазрешенаРаботаСНовостями();
	Иначе
		Результат = 
			РазрешенаРаботаСНовостями()
			И (ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает результат - можно ли работать с новостями через интернет.
// Это результат функциональной опции "РазрешенаРаботаСНовостямиЧерезИнтернет"
//   И доступны нужные роли
//   И это не внешний пользователь.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Булево.
//
Функция РазрешенаРаботаСНовостямиЧерезИнтернет() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если (ОбщегоНазначенияПовтИсп.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()) Тогда
		Результат = 
			ПолучитьФункциональнуюОпцию("Новости_РазрешенаРаботаСНовостямиЧерезИнтернет")
			И (ЕстьРолиЧтенияНовостей());
	Иначе
		Результат = 
			ПолучитьФункциональнуюОпцию("Новости_РазрешенаРаботаСНовостямиЧерезИнтернет")
			И (ЕстьРолиЧтенияНовостей())
			И (НЕ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя());
	КонецЕсли;

	Результат = Ложь;
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСПользователями

// Функция возвращает строковое имя пользователя, как настроено в конфигураторе
//  по переданной ссылке на элемент Справочника Пользователи.
// Если в конфигурации имя пользователя ИБ хранится в реквизите справочника Пользователи,
//  то можно вернуть значение этого реквизита.
// Если список пользователей ИБ пустой, то в справочнике Пользователи будет пользователь
//  с именем "<Не указан>" и вернется пустая строка.
//
// Параметры:
//  ПользовательСсылка - СправочникСсылка.Пользователи, Неопределено - элемент справочника пользователи,
//                       по которому необходимо получить имя пользователя ИБ, как настроено в конфигураторе.
//                       Если передано Неопределено, то необходимо вернуть имя текущего пользователя.
//
// Возвращаемое значение:
//   Строка - имя пользователя ИБ, или пустая строка.
//
Функция ПолучитьИмяПользователяИБ(ПользовательСсылка = Неопределено) Экспорт

	Результат = "";

	ТипСтрока = Тип("Строка");

	УстановитьПривилегированныйРежим(Истина);

	Попытка
		ПользовательИБ = Неопределено;
		Если ПользовательСсылка = Неопределено Тогда
			ПользовательИБ = ОбработкаНовостей.ТекущийПользовательИБ();
		Иначе
			УИН = ПользовательСсылка.ИдентификаторПользователяИБ;
			Если ТипЗнч(УИН) = Тип("УникальныйИдентификатор") Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УИН);
			ИначеЕсли ТипЗнч(УИН) = ТипСтрока Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(УИН));
			Иначе
				ПользовательИБ = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если (ПользовательИБ = Неопределено) Тогда
			// Фоновое задание?
			Результат = "";
		Иначе
			// Если список пользователей ИБ пустой, то вернется пустая строка.
			Результат = ПользовательИБ.Имя;
		КонецЕсли;
	Исключение
		Результат = "";
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Ошибка получения имени пользователя ИБ (ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()) по причине:
            |%ИнформацияОбОшибке%'
            |;uk='Помилка отримання імені користувача ІБ (ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()) з причини:
            |%ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбработкаНовостей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Разное';uk='БІП:Новини.Різне'"), // ИмяСобытия
			НСтр("ru='Новости. Разное. Ошибка работы с пользователями';uk='Новини. Різне. Помилка роботи з користувачами'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения // Комментарий
		);
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает ссылку на элемент справочника Пользователи, по имени пользователя (как настроено в конфигураторе).
// Если в конфигурации имя пользователя ИБ хранится в реквизите справочника Пользователи,
//  то можно проще вернуть ссылку на элемент справочника - поиском по реквизиту.
//
// Параметры:
//  ИмяПользователяИБ - Строка - имя пользователя ИБ (как настроено в конфигураторе),
//                      по которому необходимо получить ссылку на элемент справочника пользователи.
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи - ссылка на элемент справочника или пустая ссылка.
//
Функция ПолучитьПользователяПоИмениПользователяИБ(ИмяПользователяИБ) Экспорт

	Результат = Справочники.Пользователи.ПустаяСсылка();

	УстановитьПривилегированныйРежим(Истина);

		Попытка
			Если ПустаяСтрока(ИмяПользователяИБ) Тогда
				// Такое возможно, если список пользователей ИБ пустой.
				Результат = Пользователи.СсылкаНеуказанногоПользователя();
			Иначе
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
				Если ПользовательИБ <> Неопределено Тогда
					Результат = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
				ИначеЕсли ПустаяСтрока(ПользовательИБ.Имя) Тогда
					// Такое возможно, если список пользователей ИБ пустой.
					Результат = Пользователи.СсылкаНеуказанногоПользователя();
				КонецЕсли;
			КонецЕсли;
		Исключение
			Результат = Справочники.Пользователи.ПустаяСсылка();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru='Ошибка получения пользователя из справочника Пользователи по его имени (%ИмяПользователяИБ%) в ИБ (ОбработкаНовостейПовтИсп.ПолучитьПользователяПоИмениПользователяИБ()) по причине:
                |%ИнформацияОбОшибке%'
                |;uk='Помилка отримання користувача з довідника Користувачі по його імені (%ИмяПользователяИБ%) в ІБ (ОбработкаНовостейПовтИсп.ПолучитьПользователяПоИмениПользователяиб()) з причини:
                |%ИнформацияОбОшибке%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПользователяИБ%", ИмяПользователяИБ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ОбработкаНовостей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Разное';uk='БІП:Новини.Різне'"), // ИмяСобытия
				НСтр("ru='Новости. Разное. Ошибка работы с пользователями';uk='Новини. Різне. Помилка роботи з користувачами'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения // Комментарий
			);
		КонецПопытки;

	Возврат Результат;

КонецФункции

// Возвращает Истина, если у текущего пользователя включены роли, позволяющие читать новости.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - Истина, если у текущего пользователя включены роли, позволяющие читать новости.
//
Функция ЕстьРолиЧтенияНовостей() Экспорт

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если (ОбщегоНазначенияПовтИсп.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()) Тогда
		Если РольДоступна(Метаданные.Роли.ЧтениеНовостей)
				ИЛИ (
					РольДоступна(Метаданные.Роли.ПолныеПрава)
					И РольДоступна(Метаданные.Роли.АдминистраторСистемы)
				) Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	Иначе // Коробка или Модель сервиса в разделенном сеансе
		Если РольДоступна(Метаданные.Роли.ЧтениеНовостей)
				ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает Истина, если у текущего пользователя включена роль ПолныеПрава.
// Пользователи с ролью ПолныеПрава могут править разделенные объекты,
//  но не могут редактировать неразделенные объекты (справочники, план видов характеристик).
// Редактировать неразделенные объекты могут пользователи с ролью АдминистраторСистемы.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - Истина, если у текущего пользователя включена роль ПолныеПрава.
//
Функция ЕстьРольПолныеПрава() Экспорт

	Результат = РольДоступна(Метаданные.Роли.ПолныеПрава);

	Возврат Результат;

КонецФункции

// Возвращает Истина, если у текущего пользователя включены административные права.
// Здесь необходимо прописать проверку наличия у текущего пользователя административных прав.
// Это может быть код Если РольДоступна(Метаданные.Роли.ПолныеПрава)
//  или вызов какой-то функции БСП.
// Определение, администратор ли это необходимо для того, чтобы:
// - в тексте новости заменить "<div id=""IPPConfigUpdate"" />" на ссылку на обработку по обновлению конфигурации;
// - в тексте новости (только с id=6588f3f9-d569-478f-a370-7cd75d833966, информация о недоступности ленты новостей)
//     заменять комментарий <!-- Текст для администраторов --> на ссылку на ленту новостей.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - Истина, если у текущего пользователя включены административные права.
//
Функция ЭтоАдминистратор() Экспорт

	// В коробке Администратор - это тот, у кого есть роли АдминистраторСистемы и ПолныеПрава;
	// Во фреше, в неразделенном режиме Администратор - это тот, у кого есть роли АдминистраторСистемы и ПолныеПрава;
	// Во фреше, в разделенном режиме Администраторов нет.

	Результат = Ложь;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
		Если ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			Если РольДоступна(Метаданные.Роли.АдминистраторСистемы)
					И РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если РольДоступна(Метаданные.Роли.АдминистраторСистемы)
				И РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает фиксированную структуру с часто используемыми параметрами пользователя.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - фиксированная структура с ключами:
//   * ИмяПользователяИБ              - Строка;
//   * ЕстьРольЧтенияНовостей         - Булево;
//   * ЕстьРольРедактированиеНовостей - Булево;
//   * ЕстьРольПолныеПрава            - Булево;
//   * ЕстьРольАдминистраторСистемы   - Булево;
//   * ЭтоВнешнийПользователь         - Булево;
//   * ЭтоФоновоеЗадание              - Булево;
//   * ТекущийПользовательСсылка      - СправочникСсылка.Пользователи.
//
Функция ПараметрыТекущегоПользователя() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Результат = Новый Структура("ИмяПользователяИБ, ЕстьРольЧтенияНовостей, ЕстьРольРедактированиеНовостей, ЕстьРольПолныеПрава,
			|ЕстьРольАдминистраторСистемы, ЭтоВнешнийПользователь, ЭтоФоновоеЗадание, ТекущийПользовательСсылка",
		"", // ИмяПользователяИБ
		Ложь, // ЕстьРольЧтенияНовостей
		Ложь, // ЕстьРольРедактированиеНовостей
		Ложь, // ЕстьРольПолныеПрава
		Ложь, // ЕстьРольАдминистраторСистемы
		Ложь, // ЭтоВнешнийПользователь
		Ложь, // ЭтоФоновоеЗадание
		Справочники.Пользователи.ПустаяСсылка() // ТекущийПользовательСсылка
	);

	ИмяПользователяИБ = СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);

	Результат.Вставить("ИмяПользователяИБ", ИмяПользователяИБ);
	Результат.Вставить("ЭтоФоновоеЗадание", ПустаяСтрока(ИмяПользователяИБ));
	Результат.Вставить("ЕстьРольЧтенияНовостей", РольДоступна(Метаданные.Роли.ЧтениеНовостей));
	Результат.Вставить("ЕстьРольРедактированиеНовостей", РольДоступна(Метаданные.Роли.РедактированиеНовостей));
	Результат.Вставить("ЕстьРольПолныеПрава", РольДоступна(Метаданные.Роли.ПолныеПрава));
	Результат.Вставить("ЕстьРольАдминистраторСистемы", РольДоступна(Метаданные.Роли.АдминистраторСистемы));

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если (ОбщегоНазначенияПовтИсп.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()) Тогда
		Результат.Вставить("ЭтоВнешнийПользователь", Ложь);
		Результат.Вставить("ТекущийПользовательСсылка", Справочники.Пользователи.ПустаяСсылка());
	Иначе
		Результат.Вставить("ЭтоВнешнийПользователь", ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя());
		Результат.Вставить("ТекущийПользовательСсылка", ПараметрыСеанса.ТекущийПользователь);
		// Результат.Вставить("ТекущийВнешнийПользовательСсылка", ПараметрыСеанса.ТекущийВнешнийПользователь);
		// Результат.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь()); // Пользователи.АвторизованныйПользователь() - если надо получать ссылку на внешнего пользователя.
	КонецЕсли;

	ФиксированныйРезультат = Новый ФиксированнаяСтруктура(Результат);

	Возврат ФиксированныйРезультат;

КонецФункции

// Функция возвращает список всех пользователей с включенными ролями "РедактированиеНовостей" и ("АдминистраторСистемы" и "ПолныеПрава").
// Список необходим, например, для настройки прав редактирования на локальную ленту новостей.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Массив - массив структур всех пользователей с включенными ролями "РедактированиеНовостей" и ("АдминистраторСистемы" и "ПолныеПрава") с ключами:
//    * Пользователь              - СправочникСсылка.Пользователи;
//    * ПользовательПредставление - Строка;
//    * ПолныеПрава               - Булево - доступны роли АдминистраторСистемы и ПолныеПрава (т.е. может редактировать новости без дополнительных разрешений).
//
Функция ПолучитьСписокРедакторовНовостей() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Результат = Новый Массив;

	РольАдминистраторСистемы   = Метаданные.Роли.АдминистраторСистемы;
	РольПолныеПрава            = Метаданные.Роли.ПолныеПрава;
	РольРедактированиеНовостей = Метаданные.Роли.РедактированиеНовостей;

	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ТекущийПользовательИБ Из МассивПользователейИБ Цикл
		Добавить = Ложь;
		Если (ТекущийПользовательИБ.Роли.Содержит(РольАдминистраторСистемы))
				И (ТекущийПользовательИБ.Роли.Содержит(РольПолныеПрава)) Тогда
			ПолныеПрава = Истина;
			Добавить    = Истина;
		ИначеЕсли ТекущийПользовательИБ.Роли.Содержит(РольРедактированиеНовостей) Тогда
			ПолныеПрава = Ложь;
			Добавить    = Истина;
		КонецЕсли;

		// Найти пользователя из справочника.
		Если Добавить = Истина Тогда
			БылиОшибки = Ложь;
			Попытка
				НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ТекущийПользовательИБ.УникальныйИдентификатор);
			Исключение
				БылиОшибки = Истина;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = НСтр("ru='Ошибка поиска пользователя (%ПолныеПрава%) по уникальному идентификатору:
                    |Краткое имя пользователя: %КраткоеИмяПользователя%
                    |Полное имя пользователя: %ПолноеИмяПользователя%
                    |Уникальный идентификатор: %УникальныйИдентификатор%
                    |Причина:
                    |%ИнформацияОбОшибке%
                    |'
                    |;uk='Помилка пошуку користувача (%ПолныеПрава%) по унікальному ідентифікатору:
                    |Короткий ім''я користувача: %КраткоеИмяПользователя%
                    |Повне ім''я користувача: %ПолноеИмяПользователя%
                    |Унікальний ідентифікатор: %УникальныйИдентификатор%
                    |Причина:
                    |%ИнформацияОбОшибке%
                    |'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолныеПрава%", ?(ПолныеПрава = Истина, НСтр("ru='доступны полные права';uk='доступні повні права'"), НСтр("ru='роль РедакторНовостей';uk='роль РедакторНовостей'")));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КраткоеИмяПользователя%", ТекущийПользовательИБ.Имя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолноеИмяПользователя%", ТекущийПользовательИБ.ПолноеИмя);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УникальныйИдентификатор%", ТекущийПользовательИБ.УникальныйИдентификатор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				// Запись в журнал регистрации
				ОбработкаНовостей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Разное';uk='БІП:Новини.Різне'"), // ИмяСобытия
					НСтр("ru='Новости. Разное. Ошибка работы с пользователями';uk='Новини. Різне. Помилка роботи з користувачами'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения // Комментарий
				);
			КонецПопытки;
			Если БылиОшибки = Ложь Тогда
				Если НЕ НайденныйПользователь.Пустая() Тогда
					Результат.Добавить(
						Новый Структура("Пользователь, ПользовательПредставление, ПолныеПрава",
							НайденныйПользователь,
							?(ПолныеПрава = Истина,
								НайденныйПользователь.Наименование + " " + НСтр("ru='(полные права)';uk='(повні права)'"),
								НайденныйПользователь.Наименование + " " + НСтр("ru='(редактор новостей)';uk='(редактор новин)'")),
							ПолныеПрава));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПоискДанных

// Функция возвращает ссылку на ленту новостей по ее коду.
//
// Параметры:
//  ЛентаНовостейКод - Строка - код ленты новостей.
//
// Возвращаемое значение:
//   СправочникСсылка.ЛентыНовостей - ссылка на ленту новостей или пустая ссылка, если нет ленты новостей с таким кодом.
//
Функция ПолучитьЛентуНовостейПоКоду(ЛентаНовостейКод) Экспорт

	ТипСтрока = Тип("Строка");

	Если ТипЗнч(ЛентаНовостейКод) = ТипСтрока
			И НЕ ПустаяСтрока(ЛентаНовостейКод) Тогда
		Результат = Справочники.ЛентыНовостей.НайтиПоКоду(ЛентаНовостейКод, Ложь);
	Иначе
		Результат = Справочники.ЛентыНовостей.ПустаяСсылка();
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает массив отключенных лент новостей.
// Вынесено из Хранилища настроек.НастройкиНовостей, т.к. выполняется очень часто для контекстных новостей.
// При изменении настроек лент новостей необходимо сбросить кеш с помощью ОбновитьПовторноИспользуемыеЗначения().
//
// Параметры:
//  ИмяПользователяИБ - Строка - Имя пользователя, для которого необходимо рассчитать данные.
//
// Возвращаемое значение:
//   Массив - Массив отключенных лент новостей.
//
Функция ПолучитьМассивОтключенныхЛентНовостей(ИмяПользователяИБ) Экспорт

	Результат = Новый Массив;

	ПроверкаДляПользователя = Истина;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если (ОбщегоНазначенияПовтИсп.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()) Тогда
		ПроверкаДляПользователя = Ложь;
	КонецЕсли;

	Если ПроверкаДляПользователя = Ложь Тогда
		// Если НЕ вошли в область данных:
		// Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		//	Возврат;
		// КонецЕсли;
		// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).

		// Правила проверки (для разделенной базы в неразделенном сеансе):
		// Лента помечена на удаление? ДА: скрыта; НЕТ: видима.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка КАК ЛентаНовостей
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|ГДЕ
			|	Спр.ПометкаУдаления = ИСТИНА
			|";
	Иначе
		// Правила проверки:
		// - Лента помечена на удаление? ДА: скрыта; НЕТ: проверяем далее;
		//   -- Лента отключена для пользователя в настройках ленты? ДА: скрыта; НЕТ: проверяем далее;
		//     --- Лента обязательная (нельзя отключить)? ДА: видима; НЕТ: проверяем далее;
		//       ---- Лента отключена пользователем? ДА: скрыта; НЕТ: видима.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
			|// Исключения видимости в свойствах ленты.
			|ВЫБРАТЬ
			|	Ссылка КАК ЛентаНовостей,
			|	ИСТИНА КАК ЕстьИсключение
			|ПОМЕСТИТЬ
			|	ВТ_ИсключенияВидимости
			|ИЗ
			|	Справочник.ЛентыНовостей.ИсключенияВидимости КАК Спр
			|ГДЕ
			|	Спр.Пользователь = &ТекущийПользователь
			|ИНДЕКСИРОВАТЬ ПО
			|	ЛентаНовостей
			|;
			|
			|// Определить, какие ленты новостей от пользователя скрыты в настройках самой ленты (с помощью ВидимостьПоУмолчанию):
			|// Если ВидимостьПоУмолчанию = ИСТИНА, а пользователь в исключениях - скрыта;
			|// Если ВидимостьПоУмолчанию = ЛОЖЬ, и пользователя нет в исключениях - скрыта;
			|// Иначе - видима.
			|ВЫБРАТЬ
			|	Спр.Ссылка КАК ЛентаНовостей,
			|	ВЫБОР
			|		КОГДА (Спр.ВидимостьПоУмолчанию = ИСТИНА) И (ЕСТЬNULL(ВТ_ИсключенияВидимости.ЕстьИсключение, ЛОЖЬ) = ИСТИНА) ТОГДА
			|			ИСТИНА
			|		КОГДА (Спр.ВидимостьПоУмолчанию = ЛОЖЬ) И (ЕСТЬNULL(ВТ_ИсключенияВидимости.ЕстьИсключение, ЛОЖЬ) = ЛОЖЬ) ТОГДА
			|			ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ КАК ЛентаОтключена
			|ПОМЕСТИТЬ
			|	ВТ_ОтключенныеАдминистраторомЛентыНовостей
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	ВТ_ИсключенияВидимости
			|	ПО
			|		Спр.Ссылка = ВТ_ИсключенияВидимости.ЛентаНовостей
			|ИНДЕКСИРОВАТЬ ПО
			|	ЛентаОтключена
			|;
			|
			|// Запрос к отключенным пользователем лентам новостей (за исключением обязательных).
			|ВЫБРАТЬ
			|	Рег.ЛентаНовостей КАК ЛентаНовостей
			|ПОМЕСТИТЬ
			|	ВТ_ОтключенныеПользователемЛентыНовостей
			|ИЗ
			|	РегистрСведений.ОтключенныеЛентыНовостей КАК Рег
			|ГДЕ
			|	Рег.Пользователь = &ТекущийПользователь // По текущему пользователю
			|	И Рег.ЛентаНовостей В ( // Лента по-умолчанию видима пользователю
			|		ВЫБРАТЬ
			|			ВТ_ОтключенныеАдминистраторомЛентыНовостей.ЛентаНовостей
			|		ИЗ
			|			ВТ_ОтключенныеАдминистраторомЛентыНовостей
			|		ГДЕ
			|			ВТ_ОтключенныеАдминистраторомЛентыНовостей.ЛентаОтключена = ЛОЖЬ
			|	)
			|	И Рег.ЛентаНовостей.ОбязательныйКанал <> ИСТИНА // Лента не обязательна (ее можно отключить)
			|;
			|
			|// Основной запрос, который включает:
			|//   Помеченные на удаление ленты новостей;
			|//   Отключенные администратором;
			|//   Отключенные пользователем (которые вообще можно отключать).
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Спр.Ссылка КАК ЛентаНовостей
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|ГДЕ
			|	Спр.ПометкаУдаления = ИСТИНА
			|
			|ОБЪЕДИНИТЬ // Без дубликатов
			|
			|ВЫБРАТЬ
			|	Спр.ЛентаНовостей КАК ЛентаНовостей
			|ИЗ
			|	ВТ_ОтключенныеАдминистраторомЛентыНовостей КАК Спр
			|ГДЕ
			|	Спр.ЛентаОтключена = ИСТИНА
			|
			|ОБЪЕДИНИТЬ // Без дубликатов
			|
			|ВЫБРАТЬ
			|	Спр.ЛентаНовостей КАК ЛентаНовостей
			|ИЗ
			|	ВТ_ОтключенныеПользователемЛентыНовостей КАК Спр
			|
			|";
		Запрос.УстановитьПараметр("ТекущийПользователь",
			ПолучитьПользователяПоИмениПользователяИБ(ИмяПользователяИБ));
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить(); // ОбработкаЗагрузки(), КлючОбъекта = "ОтключенныеЛентыНовостей"
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("ЛентаНовостей");
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВспомогательныеПроцедурыИФункции

// Функция возвращает список категорий типа Дата и Число, к которым применимы
//  произвольные условия сравнения категорий, а не только "=".
// 
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Список значений.
//
Функция ПолучитьСписокКатегорийСПроизвольнымиУсловиямиСравнения() Экспорт

	Результат = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПВХ.Ссылка      КАК Ссылка,
		|	ПВХ.ТипЗначения КАК ОписаниеТипов
		|ИЗ
		|	ПланВидовХарактеристик.КатегорииНовостей КАК ПВХ
		|";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТипЧисло = Тип("Число");
		ТипДата  = Тип("Дата");
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если (Выборка.ОписаниеТипов.Типы()[0] = ТипЧисло)
					ИЛИ (Выборка.ОписаниеТипов.Типы()[0] = ТипДата) Тогда
				Результат.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция формирует представление отборов.
//
// Параметры:
//  ЛентаНовостей - СправочникСсылка.ЛентыНовостей - лента новостей с настроенными административными отборами;
//  Пользователь  - СправочникСсылка.Пользователи  - пользователь, для которого надо показать пользовательские отборы.
//
// Возвращаемое значение:
//   Строка - многострочная строка с описанием отборов.
//
Функция ПолучитьОписаниеОтборов(ЛентаНовостей, Пользователь) Экспорт

	ПредставлениеВсехОтборовПодробно  = "";
	ствПользовательскиеОтборы         = Новый Соответствие;
	ствАдминистративныеОтборы         = Новый Соответствие;
	ствАвтоматическиЗаполняемыеОтборы = Новый Соответствие;

	ТипСписокЗначений = Тип("СписокЗначений");

	// В ОтборыПоЛентамНовостейПользовательские будет гарантированно правильная таблица значений
	//  - за это отвечает модуль менеджера ХранилищаНастроек.НастройкиНовостей.
	// Здесь возможно получение настроек для другого (не текущего) пользователя.
	лкОтборыПоЛентамНовостейПользовательские = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"ОтборыПоЛентамНовостейПользовательские", // КлючОбъекта
		"", // КлючНастроек, пока не обрабатывается
		,
		ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ(Пользователь)); // ИмяПользователя
	Для Каждого ТекущийОтбор Из лкОтборыПоЛентамНовостейПользовательские Цикл
		Если ТекущийОтбор.ЛентаНовостей = ЛентаНовостей Тогда
			НайденноеСоответствие = ствПользовательскиеОтборы.Получить(ТекущийОтбор.КатегорияНовостей);
			Если НайденноеСоответствие = Неопределено Тогда
				МассивЗначений = Новый Массив;
			Иначе
				МассивЗначений = НайденноеСоответствие;
			КонецЕсли;
			МассивЗначений.Добавить(ТекущийОтбор.ЗначениеКатегорииНовостей);
			ствПользовательскиеОтборы.Вставить(ТекущийОтбор.КатегорияНовостей, МассивЗначений);
		КонецЕсли;
	КонецЦикла;

	// Здесь возможно получение настроек для другого (не текущего) пользователя.
	лкОтборыПоЛентамНовостейНастроенныеАдминистратором = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"ОтборыПоЛентамНовостейНастроенныеАдминистратором", // КлючОбъекта
		ЛентаНовостей, // КлючНастроек
		,
		ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ(Пользователь)); // ИмяПользователя
	Для Каждого ТекущийОтбор Из лкОтборыПоЛентамНовостейНастроенныеАдминистратором Цикл
		Если ТекущийОтбор.ЛентаНовостей = ЛентаНовостей Тогда
			НайденноеСоответствие = ствАдминистративныеОтборы.Получить(ТекущийОтбор.КатегорияНовостей);
			Если НайденноеСоответствие = Неопределено Тогда
				МассивЗначений = Новый Массив;
			Иначе
				МассивЗначений = НайденноеСоответствие;
			КонецЕсли;
			МассивЗначений.Добавить(ТекущийОтбор.ЗначениеКатегорииНовостей);
			ствАдминистративныеОтборы.Вставить(ТекущийОтбор.КатегорияНовостей, МассивЗначений);
		КонецЕсли;
	КонецЦикла;

	// Список доступных для отбора категорий новостей по каждой ленте новостей.
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.КатегорияНовостей                          КАК КатегорияНовостей,
		|	Спр.КатегорияНовостей.ЗаполняетсяАвтоматически КАК ЗаполняетсяАвтоматически,
		|	Спр.РазрешеноНастраиватьПользователям          КАК РазрешеноНастраиватьПользователям
		|ИЗ
		|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
		|ГДЕ
		|	Спр.Ссылка = &ЛентаНовостей
		|	И Спр.КатегорияНовостей.ЗаполняетсяАвтоматически = ИСТИНА
		|";
	Запрос.УстановитьПараметр("ЛентаНовостей", ЛентаНовостей);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			лкЗначениеАвтоматическогоЗаполнения =
				ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории(Выборка.КатегорияНовостей);
			Если ТипЗнч(лкЗначениеАвтоматическогоЗаполнения) = ТипСписокЗначений Тогда
				// Взять последнее значение.
				Если лкЗначениеАвтоматическогоЗаполнения.Количество() > 0 Тогда
					лкЗначениеАвтоматическогоЗаполнения = лкЗначениеАвтоматическогоЗаполнения.Получить(лкЗначениеАвтоматическогоЗаполнения.Количество() - 1).Значение;
				Иначе
					// Не может возвращаться пустой список значений.
					лкЗначениеАвтоматическогоЗаполнения = "";
				КонецЕсли;
			КонецЕсли;
			НайденноеСоответствие = ствАвтоматическиЗаполняемыеОтборы.Получить(Выборка.КатегорияНовостей);
			Если НайденноеСоответствие = Неопределено Тогда
				МассивЗначений = Новый Массив;
			Иначе
				МассивЗначений = НайденноеСоответствие;
			КонецЕсли;
			МассивЗначений.Добавить(лкЗначениеАвтоматическогоЗаполнения);
			ствАвтоматическиЗаполняемыеОтборы.Вставить(Выборка.КатегорияНовостей, МассивЗначений);
		КонецЦикла;

		Если ствПользовательскиеОтборы.Количество() > 0 Тогда
			ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + НСтр("ru='Отборы, настроенные пользователем (можно изменить):';uk='Відбори, настроєні користувачем (можна змінити):'") + Символы.ПС;
			Для Каждого ТекущееПредставлениеОтбора Из ствПользовательскиеОтборы Цикл
				МассивЗначений = ТекущееПредставлениеОтбора.Значение;
				Если МассивЗначений.Количество() = 0 Тогда
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + НСтр("ru=': * (любое значение)';uk=': * (будь-яке значення)'") + Символы.ПС;
				ИначеЕсли МассивЗначений.Количество() = 1 Тогда
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + ": " + МассивЗначений[0] + Символы.ПС;
				Иначе // > 0
					ПредставлениеЗначений = "";
					Для Каждого ТекущееЗначениеОтбора Из МассивЗначений Цикл
						ПредставлениеЗначений = ПредставлениеЗначений + "#" + ТекущееЗначениеОтбора + "#";
					КонецЦикла;
					ПредставлениеЗначений = СтрЗаменить(ПредставлениеЗначений, "##", "; ");
					ПредставлениеЗначений = СтрЗаменить(ПредставлениеЗначений, "#", "");
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + ": " + ПредставлениеЗначений + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ствАдминистративныеОтборы.Количество() > 0 Тогда
			ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + НСтр("ru='Отборы, настроенные администратором (нельзя изменить):';uk='Відбори, встановлені адміністратором (неможна змінити):'") + Символы.ПС;
			Для Каждого ТекущееПредставлениеОтбора Из ствАдминистративныеОтборы Цикл
				МассивЗначений = ТекущееПредставлениеОтбора.Значение;
				Если МассивЗначений.Количество() = 0 Тогда
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + НСтр("ru=': * (любое значение)';uk=': * (будь-яке значення)'") + Символы.ПС;
				ИначеЕсли МассивЗначений.Количество() = 1 Тогда
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + ": " + МассивЗначений[0] + Символы.ПС;
				Иначе // > 0
					ПредставлениеЗначений = "";
					Для Каждого ТекущееЗначениеОтбора Из МассивЗначений Цикл
						ПредставлениеЗначений = ПредставлениеЗначений + "#" + ТекущееЗначениеОтбора + "#";
					КонецЦикла;
					ПредставлениеЗначений = СтрЗаменить(ПредставлениеЗначений, "##", "; ");
					ПредставлениеЗначений = СтрЗаменить(ПредставлениеЗначений, "#", "");
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + ": " + ПредставлениеЗначений + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ствАвтоматическиЗаполняемыеОтборы.Количество() > 0 Тогда
			ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + НСтр("ru='Автоматически заполняемые отборы (нельзя изменить):';uk='Відбори, що заповнюються автоматично (можна змінити):'") + Символы.ПС;
			Для Каждого ТекущееПредставлениеОтбора Из ствАвтоматическиЗаполняемыеОтборы Цикл
				МассивЗначений = ТекущееПредставлениеОтбора.Значение;
				Если МассивЗначений.Количество() = 0 Тогда
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + НСтр("ru=': * (любое значение)';uk=': * (будь-яке значення)'") + Символы.ПС;
				ИначеЕсли МассивЗначений.Количество() = 1 Тогда
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + ": " + МассивЗначений[0] + Символы.ПС;
				Иначе // > 0
					ПредставлениеЗначений = "";
					Для Каждого ТекущееЗначениеОтбора Из МассивЗначений Цикл
						ПредставлениеЗначений = ПредставлениеЗначений + "#" + ТекущееЗначениеОтбора + "#";
					КонецЦикла;
					ПредставлениеЗначений = СтрЗаменить(ПредставлениеЗначений, "##", "; ");
					ПредставлениеЗначений = СтрЗаменить(ПредставлениеЗначений, "#", "");
					ПредставлениеВсехОтборовПодробно = ПредставлениеВсехОтборовПодробно + "  " + ТекущееПредставлениеОтбора.Ключ + ": " + ПредставлениеЗначений + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ПустаяСтрока(ПредставлениеВсехОтборовПодробно) Тогда
			ПредставлениеВсехОтборовПодробно = НСтр("ru='Отборы не настроены';uk='Відбори не настроєний'");
		КонецЕсли;

	Иначе
		ПредставлениеВсехОтборовПодробно = НСтр("ru='По этой ленте отборы не настраиваются';uk='По цій стрічці відбори не настроюються'");
	КонецЕсли;

	Возврат ПредставлениеВсехОтборовПодробно;

КонецФункции

// Возвращает URL для получения новостей.
// Все параметры (в поле ИмяФайла они заключены в квадратные скобки) будут заменены на конкретные значения.
// Возвращаемый результат можно вставить в браузер и он отобразит новости.
//
// Параметры:
//  ЛентаНовостей                          - СправочникСсылка.ЛентыНовостей, Структура - лента новостей или структура с ключами Ссылка, Протокол, Сайт, ИмяФайла,
//                                             для которой необходимо сформировать URL получения новостей;
//  ДатаЗагрузкиПоследнихНовостейНаКлиенте - Дата, Неопределено - дата последнего успешного получения новостей (для замены параметра [from]).
//                                           Если НЕ введена, то будет получена из регистра сведений;
//  ДатаПоследнейПопыткиЗагрузкиНовостей   - Дата, Неопределено - дата последней успешной загрузки файла новостей или Неопределено.
//                                           если последняя попытка получения новостей была неудачна.
//                                           Если НЕ введена, то будет получена из регистра сведений.
//
// Возвращаемое значение:
//   Строка - URL получения новостей, готовый для вставки в браузер.
//
Функция ПолучитьАдресДляПолученияНовостей(
			ЛентаНовостей,
			ДатаЗагрузкиПоследнихНовостейНаКлиенте = Неопределено,
			ДатаПоследнейПопыткиЗагрузкиНовостей = Неопределено) Экспорт

	ТипДата = Тип("Дата");

	Если ТипЗнч(ЛентаНовостей) = Тип("СправочникСсылка.ЛентыНовостей") Тогда
		лкСсылка = ЛентаНовостей;
	Иначе // Структура
		лкСсылка = ЛентаНовостей.Ссылка;
	КонецЕсли;
	лкПротокол = ЛентаНовостей.Протокол;
	лкСайт     = ЛентаНовостей.Сайт;
	лкИмяФайла = ЛентаНовостей.ИмяФайла;
	лкДатаЗагрузкиПоследнихНовостейНаКлиенте = ДатаЗагрузкиПоследнихНовостейНаКлиенте;
	лкДатаПоследнейПопыткиЗагрузкиНовостей   = ДатаПоследнейПопыткиЗагрузкиНовостей;

	// Обращаться к регистру только если дату не передали.
	Если Найти(лкИмяФайла, "[from]") > 0 Тогда
		Если (ТипЗнч(лкДатаЗагрузкиПоследнихНовостейНаКлиенте) <> ТипДата)
				ИЛИ (ТипЗнч(лкДатаПоследнейПопыткиЗагрузкиНовостей) <> ТипДата) Тогда
			Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
			Запись.ЛентаНовостей = лкСсылка;
			Запись.Прочитать();
			Если Запись.Выбран() Тогда
				Если (ТипЗнч(лкДатаЗагрузкиПоследнихНовостейНаКлиенте) <> ТипДата) Тогда
					лкДатаЗагрузкиПоследнихНовостейНаКлиенте = Запись.ДатаЗагрузкиПоследнихНовостей;
				КонецЕсли;
				Если (ТипЗнч(лкДатаПоследнейПопыткиЗагрузкиНовостей) <> ТипДата) Тогда
					лкДатаПоследнейПопыткиЗагрузкиНовостей = Запись.ДатаПоследнейПопыткиЗагрузкиНовостей;
				КонецЕсли;
			Иначе
				Если (ТипЗнч(лкДатаЗагрузкиПоследнихНовостейНаКлиенте) <> ТипДата) Тогда
					лкДатаЗагрузкиПоследнихНовостейНаКлиенте = '00010101';
				КонецЕсли;
				Если (ТипЗнч(лкДатаПоследнейПопыткиЗагрузкиНовостей) <> ТипДата) Тогда
					лкДатаПоследнейПопыткиЗагрузкиНовостей = '00010101';
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// {Замена параметров для URL ленты новостей}.
	// Заменить значения параметров в имени файла:
	//  [from] - дата последнего получения новостей, округленная до начала часа вниз;
	//  [config] - имя (на английском) + "," + версия конфигурации (99.99.999.9999);
	//  [platformVersion] - версия платформы 99.99.999.9999;
	//  [filter] - список всех серверных фильтров.
	// Разделитель параметров в URL всегда символ "&", он должен проставляться вручную в шаблоне имени файла в настройках ленты новостей.
	лкИмяФайлаНаСервере = СокрЛП(лкИмяФайла);
	Если Найти(лкИмяФайлаНаСервере, "[from]") > 0 Тогда
		Если (лкДатаЗагрузкиПоследнихНовостейНаКлиенте > Дата(1,1,1,1,0,0)) Тогда // > 01.01.0001 01:00:00 (именно 1 час, чтобы минус 1 час не вызвал ошибки)
			// Возможна ситуация, когда новости последний раз обновились давно (допустим, 27/05/2014 15:15Z,
			//  т.к. лента новостей - редкообновляющаяся), а попытки чтения осуществляются каждый час
			//  и последняя успешная попытка была 08/09/2014 16:00Z. И тогда, чтобы каждый час не осуществлять
			//  запрос с параметром from=2014-05-27T14:00:00Z (не забываем про минус 1 час и округление),
			//  то лучше сделать запрос с параметром from=2014-09-08T15:00:00Z
			Если (лкДатаПоследнейПопыткиЗагрузкиНовостей > '00010101') 
					И (лкДатаПоследнейПопыткиЗагрузкиНовостей > (лкДатаЗагрузкиПоследнихНовостейНаКлиенте + 2*24*60*60)) Тогда
				// Если мы больше двух суток успешно получаем файл новостей, но в нем нет новых новостей,
				//  то получать следующий файл не от даты последней значимой новости,
				//  а от даты последней успешной загрузки, на всякий случай с запасом 2 дня.
				лкДатаЗагрузкиПоследнихНовостейНаКлиенте = лкДатаПоследнейПопыткиЗагрузкиНовостей - 2*24*60*60;
			КонецЕсли;

			// Если новость создали в 09:59:59, то есть вероятность, что она из-за кеша не попадет в отбор from=09:00:00,
			//  и в запрос from=10:00:00 она тоже не попадет уже из-за условий отбора на сервере по дате публикации,
			//  поэтому новости будем получать с запасом в 1 час вниз.
			лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[from]", "from=" + XMLСтрока(НачалоЧаса(лкДатаЗагрузкиПоследнихНовостейНаКлиенте - 3600)) + "Z"); // Дата хранится в часовом поясе +0
		Иначе
			// Получить все-все новости, с начала времен.
			лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[from]", "from=0001-01-01T00:00:00Z");
		КонецЕсли;
	КонецЕсли;

	// Значения предопределенных категорий.
	ЭтотПродукт     = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ЭтотПродукт"); // Имя продукта и полная версия платформы
	ВерсияПлатформы = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы

	лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[config]", "config=" + ЭтотПродукт);
	лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[platformVersion]", "platformVersion=" + ВерсияПлатформы);
	лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[filter]", Справочники.ЛентыНовостей.СформироватьТекстУсловияДляСервераНовостей(лкСсылка));

	Результат = лкПротокол + "://" + лкСайт + "/" + лкИмяФайлаНаСервере;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСМетаданными

// Возвращает таблицу метаданных, которую можно использовать для подстановки в полях ввода и т.п.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица со списком метаданных с колонками:
//     * ИмяМетаданных       - Строка - имя метаданных для удобного представления;
//     * НавигационнаяСсылка - Строка - навигационная ссылка, по которой можно открыть объект метаданных;
//     * РазделСправки       - Строка - имя раздела справки, по которому можно открыть справку;
//     * СписокСобытий       - СписокЗначений - список событий (пока только одно - "ПриОткрытии");
//     * СписокФорм          - СписокЗначений - список всех форм объекта.
//
Функция ПолучитьТаблицуМетаданных() Экспорт

	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("ИмяМетаданных",       Новый ОписаниеТипов("Строка"));
	ТаблицаМетаданных.Колонки.Добавить("НавигационнаяСсылка", Новый ОписаниеТипов("Строка"));
	ТаблицаМетаданных.Колонки.Добавить("РазделСправки",       Новый ОписаниеТипов("Строка"));
	ТаблицаМетаданных.Колонки.Добавить("СписокСобытий",       Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаМетаданных.Колонки.Добавить("СписокФорм",          Новый ОписаниеТипов("СписокЗначений"));

	МассивГруппМетаданных = Новый Массив();
	МассивГруппМетаданных.Добавить(Новый Структура("ИмяЕЧ, ИмяМЧ, НачалоСсылки",
		"Справочник",
		"Справочники",
		"e1cib/data/"));
	МассивГруппМетаданных.Добавить(Новый Структура("ИмяЕЧ, ИмяМЧ, НачалоСсылки",
		"Документ",
		"Документы",
		"e1cib/data/"));
	МассивГруппМетаданных.Добавить(Новый Структура("ИмяЕЧ, ИмяМЧ, НачалоСсылки",
		"ЖурналДокументов",
		"ЖурналыДокументов",
		"e1cib/list/"));
	МассивГруппМетаданных.Добавить(Новый Структура("ИмяЕЧ, ИмяМЧ, НачалоСсылки",
		"Отчет",
		"Отчеты",
		"e1cib/app/"));
	МассивГруппМетаданных.Добавить(Новый Структура("ИмяЕЧ, ИмяМЧ, НачалоСсылки",
		"Обработка",
		"Обработки",
		"e1cib/app/"));

	// Заполнить таблицу метаданных.
	Для каждого ТекущаяГруппаМетаданных Из МассивГруппМетаданных Цикл

		Для каждого ТекущийЭлементМетаданных Из Метаданные[ТекущаяГруппаМетаданных.ИмяМЧ] Цикл // Во множественном числе
			НоваяСтрока = ТаблицаМетаданных.Добавить();
			НоваяСтрока.ИмяМетаданных = ТекущаяГруппаМетаданных.ИмяЕЧ + "." + ТекущийЭлементМетаданных.Имя;
			Для каждого ТекущаяФорма Из ТекущийЭлементМетаданных.Формы Цикл
				НоваяСтрока.СписокФорм.Добавить(ТекущаяФорма.Имя);
			КонецЦикла;
			НоваяСтрока.СписокСобытий.Добавить("ПриОткрытии");
			НоваяСтрока.РазделСправки = ТекущаяГруппаМетаданных.ИмяЕЧ + "." + ТекущийЭлементМетаданных.Имя;
			// Навигационная ссылка
			Если (ТекущаяГруппаМетаданных.ИмяЕЧ = "Справочник")
					ИЛИ (ТекущаяГруппаМетаданных.ИмяЕЧ = "Документ") Тогда
				ОсновнаяФорма = ТекущийЭлементМетаданных.ОсновнаяФормаСписка;
			Иначе // Обработка, Отчет, ЖурналДокументов
				ОсновнаяФорма = ТекущийЭлементМетаданных.ОсновнаяФорма;
			КонецЕсли;
			Если ОсновнаяФорма  <> Неопределено Тогда
				НоваяСтрока.НавигационнаяСсылка = 
					ТекущаяГруппаМетаданных.НачалоСсылки + ТекущаяГруппаМетаданных.ИмяЕЧ + "." + ТекущийЭлементМетаданных.Имя + ".Форма." + ОсновнаяФорма.Имя;
			Иначе
				Если (ТекущаяГруппаМетаданных.ИмяЕЧ = "Справочник")
						ИЛИ (ТекущаяГруппаМетаданных.ИмяЕЧ = "ЖурналДокументов")
						ИЛИ (ТекущаяГруппаМетаданных.ИмяЕЧ = "Документ") Тогда
					НоваяСтрока.НавигационнаяСсылка = 
						"e1cib/list/" + ТекущаяГруппаМетаданных.ИмяЕЧ + "." + ТекущийЭлементМетаданных.Имя;
				ИначеЕсли (ТекущаяГруппаМетаданных.ИмяЕЧ = "Отчет")
						ИЛИ (ТекущаяГруппаМетаданных.ИмяЕЧ = "Обработка") Тогда
					НоваяСтрока.НавигационнаяСсылка = 
						ТекущаяГруппаМетаданных.НачалоСсылки + ТекущаяГруппаМетаданных.ИмяЕЧ + "." + ТекущийЭлементМетаданных.Имя;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;

	Возврат ТаблицаМетаданных;

КонецФункции

#КонецОбласти

#Область ПоискНовостей

// Получение структуры новости по уникальному идентификатору и ленте новостей.
// Эту функцию НЕЛЬЗЯ вызывать при получении новостей (при парсинге файлов новостей).
//  Так как может возникнуть ситуация, когда новость последовательно (в течение короткого времени):
//    а) опубликовали,
//    б) отменили публикацию.
//  Тогда в структуре будет указано, что новость ПУСТАЯ (еще не создана) и загрузка новости увидев,
//   что новости нет и публикация отменена не будет предпринимать никаких действий и новость не пометится на удаление.
//
// Параметры:
//  ЛентаНовостей  - СправочникСсылка.ЛентыНовостей;
//  УИННовости     - Строка - уникальный идентификатор новостей.
//
// Возвращаемое значение:
//  Структура с ключами:
//    * Ссылка          - СправочникСсылка.Новости;
//    * УИН_ИБ          - Строка - Уникальный идентификатор ссылки на новость в ИБ;
//    * ДатаПубликации  - Дата;
//    * ПометкаУдаления - Булево.
//
Функция ПолучитьСсылкуНаНовость(ЛентаНовостей, УИННовости) Экспорт

	Объект = ОбработкаНовостей.ПолучитьСсылкуНаНовость(ЛентаНовостей, УИННовости);

	Возврат Объект;

КонецФункции

#КонецОбласти

#Область ИнтерактивнаяРаботаСТекстомНовости

// Функция возвращает ХТМЛ или простой текст новости по ссылке на новость.
//
// Параметры:
//  лкНовости            - СправочникОбъект.Новость, СправочникСсылка.Новость, Структура, Массив - данные новости или списка новостей;
//  ПараметрыОтображения - Структура или Неопределено, в которой передаются параметры для отображения новости. Список возможных параметров:
//    * ОтображатьЗаголовок - Булево;
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьХТМЛТекстНовостей(лкНовости, ПараметрыОтображения = Неопределено) Экспорт

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");

	Если ТипЗнч(лкНовости) = Тип("СправочникСсылка.Новости")
			ИЛИ ТипЗнч(лкНовости) = ТипСтруктура
			ИЛИ ТипЗнч(лкНовости) = ТипМассив Тогда
		Результат = Справочники.Новости.ПолучитьХТМЛТекстНовостей(лкНовости, ПараметрыОтображения);
	Иначе
		Результат = "";
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПолучениеЗначенийКатегорий

// Функция возвращает значение категории, если для нее установлено свойство "ЗаполняетсяАвтоматически".
// Переопределение функции имеет смысл только если необходимо возвращать значения, отличные от значений по-умолчанию.
// 
// Параметры:
//  Категория    - ПланВидовХарактеристикСсылка.КатегорииНовостей.
//
// Возвращаемое значение:
//  Произвольное (Строка, список значений).
//
Функция ПолучитьЗначениеПредопределеннойКатегории(Категория) Экспорт

	Результат = "";

	ТипСтрока    = Тип("Строка");
	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(Категория) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		КатегорияКод = СокрЛП(Категория.Код);
	ИначеЕсли ТипЗнч(Категория) = ТипСтрока Тогда
		КатегорияКод = СокрЛП(Категория);
		Если ВРег(КатегорияКод) = ВРег("ИмяКонфигурации") Тогда
			КатегорияКод = "ProductName";
		КонецЕсли;
	Иначе
		Возврат Результат;
	КонецЕсли;

	Если ВРег(КатегорияКод) = ВРег("PlatformVersion") Тогда
		Результат = Новый СписокЗначений;
		ПредставлениеВерсии = "";
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Версия = СистемнаяИнформация.ВерсияПриложения;
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Версия, ".");
		// Версия должна быть в формате "99.99.999.9999".
		Пока МассивСлов.Количество() < 4 Цикл
			МассивСлов.Добавить("0");
		КонецЦикла;
		Индекс = 1;
		Для каждого ТекущееСлово Из МассивСлов Цикл
			// Версия должна быть в формате 99.99.999.9999.
			Если Индекс > 4 Тогда
				Прервать;
			КонецЕсли;
			Если (Индекс = 1) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 2-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 2) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 2-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 3) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 3-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 4) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 4-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			Иначе
				ТекущееФорматированноеСлово = СокрЛП(ТекущееСлово);
			КонецЕсли;
			Индекс = Индекс + 1;

			Если ПустаяСтрока(ПредставлениеВерсии) Тогда
				ПредставлениеВерсии = ТекущееФорматированноеСлово;
			Иначе
				ПредставлениеВерсии = ПредставлениеВерсии + "." + ТекущееФорматированноеСлово;
			КонецЕсли;
			Результат.Добавить(ПредставлениеВерсии);
		КонецЦикла;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("ВерсияПлатформы") Тогда
		// Попробовать получить данные из ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.
		// В случае неудачи вернуть значение по-умолчанию.
		ВерсииПлатформы = ПолучитьЗначениеПредопределеннойКатегории("PlatformVersion");
		ЗначениеПоУмолчанию = ВерсииПлатформы[ВерсииПлатформы.Количество()-1].Значение; // Только полная версия платформы
		Результат = ЗначениеПоУмолчанию;
		лкПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
		Если ТипЗнч(лкПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
			Если лкПараметрыОкруженияБИП_Новости.Свойство(КатегорияКод) Тогда
				Если НЕ ПустаяСтрока(лкПараметрыОкруженияБИП_Новости[КатегорияКод]) Тогда
					Результат = лкПараметрыОкруженияБИП_Новости[КатегорияКод];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("ProductVersion") Тогда
		Результат = Новый СписокЗначений;
		ПредставлениеВерсии = "";
		Версия = Метаданные.Версия;
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Версия, ".");
		// Версия должна быть в формате "99.99.999.9999".
		Пока МассивСлов.Количество() < 4 Цикл
			МассивСлов.Добавить("0");
		КонецЦикла;
		Индекс = 1;
		Для каждого ТекущееСлово Из МассивСлов Цикл
			// Версия должна быть в формате "99.99.999.9999".
			Если Индекс > 4 Тогда
				Прервать;
			КонецЕсли;
			Если (Индекс = 1) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 2-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 2) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 2-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 3) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 3-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 4) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 4-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			Иначе
				ТекущееФорматированноеСлово = СокрЛП(ТекущееСлово);
			КонецЕсли;
			Индекс = Индекс + 1;

			Если ПустаяСтрока(ПредставлениеВерсии) Тогда
				ПредставлениеВерсии = ТекущееФорматированноеСлово;
			Иначе
				ПредставлениеВерсии = ПредставлениеВерсии + "." + ТекущееФорматированноеСлово;
			КонецЕсли;
			Результат.Добавить(ПредставлениеВерсии);
		КонецЦикла;

		// В исключительных случаях (когда в Метаданные.Версия записана нестандартная версия, например 1.2.3.4.5 или 1.2.3.4/5.6.7.8),
		//  то переложить получение точной версии на разработчиков.
		НовыйРезультат = ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории(КатегорияКод, Результат);
		Если ЗначениеЗаполнено(НовыйРезультат) Тогда
			Результат = НовыйРезультат;
		КонецЕсли;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("ВерсияПродукта") Тогда
		// Попробовать получить данные из ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.
		// В случае неудачи вернуть значение по-умолчанию.
		ВерсииПродукта = ПолучитьЗначениеПредопределеннойКатегории("ProductVersion");
		ЗначениеПоУмолчанию = ВерсииПродукта[ВерсииПродукта.Количество()-1].Значение; // Только полная версия продукта (конфигурации)
		Результат = ЗначениеПоУмолчанию;
		лкПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
		Если ТипЗнч(лкПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
			Если лкПараметрыОкруженияБИП_Новости.Свойство(КатегорияКод) Тогда
				Если НЕ ПустаяСтрока(лкПараметрыОкруженияБИП_Новости[КатегорияКод]) Тогда
					Результат = лкПараметрыОкруженияБИП_Новости[КатегорияКод];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("ProductName") Тогда // В плане видов характеристик "КатегорииНовостей" такого элемента нет.
		// Попробовать получить данные из ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.
		// В случае неудачи вернуть значение по-умолчанию.
		ЗначениеПоУмолчанию = "Unknown"; // ИмяКонфигурации (из метаданных), либо надо указать произвольное имя английскими буквами!
		НовоеЗначениеПоУмолчанию = ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории(КатегорияКод, ЗначениеПоУмолчанию); // Обязательно изменить имя конфигурации
		Если ЗначениеЗаполнено(НовоеЗначениеПоУмолчанию) Тогда
			ЗначениеПоУмолчанию = НовоеЗначениеПоУмолчанию;
		КонецЕсли;
		Результат = ЗначениеПоУмолчанию;
		лкПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
		Если ТипЗнч(лкПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
			Если лкПараметрыОкруженияБИП_Новости.Свойство("ИмяКонфигурации") Тогда
				Если НЕ ПустаяСтрока(лкПараметрыОкруженияБИП_Новости["ИмяКонфигурации"]) Тогда
					Результат = лкПараметрыОкруженияБИП_Новости["ИмяКонфигурации"];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("ЭтотПродукт") Тогда
		// Попробовать получить данные из ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.
		// В случае неудачи вернуть значение по-умолчанию.
		Продукты = ПолучитьЗначениеПредопределеннойКатегории("Product");
		ЗначениеПоУмолчанию = Продукты[Продукты.Количество()-1].Значение; // Только полная версия продукта (конфигурации)
		Результат = ЗначениеПоУмолчанию;
		лкПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
		Если ТипЗнч(лкПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
			Если лкПараметрыОкруженияБИП_Новости.Свойство(КатегорияКод) Тогда
				Если НЕ ПустаяСтрока(лкПараметрыОкруженияБИП_Новости[КатегорияКод]) Тогда
					Результат = лкПараметрыОкруженияБИП_Новости[КатегорияКод];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("Product") Тогда
		// Должен получиться список:
		// - ИмяКонфигурации
		// - ИмяКонфигурации,01
		// - ИмяКонфигурации,01.02
		// - ИмяКонфигурации,01.02.003
		// - ИмяКонфигурации,01.02.003.0004
		// т.е. кроме просто имени конфигурации должны быть все версии.
		// Возможно, кроме основного имени конфигурации стОит указать список синонимов.
		// Все дополнительные синонимы должны идти ДО основного имени так, чтобы последний элемент
		//   списка (Список[Список.Количество()-1]) = настоящее имя конфигурации + полная версия.
		Результат = Новый СписокЗначений;
		Продукт = ПолучитьЗначениеПредопределеннойКатегории("ProductName"); // ИмяКонфигурации
		Результат.Добавить(Продукт);

		ПредставлениеВерсии = "";
		Версия = Метаданные.Версия;
		МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Версия, ".");
		// Версия должна быть в формате "99.99.999.9999".
		Пока МассивСлов.Количество() < 4 Цикл
			МассивСлов.Добавить("0");
		КонецЦикла;
		Индекс = 1;
		Для каждого ТекущееСлово Из МассивСлов Цикл
			// Версия должна быть в формате "99.99.999.9999".
			Если Индекс > 4 Тогда
				Прервать;
			КонецЕсли;
			Если (Индекс = 1) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 2-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 2) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 2-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 3) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 3-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			ИначеЕсли (Индекс = 4) Тогда
				ТекущееФорматированноеСлово = ОбработкаНовостейКлиентСервер.ПовторитьСимволы("0", 4-СтрДлина(СокрЛП(ТекущееСлово))) + СокрЛП(ТекущееСлово);
			Иначе
				ТекущееФорматированноеСлово = СокрЛП(ТекущееСлово);
			КонецЕсли;
			Индекс = Индекс + 1;

			Если ПустаяСтрока(ПредставлениеВерсии) Тогда
				ПредставлениеВерсии = ТекущееФорматированноеСлово;
			Иначе
				ПредставлениеВерсии = ПредставлениеВерсии + "." + ТекущееФорматированноеСлово;
			КонецЕсли;
			Результат.Добавить(Продукт + "," + ПредставлениеВерсии);
		КонецЦикла;

		// В исключительных случаях (когда в Метаданные.Версия записана нестандартная версия, например 1.2.3.4.5 или 1.2.3.4/5.6.7.8),
		//  то переложить получение точной версии на разработчиков.
		НовыйРезультат = ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории(КатегорияКод, Результат);
		Если НЕ ПустаяСтрока(НовыйРезультат) Тогда
			Результат = НовыйРезультат;
		КонецЕсли;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("МетаданныеИмя") Тогда
		Результат = Метаданные.Имя;

	ИначеЕсли ВРег(КатегорияКод) = ВРег("МетаданныеВерсия") Тогда
		Результат = Метаданные.Версия;

	Иначе
		// Все остальные категории отдавать в переопределяемый модуль.
		Результат = "";
		НовыйРезультат = ОбработкаНовостейПереопределяемый.ПолучитьЗначениеПредопределеннойКатегории(КатегорияКод, Результат);
		Если ЗначениеЗаполнено(НовыйРезультат) Тогда
			Результат = НовыйРезультат;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Отладка

// Функция возвращает значение, надо ли вести подробный журнал регистрации.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - Истина, если надо вести подробный журнал регистрации, Ложь в противном случае.
//
Функция ВестиПодробныйЖурналРегистрации() Экспорт

	ТипСтруктура = Тип("Структура");
	ТипБулево    = Тип("Булево");

	ЖурналРегистрации_ПодробнаяЗапись = Истина;

	НастройкиЖурналаРегистрации = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиЖурналаРегистрации",
		"");

	Если ТипЗнч(НастройкиЖурналаРегистрации) = ТипСтруктура Тогда
		Если НастройкиЖурналаРегистрации.Свойство("ЖурналРегистрации_ПодробнаяЗапись") Тогда
			Если ТипЗнч(НастройкиЖурналаРегистрации.ЖурналРегистрации_ПодробнаяЗапись) = ТипБулево Тогда
				ЖурналРегистрации_ПодробнаяЗапись = НастройкиЖурналаРегистрации.ЖурналРегистрации_ПодробнаяЗапись;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ЖурналРегистрации_ПодробнаяЗапись;

КонецФункции

#КонецОбласти

#КонецОбласти

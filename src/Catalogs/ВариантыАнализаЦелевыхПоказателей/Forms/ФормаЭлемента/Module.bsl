
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Объект.Владелец.Пустая() Тогда
		ВызватьИсключение НСтр("ru='Создание варианта анализа возможно только из рабочего места ""Варианты анализа целевых показателей"".';uk='Створення варіанту аналізу можливе лише з робочого місця ""Варіанти аналізу цільових показників"".'");
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	ПриЧтенииСозданииНаСервере();

	УстановитьМасштабЭлементовФормы();
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СохранитьНастройкиСКДВариантаАнализа(ТекущийОбъект);
	
	ТекущийОбъект.ПериодАнализа = Новый ХранилищеЗначения(ПериодАнализа);
	
	ТекущийОбъект.ПериодСравнения = Новый ХранилищеЗначения(ПериодСравнения);
	
	ТекущийОбъект.ХранилищеНастроекОформления = ХранилищеНастроекОформления;

	ТекущийОбъект.ХранилищеДемонстрационныхДанных = ХранилищеДемонстрационныхДанных;
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура  ПослеЗаписи(ПараметрыЗаписи)
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Элементы.ПериодСравнения.АвтоОтметкаНезаполненного
		И НЕ ЗначениеЗаполнено(ПериодСравнения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Период сравнения"" не заполнено';uk='Поле ""Період порівняння"" не заповнено'"), , 
			"ПериодСравнения", ,
			Отказ);
	КонецЕсли;
	
	Если Элементы.ОбъектАнализа.АвтоОтметкаНезаполненного
		И ОбъектАнализа = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Объект анализа"" не заполнено';uk='Поле ""Об''єкт аналізу"" не заповнено'"), , 
			"ОбъектАнализа", ,
			Отказ);
	КонецЕсли;
	
	Если Элементы.ЗначениеАнализа.АвтоОтметкаНезаполненного
		И ЗначениеАнализа = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Значение"" не заполнено';uk='Поле ""Значення"" не заповнено'"), , 
			"ЗначениеАнализа", ,
			Отказ);
		КонецЕсли;
		
	Если Элементы.ЗначениеАнализаДополнительное.АвтоОтметкаНезаполненного
		И ЗначениеАнализаДополнительное = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Доп. значение"" не заполнено';uk='Поле ""Дод. значення"" не заповнено'"), , 
			"ЗначениеАнализаДополнительное", ,
			Отказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГлубинаАнализаПрогнозаПриИзменении(Элемент)
	УстановитьНадписиКПолямПериодов(Объект, Элементы);
КонецПроцедуры

&НаКлиенте
Процедура ГоризонтПрогнозаПриИзменении(Элемент)
	УстановитьНадписиКПолямПериодов(Объект, Элементы);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеАнализаПриИзменении(Элемент)
	Если ЗначениеАнализа = ЗначениеАнализаДополнительное Тогда
		ЗначениеАнализаДополнительное = Неопределено;
	КонецЕсли;
	ЗаполнитьСписокВыбораЗначенийАнализа();
	
	УстановитьДоступностьЗаполненияПоШаблону();
КонецПроцедуры

&НаКлиенте
Процедура РежимПокомпонентногоСравненияПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементовСравнения(Объект, Элементы, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МетодРасчетаЗначенийПриИзменении(Элемент)
	УстановитьДоступностьЗаполненияПоШаблону();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектАнализаПриИзменении(Элемент)
	УстановитьДоступностьЗаполненияПоШаблону();
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ОтборПоПользователю = Новый Структура("Пользователь", Объект.Ответственный);
	
	Если Не Объект.Ответственный.Пустая() Тогда
		Если Объект.НастройкиДоступности.НайтиСтроки(ОтборПоПользователю).Количество() = 0 Тогда
			СтрокаВопроса = Формат(НСтр("ru='Сделать доступным вариант анализа для';uk='Зробити доступним варіант аналізу для'")) + " " + Объект.Ответственный + "?"; 
			
			Ответ = Неопределено;
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОтветственныйПриИзмененииЗавершение", ЭтотОбъект), СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Ответ = РезультатВопроса; 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НоваяНастройкаДоступности = Объект.НастройкиДоступности.Добавить();
		НоваяНастройкаДоступности.Пользователь = Объект.Ответственный;
		НоваяНастройкаДоступности.ВариантОтображения = Объект.ВариантОтображенияПоУмолчанию;
	КонецЕсли;
	
	УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы);
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьРасчетаПоказателяПриИзменении(Элемент)
	УстановитьНадписиКПолямПериодов(Объект, Элементы);
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьПрогнозПриИзменении(Элемент)
	УстановитьДоступностьЭлементовПрогнозированияФормы(Элементы, Объект.РассчитыватьПрогноз);
КонецПроцедуры

&НаКлиенте
Процедура ТипАнализаПриИзменении(Элемент)
	УстановитьСписокВыбораТиповДиаграмм(СоответствиеТиповСравненияИТиповДиаграмм, Элементы.ТипДиаграммы.СписокВыбора, Объект.ТипАнализа);
	
	УстановитьВидимостьДоступностьЭлементовФормы(СоответствиеТиповСравненияИТиповДиаграмм, Объект, Элементы, ЭтаФорма);
	
	Объект.ТипДиаграммы = Элементы.ТипДиаграммы.СписокВыбора[0].Значение;
	
	УстановитьДоступностьЗаполненияПоШаблону();
КонецПроцедуры

&НаКлиенте
Процедура ТочностьРасчетаДробнойЧастиПриИзменении(Элемент)
	УстановитьНадписьЗнаковПослеЗапятой(Объект.ТочностьРасчетаДробнойЧасти, Элементы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьНаименованиеПоШаблону(Команда)
	ЭлементыНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	СтрокаПриОтборах = "";
	Если ЕстьПользовательскиеНастройки(ЭлементыНастроек, Ложь) Тогда
		СтрокаПриОтборах = НСтр("ru='Установлены отборы';uk='Встановлені відбори'");
	КонецЕсли;
	
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", Объект.ТипАнализа);
	НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	ОбъектАнализаДоступен =  НайденныеПараметры[0].ОбъектАнализаДоступен;
	
	ПараметрВалютаРасчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, НСтр("ru='ВалютаРасчета';uk='ВалютаРасчета'"));
	
	Объект.Наименование = Строка(Элементы.ЗначениеАнализа.ТекстРедактирования) + ?(ПараметрВалютаРасчета = Неопределено, "", " " + "(" + ПараметрВалютаРасчета.Значение + ")")
						  + ?(ОбъектАнализаДоступен, " " + НСтр("ru='по';uk='по'")+ " " + Строка(Элементы.ОбъектАнализа.ТекстРедактирования), "")
						  + ", " + Строка(Объект.МетодРасчетаЗначений)
						  + ?(НЕ ПустаяСтрока(СтрокаПриОтборах), ", " + СтрокаПриОтборах, "");
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступность(Команда)
	ПараметрыФормы  = Новый Структура("
		|Пользователи, 
		|ВариантОтображенияПоУмолчанию", 
		Объект.НастройкиДоступности, 
		Объект.ВариантОтображенияПоУмолчанию);

	ОткрытьФорму("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаДоступности", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("НастроитьДоступностьЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		ЗаполнитьНастройкиДоступности(Результат);
		
		УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы);
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru='Настройка отборов и упорядочивания для варианта анализа ""%1""';uk='Настройка відборів та впорядкування для варіанту аналізу ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Объект.Наименование);
	
	Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище();
	АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПользовательскиеНастройки, УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура("АдресаСхемыКомпоновкиДанных, АдресПользовательскихНастроек", Адреса, АдресПользовательскихНастроек);
	
	ОткрытьФорму("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаОтборов", ПараметрыФормы,,,,, Новый ОписаниеОповещения("НастроитьОтборыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АдресПользовательскихНастроек = Результат;
	
	Если Не АдресПользовательскихНастроек = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПолучитьИзВременногоХранилища(АдресПользовательскихНастроек));
	КонецЕсли;
	
	УстановитьНадписиНастроекОтборовИУпорядочивания(КомпоновщикНастроек, Элементы);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчеты(Команда)
	ПараметрыФормы  = Новый Структура("ВариантыОтчетов", Объект.ОтчетыДляРасшифровки);
	
	ОткрытьФорму("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаОтчетовДляРасшифровки", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("НастроитьОтчетыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		ЗаполнитьНастройкиОтчетовДляРасшифровки(Результат);
		
		УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы);
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформление(Команда)
	
	СтруктураНастроекОформления  = Новый Структура("ХранилищеНастроекОформления, 
		|ТолькоЦветОсновнойСерии,
		|ГрадиентДляПокомпонетногоСравнения,
		|ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения,
		|ВыводитьМаркерыТочек,
		|ВыводитьМаркерТочекПрогноза,
		|ОтображатьЛегенду,
		|ВыводитьПодписиКДиаграммам,
		|ОкантовкаДиаграмм,
		|РежимСглаживанияДиаграмм,
		|РежимШкалыЗначений,
		|ВключатьНоль, 
		|ОформлениеПокомпонентногоСравненияДоступно,
		|ПрогнозированиеДоступно, 
		|ВыводитьМаркерыТочекДоступно,
		|ВыводитьМаркерТочекПрогнозаДоступно,
		|ВыводитьПодписиКДиаграммамДоступно,
		|ОкантовкаДиаграммДоступно,
		|РежимСглаживанияДиаграммДоступно",
		ХранилищеНастроекОформления, 
		Объект.ТолькоЦветОсновнойСерии,
		Объект.ГрадиентДляПокомпонетногоСравнения,
		Объект.ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения,
		Объект.ВыводитьМаркерыТочек,
		Объект.ВыводитьМаркерТочекПрогноза,
		Объект.ОтображатьЛегенду,
		Объект.ВыводитьПодписиКДиаграммам,
		Объект.ОкантовкаДиаграмм,
		Объект.РежимСглаживанияДиаграмм,
		Объект.РежимШкалыЗначений,
		Объект.ВключатьНоль);
		
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОформления, 
		НастройкиПоТипуАнализаИДиаграммы(Объект, СоответствиеТиповСравненияИТиповДиаграмм));
	
	ПараметрыФормы = Новый Структура("СтруктураНастроекОформления", СтруктураНастроекОформления);
	
	ОткрытьФорму("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаОформления", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("НастроитьОформлениеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Результат);
		
		ХранилищеНастроекОформления = Результат.ХранилищеНастроекОформления;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УказатьДемоДанные(Команда)
	СтруктураНастроекДемоДанных = СтруктураНастроекДемоДанных();
	
	Если СтруктураНастроекДемоДанных.НастройкиТребующиеОбновления.ТребуетсяОбновление Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПоказатьВопросЗавершение", ЭтаФорма, СтруктураНастроекДемоДанных), 
			НСтр("ru='С момента сохранения демонстрационных данных настройки изменились.
            | Продолжить с потерей демонстрационных данных?'
            |;uk='З моменту збереження демонстраційних даних настройки змінилися.
            | Продовжити з втратою демонстраційних даних?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыФормы = Новый Структура("СтруктураНастроекДемоДанных", СтруктураНастроекДемоДанных);
		
		ОткрытьФорму("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаДемоДанных", ПараметрыФормы,,,,, 
			Новый ОписаниеОповещения("УказатьДемоДанныеЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте 
Процедура ПоказатьВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ПараметрыФормы = Новый Структура("СтруктураНастроекДемоДанных", ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаДемоДанных", ПараметрыФормы,,,,, 
			Новый ОписаниеОповещения("УказатьДемоДанныеЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Функция СтруктураНастроекДемоДанных()
	ДоступныеТипыДиаграмм = Новый СписокЗначений;
	УстановитьСписокВыбораТиповДиаграмм(СоответствиеТиповСравненияИТиповДиаграмм, ДоступныеТипыДиаграмм, Объект.ТипАнализа);
	ДоступныеОбъектыАнализа = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(Объект.Владелец);
	ДоступныеЗначенияАнализа = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(Объект.Владелец);
	ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	ДоступныеПоляГруппировок = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	
	Если ДоступныеЗначенияАнализа.НайтиПоЗначению(ЗначениеАнализа) <> Неопределено Тогда
		ДоступноеПоле = ОтчетыКлиентСервер.ПолучитьДоступноеПоле(ДоступныеПоляВыбора, ЗначениеАнализа);
		ЗначениеАнализаЗаголовок = ДоступноеПоле.Заголовок;
	Иначе
		ЗначениеАнализаЗаголовок = "";
	КонецЕсли;
	Если ДоступныеЗначенияАнализа.НайтиПоЗначению(ЗначениеАнализаДополнительное) <> Неопределено Тогда
		ДоступноеПоле = ОтчетыКлиентСервер.ПолучитьДоступноеПоле(ДоступныеПоляВыбора, ЗначениеАнализаДополнительное);
		ЗначениеАнализаДополнительноеЗаголовок = ДоступноеПоле.Заголовок;
	Иначе
		ЗначениеАнализаДополнительноеЗаголовок = "";
	КонецЕсли;
	Если ДоступныеОбъектыАнализа.НайтиПоЗначению(ОбъектАнализа) <> Неопределено Тогда
		ДоступноеПоле = ОтчетыКлиентСервер.ПолучитьДоступноеПоле(ДоступныеПоляГруппировок, ОбъектАнализа);
		ОбъектАнализаЗаголовок = ДоступноеПоле.Заголовок;
		ОбъектАнализаТипЗначения = ДоступноеПоле.ТипЗначения;
	Иначе
		ОбъектАнализаЗаголовок = "";
	КонецЕсли;
	
	СтруктураНастроекДемоДанных  = Новый Структура("ВариантАнализа,
		|ЗначениеАнализа,
		|ЗначениеАнализаОписаниеТипа,
		|ЗначениеАнализаЗаголовок,
		|ЗначениеАнализаДополнительное,
		|ЗначениеАнализаДополнительноеОписаниеТипа,
		|ЗначениеАнализаДополнительноеЗаголовок,
		|ОбъектАнализа,
		|ОбъектАнализаОписаниеТипа,
		|ОбъектАнализаЗаголовок,
		|РежимПокомпонентногоСравнения,
		|ТипДиаграммы,
		|ДоступныеТипыДиаграмм,
		|ХранилищеДемонстрационныхДанных,
		|СтруктураНастроекОформления,
		|НастройкиТребующиеОбновления,
		|ХранилищеПользовательскихНастроекКомпоновкиДанных",
		Объект.Ссылка,
		ЗначениеАнализа,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, Объект.ТочностьРасчетаДробнойЧасти),
		ЗначениеАнализаЗаголовок,
		ЗначениеАнализаДополнительное,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, Объект.ТочностьРасчетаДробнойЧасти),
		ЗначениеАнализаДополнительноеЗаголовок,
		ОбъектАнализа,
		ОбъектАнализаТипЗначения,
		ОбъектАнализаЗаголовок,
		Объект.РежимПокомпонентногоСравнения,
		Объект.ТипДиаграммы,
		ДоступныеТипыДиаграмм.ВыгрузитьЗначения(),
		ХранилищеДемонстрационныхДанных,,,
		ХранилищеПользовательскихНастроекКомпоновкиДанных); 
		
	СтруктураНастроекОформления  = Новый Структура("ХранилищеНастроекОформления, 
		|ТолькоЦветОсновнойСерии,
		|ГрадиентДляПокомпонетногоСравнения,
		|ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения,
		|ВыводитьМаркерыТочек,
		|ВыводитьМаркерТочекПрогноза,
		|ОтображатьЛегенду,
		|ВыводитьПодписиКДиаграммам,
		|ОкантовкаДиаграмм,
		|РежимСглаживанияДиаграмм,
		|РежимШкалыЗначений,
		|ВключатьНоль,
		|ОформлениеПокомпонентногоСравненияДоступно,
		|ПрогнозированиеДоступно, 
		|ВыводитьМаркерыТочекДоступно,
		|ВыводитьМаркерТочекПрогнозаДоступно,
		|ВыводитьПодписиКДиаграммамДоступно,
		|ОкантовкаДиаграммДоступно,
		|РежимСглаживанияДиаграммДоступно", 
		ХранилищеНастроекОформления, 
		Объект.ТолькоЦветОсновнойСерии,
		Объект.ГрадиентДляПокомпонетногоСравнения,
		Объект.ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения,
		Объект.ВыводитьМаркерыТочек,
		Объект.ВыводитьМаркерТочекПрогноза,
		Объект.ОтображатьЛегенду,
		Объект.ВыводитьПодписиКДиаграммам,
		Объект.ОкантовкаДиаграмм,
		Объект.РежимСглаживанияДиаграмм,
		Объект.РежимШкалыЗначений,
		Объект.ВключатьНоль);
		
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОформления, 
		НастройкиПоТипуАнализаИДиаграммы(Объект, СоответствиеТиповСравненияИТиповДиаграмм));
	
	СтруктураНастроекДемоДанных.Вставить("СтруктураНастроекОформления", СтруктураНастроекОформления);
		
	НастройкиТребующиеОбновления = Новый Структура("
		|ТребуетсяОбновление,
		|ТипАнализа,
		|ПериодАнализа,
		|ПериодСравнения,
		|ПериодичностьРасчетаПоказателя,
		|РежимПокомпонентногоСравнения,
		|КратностьЗначений,
		|ТочностьРасчетаДробнойЧасти",
		Ложь,
		Объект.ТипАнализа,
		ПериодАнализа,
		ПериодСравнения,
		Объект.ПериодичностьРасчетаПоказателя,
		Объект.РежимПокомпонентногоСравнения,
		Объект.КратностьЗначений,
		Объект.ТочностьРасчетаДробнойЧасти);
		
	ХранилищеДемонстрационныхДанныхЗначение = ХранилищеДемонстрационныхДанных.Получить();
	Если ХранилищеДемонстрационныхДанныхЗначение <> Неопределено Тогда
		ХранилищеДемонстрационныхДанныхЗначение.Настройки.Вставить("ТребуетсяОбновление", Ложь);
		ТребуетсяОбновление = Не ОбщегоНазначения.ДанныеСовпадают(ХранилищеДемонстрационныхДанныхЗначение.Настройки, 
			НастройкиТребующиеОбновления);
		НастройкиТребующиеОбновления.Вставить("ТребуетсяОбновление", ТребуетсяОбновление);
	КонецЕсли;
		
	СтруктураНастроекДемоДанных.Вставить("НастройкиТребующиеОбновления", НастройкиТребующиеОбновления);
	
	Возврат СтруктураНастроекДемоДанных;
КонецФункции

&НаКлиенте
Процедура УказатьДемоДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Результат);
		ЗаполнитьЗначенияСвойств(Объект, Результат.СтруктураНастроекОформления);
		
		Модифицированность = Результат.Модифицированность;
		ХранилищеНастроекОформления = Результат.СтруктураНастроекОформления.ХранилищеНастроекОформления;
		ХранилищеДемонстрационныхДанных = Результат.ХранилищеДемонстрационныхДанных;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры
// Конец МенюОтчеты

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте 
Процедура УстановитьДоступностьЗаполненияПоШаблону()
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", Объект.ТипАнализа);
	НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	
	Если ЗначениеЗаполнено(Объект.ТипАнализа)
		И ЗначениеЗаполнено(ЗначениеАнализа)
		И НЕ Элементы.ЗначениеАнализа.СписокВыбора.НайтиПоЗначению(ЗначениеАнализа) = Неопределено
		И ЗначениеЗаполнено(Объект.МетодРасчетаЗначений) Тогда
		
		Если НайденныеПараметры[0].ОбъектАнализаДоступен Тогда
			Если НЕ ОбъектАнализа = Неопределено
				И НЕ Элементы.ОбъектАнализа.СписокВыбора.НайтиПоЗначению(ОбъектАнализа) = Неопределено Тогда
				Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
				
			Иначе
				Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Ложь;
			КонецЕсли;
		Иначе 
			Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьДоступностьЭлементовПрогнозированияФормы(Элементы, РассчитыватьПрогноз)
	Элементы.ГлубинаАнализаПрогноза.Доступность = РассчитыватьПрогноз;
	Элементы.ГоризонтПрогноза.Доступность = РассчитыватьПрогноз;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьВидимостьДоступностьЭлементовФормы(ТипыСравненияИТипыДиаграмм, Объект, Элементы, ЭтаФорма)
	НастройкиПоТипуАнализа = НастройкиПоТипуАнализа(Объект, ЭтаФорма.СоответствиеТиповСравненияИТиповДиаграмм);
	
	Если НастройкиПоТипуАнализа.ПериодСравненияДоступен Тогда
		Элементы.ГруппаПериодСравнения.ТекущаяСтраница = Элементы.ГруппаПериодСравненияПоле;
	Иначе
		Элементы.ГруппаПериодСравнения.ТекущаяСтраница = Элементы.ГруппаПериодСравненияПусто;
	КонецЕсли;
	Элементы.ПериодСравнения.АвтоОтметкаНезаполненного = НастройкиПоТипуАнализа.ПериодСравненияДоступен;
	
	Элементы.ГруппаПрогнозирование.Доступность = НастройкиПоТипуАнализа.ПрогнозированиеДоступно;
	
	Элементы.ГлубинаАнализаПрогноза.Доступность = Объект.РассчитыватьПрогноз;
	Элементы.ГоризонтПрогноза.Доступность = Объект.РассчитыватьПрогноз;
	
	Элементы.МетодРасчетаЗначений.Доступность = ЭтаФорма.НарастающийИтогДоступен;
	
	Если НастройкиПоТипуАнализа.ОбъектАнализаДоступен Тогда
		Элементы.РежимПокомпонентногоСравненияЭлементы.ТекущаяСтраница = Элементы.РежимПокомпонентногоСравненияЭлементыДоступны;
	Иначе
		Элементы.РежимПокомпонентногоСравненияЭлементы.ТекущаяСтраница = Элементы.РежимПокомпонентногоСравненияЭлементыНедоступны;
	КонецЕсли;
	
	Элементы.ОбъектАнализа.АвтоОтметкаНезаполненного = НастройкиПоТипуАнализа.ОбъектАнализаДоступен;
	Элементы.ЗначениеАнализаДополнительное.АвтоОтметкаНезаполненного = НастройкиПоТипуАнализа.ОбъектАнализаДоступен;
	
	Если ЭтаФорма.ЗначениеАнализаДополнительноеВыборВозможен Тогда
		Элементы.ГруппаРежимПокомпонентногоСравнения.ТекущаяСтраница = Элементы.РежимПокомпонентногоСравненияПереключатель;
	Иначе
		Элементы.ГруппаРежимПокомпонентногоСравнения.ТекущаяСтраница = Элементы.РежимПокомпонентногоСравненияПусто;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовСравнения(Объект, Элементы, НастройкиПоТипуАнализа.ОбъектАнализаДоступен);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписьЗнаковПослеЗапятой(ЗнаковПослеЗапятой, Элементы)
	Элементы.НадписьЗнаковПослеЗапятой.Заголовок = 
	ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
		ЗнаковПослеЗапятой, 
		НСтр("ru='знак';uk='знак'"), НСтр("ru='знака';uk='знака'"), НСтр("ru='знаков';uk='знаків'"), "м") + " " + НСтр("ru='после запятой';uk='після коми'");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписиКПолямПериодов(Объект, Элементы)
	Элементы.НадписьГлубинаАнализаПрогноза.Заголовок = МониторингЦелевыхПоказателейКлиентСервер.ПериодПрописью(Объект.ГлубинаАнализаПрогноза, Объект.ПериодичностьРасчетаПоказателя);
	Элементы.НадписьГоризонтПрогноза.Заголовок = МониторингЦелевыхПоказателейКлиентСервер.ПериодПрописью(Объект.ГоризонтПрогноза, Объект.ПериодичностьРасчетаПоказателя);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы)
	Если Объект.НастройкиДоступности.Количество() = 0 Тогда
		Элементы.НастроитьДоступность.Заголовок = НСтр("ru='настроить';uk='настроїти'");
	Иначе
		Элементы.НастроитьДоступность.Заголовок = НСтр("ru='посмотреть / изменить';uk='переглянути / змінити'");
	КонецЕсли;
	
	Если Объект.ОтчетыДляРасшифровки.Количество() = 0 Тогда
		Элементы.НастроитьОтчеты.Заголовок = НСтр("ru='настроить';uk='настроїти'");
	Иначе
		Элементы.НастроитьОтчеты.Заголовок = НСтр("ru='посмотреть / изменить';uk='переглянути / змінити'");
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписиНастроекОтборовИУпорядочивания(КомпоновщикНастроек, Элементы)
	ЭлементыНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	Если ЕстьПользовательскиеНастройки(ЭлементыНастроек) Тогда
		Элементы.НастроитьОтборыИУпорядочивание.Заголовок = НСтр("ru='посмотреть / изменить';uk='переглянути / змінити'");
	иначе
		Элементы.НастроитьОтборыИУпорядочивание.Заголовок = НСтр("ru='настроить';uk='настроїти'");
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьСписокВыбораТиповДиаграмм(ТипыСравненияИТипыДиаграмм, СписокВыбора, ТипАнализа)
	СписокВыбора.Очистить();
	
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", ТипАнализа);
	НайденныеТипыДиаграмм = ТипыСравненияИТипыДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	
	Для Каждого ТекНайденныйТипДиаграммы Из НайденныеТипыДиаграмм Цикл 
		СписокВыбора.Добавить(ТекНайденныйТипДиаграммы.ТипДиаграммы);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере 
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище()
	Возврат Справочники.СтруктураЦелей.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Объект.Владелец);
КонецФункции

&НаСервере 
Процедура ВосстановитьНастройкиСКДВариантаАнализа()
	ВариантАнализаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей"));
	Цель = Объект.Владелец;
	ДоступныеОбъектыАнализа = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(Объект.Владелец);
	ДоступныеЗначенияАнализа = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(Объект.Владелец);
	
	Если Параметры.Свойство("ЗначениеКопирования") И НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ХранилищеПользовательскихНастроекКомпоновкиДанных = Параметры.ЗначениеКопирования.ХранилищеПользовательскихНастроекКомпоновкиДанных;
		ОбъектАнализа = Параметры.ЗначениеКопирования.ОбъектАнализа.Получить();
		ЗначениеАнализа = Параметры.ЗначениеКопирования.ЗначениеАнализа.Получить();
		ЗначениеАнализаДополнительное = Параметры.ЗначениеКопирования.ЗначениеАнализаДополнительное.Получить();
	Иначе	
		ХранилищеПользовательскихНастроекКомпоновкиДанных = ВариантАнализаОбъект.ХранилищеПользовательскихНастроекКомпоновкиДанных;
		Если ОбъектАнализа = Неопределено Тогда
			ОбъектАнализаСохраненный = ВариантАнализаОбъект.ОбъектАнализа.Получить();
			Если ДоступныеОбъектыАнализа.НайтиПоЗначению(ОбъектАнализаСохраненный) <> Неопределено Тогда
				ОбъектАнализа = ОбъектАнализаСохраненный;
			Иначе
				ВариантАнализаОбъект.ОбъектАнализа = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеАнализа = Неопределено Тогда
			ЗначениеАнализаСохраненное = ВариантАнализаОбъект.ЗначениеАнализа.Получить();
			Если ДоступныеЗначенияАнализа.НайтиПоЗначению(ЗначениеАнализаСохраненное) <> Неопределено Тогда
				ЗначениеАнализа = ЗначениеАнализаСохраненное;
			Иначе
				ВариантАнализаОбъект.ЗначениеАнализа = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеАнализаДополнительное = Неопределено Тогда
			ЗначениеАнализаДополнительноеСохраненное = ВариантАнализаОбъект.ЗначениеАнализаДополнительное.Получить();
			Если ДоступныеЗначенияАнализа.НайтиПоЗначению(ЗначениеАнализаДополнительноеСохраненное) <> Неопределено Тогда
				ЗначениеАнализаДополнительное = ЗначениеАнализаДополнительноеСохраненное;
			Иначе
				ВариантАнализаОбъект.ЗначениеАнализаДополнительное = Новый ХранилищеЗначения(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбъектАнализа   = Строка(ОбъектАнализа);
	ЗначениеАнализа = Строка(ЗначениеАнализа);
	ЗначениеАнализаДополнительное = Строка(ЗначениеАнализаДополнительное);
	Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище();
	
	Если НЕ Адреса.СхемаКомпоновкиДанных = Неопределено Тогда
		Схема = ПолучитьИзВременногоХранилища(Адреса.СхемаКомпоновкиДанных);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		Если НЕ Адреса.НастройкиКомпоновкиДанных = Неопределено Тогда
			НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Адреса.НастройкиКомпоновкиДанных);
			
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Схема.Параметры.Найти("НарастающимИтогом") = Неопределено Тогда
		НарастающийИтогДоступен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ВосстановитьПериодАнализаСервер()
	ВариантАнализаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей"));
	
	Если Параметры.Свойство("ЗначениеКопирования") И НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ПериодАнализа = Параметры.ЗначениеКопирования.ПериодАнализа.Получить();
	Иначе
		ПериодАнализа = ВариантАнализаОбъект.ПериодАнализа.Получить();
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ВосстановитьПериодСравненияСервер()
	ВариантАнализаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей"));
	
	Если Параметры.Свойство("ЗначениеКопирования") И НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ПериодСравнения = Параметры.ЗначениеКопирования.ПериодСравнения.Получить();
	Иначе
		ПериодСравнения = ВариантАнализаОбъект.ПериодСравнения.Получить();
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ЕстьПользовательскиеНастройки(ПользовательскиеНастройкиЭлементы, УчитыватьПараметры = Истина)
	ЕстьИспользование = Ложь;
	
	Для Каждого ЭлементНастроек Из ПользовательскиеНастройкиЭлементы Цикл 
		Если ТипЗнч(ЭлементНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") 
			И НЕ УчитыватьПараметры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастроек.Использование Тогда
			ЕстьИспользование = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИспользование;
КонецФункции

&НаСервере 
Процедура ИнициализироватьДанныеФормы()
	ИнициализироватьКомпоновщикНастроек();
	
	ЗаполнитьСписокВыбораОбъектовАнализа();
	
	ЗаполнитьСписокВыбораЗначенийАнализа();
	
	Если Объект.ВариантОтображенияПоУмолчанию.Пустая() Тогда
		Объект.ВариантОтображенияПоУмолчанию = Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ИнициализироватьКомпоновщикНастроек()
	СКДВариантаАнализа = ХранилищеСхемыКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКДВариантаАнализа, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
		
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ ХранилищеНастроекКомпоновкиДанных = Неопределено И НЕ ХранилищеНастроекКомпоновкиДанных.Получить() = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ХранилищеНастроекКомпоновкиДанных.Получить());
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СКДВариантаАнализа.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Если НЕ ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить() = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить());
	КонецЕсли;
	
	// Заполним обязательный параметр ВалютРасчета для СКД где он есть и не заполнен
	ПараметрВалютаРасчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, НСтр("ru='ВалютаРасчета';uk='ВалютаРасчета'"));
	Если НЕ ПараметрВалютаРасчета = Неопределено И ПараметрВалютаРасчета.Значение = Справочники.Валюты.ПустаяСсылка() Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, НСтр("ru='ВалютаРасчета';uk='ВалютаРасчета'"), МониторингЦелевыхПоказателей.ПолучитьВалютуПоУмолчанию(), Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьНастройкиДоступности(АдресНастроекДоступности)
	ХранилищеТаблицыДоступности = ПолучитьИзВременногоХранилища(АдресНастроекДоступности);
	
	Если НЕ ХранилищеТаблицыДоступности = Неопределено Тогда
		ТаблицаДоступности = ХранилищеТаблицыДоступности.Получить();
		
		НастройкиДоступности = Объект.НастройкиДоступности;
		НастройкиДоступности.Очистить();
		Для Каждого СтрокаДоступности Из ТаблицаДоступности Цикл 
			Если НЕ СтрокаДоступности.Доступность Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = НастройкиДоступности.Добавить();
			НоваяСтрока.Пользователь = СтрокаДоступности.Пользователь;
			НоваяСтрока.ВариантОтображения = СтрокаДоступности.ВариантОтображения;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьНастройкиОтчетовДляРасшифровки(АдресНастроекОтчетов)
	ХранилищеТаблицыОтчетов = ПолучитьИзВременногоХранилища(АдресНастроекОтчетов);
	
	Если НЕ ХранилищеТаблицыОтчетов = Неопределено Тогда
		ТаблицаОтчетов = ХранилищеТаблицыОтчетов.Получить();
		
		ОтчетыДляРасшифровки = Объект.ОтчетыДляРасшифровки;
		ОтчетыДляРасшифровки.Очистить();
		Для Каждого СтрокаОтчет Из ТаблицаОтчетов Цикл 
			Если НЕ СтрокаОтчет.Доступность Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОтчетыДляРасшифровки.Добавить();
			НоваяСтрока.ВариантОтчета = СтрокаОтчет.ВариантОтчета;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьОбъектИЗначениеАнализаПоУмолчанию()
	ДоступныеОбъектыАнализа = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(Объект.Владелец);
	ДоступныеЗначенияАнализа = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(Объект.Владелец);
	
	ОбъектАнализа = ДоступныеОбъектыАнализа[0].Значение;
	ЗначениеАнализа = ДоступныеЗначенияАнализа[0].Значение;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСписокВыбораЗначенийАнализа()
	ДоступныеПоля = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(Объект.Владелец);
	
	Элементы.ЗначениеАнализа.СписокВыбора.Очистить();
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Элементы.ЗначениеАнализа.СписокВыбора.Добавить(Строка(ДоступноеПоле.Значение), ДоступноеПоле.Представление);
	КонецЦикла;
	
	Элементы.ЗначениеАнализаДополнительное.СписокВыбора.Очистить();
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл
		Если Строка(ДоступноеПоле.Значение) = ЗначениеАнализа Тогда
			Продолжить;
		КонецЕсли;
		Элементы.ЗначениеАнализаДополнительное.СписокВыбора.Добавить(Строка(ДоступноеПоле.Значение), ДоступноеПоле.Представление);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСписокВыбораОбъектовАнализа()
	ДоступныеПоля = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(Объект.Владелец);
	
	Элементы.ОбъектАнализа.СписокВыбора.Очистить();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Элементы.ОбъектАнализа.СписокВыбора.Добавить(Строка(ДоступноеПоле.Значение), ДоступноеПоле.Представление);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура ПриЧтенииСозданииНаСервере()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ХранилищеНастроекОформления = Параметры.ЗначениеКопирования.ХранилищеНастроекОформления;
			ХранилищеДемонстрационныхДанных = Параметры.ЗначениеКопирования.ХранилищеДемонстрационныхДанных;
			ХранилищеПользовательскихНастроекКомпоновкиДанных = Параметры.ЗначениеКопирования.ХранилищеПользовательскихНастроекКомпоновкиДанных;
		Иначе
			УстановитьНастройкиОформленияПоУмолчанию();
			
			ЗаполнитьОбъектИЗначениеАнализаПоУмолчанию();
			
			ХранилищеДемонстрационныхДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
	Иначе
		ВариантАнализаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей"));
		ХранилищеНастроекОформления = ВариантАнализаОбъект.ХранилищеНастроекОформления;
		ХранилищеДемонстрационныхДанных = ВариантАнализаОбъект.ХранилищеДемонстрационныхДанных;
	КонецЕсли;
	
	
	ЗначениеВДанныеФормы(МониторингЦелевыхПоказателей.ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм(), СоответствиеТиповСравненияИТиповДиаграмм);
	
	УстановитьСписокВыбораТиповДиаграмм(СоответствиеТиповСравненияИТиповДиаграмм, Элементы.ТипДиаграммы.СписокВыбора, Объект.ТипАнализа);
	
	УстановитьНадписиКПолямПериодов(Объект, Элементы);
	
	УстановитьНадписьЗнаковПослеЗапятой(Объект.ТочностьРасчетаДробнойЧасти, Элементы);
	
	ВосстановитьПериодАнализаСервер();
	
	ВосстановитьПериодСравненияСервер();

	ВосстановитьНастройкиСКДВариантаАнализа();
	
	ИнициализироватьДанныеФормы();
	
	УстановитьНадписиНастроекОтборовИУпорядочивания(КомпоновщикНастроек, Элементы);
	
	УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы);
	
	Элементы.НастроитьОформление.Заголовок = НСтр("ru='посмотреть / изменить';uk='переглянути / змінити'");
	Элементы.УказатьДемоДанные.Заголовок = НСтр("ru='посмотреть / изменить';uk='переглянути / змінити'");
	
	ОбъектАнализаВыборВозможен = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(Объект.Владелец).Количество() > 0;
	ЗначениеАнализаДополнительноеВыборВозможен = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(Объект.Владелец).Количество() > 1;
	
	УстановитьВидимостьДоступностьЭлементовФормы(СоответствиеТиповСравненияИТиповДиаграмм, Объект, Элементы, ЭтаФорма);
	
	УстановитьДоступностьЗаполненияПоШаблонуСервер();
КонецПроцедуры

&НаСервере 
Процедура СохранитьНастройкиСКДВариантаАнализа(ТекущийОбъект)
	Если ЗначениеЗаполнено(ОбъектАнализа) Тогда
		ТекущийОбъект.ОбъектАнализа = Новый ХранилищеЗначения(Новый ПолеКомпоновкиДанных(ОбъектАнализа));
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначениеАнализа) Тогда
		ТекущийОбъект.ЗначениеАнализа = Новый ХранилищеЗначения(Новый ПолеКомпоновкиДанных(ЗначениеАнализа));
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначениеАнализаДополнительное) Тогда
		ТекущийОбъект.ЗначениеАнализаДополнительное = Новый ХранилищеЗначения(Новый ПолеКомпоновкиДанных(ЗначениеАнализаДополнительное));
	КонецЕсли;
	ТекущийОбъект.ХранилищеПользовательскихНастроекКомпоновкиДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.ПользовательскиеНастройки);
КонецПроцедуры

&НаСервере 
Процедура УстановитьНастройкиОформленияПоУмолчанию()
	СтруктураНастроекОформления = Справочники.ВариантыАнализаЦелевыхПоказателей.НастройкиОформленияПоУмолчанию();
	
	Если НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ХранилищеНастроекОформления = Параметры.ЗначениеКопирования.ХранилищеНастроекОформления;
	Иначе
		ХранилищеНастроекОформления = СтруктураНастроекОформления.ХранилищеНастроекОформления;
		ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроекОформления);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура УстановитьДоступностьЗаполненияПоШаблонуСервер()
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", Объект.ТипАнализа);
	НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	
	Если ЗначениеЗаполнено(Объект.ТипАнализа) 
		И ЗначениеЗаполнено(ЗначениеАнализа)
		И ЗначениеЗаполнено(Объект.МетодРасчетаЗначений) Тогда
		
		Если НайденныеПараметры[0].ОбъектАнализаДоступен Тогда
			Если НЕ ОбъектАнализа = Неопределено Тогда
				Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
			Иначе
				Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Ложь;
			КонецЕсли;
		Иначе 
			Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
		КонецЕсли;
		
		Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
	Иначе
		Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция НастройкиПоТипуАнализаИДиаграммы(ВариантАнализа, СоответствиеТиповСравненияИТиповДиаграмм)
	СтруктураНастроекОформления  = Новый Структура("
		|ТипАнализа,
		|ТипДиаграммы,
		|ПериодСравненияДоступен,
		|ОбъектАнализаДоступен,
		|ОформлениеПокомпонентногоСравненияДоступно,
		|ПрогнозированиеДоступно, 
		|ВыводитьМаркерыТочекДоступно,
		|ВыводитьМаркерТочекПрогнозаДоступно,
		|ВыводитьПодписиКДиаграммамДоступно,
		|ОкантовкаДиаграммДоступно,
		|РежимСглаживанияДиаграммДоступно"); 

	ОтборПоТипуАнализаИДиаграммы = Новый Структура("ТипАнализа, ТипДиаграммы", ВариантАнализа.ТипАнализа, ВариантАнализа.ТипДиаграммы);
	НайденныеНастройки = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуАнализаИДиаграммы);
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОформления, НайденныеНастройки[0]);
	
	Возврат СтруктураНастроекОформления;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция НастройкиПоТипуАнализа(ВариантАнализа, СоответствиеТиповСравненияИТиповДиаграмм)
	СтруктураНастроекОформления  = Новый Структура("
		|ТипАнализа,
		|ТипДиаграммы,
		|ПериодСравненияДоступен,
		|ОбъектАнализаДоступен,
		|ОформлениеПокомпонентногоСравненияДоступно,
		|ПрогнозированиеДоступно, 
		|ВыводитьМаркерыТочекДоступно,
		|ВыводитьМаркерТочекПрогнозаДоступно,
		|ВыводитьПодписиКДиаграммамДоступно,
		|ОкантовкаДиаграммДоступно,
		|РежимСглаживанияДиаграммДоступно"); 

	ОтборПоТипуАнализа = Новый Структура("ТипАнализа", ВариантАнализа.ТипАнализа);
	НайденныеНастройки = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуАнализа);
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОформления, НайденныеНастройки[0]);
	
	Возврат СтруктураНастроекОформления;
КонецФункции

&НаСервере 
Процедура УстановитьМасштабЭлементовФормы()
	НастройкиКлиентскогоПриложения = Новый НастройкиКлиентскогоПриложения;
	
	ИнтерфейсТакси = (НастройкиКлиентскогоПриложения.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	МасштабКомпактный = (НастройкиКлиентскогоПриложения.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный);
	
	Если Не ИнтерфейсТакси ИЛИ МасштабКомпактный Тогда
		Элементы.Декорация1.Ширина = 3;
	Иначе
		Элементы.Декорация1.Ширина = 2;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступностьЭлементовСравнения(Знач Объект, Знач Элементы, ОбъектАнализаДоступен)
	Если Объект.РежимПокомпонентногоСравнения = 0 Тогда
		Элементы.ГруппаРежимПокомпонентногоСравненияПоляВвода.ТекущаяСтраница = Элементы.ГруппаРежимПокомпонентногоСравненияОбъектАнализа;
		Элементы.ОбъектАнализа.АвтоОтметкаНезаполненного = ОбъектАнализаДоступен;
		Элементы.ЗначениеАнализаДополнительное.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ГруппаРежимПокомпонентногоСравненияПоляВвода.ТекущаяСтраница = Элементы.ГруппаРежимПокомпонентногоСравненияДопЗначение;
		Элементы.ОбъектАнализа.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗначениеАнализаДополнительное.АвтоОтметкаНезаполненного = ОбъектАнализаДоступен;
	КонецЕсли;
КонецПроцедуры

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

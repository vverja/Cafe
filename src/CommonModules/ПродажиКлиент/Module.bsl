////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для обработки действий пользователя
// в процессе работы с документами продажи.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает наибольшую из дат аванса в строке тч ЭтапыОплаты
//
// Параметры:
//	ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - этапы оплаты, в которых необходимо рассчитать дату аванса
//
// Возвращаемое значение:
//	Дата
//	Максимальная дата аванса, если дат аванса нет - пустая дата
//
Функция МаксимальнаяДатаАванса(ЭтапыГрафикаОплаты) Экспорт
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки") Или
			ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения") Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МаксДатаАванса;
	
КонецФункции

// Процедура обработки события "ПриНачалеРедактирования" табличной части документа продажи
//
// Параметры:
//	Объект        - Форма - форма документа, в котором возникло событие
//	ИмяТаблицы    - Строка - имя таблицы, из которой произошло событие
//	СтрокаТаблицы - ДанныеФормыЭлементКоллекции - обрабатываемая строка табличной части документа
//	НоваяСтрока   - Булево - флаг редактирования новой строки
//	Копирование   - Булево - флаг редактирования путем копирования строки
//
Процедура СтрокаНоменклатурыПриНачалеРедактирования(Форма, ИмяТаблицы, СтрокаТаблицы, НоваяСтрока, Копирование) Экспорт

	Если НоваяСтрока И НЕ Копирование Тогда

		Если Не Форма.ИспользоватьСоглашенияСКлиентами И СтрокаТаблицы.Свойство("ВидЦены") Тогда
			
			Таблица = Форма.Объект[ИмяТаблицы];
			
			Если Таблица.Количество() > 1 Тогда
				СтрокаТаблицы.ВидЦены = Таблица[СтрокаТаблицы.НомерСтроки - 2].ВидЦены;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦены) Тогда
				СтрокаТаблицы.ВидЦены = Форма.ВидЦеныПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура перезаполняет документ продажи по ордерам.
//
// Параметры:
//	ПерезаполняемаяНакладная - ДокументСсылка.РеализацияТоваровУслуг - накладная, которую надо перезаполнить.
//
Процедура ПерезаполнитьНакладнуюПоОрдерам(ПерезаполняемаяНакладная) Экспорт
	
	Если ПерезаполняемаяНакладная <> Неопределено 
		И ТипЗнч(ПерезаполняемаяНакладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Форма = ПолучитьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", ПерезаполняемаяНакладная));
		ДанныеФормы = Форма.Объект;
		
		СтруктураЗаполнения = ПродажиВызовСервера.ПерезаполнитьНакладнуюПоОрдерам(ДанныеФормы);
		СостояниеОтгрузки = СтруктураЗаполнения.СостояниеОтгрузки;
		
		Если СтруктураЗаполнения.ЕстьИзменения Тогда
			Форма.Модифицированность = Истина;
			КопироватьДанныеФормы(ДанныеФормы, Форма.Объект); 
			ПродажиКлиентСервер.РассчитатьИтоговыеПоказателиРеализации(Форма);
			Форма.Открыть();
			
			ПродажиКлиент.ОповеститьОбОкончанииПерезаполненияТоваровПоОтгрузке(
				СтруктураЗаполнения.ЕстьИзменения,
				СостояниеОтгрузки.ЕстьОтгруженныеТовары Или СостояниеОтгрузки.ЕстьНесобранныеТовары,
				СостояниеОтгрузки.ЕстьНесобранныеТовары);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(Форма);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя о перезаполнении желаемой даты отгрузки.
//
Процедура ОповеститьОПерезаполненииЖелаемойДатыОтгрузки() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru='Желаемая дата отгрузки перезаполнена';uk='Бажана дата відвантаження перезаповнена'"),
		,
		НСтр("ru='Желаемая дата отгрузки перезаполнена с учетом максимальной даты аванса.';uk='Бажана дата відвантаження перезаповнена з урахуванням максимальної дати авансу.'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры


#Область ПроцедурыИФункцииРаботыСНалоговымиДокументами

// Общая процедура обработки навигационной ссылки текста налоговых документов в документах продажи.
// В завимости от выбранной ссылки вызывает создание/открытие налоговых документов.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма, в которой располагается элемент.
//  НавигационнаяСсылка - Строка - Значение гиперссылки форматированной строки.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылкиТекстНалоговыеДокументы(Форма, НавигационнаяСсылка, СтандартнаяОбработка,
	Организация, ХозяйственнаяОперация = Неопределено) Экспорт
	
	Если НавигационнаяСсылка = "ОткрытьСписокНалоговыхДокументов" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("ДокументОснование", Форма.Объект.Ссылка);
		
		ОткрытьФорму("ЖурналДокументов.ИсходящиеНалоговыеДокументы.Форма.ОформлениеНалоговыхДокументовПоРегистратору", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "ВвестиНовыйНалоговыйДокумент" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("ДокументОснование", Форма.Объект.Ссылка);
		
		ОткрытьФорму("ЖурналДокументов.ИсходящиеНалоговыеДокументы.Форма.ОформлениеНалоговыхДокументовПоРегистратору", ПараметрыФормы, Форма);
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьСписокТранспортныхНакладных" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьСписокТранспортныхНакладных(Форма);
		
	ИначеЕсли НавигационнаяСсылка = "СоздатьТранспортнуюНакладную" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоздатьТранспортнуюНакладную(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСГТД

// Проверяет возможность создания транспортной накладной.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура ПолучитьОбновитьИнформациюТранспортныхНакладных(Форма) Экспорт
	
	Если ПродажиВызовСервера.ПроверитьИспользованиеИДоступТТН() Тогда 
		ДанныеТранспортныхНакладных = ПродажиВызовСервера.ПолучитьДанныеТранспортныхНакладныхНаСервере(Форма.Объект.Ссылка);
		ПродажиКлиентСервер.ОбновитьИнформациюТранспортныхНакладных(Форма, ДанныеТранспортныхНакладных);
	Иначе
		ТекстТТН = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Открывает список транспортных накладных.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура ОткрытьСписокТранспортныхНакладных(Форма)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументОснование", Форма.Объект.Ссылка));
	ОткрытьФорму("Документ.ТранспортнаяНакладная.ФормаСписка",
				ПараметрыФормы,
				Форма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

// Создает транспортную накладную.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура СоздатьТранспортнуюНакладную(Форма)
	
	ОчиститьСообщения();
	
	ПроверитьВозможностьСозданияТранспортнойНакладной(Форма);
	
КонецПроцедуры

// Проверяет возможность создания транспортной накладной.
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа реализации.
//
Процедура ПроверитьВозможностьСозданияТранспортнойНакладной(Форма)
	
	МожноСоздатьТТН = Истина;
		
	Если Форма.Объект.РеализацияПоЗаказам Тогда
		
		ПродажиВызовСервера.ПроверитьСпособыДоставкиЗаказов(Форма.Объект.Ссылка, МожноСоздатьТТН);
		
	Иначе
		
		СпособыДоставкиСНашимУчастием = ДоставкаТоваровКлиентСервер.СпособыДоставкиДоКлиентаСНашимУчастием(Форма.ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками);
		
		Если СпособыДоставкиСНашимУчастием.Найти(Форма.Объект.СпособДоставки) <> Неопределено Тогда	
			ТекстСообщения = НСтр("ru='Невозможно создать транспортную накладную, т.к. используется способ доставки ""%СпособДоставки%"". Транспортные накладные в этом случае создаются при оформлении задания на перевозку.';uk='Неможливо створити транспортну накладну, оскільки використовується спосіб доставки ""%СпособДоставки%"". Транспортні накладні в цьому випадку створюються при оформленні завдання на перевезення.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособДоставки%", Форма.Объект.СпособДоставки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Форма.Объект.СпособДоставки");	
			МожноСоздатьТТН = Ложь;	
		КонецЕсли;
		
	КонецЕсли;	
		
	Если МожноСоздатьТТН И
		(НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка)
			ИЛИ НЕ Форма.Объект.Проведен
			ИЛИ Форма.Модифицированность) Тогда 
		
		ТекстВопроса = НСтр("ru='Ввод транспортных накладных возможен только после проведения документа.';uk='Введення транспортних накладних можливе тільки після проведення документа.'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Провести';uk='Провести'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена';uk='Відмінити'"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьВозможностьСозданияТранспортнойНакладнойОбработкаОтвета", ЭтотОбъект, Новый Структура("Форма", Форма)), 
						ТекстВопроса, СписокКнопок);
		Возврат;
	КонецЕсли;
		
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(Форма, МожноСоздатьТТН);
	
КонецПроцедуры

Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(Форма, МожноСоздатьТТН)
	
	Если Не МожноСоздатьТТН Тогда
		Возврат; // Проверки не были пройдены, продолжать создание ТТН не нужно
	КонецЕсли;
	
	Если ПродажиВызовСервера.ПроверитьНаличиеТранспортныхНакладных(Форма.Объект.Ссылка) Тогда
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Оформить';uk='Оформити'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Дополнить';uk='Доповнити'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена';uk='Відмінити'"));
		
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТранспортнуюНакладнуюЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
				НСтр("ru='Оформить новую ТТН или дополнить существующую?';uk='Оформити нову ТТН або доповнити існуючу?'"), СписокКнопок);
	Иначе
		ОформитьТранспортнуюНакладную(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершениеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(ДополнительныеПараметры.Форма, Результат);
	
КонецПроцедуры

Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт 
	
	Результат = Истина;
	
	Если КодОтвета = КодВозвратаДиалога.ОК И ДополнительныеПараметры.Форма.ПроверитьЗаполнение() Тогда
		Попытка
			ДействиеПослеЗаписи = Новый ОписаниеОповещения(
				"ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершениеОповещение",
				ПродажиКлиент,
				ДополнительныеПараметры);
			Результат = ДополнительныеПараметры.Форма.Записать(
				Новый Структура(
					"РежимЗаписи, ДействиеПослеЗаписи",
					РежимЗаписиДокумента.Проведение, ДействиеПослеЗаписи));
		Исключение
			ПоказатьПредупреждение(,НСтр("ru='Не удалось выполнить проведение документа';uk='Не вдалося виконати проведення документа'"));
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(ДополнительныеПараметры.Форма, Результат);
	
КонецПроцедуры

Процедура СоздатьТранспортнуюНакладнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОформитьТранспортнуюНакладную(ДополнительныеПараметры.Форма);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВыбратьТранспортнуюНакладную(ДополнительныеПараметры.Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ОформитьТранспортнуюНакладную(Форма)
	
	СозданныеТТН = ПродажиВызовСервера.ОформитьТранспортныеНакладныеНаСервере(Форма.Объект.Ссылка);
	
	Если СозданныеТТН.Количество() <> 0 Тогда 
		ПолучитьОбновитьИнформациюТранспортныхНакладных(Форма);
	КонецЕсли;
	
	Если СозданныеТТН.Количество() = 1 Тогда 
		ПоказатьЗначение(, СозданныеТТН[0]);
	ИначеЕсли СозданныеТТН.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТранспортныеНакладные", СозданныеТТН);
		ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.СозданныеТранспортныеНакладные", ПараметрыФормы, Форма);
	КонецЕсли;
					
КонецПроцедуры

Процедура ВыбратьТранспортнуюНакладную(Форма)
	
	АдресХранилища = ПродажиВызовСервера.ПолучитьАдресХранилищаСПараметрамиОтбораТТН(Форма.Объект.Ссылка);
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ДокументОснование", Форма.Объект.Ссылка);
	ПараметрыОтбора.Вставить("ДатаНачала", Форма.Объект.Дата - 14 * 24 * 60 * 60);
	ПараметрыОтбора.Вставить("АдресХранилища", АдресХранилища);
		
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.ФормаВыбора", 
				ПараметрыФормы, 
				Форма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
				
КонецПроцедуры

#КонецОбласти 

#Область ПроцедурыИФункцииРаботыСВыборомЗначений

// Процедура - обработчик события "НачалоВыбора" элемента формы "Соглашение"
//
// Параметры:
//	Партнер                      - СправочникСсылка.Партнеры - ссылка на партнера, для которого выберите соглашение
//	Документ                     - СправочникСсылка.СоглашенияСКлиентами - ссылка на ранее выбранное соглашение для  начального позиционирования в списке
//	ТолькоТиповые                - Булево - флаг, позволяющий включать в список выбора только типовые соглашения
//	ТолькоИспользуемыеВРаботеТП  - Булево - флаг, позволяющий включать в список выбора только соглашения,
//	используемые в работе торговых представителей
//	ТолькоНаКомиссию             - Булево - флаг, позволяющий включать в список выбора только комиссионные соглашения
//	ТолькоИндивидуальные         - Булево - флаг, определяющий необходимость отбора только индивидуальных соглашений
//
Процедура НачалоВыбораСоглашенияСКлиентом(Элемент,
	                                      СтандартнаяОбработка,
	                                      Партнер,
	                                      Документ,
	                                      ДатаДокумента='00010101',
	                                      ТолькоТиповые=Ложь,
	                                      ТолькоИспользуемыеВРаботеТП=Ложь,
	                                      ХозяйственнаяОперация=Неопределено,
	                                      ДанныеФормыСтруктура=Неопределено
										  ,Валюта = Неопределено
	                                      ) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Клиент", Истина)),,,,, 
			Новый ОписаниеОповещения("НачалоВыбораСоглашенияСКлиентомЗавершение", ЭтотОбъект, Новый Структура("ДатаДокумента, Документ, ТолькоИспользуемыеВРаботеТП, ТолькоТиповые, ХозяйственнаяОперация, Валюта, Элемент, ДанныеФормыСтруктура", 
			ДатаДокумента, Документ, ТолькоИспользуемыеВРаботеТП, ТолькоТиповые, ХозяйственнаяОперация, Валюта, Элемент, ДанныеФормыСтруктура)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
	КонецЕсли;
	
	НачалоВыбораСоглашенияСКлиентомФрагмент(ДатаДокумента, Документ, Партнер, ТолькоИспользуемыеВРаботеТП, ТолькоТиповые, ХозяйственнаяОперация, Валюта, Элемент);
КонецПроцедуры

Процедура НачалоВыбораСоглашенияСКлиентомЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ДатаДокумента = ДополнительныеПараметры.ДатаДокумента;
    Документ = ДополнительныеПараметры.Документ;
    ТолькоИспользуемыеВРаботеТП = ДополнительныеПараметры.ТолькоИспользуемыеВРаботеТП;
    ТолькоТиповые = ДополнительныеПараметры.ТолькоТиповые;
    ХозяйственнаяОперация = ДополнительныеПараметры.ХозяйственнаяОперация;
	Валюта = ДополнительныеПараметры.Валюта;
    Элемент = ДополнительныеПараметры.Элемент;
    ДанныеФормыСтруктура = ДополнительныеПараметры.ДанныеФормыСтруктура;

    Партнер = Результат;
	
	Если ДанныеФормыСтруктура<>Неопределено Тогда
		ДанныеФормыСтруктура.Партнер = Партнер;
	КонецЕсли;
    
	НачалоВыбораСоглашенияСКлиентомФрагмент(ДатаДокумента, Документ, Партнер, ТолькоИспользуемыеВРаботеТП, ТолькоТиповые, ХозяйственнаяОперация, Валюта, Элемент);

КонецПроцедуры

Процедура НачалоВыбораСоглашенияСКлиентомФрагмент(Знач ДатаДокумента, Знач Документ, Знач Партнер, Знач ТолькоИспользуемыеВРаботеТП, Знач ТолькоТиповые, Знач ХозяйственнаяОперация, Знач Валюта, Знач Элемент)	
    
    Если Не ЗначениеЗаполнено(Партнер) Тогда
        Возврат;
    Иначе
        ОткрытьФорму (
        "Справочник.СоглашенияСКлиентами.ФормаВыбора",
        Новый Структура("ДатаДокумента,Партнер,ТолькоТиповые,ТолькоИспользуемыеВРаботеТП,ТекущаяСтрока,ХозяйственнаяОперация,Валюта",
        ДатаДокумента, Партнер, ТолькоТиповые, ТолькоИспользуемыеВРаботеТП, Документ, ХозяйственнаяОперация, Валюта),
        Элемент);
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиВозможностиВыполненияДействий

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по соглашению с клиентом
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево - Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеЦенПоСоглашению(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Соглашение) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указано соглашение с клиентом. Цены не могут быть заполнены.';uk='У документі не вказано оферу клієнту. Ціни не можуть бути заповнені.'"));
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены.';uk='У документі не вказана валюта. Ціни не можуть бути заповнені.'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены.';uk='В документі не заповнений список %ПредставлениеТабличнойЧасти%. Ціни не можуть бути заповнені.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по виду цен
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеЦенПоВидуЦен(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены.';uk='У документі не вказана валюта. Ціни не можуть бути заповнені.'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены.';uk='В документі не заповнений список %ПредставлениеТабличнойЧасти%. Ціни не можуть бути заповнені.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены строк в таблице
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти, ВыделенныеСтроки) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены.';uk='В документі не заповнений список %ПредставлениеТабличнойЧасти%. Рядки не можуть бути скасовані.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для отмены.';uk='У таблиці відсутні виділені рядки. Виділіть рядки для скасування.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены непоставленных строк
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеПричиныОтменыНепоставленныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены.';uk='В документі не заповнений список %ПредставлениеТабличнойЧасти%. Рядки не можуть бути скасовані.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
		ЕстьНеотмененныеСтроки = Ложь;
		Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
			Если Не ТекСтрока.Отменено Тогда
				ЕстьНеотмененныеСтроки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьНеотмененныеСтроки Тогда
			ПоказатьПредупреждение(,НСтр("ru='Все строки отменены.';uk='Всі рядки скасовані.'"));
			Возврат Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке
//
// Параметры:
//	ДокументПроведен - Булево - признак проведенности документа
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеТоваровПоОтгрузке(ДокументПроведен) Экспорт
	
	Если Не ДокументПроведен Тогда
		ПоказатьПредупреждение(,НСтр("ru='Документ не проведен, заполнение невозможно.';uk='Документ не проведено, заповнення неможливо.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет является ли оповещение в форме событием изменения документов оплаты
//
// Параметры:
//	ИмяСобытия - Строка - имя события из процедуры формы "ОбработкаОповещения"
//
// Возвращаемое значение:
//	Булево
//	Истина, если оповещение является оплатой
//
Функция ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОповещенияПользователяОВыполненныхДействиях

//Показывает оповещение пользователя об окончании заполнения условий продаж по умолчанию
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru='Условия продаж заполнены';uk='Умови продажів заповнені'"),
		,
		НСтр("ru='Условия продаж по умолчанию заполнены';uk='Умови продажів по умовчанню заповнені'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения условий продаж
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродаж() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru='Условия продаж заполнены';uk='Умови продажів заповнені'"),
		,НСтр("ru='Условия продаж по соглашению с клиентом заполнены';uk='Умови продажів за офертою клієнту заповнені'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения цен по соглашению с клиентом
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны = Истина) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='Цены заполнены';uk='Ціни заповнені'"),
			,
			НСтр("ru='Цены по соглашению с клиентом заполнены';uk='Ціни за офертою клієнту заповнені'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='Цены не заполнены';uk='Ціни не заповнені'"),
			,
			НСтр("ru='Ни в одной строке цены по соглашению с клиентом не заполнены';uk='Ні в одному рядку ціни за офертою клієнту не заповнені'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения цен по виду цен
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке
//	ВидЦен - СправочникСсылка.ВидыЦен - Вид цен, по которому осуществлялось заполнение цен
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны = Истина, ВидЦен) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='Цены заполнены';uk='Ціни заповнені'"),
			,
			СтрЗаменить(НСтр("ru='Цены по виду цен ""%ВидЦен%"" заполнены';uk='Ціни за видом цін ""%ВидЦен%"" заповнені'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru='Цены не заполнены';uk='Ціни не заповнені'"),
			,
			СтрЗаменить(НСтр("ru='Ни в одной строке цены по виду цен ""%ВидЦен%"" не заполнены';uk='Ні в одному рядку ціни за видом цін ""%ВидЦен%"" не заповнені'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк
//
Процедура ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru='Выделенные строки отменены';uk='Виділені рядки скасовані'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные строки отменены по причине ""%ПричинаОтмены%""';uk='Виділені рядки скасовані через ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

//Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк
//
Процедура ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоОтмененныхСтрок, ПроверятьОстатки) Экспорт

	Если КоличествоОтмененныхСтрок = 0 Тогда
			
		ПоказатьОповещениеПользователя(
			НСтр("ru='Строки не отменены';uk='Рядки не скасовані'"),
			,
			НСтр("ru='По всем строкам оформлена отгрузка. Строки не могут быть отменены.';uk='За всіма рядками оформлена відвантаження. Рядки не можуть бути скасовані.'"),
			БиблиотекаКартинок.Информация32);
			
		Иначе
			
			Если ПроверятьОстатки Тогда

				ПоказатьОповещениеПользователя(
					НСтр("ru='Строки отменены';uk='Рядки скасовані'"),
					,
					СтрЗаменить(НСтр("ru='Все непоставленные строки отменены по причине ""%ПричинаОтмены%"".';uk='Всі непоставлені рядки скасовані через ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32);
			
			Иначе
				
				ПоказатьОповещениеПользователя(
					НСтр("ru='Строки отменены';uk='Рядки скасовані'"),
					,
					СтрЗаменить(НСтр("ru='Все строки отменены по причине ""%ПричинаОтмены%"".';uk='Всі рядки скасовані через ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32);
				
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения дат отгрузки всех строк тч
//
// Параметры:
//	ДатаОтгрузки - Дата - дата отгрузки, по которой заполнялась дата в табличной части
//	ВыделенныеСтроки - Массив - влияет на текст сообщения
//
Процедура ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, ЗаполнениеВыделенныхСтрок) Экспорт

	Если ЗаполнениеВыделенныхСтрок Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Дата отгрузки заполнена';uk='Дата відвантаження заповнена'"),
			,
			СтрЗаменить(НСтр("ru='Для выделенных строк установлена дата отгрузки %ДатаОтгрузки%';uk='Для виділених рядків встановлена дата відвантаження %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy")),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Дата отгрузки заполнена';uk='Дата відвантаження заповнена'"),
			,
			СтрЗаменить(НСтр("ru='Для всех строк установлена дата отгрузки %ДатаОтгрузки%';uk='Для всіх рядків встановлена дата відвантаження %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy")),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании перезаполнения товаров по фактической отгрузке
//
// Параметры:
//	ЕстьИзменения           - Булево - Если Истина - есть изменения в табличной части
//	КоличествоПерезаполнено - Булево - Если Истина - количество было перезаполнено по фактической отгрузке
//
Процедура ОповеститьОбОкончанииПерезаполненияТоваровПоОтгрузке(ЕстьИзменения, КоличествоПерезаполнено, ЕстьНесобранные = Ложь) Экспорт
	
	Если ЕстьИзменения Тогда
		Если ЕстьНесобранные Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru='Количество перезаполнено';uk='Кількість перезаповнено'"),
				,
				НСтр("ru='В строках перезаполнено количество с учетом собирающихся на складе товаров.';uk='У рядках перезаповнена кількість з урахуванням на складі товарів, що збираються.'"),
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru='Количество перезаполнено';uk='Кількість перезаповнено'"),
				,
				НСтр("ru='В строках перезаполнено количество.';uk='У рядках перезаповнено кількість.'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	Иначе
		
		Если КоличествоПерезаполнено Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru='Перезаполнение не требуется';uk='Перезаповнення не потрібно'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. во всех строках количество совпадает с указанным.';uk='Перезаповнення не потрібно, тому що у всіх рядках кількість співпадає з вказаною.'"),
				БиблиотекаКартинок.Информация32);
			
		Иначе
		
			ПоказатьОповещениеПользователя(
				НСтр("ru='Перезаполнение не требуется';uk='Перезаповнення не потрібно'"),
				,
				НСтр("ru='Ни по одной строке не начата отгрузка.';uk='Ні по одному рядку не розпочате відвантаження.'"),
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиКомандПользователя

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке
//
// Параметры:
//	ЕстьОтгруженныеТовары - Булево
//	ЗаполнятьНесобраннымиТоварами - Булево 
//
// Возвращаемое значение:
//	Булево
//	Ложь, если пользователь отказался от заполнения
//
Функция ВопросОПерезаполненииОтгруженнымиТоварами(ОписаниеОповещения, ЕстьОтгруженныеТовары) Экспорт
	
	СписокКнопок = Новый СписокЗначений();
	
	Если ЕстьОтгруженныеТовары Тогда
		
		ТекстВопроса = НСтр("ru='Не все товары собраны/отгружены. Учитывать при заполнении товары, которые находятся в процессе сборки?';uk='Не всі товари зібрані/відвантажені. Враховувати при заповненні товари, які перебувають у процесі збирання?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru='Учитывать';uk='Враховувати'"));
		СписокКнопок.Добавить("НеУчитывать", НСтр("ru='Не учитывать';uk='Не враховувати'"));
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Отсутствуют собранные/отгруженные товары. Учитывать при заполнении товары, которые находятся в процессе сборки?';uk='Відсутні зібрані/відвантажені товари. Враховувати при заповненні товари, які перебувають у процесі збирання?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru='Учитывать';uk='Враховувати'"));
		
	КонецЕсли;
	
	СписокКнопок.Добавить("НеПерезаполнять", НСтр("ru='Не перезаполнять';uk='Не перезаповнювати'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросОПерезаполненииОтгруженнымиТоварамиЗавершение", ПродажиКлиент, ДополнительныеПараметры),
		ТекстВопроса,
		СписокКнопок);
	
КонецФункции

Процедура ВопросОПерезаполненииОтгруженнымиТоварамиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаполнятьНесобраннымиТоварами", (ОтветНаВопрос = "Учитывать"));
	Результат.Вставить("Перезаполнить", Не (ОтветНаВопрос = "НеПерезаполнять"));
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
	
КонецПроцедуры

// Процедура для выбора вида цен из формы выбора.
//
// Параметры:
//	Форма                                     - УправляемаяФорма - форма, в которой необходимо заполнить цены
//	ИспользоватьПриПродаже                    - Булево - Выбор вида цены для продажи
//	ИспользоватьПриПередачеМеждуОрганизациями - Булево - Выбор вида цены для передачи между организациями
//
Процедура ВыбратьВидЦен(
	ОписаниеОповещения,
	ЦенаВключаетНДС = Неопределено,
	ИспользоватьПриПродаже = Неопределено,
	ИспользоватьПриПередачеМеждуОрганизациями = Неопределено
	) Экспорт
	
	ВидЦеныПрайсЛист = ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
	Если ВидЦеныПрайсЛист <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВидЦеныПрайсЛист);
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	Если ЦенаВключаетНДС <> Неопределено Тогда
		СтруктураОтбор.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	КонецЕсли;
	Если ИспользоватьПриПродаже <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПродаже", ИспользоватьПриПродаже);
	КонецЕсли;
	Если ИспользоватьПриПередачеМеждуОрганизациями <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", ИспользоватьПриПередачеМеждуОрганизациями);
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.ВидыЦен.ФормаВыбора",
		Новый Структура("Отбор", СтруктураОтбор),,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "НеСогласовано".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений
//
Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список) Экспорт
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Не согласовано"". По действующим соглашениям могут быть оформлены документы. После изменения статуса действующие соглашения перестанут действовать. Продолжить?';uk='У виділених у списку оферт буде встановлено статус ""Не погоджено"". За чинними офертами можуть бути оформлені документи. Після зміни статусу діючі оферти перестануть діяти. Продовжити?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиНеСогласованоЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласованоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Не согласовано';uk='Не погоджено'"));

КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Действует".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений
//
Процедура УстановитьСтатусСоглашенийСКлиентамиДействует(Список) Экспорт
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Действует"". Продолжить?';uk='У виділених у списку оферт буде встановлено статус ""Діє"". Продовжити?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиДействуетЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура УстановитьСтатусСоглашенийСКлиентамиДействуетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиДействует(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Действует';uk='Діє'"));

КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Закрыто".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений
//
Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список) Экспорт
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Закрыто"". После изменения статуса действующие соглашения перестанут действовать. Продолжить?';uk='У виділених у списку оферт буде встановлено статус ""Закрито"". Після зміни статусу діючі оферти перестануть діяти. Продовжити?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиЗакрытоЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрытоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Закрыто';uk='Закрито'"));

КонецПроцедуры

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками
//
Процедура ОтменитьВыделенныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками=Неопределено) Экспорт
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл

		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает реализацию товаров и услуг по одному или нескольким заказам клиентов
//
// Параметры:
//	Список - ТаблицаФормы - список заказов клиентов, по выделенным заказам которого будет создана реализация
//	ИспользоватьРеализациюПоНесколькимЗаказам - Булево - значение ф.о. ИспользоватьРеализациюПоНесколькимЗаказам
//	Склад - СправочникСсылка.Склады - склад, по которому необходимо оформить реализацию товаров и услуг
//	ДатаОтгрузки - Дата - дата отгрузки
//	ИмяДокумента - Строка - имя документа в метеданных, который будет создан на основании заказа
//	СоздаватьАктНаПередачуПрав - Булево - признак создания акта на передачу прав
//	ПараметрыОформления - Структура - параметры оформления реализаций
//
Процедура СоздатьРеализациюТоваровНаОснованииЗаказа(Список,
	                                                ИспользоватьРеализациюПоНесколькимЗаказам,
	                                                Склад = Неопределено,
	                                                ДатаОтгрузки = Неопределено,
	                                                ИмяДокумента = Неопределено,
	                                                СоздаватьАктНаПередачуПрав = Ложь,
	                                                ПараметрыОформления = Неопределено) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура();
	
	Если ИмяДокумента = Неопределено Тогда
		ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	Иначе
		ИмяФормы = "Документ." + ИмяДокумента + ".Форма.ФормаДокумента";
	КонецЕсли;
	
	Если Список.ВыделенныеСтроки.Количество() = 1 Или Не ИспользоватьРеализациюПоНесколькимЗаказам Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		ВариантыОформленияПродажи = ?(СоздаватьАктНаПередачуПрав, 
				ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав"),
				ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг"));
				
		ПараметрыОснования.Вставить("ДокументОснование",   ТекущиеДанные.Ссылка);
		ПараметрыОснования.Вставить("СкладОтгрузки",       Склад);
		ПараметрыОснования.Вставить("ДатаОтгрузки",        ДатаОтгрузки);
		ПараметрыОснования.Вставить("ВариантОформленияПродажи", ВариантыОформленияПродажи);
		Если ПараметрыОформления <> Неопределено Тогда
			ПараметрыОснования.Вставить("ПараметрыОформления", ПараметрыОформления);
		КонецЕсли;
		ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ПараметрыОснования));
		
	Иначе
		
		МассивСсылок = Новый Массив();
		
		Для Каждого ЗаказКлиента Из Список.ВыделенныеСтроки Цикл
			
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(Список.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		РеквизитыШапки = Новый Структура();
		ОчиститьСообщения();
		
		Если ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(МассивСсылок, РеквизитыШапки) Тогда
			
			ВариантыОформленияПродажи = ?(СоздаватьАктНаПередачуПрав, 
				ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав"),
				ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг"));
			
			ПараметрыОснования.Вставить("РеквизитыШапки",      РеквизитыШапки);
			ПараметрыОснования.Вставить("ДокументОснование",   МассивСсылок);
			ПараметрыОснования.Вставить("СкладОтгрузки",       Склад);
			ПараметрыОснования.Вставить("ДатаОтгрузки",        ДатаОтгрузки);
			ПараметрыОснования.Вставить("ВариантОформленияПродажи", ВариантыОформленияПродажи);
			Если ПараметрыОформления <> Неопределено Тогда
				ПараметрыОснования.Вставить("ПараметрыОформления", ПараметрыОформления);
			КонецЕсли;
			ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ПараметрыОснования));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает Акт выполненных работ по одному или нескольким заказам клиентов
//
// Параметры:
//	Список - ТаблицаФормы - список заказов клиентов, по выделенным заказам которого будет создано Акт выполненных работ
//	ИспользоватьРеализациюПоНесколькимЗаказам - Булево - значение ф.о. ИспользоватьРеализациюПоНесколькимЗаказам
//
Процедура СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(Список, ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура();
	
	Если Список.ВыделенныеСтроки.Количество() = 1 Или Не ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
	
		ПараметрыОснования.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
			Новый Структура("Основание", ПараметрыОснования));
	
	Иначе
		
		МассивСсылок = Новый Массив();
		
		Для Каждого ЗаказКлиента Из Список.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(Список.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru='Команда не может быть выполнена для указанного объекта!';uk='Команда не може бути виконана для зазначеного об''єкта!'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		РеквизитыШапки = Новый Структура();
		ОчиститьСообщения();
		
		Если ПродажиВызовСервера.СформироватьДанныеЗаполненияАктовВыполненныхРабот(МассивСсылок, РеквизитыШапки) Тогда
		
			ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
			ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
			
			ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
				Новый Структура("Основание", ПараметрыОснования));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие информационной гиперссылки о состоянии документа и выводит отчет "Состояние выполнения"
//
// Параметры:
//  СтандартнаяОбработка  - Булево - признак стандартной обработки события.
//  Форма                 - УправляемаяФорма - Форма, в которой было выполнено нажатие.
//
Процедура СостояниеВФормеДокументаНажатие(СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Ссылка = Форма.Объект.Ссылка;
	
	Если НЕ Ссылка.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Ссылка);
		
		ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", 
		             Новый Структура("ВходящиеДокументы", СписокДокументов), 
		             Форма,
		             Истина);
	
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

#КонецОбласти

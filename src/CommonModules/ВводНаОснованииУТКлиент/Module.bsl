
#Область ПрограммныйИнтерфейс

#Область ЗаказыНаПередачуВПроизводство


#КонецОбласти

#Область ЗаказыПоставщикам

Функция СозданиеЗаказовПоставщикамНаОсновании(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ВводНаОснованииУТВызовСервера.ПроверитьВозможностьВводаНаОсновании(ОписаниеКоманды.ОбъектыОснований[0]);
	ПараметрыФормы = Новый Структура("ДокументОснование", ОписаниеКоманды.ОбъектыОснований[0]);
	ОткрытьФорму(
		"Документ.ЗаказПоставщику.Форма.СозданиеЗаказовПоставщикамНаОсновании", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
КонецФункции

#КонецОбласти

#Область СообщениеПоШаблону

Функция СоздатьПисьмоПоШаблону(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредназначенДляЭлектронныхПисем", Истина);
	ПараметрыФормы.Вставить("Основание", ОписаниеКоманды.ОбъектыОснований[0]);
	ОткрытьФорму("Обработка.СообщениеПоШаблону.Форма.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник);

КонецФункции

Функция СоздатьСообщениеSMSПоШаблону(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредназначенДляЭлектронныхПисем", Ложь);
	ПараметрыФормы.Вставить("Основание", ОписаниеКоманды.ОбъектыОснований[0]);
	ОткрытьФорму("Обработка.СообщениеПоШаблону.Форма.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник);
	
КонецФункции

#КонецОбласти 

#Область СчетНаОплату
	
Функция СоздатьСчетНаОплату(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ОписаниеКоманды.ОбъектыОснований[0]);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецФункции

Функция СоздатьСчетНаОплатуРеализацияАкт(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);

	ПараметрыОткрытияФормы = ВводНаОснованииУТВызовСервера.СчетНаОплатуРеализацияАктПолучитьПараметрыОткрытияФормы(ОписаниеКоманды.ОбъектыОснований[0]);
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru='%Документ% оформлена по нескольким заказам. Необходимо ввести счет на оплату на основании заказов.';uk='%Документ% оформлено за кількома замовленнями. Необхідно ввести рахунок на оплату на підставі замовлень.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ОписаниеКоманды.ОбъектыОснований[0]);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецФункции
		
Функция СоздатьСчетНаОплатуПоДоговору(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Если НЕ ВводНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.';uk='Не потрібно вводити рахунок на оплату на підставі договору %1. Розрахунки ведуться за замовленнями / накладними.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	

КонецФункции

Функция СоздатьСчетНаОплатуПредоплатаПоДоговору(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Если Не ВводНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.';uk='Не потрібно вводити рахунок на оплату на підставі договору %1. Розрахунки ведуться за замовленнями / накладними.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецФункции


#КонецОбласти

#Область ДокументыНаОснованииЗаказа

Функция АктВыполненныхРаботСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.АктВыполненныхРаботПараметрыОткрытияФормы(ОписаниеКоманды.ОбъектыОснований);
	Если ПараметрыОткрытия <> Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	КонецЕсли;

КонецФункции

Функция ВнутреннееПотреблениеТоваровСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ВнутреннееПотреблениеТоваровПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецФункции

Функция ПоступлениеТоваровУслугСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ПоступлениеТоваровУслугПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции

Функция СборкаТоваровСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);

	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.СборкаТоваровПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.СборкаТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецФункции

Функция РеализацияТоваровУслугСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ОбщийМодуль.ВводНаОснованииУТКлиент.РеализацияТоваровУслугСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.РеализацияТоваровУслугПараметрыОткрытияФормы(ОписаниеКоманды.ОбъектыОснований);
	
	Если НЕ ПараметрыОткрытия = Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
		
КонецФункции

Функция ПеремещениеТоваровСоздатьНаОснованииЗаказа(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);

	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ПеремещениеТоваровПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия.РезультатыПроверки.ЕстьОшибки Тогда
		
		НакладныеКлиент.СообщитьОбОшибкахЗаполненияВнутреннейНакладной(ПараметрыОткрытия.РезультатыПроверки.ТекстОшибки);
		
	Иначе
		
		ОткрытьФорму(
			"Документ.ПеремещениеТоваров.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Документооборот

Функция ИнтеграцияС1СДокументооборотСоздатьПисьмо(ОписаниеКоманды) Экспорт

	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИнтеграцияС1СДокументооборотСоздатьПисьмоПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
		
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(ОписаниеОповещения);
	
КонецФункции 

&НаКлиенте
Процедура ИнтеграцияС1СДокументооборотСоздатьПисьмоПроверитьПодключениеЗавершение(Результат, ОбъектИС) Экспорт
	
	Если Результат = Истина Тогда // авторизация успешна
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИнтеграцияС1СДокументооборотСоздатьПисьмоПоискСвязанногоОбъектаЗавершение", ЭтотОбъект, ОбъектИС);
		ИнтеграцияС1СДокументооборотКлиент.НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Не настроено подключение к Документообороту или сервис
            |Документооборота недоступен. Обратитесь к администратору.'
            |;uk='Не настроєно підключення до Документообігу або сервіс
            |Документообігу недоступний. Зверніться до адміністратора.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияС1СДокументооборотСоздатьПисьмоПоискСвязанногоОбъектаЗавершение(Результат, ОбъектИС) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Предмет", Результат);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо", Параметры);
	
КонецПроцедуры

Функция ИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс(ОписаниеКоманды) Экспорт

	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИнтеграцияС1СДокументооборотСоздатьБизнесПроцессПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
		
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(ОписаниеОповещения);
	
КонецФункции 

&НаКлиенте
Процедура ИнтеграцияС1СДокументооборотСоздатьБизнесПроцессПроверитьПодключениеЗавершение(Результат, ОбъектИС) Экспорт
	
	Если Результат = Истина Тогда // авторизация успешна
		
		ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцесс(ОбъектИС);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Не настроено подключение к Документообороту или сервис
            |Документооборота недоступен. Обратитесь к администратору.'
            |;uk='Не настроєно підключення до Документообігу або сервіс
            |Документообігу недоступний. Зверніться до адміністратора.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СогласованиеПродажи

Функция СоздатьНовоеСогласованиеЗаказаКлиента(ОписаниеКоманды) Экспорт

	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		Основание = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		Основание = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.СогласованиеПродажи.ФормаОбъекта",
	Новый Структура("Основание", Основание),
	,
	,);

КонецФункции 

#КонецОбласти 

#Область СогласованиеЗакупки

Функция СоздатьНовоеСогласованиеЗаказаПоставщику(ОписаниеКоманды) Экспорт

	ОткрытьФорму("БизнесПроцесс.СогласованиеЗакупки.ФормаОбъекта",
	Новый Структура("Основание",ОписаниеКоманды.ОбъектыОснований),
	,
	,);

КонецФункции 

#КонецОбласти 


Функция СозданиеСвязанныхОбъектов(ОписаниеКоманды) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	ПараметрыВыполненияКоманды.Источник = ОписаниеКоманды.Форма;
	
	ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок(
		ОписаниеКоманды.ОбъектыОснований,
		ПараметрыВыполненияКоманды,
		ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов());

КонецФункции 

Функция ОпределитьСправочноеРазмещениеПоЯчейкам(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументПриемки",ПараметрКоманды);
	ОткрытьФорму("Обработка.СправочноеРазмещениеНоменклатуры.Форма.Форма",Параметры,ПараметрыВыполненияКоманды.Источник,ПараметрКоманды);

КонецФункции

Функция ПередачаВЭксплуатациюНаОсновании(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВЭксплуатацию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции

Функция СписаниеНаРасходыАктивыНаОсновании(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотреблениеТоваров.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецФункции



Функция СоздатьНаОснованииРасходныйОрдерНаТовары(ОписаниеКоманды) Экспорт
	
	ОчиститьСообщения();
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	
	МассивРаспоряжений = ПараметрКоманды;
		
	ОткрытьФорму("Обработка.УправлениеОтгрузкой.Форма.ФормаНастроекСозданияОрдеров",Новый Структура("МассивРаспоряжений",МассивРаспоряжений),,,,,);	
	
КонецФункции

Функция АктНаПередачуПрав(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	
	ПараметрыОснования = Новый Структура;
	
	ПараметрыОснования.Вставить("ДокументОснование",   ПараметрКоманды);
	ПараметрыОснования.Вставить("ЗаполнятьПоОстаткам", Истина);
	ПараметрыОснования.Вставить("ВариантОформленияПродажи",
	ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав"));
	
	ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ПараметрыОснования));

КонецФункции

Функция СоздатьЗаказНаВнутреннееПотребление(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаВнутреннееПотребление");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);

КонецФункции 

Функция СоздатьЗаказНаПеремещение(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаПеремещение");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);
КонецФункции

Функция СоздатьЗаказНаПеремещениеНаОснованииЗаказаКлиентаПоГруппеСкладов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыСоздания = ВводНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииЗаказаКлиентаПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ОписаниеКоманды);
	
КонецФункции

Функция СоздатьЗаказНаПеремещениеНаОснованииПоступленияТоваровУслугПоГруппеСкладов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыСоздания = ВводНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииПоступленияТоваровУслугПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ОписаниеКоманды);
	
КонецФункции

Функция СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	ПараметрыСоздания = ВводНаОснованииУТВызовСервера.СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада",
			ВводНаОснованииУТКлиент, ОписаниеКоманды);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор склада';uk='Вибір складу'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ОписаниеКоманды.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ОписаниеКоманды);
		
	КонецЕсли;
	
КонецФункции

Функция УстановитьПараметрыОбеспеченияПотребностей(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.ПараметрыОбеспеченияПотребностей.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецФункции
	
Функция ПомощникОформленияСкладскихАктов(ОписаниеКоманды) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ОписаниеКоманды.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований;
	Иначе
		ПараметрКоманды = ОписаниеКоманды.ОбъектыОснований[0];
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		РезультатПроверки = ВводНаОснованииУТВызовСервера.ПроверитьСтатусПересчетаНаСервере(ПараметрКоманды);
		Если Не РезультатПроверки.МожноОткрытьПомощник Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.СообщениеПользователю);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникОформленияСкладскихАктов.Форма", 
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
		
КонецФункции





#Область КорректировкаНазначения

Функция ОткрытьМастерСнятияРезерва(ОписаниеКоманды) Экспорт
	
	ПараметрыФормыЗаполнения = Новый Структура();
	ПараметрыФормыЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв"));
	ПараметрыФормыЗаполнения.Вставить("Мастер", Истина);
	ПараметрыФормыЗаполнения.Вставить("Заказ", ОписаниеКоманды.ОбъектыОснований[0]);
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта", ПараметрыФормыЗаполнения, ОписаниеКоманды.Форма);
	
КонецФункции

Функция ОткрытьМастерРезервирования(ОписаниеКоманды) Экспорт
	
	ПараметрыФормыЗаполнения = Новый Структура();
	ПараметрыФормыЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать"));
	ПараметрыФормыЗаполнения.Вставить("Мастер", Истина);
	ПараметрыФормыЗаполнения.Вставить("Заказ", ОписаниеКоманды.ОбъектыОснований[0]);
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта", ПараметрыФормыЗаполнения, ОписаниеКоманды.Форма);
	
КонецФункции

#КонецОбласти

Функция СоздатьРасходныйКассовыйОрдер(ОписаниеКоманды) Экспорт
	
	ФинансыКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		ОписаниеКоманды.Форма.Элементы.Список,
		"РасходныйКассовыйОрдер");
	
КонецФункции

Функция СоздатьСписаниеБезналичныхДС(ОписаниеКоманды) Экспорт
	
	ФинансыКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		ОписаниеКоманды.Форма.Элементы.Список,
		"СписаниеБезналичныхДенежныхСредств");
	
КонецФункции

Функция ПоручениеЭкспедитору(ОписаниеКоманды) Экспорт
	
	ОткрытьФорму("Документ.ПоручениеЭкспедитору.Форма.ФормаДокумента",
		Новый Структура("Основание", ОписаниеКоманды.ОбъектыОснований));	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ОписаниеКоманды)
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада",
			ВводНаОснованииУТКлиент, ОписаниеКоманды);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Выбор склада';uk='Вибір складу'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ОписаниеКоманды.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ОписаниеКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат)
		 Или ТипЗнч(ДополнительныеПараметры.ОбъектыОснований) = Тип("Массив")
			 И ДополнительныеПараметры.ОбъектыОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований;
	Иначе
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ЗаказНаПеремещение.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат)
		 Или ТипЗнч(ДополнительныеПараметры.ОбъектыОснований) = Тип("Массив")
			 И ДополнительныеПараметры.ОбъектыОснований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный Тогда
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований;
	Иначе
		Основание.Основание = ДополнительныеПараметры.ОбъектыОснований[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции();
		
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Элементы.ГруппаУточняющийРасчетДатаНомер.Видимость = Объект.ВключаетсяВУточняющийРасчет;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "СтрокиНоменклатурногоСоставаПреобразованы" И Параметр = Объект.Ссылка Тогда
		ОбновитьОтображениеДанных();
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции();
		НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда 
        Возврат;
    КонецЕсли;
	
	Результат = ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если ЭтаФорма.Модифицированность И ТекущийОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.Сформирован") Тогда
		ТекущийОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.КПроверке");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаСтраницыДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНакладнаяНеЗарегистрированаВИБПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаКлиенте()
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииВозвратКорректировкаПриИзменении(Элемент)
	
	ВидОперацииПриИзмененииНаКлиенте()
	
КонецПроцедуры

&НаКлиенте
Процедура ПереоценкаПриИзменении(Элемент)
	
	ПереоценкаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНакладнаяПриИзменении(Элемент)
	
	НалоговаяНакладнаяПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНакладнаяДатаПриИзменении(Элемент)
	
	НалоговаяНакладнаяДатаПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если НЕ (ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "Товары") ИЛИ 
		     ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "ТоварыПоДаннымПользователя")) Тогда
		ВалютаДокумента = Объект.Валюта;
		Возврат;	
	КонецЕсли;
		
	ТекстСообщения = НСтр("ru='Пересчитать суммы в документе в валюту ""%Валюта%""?';uk='Перерахувати суми в документі в валюту ""%Валюта%""?'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Объект.Валюта);
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВалютаПриИзмененииЗавершение", ЭтотОбъект),
		ТекстСообщения,
		РежимДиалогаВопрос.ДаНетОтмена
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Пересчет всех ТЧ
		ПересчитатьСуммыСервер("Товары", Истина);
		ПересчитатьСуммыСервер("ТоварыПоДаннымПользователя", Истина);
				
		ВалютаДокумента = Объект.Валюта;

		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		// Пересчет только сумм регл
		ПересчитатьСуммыСервер("Товары", Ложь);
		ПересчитатьСуммыСервер("ТоварыПоДаннымПользователя", Ложь);
		
		ВалютаДокумента = Объект.Валюта;
		
	Иначе
		
		// Отказ
		Объект.Валюта = ВалютаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаСобственнойОрганизацииПриИзменении(Элемент)
	
	ПоставкаСобственнойОрганизацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован
		И НЕ (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.Проверен")) Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	ЗаполнитьДокументУменьшаетНО();
	НастроитьЭлементыФормы();
	
КонецПроцедуры


&НаКлиенте
Процедура ТипПричиныНевыдачиПокупателюПриИзменении(Элемент)
	
	Если Объект.ТипПричиныНевыдачиПокупателю > 0 Тогда
		Объект.СтатусВыдачиПокупателю = ПредопределенноеЗначение("Перечисление.СтатусыВыдачиПокупателюНалоговыхДокументов.НеВыданПокупателю");
	КонецЕсли;
		
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();

КонецПроцедуры

&НаКлиенте
Процедура СтатусРегистрацииВЕРННПриИзменении(Элемент)
	
	Если Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТекущийДокумент")
	   И (Объект.СтатусРегистрацииВЕРНН = ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.НаправленНаРегистрациюВЕРНН") ИЛИ
	      Объект.СтатусРегистрацииВЕРНН = ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН")) Тогда
		Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ФормироватьПриложение2");
	КонецЕсли;
	
	Если Объект.СтатусРегистрацииВЕРНН = ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН")
		ИЛИ Объект.ОтражатьВУчетеБезРегистрации Тогда
		Объект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = Объект.Дата;
		Элементы.ДекорацияСтатусЕРНН.Заголовок = НСтр("ru='П2 уменьшает НО в периоде регистрации в ЕРНН';uk='Д2 зменшує ПЗ в періоді реєстрації в ЄРПН'");
	Иначе
		Объект.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных = '0001-01-01';
		Элементы.ДекорацияСтатусЕРНН.Заголовок = НСтр("ru='П2 не уменьшает НО, т.к. еще не зарегистрировано в ЕРНН';uk='Д2 не зменшує ПЗ, оскільки ще не зареєстрований в ЄРПН'");
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусАвтокорректировкиПриИзменении(Элемент)
	
	Если Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ") Тогда
		
		ТекстВопроса = НСтр("ru='Сохранить текущий номенклатурный состав (в противном случае табличная часть будет очищена)?';uk='Зберегти поточний номенклатурний склад (в іншому випадку таблична частина буде очищена)?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СтатусАвтокорректировкиПриИзмененииЗавершение", ЭтотОбъект),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНетОтмена
		);
		
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусАвтокорректировкиПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТЧПоДаннымПользователяИзТоварыСервер();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаПолученияПокупателемНеРавнаДатеДокументаПриИзменении(Элемент)
	
	МассивЭлементов = Новый Массив;	
	МассивЭлементов.Добавить("ДатаПолученияПокупателем");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Объект.ДатаПолученияПокупателемНеРавнаДатеДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВУчетеБезРегистрацииПриИзменении(Элемент)
	СтатусРегистрацииВЕРННПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары


&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ЭтоКорректировкаКоличества = Не Объект.Переоценка;
    КонецЕсли;
    
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	НоменклатураКлиентСервер.ПроверитьЗаполнитьПустуюУпаковку(ТекущиеДанные, "ЕдиницаИзмерения");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	
	ТоварыНоменклатураПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьРеквизитыРегл("Товары");
		
КонецПроцедуры



&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	ЗаполнитьРеквизитыРегл("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если Не ТекущаяСтрока.НеПересчитыватьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	ЗаполнитьРеквизитыРегл("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.НеПересчитыватьСумму Тогда
	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЕсли;
		
	ЗаполнитьРеквизитыРегл("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	Если ПроцентНДС = 0 Тогда
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.СуммаСНДС;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаБезНДС;

	ЗаполнитьРеквизитыРегл("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.НеПересчитыватьСумму Тогда
	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЕсли;

	ЗаполнитьТипПричиныНевыдачиНаСервере();
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства);
	
	ЗаполнитьРеквизитыРегл("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	Если ПроцентНДС = 0 Тогда
		ТекущаяСтрока.СуммаНДС 	= 0;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;

	ЗаполнитьРеквизитыРегл("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.СуммаСНДС, ПроцентНДС, Истина);
 	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;
	
	ТекущаяСтрока.Цена = (ТекущаяСтрока.СуммаСНДС - Окр(ТекущаяСтрока.СуммаНДС,2)) / ?(ТекущаяСтрока.КоличествоУпаковок = 0, 1, ТекущаяСтрока.КоличествоУпаковок);

	ЗаполнитьРеквизитыРегл("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодУКТВЭДПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТоварыКодУКТВЭДПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНеПересчитыватьСуммуПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.НеПересчитыватьСумму Тогда
		ТоварыЦенаПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПоставкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока.НеПересчитыватьСумму И ЗначениеЗаполнено(ТекущаяСтрока.ДокументПоставки) Тогда
		ТекущаяСтрока.НеПересчитыватьСумму = Ложь;
		ТоварыЦенаПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезНДСРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	Если ПроцентНДС = 0 Тогда
		ТекущаяСтрока.СуммаНДСРегл 	= 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодНоменклатурыПоКлассификаторуПриИзменении(Элемент)
	
	ЗаполнитьТипПричиныНевыдачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ЗаполнитьТипПричиныНевыдачиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыПоДаннымПользователя


&НаКлиенте
Процедура ТоварыПоДаннымПользователяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ЭтоКорректировкаКоличества = Не Объект.Переоценка;
    КонецЕсли;
    
	ТекущиеДанные = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	НоменклатураКлиентСервер.ПроверитьЗаполнитьПустуюУпаковку(ТекущиеДанные, "ЕдиницаИзмерения");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	
	ТоварыПоДаннымПользователяНоменклатураПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);

	ЗаполнитьРеквизитыРегл("ТоварыПоДаннымПользователя");
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПоДаннымПользователяКодУКТВЭДПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	ТоварыПоДаннымПользователяКодУКТВЭДПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяОбъектЗаполненияСодержанияУсловнаяПродажаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;	
	
	ЗаполнитьСодержаниеДляУсловнойПродажиСервер(ТекущаяСтрока.ОбъектЗаполненияСодержанияУсловнаяПродажа, ТекущаяСтрока.Содержание);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если Не ТекущаяСтрока.НеПересчитыватьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьРеквизитыРегл("ТоварыПоДаннымПользователя");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.НеПересчитыватьСумму Тогда
	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	КонецЕсли;

	ЗаполнитьРеквизитыРегл("ТоварыПоДаннымПользователя");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСуммаБезНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьРеквизитыРегл("ТоварыПоДаннымПользователя");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.НеПересчитыватьСумму Тогда
	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;

	ЗаполнитьТипПричиныНевыдачиНаСервере();
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства);

	ЗаполнитьРеквизитыРегл("ТоварыПоДаннымПользователя");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.СуммаБезНДС + ТекущаяСтрока.СуммаНДС;
	
	ЗаполнитьРеквизитыРегл("ТоварыПоДаннымПользователя");
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПоДаннымПользователяЦенаРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСуммаБезНДСРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСуммаНДСРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	Если ПроцентНДС = 0 Тогда
		ТекущаяСтрока.СуммаНДСРегл 	= 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияОтбора = Новый Структура;
	
	ЗначенияОтбора.Вставить("Организация",  Объект.Организация);
	ЗначенияОтбора.Вставить("Контрагент", 	Объект.Контрагент);
	ЗначенияОтбора.Вставить("Валюта", 		Объект.Валюта);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = Истина;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтрокаТаблицы.ОбъектРасчетов = ВыбранноеЗначение.Заказ;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяКодНоменклатурыПоКлассификаторуПриИзменении(Элемент)
	
	ЗаполнитьТипПричиныНевыдачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяПослеУдаления(Элемент)
	
	ЗаполнитьТипПричиныНевыдачиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьНоменклатурныйСостав(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.НалоговаяНакладная) Тогда
		Сообщить(НСтр("ru='Не заполнена налоговая накладная. Команда не может быть выполнена!';uk= 'Не заповнена податкова накладна. Команда не може бути виконана!'"));
		Возврат;
	КонецЕсли; 
	
 	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Для выполнения команды преобразования номенклатурного состава необходимо записать данные.';uk= ' Для виконання команди перетворення номенклатурного складу необхідно записати дані.'");
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать и продолжить';uk= 'Записати й продовжити'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПреобразоватьНоменклатурныйСоставЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Да);	
		
	Иначе
		ПреобразоватьНоменклатурныйСоставЗавершение(-1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьНоменклатурныйСоставЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если НЕ ЭтотОбъект.Записать() Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ <> -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыНазначения = Новый Массив;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	// Для совместимости открытия обработки как внешней вида ЗаполнениеОбъекта
	ПараметрыФормы = Новый Структура("ОбъектыНазначения", ОбъектыНазначения);
	
	ОткрытьФорму("Обработка.ПреобразованиеНоменклатурногоСоставаДокументаП2.Форма", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзНалоговойНакладной(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.НалоговаяНакладная) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Налоговая накладная"" не заполнено';uk='Поле ""Податкова накладна"" не заповнене'"), , "Объект.НалоговаяНакладная");
		Возврат;	
	КонецЕсли;
	
	Если Объект.ТоварыПоДаннымПользователя.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена, продолжить?';uk='Перед заповненням таблична частина буде очищена, продовжити?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьИзНалоговойНакладнойЗавершение", ЭтотОбъект),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет
		);
		
	Иначе
		ЗаполнитьИзНалоговойНакладнойНаСервере();
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.КПроверке");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзНалоговойНакладнойЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ТоварыПоДаннымПользователя.Очистить();
		ЗаполнитьИзНалоговойНакладнойНаСервере();
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.КПроверке");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыУпаковка
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	//Поле: ТоварыНоменклатураЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмерения.Имя);
	//Поле: ТоварыУпаковкаЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковкаЗаголовок.Имя);
	//Поле: ТоварыЕдиницаИзмеренияЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияЗаголовок.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяУпаковка
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяУпаковка.Имя);
	//Поле: ТоварыПоДаннымПользователяНоменклатураЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяНоменклатураЕдиницаИзмерения.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЕдиницаИзмерения.Имя);
	//Поле: ТоварыПоДаннымПользователяУпаковкаЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяУпаковкаЗаголовок.Имя);
	//Поле: ТоварыПоДаннымПользователяЕдиницаИзмеренияЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЕдиницаИзмеренияЗаголовок.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыНоменклатураЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыУпаковкаЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковкаЗаголовок.Имя);
	//Поле: ТоварыЕдиницаИзмеренияЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияЗаголовок.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Ложь;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяНоменклатураЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяНоменклатураЕдиницаИзмерения.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяУпаковкаЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяУпаковкаЗаголовок.Имя);
	//Поле: ТоварыПоДаннымПользователяЕдиницаИзмеренияЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЕдиницаИзмеренияЗаголовок.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Ложь;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыХарактеристика
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Характеристика не используется>';uk='<Характеристика не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяХарактеристика
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяХарактеристика.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Характеристика не используется>';uk='<Характеристика не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКоличествоУпаковокИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокИзменениеКоличества.Имя);
	//Поле: ТоварыЦенаИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаИзменениеКоличества.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk='<Не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКоличествоУпаковокИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокИзменениеЦены.Имя);
	//Поле: ТоварыЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk='<Не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества.Имя);
	//Поле: ТоварыПоДаннымПользователяЦенаИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЦенаИзменениеКоличества.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk='<Не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены.Имя);
	//Поле: ТоварыПоДаннымПользователяТоварыЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяТоварыЦенаИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk='<Не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаИзменениеЦены.Имя);
	//Поле: ТоварыКоличествоУпаковокИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКоличествоУпаковокИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокИзменениеКоличества.Имя);
	//Поле: ТоварыЦенаИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаИзменениеКоличества.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяТоварыЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяТоварыЦенаИзменениеЦены.Имя);
	//Поле: ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества.Имя);
	//Поле: ТоварыПоДаннымПользователяТоварыЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяТоварыЦенаИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыДокументПоставкиДляВозвратов
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументПоставкиДляВозвратов.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперацииВозвратКорректировка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Корректировка");

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыОбъектРасчетов
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОбъектРасчетов.Имя);
	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации"));
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ДатаОтгрузкиОплаты
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОтгрузкиОплаты.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВключаетсяВУточняющийРасчет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: НалоговаяНакладная
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалоговаяНакладная.Имя);
	//Поле: НалоговаяНакладнаяНомер
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалоговаяНакладнаяНомер.Имя);
	//Поле: НалоговаяНакладнаяДата
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НалоговаяНакладнаяДата.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.Проверен");

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыНомерСтрокиНН
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерСтрокиНН.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерСтрокиНН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не указан>';uk='<Не зазначений>'"));


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяНомерСтрокиНН
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяНомерСтрокиНН.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.НомерСтрокиНН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не указан>';uk='<Не зазначений>'"));


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыДатаКорректировки
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДатаКорректировки.Имя);
	//Поле: ТоварыПоДаннымПользователяДатаКорректировки
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяДатаКорректировки.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала("20160401000000");

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКодНоменклатурыПоКлассификатору
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодНоменклатурыПоКлассификатору.Имя);

	//Группа отбора
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//Отбор
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.РазрешитьРедактированиеКодаПоКлассификатору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	//Поле: ТоварыПоДаннымПользователяОбъектРасчетов
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяОбъектРасчетов.Имя);
	
	//Поле: ТоварыНеПересчитыватьСумму
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНеПересчитыватьСумму.Имя);
	
	//Поле: ТоварыНеПересчитыватьСуммуНадпись
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНеПересчитыватьСуммуНадпись.Имя);
	
	//Поле: ТоварыПоДаннымПользователяНеПересчитыватьСумму
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяНеПересчитыватьСумму.Имя); 

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.НеНДСОперации"));
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	//Поле: ТоварыНеПересчитыватьСумму
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНеПересчитыватьСумму.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументПоставки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	
	////
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	//Поле: ТоварыНеПересчитыватьСуммуНадпись
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНеПересчитыватьСуммуНадпись.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ДокументПоставки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk='<Не використовується>'"));
	
	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКодУКТВЭД
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодУКТВЭД.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.РазрешитьРедактированиеКодаПоКлассификатору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	
	Если Элемент.Имя = "НалоговаяНакладнаяНеЗарегистрированаВИБ" Тогда
		НалоговаяНакладнаяНеЗарегистрированаВИБПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалоговаяНакладная" Тогда
		НалоговаяНакладнаяПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалоговаяНакладнаяДата" Тогда
		НалоговаяНакладнаяДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПоставкаСобственнойОрганизации" Тогда
		ПоставкаСобственнойОрганизацииПриИзменении(Элемент);
	
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
		
	ИначеЕсли Элемент.Имя = "ВидОперации" Тогда
		ВидОперацииПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВидОперацииВозвратКорректировка" Тогда
		ВидОперацииВозвратКорректировкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Переоценка" Тогда
		ПереоценкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
		
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
		
	ИначеЕсли Элемент.Имя = "СтатусРегистрацииВЕРНН" Тогда
		СтатусРегистрацииВЕРННПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "СтатусАвтокорректировки" Тогда
		СтатусАвтокорректировкиПриИзменении(Элемент);
		
	ИначеЕсли Элемент.Имя = "ДатаПолученияПокупателемНеРавнаДатеДокумента" Тогда
		ДатаПолученияПокупателемНеРавнаДатеДокументаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВключаетсяВУточняющийРасчет" Тогда
		ВключаетсяВУточняющийРасчетПриИзменении(Элемент);
	
	ИначеЕсли Элемент.Имя = "ТипПричиныНевыдачиПокупателю" Тогда
		ТипПричиныНевыдачиПокупателюПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "СпецРежимНалогообложения" Тогда
		СпецРежимНалогообложенияПриИзменении(Элемент);
	
	
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКодУКТВЭД" Тогда
		ТоварыКодУКТВЭДПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКодНоменклатурыПоКлассификатору" Тогда
		ТоварыКодНоменклатурыПоКлассификаторуПриИзменении(Элемент);     
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦенаИзменениеКоличества" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковокИзменениеКоличества" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦенаИзменениеЦены" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковокИзменениеЦены" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаБезНДС" Тогда
		ТоварыСуммаБезНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаНДС" Тогда
		ТоварыСуммаНДСПриИзменении(Элемент)
	ИначеЕсли Элемент.Имя = "ТоварыСуммаСНДС" Тогда
		ТоварыСуммаСНДСПриИзменении(Элемент)
	ИначеЕсли Элемент.Имя = "ТоварыНеПересчитыватьСумму" Тогда
		ТоварыНеПересчитыватьСуммуПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыДокументПоставки" Тогда
		ТоварыДокументПоставкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦенаРегл" Тогда
		ТоварыЦенаРеглПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаБезНДСРегл" Тогда
		ТоварыСуммаБезНДСРеглПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаНДСРегл" Тогда
		ТоварыСуммаНДСРеглПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяНоменклатура" Тогда
		ТоварыПоДаннымПользователяНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяОбъектЗаполненияСодержанияУсловнаяПродажа" Тогда
		ТоварыПоДаннымПользователяОбъектЗаполненияСодержанияУсловнаяПродажаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяКодУКТВЭД" Тогда
		ТоварыПоДаннымПользователяКодУКТВЭДПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяКодНоменклатурыПоКлассификатору" Тогда
		ТоварыПоДаннымПользователяКодНоменклатурыПоКлассификаторуПриИзменении(Элемент);     
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяУпаковка" Тогда
		ТоварыПоДаннымПользователяУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяЦенаИзменениеКоличества" Тогда
		ТоварыПоДаннымПользователяЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества" Тогда
		ТоварыПоДаннымПользователяКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяТоварыЦенаИзменениеЦены" Тогда
		ТоварыПоДаннымПользователяЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены" Тогда
		ТоварыПоДаннымПользователяКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяСуммаБезНДС" Тогда
		ТоварыПоДаннымПользователяСуммаБезНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяСтавкаНДС" Тогда
		ТоварыПоДаннымПользователяСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяСуммаНДС" Тогда
		ТоварыПоДаннымПользователяСуммаНДСПриИзменении(Элемент)
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяЦенаРегл" Тогда
		ТоварыПоДаннымПользователяЦенаРеглПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяСуммаБезНДСРегл" Тогда
		ТоварыПоДаннымПользователяСуммаБезНДСРеглПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПоДаннымПользователяСуммаНДСРегл" Тогда
		ТоварыПоДаннымПользователяСуммаНДСРеглПриИзменении(Элемент);
		
		
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкиПередИзменениемСтатуса()  
	
	РеквизитМожноИзменить = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
			"РезультатВопросаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено
		Или СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		РеквизитМожноИзменить = Истина;
		
	КонецЕсли;
	
	ОчиститьСообщения();  
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.Проверен") Тогда
		
		ТекстСообщения = НСтр("ru='Статус документа изменен на ""К проверке"".';uk='Статус документа змінено на ""До перевірки"".'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизитИСтатус");
		
	Иначе
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		
	КонецЕсли;
	
	РеквизитМожноИзменить = Истина;
	
	Возврат РеквизитМожноИзменить;
	
КонецФункции

&НаКлиенте
Процедура РезультатВопросаЗавершение(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = "ИзменитьРеквизитИСтатус" Тогда
		Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.КПроверке") Тогда
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыНалоговыхДокументов.КПроверке");
			СтатусПриИзменении(Элементы.Статус);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		ОбщегоНазначенияУТКлиент.ВернутьПредыдущееЗначениеРеквизита(ЭтаФорма, Элемент);
		Возврат;
	Иначе
		ОбщегоНазначенияУТКлиент.СохранитьЗначениеРеквизита(ЭтаФорма, Элемент);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[Элемент.Имя], Элемент.ТекущиеДанные);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаКлиенте
Процедура ВидОперацииПриИзмененииНаКлиенте()
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены") И 
		Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены") ТОгда
		
		Если Объект.ТоварыПоДаннымПользователя.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Табличная часть будет очищена, продолжить?';uk='Таблична частина буде очищена, продовжити?'");
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ВидОперацииПриИзмененииЗавершение", ЭтотОбъект),
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет
			);
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Объект.ВидОперации = ВидОперации;
        Возврат;
    КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		Если НЕ (Объект.СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ) Тогда
			Объект.СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации ИЛИ
		     Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации ИЛИ
		     Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации) Тогда
		Если ПоставкаСобственнойОрганизации Тогда
			ПоставкаСобственнойОрганизации = Ложь;
			ПоставкаСобственнойОрганизацииПриИзмененииСервер();
		КонецЕсли;
		
		ОчиститьФлагНеИзменятьСумму(Объект.Товары);
		ОчиститьФлагНеИзменятьСумму(Объект.ТоварыПоДаннымПользователя);
		
		Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
	 	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
			Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель;
			ПартнерПриИзмененииСервер();
		КонецЕсли;	
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
		Если Объект.Валюта <> ВалютаРегламентированногоУчета Тогда
			Объект.Валюта = ВалютаРегламентированногоУчета;
			ПересчитатьСуммыСервер("Товары", Истина);
			ПересчитатьСуммыСервер("ТоварыПоДаннымПользователя", Истина);
					
			ВалютаДокумента = Объект.Валюта;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены И 
		Не Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		Объект.ТоварыПоДаннымПользователя.Очистить();
		
		Если ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(Объект.Валюта) 
		   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ВалютаВзаиморасчетов") <> Объект.Валюта Тогда
		   
			Объект.Договор = Неопределено;			
			
		КонецЕсли;
		
	ИначеЕсли (НЕ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации    И Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации)
		  ИЛИ (НЕ ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации И Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации) Тогда	
		
		Объект.СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТекущийДокумент;
		
	КонецЕсли; 
	
	ДоступенФлагПереоценка = ОпределитьДоступностьФлагаПереоценка(Объект); 
	Если Не ДоступенФлагПереоценка И Объект.Переоценка Тогда
		Объект.Переоценка = Ложь;
		ПереоценкаПриИзмененииСервер();
	КонецЕсли;
	
	
	//необходимо перезаполнить ставки НДС в табличных частях
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	ОчиститьРеквизитыУсловныхПродаж = Ложь;
	Если ВидОперации <> Объект.ВидОперации И
		 (Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа Или
		  Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа) Тогда
		ОчиститьРеквизитыУсловныхПродаж = Истина;
	КонецЕсли; 

	Для каждого ТекущаяСтрока из Объект.ТоварыПоДаннымПользователя Цикл
		
		СтараяСтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		ТекущаяСтрока.СтавкаНДС = ЗаполнитьСтавкуНДС(ТекущаяСтрока.Номенклатура);
		
		Если ОчиститьРеквизитыУсловныхПродаж Тогда
			ТекущаяСтрока.ОбъектЗаполненияСодержанияУсловнаяПродажа = Неопределено;	
			ТекущаяСтрока.НалоговоеНазначение 						= Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		    ТекущаяСтрока.НалоговоеНазначениеПоФактуУсловнаяПродажа = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
			ТекущаяСтрока.Содержание 								= "";
			// По умолчанию будем ставить ставку 20%, так как в большинстве случаев, она будет превалирующей
			ТекущаяСтрока.СтавкаНДС									= Перечисления.СтавкиНДС.НДС20;
		КонецЕсли; 
		
		Если ТекущаяСтрока.СтавкаНДС <> СтараяСтавкаНДС Тогда
			
			НДСИсходящийСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли; 
		
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства);
		
	КонецЦикла;

	ЗаполнитьРеквизитыРегл("ТоварыПоДаннымПользователя");
	
	ОчиститьДокументПоставки = (Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации 
									ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации);

	Для каждого ТекущаяСтрока из Объект.Товары Цикл
		
		СтараяСтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		ТекущаяСтрока.СтавкаНДС = ЗаполнитьСтавкуНДС(ТекущаяСтрока.Номенклатура);
		Если ТекущаяСтрока.СтавкаНДС <> СтараяСтавкаНДС Тогда
			
			НДСИсходящийСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КОнецЕсли;
		
		ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства);

		Если ОчиститьДокументПоставки Тогда
			ТекущаяСтрока.ДокументПоставки = Неопределено;
			ТекущаяСтрока.ДокументПоставкиДляВозвратов = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыРегл("Товары");
	
	ВидОперации = Объект.ВидОперации;
	
	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПереоценкаПриИзмененииСервер()
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.ЭтоКорректировкаКоличества = Не Объект.Переоценка;
	КонецЦикла;
	
КонецПроцедуры	
	
&НаСервере
Процедура НалоговаяНакладнаяПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.НалоговаяНакладная) Тогда
		
		РеквизитыНН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.НалоговаяНакладная, 
			"СпецРежимНалогообложения,ТипПричиныНевыдачиПокупателю,ОбособленноеПодразделение");
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыНН);
	Иначе
		Объект.СпецРежимНалогообложения = 0;
		Объект.ТипПричиныНевыдачиПокупателю = 0;
		Объект.ОбособленноеПодразделение = Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка();	
	КонецЕсли; 
	
	ПересчитатьСуммыСервер("Товары", Ложь);
	ПересчитатьСуммыСервер("ТоварыПоДаннымПользователя", Ложь);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура НалоговаяНакладнаяДатаПриИзмененииСервер()
	
	ПересчитатьСуммыСервер("Товары", Ложь);
	ПересчитатьСуммыСервер("ТоварыПоДаннымПользователя", Ложь);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если НЕ Объект.Организация.ВестиУчетДенежныхСредствПоОбособленнымПодразделениям Тогда
			Объект.ОбособленноеПодразделение = Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПоставкаСобственнойОрганизацииПриИзмененииСервер()
	
	Если ПоставкаСобственнойОрганизации Тогда
		Объект.Партнер = Справочники.Партнеры.НашеПредприятие;
		Объект.Контрагент = Неопределено;
		Объект.Договор = Неопределено;
	Иначе
		Объект.Партнер = Неопределено;
		Объект.Контрагент = Неопределено;
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	КонтрагентПриИзмененииСервер()
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
		
	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект);

	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;

	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПоставкаСобственнойОрганизации = (ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации"));
	
	ИспользоватьНаправленияДеятельности = Истина;
	
	ВалютаДокумента = Объект.Валюта;	
	ЗафиксированныйВидОперации = Объект.ВидОперации;
	ЗафиксированныйВидОперацииВозвратКорректировка = Объект.ВидОперацииВозвратКорректировка;

	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ЗаполнитьДокументУменьшаетНО();

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции();
	
	
	Если Элементы.СпецРежимНалогообложения.СписокВыбора.Количество() = 0 Тогда
		// Список должен быть заполнен до НастроитьЭлементыФормы для корректного отображения СпецРежимНалогообложенияДекорация
        НДСОбщегоНазначенияСервер.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора);
	КонецЕсли;
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	НастроитьЭлементыФормы();
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если ПоставкаСобственнойОрганизации Тогда
		Договор = Неопределено; // Всегда не равен пустой ссылке. Перезаполняем подчиненные реквизиты 
	Иначе
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Объект,
			,//ХозяйственнаяОперацияДоговора
			Объект.Валюта
		);
	КонецЕсли;

	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ДоговорПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбщееНоменклатураПриИзмененииСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПоДаннымПользователяНоменклатураПриИзмененииСервер(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.ТоварыПоДаннымПользователя.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбщееНоменклатураПриИзмененииСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбщееНоменклатураПриИзмененииСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	ТекущаяСтрока.СтавкаНДС = ЗаполнитьСтавкуНДС(ТекущаяСтрока.Номенклатура);
	ЗаполнитьНоменклатуруГТДПоУмолчанию(ТекущаяСтрока);
	НДСИсходящийСервер.ЗаполнитьНоменклатуруГТДПоУмолчанию(ТекущаяСтрока, ТекущаяСтрока.Свойство("РазрешитьРедактированиеКодаПоКлассификатору"));
	
	НДСИсходящийСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект);
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыКодУКТВЭДПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД) Тогда
		ТекущаяСтрока.КодНоменклатурыПоКлассификатору = ТекущаяСтрока.НомерГТД.КодУКТВЭД;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ВестиУчетПоГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВестиУчетПоГТД");
		Если ВестиУчетПоГТД Тогда
			ТекущаяСтрока.КодНоменклатурыПоКлассификатору = Справочники.КлассификаторУКТВЭД.ПустаяСсылка();
		КонецЕсли; 	
	КонецЕсли;

	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект);	
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПоДаннымПользователяКодУКТВЭДПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.ТоварыПоДаннымПользователя.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД) Тогда
		ТекущаяСтрока.КодНоменклатурыПоКлассификатору = ТекущаяСтрока.НомерГТД.КодУКТВЭД;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ВестиУчетПоГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВестиУчетПоГТД");
		Если ВестиУчетПоГТД Тогда
			ТекущаяСтрока.КодНоменклатурыПоКлассификатору = Справочники.КлассификаторУКТВЭД.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект);	
	
КонецПроцедуры


&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("НалоговаяНакладнаяНеЗарегистрированаВИБ");
	МассивЭлементов.Добавить("НалоговаяНакладнаяНомер");
	МассивЭлементов.Добавить("НалоговаяНакладнаяДата");
	МассивЭлементов.Добавить("НалоговаяНакладная");
	
	МассивЭлементов.Добавить("ОсновноеП2ДляВозврата");
	
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("ПоставкаСобственнойОрганизации");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Контрагент");
	
	МассивЭлементов.Добавить("ВидОперации");
	МассивЭлементов.Добавить("ВидОперацииВозвратКорректировка");
	МассивЭлементов.Добавить("Переоценка");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("ВключаетсяВУточняющийРасчет");
	МассивЭлементов.Добавить("ДатаОтгрузкиОплаты");
	
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("НаправлениеДеятельности");
	
	МассивЭлементов.Добавить("Валюта");
	
	//Остальные элементы управления шапки
	МассивЭлементов.Добавить("ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных");
	
	МассивЭлементов.Добавить("СтатусАвтокорректировки");
	МассивЭлементов.Добавить("ОбособленноеПодразделение");
	МассивЭлементов.Добавить("ОбычныйВидЦены");
	
	МассивЭлементов.Добавить("ЭлектронныйДокумент");
	МассивЭлементов.Добавить("УслугиНерезидентаДляНехозДеят");
	МассивЭлементов.Добавить("ПодтверждаетсяГТД");
	МассивЭлементов.Добавить("НомерГТД");
	МассивЭлементов.Добавить("Ответственный");
	МассивЭлементов.Добавить("КтоВыписалНалоговуюНакладную");
	
	МассивЭлементов.Добавить("ЛьготаНДС");
	МассивЭлементов.Добавить("ТипПричиныНевыдачиПокупателю");
	МассивЭлементов.Добавить("СпецРежимНалогообложения");
	МассивЭлементов.Добавить("ЛьготаНДСОписание");
	МассивЭлементов.Добавить("ПоставкаДипПредставительству");
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением,ПередНачаломИзменения");
	
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУдалить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюПереместитьВверх");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюПереместитьВниз");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыИзменить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыУдалить");
	МассивЭлементов.Добавить("ТоварыПереместитьВверх");
	МассивЭлементов.Добавить("ТоварыПереместитьВниз");
	
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователя;ПередНачаломДобавления,ПередУдалением,ПередНачаломИзменения");
	
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяКонтекстноеМенюУдалить");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяКонтекстноеМенюПереместитьВверх");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяКонтекстноеМенюПереместитьВниз");
	
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяДобавить");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяИзменить");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяСкопировать");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяУдалить");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяПереместитьВверх");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяПереместитьВниз");
	
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяЗаполнитьПоПревышениямОбычнойЦеныЗаПериод");
	МассивЭлементов.Добавить("ТоварыПоДаннымПользователяЗаполнитьСтатьюРасходовПоВыделеннойСтроке");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументУменьшаетНО()
	
	Если Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ") Тогда
		Объект.ДокументУменьшаетНО = (Объект.ТоварыПоДаннымПользователя.Итог("СуммаНДС") < 0);
	Иначе
		Объект.ДокументУменьшаетНО = (Объект.Товары.Итог("СуммаНДС") < 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ЭтоУсловнаяПродажа = (Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа
							ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа);

	ПродажаНижеОбычнойЦены = (Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены);

// ГруппаШапка
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалоговаяНакладная", "Видимость", НЕ Объект.НалоговаяНакладнаяНеЗарегистрированаВИБ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалоговаяНакладнаяНомер", "Видимость", Объект.НалоговаяНакладнаяНеЗарегистрированаВИБ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалоговаяНакладнаяДата", "Видимость", Объект.НалоговаяНакладнаяНеЗарегистрированаВИБ);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалоговаяНакладнаяОбособленноеПодразделение", "Видимость", НЕ Объект.НалоговаяНакладнаяНеЗарегистрированаВИБ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбособленноеПодразделение", "Видимость", Объект.НалоговаяНакладнаяНеЗарегистрированаВИБ);
	
	ДоступенФлагПереоценка = ОпределитьДоступностьФлагаПереоценка(Объект); 
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Переоценка", "Видимость", ДоступенФлагПереоценка);
	
	ВидимостьВзаиморасчетов = НЕ (
		Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации ИЛИ
		Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации ИЛИ
		ПродажаНижеОбычнойЦены ИЛИ
		ЭтоУсловнаяПродажа
	);
	
	ДокументПроверен = Объект.Статус = Перечисления.СтатусыНалоговыхДокументов.Проверен;
	ДокументВыдаетсяПокупателю = (Объект.ТипПричиныНевыдачиПокупателю = 0);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатусВыдачиПокупателю", "Доступность", ДокументПроверен И ДокументВыдаетсяПокупателю);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатусРегистрацииВЕРНН", "Доступность", ДокументПроверен);
	
	
	ЕстьВозможностьАвтокорректировки = НЕ (НДСИсходящийКлиентСервер.ПолучитьСписокАвтокорректируемыхВидовОперацийНН().НайтиПоЗначению(Объект.ВидОперации) = Неопределено);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатусАвтокорректировки", "Видимость", ЕстьВозможностьАвтокорректировки);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоставкаСобственнойОрганизации", 	"Видимость", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НаправлениеДеятельности", 		"Видимость", Истина);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоставкаСобственнойОрганизации", 	"Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НаправлениеДеятельности", 		"Видимость", Ложь);
	КонецЕсли;
	Если ПоставкаСобственнойОрганизации Тогда
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Иначе
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "ОграничениеТипа", ОписаниеТипа);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "Видимость", ВидимостьВзаиморасчетов И НЕ ПоставкаСобственнойОрганизации);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Контрагент", "Видимость", ВидимостьВзаиморасчетов);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Договор", "Видимость", ВидимостьВзаиморасчетов И НЕ ПоставкаСобственнойОрганизации); 
	
	МассивПараметровВыбора = Новый Массив;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда	
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "Заголовок", "Поставщик");
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "Заголовок", "");
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ПараметрыВыбора", Новый ФиксированныйМассив(МассивПараметровВыбора));
	
	МассивСвязей = Новый Массив;
	Для каждого СвязьМетаданные Из Метаданные.Документы.Приложение2КНалоговойНакладной.Реквизиты.НалоговаяНакладная.СвязиПараметровВыбора Цикл
		Связь = Новый СвязьПараметраВыбора(СвязьМетаданные.Имя, "Объект."+СвязьМетаданные.ПутьКДанным, СвязьМетаданные.ИзменениеЗначения);
		МассивСвязей.Добавить(Связь);
	КонецЦикла;
	
	Если ПродажаНижеОбычнойЦены Тогда
		Связь = Новый СвязьПараметраВыбора("Отбор.ВидОперации", "Объект.ВидОперации", РежимИзмененияСвязанногоЗначения.Очищать);
		МассивСвязей.Добавить(Связь);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалоговаяНакладная", "СвязиПараметровВыбора", Новый ФиксированныйМассив(МассивСвязей));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоДаннымПользователяЗаполнитьИзНалоговойНакладной", "Видимость", ПродажаНижеОбычнойЦены);
	
	ВидимостьГодовойПерерасчет = Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГодовойПерерасчетПропорциональногоНДС", "Видимость", ВидимостьГодовойПерерасчет);
	
// ГруппаСтраницаДанные, ГруппаСтраницаДанныеПользователя

	РежимАвтокорректировки = (Объект.СтатусАвтокорректировки <> Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницаДанные", "Видимость", РежимАвтокорректировки);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницаДанныеПользователя", "Видимость", Не РежимАвтокорректировки);
	
	СводнаяУсловнаяПродажа = (Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа);

	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ТоварыПоДаннымПользователяНалоговоеНазначение");
	МассивИменЭлементов.Добавить("ТоварыПоДаннымПользователяНалоговоеНазначениеПоФактуУсловнаяПродажа");
	МассивИменЭлементов.Добавить("ТоварыПоДаннымПользователяСуммаНДСРеглПоРегиструУсловнаяПродажа");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", ЭтоУсловнаяПродажа И Не СводнаяУсловнаяПродажа);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоДаннымПользователяОбъектЗаполненияСодержанияУсловнаяПродажа", "Видимость", ЭтоУсловнаяПродажа);
	
	МассивТипов = Новый Массив;
	Если СводнаяУсловнаяПродажа Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.РегистрацияВходящегоНалоговогоДокумента"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт"));
		ЗаголовокВходящийНалоговый = НСтр("ru='Входящий налоговый документ';uk='Вхідний податковий документ'");
	Иначе
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
		ЗаголовокВходящийНалоговый = НСтр("ru='Статья расходов (Номенклатура НН) / Объект для заполнения содержания';uk='Стаття витрат (Номенклатура ПН) / Об''єкт для заповнення змісту'");
	КонецЕсли;
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	
	ОтметкаНезаполненогоОбъектЗаполненияСодержанияУсловнаяПродажа = Ложь;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоДаннымПользователяОбъектЗаполненияСодержанияУсловнаяПродажа", "ОграничениеТипа", ОписаниеТипа);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоДаннымПользователяОбъектЗаполненияСодержанияУсловнаяПродажа", "Заголовок", ЗаголовокВходящийНалоговый);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоДаннымПользователяОбъектЗаполненияСодержанияУсловнаяПродажа", "АвтоОтметкаНезаполненного", ОтметкаНезаполненогоОбъектЗаполненияСодержанияУсловнаяПродажа);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ТоварыПоДаннымПользователяКодУКТВЭД");
	МассивИменЭлементов.Добавить("ТоварыПоДаннымПользователяГруппаКодНоменклатурыПоКлассификатору");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", НЕ ЭтоУсловнаяПродажа);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Доступность", НЕ ЭтоУсловнаяПродажа);
	
	МассивДопустимыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС().ВыгрузитьЗначения();
	Элементы.ТоварыПоДаннымПользователяСтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);
	Элементы.ТоварыСтавкаНДС.СписокВыбора.ЗагрузитьЗначения(МассивДопустимыхСтавокНДС);
	
// ГруппаСтраницыДополнительно	


	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
	 ИЛИ ПродажаНижеОбычнойЦены
	 ИЛИ ЭтоУсловнаяПродажа
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации
	 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Валюта", "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Валюта", "Доступность", Истина);
	КонецЕсли;
	
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьСписокВыбораТипПричиныНевыдачиПокупателю(Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора, ПродажаНижеОбычнойЦены, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	
	ЭлементСпискаЗначений = Элементы.ТипПричиныНевыдачиПокупателю.СписокВыбора.НайтиПоЗначению(Объект.ТипПричиныНевыдачиПокупателю);
	Элементы.ТипПричиныНевыдачиПокупателюДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СпецРежимНалогообложения", "Доступность", Объект.НалоговаяНакладнаяНеЗарегистрированаВИБ);	

	ЭлементСпискаЗначений = Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	Элементы.СпецРежимНалогообложенияДекорация.Заголовок = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
// ГруппаСтраницыИтого

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницыИтого", "ТекущаяСтраница", ?(РежимАвтокорректировки, Элементы.ГруппаИтогоТовары, Элементы.ГруппаИтогоТоварыПоДаннымПользователя));
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭлектронныйДокумент", "Доступность", (Объект.Дата < '2015-01-01'));

	Если Объект.СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ Тогда
		СуммаДокумента = Объект.ТоварыПоДаннымПользователя.Итог("СуммаСНДС");
	Иначе
		СуммаДокумента = Объект.Товары.Итог("СуммаСНДС");
	КонецЕсли;	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТребуетВключенияВЕдиныйРеестрНалоговыхНакладных", "Доступность", СуммаДокумента = 0);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияСтатусЕРНН", "Видимость", Объект.ДокументУменьшаетНО);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтражатьВУчетеБезРегистрации", "Видимость", Объект.ДокументУменьшаетНО);
	
	ЗарегистрированВЕРНН = (Объект.СтатусРегистрацииВЕРНН = ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН"));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаВключенияВЕдиныйРеестрНалоговыхНакладных", "Видимость", Объект.ДокументУменьшаетНО И ЗарегистрированВЕРНН);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыДокументПоставки", "ОграничениеТипа", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
		
	Иначе
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыДокументПоставки", "ОграничениеТипа", Новый ОписаниеТипов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПоДаннымПользователяИзТоварыСервер()
	
	Объект.ТоварыПоДаннымПользователя.Очистить();

	
	Для каждого СтрокаТовары из Объект.Товары Цикл
		
		ТекущаяСтрока = Объект.ТоварыПоДаннымПользователя.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовары);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(СтатьяДекларацииНДСНалоговыеОбязательства)
	
    Документы.Приложение2КНалоговойНакладной.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект.ВидОперации, СтатьяДекларацииНДСНалоговыеОбязательства, Объект.ТипПричиныНевыдачиПокупателю);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержаниеДляУсловнойПродажиСервер(ОбъектЗаполненияСодержанияУсловнаяПродажа, Содержание)
	
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьСодержаниеДляУсловнойПродажи(ОбъектЗаполненияСодержанияУсловнаяПродажа, Содержание);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьДопустимыеСтавкиНДС() Экспорт
	
	СписокСтавокНДС = Новый СписокЗначений();
	
	Если    Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации Тогда
				
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
        СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС14);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
        СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС14);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа 
		  ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
        СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС14);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НеНДС);
		
	ИначеЕсли  Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
		
	ИначеЕсли  Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС14);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
		
	КонецЕсли;
		
	Возврат СписокСтавокНДС;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтавкуНДС(Номенклатура)

	// СтавкаНДС прироритетно определеятся видом операции документа
	СписокДопустимыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС();	
	
	Если СписокДопустимыхСтавокНДС.Количество() > 1 Тогда
		Если СписокДопустимыхСтавокНДС.НайтиПоЗначению(Номенклатура.СтавкаНДС) = Неопределено Тогда 
			// в карточке товара указана недопустимая в данном контексте ставка НДС
			СтавкаНДСНовая = Перечисления.СтавкиНДС.ПустаяСсылка();
		Иначе
			СтавкаНДСНовая = Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтавкаНДСНовая = СписокДопустимыхСтавокНДС[0].Значение;
	КонецЕсли;
	
	Возврат СтавкаНДСНовая;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьДоступностьФлагаПереоценка(Объект)
	
	Возврат (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации") ИЛИ
	         Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации") ИЛИ
	         Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.НеНДСОперации")) И 
		    (Объект.ВидОперацииВозвратКорректировка =  ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Корректировка"));

КонецФункции

&НаСервере
Процедура ПересчитатьСуммыСервер(ИмяТабЧасти, ПересчитатьВалютныеСуммы)
	
	Если ПересчитатьВалютныеСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		НоваяВалюта                 = Объект.Валюта;
		ДатаДокумента               = Документы.Приложение2КНалоговойНакладной.ПолучитьДатуКурсаВалюты(Объект);
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока ИЗ Объект[ИмяТабЧасти] Цикл
		
		ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
			
		Если ПересчитатьВалютныеСуммы Тогда
			
			ТекущаяСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				ТекущаяСтрока.Цена,
				СтараяВалюта,НоваяВалюта,
				СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс,
				СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность
			);
		
			ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			ТекущаяСтрока.СуммаНДС	  = ТекущаяСтрока.СуммаБезНДС * ПроцентНДС;
			ТекущаяСтрока.СуммаСНДС	  = ТекущаяСтрока.СуммаБезНДС + ТекущаяСтрока.СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыРегл(ИмяТабЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыРегл(ИмяТЧ = Неопределено)
	
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьСуммыРеглВТабличныхЧастях(Объект, ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаетсяВУточняющийРасчетПриИзменении(Элемент)
	Элементы.ГруппаУточняющийРасчетДатаНомер.Видимость = Объект.ВключаетсяВУточняющийРасчет;
КонецПроцедуры

Процедура ОчиститьФлагНеИзменятьСумму(ТабличнаяЧасть)
	
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		СтрокаТЧ.НеПересчитыватьСумму = Ложь;
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруГТДПоУмолчанию(СтрокаТовары)
	
	Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
		РеквизитыУчетаПоГТД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТовары.Номенклатура, "ВестиУчетПоГТД,НоменклатураГТД");
		Если РеквизитыУчетаПоГТД.ВестиУчетПоГТД Тогда
			СтрокаТовары.НомерГТД = РеквизитыУчетаПоГТД.НоменклатураГТД;
		Иначе
			СтрокаТовары.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
		КонецЕсли;
	Иначе
		СтрокаТовары.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ТипНоменклатуры")
			)
		);
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ТоварыПоДаннымПользователя,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ТипНоменклатуры")
			)
		);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзНалоговойНакладнойНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтрокиНН,
	|	Товары.Номенклатура,
	|	Товары.Содержание,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.ЕдиницаИзмерения,
	|	-Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	-Товары.Количество КАК Количество,
	|	Товары.НомерГТД,
	|	Товары.КодНоменклатурыПоКлассификатору,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.КоличествоУпаковок = 0
	|						ТОГДА Товары.СуммаПревышения
	|					ИНАЧЕ Товары.СуммаПревышения / Товары.КоличествоУпаковок
	|				КОНЕЦ
	|		ИНАЧЕ Товары.ЦенаРегл
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА -Товары.СуммаПревышения
	|		ИНАЧЕ -Товары.СуммаБезНДСРегл
	|	КОНЕЦ КАК СуммаБезНДС,
	|	Товары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА -Товары.СуммаНДСПревышения
	|		ИНАЧЕ -Товары.СуммаНДСРегл
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНалоговыхДокументов.ПродажаНижеОбычнойЦены)
	|			ТОГДА -(Товары.СуммаПревышения + Товары.СуммаНДСПревышения)
	|		ИНАЧЕ -(Товары.СуммаБезНДСРегл + Товары.СуммаНДСРегл)
	|	КОНЕЦ КАК СуммаСНДС,
	|	ИСТИНА КАК ЭтоКорректировкаКоличества,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости) КАК СтатьяДекларацииНДСНалоговыеОбязательства
	|ИЗ
	|	Документ.НалоговаяНакладная.ТоварыПоДаннымПользователя КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиНН";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.НалоговаяНакладная);
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.ТоварыПоДаннымПользователя.Загрузить(РезультатЗапроса.Выгрузить());
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции();
	
	ЗаполнитьРеквизитыРегл("ТоварыПоДаннымПользователя");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипПричиныНевыдачиНаСервере()

	Документы.Приложение2КНалоговойНакладной.УстановитьТипПричиныНевыдачиПокупателюПоУмолчанию(Объект);
	
КонецПроцедуры

#КонецОбласти

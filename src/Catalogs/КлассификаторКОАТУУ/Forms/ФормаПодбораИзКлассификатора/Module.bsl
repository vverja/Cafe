#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Макет = НСИССервер.ПолучитьМакет("КлассификаторКОАТУУ", Справочники.КлассификаторКОАТУУ.ПолучитьМакет("КлассификаторКОАТУУ"));
	КлассификаторXML = Макет.ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Дерево = РеквизитФормыВЗначение("ДеревоКлассификатора");
	Для Каждого КлассификаторЗапись Из КлассификаторТаблица Цикл
		
		Если КлассификаторЗапись.Level = "1" Тогда
			СтрокаУровень1 = Дерево.Строки.Добавить();
			СтрокаУровень1.Код          = КлассификаторЗапись.Code;
			СтрокаУровень1.Наименование = КлассификаторЗапись.Name;
			СтрокаУровень1.КореньУровня = Истина;
			Продолжить;
		ИначеЕсли КлассификаторЗапись.Level = "2" Тогда
			СтрокаУровень2 = СтрокаУровень1.Строки.Добавить();
			СтрокаУровень2.Код          = КлассификаторЗапись.Code;
			СтрокаУровень2.Наименование = КлассификаторЗапись.Name;
			СтрокаУровень2.КореньУровня = Истина;
			Продолжить;
		ИначеЕсли КлассификаторЗапись.Level = "3" Тогда
			СтрокаУровень3 = СтрокаУровень2.Строки.Добавить();
			НоваяСтрока = СтрокаУровень3;
		ИначеЕсли КлассификаторЗапись.Level = "4" Тогда
			СтрокаУровень4 = СтрокаУровень3.Строки.Добавить();
			НоваяСтрока = СтрокаУровень4;
		Иначе
			НоваяСтрока = СтрокаУровень4.Строки.Добавить();		
		КонецЕсли;
		
		НоваяСтрока.Код          = КлассификаторЗапись.Code;
		НоваяСтрока.Наименование = КлассификаторЗапись.Name;
		НоваяСтрока.КореньУровня = Ложь;
		
	КонецЦикла;
	
	Соответствие = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторКОАТУУ.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторКОАТУУ КАК КлассификаторКОАТУУ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(СокрЛП(Выборка.Код), СокрЛП(Выборка.Код));
	КонецЦикла;
	
	Для каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Если Соответствие.Получить(СтрокаУровень1.Код) <> Неопределено Тогда
			СтрокаУровень1.Существует = Истина;
		КонецЕсли;
		Для каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
			Если Соответствие.Получить(СтрокаУровень2.Код) <> Неопределено Тогда
				СтрокаУровень2.Существует = Истина;
			КонецЕсли;
			Для каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
				Если Соответствие.Получить(СтрокаУровень3.Код) <> Неопределено Тогда
					СтрокаУровень3.Существует = Истина;
				КонецЕсли;
				Для каждого СтрокаУровень4 Из СтрокаУровень3.Строки Цикл
					Если Соответствие.Получить(СтрокаУровень4.Код) <> Неопределено Тогда
						СтрокаУровень4.Существует = Истина;
					КонецЕсли;
					Для каждого СтрокаУровень5 Из СтрокаУровень4.Строки Цикл
						Если Соответствие.Получить(СтрокаУровень5.Код) <> Неопределено Тогда
							СтрокаУровень5.Существует = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКлассификатора");
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКлассификатора

&НаКлиенте
Процедура ОбходДереваВверх(ТекущиеДанные)

	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда // Верхний уровень
		
		ДочерниеСтроки = Родитель.ПолучитьЭлементы();
		КоличествоВыбранных = 0;
		ОбщееКоличество = 0;
		Для каждого Элемент Из ДочерниеСтроки Цикл
			Если Элемент.Выбран = 2 Тогда
				КоличествоВыбранных = КоличествоВыбранных + 0.5;
			ИначеЕсли Элемент.Выбран = 1 Тогда
				КоличествоВыбранных = КоличествоВыбранных + 1;
			КонецЕсли;
			ОбщееКоличество = ОбщееКоличество + 1;
		КонецЦикла;
		
		Если ОбщееКоличество = КоличествоВыбранных Тогда
			Родитель.Выбран = 1;
		ИначеЕсли КоличествоВыбранных = 0 Тогда
			Родитель.Выбран = 0;
		Иначе
			Родитель.Выбран = 2;
		КонецЕсли;
		
		ОбходДереваВверх(Родитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбходДереваВниз(ТекущиеДанные)
	
	ДочерниеСтроки = ТекущиеДанные.ПолучитьЭлементы();
	Для каждого Элемент Из ДочерниеСтроки Цикл
		Элемент.Выбран = ТекущиеДанные.Выбран;
		ОбходДереваВниз(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранПриИзменении(ТекущиеДанные)
	
	Если ТекущиеДанные.Выбран = 2 Тогда
		ТекущиеДанные.Выбран = 0;
	КонецЕсли;
	
	ОбходДереваВверх(ТекущиеДанные);
	ОбходДереваВниз(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлассификатораВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоКлассификатора.ТекущиеДанные;
	ВыбранПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОбработатьРезультатыПодбораНаСервере();
	ОповеститьОбИзменении(Тип("СправочникСсылка.КлассификаторКОАТУУ"));	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатораВыбран.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКлассификатора.Код");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКлассификатора.КореньУровня");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатора.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКлассификатора.Существует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоКлассификатора.Код");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkSlateBlue);

КонецПроцедуры

#Область Прочее

&НаСервере
Процедура ОбработатьРезультатыПодбораНаСервере()
	
	МассивВыбранныхСтрок = Новый Массив;
	МассивКодов = Новый Массив;
	
	Дерево = РеквизитФормыВЗначение("ДеревоКлассификатора");
	Для каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Если СтрокаУровень1.Выбран Тогда
			Если ((НЕ СтрокаУровень1.КореньУровня) ИЛИ СтрокаУровень1.Выбран = 1) И (НЕ СтрокаУровень1.Существует) И (Не ПустаяСтрока(СтрокаУровень1.Код)) Тогда
				МассивВыбранныхСтрок.Добавить(СтрокаУровень1);
				МассивКодов.Добавить(СтрокаУровень1.Код);
			КонецЕсли;
			Для каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
				Если СтрокаУровень2.Выбран Тогда
					Если ((НЕ СтрокаУровень2.КореньУровня) ИЛИ СтрокаУровень2.Выбран = 1) И (НЕ СтрокаУровень2.Существует) И (Не ПустаяСтрока(СтрокаУровень2.Код)) Тогда
						МассивВыбранныхСтрок.Добавить(СтрокаУровень2);
						МассивКодов.Добавить(СтрокаУровень2.Код);
					КонецЕсли;
					Для каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
						Если СтрокаУровень3.Выбран Тогда
							Если ((НЕ СтрокаУровень3.КореньУровня) ИЛИ СтрокаУровень3.Выбран = 1) И (НЕ СтрокаУровень3.Существует) И (Не ПустаяСтрока(СтрокаУровень3.Код)) Тогда
								МассивВыбранныхСтрок.Добавить(СтрокаУровень3);
								МассивКодов.Добавить(СтрокаУровень3.Код);
							КонецЕсли;
							Для каждого СтрокаУровень4 Из СтрокаУровень3.Строки Цикл
								Если СтрокаУровень4.Выбран Тогда
									Если ((НЕ СтрокаУровень4.КореньУровня) ИЛИ СтрокаУровень4.Выбран = 1) И (НЕ СтрокаУровень4.Существует) И (Не ПустаяСтрока(СтрокаУровень4.Код)) Тогда
										МассивВыбранныхСтрок.Добавить(СтрокаУровень4);
										МассивКодов.Добавить(СтрокаУровень4.Код);
									КонецЕсли;
									Для каждого СтрокаУровень5 Из СтрокаУровень4.Строки Цикл
										Если СтрокаУровень5.Выбран Тогда
											Если ((НЕ СтрокаУровень5.КореньУровня) ИЛИ СтрокаУровень5.Выбран = 1) И (НЕ СтрокаУровень5.Существует) И (Не ПустаяСтрока(СтрокаУровень5.Код)) Тогда
												МассивВыбранныхСтрок.Добавить(СтрокаУровень5);
												МассивКодов.Добавить(СтрокаУровень5.Код);
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторКОАТУУ.Ссылка КАК Ссылка,
	|	КлассификаторКОАТУУ.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторКОАТУУ КАК КлассификаторКОАТУУ
	|ГДЕ
	|	КлассификаторКОАТУУ.Код В(&МассивКодов)";
	
	Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
	
	ТаблицаКлассификатор = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаКлассификатор Из ТаблицаКлассификатор Цикл
		СтрокаКлассификатор.Код = СокрЛП(СтрокаКлассификатор.Код);
	КонецЦикла;
	ТаблицаКлассификатор.Индексы.Добавить("Код");
	
	НачатьТранзакцию();
	
	Для каждого СтрокаДерева Из МассивВыбранныхСтрок Цикл
		
		НайденныйЭлемент = ТаблицаКлассификатор.Найти(СтрокаДерева.Код, "Код");
		Если НайденныйЭлемент <> Неопределено Тогда
			СправочникОбъект = НайденныйЭлемент.Ссылка.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники.КлассификаторКОАТУУ.СоздатьЭлемент();
		КонецЕсли;
		
		СправочникОбъект.Наименование            = СтрокаДерева.Наименование;
		СправочникОбъект.Код                     = СтрокаДерева.Код;
				
		СправочникОбъект.Записать();
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти


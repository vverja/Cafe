&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ИзмененаЦена; // Используется в механизмах обработчиков событий табличной части Товары

&НаКлиенте
Перем ОтображаетсяВопрос;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	УстановкаЦенСервер.ЗагрузитьНастройкиОтбораПоУмолчанию(ЭтотОбъект);
	
	Дата = КонецДня(ТекущаяДатаСеанса());
	КодФормы = "Прайс-лист";
	
	ФлагОткрытияФормы = Истина;
	
	ИмяДополнительнойКолонки = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	
	ИспользоватьЦеновыеГруппы              = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьНесколькоВидовЦен          = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтотОбъект);
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ПрайсЛист","Обработка.ПрайсЛист");
	Если СохраненныеНастройки <> Неопределено И Не ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		
		КомпоновщикНастроекОтбор.ЗагрузитьНастройки(СохраненныеНастройки.НастройкиКомпоновщика);
		УстановкаЦенСервер.НастроитьЗаголовокОтбора(ЭтотОбъект);
		
		Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
			СтрокаТЧ.Выбрана = СохраненныеНастройки.ВыбранныеЦены.Найти(СтрокаТЧ.Ссылка) <> Неопределено
			                   И Не СтрокаТЧ.ЗапрещенныйВидЦены;
		КонецЦикла;
		УстановкаЦенКлиентСервер.ПроставитьФлагиВлияетЗависитНаКлиенте(ЭтаФорма);
		
		ТаблицаПараметровОтбора.Загрузить(СохраненныеНастройки.ТаблицаПараметровОтбора);
		ВидНастройки               = СохраненныеНастройки.ВидНастройки;
		ВариантНавигации           = СохраненныеНастройки.ВариантНавигации;
		ВидНоменклатуры            = СохраненныеНастройки.ВидНоменклатуры;
		УстановленыНастройкиОтбора = СохраненныеНастройки.УстановленыНастройкиОтбора;
		Если СохраненныеНастройки.Свойство("ПоказыватьСтарыеЦены") Тогда
			УстановитьПоказыватьСтарыеЦены(СохраненныеНастройки.ПоказыватьСтарыеЦены);
		КонецЕсли;
		
		УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтотОбъект);
		УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Ложь);
		
	Иначе
	
		Если ВыбранныеЦены.Количество() = 1 Тогда
			Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
				ТекСтрока.Выбрана = Истина;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
				Если Не СтрокаТаблицы.Выбрана И Не СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
					СтрокаТаблицы.Выбрана = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтотОбъект);
		УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Ложь);
		
	КонецЕсли;
	
	УстановитьРассчитыватьАвтоматически(Истина);
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Истина);
	ЗафиксироватьКолонкуНоменклатура(Ложь);
	
	Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		
		ИспользоватьСохраняемыеНастройки = Ложь;
		
		КомпоновщикНастроекОтбор.Настройки.Отбор.Элементы.Очистить();
		
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.Добавить(Параметры.Номенклатура);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			КомпоновщикНастроекОтбор.Настройки.Отбор,
			"Номенклатура",
			ВидСравненияКомпоновкиДанных.ВСписке,
			СписокНоменклатуры,
			Неопределено,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			
		УстановкаЦенСервер.НастроитьЗаголовокОтбора(ЭтотОбъект);
		
		ПрименитьНастройки();
		
	Иначе
		ИспользоватьСохраняемыеНастройки = Истина;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	ЭтоВебКлиент = Истина;
#Иначе
	ЭтоВебКлиент = Ложь;
#КонецЕсли
	
	Элементы.ExcelПросмотр.Видимость                = Не ЭтоВебКлиент;
	Элементы.ExcelРедактирование.Видимость          = Не ЭтоВебКлиент;
	
	ИзменениеУстановкиЦенНоменклатуры = ПравоДоступа("Изменение", Метаданные.Документы.УстановкаЦенНоменклатуры);
	ИсторияЦенНоменклатуры = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатурыПоставщиков)
		Или ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	Элементы.ПечатьПереоценкаВРозницеПросмотр.Видимость       = ИзменениеУстановкиЦенНоменклатуры;
	Элементы.ПечатьУстановкаЦенНоменклатурыПросмотр.Видимость = ИзменениеУстановкиЦенНоменклатуры;
	Элементы.ПечатьЦенникиПросмотр.Видимость                  = ИзменениеУстановкиЦенНоменклатуры;
	Элементы.ПечатьЭтикеткиПросмотр.Видимость                 = ИзменениеУстановкиЦенНоменклатуры;
	Элементы.ДеревоЦенКонтекстноеМенюИсторияИзмененияЦенКонтекст.Видимость = ИсторияЦенНоменклатуры;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ РазрешитьЗакрытие И ОтображаетсяВопрос <> Истина Тогда
		
		ОтображаетсяВопрос = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаВопросПередЗакрытием", ЭтотОбъект);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ЗаписатьИЗакрыть", НСтр("ru='Применить';uk='Застосувати'"));
		Кнопки.Добавить("ЗакрытьБезСохранения", НСтр("ru='Отменить изменения цен';uk='Скасувати зміни цін'"));
		Кнопки.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
		ТекстВопроса = НСтр("ru='Применить измененные цены?';uk='Застосувати змінені ціни?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ИспользоватьСохраняемыеНастройки Тогда
		СохранитьНастройкиФормыНаСервере();
	КонецЕсли;
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗагрузитьИзExcel"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Истина);
		РезультатЗагрузки = ЗагрузитьИзExcelНаСервере(Параметр);
		Если Не РезультатЗагрузки.Выполнено Тогда
			ПоказатьПредупреждение(,РезультатЗагрузки.ОписаниеОшибки);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПрайсЛист.Форма.ФормаНастройки" Тогда
		ДействуетСессияИзмененияЦен = Ложь;
		СохраненныеДокументы.Очистить();
		ПрименитьНастройки(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПрайсЛист.Форма.ФормаПоиска" Тогда
		
		Для Каждого СтрокаДерева Из ДеревоЦен.ПолучитьЭлементы() Цикл
			Если СтрокаДерева.Номенклатура = ВыбранноеЗначение Тогда
				Элементы.ДеревоЦен.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Номенклатура на найдена';uk='Номенклатура не знайдена'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Дата = КонецДня(Дата);
	
	Если Элементы.СтраницыКоманднойПанели.ТекущаяСтраница = Элементы.СтраницыКоманднойПанели.ПодчиненныеЭлементы.СтраницаПросмотр Тогда
		ПрименитьНастройки();
		Возврат;
	КонецЕсли;
	
	ОбновитьСтарыеЦеныНоменклатурыНаСервере();
	
	НужноПересчитывать = Ложь;
	
	// Чтобы узнать необходимость пересчета - проверим, что у выбранных цен
	// есть влияющие цены с валютой, отличной от валюты выбранной цены.
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		
		Если ТекСтрока.Выбрана И
			ТекСтрока.СпособЗаданияЦены <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную") Тогда
			
			Для Каждого ВлияющаяЦена Из ТекСтрока.ВлияющиеЦены Цикл
				
				НайденнаяСтрока = Неопределено;
				Для Каждого ВыбраннаяЦена Из ВыбранныеЦены Цикл
					Если ВыбраннаяЦена.Ссылка = ВлияющаяЦена.Значение Тогда
						НайденнаяСтрока = ВыбраннаяЦена;
					КонецЕсли;
				КонецЦикла;
					
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.Валюта <> НайденнаяСтрока.Валюта Тогда
					НужноПересчитывать = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НужноПересчитывать Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НужноПересчитывать Тогда
		Возврат;
	КонецЕсли;
	
	ОтветНаВопрос = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект), 
		НСтр("ru='В документе выбраны виды цены с валютой, отличной от влияющих видов цен. Пересчитать цены?';uk='У документі вибрані види ціни з валютою, відмінною від впливаючих видів цін. Перерахувати ціни?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПереформироватьТаблицуЦен(Истина);
    Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
        УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтотОбъект, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаУстановленОтборНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастройкиПрайсЛиста(Не ИспользоватьНесколькоВидовЦен);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЦен

&НаКлиенте
Процедура ДеревоЦенПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяНоменклатура = Строка(ТекущиеДанные.Номенклатура)
                        + ?(ИспользоватьХарактеристикиНоменклатуры,
                          ?(ЗначениеЗаполнено(ТекущиеДанные.Характеристика), " (" + Строка(ТекущиеДанные.Характеристика) + ")", ""), "");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоЦенНоменклатура" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элементы.ДеревоЦен.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	ИзмененаЦена = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенУпаковкаПриИзмененииНаСервере(Идентификатор, ИмяТекущейКолонки)
	УстановкаЦенСервер.ДеревоЦенУпаковкаПриИзменении(ЭтотОбъект, Идентификатор, ИмяТекущейКолонки);	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенУпаковка".
//
&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");

	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		
		Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			ТекущееЗначение   = ТекущиеДанные[ИмяТекущейКолонки];
			
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДеревоЦенУпаковкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТекущейКолонки);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенЦена".
//
&НаКлиенте
Функция ДеревоЦенЦенаПриИзмененииКлиент(Элемент)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	КонецЕсли;
	
	ИзмененПроцент = Ложь;
	ПроцентИзменения = 0;
	ИмяТекущейКолонки  = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
	Если СтрНайти(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = Окр(
			ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] * ((ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] / 100) + 1),
			15,
			2);
		ИзмененПроцент = Истина;
		ПроцентИзменения = ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки];
	КонецЕсли;
	
	ИмяКолонкиУпаковка = СтрЗаменить(СтрЗаменить(Элемент.Имя, "ПроцентИзмененияВидЦены", "ВидЦены"), "ДеревоЦенВидЦены", "УпаковкаВидЦены");
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные["ИзмененаВручную"       + ИмяТекущейКолонки] = Истина;
	ТекущиеДанные["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
	
	Если ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
			100 * (ТекущиеДанные[ИмяТекущейКолонки] - ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки]) / ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки], 5, 2);
	Иначе
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
	КонецЕсли;
	
	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		МассивСтруктурУпаковокНоменклатуры = Новый Массив;
		СоответствиеКоэффициентовУпаковокНоменклатуры = Неопределено;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТекущееЗначениеУпаковки = ТекущиеДанные[ИмяКолонкиУпаковка];
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) Тогда
				Структура = УстановкаЦенКлиентСервер.ПолучитьСтруктуруУпаковокНоменклатуры();
				Структура.Номенклатура = ТекущиеДанные.Номенклатура;
				Структура.Упаковка = ТекущееЗначениеУпаковки;
				МассивСтруктурУпаковокНоменклатуры.Добавить(Структура);
			КонецЕсли;
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) 
					И УстановкаЦенКлиентСервер.НайтиСтруктуруУпаковкиНоменклатурыВМассиве(МассивСтруктурУпаковокНоменклатуры, 
																							ЭлементХарактеристика.Номенклатура, 
																							ЗначениеКолонкиУпаковка) = Неопределено Тогда
					Структура = УстановкаЦенКлиентСервер.ПолучитьСтруктуруУпаковокНоменклатуры();
					Структура.Номенклатура = ЭлементХарактеристика.Номенклатура;
					Структура.Упаковка = ЗначениеКолонкиУпаковка;
					МассивСтруктурУпаковокНоменклатуры.Добавить(Структура)
				КонецЕсли;
				
			КонецЦикла;
		
			Если МассивСтруктурУпаковокНоменклатуры.Количество() > 0 Тогда
				СоответствиеКоэффициентовУпаковокНоменклатуры = КоэффициентыУпаковокНоменклатуры(МассивСтруктурУпаковокНоменклатуры);
			КонецЕсли;
			
		КонецЕсли;
		
		// Определим коэффициент упаковки текущей цены
		КоэффициентУпаковкиЦеныИсточника = 1;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) И СоответствиеКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
				РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(СоответствиеКоэффициентовУпаковокНоменклатуры, 
																									ТекущиеДанные.Номенклатура, 
																									ТекущееЗначениеУпаковки);
				Если РезультатПоиска <> Неопределено Тогда
					КоэффициентУпаковкиЦеныИсточника = РезультатПоиска;																										
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущееЗначение = ТекущиеДанные[ИмяТекущейКолонки];
		ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ТекущееЗначениеУпаковки = ЗначениеКолонкиУпаковка
					И ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					
					Если ИзмененПроцент Тогда
						
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = ПроцентИзменения;
						ЭлементХарактеристика[ИмяТекущейКолонки] = Окр(
							ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки] * ((ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] / 100) + 1), 15, 2);
						
					Иначе
						ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
						Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
								100 * (ЭлементХарактеристика[ИмяТекущейКолонки]
								     - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки]) / ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки], 5, 2);
						Иначе
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
						КонецЕсли;
					КонецЕсли;
					
					ЭлементХарактеристика["ИзмененаВручную"       + ИмяТекущейКолонки] = Истина;
					ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
					
				Иначе
					
					// Определим коэффициент упаковки влияющей цены
					КоэффициентУпаковкиЦеныНазначения = 1;
					
					Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И СоответствиеКоэффициентовУпаковокНоменклатуры <> Неопределено Тогда
						РезультатПоиска = УстановкаЦенКлиентСервер.ПолучитьКоэффициентУпаковкиНоменклатуры(СоответствиеКоэффициентовУпаковокНоменклатуры, 
																									ТекущиеДанные.Номенклатура, 
																									ЗначениеКолонкиУпаковка);
						Если РезультатПоиска <> Неопределено Тогда
							КоэффициентУпаковкиЦеныНазначения = РезультатПоиска;																										
						КонецЕсли;
					КонецЕсли;
					
					Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
						НоваяЦена = ТекущееЗначение;
					Иначе
						НоваяЦена = ТекущееЗначение / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
					КонецЕсли;
					
					Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
						
						Если ИзмененПроцент Тогда
							
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = ПроцентИзменения;
							ЭлементХарактеристика[ИмяТекущейКолонки] = Окр(
								ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки] * ((ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] / 100) + 1), 15, 2);
						
						Иначе
							
							ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
							
							Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
								ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
									100 * (ЭлементХарактеристика[ИмяТекущейКолонки]
									       - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки]) / ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки],
									5,
									2);
							Иначе
								ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
							КонецЕсли;
							
						КонецЕсли;
						
						ЭлементХарактеристика["ИзмененаВручную"       + ИмяТекущейКолонки] = Истина;
						ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НоваяЦена = ТекущееЗначение;
				
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
					
					ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
					ЭлементХарактеристика["ИзмененаВручную"       + ИмяТекущейКолонки] = Истина;
					ЭлементХарактеристика["ИзмененаАвтоматически" + ИмяТекущейКолонки] = Ложь;
					
					Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
							100 * (ЭлементХарактеристика[ИмяТекущейКолонки]
							       - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки])/ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки],
							5,
							2);
					Иначе
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныПоИдентификаторуСтрокиНаСервере(ТекущиеДанные.ПолучитьИдентификатор(),ИмяТекущейКолонки);
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПривязываютсяДинамически

&НаКлиенте
Процедура Подключаемый_ДеревоЦенЦенаПриИзменении(Элемент)
	
	ИзмененаЦена = Истина;
	ДеревоЦенЦенаПриИзмененииКлиент(Элемент);
	
	Если Не ИспользоватьРежимРедактирования Тогда
		УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоЦенУпаковкаПриИзменении(Элемент)
	
	ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент);
	
	Если Не ИспользоватьРежимРедактирования Тогда
		УстановитьВидимостьКолонокРедактирования(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьЦеныНаПроцентНаКлиенте(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Истина);
	
	ПараметрыРасчета = Неопределено;

	
	ОткрытьФорму(
		"Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПроцентаИзменения",
		ПараметрыОткрытия,
		ЭтотОбъект,,,, Новый ОписаниеОповещения("ИзменитьЦеныНаПроцентНаКлиентеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцентНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыРасчета = Результат;
    Если ПараметрыРасчета <> Неопределено Тогда
        
        ОчиститьСообщения();
        
        УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Истина);
        
        ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ИзменитьЦеныНаПроцентНаСервере(ПараметрыРасчета);
        Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
            УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтотОбъект, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьРучныеЦены(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Истина);
	Если ПараметрыОткрытия.РучныеВидыЦен.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбраны виды цен, назначаемые вручную.';uk='Не вибрані види цін, які призначаються вручну.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Неопределено;

	
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета", ПараметрыОткрытия, ЭтотОбъект,,,, Новый ОписаниеОповещения("ОкруглитьРучныеЦеныЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьРучныеЦеныЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыРасчета = Результат;
    Если ПараметрыРасчета <> Неопределено Тогда
        
        ОчиститьСообщения();
        
        УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Истина);
        
        ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныНаСервере(ПараметрыРасчета);
        Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
            УстановкаЦенКлиент.РассчитатьВычисляемыеЦены(ЭтотОбъект, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключательРассчитыватьАвтоматически(Команда)
	
	УстановитьРассчитыватьАвтоматическиНаКлиенте(Не РассчитыватьАвтоматически);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Не УстановкаЦенКлиент.ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = Неопределено;

	
	ОткрытьФорму(
		"Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета",
		ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Ложь),
		ЭтотОбъект,,,, Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыРасчета = Результат;
    Если ПараметрыРасчета <> Неопределено Тогда
        
        ОчиститьСообщения();
        УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Истина);
        РассчитатьЦеныНаСервере(ПараметрыРасчета);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДинамикеЦен(Команда)
	
	СписокНоменклатуры  = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	Для Каждого ИдентификаторСтрокиДереваЦен Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
		СтрокаТЧ = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтрокиДереваЦен);
		СписокНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
		Если СтрокаТЧ.ХарактеристикиИспользуются Тогда
			Если СтрокаТЧ.ПолучитьРодителя() = Неопределено Тогда
				Для Каждого СтрокаХарактеристика Из СтрокаТЧ.ПолучитьЭлементы() Цикл
					Если СписокХарактеристик.НайтиПоЗначению(СтрокаХарактеристика.Характеристика) = Неопределено Тогда
						СписокХарактеристик.Добавить(СтрокаХарактеристика.Характеристика);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если СписокХарактеристик.НайтиПоЗначению(СтрокаТЧ.Характеристика) = Неопределено Тогда
					СписокХарактеристик.Добавить(СтрокаТЧ.Характеристика);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СписокХарактеристик.НайтиПоЗначению(
					ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")) = Неопределено Тогда
				СписокХарактеристик.Добавить(ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокВидовЦен = Новый СписокЗначений;
	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтотОбъект) Цикл
		СписокВидовЦен.Добавить(СтрокаВидЦены.Ссылка, СтрокаВидЦены.Наименование);
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", СписокНоменклатуры);
	Отбор.Вставить("Характеристика", СписокХарактеристик);
	Отбор.Вставить("ВидЦены", СписокВидовЦен);
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии",
	        Отбор,
	        НСтр("ru='Динамика изменения цен по номенклатуре (Диаграмма)';uk='Динаміка зміни цін по номенклатурі (Діаграма)'"),
	        НСтр("ru='Динамика изменения цен по номенклатуре (Диаграмма)';uk='Динаміка зміни цін по номенклатурі (Діаграма)'"),
	        Истина);
	
	ОткрытьФорму("Отчет.ДинамикаИзмененияЦенНоменклатуры.Форма",
	        ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(Неопределено, НСтр("ru='Выгрузка в Excel недоступна в Web-клиенте.';uk='Вивантаження в Excel недоступне в Web-клієнті.'"));
#Иначе
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьВExcelЗавершениеПодключенияРасширения", ЭтотОбъект);
	ТекстСообщения = НСтр("ru='Для выгрузки в Excel необходимо установить расширение работы с файлами.';uk='Для вивантаження в Excel необхідно встановити розширення роботи з файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcelЗавершениеПодключенияРасширения(Результат, ДополнительныеПараметры) Экспорт
	
#Если НЕ ВебКлиент Тогда
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		АдресДанныеДляПечатиВоВременномХранилище = АдресВоВременномХранилищеДанныхДляПечати();
	
		ПараметрыФормыНастройки = Новый Структура(
			"МассивДокументов, УникальныйИдентификатор, АдресДанныеДляПечатиВоВременномХранилище",
			Неопределено,
			УникальныйИдентификатор,
			АдресДанныеДляПечатиВоВременномХранилище);
		
		ПараметрыПечати = Неопределено;

		
		ОткрытьФорму(
			"Документ.УстановкаЦенНоменклатуры.Форма.ФормаНастройкиПечатнойФормыУстановкиЦенНоменклатуры",
			ПараметрыФормыНастройки,,,,, Новый ОписаниеОповещения("ВыгрузитьВExcelЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Расширение работы с файлами не подключено.';uk='Розширення роботи з файлами не підключено.'"));
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcelЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыПечати = Результат;
    
    Если ПараметрыПечати <> Неопределено Тогда
        ПараметрыПечати.ВыводитьШапку = Ложь;
        УстановкаЦенКлиент.ВыгрузитьВExcelБезСсылки(ЭтотОбъект, ПараметрыПечати);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(Неопределено, НСтр("ru='Загрузка из Excel недоступна в Web-клиенте.';uk='Завантаження Excel недоступне у Web-клієнті.'"));
#Иначе
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзExcelЗавершениеПодключенияРасширения", ЭтотОбъект);
	ТекстСообщения = НСтр("ru='Для загрузки из Excel необходимо установить расширение работы с файлами.';uk='Для завантаження Excel необхідно встановити розширення роботи з файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстСообщения);
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcelЗавершениеПодключенияРасширения(Результат, ДополнительныеПараметры) Экспорт
	
#Если НЕ ВебКлиент Тогда
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		УстановкаЦенКлиент.ЗагрузитьИзExcelБезСсылки(ЭтотОбъект);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Расширение работы с файлами не подключено.';uk='Розширення роботи з файлами не підключено.'"));
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПрайсЛиста(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	
	НовыеНастройки = Неопределено;
	ПолучитьНастройки(НовыеНастройки);
	
	СписокВидыЦен = Новый СписокЗначений;
	СписокВидыЦен.ЗагрузитьЗначения(УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтотОбъект));
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидыЦен", УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтотОбъект));
	Отбор.Вставить("ДатаОтчета", Дата);
	
	ПараметрыОткрытия.Вставить("ФиксированныеНастройки", НовыеНастройки);
	ПараметрыОткрытия.Вставить("КлючВарианта", "ПрайсЛистКонтекст");
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	ПараметрыОткрытия.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	
	ОткрытьФорму(
		"Отчет.ПрайсЛист.ФормаОбъекта",
		ПараметрыОткрытия,
		ЭтотОбъект,
		Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененияЦенКонтекст(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Ключ",           ТекущиеДанные.Номенклатура);
	ПараметрыОткрытияФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ИсторияЦенНоменклатуры", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьИзменениеЦен(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		
		ЗаписатьИзмененияЦен();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
	
		ОткрытьФормуНастройкиПрайсЛиста(Не ИспользоватьНесколькоВидовЦен);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСоСхожимиСвойствами(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	ТоварыСоСхожимиСвойствами = Новый Структура;
	ТоварыСоСхожимиСвойствами.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ТоварыСоСхожимиСвойствами.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ОткрытьФормуНастройкиПрайсЛиста(Не ИспользоватьНесколькоВидовЦен, ТоварыСоСхожимиСвойствами);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменениеЦен(Команда)
	
	ОтменитьИзменениеЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПереоценкаВРознице(Команда)
	
	МассивДокументов = Новый Массив;
	Если Модифицированность Тогда
		МассивДокументов = ЗаписатьИзмененияЦенНаСервере(Ложь);
	Иначе
		Для Каждого СтрокаТЧ Из СохраненныеДокументы Цикл
			СтруктураДокументов = Новый Структура;
			СтруктураДокументов.Вставить("УстановкаЦенНоменклатуры", СтрокаТЧ.Ссылка);
			СтруктураДокументов.Вставить("СогласованиеЦенНоменклатуры", Неопределено);
			МассивДокументов.Добавить(СтруктураДокументов);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивДокументов = Неопределено
		ИЛИ МассивДокументов.Количество() = 0 Тогда
		
		ОбъектыПечати = Новый Массив;
		ОбъектыПечати.Добавить(ПредопределенноеЗначение("Документ.УстановкаЦенНоменклатуры.ПустаяСсылка"));
		
		ОписаниеКоманды = Новый Структура;
		ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
		ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
		
		УправлениеПечатьюУТКлиент.ПечатьПереоценкаВРознице(ОписаниеКоманды, АдресВоВременномХранилищеДанныхДляПечати());
		
	Иначе
		
		ДокументыУстановкиЦенНоменклатуры = Новый Массив;
		Для Каждого СтрокаТЧ Из МассивДокументов Цикл
			ДокументыУстановкиЦенНоменклатуры.Добавить(СтрокаТЧ.УстановкаЦенНоменклатуры);
		КонецЦикла;
		
		ОписаниеКоманды = Новый Структура;
		ОписаниеКоманды.Вставить("ОбъектыПечати", ДокументыУстановкиЦенНоменклатуры);
		ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
		
		УправлениеПечатьюУТКлиент.ПечатьПереоценкаВРознице(ОписаниеКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУстановкаЦенНоменклатуры(Команда)
	
	МассивДокументов = Новый Массив;
	Если Модифицированность Тогда
		МассивДокументов = ЗаписатьИзмененияЦенНаСервере(Ложь);
	Иначе
		Для Каждого СтрокаТЧ Из СохраненныеДокументы Цикл
			СтруктураДокументов = Новый Структура;
			СтруктураДокументов.Вставить("УстановкаЦенНоменклатуры", СтрокаТЧ.Ссылка);
			СтруктураДокументов.Вставить("СогласованиеЦенНоменклатуры", Неопределено);
			МассивДокументов.Добавить(СтруктураДокументов);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивДокументов = Неопределено
		ИЛИ МассивДокументов.Количество() = 0 Тогда
		
		ОбъектыПечати = Новый Массив;
		ОбъектыПечати.Добавить(ПредопределенноеЗначение("Документ.УстановкаЦенНоменклатуры.ПустаяСсылка"));
		
		ОписаниеКоманды = Новый Структура;
		ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
		ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
		
		УправлениеПечатьюУТКлиент.ПечатьУстановкаЦенНоменклатуры(ОписаниеКоманды, АдресВоВременномХранилищеДанныхДляПечати());
		
	Иначе
		
		ДокументыУстановкиЦенНоменклатуры = Новый Массив;
		Для Каждого СтрокаТЧ Из МассивДокументов Цикл
			ДокументыУстановкиЦенНоменклатуры.Добавить(СтрокаТЧ.УстановкаЦенНоменклатуры);
		КонецЦикла;
		
		ОписаниеКоманды = Новый Структура;
		ОписаниеКоманды.Вставить("ОбъектыПечати", ДокументыУстановкиЦенНоменклатуры);
		ОписаниеКоманды.Вставить("Форма", ЭтотОбъект);
		
		УправлениеПечатьюУТКлиент.ПечатьУстановкаЦенНоменклатуры(ОписаниеКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенники(Команда)
	
	АдресВХранилище = ДанныеДляПечатиЦенников();
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары",
		Новый Структура("АдресВХранилище, НазначениеШаблона", АдресВХранилище, Неопределено),
		ЭтотОбъект,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетки(Команда)
	
	АдресВХранилище = ДанныеДляПечатиЭтикеток();
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары",
		Новый Структура("АдресВХранилище, НазначениеШаблона", АдресВХранилище, Неопределено),
		ЭтотОбъект,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененияЦен(Команда)
	
	ОткрытьФорму("Документ.УстановкаЦенНоменклатуры.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСтарыеЦены(Команда)
	
	УстановитьПоказыватьСтарыеЦены(Не ПоказыватьСтарыеЦены);
	УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, ИспользоватьРежимРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ИндексКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦен.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ИндексКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект, 
																			 "ДеревоЦенХарактеристика",
																		     "ДеревоЦен.ХарактеристикиИспользуются");
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройки(НовыеНастройки)
	
	НовыеНастройки = КомпоновщикНастроекОтбор.ПолучитьНастройки();
	
	СписокВидовЦен = Новый СписокЗначений;
	СписокВидовЦен.ЗагрузитьЗначения(УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтотОбъект));
	
	ЭлементОтбора = НовыеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидЦены");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокВидовЦен;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	НастройкиКомпоновщика = КомпоновщикНастроекОтбор.ПолучитьНастройки();
	
	МассивВыбранныеЦены = УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтотОбъект);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НастройкиКомпоновщика",      НастройкиКомпоновщика);
	СтруктураДанных.Вставить("ВыбранныеЦены",              МассивВыбранныеЦены);
	СтруктураДанных.Вставить("ТаблицаПараметровОтбора",    ТаблицаПараметровОтбора.Выгрузить());
	СтруктураДанных.Вставить("ВидНастройки",               ВидНастройки);
	СтруктураДанных.Вставить("ВариантНавигации",           ВариантНавигации);
	СтруктураДанных.Вставить("ВидНоменклатуры",            ВидНоменклатуры);
	СтруктураДанных.Вставить("УстановленыНастройкиОтбора", УстановленыНастройкиОтбора);
	СтруктураДанных.Вставить("ПоказыватьСтарыеЦены",       ПоказыватьСтарыеЦены);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ПрайсЛист", "Обработка.ПрайсЛист",СтруктураДанных);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьИзменениеЦенНаСервере(ВыполняетсяЗакрытиеФормы = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЧ Из СохраненныеДокументы Цикл
		ДокументОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Удалить();
	КонецЦикла;
	
	СохраненныеДокументы.Очистить();
	
	Если Не ВыполняетсяЗакрытиеФормы Тогда
		УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтотОбъект);
		УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Ложь);
		ПрименитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройки(АдресВоВременномХранилище = Неопределено)
	
	Если АдресВоВременномХранилище <> Неопределено Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		
		КомпоновщикНастроекОтбор.ЗагрузитьНастройки(СтруктураДанных.НастройкиКомпоновщика);
		УстановкаЦенСервер.НастроитьЗаголовокОтбора(ЭтотОбъект);
		
		Для Каждого СтрокаТЧ Из СтруктураДанных.ВыбранныеЦены Цикл
			ЗаполнитьЗначенияСвойств(УстановкаЦенКлиентСервер.НайтиСтрокуВидаЦен(ВыбранныеЦены, СтрокаТЧ.Ссылка), СтрокаТЧ);
		КонецЦикла;
		
		Дата = СтруктураДанных.Дата;
		
		ВидНастройки = СтруктураДанных.ВидНастройки;
		ТаблицаПараметровОтбора.Загрузить(СтруктураДанных.ТаблицаПараметровОтбора);
		
		ВариантНавигации = СтруктураДанных.ВариантНавигации;
		ВидНоменклатуры = СтруктураДанных.ВидНоменклатуры;
		
		УстановленыНастройкиОтбора = КомпоновщикНастроекОтбор.Настройки.Отбор.Элементы.Количество() > 0;
		
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	ВариантыРасчетаЦеныНабора = Новый Массив;
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка"));
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям"));
	ВариантыРасчетаЦеныНабора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам"));
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОбязательныеПоля"   , Новый Массив);
	СтруктураНастроек.Вставить("ПараметрыДанных"    , Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек", Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	СтруктураНастроек.Вставить("ВестиУчетСертификатовНоменклатуры" , Ложь);
	СтруктураНастроек.Вставить("ЦеныНаДату", КонецДня(Дата));
	СтруктураНастроек.Вставить("ОтборПоВариантуРасчетаЦенНаборов", ВариантыРасчетаЦеныНабора);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроекОтбор;
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "Макет";
	
	УстановкаЦенСервер.ПостроитьДеревоЦен(ЭтотОбъект);
	УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, ИспользоватьРежимРедактирования);
	
	ТаблицаНоменклатуры = УстановкаЦенСервер.СоздатьТаблицуНоменклатуры();
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПодборТоваровПоОтбору.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
		КонецЕсли;
	КонецЦикла;
	
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	
	ТаблицаНоменклатуры = УстановкаЦенСервер.ДобавитьТовары(ЭтотОбъект, ТаблицаНоменклатуры, КэшДанных);
	
	ТаблицаЗначений = УстановкаЦенСервер.ТаблицаТовары(ЭтотОбъект, КэшДанных);
	УстановкаЦенСервер.ЗагрузитьСтарыеЦеныНоменклатурыПрайсЛист(ЭтотОбъект, ТаблицаЗначений, КэшДанных);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьИзмененияЦенНаСервере(ЗакончитьИзменениеЦен = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыНовыхДокументов = Новый Структура;
	РеквизитыНовыхДокументов.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	РеквизитыНовыхДокументов.Вставить("Комментарий", НСтр("ru='Создано обработкой Прайс-лист';uk='Створено обробкою Прайс-лист'"));
	РеквизитыНовыхДокументов.Вставить("Статус", Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован);
	РеквизитыНовыхДокументов.Вставить("Дата", Дата);
	
	Данные = Новый Структура;
	Данные.Вставить("Форма",                    ЭтотОбъект);
	Данные.Вставить("Документы",                Новый Массив);
	Данные.Вставить("СохранятьБазовые",         Ложь);
	Данные.Вставить("РеквизитыНовыхДокументов", РеквизитыНовыхДокументов);
	Данные.Вставить("ТолькоИзмененные",         Истина);
	
	Для Каждого СтрокаТЧ Из СохраненныеДокументы Цикл
		ДокументОбъект = СтрокаТЧ.Ссылка.ПолучитьОбъект();
		Данные.Документы.Добавить(ДокументОбъект);
	КонецЦикла;
	
	УстановкаЦенСервер.ПоместитьЦеныВТабличнуюЧасть(Данные);
	
	МассивДокументы = Новый Массив;
	Попытка
	НачатьТранзакцию();
	
	Для Каждого ДокументОбъект Из Данные.Документы Цикл
		Если ДокументОбъект.Товары.Количество() > 0 Тогда
			
			НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(
				УстановкаЦенКлиентСервер.ДатаДокумента(ДокументОбъект.Дата), ДокументОбъект.Ссылка);
			ДокументОбъект.Дата = УстановкаЦенКлиентСервер.РассчитатьДатуДокумента(
				УстановкаЦенКлиентСервер.ДатаДокумента(ДокументОбъект.Дата), НомерВПределахДня);
			
			Если Не ЗакончитьИзменениеЦен Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
			Иначе
				
				Статус = Неопределено;
				Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры")
				 Или ПраваПользователяПовтИсп.УстановкаЦенНоменклатурыБезСогласования() Тогда
					Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
				Иначе
					Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
				КонецЕсли;
				
				ДокументОбъект.Статус = Статус;
				
			КонецЕсли;
			
			Если ЗакончитьИзменениеЦен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
			
			СогласованиеЦенНоменклатуры = Неопределено;
			Если ЗакончитьИзменениеЦен
				И ДокументОбъект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован Тогда
				СогласованиеЦенНоменклатурыОбъект = БизнесПроцессы.СогласованиеЦенНоменклатуры.СоздатьБизнесПроцесс();
				СогласованиеЦенНоменклатурыОбъект.Дата = ТекущаяДатаСеанса();
				СогласованиеЦенНоменклатурыОбъект.Заполнить(ДокументОбъект.Ссылка);
				СогласованиеЦенНоменклатурыОбъект.Записать();
				СогласованиеЦенНоменклатурыОбъект.Старт(БизнесПроцессы.СогласованиеЦенНоменклатуры.ТочкиМаршрута.Старт);
				СогласованиеЦенНоменклатуры = СогласованиеЦенНоменклатурыОбъект.Ссылка;
			КонецЕсли;
			
			СтруктураДокументов = Новый Структура;
			СтруктураДокументов.Вставить("УстановкаЦенНоменклатуры", ДокументОбъект.Ссылка);
			СтруктураДокументов.Вставить("СогласованиеЦенНоменклатуры", СогласованиеЦенНоменклатуры);
			МассивДокументы.Добавить(СтруктураДокументов);
		Иначе
			Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
				ДокументОбъект.Прочитать();
				ДокументОбъект.Удалить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	СохраненныеДокументы.Очистить();
	Для Каждого СтрокаТЧ ИЗ МассивДокументы Цикл
		НоваяСтрока = СохраненныеДокументы.Добавить();
		НоваяСтрока.Ссылка = СтрокаТЧ.УстановкаЦенНоменклатуры;
		ЗаблокироватьДанныеДляРедактирования(СтрокаТЧ.УстановкаЦенНоменклатуры,,УникальныйИдентификатор);
	КонецЦикла;
	
	Если ЗакончитьИзменениеЦен Тогда
		УстановитьВидимостьКолонокРедактирования(ЭтотОбъект, Ложь);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат МассивДокументы;
	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке().Описание);
		ОтменитьТранзакцию();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИзмененияЦен()
	
	ДействуетСессияИзмененияЦен = Ложь;
	
	Данные = ЗаписатьИзмененияЦенНаСервере(Истина);
	Если Данные <> Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Данные Цикл
			ТекстОповещения = НСтр("ru='Создан новый документ';uk='Створено новий документ'");
			ПараметрыОповещения = Неопределено;
			Оповестить("Запись_УстановкаЦенНоменклатуры", ПараметрыОповещения, СтрокаТЧ.УстановкаЦенНоменклатуры);
			ПоказатьОповещениеПользователя(ТекстОповещения,
				ПолучитьНавигационнуюСсылку(СтрокаТЧ.УстановкаЦенНоменклатуры),
				Строка(СтрокаТЧ.УстановкаЦенНоменклатуры),
				БиблиотекаКартинок.Информация32);
			
			Если ЗначениеЗаполнено(СтрокаТЧ.СогласованиеЦенНоменклатуры) Тогда
				ТекстОповещения = НСтр("ru='Запущен бизнес-процесс согласования новых цен';uk='Запущений бізнес-процес погодження нових цін'");
				ПараметрыОповещения = Неопределено;
				Оповестить("Запись_СогласованиеЦенНоменклатуры", ПараметрыОповещения, СтрокаТЧ.СогласованиеЦенНоменклатуры);
				ПоказатьОповещениеПользователя(ТекстОповещения,
					ПолучитьНавигационнуюСсылку(СтрокаТЧ.СогласованиеЦенНоменклатуры),
					Строка(СтрокаТЧ.СогласованиеЦенНоменклатуры),
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВопросПередЗакрытием(Результат, Параметры) Экспорт
	
	ОтображаетсяВопрос = Ложь;
	
	Если Результат = "ЗакрытьБезСохранения" Тогда
		
		ОтменитьИзменениеЦенНаСервере(Истина);
		РазрешитьЗакрытие = Истина;
		Если Открыта() Тогда
			Закрыть(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат = "ЗаписатьИЗакрыть" Тогда
		
		ЗаписатьИзмененияЦен();
		
		РазрешитьЗакрытие = Истина;
		Если Открыта() Тогда
			Закрыть(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонокРедактирования(Форма, ИспользоватьРежимРедактирования)
	
	Для Каждого ТекЭлемент Из Форма.Элементы.ДеревоЦен.ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, "ГруппаЦеныВидЦены") Тогда
			Для Каждого ВложенныйЭлемент Из ТекЭлемент.ПодчиненныеЭлементы Цикл
				Если СтрНайти(ВложенныйЭлемент.Имя, "СтараяЦена") ИЛИ СтрНайти(ВложенныйЭлемент.Имя, "ПроцентИзменения") Тогда
					ВложенныйЭлемент.Видимость = Форма.ПоказыватьСтарыеЦены;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьРежимРедактирования Тогда
		Форма.Элементы.СтраницыКоманднойПанели.ТекущаяСтраница = Форма.Элементы.СтраницыКоманднойПанели.ПодчиненныеЭлементы.СтраницаРедактирование;
		Форма.Элементы.ЗакончитьИзменениеЦен.КнопкаПоУмолчанию = Истина;
	Иначе
		Форма.Элементы.СтраницыКоманднойПанели.ТекущаяСтраница = Форма.Элементы.СтраницыКоманднойПанели.ПодчиненныеЭлементы.СтраницаПросмотр;
		Форма.Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
		Форма.Модифицированность = Ложь;
	КонецЕсли;

	Форма.ИспользоватьРежимРедактирования = ИспользоватьРежимРедактирования;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьИзExcelНаСервере(Параметр)
	
	Возврат УстановкаЦенСервер.ЗагрузитьИзExcel(ЭтотОбъект, Параметр.ВидыЦен, Параметр.Товары);
	
КонецФункции

&НаСервере
Функция РассчитатьЦеныНаСервере(ПараметрыРасчета)
	Возврат УстановкаЦенСервер.РассчитатьЦены(ЭтотОбъект, ПараметрыРасчета);
КонецФункции

&НаСервере
Функция АдресНастроекПрайсЛистаВоВременномХранилище()
	
	НастройкиКомпоновщика = КомпоновщикНастроекОтбор.ПолучитьНастройки();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НастройкиКомпоновщика", НастройкиКомпоновщика);
	СтруктураДанных.Вставить("АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен", АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	СтруктураДанных.Вставить("АдресХранилищаНастройкиКомпоновкиДанных", АдресХранилищаНастройкиКомпоновкиДанных);
	СтруктураДанных.Вставить("ВыбранныеЦены", ВыбранныеЦены.Выгрузить());
	СтруктураДанных.Вставить("Дата", Дата);
	СтруктураДанных.Вставить("ТаблицаПараметровОтбора", ТаблицаПараметровОтбора.Выгрузить());
	СтруктураДанных.Вставить("ВидНастройки", ВидНастройки);
	СтруктураДанных.Вставить("ВариантНавигации", ВариантНавигации);
	СтруктураДанных.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиПрайсЛиста(ТолькоОтбор = Ложь, ТоварыСоСхожимиСвойствами = Неопределено)
	
	АдресВоВременномХранилище = АдресНастроекПрайсЛистаВоВременномХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыФормы.Вставить("НастройкиПрайсЛиста", АдресВоВременномХранилище);
	ПараметрыФормы.Вставить("Дата", Дата);
	ПараметрыФормы.Вставить("ТолькоОтбор", ТолькоОтбор);
	ПараметрыФормы.Вставить("ТоварыСоСхожимиСвойствами", ТоварыСоСхожимиСвойствами);
	
	ОткрытьФорму("Обработка.ПрайсЛист.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПереформироватьТаблицуЦен(ПересчитатьЦены)
	Возврат УстановкаЦенСервер.ПереформироватьТаблицуЦен(ЭтотОбъект, ПересчитатьЦены);
КонецФункции

&НаСервере
Процедура ОбновитьСтарыеЦеныНоменклатурыНаСервере()
	УстановкаЦенСервер.ОбновитьСтарыеЦеныНоменклатуры(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ДанныеДляПечатиЦенников()
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьСклад",       Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(ВыбранныеЦены.Количество() = 1, ВыбранныеЦены[0].Ссылка, Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", УстановкаЦенСервер.ТаблицаТовары(ЭтотОбъект, КэшДанных, Истина, Истина));
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеДляПечатиЭтикеток()

	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьСклад",       Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(ВыбранныеЦены.Количество() = 1, ВыбранныеЦены[0].Ссылка, Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", УстановкаЦенСервер.ТаблицаТовары(ЭтотОбъект, КэшДанных, Истина, Истина));
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

// МеханизмВнешнегоОборудования
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	

КонецПроцедуры // ОбработатьШтрихкоды()
// Конец МеханизмВнешнегоОборудования

#КонецОбласти

#Область Прочее

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьРассчитыватьАвтоматически(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ПереключательРассчитыватьАвтоматическиПросмотр.Пометка = НовоеЗначение;
	Элементы.ПереключательРассчитыватьАвтоматическиРедактирование.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьПоказыватьСтарыеЦены(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	ПоказыватьСтарыеЦены = НовоеЗначение;
	Элементы.ПереключательПоказыватьСтарыеЦеныПросмотр.Пометка = НовоеЗначение;
	Элементы.ПереключательПоказыватьСтарыеЦеныРедактирование.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак фиксации колонок "Номенклатура" и "Характеристика" слева
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура ЗафиксироватьКолонкуНоменклатура(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице   = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьЦеныНаПроцентНаСервере(ПараметрыРасчета)
	Возврат УстановкаЦенСервер.ИзменитьЦеныНаПроцент(ЭтотОбъект, ПараметрыРасчета);
КонецФункции

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьРассчитыватьАвтоматическиНаКлиенте(НовоеЗначение)
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ПереключательРассчитыватьАвтоматическиПросмотр.Пометка = НовоеЗначение;
	Элементы.ПереключательРассчитыватьАвтоматическиРедактирование.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для расчета цен
//
// Параметры:
// ЗагрузкаСтарыхЦен - Булево - Указывает на необходимость загрузки старых значений ручных цен
// ОкруглениеРучныхЦен - Булево - Указывает на необходимость округления ручных цен
//
// Возвращаемое значение:
// Структура
// Ключи структуры:
// ЗагрузкаСтарыхЦен - Булево
// ОкруглениеРучныхЦен - Булево
// ВидыЦен - Массив
//
&НаКлиенте
Функция ПараметрыОткрытияФормыВыбораПараметровРасчета(ЗагрузкаСтарыхЦен = Ложь, ОкруглениеРучныхЦен = Ложь)
	
	РучныеВидыЦен = Новый Массив();
	
	Для Каждого СтрокаВидыЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидыЦены.Выбрана
			И ((СтрокаВидыЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную")) = (ЗагрузкаСтарыхЦен Или ОкруглениеРучныхЦен)) Тогда
			РучныеВидыЦен.Добавить(СтрокаВидыЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ТолькоВыделенные = Элементы.ДеревоЦен.ВыделенныеСтроки.Количество() > 1;
	
	Возврат Новый Структура(
		"ЗагрузкаСтарыхЦен, ОкруглениеРучныхЦен, РучныеВидыЦен, ДатаДокумента, ТолькоВыделенные, ВсеВидыЦен",
		ЗагрузкаСтарыхЦен,
		ОкруглениеРучныхЦен,
		РучныеВидыЦен,
		УстановкаЦенКлиентСервер.ДатаДокумента(Дата),
		ТолькоВыделенные, УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтотОбъект));
	
КонецФункции

&НаСервере
Функция АдресВоВременномХранилищеДанныхДляПечати()
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ВидыЦен", УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтотОбъект));
	ДанныеДляПечати.Вставить("Товары", УстановкаЦенСервер.ТаблицаТовары(ЭтотОбъект));
	ДанныеДляПечати.Вставить("ДатаСтарыхЦен", НачалоДня(Дата) - 1);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеДляПечати, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция РассчитатьЦеныПоИдентификаторуСтрокиНаСервере(ИдентификаторСтроки, ИзмененноеПоле)
	Возврат УстановкаЦенСервер.РассчитатьЦеныПоИдентификаторуСтроки(ЭтотОбъект, ИдентификаторСтроки,,ИзмененноеПоле);
КонецФункции

&НаСервереБезКонтекста
Функция КоэффициентыУпаковокНоменклатуры(МассивСтруктурУпаковокНоменклатуры)
	
	Возврат УстановкаЦенСервер.ПолучитьСоответствиеКоэффициентовПоМассивуСтруктурУпаковокНоменклатуры(МассивСтруктурУпаковокНоменклатуры);
		
КонецФункции

#КонецОбласти

#КонецОбласти

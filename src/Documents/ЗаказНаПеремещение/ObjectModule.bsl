#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок") Тогда
			
			ОтменитьНепоставленныеСтроки(Статус <> Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ЗаполнитьДокументНаОснованииПоступленияТоваровУслуг(ДанныеЗаполнения);
		Иначе
			ВызватьИсключение НСтр("ru='Неверные параметры создания документа на основании';uk='Неправильні параметри створення документа на підставі'");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		ЗаполнитьПоЗаказуНаВнутреннееПотребление(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		ЗаполнитьДокументНаОснованииЗаказаНаСборку(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения, ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаказНаПеремещение.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НачалоОтгрузки");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ОкончаниеПоступления");

	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	// Склад получатель и склад отправитель должны различаться
	Если ЗначениеЗаполнено(СкладОтправитель) И СкладОтправитель = СкладПолучатель Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Один склад не может быть как отправителем, так и получателем. Измените один из складов.';uk='Один склад не може бути як відправником, так і одержувачем. Змініть один з складів.'"),
				ЭтотОбъект,
				"СкладОтправитель",
				,
				Отказ);

	КонецЕсли;

	// Желаемая дата поступления в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%';uk='Бажана дата надходження повинна бути не менше дати документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;

	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru='Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.';uk='Організація-одержувач повинна бути взаємопов''язана з організацією-відправником за організаційною структурою.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОрганизацияПолучатель",
			,
			Отказ);
		
	КонецЕсли;

	ВариантНеТребуется = Перечисления.ВариантыОбеспечения.НеТребуется;
	СкладОтправительОбязателен = Ложь;
	Для каждого СтрокаТЧ из Товары Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""';uk=' у рядку %НомерСтроки% списку ""Товари""'");
		АдресОшибки = СтрЗаменить(АдресОшибки,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
		
		Если СтрокаТЧ.ВариантОбеспечения <> ВариантНеТребуется
			И Не СтрокаТЧ.Отменено Тогда
			
			СкладОтправительОбязателен = Истина;
			Если Не ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Начало отгрузки""';uk='Не заповнена колонка ""Початок відвантаження""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "НачалоОтгрузки"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.Отменено И НЕ ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Окончание поступления""';uk='Не заповнена колонка ""Закінчення надходження""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);
			
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки) И ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления) И СтрокаТЧ.НачалоОтгрузки > СтрокаТЧ.ОкончаниеПоступления Тогда

			ТекстОшибки = НСтр("ru='Дата окончания поступления меньше даты начала отгрузки';uk='Дата закінчення надходження менше дати початку відвантаження'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НачалоОтгрузки) И СтрокаТЧ.НачалоОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата начала отгрузки должна быть не меньше даты документа ""%Дата%""';uk='Дата початку відвантаження повинна бути не менше дати документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "НачалоОтгрузки"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ОкончаниеПоступления) И СтрокаТЧ.ОкончаниеПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания поступления должна быть не меньше даты документа ""%Дата%""';uk='Дата закінчення надходження повинна бути не менше дати документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "ОкончаниеПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов.Добавить("СкладОтправитель");
	Если СкладОтправительОбязателен И Не ЗначениеЗаполнено(СкладОтправитель) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Склад-отправитель"" не заполнено';uk='Поле ""Склад-відправник"" не заповнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "СкладОтправитель", , Отказ);
		
	КонецЕсли;
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		
		Возврат;

	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,
															НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект,
																									Документы.ЗаказНаПеремещение));
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаказНаПеремещение.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда

		Обособленно          = Перечисления.ВариантыОбеспечения.Обособленно;
		ОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
		ТребуетсяНазначение = Ложь;

		Для Каждого Строка Из Товары Цикл
			Если Строка.ВариантОбеспечения = Обособленно Или Строка.ВариантОбеспечения = ОтгрузитьОбособленно Тогда
				ТребуетсяНазначение = Истина;
			КонецЕсли;
		КонецЦикла;

		Если ТребуетсяНазначение Тогда 
			Назначение = Справочники.Назначения.ПолучитьСсылку();
		КонецЕсли;

	КонецЕсли;

	ЕстьНазначение = Ложь;
	Если Товары.Количество() > 0 Тогда
		Если Товары.Количество() <> Товары.НайтиСтроки(Новый Структура("Назначение", Справочники.Назначения.ПустаяСсылка())).Количество() Тогда
			ЕстьНазначение = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Добавление заказа для расчета состояний необходимо для тех случаев когда, например, для всех товаров указан способ обеспечения "Не обеспечивать".
	// При таком способе обеспечения документ не делает движений по тем регистрам, которые добавили бы заказ для расчета самостоятельно.
	ПроведениеСервер.ДобавитьЗаказДляРасчетаСостояний(ДополнительныеСвойства, Ссылка);
	Справочники.Назначения.СоздатьОбновитьНазначение(Ссылка, Назначение, СкладПолучатель, Номер, Дата, ПометкаУдаления);

	// При отмене проведения или установке пометки на удаление проведенного документа необходим вызов пересчета состояний, для удаления записи по текущему документу
	// из регистра сведений СостоянияВнутреннихЗаказов. Корректный пересчет состояния возможен в том случае, когда у документа уже установлен (записан) признак Проведен = Ложь
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПроведениеСервер.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование       = Неопределено;
	ЖелаемаяДатаПоступления = Дата(1, 1, 1);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение") Тогда
		Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	Иначе
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	МаксимальныйКодСтроки   = 0;
	Назначение              = Справочники.Назначения.ПустаяСсылка();
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	Для каждого СтрокаТовары из Товары Цикл
	
		СтрокаТовары.НачалоОтгрузки = Дата(1, 1, 1);
		СтрокаТовары.ОкончаниеПоступления = Дата(1, 1, 1);
		СтрокаТовары.Отменено             = Ложь;
		СтрокаТовары.КодСтроки            = 0;
		СтрокаТовары.Назначение = Справочники.Назначения.ПустаяСсылка();
		
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ЗаказНаПеремещение.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьЗаказыНаПеремещение(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено, ЗаполнятьВариантОбеспечения = Истина)

	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение") Тогда
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;

	Если ЗаполнятьВариантОбеспечения Тогда
		ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Товары);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);

	Если ДанныеЗаполнения.Свойство("Товары") Тогда
		ЭтотОбъект.Товары.Загрузить(ДанныеЗаполнения.Товары);
	КонецЕсли;

	ПроверитьЗаполнитьПоступлениеОднойДатой();

КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(ЗаявкаНаВозврат)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус          КАК СтатусДокумента,
	|	ЗаказКлиента.Проведен        КАК Проведен,
	|	ЗаказКлиента.Организация     КАК Организация,
	|	ЗаказКлиента.Сделка          КАК Сделка,
	|	ЗаказКлиента.Склад           КАК СкладДокумента,
	|	ЗаказКлиента.Склад.ЭтоГруппа КАК ЭтоГруппа,
	|	ЗаказКлиента.Подразделение   КАК Подразделение,
	|	ЗаказКлиента.СпособКомпенсации   КАК СпособКомпенсации
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаявкаНаВозврат
	|");
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ЗаявкаНаВозврат);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.СпособКомпенсации <> Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ТекстОшибки = НСтр("ru='Ввод на основании возможен для заявок на возврат со способом компенсации ""Заменить товары"".';uk='Введення на підставі можливе для заявок на повернення зі способом компенсації ""Замінити товари"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаявкаНаВозврат,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	//Заполнение шапки
	Организация       = Реквизиты.Организация;
	Сделка            = Реквизиты.Сделка;
	ДокументОснование = ЗаявкаНаВозврат;
	Подразделение     = Реквизиты.Подразделение;
	
	//Заполнение табличной части.
	ПолучатьУслуги = Ложь;
	ПолучатьРаботы = Ложь;
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаявкаНаВозврат, , ПолучатьУслуги, ПолучатьРаботы);
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		Товары.Загрузить(ТаблицаТовары);
		СкладПолучатель = ТаблицаТовары[0].Склад;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения)

	ЗаказКлиента = ДанныеЗаполнения.Основание;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус          КАК СтатусДокумента,
	|	ЗаказКлиента.Проведен        КАК Проведен,
	|	ЗаказКлиента.Организация     КАК Организация,
	|	ЗаказКлиента.Сделка          КАК Сделка,
	|	ЗаказКлиента.Подразделение   КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	//Заполнение шапки
	Организация       = Реквизиты.Организация;
	Сделка            = Реквизиты.Сделка;
	ДокументОснование = ЗаказКлиента;
	Подразделение     = Реквизиты.Подразделение;
	СкладПолучатель   = ДанныеЗаполнения.Склад;
	
	//Заполнение табличной части.
	ПолучатьУслуги = Ложь;
	ПолучатьРаботы = Ложь;
	
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента, , ПолучатьУслуги, ПолучатьРаботы, СкладПолучатель);
	Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПоступленияТоваровУслуг(ДанныеЗаполнения)
	
	ПоступлениеТоваровУслуг = ДанныеЗаполнения.Основание;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ПоступлениеТоваровУслуг);
	Запрос.УстановитьПараметр("Склад", ДанныеЗаполнения.Склад);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Сделка КАК Сделка,
	|	ПоступлениеТоваровУслуг.Склад КАК СкладОтправитель,
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.Ссылка.Склад.ЭтоГруппа, ЛОЖЬ) КАК СкладГруппа,
	|
	|	НЕ ПоступлениеТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Назначение          КАК Назначение,
	|	Товары.Склад               КАК Склад,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Количество          КАК Количество,
	|	Товары.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	Товары.Упаковка            КАК Упаковка,
	|	
	|	ВЫБОР КОГДА Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|		КОНЕЦ                  КАК ВариантОбеспечения
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И Товары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И Товары.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура        КАК Номенклатура,
	|	Серии.Характеристика      КАК Характеристика,
	|	Серии.Назначение          КАК Назначение,
	|	Серии.Склад               КАК Склад,
	|	Серии.Серия               КАК Серия,
	|	Серии.Количество          КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &ДокументОснование
	|	И Серии.Склад = &Склад";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Шапка = ПакетРезультатов[0].Выбрать();
	
	Если Не Шапка.Следующий() Тогда

		ТекстОшибки = НСтр("ru='Документ %Документ% не содержит товаров. Ввод на основании документа запрещен.';uk='Документ %Документ% не містить товарів. Введення на підставі документа заборонено.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ПоступлениеТоваровУслуг);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Шапка.Ссылка,
		,
		Шапка.ЕстьОшибкиПроведен,);
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	ДокументОснование = ПоступлениеТоваровУслуг;
	СкладОтправитель  = ДанныеЗаполнения.Склад;
	
	// Разбиение строк, заполнение серий со статусом 10.
	ТоварыОснования = ПакетРезультатов[1].Выгрузить();
	ИндексыСтрок = Новый Массив();
	Для Каждого СтрокаТовары Из ТоварыОснования Цикл
		
		Если СтрокаТовары.СтатусУказанияСерий = 10 Тогда
			ИндексыСтрок.Вставить(0, ТоварыОснования.Индекс(СтрокаТовары));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексыСтрок.Количество() > 0 Тогда
		
		СерииОснования = ПакетРезультатов[2].Выгрузить();
		КлючСерии = "Номенклатура, Характеристика, Склад, Назначение";
		ОбеспечениеСервер.ПеренестиСерииИзТаблицыВСтроки(ТоварыОснования, ИндексыСтрок, СерииОснования, КлючСерии);
		
	КонецЕсли;
	
	Товары.Загрузить(ТоварыОснования);
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаВнутреннееПотребление(ЗаказНаПотребление)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус          КАК СтатусДокумента,
	|	ЗаказКлиента.Проведен        КАК Проведен,
	|	ЗаказКлиента.Организация     КАК Организация,
	|	ЗаказКлиента.Сделка          КАК Сделка,
	|	ЗаказКлиента.Склад           КАК СкладДокумента,
	|	ЗаказКлиента.Подразделение   КАК Подразделение,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказНаПотребление");
	
	Запрос.УстановитьПараметр("ЗаказНаПотребление", ЗаказНаПотребление);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаПотребление,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация       = Реквизиты.Организация;
	Сделка            = Реквизиты.Сделка;
	ДокументОснование = ЗаказНаПотребление;
	Подразделение     = Реквизиты.Подразделение;
	СкладПолучатель   = Реквизиты.СкладДокумента;
	
	//Заполнение табличной части.
	ПолучатьУслуги = Ложь;
	ПолучатьРаботы = Ложь;
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказНаПотребление, , ПолучатьУслуги, ПолучатьРаботы);
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		Товары.Загрузить(ТаблицаТовары);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЗаказаНаСборку(ЗаказНаСборку)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заказ.Проведен        КАК Проведен,
	|	Заказ.Организация     КАК Организация,
	|	Заказ.Сделка          КАК Сделка,
	|	Заказ.Склад           КАК СкладДокумента,
	|	Заказ.Подразделение   КАК Подразделение,
	|	Заказ.ТипОперации     КАК ТипОперации
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказНаСборку");
	
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.ТипОперации <> Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		ТекстОшибки = НСтр("ru='Ввод на основании возможен для заказов на сборку с операцией ""Сборка из комплектующих"".';uk='Введення на підставі можливе для замовлень на збирання з операцією ""Збирання з комплектуючих"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не Реквизиты.Проведен Тогда
		ТекстОшибки = НСтр("ru='Документ не проведен. Ввод на основании непроведенного документа запрещен.';uk='Документ не проведено. Введення на підставі непроведенного документа заборонене.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	//Заполнение шапки
	Организация       = Реквизиты.Организация;
	Сделка            = Реквизиты.Сделка;
	ДокументОснование = ЗаказНаСборку;
	Подразделение     = Реквизиты.Подразделение;
	СкладПолучатель   = Реквизиты.СкладДокумента;
	
	//Заполнение табличной части.
	ПолучатьУслуги = Ложь;
	ПолучатьРаботы = Ложь;
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказНаСборку, , ПолучатьУслуги, ПолучатьРаботы);
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		Товары.Загрузить(ТаблицаТовары);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ВидыЗапасов

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	// Контроль выполняется при перепроведении и отмене проведения.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ЗаказыНаПеремещение);
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаПеремещение).ИспользоватьСерииНоменклатуры Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	// Контроль выполняется только при проведении.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ОтменитьНепоставленныеСтроки(Знач ПроверятьОстатки = Ложь)
	
	КоличествоОтмененныхСтрок = 0;
	СвойстваОтмененнойСтроки = Новый Структура("Отменено, СтатусУказанияСерий", Истина, 0);
	
	Если Не ПроверятьОстатки Тогда
		
		Для каждого СтрокаТовары из Товары Цикл
			
			Если Не СтрокаТовары.Отменено Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат КоличествоОтмененныхСтрок;
		
	КонецЕсли;
	
	СтруктураТаблицКОбработке = Документы.ЗаказНаПеремещение.ПолучитьТаблицыДляОтменыНеотработанныхСтрок(Ссылка, Товары);
	
	Отбор = СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки.Скопировать(, "Ссылка, КодСтроки");
	
	// Фактически отработанное количество товара по накладным.
	ОформитьПоНакладным = РегистрыНакопления.ЗаказыНаПеремещение.ТаблицаОформлено(Отбор);
	
	Корректировка = ОбеспечениеСервер.СтруктураКорректировкиОбеспечения(); // получить описание регистра накопления "ТоварыКОтгрузке"
	
	// Фактически отработанное количество товара по ордерам.
	ОформитьПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки, Корректировка.ТоварыКОтгрузке);
	
	// Поступление по накладной учитывается в ОформитьПоНакладным вместе с отгрузкой по накладной.
	// Поступление по ордерам необходимо расчитать отдельно.
	
	ТаблицаВыделенныеСтрокиПоступление = СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки.Скопировать();
	ТаблицаВыделенныеСтрокиПоступление.ЗаполнитьЗначения(СкладПолучатель, "Склад"); // в поступлении указан другой склад
	ПоступилоПоОрдерам = РегистрыНакопления.ТоварыКПоступлению.ТаблицаОформлено(ТаблицаВыделенныеСтрокиПоступление, Корректировка.ТоварыКПоступлению);
	
	// Для последующего соединения возвращаем склад отправитель.
	ПоступилоПоОрдерам.ЗаполнитьЗначения(СкладОтправитель, "Склад");
	
	// Соединение таблиц по ордерам. За оформленное принимается максимальное значение.
	ОформитьПоОрдерам = ВыполнитьСлияниеТаблиц(ОформитьПоОрдерам, ПоступилоПоОрдерам, "Номенклатура, Характеристика, Склад, Назначение");
	
	РезультатОтмены = ОбеспечениеСервер.ОтменитьНеотработанныеСтроки(ЭтотОбъект, СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки,
		СтруктураТаблицКОбработке.ТаблицаПредварительноОтмененныеСтроки, ОформитьПоНакладным, ОформитьПоОрдерам);
	
	Возврат РезультатОтмены;
	
КонецФункции

Процедура ПроверитьЗаполнитьПоступлениеОднойДатой()

	Если Товары.Количество() > 0 Тогда

		ДатаПоступления = Товары[0].ОкончаниеПоступления;
		ПоступлениеОднойДатой = Истина;
		Для Каждого Строка Из Товары Цикл

			Если ПоступлениеОднойДатой И Строка.ОкончаниеПоступления <> ДатаПоступления Тогда

				ПоступлениеОднойДатой = Ложь;

			КонецЕсли;

			Если ЗначениеЗаполнено(Строка.ОкончаниеПоступления) И ЗначениеЗаполнено(Строка.НачалоОтгрузки) Тогда

				ДлительностьПеремещения = Макс(ДлительностьПеремещения, (Строка.ОкончаниеПоступления - Строка.НачалоОтгрузки) / 86400);

			КонецЕсли;

		КонецЦикла;

		Если ПоступлениеОднойДатой Тогда

			ЖелаемаяДатаПоступления = ДатаПоступления;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Соединяет две таблицы значений по ПоляСоединения. Количество суммируется по правилу "Максимум".
//
// Параметры:
//  Таблица1		 - ТаблицаЗначений	 - Таблица для соединения
//  Таблица2		 - ТаблицаЗначений	 - Таблица для соединения
//  ПоляСоединения	 - Строка			 - Список полей для соединения таблиц, через запятую
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ВыполнитьСлияниеТаблиц(Таблица1, Таблица2, ПоляСоединения)

	Результат = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеСервер.ПутиКДаннымПоУмолчанию());
	Результат.Колонки.Добавить("СтрокаНеВыделена", Новый ОписаниеТипов("Булево"));
	
	Отбор = Новый Структура(ПоляСоединения);

	Упорядочение = Новый ТаблицаЗначений();
	Упорядочение.Колонки.Добавить("ДатаДоступности");
	Упорядочение.Колонки.Добавить("Ссылка");

	ВГраница = Таблица1.Количество() - 1;
	
	// Если Таблица1 пустая, берем данные только из Таблица2
	Если ВГраница < 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, Результат);
	КонецЕсли;

	МассивОбработанныхСтрок = Новый Массив();
	
	Для ИндексСтроки = 0 По ВГраница Цикл

		СтрокаТаб1 = Таблица1[ВГраница - ИндексСтроки];
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаб1);
		НайденныеВариантыОбеспечения = Таблица2.НайтиСтроки(Отбор);

		//Упорядочивание найденных вариантов обеспечения.

		Упорядочение.Очистить();
		Для Каждого Строка Из НайденныеВариантыОбеспечения Цикл

			МассивОбработанныхСтрок.Добавить(Строка);
			
			Если Строка.Количество > 0 Тогда
				НоваяСтрока = Упорядочение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Ссылка = Строка;
			КонецЕсли;

		КонецЦикла;

		Упорядочение.Сортировать("ДатаДоступности");
		НайденныеВариантыОбеспечения = Упорядочение;
		
		Если НайденныеВариантыОбеспечения.Количество() = 0 Тогда
			СтрокаСписано = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСписано, СтрокаТаб1);
		Иначе
			//Обход вариантов обеспечения, списание потребностей.
			Для Каждого НайденныйВариант Из НайденныеВариантыОбеспечения Цикл
				
				СтрокаСписано = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСписано, СтрокаТаб1);
				ЗаполнитьЗначенияСвойств(СтрокаСписано, НайденныйВариант.Ссылка);
				СтрокаСписано.ДатаОтгрузки = НайденныйВариант.ДатаДоступности;
				
				// Соединение строки с сериями и строки без серий недопустимо
				Если СтрокаТаб1.Серия.Пустая() Тогда
					// Количество суммируется по правилу "Максимум"
					СтрокаСписано.Количество = Макс(НайденныйВариант.Ссылка.Количество, СтрокаТаб1.Количество);
				Иначе
					СтрокаСписано.Количество = СтрокаТаб1.Количество;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
	
	// Найти строки из Таблица2, которые не были ранее обработаны (их нет в Таблица1) и добавить в результат
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОбработанныхСтрок);
	
	Для Каждого Строка Из Таблица2 Цикл
		Если МассивОбработанныхСтрок.Найти(Строка) = Неопределено Тогда
			СтрокаСписано = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСписано, Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Проверяет возможность проведения документа в статусе "Закрыт".
//
// Параметры:
//  Отказ	 - Булево - параметр "Отказ" обработки проведения
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)

	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки");
	
	Если Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт
		И КонтролироватьОтгрузку Тогда
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		ДополнительныеПараметры = Новый Структура("КонтрольВыполненияЗаказа", Истина);
		
		Запрос = Документы.ЗаказНаПеремещение.СформироватьЗапросПроверкиПриСменеСтатуса(Массив, "Закрыт", ДополнительныеПараметры);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаОтгрузка = Результат.Выбрать();
		
		Пока ВыборкаОтгрузка.Следующий() Цикл
			
			ПроверкаПройдена = Документы.ЗаказНаПеремещение.ПроверкаПередСменойСтатуса(ВыборкаОтгрузка, Статус, ДополнительныеПараметры); 
			Если Не ПроверкаПройдена Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

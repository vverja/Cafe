#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура рассчитывает и записывает итог запланированного поступления по распоряжению а регистр 
// ГрафикПоступленияТоваров (в регистр записи пишутся только из этого модуля).
// Все плановые поступления\отгрузки записываются в регистр движения товаров. Дата поступления\отгрузки
// указывается в "Периоде". При фактическом поступлении\отгрузке по заказу происходит закрытие графика
// поступления\отгрузки по ФИФО. Рассчитанные записи записываются под распоряжение. Если поступило\отгрузили
// больше, чем в заказе - отрицательные остатки в регистр не пишутся.
//
Процедура РассчитатьИтогиРегистраОстаткиТоваровПоГрафику(МассивРаспоряжений) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Движения.Распоряжение                  КАК Распоряжение,
		|	Движения.Номенклатура                  КАК Номенклатура,
		|	Движения.Характеристика                КАК Характеристика,
		|	Движения.Назначение                    КАК Назначение,
		|	Движения.Склад                         КАК Склад,
		|
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				-Движения.ПланируемоеПоступление
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступление
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеОстаток,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				- Движения.ПланируемоеПоступлениеПодЗаказ
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступлениеПодЗаказ
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеПодЗаказОстаток
		|
		|ПОМЕСТИТЬ ОстаткиПоРаспоряжению
		|
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Движения
		|ГДЕ
		|	Движения.Распоряжение В(&МассивРаспоряжений)
		|	И Движения.Активность
		|СГРУППИРОВАТЬ ПО
		|	Движения.Распоряжение,
		|	Движения.Номенклатура, Движения.Характеристика, Движения.Склад, Движения.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ)   КАК Период,
		|	Таблица.Номенклатура                  КАК Номенклатура,
		|	Таблица.Характеристика                КАК Характеристика,
		|	Таблица.Назначение                    КАК Назначение,
		|	Таблица.Склад                         КАК Склад,
		|	Таблица.Распоряжение                  КАК Распоряжение,
		|
		|	СУММА(Таблица.ПланируемоеПоступление)            КАК ПланируемоеПоступление,
		|	СУММА(Таблица.ПланируемоеПоступлениеПодЗаказ)    КАК ПланируемоеПоступлениеПодЗаказ
		|
		|ПОМЕСТИТЬ ПланДвижения
		|
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение В(&МассивРаспоряжений)
		|	И (Таблица.ПланируемоеПоступление > 0
		|		ИЛИ Таблица.ПланируемоеПоступлениеПодЗаказ > 0)
		|	И Таблица.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ),
		|	Таблица.Распоряжение,
		|	Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Назначение
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	План.Период                                     КАК Период,
		|	План.Номенклатура                               КАК Номенклатура,
		|	План.Характеристика                             КАК Характеристика,
		|	План.Склад                                      КАК Склад,
		|	План.Назначение                                 КАК Назначение,
		|	План.Распоряжение                               КАК Распоряжение,
		|	МАКСИМУМ(План.ПланируемоеПоступление)                     КАК ПланируемоеПоступление,
		|	МАКСИМУМ(План.ПланируемоеПоступлениеПодЗаказ)             КАК ПланируемоеПоступлениеПодЗаказ,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеОстаток, 0))            КАК ПланируемоеПоступлениеОстаток,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеПодЗаказОстаток, 0))    КАК ПланируемоеПоступлениеПодЗаказОстаток
		|
		|ИЗ
		|	ПланДвижения КАК План
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоРаспоряжению КАК Остатки
		|		ПО План.Номенклатура      = Остатки.Номенклатура
		|			И План.Характеристика = Остатки.Характеристика
		|			И План.Склад          = Остатки.Склад
		|			И План.Распоряжение   = Остатки.Распоряжение
		|			И План.Назначение     = Остатки.Назначение
		|
		|СГРУППИРОВАТЬ ПО
		|	План.Период,
		|	План.Номенклатура, План.Характеристика, План.Склад, План.Назначение,
		|	План.Распоряжение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распоряжение,
		|	Номенклатура, Характеристика, Склад, Назначение,
		|	Период УБЫВ";

	НаборЗаписей = РегистрыНакопления.ГрафикПоступленияТоваров.СоздатьНаборЗаписей();
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	Пока ЕстьЗаписиВВыборке Цикл

		ТекСклад          = Неопределено;
		ТекНоменклатура   = Неопределено;
		ТекХарактеристика = Неопределено;
		ТекНазначение     = Неопределено;
		ТекРаспоряжение   = Выборка.Распоряжение;

		НаборЗаписей.Отбор.Регистратор.Установить(ТекРаспоряжение);
		// Из таблицы удаляем отработанное распоряжение
		МассивРаспоряжений.Удалить(МассивРаспоряжений.Найти(ТекРаспоряжение));

		// Цикл по строкам одного распоряжения на поступление\отгрузку.
		Пока ЕстьЗаписиВВыборке И Выборка.Распоряжение = ТекРаспоряжение Цикл

			Если ТекНоменклатура <> Выборка.Номенклатура Или ТекХарактеристика <> Выборка.Характеристика
				Или ТекСклад <> Выборка.Склад Или ТекНазначение <> Выборка.Назначение Тогда

				ТекНоменклатура   = Выборка.Номенклатура;
				ТекХарактеристика = Выборка.Характеристика;
				ТекСклад          = Выборка.Склад;
				ТекНазначение     = Выборка.Назначение;

				ПоступлениеКоличествоОстаток = 0;
				Если Выборка.ПланируемоеПоступлениеОстаток > 0 Тогда
					ПоступлениеКоличествоОстаток = Выборка.ПланируемоеПоступлениеОстаток;
				КонецЕсли;

				ПоступлениеПодЗаказКоличествоОстаток = 0;
				Если Выборка.ПланируемоеПоступлениеПодЗаказОстаток > 0 Тогда
					ПоступлениеПодЗаказКоличествоОстаток = Выборка.ПланируемоеПоступлениеПодЗаказОстаток;
				КонецЕсли;

			КонецЕсли;

			КоличествоПоступление = 0;
			КоличествоПоступлениеПодЗаказ = 0;

			Если Выборка.ПланируемоеПоступление > 0 Или Выборка.ПланируемоеПоступлениеПодЗаказ > 0 Тогда

				КоличествоПоступление         = Мин(Выборка.ПланируемоеПоступление,         ПоступлениеКоличествоОстаток);
				КоличествоПоступлениеПодЗаказ = Мин(Выборка.ПланируемоеПоступлениеПодЗаказ, ПоступлениеПодЗаказКоличествоОстаток);
				
				Если КоличествоПоступление > 0 Или КоличествоПоступлениеПодЗаказ > 0 Тогда
					ДобавитьПриходВГрафик(НаборЗаписей, Выборка, КоличествоПоступление, КоличествоПоступлениеПодЗаказ);
				КонецЕсли;
				
				ПоступлениеКоличествоОстаток         = ПоступлениеКоличествоОстаток         - КоличествоПоступление;
				ПоступлениеПодЗаказКоличествоОстаток = ПоступлениеПодЗаказКоличествоОстаток - КоличествоПоступлениеПодЗаказ;

			КонецЕсли;

			// Переход к следующей записи в выборке.
			ЕстьЗаписиВВыборке = Выборка.Следующий();

		КонецЦикла;

		НаборЗаписей.Записать(Истина);
		НаборЗаписей.Очистить();

	КонецЦикла;

	// По неотработанным распоряжениям нужно очистить движения.
	Если МассивРаспоряжений.Количество() > 0 Тогда
		Для Каждого Распоряжение Из МассивРаспоряжений Цикл

			НаборЗаписей.Отбор.Регистратор.Установить(Распоряжение);
			НаборЗаписей.Записать(Истина);
			НаборЗаписей.Очистить();

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


Процедура ИсправитьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	ИмяРегистра = "ДвижениеТоваров";
	ПолноеИмяРегистра = "РегистрНакопления.ДвижениеТоваров";
	
#Область УдалениеИнформацииОПланируемойОтгрузке
	Запрос = Новый Запрос();
	Запрос.Текст =
		"//Документы в которых есть отгрузка
		|ВЫБРАТЬ
		|	Таблица.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Таблица
		|ГДЕ
		|	(Таблица.Регистратор ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
		|		ИЛИ Таблица.Регистратор ССЫЛКА Документ.ЗаказНаПеремещение
		|		ИЛИ Таблица.Регистратор ССЫЛКА Документ.ЗаказНаСборку
		|		ИЛИ Таблица.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
		|		ИЛИ Таблица.Регистратор ССЫЛКА Документ.СборкаТоваров)
		|
		|	// Старые записи о планируемой отгрузке, не нужны, так как ресурсы были удалены.
		|	И Таблица.ПланируемоеПоступление = 0 И Таблица.ПланируемоеПоступлениеПодЗаказ = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|//Отклоненные заявки на возврат
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкаНаВозврат.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеТоваров КАК РегистрДвижениеТоваров
		|		ПО ЗаявкаНаВозврат.Ссылка = РегистрДвижениеТоваров.Регистратор
		|ГДЕ
		|	ЗаявкаНаВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
		|	И НЕ РегистрДвижениеТоваров.Регистратор ЕСТЬ NULL";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти


#Область СборкаТоваров
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноПривязатьКНовымЗаказамПослеРазбиенияЗаказов();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область ЗаказНаСборку
	Регистраторы = Документы.ЗаказНаСборку.ЗаказыНаРазборкуКоторыеНужноРазбитьПередЗаполнениемСерий();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	Регистраторы = Документы.ЗаказНаСборку.РазборкиКоторыеНужноРазбитьПоВариантуОбеспечения();
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

#Область АктОРасхожденияхПослеПеремещения
	ТекстЗапросаМеханизмаПроведения = Документы.АктОРасхожденияхПослеПеремещения.АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра);
	Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
		ТекстЗапросаМеханизмаПроведения,
		ПолноеИмяРегистра,
		"Документ.АктОРасхожденияхПослеПеремещения");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
#КонецОбласти

КонецПроцедуры

Процедура ИсправитьДвижения(Параметры) Экспорт
	
	Регистраторы = Новый Массив;
	
    Регистраторы.Добавить("Документ.АктОРасхожденияхПослеПеремещения");
	Регистраторы.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
	Регистраторы.Добавить("Документ.ЗаказНаПеремещение");
	Регистраторы.Добавить("Документ.ЗаказНаСборку");
	Регистраторы.Добавить("Документ.ПеремещениеТоваров");
	Регистраторы.Добавить("Документ.СборкаТоваров");
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        Регистраторы,
		"РегистрНакопления.ДвижениеТоваров",
		Параметры.Очередь
    );
	
КонецПроцедуры



Функция РассчитатьИтогиРегистраОстаткиТоваровПоГрафикуДляОбновленияИБ(Распоряжение) Экспорт

	НаборЗаписей = РегистрыНакопления.ГрафикПоступленияТоваров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Распоряжение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Движения.Распоряжение                  КАК Распоряжение,
		|	Движения.Номенклатура                  КАК Номенклатура,
		|	Движения.Характеристика                КАК Характеристика,
		|	Движения.Назначение                    КАК Назначение,
		|	Движения.Склад                         КАК Склад,
		|
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				-Движения.ПланируемоеПоступление
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступление
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеОстаток,
		|
		|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
		|				- Движения.ПланируемоеПоступлениеПодЗаказ
		|			ИНАЧЕ
		|				Движения.ПланируемоеПоступлениеПодЗаказ
		|		КОНЕЦ)                             КАК ПланируемоеПоступлениеПодЗаказОстаток
		|
		|ПОМЕСТИТЬ ОстаткиПоРаспоряжению
		|
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Движения
		|ГДЕ
		|	Движения.Распоряжение = &Распоряжение
		|	И Движения.Активность
		|СГРУППИРОВАТЬ ПО
		|	Движения.Распоряжение,
		|	Движения.Номенклатура, Движения.Характеристика, Движения.Склад, Движения.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ)   КАК Период,
		|	Таблица.Номенклатура                  КАК Номенклатура,
		|	Таблица.Характеристика                КАК Характеристика,
		|	Таблица.Назначение                    КАК Назначение,
		|	Таблица.Склад                         КАК Склад,
		|	Таблица.Распоряжение                  КАК Распоряжение,
		|
		|	СУММА(Таблица.ПланируемоеПоступление)            КАК ПланируемоеПоступление,
		|	СУММА(Таблица.ПланируемоеПоступлениеПодЗаказ)    КАК ПланируемоеПоступлениеПодЗаказ
		|
		|ПОМЕСТИТЬ ПланДвижения
		|
		|ИЗ
		|	РегистрНакопления.ДвижениеТоваров КАК Таблица
		|ГДЕ
		|	Таблица.Распоряжение = &Распоряжение
		|	И (Таблица.ПланируемоеПоступление > 0
		|		ИЛИ Таблица.ПланируемоеПоступлениеПодЗаказ > 0)
		|	И Таблица.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ),
		|	Таблица.Распоряжение,
		|	Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Назначение
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	План.Период                                     КАК Период,
		|	План.Номенклатура                               КАК Номенклатура,
		|	План.Характеристика                             КАК Характеристика,
		|	План.Склад                                      КАК Склад,
		|	План.Назначение                                 КАК Назначение,
		|	План.Распоряжение                               КАК Распоряжение,
		|	МАКСИМУМ(План.ПланируемоеПоступление)                     КАК ПланируемоеПоступление,
		|	МАКСИМУМ(План.ПланируемоеПоступлениеПодЗаказ)             КАК ПланируемоеПоступлениеПодЗаказ,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеОстаток, 0))            КАК ПланируемоеПоступлениеОстаток,
		|	СУММА(ЕСТЬNULL(Остатки.ПланируемоеПоступлениеПодЗаказОстаток, 0))    КАК ПланируемоеПоступлениеПодЗаказОстаток
		|
		|ИЗ
		|	ПланДвижения КАК План
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоРаспоряжению КАК Остатки
		|		ПО План.Номенклатура      = Остатки.Номенклатура
		|			И План.Характеристика = Остатки.Характеристика
		|			И План.Склад          = Остатки.Склад
		|			И План.Распоряжение   = Остатки.Распоряжение
		|			И План.Назначение     = Остатки.Назначение
		|
		|СГРУППИРОВАТЬ ПО
		|	План.Период,
		|	План.Номенклатура, План.Характеристика, План.Склад, План.Назначение,
		|	План.Распоряжение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распоряжение,
		|	Номенклатура, Характеристика, Склад, Назначение,
		|	Период УБЫВ";

	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЗаписиВВыборке = Выборка.Следующий();

	ТекСклад          = Неопределено;
	ТекНоменклатура   = Неопределено;
	ТекХарактеристика = Неопределено;
	ТекНазначение     = Неопределено;

	// Цикл по строкам одного распоряжения на поступление\отгрузку.
	Пока ЕстьЗаписиВВыборке Цикл
		
		Если ТекНоменклатура <> Выборка.Номенклатура Или ТекХарактеристика <> Выборка.Характеристика
			Или ТекСклад <> Выборка.Склад Или ТекНазначение <> Выборка.Назначение Тогда

			ТекНоменклатура   = Выборка.Номенклатура;
			ТекХарактеристика = Выборка.Характеристика;
			ТекСклад          = Выборка.Склад;
			ТекНазначение     = Выборка.Назначение;

			ПоступлениеКоличествоОстаток = 0;
			Если Выборка.ПланируемоеПоступлениеОстаток > 0 Тогда
				ПоступлениеКоличествоОстаток = Выборка.ПланируемоеПоступлениеОстаток;
			КонецЕсли;

			ПоступлениеПодЗаказКоличествоОстаток = 0;
			Если Выборка.ПланируемоеПоступлениеПодЗаказОстаток > 0 Тогда
				ПоступлениеПодЗаказКоличествоОстаток = Выборка.ПланируемоеПоступлениеПодЗаказОстаток;
			КонецЕсли;

		КонецЕсли;

		КоличествоПоступление = 0;
		КоличествоПоступлениеПодЗаказ = 0;

		Если Выборка.ПланируемоеПоступление > 0 Или Выборка.ПланируемоеПоступлениеПодЗаказ > 0 Тогда

			КоличествоПоступление         = Мин(Выборка.ПланируемоеПоступление,         ПоступлениеКоличествоОстаток);
			КоличествоПоступлениеПодЗаказ = Мин(Выборка.ПланируемоеПоступлениеПодЗаказ, ПоступлениеПодЗаказКоличествоОстаток);
			
			Если КоличествоПоступление > 0 Или КоличествоПоступлениеПодЗаказ > 0 Тогда
				ДобавитьПриходВГрафик(НаборЗаписей, Выборка, КоличествоПоступление, КоличествоПоступлениеПодЗаказ);
			КонецЕсли;
			
			ПоступлениеКоличествоОстаток         = ПоступлениеКоличествоОстаток         - КоличествоПоступление;
			ПоступлениеПодЗаказКоличествоОстаток = ПоступлениеПодЗаказКоличествоОстаток - КоличествоПоступлениеПодЗаказ;
			
		КонецЕсли;

		// Переход к следующей записи в выборке.
		ЕстьЗаписиВВыборке = Выборка.Следующий();

	КонецЦикла;

	Возврат НаборЗаписей;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ДобавитьПриходВГрафик(НаборЗаписей, Выборка, Количество, КоличествоПодЗаказ)

	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Выборка);
	Запись.ДатаСобытия = Запись.Период;
	Запись.ВидДвижения = ВидДвиженияНакопления.Приход;

	Запись.КоличествоИзЗаказов = Количество;
	Запись.КоличествоПодЗаказ  = КоличествоПодЗаказ;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
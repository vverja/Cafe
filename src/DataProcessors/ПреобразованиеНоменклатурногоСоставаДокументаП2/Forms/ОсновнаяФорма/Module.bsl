&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Открыта по кнопке заполнения из формы документа
	Если Параметры.Свойство("ОбъектыНазначения") Тогда
		Если Параметры.ОбъектыНазначения.Количество() = 0 Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не передан документ в котором необходимо выполнить преобразование номенклатурного состава';uk= 'Не переданий документ в якому необхідно виконати перетворення номенклатурного складу'"),,,,Отказ);
			Возврат;
		Иначе
			Объект.ДокументП2 = Параметры.ОбъектыНазначения[0];
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Обработка может быть открыта только из документа ""Приложение 2 к налоговой накладной""!';uk= 'Обробка може бути відкрита лише із документа ""Додаток 2 до податкової накладної""'");
	КонецЕсли;
	
	Если Объект.ДокументП2.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ВызватьИсключение НСтр("ru='Преобразование возможно только для документов в валюте регламентированного учета!';uk= 'Перетворення можливе тільки для документів у валюті регламентованого обліку!'");
	КонецЕсли;
	
	ТекстСообщенияПользователю = "";
	ЗаполнитьНоменклатурнымСоставомНаСервере(ТекстСообщенияПользователю);
	Если Не ПустаяСтрока(ТекстСообщенияПользователю) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю);	
	КонецЕсли;
	
	Элементы.ОткрытьДокумент.Заголовок = Строка(Объект.ДокументП2);
	
	ВыполнялосьПриведениеКНовымПравилам = Объект.ПреобразованиеВыполнялось > 0;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	РассчитатьКоличествоПозицийНомСостава();
	ОбновитьИтоги(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗакрытьФормуПринудительно И ЕстьИзмененияВНоменклатурномСоставе Тогда
		
		ТекстВопроса = НСтр("ru='Данные могут быть утеряны и результат не будет перенесен в документ.';uk= 'Дані можуть бути втрачені і результат не буде перенесений в документ.'");
							 
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,  	НСтр("ru='Закрыть и перенести данные';uk= 'Закрити і перенести дані'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, 	НСтр("ru='Закрыть и не переносить данные';uk= 'Закрити і не переносити дані'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, 	НСтр("ru='Отмена';uk= 'Скасування'"));					 
							 
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыПослеВопроса", ЭтотОбъект, Новый Структура("Отказ", Отказ));
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		
		Отказ = Истина;
		
	Иначе
		Если ДанныеПеренесеныВДокумент Тогда
			Оповестить("СтрокиНоменклатурногоСоставаПреобразованы", Объект.ДокументП2);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПослеВопроса(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуПринудительно = Истина;
		ПеренестиНоменклатурныйСоставВДокумент();
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ЗакрытьФормуПринудительно = Истина;
		Закрыть();
	Иначе
		ДопПараметры.Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиТабличныхЧастейОбщие

&НаКлиенте
Процедура НоменклатурныйСоставПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы[Элемент.Имя].ТекущиеДанные;
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НоваяСтрока Тогда
		РассчитатьКоличествоПозицийНомСостава();
	КонецЕсли;
	
	ЕстьИзмененияВНоменклатурномСоставе = Истина;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныйСоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы[Элемент.Имя].ТекущиеДанные;
	
	ЭлементКодПричины = Элементы[Элемент.Имя + "КодПричины"];
	
	СписокВыбораЭлементаКодПричиныТекущейСтроки = ЭлементКодПричины.СписокВыбора;
	СписокВыбораЭлементаКодПричиныТекущейСтроки.Очистить();
	
	Если ПустаяСтрока(ТекущаяСтрока.ПричинаКорректировкиНовая) Тогда
		Возврат;
	КонецЕсли; 
	
	КлючСтруктуры = СтрЗаменить(ТекущаяСтрока.ПричинаКорректировкиНовая, " ", "_");
	СписокВыбораКодов = Неопределено;
	Объект.СоответствиеПричинКорректировкиКодамПричин.Свойство(КлючСтруктуры, СписокВыбораКодов);
	
	Если СписокВыбораКодов <> Неопределено Тогда
		Если СписокВыбораКодов.Количество() = 1 Тогда
			ЭлементКодПричины.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли СписокВыбораКодов.Количество() > 1 Тогда
			ЭлементКодПричины.КнопкаВыпадающегоСписка = Истина;
			Для каждого ЭлементСписка Из СписокВыбораКодов Цикл
				СписокВыбораЭлементаКодПричиныТекущейСтроки.Добавить(ЭлементСписка.Значение);	
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.ЭтоКорректировкаКоличества = Не Объект.Переоценка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныйСоставПослеУдаления(Элемент)
	
	РассчитатьКоличествоПозицийНомСостава();
	ОбновитьИтоги(ЭтотОбъект);
	
	ЕстьИзмененияВНоменклатурномСоставе = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПричинаКорректировкиНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСписокВыбораИКодПричиныПоУмолчанию(ТекущаяСтрока, "Товары");
	ИзменитьСпособВСвязанныхПоНомеруГруппыСтроках(ТекущаяСтрока, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	
	ТоварыНоменклатураПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	ОчиститьРеквизитыРеглВСтрокеТЧ(ТекущаяСтрока);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	ОчиститьРеквизитыРеглВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	ОчиститьРеквизитыРеглВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	ОчиститьРеквизитыРеглВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	Если ПроцентНДС = 0 Тогда
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.СуммаСНДС;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаНДС = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаБезНДС;

	ОчиститьРеквизитыРеглВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства);
	
	ОчиститьРеквизитыРеглВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	Если ПроцентНДС = 0 Тогда
		ТекущаяСтрока.СуммаНДС 	= 0;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;

	ОчиститьРеквизитыРеглВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.СуммаСНДС, ПроцентНДС, Истина);
 	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;
	
	ТекущаяСтрока.Цена = (ТекущаяСтрока.СуммаСНДС - Окр(ТекущаяСтрока.СуммаНДС,2)) / ?(ТекущаяСтрока.КоличествоУпаковок = 0, 1, ТекущаяСтрока.КоличествоУпаковок);

	ОчиститьРеквизитыРеглВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличнойЧастиТоварыПоДаннымПользователя

&НаКлиенте
Процедура ТоварыПоДаннымПользователяПричинаКорректировкиНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьСписокВыбораИКодПричиныПоУмолчанию(ТекущаяСтрока, "ТоварыПоДаннымПользователя");
	ИзменитьСпособВСвязанныхПоНомеруГруппыСтроках(ТекущаяСтрока, "ТоварыПоДаннымПользователя");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	
	ТоварыПоДаннымПользователяНоменклатураПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяКодУКТВЭДПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	ТоварыПоДаннымПользователяКодУКТВЭДПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.ЦенаРегл = ПересчитатьВВалютуРегл(ТекущаяСтрока.Цена);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСуммаБезНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаБезНДСРегл = ПересчитатьВВалютуРегл(ТекущаяСтрока.СуммаБезНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.СуммаБезНДС + ТекущаяСтрока.СуммаНДС;
	
	ТекущаяСтрока.СуммаНДСРегл = ПересчитатьВВалютуРегл(ТекущаяСтрока.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяЦенаРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСуммаБезНДСРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект, Ложь);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	НДСИсходящийКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПользователяСуммаНДСРеглПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПользователя.ТекущиеДанные;
	
	ПроцентНДС = НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
	Если ПроцентНДС = 0 Тогда
		ТекущаяСтрока.СуммаНДСРегл 	= 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	ПоказатьЗначение(,Объект.ДокументП2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКСоответствиюПравиламШлюза(Команда)
	
	Если ВыполнялосьПриведениеКНовымПравилам Тогда
		
		Если Объект.ПреобразованиеВыполнялось = 1 Тогда
			ТекстВопроса = НСтр("ru='Возможно строки уже преобразовывались.';uk= 'Ймовірно рядки вже перетворювалися.'"); 
		Иначе	
			ТекстВопроса = НСтр("ru='Строки уже преобразовывались.';uk= 'Рядки вже перетворювалися.'");
		КонецЕсли; 
		
		ТекстВопроса = ТекстВопроса + Символы.ПС + 
			НСтр("ru='При повторном преобразовании результат может быть не корректным.
                  |Продолжить в любом случае?';uk= 'При повторному перетворені результат може бути не коректним. 
                  |Продовжити в будь-якому випадку?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПривестиКСоответствиюПравиламШлюзаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли; 
	
	ПривестиКСоответствиюПравиламШлюзаЗавершение(КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКСоответствиюПравиламШлюзаЗавершение(Ответ = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекстСообщенияПредупреждение = "";
	ПроверитьЗаполнениеСтрок(ТекстСообщенияПредупреждение);
	
	Если Не ПустаяСтрока(ТекстСообщенияПредупреждение) Тогда
		
		ТекстВопроса = ТекстСообщенияПредупреждение + Символы.ПС + НСтр("ru='Продолжить?';uk= 'Продовжити?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПривестиКСоответствиюПравиламШлюзаЗавершение2", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;	
	
	КонецЕсли; 
	
	ПривестиКСоответствиюПравиламШлюзаЗавершение2(КодВозвратаДиалога.Да); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКСоответствиюПравиламШлюзаЗавершение2(Ответ = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 
	
	ПривестиКСоответствиюПравиламШлюзаНаСервере();
	ВыполнялосьПриведениеКНовымПравилам = Истина;
	Объект.ПреобразованиеВыполнялось = 2;
	ЕстьИзмененияВНоменклатурномСоставе = Истина;
	
	РассчитатьКоличествоПозицийНомСостава();
	УправлениеФормой(ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанныеВДокумент(Команда)
	
	Если Не ВыполнялосьПриведениеКНовымПравилам Тогда
	
		ТекстВопроса = НСтр("ru='Преобразование строк не выполнено. 
                             |Вы уверенны, что хотите перенести не преобразованные данные в документ?
                             |Данные табличных частей документа будут полностью заменены на данные из обработки.';uk= 'Перетворенняя рядків не виконано.
                             |Ви впевнені, що хочете перенести не перетворені дані в документ? 
                             |Дані табличних частин документа будуть повністю замінені на дані із обробки.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перенести и закрыть';uk= 'Перенести і закрити'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиДанныеВДокументЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли; 
	
	ПеренестиДанныеВДокументЗавершение(КодВозвратаДиалога.Да);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанныеВДокументЗавершение(Ответ = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 
	
	ПеренестиНоменклатурныйСоставВДокумент();
	
	ЗакрытьФормуПринудительно = Истина;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНоменклатурнымСоставомНаСервере(СообщенияВПроцессеЗаполнения = Неопределено)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьНоменклатурнымСоставом(СообщенияВПроцессеЗаполнения);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатурныйСоставВДокумент()

	ДанныеФормыДокумента = ВладелецФормы.Объект;
	
	ЗаполнятьТоварыПоДПИзТоваров = Ложь;
	Если Не Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ") Тогда
		ЕстьСтрокиИзменениеЦены = Объект.Товары.НайтиСтроки(Новый Структура("ПричинаКорректировкиНовая", "Зміна ціни")).Количество() > 0;
		
		Если ЕстьСтрокиИзменениеЦены Тогда
			// Отображение изменение цены, по правилам (изменения цены) в конфигурации, на данный момент, возможно только в "ручной" ТЧ и статусом ИсправлятьТехническуюТЧ
			Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ");
			ЗаполнятьТоварыПоДПИзТоваров = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ") Тогда
		
		// Товары не трогаем - это автоматическая ТЧ, которая должна остаться для правильного закрытия НДСНоменклатурныйСоставДляНалоговыхНакладных
		
		ДанныеФормыДокумента.ТоварыПоДаннымПользователя.Очистить();	
		
		Если ЗаполнятьТоварыПоДПИзТоваров Тогда
			ИсточникНоменклатурыДляТЧТоварыПоДП = Объект.Товары;
		Иначе
			ИсточникНоменклатурыДляТЧТоварыПоДП = Объект.ТоварыПоДаннымПользователя;
		КонецЕсли;
		
		Для каждого Строка Из ИсточникНоменклатурыДляТЧТоварыПоДП Цикл
			ЗаполнитьЗначенияСвойств(ДанныеФормыДокумента.ТоварыПоДаннымПользователя.Добавить(), Строка);	
		КонецЦикла;
		
	Иначе
		// В противном случае работаем с ТЧ Товары в обработке и документе
		ДанныеФормыДокумента.Товары.Очистить();
		Для каждого Строка Из Объект.Товары Цикл
			ЗаполнитьЗначенияСвойств(ДанныеФормыДокумента.Товары.Добавить(), Строка);	
		КонецЦикла;
		
		// привентивно, хотя эта ТЧ должна быть пустой в этом случае
		ДанныеФормыДокумента.ТоварыПоДаннымПользователя.Очистить();
		
		Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ФормироватьПриложение2");
	КонецЕсли; 
	
	ДанныеФормыДокумента.СтатусАвтокорректировки = Объект.СтатусАвтокорректировки;
	ВладелецФормы.Модифицированность = Истина;
	
	ДанныеПеренесеныВДокумент = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	ИзменениеВсего = 0;
	ИзменениеВсегоНДС = 0;
	
	Если Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ") Тогда
		ТабличнаяЧасть = Объект.ТоварыПоДаннымПользователя;
	Иначе	
		ТабличнаяЧасть = Объект.Товары;
	КонецЕсли;
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		ИзменениеВсего 		= ИзменениеВсего 	+ Строка.СуммаБезНДСРегл;
		ИзменениеВсегоНДС 	= ИзменениеВсегоНДС + Строка.СуммаНДСРегл;
	КонецЦикла;
	
	Форма.ИтогСуммаБезНДСРегл 	= ИзменениеВсего;
	Форма.ИтогСуммаНДСРегл 		= ИзменениеВсегоНДС;
	
КонецПроцедуры

&НаСервере
Процедура ПривестиКСоответствиюПравиламШлюзаНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПривестиКСоответствиюПравиламШлюза();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтавкуНДС(Номенклатура)

	// СтавкаНДС прироритетно определеятся видом операции документа
	СписокДопустимыхСтавокНДС = ОпределитьДопустимыеСтавкиНДС();	
	
	Если СписокДопустимыхСтавокНДС.Количество() > 1 Тогда
		Если СписокДопустимыхСтавокНДС.НайтиПоЗначению(Номенклатура.СтавкаНДС) = Неопределено Тогда 
			// в карточке товара указана недопустимая в данном контексте ставка НДС
			СтавкаНДСНовая = Перечисления.СтавкиНДС.ПустаяСсылка();
		Иначе
			СтавкаНДСНовая = Номенклатура.СтавкаНДС;
		КонецЕсли;
	Иначе
		СтавкаНДСНовая = СписокДопустимыхСтавокНДС[0].Значение;
	КонецЕсли;
	
	Возврат СтавкаНДСНовая;

КонецФункции

&НаСервере
Функция ОпределитьДопустимыеСтавкиНДС() Экспорт
	
	СписокСтавокНДС = Новый СписокЗначений();
	
	Если    Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации Тогда
				
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
        СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС14);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
        СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС14);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.НеНДСОперации Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НеНДС);
		
	ИначеЕсли  Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОсвобожденныеОперации Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
		
	ИначеЕсли  Объект.ВидОперации = Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента Тогда
		
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС20);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС14);
		СписокСтавокНДС.Добавить(Перечисления.СтавкиНДС.НДС7);
		
	КонецЕсли;
		
	Возврат СписокСтавокНДС;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьКоличествоПозицийНомСостава()

	// Покажем сколько строк на какой вкладке
	КоличествоСтрокТовары 		= Объект.Товары.Количество();
	КоличествоСтрокТоварыПоДП 	= Объект.ТоварыПоДаннымПользователя.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокВыбораИКодПричиныПоУмолчанию(ТекущаяСтрока, ИмяТЧ)
	
	ЭлементКодПричины = Элементы[ИмяТЧ + "КодПричины"];
	
	СписокВыбораЭлемента = ЭлементКодПричины.СписокВыбора;
	СписокВыбораЭлемента.Очистить();
	
	Если ПустаяСтрока(ТекущаяСтрока.ПричинаКорректировкиНовая)  Тогда
		ТекущаяСтрока.КодПричины = 0;
	Иначе
		КлючСтруктуры = СтрЗаменить(ТекущаяСтрока.ПричинаКорректировкиНовая, " ", "_"); 
		
		СписокВыбораКодов = Неопределено;
		Объект.СоответствиеПричинКорректировкиКодамПричин.Свойство(КлючСтруктуры, СписокВыбораКодов);
		Если СписокВыбораКодов <> Неопределено Тогда
			Если СписокВыбораКодов.Количество() = 1 Тогда
				ЭлементКодПричины.КнопкаВыпадающегоСписка = Ложь;
			ИначеЕсли СписокВыбораКодов.Количество() > 1 Тогда
				ЭлементКодПричины.КнопкаВыпадающегоСписка = Истина;
				Для каждого ЭлементСписка Из СписокВыбораКодов Цикл
					СписокВыбораЭлемента.Добавить(ЭлементСписка.Значение);	
				КонецЦикла;
			КонецЕсли;
			ТекущаяСтрока.КодПричины = СписокВыбораКодов[0].Значение;
		Иначе
			ТекущаяСтрока.КодПричины = 0;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПоказыватьТоварыПоДаннымПользователя = 
		Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ");
		
	Элементы.ГруппаСтраницаДанные.Видимость 			= Не ПоказыватьТоварыПоДаннымПользователя;
	Элементы.ГруппаСтраницаДанныеПользователя.Видимость = ПоказыватьТоварыПоДаннымПользователя;
	
	Элементы.ДекорацияСтатусПреобразования.Заголовок = ?(Не Форма.ВыполнялосьПриведениеКНовымПравилам, 
		НСтр("ru='Преобразование не выполнялось';uk= 'Перетворення не виконувалося'"), 
			?(Объект.ПреобразованиеВыполнялось = 1, 
				НСтр("ru='Предположительно преобразование уже выполнялось (повторное выполнение не рекомендуется)';uk= 'Ймовірно перетворення вже виконувалось (повторне виконання не рекомендується)'"),
				НСтр("ru='Преобразование выполнено (повторное выполнение не рекомендуется)';uk= 'Перетворення виконано (повторне виконання не рекомендується)'")));
	Элементы.ДекорацияСтатусПреобразования.ЦветТекста = ?(Не Форма.ВыполнялосьПриведениеКНовымПравилам, 
	    Новый Цвет(0, 128, 0),
		Новый Цвет(255, 0, 0));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыУпаковка
 	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	//Поле: ТоварыНоменклатураЕдиницаИзмерения
 	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмерения.Имя);
	//Поле: ТоварыУпаковкаЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковкаЗаголовок.Имя);
	//Поле: ТоварыЕдиницаИзмеренияЗаголовок
 	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияЗаголовок.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
 	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяУпаковка
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяУпаковка.Имя);
	//Поле: ТоварыПоДаннымПользователяНоменклатураЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяНоменклатураЕдиницаИзмерения.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЕдиницаИзмерения.Имя);
	//Поле: ТоварыПоДаннымПользователяУпаковкаЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяУпаковкаЗаголовок.Имя);
	//Поле: ТоварыПоДаннымПользователяЕдиницаИзмеренияЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЕдиницаИзмеренияЗаголовок.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыНоменклатураЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыУпаковкаЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковкаЗаголовок.Имя);
	//Поле: ТоварыЕдиницаИзмеренияЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЕдиницаИзмеренияЗаголовок.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Ложь;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяНоменклатураЕдиницаИзмерения
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяНоменклатураЕдиницаИзмерения.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяУпаковкаЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяУпаковкаЗаголовок.Имя);
	//Поле: ТоварыПоДаннымПользователяЕдиницаИзмеренияЗаголовок
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЕдиницаИзмеренияЗаголовок.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Ложь;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыХарактеристика
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Характеристика не используется>';uk= '<Характеристика не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяХарактеристика
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяХарактеристика.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Характеристика не используется>';uk= '<Характеристика не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКоличествоУпаковокИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокИзменениеКоличества.Имя);
	//Поле: ТоварыЦенаИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаИзменениеКоличества.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk= '<Не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКоличествоУпаковокИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокИзменениеЦены.Имя);
	//Поле: ТоварыЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk= '<Не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества.Имя);
	//Поле: ТоварыПоДаннымПользователяЦенаИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЦенаИзменениеКоличества.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk= '<Не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены.Имя);
	//Поле: ТоварыПоДаннымПользователяЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЦенаИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ПредопределенноеЗначение("ГоризонтальноеПоложение.Лево"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не используется>';uk= '<Не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаИзменениеЦены.Имя);
	//Поле: ТоварыКоличествоУпаковокИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКоличествоУпаковокИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокИзменениеКоличества.Имя);
	//Поле: ТоварыЦенаИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаИзменениеКоличества.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяЦенаИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЦенаИзменениеЦены.Имя);
	//Поле: ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеЦены.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяКоличествоУпаковокИзменениеКоличества.Имя);
	//Поле: ТоварыПоДаннымПользователяЦенаИзменениеКоличества
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяЦенаИзменениеКоличества.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТоварыПоДаннымПользователя.ЭтоКорректировкаКоличества");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыДокументПоставкиДляВозвратов
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументПоставкиДляВозвратов.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперацииВозвратКорректировка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриложений2КНалоговойНакладной.Корректировка");

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыОбъектРасчетов
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыОбъектРасчетов.Имя);
	//Поле: ТоварыДокументПоставки
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументПоставки.Имя);
	//Поле: ТоварыДокументПоставкиДляВозвратов
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДокументПоставкиДляВозвратов.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации"));
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыДатаКорректировки
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДатаКорректировки.Имя);
	//Поле: ТоварыПоДаннымПользователяДатаКорректировки
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПоДаннымПользователяДатаКорректировки.Имя);

	//Отбор
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый СтандартнаяДатаНачала("20160401000000");

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	////

	Элемент = УсловноеОформление.Элементы.Добавить();

	//Поле: ТоварыКодНоменклатурыПоКлассификатору
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодНоменклатурыПоКлассификатору.Имя);

	//Группа отбора
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	//Отбор
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.РазрешитьРедактированиеКодаПоКлассификатору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	//Оформления
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);



КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбщееНоменклатураПриИзмененииСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПоДаннымПользователяНоменклатураПриИзмененииСервер(ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.ТоварыПоДаннымПользователя.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбщееНоменклатураПриИзмененииСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбщееНоменклатураПриИзмененииСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	ТекущаяСтрока.СтавкаНДС = ЗаполнитьСтавкуНДС(ТекущаяСтрока.Номенклатура);
	НДСИсходящийСервер.ЗаполнитьНоменклатуруГТДПоУмолчанию(ТекущаяСтрока, ТекущаяСтрока.Свойство("РазрешитьРедактированиеКодаПоКлассификатору"));
	
	НДСИсходящийСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(ТекущаяСтрока.СтатьяДекларацииНДСНалоговыеОбязательства);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательстваСервер(СтатьяДекларацииНДСНалоговыеОбязательства)
	
	Документы.Приложение2КНалоговойНакладной.ЗаполнитьСтатьюДекларацииНДСНалоговыеОбязательства(Объект.ВидОперации, СтатьяДекларацииНДСНалоговыеОбязательства);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРеквизитыРеглВСтрокеТЧ(Строка)
	
	Строка.ЦенаРегл = 0;
	Строка.СуммаБезНДСРегл = 0;
	Строка.СуммаНДСРегл = 0;

КонецПроцедуры

&НаСервере
Процедура ТоварыПоДаннымПользователяКодУКТВЭДПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.ТоварыПоДаннымПользователя.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД) Тогда
		ТекущаяСтрока.КодНоменклатурыПоКлассификатору = ТекущаяСтрока.НомерГТД.КодУКТВЭД;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПересчитатьВВалютуРегл(Цена)
	
	СтруктураКурсовВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		Объект.Валюта, 
		Документы.Приложение2КНалоговойНакладной.ПолучитьДатуКурсаВалюты(Объект.ДокументП2)
	);
	
	ЦенаРеглНовая = НДСОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(
		Цена,
		Объект.Валюта,
		Объект.ВалютаРегламентированногоУчета,
		СтруктураКурсовВалюты.Курс, 1,
		СтруктураКурсовВалюты.Кратность, 1
	);
				
	Возврат ЦенаРеглНовая;
				
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьСтрокиИзТаблицыПереоценки(АдресХранилища, ДокументП2)

	ТаблицаПереоценки = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТаблицаПереоценки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаПереоценки.Очистить(); 

	ПоместитьВоВременноеХранилище(ТаблицаПереоценки, АдресХранилища);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСтрок(ТекстСообщенияПредупреждение = Неопределено)

	ТекстСообщенияПредупреждение = "";
	
	// Проверим, что выбран способ корректировки, во всех строках
	Если Не Объект.СтатусАвтокорректировки = ПредопределенноеЗначение("Перечисление.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ") Тогда
		ТабличнаяЧастьДляПроверки = "Товары";
	Иначе	
	    ТабличнаяЧастьДляПроверки = "ТоварыПоДаннымПользователя";
	КонецЕсли; 
	ПроверитьЗаполненияСпособовКорректировки(ТабличнаяЧастьДляПроверки, ТекстСообщенияПредупреждение);
	
	// Проверим, что заполнены коды причин во всех строках
	ИмяКолонки = "КодПричины";
	ПредставлениеКодаПричины = НСтр("ru='Код причины корректировки';uk= 'Код причини коригування'");
	ПроверитьЗаполненияЧисловогоРеквизитаСтроки(ТабличнаяЧастьДляПроверки, 	ИмяКолонки, ПредставлениеКодаПричины, ТекстСообщенияПредупреждение);
	
	// Корректное и полное заполнение реквизитов строк для способа "Зміна номенклатури"
	ПроверитьСтрокиНаНаличиеОшибокСпособИзменениеНоменклатуры(ТабличнаяЧастьДляПроверки, "Зміна номенклатури", ТекстСообщенияПредупреждение);
	
	// Корректное и полное заполнение реквизитов строк для способа "Зміна ціни", в этой конфигурации по заполнению аналогична
	// способу "Зміна номенклатури"
	Если Не Объект.Переоценка Тогда
		ПроверитьСтрокиНаНаличиеОшибокСпособИзменениеНоменклатуры(ТабличнаяЧастьДляПроверки, "Зміна ціни", ТекстСообщенияПредупреждение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненияСпособовКорректировки(ИмяТЧ, ТекстСообщенияПредупреждение)

	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокиСНезаполненымСпособомКорректировки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ПричинаКорректировкиНовая", ""));
	Если СтрокиСНезаполненымСпособомКорректировки.Количество() > 0 Тогда
		
		ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
 				НСтр("ru='В табличной части есть строки с незаполненной причиной (способом корректировки). Такие строки не будут обработаны.';uk= 'В табличній частині є рядки з незаповненою причиною (способом коригування). Такі рядки не будуть опрацьовані.'");		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненияЧисловогоРеквизитаСтроки(ИмяТЧ, ИмяРеквизитаПроверки, ПредставлениеРеквизитаПроверки, ТекстСообщенияПредупреждение)

	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокиСНезаполненымСпособомКорректировки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(ИмяРеквизитаПроверки, 0));
	Если СтрокиСНезаполненымСпособомКорректировки.Количество() > 0 Тогда
		
		ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
 				НСтр("ru='В табличной части есть строки с незаполненным значением колонки ""%1"". Такие строки могут быть обработаны не корректно.';uk= 'В табличній частині є рядки з незаповненим значенням колонки ""%1"". Такі рядки можуть бути опрацьовані не коректно.'");
				
		ТекстСообщенияПредупреждение = СтрЗаменить(ТекстСообщенияПредупреждение, "%1", ПредставлениеРеквизитаПроверки);
	КонецЕсли;	

КонецПроцедуры
 
&НаСервере
Процедура ПроверитьСтрокиНаНаличиеОшибокСпособИзменениеНоменклатуры(ИмяТЧ, СпособПроверки, ТекстСообщенияПредупреждение)

	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиСоСпособомИзменениеНоменклатуры = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ПричинаКорректировкиНовая", СпособПроверки));
	Если СтрокиСоСпособомИзменениеНоменклатуры.Количество() > 0 Тогда
		
		// Проверка, чтобы в рамках одной группы были обязательно сторно строка и одна и более заменяющая строка
		НомераГруппСНекорректнымЗаполнением = "";
		СоответствиеНомеровГруппИСтрок = Новый Соответствие;
		
		// Проверка, чтобы в рамках одной группы были только одинаковые коды причин
		НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы = "";
		СоответствиеНомеровГруппИКодовПричин = Новый Соответствие;
		
		ТЗСтрокиИзменениеНоменклатуры = Объект[ИмяТЧ].Выгрузить(СтрокиСоСпособомИзменениеНоменклатуры, "НомерГруппы, КодПричины, ИзменениеКоличества");		
		ТЗСтрокиИзменениеНоменклатуры.Сортировать("НомерГруппы");
		
		СтрокиСНезаполненнымНомеромГруппы = ТЗСтрокиИзменениеНоменклатуры.НайтиСтроки(Новый Структура("НомерГруппы", 0));
		
		Если СтрокиСНезаполненнымНомеромГруппы.Количество() > 0 Тогда
		
			ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
 				НСтр("ru='В табличной части есть строки с причиной (способом корректировки) ""%1"", в которых незаполнено значение колонки ""Номер группы"".';uk= 'В табличній частині є рядки з причиною (способом коригування) ""%1"", в яких не заповнено значення колонки ""Номер групи"".'");			
				
			ТекстСообщенияПредупреждение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияПредупреждение, СпособПроверки);	
				
		КонецЕсли;
		
		Для каждого СтрокаИзменениеНоменклатуры Из ТЗСтрокиИзменениеНоменклатуры Цикл
			Если СтрокаИзменениеНоменклатуры.НомерГруппы = 0 Тогда
				// Эта обработано в верхней части процедуры, как незаполнен номер группы
				Продолжить;
			КонецЕсли; 
			ЗначениеНомерГруппы = СоответствиеНомеровГруппИСтрок.Получить(СтрокаИзменениеНоменклатуры.НомерГруппы);
			Если ЗначениеНомерГруппы = Неопределено Тогда
				СтруктураОтрицательныеИПоложительныеСтроки = Новый Структура("КоличествоСторноСтрок, КоличествоЗаменяющихСтрок", 0,0); 
				СоответствиеНомеровГруппИСтрок.Вставить(СтрокаИзменениеНоменклатуры.НомерГруппы, СтруктураОтрицательныеИПоложительныеСтроки);
				
				МассивКодовПричин = Новый Массив;
				СоответствиеНомеровГруппИКодовПричин.Вставить(СтрокаИзменениеНоменклатуры.НомерГруппы, МассивКодовПричин);
			КонецЕсли;
			
			// Строки в рамках одной группы
			СтруктураОтрицательныеИПоложительныеСтроки = СоответствиеНомеровГруппИСтрок[СтрокаИзменениеНоменклатуры.НомерГруппы];
			Если СтрокаИзменениеНоменклатуры.ИзменениеКоличества < 0 Тогда
				СтруктураОтрицательныеИПоложительныеСтроки.Вставить("КоличествоСторноСтрок",
					СтруктураОтрицательныеИПоложительныеСтроки["КоличествоСторноСтрок"] + 1);
			ИначеЕсли СтрокаИзменениеНоменклатуры.ИзменениеКоличества > 0 Тогда 	
				СтруктураОтрицательныеИПоложительныеСтроки.Вставить("КоличествоЗаменяющихСтрок",
					СтруктураОтрицательныеИПоложительныеСтроки["КоличествоЗаменяющихСтрок"] + 1);
			КонецЕсли; 
			
			// Коды причин в рамках одной группы
			МассивКодовПричин = СоответствиеНомеровГруппИКодовПричин[СтрокаИзменениеНоменклатуры.НомерГруппы];
			Если МассивКодовПричин.Найти(СтрокаИзменениеНоменклатуры.КодПричины) = Неопределено Тогда
				МассивКодовПричин.Добавить(СтрокаИзменениеНоменклатуры.КодПричины);
			КонецЕсли;
			
		КонецЦикла;
		
		// Строки в рамках одной группы
		Для каждого ЭлементСоответствия Из СоответствиеНомеровГруппИСтрок Цикл
			Если Не (ЭлементСоответствия.Значение["КоличествоСторноСтрок"] = 1 И ЭлементСоответствия.Значение["КоличествоЗаменяющихСтрок"] >= 1)  Тогда
				
				НомераГруппСНекорректнымЗаполнением = НомераГруппСНекорректнымЗаполнением + ?(Не ПустаяСтрока(НомераГруппСНекорректнымЗаполнением), ", ", "") + Формат(ЭлементСоответствия.Ключ, "ЧГ=0");				
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(НомераГруппСНекорректнымЗаполнением) Тогда
			ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
			НСтр("ru='В табличной части есть строки с причиной (способом корректировки) ""%1"", в которых некорретные данные в рамках одной группы.
                  |Должна быть одна сторно строка (отрицательное изменение количества) и хотя бы одна заменяющая строка (положительное изменение количества), 
                  |в противном случае такие строки не будут преобразованы корректно. Такие номера групп: %2.';uk= 'В табличній частині є рядки з причиною (способом коригування) ""%1"", в яких некоректні дані в рамках однієї групи. 
                  |Повинен бути один сторно рядок (від''ємна зміна кількості) і хоча б один рядок, що заміняє (позитивна зміна кількості). 
                  |в противному випадку такі рядки не будуть перетворені коректно. Такі номера груп: %2.'");
		КонецЕсли;	
		
		// Коды причин в рамках одной группы
		Для каждого ЭлементСоответствия Из СоответствиеНомеровГруппИКодовПричин Цикл
			Если ЭлементСоответствия.Значение.Количество() > 1 Тогда
				
				НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы = НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы + ?(Не ПустаяСтрока(НомераГруппСНекорректнымЗаполнением), ", ", "") + Формат(ЭлементСоответствия.Ключ, "ЧГ=0");				
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы) Тогда
			ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
			НСтр("ru='В табличной части есть строки с причиной (способом корректировки) ""%1"", в которых для одной группы корректировки установлены разные коды причин корректировки.
                  |Коды причин корректировки в рамках одной группы должны быть одинаковыми. Такие номера групп: %3.';uk= 'В табличній частині є рядки з причиною (способом коригування) ""%1"", в яких для однієї групи коригування встановлені різні коди причин коригування. 
                  |Коди причин коригування в рамках однієї групи повині бути однакові. Такі номера груп: %3.'");
		КонецЕсли;	
		
		ТекстСообщенияПредупреждение = СтрЗаменить(ТекстСообщенияПредупреждение, "%1", СпособПроверки);
		ТекстСообщенияПредупреждение = СтрЗаменить(ТекстСообщенияПредупреждение, "%2", НомераГруппСНекорректнымЗаполнением);
		ТекстСообщенияПредупреждение = СтрЗаменить(ТекстСообщенияПредупреждение, "%3", НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы);
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьСпособВСвязанныхПоНомеруГруппыСтроках(ТекущаяСтрока, ИмяТЧ)

	Если ЗначениеЗаполнено(ТекущаяСтрока.НомерГруппы) Тогда
		МассивСтрокПоНомеруГруппы = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("НомерГруппы", ТекущаяСтрока.НомерГруппы));
		Если МассивСтрокПоНомеруГруппы.Количество() > 1 Тогда
			Для каждого Строка Из МассивСтрокПоНомеруГруппы Цикл
				Строка.ПричинаКорректировкиНовая = ТекущаяСтрока.ПричинаКорректировкиНовая;
				Строка.КодПричины = ТекущаяСтрока.КодПричины;
			КонецЦикла; 	
		КонецЕсли;
	КонецЕсли; 	

КонецПроцедуры 

#КонецОбласти 
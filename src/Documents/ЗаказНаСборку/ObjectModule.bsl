#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗначениеПараметра = Неопределено;
		Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок", ЗначениеПараметра) Тогда
			
			ОтменитьНепоставленныеСтроки(Статус <> Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.Шапка);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.ТЧ);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;


	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Объект";	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);

	// Проверка количества в т.ч. товар
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ВсеСтрокиОтменены = Истина;
	Для Каждого СтрокаТаблицы Из Товары Цикл
		ВсеСтрокиОтменены = ВсеСтрокиОтменены И СтрокаТаблицы.Отменено;
	КонецЦикла;

	Если НачалоСборкиРазборки > ОкончаниеСборкиРазборки Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Дата окончания сборки/разборки меньше даты начала сборки/разборки';uk='Дата закінчення збирання/розбирання менше дати початку збирання/розбирання'"),
			ЭтотОбъект,
			"ОкончаниеСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда

		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%';uk='Бажана дата надходження повинна бути не менше дати документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(ОкончаниеСборкиРазборки) 
		И ОкончаниеСборкиРазборки < НачалоДня(Дата) 
		И Не ВсеСтрокиОтменены Тогда

		ТекстОшибки = НСтр("ru='Дата окончания сборки/разборки должна быть не меньше даты документа %Дата%';uk='Дата закінчення збирання/розбирання повинна бути не менше дати документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОкончаниеСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(НачалоСборкиРазборки) 
		И НачалоСборкиРазборки < НачалоДня(Дата) 
		И Не ВсеСтрокиОтменены Тогда

		ТекстОшибки = НСтр("ru='Дата начала сборки/разборки должна быть не меньше даты документа %Дата%';uk='Дата початку збирання/розбирання повинна бути не менше дати документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"НачалоСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	Если Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ТипОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	// Проверка характеристики в шапке.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
		И Не Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура) Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");

	КонецЕсли;
		
	// Проверка характеристик в т.ч. товары.
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Характеристика);
	
	НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТЧ из НайденныеСтроки Цикл
		
		ТекстСообщения = НСтр("ru='В строке %НомерСтроки% указан товар ""%НазваниеТовара%"".
        |Один и тот же товар не может являться и комплектом, и комплектующей одновременно.'
        |;uk='У рядку %НомерСтроки% вказаний товар ""%НазваниеТовара%"".
        |Той самий товар не може бути і комплектом, і комплектуючої одночасно.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%",	НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Номенклатура, Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
	
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",СтрокаТЧ.НомерСтроки,"Номенклатура");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		
	КонецЦикла;
	
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ВариантОбеспечения");
	КонецЕсли;
	
	ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.ТЧ, Отказ, МассивНепроверяемыхРеквизитов);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.Шапка, Отказ, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		
		Возврат;

	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");

	ПараметрыСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыСерий.Шапка, Номенклатура);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыСерий.ТЧ, Номенклатура);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Объект";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	Обособленно          = Перечисления.ВариантыОбеспечения.Обособленно;
	ОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		
		Если Не ЗначениеЗаполнено(Назначение) И Не ЗначениеЗаполнено(НазначениеТовары) Тогда
			
			ТребуетсяНазначение = Ложь;
			
			Для Каждого Строка Из Товары Цикл
				Если Строка.ВариантОбеспечения = Обособленно Или Строка.ВариантОбеспечения = ОтгрузитьОбособленно Тогда
					ТребуетсяНазначение = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ТребуетсяНазначение Тогда
				НазначениеТовары = Справочники.Назначения.ПолучитьСсылку();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		
		Если Не ЗначениеЗаполнено(Назначение) И (ВариантОбеспечения = Обособленно Или ВариантОбеспечения = ОтгрузитьОбособленно) Тогда
			
			Назначение = Справочники.Назначения.ПолучитьСсылкуДляНовогоЗаказа(НаправлениеДеятельности);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Добавление заказа для расчета состояний необходимо для тех случаев когда, например, для всех товаров указан способ обеспечения "Не обеспечивать".
	// При таком способе обеспечения документ не делает движений по тем регистрам, которые добавили бы заказ для расчета самостоятельно.
	ПроведениеСервер.ДобавитьЗаказДляРасчетаСостояний(ДополнительныеСвойства, Ссылка);
	
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		Справочники.Назначения.СоздатьОбновитьНазначение(Ссылка, НазначениеТовары, Склад, Номер, Дата, ПометкаУдаления);
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		Справочники.Назначения.СоздатьОбновитьНазначение(Ссылка, Назначение, Склад, Номер, Дата, ПометкаУдаления, НаправлениеДеятельности);
	КонецЕсли;

	// При отмене проведения или установке пометки на удаление проведенного документа необходим вызов пересчета состояний, для удаления записи по текущему документу
	// из регистра сведений СостоянияВнутреннихЗаказов. Корректный пересчет состояния возможен в том случае, когда у документа уже установлен (записан) признак Проведен = Ложь
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПроведениеСервер.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку") Тогда
		Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	Иначе
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
	ДокументОснование       = Неопределено;
	НачалоСборкиРазборки    = Дата(1, 1, 1);
	ОкончаниеСборкиРазборки = Дата(1, 1, 1);
	ЖелаемаяДатаПоступления = Дата(1, 1, 1);
	МаксимальныйКодСтроки   = 0;
	КоличествоУпаковокОтменено = 0;
	КоличествоОтменено = 0;
	
	Для каждого СтрокаТовары из Товары Цикл

		СтрокаТовары.Отменено = Ложь;
		СтрокаТовары.КодСтроки = 0;
		СтрокаТовары.Назначение = Справочники.Назначения.ПустаяСсылка();
		
	КонецЦикла;
	
	Назначение       = Неопределено;
	НазначениеТовары = Неопределено;
	
	Серии.Очистить();

	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ЗаказНаСборку.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьЗаказыНаСборку(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ВариантКомплектации) Тогда
		
		ВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьОсновнуюКомплектацию(
			Номенклатура, Характеристика);
		
	КонецЕсли; 
	
	Если ДанныеЗаполнения.Свойство("Товары") Тогда
		ЭтотОбъект.Товары.Загрузить(ДанныеЗаполнения.Товары);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантКомплектации) Тогда
		
		Реквизиты = "";
		Если НЕ ЗначениеЗаполнено(ДлительностьСборкиРазборки) Тогда
			Реквизиты = Реквизиты + ?(ЗначениеЗаполнено(Реквизиты), ", ", "") + "ДлительностьСборкиРазборки";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Количество) И НЕ ЗначениеЗаполнено(КоличествоУпаковок) Тогда
			Реквизиты = Реквизиты + ?(ЗначениеЗаполнено(Реквизиты), ", ", "") + "Количество, КоличествоУпаковок, Упаковка";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты) Тогда
		
			ПараметрыВариантаКомплектаций = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантКомплектации, Реквизиты);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыВариантаКомплектаций);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДлительностьСборкиРазборки) Тогда
		
		Если ЗначениеЗаполнено(НачалоСборкиРазборки) Тогда
			
			ОкончаниеСборкиРазборки = НачалоСборкиРазборки + ДлительностьСборкиРазборки * 86400;
			
		ИначеЕсли ЗначениеЗаполнено(ОкончаниеСборкиРазборки) Тогда
			
			НачалоСборкиРазборки = ОкончаниеСборкиРазборки - ДлительностьСборкиРазборки * 86400;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(НачалоСборкиРазборки) И ЗначениеЗаполнено(ОкончаниеСборкиРазборки) Тогда
		
		ДлительностьСборкиРазборки = (ОкончаниеСборкиРазборки - НачалоСборкиРазборки) / 86400;
		
	КонецЕсли; 
	
	Если НЕ ДанныеЗаполнения.Свойство("Товары") Тогда
	
		ЗаполнитьТоварыПоВариантуКомплектации();
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(ЗаказКлиента)

	Запрос = Новый Запрос( 
	"
	|ВЫБРАТЬ
	|	ЗаказКлиента.Статус          КАК СтатусДокумента,
	|	ЗаказКлиента.Проведен        КАК Проведен,
	|	ЗаказКлиента.Организация     КАК Организация,
	|	ЗаказКлиента.Сделка          КАК Сделка,
	|	ЗаказКлиента.Склад           КАК СкладДокумента,
	|	ЗаказКлиента.Склад.ЭтоГруппа КАК ЭтоГруппа,
	|	ЗаказКлиента.Подразделение   КАК Подразделение
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента
	|");
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	//Заполнение шапки
	Организация       = Реквизиты.Организация;
	Сделка            = Реквизиты.Сделка;
	ДокументОснование = ЗаказКлиента;
	Подразделение     = Реквизиты.Подразделение;
	
	//Заполнение табличной части.
	ПолучатьУслуги = Ложь;
	ПолучатьРаботы = Ложь;
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента, , ПолучатьУслуги, ПолучатьРаботы);

	Если ТаблицаТовары.Количество() > 0 Тогда

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТаблицаТовары[0]);

		ЭтотОбъект.ВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьОсновнуюКомплектацию(
			Номенклатура, Характеристика);

		ЭтотОбъект.ЗаполнитьТоварыПоВариантуКомплектации();

	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку") Тогда
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
	ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Товары);
	
	// Заполнение варианта обеспечения разбираемого комплекта.
	ТаблицаИзОбъекта = Новый ТаблицаЗначений();
	ТаблицаИзОбъекта.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ЗаполнитьЗначенияСвойств(ТаблицаИзОбъекта.Добавить(), ЭтотОбъект);
	
	ТаблицаИзОбъекта.Колонки.Добавить("ВариантОбеспечения");
	ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ТаблицаИзОбъекта);
	
	ВариантОбеспечения = ТаблицаИзОбъекта[0].ВариантОбеспечения;

КонецПроцедуры

// Процедура заполняет табличную часть "Товары" комплектующими,
// полученными по основному варианту комплектации.
//
Процедура ЗаполнитьТоварыПоВариантуКомплектации() Экспорт
	
	Товары.Загрузить(Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(ВариантКомплектации, , Количество));

КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ЗаказыНаСборку);
	КонецЕсли;
	
	ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	// Контроль выполняется при перепроведении, отмене проведения или если используются серии, чтобы проверить возможность резервирования серий
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ОтменитьНепоставленныеСтроки(Знач ПроверятьОстатки = Ложь)
	
	Если ОтменитьНеотработанныеКомплектыСервер() Тогда
		
		КоличествоОтмененныхСтрок = 0;
		СвойстваОтмененнойСтроки = Новый Структура("Отменено, СтатусУказанияСерий", Истина, 0);
		
		Если Не ПроверятьОстатки Тогда
			
			Для каждого СтрокаТовары из Товары Цикл
				
				Если Не СтрокаТовары.Отменено Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, СвойстваОтмененнойСтроки);
					КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураТаблицКОбработке = Документы.ЗаказНаСборку.ПолучитьТаблицыДляОтменыНеотработанныхСтрок(Ссылка, Товары);
		
		Отбор = СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки.Скопировать(, "Ссылка, КодСтроки");
		
		// Фактически отработанное количество товара по накладным.
		ОформитьПоНакладным = РегистрыНакопления.ЗаказыНаСборку.ТаблицаОформлено(Отбор,
		?(ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие, Истина, Ложь));
		
		Корректировка = ОбеспечениеСервер.СтруктураКорректировкиОбеспечения(); // получить описание регистра накопления "ТоварыКОтгрузке"
		
		// Фактически отработанное количество товара по ордерам.
		ОформитьПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки, Корректировка.ТоварыКОтгрузке);
		
		РезультатОтмены = ОбеспечениеСервер.ОтменитьНеотработанныеСтроки(ЭтотОбъект, СтруктураТаблицКОбработке.ТаблицаВыделенныеСтроки,
			СтруктураТаблицКОбработке.ТаблицаПредварительноОтмененныеСтроки, ОформитьПоНакладным, ОформитьПоОрдерам);
		
		ОтменитьНеотработанныеСерииКомплектовСервер();
		
	КонецЕсли;
	
КонецПроцедуры

// Расчет количества отмененных комплектов в шапке документа
// Возращает признак успешной отмены неотработанных комплектов
// 
// Возвращаемое значение:
//   - Булево
//
Функция ОтменитьНеотработанныеКомплектыСервер()
	
	ОформленоКомплектов = Документы.ЗаказНаСборку.ОформленоКомплектов(ЭтотОбъект);
	
	// При количестве 0 документ нельзя записать
	Если ОформленоКомплектов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Модифицирование шапки документа, хранящей данные о комплекте.
	Если Количество <> ОформленоКомплектов Тогда
		КоличествоУпаковокОтменено = Количество - ОформленоКомплектов;
		Количество = ОформленоКомплектов; // выставление фактически собранного/разобранного количества
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ЭтотОбъект, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОтменитьНеотработанныеСерииКомплектовСервер()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку));
	
	// Процедура доступна если разборка и используются серии
	Если Не ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры 
		И ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втСерииЗаказа.Серия,
	|	втСерииЗаказа.Количество,
	|	втСерииЗаказа.Номенклатура,
	|	втСерииЗаказа.Характеристика,
	|	втСерииЗаказа.Назначение
	|ПОМЕСТИТЬ втСерииЗаказа
	|ИЗ
	|	&СерииЗаказа КАК втСерииЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииЗаказа.Серия,
	|	СУММА(СерииЗаказа.Количество) КАК Количество,
	|	СерииЗаказа.Номенклатура,
	|	СерииЗаказа.Характеристика,
	|	СерииЗаказа.Назначение
	|ПОМЕСТИТЬ СерииЗаказа
	|ИЗ
	|	втСерииЗаказа КАК СерииЗаказа
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииЗаказа.Серия,
	|	СерииЗаказа.Характеристика,
	|	СерииЗаказа.Назначение,
	|	СерииЗаказа.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.Серия,
	|	ТоварыКОтгрузкеОстатки.Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика,
	|	ТоварыКОтгрузкеОстатки.Назначение,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток,
	|	ТоварыКОтгрузкеОстатки.КОформлениюОстаток,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток < ТоварыКОтгрузкеОстатки.КОформлениюОстаток
	|			ТОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток
	|		ИНАЧЕ ТоварыКОтгрузкеОстатки.КОформлениюОстаток
	|	КОНЕЦ КАК КоличествоНедостача
	|ПОМЕСТИТЬ СерииРегистра
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки = &Заказ) КАК ТоварыКОтгрузкеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииЗаказа КАК СерииЗаказа
	|		ПО ТоварыКОтгрузкеОстатки.Серия = СерииЗаказа.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииЗаказа.Серия,
	|	СерииЗаказа.Номенклатура,
	|	СерииЗаказа.Характеристика,
	|	СерииЗаказа.Назначение,
	|	ЕСТЬNULL(СерииРегистра.КоличествоНедостача, СерииЗаказа.Количество) КАК КоличествоНедостача,
	|	СерииРегистра.КОтгрузкеОстаток,
	|	СерииРегистра.КОформлениюОстаток
	|ИЗ
	|	СерииЗаказа КАК СерииЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииРегистра КАК СерииРегистра
	|		ПО СерииЗаказа.Номенклатура = СерииРегистра.Номенклатура
	|			И СерииЗаказа.Характеристика = СерииРегистра.Характеристика
	|			И СерииЗаказа.Серия = СерииРегистра.Серия
	|			И СерииЗаказа.Назначение = СерииРегистра.Назначение
	|ГДЕ
	|	ЕСТЬNULL(СерииРегистра.КоличествоНедостача, СерииЗаказа.Количество) > 0";
	
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	
	Если СтатусУказанияСерий = 14 Тогда
		
		ТЗСерии = Серии.Выгрузить();
		ТЗСерии.Очистить();
		
		СерияВШапке = ТЗСерии.Добавить();
		ЗаполнитьЗначенияСвойств(СерияВШапке, ЭтотОбъект);
		
		Запрос.УстановитьПараметр("СерииЗаказа", ТЗСерии);
		
	Иначе
		// СтатусУказанияСерий = 10
		// Используется табличная часть Серии
		Запрос.УстановитьПараметр("СерииЗаказа", Серии.Выгрузить());
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	МассивУдаляемых = Новый Массив();
	
	Пока Результат.Следующий() Цикл
		
		Если СтатусУказанияСерий = 14 Тогда
			// Используется поле серия в шапке
			
			// Количество в шапке модифицируется процедурой ОтменитьНеотработанныеКомплектыСервер
			// В этой процедуре в шапке модифицируется только поле Серия
			Если Серия = Результат.Серия 
				И (Количество = Результат.КоличествоНедостача ИЛИ Количество = 0) Тогда
				Серия = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			КонецЕсли;
			
		Иначе
			// СтатусУказанияСерий = 10
			// Используется табличная часть Серии
			
			Отбор = Новый Структура();
			Отбор.Вставить("Серия",				Результат.Серия);
			Отбор.Вставить("Номенклатура",		Результат.Номенклатура);
			Отбор.Вставить("Характеристика",	Результат.Характеристика);
			Отбор.Вставить("Назначение",		Результат.Назначение);
			
			СтрокиСерий = Серии.НайтиСтроки(Отбор);
			
			Недостача = Результат.КоличествоНедостача;
			Для Каждого СтрокаСерий Из СтрокиСерий Цикл
				
				Если СтрокаСерий.Количество = Недостача Тогда
					МассивУдаляемых.Добавить(СтрокаСерий);
					Недостача = 0;
				Иначе
					Вычитаемое = Мин(СтрокаСерий.Количество, Недостача);
					СтрокаСерий.Количество = СтрокаСерий.Количество - Вычитаемое;
					Недостача = Недостача - Вычитаемое;
					
					Если СтрокаСерий.Количество = 0 Тогда
						МассивУдаляемых.Добавить(СтрокаСерий);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивУдаляемых);
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемых Цикл
		Серии.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет возможность проведения документа в статусе "Закрыт".
//
// Параметры:
//  Отказ	 - Булево - параметр "Отказ" обработки проведения
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)

	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки");
	
	Если Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт
		И КонтролироватьОтгрузку Тогда
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		ДополнительныеПараметры = Новый Структура("КонтрольВыполненияЗаказа", Истина);
		
		Запрос = Документы.ЗаказНаСборку.СформироватьЗапросПроверкиПриСменеСтатуса(Массив, "Закрыт", ДополнительныеПараметры);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаОтгрузка = Результат.Выбрать();
		
		Пока ВыборкаОтгрузка.Следующий() Цикл
			
			ПроверкаПройдена = Документы.ЗаказНаСборку.ПроверкаПередСменойСтатуса(ВыборкаОтгрузка, Статус, ДополнительныеПараметры); 
			Если Не ПроверкаПройдена Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПЕРЕМЕННЫЕ

Перем ФлагОшибки Экспорт; // глобальный флаг ошибки

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ТипСтрока;
Перем ТипБулево;
Перем ТипЧисло;
Перем ТипДата;

Перем ЗначениеПустойДаты;

Перем СообщенияОбОшибках; // Соответствие. Ключ - код ошибки,  Значение - описание ошибки

Перем ДеревоПравилВыгрузкиДанных; // дерево значений с правилами выгрузки данных

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает структуру правил обмена
Функция ПолучитьСтруктуруПравилОбмена(ИмяФайла) Экспорт
	
	ЗагрузитьПравила(ИмяФайла);
	
	Если ФлагОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем таблицу выгрузки данных из дерева значений
	ПравилаВыгрузкиДанных = ПолучитьТаблицуПравилВыгрузкиДанных();
	
	// возвращаемое значение функции
	СтруктураПравилОбмена = Новый Структура;
	
	СтруктураПравилОбмена.Вставить("ТаблицаПравилВыгрузки", ПравилаВыгрузкиДанных);
	
	Возврат СтруктураПравилОбмена;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ПРАВИЛ КОНВЕРТАЦИИ ОБЪЕКТОВ

// Выполняет чтение XML-файла с правилами конвертации. Заполняет значения коллекций по данным файла;
//
// Параметры:
//  ИмяФайла         - Строка - полное имя файла в локальной файловой системе, в котором содержатся правила
//
Процедура ЗагрузитьПравила(Знач ИмяФайла)
	
	ФлагОшибки = Ложь;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		СообщитьОбОшибкеОбработки(4);
		Возврат;
	КонецЕсли;
	
	// выполняем инициализацию коллекций для правил
	ИнициализацияДереваПВД();
	
	// ЗАГРУЗКА ПРАВИЛ КОНВЕРТАЦИИ
	Попытка
		ЗагрузитьКонвертациюИзФайла(ИмяФайла);
	Исключение
		
		// фиксируем ошибку
		СообщитьОбОшибкеОбработки(2, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьКонвертациюИзФайла(ИмяФайла)
	
	// открываем файл для чтения
	Попытка
		Правила = Новый ЧтениеXML();
		Правила.ОткрытьФайл(ИмяФайла);
		Правила.Прочитать();
	Исключение
		Правила = Неопределено;
		СообщитьОбОшибкеОбработки(1, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Попытка
		ЗагрузитьКонвертацию(Правила);
	Исключение
		СообщитьОбОшибкеОбработки(2, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Правила.Закрыть();
	Правила = Неопределено;
	
КонецПроцедуры

// Осуществляет загрузку правил конвертации в соответствии с форматом
//
// Параметры:
//  
Процедура ЗагрузитьКонвертацию(Правила)
	
	Если Не ((Правила.ЛокальноеИмя = "ПравилаОбмена") 
		И (Правила.ТипУзла = ТипУзлаXML.НачалоЭлемента)) Тогда
		
		// Ошибка формата правил
		СообщитьОбОшибкеОбработки(3);
		
		Возврат;
		
	КонецЕсли;
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		ТипУзла = Правила.ТипУзла;
		
		// Правила выгрузки данных
		Если ИмяУзла = "ПравилаВыгрузкиДанных" Тогда
			
			ЗагрузитьПравилаВыгрузкиДанных(Правила);
			
		ИначеЕсли (ИмяУзла = "ПравилаОбмена") И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правил выгрузки данных в соответствии с форматом
//
// Параметры:
//  Правила - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПравилаВыгрузкиДанных(Правила)
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		
		Если ИмяУзла = "Правило" Тогда
			
			ЗагрузитьПравилоВыгрузкиДанных(Правила, ДеревоПравилВыгрузкиДанных);
			
		ИначеЕсли ИмяУзла = "Группа" Тогда
			
			ЗагрузитьГруппуПравилВыгрузкиДанных(Правила, ДеревоПравилВыгрузкиДанных);
			
		ИначеЕсли (ИмяУзла = "ПравилаВыгрузкиДанных") И (Правила.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПравилаВыгрузкиДанных()

// Осуществляет загрузку правила выгрузки данных
//
// Параметры:
//  Правила  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПравилоВыгрузкиДанных(Правила, ДеревоЗначений)
	
	НоваяСтрока = ДеревоЗначений.Строки.Добавить();
	
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Включить  = Не одАтрибут(Правила, ТипБулево, "Отключить");
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		
		Если ИмяУзла = "Код" Тогда
			
			НоваяСтрока.Имя = одЗначениеЭлемента(Правила, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(Правила, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			
			НоваяСтрока.Порядок = одЗначениеЭлемента(Правила, ТипЧисло);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(Правила, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ИмяТипаПриемника" Тогда
			
			НоваяСтрока.ИмяТипаПриемника = одЗначениеЭлемента(Правила, ТипСтрока);

		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(Правила, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			
			НоваяСтрока.ОбъектВыборкиСтрокой = одЗначениеЭлемента(Правила, ТипСтрока);
			
		// Обработчики событий
			
		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(Правила, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(Правила, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(Правила, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(Правила, ТипСтрока);
			
		ИначеЕсли (ИмяУзла = "Правило") И (Правила.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПравилоВыгрузкиДанных()

// Осуществляет загрузку группы правил выгрузки данных
//
// Параметры:
//  Правила  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьГруппуПравилВыгрузкиДанных(Правила, ДеревоЗначений)
	
	НоваяСтрока = ДеревоЗначений.Строки.Добавить();
	
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Включить  = Не одАтрибут(Правила, ТипБулево, "Отключить");
	
	Пока Правила.Прочитать() Цикл
		
		ИмяУзла = Правила.ЛокальноеИмя;
		
		Если ИмяУзла = "Правило" Тогда
			
			ЗагрузитьПравилоВыгрузкиДанных(Правила, НоваяСтрока);
			
		ИначеЕсли ИмяУзла = "Группа" И Правила.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ЗагрузитьГруппуПравилВыгрузкиДанных(Правила, НоваяСтрока);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			
			НоваяСтрока.Имя = одЗначениеЭлемента(Правила, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(Правила, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			
			НоваяСтрока.Порядок = одЗначениеЭлемента(Правила, ТипЧисло);
			
		ИначеЕсли (ИмяУзла = "Группа") И (Правила.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(Правила);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьГруппуПравилВыгрузкиДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СообщитьОбОшибкеОбработки(Код = -1, ОписаниеОшибки = "")
	
	// взводим глобальный флаг ошибки
	ФлагОшибки = Истина;
	
	Если СообщенияОбОшибках = Неопределено Тогда
		СообщенияОбОшибках = ИнициализацияСообщений();
	КонецЕсли;
	
	СтрокаСообщения = СообщенияОбОшибках[Код];
	
	СтрокаСообщения = ?(СтрокаСообщения = Неопределено, "", СтрокаСообщения);
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	
КонецПроцедуры

Процедура ПрочитатьГруппуДереваЗначенийПВД(ПравилаВыгрузкиДанных, ДеревоЗначений, Порядок)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПрочитатьГруппуДереваЗначенийПВД(ПравилаВыгрузкиДанных, СтрокаДерева, Порядок);
			
		Иначе
			
			СтрокаТаблицы = ПравилаВыгрузкиДанных.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
			
			// переопределяем значение поля "Порядок"
			СтрокаТаблицы.Порядок = Порядок;
			
			Порядок = Порядок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПравилВыгрузкиДанных()
	
	ПравилаВыгрузкиДанных = Новый ТаблицаЗначений;
	
	// инициализируем колонки таблицы
	ИнициализацияКолонокПВД(ПравилаВыгрузкиДанных.Колонки);
	
	// заполняем значениями поля таблицы ПравилаВыгрузкиДанных
	// поле "Порядок" переопределяется; Порядок назначается сквозь всю иерархию, глобально для всей таблицы
	ПрочитатьГруппуДереваЗначенийПВД(ПравилаВыгрузкиДанных, ДеревоПравилВыгрузкиДанных, 0);
	
	Возврат ПравилаВыгрузкиДанных;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя)
	
	СтрЗначение = СокрП(Объект.ПолучитьАтрибут(Имя));
	
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		
		Возврат XMLЗначение(Тип, СтрЗначение);
		
	Иначе
		Если Тип = ТипСтрока Тогда
			Возврат "";
			
		ИначеЕсли Тип = ТипБулево Тогда
			Возврат Ложь;
			
		ИначеЕсли Тип = ТипЧисло Тогда
			Возврат 0;
			
		ИначеЕсли Тип = ТипДата Тогда
			Возврат ЗначениеПустойДаты;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // одАтрибут()

// Возвращает объект ОписаниеТипов, содержащий указанный тип
//
// Параметры:
//  ЗначениеТипа   - Строка с именем типа или значение типа Тип
//  
// Возвращаемое значение:
//  ОписаниеТипов
//  
Функция одОписаниеТипа(ЗначениеТипа)

	МассивТипов = Новый Массив;
	Если ТипЗнч(ЗначениеТипа) = ТипСтрока Тогда
		МассивТипов.Добавить(Тип(ЗначениеТипа));
	Иначе
		МассивТипов.Добавить(ЗначениеТипа);
	КонецЕсли; 
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // одОписаниеТипа()

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществляется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству="")

	Значение = "";
	Имя      = Объект.ЛокальноеИмя;

	Пока Объект.Прочитать() Цикл
		
		ИмяУзла = Объект.ЛокальноеИмя;
		ТипУзла = Объект.ТипУзла;
		
		Если ТипУзла = ТипУзлаXML.Текст Тогда
			
			Значение = СокрП(Объект.Значение);
			
		ИначеЕсли (ИмяУзла = Имя) И (ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат XMLЗначение(Тип, Значение)
	
КонецФункции // одЗначениеЭлемента()

// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя = "")
	
	КолвоВложений = 0; // количество одноименных вложений
	
	Если ПустаяСтрока(Имя) Тогда
	
		Имя = Объект.ЛокальноеИмя;
	
	КонецЕсли;
	
	Пока Объект.Прочитать() Цикл
		
		ИмяУзла = Объект.ЛокальноеИмя;
		ТипУзла = Объект.ТипУзла;
		
		Если ИмяУзла = Имя Тогда
			
			Если ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если КолвоВложений = 0 Тогда
					Прервать;
				Иначе
					КолвоВложений = КолвоВложений - 1;
				КонецЕсли;
				
			ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				КолвоВложений = КолвоВложений + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // одПропустить()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ РЕКВИЗИТОВ И МОДУЛЬНЫХ ПЕРЕМЕННЫХ

// Инициализирует реквизиты обработки и модульные переменные
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияРеквизитовИМодульныхПеременных()
	
	ФлагОшибки = Ложь;
	
	// Типы
	ТипСтрока            = Тип("Строка");
	ТипБулево            = Тип("Булево");
	ТипЧисло             = Тип("Число");
	ТипДата              = Тип("Дата");
	
	ЗначениеПустойДаты = Дата('00010101');
	
КонецПроцедуры // ИнициализацияРеквизитовИМодульныхПеременных()

// Инициализирует переменную, содержащую соответствия кодов сообщений их описаниям
//
// Параметры:
//  Нет.
// 
Функция ИнициализацияСообщений()
	
	Сообщения = Новый Соответствие;
	
	Сообщения.Вставить(0, НСтр("ru='Внутренняя ошибка';uk='Внутрішня помилка'"));
	Сообщения.Вставить(1, НСтр("ru='Ошибка открытия файла правил';uk='Помилка відкриття файлу правил'"));
	Сообщения.Вставить(2, НСтр("ru='Ошибка при загрузке правил';uk='Помилка при завантаженні правил'"));
	Сообщения.Вставить(3, НСтр("ru='Ошибка формата правил';uk='Помилка формату правил'"));
	Сообщения.Вставить(4, НСтр("ru='Ошибка при получении файла правил для чтения';uk='Помилка при одержанні файлу правил для читання'"));
	
	Возврат Сообщения;
	
КонецФункции // ИнициализацияСообщений()

// Инициализирует колонки дерева правил выгрузки данных
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияДереваПВД()
	
	ДеревоПравилВыгрузкиДанных = Новый ДеревоЗначений;
	
	ИнициализацияКолонокПВД(ДеревоПравилВыгрузкиДанных.Колонки);
	
КонецПроцедуры

Процедура ИнициализацияКолонокПВД(Колонки)
	
	Колонки.Очистить();
	
	Колонки.Добавить("ЭтоГруппа",    одОписаниеТипа("Булево"));
	Колонки.Добавить("Включить",     одОписаниеТипа("Булево"));
	
	Колонки.Добавить("Имя",          одОписаниеТипа("Строка"));
	Колонки.Добавить("Наименование", одОписаниеТипа("Строка"));
	Колонки.Добавить("Порядок",      одОписаниеТипа("Число"));

	Колонки.Добавить("СпособОтбораДанных", одОписаниеТипа("Строка"));
	Колонки.Добавить("ПравилоКонвертации", одОписаниеТипа("Строка"));
	Колонки.Добавить("ИмяТипаПриемника",   одОписаниеТипа("Строка"));
	
	Колонки.Добавить("ПередОбработкой", одОписаниеТипа("Строка"));
	Колонки.Добавить("ПослеОбработки",  одОписаниеТипа("Строка"));
	Колонки.Добавить("ПередВыгрузкой",  одОписаниеТипа("Строка"));
	Колонки.Добавить("ПослеВыгрузки",   одОписаниеТипа("Строка"));
	
	Колонки.Добавить("ОбъектВыборкиСтрокой", одОписаниеТипа("Строка")); // строковое представление объекта метаданных
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИнициализацияРеквизитовИМодульныхПеременных();

#КонецЕсли
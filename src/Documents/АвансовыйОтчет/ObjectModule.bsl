#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть ПрочиеРасходы остатками денежных средств у подотчетного лица
//
Процедура ЗаполнитьПолученныеАвансы() Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДенежныеСредства.ЦельВыдачи КАК СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&Дата,
	|		Организация = &Организация
	|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|		И Валюта = &Валюта
	|	) КАК ДенежныеСредства
	|
	|ГДЕ
	|	ДенежныеСредства.СуммаОстаток > 0
	|");
	
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	ПрочиеРасходы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
	
		ЗаполнитьПоРасходномуКассовомуОрдеру(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
	
		ЗаполнитьПоСписаниюБезналичныхДенежныхСредств(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если Не ДанныеЗаполнения.Свойство("Валюта") Тогда
			Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СуммаИзрасходовано") Тогда
			Расход = ПрочиеРасходы.Добавить();
			Расход.Сумма = ДанныеЗаполнения.СуммаИзрасходовано;
			Если ДанныеЗаполнения.Свойство("ЦельВыдачи") Тогда
				Расход.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.ЦельВыдачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
		
		Шапка = ДанныеЗаполнения[0];
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
		
		Для каждого Аванс Из ДанныеЗаполнения Цикл
			Расход = ПрочиеРасходы.Добавить();
			Расход.Сумма = Аванс.СуммаОстаток;
			Если Аванс.Свойство("ЦельВыдачи") Тогда
				Расход.СтатьяДвиженияДенежныхСредств = Аванс.ЦельВыдачи;
			КонецЕсли;
		КонецЦикла;
		СуммаИзрасходовано = ПрочиеРасходы.Итог("Сумма");
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОплатаПоставщикам.Очистить();
	
	СуммаИзрасходовано = 0;
	СуммаОтклонено     = 0;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИспользоватьСтатусыАвансовыхОтчетов = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов");
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.ПричинаОтмены");
	
	МассивРеквизитовРучнойПроверки = Новый Массив;
	МассивРеквизитовРучнойПроверки.Добавить("СтатьяРасходов");
	МассивРеквизитовРучнойПроверки.Добавить("СтавкаНДС");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		МассивРеквизитовРучнойПроверки.Добавить("Подразделение");
	КонецЕсли;
	
	Для каждого Реквизит Из МассивРеквизитовРучнойПроверки Цикл
		МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы." + Реквизит);
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов.Добавить("ПрочиеРасходы.Контрагент");
	
	Если ИспользоватьСтатусыАвансовыхОтчетов
		И Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден Тогда
		Если Не ПраваПользователяПовтИсп.УтверждениеАвансовыхОтчетов() Тогда
			ТекстОшибки = НСтр("ru='У вас отсутствует право утверждения авансовых отчетов.';uk='У вас відсутнє право затвердження авансових звітів.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				, // Поле
				, // ПутьКДанным
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПрочиеРасходы.Количество() И Не ОплатаПоставщикам.Количество() Тогда
		Текст = НСтр("ru='Сумма израсходованных денежных средств равна 0. Необходимо заполнить данные на закладках ""Расходы "" или ""Оплата поставщикам""';uk='Сума витрачених грошових коштів дорівнює 0. Необхідно заповнити дані на закладках ""Витрати"" або ""Оплата постачальникам""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ИтогоИзрасходовано",
			, // ПутьКДанным
			Отказ);
	КонецЕсли;
	
	Для ТекИндекс = 0 По ПрочиеРасходы.Количество()-1 Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Расходы""';uk=' у рядку %НомерСтроки% списку ""Витрати""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ПрочиеРасходы[ТекИндекс].НомерСтроки);
	
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если ИспользоватьСтатусыАвансовыхОтчетов
			И ПрочиеРасходы[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(ПрочиеРасходы[ТекИндекс].ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены';uk='Необхідно вказати причину скасування'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ПрочиеРасходы[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
				,
				Отказ);
		КонецЕсли;
		
		Для каждого Реквизит Из МассивРеквизитовРучнойПроверки Цикл
			Если Не ЗначениеЗаполнено(ПрочиеРасходы[ТекИндекс][Реквизит])
				И (ИспользоватьСтатусыАвансовыхОтчетов
					И Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден
					И Не ПрочиеРасходы[ТекИндекс].Отменено
					ИЛИ Не ИспользоватьСтатусыАвансовыхОтчетов) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""%1""';uk='Не заповнено колонку ""%1""'"),
					Реквизит);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ПрочиеРасходы[ТекИндекс].НомерСтроки, Реквизит),
					,
					Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ПрочиеРасходы[ТекИндекс]["Контрагент"])
			И ПрочиеРасходы[ТекИндекс]["СтавкаНДС"] <> Перечисления.СтавкиНДС.НеНДС
			И (ИспользоватьСтатусыАвансовыхОтчетов
				И Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден
				И Не ПрочиеРасходы[ТекИндекс].Отменено
				ИЛИ Не ИспользоватьСтатусыАвансовыхОтчетов) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Контрагент""';uk='Не заповнена колонка ""Контрагент""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ПрочиеРасходы[ТекИндекс].НомерСтроки, "Контрагент"),
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ОшибкиЗаполненияСтатейРасходов = Новый Структура;
	ОшибкиЗаполненияСтатейРасходов.Вставить("ПрограммнаяПроверка", Истина);
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,
		Новый Структура("ПрочиеРасходы"),
		МассивНепроверяемыхРеквизитов,
		Отказ,
		ОшибкиЗаполненияСтатейРасходов);
		
	Для каждого ОшибкаЗаполненияАналитики Из ОшибкиЗаполненияСтатейРасходов.Ошибки.СписокОшибок Цикл
		Если Не ПрочиеРасходы[ОшибкаЗаполненияАналитики.НомерСтроки].Отменено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОшибкаЗаполненияАналитики.ТекстДляНесколькихОшибок,
					ОшибкаЗаполненияАналитики.НомерСтроки + 1) + НСтр("ru=' списка ""Расходы""';uk=' списку ""Витрати""'"),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", ОшибкаЗаполненияАналитики.НомерСтроки + 1, "АналитикаРасходов"),
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	СуммаИзрасходовано = 0;
	СуммаОтклонено = 0;
	
	Для каждого Расход Из ПрочиеРасходы Цикл
		Если Расход.Отменено Тогда
			СуммаОтклонено = СуммаОтклонено + Расход.Сумма;
		Иначе
			СуммаИзрасходовано = СуммаИзрасходовано + Расход.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	СуммаИзрасходовано = СуммаИзрасходовано + ОплатаПоставщикам.Итог("Сумма");
	
	НДСОбщегоНазначенияСервер.ЗаполнитьНалоговыеНазначенияВТабличныхЧастяхПередЗаписьюДокументаПоступление(
		ЭтотОбъект,
		"ПрочиеРасходы"
	);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Заполнение суммы взаиморасчетов в табличной части "Расшифровка платежа".
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
			Валюта,
			Дата,
			ОплатаПоставщикам);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПрочиеРасходы);
	КонецЕсли;
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(ПрочиеРасходы, "СтатьяРасходов");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.АвансовыйОтчет.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по расчетам с поставщиками.
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по прочим расходам.
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваКонтрагент(ДополнительныеСвойства, Движения, Отказ);
	
	НДСВходящийСервер.ОтразитьНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(ДополнительныеСвойства, Движения, Отказ);
	НДСВходящийСервер.ОтразитьНДСРасчетНалоговогоКредита(ДополнительныеСвойства, Движения, Отказ);
	
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоРасходномуКассовомуОрдеру(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Подразделение КАК Подразделение,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ДенежныеСредства.ЦельВыдачи КАК СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.СуммаОстаток КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС) КАК СтавкаНДС
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(,
	|			ПодотчетноеЛицо = &ПодотчетноеЛицо
	|			И Организация = &Организация
	|			И Валюта = &Валюта) КАК ДенежныеСредства
	|	ПО
	|		Истина
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|");
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация, ПодотчетноеЛицо, Валюта");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", РеквизитыОснования.Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", РеквизитыОснования.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", РеквизитыОснования.Валюта);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить авансовый отчет на основании документа %1';uk='Не потрібно вводити авансовий звіт на підставі документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДокументОснование,
			Неопределено, // Статус
			Выборка.ЕстьОшибкиПроведен);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ПрочиеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСписаниюБезналичныхДенежныхСредств(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Подразделение КАК Подразделение,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ДенежныеСредства.ЦельВыдачи КАК СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.СуммаОстаток КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС) КАК СтавкаНДС
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(,
	|			ПодотчетноеЛицо = &ПодотчетноеЛицо
	|			И Организация = &Организация
	|			И Валюта = &Валюта) КАК ДенежныеСредства
	|	ПО
	|		Истина
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|");
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Организация, ПодотчетноеЛицо, Валюта");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", РеквизитыОснования.Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", РеквизитыОснования.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", РеквизитыОснования.Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить авансовый отчет на основании документа %1';uk='Не потрібно вводити авансовий звіт на підставі документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДокументОснование,
			Неопределено, // Статус
			Выборка.ЕстьОшибкиПроведен);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ПрочиеРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта    = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Подразделение = ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(ПодотчетноеЛицо);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов") Тогда
		Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	Иначе
		Статус = Перечисления.СтатусыАвансовогоОтчета.Подготовлен;
	КонецЕсли;
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(ПрочиеРасходы, "СтатьяРасходов");
    
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ПрочиеРасходы, СтруктураДействий, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В ( ВЫБРАТЬ
	|			ОплатаПоставщикам.Заказ КАК ЗаказПоставщику
	|		ИЗ
	|			Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
	|		ГДЕ
	|			ОплатаПоставщикам.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			Заказ)
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.ОплатаПоставщикам.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЗависимыхЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовПоставщикам", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

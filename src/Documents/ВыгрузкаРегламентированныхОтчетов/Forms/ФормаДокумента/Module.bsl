
&НаКлиенте
Процедура ПутьВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда	
		НовыйПутьВыгрузки = РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузки(ПутьВыгрузки);
		Если НовыйПутьВыгрузки = Ложь Тогда
			Возврат;
		Иначе
			ПутьВыгрузки = НовыйПутьВыгрузки;
		КонецЕсли;
	#КонецЕсли 
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// ПолучитьРеквизитыДокумента()
//
&НаСервере
Процедура ПолучитьРеквизитыДокумента(Док, РеквизитыДокумента)
	
	ДокОбъект = Док.ПолучитьОбъект();
	
	РеквизитыДокумента.Организация         = ДокОбъект.Организация;
	
	Если РеквизитыДокумента.Свойство("ДатаНачала") Тогда
	
		РеквизитыДокумента.ДатаНачала         = ДокОбъект.ДатаНачала;	
		РеквизитыДокумента.ДатаОкончания      = ДокОбъект.ДатаОкончания;
		РеквизитыДокумента.Периодичность      = ДокОбъект.Периодичность;
		РеквизитыДокумента.ВыбраннаяФорма     = ДокОбъект.ВыбраннаяФорма;
		РеквизитыДокумента.ИсточникОтчета     = ДокОбъект.ИсточникОтчета;
	
	КонецЕсли;
	
КонецПроцедуры // ПолучитьРеквизитыДокумента()


// Экспортная функция, вызываемая из регламентированных отчетов, в которых предусмотрена выгрузка.
// Функция формирует тексты выгрузки, сохраняет их в указанную пользователем папку.
// 
// Параметры:
// ДокументыОснования - список значений, содержащий перечень документов-оснований для выгрузки.
// ТекстВыгрузки - переменная, в которую помещается текст выгрузки.
// 
// Возвращает Истина, если выгрузка прошла успешно. В противном случае возвращает Ложь.
//
&НаКлиенте
Функция СформироватьИЗаписать(ДокументыОснования, КаталогСохранения = Неопределено, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина) Экспорт
		
	// реквизиты шапки берем из первого документа, если такой есть
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПервыйДок							  = ДокументыОснования.Получить(0).Значение;
	Дата								  = ТекущаяДата();
	
	Объект.Основание					  = ПервыйДок;
	ЗаполнитьИнформациюОбОтчете();	
	
	РеквизитыДокумента = Новый Структура();
	РеквизитыДокумента.Вставить("Организация");
	ПолучитьРеквизитыДокумента(Объект.Основание, РеквизитыДокумента);		
	
	Объект.Организация					  = РеквизитыДокумента.Организация;
	
	СформироватьТаблицуВыгрузки();
	
	ПолучитьДанныеДляВыгрузки();
	




	
	Возврат Истина;
	
КонецФункции


// ПриСозданииНаСервере()
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.СсылкаНаОбъект) Тогда
		ЗначениеВРеквизитФормы(Параметры.СсылкаНаОбъект.ПолучитьОбъект(), "Объект");
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ВыгрузкаРегламентированныхОтчетов"));
				
	Если ДокументОбъект.ЭтоНовый() Тогда
		
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
		Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
			Объект.Организация = ОргПоУмолчанию;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.C_DOC_CNT) Тогда
			Объект.C_DOC_CNT = 1;
		КонецЕсли;
		
		Объект.ВыгружатьПакетом = Истина;	
		
	КонецЕсли;
	
	ЗаполнитьИнформациюОбОтчете();
	
	Элементы.Организация.ТолькоПросмотр = НЕ РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
		
	ВерсииФорматовВыгрузки = Новый Структура;
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиГНСУ_XML", Перечисления.ВерсииФорматовВыгрузки.ГНСУ_XML);
	
	СохраненныйПутьВыгрузки = ХранилищеОбщихНастроек.Загрузить("РегламентированныеОтчеты_ПутьВыгрузки");
	Если ЗначениеЗаполнено(СохраненныйПутьВыгрузки) Тогда
		ПутьВыгрузки = СохраненныйПутьВыгрузки;
	КонецЕсли;
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Отказ Тогда
		ХранилищеОбщихНастроек.Сохранить("РегламентированныеОтчеты_ПутьВыгрузки",, ПутьВыгрузки);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкифВыгрузкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Выгрузки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.фВыгрузка = Истина Тогда
	
		ТекущиеДанные.Текст = "";	
	
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Декларация = Истина Тогда
		ТекущиеДанные.Приложение = (ТекущиеДанные.фВыгрузка = 1 ИЛИ ТекущиеДанные.фВыгрузка = Истина);
	Иначе 
		Если Объект.ВыгружатьПакетом Тогда
			ТекущиеДанные.фВыгрузка = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='При пакетной выгрузке - обязательно выгружается Декларация!';uk='Для пакетного вивантаження - завжди вивантажується Декларація!'");
			Сообщение.Сообщить();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкиДекларацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Выгрузки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОднойДекларации = Объект.Выгрузки.НайтиСтроки(Новый Структура("НомерВИерархии", ТекущиеДанные.НомерВИерархии));
	Для каждого ТекСтрока Из СтрокиОднойДекларации Цикл
		Если ТекСтрока = ТекущиеДанные Тогда
			ТекСтрока.Декларация = Истина;
			ТекСтрока.Приложение = Ложь;
			ТекСтрока.фВыгрузка  =  Истина;
		Иначе
			ТекСтрока.Декларация = Ложь;
			Если НЕ ТекСтрока.Приложение Тогда  //если нет признака, что это - не выгружаем
				ТекСтрока.фВыгрузка  =  ЛОЖЬ;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкиПриложениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Выгрузки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Приложение = ?(ТекущиеДанные.Декларация, Ложь, ТекущиеДанные.Приложение);
	Если НЕ ТекущиеДанные.Приложение И НЕ ТекущиеДанные.Декларация Тогда  //если нет признака, что это - не выгружаем
		ТекущиеДанные.фВыгрузка  =  ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьПакетомПриИзменении(Элемент)
	
	ПроставитьФлажкиДекларацияПриложение();
	
КонецПроцедуры

// УстановитьФлажки()
//
&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры // УстановитьФлажки()


// СнятьФлажки()
//
&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры // СнятьФлажки()


// УстановитьСнятьФлажки()
//
&НаСервере
Процедура УстановитьСнятьФлажки(Пометка)
	
	Для Каждого Строка Из Объект.Выгрузки Цикл
		Если Строка.Декларация и Объект.ВыгружатьПакетом Тогда
			Строка.фВыгрузка = Истина;
		ИначеЕсли НЕ Строка.фВыгрузка = Пометка Тогда
			Строка.фВыгрузка = Пометка;
			Строка.ИмяФайла	= "";
			Строка.Текст	= "";
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;	
	
КонецПроцедуры // УстановитьСнятьФлажки()


// СформироватьТекстыВыгрузки()
//
&НаКлиенте
Процедура СформироватьТекстыВыгрузки(Команда)
	
	ПолучитьДанныеДляВыгрузки();
	
	СформироватьТекстыВыгрузкиКлиент(Истина);
	
	Если ОшибкаВыгрузки <> Истина Тогда
		ПоказатьПредупреждение(,НСтр("ru='Формирование текстов выгрузки успешно завершено.';uk='Формування текстів вивантаження успішно завершено.'"),1);
	КонецЕсли;
	
КонецПроцедуры // СформироватьТекстыВыгрузки()

&НаКлиенте
Процедура ПолучитьДанныеДляВыгрузки()
	
	Если ЭтаФорма.ВладелецФормы = Неопределено ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		
		РеквизитыДокумента = Новый Структура();
		РеквизитыДокумента.Вставить("ДатаНачала");
		РеквизитыДокумента.Вставить("ДатаОкончания");
		РеквизитыДокумента.Вставить("Периодичность");
		РеквизитыДокумента.Вставить("Организация");
		РеквизитыДокумента.Вставить("ВыбраннаяФорма");
		РеквизитыДокумента.Вставить("ИсточникОтчета");

		
		ПолучитьРеквизитыДокумента(Объект.Основание, РеквизитыДокумента);		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоДня(РеквизитыДокумента.ДатаНачала));
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецДня(РеквизитыДокумента.ДатаОкончания));
		ПараметрыФормы.Вставить("мПериодичность",           РеквизитыДокумента.Периодичность);
		ПараметрыФормы.Вставить("Организация",              РеквизитыДокумента.Организация);
		ПараметрыФормы.Вставить("мВыбраннаяФорма",          РеквизитыДокумента.ВыбраннаяФорма);
		ПараметрыФормы.Вставить("мСохраненныйДок", 			Объект.Основание);
		
		Попытка
			ТекФорма = ПолучитьФорму("Отчет." + РеквизитыДокумента.ИсточникОтчета + ".Форма." + РеквизитыДокумента.ВыбраннаяФорма, ПараметрыФормы, , Объект.Ссылка);
		Исключение
			ПоказатьПредупреждение(,НСтр("ru='Внимание! Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';uk='Увага! Застаріла редакція форми звіту не підтримується поточною версією конфігурації.'"));
			Возврат;
		КонецПопытки;
		
		ТекФорма.СтруктураРеквизитовФормы.Организация = РеквизитыДокумента.Организация;
		
	Иначе
		ТекФорма = ЭтаФорма.ВладелецФормы;
	КонецЕсли;	
		
	АдресВХранилищеСтруктурыСхем	= ТекФорма.СоздатьСтруктуруСоСхемамиВыгрузки();
	АдресВХранилищеДанныхОтчета 	= ТекФорма.СоздатьДанныеОтчетаДляВыгрузки();
	
КонецПроцедуры 

// По переданной схеме XML (в формате ГНАУ) определяет наличие в теле отчета полей, находящихся внутри группы Choice. 
// Только одно поле из данной группы должно быть заполнено. Сама группа может быть не заполнена. Внутри группы могут
// быть определены обязательные группы полей вместо одного поля, то есть, обязательными должны быть (например):
//    или Поле1
//    или Поле2 + Поле4
//    или Поле3 + Поле5
//
// Параметры
//  <Схема>   - СхемаXML в элементе DBody которого ищутся элементы внутри конструкции Choice
//
// Возвращаемое значение:
//   <ДеревоЗначений>   - В Дереве две колонки. "Обязательное" и "Имя". Строки певрого уровня - группы элементов внутри Choice. Работает признак
//							"Обязательное". Строки второго уровня - имена полей или группы с именами полей (строки третьего уровня).
//
&НаСервере
Функция ПолучитьДеревоОбязательныхПолейВГруппахВыбораСхемыXMLГНАУ(Схема)
	
	ДеревоПроверки = Новый ДеревоЗначений;
	ДеревоПроверки.Колонки.Добавить("Обязательное");
	ДеревоПроверки.Колонки.Добавить("Имя");
	ДеревоПроверки.Колонки.Добавить("Заполнено");
	
	// находим описание тела отчета
	ТелоОтчета = Неопределено;
	Для Инд = 0 По Схема.Компоненты.Количество() - 1 Цикл
		
		КомпонентаСхемы = Схема.Компоненты.Получить(Инд);
		Если  КомпонентаСхемы.ТипКомпоненты = ТипКомпонентыXS.ОпределениеСоставногоТипа
			И Врег(КомпонентаСхемы.Имя)     = ВРег("DBody") Тогда
			
			ТелоОтчета = КомпонентаСхемы;	
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ТелоОтчета = Неопределено Тогда
		Возврат ДеревоПроверки;
	КонецЕсли;	
	
	// список полей тела отчета
	СписокПолей = ТелоОтчета.Компоненты[0].Часть.Фрагменты;
	Для Каждого ЭлементСпискаПолей Из СписокПолей Цикл
		
		Если  ЭлементСпискаПолей.Часть.ТипКомпоненты   = ТипКомпонентыXS.ГруппаМодели 
			И ЭлементСпискаПолей.Часть.ВидГруппы	   = ВидГруппыМоделиXS.Выбор Тогда
			
			ПроверяемаяГруппа = ДеревоПроверки.Строки.Добавить();
			Если ЗначениеЗаполнено(ЭлементСпискаПолей.МинимальноВходит)
				ИЛИ (ЭлементСпискаПолей.МинимальноВходит= Неопределено и ЭлементСпискаПолей.МаксимальноВходит = Неопределено) Тогда
				ПроверяемаяГруппа.Обязательное = Истина;
			КонецЕсли;
			
			Для каждого Поле Из ЭлементСпискаПолей.Часть.Компоненты Цикл
				
				Если ТипЗнч(Поле.Часть) = Тип("ОбъявлениеЭлементаXS") Тогда
					
					ЭлеменетГруппы 	   = ПроверяемаяГруппа.Строки.Добавить();	
					ЭлеменетГруппы.Имя = Поле.Часть.Имя;
					
				Иначе	
					
					// сделаем строку еще одной вложенности, т.к. это последовательность элементов в группе choice
					ГруппаПроверяемойГруппы = ПроверяемаяГруппа.Строки.Добавить();	
					
					Для каждого Поле1 Из Поле.Часть.Компоненты Цикл
						Если ЗначениеЗаполнено(Поле1.МинимальноВходит)
							ИЛИ (Поле1.МинимальноВходит= Неопределено и Поле1.МаксимальноВходит = Неопределено)  Тогда
							ЭлеменетГруппы 	   = ГруппаПроверяемойГруппы.Строки.Добавить();	
							ЭлеменетГруппы.Имя = Поле1.Часть.Имя;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
		                   
	КонецЦикла;

	Возврат  ДеревоПроверки;
	
КонецФункции	

&НаСервере
Процедура СформироватьТекстВыгрузкиСервер_ГНСУ_XML(Параметры)
	
	ИмяСхемы 				= Параметры.ИмяСхемы;
	Префикс 			    = Параметры.Префикс;
	НазваниеСтраницыПанели  = Параметры.НазваниеСтраницыПанели;
	
	// получим описание полей отчета для выгрузки
	СхемаОтчета = ПолучитьСхемуОтчета(ИмяСхемы);
	
	// для проверки флажков ("один из нескольких") получим дерево с именами таких полей
	ДеревоОбязательныхПолейВГруппахВыбора = ЗаполнитьСтруктуруПроверкиОбязательныхПолейВГруппахВыбора(ИмяСхемы);	
	
	Данные = ПолучитьИзВременногоХранилища(АдресВХранилищеДанныхОтчета);
	
	ДанныеДляОтчета = Новый Структура;
	Если Данные.ДанныеОтчета.Свойство(НазваниеСтраницыПанели) Тогда
		ДанныеДляОтчета = Данные.ДанныеОтчета[НазваниеСтраницыПанели];
	КонецЕсли;
	
	ДанныеМногострочек = Данные.ДанныеОтчета;
	
	СлужебныеДанные = Новый Структура;
	Если Данные.ДанныеОтчета.Свойство("СлужебныеДанные") Тогда
		СлужебныеДанные = Данные.ДанныеОтчета["СлужебныеДанные"];
	КонецЕсли;
	
	СлужебныеДанные.Вставить("LINKED_DOCS", Параметры.LINKED_DOCS);	
	
	// формируем текст выгрузки
	ТекстОтчета = Новый ЗаписьXML;
	ТекстОтчета.УстановитьСтроку(Новый ПараметрыЗаписиXML("windows-1251", "1.0", Истина));
	ТекстОтчета.ЗаписатьОбъявлениеXML();
	
	ТекстОтчета.ЗаписатьНачалоЭлемента("DECLAR");
		ТекстОтчета.ЗаписатьНачалоАтрибута("xmlns:xsi"); 					ТекстОтчета.ЗаписатьТекст("http://www.w3.org/2001/XMLSchema-instance"); ТекстОтчета.ЗаписатьКонецАтрибута();
		ТекстОтчета.ЗаписатьНачалоАтрибута("xsi:noNamespaceSchemaLocation");ТекстОтчета.ЗаписатьТекст(ИмяСхемы+".xsd");								ТекстОтчета.ЗаписатьКонецАтрибута();
		
		ТекстОтчета.ЗаписатьНачалоЭлемента("DECLARHEAD");
		ЗаполнитьПоляРазделаВыгрузкиXML(ТекстОтчета, "DHead", НазваниеСтраницыПанели, ИмяСхемы, Префикс, , ДанныеДляОтчета, СлужебныеДанные,  СхемаОтчета);
		ТекстОтчета.ЗаписатьКонецЭлемента();
	
		ТекстОтчета.ЗаписатьНачалоЭлемента("DECLARBODY");
		ЗаполнитьПоляРазделаВыгрузкиXML(ТекстОтчета, "DBody", НазваниеСтраницыПанели, ИмяСхемы, Префикс, ДанныеМногострочек, ДанныеДляОтчета,  СлужебныеДанные, СхемаОтчета, ДеревоОбязательныхПолейВГруппахВыбора);
		ТекстОтчета.ЗаписатьКонецЭлемента();
		
	ТекстОтчета.ЗаписатьКонецЭлемента();
	
	// запишем полученные данные
	Параметры.ТекстВыгрузкиВXML = ТекстОтчета.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФайлаВыгрузкиГСНУ_XML(ИмяСхемы, НазваниеСтраницыПанели, Префикс)
	
	Данные = ПолучитьИзВременногоХранилища(АдресВХранилищеДанныхОтчета);
	
	ДанныеДляОтчета = Новый Структура;
	Если Данные.ДанныеОтчета.Свойство(НазваниеСтраницыПанели) Тогда
		ДанныеДляОтчета = Данные.ДанныеОтчета[НазваниеСтраницыПанели];
	КонецЕсли;

	СлужебныеДанные = Новый Структура;
	Если Данные.ДанныеОтчета.Свойство("СлужебныеДанные") Тогда
		СлужебныеДанные = Данные.ДанныеОтчета["СлужебныеДанные"];
	КонецЕсли;
	Если НЕ СлужебныеДанные.Свойство("D_FILL") Тогда
	    СлужебныеДанные.Вставить("D_FILL",     Объект.Дата);
	КонецЕсли;
	Если НЕ СлужебныеДанные.Свойство("C_DOC_CNT") Тогда
		СлужебныеДанные.Вставить("C_DOC_CNT",  Объект.C_DOC_CNT);
	Иначе
		Объект.C_DOC_CNT = СлужебныеДанные.C_DOC_CNT;
	КонецЕсли;
	Если НЕ СлужебныеДанные.Свойство("C_DOC_TYPE") Тогда
		СлужебныеДанные.Вставить("C_DOC_TYPE", Объект.C_DOC_TYPE);
	Иначе	
		Объект.C_DOC_TYPE = СлужебныеДанные.C_DOC_TYPE;
	КонецЕсли;
	
	// сформируем имя файла выгрузки XML
	Возврат ПолучитьИмяФайлаВыгрузкиXML(ИмяСхемы, Префикс, ДанныеДляОтчета,  СлужебныеДанные);

КонецФункции 

&НаСервере
Процедура ВыделитьНомерСтраницыИзНазванияРаздела(Раздел, Страница)
	
	Позиция_ = Найти(Раздел, "_");
	Если Позиция_ > 0 Тогда
		
		ПолныйАдрес = Раздел;
		Раздел   = Лев(ПолныйАдрес, Позиция_ - 1);	
	    Страница = Сред(ПолныйАдрес, Позиция_+ 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляРазделаВыгрузкиXML(ТекстОтчета, ИмяРаздела, НазваниеСтраницыПанели, ИмяСхемы, Префикс = "", ДанныеМногострочек = Неопределено, ДанныеПриортиет1,  ДанныеПриортиет2 = Неопределено, СхемаОтчета, ДеревоОбязательныхПолейВГруппахВыбора = Неопределено);
	
	ТипОбъектаВыгрузки = СхемаОтчета.Получить(ИмяРаздела);
	Если НЕ ТипОбъектаВыгрузки = Неопределено Тогда
		
		Для каждого ВыгружаемоеПоле Из ТипОбъектаВыгрузки.Свойства Цикл
			
			Имя 	= ВыгружаемоеПоле.Имя;
			
			Тип 	= ВыгружаемоеПоле.Тип;
			ИмяТипа = Тип.Имя;
			
			ЭтоЯчейкаТаблицы =   (ТипЗнч(Тип) = Тип("ТипОбъектаXDTO"))
							И НЕ (Тип.Свойства.Получить("ROWNUM") = Неопределено);
			
			ВозможноПустое = ВыгружаемоеПоле.ВозможноПустое = Истина; 
			Обязательное   = НЕ (ВозможноПустое ИЛИ (ВыгружаемоеПоле.НижняяГраница = 0));
			
			ФиксированноеЗначение = ?(ВыгружаемоеПоле.Фиксированное, ВыгружаемоеПоле.ЗначениеПоУмолчанию.Значение, Неопределено);
			
			Если НЕ ФиксированноеЗначение = Неопределено Тогда
				
				ТекстОтчета.ЗаписатьНачалоЭлемента(Имя);	
					ТекстОтчета.ЗаписатьТекст(ФиксированноеЗначение);
			    ТекстОтчета.ЗаписатьКонецЭлемента();	
				
			ИначеЕсли Имя = "LINKED_DOCS" Тогда	
				
				ЗначениеИзОтчета = ПолучитьЗначениеИзОтчета(Имя, Префикс, , ДанныеПриортиет1, ДанныеПриортиет2);
				ТекстОтчета.ЗаписатьБезОбработки(ЗначениеИзОтчета);
				
			ИначеЕсли НЕ ЭтоЯчейкаТаблицы Тогда
			
				ЗначениеИзОтчета = ПолучитьЗначениеИзОтчета(Имя, Префикс, , ДанныеПриортиет1, ДанныеПриортиет2);
				
				ОписаниеВозможнойОшибки = "";
				ЗначениеXML = ПреобразоватьТипXML(ЗначениеИзОтчета, Тип.Имя, ОписаниеВозможнойОшибки);
				
				// проверка на обязательное заполнение
				Если Обязательное И НЕ ЗначениеЗаполнено(ЗначениеXML) Тогда
					
					СтрокаОшибки = ТаблицаСообщений.Добавить();
					СтрокаОшибки.ОтчетДок 	= Объект.Основание;
					СтрокаОшибки.Отчет 		= ИмяСхемы;
					СтрокаОшибки.Раздел	 	= НазваниеСтраницыПанели; 
					СтрокаОшибки.Страница 	= "";
					ВыделитьНомерСтраницыИзНазванияРаздела(СтрокаОшибки.Раздел, СтрокаОшибки.Страница);
					СтрокаОшибки.СтрокаПП 	= Префикс;
					СтрокаОшибки.ИмяЯчейки 	= Имя;
					СтрокаОшибки.Графа 		= "";
					СтрокаОшибки.Описание 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Показатель <%1> должен быть заполнен!';uk='Показник <%1> повинен бути заповнений!'"),Имя);
					
					ОшибкаВыгрузки = Истина;
					
				ИначеЕсли ЗначениеЗаполнено(ЗначениеXML) Тогда		
					// проверка на ошибочное значение
					Попытка 
						Если ТипЗнч(Тип) = Тип("ТипЗначенияXDTO") Тогда
							Тип.Проверить(ЗначениеXML); 
						КонецЕсли;
					Исключение	
						
						СтрокаОшибки = ТаблицаСообщений.Добавить();
						СтрокаОшибки.ОтчетДок 	= Объект.Основание;
						СтрокаОшибки.Отчет 		= ИмяСхемы;
						СтрокаОшибки.Раздел	 	= НазваниеСтраницыПанели;
						СтрокаОшибки.Страница 	= "";
						ВыделитьНомерСтраницыИзНазванияРаздела(СтрокаОшибки.Раздел, СтрокаОшибки.Страница);
						СтрокаОшибки.СтрокаПП 	= Префикс;
						СтрокаОшибки.ИмяЯчейки 	= Имя;
						СтрокаОшибки.Графа 		= "";
						СтрокаОшибки.Описание 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверное значение показателя  <%1>: %2. %3';uk='Невірне значення показника  <%1>: %2. %3'"), Имя, ЗначениеXML, ОписаниеВозможнойОшибки);
						
						ОшибкаВыгрузки = Истина;
						
					КонецПопытки;
				КонецЕсли;
				
				// подготовка данных для проверки обязательности заполнения элементов в группах
				Если НЕ ДеревоОбязательныхПолейВГруппахВыбора = Неопределено Тогда
					ПроверяемоеПоле = ДеревоОбязательныхПолейВГруппахВыбора.Строки.Найти(Имя, "Имя", Истина);
					Если НЕ ПроверяемоеПоле = Неопределено Тогда
						ПроверяемоеПоле.Заполнено    = ?(ЗначениеЗаполнено(ЗначениеXML), 1, 0);
						// внутри чойса могут быть необязательные поля
						ПроверяемоеПоле.Обязательное = Обязательное;
					КонецЕсли;	
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ЗначениеXML) Тогда
					ТекстОтчета.ЗаписатьНачалоЭлемента(Имя);	
						ТекстОтчета.ЗаписатьТекст(ЗначениеXML);
				    ТекстОтчета.ЗаписатьКонецЭлемента();	
				ИначеЕсли Обязательное ИЛИ Имя = "SOFTWARE" Тогда	
					ТекстОтчета.ЗаписатьНачалоЭлемента(Имя);	
						ТекстОтчета.ЗаписатьНачалоАтрибута("xsi:nil");ТекстОтчета.ЗаписатьТекст("true"); ТекстОтчета.ЗаписатьКонецАтрибута();
				    ТекстОтчета.ЗаписатьКонецЭлемента();	
				КонецЕсли;
				
			Иначе // это табличный показатель
				
				Инд = 1;
				Пока Инд <= ВыгружаемоеПоле.ВерхняяГраница + 1 Цикл
					
					НомерСтрокиТаблицыСтр = Формат(Инд, "ЧГ=");
					
					ПолеНайдено = Ложь;
					ЗначениеИзОтчета = ПолучитьЗначениеИзОтчета(Имя + "_" + НомерСтрокиТаблицыСтр, Префикс, ДанныеМногострочек, ДанныеПриортиет1, ДанныеПриортиет2, ПолеНайдено);
					Если ПолеНайдено = Ложь Тогда
						Прервать;
					КонецЕсли;		
					
					ОписаниеВозможнойОшибки = "";
					ЗначениеXML = ПреобразоватьТипXML(ЗначениеИзОтчета, Тип.Имя, ОписаниеВозможнойОшибки);
					
					// проверка на обязательное заполнение
					Если Обязательное И НЕ ЗначениеЗаполнено(ЗначениеXML) Тогда
						
						СтрокаОшибки = ТаблицаСообщений.Добавить();
						СтрокаОшибки.ОтчетДок 	= Объект.Основание;
						СтрокаОшибки.Отчет 		= ИмяСхемы;
						СтрокаОшибки.Раздел	 	= НазваниеСтраницыПанели;
						СтрокаОшибки.Страница 	= "";
						ВыделитьНомерСтраницыИзНазванияРаздела(СтрокаОшибки.Раздел, СтрокаОшибки.Страница);
						СтрокаОшибки.СтрокаПП 	= Префикс;
						СтрокаОшибки.ИмяЯчейки 	= Имя + "_" + НомерСтрокиТаблицыСтр;
						СтрокаОшибки.Графа 		= "";
						СтрокаОшибки.Описание 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Показатель <%1> должен быть заполнен!';uk='Показник <%1> повинен бути заповнений!'"), Имя);
						
						ОшибкаВыгрузки = Истина;
						
					ИначеЕсли ЗначениеЗаполнено(ЗначениеXML) Тогда	
						// проверка на ошибочное значение
						Попытка 
							
							БазовоеСвойство = Тип.Свойства.Получить("__content");
							Если НЕ БазовоеСвойство = Неопределено Тогда
								БазовоеСвойство.Тип.Проверить(ЗначениеXML); 
							КонецЕсли;
							
						Исключение	

							СтрокаОшибки = ТаблицаСообщений.Добавить();
							СтрокаОшибки.ОтчетДок 	= Объект.Основание;
							СтрокаОшибки.Отчет 		= ИмяСхемы;
							СтрокаОшибки.Раздел	 	= НазваниеСтраницыПанели;
							СтрокаОшибки.Страница 	= "";
							ВыделитьНомерСтраницыИзНазванияРаздела(СтрокаОшибки.Раздел, СтрокаОшибки.Страница);
							СтрокаОшибки.СтрокаПП 	= Префикс;
							СтрокаОшибки.ИмяЯчейки 	= Имя + "_" + НомерСтрокиТаблицыСтр;
							СтрокаОшибки.Графа 		= "";
							СтрокаОшибки.Описание 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверное значение показателя  <%1>: %2. %3';uk='Невірне значення показника  <%1>: %2. %3'"), Имя, ЗначениеXML, ОписаниеВозможнойОшибки);
							
							ОшибкаВыгрузки = Истина;
							
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗначениеXML) Тогда
						ТекстОтчета.ЗаписатьНачалоЭлемента(Имя);	
							ТекстОтчета.ЗаписатьНачалоАтрибута("ROWNUM");ТекстОтчета.ЗаписатьТекст(НомерСтрокиТаблицыСтр); ТекстОтчета.ЗаписатьКонецАтрибута();
							ТекстОтчета.ЗаписатьТекст(ЗначениеXML);
					    ТекстОтчета.ЗаписатьКонецЭлемента();	
					//ИначеЕсли Обязательное Тогда	
					ИначеЕсли Обязательное ИЛИ ВыгружаемоеПоле.НижняяГраница > 0 Тогда	
						ТекстОтчета.ЗаписатьНачалоЭлемента(Имя);	
							ТекстОтчета.ЗаписатьНачалоАтрибута("ROWNUM");ТекстОтчета.ЗаписатьТекст(НомерСтрокиТаблицыСтр); ТекстОтчета.ЗаписатьКонецАтрибута();
							ТекстОтчета.ЗаписатьНачалоАтрибута("xsi:nil");ТекстОтчета.ЗаписатьТекст("true"); ТекстОтчета.ЗаписатьКонецАтрибута();
					    ТекстОтчета.ЗаписатьКонецЭлемента();	
					КонецЕсли;
					
					Инд = Инд + 1;
					
				КонецЦикла;
				
				Если Инд > ВыгружаемоеПоле.ВерхняяГраница + 1 Тогда

					СтрокаОшибки = ТаблицаСообщений.Добавить();
					СтрокаОшибки.ОтчетДок 	= Объект.Основание;
					СтрокаОшибки.Отчет 		= ИмяСхемы;
					СтрокаОшибки.Раздел	 	= НазваниеСтраницыПанели;
					СтрокаОшибки.Страница 	= "";
					ВыделитьНомерСтраницыИзНазванияРаздела(СтрокаОшибки.Раздел, СтрокаОшибки.Страница);
					СтрокаОшибки.СтрокаПП 	= Префикс;
					СтрокаОшибки.ИмяЯчейки 	= Имя;
					СтрокаОшибки.Графа 		= "";
					СтрокаОшибки.Описание 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Превышено максимальное количество строк (%1)!';uk='Перевищено максимальну кількість рядків (%1)!'"), Строка(ВыгружаемоеПоле.ВерхняяГраница + 1));
					
					ОшибкаВыгрузки = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ДеревоОбязательныхПолейВГруппахВыбора = Неопределено Тогда
			
			Для каждого Группа Из ДеревоОбязательныхПолейВГруппахВыбора.Строки Цикл
				
				Обязательная = Группа.Обязательное;
				
				КоличествоЗаполненныхПоказателей = 0;
				КоличествоОбязательныхПоказателей = 0;
				ЕстьОшибка = Ложь;
				
				СписокРеквизитов = "";
				Для каждого ПоказательГруппы Из Группа.Строки Цикл
				
					Если ПоказательГруппы.Строки.Количество() = 0 Тогда
						// это обычный показатель
					    КоличествоЗаполненныхПоказателей  = КоличествоЗаполненныхПоказателей  + ПоказательГруппы.Заполнено; 
						КоличествоОбязательныхПоказателей = КоличествоОбязательныхПоказателей + ПоказательГруппы.Обязательное;
						
						СписокРеквизитов = СписокРеквизитов + ", " + ПоказательГруппы.Имя;
						
					Иначе
						
						// здесь находится последовательность показателей, должны быть заполнены или все сразу или не заполнены вообще
						КоличествоПоследовательныхРеквизитов   = ПоказательГруппы.Строки.Количество();
						ЗаполненоПоследовательныхРеквизитов    = 0;
						ЕстьОбязательное = ложь;
						
						СписокРеквизитов = СписокРеквизитов + "{";
						Для каждого ПоследовательныйРеквизит Из ПоказательГруппы.Строки Цикл
							
							ЗаполненоПоследовательныхРеквизитов 	= ЗаполненоПоследовательныхРеквизитов 	 + ПоследовательныйРеквизит.Заполнено; 
							
							СписокРеквизитов = СписокРеквизитов + ", " + ПоследовательныйРеквизит.Имя;
							
							Если ПоследовательныйРеквизит.Обязательное Тогда
								ЕстьОбязательное = Истина;
							КонецЕсли;
							
						КонецЦикла;
						СписокРеквизитов = СписокРеквизитов + "}";
						
						Если ЕстьОбязательное Тогда
							КоличествоОбязательныхПоказателей = КоличествоОбязательныхПоказателей + 1;	
						КонецЕсли;
						
						Если ЗаполненоПоследовательныхРеквизитов <> 0 Тогда
							
							КоличествоЗаполненныхПоказателей = КоличествоЗаполненныхПоказателей + 1;
							
							Если ЗаполненоПоследовательныхРеквизитов <> КоличествоПоследовательныхРеквизитов Тогда
								ЕстьОшибка = Истина;
							КонецЕсли;
						
						КонецЕсли;
						
					КонецЕсли;
				
				КонецЦикла;
				
				// если внутри чойса все необязательные параметры, то сам чойс становится не обязательным
				Если КоличествоОбязательныхПоказателей = 0 Тогда
					Обязательная = Ложь;
				КонецЕсли;
				
				СписокРеквизитов = Сред(СписокРеквизитов, 3); // обрубаем лишнюю запятую
				
				Если КоличествоЗаполненныхПоказателей = 0 И Обязательная Тогда
					ЕстьОшибка = Истина;
				ИначеЕсли КоличествоЗаполненныхПоказателей > 1 Тогда	
				    ЕстьОшибка = Истина;
				КонецЕсли;
				
				Если ЕстьОшибка Тогда
					
					ОшибкаВыгрузки = Истина;
					
					Для каждого ПоказательГруппы Из Группа.Строки Цикл
					
						Если ПоказательГруппы.Строки.Количество() = 0 Тогда
					
							СтрокаОшибки = ТаблицаСообщений.Добавить();
							СтрокаОшибки.ОтчетДок 	= Объект.Основание;
							СтрокаОшибки.Отчет 		= ИмяСхемы;
							СтрокаОшибки.Раздел	 	= НазваниеСтраницыПанели;
							СтрокаОшибки.Страница 	= "";
							ВыделитьНомерСтраницыИзНазванияРаздела(СтрокаОшибки.Раздел, СтрокаОшибки.Страница);
							СтрокаОшибки.СтрокаПП 	= Префикс;
							СтрокаОшибки.ИмяЯчейки 	= ПоказательГруппы.Имя;
							СтрокаОшибки.Графа 		= "";
							СтрокаОшибки.Описание 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не верно заполнена группа показателей: %1 (или ни один или несколько вместо одного)';uk='Не вірно заповнена група показників: %1 (або жоден або кілька замість одного)'"), СписокРеквизитов);
							
						Иначе
							
							Для каждого ПоследовательныйРеквизит Из ПоказательГруппы.Строки Цикл
					
								СтрокаОшибки = ТаблицаСообщений.Добавить();
								СтрокаОшибки.ОтчетДок 	= Объект.Основание;
								СтрокаОшибки.Отчет 		= ИмяСхемы;
								СтрокаОшибки.Раздел	 	= НазваниеСтраницыПанели;
								СтрокаОшибки.Страница 	= "";
								ВыделитьНомерСтраницыИзНазванияРаздела(СтрокаОшибки.Раздел, СтрокаОшибки.Страница);
								СтрокаОшибки.СтрокаПП 	= Префикс;
								СтрокаОшибки.ИмяЯчейки 	= ПоследовательныйРеквизит.Имя;
								СтрокаОшибки.Графа 		= "";
								СтрокаОшибки.Описание 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не верно заполнена группа показателей: %1 (не заполнен ни один либо сразу несколько вместо одного)';uk='Не вірно заповнена група показників: %1 (не заповнений жоден або відразу кілька замість одного)'"), СписокРеквизитов);
					
							КонецЦикла;
							
						КонецЕсли;
					
					КонецЦикла;
					
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьТипXML(Значение, Тип, ОписаниеОшибки = "")

	Результат = XMLСтрока(Значение);
	
	фОбработано = 1;
	
	Если ВРег(Тип) = ВРег("DGMonth") 
	 ИЛИ ВРег(Тип) = ВРег("MonthColumn")
	 ИЛИ ВРег(Тип) = ВРег("DGMonth0") Тогда
	 
		 //<!--Загальний тип "Місяць"-->
		//<!--Загальний тип "Місяць в колонці"-->
		Если НЕ ЗначениеЗаполнено(Значение) ИЛИ Значение = "0" Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СокрЛП(Значение);
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧГ=0");
		ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
			Результат = Месяц(Значение);
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;			
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 12 (номер месяца)';uk='Значення не є цілим числом від 1 до 12 (номер місяця)'");					
	ИначеЕсли ВРег(Тип) = ВРег("DG0Month") Тогда
	 
		//<!-- Загальний тип "Місяц з нолем на початку"
		Если НЕ ЗначениеЗаполнено(Значение) ИЛИ Значение = "0" Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СокрЛП(Значение);
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
		ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
			Результат = Формат(Месяц(Значение), "ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;			
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 12 (номер месяца)';uk='Значення не є цілим числом від 1 до 12 (номер місяця)'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGPType") Тогда
		
		// тип периода, значение от 1 до 5
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе
			Результат = СокрЛП(Формат(Значение,"ЧЦ=1; ЧДЦ=0"));	
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 5 (код периода)';uk='Значення не є цілим числом від 1 до 5 (код періоду)'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGSTAN")
		ИЛИ ВРег(Тип) = ВРег("TOColumn")Тогда
		
		//<!--Загальний тип "Код Стан документа (1, 2, 3) (1-звітний документ 2-новий звітний документ 3-уточнюючий документ)"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = СокрЛП(Формат(Значение,"ЧЦ=1; ЧДЦ=0"));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 3 (1-звітний документ 2-новий звітний документ 3-уточнюючий документ)';uk='Значення не є цілим числом від 1 до 3 (1-звітний документ 2-новий звітний документ 3-уточнюючий документ)'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGsti") Тогда
		//<!--Загальний тип "Код ДПІ, використовується для обмеження коду області"-->
		// число, от 0 до 99
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "0";
		Иначе	
			Результат = СокрЛП(Формат(Значение,"ЧЦ=2; ЧДЦ=0"));	
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 0 до 99 (код ГНИ)';uk='Значення не є цілим числом від 0 до 99 (код ДПІ)'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGreg")
		  ИЛИ ВРег(Тип) = ВРег("RegColumn") Тогда
		//<!--Загальний тип "Код номера області"--> (1...29)
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = СокрЛП(Формат(Значение,"ЧЦ=2; ЧДЦ=0"));	
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 29 (код номера области)';uk='Значення не є цілим числом від 1 до 29 (код номера області)'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("STATOBL") Тогда
		//тип "Код області статистика". Число, 2 знаки
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = СокрЛП(Формат(Значение,"ЧЦ=2; ЧДЦ=0"));	
		КонецЕсли;

	ИначеЕсли   ВРег(Тип) = ВРег("STATRAY") Тогда
		//тип "Код району". Число, 3 знаки, крім комбінації '000'
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "&НеЗаписывать";
			Возврат 1;
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение," ","");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",3,1);
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHKOPFG")  Тогда
		//<!--Загальний тип "Код ОПФГ"--> (100...995)
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = СокрЛП(Формат(Значение,"ЧЦ=3; ЧДЦ=0"));	
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 100 до 995 (код ОПФГ)';uk='Значення не є цілим числом від 100 до 995 (код ОПФГ)'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("I8Column")) 
		  ИЛИ (ВРег(Тип) = ВРег("DGI8")) Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 10000000 до 99999999';uk='Значення не є цілим числом від 10000000 до 99999999'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGI7nomColumn")) 
		  ИЛИ (ВРег(Тип) = ВРег("DGI7nom")) Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 9999999';uk='Значення не є цілим числом від 1 до 9999999'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGInomColumn")) 
		  ИЛИ (ВРег(Тип) = ВРег("DGInom")) Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом';uk='Значення не є цілим числом'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("IntColumn") Тогда
		//<!--Загальний тип "Цілі дані"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = 0;
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом';uk='Значення не є цілим числом'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGLong12")) 
		  ИЛИ (ВРег(Тип) = ВРег("DGLong12Column")) 
		  ИЛИ (ВРег(Тип) = ВРег("DGIpnPDV"))
		  ИЛИ (ВРег(Тип) = ВРег("IpnPDVColumn"))
		  ИЛИ (ВРег(Тип) = ВРег("DGHNPDV")) 
		  ИЛИ (ВРег(Тип) = ВРег("DGHIPN")) 
		  ИЛИ (ВРег(Тип) = ВРег("IndTaxNumColumn")) Тогда
		  
		//<!--Загальний тип "Індивідуальний податковий номер "-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1000 до 999999999999';uk='Значення не є цілим числом від 1000 до 999999999999'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGI2i")) Тогда
		
		//<!--Загальний тип "Число від 0 до 99"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 0 до 99';uk='Значення не є цілим числом від 0 до 99'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGI3i")) Тогда
		
		//<!--Загальний тип "Число від 0 до 999"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 0 до 999';uk='Значення не є цілим числом від 0 до 999'");					
		
	ИначеЕсли  (ВРег(Тип) = ВРег("DGI3nomColumn")) 
		   ИЛИ (ВРег(Тип) = ВРег("DGI3nom")) Тогда
		
		//<!--Загальний тип колонки таблиці "Число від 1 до ... 9999" [номер філії, кількість, №рядка]-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 999';uk='Значення не є цілим числом від 1 до 999'");					
		
	ИначеЕсли  (ВРег(Тип) = ВРег("DGI4nomColumn")) 
		   ИЛИ (ВРег(Тип) = ВРег("DGI4nom")) Тогда
		
		//<!--Загальний тип колонки таблиці "Число від 1 до ... 9999" [номер філії, кількість, №рядка]-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 9999';uk='Значення не є цілим числом від 1 до 9999'");
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGI5i")) 
		   ИЛИ (ВРег(Тип) = ВРег("DGI5")) 
		   ИЛИ (ВРег(Тип) = ВРег("I5Column")) Тогда
		
		//<!--Загальний тип "Число від 10000 до 99999"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 10000 до 99999';uk='Значення не є цілим числом від 10000 до 99999'");
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGI6")) 
		   ИЛИ (ВРег(Тип) = ВРег("I6Column")) Тогда
		
		//<!--Загальний тип "Число від 100000 до 999999"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 100000 до 999999';uk='Значення не є цілим числом від 100000 до 999999'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGDate")	
		ИЛИ ВРег(Тип) = ВРег("DGHDDGVSD")
		ИЛИ ВРег(Тип) = ВРег("DGHDDGVUM")
		ИЛИ ВРег(Тип) = ВРег("DateColumn") Тогда
		//<!--Загальний тип "Дата у форматі ддммрррр"--> 
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
			Результат = Формат(Значение,"ДФ=ddMMyyyy");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является датой';uk='Значення не є датою'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGMonthYear")	
		ИЛИ ВРег(Тип) = ВРег("DGMonthYearColumn") Тогда
		//<!--Загальний тип "Місяц і рік"-->
		//<xs:length value="6"/>
		//<xs:pattern value="(((0[1-9])|(1[0-2]))(20)\d{2})"/>
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
			Результат = Формат(Значение,"ДФ=MMyyyy");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является месяцем и годом (в формате ММГГГГ)';uk='Значення не є місяцем і роком (в форматі ММРРРР)'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGDateEndKv") Тогда
		//<!--Загальний тип Дата кінець квартала у форматі ддммрррр"
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
			Результат = Формат(Значение,"ДФ=ddMMyyyy");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является датой';uk='Значення не є датою'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGchk") 
		  ИЛИ ВРег(Тип) = ВРег("ChkColumn") Тогда
		//чекбокс
		//<!--Загальний тип "Ознака"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
			Если Значение Тогда
				Результат = 1;
			Иначе
				Результат = "";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Если Значение = 1 Тогда
				Результат = 1;
			Иначе
				Результат = "";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = 1;
		Иначе
			Результат = "";
		КонецЕсли;
		
	ИначеЕсли ВРег(Тип) = ВРег("DGint2") Тогда
		//<!--Загальний тип "2 значне ціле додатне число"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = 0;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",2,1);
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым двузначным числом';uk='Значення не є цілим двозначним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGint3") Тогда
		//<!--Загальний тип "3 значне ціле додатне число"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = 0;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",3,1);
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым трехзначным числом';uk='Значення не є цілим тризначним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGint5") Тогда
		//<!--Загальний тип "5 значне ціле додатне число"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = 0;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",5,1);
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым пятизначным числом';uk='Значення не є цілим п'ятизначним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKOATUU")
		  ИЛИ ВРег(Тип) = ВРег("KOATUUColumn") Тогда
		//<!--Загальний тип "Код КОАТУУ (9-10 знаків)"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=10; ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",10,1);
		
		ОписаниеОшибки = НСтр("ru='Значение не является 9-и или 10-и значным числом';uk='Значення не є 9-и или 10-и значним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKATOTTG") 
		 ИЛИ ВРег(Тип) = ВРег("KATOTTGColumn") 
		Тогда
		//<!--Загальний тип "КАТОТТГ - Кодифікатор адміністративно-територіальних одиниць та територій територіальних громад (UA17 цифр)" (HKATOTTG)-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "&НеЗаписывать";
			Возврат 1;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=17; ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",17,1);
		
		ОписаниеОшибки = НСтр("ru='Значение не соответствует формату UA и 17 цифр';uk='Значення не відповідає формату UA и 17 цифр'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKNEA") 
		 ИЛИ ВРег(Тип) = ВРег("KNEAColumn") 
		Тогда
		//<!--Загальний тип "Кадастровий номер земельної ділянки" (HKNEA) ХХХХХХХХХХ:ХХ:ХХХ:ХХХХ-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "&НеЗаписывать";
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли (ВРег(Тип) = ВРег("string"))
		  ИЛИ (ВРег(Тип) = ВРег("DGHNDGVUM"))
		  ИЛИ (ВРег(Тип) = ВРег("StrColumn"))
		  ИЛИ (ВРег(Тип) = ВРег("DGdkpp0")) Тогда
		  
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		  
	ИначеЕсли (ВРег(Тип) = ВРег("DGHNAME"))
		  ИЛИ (ВРег(Тип) = ВРег("DGHLOC"))
		  ИЛИ (ВРег(Тип) = ВРег("DGLOC"))
		  ИЛИ (ВРег(Тип) = ВРег("DGHSTI")) Тогда
		  
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе
			Результат = СокрП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение должно содержать хотя бы один символ';uk='Значення має містити хоча б один символ'");
		
	ИначеЕсли (ВРег(Тип) = ВРег("decimal"))  
		  ИЛИ (ВРег(Тип) = ВРег("DecimalColumn")) Тогда
		// десятичная дробь
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом';uk='Значення не є числом'");
		
	ИначеЕсли (ВРег(Тип) = ВРег("int"))
		  ИЛИ (ВРег(Тип) = ВРег("integer")) Тогда
		
		//это показатели, имеющие целый тип, и значение лежащее в определенном диапазоне,
		//но сам показатель может не заполняться. 
		//Проблема: невозможно опеределить показатель равен нулю или "не заполнялся" если он числового типа. 
		//Поэтому, делаем такое предположение:
		//если в обработку передан показатель типа "Число" - он будет записан в выходной файл.
		//если тип = "Строка", показатель будет преобразован к числу и записан только если он не пуст.
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			
			Если ПустаяСтрока(Значение) Тогда
				Результат = "";
			КонецЕсли;
			
			Результат = Формат(Число(Значение),"ЧДЦ=0; ЧГ=0");
			
		Иначе
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");	
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом';uk='Значення не є цілим числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("nonNegativeInteger")
		ИЛИ ВРег(Тип) = ВРег("IntNegativeColumn") Тогда
		// целое, больше равно(?) нулю
		
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Если ПустаяСтрока(Значение) Тогда
				Результат = "";
			Иначе	
				Результат = Значение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧН=; ЧГ=0");				
		Иначе
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				Результат = 0;
			Иначе	
				Результат = Значение;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым неотрицательным числом';uk='Значення не є цілим невід'ємним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("xs:positiveInteger")
		  ИЛИ ВРег(Тип) = ВРег("IntPositiveColumn")Тогда
		// целое, положительное без знака, без 0
		
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Если ПустаяСтрока(Значение) Тогда
				Результат = "&НеЗаписывать";
				Возврат 1;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение, "ЧДЦ=0; ЧН=0; ЧГ=0");				
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		
		Попытка
			Контроль = Число(Результат);
			Если    Найти(Результат, ".") > 0
				ИЛИ Контроль < 0 
				ИЛИ Цел(Контроль) <> Контроль Тогда
				ОписаниеОшибки = НСтр("ru='Значение не является целым положительным числом';uk='Значення не є цілим позитивним числом'");
			КонецЕсли;
		Исключение
			ОписаниеОшибки = НСтр("ru='Значение не является целым неотрицательным числом';uk='Значення не є цілим невід'ємним числом'");
		КонецПопытки;
		
	ИначеЕсли ВРег(Тип) = ВРег("unsignedInt") Тогда
		// целое, больше равно(?) нулю
		
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Если ПустаяСтрока(Значение) Тогда
				Результат = "";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение, "ЧДЦ=0; ЧН=0; ЧГ=0");				
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым неотрицательным числом';uk='Значення не є цілим невід'ємним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGOdoh")
		 ИЛИ  ВРег(Тип) = ВРег("OdohColumn")
		 ИЛИ  ВРег(Тип) = ВРег("DGOsp")
		 ИЛИ  ВРег(Тип) = ВРег("OspColumn")
		 ИЛИ  ВРег(Тип) = ВРег("DGOzn12")
		 ИЛИ  ВРег(Тип) = ВРег("Ozn2Column")
		 ИЛИ  ВРег(Тип) = ВРег("DGI2inom")
		 ИЛИ  ВРег(Тип) = ВРег("I2inomColumn")
		 ИЛИ  ВРег(Тип) = ВРег("DGI1nomColumn")
		 ИЛИ  ВРег(Тип) = ВРег("DGI1nom")
		 ИЛИ  ВРег(Тип) = ВРег("DGI1inom")
		 Тогда	
		//DGOdoh  Загальний тип "Ознака доходу від 1 до 66 для ДРФО"-->
		//DGOsp   Загальний тип "Код від 1 до 4 знаків ДРФО, ознака типу документа для Реєстра накладних"--> 
		//DGOzn12 Загальний тип "Код 1/2 для ДРФО"-->
		 
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		МаксЗнач = 1;
		Если 	 ВРег(Тип) = ВРег("DGOdoh")
			 ИЛИ  ВРег(Тип) = ВРег("OdohColumn") Тогда
			МаксЗнач = 66;
		ИначеЕсли  ВРег(Тип) = ВРег("DGOsp")
			  ИЛИ  ВРег(Тип) = ВРег("OspColumn") Тогда
			МаксЗнач = 4;				 
		ИначеЕсли ВРег(Тип) = ВРег("DGOzn12")
			  ИЛИ  ВРег(Тип) = ВРег("Ozn2Column") Тогда
			МаксЗнач = 2;  
		ИначеЕсли ВРег(Тип) = ВРЕГ("I2inomColumn")
			ИЛИ  ВРег(Тип) = ВРег("DGI2inom") Тогда
			МаксЗнач = 99;  	
		ИначеЕсли ВРег(Тип) = ВРЕГ("DGI1nomColumn")
			ИЛИ  ВРег(Тип) = ВРег("DGI1nomColumn")
			ИЛИ  ВРег(Тип) = ВРег("DGI1inom")Тогда
			МаксЗнач = 9;  	
		КонецЕсли;		
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до ';uk='Значення не є цілим числом від 1 до '")+МаксЗнач;

	ИначеЕсли ВРег(Тип) = ВРег("DGOzn")
		  ИЛИ ВРег(Тип) = ВРег("OznColumn") Тогда
		//<!--Загальний тип "Код 0/1 для ДРФО"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "0";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		Если Результат = "Ч" Тогда
			Результат = "1";	
		ИначеЕсли Результат = "Ж" Тогда
			Результат = "0";
		КонецЕсли;		
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом';uk='Значення не є цілим числом'");
		
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGSEAZON"))
	      ИЛИ (ВРег(Тип) = ВРег("SeazonColumn"))
		Тогда
		
		//<!--Загальний тип "Ознака сезон (Пенсійний Фонд України)"-->

		Если Не ЗначениеЗаполнено(Значение) Тогда
			Результат = Неопределено;
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 3';uk='Значення не є цілим числом від 1 до 3'");
				
	ИначеЕсли ВРег(Тип) = ВРег("DGCodPilg") 
		  ИЛИ ВРег(Тип) = ВРег("CodPilgColumn") Тогда
		//<!--Загальний тип "Код пільги (8 знаків)"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=8; ЧДЦ=0; ЧРД=.; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
			Результат = ДополнитьСтрокуСимволами(Результат,"0",8,1);
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым восьмизначным числом';uk='Значення не є цілим восьмизначним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("CodPilg1406Column") 
		  ИЛИ ВРег(Тип) = ВРег("DGCodPilg1406") Тогда
		//Загальний тип "Код пільги (8 знаків)". Формат показника починаєтся з "1406…." або містить умовний код "99999999"
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=8; ЧДЦ=0; ЧРД=.; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
			Результат = ДополнитьСтрокуСимволами(Результат,"0",8,1);
		КонецЕсли;
		ОписаниеОшибки = НСтр("ru='Значение не является целым восьмизначным числом, начинающимся на 1406, или условным кодом 99999999';uk='Значення не є цілим восьмизначним числом, що починається на 1406, або умовним кодом 99999999'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGIBAN") Тогда
		//<!--Загальний тип "IBAN (International Bank Account Number) — міжнародний номер банківського рахунку (UA27 цифр)"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = Значение;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		КонецЕсли;
		Результат = СокрЛП(Значение);
		//<xs:pattern value="UA[0-9]{27}"/>
		ОписаниеОшибкиРу = "Неправильно указан номер банковского счета IBAN.";
		ОписаниеОшибкиУк = "Неправильно зазначен номер банківського рахунку IBAN.";
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(%1)';uk='(%2)'"), ОписаниеОшибкиРу,ОписаниеОшибкиУк);					
				
	ИначеЕсли ВРег(Тип) = ВРег("DGmfo") 
		  ИЛИ ВРег(Тип) = ВРег("MfoColumn") Тогда
		//<!--Загальний тип "Код МФО (6 знаків)"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=6; ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",6,1);
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым шестизначным числом';uk='Значення не є цілим шестизначним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGTn-Zed")
		  ИЛИ ВРег(Тип) = ВРег("Tn-ZedColumn") Тогда
		//<!--Загальний тип "Код транспортного засобу (10 знаків)" с 11/12/2008-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=10; ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",10,1);
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым десятизначным числом';uk='Значення не є цілим десятизначним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGUKTZED")
		  ИЛИ ВРег(Тип) = ВРег("UKTZEDColumn") Тогда
		//<!--Загальний тип "Код зовнішньоекономічної діяльності"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение," ","");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СОКРЛП(Результат);
		ОписаниеОшибки = НСтр("ru='Значение не является набором цифр (4, 5, 6, 8 или 10-и значным) или нулем';uk='Значення не є набором цифр (4, 5, 6, 8 або 10-й значним) або нулем'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGDKPP")
		  ИЛИ ВРег(Тип) = ВРег("DKPPColumn") Тогда
		  
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение," ","");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=5; ЧДЦ=2; ЧРД=.; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СОКРЛП(Результат);
	
		ОписаниеОшибки = НСтр("ru='Значение не является Кодом ДКПП в формате XX.XX.XX-XX.XX';uk='Значення не є Кодом ДКПП в форматі XX.XX.XX-XX.XX'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGkved") 
		  ИЛИ ВРег(Тип) = ВРег("DGkvedColumn") Тогда
		  
		//<!--Загальний тип "КВЕД"-->   в формате xx.xx.x или xx.xx или xx.x
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = Значение;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=5; ЧДЦ=0; ЧГ=0");
			Результат = Сред(Результат,1,2) + "." + Сред(Результат, 3,2) + "." + Сред(Результат,5);
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;	
		
		Результат = СокрЛП(Результат);
		Если Прав(Результат ,1) = "." Тогда
			Результат = Сред(Результат, 1, СтрДлина(Результат) - 1);
		КонецЕсли;
		Результат = СокрЛП(Результат);		
		
		ОписаниеОшибки = НСтр("ru='Значение не является Кодом КВЕД (в формате: xx.xx.x или xx.xx или xx.x)';uk='Значення не є Кодом КВЕД (в форматі: xx.xx.x или xx.xx или xx.x)'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKv") Тогда
		//<!--Загальний тип "Квартал"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 4';uk='Значення не є цілим числом від 1 до 4'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGNYear")
		   ИЛИ  ВРег(Тип) = ВРег("YearNColumn") Тогда
		//<!--Загальний тип "Рік народження"-->
		Если НЕ ЗначениеЗаполнено(Значение) 
			ИЛИ Значение = "0" Тогда 
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1900 до 2099';uk='Значення не є цілим числом від 1900 до 2099'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGYear") 
		  ИЛИ ВРег(Тип) = ВРег("YearColumn") Тогда
		//<!--Загальний тип "Рік"-->
		Если НЕ ЗначениеЗаполнено(Значение) 
			ИЛИ Значение = "0" Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1991 до 2099';uk='Значення не є цілим числом від 1991 до 2099'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHZIP")
			  ИЛИ ВРег(Тип) = ВРег("ZIPCOLUMN")	Тогда
		//<!--Загальний тип "Код міста"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение," ","");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		Результат = ДополнитьСтрокуСимволами(Результат,"0",5,1);
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым пятизначным числом';uk='Значення не є цілим п'ятизначним числом'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHEMAIL") Тогда
		//<!--Загальний тип "Електронна пошта"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является адресом электронной почты (в формате <текст>@<текст>)';uk='Значення не є адресою електронної пошти (в форматі <текст> @ <текст>)'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHTEL")
		  ИЛИ ВРег(Тип) = ВРег("DGHFAX") Тогда
		//<!--Загальний тип "Номер телефона"-->
		//<!--Загальний тип "Номер факса"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ДопустимыСимволы = "0 1 2 3 4 5 6 7 8 9 .,+-;()";
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Можно использовать только следующие символы: (%1). Длина должна быть более 4-х символов';uk='Можна використовувати тільки такі символи: (%1). Довжина повинна бути більше 4-х символів'"), ДопустимыСимволы);					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGdecimal0")
		  ИЛИ ВРег(Тип) = ВРег("Decimal0Column")Тогда
		//<!--Загальний тип "Числові дані 0 знаки після коми"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом до 9000000000';uk='Значення не є цілим числом до 9000000000'");

	ИначеЕсли ВРег(Тип) = ВРег("DGdecimal1")
		  ИЛИ ВРег(Тип) = ВРег("Decimal1Column")
		  ИЛИ ВРег(Тип) = ВРег("DGKODR") Тогда
		//<!--Загальний тип "Числові дані 1 знак після коми"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=1; ЧРД=.; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом c одним знаком после запятой';uk='Значення не є числом c одним знаком після коми'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGdecimal2")
		  ИЛИ ВРег(Тип) = ВРег("Decimal2Column")
		  ИЛИ ВРег(Тип) = ВРег("DGdecimal2_P")
		  ИЛИ ВРег(Тип) = ВРег("Decimal2Column_P")
		  Тогда
		//<!--Загальний тип "Числові дані 2 знак після коми"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
        
		ОписаниеОшибки = НСтр("ru='Значение не является числом c двумя знаками после запятой';uk='Значення не є числом c двома знаками після коми'");
		Если ВРег(Тип) = ВРег("DGdecimal2_P") ИЛИ ВРег(Тип) = ВРег("Decimal2Column_P") Тогда
			ОписаниеОшибки = НСтр("ru='Значение не является неотрицательным числом c двумя знаками после запятой';uk='Значення не є невід'ємним числом c двома знаками після коми'");
		КонецЕсли;
		
	ИначеЕсли ВРег(Тип) = ВРег("DGpercentAlloc") 
		ИЛИ ВРег(Тип) = ВРег("percentColumn") Тогда
		
		//<!--Загальний тип "проценти розподілу, питома вага, числові дані, можливо з 2 знаками після коми, від 0 до 100 включно"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом c двумя знаками после запятой';uk='Значення не є числом c двома знаками після коми'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGdecimal3")
		  ИЛИ ВРег(Тип) = ВРег("Decimal3Column")Тогда
		//Загальний тип "Числові дані 3 знаки після коми
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=3; ЧРД=.; ЧГ=0");	
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом c тремя знаками после запятой';uk='Значення не є числом c трьома знаками після коми'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGdecimal4")
		  ИЛИ ВРег(Тип) = ВРег("Decimal4Column") Тогда
		//Загальний тип "Числові дані 4 знаки після коми
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=4; ЧРД=.; ЧГ=0");
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом c четырьмя знаками после запятой';uk='Значення не є числом c чотирма знаками після коми'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGdecimal5")
		  ИЛИ ВРег(Тип) = ВРег("Decimal5Column") Тогда
		//Загальний тип "Числові дані 5 знаки після коми
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=5; ЧРД=.; ЧГ=0");
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом c пятью знаками после запятой';uk='Значення не є числом c п'ятьма знаками після коми'");
			
	ИначеЕсли ВРег(Тип) = ВРег("DGdecimal6")
		  ИЛИ ВРег(Тип) = ВРег("Decimal6Column")
		  ИЛИ ВРег(Тип) = ВРег("Decimal6Column_R")
		  ИЛИ ВРег(Тип) = ВРег("DGdecimal6_R")
		  Тогда
		  
		//Загальний тип "Числові дані 6 знаки після коми
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=6; ЧРД=.; ЧГ=0");
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом c шестью знаками после запятой';uk='Значення не є числом c шістьма знаками після коми'");
		
		
	ИначеЕсли ВРег(Тип) = ВРег("DGdecimal8")
		  ИЛИ ВРег(Тип) = ВРег("Decimal8Column")
		  Тогда
		//Загальний тип "Числові дані 8 знаки після коми
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "&НеЗаписывать";
			Возврат 1;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=8; ЧРД=.; ЧГ=0");
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом c 8 знаками после запятой';uk='Значення не є числом c 8 знаками після коми'");
		
	ИначеЕсли ВРег(Тип) = ВРег("Decimal12Column_R")
		  ИЛИ ВРег(Тип) = ВРег("DGdecimal12_R")
		  Тогда
		//Загальний тип "Числові дані 12 знаки після коми
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=12; ЧРД=.; ЧГ=0");
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значение не является числом c 12 знаками после запятой';uk='Значення не є числом c 12 знаками після коми'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGDrfo") //<!--Загальний тип "Код ДРФО фізичної особи допускається числовий код, або № паспорта"-->
		ИЛИ ВРег(Тип) = ВРег("DGLong")   //<!--Загальний тип "Код ЄДРПОУ (ДРФО підприємця: числа, або № паспорта)"-->
		ИЛИ ВРег(Тип) = ВРег("DGHTINF")  //<!--Загальний тип "Код HTINF (Ідентифікаційний номер платника згідно з ДРФО)"-->
		ИЛИ ВРег(Тип) = ВРег("DGHTINSD") //<!--Загальний тип "Код HTINSD (Реєстраційний (обліковий) номер платника )"--> 
		ИЛИ ВРег(Тип) = ВРег("TinColumn")//<!--Загальний тип "Код ЕДРПОУ(ДРФО) в колонці"-->
		ИЛИ ВРег(Тип) = ВРег("DGHKBOS")  //<!--Загальний тип "Код ДРФО директора"-->
		ИЛИ ВРег(Тип) = ВРег("DGHKBUH")  //<!--Загальний тип "Код ДРФО бухгалтера"-->
		ИЛИ ВРег(Тип) = ВРег("DGDrfo_pfu")
		ИЛИ ВРег(Тип) = ВРег("DGLong_pfu")
		ИЛИ ВРег(Тип) = ВРег("DGHTINF_pfu")
		ИЛИ ВРег(Тип) = ВРег("DGHKBOS_pfu") 
		ИЛИ ВРег(Тип) = ВРег("DGHKBUH_pfu")
		ИЛИ ВРег(Тип) = ВРег("DRFO_10Column")
		ИЛИ ВРег(Тип) = ВРег("DGDRFO_10")
		ИЛИ ВРег(Тип) = ВРег("DGNUMZO")
		ИЛИ ВРег(Тип) = ВРег("NumZOColumn")
		Тогда 
		//<xs:pattern value="([0-9]{5,10}|[АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ]{2}[0-9]{6})"/>
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = Значение;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		КонецЕсли;
		Результат = СокрЛП(Значение);

		ОписаниеОшибкиРу = "Неправильно указан ИНН (код по ДРФО) либо Серия и номер паспорта для физ. лица, у которого нет кода.
						 |Паспорт указывается в формате БКССНННННН (""БК"" - фиксированные символы (""без кода"") СС - серия, НННННН - номер паспорта)";
		ОписаниеОшибкиУк = "Неправильно зазначено ІПН (код за ДРФО) або Серія і номер паспорта для фіз. особи, у якого немає коду.
						 |Паспорт вказується в форматі БКССНННННН ("" БК "" - фіксовані символи ("" без коду "") СС - серія, НННННН - номер паспорта)";
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(%1)';uk='(%2)'"), ОписаниеОшибкиРу,ОписаниеОшибкиУк);					
		
		
	ИначеЕсли ВРег(Тип) = ВРег("DGPass") //<!--Загальний тип "№ паспорта" (HPASS)-->
		Тогда 
		//<xs:pattern value="[АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ]{2}[0-9]{6}"/>
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = Значение;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		КонецЕсли;
		Результат = СокрЛП(Значение);
		
		ОписаниеОшибкиРу = "Неправильно указаны Серия и номер паспорта для физ. лица, у которого нет кода.
						 |Паспорт указывается в формате ССНННННН (СС - серия, НННННН - номер паспорта)
						 |или в виде девятизначного числа";
		ОписаниеОшибкиУк = "Неправильно зазначено Серія і номер паспорта для фіз. особи, у якого немає коду.
						 |Паспорт вказується в форматі ССНННННН (СС - серія, НННННН - номер паспорта)
						 |або у вигляді дев'ятизначного числа";
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(%1)';uk='(%2)'"), ОписаниеОшибкиРу,ОписаниеОшибкиУк);					
		
		
	ИначеЕсли ВРег(Тип) = ВРег("DGNLong") //<!--Загальний тип "Код ЄДРПОУ (тiльки числа)"-->
		ИЛИ ВРег(Тип) = ВРег("EDRPOUColumn")//<!--Загальний тип "Код ЕДРПОУ в колонці"-->
		ИЛИ ВРег(Тип) = ВРег("DGHTINJ") //<!--Загальний тип " Код HTINJ (Ідентифікаційний код платника згідно з ЄДРПОУ)"-->
		ИЛИ ВРег(Тип) = ВРег("DGHTINNR")//<!--Загальний тип "Код HTINNR (Ідентифікаційний код представництвa нерезидента, що не має статусу юридичної особи)"--> 
		Тогда 
		//<xs:restriction base="xs:string">
		//<xs:pattern value="([0-9]{5,10})"/>
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = Значение;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		КонецЕсли;
		Результат = СокрЛП(Значение);
		// начинается с цифр - значить от 5 до 10
		Результат = ДополнитьСтрокуСимволами(Результат,"0",8,1);
		
		ОписаниеОшибки = НСтр("ru='Неправильно указан код по ЕДРПОУ (допускаются только цифры от 5 до 10 символов)';uk='Неправильно вказано код за ЄДРПОУ (допускаються тільки цифри від 5 до 10 символів)'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHNDGVSD") Тогда
		//<!--Загальний тип "Код HNDGVSD (№ договору про спільну (сумісну) діяльність)"-->
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		КонецЕсли;
		
		Результат = СокрЛП(Строка(Значение));
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHNSPDV") Тогда
		//<!--Загальний тип "Код HNSPDV (номер свідоцтва про реєстрацію платника ПДВ)"-->
		//<!-- 30.12.2010 Внесено можливість вносити 0 відповідно до п.8 наказу ДПАУ від 21.12.2010 N969
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение," ","");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 0 до 9999999999';uk='Значення не є цілим числом від 0 до 9999999999'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHTINUM") Тогда
		//<!--Загальний тип "Код HTINUM (податковий номер платника, що проводить управління майном)"-->
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение," ","");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Результат = "";
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 9999999999';uk='Значення не є цілим числом від 1 до 9999999999'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHBOS")  //<!--Загальний тип "ПІБ директора"-->
		  ИЛИ ВРег(Тип) = ВРег("DGHBUH")  //<!--Загальний тип "ПІБ бухгалтера"-->
		  ИЛИ ВРег(Тип) = ВРег("DGHFO")   //<!--Загальний тип "ПІБ фізичної особи"-->
		  Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		КонецЕсли;
		
		Результат = СокрЛП(Строка(Значение));

		ОписаниеОшибки = НСтр("ru='Длина реквизита должна быть не менее одного символа';uk='Довжина реквізиту повинна бути принаймні один символ'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("rowInt") Тогда
		//<!--Загальний тип атрибуту ROWNUM для вказання номеру строки в табличних даних-->
		Если ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
			ПозицияТочки = Найти(Результат, ".");
			Если ПозицияТочки > 0 Тогда
				Результат = Лев(Результат, СтрДлина(Результат) - ПозицияТочки - 1);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = Строка(Значение);
		КонецЕсли;	
		
		
	ИначеЕсли ВРег(Тип) = ВРег("DG5-10-15nmg") Тогда
		//<!--Загальний тип "5-10-15 неоподатковуваних мінімумів "-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе	
			Результат = СокрЛП(Строка(Результат));		
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значением может быть либо 5 либо 10 либо 15';uk='Значенням може бути або 5 або 10 або 15'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGHNUM_N") Тогда
		//<!--Загальний тип "Номер для накладної - число, слеш і літери зц"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = ВРЕГ(СокрЛП(Строка(Результат)));		
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Номер накладной должен быть в виде числа, или в виде ""число/число"" или ""число/ЗЦ"" или ""число/число/ЗЦ"" и т.п.';uk='Номер накладної повинен бути у вигляді числа, або у вигляді ""число/число"" або ""число/ЗЦ"" або ""число/число/ЗЦ "" і т.п.'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD3_1") 
		  ИЛИ ВРег(Тип) = ВРег("KodDocROVPD3_1Column") Тогда
		  
		//<!--Загальний тип "вид(код) документа" Реєстру отриманих та виданих податкових накладних" версія 3 розділ 1
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = ВРЕГ(СокрЛП(Строка(Результат)));		
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значением может быть только одно из следующих: ПН, РК, ВМД, ЧК, ТК, ГР, ПЗ, ПО, ЗП, ПНУ, РКУ, ВМДУ, ЧКУ, ТКУ, ГРУ, ПЗУ, ПОУ, ЗПУ';uk='Значенням може бути тільки одне з наступних: ПН, РК, ВМД, ЧК, ТК, ГР, ПЗ, ПО, ЗП, ПНУ, РКУ, ВМДУ, ЧКУ, ТКУ, ГРУ, ПЗУ, ПОУ, ЗПУ'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD3_2") 
		  ИЛИ ВРег(Тип) = ВРег("KodDocROVPD3_2Column") Тогда
		  
		//<!--Загальний тип "вид(код) документа" Реєстру отриманих та виданих податкових накладних" версія 3 розділ 2
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = ВРЕГ(СокрЛП(Строка(Результат)));		
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значением может быть только одно из следующих: ПН, РК, ВМД, ПП, ЗЦ, ПНУ, РКУ, ВМДУ, ППУ, ЗЦУ';uk='Значенням може бути тільки одне з наступних: ПН, РК, ВМД, ПП, ЗЦ, ПНУ, РКУ, ВМДУ, ППУ, ЗЦУ'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD5_2") 
		  ИЛИ ВРег(Тип) = ВРег("DGKodDocROVPD5_2Column") Тогда
		  
		//<!--Загальний тип "вид(код) документа" Реєстру отриманих та виданих податкових накладних" версія 5 розділ 1
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = ВРЕГ(СокрЛП(Строка(Результат)));		
		КонецЕсли;
		
		ОписаниеОшибкиРу = "Значением может быть только одно из следующих: ПН, РК, ВМД, ЧК, ТК, ГР, ПЗ, ПО, ЗП, ПНУ, РКУ, ВМДУ, ЧКУ, ТКУ, ГРУ, ПЗУ, ПОУ, ЗПУ,
		|ПНР, РКР, ВМДР, ЧКР, ТКР, ГРР, ПЗР, ПОР, ЗПР, ПНРУ, РКРУ, ВМДРУ, ЧКРУ, ТКРУ, ГРРУ, ПЗРУ, ПОРУ, ЗПРУ, БОРУ,БО,БОР,БОУ";
		ОписаниеОшибкиУк = "Значенням може бути тільки одне з наступних: ПН, РК, ВМД, ЧК, ТК, ГР, ПЗ, ПО, ЗП, ПНУ, РКУ, ВМДУ, ЧКУ, ТКУ, ГРУ, ПЗУ, ПОУ, ЗПУ,
		|ПНР, РКР, ВМДР, ЧКР, ТКР, ГРР, ПЗР, ПОР, ЗПР, ПНРУ, РКРУ, ВМДРУ, ЧКРУ, ТКРУ, ГРРУ, ПЗРУ, ПОРУ, ЗПРУ, БОРУ,БО,БОР,БОУ";
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(%1)';uk='(%2)'"), ОписаниеОшибкиРу,ОписаниеОшибкиУк);					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD5_1") 
		  ИЛИ ВРег(Тип) = ВРег("DGKodDocROVPD5_1Column") Тогда
		  
		//<!--Загальний тип "вид(код) документа" Реєстру отриманих та виданих податкових накладних" версія  розділ 2
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = ВРЕГ(СокрЛП(Строка(Результат)));		
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значением может быть только одно из следующих: ПН[01...14][У], РК, ВМД, ПП, ЗЦ, ПНУ, РКУ, ВМДУ, ППУ, ЗЦУ';uk='Значенням може бути тільки одне з наступних: ПН[01...14][У], РК, ВМД, ПП, ЗЦ, ПНУ, РКУ, ВМДУ, ППУ, ЗЦУ'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGDM") 
		ИЛИ ВРег(Тип) = ВРег("DMColumn") 
		Тогда
		//<!--Загальний тип "День місяця"-->
		Если НЕ ЗначениеЗаполнено(Значение) 
			ИЛИ Значение = "0" Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 1 до 31';uk='Значення не є цілим числом від 1 до 31'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKodTypeDoc6_1")
		ИЛИ ВРег(Тип) = ВРег("DGKodTypeDoc6_1COLUMN") Тогда
		  
		//<!--"Вид(код) документа "Розділ I. Видані податкові накладні" -->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = ВРЕГ(СокрЛП(Строка(Результат)));		
		КонецЕсли;
	
		ОписаниеОшибки = НСтр("ru='Значением может быть только одно из следующих: ПНП, ПНЕ, РКП, РКЕ, МДП, МДЕ, БО';uk='Значенням може бути тільки одне з наступних: ПНП, ПНЕ, РКП, РКЕ, МДП, МДЕ, БО'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKodDocROVPD6_2")
		ИЛИ   ВРег(Тип) = ВРег("DGKODDOCROVPD6_2COLUMN") Тогда
		  
		//<!--Загальний тип "вид(код) документа "Розділ IІ. Отримані податкові накладні" версія документа 6--
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = ВРЕГ(СокрЛП(Строка(Результат)));		
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значением может быть только одно из следующих: ПНП, ПНЕ, РКП, РКЕ, МДП, МДЕ, БО, ЧК, ТК, ГР, ПЗ, ПО, ЗП, НП, БОПНП, БОПНЕ, БОРКП, БОРКЕ, БОМДП, БОМДЕ, БОЧК, БОТК, БОГР, БОПЗ, БОПО';uk='Значенням може бути тільки одне з наступних: ПНП, ПНЕ, РКП, РКЕ, МДП, МДЕ, БО, ЧК, ТК, ГР, ПЗ, ПО, ЗП, НП, БОПНП, БОПНЕ, БОРКП, БОРКЕ, БОМДП, БОМДЕ, БОЧК, БОТК, БОГР, БОПЗ, БОПО'");					

	ИначеЕсли ВРег(Тип) = ВРег("DGKodСausesOperation6")
		ИЛИ ВРег(Тип) = ВРег("DGKodСausesOperation6COLUMN") Тогда
		//<!--Причини, складання податкової накладної за окремими операціями версія реєстру 6-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
		Иначе	
			Результат = Строка(Значение);		
		КонецЕсли;
		
		Результат = СокрЛП(Результат);
		
		ОписаниеОшибки = НСтр("ru='Значением может быть число от 01 до 15 включительно, с лидирующим нулем';uk='Значенням може бути число від 01 до 15 включно, з лідируючим нулем'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGKodRectification6")
		ИЛИ ВРег(Тип) = ВРег("DGKodRectification6COLUMN")Тогда
		//<!--Признак, що дані документа включаються до уточнюючих розрахунків за звітний (податковий) період „У
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = Строка(Результат);		
		КонецЕсли;
		Результат = СокрЛП(ВРег(Результат));
		
		ОписаниеОшибки = НСтр("ru='Значением может быть символ ""У""';uk='Значенням може бути символ ""У""'");					

	ИначеЕсли ВРег(Тип) = ВРег("DGKodAssignment6")
		ИЛИ  ВРег(Тип) = ВРег("DGKodAssignment6Column") Тогда
		
		//<!--Признак, - проведено розподіл суми податкового кредиту додається літера „Р” -->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		Иначе	
			Результат = Строка(Результат);		
		КонецЕсли;
		Результат = СокрЛП(ВРег(Результат));
		
		ОписаниеОшибки = НСтр("ru='Значением может быть символ ""Р""';uk='Значенням може бути символ ""Р""'");					

	ИначеЕсли ВРег(Тип) = ВРег("DGc_dpi") Тогда
		//<!--Загальний тип "Код ДПІ, використовується для обмеження коду області"-->
		// число, от 100 до 2899 или (3070)|(3[1-5]00)|(9001)|(9191)|(9393)|(9494)|(9900)|(9911)|(9970)|(999[1-9])
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		ИначеЕсли ТипЗнч(Значение)=Тип("Строка") и Лев(Значение, 1) = "0" Тогда
			Результат = Прав(Значение, 3);
		Иначе
			Результат = Значение;
		КонецЕсли;
		
		Результат = СокрЛП(Формат(Результат,"ЧЦ=4; ЧДЦ=0; ЧГ="));

		Попытка
			Контроль = Число(Результат);
			Если    Найти(Результат, ".") > 0
				ИЛИ Контроль < 100 
				ИЛИ Контроль > 2899
				И НЕ (Контроль=3070 ИЛИ Контроль=3100 
					ИЛИ Контроль=3200 ИЛИ Контроль=3300 
					ИЛИ Контроль=3400 ИЛИ Контроль=3500 
					ИЛИ Контроль=9001 ИЛИ Контроль=9191
					ИЛИ Контроль=9393 ИЛИ Контроль=9494
					ИЛИ Контроль=9900 ИЛИ Контроль=9911
					ИЛИ Контроль=9970 ИЛИ Контроль>9990)
				ИЛИ Цел(Контроль) <> Контроль Тогда
				ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 100 до 2899 или одним из кодов: 3070, 3100-3500, 9001, 9191, 9393, 9494, 9900, 9911, 9970, 9991-9999 (код ГНИ)';uk='Значення не є цілим числом від 100 до 2899 або одним з кодів: 3070, 3100-3500, 9001, 9191, 9393, 9494, 9900, 9911, 9970, 9991-9999 (код ДПІ)'");
			КонецЕсли;
		Исключение
			ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 100 до 2899 или одним из кодов: 3070, 3100-3500, 9001, 9191, 9393, 9494, 9900, 9911, 9970, 9991-9999 (код ГНИ)';uk='Значення не є цілим числом від 100 до 2899 або одним з кодів: 3070, 3100-3500, 9001, 9191, 9393, 9494, 9900, 9911, 9970, 9991-9999 (код ДПІ)'");
		КонецПопытки;
		
	ИначеЕсли ВРег(Тип) = ВРег("DGspecNom") 
		  ИЛИ ВРег(Тип) = ВРег("DGspecNomColumn") Тогда
		//<!--Признак спеціальної податкової накладної"-->
		// строка, значение 2,3,4,5,6 или 7
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		КонецЕсли;
		
		Результат = СокрЛП(Формат(Значение,"ЧЦ=1; ЧДЦ=0"));

		ОписаниеОшибки = НСтр("ru='Значение не является одним из значений: 2,3,4,5,6 или 7';uk='Значення не є одним із значень: 2,3,4,5,6 або 7'");
		
	ИначеЕсли ВРег(Тип) = ВРег("DGJ13001TypeDocColumn") Тогда
		//<!--Можливі варіанти Виду документа в запиті:
		//	ПН - податкова накладна;
		//	РК - розрахунок коригування до податкової накладної (додаток 2 до податкової накладної));"-->
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		КонецЕсли;
		
		Результат = ВРЕГ(СОКРЛП(Результат));
		
		ОписаниеОшибки = НСтр("ru='Значение не является одним из значений:ПН или РК';uk='Значення не є одним із значень: ПН або РК'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGPNtypr") Тогда
		
		//<!--Можливі значення значення 01, 02, ..., 17, 20-->
		// строка
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		КонецЕсли;
		
		Результат = СокрЛП(Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН="));
		
		ОписаниеОшибки = НСтр("ru='Значением может быть только одно из 01...17 или 20, 21, 22';uk='Значення може бути тільки одне з 01 ... 17 або 20, 21, 22'");					
		
	ИначеЕсли ВРег(Тип) = ВРег("DGdecimalZero") Тогда
		//<!--Загальний тип "Числовий 0" 0, 0.0, або 0.00-->
		// строка
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		КонецЕсли;
		
		Результат = СокрЛП(Формат(Значение,"ЧДЦ=2; ЧРД=.; ЧВН="));

		ОписаниеОшибки = НСтр("ru='Значением может быть только ноль';uk='Значення може бути тільки нуль'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGHIPN0"))
		  ИЛИ (ВРег(Тип) = ВРег("HIPNColumn0"))
		Тогда
		
		//<!--Загальний тип "ІІндивідуальний податковий номер платника з можливістю внесення 0(нуля) "-->
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Результат = "";
		КонецЕсли;
		
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 0 до 999999999999';uk='Значення не є цілим числом від 0 до 999999999999'");

	ИначеЕсли (ВРег(Тип) = ВРег("Odoh1DFColumn"))
		  ИЛИ (ВРег(Тип) = ВРег("DGOdoh1DF"))
		Тогда
		
		//<!--Загальний тип "Ознака доходу 1-ДФ "-->
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧДЦ=0; ЧН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;

		ОписаниеОшибки = НСтр("ru='Значение не является целым числом от 101 до 203';uk='Значення не є цілим числом від 101 до 203'");
		
	ИначеЕсли (ВРег(Тип) = ВРег("Oplg1DFColumn"))
		  ИЛИ (ВРег(Тип) = ВРег("DGOplg1DF"))
		Тогда
		
		//<!--Загальний тип "Ознака пільги 1-ДФ з 01.01.2011"-->
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является кодом от 01 до 04';uk='Значення не є кодом від 01 до 04'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGNPNColumn"))
		  ИЛИ (ВРег(Тип) = ВРег("DGNPN")) Тогда
		
		//////№ податкової накладної формат:
		////// nnnnnnN/nnnnn	де:
		////// - n необовязкове значення
		////// - N обовязкове значення
		////// (приклади значень: 125, 125/2, 125/012, 125/2012)
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СтрЗаменить(Значение, " ", "");
			Результат = СтрЗаменить(Результат, ",", ".");
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=2; ЧДЦ=0; ЧВН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Строка(Значение));
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru='Значение не является корректным номером налогового документа: nnnnnnN/nnnnn, где n-необяз. значение, N - Обязательное; n и N - цифры.';uk='Значення не є коректним номером податкового документа: nnnnnnN / nnnnn, де n-необяз. значення, N - Обов'язкове; n і N - цифри.'");					

	ИначеЕсли (ВРег(Тип) = ВРег("DGI4lz"))
	      ИЛИ (ВРег(Тип) = ВРег("DGI4lzColumn"))
		Тогда
		
		//<!--Число 4 знаки з початковими нулями від 0000 до 9999 використовується для: * код умовного позначення одиниць виміру ПН
		Результат = СокрЛП(Строка(Значение));
		
		Результат = СтрЗаменить(Результат, " ","");

		ОписаниеОшибки = НСтр("ru='Значение не является числом с ведущими нулями от 0000 до 9999';uk='Значення не є числом з провідними нулями від 0000 до 9999'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGJ02095Ind3"))
		Тогда
		
		//<!--розділ Декларації (А,Б,В,Г,Ґ,Д)
		Результат = СокрЛП(Строка(Значение));
		
		ОписаниеОшибки = НСтр("ru='Значение не является одной из букв А,Б,В,Г,Ґ,Д';uk='Значення не є однією з букв А, Б, В, Г, Ґ, Д'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGJ02095Ind4"))
		Тогда
		
		//<!--код операції розділу в Декларації акцизного податку  для розширення попереднього типу DGJ02095Ind2 для наступної версії документа
		Результат = СокрЛП(Строка(Значение));
		
		ОписаниеОшибки = НСтр("ru='Возможно, указан не верный код операции Декларации по Акцизному налогу';uk='Можливо, зазначений не вірний код операції Декларації з акцизного податку'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGJ02095Ind5"))
		Тогда
		
		Результат = СокрЛП(Строка(Значение));
		
		ОписаниеОшибки = НСтр("ru='Возможно, указан не верный код операции Декларации по Акцизному налогу';uk='Можливо, зазначений не вірний код операції Декларації з акцизного податку'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGJ02095Ind6"))
		Тогда
		
		//<!--код операції розділу в Декларації акцизного податку  для розширення попереднього типу DGJ02095Ind2 для наступної версії документа
		Результат = СокрЛП(Строка(Значение));
		
		ОписаниеОшибки = НСтр("ru='Возможно, указан не верный код операции Декларации по Акцизному налогу';uk='Можливо, зазначений не вірний код операції Декларації з акцизного податку'");					
		
	ИначеЕсли   (ВРег(Тип) = ВРег("DGKod")) //!-- тип "Код контрольованої операції  3 знаки число з ведучими нулями -->
		ИЛИ (ВРег(Тип) = ВРег("KodColumn")) 
		ИЛИ (ВРег(Тип) = ВРег("Kod0Column")) 
		ИЛИ (ВРег(Тип) = ВРег("DGKod0")) 
		ИЛИ (ВРег(Тип) = ВРег("DKPP0Column")) Тогда
		
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = СокрЛП(Значение);
		ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
			Результат = Формат(Значение,"ЧЦ=3; ЧДЦ=0; ЧВН=; ЧГ=0");
		Иначе
			Результат = СокрЛП(Значение);
		КонецЕсли;			
		
		Если (ВРег(Тип) = ВРег("DGKod0")) Тогда
			ОписаниеОшибки = НСтр("ru='Значение не является числом от 000 до 999 с ведущими нулями или нулем';uk='Значення не є числом від 000 до 999 з провідними нулями або нулем'");					
		Иначе	
			ОписаниеОшибки = НСтр("ru='Значение не является числом от 000 до 999 с ведущими нулями';uk='Значення не є числом від 000 до 999 з провідними нулями'");					
		КонецЕсли;
		
	ИначеЕсли   (ВРег(Тип) = ВРег("DGStatus")) //!--тип "статус особи - сторони контрольованої операції залежно від країни реєстрації: "резидент" - позначка "Р", "нерезидент" - позначка "Н""-->
		    ИЛИ (ВРег(Тип) = ВРег("StatusColumn")) Тогда
		
		Если ТипЗнч(Значение)=Тип("Строка") Тогда
			Результат = ВРЕГ(СокрЛП(Значение));
		Иначе
			Результат = ВРЕГ(СокрЛП(Значение));
		КонецЕсли;			
		
		ОписаниеОшибки = НСтр("ru='Значением может быть только символ ""Н"" или ""Р""';uk='Значенням може бути тільки символ ""Н"" або ""Р""'");					
		
	ИначеЕсли  (ВРег(Тип) = ВРег("DGKontrOp"))
		   ИЛИ (ВРег(Тип) = ВРег("KodOpColumn")) Тогда //!--Загальний тип колонки таблиці контрольованої операції 1,2 ,3-->
		   
		Результат = ВРЕГ(СокрЛП(Значение));
		ОписаниеОшибки = НСтр("ru='Значением может быть только символ ""1"", ""2"", ""3"" или ""201-209""';uk='Значенням може бути тільки символ ""1"", ""2"", ""3"" або ""201-209""'");					
		
	ИначеЕсли (ВРег(Тип) = ВРег("DGKodControlledOperationTB08"))
	      ИЛИ (ВРег(Тип) = ВРег("DGKodControlledOperationTB08Column"))
		Тогда
		
		Результат = СокрЛП(Строка(Значение));
		
		ОписаниеОшибки = НСтр("ru='Значение не является кодом ""КО""';uk='Значення не є кодом ""КО""'");					
		
	ИначеЕсли    (ВРег(Тип) = ВРег("DGkzep0")) //!--Загальний тип "код послуги згідно з Класифікацією зовнішньоекономічних послуг" КЗЕП, або 0 -->
		ИЛИ (ВРег(Тип) = ВРег("DGkzep0Column"))Тогда
		
		Результат = СокрЛП(Значение);
		
		ОписаниеОшибки = НСтр("ru='Значение не является кодом услуг КЗЕП или нулем';uk='Значення не є кодом послуг КЗЕП або нулем'");					
		
	Иначе
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Тип значения (%1) не может быть преобразован!';uk='Тип значення (%1) не може бути перетворений!'"), Тип);					
		
	КонецЕсли;
	
	Если ТипЗнч(Результат)<>Тип("Строка") Тогда
		
		Если    ТипЗнч(Результат)<>Тип("Число")
			ИЛИ ТипЗнч(Результат)<>Тип("Дата")
			ИЛИ ТипЗнч(Результат)<>Тип("Булево")Тогда
			
			Результат = Строка(Результат);
			
		Иначе	
			
			Результат = Формат(Результат,  "ЧРД=.; ЧН=0.00; ЧГ=0; ЧО=1; ДФ=ddMMyyyy; ДП=; БЛ=0; БИ=1");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

&НаСервере
Функция ПолучитьЗначениеИзОтчета(Имя, Префикс, ДанныеМногострочек = Неопределено, ДанныеПриортиет1, ДанныеПриортиет2 = неопределено, Найдено = Ложь)
	
	ЗначениеИзОтчета = Неопределено;
	
	ПрефиксГруппы = Лев(Имя, Найти(Имя, "XXXX") - 1);
	// для многострочек ищем данные особым образом
	Если ЗначениеЗаполнено(ПрефиксГруппы) И ТипЗнч(ДанныеМногострочек) = Тип("Структура") Тогда
		
		ДанныеМногострочки = Неопределено;
		// ищем структуру многострочки в начале с префиксом
		Если НЕ ДанныеМногострочек.Свойство("" + Префикс + ПрефиксГруппы, ДанныеМногострочки) Тогда
			// далее без префикса
			ДанныеМногострочек.Свойство(ПрефиксГруппы, ДанныеМногострочки);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеМногострочки) = Тип("Структура") Тогда
			
			// получим данные из структуры, поиск по аналогичным полям бланка осуществлять не будем
			Если  ДанныеМногострочки.Свойство("" + Префикс + Имя, ЗначениеИзОтчета) Тогда
				Найдено = Истина;
			ИначеЕсли ДанныеМногострочки.Свойство(Имя, ЗначениеИзОтчета) Тогда
				Найдено = Истина;
			КонецЕсли;
			
			Возврат ЗначениеИзОтчета
		Иначе
			// если не нашли данные многострочки - продолжаем искать значение в общем порядке (на бланке отчета есть все показатели, в т.ч. и многострочек, однако они не подвергались обработке перед выгрузкой)	
		КонецЕсли;
		
	КонецЕсли;
	
	Если 	  ДанныеПриортиет1.Свойство(Префикс + Имя, ЗначениеИзОтчета) Тогда
		
		Найдено = Истина;	
		
	ИначеЕсли ДанныеПриортиет1.Свойство(          Имя, ЗначениеИзОтчета) Тогда	
		
		Найдено = Истина;	
		
	ИначеЕсли НЕ ДанныеПриортиет2 = Неопределено Тогда
		
		Если  	  ДанныеПриортиет2.Свойство(Префикс + Имя, ЗначениеИзОтчета) Тогда
			
			Найдено = Истина;
			
		ИначеЕсли ДанныеПриортиет2.Свойство(          Имя, ЗначениеИзОтчета) Тогда
			
			Найдено = Истина;	
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ЗначениеИзОтчета;
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ДополнитьСтрокуСимволами(Стр,Чем,Длина,Режим=1) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Если Добавить>0  Тогда
		Добавок="";
		Для Сч = 1 По Добавить  Цикл
			Добавок=Добавок+Чем
		КонецЦикла;
		Возврат ?(Режим=1,Добавок+Стр,Стр+Добавок);
	Иначе
		Возврат	Стр;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьИмяФайлаВыгрузкиXML(ИмяСхемы, Префикс, ДанныеДляОтчета, СлужебныеДанные);
	
	КодНалоговой  = ДополнитьСтрокуСимволами(СокрЛП(Формат(ПолучитьЗначениеИзОтчета("C_STI", "", ,СлужебныеДанные, ДанныеДляОтчета),"ЧЦ=4;ЧГ=0")),"0",4 ,1); // дополним нулями слева
	
	КодФирмы 	  = ДополнитьСтрокуСимволами(СокрЛП(ПолучитьЗначениеИзОтчета("TIN", "", ,СлужебныеДанные, ДанныеДляОтчета)),"0",10,1); // ЕДРПОУ
	
	МесяцПериода  = ДополнитьСтрокуСимволами(ПолучитьЗначениеИзОтчета("PERIOD_MONTH", "", ,СлужебныеДанные, ДанныеДляОтчета),"0",2 ,1);
	
	ГодПериода    = Формат(ПолучитьЗначениеИзОтчета("PERIOD_YEAR", "", , СлужебныеДанные, ДанныеДляОтчета), "ЧЦ=4;ЧГ=;");
	
	
	
	СостояниеОтчета = ДополнитьСтрокуСимволами(ПолучитьЗначениеИзОтчета("C_DOC_STAN", Префикс, , ДанныеДляОтчета, СлужебныеДанные),"0",1 ,1);
	Если СостояниеОтчета = "0" Тогда
		СостояниеОтчета = "1";
	КонецЕсли;
	
	ТипОтчета = ДополнитьСтрокуСимволами(ПолучитьЗначениеИзОтчета("C_DOC_TYPE", "", ,СлужебныеДанные, ДанныеДляОтчета),"0",2 ,1);
	
	Найдено = Ложь;
	КодНалоговойОриг = ПолучитьЗначениеИзОтчета("C_STI_ORIG", "", ,СлужебныеДанные, ДанныеДляОтчета,Найдено);
	Если НЕ Найдено Тогда
		КодНалоговойОриг = КодНалоговой; 
	КонецЕсли;
	КодНалоговойОриг = ДополнитьСтрокуСимволами(СокрЛП(Формат(КодНалоговойОриг,"ЧЦ=4;ЧГ=0")),"0",4 ,1);
	
	Если  Найти(Префикс, "_") > 0 И НЕ Лев(Префикс,1) = "D"  Тогда
		//многостраничка
		Префикс_ = Сред(Префикс, Найти(Префикс, "_")+1);
		НомерВПериоде = ДополнитьСтрокуСимволами(Формат(Префикс_, "ЧГ="),"0",7 ,1);
	Иначе	
		НомерВПериоде = ДополнитьСтрокуСимволами(Формат(ПолучитьЗначениеИзОтчета("C_DOC_CNT", "", , ДанныеДляОтчета, СлужебныеДанные), "ЧГ="),"0",7 ,1);
	КонецЕсли;
		
	Найдено = Ложь;
	ТипПериода = ПолучитьЗначениеИзОтчета("PERIOD_TYPE", "",  , СлужебныеДанные, ДанныеДляОтчета, Найдено);
	Если НЕ Найдено Тогда
		ТипПериода = 1; 
	КонецЕсли;
	ТипПериода = СОКРЛП(Лев(ТипПериода,1));
	
	ИмяФайла = КодНалоговой + КодФирмы + ИмяСхемы+ СостояниеОтчета + ТипОтчета + НомерВПериоде + ТипПериода + МесяцПериода + ГодПериода + КодНалоговойОриг + ".xml";

	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруПроверкиОбязательныхПолейВГруппахВыбора(ИмяСхемы)
	
	ДеревоПроверки = Новый ДеревоЗначений;
	
	СтруктураСхем = ПолучитьИзВременногоХранилища(АдресВХранилищеСтруктурыСхем);
	
	Если НЕ ТипЗнч(СтруктураСхем) = Тип("Структура") Тогда
		Возврат ДеревоПроверки;
	КонецЕсли;
	
	Макет = Неопределено;
	Если СтруктураСхем.Свойство(ИмяСхемы, Макет) Тогда
		
		ВременноеИмя = ПолучитьИмяВременногоФайла(".xsd");
	    Макет.Записать(ВременноеИмя);
		
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(ВременноеИмя);
		ПостроительDOM = Новый ПостроительDOM;
		Документ = ПостроительDOM.Прочитать(Чтение);
		
		ПостроительСхем = Новый ПостроительСхемXML;
		Схема = ПостроительСхем.СоздатьСхемуXML(Документ.ЭлементДокумента);
		
		ДеревоПроверки = ПолучитьДеревоОбязательныхПолейВГруппахВыбораСхемыXMLГНАУ(Схема);
		
		Чтение.Закрыть();
		ПостроительDOM = Неопределено;
		Документ = Неопределено;
		
		Попытка
			УдалитьФайлы(ВременноеИмя);
		Исключение КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДеревоПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьСхемуОтчета(ИмяСхемы)
	
	СхемаОтчета = Неопределено;
	
	СтруктураСхем = ПолучитьИзВременногоХранилища(АдресВХранилищеСтруктурыСхем);
	
	Если НЕ ТипЗнч(СтруктураСхем) = Тип("Структура") Тогда
		Возврат СхемаОтчета;
	КонецЕсли;
	
	Макет = Неопределено;
	Если СтруктураСхем.Свойство(ИмяСхемы, Макет) Тогда
		ВременныйФайл = Новый ТекстовыйДокумент;
		ВременныйФайл.ИспользуемоеИмяФайла = ПолучитьИмяВременногоФайла(".xml");
		
		Если РегламентированнаяОтчетность.ЭтоВнешнийОтчет("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности") Тогда
			ВнешниеОтчеты.Создать("РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности").ПолучитьМакет("ОбщиеТипыДляРегламентированнойОтчетности").Записать(ВременныйФайл.ИспользуемоеИмяФайла)
		Иначе	
			Отчеты.РегламентированныйОтчетМастерВыгрузкиРегламентированнойОтчетности.ПолучитьМакет("ОбщиеТипыДляРегламентированнойОтчетности").Записать(ВременныйФайл.ИспользуемоеИмяФайла);
		КонецЕсли;
		ВременныйФайл.Прочитать(ВременныйФайл.ИспользуемоеИмяФайла, "windows-1251");
		ВременныйФайлСтрока = ВременныйФайл.ПолучитьТекст();
		
		// получаем объявления всех общих типов = внутренность тега schema при этом удаленяем тег annotation 
		ПозицияНачалаАннотации = Найти(ВременныйФайлСтрока, "<xs:annotation>");
		ПозицияКонцаАннотации  = Найти(ВременныйФайлСтрока, "</xs:annotation>");
		Если ПозицияКонцаАннотации > 0 Тогда
			ВременныйФайлСтрока	=  Лев(ВременныйФайлСтрока, ПозицияНачалаАннотации - 1)
			+ Сред(ВременныйФайлСтрока, ПозицияКонцаАннотации + 17)
		КонецЕсли;
		
		ОбъявленияТипов = "";
		ПозицияНачалаОбъявленияСхемы = Найти(ВременныйФайлСтрока, "<xs:schema");
		Если ПозицияНачалаОбъявленияСхемы > 0 Тогда
			ПозицияНачалаОбъявленияСхемыСкобка = Найти(Сред(ВременныйФайлСтрока, ПозицияНачалаОбъявленияСхемы), ">");     	
			Если ПозицияНачалаОбъявленияСхемыСкобка > 0 Тогда
				ПозицияКонцаОбъявленияСхемы = Найти(ВременныйФайлСтрока, "</xs:schema>");
				Если ПозицияКонцаОбъявленияСхемы > 0 Тогда
					ОбъявленияТипов = Сред(Сред(ВременныйФайлСтрока, 1, ПозицияКонцаОбъявленияСхемы - 1), ПозицияНачалаОбъявленияСхемы + ПозицияНачалаОбъявленияСхемыСкобка + 1, ПозицияКонцаОбъявленияСхемы);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Макет.Записать(ВременныйФайл.ИспользуемоеИмяФайла);
		ВременныйФайл.Прочитать(ВременныйФайл.ИспользуемоеИмяФайла, "windows-1251");
		
		ВременныйФайлСтрока = ВременныйФайл.ПолучитьТекст();
		
		// удаляем инструкцию include
		ПозицияНачалаДирективы = Найти(ВременныйФайлСтрока, "<xs:include");
		Если ПозицияНачалаДирективы > 0 Тогда
			ПозицияКонцаДирективы  = Найти(Сред(ВременныйФайлСтрока, ПозицияНачалаДирективы), ">");
			
			ВременныйФайлСтрока =   Лев(ВременныйФайлСтрока, ПозицияНачалаДирективы - 1)
			+ Сред(ВременныйФайлСтрока, ПозицияНачалаДирективы + ПозицияКонцаДирективы + 1);
		КонецЕсли;
		
		// внутрь схемы вставляем определение всех возможных типов
		ПозицияНачалаОбъявленияСхемы = Найти(ВременныйФайлСтрока, "<xs:schema");
		Если ПозицияНачалаОбъявленияСхемы > 0 Тогда
			ПозицияКонцаОбъявленияСхемы = Найти(ВременныйФайлСтрока, "</xs:schema>");
			
			ВременныйФайлСтрока =   Лев(ВременныйФайлСтрока, ПозицияНачалаОбъявленияСхемы + 10) 	
			+ " targetNamespace=""" + ИмяСхемы+ """ xmlns=""" + ИмяСхемы + """ " 
			+ Сред(Сред(ВременныйФайлСтрока, 1, ПозицияКонцаОбъявленияСхемы - 1), ПозицияНачалаОбъявленияСхемы + 10 + 1) 
			+ ОбъявленияТипов
			+ "</xs:schema>";
		КонецЕсли;
		
		ВременныйФайл.УстановитьТекст(ВременныйФайлСтрока);
		ВременныйФайл.Записать(ВременныйФайл.ИспользуемоеИмяФайла, "windows-1251");
				
		Попытка
			ФабрикаОтчета = СоздатьФабрикуXDTO(ВременныйФайл.ИспользуемоеИмяФайла);
		Исключение
			// не получилось создать фабрику - ошибка в схеме XSD
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка в схеме отчета (%1) .XSD! Выгрузка невозможна!';uk='Помилка в схемі звіту (%1) .XSD! Вивантаження неможлива!'"), ИмяСхемы) + "					
					 | " + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат СхемаОтчета;		 
		КонецПопытки;
		
		Для каждого Пакет Из ФабрикаОтчета.Пакеты Цикл
			Если Пакет.URIПространстваИмен = ИмяСхемы Тогда
				СхемаОтчета = Пакет;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			УдалитьФайлы(ВременныйФайл.ИспользуемоеИмяФайла);
		Исключение КонецПопытки;
		
	КонецЕсли;
	
	Возврат СхемаОтчета;
	
КонецФункции

&НаСервере
Функция ПолучитьИерархию()

	Иерархия = Объект.Выгрузки.Выгрузить(,"НомерВИерархии");
	Иерархия.Свернуть("НомерВИерархии", "");

	Возврат Иерархия.ВыгрузитьКолонку("НомерВИерархии");
	
КонецФункции


// СформироватьТекстыВыгрузкиКлиент()
//
&НаКлиенте
Процедура СформироватьТекстыВыгрузкиКлиент(ПервыйДок = Неопределено)
	
	ОшибкаВыгрузки = Ложь;
	
	КоличествоДокументовДляВыгрузки = 0;
	Для Каждого Стр Из Объект.Выгрузки Цикл
		Если Стр.фВыгрузка Тогда
			КоличествоДокументовДляВыгрузки = КоличествоДокументовДляВыгрузки + 1;
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоДокументовДляВыгрузки = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбраны отчетные формы!';uk='Не вибрані звітні форми!'"));
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;

	ТаблицаСообщений.Очистить();
	
	СчетчикВыгруженныхДокументов = 0;
	НомОтч = 0;
	ВыгрузкаПрервана = Ложь;
	
	Для каждого Стр Из Объект.Выгрузки Цикл
		Если НЕ Стр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиГНСУ_XML или НЕ Стр.фВыгрузка Тогда
			Стр.ИмяФайла = "";
			Стр.Текст = "";
			Продолжить;
		КонецЕсли;
		Стр.ИмяФайла = ПолучитьИмяФайлаВыгрузкиГСНУ_XML(Стр.ИмяСхемы, Стр.НазваниеСтраницыПанели, Стр.Префикс);
		Стр.Текст = "";
	КонецЦикла;
	
	
	Иерархия = ПолучитьИерархию();
	Для Каждого НомерВИерархии ИЗ Иерархия Цикл
		
		ОбработкаПрерыванияПользователя();

		ОтборГНСУ_XML = Объект.Выгрузки.НайтиСтроки(Новый Структура("НомерВИерархии, Тип, фВыгрузка", НомерВИерархии, ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиГНСУ_XML, Истина));
		
		ОтборГНСУ_XMLПараметр = Новый Массив();
		Для каждого ЭлементОтборГНСУ_XML Из ОтборГНСУ_XML Цикл
			ЭлементДанные = Новый Структура("Тип, ИмяФайла, Текст, фВыгрузка, ИмяСхемы, 
				|ПредставлениеСхемы, НазваниеСтраницыПанели, Префикс, Декларация, Приложение");
			ЗаполнитьЗначенияСвойств(ЭлементДанные,ЭлементОтборГНСУ_XML);
			ОтборГНСУ_XMLПараметр.Добавить(ЭлементДанные)
		КонецЦикла; 		
		
		Если ОтборГНСУ_XML.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
			
			
			СформироватьТекстыВыгрузкиСервер(ВыгрузкаПрервана, КоличествоДокументовДляВыгрузки, НомерВИерархии, НомОтч, ОтборГНСУ_XMLПараметр);
			
		КонецЕсли;
		//конец выгрузки в формате ГНС (XML)
		
		Для Инд=0 По ОтборГНСУ_XML.Количество()-1 Цикл
			ОтборГНСУ_XML[Инд].Текст = ОтборГНСУ_XMLПараметр[Инд].Текст;
		КонецЦикла; 
		
	КонецЦикла;
	
	Если ВыгрузкаПрервана Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось сформировать тексты выгрузки!';uk='Не вдалося сформувати тексти вивантаження!'");

		Сообщение.Сообщить();
		
		Если ТаблицаСообщений.Количество() <> 0 Тогда
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаСообщений.Количество() <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для исправления ошибок используйте окно информации об ошибках.';uk='Для виправлення помилок використовуйте вікно інформації про помилки.'");
		Сообщение.Сообщить();
		
		ОтобразитьФормуНавигацииПоОшибкам();
			
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресВХранилищеДанныхОтчета);
	УдалитьИзВременногоХранилища(АдресВХранилищеСтруктурыСхем);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстыВыгрузкиСервер(ВыгрузкаПрервана, Знач КоличествоДокументовДляВыгрузки, Знач НомерВИерархии, НомОтч, ОтборГНСУ_XML)
	
	Перем LINKED_DOCS_A, LINKED_DOCS_D, NUM, TYPE, Данные, Стр, СтрокаДекларации, СтрокаПриложения, СтрокиПриложений, СтруктураПараметров, ТекстВыгрузкиВXML;
	
	////////////////////////////////////
	// конец создания тегов LINKED_DOCS
	////////////////////////////////////
	
	// один для декларации, второй для приложений
	LINKED_DOCS_D = Новый ЗаписьXML();
	LINKED_DOCS_D.УстановитьСтроку();
	LINKED_DOCS_D.ЗаписатьНачалоЭлемента("LINKED_DOCS");			
	
	LINKED_DOCS_A = Новый ЗаписьXML();
	LINKED_DOCS_A.УстановитьСтроку();
	LINKED_DOCS_A.ЗаписатьНачалоЭлемента("LINKED_DOCS");
	
	// формируем теги для поля Декларации и Приложения 
	Если Объект.ВыгружатьПакетом Тогда
		
		// ДЛЯ ДЕКЛАРАЦИИ - ССЫЛКИ НА ВСЕ ФОРМИРУЕМЫЕ ПРИЛОЖЕНИЯ
		СтрокиПриложений = Объект.Выгрузки.НайтиСтроки(Новый Структура("НомерВИерархии, Приложение", НомерВИерархии, Истина)); 
		Если СтрокиПриложений.Количество() = 0 Тогда
			// фактически пустой тэг
			LINKED_DOCS_D.ЗаписатьАтрибут("xsi:nil", "true");
		КонецЕсли;
		NUM = 1; TYPE = 1; // ссылка на приложение
		Для Каждого СтрокаПриложения Из СтрокиПриложений Цикл
			Данные = СтрокаПриложения.ИмяФайла;
			
			LINKED_DOCS_D.ЗаписатьНачалоЭлемента("DOC");
			LINKED_DOCS_D.ЗаписатьАтрибут("NUM",  Формат(NUM, "ЧГ=0"));
			LINKED_DOCS_D.ЗаписатьАтрибут("TYPE", Формат(TYPE, "ЧГ=0"));
			
			LINKED_DOCS_D.ЗаписатьНачалоЭлемента("C_DOC");
			LINKED_DOCS_D.ЗаписатьТекст(Сред(Данные,15,3));
			LINKED_DOCS_D.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_D.ЗаписатьНачалоЭлемента("C_DOC_SUB");
			LINKED_DOCS_D.ЗаписатьТекст(Сред(Данные,18,3));
			LINKED_DOCS_D.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_D.ЗаписатьНачалоЭлемента("C_DOC_VER");
			LINKED_DOCS_D.ЗаписатьТекст(Формат(Число(Сред(Данные,21,2)), "ЧГ="));
			LINKED_DOCS_D.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_D.ЗаписатьНачалоЭлемента("C_DOC_TYPE");
			LINKED_DOCS_D.ЗаписатьТекст(Формат(Число(Сред(Данные,24,2)), "ЧН=;ЧГ="));
			LINKED_DOCS_D.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_D.ЗаписатьНачалоЭлемента("C_DOC_CNT");
			LINKED_DOCS_D.ЗаписатьТекст(Формат(Число(Сред(Данные,26,7)), "ЧГ="));
			LINKED_DOCS_D.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_D.ЗаписатьНачалоЭлемента("C_DOC_STAN");
			LINKED_DOCS_D.ЗаписатьТекст(Сред(Данные,23,1));
			LINKED_DOCS_D.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_D.ЗаписатьНачалоЭлемента("FILENAME");
			LINKED_DOCS_D.ЗаписатьТекст(Данные);
			LINKED_DOCS_D.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_D.ЗаписатьКонецЭлемента();
			
			
			NUM = NUM + 1;
		КонецЦикла;				
		
		// ДЛЯ Приложения - ССЫЛКИ НА декларацию
		СтрокаДекларации = Объект.Выгрузки.НайтиСтроки(Новый Структура("НомерВИерархии, Декларация", НомерВИерархии, Истина));
		Если СтрокаДекларации.Количество() <> 1 Тогда
			// фактически пустой тэг
			LINKED_DOCS_A.ЗаписатьАтрибут("xsi:nil", "true");
		Иначе
			NUM = 1; TYPE = 2; // ссылка на приложение
			Данные = СтрокаДекларации[0].ИмяФайла;
			
			LINKED_DOCS_A.ЗаписатьНачалоЭлемента("DOC");
			LINKED_DOCS_A.ЗаписатьАтрибут("NUM",  Формат(NUM, "ЧГ=0"));
			LINKED_DOCS_A.ЗаписатьАтрибут("TYPE", Формат(TYPE, "ЧГ=0"));
			
			LINKED_DOCS_A.ЗаписатьНачалоЭлемента("C_DOC");
			LINKED_DOCS_A.ЗаписатьТекст(Сред(Данные,15,3));
			LINKED_DOCS_A.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_A.ЗаписатьНачалоЭлемента("C_DOC_SUB");
			LINKED_DOCS_A.ЗаписатьТекст(Сред(Данные,18,3));
			LINKED_DOCS_A.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_A.ЗаписатьНачалоЭлемента("C_DOC_VER");
			LINKED_DOCS_A.ЗаписатьТекст(Формат(Число(Сред(Данные,21,2)), "ЧГ="));
			LINKED_DOCS_A.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_A.ЗаписатьНачалоЭлемента("C_DOC_TYPE");
			LINKED_DOCS_A.ЗаписатьТекст(Формат(Число(Сред(Данные,24,2)), "ЧН=; ЧГ="));
			LINKED_DOCS_A.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_A.ЗаписатьНачалоЭлемента("C_DOC_CNT");
			LINKED_DOCS_A.ЗаписатьТекст(Формат(Число(Сред(Данные,26,7)), "ЧГ="));
			LINKED_DOCS_A.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_A.ЗаписатьНачалоЭлемента("C_DOC_STAN");
			LINKED_DOCS_A.ЗаписатьТекст(Сред(Данные,23,1));
			LINKED_DOCS_A.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_A.ЗаписатьНачалоЭлемента("FILENAME");
			LINKED_DOCS_A.ЗаписатьТекст(Данные);
			LINKED_DOCS_A.ЗаписатьКонецЭлемента();
			
			LINKED_DOCS_A.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	Иначе	
		
		// пустые теги
		LINKED_DOCS_D.ЗаписатьАтрибут("xsi:nil", "true");
		LINKED_DOCS_A.ЗаписатьАтрибут("xsi:nil", "true");
		
	КонецЕсли;
	
	LINKED_DOCS_D.ЗаписатьКонецЭлемента();
	LINKED_DOCS_D = Символы.ПС + Символы.Таб + LINKED_DOCS_D.Закрыть();
	
	LINKED_DOCS_A.ЗаписатьКонецЭлемента();
	LINKED_DOCS_A = Символы.ПС + Символы.Таб + LINKED_DOCS_A.Закрыть();
	////////////////////////////////////
	// конец создания тегов LINKED_DOCS
	////////////////////////////////////
	
	АдресВХранилищеТаблицыОшибок = "";
	
	Для Каждого Стр Из ОтборГНСУ_XML Цикл
		
		ВыгрузкаПрервана = Истина;
		ВыгрузкаПрервана = Ложь;
		
		НомОтч = НомОтч + 1;
		
		Попытка
			
			СтруктураПараметров = Новый Структура("ИмяСхемы, ТекстВыгрузкиВXML", Стр.ИмяСхемы, "");
			
			СтруктураПараметров.Вставить("НазваниеСтраницыПанели", 	Стр.НазваниеСтраницыПанели);
			СтруктураПараметров.Вставить("Префикс", 				Стр.Префикс);
			
			Если Стр.Декларация Тогда
				СтруктураПараметров.Вставить("LINKED_DOCS", LINKED_DOCS_D);	
			Иначе
				СтруктураПараметров.Вставить("LINKED_DOCS", LINKED_DOCS_A);	
			КонецЕсли;
			
			СформироватьТекстВыгрузкиСервер_ГНСУ_XML(СтруктураПараметров);
			
			ТекстВыгрузкиВXML = СтруктураПараметров.ТекстВыгрузкиВXML;
			
		Исключение
			
			ВыгрузкаПрервана = Истина;
			ОшибкаВыгрузки = Истина;
			Прервать;
			
		КонецПопытки;
		
		Если НЕ ВыгрузкаПрервана Тогда
			Стр.Текст       = ТекстВыгрузкиВXML;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // СформироватьТекстыВыгрузкиКлиент()

// ОтобразитьФормуНавигацииПоОшибкам()
//
&НаКлиенте
Процедура ОтобразитьФормуНавигацииПоОшибкам()
	
	ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам",,,Объект.Основание);
	
	СтруктураТаблицаСообщений = Новый Структура("ТаблицаСообщений", ТаблицаСообщений);
	
	ФормаНавигацииПоОшибкам.ВладелецТС = СтруктураТаблицаСообщений;
	
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		ФормаНавигацииПоОшибкам.Закрыть();
	КонецЕсли;
	
	ФормаНавигацииПоОшибкам.Открыть();
	
КонецПроцедуры


// Сохраняет выбранные пользователем тексты выгрузки в файлы.
//
// Параметры:
//	ТолькоСохранениеТекстов - Булево. Если признак не равен Истина, то запись документа после сохранения не производится.
//
&НаКлиенте
Процедура СохранитьТексты(КаталогСохранения = Неопределено, ИмяКонечногоФайла = Неопределено, ТекстВыгрузки = "", КодировкаТекстаВыгрузки = Неопределено, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина) Экспорт
	
	// если не выбран ни один отчет, то прерываемся
	ЧислоВыгружаемыхОтчетов = 0;
	Для Каждого Эл Из Объект.Выгрузки Цикл
		Если Эл.фВыгрузка Тогда
			ЧислоВыгружаемыхОтчетов = ЧислоВыгружаемыхОтчетов + 1;
			Если  НЕ ЗначениеЗаполнено(Эл.ИмяФайла)  Тогда
				ЧислоВыгружаемыхОтчетов = 0;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЧислоВыгружаемыхОтчетов = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сохранение не выполнено! Возможно не установлены пометки для выгружаемых форм или не были сформированы тексты выгрузок';uk='Збереження не виконано! Можливо не встановлені позначки для вивантажуються форм або не були сформовані тексти вивантажень'"));
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	
	// определяем каталог выгрузки
	Если КаталогСохранения = Неопределено Тогда
		
		Если  ПустаяСтрока(ПутьВыгрузки) Тогда
		#Если НЕ ВебКлиент Тогда
			
			ПутьВыгрузки = РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузки();
			Если ПутьВыгрузки = Ложь Тогда
				ОшибкаВыгрузки = Истина;
				Возврат;
			КонецЕсли;
			
		#КонецЕсли
		КонецЕсли;
	Иначе
		
		ПутьВыгрузки = КаталогСохранения;
		
	КонецЕсли;
	
	ИменаЗаписанныхФайловВыгрузки = Новый Массив;
	
	ВыгруженХотяБыОдинФайл = Ложь;
	БылаОшибкаЗаписи = Ложь;

	Если НЕ БылаОшибкаЗаписи = Истина Тогда
		// последовательно пытаемся записать выбранные пользователем файлы,
		// в случае неудачи - информируем пользователя, взводим флаг ошибки записи и прерываемся.
		Для Каждого ТекСтр из Объект.Выгрузки Цикл
			
			Если НЕ ТекСтр.фВыгрузка Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекСтр.ИмяФайла) Тогда
				
				Если ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиГНСУ_XML  Тогда
					
					Текст = Новый ТекстовыйДокумент;
					Текст.УстановитьТекст(ТекСтр.Текст);
			
					ТекстВыгрузки 		= ТекСтр.Текст;
					ИмяКонечногоФайла 	= ТекСтр.ИмяФайла;
					КодировкаТекстаВыгрузки = "windows-1251";
									
					Попытка
					
						
						#Если ВебКлиент Тогда
							
							Если ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно Тогда
								
								ПолучитьФайл(ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, ТекСтр.ИмяФайла, КодировкаТекстаВыгрузки), ИмяКонечногоФайла, Истина);
								
							Иначе
								
								ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
								
								ПередаваемыйФайл.Имя      = ПутьВыгрузки + ИмяКонечногоФайла;
								ПередаваемыйФайл.Хранение = ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, ТекСтр.ИмяФайла, КодировкаТекстаВыгрузки);
								
								МассивПередаваемыхФайлов = Новый Массив;
								
								МассивПередаваемыхФайлов.Добавить(ПередаваемыйФайл);
								
								ПолучитьФайлы(МассивПередаваемыхФайлов, , , Ложь);
								
							КонецЕсли;   
							
						#Иначе
							
							ИмяВременногоФайла = КаталогВременныхФайлов() + ИмяКонечногоФайла;
							ПолноеИмяКонечногоФайла = ПутьВыгрузки + ИмяКонечногоФайла;
							ТекстВыгрузки = ТекСтр.Текст;
							Текст.Записать(ИмяВременногоФайла, КодировкаТекстаВыгрузки);
							ПереместитьФайл(ИмяВременногоФайла, ПолноеИмяКонечногоФайла);
							
						#КонецЕсли
						
						ИменаЗаписанныхФайловВыгрузки.Добавить(ТекСтр.ИмяФайла);
						
					Исключение
						
						Сообщение = Новый СообщениеПользователю;

						
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать файл ""%1""! Возможно, недостаточно места на диске или диск защищен от записи.';uk='Не вдалося записати файл ""%1""! Можливо, недостатньо місця на диску або диск захищений від запису.'"), ИмяКонечногоФайла);
						
						#Если ВебКлиент Тогда
							Если НЕ ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно Тогда
								Сообщение.Текст = Сообщение.Текст + НСтр("ru=' Также, возможно, не подключено расширение для работы с файлами.';uk='Також, можливо, не підключено розширення для роботи з файлами.'");
							КонецЕсли;
						#КонецЕсли

						Сообщение.Сообщить();
						
						БылаОшибкаЗаписи = Истина;
						
						Прервать;
						
					КонецПопытки;
					
				КонецЕсли;
				ВыгруженХотяБыОдинФайл = Истина;
				
			КонецЕсли;	
				
		КонецЦикла;
	
	КонецЕсли; 
	
	// Если был выгружен хотя бы один файл и не было ошибок записи - сохраним
	// и проведем документ. Иначе выведем соответствующее сообщение.
	Если ВыгруженХотяБыОдинФайл Тогда
		
		Если БылаОшибкаЗаписи = Истина Тогда
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='В процессе записи отчетов произошла ошибка!';uk='У процесі запису звітів відбулася помилка!'");

			Сообщение.Сообщить();
		Иначе
			
			#Если НЕ ВебКлиент Тогда
				
				Если КаталогСохранения = Неопределено Тогда
					Если ИменаЗаписанныхФайловВыгрузки.Количество() = 1 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Файл выгрузки регламентированного отчета ""%1"" сохранен в каталог ""%2"".';uk='Файл вивантаження регламентованого звіту ""%1"" збережено у каталог ""%2"".'"), ИменаЗаписанныхФайловВыгрузки[0], ПутьВыгрузки);
					Иначе
						ТекстСообщения = НСтр("ru='Файлы выгрузки регламентированных отчетов:';uk='Файли вивантаження регламентованих звітів:'");
						Для Каждого ИмяЗаписанногоФайлаВыгрузки Из ИменаЗаписанныхФайловВыгрузки Цикл
							ТекстСообщения = ТекстСообщения + Символы.ПС + "- """ + ИмяЗаписанногоФайлаВыгрузки + """;";
						КонецЦикла;
						ТекстСообщения = ТекстСообщения +  Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='сохранены в каталог ""%1"".';uk='збережено у каталог ""%1"".'"), ПутьВыгрузки);
					КонецЕсли;
					
					Сообщение = Новый СообщениеПользователю;
					
					Сообщение.Текст = ТекстСообщения;
					
					Сообщение.Сообщить();
					
				КонецЕсли;
				
			#КонецЕсли
			
		КонецЕсли;
		
	Иначе
		ОшибкаВыгрузки = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, ТекСтрИмяФайла, КодировкаТекста)
		
	ИмяВременногоФайла = КаталогВременныхФайлов() + ТекСтрИмяФайла;
		
	Текст.Записать(ИмяВременногоФайла, КодировкаТекста);	
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор());
	
КонецФункции // ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере()

// ПоказатьТекстВыгрузки()
//
&НаКлиенте
Процедура ПоказатьТекстВыгрузки(Команда)
	
	Выгрузка = Элементы.Выгрузки.ТекущиеДанные;	
	
	Если Выгрузка = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не задана текущая строка!';uk='Не заданий поточний рядок!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Выгрузка.Текст) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Для выбранного отчета текст выгрузки не сформирован!';uk='Для вибраного звіту текст вивантаження не сформований!'"));
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Выгрузка.Текст);
	Текст.ТолькоПросмотр = Истина;
	
	Если Выгрузка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиГНСУ_XML Тогда
	 
	 	Текст.УстановитьТипФайла("windows-1251");
		
	Иначе
		
		Текст.УстановитьТипФайла("UTF8");
		
	КонецЕсли;
	
	Текст.Показать(Элементы.Выгрузки.ТекущиеДанные.ИмяСхемы + " - " + НСтр("ru='электронное представление';uk= 'електронне представлення'"));
	
КонецПроцедуры // ПоказатьТекстВыгрузки()


// Сохранить()
//
&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьТексты();
	
КонецПроцедуры // Сохранить()


&НаКлиенте
Процедура СформироватьТаблицуВыгрузки();

	Если ЭтаФорма.ВладелецФормы = Неопределено ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		
		РеквизитыДокумента = Новый Структура();
		РеквизитыДокумента.Вставить("ДатаНачала");
		РеквизитыДокумента.Вставить("ДатаОкончания");
		РеквизитыДокумента.Вставить("Периодичность");
		РеквизитыДокумента.Вставить("Организация");
		РеквизитыДокумента.Вставить("ВыбраннаяФорма");
		РеквизитыДокумента.Вставить("ИсточникОтчета");

		
		ПолучитьРеквизитыДокумента(Объект.Основание, РеквизитыДокумента);		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоДня(РеквизитыДокумента.ДатаНачала));
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецДня(РеквизитыДокумента.ДатаОкончания));
		ПараметрыФормы.Вставить("мПериодичность",           РеквизитыДокумента.Периодичность);
		ПараметрыФормы.Вставить("Организация",              РеквизитыДокумента.Организация);
		ПараметрыФормы.Вставить("мВыбраннаяФорма",          РеквизитыДокумента.ВыбраннаяФорма);
		ПараметрыФормы.Вставить("мСохраненныйДок", 			Объект.Основание);
		
		Попытка
			ТекФорма = ПолучитьФорму("Отчет." + РеквизитыДокумента.ИсточникОтчета + ".Форма." + РеквизитыДокумента.ВыбраннаяФорма, ПараметрыФормы, , Объект.Ссылка);
		Исключение
			ПоказатьПредупреждение(,НСтр("ru='Внимание! Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';uk='Увага! Застаріла редакція форми звіту не підтримується поточною версією конфігурації.'"));
			Возврат;
		КонецПопытки;
			
		ТекФорма.СтруктураРеквизитовФормы.Организация = РеквизитыДокумента.Организация;
		
	Иначе
		ТекФорма = ЭтаФорма.ВладелецФормы;
	КонецЕсли;	
		
	АдресВХранилище = ТекФорма.СоздатьТаблицуВыгружаемыхОтчетныхФорм();
	СформироватьТаблицуВыгрузкиНаСервере(АдресВХранилище);
	УдалитьИзВременногоХранилища(АдресВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьФлажкиДекларацияПриложение()

	Иерархия = Объект.Выгрузки.Выгрузить(,"НомерВИерархии");
	Иерархия.Свернуть("НомерВИерархии", "");
	Для Каждого НомерВИерархии ИЗ Иерархия Цикл
		
		СтрокиОднойДекларации = Объект.Выгрузки.НайтиСтроки(Новый Структура("НомерВИерархии", НомерВИерархии.НомерВИерархии));
		
		ПервыйИндекс = Объект.Выгрузки.Индекс(СтрокиОднойДекларации[0]);
		
		Для каждого Строка Из СтрокиОднойДекларации Цикл
			Строка.Декларация =    (Объект.Выгрузки.Индекс(Строка) = ПервыйИндекс) И Строка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиГНСУ_XML;
			Если Строка.Декларация Тогда
				Строка.фВыгрузка  =  Истина;
			КонецЕсли;
			Строка.Приложение = НЕ (Объект.Выгрузки.Индекс(Строка) = ПервыйИндекс) И Строка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиГНСУ_XML И Строка.фВыгрузка;
		КонецЦикла;
	
	КонецЦикла;
	

КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуВыгрузкиНаСервере(АдресВХранилище)
	
	Попытка
		ТаблицаВыгрузки = ПолучитьИзВременногоХранилища(АдресВХранилище);
		Объект.Выгрузки.Загрузить(ТаблицаВыгрузки);
		
		ЗаполнитьИерархию();
		ПроставитьФлажкиДекларацияПриложение();
		
	Исключение
		Сообщить(НСтр("ru='Данный отчет не поддерживает режим выгрузки!';uk= 'Даний звіт не підтримує режим вивантаження!'"));	
	КонецПопытки
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОчиститьДокумент();
КонецПроцедуры


&НаСервере
Процедура ОчиститьДокумент()

	Объект.Основание = Документы.РегламентированныйОтчет.ПустаяСсылка();
	Объект.Выгрузки.Очистить();

КонецПроцедуры


&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если НЕ Объект.Основание.Пустая() Тогда
		
		РеквизитыДокумента = Новый Структура();
		РеквизитыДокумента.Вставить("Организация");
		ПолучитьРеквизитыДокумента(Объект.Основание, РеквизитыДокумента);		
		
		Объект.Организация = РеквизитыДокумента.Организация;
		
		СформироватьТаблицуВыгрузки();
		
	КонецЕсли;
	
	ЗаполнитьИнформациюОбОтчете();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьИнформациюОбОтчете()
	
	Если Объект.Основание.Пустая() Тогда     
		Элементы.ИнформацияОбОтчете.Заголовок = НСтр("ru='Информация об отчете: <отчет не выбран>';uk='Інформація про звіт: <звіт не вибраний>'");
	Иначе	
		Элементы.ИнформацияОбОтчете.Заголовок = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Объект.Основание);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОтчетыЗаполнить(Команда)
	
	Если Объект.Основание.Пустая() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не указан отчет, подлежащий выгрузке!';uk='Не вказаний звіт, який підлягає вивантаженню!'"));	
		Возврат;
	КонецЕсли;
	
	СформироватьТаблицуВыгрузки();
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка= Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекОрганизация",      Объект.Организация);
	СтруктураПараметров.Вставить("ТекущаяСтрока",       Объект.Основание);
	СтруктураПараметров.Вставить("РежимВыбора",  		Истина);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",  Истина);

	ОткрытьФорму("Документ.РегламентированныйОтчет.Форма.ФормаСписка", СтруктураПараметров, Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если НЕ ЭтаФорма.ВладелецФормы = Неопределено И ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		Элементы.Основание.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.ПутьВыгрузки.Видимость = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИерархию()
	
	Для каждого Строка Из ОБъект.Выгрузки Цикл
		
		Позиция_ = Найти(Строка.НазваниеСтраницыПанели, "_");
		
		Если Позиция_ > 0 и Лев(Строка.Префикс,1) = "D" Тогда
			Строка.НомерВИерархии = Число(Сред(Строка.НазваниеСтраницыПанели, Позиция_+1));
			
			// для условного оформления все нечетные индексы делаем отрицательными
			Если Строка.НомерВИерархии%2 = 1 Тогда
				Строка.НомерВИерархии = -Строка.НомерВИерархии;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьИерархию();
	
КонецПроцедуры

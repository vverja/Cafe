
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	УстановитьУсловноеОформление();
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	СписаниеДебиторскойЗадолженности = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности;
	СписаниеКредиторскойЗадолженности = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности;
	ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		Если РезультатВыбора.ХозяйственнаяОперация = СписаниеДебиторскойЗадолженности Тогда
			ПолучитьДебиторскуюЗадолженностиИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		Иначе
			ПолучитьКредиторскуюЗадолженностиИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_ВзаимозачетЗадолженности", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СуммаДебиторки = Объект.ДебиторскаяЗадолженность.Итог("Сумма");
		СуммаКредиторки = Объект.КредиторскаяЗадолженность.Итог("Сумма");
		
		Если СуммаДебиторки = СуммаКредиторки И Объект.СуммаДокумента <> СуммаДебиторки Тогда
			
			Отказ = Истина;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", 
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(
				ЭтаФорма,
				ОписаниеОповещения,
				"ДебиторскаяЗадолженность");
			
		КонецЕсли;
		
	КонецЕсли;
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры



&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("ВидОперации", Объект.ВидОперации);
		
		Оповещение = Новый ОписаниеОповещения("ВидОперацииНачалоВыбораЗавершение", ЭтаФорма);
		
		ОткрытьФорму(
			"Документ.ВзаимозачетЗадолженности.Форма.ВыборВидаОперации",
			ПараметрыФормы,
			ЭтаФорма,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Объект.ВидОперации <> Результат Тогда
		Объект.ВидОперации = Результат;
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если Объект.СуммаДокумента <> 0 И (Объект.ДебиторскаяЗадолженность.Итог("Сумма") > 0
		ИЛИ Объект.КредиторскаяЗадолженность.Итог("Сумма") > 0) Тогда
	
		ТекстВопроса = НСтр("ru='Суммы дебиторской и кредиторской задолженности будут скорректированы, продолжить?';uk='Суми дебіторської та кредиторської заборгованості будуть скориговані, продовжити?'");
		КодОтвета = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("СуммаДокументаПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		РассчитатьСуммыВзаимозачета(Объект.СуммаДокумента);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ФинансыКлиент.НеобходимПересчетВВалюту(Объект, ТекущаяВалюта, Объект.Валюта) Тогда
		Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация") Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Пересчитать суммы в документе в валюту %1?';uk='Перерахувати суми в документі у валюту %1?'"),
				Объект.Валюта);
			
			КнопкиДиалогаВопрос = Новый СписокЗначений;
			КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Пересчитать';uk='Перерахувати'"));
			КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить';uk='Скасувати'"));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("РазрешенПересчетВВалюту", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиДиалогаВопрос);
		Иначе 	
			ТекстВопроса = НСтр("ru='Табличная часть будет очищена, продолжить?';uk='Таблична частина буде очищена, продовжити?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("РазрешенаОчисткаСтрок", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенПересчетВВалюту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПересчетСуммДокументаВВалюту();
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
		ТекущаяВалюта = Объект.Валюта;
	Иначе
		
		Объект.Валюта = ТекущаяВалюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенаОчисткаСтрок(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСуммыДокумента(ЭтотОбъект);
		ТекущаяВалюта = Объект.Валюта;
	Иначе
		Объект.Валюта = ТекущаяВалюта;
	КонецЕсли;
	
КонецПроцедуры
 

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДебитораПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.ДебиторскаяЗадолженность.Количество() > 0;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ЕстьСтроки", ЕстьСтроки);
	
	Оповещение = Новый ОписаниеОповещения(
		"ТипДебитораПриИзмененииНужноОчищатьТЧЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	НужноОчищатьТЧ(Оповещение, ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДебитораПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	ТипДебитораПриИзмененииНаСервере(ДополнительныеПараметры.ЕстьСтроки, ОчиститьТЧ = КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКредитораПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.КредиторскаяЗадолженность.Количество() > 0;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ЕстьСтроки", ЕстьСтроки);
	
	Оповещение = Новый ОписаниеОповещения(
		"ТипКредитораПриИзмененииНужноОчищатьТЧЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	НужноОчищатьТЧ(Оповещение, ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКредитораПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	ТипКредитораПриИзмененииНаСервере(ДополнительныеПараметры.ЕстьСтроки, ОчиститьТЧ = КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.ДебиторскаяЗадолженность.Количество()>0;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ЕстьСтроки", ЕстьСтроки);
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("КонтрагентДебиторПриИзмененииНужноОчищатьТЧЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПартнераДебитора(ДополнительныеПараметры.ЕстьСтроки, ОчиститьТЧ = КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.КредиторскаяЗадолженность.Количество()>0;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ЕстьСтроки", ЕстьСтроки);
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("КонтрагентКредиторПриИзмененииНужноОчищатьТЧЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПартнераКредитора(ДополнительныеПараметры.ЕстьСтроки, ОчиститьТЧ = КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебиторскаяЗадолженность

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	
	Если НоваяСтрока и Не Копирование Тогда
		
		Если Не (РасчетыМеждуОрганизациямиДебитор Или ЗначениеЗаполнено(ПартнерДебитор)) Тогда
			ЗаполнитьПартнераДебитора();
		КонецЕсли;
		
		СтрокаТаблицы.Партнер = ПартнерДебитор;
		
		СуммаОстаток = Объект.СуммаДокумента - Объект.ДебиторскаяЗадолженность.Итог("Сумма");
		Элемент.ТекущиеДанные.Сумма = СуммаОстаток;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация", ПараметрыЗадолженности.Организация.Значение);
	ЗначенияОтбора.Вставить("Контрагент", ПараметрыЗадолженности.Контрагент.Значение);
	ЗначенияОтбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	ЗначенияОтбора.Вставить("Валюта", Объект.Валюта);

	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = РасчетыСКлиентамиДебитор;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	Если Объект.Валюта = СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	Иначе
		СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредиторскаяЗадолженность

&НаКлиенте
Процедура КредиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	
	Если НоваяСтрока и Не Копирование Тогда
		
		Если Не (РасчетыМеждуОрганизациямиКредитор Или ЗначениеЗаполнено(ПартнерКредитор)) Тогда
			ЗаполнитьПартнераКредитора();
		КонецЕсли;
		
		СтрокаТаблицы.Партнер = ПартнерКредитор;
		
		СуммаОстаток = Объект.СуммаДокумента - Объект.КредиторскаяЗадолженность.Итог("Сумма");
		СтрокаТаблицы.Сумма = СуммаОстаток;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация", ПараметрыЗадолженности.Организация.Значение);
	ЗначенияОтбора.Вставить("Контрагент", ПараметрыЗадолженности.Контрагент.Значение);
	ЗначенияОтбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	ЗначенияОтбора.Вставить("Валюта", Объект.Валюта);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = РасчетыСКлиентамиКредитор;
	НастройкиВыбора.УчитыватьФилиалы      = ПараметрыЗадолженности.УчитыватьФилиалы;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если Объект.Валюта = СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	Иначе
		СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

// Функция используется в автотесте процесса продаж.
//
&НаКлиенте
Процедура АвтоТест_РассчитатьВзаимозачет(Команда) Экспорт
	
	ПараметрыДебиторки = СтруктураПараметровЗадолженности(ЭтаФорма);
	ПараметрыКредиторки = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Валюта");
	СтруктураРеквизитов.Вставить(
		ПараметрыДебиторки.Организация.ИмяРеквизита,
		ПараметрыДебиторки.Организация.Представление);
	СтруктураРеквизитов.Вставить(
		ПараметрыДебиторки.Контрагент.ИмяРеквизита,
		ПараметрыДебиторки.Контрагент.Представление);
	
	Если ПараметрыДебиторки.Организация.ИмяРеквизита <> ПараметрыКредиторки.Организация.ИмяРеквизита Тогда
		СтруктураРеквизитов.Вставить(
			ПараметрыКредиторки.Организация.ИмяРеквизита,
			ПараметрыКредиторки.Организация.Представление);
	КонецЕсли;
	
	Если ПараметрыДебиторки.Контрагент.ИмяРеквизита <> ПараметрыКредиторки.Контрагент.ИмяРеквизита Тогда
		СтруктураРеквизитов.Вставить(
			ПараметрыКредиторки.Контрагент.ИмяРеквизита,
			ПараметрыКредиторки.Контрагент.Представление);
	КонецЕсли;
	
	Если (Объект.ДебиторскаяЗадолженность.Количество() = 0 ИЛИ Объект.КредиторскаяЗадолженность.Количество() = 0) Тогда
		
		Оповещение = Новый ОписаниеОповещения("АвтоТест_РассчитатьВзаимозачетЗавершение", ЭтотОбъект);
		ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
			Оповещение, 
			ЭтаФорма, 
			Неопределено, 
			СтруктураРеквизитов);
			
	Иначе
		РассчитатьСуммыВзаимозачета(Объект.СуммаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамДебиторскуюЗадолженность(Команда)
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Валюта");
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженности.Организация.ИмяРеквизита,
		ПараметрыЗадолженности.Организация.Представление);
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженности.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженности.Контрагент.Представление);
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамДебиторскуюЗадолженностьЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамКредиторскуюЗадолженность(Команда)
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Валюта");
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженности.Организация.ИмяРеквизита,
		ПараметрыЗадолженности.Организация.Представление);
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженности.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженности.Контрагент.Представление);
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамКредиторскуюЗадолженностьЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыПоВидуОперации()
	
	ПроизвольнаяОперация = (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный);
	
	Элементы.ТипДебитора.Видимость  = ПроизвольнаяОперация;
	Элементы.ТипКредитора.Видимость = ПроизвольнаяОперация;
	
	СтруктураПредставлений = Документы.ВзаимозачетЗадолженности.ПредставлениеРекизитовПоВидуОперации(Объект.ВидОперации);
	Элементы.ДекорацияОрганизация.Заголовок = СтруктураПредставлений.Организация + ":";
	Элементы.ДекорацияОрганизацияКредитор.Заголовок = СтруктураПредставлений.ОрганизацияКредитор + ":";
	Элементы.ДекорацияДебитор.Заголовок = СтруктураПредставлений.КонтрагентДебитор + ":";
	Элементы.ДекорацияКредитор.Заголовок = СтруктураПредставлений.КонтрагентКредитор + ":";
	
	Элементы.ДекорацияОрганизация.Видимость = ИспользоватьНесколькоОрганизаций;
	
	МеждуОрганизациями = ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации);
	Элементы.ОрганизацияКредитор.Видимость          = МеждуОрганизациями;
	Элементы.ДекорацияОрганизацияКредитор.Видимость = МеждуОрганизациями;
	Элементы.ВидОперации.РастягиватьПоГоризонтали   = МеждуОрганизациями;
	
	ВидимостьЭлемента = ВыбранВидОперацииМеждуКонтрагентами(Объект.ВидОперации);
	Элементы.ДекорацияКредитор.Видимость = ВидимостьЭлемента;
	Элементы.ВыборКредитора.Видимость    = ВидимостьЭлемента;
	
	Если ВыбранВидОперацииСКлиентом() Тогда
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Отгрузки (дебиторская задолженность)';uk='Відвантаження (дебіторська заборгованість)'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Полученные авансы (кредиторская задолженность)';uk='Отримані аванси (кредиторська заборгованість)'");
		
	ИначеЕсли ВыбранВидОперацииСПоставщиком() Тогда
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Уплаченные авансы (дебиторская задолженность)';uk='Сплачені аванси (дебіторська заборгованість)'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Поступления (кредиторская задолженность)';uk='Надходження (кредиторська заборгованість)'");
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер Тогда
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Отгрузки';uk='Відвантаження'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Поступления';uk='Надходження'");
		
	Иначе
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Дебиторская задолженность';uk='Дебіторська заборгованість'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Кредиторская задолженность';uk='Кредиторська заборгованість'");
		
	КонецЕсли;
	
	УстановитьВидимостьФилиалов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьФилиалов()
	
	ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	МеждуОрганизациями = ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации);
	
	Элементы.ДебиторскаяЗадолженностьОрганизация.Видимость  = ЕстьФилиалы;
	Элементы.КредиторскаяЗадолженностьОрганизация.Видимость = ЕстьФилиалы И Не МеждуОрганизациями;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСуммы()
	
	СтрокаЗаголовок = НСтр("ru='Сумма (%Валюта%)';uk='Сума (%Валюта%)'");
	СтрокаЗаголовок = СтрЗаменить(СтрокаЗаголовок, "%Валюта%", Строка(Объект.Валюта));
	
	Элементы.ДебиторскаяЗадолженностьСумма.Заголовок = СтрокаЗаголовок;
	Элементы.КредиторскаяЗадолженностьСумма.Заголовок = СтрокаЗаголовок;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьВыборВидаОперации()
	
	Если Не Пользователи.ЭтоПолноправныйПользователь()
		И Пользователи.РолиДоступны("ДобавлениеИзменениеДокументовКорректировкиЗадолженностиЗачетОплаты") Тогда
		
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента);
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика);
		
		Если Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
			Элементы.ВидОперации.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ВидОперации.РежимВыбораИзСписка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Валюту взаиморасчетов можно изменять только для управленеской организации
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьВалютаВзаиморасчетов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьВалютаВзаиморасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Организации.УправленческаяОрганизация;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура АвтоТест_РассчитатьВзаимозачетЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Объект.ДебиторскаяЗадолженность.Количество() = 0 Тогда
		ЗаполнитьПоОстаткамДебиторскуюЗадолженностьСервер();
	КонецЕсли;
	
	Если Объект.КредиторскаяЗадолженность.Количество() = 0 Тогда
		ЗаполнитьПоОстаткамКредиторскуюЗадолженностьСервер();
	КонецЕсли;
	
	РассчитатьСуммыВзаимозачета(Объект.СуммаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамДебиторскуюЗадолженностьСервер()
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткам(
		ПараметрыЗадолженности.Организация.Значение,
		ПараметрыЗадолженности.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Дебиторская,
		ПараметрыЗадолженности.ТипРасчетов,
		Объект.Дата,
		Объект.Валюта,
		Объект.ДебиторскаяЗадолженность);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамКредиторскуюЗадолженностьСервер()
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткам(
		ПараметрыЗадолженности.Организация.Значение,
		ПараметрыЗадолженности.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Кредиторская,
		ПараметрыЗадолженности.ТипРасчетов,
		Объект.Дата,
		Объект.Валюта,
		Объект.КредиторскаяЗадолженность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамДебиторскуюЗадолженностьЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище(Объект.ДебиторскаяЗадолженность);
	ПараметрыЗадолженности  = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ПараметрыПодбора.Вставить("Валюта"                 , Объект.Валюта);
	ПараметрыПодбора.Вставить("Организация"            , ПараметрыЗадолженности.Организация.Значение);
	ПараметрыПодбора.Вставить("Контрагент"             , ПараметрыЗадолженности.Контрагент.Значение);
	ПараметрыПодбора.Вставить("СуммаДокумента"         , Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента"          , Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация"  , СписаниеДебиторскойЗадолженности);
	ПараметрыПодбора.Вставить("ТипРасчетов"            , ПараметрыЗадолженности.ТипРасчетов);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора, 
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамКредиторскуюЗадолженностьЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище(Объект.КредиторскаяЗадолженность);
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ПараметрыПодбора.Вставить("Валюта"                 , Объект.Валюта);
	ПараметрыПодбора.Вставить("Организация"            , ПараметрыЗадолженности.Организация.Значение);
	ПараметрыПодбора.Вставить("Контрагент"             , ПараметрыЗадолженности.Контрагент.Значение);
	ПараметрыПодбора.Вставить("СуммаДокумента"         , Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента"          , Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация"  , СписаниеКредиторскойЗадолженности);
	ПараметрыПодбора.Вставить("ТипРасчетов"            , ПараметрыЗадолженности.ТипРасчетов);
	ПараметрыПодбора.Вставить("УчитыватьФилиалы"       , ПараметрыЗадолженности.УчитыватьФилиалы);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора, 
		ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераВТабличнойЧасти(ОбъектТабличнаяЧасть, ПартнерСсылка, РасчетыМеждуОрганизациями)
	Для Каждого СтрокаТаблицы из ОбъектТабличнаяЧасть Цикл
		Если РасчетыМеждуОрганизациями Тогда
			СтрокаТаблицы.Партнер = Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
			СтрокаТаблицы.Партнер = ПартнерСсылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераДебитора(ЗаполнятьТЧ = Ложь, ОчиститьТЧ = Ложь)

	Если Не РасчетыМеждуОрганизациямиДебитор И ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
		ПартнерДебитор = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.КонтрагентДебитор);
	КонецЕсли;
	
	Если ЗаполнятьТЧ Тогда
		Если ОчиститьТЧ Тогда
			ОчиститьСуммыДокумента(ЭтаФорма);
		Иначе
			ЗаполнитьПартнераВТабличнойЧасти(Объект.ДебиторскаяЗадолженность, ПартнерДебитор, РасчетыМеждуОрганизациямиДебитор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераКредитора(ЗаполнятьТЧ = Ложь, ОчиститьТЧ = Ложь)
	
	Если Не РасчетыМеждуОрганизациямиКредитор И ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
		ПартнерКредитор = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.КонтрагентКредитор);
	КонецЕсли;
	
	Если ЗаполнятьТЧ Тогда
		Если ОчиститьТЧ Тогда
			Объект.ДебиторскаяЗадолженность.Очистить();
			Объект.КредиторскаяЗадолженность.Очистить();
			Объект.СуммаДокумента = 0;
		Иначе
			ЗаполнитьПартнераВТабличнойЧасти(Объект.КредиторскаяЗадолженность, ПартнерКредитор, РасчетыМеждуОрганизациямиКредитор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ЗаполнитьСписокОрганизаций();
	
	УстановитьВидимостьФилиалов();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ОчиститьСуммыДокумента(ЭтаФорма);
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный Тогда
		
		Если ВыбранВидОперацииСКлиентом() Тогда
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
		ИначеЕсли ВыбранВидОперацииСПоставщиком() Тогда
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
		Иначе //Бартер
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
		КонецЕсли;
		
		Если Объект.ТипДебитора <> ТипДебитора Тогда
			Объект.ТипДебитора = ТипДебитора;
			УстановитьТипДебитора();
		КонецЕсли;
		
		Если Объект.ТипКредитора <> ТипКредитора Тогда
			Объект.ТипКредитора = ТипКредитора;
			УстановитьТипКредитора();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСписокОрганизаций();
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаСервере
Процедура ТипДебитораПриИзмененииНаСервере(ЗаполнятьТЧ = Ложь, ОчиститьТЧ = Ложь)
	
	УстановитьТипДебитора();
	
	ЗаполнитьПартнераДебитора(ЗаполнятьТЧ, ОчиститьТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ТипКредитораПриИзмененииНаСервере(ЗаполнятьТЧ = Ложь, ОчиститьТЧ = Ложь)
	
	УстановитьТипКредитора();
	
	ЗаполнитьПартнераКредитора(ЗаполнятьТЧ, ОчиститьТЧ);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	ТекущаяВалюта = Объект.Валюта;
	УстановитьЗаголовокСуммы();
	
	ЗаполнитьСписокОрганизаций();
	УстановитьТипДебитора();
	УстановитьТипКредитора();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
	ОграничитьВыборВидаОперации();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа)
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		РасшифровкаПлатежа,
		УникальныйИдентификатор);
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьДебиторскуюЗадолженностиИзХранилища(АдресПлатежейВХранилище)

	Объект.ДебиторскаяЗадолженность.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКредиторскуюЗадолженностиИзХранилища(АдресПлатежейВХранилище)

	Объект.КредиторскаяЗадолженность.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипДебитора()
	
	РасчетыМеждуОрганизациямиДебитор =
		Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		Или Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик;
	
	РасчетыСКлиентамиДебитор =
		Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент
		Или Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент;
		
	ОграничениеТипа = ?(РасчетыМеждуОрганизациямиДебитор, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
	
	Если Элементы.КонтрагентДебитор.ОграничениеТипа <> ОграничениеТипа Тогда
		Элементы.КонтрагентДебитор.ОграничениеТипа = ОграничениеТипа;
	КонецЕсли;
	
	Элементы.ДебиторскаяЗадолженностьПартнер.Видимость = Не РасчетыМеждуОрганизациямиДебитор;
	
	Элементы.КонтрагентДебитор.РежимВыбораИзСписка = РасчетыМеждуОрганизациямиДебитор;
	Если РасчетыМеждуОрганизациямиДебитор Тогда
		МассивОрганизация = ОрганизацииДляВыбора.ВыгрузитьЗначения();
		Элементы.КонтрагентДебитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизация);
	Иначе
		Элементы.КонтрагентДебитор.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипКредитора()
	
	РасчетыМеждуОрганизациямиКредитор =
		Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		Или Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик;
		
	РасчетыСКлиентамиКредитор =
		Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент
		Или Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент;
		
	ОграничениеТипа = ?(РасчетыМеждуОрганизациямиКредитор, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
	
	Если Элементы.КонтрагентКредитор.ОграничениеТипа <> ОграничениеТипа Тогда
		Элементы.КонтрагентКредитор.ОграничениеТипа = ОграничениеТипа;
	КонецЕсли;
	
	Элементы.КредиторскаяЗадолженностьПартнер.Видимость = Не РасчетыМеждуОрганизациямиКредитор;
	
	Элементы.КонтрагентКредитор.РежимВыбораИзСписка = РасчетыМеждуОрганизациямиКредитор;
	Если РасчетыМеждуОрганизациямиКредитор Тогда
		МассивОрганизация = ОрганизацииДляВыбора.ВыгрузитьЗначения();
		Элементы.КонтрагентКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизация);
	Иначе
		Элементы.КонтрагентКредитор.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыВзаимозачетаСервер()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ИсходнаяТаблицаДокумента КАК ИсходнаяТаблицаДокумента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*,
	|	ТаблицаДокумента.Заказ.Дата КАК Дата,
	|	ТаблицаДокумента.Заказ.Номер КАК Номер
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|");
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
		
		СуммаДокумента = Объект.СуммаДокумента;
		
		ТаблицаДокумента = Объект[ТабличнаяЧасть].Выгрузить(,);
		Запрос.УстановитьПараметр("ИсходнаяТаблицаДокумента", ТаблицаДокумента);
		
		Объект[ТабличнаяЧасть].Очистить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Сумма = Мин(Выборка.Сумма, СуммаДокумента);
			Если Сумма > 0 Тогда
			
				СтрокаТаблицы = Объект[ТабличнаяЧасть].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				СтрокаТаблицы.Сумма = Сумма;
				СуммаДокумента = СуммаДокумента - СтрокаТаблицы.Сумма;
				
				Если СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта Тогда
					СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
				Иначе
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачета(Знач СуммаДокумента = 0)
	
	Дебиторская = Объект.ДебиторскаяЗадолженность.Итог("Сумма");
	Кредиторская = Объект.КредиторскаяЗадолженность.Итог("Сумма");
	Если СуммаДокумента <> 0 Тогда
		СуммаВзаимозачета = Мин(Дебиторская, Кредиторская, СуммаДокумента);
	Иначе
		СуммаВзаимозачета = Мин(Дебиторская, Кредиторская);
	КонецЕсли;
	
	Если СуммаВзаимозачета = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("СуммаВзаимозачета", СуммаВзаимозачета);
	Оповещение = Новый ОписаниеОповещения("РассчитатьСуммыВзаимозачетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СуммаВзаимозачета < СуммаДокумента Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Взаимозачет возможен на сумму %1 %2, продолжить?';uk='Взаємозалік можливий на суму %1 %2, продовжити?'"),
			СуммаВзаимозачета,
			Объект.Валюта);
		КодОтвета = Неопределено;
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьСуммыВзаимозачетаФрагмент(ДополнительныеПараметры.СуммаВзаимозачета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачетаФрагмент(Знач СуммаВзаимозачета)
	
	Объект.СуммаДокумента = СуммаВзаимозачета;
	РассчитатьСуммыВзаимозачетаСервер();
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Рассчитан взаимозачет на сумму %1';uk='Розрахований взаємозалік на суму %1'"), 
		СуммаВзаимозачета);
	ПоказатьОповещениеПользователя(НСтр("ru='Рассчитан взаимозачет';uk='Розрахований взаємозалік'"),, Текст, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура НужноОчищатьТЧ(ОписаниеОповещения, ЕстьСтроки)
	
	Если ЕстьСтроки Тогда
		
		ТекстВопроса = НСтр("ru='Суммы взаимозачета могут стать неактуальным.
                                |Очистить списки задолженностей?'
                                |;uk='Суми взаємозаліку можуть стати неактуальними.
                                |Очистити списки заборгованостей?'");
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСуммыДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Объект.ДебиторскаяЗадолженность.Очистить();
	Объект.КредиторскаяЗадолженность.Очистить();
	Объект.СуммаДокумента = 0;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммДокументаВВалюту()
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта);
	УстановитьЗаголовокСуммы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОрганизаций()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка <> &ЭтаОрганизация
	|	И Организации.ГоловнаяОрганизация <> &ЭтаОрганизация
	|	И (Организации.Предопределенный = &ИспользоватьУпрОрганизацию
	|			ИЛИ НЕ Организации.Предопределенный)
	|	И Организации.Ссылка НЕ В (
	|		ВЫБРАТЬ
	|			Организации.ГоловнаяОрганизация КАК Ссылка
	|		ИЗ
	|			Справочник.Организации КАК Организации
	|		ГДЕ
	|			Организации.Ссылка = &ЭтаОрганизация)
	|");
	
	Запрос.УстановитьПараметр("ЭтаОрганизация", Объект.Организация);
	Запрос.УстановитьПараметр("ИспользоватьУпрОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОрганизацииДляВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	
	Если ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		Элементы.ОрганизацияКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
	Если РасчетыМеждуОрганизациямиДебитор Тогда
		Элементы.КонтрагентДебитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
	Если РасчетыМеждуОрганизациямиКредитор Тогда
		Элементы.КонтрагентКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровЗадолженности(Форма, ЭтоКредиторскаяЗадолженность = Ложь)
	
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УчитыватьФилиалы", Истина);
	
	Если ЭтоКредиторскаяЗадолженность И ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		ИмяРеквизита = "ОрганизацияКредитор";
		СтруктураПараметров.УчитыватьФилиалы = Ложь;
	Иначе
		ИмяРеквизита = "Организация";
	КонецЕсли;
	
	СтруктураЗначения = Новый Структура(
		"ИмяРеквизита, Значение, Представление",
		ИмяРеквизита,
		Объект[ИмяРеквизита],
		Форма.СтруктураПредставлений[ИмяРеквизита]);
		
	СтруктураПараметров.Вставить("Организация", СтруктураЗначения);
	
	Если ЭтоКредиторскаяЗадолженность И ВыбранВидОперацииМеждуКонтрагентами(Объект.ВидОперации) Тогда
		ИмяРеквизита = "КонтрагентКредитор";
	Иначе
		ИмяРеквизита = "КонтрагентДебитор";
	КонецЕсли;
	
	СтруктураЗначения = Новый Структура(
		"ИмяРеквизита, Значение, Представление",
		ИмяРеквизита,
		Объект[ИмяРеквизита],
		Форма.СтруктураПредставлений[ИмяРеквизита]);
		
	СтруктураПараметров.Вставить("Контрагент", СтруктураЗначения);
	
	Если (Форма.РасчетыСКлиентамиДебитор И Не ЭтоКредиторскаяЗадолженность)
	 Или (Форма.РасчетыСКлиентамиКредитор И ЭтоКредиторскаяЗадолженность) Тогда
		СтруктураПараметров.Вставить("ТипРасчетов", 
			ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"));
	Иначе
		СтруктураПараметров.Вставить("ТипРасчетов", 
			ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком"));
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ВыбранВидОперацииСПоставщиком()
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика
		Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками
		Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями;
	
КонецФункции

&НаСервере
Функция ВыбранВидОперацииСКлиентом()
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента
		Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами
		Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранВидОперацииМеждуОрганизациями(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями");
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранВидОперацииМеждуКонтрагентами(ВидОперации)
	
	Возврат Не ЗначениеЗаполнено(ВидОперации)
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный");
		
КонецФункции

#КонецОбласти

#КонецОбласти

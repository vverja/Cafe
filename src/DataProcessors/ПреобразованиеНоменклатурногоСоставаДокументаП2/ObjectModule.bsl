#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьНоменклатурнымСоставом(СообщенияВПроцессеЗаполнения = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приложение2КНалоговойНакладной.Ссылка КАК ДокументП2,
	|	Приложение2КНалоговойНакладной.Дата,
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная,
	|	Приложение2КНалоговойНакладной.Переоценка,
	|	Приложение2КНалоговойНакладной.ВидОперации,
	|	Приложение2КНалоговойНакладной.ВидОперацииВозвратКорректировка,
	|	Приложение2КНалоговойНакладной.Организация,
	|	Приложение2КНалоговойНакладной.Контрагент,
	|	Приложение2КНалоговойНакладной.Договор,
	|	Приложение2КНалоговойНакладной.Валюта,
	|	Приложение2КНалоговойНакладной.СуммаДокумента,
	|	Приложение2КНалоговойНакладной.Партнер,
	|	Приложение2КНалоговойНакладной.СтатусАвтокорректировки,
	|	ВалютаРегламентированногоУчета.Значение КАК ВалютаРегламентированногоУчета 	
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Приложение2КНалоговойНакладной.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтроки,
	|	Приложение2КНалоговойНакладнойНомСостав.Номенклатура,
	|	Приложение2КНалоговойНакладнойНомСостав.Содержание,
	|	Приложение2КНалоговойНакладнойНомСостав.Характеристика,
	|	Приложение2КНалоговойНакладнойНомСостав.Упаковка,
	|	Приложение2КНалоговойНакладнойНомСостав.ЕдиницаИзмерения,
	|	Приложение2КНалоговойНакладнойНомСостав.КоличествоУпаковок,
	|	Приложение2КНалоговойНакладнойНомСостав.Количество,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГТД,
	|	Приложение2КНалоговойНакладнойНомСостав.КодНоменклатурыПоКлассификатору,
	|	Приложение2КНалоговойНакладнойНомСостав.РазрешитьРедактированиеКодаПоКлассификатору,
	|	Приложение2КНалоговойНакладнойНомСостав.Цена,
	|	Приложение2КНалоговойНакладнойНомСостав.ЦенаРегл,
	|	Приложение2КНалоговойНакладнойНомСостав.УдалитьСумма,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаБезНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаБезНДСРегл,
	|	Приложение2КНалоговойНакладнойНомСостав.СтавкаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДСРегл,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаСНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.ДатаКорректировки,
	|	Приложение2КНалоговойНакладнойНомСостав.Причина,
	|	Приложение2КНалоговойНакладнойНомСостав.ДокументПоставки,
	|	Приложение2КНалоговойНакладнойНомСостав.ДокументПоставкиДляВозвратов,
	|	Приложение2КНалоговойНакладнойНомСостав.ЭтоКорректировкаКоличества,
	|	Приложение2КНалоговойНакладнойНомСостав.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	Приложение2КНалоговойНакладнойНомСостав.НеПересчитыватьСумму,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтрокиНН,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГруппы,
	|	Приложение2КНалоговойНакладнойНомСостав.КодПричины,
	|	Приложение2КНалоговойНакладнойНомСостав.ОбъектРасчетов,
	|	Приложение2КНалоговойНакладнойНомСостав.Номенклатура.НаименованиеПолное КАК НоменклатураДляПечати,
	|	Приложение2КНалоговойНакладнойНомСостав.Характеристика.НаименованиеПолное КАК ХарактеристикаДляПечати,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА Приложение2КНалоговойНакладнойНомСостав.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА Приложение2КНалоговойНакладнойНомСостав.ЕдиницаИзмерения
	|				КОГДА Приложение2КНалоговойНакладнойНомСостав.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА Приложение2КНалоговойНакладнойНомСостав.Номенклатура.ЕдиницаИзмерения
	|				ИНАЧЕ Приложение2КНалоговойНакладнойНомСостав.Упаковка.ЕдиницаИзмерения
	|			КОНЕЦ КАК Справочник.УпаковкиЕдиницыИзмерения).Код, """") КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладнойНомСостав.ЭтоКорректировкаКоличества
	|			ТОГДА Приложение2КНалоговойНакладнойНомСостав.ЦенаРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладнойНомСостав.ЭтоКорректировкаКоличества
	|			ТОГДА Приложение2КНалоговойНакладнойНомСостав.КоличествоУпаковок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИзменениеКоличества,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладнойНомСостав.ЭтоКорректировкаКоличества
	|			ТОГДА 0
	|		ИНАЧЕ Приложение2КНалоговойНакладнойНомСостав.ЦенаРегл
	|	КОНЕЦ КАК ИзменениеЦены
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК Приложение2КНалоговойНакладнойНомСостав
	|ГДЕ
	|	Приложение2КНалоговойНакладнойНомСостав.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтроки,
	|	Приложение2КНалоговойНакладнойНомСостав.Номенклатура,
	|	Приложение2КНалоговойНакладнойНомСостав.Содержание,
	|	Приложение2КНалоговойНакладнойНомСостав.Характеристика,
	|	Приложение2КНалоговойНакладнойНомСостав.Упаковка,
	|	Приложение2КНалоговойНакладнойНомСостав.ЕдиницаИзмерения,
	|	Приложение2КНалоговойНакладнойНомСостав.КоличествоУпаковок,
	|	Приложение2КНалоговойНакладнойНомСостав.Количество,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГТД,
	|	Приложение2КНалоговойНакладнойНомСостав.КодНоменклатурыПоКлассификатору,
	|	Приложение2КНалоговойНакладнойНомСостав.Цена,
	|	Приложение2КНалоговойНакладнойНомСостав.ЦенаРегл,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаБезНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаБезНДСРегл,
	|	Приложение2КНалоговойНакладнойНомСостав.СтавкаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДСРегл,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаСНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.ДатаКорректировки,
	|	Приложение2КНалоговойНакладнойНомСостав.Причина,
	|	Приложение2КНалоговойНакладнойНомСостав.ЭтоКорректировкаКоличества,
	|	Приложение2КНалоговойНакладнойНомСостав.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	Приложение2КНалоговойНакладнойНомСостав.НеПересчитыватьСумму,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтрокиНН,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГруппы,
	|	Приложение2КНалоговойНакладнойНомСостав.КодПричины,
	|	Приложение2КНалоговойНакладнойНомСостав.НалоговоеНазначение,
	|	Приложение2КНалоговойНакладнойНомСостав.НалоговоеНазначениеПоФактуУсловнаяПродажа,
	|	Приложение2КНалоговойНакладнойНомСостав.ОбъектЗаполненияСодержанияУсловнаяПродажа,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДСРеглПоРегиструУсловнаяПродажа,
	|	Приложение2КНалоговойНакладнойНомСостав.ОбъектРасчетов,
	|	Приложение2КНалоговойНакладнойНомСостав.Номенклатура.НаименованиеПолное КАК НоменклатураДляПечати,
	|	Приложение2КНалоговойНакладнойНомСостав.Характеристика.НаименованиеПолное КАК ХарактеристикаДляПечати,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА Приложение2КНалоговойНакладнойНомСостав.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА Приложение2КНалоговойНакладнойНомСостав.ЕдиницаИзмерения
	|				КОГДА Приложение2КНалоговойНакладнойНомСостав.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА Приложение2КНалоговойНакладнойНомСостав.Номенклатура.ЕдиницаИзмерения
	|				ИНАЧЕ Приложение2КНалоговойНакладнойНомСостав.Упаковка.ЕдиницаИзмерения
	|			КОНЕЦ КАК Справочник.УпаковкиЕдиницыИзмерения).Код, """") КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладнойНомСостав.ЭтоКорректировкаКоличества
	|			ТОГДА Приложение2КНалоговойНакладнойНомСостав.ЦенаРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладнойНомСостав.ЭтоКорректировкаКоличества
	|			ТОГДА Приложение2КНалоговойНакладнойНомСостав.КоличествоУпаковок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИзменениеКоличества,
	|	ВЫБОР
	|		КОГДА Приложение2КНалоговойНакладнойНомСостав.ЭтоКорректировкаКоличества
	|			ТОГДА 0
	|		ИНАЧЕ Приложение2КНалоговойНакладнойНомСостав.ЦенаРегл
	|	КОНЕЦ КАК ИзменениеЦены
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.ТоварыПоДаннымПользователя КАК Приложение2КНалоговойНакладнойНомСостав
	|ГДЕ
	|	Приложение2КНалоговойНакладнойНомСостав.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументП2);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументовП2 = МассивРезультатовЗапроса[0].Выбрать();
	
	ЗаполнятьТовары		= Не МассивРезультатовЗапроса[1].Пустой();	
	ЗаполнятьТоварыПоДП	= Не МассивРезультатовЗапроса[2].Пустой();   // ПоДП - по данным пользователя
	
	ВыборкаТовары 		= ?(ЗаполнятьТовары, 		МассивРезультатовЗапроса[1].Выбрать(), Неопределено);
	ВыборкаТоварыПоДП 	= ?(ЗаполнятьТоварыПоДП, 	МассивРезультатовЗапроса[2].Выбрать(), Неопределено);
	
	ЗаполнитьСоответствиеПричинКорректировкиКодамПричин();
	
 	Пока ВыборкаДокументовП2.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаДокументовП2);
		
		ОбрабатываемыеВидыОпераций  = ПолучитьМассивОбрабатываемыхВидовОпераций();
		Если ОбрабатываемыеВидыОпераций.Найти(ВидОперации) = Неопределено Тогда
			СообщенияВПроцессеЗаполнения = НСтр("ru='Преобразование для данного вида операции не поддерживается. Результат может быть не верным!';uk= 'Перетворення для даного виду операції не підтримується. Результат може бути не вірним!'");			
		КонецЕсли; 
		
		ПечатнаяФормаНН = ПолучитьТаблицуНоменклатурыНалоговогоДокументаДляПечати(ВыборкаДокументовП2);
		
		// До заполнения табличных частей предположим, что преобразование уже выполнялось 
		// (это ни на что не влияет, но для информативности и предупреждения пользователя)
		// Будем считать, что П2 готова к выгрузке и ее не нужно преобразовывать, если заполнены в строке следующие реквизиты ТЧ:
		// НомерСтрокиНН, НомерГруппы, КодПричины
		ПреобразованиеВыполнялось = 1;
		
		Если Не СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ Тогда
			ДобавитьСтрокиВТЧ(ЗаполнятьТовары, 		ВыборкаТовары, 		Товары,						"Товары", 						ПечатнаяФормаНН);
		Иначе	
			ДобавитьСтрокиВТЧ(ЗаполнятьТоварыПоДП, 	ВыборкаТоварыПоДП, 	ТоварыПоДаннымПользователя,	"ТоварыПоДаннымПользователя",	ПечатнаяФормаНН);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ПривестиКСоответствиюПравиламШлюза() Экспорт
	
	// Если в документе в некоторых строках уже указан номер группы, то найдем максимальный и начнем с него проставления номера групп
	// для незаполненных
	ПолучитьНачальныйНомерГруппы();
	
	Если Не СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ Тогда
		ТабличнаяЧасть 	= Товары;
		ИмяТЧ 			= "Товары";
	Иначе
		ТабличнаяЧасть 	= ТоварыПоДаннымПользователя;
		ИмяТЧ 			= "ТоварыПоДаннымПользователя";
	КонецЕсли;
	
	ТаблицаТоваров = ТабличнаяЧасть.ВыгрузитьКолонки();
	ПривестиСтрокиКНовымПравилам(ТаблицаТоваров, ИмяТЧ);
	ВыполнитьСортировкуТабЧасти(ТабличнаяЧасть);

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСтрокиВТЧ(ЗаполнятьТЧ, Выборка, ТабличнаяЧасть, ИмяТабЧасти, ПечатнаяФормаНН)

	ТабличнаяЧасть.Очистить();
	
	Если НЕ ЗаполнятьТЧ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоискаНомераСтрокиННПолная 	 = Новый Структура("Номенклатура,ЦенаБезНДС,ЕдиницаИзмеренияКод");
	СтруктураПоискаНомераСтрокиННСокращенная = Новый Структура("Номенклатура,ЦенаБезНДС");
	СтруктураПоискаСтрокиКорректировкиЦены 	 = Новый Структура("НоменклатураДляПечати,КодНоменклатурыПоКлассификатору,ЕдиницаИзмеренияКод,ЭтоКорректировкаКоличества,СтавкаНДС,ОбъектРасчетов,НомерГруппы");
	
	ВидыОперацийВозврат 		= ВидыОперацийВозврат();
	ВидыОперацийКорректировка 	= ВидыОперацийКорректировка();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка); 
		
		Если Не (ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) И ЗначениеЗаполнено(СтрокаТЧ.НомерГруппы) И ЗначениеЗаполнено(СтрокаТЧ.КодПричины)) Тогда
			ПреобразованиеВыполнялось = 0;
		КонецЕсли;
		
		СтрокаТЧ.НомерСтр = Выборка.НомерСтроки; 
		
		СтрокаТЧ.НоменклатураДляПечати = ?(ЗначениеЗаполнено(СтрокаТЧ.Содержание), СокрП("" + СтрокаТЧ.Содержание), СокрП("" + СтрокаТЧ.НоменклатураДляПечати)) 
										 + ?(НЕ ЗначениеЗаполнено(Выборка.ХарактеристикаДляПечати), "", "(" + Выборка.ХарактеристикаДляПечати +")");
										 
		СтрокаТЧ.ЕдиницаИзмеренияКод = НДСОбщегоНазначенияКлиентСервер.КодЕдиницыИзмеренияДляПечатиНалоговых(СтрокаТЧ.ЕдиницаИзмеренияКод);
			
		// Если на основании отчета комиссионера, то попробуем найти цену из документа отчет комиссионера
		Если ИмяТабЧасти = "Товары" И Переоценка И ЗначениеЗаполнено(СтрокаТЧ.ДокументПоставки) 
			И ТипЗнч(СтрокаТЧ.ДокументПоставки) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда 
			СтрокаТЧ.ЦенаБезНДС = ПолучитьЦенуИзДокументаОтчетКомиссионера(СтрокаТЧ, Ложь);
		КонецЕсли;	
			
		// определим номер строки исходной НН
		СтруктураПоискаНомераСтрокиННПолная.Номенклатура 			= СтрокаТЧ.НоменклатураДляПечати;
		СтруктураПоискаНомераСтрокиННПолная.ЕдиницаИзмеренияКод   	= СтрокаТЧ.ЕдиницаИзмеренияКод;
		СтруктураПоискаНомераСтрокиННПолная.ЦенаБезНДС   			= СтрокаТЧ.ЦенаБезНДС;
		
		НайденныеСтроки = НалоговаяНакладнаяСУчетомКорректировок.НайтиСтроки(СтруктураПоискаНомераСтрокиННПолная);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтруктураПоискаНомераСтрокиННСокращенная.Номенклатура = СтрокаТЧ.НоменклатураДляПечати;
			СтруктураПоискаНомераСтрокиННСокращенная.ЦенаБезНДС   = СтрокаТЧ.ЦенаБезНДС;
			
			НайденныеСтроки = НалоговаяНакладнаяСУчетомКорректировок.НайтиСтроки(СтруктураПоискаНомераСтрокиННСокращенная);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) Тогда
					СтрокаТЧ.НомерСтрокиНН = НайденныеСтроки[0].НомерСтрокиНН;
				КонецЕсли;
				СтрокаТЧ.КоличествоИзНН = НайденныеСтроки[0].Количество;
				СтрокаТЧ.СуммаИзНН = НайденныеСтроки[0].Сумма;
				СтрокаТЧ.СуммаНДСИзНН = НайденныеСтроки[0].СуммаНДС;
			Иначе
				СтрокаТЧ.КоличествоИзНН = 0;
				СтрокаТЧ.СуммаИзНН = 0;
				СтрокаТЧ.СуммаНДСИзНН = 0;
				СтрокаТЧ.НеНайденаСтрокаННПричина = НСтр("ru='Не найдена строка НН';uk= 'Не знайдений рядок ПН'");
			КонецЕсли;
		Иначе	
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) Тогда
				СтрокаТЧ.НомерСтрокиНН = НайденныеСтроки[0].НомерСтрокиНН;
			КонецЕсли;
			СтрокаТЧ.КоличествоИзНН = НайденныеСтроки[0].Количество;
			СтрокаТЧ.СуммаИзНН = НайденныеСтроки[0].Сумма;
			СтрокаТЧ.СуммаНДСИзНН = НайденныеСтроки[0].СуммаНДС;
		КонецЕсли; 
		
		// Постараемся определить причину корректировки
		// Это не точное определение, бухгалтеру все-равно необходимо будет перепроверить
		Если Выборка.ИзменениеЦены <> 0 Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна ціни";			
		ИначеЕсли -Выборка.ИзменениеКоличества = СтрокаТЧ.КоличествоИзНН
			И ВидыОперацийВозврат.Найти(ВидОперацииВозвратКорректировка) <> Неопределено Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Повернення товару або авансових платежів";
		ИначеЕсли Выборка.ИзменениеКоличества <> 0
			И ВидыОперацийВозврат.Найти(ВидОперацииВозвратКорректировка) <> Неопределено Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна кількості";
		ИначеЕсли СтрокаТЧ.ИзменениеКоличества <> 0
			И ВидыОперацийКорректировка.Найти(ВидОперацииВозвратКорректировка) <> Неопределено Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна номенклатури";	
		КонецЕсли;  
		
		УстановитьКодПричиныСтрокиПоУмолчанию(СтрокаТЧ);
		
	КонецЦикла;
	
	// Установим способ корректировки для заменяющих строк изменение номенклатуры
	СтрокиСоСпособомИзменениеНоменклатуры = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ПричинаКорректировкиНовая", "Зміна номенклатури"));
	Если СтрокиСоСпособомИзменениеНоменклатуры.Количество() > 0 Тогда
		
		ПолучитьНачальныйНомерГруппы();
		НачальныйНомерГр = НачальныйНомерГруппы;
		
		Для каждого Строка Из СтрокиСоСпособомИзменениеНоменклатуры Цикл
			
			Если ЗначениеЗаполнено(Строка.НомерГруппы) И Строка.ИзменениеКоличества < 0 Тогда
				
				СтрокиПоОдномуНомеруГруппы = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерГруппы", Строка.НомерГруппы));	 
				Для каждого СтрокаГруппы Из СтрокиПоОдномуНомеруГруппы Цикл
					// Даже если нашли заменяющую номенклатуру в ПН, это все-равно новая строка
					Если СтрокаГруппы.ИзменениеКоличества > 0 Тогда
						СтрокаГруппы.ПричинаКорректировкиНовая = "Зміна номенклатури";
						СтрокаГруппы.КодПричины = Строка.КодПричины;
						СтрокаГруппы.НеНайденаСтрокаННПричина = "";
						СтрокаГруппы.КоличествоИзНН = 0;
						СтрокаТЧ.СуммаИзНН = 0;
						СтрокаТЧ.СуммаНДСИзНН = 0;
					КонецЕсли; 
				КонецЦикла;
			ИначеЕсли Не ЗначениеЗаполнено(Строка.НомерГруппы) И Строка.ИзменениеКоличества < 0 Тогда
				// Попробуем найти
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСтрокиКорректировкиЦены, Строка);
				СтрокиСОднаковойНоменклатурой = ТабличнаяЧасть.НайтиСтроки(СтруктураПоискаСтрокиКорректировкиЦены);
				
				Если СтрокиСОднаковойНоменклатурой.Количество() > 1 Тогда
					
					НомерГруппы = НачальныйНомерГруппы;
					
					Для каждого СтрокаПоНоменклатуре Из СтрокиСОднаковойНоменклатурой Цикл 
						Если СтрокаПоНоменклатуре.ИзменениеКоличества > 0 Тогда
							СтрокаПоНоменклатуре.ПричинаКорректировкиНовая = "Зміна номенклатури";
							СтрокаПоНоменклатуре.КодПричины = Строка.КодПричины; 
						КонецЕсли;
						СтрокаПоНоменклатуре.НомерГруппы = НомерГруппы; 
					КонецЦикла;
					
					НачальныйНомерГруппы = НачальныйНомерГруппы + 1;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Если ПреобразованиеВыполнялось = 0 И (НачальныйНомерГруппы <> НачальныйНомерГр Или НачальныйНомерГруппы > 1) Тогда
			ТабличнаяЧасть.Сортировать("НомерГруппы,НомерСтрокиНН УБЫВ");
			НачальныйНомерГруппы = 0;
		КонецЕсли;
		
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ПривестиСтрокиКНовымПравилам(ТаблицаНомСостава, ИмяТабЧасти)

	// Обрабатываем причины (способы корректировок):
	// 1. "Повернення товару або авансових платежів"
	// 2. "Зміна кількості"
	// 3. "Зміна ціни"
	// 4. "Зміна номенклатури"
	
	КэшированныеЗначения = Неопределено;
	// Переоценка - галка в шапке документа, используется для создания документов корректировки на разницу между ценой комитента и ценой продажи в отчете по комиссии
		
	СтрокиНомСоставаДокумента = ЭтотОбъект[ИмяТабЧасти];
	
	// Для порядка
	НомерСтр = 1;
	МассивСтрокКЗамещению = Новый Массив;
	
	ВРегВалюте = Валюта = ВалютаРегламентированногоУчета;
	
	Для каждого СтрокаТЧ Из СтрокиНомСоставаДокумента Цикл
		
		Если СтрокаТЧ.СтрокаОбработана Тогда
			Продолжить;
		КонецЕсли; 
		
		// 1. "Повернення товару або авансових платежів"
		// Здесь просто проставляем номер группы
		Если СтрокаТЧ.ПричинаКорректировкиНовая = "Повернення товару або авансових платежів"
			И СтрокаТЧ.ЭтоКорректировкаКоличества И СтрокаТЧ.ИзменениеКоличества < 0 Тогда
			
			УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
			УстановитьНомерГруппы(СтрокаТЧ.НомерГруппы, НачальныйНомерГруппы);
			
		ИначеЕсли СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна кількості"
			И СтрокаТЧ.ЭтоКорректировкаКоличества И СтрокаТЧ.ИзменениеКоличества < 0 Тогда 
			
			ОстатокУПокупателя = СтрокаТЧ.КоличествоИзНН + СтрокаТЧ.КоличествоУпаковок;
			
			Если ОстатокУПокупателя = 0 Тогда
				
				ТекстСообщения = НСтр("ru='Для номенклатуры %1 (строка №%2) указана причина ""Зміна кількості"", но выполняется полный возврат!';uk= 'Для номенклатури №%1 (рядок №%2) вказана причина ""Зміна кількості"", але виконується повне повернення!'");
				
				НоменклатураДляОтображения = "" + СтрокаТЧ.Номенклатура + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), "(" + СтрокаТЧ.Характеристика + ")", "");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НоменклатураДляОтображения, НомерСтр);
				
				Сообщить(ТекстСообщения);
				УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
				Продолжить;	
			КонецЕсли;
			
			// Строка - снятие прошлой позиции
			СтрокаТоваровСнятыеПозиции = ТаблицаНомСостава.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваровСнятыеПозиции, СтрокаТЧ);
			УстановитьНомерСтроки(СтрокаТоваровСнятыеПозиции.НомерСтр, НомерСтр);
			УстановитьНомерГруппы(СтрокаТоваровСнятыеПозиции.НомерГруппы, НачальныйНомерГруппы);
			
			СтрокаТоваровСнятыеПозиции.КоличествоУпаковок = -СтрокаТЧ.КоличествоИзНН;
			СтрокаТоваровСнятыеПозиции.СуммаБезНДС = -СтрокаТЧ.СуммаИзНН;
			СтрокаТоваровСнятыеПозиции.СуммаНДС = -СтрокаТЧ.СуммаНДСИзНН;
			ИзменениеКоличестваПриИзменении(СтрокаТоваровСнятыеПозиции, ИмяТабЧасти,,КэшированныеЗначения, Истина);
			
			// Строка - остаток у покупателя
			СтрокаТоваровОставшаясяЧасть = ТаблицаНомСостава.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваровОставшаясяЧасть, СтрокаТЧ);
			УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтр, НомерСтр);
			СтрокаТоваровОставшаясяЧасть.НомерГруппы = СтрокаТоваровСнятыеПозиции.НомерГруппы;
			
			СтрокаТоваровОставшаясяЧасть.КоличествоУпаковок = ОстатокУПокупателя;
			СтрокаТоваровОставшаясяЧасть.СуммаСНДС = СтрокаТЧ.СуммаИзНН + СтрокаТЧ.СуммаНДСИзНН + СтрокаТЧ.СуммаСНДС;
			ИзменениеКоличестваПриИзменении(СтрокаТоваровОставшаясяЧасть, ИмяТабЧасти,,КэшированныеЗначения);
			
			УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтрокиНН, НачальныйНомерСтроки);
			
			МассивСтрокКЗамещению.Добавить(СтрокаТЧ);
			
		ИначеЕсли СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна ціни" Тогда
			
			Если Не Переоценка Тогда
				// Это значит, что уже есть две строки, но необходимо исправить вид корректировки	
				
				Если СтрокаТЧ.КоличествоУпаковок > 0 Тогда
					// Строки с положительным количеством по группе обрабатываем при обработке сторно-строки
					Продолжить;
				КонецЕсли; 
				
				СтрокаТЧ.ЭтоКорректировкаКоличества = Ложь;
				
				Если СтрокаТЧ.КоличествоУпаковок < 0 Тогда
					СтрокаТЧ.КоличествоУпаковок = -СтрокаТЧ.КоличествоУпаковок;
					СтрокаТЧ.Количество			= -СтрокаТЧ.Количество;
					СтрокаТЧ.Цена 				= -СтрокаТЧ.Цена;
					УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
				КонецЕсли;
				
				// Найдем соответствующую строку
				СтруктураПоиска = Новый Структура("НомерГруппы",СтрокаТЧ.НомерГруппы);
				МассивНайденныхСтрок = ЭтотОбъект[ИмяТабЧасти].НайтиСтроки(СтруктураПоиска);
				Если МассивНайденныхСтрок.Количество() > 0 Тогда
					
					Для каждого СтрокаИзменениеЦены Из МассивНайденныхСтрок Цикл
						
						Если СтрокаИзменениеЦены = СтрокаТЧ Тогда
							Продолжить;
						КонецЕсли; 
						
						СтрокаИзменениеЦены.ЭтоКорректировкаКоличества = Ложь;	
						СтрокаИзменениеЦены.СтрокаОбработана = Истина;
						
						УстановитьНомерСтроки(СтрокаИзменениеЦены.НомерСтр, НомерСтр);
						
						Если Не ЗначениеЗаполнено(СтрокаИзменениеЦены.НомерСтрокиНН) Тогда
							УстановитьНомерСтроки(СтрокаИзменениеЦены.НомерСтрокиНН, НачальныйНомерСтроки);
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли; 
				
			Иначе
				// Обрабатываем только в случае, когда есть заполнен номер строки из НН, из которой можно узнать изначальную цену
				Если ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЦенаБезНДС) Тогда
						
						// Попробуем найти цену по строке налоговой накладной указанной пользователем
						// Печатная форма у нас сохранена в ТЧ НалоговаяНакладнаяСУчетомКорректировок

						МассивСтрокПечатнойФормыНН = НалоговаяНакладнаяСУчетомКорректировок.НайтиСтроки(Новый Структура("НомерСтрокиНН", СтрокаТЧ.НомерСтрокиНН));
						
						ТекстСообщения = НСтр("ru='Для номенклатуры %1 не правильно указана строка из налоговой накладной (строки НН с учетом предыдущих корректировок можно посмотреть на одноименной вкладке обработки). 
                                               |Цену определить не удалось!';uk= 'Для номенклатури %1 не правильно вказаний рядок із податкової накладної (рядки ПН з урахуванням попередніх коригувань можна побачити на однойменній вкладці обробки). 
                                               |Ціну визначити не вдалося!'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТЧ.НоменклатураДляПечати);
						
						Если МассивСтрокПечатнойФормыНН.Количество() > 0 Тогда
							СтрокаУказаннаяПользователем = МассивСтрокПечатнойФормыНН[0];
						Иначе
							Сообщить(ТекстСообщения);
							УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
							
							Продолжить;
						КонецЕсли; 
						
						КодУКТВЭД = СтрЗаменить(СтрокаТЧ.КодНоменклатурыПоКлассификатору, " ", "");
						КодСтавки = ОпределитьКодСтавки(ОпределитьКолонкуТаблицы(СтрокаТЧ.СтавкаНДС, Дата), ВРегВалюте);
						
						// Проверим, что основные параметры совпадают
						Если НЕ (СтрокаУказаннаяПользователем.Номенклатура = СтрокаТЧ.НоменклатураДляПечати 
							И СтрокаУказаннаяПользователем.КодУКТВЭД = КодУКТВЭД
							И СтрокаУказаннаяПользователем.КодСтавки = КодСтавки) Тогда
							
							Сообщить(ТекстСообщения);
							УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
							
							Продолжить;	
						КонецЕсли;
						
						СтрокаТЧ.ЦенаБезНДС = СтрокаУказаннаяПользователем.ЦенаБезНДС;
						СтрокаТЧ.СуммаИзНН = СтрокаУказаннаяПользователем.Сумма;
						СтрокаТЧ.СуммаНДСИзНН = СтрокаУказаннаяПользователем.СуммаНДС;
						
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = НСтр("ru='Для номенклатуры %1 в строке %2 не указана строка из налоговой накладной по которой можно определить изначальную цену. 
                                           |Преобразовать строку не удалось!';uk= 'Для номенклатури %1 в рядку %2 не вказаний рядок із податкової накладної із якого можна отримати початкову ціну. 
                                           |Перетворити рядок не вдалося!'");
						
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТЧ.НоменклатураДляПечати, НомерСтр+1);	
					Продолжить;	
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЦенаБезНДС) Тогда
					УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
					Продолжить;
				КонецЕсли; 
				
				// Строка - снятие прошлой позиции
				СтрокаТоваровСнятыеПозиции = ТаблицаНомСостава.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваровСнятыеПозиции, СтрокаТЧ);
				УстановитьНомерСтроки(СтрокаТоваровСнятыеПозиции.НомерСтр, НомерСтр);
				УстановитьНомерГруппы(СтрокаТоваровСнятыеПозиции.НомерГруппы, НачальныйНомерГруппы);

				СтрокаТоваровСнятыеПозиции.ЭтоКорректировкаКоличества = Ложь;
				
				СтрокаТоваровСнятыеПозиции.Цена = -СтрокаТоваровСнятыеПозиции.ЦенаБезНДС;
				СтрокаТоваровСнятыеПозиции.СуммаБезНДС = -СтрокаТЧ.СуммаИзНН;
				СтрокаТоваровСнятыеПозиции.СуммаНДС = -СтрокаТЧ.СуммаНДСИзНН;
				СтрокаТоваровСнятыеПозиции.СуммаСНДС = -СтрокаТоваровСнятыеПозиции.СуммаБезНДС - СтрокаТоваровСнятыеПозиции.СуммаНДС;
				ИзменениеКоличестваПриИзменении(СтрокаТоваровСнятыеПозиции, ИмяТабЧасти, Ложь, КэшированныеЗначения, Истина);
				
				// Строка - остаток у покупателя
				СтрокаТоваровОставшаясяЧасть = ТаблицаНомСостава.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваровОставшаясяЧасть, СтрокаТЧ);
				УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтр, НомерСтр);
				СтрокаТоваровОставшаясяЧасть.НомерГруппы = СтрокаТоваровСнятыеПозиции.НомерГруппы;
				СтрокаТоваровОставшаясяЧасть.ЭтоКорректировкаКоличества = Ложь;
				
				СтрокаТоваровОставшаясяЧасть.Цена = СтрокаТЧ.ЦенаБезНДС + СтрокаТЧ.Цена;
				СтрокаТоваровОставшаясяЧасть.СуммаСНДС = СтрокаТЧ.СуммаИзНН + СтрокаТЧ.СуммаНДСИзНН + СтрокаТЧ.СуммаСНДС;
				ИзменениеКоличестваПриИзменении(СтрокаТоваровОставшаясяЧасть, ИмяТабЧасти, Ложь, КэшированныеЗначения);
				
				УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтрокиНН, НачальныйНомерСтроки); 
				
				МассивСтрокКЗамещению.Добавить(СтрокаТЧ);
				
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна номенклатури" Тогда	
			Если СтрокаТЧ.ИзменениеКоличества < 0 И -СтрокаТЧ.ИзменениеКоличества < СтрокаТЧ.КоличествоИзНН Тогда
			
				// Обрабатываем "отрицательную" строку, похоже со способом "Зміна кількості", с тем лишь различием,
				// что номер группы уже должен быть установлен предварительно пользователем перед преобразованием
				ОстатокУПокупателя = СтрокаТЧ.КоличествоИзНН + СтрокаТЧ.ИзменениеКоличества;
				
				// Строка - снятие прошлой позиции
				СтрокаТоваровСнятыеПозиции = ТаблицаНомСостава.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваровСнятыеПозиции, СтрокаТЧ);
				УстановитьНомерСтроки(СтрокаТоваровСнятыеПозиции.НомерСтр, НомерСтр);
				
				СтрокаТоваровСнятыеПозиции.КоличествоУпаковок = -СтрокаТЧ.КоличествоИзНН;
				СтрокаТоваровСнятыеПозиции.СуммаБезНДС = -СтрокаТЧ.СуммаИзНН;
				СтрокаТоваровСнятыеПозиции.СуммаНДС = -СтрокаТЧ.СуммаНДСИзНН;
				ИзменениеКоличестваПриИзменении(СтрокаТоваровСнятыеПозиции, ИмяТабЧасти,, КэшированныеЗначения, Истина);
				
				// Строка - остаток у покупателя
				СтрокаТоваровОставшаясяЧасть = ТаблицаНомСостава.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваровОставшаясяЧасть, СтрокаТЧ);
				УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтр, НомерСтр);
				
				СтрокаТоваровОставшаясяЧасть.КоличествоУпаковок = ОстатокУПокупателя;
				СтрокаТоваровОставшаясяЧасть.СуммаСНДС = СтрокаТЧ.СуммаИзНН + СтрокаТЧ.СуммаНДСИзНН + СтрокаТЧ.СуммаСНДС;
				ИзменениеКоличестваПриИзменении(СтрокаТоваровОставшаясяЧасть, ИмяТабЧасти,, КэшированныеЗначения);
				
				УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтрокиНН, НачальныйНомерСтроки);
				
				МассивСтрокКЗамещению.Добавить(СтрокаТЧ);
				
			ИначеЕсли СтрокаТЧ.ИзменениеКоличества > 0 Или (СтрокаТЧ.ИзменениеКоличества < 0 И -СтрокаТЧ.ИзменениеКоличества = СтрокаТЧ.КоличествоИзНН) Тогда
				
				УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
				Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) Тогда
					УстановитьНомерСтроки(СтрокаТЧ.НомерСтрокиНН, НачальныйНомерСтроки);
				КонецЕсли;
				
			КонецЕсли;	
		Иначе
			// Для сохранения порядка
			УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);	
			
		КонецЕсли;
	КонецЦикла;
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабЧасти];
	
	// Удалим строки, которые обработали
	Для каждого СтрокаТЧ Из МассивСтрокКЗамещению Цикл
		ТабличнаяЧасть.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	// Добавим преобразованные строки
	Для каждого СтрокаТЧ Из ТаблицаНомСостава Цикл
		ЗаполнитьЗначенияСвойств(ТабличнаяЧасть.Добавить(), СтрокаТЧ);		
	КонецЦикла; 
	
	Если ТаблицаНомСостава.Количество() Тогда
		ТаблицаНомСостава.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьНомерСтроки(НомерСтрТекСтроки, НомерСтрОбщий)

	НомерСтрТекСтроки = НомерСтрОбщий;
	НомерСтрОбщий = НомерСтрОбщий + 1;	

КонецПроцедуры

Процедура УстановитьНомерГруппы(НомерГруппыТекСтроки, НомерГруппыОбщий)

	Если Не ЗначениеЗаполнено(НомерГруппыТекСтроки) Тогда
		НомерГруппыТекСтроки = НомерГруппыОбщий;
		НомерГруппыОбщий = НомерГруппыОбщий + 1;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВыполнитьСортировкуТабЧасти(ТабличнаяЧасть)

	ТабличнаяЧасть.Сортировать("НомерСтр");

КонецПроцедуры

Функция ПолучитьТаблицуНоменклатурыНалоговогоДокументаДляПечати(Шапка)
	
	Попытка
		
		НалоговыйДокументОбъект = Шапка.НалоговаяНакладная;
		КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("НалоговаяНакладная");
        Документы.НалоговаяНакладная.Печать(
            НалоговыйДокументОбъект, 
            Новый Структура("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы"), 
            КоллекцияПечатныхФорм, 
            Неопределено, 
            Новый Структура("ВсегдаВыводитьНН14") 
        );
		ПечатнаяФормаНН 	= КоллекцияПечатныхФорм[0].ТабличныйДокумент.НалоговыйДокумент.R;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G3S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("Номенклатура");
		Иначе	
			ПечатнаяФормаНН.Колонки.G3S.Имя = "Номенклатура";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G105_2S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
		Иначе	
			ПечатнаяФормаНН.Колонки.G105_2S.Имя = "ЕдиницаИзмеренияКод";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G4") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("КодУКТВЭД");
		Иначе	
			ПечатнаяФормаНН.Колонки.G4.Имя = "КодУКТВЭД";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G5") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("Количество");
		Иначе	
			ПечатнаяФормаНН.Колонки.G5.Имя = "Количество";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G6") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
		Иначе	
			ПечатнаяФормаНН.Колонки.G6.Имя = "ЦенаБезНДС";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G008") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("КодСтавки");
		Иначе	
			ПечатнаяФормаНН.Колонки.G008.Имя = "КодСтавки";
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("ROWNUM") = Неопределено Тогда
			ПечатнаяФормаНН.Колонки.Добавить("НомерСтрокиНН", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(7,0)));
		Иначе	
			ПечатнаяФормаНН.Колонки.ROWNUM.Имя = "НомерСтрокиНН";
		КонецЕсли;
		
		// Колонки которые нужны из П2
		ПечатнаяФормаНН.Колонки.Добавить("НомерГруппыКорректировки");
		ПечатнаяФормаНН.Колонки.Добавить("ЭтоСтрокаНН", Новый ОписаниеТипов("Булево"));
		ПечатнаяФормаНН.Колонки.Добавить("Документ");
		ПечатнаяФормаНН.Колонки.Добавить("МоментВремени");
		
		ПечатнаяФормаНН.ЗаполнитьЗначения(Истина, "ЭтоСтрокаНН");
		ПечатнаяФормаНН.ЗаполнитьЗначения(НалоговыйДокументОбъект, "Документ");
		ПечатнаяФормаНН.ЗаполнитьЗначения(НалоговыйДокументОбъект.МоментВремени(), "МоментВремени");
		
	Исключение 
		ПечатнаяФормаНН = Новый ТаблицаЗначений;
		ПечатнаяФормаНН.Колонки.Добавить("Номенклатура");
		ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
		ПечатнаяФормаНН.Колонки.Добавить("КодУКТВЭД");
		ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
		ПечатнаяФормаНН.Колонки.добавить("Количество");
		ПечатнаяФормаНН.Колонки.добавить("КодСтавки");
		// Колонки которые нужны из П2
		ПечатнаяФормаНН.Колонки.Добавить("НомерГруппыКорректировки");
		ПечатнаяФормаНН.Колонки.Добавить("ЭтоСтрокаНН", Новый ОписаниеТипов("Булево"));
		ПечатнаяФормаНН.Колонки.Добавить("Документ");
		ПечатнаяФормаНН.Колонки.Добавить("МоментВремени");
	КонецПопытки;
	
	// Также получим все приложения 2, кроме текущего, которыми раньше уже корректировалась данная НН
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Приложение2КНалоговойНакладной.Ссылка
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
	|ГДЕ
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная = &НалоговаяНакладная
	|	И Приложение2КНалоговойНакладной.МоментВремени < &МоментВремени
	|	И Приложение2КНалоговойНакладной.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приложение2КНалоговойНакладной.МоментВремени";
	
	Запрос.УстановитьПараметр("НалоговаяНакладная", НалоговыйДокументОбъект);
	Запрос.УстановитьПараметр("МоментВремени", 		ДокументП2.МоментВремени());
	
	ЕстьП2КНН = Ложь;
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		ЕстьП2КНН = Истина;
		
		МассивСтрокИзменениеЦены = Новый Массив;
		МассивСтрокИзменениеКоличества = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Попытка 
				
				КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("Приложение2КНалоговойНакладной");
                Документы.Приложение2КНалоговойНакладной.Печать(
                    Выборка.Ссылка, 
                    Новый Структура("ТолькоФормироватьСтруктуруПоказателейПечатнойФормы"), 
                    КоллекцияПечатныхФорм, 
                    Неопределено, 
                    Новый Структура("ВсегдаВыводитьНН14") 
                );
				ПечатнаяФормаП2 	= КоллекцияПечатныхФорм[0].ТабличныйДокумент.НалоговыйДокумент.R;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G22") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("НомерГруппыКорректировки");
				Иначе	
					ПечатнаяФормаП2.Колонки.G22.Имя = "НомерГруппыКорректировки";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G3S") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("Номенклатура");
				Иначе	
					ПечатнаяФормаП2.Колонки.G3S.Имя = "Номенклатура";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G105_2S") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("ЕдиницаИзмеренияКод");
				Иначе	
					ПечатнаяФормаП2.Колонки.G105_2S.Имя = "ЕдиницаИзмеренияКод";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G5") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("Количество");
				Иначе	
					ПечатнаяФормаП2.Колонки.G5.Имя = "Количество";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G8") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("КоличествоПриИзмененииЦены");
				Иначе	
					ПечатнаяФормаП2.Колонки.G8.Имя = "КоличествоПриИзмененииЦены";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G6") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("ЦенаБезНДС");
				Иначе	
					ПечатнаяФормаП2.Колонки.G6.Имя = "ЦенаБезНДС";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G7") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("ИзменениеЦеныБезНДС");
				Иначе	
					ПечатнаяФормаП2.Колонки.G7.Имя = "ИзменениеЦеныБезНДС";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G008") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("КодСтавки");
				Иначе	
					ПечатнаяФормаП2.Колонки.G008.Имя = "КодСтавки";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G001") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("НомерСтрокиНН");
				Иначе	
					ПечатнаяФормаП2.Колонки.G001.Имя = "НомерСтрокиНН";
				КонецЕсли;
				
				ПечатнаяФормаП2.Колонки.Добавить("Документ");
				ПечатнаяФормаП2.Колонки.Добавить("МоментВремени");
				
				ПечатнаяФормаП2.ЗаполнитьЗначения(Выборка.Ссылка, "Документ");
				ПечатнаяФормаП2.ЗаполнитьЗначения(Выборка.Ссылка.МоментВремени(), "МоментВремени");
				
			Исключение
				ПечатнаяФормаП2 = Новый ТаблицаЗначений;
				ПечатнаяФормаП2.Колонки.добавить("НомерСтрокиНН");
				ПечатнаяФормаП2.Колонки.добавить("Номенклатура");
				ПечатнаяФормаП2.Колонки.добавить("ЕдиницаИзмеренияКод");
				ПечатнаяФормаП2.Колонки.добавить("ЦенаБезНДС");
				ПечатнаяФормаП2.Колонки.добавить("Количество");
				ПечатнаяФормаП2.Колонки.Добавить("НомерГруппыКорректировки");
				ПечатнаяФормаП2.Колонки.Добавить("КоличествоПриИзмененииЦены");
				ПечатнаяФормаП2.Колонки.Добавить("ИзменениеЦеныБезНДС");
				ПечатнаяФормаП2.Колонки.Добавить("КодСтавки");
				ПечатнаяФормаП2.Колонки.Добавить("Документ");
				ПечатнаяФормаП2.Колонки.Добавить("МоментВремени");
			КонецПопытки;	
			
			Для каждого СтрокаП2 Из ПечатнаяФормаП2 Цикл
				СтрокаРезультирующейТаблицы = ПечатнаяФормаНН.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультирующейТаблицы, СтрокаП2);
				
				Если СтрокаП2.Количество = 0 И Не СтрокаП2.КоличествоПриИзмененииЦены = 0 Тогда
					СтрокаРезультирующейТаблицы.Количество = СтрокаП2.КоличествоПриИзмененииЦены;
					СтрокаРезультирующейТаблицы.ЦенаБезНДС = СтрокаП2.ИзменениеЦеныБезНДС;
					МассивСтрокИзменениеЦены.Добавить(СтрокаРезультирующейТаблицы);
				Иначе
					МассивСтрокИзменениеКоличества.Добавить(СтрокаРезультирующейТаблицы);
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;	
	
	Если ЕстьП2КНН Тогда
		
		// Дополнительно включим и строки из НН, которые будут соответствовать номеру строки, строкам из массивов цены и количества
		ДополнитьМассивСтрокП2КорректируемымиСтрокамиНН(ПечатнаяФормаНН, МассивСтрокИзменениеКоличества);
		ДополнитьМассивСтрокП2КорректируемымиСтрокамиНН(ПечатнаяФормаНН, МассивСтрокИзменениеЦены);
		
		ТаблицаИзменениеКоличества 	= ПолучитьСвернутыеТаблицы(ПечатнаяФормаНН, МассивСтрокИзменениеКоличества, Ложь);
		ТаблицаИзменениеЦены 		= ПолучитьСвернутыеТаблицы(ПечатнаяФормаНН, МассивСтрокИзменениеЦены);
		
		РезультирующаяТаблица = ПечатнаяФормаНН.СкопироватьКолонки("Номенклатура,ЕдиницаИзмеренияКод,НомерСтрокиНН,ЦенаБезНДС,КодСтавки,Количество");
		РезультирующаяТаблица.Колонки.Добавить("ЦенаПриИзмененииЦены");
		РезультирующаяТаблица.Колонки.Добавить("ЭтоИзменениеЦены", Новый ОписаниеТипов("Булево"));
		РезультирующаяТаблица.Колонки.Добавить("СтрокаНеКорректировалась", Новый ОписаниеТипов("Булево"));
		
		ЗаполнитьРезультирующуюТаблицу(РезультирующаяТаблица, ТаблицаИзменениеКоличества, Ложь);
		ЗаполнитьРезультирующуюТаблицу(РезультирующаяТаблица, ТаблицаИзменениеЦены);
		
		ФинализироватьТаблицу(РезультирующаяТаблица, ПечатнаяФормаНН);
		
		ЗаполнитьСостояниеНалоговойСУчетомКорректировок(ПечатнаяФормаНН, РезультирующаяТаблица);
		
		ПечатнаяФормаНН = РезультирующаяТаблица;
		
	Иначе
		ПечатнаяФормаНН.Колонки.Добавить("ЦенаПриИзмененииЦены");
		ЗаполнитьСостояниеНалоговойСУчетомКорректировок(ПечатнаяФормаНН);
	КонецЕсли;
	
	ПечатнаяФормаНН.Сортировать("НомерСтрокиНН");
	Если ПечатнаяФормаНН.Количество() > 0 Тогда
		Попытка
			НачальныйНомерСтроки = ПечатнаяФормаНН[ПечатнаяФормаНН.Количество()-1].НомерСтрокиНН + 1;
		Исключение
		    НачальныйНомерСтроки = 0;
		КонецПопытки;	
	Иначе	
	    НачальныйНомерСтроки = 0;
	КонецЕсли;
	
	Если ПечатнаяФормаНН.Колонки.Найти("НеУчитывать") <> Неопределено Тогда
		
		МассивУдаляемыхСтрок = ПечатнаяФормаНН.НайтиСтроки(Новый Структура("НеУчитывать", Истина));
		Для каждого СтрокаКУдалению ИЗ МассивУдаляемыхСтрок Цикл
			ПечатнаяФормаНН.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПечатнаяФормаНН;

КонецФункции

Процедура ДополнитьМассивСтрокП2КорректируемымиСтрокамиНН(ПечатнаяФормаНН, МассивСтрокП2)

	СтруктураПоискаСтрок = Новый Структура("НомерСтрокиНН");
	МассивСтрокКДобавлениюИзНН = Новый Массив;
	
	Для каждого Строка Из МассивСтрокП2 Цикл
		СтруктураПоискаСтрок.НомерСтрокиНН = Строка.НомерСтрокиНН;
		МассивНайденныхСтрокПоНомеруСтрокиНН = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаСтрок);
		Для каждого НайденаяСтрока Из МассивНайденныхСтрокПоНомеруСтрокиНН Цикл
			Если МассивСтрокП2.Найти(НайденаяСтрока) = Неопределено
				И (НайденаяСтрока.МоментВремени.Сравнить(Строка.МоментВремени) < 0 Или НайденаяСтрока.ЭтоСтрокаНН) 
				И МассивСтрокКДобавлениюИзНН.Найти(НайденаяСтрока) = Неопределено Тогда
				МассивСтрокКДобавлениюИзНН.Добавить(НайденаяСтрока);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаКДобавлению Из МассивСтрокКДобавлениюИзНН Цикл
		МассивСтрокП2.Добавить(СтрокаКДобавлению);	
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьСвернутыеТаблицы(ПечатнаяФормаНН, МассивСтрокИзменение, ЭтоИзменениеЦены = Истина)

	НаборКолонокКопирования = "Номенклатура,ЕдиницаИзмеренияКод,НомерСтрокиНН,ЦенаБезНДС,КодСтавки,Количество";
	РезультирующаяТаблица = Неопределено;
	
	Если МассивСтрокИзменение.Количество() > 0 Тогда
		РезультирующаяТаблица = ПечатнаяФормаНН.Скопировать(МассивСтрокИзменение, НаборКолонокКопирования);
		
		Если ЭтоИзменениеЦены Тогда
			РезультирующаяТаблица.Свернуть("Номенклатура,ЕдиницаИзмеренияКод,НомерСтрокиНН,КодСтавки,Количество","ЦенаБезНДС");
		Иначе
			РезультирующаяТаблица.Свернуть("Номенклатура,ЕдиницаИзмеренияКод,НомерСтрокиНН,КодСтавки,ЦенаБезНДС","Количество");	
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультирующаяТаблица;

КонецФункции

Процедура ЗаполнитьРезультирующуюТаблицу(РезультирующаяТаблица, ТаблицаИсточник, ЭтоИзменениеЦены = Истина)

	Если ТаблицаИсточник = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаИсточник Цикл 
		СтрокаРезультирующейТаблицы = РезультирующаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультирующейТаблицы, Строка);
		СтрокаРезультирующейТаблицы.ЭтоИзменениеЦены = ЭтоИзменениеЦены; 
	КонецЦикла; 

КонецПроцедуры

Процедура ФинализироватьТаблицу(РезультирующаяТаблица, ПечатнаяФормаНН)

	// Изначально добавим еще строки из НН, которые ни разу не корректировались
	СтрокиИзНН = ПечатнаяФормаНН.НайтиСтроки(Новый Структура("ЭтоСтрокаНН", Истина));
	Для каждого СтрокаИзНН Из СтрокиИзНН Цикл
		СтрокиКорректировкиПоНомеруСтроки = РезультирующаяТаблица.НайтиСтроки(Новый Структура("НомерСтрокиНН", СтрокаИзНН.НомерСтрокиНН));
		// Если количество = 0, значить строка из НН не корректировкалась ни разу и ее необходимо добавить в результирующую таблицу
		Если СтрокиКорректировкиПоНомеруСтроки.Количество() = 0 Тогда
			СтрокаРезультирующейТаблицы = РезультирующаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультирующейТаблицы, СтрокаИзНН);
			СтрокаРезультирующейТаблицы.СтрокаНеКорректировалась = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	// Удалены должны быть не только строки с нулевым количеством при изменении количества и с нулевой ценой при изменении цены,
	//но также и строки, которые имееют не нулевые количество или цену, но которые имеют тот же номер строки НН, что и нулевые в другом массиве
	//такая ситуация возможна если, одна строка НН корректируется разными документами П2 разными способами (изменение цены или количества) 
	МассивСтрокКУдалению = Новый Массив;

	СтрокиСНулевымКоличеством = РезультирующаяТаблица.НайтиСтроки(Новый Структура("ЭтоИзменениеЦены,Количество", Ложь, 0));
	Для каждого Строка Из СтрокиСНулевымКоличеством Цикл
		МассивСтрокКУдалению.Добавить(Строка);
		// разные способы корректировки одной строки в разных документах П2
		СтруктураПоискаСтрокиИзменениеЦены = Новый Структура("НомерСтрокиНН, ЭтоИзменениеЦены",
			Строка.НомерСтрокиНН, Истина);
		МассивСтрокИзменениеЦены = РезультирующаяТаблица.НайтиСтроки(СтруктураПоискаСтрокиИзменениеЦены);
		
		Для каждого СтрокаПоНомеруСтрокиНН Из МассивСтрокИзменениеЦены Цикл
			Если МассивСтрокКУдалению.Найти(СтрокаПоНомеруСтрокиНН) = Неопределено Тогда
				МассивСтрокКУдалению.Добавить(СтрокаПоНомеруСтрокиНН);
			КонецЕсли; 	
		КонецЦикла;
	КонецЦикла;	
	
	СтрокиСНулевойЦеной = РезультирующаяТаблица.НайтиСтроки(Новый Структура("ЭтоИзменениеЦены,ЦенаБезНДС", Истина, 0));
	Для каждого Строка Из СтрокиСНулевойЦеной Цикл
		Если МассивСтрокКУдалению.Найти(Строка) = Неопределено Тогда
			МассивСтрокКУдалению.Добавить(Строка);
		КонецЕсли;
		СтруктураПоискаСтрокиИзменениеКоличества = Новый Структура("НомерСтрокиНН, ЭтоИзменениеЦены",
			Строка.НомерСтрокиНН, Ложь);
		МассивСтрокИзменениеКоличества = РезультирующаяТаблица.НайтиСтроки(СтруктураПоискаСтрокиИзменениеКоличества);
		Для каждого СтрокаПоНомеруСтрокиНН Из МассивСтрокИзменениеКоличества Цикл
			Если МассивСтрокКУдалению.Найти(СтрокаПоНомеруСтрокиНН) = Неопределено Тогда
				МассивСтрокКУдалению.Добавить(СтрокаПоНомеруСтрокиНН);
			КонецЕсли; 	
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивСтрокКУдалению) Тогда
		РезультирующаяТаблица.Колонки.Добавить("НеУчитывать", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		СтрокаКУдалению.НеУчитывать = Истина;
	КонецЦикла;		

КонецПроцедуры

Процедура ЗаполнитьСостояниеНалоговойСУчетомКорректировок(ПечатнаяФормаНН, ТаблицаСУчетомП2 = Неопределено)
	
	Если ТаблицаСУчетомП2 <> Неопределено Тогда
		ТаблицаОбработки = ТаблицаСУчетомП2; 
	Иначе
		ТаблицаОбработки = ПечатнаяФормаНН;	
	КонецЕсли;
	
	ПроверятьНулевыеСтроки = ТаблицаОбработки.Колонки.Найти("НеУчитывать") <> Неопределено;
	
	Для каждого Строка Из ТаблицаОбработки Цикл
		
		Если ПроверятьНулевыеСтроки И Строка.НеУчитывать Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПредставленияНН = НалоговаяНакладнаяСУчетомКорректировок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредставленияНН, Строка);
		
		Если ЗначениеЗаполнено(Строка.ЦенаПриИзмененииЦены) И Строка.ЦенаПриИзмененииЦены <> Строка.ЦенаБезНДС Тогда
			СтрокаПредставленияНН.ЦенаБезНДС = Строка.ЦенаПриИзмененииЦены;
		КонецЕсли;
		
		Если ТаблицаСУчетомП2 <> Неопределено Тогда
		
			СтруктураПоискаСтроки = Новый Структура("НомерСтрокиНН,Номенклатура,ЦенаБезНДС,ЕдиницаИзмеренияКод,Количество", 
				Строка.НомерСтрокиНН,Строка.Номенклатура,Строка.ЦенаБезНДС,Строка.ЕдиницаИзмеренияКод,Строка.Количество);	
			Если ЗначениеЗаполнено(Строка.ЦенаПриИзмененииЦены) И Строка.ЦенаПриИзмененииЦены <> Строка.ЦенаБезНДС Тогда
				СтруктураПоискаСтроки.Вставить("ЦенаБезНДС", Строка.ЦенаПриИзмененииЦены);
			КонецЕсли; 	
			
			СтрокиПечатнойФормыНН = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаСтроки);
			Если СтрокиПечатнойФормыНН.Количество() > 0 Тогда
				ЗначениеОстальныхПараметров = СтрокиПечатнойФормыНН[0];
			Иначе
				ЗначениеОстальныхПараметров = Неопределено;
			КонецЕсли;	
		Иначе
			ЗначениеОстальныхПараметров = Строка;
		КонецЕсли; 
		
		Если ЗначениеОстальныхПараметров = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ПечатнаяФормаНН.Колонки.Найти("G4") <> Неопределено Тогда
			СтрокаПредставленияНН.КодУКТВЭД = ЗначениеОстальныхПараметров.G4;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G32") <> Неопределено Тогда
			СтрокаПредставленияНН.Импортированный = ЗначениеОстальныхПараметров.G32;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G33") <> Неопределено Тогда
			СтрокаПредставленияНН.КодДКПП = ЗначениеОстальныхПараметров.G33;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G4S") <> Неопределено Тогда
			СтрокаПредставленияНН.ЕдиницаИзмерения = ЗначениеОстальныхПараметров.G4S;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G008") <> Неопределено Тогда
			СтрокаПредставленияНН.КодСтавки = ЗначениеОстальныхПараметров.G008;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G009") <> Неопределено Тогда
			СтрокаПредставленияНН.КодЛьготы = ЗначениеОстальныхПараметров.G009;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G010") <> Неопределено Тогда
			СтрокаПредставленияНН.Сумма = ЗначениеОстальныхПараметров.G010;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G11_10") <> Неопределено Тогда
			СтрокаПредставленияНН.СуммаНДС = ЗначениеОстальныхПараметров.G11_10;	
		КонецЕсли;
	
	КонецЦикла;
	
	НалоговаяНакладнаяСУчетомКорректировок.Сортировать("НомерСтрокиНН");	

КонецПроцедуры

Процедура ИзменениеКоличестваПриИзменении(ТекущаяСтрока, ИмяТабЧасти, ЭтоИзменениеКоличества = Истина, КэшированныеЗначения, ЭтоСторно = Ложь)
 
 	СтруктураПересчетаСуммы = Новый Структура("Дата, ЦенаВключаетНДС", Дата, Ложь);

	СтруктураДействий = Новый Структура;
	Если ЭтоИзменениеКоличества Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;  
	Если ЭтоСторно Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС");
	КонецЕсли;
	
	ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.ЦенаРегл = ТекущаяСтрока.ЦенаБезНДС;
	ТекущаяСтрока.СуммаБезНДСРегл = ТекущаяСтрока.СуммаБезНДС;
	ТекущаяСтрока.СуммаНДСРегл = ТекущаяСтрока.СуммаНДС;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		
		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС); 
		ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.СуммаСНДС, ТекПроцентНДС, Истина);
		ТекущаяСтрока.Сумма = ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОбработатьРеквизитыРегл = Ложь) Экспорт
	
	ТекущаяСтрокаДляОбработки = НДСИсходящийКлиентСервер.СоздатьСтруктуруДляОбработкиПоТекущейСтроке(ТекущаяСтрока, ОбработатьРеквизитыРегл);
	
    // Для услуг измеряемых только в суммовом выражении, количество может быть не задано
	Если СтруктураДействий.Свойство("ПересчитатьСумму") И Не ЗначениеЗаполнено(ТекущаяСтрокаДляОбработки.КоличествоУпаковок) Тогда
		ИмяКолонкиКоличествоУпаковок = "КоличествоУпаковок_УсловнаяЕдиница";
		ТекущаяСтрокаДляОбработки.Вставить(ИмяКолонкиКоличествоУпаковок, 1);
		СтруктураДействий.Вставить("ПересчитатьСумму", ИмяКолонкиКоличествоУпаковок);
	КонецЕсли;

	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрокаДляОбработки, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрокаДляОбработки, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрокаДляОбработки, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(ТекущаяСтрокаДляОбработки, СтруктураДействий, КэшированныеЗначения);
	
	НДСИсходящийКлиентСервер.ЗаполнитьТекущуюСтрокуПоСтруктуреДляОбработки(ТекущаяСтрока, ТекущаяСтрокаДляОбработки, ОбработатьРеквизитыРегл);
	
КонецПроцедуры

Функция ОпределитьКолонкуТаблицы(СтавкаНДС=Неопределено, Дата='00010101')
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		Возврат "0";
	ИначеЕсли  СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат "БезНДС";
    ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС14 Тогда
    	Если НДСОбщегоНазначенияПовтИсп.ДатаНачалаДействияФормыНДС14() <= Дата  Тогда
    		Возврат "14";	
    	Иначе	
    		Возврат "0";
    	КонецЕсли;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
		Если '2014-12-01' <= Дата  Тогда
			Возврат "7";	
		Иначе	
			Возврат "0";
		КонецЕсли;
	Иначе
		Возврат "20";	
	КонецЕсли;
	
КонецФункции

Функция ОпределитьКодСтавки(ИмяКолонки, ВРегВалюте)
	
	Если ИмяКолонки = "0" Тогда
		Если НЕ ВРегВалюте
			Тогда
			Возврат "901";//"0Эксп";
		Иначе       
			Возврат "902";//"0Укр";
		КонецЕсли;
	//Если ИмяКолонки = "0Эксп" Тогда
	//	Возврат "901";	
	//ИначеЕсли ИмяКолонки = "0Укр" Тогда
	//	Возврат "902";		
	ИначеЕсли ИмяКолонки = "БезНДС" Тогда
		Возврат "903";		
	ИначеЕсли ИмяКолонки = "7" Тогда
		Возврат "7";	
    ИначеЕсли ИмяКолонки = "14" Тогда
    	Возврат "14";
	Иначе
		Возврат "20";	
	КонецЕсли;	

КонецФункции

Функция ПолучитьЦенуИзДокументаОтчетКомиссионера(СтрокаТЧ, ВыдаватьСообщения = Ложь)

	Цена = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераТовары.Цена,
	|	ОтчетКомиссионераТовары.Ссылка.ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ОтчетКомиссионераТовары
	|ГДЕ
	|	ОтчетКомиссионераТовары.Ссылка = &Документ
	|	И ОтчетКомиссионераТовары.Номенклатура = &Номенклатура
	|	И ОтчетКомиссионераТовары.Характеристика = &Характеристика
	|	И ОтчетКомиссионераТовары.Упаковка = &Упаковка
	|	И ОтчетКомиссионераТовары.СтавкаНДС = &СтавкаНДС";
	
	Запрос.УстановитьПараметр("Документ", 		СтрокаТЧ.ДокументПоставки);
	Запрос.УстановитьПараметр("Номенклатура", 	СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтрокаТЧ.Характеристика);
	Запрос.УстановитьПараметр("Упаковка", 		СтрокаТЧ.Упаковка);
	Запрос.УстановитьПараметр("СтавкаНДС", 		СтрокаТЧ.СтавкаНДС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Если ВыдаватьСообщения Тогда
			ТекстСообщения = НСтр("ru='Для номенклатуры %1 не удалось найти соответствующую строку в документе ""Отчет комиссионера о продажах"" для определения цены!';uk= 'Для номенклатури %1 не вдалося знайти відповідний рядок в документі ""Звіт комісіонера про продажі"" для визначення ціни!'");
			НоменклатураДляОтображения = "" + СтрокаТЧ.Номенклатура + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), "(" + СтрокаТЧ.Характеристика + ")", "");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НоменклатураДляОтображения);	
		КонецЕсли;
		
	Иначе
	
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() > 1 Тогда
			
			Если ВыдаватьСообщения Тогда
				ТекстСообщения = НСтр("ru='Для номенклатуры %1 найдено более одной строки в документе ""Отчет комиссионера о продажах"", определить цену не удалось!';uk= 'Для номенклатури %1 знайдено більше одного рядка в документі ""Звіт комісіонера про продажі"", визначити ціну не вдалося!'");
				НоменклатураДляОтображения = "" + СтрокаТЧ.Номенклатура + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), "(" + СтрокаТЧ.Характеристика + ")", "");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НоменклатураДляОтображения);	
			КонецЕсли;
			
		Иначе
			
			Выборка.Следующий();
			Цена = Выборка.Цена;
			Если Выборка.ЦенаВключаетНДС Тогда
			
				ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
				Цена = Цена - ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Цена, ТекПроцентНДС, Истина);
			
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

Процедура ПолучитьНачальныйНомерГруппы()
	
	НачальныйНомерГруппы = 0;
	
	Если Не СтатусАвтокорректировки = Перечисления.СтатусыАвтокорректировкиНалоговыхДокументов.ИсправлятьТехническуюТЧ Тогда
		ИмяТЧ = "Товары";	
	Иначе	
	    ИмяТЧ = "ТоварыПоДаннымПользователя";
	КонецЕсли; 
	ПолучитьНачальныйНомерГруппыТабличнойЧасти(ИмяТЧ);
	
	НачальныйНомерГруппы = НачальныйНомерГруппы + 1;

КонецПроцедуры

Процедура ПолучитьНачальныйНомерГруппыТабличнойЧасти(ИмяТЧ)
	
	Если ЭтотОбъект[ИмяТЧ].Количество() > 0 Тогда
		ТаблицаНомерГруппы = ЭтотОбъект[ИмяТЧ].Выгрузить(,"НомерГруппы"); 
		
		ТаблицаНомерГруппы.Сортировать("НомерГруппы УБЫВ");
		Если НачальныйНомерГруппы < ТаблицаНомерГруппы[0].НомерГруппы Тогда
			НачальныйНомерГруппы = ТаблицаНомерГруппы[0].НомерГруппы;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоответствиеПричинКорректировкиКодамПричин()
	
	// Каждому способу (причине) корректировки будет соответствовать свой список выбора кодов причин
	СоответствиеПричинКорректировкиКодамПричин = Новый Структура;
	
	// Способ (причина) корректировки "Зміна ціни"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(101);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Зміна_ціни", СписокВыбораКодов);
	
	// Способ (причина) корректировки "Зміна кількості"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(102);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Зміна_кількості", СписокВыбораКодов);
	
	// Способ (причина) корректировки "Повернення товару або авансових платежів"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(103);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Повернення_товару_або_авансових_платежів", СписокВыбораКодов);
	
	// Способ (причина) корректировки "Зміна номенклатури"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(104);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Зміна_номенклатури", СписокВыбораКодов);
	
КонецПроцедуры

Процедура УстановитьКодПричиныСтрокиПоУмолчанию(Строка)

	Если Не ПустаяСтрока(Строка.ПричинаКорректировкиНовая) И Не ЗначениеЗаполнено(Строка.КодПричины)  Тогда
		КлючСтруктуры = СтрЗаменить(Строка.ПричинаКорректировкиНовая, " ", "_"); 
		
		СписокВыбораКодов = Неопределено;
		СоответствиеПричинКорректировкиКодамПричин.Свойство(КлючСтруктуры, СписокВыбораКодов);
		Если СписокВыбораКодов <> Неопределено И СписокВыбораКодов.Количество() > 0 Тогда
			Строка.КодПричины = СписокВыбораКодов[0].Значение;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьМассивОбрабатываемыхВидовОпераций()

	МассивВидовОпераций = Новый Массив;
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.ОблагаемыеОперации);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.ОсвобожденныеОперации);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОблагаемыеОперации);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.РозницаКонрагентуОсвобожденныеОперации);
	МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.ИтоговаяРозницаОблагаемыеОперации);
	
	Возврат МассивВидовОпераций;

КонецФункции

Функция ВидыОперацийВозврат()

	ВидыОперацийВозврат = Новый Массив;
	ВидыОперацийВозврат.Добавить(Перечисления.ВидыОперацийПриложений2КНалоговойНакладной.Возврат);
	ВидыОперацийВозврат.Добавить(Перечисления.ВидыОперацийПриложений2КНалоговойНакладной.КорректировкаВозврата);
	
	Возврат ВидыОперацийВозврат;

КонецФункции

Функция ВидыОперацийКорректировка()

	ВидыОперацийКорректировка = Новый Массив;
	ВидыОперацийКорректировка.Добавить(Перечисления.ВидыОперацийПриложений2КНалоговойНакладной.Корректировка);
	
	Возврат ВидыОперацийКорректировка;

КонецФункции

#КонецОбласти

#КонецЕсли
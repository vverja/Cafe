
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Объект") Тогда
		ЗначениеВРеквизитФормы(Параметры.Объект.ПолучитьОбъект(), "Объект");
	КонецЕсли;
		
	Если Параметры.Ключ.Пустая() Тогда
		Объект.СтатусДокумента = Перечисления.СтатусыЭД.Сформирован;
		Объект.Направление     = Перечисления.НаправленияЭД.Исходящий;
		
		// При создании произвольного ЭД на основании Присоединенного файла, структура данных файла помещается во
		// временное хранилище в обработке заполнения (в модуле объекта произвольного ЭД). Т.к. основание в созданном
		// произвольном ЭД может быть изменено пользователем, то адрес временного хранилища данных файла надо сохранить
		// в реквизите формы, что бы после записи документа можно было по этим данным создать элемент ЭДПрисоединенныеФайлы.
		АдресВременногоХранилищаВложения = ОбменСКонтрагентамиСлужебный.ПараметрИзПараметрыКлиентаНаСервере(Объект.ДокументОснование);
		
		ДокументОснование = Неопределено;
		Если Параметры.Свойство("ДокументОснование", ДокументОснование) И ЗначениеЗаполнено(ДокументОснование) Тогда
			Если ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
				ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ВладелецФайла");
			КонецЕсли;
			ЗаполнитьПоДокументуОснованию(ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.Прочитан И НЕ Объект.Ссылка.Пустая()
		И Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.Прочитан = Истина;
		Документ.Записать();
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ИзмененСтатус = Истина;
	КонецЕсли;
	
	СопроводительнаяЗаписка = Объект.Текст;
	ТребуетсяПодтверждение = Объект.ТребуетсяПодтверждение;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстДокументОснование = ЗаполнитьТекстДокументаОснования(Объект.ДокументОснование);
	КонецЕсли;
	
	Элементы.ЖурналСобытийЭДО.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	ПерезаполнитьКомментарии();
	
	ОбновитьДанныеОВложении();
	
	ЭДОтклонен = ЗначениеЗаполнено(ЭлектронныйДокументСсылка)
				И (ЭлектронныйДокументСсылка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					ИЛИ ЭлектронныйДокументСсылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ ЭлектронныйДокументСсылка.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
	ОбновитьИнформациюПодвала();
	ОбновитьЗаголовокФормы();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// До записи документа вложение хранится во временном хранилище, после записи документа
	// создается новый элемент справочника ЭДПрисоединенныеФайлы, в который записывается данные из временного хранилища.
	ДанныеВложенияОбновлены = ДобавитьВложениеИзВременногоХранилищаПослеЗаписиДокумента();
	
	ОбновитьЗаголовокФормы();
	
	Если ОбновитьРеквизитыВложения И НЕ ДанныеВложенияОбновлены Тогда
		ДобавитьОбновитьПрисоединенныеФайлыКСообщению();
	КонецЕсли;
	УстановитьДоступностьЭлементов();
	ОбновитьИнформациюПодвала();
	Если Объект.Направление  = Перечисления.НаправленияЭД.Входящий И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		// при ручном выборе основания во входящем документе надо удалить запись регистра
		// ИдентификаторыДокументовОснованийВладельцевЭД для текущего документа
		НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокументСсылка);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
			НаборЗаписей.Удалить(ЗаписьРегистра);
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор);
		Если ДанныеФайла.ФайлРедактируется Тогда
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПродолжитьПослеОсвобожденияВложения", ЭтотОбъект);
			ПроверитьЗахватНаРедактирование(ОписаниеОповещения, ДанныеФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЕстьСоглашение(ТекущийОбъект) Тогда
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьТребуетсяПодтверждениеПоСоглашению();
	Иначе
		// Если вложение записано, то при изменении перечисленных ниже реквизитов
		// надо принудительно перезаполнить их во вложении.
		ОбновитьРеквизитыВложения = (ТекущийОбъект.Контрагент <> Объект.Ссылка.Контрагент
			ИЛИ ТекущийОбъект.Организация <> Объект.Ссылка.Организация
			ИЛИ ТекущийОбъект.Номер <> Объект.Ссылка.Номер
			ИЛИ ТекущийОбъект.Дата <> Объект.Ссылка.Дата
			ИЛИ ТекущийОбъект.Текст <> Объект.Ссылка.Текст
			ИЛИ ТекущийОбъект.ДокументОснование <> Объект.Ссылка.ДокументОснование);
	КонецЕсли;
	
	ТекущийОбъект.Текст = СокрЛП(СопроводительнаяЗаписка);
	ТекущийОбъект.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ВыполнитьОбработкуОповещенияНаСервере();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ЗаполнитьПоДокументуОснованию(ВыбранноеЗначение);
	ОбновитьОтображениеДанных();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПроверитьВозможностьИзмененияУчастникаОбмена("Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПроверитьВозможностьИзмененияУчастникаОбмена("Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПодтверждениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьСтатусСостояниеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНайти(Поле.Имя, "ЭПКомуВыданСертификат")>0 Тогда
		ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда
			ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЭП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ЭП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВложениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь;
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументОснованиеОтсутствуетНажатие(Элемент)
	
	СписокТиповДокументовОснований = СписокТиповДокументовОснованийПроизвольногоДокумента();
	Если СписокТиповДокументовОснований.Количество() > 0 Тогда
		ОбработкаПродолжения = Новый ОписаниеОповещения("ВыборДокументаОснованияПродолжить", ЭтотОбъект);
		Если СписокТиповДокументовОснований.Количество() = 1 Тогда
			ВыполнитьОбработкуОповещения(ОбработкаПродолжения, СписокТиповДокументовОснований[0].Значение);
		Иначе
			ЗаголовокСпискаВыбора = НСтр("ru='Выберите тип документа основания...';uk='Виберіть тип документа підстави...'");
			ЭлементПоУмолчанию = СписокТиповДокументовОснований.НайтиПоЗначению("ПроизвольныйЭД");
			СписокТиповДокументовОснований.ПоказатьВыборЭлемента(ОбработкаПродолжения, ЗаголовокСпискаВыбора, ЭлементПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОчиститьОснованиеНажатие(Элемент)
	
	ТекстВопроса = НСтр("ru='Убрать документ-основание?';uk='Прибрати документ-підставу?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОчисткиДокументаОснования", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьОтклонение(Команда)
	
	Если ЭДОтклонен Тогда
		ОбработкаПродолжения = Новый ОписаниеОповещения("ОбработатьОтменуОтклоненияЭД", ЭтотОбъект);
		ПроверитьЗаписьДокумента(, ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() И (ЗначениеЗаполнено(ЭлектронныйДокументСсылка)
									ИЛИ ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения)) Тогда
		
		ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор);
		ОбработкаПродолженияПослеПроверки = Новый ОписаниеОповещения("ЗакончитьПодписаниеДокумента", ЭтотОбъект, Истина);
		ОбработкаПродолжения = Новый ОписаниеОповещения("ПроверитьЗаписьДокумента", ЭтотОбъект, ОбработкаПродолженияПослеПроверки);
		ПроверитьЗахватНаРедактирование(ОбработкаПродолжения, ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если ПроверитьЗаполнение() И (ЗначениеЗаполнено(ЭлектронныйДокументСсылка)
									ИЛИ ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения)) Тогда
		
		ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор);
		ОбработкаПродолжения = Новый ОписаниеОповещения("ЗакончитьПодписаниеДокумента", ЭтотОбъект, Ложь);
		ПроверитьЗахватНаРедактирование(ОбработкаПродолжения, ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	Если НЕ ЭДОтклонен И ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		ОбработкаПродолжения = Новый ОписаниеОповещения("ОтклонитьАннулироватьЭД", ЭтотОбъект, Истина);
		ПроверитьЗаписьДокумента(, ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(ЭлектронныйДокументСсылка);
		ОбновитьОтображениеДанных();
		ЗаполнитьТаблицуЭП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ЭП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ЭП.ТекущиеДанные.НомерСтроки, Элементы.ЭП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru='Выберите сертификат в списке установленных подписей.';uk='Виберіть сертифікат в списку встановлених підписів.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ЭП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		СтруктураПараметров = Новый Структура("Описание", Комментарий);
		ИзменитьЗначенияРеквизитовНаСервере(ЭлектронныйДокументСсылка, СтруктураПараметров);
		Комментарий = "";
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ОбработатьПеренаправлениеЭД", ЭтотОбъект);
	ПроверитьЗаписьДокумента(, ОбработкаПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийЭДО(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", ЭлектронныйДокументСсылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Обработчики команд вложения

&НаКлиенте
Процедура СохранитьВложениеВФайл(Команда)
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		ДанныеФайла = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭлектронныйДокументСсылка, УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.СохранитьВместеСЭП(ЭлектронныйДокументСсылка, ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ДанныеФайла.ФайлРедактируется И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь)
		ИЛИ ДанныеФайла.Зашифрован ИЛИ ДанныеФайла.ПодписанЭП Тогда
		// Файл может быть изменен в другом сеансе.
		Если ДанныеФайла.Ссылка <> Неопределено Тогда
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.ФайлРедактируется Тогда
		ЗанятьФайлДляРедактированияСервер(ДанныеФайла);
		
		Если ДанныеФайла.Ссылка = Неопределено Тогда
			АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		КонецЕсли;
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	ВложениеРедактируется = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла)
		ИЛИ (НЕ ДанныеФайла.ФайлРедактируется ИЛИ НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПродолжения = Новый ОписаниеОповещения("ЗакончитьРедактированиеЗавершить", ЭтотОбъект);
	ДополнительныеПараметры = Новый Структура("ДанныеФайла, ОбработкаПродолжения", ДанныеФайла, ОбработкаПродолжения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект, ДополнительныеПараметры);
	ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ОписаниеОповещения, ДанныеФайла, УникальныйИдентификатор);
	
	УдалитьВременныйФайлВложения(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ОсвободитьФайл();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзПрисоединенныхФайлов(Команда)
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.ДокументОснование, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДиске(Команда)
	
	ВыбранныйФайл   = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаНаДискеЗавершить", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, , ВыбранныйФайл, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Вложение

&НаКлиенте
Процедура УдалитьВременныйФайлВложения(ДанныеФайла)
	
	РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
	УдалитьФайлы(ПолноеИмяФайлаНаКлиенте);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор)
	
	ДанныеФайла = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		// Файл во временном хранилище
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		ДанныеФайла.Вставить("Ссылка", Неопределено);
	ИначеЕсли ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		// Файл записан в ИБ
		ДанныеФайла = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭлектронныйДокументСсылка, УникальныйИдентификатор);
		ДанныеФайла.Вставить("Ссылка", ЭлектронныйДокументСсылка);
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДействиеРазрешено(ДанныеФайла, Знач ТекущееДействие = "")
	
	Если ДанныеФайла = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущееДействие = "ПометкаУдаления" И ДанныеФайла.ФайлРедактируется Тогда
		
		Если ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			ТекстПредупреждения = НСтр("ru='Действие недоступно, так как файл занят для редактирования.';uk='Дія недоступна, так як файл зайнятий для редагування.'");
		Иначе
			ТекстПредупреждения = НСтр("ru='Действие недоступно, так как файл занят для редактирования
                                             |другим пользователем.'
                                             |;uk='Дія недоступна, так як файл зайнятий для редагування
                                             |іншим користувачем.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗанятьФайлДляРедактированияСервер(ДанныеФайла)
	
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		ДанныеФайла.Редактирует                        = Пользователи.АвторизованныйПользователь();
		ДанныеФайла.ФайлРедактируется                  = Истина;
		ДанныеФайла.ФайлРедактируетТекущийПользователь = Истина;
	Иначе
		ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьФайл()
	
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.ФайлРедактируется
	 ИЛИ НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайлНаСервере(ДанныеФайла);
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	Иначе
		ОповеститьОбИзменении(ДанныеФайла.Ссылка);
	КонецЕсли;
	УдалитьВременныйФайлВложения(ДанныеФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОсвободитьФайлНаСервере(ДанныеФайла)
	
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		ДанныеФайла.Редактирует                        = Справочники.Пользователи.ПустаяСсылка();
		ДанныеФайла.ФайлРедактируется                  = Ложь;
		ДанныеФайла.ФайлРедактируетТекущийПользователь = Ложь;
	Иначе
		ПрисоединенныеФайлыСлужебный.ОсвободитьФайл(ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияОФайле <> Неопределено И ИнформацияОФайле.ФайлПомещенВХранилище Тогда
		ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
		Если ДанныеФайла.Ссылка = Неопределено Тогда
			ДанныеФайла.Редактирует                        = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			ДанныеФайла.ФайлРедактируется                  = Ложь;
			ДанныеФайла.ФайлРедактируетТекущийПользователь = Ложь;
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла        = ИнформацияОФайле.АдресФайлаВоВременномХранилище;
			ЗаполнитьЗначенияСвойств(ДанныеФайла, ИнформацияОФайле);
			Если ТипЗнч(ИнформацияОФайле.АдресФайлаВоВременномХранилище) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанные = ИнформацияОФайле.АдресФайлаВоВременномХранилище;
			Иначе
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИнформацияОФайле.АдресФайлаВоВременномХранилище);
			КонецЕсли;
			ДанныеФайла.Размер = ДвоичныеДанные.Размер();
			АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ПоместитьФайлВХранилищеИОсвободить(ДанныеФайла.Ссылка, ИнформацияОФайле);
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		КонецЕсли;
		УдалитьВременныйФайлВложения(ДанныеФайла);
		ОбновитьДанныеОВложении();
		УстановитьДоступностьЭлементов();
		ОписаниеОповещения = Неопределено;
		Если ДополнительныеПараметры.Свойство("ОбработкаПродолжения", ОписаниеОповещения) Тогда
			// Завершение редактирования файла инициировано пользователем, при подписании вложения
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеЗавершить(Результат, ДополнительныеПараметры) Экспорт
	
	Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьФайлВХранилищеИОсвободить(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле)
	
	ПрисоединенныеФайлыСлужебный.ПоместитьФайлВХранилищеИОсвободить(ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДискеЗавершить(ФайлПомещен, АдресВХранилище, ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
	СтруктураФайла  = Новый Структура;
	Если ФайлПомещен Тогда
		ФайлКлиента = Новый Файл(ВыбранныйФайл);
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ОтносительныйПуть = Строка(УникальныйИдентификатор);
		ОтносительныйПуть = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ОтносительныйПуть, "");
		ОтносительныйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОтносительныйПуть);
		
		СтруктураФайла  = Новый Структура;
		
		СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл);
		СтруктураФайла.ПолноеИмя = РабочийКаталогПользователя + ОтносительныйПуть + СтруктураФайла.Имя;
		СтруктураФайла.Путь = РабочийКаталогПользователя + ОтносительныйПуть;
		
		СтруктураФайла.Вставить("ИмяФайла",                           СтруктураФайла.Имя);
		СтруктураФайла.Вставить("Наименование",                       СтруктураФайла.ИмяБезРасширения);
		СтруктураФайла.Вставить("Расширение",                         ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение));
		СтруктураФайла.Вставить("Размер",                             ФайлКлиента.Размер());
		СтруктураФайла.Вставить("Редактирует",                        Неопределено);
		СтруктураФайла.Вставить("ПодписанЭП",                         Ложь);
		СтруктураФайла.Вставить("Зашифрован",                         Ложь);
		СтруктураФайла.Вставить("ФайлРедактируется",                  Ложь);
		СтруктураФайла.Вставить("ОтносительныйПуть",                  ОтносительныйПуть);
		СтруктураФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",        АдресВХранилище);
		СтруктураФайла.Вставить("ДатаМодификацииУниверсальная",       ФайлКлиента.ПолучитьУниверсальноеВремяИзменения());
		СтруктураФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
		АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(СтруктураФайла, УникальныйИдентификатор);
		ОбновитьДанныеОВложении();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжитьПослеОсвобожденияВложения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Записать();
	Иначе
		ТекстСообщения = НСтр("ru='Во время выполнения операции произошла ошибка. Действие отменено (подробности см. в журнале регистрации).';uk='Під час виконання операції сталася помилка. Дію скасовано (подробиці див. у журналі реєстрації).'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВложениеИзВременногоХранилищаПослеЗаписиДокумента()
	
	ДанныеОбновлены = Ложь;
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		СтруктураФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		АдресВременногоХранилищаВложения = Неопределено;
		Если ТипЗнч(СтруктураФайла) = Тип("Структура") И СтруктураФайла.Свойство("СсылкаНаДвоичныеДанныеФайла") Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
				СтруктураФайла.Вставить("АдресФайлаВоВременномХранилище", СтруктураФайла.СсылкаНаДвоичныеДанныеФайла);
				СтруктураФайла.Вставить("АдресВременногоХранилищаТекста", "");
				СтруктураФайла.Вставить("ИмяБезРасширения",               СтруктураФайла.Наименование);
				ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ЭлектронныйДокументСсылка, СтруктураФайла);
			КонецЕсли;
			ДобавитьОбновитьПрисоединенныеФайлыКСообщению(СтруктураФайла.СсылкаНаДвоичныеДанныеФайла);
			ДанныеОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеОбновлены;
	
КонецФункции

&НаСервере
Процедура ДобавитьОбновитьПрисоединенныеФайлыКСообщению(АдресВХранилище = Неопределено)
	
	ПараметрыСоглашения = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Объект.Ссылка);
	Если ЗначениеЗаполнено(ПараметрыСоглашения) Тогда
		ИдентификаторОрганизации = ПараметрыСоглашения.ИдентификаторОрганизации;
		ИдентификаторКонтрагента = ПараметрыСоглашения.ИдентификаторКонтрагента;
		СоглашениеЭД             = ПараметрыСоглашения.СоглашениеЭД;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения) И НЕ ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДокумента =  Новый Структура;
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		ДобавленныйФайл = ЭлектронныйДокументСсылка;
	Иначе
		Если НЕ (ЗначениеЗаполнено(ЭлектронныйДокументИмяФайлаБезРасширения)
				 И ЭтоАдресВременногоХранилища(АдресВХранилище)) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", Объект.Ссылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокументИмяФайлаБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ЭлектронныйДокументРасширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресВХранилище, , , НоваяСсылкаЭД);
	
		НомерДокумента = ОбменСКонтрагентамиВнутренний.ВернутьИдЭД(ДобавленныйФайл);
		СтруктураДокумента.Вставить("ВладелецЭД",                Объект.Ссылка);
		СтруктураДокумента.Вставить("ВидЭД",                     Перечисления.ВидыЭД.ПроизвольныйЭД);
		СтруктураДокумента.Вставить("НаправлениеЭД",             Перечисления.НаправленияЭД.Исходящий);
		СтруктураДокумента.Вставить("Автор",                     Пользователи.АвторизованныйПользователь());
		СтруктураДокумента.Вставить("НомерЭД",                   НомерДокумента);
		СтруктураДокумента.Вставить("УникальныйИД",              НомерДокумента);
		СтруктураДокумента.Вставить("НомерВерсииЭД",             0);
		СтруктураДокумента.Вставить("ТипЭлементаВерсииЭД",       Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	КонецЕсли;
	СтруктураДокумента.Вставить("Организация",               Объект.Организация);
	СтруктураДокумента.Вставить("Контрагент",                Объект.Контрагент);
	СтруктураДокумента.Вставить("Отправитель",               ИдентификаторОрганизации);
	СтруктураДокумента.Вставить("Получатель",                ИдентификаторКонтрагента);
	СтруктураДокумента.Вставить("ПрофильНастроекЭДО",        ПрофильНастроекЭДО);
	СтруктураДокумента.Вставить("СоглашениеЭД",              СоглашениеЭД);
	СтруктураДокумента.Вставить("СтатусЭД",                  Перечисления.СтатусыЭД.Сформирован);
	СтруктураДокумента.Вставить("НаименованиеФайла",         ЭлектронныйДокументИмяФайлаБезРасширения);
	СтруктураДокумента.Вставить("ДополнительнаяИнформация",  Объект.Текст);
	СтруктураДокумента.Вставить("НомерДокументаОтправителя", Объект.Номер);
	СтруктураДокумента.Вставить("ДатаДокументаОтправителя",  Объект.Дата);
	СтруктураДокумента.Вставить("УдалитьЭП",  Истина);
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И Метаданные.Документы.Содержит(Объект.ДокументОснование.Метаданные()) Тогда
		// Т.к. документом-основанием может быть документ ИБ, сформированный на основании входящего ЭД,
		// то чтобы на стороне получателя данный документ правильно определил основание, в качестве
		// идентификатора передаётся НомерЭД (всегда является идентификатором документа ИБ, на основании
		// которого формируется ЭДО).
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.НомерЭД КАК ИдентификаторДокументаОснования,
			|	ЭДПрисоединенныеФайлы.УникальныйИД КАК ИдентификаторЭДДокументаОснования
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ДокументОснование
			|	И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
			|			ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))";
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
		ТаблицаИдентификаторов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаИдентификаторов.Количество() = 0 Тогда
			СтрокаИдентификатора = ТаблицаИдентификаторов.Добавить();
			СтрокаИдентификатора.ИдентификаторДокументаОснования = Строка(Объект.ДокументОснование.УникальныйИдентификатор());
			СтрокаИдентификатора.ИдентификаторЭДДокументаОснования = Строка(Объект.ДокументОснование.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	// Т.к. основание может быть очищено пользователем на форме,
	// то надо при обновлении данных присоединенного файла очистить массив идентификаторов
	СтруктураДокумента.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторов);
	
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураДокумента, Ложь);
	
	Прочитать();
	ОбновитьДанныеОВложении();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОВложении()
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		СтруктураФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		Если ТипЗнч(СтруктураФайла) = Тип("Структура") И СтруктураФайла.Свойство("СсылкаНаДвоичныеДанныеФайла") Тогда
			ЭлектронныйДокументРасширение  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение);
			ЭлектронныйДокументИмяФайла    = СокрЛП(СтруктураФайла.ИмяФайла);
			ЭлектронныйДокументИмяФайлаБезРасширения = СокрЛП(СтруктураФайла.Наименование);
			ЭлектронныйДокументПиктограмма = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(СтруктураФайла.Расширение);
			Элементы.ТекстВложение.Ширина  = СтрДлина(ЭлектронныйДокументИмяФайла);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗапросВложений = Новый Запрос;
		ЗапросВложений.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
		ЗапросВложений.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ЭДПрисоединенныеФайлы.Наименование КАК ИмяФайла,
		|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ЭДПрисоединенныеФайлы.Редактирует КАК Редактирует
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
		Результат = ЗапросВложений.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ЭлектронныйДокументСсылка      = Результат.Ссылка;
			ЭлектронныйДокументРасширение  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Результат.Расширение);
			ЭлектронныйДокументИмяФайла    = СокрЛП(Результат.ИмяФайла) + "." + ЭлектронныйДокументРасширение;
			ЭлектронныйДокументИмяФайлаБезРасширения = СокрЛП(Результат.ИмяФайла);
			ЭлектронныйДокументПиктограмма = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Результат.Расширение);
			Элементы.ТекстВложение.Ширина  = СтрДлина(ЭлектронныйДокументИмяФайла);
			Если ЗначениеЗаполнено(Результат.Редактирует) И Результат.Редактирует = ПараметрыСеанса.АвторизованныйПользователь Тогда
				ВложениеРедактируется = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗахватНаРедактирование(ОбработкаПродолжения, ДанныеФайла)
	
	Если ДанныеФайла.ФайлРедактируется Тогда
		Если ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			// Вложение захвачено для редактирования текущим пользователем
			ДополнительныеПараметры = Новый Структура("ДанныеФайла, ОбработкаПродолжения", ДанныеФайла, ОбработкаПродолжения);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗахватНаРедактированиеПередПодписаниемПродолжить", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Вложение ""%1"" захвачено для редактирования.
                |Для продолжения надо завершить редактирование.'
                |;uk='Вкладення ""%1"" захоплено для редагування.
                |Для продовження треба завершити редагування.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ЭлектронныйДокументИмяФайла);
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("ЗакончитьРедактирование", "Закончить редактирование");
			СписокКнопок.Добавить("Освободить", "Отменить редактирование");
			СписокКнопок.Добавить("Отменить", "Отменить");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		Иначе
			ТекстПредупреждения = НСтр("ru='Действие недоступно, так как файл занят для редактирования
                                             |другим пользователем.'
                                             |;uk='Дія недоступна, так як файл зайнятий для редагування
                                             |іншим користувачем.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗахватНаРедактированиеПередПодписаниемПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Освободить" Тогда
		ОсвободитьФайл();
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаПродолжения);
	ИначеЕсли Результат = "ЗакончитьРедактирование" Тогда
		ДанныеФайла = ДополнительныеПараметры.ДанныеФайла;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект, ДополнительныеПараметры);
		ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ОписаниеОповещения, ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////

#Область Основание

&НаКлиенте
Процедура ПроверитьВозможностьИзмененияУчастникаОбмена(ИмяРеквизита)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		НаименованиеУчастникаВОсновании = Неопределено;
		УчастникВОсновании = Неопределено;
		Если ЗначениеЗаполнено(Объект[ИмяРеквизита])
			И УчастникОбменаВОбъектеИОснованииНеСовпадает(ИмяРеквизита, НаименованиеУчастникаВОсновании, УчастникВОсновании) Тогда
			ТекстВопроса = НСтр("ru='%1 в основании (%2) отличается от выбранного значения!
                |Очистить основание?'
                |;uk='%1 в підставі (%2) відрізняється від вибраного значення!
                |Очистити підставу?'");
			ТекстВопроса = СтрШаблон(ТекстВопроса, ИмяРеквизита, НаименованиеУчастникаВОсновании);
			СтруктураПараметров = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", ИмяРеквизита, УчастникВОсновании);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветОбОчисткеОснования", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОбОчисткеОснования(Результат, СтруктураПараметров) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументОснование = Неопределено;
		УстановитьДоступностьЭлементов();
	Иначе
		Объект[СтруктураПараметров.ИмяРеквизита] = СтруктураПараметров.ЗначениеРеквизита;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УчастникОбменаВОбъектеИОснованииНеСовпадает(ИмяРеквизита, НаименованиеУчастникаВОсновании, УчастникВОсновании)
	
	РеквизитыОснования = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(Объект.ДокументОснование);
	УчастникВОсновании = Неопределено;
	РеквизитыОснования.Свойство(ИмяРеквизита, УчастникВОсновании);
	Если ЗначениеЗаполнено(УчастникВОсновании) Тогда
		НаименованиеУчастникаВОсновании = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчастникВОсновании, "Наименование");
		Результат = Объект[ИмяРеквизита] <> УчастникВОсновании;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыборДокументаОснованияПродолжить(Результат, Неопределен) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтруктураОтбора = Новый Структура;
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				СтруктураОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
		ОткрытьФорму(Результат.Значение + ".ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокТиповДокументовОснованийПроизвольногоДокумента()
	
	Основания = Метаданные.Документы.ПроизвольныйЭД.ВводитсяНаОсновании;
	СписокТипов = Новый СписокЗначений;
	Для Каждого ТекущееОснование Из Основания Цикл
		СписокТипов.Добавить(ТекущееОснование.ПолноеИмя(), ТекущееОснование.Синоним);
	КонецЦикла;
	
	Возврат СписокТипов;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветНаВопросОчисткиДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументОснование = Неопределено;
		Модифицированность = Истина;
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованию(ДокументОснование)
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.Заполнить(ДокументОснование);
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ТекстДокументОснование = ЗаполнитьТекстДокументаОснования(Объект.ДокументОснование);
		АдресХранилища = ОбменСКонтрагентамиСлужебный.ПараметрИзПараметрыКлиентаНаСервере(Объект.ДокументОснование);
		Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
			АдресВременногоХранилищаВложения = АдресХранилища;
			// У документа уже есть сохраненное вложение, надо будет в нем обновить двоичные данные.
			ОбновитьДвоичныеДанныеФайла = ЗначениеЗаполнено(ЭлектронныйДокументСсылка);
		КонецЕсли;
		ТребуетсяПодтверждение = Объект.ТребуетсяПодтверждение;
		Модифицированность = Истина;
	КонецЕсли;
	ОбновитьДанныеОВложении();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьТекстДокументаОснования(СсылкаНаОснование)
	
	ТекстОснование = ПредставлениеОснования(СсылкаНаОснование);
	
	Возврат ТекстОснование;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеОснования(СсылкаНаОснование)
	
	ТекстДокументОснование = "";
	Если ЗначениеЗаполнено(СсылкаНаОснование) Тогда
		Если Найти(СсылкаНаОснование.Метаданные().ПолноеИмя(), "Справочник") > 0 Тогда
			Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОснование, "Наименование");
			ТекстДокументОснование = НСтр("ru='%1 %2';uk='%1 %2'");
			ТекстДокументОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДокументОснование,
				ТипЗнч(СсылкаНаОснование), СокрЛП(Структура.Наименование));
		Иначе
			Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОснование, "Номер, Дата");
			ТекстДокументОснование = НСтр("ru='%1 №%2 от %3';uk='%1 №%2 від %3'");
			ТекстДокументОснование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДокументОснование,
				ТипЗнч(СсылкаНаОснование), СокрЛП(Структура.Номер), Формат(Структура.Дата, "ДЛФ=D"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстДокументОснование;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////

#Область СертификатыИПодписи

&НаКлиенте
Процедура ЗакончитьПодписаниеДокумента(Неопределен, ФлагОтправить) Экспорт
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ЭлектронныйДокументСсылка);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПодписей",   МассивОтпечатков());
	ДополнительныеПараметры.Вставить("МассивНаОтправку", МассивЭД);
	ДополнительныеПараметры.Вставить("ФлагОтправить",    ФлагОтправить);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗакончитьПодписаниеОповещение", ЭтотОбъект, ДополнительныеПараметры);
	Действия = "УтвердитьПодписать" + ?(ФлагОтправить, "Отправить", "");
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(Новый Массив, Действия, , МассивЭД, ОбработчикОповещения);
	
КонецПроцедуры

&НаСервере
Функция МассивОтпечатков()
	
	Подписи = РеквизитФормыВЗначение("ЭП");
	МассивОтпечатков = Подписи.ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

&НаКлиенте
Функция СравнитьПодписи(МассивОтпечатковДо)
	
	ДокументПодписан = Ложь;
	
	МассивОтпечатковПосле = МассивОтпечатков();
	
	Для Каждого Отпечаток Из МассивОтпечатковПосле Цикл
		
		Если МассивОтпечатковДо.Найти(Отпечаток) = Неопределено Тогда
			ДокументПодписан = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументПодписан;
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьПодписаниеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Подписан = СравнитьПодписи(ДополнительныеПараметры.МассивПодписей);
	
	Прочитать();
	ПоказатьРезультатПодписи(Подписан);
	ФлагОтправить = Ложь;
	Если ДополнительныеПараметры.Свойство("ФлагОтправить", ФлагОтправить) И ФлагОтправить = Истина Тогда
		ДополнительныеПараметры.Вставить("Подписан", Подписан);
		ПослеОтправкиПЭД(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатПодписи(Подписан)
	
	ТекстСостояния = НСтр("ru='Подписано: (0)';uk='Підписано: (0)'");
	ТекстЗаголовка = НСтр("ru='Обмен электронными документами';uk='Обмін електронними документами'");
	Если Подписан Тогда
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Подписан", Истина);
		
		ОбновитьСтатусДокумента(ПараметрыДокумента);
		
		Прочитать();
		УстановитьДоступностьЭлементов();
		
		ТекстСостояния = НСтр("ru='Подписано: (1)';uk='Підписано: (1)'");
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭП()
	
	Если НЕ ЗначениеЗаполнено(СоглашениеЭД)
		ИЛИ НЕ СоглашениеЭД.ПроверятьСертификатыПодписей Тогда
		
		ТаблицаЭП = РеквизитФормыВЗначение("ЭП");
		ТаблицаЭП.Очистить();
		Для Каждого ТекСтрока Из ЭлектронныйДокументСсылка.ЭлектронныеПодписи Цикл
			НоваяСтрока = ТаблицаЭП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТаблицаЭП, "ЭП");
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковОжидаемыхСертификатов = ОбменСКонтрагентамиСлужебный.ОтпечаткиОжидаемыхСертификатов(ЭлектронныйДокументСсылка);
	
	ТаблицаЭП = РеквизитФормыВЗначение("ЭП");
	ТаблицаЭП.Очистить();
	
	Для Каждого ТекСтрока Из ЭлектронныйДокументСсылка.ЭлектронныеПодписи Цикл
		НоваяСтрока = ТаблицаЭП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
			НоваяСтрока.ОтсутствуетВСписке = Истина;
			НоваяСтрока.ВыводКартинки = 1;
		Иначе
			НоваяСтрока.ВыводКартинки = 0;
		КонецЕсли;
		ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаЭП, "ЭП");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВерна = ?(ТекСтрока.ПодписьВерна, НСтр("ru='Верна';uk='Вірна'"), НСтр("ru='Неверна';uk='Невірна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВерна = НСтр("ru='Не проверена';uk='Не перевірена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	СсылкаНаХранилищеДанныхСертификата = Неопределено;
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		ДвоичныеДанныеСертификата = ЭлектронныйДокументСсылка.ЭлектронныеПодписи[НомерСтроки-1].Сертификат.Получить();
		СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	СтруктураСертификата = ОбменСКонтрагентамиСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("СтруктураСертификата", СтруктураСертификата);
		ПараметрыФормы.Вставить("Отпечаток",            Отпечаток);
		ПараметрыФормы.Вставить("АдресСертификата",     АдресДанныхСертификата);
			
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД) И ЗначениеЗаполнено(ЭлектронныйДокументСсылка)) Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ЭлектронныйДокументСсылка.ЭлектронныеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = СоглашениеЭД.ПолучитьОбъект();
		
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат;
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		
		СертификатДобавлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда
		Текст = НСтр("ru='Добавить сертификат %1 в список ожидаемых сертификатов контрагента?';uk='Додати сертифікат %1 у список очікуваних сертифікатів контрагента?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеПодписи.КомуВыданСертификат);
		ДопПараметры = Новый Структура("ТекущиеДанные, ДанныеПодписи", Элементы.ЭП.ТекущиеДанные, ДанныеПодписи);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПоСертификату", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросПоСертификату(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ПоказатьСертификат(ТекущиеДанные.НомерСтроки,ТекущиеДанные.Отпечаток);
	Иначе
		// Добавим сертификат в Соглашение.
		ДанныеПодписи = ДополнительныеПараметры.ДанныеПодписи;
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru='Ошибка добавления сертификата подписи в список ожидаемых сертификатов!';uk='Помилка додавання сертифікату підпису в список очікуваних сертифікатів!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭП();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////

#Область Прочие

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	НаправлениеИсходящий = (Объект.Направление = Перечисления.НаправленияЭД.Исходящий);
	
	СтатусПередан = Документы.ПроизвольныйЭД.СтатусОбъектаПередан(Объект);
	
	ДОЗакрыт = ОбменСКонтрагентамиСлужебныйВызовСервера.ДОЗакрытПринудительно(Объект.Ссылка);
		
	ЕстьВложения = ЗначениеЗаполнено(ЭлектронныйДокументСсылка)
					ИЛИ ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения);
	
	Элементы.Подписать.Доступность             = (НЕ (СтатусПередан ИЛИ ЭДОтклонен Или ДОЗакрыт)
													И ЕстьВложения И (НаправлениеИсходящий ИЛИ ТребуетсяПодтверждение));
	Элементы.ПодписатьИОтправитьЭД.Доступность = (НЕ (СтатусПередан ИЛИ ЭДОтклонен Или ДОЗакрыт)
													И ЕстьВложения И (НаправлениеИсходящий ИЛИ ТребуетсяПодтверждение));
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НаправлениеИсходящий
		И (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Сформирован
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.Подписан
			ИЛИ Объект.СтатусДокумента = Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
		МожноРедактироватьПередаваемыеПараметры = Истина;
	Иначе
		МожноРедактироватьПередаваемыеПараметры = НЕ ЗначениеЗаполнено(Объект.Ссылка); // Если документ еще не записан, то можно редактировать.
	КонецЕсли;
	
	// Вложение
	Если НаправлениеИсходящий Тогда
		Элементы.КоманднаяПанельВложения.Видимость = Истина;
		ПрисоединенныеФайлыОснования = Новый Массив;
		ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Объект.ДокументОснование, ПрисоединенныеФайлыОснования);
		Если ПрисоединенныеФайлыОснования.Количество() > 0 Тогда
			КомандаДобавить = Элементы.Добавить;
			Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Видимость = Ложь;
		Иначе
			КомандаДобавить = Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная;
			Элементы.Добавить.Видимость = Ложь;
		КонецЕсли;
		КомандаДобавить.Видимость = Истина;
		Если ЕстьВложения Тогда
			ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ЭлектронныйДокументСсылка, УникальныйИдентификатор);
			Если ДанныеФайла.ФайлРедактируется Тогда
				ТекстРедактируетФайл = НСтр("ru='Файл захвачен на редактирование пользователем %1';uk='Файл захоплений на редагування користувачем %1'");
				ТекстРедактируетФайл = СтрЗаменить(ТекстРедактируетФайл, "%1", ДанныеФайла.Редактирует);
				Элементы.ТекстРедактируетФайл.ЦветТекста = ЦветаСтиля[?(ДанныеФайла.ФайлРедактируетТекущийПользователь,
					"ФайлЗанятыйТекущимПользователем", "ТекстЗапрещеннойЯчейкиЦвет")];
			Иначе
				ТекстРедактируетФайл = "";
			КонецЕсли;
			КомандаДобавить.Заголовок = СтрЗаменить(КомандаДобавить.Заголовок, НСтр("ru='Добавить';uk='Додати'"), НСтр("ru='Заменить на';uk='Замінити на'"));
			Если МожноРедактироватьПередаваемыеПараметры И НЕ ДанныеФайла.ПодписанЭП Тогда
				КомандаДобавить.Доступность = Истина;
				Элементы.Редактировать.Доступность = НЕ ДанныеФайла.ФайлРедактируется;
				Элементы.ЗакончитьРедактирование.Доступность = ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь;
				Элементы.Освободить.Доступность = ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь;
			Иначе
				КомандаДобавить.Доступность = Ложь;
				Элементы.Редактировать.Доступность = Ложь;
				Элементы.ЗакончитьРедактирование.Доступность = Ложь;
				Элементы.Освободить.Доступность = Ложь;
			КонецЕсли;
		Иначе
			КомандаДобавить.Заголовок = СтрЗаменить(КомандаДобавить.Заголовок, НСтр("ru='Заменить на';uk='Замінити на'"), НСтр("ru='Добавить';uk='Додати'"));
			КомандаДобавить.Доступность = МожноРедактироватьПередаваемыеПараметры;
			Элементы.Редактировать.Доступность = Ложь;
			Элементы.ЗакончитьРедактирование.Доступность = Ложь;
			Элементы.Освободить.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.КоманднаяПанельВложения.Видимость = Ложь;
		Элементы.ТекстРедактируетФайл.Видимость = Ложь;
	КонецЕсли;
	Элементы.ВложенияСтраницы.ТекущаяСтраница = ?(ЕстьВложения, Элементы.ВложенияСтраницаОтобразитьФайл, Элементы.ВложенияСтраницаОтсутствуетФайл);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснованиеСтраницы.ТекущаяСтраница = Элементы.ДокументОснованиеСтраницаОтобразитьДокумент;
		Элементы.ДокументОснование.Ширина = СтрДлина(ТекстДокументОснование);
	Иначе
		Элементы.ДокументОснованиеСтраницы.ТекущаяСтраница = Элементы.ДокументОснованиеСтраницаДобавить;
	КонецЕсли;
	
	Элементы.ТребуетсяПодтверждение.ТолькоПросмотр = НЕ МожноРедактироватьПередаваемыеПараметры;
	Элементы.ТекстВложение.ТолькоПросмотр = НЕ МожноРедактироватьПередаваемыеПараметры;
	Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ МожноРедактироватьПередаваемыеПараметры;
	Элементы.ФормаПеренаправить.Доступность = ЕстьВложения;
	Элементы.ГруппаПодвалСтраницыКомментарии.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(ВсеКомментарии);
	Элементы.ГруппаКомментарииГоризонтальная.Доступность = ЕстьВложения;
	Элементы.СтраницаСопроводительнаяЗаписка.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(СопроводительнаяЗаписка);
	
	Элементы.ФормаОтменитьОтклонение.Видимость = НаправлениеИсходящий;
	
	Если ЭДОтклонен Тогда
		
		Если ЕстьВложения Тогда
			ПричиныОтклонения.Очистить();
			НовСтрока = ПричиныОтклонения.Добавить();
			ПричинаОтклонения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокументСсылка, "ПричинаОтклонения");
			НовСтрока.ПричинаОтклонения = ПричинаОтклонения;
		КонецЕсли;
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.СтраницаОтклонение;
		Элементы.ФормаОтклонить.Доступность = Ложь;
		Элементы.ФормаОтменитьОтклонение.Доступность = (Объект.СтатусДокумента = Перечисления.СтатусыЭД.Отклонен);
	Иначе
		
		ПричиныОтклонения.Очистить();
		Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.СтраницаСтатусов;
		Элементы.ФормаОтклонить.Доступность = ?((СтатусПередан ИЛИ НЕ ЕстьВложения Или ДОЗакрыт), Ложь, Истина);
		Элементы.ФормаОтменитьОтклонение.Доступность = Ложь;
	КонецЕсли;
	
	ЗаголовокПодписи = НСтр("ru='Подписи и статусы';uk='Підписи і статуси'");
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		КоличествоЭП = ЭлектронныйДокументСсылка.ЭлектронныеПодписи.Количество();
		Если КоличествоЭП > 0 Тогда
			ЗаголовокПодписи = СтрЗаменить(НСтр("ru='Подписи и статусы (%1)';uk='Підписи і статуси (%1)'"), "%1", КоличествоЭП);
		КонецЕсли;
	КонецЕсли;
	Элементы.СтраницаПодписиИСтатусы.Заголовок = ЗаголовокПодписи;
	
	Элементы.Организация.ТолькоПросмотр = Не МожноРедактироватьПередаваемыеПараметры;
	Элементы.Контрагент.ТолькоПросмотр  = Не МожноРедактироватьПередаваемыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстЗаголовка = НСтр("ru='Исходящий произвольный документ %1 от %2';uk='Вихідний довільний документ %1 від %2'");
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗаголовка, Объект.Номер, Объект.Дата);
		Иначе
			Заголовок = НСтр("ru='Исходящий произвольный документ (создание)';uk='Вихідний довільний документ (створення)'");
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru='Входящий произвольный документ %1 от %2';uk='Вхідний довільний документ %1 від %2'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка, Объект.Номер, Объект.Дата);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНовыйДокумент(ФлагЗаписи)
	
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	Если ЕстьСоглашение(ОбъектДокумент) И Записать() Тогда
		ФлагЗаписи = Истина;
		ОбновитьИнформациюПодвала();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусДокумента(ПараметрыДокумента)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ПараметрыДокумента.Свойство("МассивНаОтправку") И ПараметрыДокумента.МассивНаОтправку.Количество() > 0 Тогда
		ЭД = ПараметрыДокумента.МассивНаОтправку[0];
		ДокументОбъект.СтатусДокумента = ЭД.СтатусЭД;
	КонецЕсли;
	
	Если ПараметрыДокумента.Свойство("Подписан") И ПараметрыДокумента.Подписан Тогда
		Если ДокументОбъект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
			ДокументОбъект.СтатусДокумента = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокументСсылка);
		Иначе
			ДокументОбъект.СтатусДокумента = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокументСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Если (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД))
		ИЛИ (НЕ СоглашениеОпределялось И ЕстьСоглашение(ДокументОбъект)) Тогда
		ДокументОбъект.Записать();
		ОбновитьИнформациюПодвала();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Прочитать();
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиПЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
	Количество = 0;
	КолПодготовленных = 0;
	КолОтправленных = 0;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("КолОтправленных", КолОтправленных)
			И ТипЗнч(КолОтправленных) = Тип("Число")
			И КолОтправленных > 0 Тогда
			
			ТекстСостояния = НСтр("ru='Отправлено: (%1)';uk='Відправлено: (%1)'");
			Количество = КолОтправленных;
		ИначеЕсли Результат.Свойство("КолПодготовленных", КолПодготовленных)
			И ТипЗнч(КолПодготовленных) = Тип("Число")
			И КолПодготовленных > 0 Тогда
			
			ТекстСостояния = НСтр("ru='Подготовлено к отправке: (%1)';uk='Підготовлено до відправки: (%1)'");
			Количество = КолПодготовленных;
		КонецЕсли;
	КонецЕсли;
	
	Если Количество > 0 Тогда
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, Количество);
		ТекстЗаголовка = НСтр("ru='Обмен электронными документами';uk='Обмін електронними документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
	КонецЕсли;
	
	ОбновитьСтатусДокумента(ДополнительныеПараметры);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаСервере
Функция ЕстьСоглашение(ОбъектДокумент)
	
	ВыводитьСообщение = НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность;
	НастройкиЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДокумент, ВыводитьСообщение);
	СоглашениеОпределялось = Истина;
	Если ЗначениеЗаполнено(НастройкиЭД) Тогда
		ОбъектДокумент.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		СоглашениеЭД = НастройкиЭД.СоглашениеЭД;
		ПрофильНастроекЭДО = НастройкиЭД.ПрофильНастроекЭДО;
		Возврат Истина;
	Иначе
		СоглашениеЭД = Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
		ПрофильНастроекЭДО = Справочники.ПрофилиНастроекЭДО.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьТребуетсяПодтверждениеПоСоглашению()
	
	Требуется = Ложь;
	СпособОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "СпособОбменаЭД");
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(ПрофильНастроекЭДО.СпособОбменаЭД) Тогда
		Требуется = Истина;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|ГДЕ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
		|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД";
		
		Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Требуется = Выборка.ИспользоватьЭП;
		КонецЕсли;
	КонецЕсли;
	ТребуетсяПодтверждение = Требуется;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусСостояниеЭД()
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовЭД(Объект.Ссылка);
	Если ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		ЗначениеВРеквизитФормы(ТаблицаСтатусов, "ТаблицаСостояний");
	КонецЕсли;
	
	ТекстСостоянияЭДО = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСтатусовЭД(ЭД)
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	КартаСтатусовЭД.Колонки.Добавить("Дата");
	КартаСтатусовЭД.Колонки.Добавить("Пользователь");
	
	Если ЭлектронныйДокументСсылка.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
		ИЛИ ЭлектронныйДокументСсылка.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
		Если ЭлектронныйДокументСсылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Получен;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Отклонен;
		Иначе
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Сформирован;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = ЭД.СтатусДокумента;
		КонецЕсли;
		
		КартаСтатусовЭД.ЗаполнитьЗначения(Истина, "Пройден");
		
	Иначе
		ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД);
		
		Если Объект.Ссылка.Пустая() ИЛИ ЭД.СтатусДокумента = Перечисления.СтатусыЭД.Сформирован Тогда
			ПризнакПройден = ЗначениеЗаполнено(ЭлектронныйДокументСсылка) И НЕ Модифицированность;
		Иначе
			ПризнакПройден = Истина;
		КонецЕсли;
		Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл
			ТекСтрока.Пройден = ПризнакПройден;
			
			Если ТекСтрока.Статус = Перечисления.СтатусыЭД.Утвержден
				И (ЭД.СтатусДокумента = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусДокумента = Перечисления.СтатусыЭД.ОтклоненПолучателем) Тогда
				ТекСтрока.Статус = Перечисления.СтатусыЭД.Отклонен;
				Прервать;
			КонецЕсли;
			Если ЭД.СтатусДокумента = ТекСтрока.Статус Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус = Статус;
	НовСтрока.Пройден = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД)
	
	ПараметрыЭД = Новый Структура();
	ПараметрыЭД.Вставить("ВидЭД",               Перечисления.ВидыЭД.ПроизвольныйЭД);
	ПараметрыЭД.Вставить("НаправлениеЭД",       Объект.Направление);
	ПараметрыЭД.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия20);
	ПараметрыЭД.Вставить("Организация",         Объект.Организация);
	ПараметрыЭД.Вставить("Контрагент",          Объект.Контрагент);
	ПараметрыЭД.Вставить("СоглашениеЭД",        СоглашениеЭД);
	
	НастройкиСтатусов = Новый ТаблицаЗначений;
	НастройкиСтатусов.Колонки.Добавить("СпособОбмена");
	НастройкиСтатусов.Колонки.Добавить("Направление");
	НастройкиСтатусов.Колонки.Добавить("ВидЭД");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьПодпись");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьКвитанции");
	НастройкиСтатусов.Колонки.Добавить("ИспользуетсяНесколькоПодписей");
	НастройкиСтатусов.Колонки.Добавить("ВерсияРегламентаЭДО");
	НастройкиСтатусов.Колонки.Добавить("ТребоватьПодтверждения");
	ИспользуетсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеПодписиЭД");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидЭД",           ПараметрыЭД.ВидЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД",   ПараметрыЭД.НаправлениеЭД);
	Запрос.УстановитьПараметр("Контрагент",      ПараметрыЭД.Контрагент);
	Запрос.УстановитьПараметр("Организация",     ПараметрыЭД.Организация);
	Запрос.УстановитьПараметр("ИспользуетсяЭП",  ИспользуетсяЭП);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ИспользуетсяЭП
		|			ТОГДА Соглашение.ИспользоватьПодпись
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользоватьПодпись,
		|	Соглашение.ИспользоватьКвитанции,
		|	Соглашение.ВидЭД,
		|	Соглашение.Направление,
		|	Соглашение.СпособОбмена,
		|	Соглашение.ВерсияФорматаПакета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИСТИНА КАК ИспользоватьПодпись,
		|		ИСТИНА КАК ИспользоватьКвитанции,
		|		ВЫБОР
		|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|		КОНЕЦ КАК Направление,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбмена,
		|		0 КАК Приоритет,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|		И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления) КАК Соглашение";
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		НоваяСтрока = НастройкиСтатусов.Добавить();
		НоваяСтрока.СпособОбмена          = Результат.СпособОбмена;
		НоваяСтрока.Направление           = Результат.Направление;
		НоваяСтрока.ВидЭД                 = Результат.ВидЭД;
		НоваяСтрока.ИспользоватьПодпись   = Результат.ИспользоватьПодпись;
		НоваяСтрока.ИспользоватьКвитанции = Результат.ИспользоватьКвитанции;
		НоваяСтрока.ТребоватьПодтверждения = ТребуетсяПодтверждение;

		НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
	КонецЕсли;
	
	Если НастройкиСтатусов.Количество() > 0 Тогда
		УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов)
	
	МассивСтатусов = ОбменСКонтрагентамиСлужебный.ВернутьМассивСтатусовЭД(НастройкиСтатусов);
	Для Каждого Элемент Из МассивСтатусов Цикл
		ДобавитьСтатус(КартаСтатусовЭД, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПодвала()
	
	ОбновитьСтатусСостояниеЭД();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД)) Тогда
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ЕстьСоглашение = ЕстьСоглашение(ДокументОбъект);
		Иначе
			ЕстьСоглашение = Истина;
		КонецЕсли;
		ЗаполнитьТаблицуЭП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	ТекущийСтатус = ?(ЭДОтклонен, Перечисления.СтатусыЭД.Отклонен, Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров = Новый Структура("СтатусЭД", ТекущийСтатус);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокументСсылка, СтруктураПараметров, Ложь);
	Объект.СтатусДокумента = ТекущийСтатус;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	КонецЕсли;
	
	ЗаполнитьТаблицуЭП();
	ОбновитьСтатусСостояниеЭД();
	ПерезаполнитьКомментарии();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭД(Результат, Отклонить = Ложь) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеОтклоненияЭД", ЭтотОбъект);
	ПараметрыЭД = Новый Структура("Организация, Отклонить, ОписаниеОповещения",
		Объект.Организация, Отклонить, ОписаниеОповещения);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(ЭлектронныйДокументСсылка, ПараметрыЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеОтклоненияЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЭДОтклонен = Истина;
		ИзменитьСтатусОтклонить();
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПроверкуЗаписиДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ФлагЗаписи = Ложь;
		ЗаписатьНовыйДокумент(ФлагЗаписи);
		Если ФлагЗаписи Тогда
			ОбработкаПродолжения = "";
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("ИмяПроцедуры", ОбработкаПродолжения)
				И ТипЗнч(ОбработкаПродолжения) = Тип("ОписаниеОповещения") Тогда
				ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаписьДокумента(Неопределен, ОбработкаПродолжения) Экспорт
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru='Для продолжения операции необходимо записать документ.
            |Записать документ?'
            |;uk='Для продовження операції необхідно записати документ.
            |Записати документ?'");
		ДопПараметры = Новый Структура("ИмяПроцедуры", ОбработкаПродолжения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПроверкуЗаписиДокумента", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменуОтклоненияЭД(Неопределен, ДополнительныеПараметры) Экспорт
	
	Если ОтменитьОтклонениеНаСервере() Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтменитьОтклонениеНаСервере()
	
	ЭДОтклонен = Ложь;
	ЭлектронныйДокумент = ЭлектронныйДокументСсылка.ПолучитьОбъект();
	ЭлектронныйДокумент.ПричинаОтклонения = "";
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		ЭлектронныйДокумент.ЭлектронныеПодписи.Очистить();
	КонецЕсли;
	ЭлектронныйДокумент.Записать();
	ИзменитьСтатусОтклонить();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПеренаправлениеЭД(Неопределен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ЭлектронныйДокументСсылка);
		ОбменСКонтрагентамиСлужебныйКлиент.ИзменитьОтветственного(МассивЭД, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВсеКомментарии = "";
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
			|	ЖурналСобытийЭД.Дата КАК Дата,
			|	ЖурналСобытийЭД.СтатусЭД,
			|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
			|	ЖурналСобытийЭД.Комментарий
			|ИЗ
			|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
			|ГДЕ
			|	ЖурналСобытийЭД.ВладелецЭД = &Ссылка
			|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ШаблонКомментария = НСтр("ru='%1, %2 (статус - %3, ответственный - %4):
            |%5'
            |;uk='%1, %2 (статус - %3, відповідальний - %4):
            |%5'");
		ПредыдущийКоммент = "";
		ПервыйКоммент = Истина;
		Массив = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ТекущийКоммент = СокрЛП(Выборка.Комментарий);
			Если ПредыдущийКоммент = ТекущийКоммент Тогда
				Продолжить;
			КонецЕсли;
			ПредыдущийКоммент = ТекущийКоммент;
			СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
					Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКоммент);
			Массив.Добавить(СтрокаКомментария);
			ПервыйКоммент = Ложь;
		КонецЦикла;
		Если Массив.Количество() > 0 Тогда
			ПервыйКоммент = Истина;
			Для Сч = -Массив.Количество() + 1 По 0 Цикл
				СтрокаКомментария = Массив[-Сч];
				ВсеКомментарии = ВсеКомментарии
					+ СтрокаКомментария
					+ ?(ПервыйКоммент, Символы.ПС + "------------------------------------", "")
					+ Символы.ПС
					+ Символы.ПС;
				ПервыйКоммент = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("Описание") И ЗначениеЗаполнено(Ссылка.Ответственный) Тогда
		СтруктураПараметров.Вставить("Ответственный", Ссылка.Ответственный);
	КонецЕсли;
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

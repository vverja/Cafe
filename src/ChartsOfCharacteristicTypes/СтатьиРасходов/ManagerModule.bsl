#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВариантРаспределенияРасходов");
	Результат.Добавить("ТипЗначенияНаНаправленияДеятельности; ТипЗначенияНаНаправленияДеятельности");
	Результат.Добавить("ТипЗначенияНаСебестоимостьТоваров; ТипЗначенияНаСебестоимостьТоваров");
	Результат.Добавить("ТипЗначенияНаРасходыБудущихПериодов; ТипЗначенияНаРасходыБудущихПериодов");
	Результат.Добавить("ТипЗначенияНаПроизводственныеЗатраты; ТипЗначенияНаПроизводственныеЗатраты");
	Результат.Добавить("ТипЗначенияНеРаспределять; ТипЗначенияНеРаспределять");
	Результат.Добавить("ВидЦенности; ВидЦенности");
	Результат.Добавить("СтатьяРасходов");
	Результат.Добавить("СчетУчета");
	Результат.Добавить("ВидАктива");
	Результат.Добавить("ВидРасходов");
	Результат.Добавить("ВидПрочихРасходов");
	Результат.Добавить("ВидРБП");
	Результат.Добавить("РасходыНаРемонтОС");
	Результат.Добавить("СчетУчета8Класс");
	Результат.Добавить("СебестоимостьРеализации");

	Возврат Результат;
	
КонецФункции

// Функция определяет реквизиты выбранной статьи расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов
//
// Возвращаемое значение:
//	Структура - реквизиты статьи расходов
//
Функция ПолучитьРеквизитыСтатьиРасходов(Знач СтатьяРасходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.СпособРаспределенияПоНаправлениямДеятельности КАК СпособРаспределения,
	|	СтатьиРасходов.ТипЗначения КАК ТипЗначения,
	|	СтатьиРасходов.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка = &СтатьяРасходов
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СпособРаспределения = Выборка.СпособРаспределения;
		ТребуетсяСпособРаспределения = Не Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НаправленияДеятельности"));
		ТипЗначения = Выборка.ТипЗначения;
		СтатьяРасходовРаспределение = Выборка.СтатьяРасходов;
	Иначе
		СпособРаспределения = Справочники.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка();
		ТребуетсяСпособРаспределения = Ложь;
		ТипЗначения = Неопределено;
		СтатьяРасходовРаспределение = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("СпособРаспределения, ТребуетсяСпособРаспределения, ТипЗначения, СтатьяРасходов",
		СпособРаспределения,
		ТребуетсяСпособРаспределения,
		ТипЗначения,
		СтатьяРасходовРаспределение);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция определяет правило распределения на себестоимость товаров для статьи расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПравилаРаспределенияНаСебестоимостьТоваров - правило распределения статьи расходов
//
Функция ПолучитьПравилоРаспределения(СтатьяРасходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка = &СтатьяРасходов
	|	И СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПравилоРаспределения = Выборка.ПравилоРаспределения;
	Иначе
		ПравилоРаспределения = Неопределено;
	КонецЕсли;
	
	Возврат ПравилоРаспределения;

КонецФункции

// Функция определяет аналитику расходов для подстановки в документ по статье расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов
//	Объект - ДанныеФормыСтруктура - Текущий объект 
//
// Возвращаемое значение:
//	СправочникСсылка, ДокументСсылка - значение аналитики расходов
//
Функция ПолучитьАналитикуРасходовПоУмолчанию(СтатьяРасходов, Объект) Экспорт
	
	ОписаниеТипов = Новый ОписаниеТипов(СтатьяРасходов.ТипЗначения);
	АналитикаРасходов = ОписаниеТипов.ПривестиЗначение();
	
	Если СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады")
	   И Объект.Свойство("Склад") Тогда
	   
		АналитикаРасходов = Объект.Склад;
	   
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику")
		И Объект.Свойство("ЗаказПоставщику") Тогда
		
		АналитикаРасходов = Объект.ЗаказПоставщику;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		АналитикаРасходов = Объект.Ссылка;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Партнеры")
		И Объект.Свойство("Партнер") Тогда
		
		АналитикаРасходов = Объект.Партнер;	
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации")
	   И Объект.Свойство("Организация") Тогда
	   
		АналитикаРасходов = Объект.Организация;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")
	   И Объект.Свойство("Подразделение") Тогда
	   
		АналитикаРасходов = Объект.Подразделение;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")
		И Объект.Свойство("ПодотчетноеЛицо") Тогда
		
		АналитикаРасходов = Объект.ПодотчетноеЛицо;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Кассы")
		И Объект.Свойство("Касса") Тогда
		
		АналитикаРасходов = Объект.Касса;
		
	ИначеЕсли СтатьяРасходов.АналитикаРасходовЗаказРеализация Тогда
		АналитикаРасходов =  Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат АналитикаРасходов;
	
КонецФункции

// Процедура заполняет список хозяйственных операций, для которых используется
// ограничение отбора статьей расходов.
//
// Параметры:
//	СписокОпераций - СписокЗначений - Список хозяйственных операций и их представлений
//
Процедура ЗаполнитьСписокХозяйственныхОпераций(СписокОпераций, ВариантРаспределенияРасходов = Неопределено) Экспорт
	
	СписокОпераций.Очистить();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.АвансовыйОтчет, НСтр("ru='Прочие расходы подотчетного лица';uk='Інші витрати підзвітної особи'"));
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, НСтр("ru='Услуги сторонних организаций';uk='Послуги сторонніх організацій'"));
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы, НСтр("ru='Выдача денежных средств на прочие расходы';uk='Видача грошових коштів на інші витрати'"));
	
	Если ВариантРаспределенияРасходов <> Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, НСтр("ru='Внутреннее потребление товаров';uk='Внутрішнє споживання товарів'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваров, НСтр("ru='Изменение стоимости испорченного товара';uk='Зміна вартості зіпсованого товару'"));
		КонецЕсли;
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПересортицаТоваров, НСтр("ru='Изменение стоимости при пересортице';uk='Зміна вартості при пересортиці'"));
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваров, НСтр("ru='Списания недостач товаров';uk='Списання нестач товарів'"));
	КонецЕсли;
	
	Если ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
	 ИЛИ ВариантРаспределенияРасходов = Неопределено Тогда
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности, НСтр("ru='Списание задолженности партнеров';uk='Списання заборгованості партнерів'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга, НСтр("ru='Эквайринговая комиссия';uk='Еквайрингова комісія'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит проверку заполнения реквизитов аналитик статей расходов в переданном объекте
//
// Параметры:
// 		Объект - СправочникОбъект, ДокументОбъект, ДанныеФормыСтруктура - Объект ИБ предназначенный для проверки
// 		Реквизиты - Строка, Структура, Массив - Реквизиты статей расходов для проверки
// 			<Строка> Перечисление пар реквизитов для проверки в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 				Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
// 			<Структура> Ключ: Строка с именем табличной части; Значение - Строка в нотации как у параметра типа <Строка>
// 			<Массив> Массив, элементы которого либо структуры в нотации как у параметра с типа <Структура>, либо строки в нотации <Строка>
// 		НепроверяемыеРеквизиты - Массив - Массив для накопления не проверяемых реквизитов переданного объекта
// 		Отказ - Булево - Признак наличия ошибок заполнения аналитик расходов переданного объекта
// 		ДополнительныеПараметры - Структура - При наличии свойства "ПрограммнаяПроверка", ошибки записываются в эту структуру, пользователю не выводятся
//
Процедура ПроверитьЗаполнениеАналитик(Объект, Реквизиты = "", НепроверяемыеРеквизиты = Неопределено, Отказ = Ложь,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Ошибки = Новый Структура;
	Ошибки.Вставить("СписокОшибок", Новый Массив);
	Ошибки.Вставить("ГруппыОшибок", Новый Соответствие);
	Ошибки.Вставить("ПрефиксОбъекта", ?(ТипЗнч(Объект)=Тип("УправляемаяФорма"), "", "Объект."));
	
	МассивОбработки = Новый Массив;
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		МассивОбработки = Реквизиты;
	Иначе
		МассивОбработки.Добавить(Реквизиты);
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивОбработки Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			ПроверкаЗаполненияАналитикТЧОбъекта(Объект, ЭлементМассива, НепроверяемыеРеквизиты, Ошибки);
		Иначе
			ПроверкаЗаполненияАналитикОбъекта(Объект, ЭлементМассива, НепроверяемыеРеквизиты, Ошибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПрограммнаяПроверка") Тогда
		ДополнительныеПараметры.Вставить("Ошибки", Ошибки);
	Иначе
		Если Ошибки.СписокОшибок.Количество() <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение условного оформления формы
//
// Параметры:
// 		УсловноеОФормление - УсловноеОформлениеКомпоновкиДанных - Условное оформление формы объекта
// 		Реквизиты - Строка, Структура, Массив - Реквизиты статей расходов и их аналитик для оформления
// 			<Строка> Перечисление пар реквизитов в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 				Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
// 			<Структура> Ключ: Строка с именем табличной части; Значение - Строка в нотации как у параметра типа <Строка>
// 			<Массив> Массив, элементы которого либо структуры в нотации как у параметра с типа <Структура>, либо строки в нотации <Строка>
// 		ФормаОбъекта - Булево - Признак формы объекта ИБ
//
Процедура УстановитьУсловноеОформлениеАналитик(УсловноеОФормление, Реквизиты = "", ФормаОбъекта = Истина) Экспорт
	
	МассивОбработки = Новый Массив;
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		МассивОбработки = Реквизиты;
	Иначе
		МассивОбработки.Добавить(Реквизиты);
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивОбработки Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			
			Для Каждого КлючИЗначение Из ЭлементМассива Цикл
				
				СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(КлючИЗначение.Значение);
				УстановитьУсловноеОформление(УсловноеОформление, СтруктураРеквизитов, КлючИЗначение.Ключ, ФормаОбъекта)
				
			КонецЦикла;
			
		Иначе
			
			СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(ЭлементМассива);
			УстановитьУсловноеОформление(УсловноеОформление, СтруктураРеквизитов, , ФормаОбъекта)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения колонок "АналитикаРасходовЗаказРеализация" в формах.
// Параметры:
// 		ТаблицаФормы - ДанныеФормыКоллекция
// 		Реквизиты - Строка, Структура - описание реквизитов для заполнения
// 			Перечисление пар реквизитов в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 			Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
//
Процедура ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(ТаблицаФормы, Реквизиты = "") Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки%ПоляСтатей%
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|//////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки%ПоляФлагов%
	|ИЗ
	|	Таблица КАК Таблица%ПоляСоединений%
	|");
	
	ШаблонСтатьи = ",
	|	Таблица.%ИмяСтатьи% КАК %ИмяСтатьи%";
	ШаблонФлага = ",
	|	ЕСТЬNULL(ПВХ%ИмяСтатьи%.АналитикаРасходовЗаказРеализация, ЛОЖЬ) КАК %ИмяАналитики%";
	ШаблонСоединения = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХ%ИмяСтатьи%
	|		ПО Таблица.%ИмяСтатьи% = ПВХ%ИмяСтатьи%.Ссылка";
	
	ПоляСтатей = "";
	ПоляФлагов = "";
	ПоляСоединений ="";
	
	СтруктураРеквизитов = РеквизитыКзаполнению(Реквизиты);
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ПоляСтатей = ПоляСтатей + СтрЗаменить(ШаблонСтатьи, "%ИмяСтатьи%", КлючИЗначение.Ключ);
		ПоляФлагов = ПоляФлагов + СтрЗаменить(СтрЗаменить(ШаблонФлага, "%ИмяАналитики%", КлючИЗначение.Значение), "%ИмяСтатьи%", КлючИЗначение.Ключ);
		ПоляСоединений = ПоляСоединений + СтрЗаменить(ШаблонСоединения, "%ИмяСтатьи%", КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСтатей%", ПоляСтатей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляФлагов%", ПоляФлагов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСоединений%", ПоляСоединений);
	
	Запрос.УстановитьПараметр(
		"Таблица",
		ТаблицаФормы.Выгрузить(,"НомерСтроки, " + ?(ПустаяСтрока(Реквизиты), "СтатьяРасходов", Реквизиты)));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаФормы[Выборка.НомерСтроки-1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения колонок "АналитикаРасходовОбязательна" в формах.
// Параметры:
// 		ТаблицаФормы - ДанныеФормыКоллекция
// 		Реквизиты - Строка, Структура - описание реквизитов для заполнения
// 			Перечисление пар реквизитов в формате "СтатьяРаходов1, АналитикаРасходов1, СтатьяРаходов2, АналитикаРасходов2, ..."
// 			Пустая строка трактуется как "СтатьяРасходов, АналитикаРасходов"
//
Процедура ЗаполнитьПризнакАналитикаРасходовОбязательна(ТаблицаФормы, Реквизиты = "") Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки%ПоляСтатей%
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица;
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки%ПоляФлагов%
	|ИЗ
	|	Таблица КАК Таблица%ПоляСоединений%";
	
	ШаблонСтатьи = ",
	|	Таблица.%ИмяСтатьи% КАК %ИмяСтатьи%";
	ШаблонФлага = ",
	|	ЕСТЬNULL(ПВХ%ИмяСтатьи%.КонтролироватьЗаполнениеАналитики, ЛОЖЬ) КАК %ИмяАналитики%Обязательна";
	ШаблонСоединения = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХ%ИмяСтатьи%
	|		ПО Таблица.%ИмяСтатьи% = ПВХ%ИмяСтатьи%.Ссылка";
	
	ПоляСтатей = "";
	ПоляФлагов = "";
	ПоляСоединений ="";
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(Реквизиты);
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ПоляСтатей = ПоляСтатей + СтрЗаменить(ШаблонСтатьи, "%ИмяСтатьи%", КлючИЗначение.Ключ);
		ПоляФлагов = ПоляФлагов + СтрЗаменить(СтрЗаменить(ШаблонФлага, "%ИмяАналитики%", КлючИЗначение.Значение), "%ИмяСтатьи%", КлючИЗначение.Ключ);
		ПоляСоединений = ПоляСоединений + СтрЗаменить(ШаблонСоединения, "%ИмяСтатьи%", КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСтатей%", ПоляСтатей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляФлагов%", ПоляФлагов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляСоединений%", ПоляСоединений);
	
	Запрос.УстановитьПараметр(
		"Таблица",
		ТаблицаФормы.Выгрузить(,"НомерСтроки, " + ?(ПустаяСтрока(Реквизиты), "СтатьяРасходов, АналитикаРасходов", Реквизиты)));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаФормы[Выборка.НомерСтроки-1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры


// Возвращает статьи расходов, использование которых запрещено
//
// Возвращаемое значение:
// 	ЗаблокированныеСтатьи - СписокЗначений - Список заблокированных статей расходов
//
Функция ЗаблокированныеСтатьиРасходов() Экспорт
	
	ЗаблокированныеСтатьи = Новый СписокЗначений;
	ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам);
    КонецЕсли;
    Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
        ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РаспределениеНачальныхОстатковНЗП);
		ЗаблокированныеСтатьи.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.АмортизацияВременнойРазницы2020);
    КонецЕсли;
	
	Возврат ЗаблокированныеСтатьи;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТВызовСервера.ОбработкаПолученияДанныхВыбораПВХСтатьиРасходов(ДанныеВыбора, Параметры, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииЗаполненияАналитик

Функция ОбязательныеСтатьи(МассивСтатей)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статьи.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.Ссылка В (&МассивСтатей)
	|	И Статьи.КонтролироватьЗаполнениеАналитики");
	
	Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитов(СтрокаРеквизитов, НепроверяемыеРеквизиты = Неопределено, ПрефиксТабличнойЧасти = "")
	
	Если ПустаяСтрока(СтрокаРеквизитов) Тогда
		Если НепроверяемыеРеквизиты <> Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + "АналитикаРасходов");
		КонецЕсли;
		Возврат Новый Структура("СтатьяРасходов", "АналитикаРасходов");
	КонецЕсли;
	
	СтруктураОбработки = Новый Структура(СтрокаРеквизитов);
	СтруктураВозврата = Новый Структура;
	ПредыдущийКлюч = Неопределено;
	Для Каждого КлючИЗначение Из СтруктураОбработки Цикл
		Если ПредыдущийКлюч = Неопределено Тогда
			ПредыдущийКлюч = КлючИЗначение.Ключ;
		Иначе
			СтруктураВозврата.Вставить(ПредыдущийКлюч, КлючИЗначение.Ключ);
			ПредыдущийКлюч = Неопределено;
			Если НепроверяемыеРеквизиты <> Неопределено Тогда
				НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция РеквизитыКзаполнению(СтрокаРеквизитов, НепроверяемыеРеквизиты = Неопределено, ПрефиксТабличнойЧасти = "")
	
	Если ПустаяСтрока(СтрокаРеквизитов) Тогда
		Если НепроверяемыеРеквизиты <> Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + "АналитикаРасходовЗаказРеализация");
		КонецЕсли;
		Возврат Новый Структура("СтатьяРасходов", "АналитикаРасходовЗаказРеализация");
	КонецЕсли;
	
	СтруктураОбработки = Новый Структура(СтрокаРеквизитов);
	СтруктураВозврата = Новый Структура;
	ПредыдущийКлюч = Неопределено;
	Для Каждого КлючИЗначение Из СтруктураОбработки Цикл
		Если ПредыдущийКлюч = Неопределено Тогда
			ПредыдущийКлюч = КлючИЗначение.Ключ;
		Иначе
			СтруктураВозврата.Вставить(ПредыдущийКлюч, КлючИЗначение.Ключ);
			ПредыдущийКлюч = Неопределено;
			Если НепроверяемыеРеквизиты <> Неопределено Тогда
				НепроверяемыеРеквизиты.Добавить(ПрефиксТабличнойЧасти + КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПроверкаЗаполненияАналитикОбъекта(Объект, Реквизиты, НепроверяемыеРеквизиты, Ошибки)
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(Реквизиты, НепроверяемыеРеквизиты);
	МассивСтатей = Новый Массив;
	
	// Определим список статей для контроля
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Статья = Объект[КлючИЗначение.Ключ];
		
		Если ЗначениеЗаполнено(Статья) Тогда
			МассивСтатей.Добавить(Статья);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим заполнение аналитики
	ОбязательныеСтатьи = ОбязательныеСтатьи(МассивСтатей);
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Статья = Объект[КлючИЗначение.Ключ];
		Аналитика = Объект[КлючИЗначение.Значение];
		
		Если Не (ОбязательныеСтатьи.Найти(Статья) = Неопределено Или ЗначениеЗаполнено(Аналитика)) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				Ошибки.ПрефиксОбъекта + КлючИЗначение.Значение,
				НСтр("ru='Аналитика расходов не заполнена';uk='Аналітика витрат не заповнена'"), "");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияАналитикТЧОбъекта(Объект, Реквизиты, НепроверяемыеРеквизиты, Ошибки)
	
	// Определим список статей для контроля
	ОбщийМассивСтатей = Новый Массив;
	Для Каждого ОписаниеТЧ Из Реквизиты Цикл
		
		ИмяТЧ = ОписаниеТЧ.Ключ;
		
		СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(ОписаниеТЧ.Значение, НепроверяемыеРеквизиты, ИмяТЧ + ".");
		
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			
			МассивСтатей = Объект[ИмяТЧ].ВыгрузитьКолонку(КлючИЗначение.Ключ);
			Для Каждого Статья из МассивСтатей Цикл
				ОбщийМассивСтатей.Добавить(Статья);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверим заполнение аналитики
	ОбязательныеСтатьи = ОбязательныеСтатьи(ОбщийМассивСтатей);
	Для Каждого ОписаниеТЧ Из Реквизиты Цикл // Табличные части
		
		ИмяТЧ = ОписаниеТЧ.Ключ;
		ТЧ = Объект[ИмяТЧ];
		
		СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(ОписаниеТЧ.Значение, Неопределено, ИмяТЧ + ".");
		
		Для Индекс = 0 По ТЧ.Количество() - 1 Цикл // Строки табличной части
			
			СтрокаТЧ = ТЧ[Индекс];
			
			Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
				
				Статья = СтрокаТЧ[КлючИЗначение.Ключ];
				Аналитика = СтрокаТЧ[КлючИЗначение.Значение];
				
				Если Не (ОбязательныеСтатьи.Найти(Статья) = Неопределено Или ЗначениеЗаполнено(Аналитика)) Тогда
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						Ошибки.ПрефиксОбъекта + ИмяТЧ + "[%1]." + КлючИЗначение.Значение,
						НСтр("ru='Не заполнена аналитика расходов';uk='Не заповнена аналітика витрат'"),
						ИмяТЧ,
						Индекс,
						НСтр("ru='Не заполнена аналитика расходов в строке %1';uk='Не заповнена аналітика витрат у рядку %1'"));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(УсловноеОформление, СтруктураРеквизитов, ИмяТабличнойЧасти = "", ФормаОбъекта)
	
	ПревиксТЧ = ?(ПустаяСтрока(ИмяТабличнойЧасти), "", ИмяТабличнойЧасти + ".");
	ПрефиксАналитики = ?(ФормаОбъекта, "Объект.", "") + ПревиксТЧ;
	ПрефиксКонтроля  = ?(ФормаОбъекта И Не ПустаяСтрока(ПревиксТЧ), "Объект.", "") + ПревиксТЧ;
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяАналитики = КлючИЗначение.Значение;
		ИмяКонтроля = ИмяАналитики + "Обязательна";
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТабличнойЧасти + ИмяАналитики);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксКонтроля + ИмяКонтроля);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяАналитики);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксКонтроля + ИмяКонтроля);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПрефиксАналитики + ИмяАналитики);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПредопределенныеСтатьиРасходов() Экспорт
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы);	
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные);	
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ЗатратыПриПокупкеИПродажеИностраннойВалюты);
    МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриПерерасчетеПропорциональногоНДС);
    МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.РаспределениеНачальныхОстатковНЗП);
	 МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.АмортизацияВременнойРазницы2020);
	
	Для Каждого СтатьяРасходов Из МассивСтатей Цикл
		
		Если Не ЗначениеЗаполнено(СтатьяРасходов.ВариантРаспределенияРасходов) Тогда
			
			СтатьяРасходовОбъект = СтатьяРасходов.ПолучитьОбъект();
			Если СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы ИЛИ 
					СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.КурсовыеРазницыНеоперационные  Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.АналитикаКурсовыхРазниц");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НачисленныйНДСПриВыкупеМногооборотнойТары Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ФормированиеРезервовПоСомнительнымДолгам Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
					СтатьяРасходовОбъект.Наименование = НСтр("ru='Прочие расходы';uk='Інші витрати'");;
				КонецЕсли;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриПерерасчетеПропорциональногоНДС Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.РаспределениеНачальныхОстатковНЗП Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПрочиеРасходы");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты;
			ИначеЕсли СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.АмортизацияВременнойРазницы2020 Тогда
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять;
			Иначе
				СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
				СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
				
			КонецЕсли;
			СтатьяРасходовОбъект.ДополнительныеСвойства.Вставить("ИзменениеКлючевыхРеквизитов", Истина);

			Попытка
				СтатьяРасходовОбъект.Записать();
			Исключение
			КонецПопытки;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления УТ 11.1.9
// Для статей с типом значения "Заказ клиента"
// производит расширение типа данного поля
// на документы реализаций
Процедура ИзменитьТипЗаказ() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СтатьиРасходов.ТипЗначения) = ТИП(Документ.ЗаказКлиента)
	|	И НЕ СтатьиРасходов.АналитикаРасходовЗаказРеализация
	|");
	
	ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.АктВыполненныхРабот,
										|ДокументСсылка.РеализацияТоваровУслуг,
										|ДокументСсылка.РеализацияУслугПрочихАктивов,
										|ДокументСсылка.ЗаказКлиента
										|");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтатьяОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтатьяОбъект.ТипЗначения = ТипЗначения;
		СтатьяОбъект.АналитикаРасходовЗаказРеализация = Истина;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтатьяОбъект);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры



// Обработчик обновления УТ 3.2.10
// Заполняет статью расходов "Распределение начальных остатков НЗП" 
Процедура ЗаполнитьСтатьяРасходовРаспределениеНачальныхОстатковНЗП() Экспорт
	
	Объект = ПланыВидовХарактеристик.СтатьиРасходов.РаспределениеНачальныхОстатковНЗП.ПолучитьОбъект();
    Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты;
    Объект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПрочиеРасходы");
    
	Объект.ДополнительныеСвойства.Вставить("ИзменениеКлючевыхРеквизитов", Ложь);
    
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	
КонецПроцедуры

// Обработчик обновления УТ 3.2.10
// Заполняет статью расходов "Расходы при перерасчете пропорционального НДС" 
Процедура ЗаполнитьСтатьяРасходовРасходыПриПерерасчетеПропорциональногоНДС() Экспорт
	
	Объект = ПланыВидовХарактеристик.СтатьиРасходов.РасходыПриПерерасчетеПропорциональногоНДС.ПолучитьОбъект();
    Если Не ЗначениеЗаполнено(Объект.ВариантРаспределенияРасходов) Тогда
        Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
        Объект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");

        Объект.ДополнительныеСвойства.Вставить("ИзменениеКлючевыхРеквизитов", Ложь);

        ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
    КонецЕсли;    
	
КонецПроцедуры


// Обработчик обновления УТ 3.2.17
// Заполняет статью расходов "Амортизация временной разницы, возникшей по результатам инвентаризации ОС в 2020 г." 
Процедура ЗаполнитьСтатьяРасходовАмортизацияВременнойРазницы2020() Экспорт
	
	Объект = ПланыВидовХарактеристик.СтатьиРасходов.АмортизацияВременнойРазницы2020.ПолучитьОбъект();
    Объект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять;
    Объект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
    
	Объект.ДополнительныеСвойства.Вставить("ИзменениеКлючевыхРеквизитов", Ложь);
    
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли

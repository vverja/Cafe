
#Область СлужебныеПроцедурыИФункции

#Область Серии

Процедура ДобавитьКолонкиДополнительныхРеквизитов(ВладелецСвойств, Форма, РеквизитТаблица, ЭлементТаблица, ВставитьПередЭлементом = "", ТолькоПросмотр = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ПриведенноеИмяТаблицы = СтрЗаменить(РеквизитТаблица,".","_");
	ИмяОписания = ПриведенноеИмяТаблицы + "Свойства_ОписаниеДополнительныхРеквизитов";
	ИмяНаборов  = ПриведенноеИмяТаблицы + "Свойства_НаборыДополнительныхРеквизитовОбъекта";
	
	Переинициализация = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, ИмяОписания); 
	
	НаборыСвойствОбъектаТаблица = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ВладелецСвойств, Неопределено);
	НаборыСвойствОбъектаСписок = Новый СписокЗначений;
	
	Для каждого Строка Из НаборыСвойствОбъектаТаблица Цикл
		Если УправлениеСвойствамиСлужебный.ВидыСвойствНабора(Строка.Набор).ДополнительныеРеквизиты Тогда
			НаборыСвойствОбъектаСписок.Добавить(Строка.Набор, Строка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Если Переинициализация Тогда
		Если ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(НаборыСвойствОбъектаСписок,
																Форма[ИмяНаборов]) Тогда
			//Уже все инициализировано
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УдаляемыеРеквизитыКолонки = Новый Массив;
	
	Если Не Переинициализация Тогда
		Реквизиты = Новый Массив;
		
		// Создание служебных реквизитов формы
		// Добавление реквизита содержащего используемые наборы дополнительных реквизитов.
		Реквизиты.Добавить(Новый РеквизитФормы(
		ИмяНаборов, Новый ОписаниеТипов("СписокЗначений")));
		
		
		// Добавление реквизита описания создаваемых реквизитов и элементов формы.
		Реквизиты.Добавить(Новый РеквизитФормы(
		ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		
		Реквизиты.Добавить(Новый РеквизитФормы(
		"ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ИмяОписания));
		
		Реквизиты.Добавить(Новый РеквизитФормы(
		"Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
		ИмяОписания));
		
		Реквизиты.Добавить(Новый РеквизитФормы(
		"ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"), ИмяОписания));
		
		Реквизиты.Добавить(Новый РеквизитФормы(
		"МногострочноеПолеВвода", Новый ОписаниеТипов("Число"), ИмяОписания));
		
		Реквизиты.Добавить(Новый РеквизитФормы(
		"Удалено", Новый ОписаниеТипов("Булево"), ИмяОписания));
		
		Реквизиты.Добавить(Новый РеквизитФормы(
		"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ИмяОписания));
		
		Реквизиты.Добавить(Новый РеквизитФормы(
		"Наименование", Новый ОписаниеТипов("Строка"), ИмяОписания));
			
		Форма.ИзменитьРеквизиты(Реквизиты);
		
	Иначе
		
		ОписаниеСвойств = УправлениеСвойствамиСлужебный.ПолучитьТаблицуЗначенийСвойств(
			ВладелецСвойств.ДополнительныеРеквизиты.Выгрузить(),
			Форма[ИмяНаборов],
			Ложь);
			
		Для каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
			ИмяРеквизитаЗначение = ПриведенноеИмяТаблицы +
			    "ДополнительныйРеквизитЗначение_"+
				СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Набор.УникальныйИдентификатор())), "-", "x")
				+ "_"
				+ СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Свойство.УникальныйИдентификатор())), "-", "x");			
			
			УдаляемыеРеквизитыКолонки.Добавить(РеквизитТаблица + "." + ИмяРеквизитаЗначение);	
			Форма.Элементы.Удалить(Форма.Элементы[ИмяРеквизитаЗначение]);
			
		КонецЦикла;
		
	КонецЕсли;
		
	// Сформируем колонки
	Форма[ИмяНаборов] = НаборыСвойствОбъектаСписок;
		
	ОписаниеСвойств = УправлениеСвойствамиСлужебный.ПолучитьТаблицуЗначенийСвойств(
		ВладелецСвойств.ДополнительныеРеквизиты.Выгрузить(),
		Форма[ИмяНаборов],
		Ложь);
	ОписаниеСвойств.Колонки.Добавить("ИмяРеквизитаЗначение");
	ОписаниеСвойств.Колонки.Добавить("ИмяУникальнаяЧасть");
	ОписаниеСвойств.Колонки.Добавить("ДополнительноеЗначение");
	ОписаниеСвойств.Колонки.Добавить("Булево");
	
	ОбязательныеДопРеквизитыСерий = ЗначениеНастроекПовтИсп.НастройкиИспользованияСерий(ВладелецСвойств.ВидНоменклатуры).ОбязательныеДопРеквизиты;
	
	ДобавляемыеРеквизиты = Новый Массив();
	Для каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		ТипЗначенияСвойства = Новый ОписаниеТипов(ОписаниеСвойства.ТипЗначения,
			,,, Новый КвалификаторыСтроки(1024));
		
		// Поддержка строк неограниченной длины.
		ИспользоватьНеограниченнуюСтроку = УправлениеСвойствамиСлужебный.ИспользоватьНеограниченнуюСтроку(
			ТипЗначенияСвойства, ОписаниеСвойства.МногострочноеПолеВвода);
		
		Если ИспользоватьНеограниченнуюСтроку Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		ОписаниеСвойства.ИмяУникальнаяЧасть = 
			СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Набор.УникальныйИдентификатор())), "-", "x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Свойство.УникальныйИдентификатор())), "-", "x");
		
		ОписаниеСвойства.ИмяРеквизитаЗначение =
			ПриведенноеИмяТаблицы + "ДополнительныйРеквизитЗначение_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
		
		Если ОписаниеСвойства.Удалено Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
																									
		ОписаниеСвойства.ДополнительноеЗначение =
			УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ТипЗначенияСвойства);
		
		ОписаниеСвойства.Булево = ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначенияСвойства, Тип("Булево"));
		
		ИндексУдаляемого = УдаляемыеРеквизитыКолонки.Найти(РеквизитТаблица + "." + ОписаниеСвойства.ИмяРеквизитаЗначение);
		
		Если ИндексУдаляемого <> Неопределено Тогда
			УдаляемыеРеквизитыКолонки.Удалить(ИндексУдаляемого);
		Иначе
			Реквизит = Новый РеквизитФормы(ОписаниеСвойства.ИмяРеквизитаЗначение, ТипЗначенияСвойства, РеквизитТаблица, ОписаниеСвойства.Наименование, Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты,УдаляемыеРеквизитыКолонки);
	
	// Создание элементов формы.
	ИмяЭлементаДляРазмещения = ЭлементТаблица;
	ЭлементРазмещения = Форма.Элементы[ИмяЭлементаДляРазмещения];
	
	Форма[ИмяОписания].Очистить();
	
	Для Каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		НоваяСтрокаОписания = Форма[ИмяОписания].Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОписания, ОписаниеСвойства);
		
		НоваяСтрокаОписания.ЗаполнятьОбязательно = (ОбязательныеДопРеквизитыСерий.Найти(НоваяСтрокаОписания.Свойство) <> Неопределено);
		
		Если Не ПустаяСтрока(ВставитьПередЭлементом) Тогда
			Элемент = Форма.Элементы.Вставить(ОписаниеСвойства.ИмяРеквизитаЗначение, Тип("ПолеФормы"), ЭлементРазмещения, Форма.Элементы[ВставитьПередЭлементом]);
		Иначе
			Элемент = Форма.Элементы.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение, Тип("ПолеФормы"), ЭлементРазмещения);
		КонецЕсли;
		
		Если ОписаниеСвойства.Булево И ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;;
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.АвтоОтметкаНезаполненного = НоваяСтрокаОписания.ЗаполнятьОбязательно И НЕ ОписаниеСвойства.Удалено;
		КонецЕсли;
		
		Элемент.ПутьКДанным    = РеквизитТаблица + "." + ОписаниеСвойства.ИмяРеквизитаЗначение;
		Элемент.Подсказка      = ОписаниеСвойства.Свойство.Подсказка;
		Элемент.ТолькоПросмотр = ТолькоПросмотр;
		
		Если ОписаниеСвойства.Свойство.МногострочноеПолеВвода > 0 Тогда
			Элемент.МногострочныйРежим = Истина;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			ФорматнаяСтрока = "";
			Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
				ОписаниеСвойства.ФорматСвойства, ";");
			
			Для каждого Подстрока Из Массив Цикл
				Если СтрНайти(Подстрока, "ДП=") > 0 ИЛИ СтрНайти(Подстрока, "DE=") > 0 Тогда
					Продолжить;
				КонецЕсли;
				Если СтрНайти(Подстрока, "ЧН=") > 0 ИЛИ СтрНайти(Подстрока, "NZ=") > 0 Тогда
					Продолжить;
				КонецЕсли;
				Если СтрНайти(Подстрока, "ДФ=") > 0 ИЛИ СтрНайти(Подстрока, "DF=") > 0 Тогда
					Если СтрНайти(Подстрока, "ддд") > 0 ИЛИ СтрНайти(Подстрока, "ddd") > 0 Тогда
						Подстрока = СтрЗаменить(Подстрока, "ддд", "дд");
						Подстрока = СтрЗаменить(Подстрока, "ddd", "dd");
					КонецЕсли;
					Если СтрНайти(Подстрока, "дддд") > 0 ИЛИ СтрНайти(Подстрока, "dddd") > 0 Тогда
						Подстрока = СтрЗаменить(Подстрока, "дддд", "дд");
						Подстрока = СтрЗаменить(Подстрока, "dddd", "dd");
					КонецЕсли;
					Если СтрНайти(Подстрока, "МММ") > 0 ИЛИ СтрНайти(Подстрока, "MMM") > 0 Тогда
						Подстрока = СтрЗаменить(Подстрока, "МММ", "ММ");
						Подстрока = СтрЗаменить(Подстрока, "MMM", "MM");
					КонецЕсли;
					Если СтрНайти(Подстрока, "ММММ") > 0 ИЛИ СтрНайти(Подстрока, "MMMM") > 0 Тогда
						Подстрока = СтрЗаменить(Подстрока, "ММММ", "ММ");
						Подстрока = СтрЗаменить(Подстрока, "MMMM", "MM");
					КонецЕсли;
				КонецЕсли;
				Если СтрНайти(Подстрока, "ДЛФ=") > 0 ИЛИ СтрНайти(Подстрока, "DLF=") > 0 Тогда
					Если СтрНайти(Подстрока, "ДД") > 0 ИЛИ СтрНайти(Подстрока, "DD") > 0 Тогда
						Подстрока = СтрЗаменить(Подстрока, "ДД", "Д");
						Подстрока = СтрЗаменить(Подстрока, "DD", "D");
					КонецЕсли;
				КонецЕсли;
				ФорматнаяСтрока = ФорматнаяСтрока + ?(ФорматнаяСтрока = "", "", ";") + Подстрока;
			КонецЦикла;
			
			Элемент.Формат = ФорматнаяСтрока;
			Элемент.ФорматРедактирования = ФорматнаяСтрока;
		КонецЕсли;
		
		ТипыДополнительныхЗначений = Новый Соответствие;
		ТипыДополнительныхЗначений.Вставить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"), Истина);
		ТипыДополнительныхЗначений.Вставить(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"), Истина);
		
		ИспользуетсяТипДополнительныхЗначений = Истина;
		Для Каждого Тип Из ОписаниеСвойства.ТипЗначения.Типы() Цикл
			Если ТипыДополнительныхЗначений.Получить(Тип) = Неопределено Тогда
				ИспользуетсяТипДополнительныхЗначений = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИспользуетсяТипДополнительныхЗначений Тогда
			Элемент.КнопкаОткрытия = Ложь;
		КонецЕсли;
		
		Если ОписаниеСвойства.ДополнительноеЗначение Тогда
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
				?(ЗначениеЗаполнено(ОписаниеСвойства.ВладелецДополнительныхЗначений),
					ОписаниеСвойства.ВладелецДополнительныхЗначений, ОписаниеСвойства.Свойство)));
			Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиДополнительныхРеквизитов(Форма, РеквизитТаблица, КолонкаВладельцаСвойств) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = ТаблицаПоИмени(Форма, РеквизитТаблица);
	ПриведенноеИмяТаблицы = СтрЗаменить(РеквизитТаблица, ".", "_");
	
	МассивВладельцев = Таблица.Выгрузить(,КолонкаВладельцаСвойств).ВыгрузитьКолонку(КолонкаВладельцаСвойств);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатурыДополнительныеРеквизиты.Ссылка КАК Серия,
	|	СерииНоменклатурыДополнительныеРеквизиты.Свойство,
	|	СерииНоменклатурыДополнительныеРеквизиты.Значение,
	|	СерииНоменклатурыДополнительныеРеквизиты.ТекстоваяСтрока
	|ИЗ
	|	Справочник.СерииНоменклатуры.ДополнительныеРеквизиты КАК СерииНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	СерииНоменклатурыДополнительныеРеквизиты.Ссылка В(&Серии)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Серия
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Серии", МассивВладельцев);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяСерия = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокиСвойств = Форма[ПриведенноеИмяТаблицы + "Свойства_ОписаниеДополнительныхРеквизитов"].НайтиСтроки(Новый Структура("Свойство", Выборка.Свойство));
		Если СтрокиСвойств.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Серия <> ТекущаяСерия Тогда
			СтрокиСерий = Таблица.НайтиСтроки(Новый Структура(КолонкаВладельцаСвойств, Выборка.Серия));
		КонецЕсли;
		РеквизитЗначение = ?(СтрокиСвойств[0].МногострочноеПолеВвода > 0, Выборка.ТекстоваяСтрока, Выборка.Значение);
		Для Каждого СтрокаСерии Из СтрокиСерий Цикл
			СтрокаСерии[СтрокиСвойств[0].ИмяРеквизитаЗначение] = РеквизитЗначение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеДополнительныхРеквизитов(Форма, РеквизитТаблица) Экспорт
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Таблица = ТаблицаПоИмени(Форма, РеквизитТаблица);
	ПриведенноеИмяТаблицы = СтрЗаменить(РеквизитТаблица, ".", "_");
	
	СтруктураПроверяемыхРеквизитов = Новый Структура;
	Для Каждого ТекСтр Из Форма[ПриведенноеИмяТаблицы + "Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
		Если ТекСтр.ЗаполнятьОбязательно И НЕ ТекСтр.Удалено Тогда
			СтруктураПроверяемыхРеквизитов.Вставить(ТекСтр.ИмяРеквизитаЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПроверяемыхРеквизитов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтр Из Таблица Цикл
		Для Каждого Реквизит Из СтруктураПроверяемыхРеквизитов Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтр[Реквизит.Ключ]) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не заполнены обязательные доп. реквизиты серий.';uk='Не заповнені обов''язкові дод. реквізити серій.'"));
		
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

Процедура ПеренестиДополнительныеРеквизитыИзФормыВОбъект(Объект, Форма, СтрокаТаблицы, РеквизитТаблица) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеРеквизиты.Очистить();
	
	ПриведенноеИмяТаблицы = СтрЗаменить(РеквизитТаблица, ".", "_");
	
	Для Каждого ТекСтр Из Форма[ПриведенноеИмяТаблицы + "Свойства_ОписаниеДополнительныхРеквизитов"] Цикл
		
		НовСтр = Объект.ДополнительныеРеквизиты.Добавить();
		НовСтр.Свойство = ТекСтр.Свойство;
		
		Если ТекСтр.МногострочноеПолеВвода > 0 Тогда
			НовСтр.ТекстоваяСтрока = СтрокаТаблицы[ТекСтр.ИмяРеквизитаЗначение];
		Иначе
			НовСтр.Значение = СтрокаТаблицы[ТекСтр.ИмяРеквизитаЗначение];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьДопРеквизитыВТаблице(Форма, РеквизитТаблица) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПриведенноеИмяТаблицы = СтрЗаменить(РеквизитТаблица,".","_");
	ИмяОписания = ПриведенноеИмяТаблицы + "Свойства_ОписаниеДополнительныхРеквизитов";
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, ИмяОписания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТаблицаПоИмени(Форма, РеквизитТаблица).Количество() > 0;
	
	
КонецФункции

Функция ПрочитатьДопРеквизитыСерии(Форма, РеквизитТаблица, Серия) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения")
	 ИЛИ Не ЗначениеЗаполнено(Серия) Тогда
		Возврат Новый ФиксированнаяСтруктура;
	КонецЕсли;
	
	ПриведенноеИмяТаблицы = СтрЗаменить(РеквизитТаблица,".","_");
	ИмяОписания = ПриведенноеИмяТаблицы + "Свойства_ОписаниеДополнительныхРеквизитов";
	ТаблицаОписания = ТаблицаПоИмени(Форма, ИмяОписания);
	
	СтруктураДопРеквизитов = Новый Структура;
	Для Каждого ТекСтр Из ТаблицаОписания Цикл
		СтруктураДопРеквизитов.Вставить(ТекСтр.ИмяРеквизитаЗначение, "");
	КонецЦикла;
	
	Для Каждого ТекСтр Из Серия.ДополнительныеРеквизиты Цикл
		
		СтрокиСвойств = ТаблицаОписания.НайтиСтроки(Новый Структура("Свойство", ТекСтр.Свойство));
		Если СтрокиСвойств.Количество() > 0 Тогда
			СтруктураДопРеквизитов.Вставить(
				СтрокиСвойств[0].ИмяРеквизитаЗначение,
				?(СтрокиСвойств[0].МногострочноеПолеВвода > 0, ТекСтр.ТекстоваяСтрока, ТекСтр.Значение));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(СтруктураДопРеквизитов);
	
КонецФункции

Процедура УстановитьОтметкуНезаполненныхСвойств(Форма, ВладелецСвойств) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Свойства_ОписаниеДополнительныхРеквизитов") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСвойств = Форма.Свойства_ОписаниеДополнительныхРеквизитов;
	
	ОбязательныеДопРеквизиты =
		ЗначениеНастроекПовтИсп.НастройкиИспользованияСерий(ВладелецСвойств.ВидНоменклатуры).ОбязательныеДопРеквизиты;
	
	Для Каждого ТекСвойство Из ТаблицаСвойств Цикл
		
		Если НЕ ТекСвойство.ЭлементФормыДобавлен
		 ИЛИ Форма.Элементы[ТекСвойство.ИмяРеквизитаЗначение].Вид <> ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСвойство.ЗаполнятьОбязательно = ОбязательныеДопРеквизиты.Найти(ТекСвойство.Свойство) <> Неопределено;
		
		Форма.Элементы[ТекСвойство.ИмяРеквизитаЗначение].АвтоОтметкаНезаполненного =
			ТекСвойство.ЗаполнятьОбязательно И НЕ ТекСвойство.Удалено;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаПоИмени(Форма, РеквизитТаблица)
	
	ПозицияТочки = СтрНайти(РеквизитТаблица, ".");
	
	Если ПозицияТочки = 0 Тогда
		Таблица = Форма[РеквизитТаблица];
	Иначе
		МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РеквизитТаблица,".");
		Таблица = Форма[МассивИмен[0]][МассивИмен[1]];
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

#КонецОбласти

#Область ВидыНоменклатуры

Процедура ВыполнитьДействияПередЗаписьюДополнительногоРеквизитаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоДополнительноеСведение
	 ИЛИ Источник.ДополнительныеСвойства.Свойство("НеОбновлятьШаблоныНаименований") Тогда
		Возврат;
	КонецЕсли;
	
	СтароеНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Наименование");
	
	Если Источник.Наименование <> СтароеНаименование Тогда
		Источник.ДополнительныеСвойства.Вставить("СтароеНаименование", СтароеНаименование);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПриЗаписиДополнительногоРеквизитаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("СтароеНаименование") Тогда
		Возврат;
	КонецЕсли;
	
	СтароеНаименование = "[" + Источник.ДополнительныеСвойства.СтароеНаименование + "]";
	НовоеНаименование  = "[" + Источник.Наименование + "]";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНоменклатуры.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НаборСвойствХарактеристик = &НаборСвойств
	|			ТОГДА ""Характеристики""
	|		КОГДА ВидыНоменклатуры.НаборСвойствСерий = &НаборСвойств
	|			ТОГДА ""Серии""
	|		ИНАЧЕ ""Номенклатуры""
	|	КОНЕЦ КАК ИмяШаблона,
	|	ВидыНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры,
	|	ВидыНоменклатуры.ШаблонНаименованияДляПечатиХарактеристики,
	|	"""" КАК ШаблонНаименованияДляПечатиСерии,
	|	ВидыНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры,
	|	ВидыНоменклатуры.ШаблонРабочегоНаименованияХарактеристики,
	|	ВидыНоменклатуры.ШаблонРабочегоНаименованияСерии
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	(ВидыНоменклатуры.НаборСвойств = &НаборСвойств
	|			ИЛИ ВидыНоменклатуры.НаборСвойствСерий = &НаборСвойств
	|			ИЛИ ВидыНоменклатуры.НаборСвойствХарактеристик = &НаборСвойств)";
	
	Запрос.УстановитьПараметр("НаборСвойств", Источник.НаборСвойств);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШаблонов = Новый Структура;
	РеквизитыШаблонов.Вставить("ШаблонНаименованияДляПечати" + Выборка.ИмяШаблона, "");
	РеквизитыШаблонов.Вставить("ШаблонРабочегоНаименования"  + Выборка.ИмяШаблона, "");
	
	ЗаполнитьЗначенияСвойств(РеквизитыШаблонов, Выборка);
	
	ИзмененныеНаименования = Новый Соответствие;
	ИзмененныеНаименования.Вставить(СтароеНаименование, НовоеНаименование);
	
	ЗаменитьНаименованияВШаблонах(Выборка.Ссылка, РеквизитыШаблонов, ИзмененныеНаименования);
	
КонецПроцедуры

// Адаптированный вариант УправлениеСвойствами.ПередЗаписьюВидаОбъекта()
//
Процедура ОбновитьПоляДополнительныхСвойств(ВидНоменклатуры,
                                  ИмяОбъектаСоСвойствами,
                                  ИмяРеквизитаНабораСвойств = "НаборСвойств",
								  ОкончаниеНаименования = "",
								  НуженНаборСвойств = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборСвойств   = ВидНоменклатуры[ИмяРеквизитаНабораСвойств];
	РодительНабора = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяОбъектаСоСвойствами];
	
	// Обновлений навименований набора свойств
	Если ЗначениеЗаполнено(НаборСвойств) Тогда
		
		СтарыеСвойстваНабора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НаборСвойств, "Наименование, Родитель, ПометкаУдаления");
		
		Если СтарыеСвойстваНабора.Наименование    = ВидНоменклатуры.Наименование + ОкончаниеНаименования
		   И СтарыеСвойстваНабора.ПометкаУдаления = ВидНоменклатуры.ПометкаУдаления
		   И СтарыеСвойстваНабора.Родитель        = РодительНабора Тогда
			
			Возврат;
		КонецЕсли;
		
		Если СтарыеСвойстваНабора.Родитель = РодительНабора Тогда
			ЗаблокироватьДанныеДляРедактирования(НаборСвойств);
			НаборСвойствОбъект = НаборСвойств.ПолучитьОбъект();
		Иначе
			НаборСвойствОбъект = НаборСвойств.Скопировать();
		КонецЕсли;
		
	ИначеЕсли НуженНаборСвойств Тогда
		НаборСвойствОбъект = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
		НаборСвойствОбъект.Используется = Истина;
	Иначе
		НаборСвойствОбъект = Неопределено;
	КонецЕсли;
	
	Если НаборСвойствОбъект <> Неопределено Тогда 
		НаборСвойствОбъект.Наименование    = ВидНоменклатуры.Наименование + ОкончаниеНаименования;
		НаборСвойствОбъект.ПометкаУдаления = ?(НуженНаборСвойств, ВидНоменклатуры.ПометкаУдаления, Истина);;
		НаборСвойствОбъект.Родитель        = РодительНабора;
		НаборСвойствОбъект.Записать();
	КонецЕсли;
	
	ВидНоменклатуры[ИмяРеквизитаНабораСвойств] = ?(НуженНаборСвойств, НаборСвойствОбъект.Ссылка, Неопределено);
	
	// Обновление наименований необщих дополнительных реквизитов и сведений.
	Если Не ЗначениеЗаполнено(НаборСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеНаименования = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Свойства.Ссылка КАК Ссылка,
	|	Свойства.НаборСвойств.Наименование КАК НаименованиеНабора,
	|	Свойства.НаборСвойств.ПометкаУдаления КАК ПометкаУдаленияНабора,
	|	Свойства.ЭтоДополнительноеСведение
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.НаборСвойств = &НаборСвойств
	|	И ВЫБОР
	|			КОГДА Свойства.Наименование <> Свойства.Заголовок + "" ("" + Свойства.НаборСвойств.Наименование + "")""
	|				ТОГДА ИСТИНА
	|			КОГДА Свойства.ПометкаУдаления <> Свойства.НаборСвойств.ПометкаУдаления
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВыборкаСвойств = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСвойств.Следующий() Цикл
		
		ЗаблокироватьДанныеДляРедактирования(ВыборкаСвойств.Ссылка);
		
		Объект = ВыборкаСвойств.Ссылка.ПолучитьОбъект();
		
		СтароеНаименование = Объект.Наименование;
		Объект.Наименование = Объект.Заголовок + " (" + Строка(ВыборкаСвойств.НаименованиеНабора) + ")";
		Объект.ПометкаУдаления = ВыборкаСвойств.ПометкаУдаленияНабора;
		
		Объект.ДополнительныеСвойства.Вставить("НеОбновлятьШаблоныНаименований");
		Объект.Записать();
		
		Если НЕ ВыборкаСвойств.ЭтоДополнительноеСведение Тогда
			ИзмененныеНаименования.Вставить(
				"[" + СтароеНаименование + "]", "[" + Объект.Наименование + "]");
		КонецЕсли;
		
	КонецЦикла;
	
	// Переименование в шаблонах наименований
	Если ИзмененныеНаименования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШаблонов = Новый Структура;
	
	Если ИмяРеквизитаНабораСвойств = "НаборСвойствХарактеристик" Тогда
		РеквизитыШаблонов.Вставить("ШаблонНаименованияДляПечатиХарактеристики");
		РеквизитыШаблонов.Вставить("ШаблонРабочегоНаименованияХарактеристики");
	ИначеЕсли ИмяРеквизитаНабораСвойств = "НаборСвойствСерий" Тогда
		РеквизитыШаблонов.Вставить("ШаблонРабочегоНаименованияСерии");
	Иначе
		РеквизитыШаблонов.Вставить("ШаблонНаименованияДляПечатиНоменклатуры");
		РеквизитыШаблонов.Вставить("ШаблонРабочегоНаименованияНоменклатуры");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РеквизитыШаблонов, ВидНоменклатуры);
	
	ЗаменитьНаименованияВШаблонах(ВидНоменклатуры, РеквизитыШаблонов, ИзмененныеНаименования);
	
КонецПроцедуры

Функция ЗаменитьНаименованияВШаблонах(ОбъектИлиСсылка, РеквизитыШаблонов, ИзмененныеНаименования)
	
	ИзмененныеРеквизитыШаблонов = Новый Структура;
	
	Для Каждого КлючИЗначение Из РеквизитыШаблонов Цикл
		
		ИзмененныйШаблон = КлючИЗначение.Значение;
		
		Для Каждого Наименования Из ИзмененныеНаименования Цикл
			ИзмененныйШаблон = СтрЗаменить(ИзмененныйШаблон, Наименования.Ключ, Наименования.Значение);
		КонецЦикла;
		
		Если ИзмененныйШаблон <> КлючИЗначение.Значение Тогда
			ИзмененныеРеквизитыШаблонов.Вставить(КлючИЗначение.Ключ, ИзмененныйШаблон);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмененныеРеквизитыШаблонов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИлиСсылка) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ОбъектИлиСсылка);
		Исключение
			
			ТекстСообщения = НСтр("ru='Не удалось заблокировать вид номенклатуры ""%1"" для изменения шаблонов наименований.
                |Необходимо вручную изменить имя дополнительного реквизита в шаблонах.'
                |;uk='Не вдалося заблокувати вид номенклатури ""%1"" для зміни шаблонів найменувань.
                |Необхідно вручну змінити ім''я додаткового реквізиту в шаблонах.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(ОбъектИлиСсылка));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Объект = ОбъектИлиСсылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, ИзмененныеРеквизитыШаблонов);
		Объект.Записать();
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ОбъектИлиСсылка, ИзмененныеРеквизитыШаблонов);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

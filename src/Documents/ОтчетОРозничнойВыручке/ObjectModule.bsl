#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
	
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		
	Иначе
		
		КассаККМ = Справочники.КассыККМ.АвтономнаяКассаККМПоУмолчанию();
		Если КассаККМ <> Неопределено Тогда
			ЗаполнитьДокументПоКассеККМ(КассаККМ);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Документ всегда самостоятельно формирует движения
	// по регистру НДСРасчетНалоговыхОбязательств, аналогично комиссии
	ДополнительныеСвойства.Вставить("ОчищатьДвиженияНДСРасчетНалоговыхОбязательств");
	
	СуммаДокумента = ПолучитьСуммуДокумента();
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтотОбъект, Истина);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Выручка, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ОтчетОРозничнойВыручке.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по НДС
	НДСИсходящийСервер.ОтразитьНДСРасчетНалоговыхОбязательств(ДополнительныеСвойства, Движения, Отказ);
	
	
	// Движения по единому налогу.
	ДенежныеСредстваСервер.ОтразитьКнигаДоходовИРасходовПоЕдиномуНалогу(ДополнительныеСвойства, Движения, Отказ);
	
    УчетАкцизногоНалога.ОтразитьРозничныеПродажиПодакцизныхТоваров(ДополнительныеСвойства, Движения, Отказ);
	

	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ТипКассы = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ).ТипКассы;
	Если ТипКассы <> Перечисления.ТипыКассККМ.АвтономнаяККМ Тогда
		
		ТекстОшибки = НСтр("ru='Неверный тип кассы ККМ. В документе могут быть указаны только автономные кассы ККМ';uk='Невірний тип каси ККМ. У документі можуть бути зазначені тільки автономні каси ККМ'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"КассаККМ",
			,
			Отказ);
		
	КонецЕсли;
	
	РасчетнаяСуммаДокумента = ПолучитьСуммуДокумента();
	
	Если СуммаОплатыПлатежнымиКартами <> 0
		И ((СуммаОплатыПлатежнымиКартами > 0 И РасчетнаяСуммаДокумента > 0 И СуммаОплатыПлатежнымиКартами > РасчетнаяСуммаДокумента) ИЛИ
		   (СуммаОплатыПлатежнымиКартами < 0 И РасчетнаяСуммаДокумента < 0 И СуммаОплатыПлатежнымиКартами < РасчетнаяСуммаДокумента)) Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты платежными картами превышает сумму документа';uk='Сума оплати платіжними картами перевищує суму документа'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"СуммаОплатыПлатежнымиКартами",
			,
			Отказ);
		
	КонецЕсли;
		
	ДенежныеСредстваСервер.ПроверитьСуммуПоЕдиномуНалогу(ЭтотОбъект, Отказ, РасчетнаяСуммаДокумента);
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		// Ставки будут заполнены при записи документа
		МассивНепроверяемыхРеквизитов.Добавить("Выручка.СтавкаНДС");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

// Инициализирует документ
//
Процедура ИнициализироватьДокумент()
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДС(
		Организация, 
		Неопределено,
		Дата,
		Истина
	);
	
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	
КонецПроцедуры // ИнициализироватьДокумент()

// Заполняет отчет о розничных продажах в соответствии с отбором.
//
// Параметры
//  ДанныеЗаполнения - Структура со значениями отбора
//
Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("КассаККМ") Тогда
		
		ЗаполнитьДокументПоКассеККМ(ДанныеЗаполнения.КассаККМ);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОтбору()

// Заполняет документ по кассе ККМ 
//
Процедура ЗаполнитьДокументПоКассеККМ(КассаККМ)
	
	РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКассыККМ);
	
КонецПроцедуры // ЗаполнитьДокументПоКассеККМ()

#КонецОбласти

#Область Прочее

// Процедура формирует список регистров для контроля.
// Список регистров хранится в ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля
//
Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
		
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры // СформироватьСписокРегистровДляКонтроля()

// Функция расчитывает сумму доукмента на основании информации в табличной части "Выручка"
//
Функция ПолучитьСуммуДокумента()
	
	СуммаДокументаРасчетная = 0;
	Для каждого СтрокаВыручки Из Выручка Цикл
		СуммаДокументаРасчетная = СуммаДокументаРасчетная + ?(СтрокаВыручки.Возврат, -1, 1) * СтрокаВыручки.Сумма;
	КонецЦикла;
    Возврат СуммаДокументаРасчетная;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#КонецЕсли

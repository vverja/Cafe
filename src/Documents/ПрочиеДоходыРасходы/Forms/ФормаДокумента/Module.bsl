&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Контроль создания документа в подчиенном узле РИБ с фильтрами
	ОбменДаннымиУТУП.КонтрольСозданияДокументовВРаспределеннойИБ(Объект, Отказ);
	
	Если ЗначениеЗаполнено(Параметры.Основание) И ТипЗнч(Параметры.Основание) = Тип("Структура")
		И Параметры.Основание.Свойство("ХозяйственнаяОперация") Тогда
		Объект.ХозяйственнаяОперация = Параметры.Основание.ХозяйственнаяОперация;
	КонецЕсли;
	
	УправлениеФормойСервер();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
		ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.ПрочиеДоходы);
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	КоэффициентПересчетаВВалютуРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта, ВалютаРегламентированногоУчета, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	РассчитатьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.ПрочиеДоходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.ПрочиеДоходы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииНаСервере()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПрочихРасходов 
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихРасходов
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихДоходов Тогда
		Объект.Валюта = ВалютаУправленческогоУчета;
		ВалютаПриИзмененииНаСервере(Ложь);
	КонецЕсли;
	
	УправлениеФормойСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УправлениеФормойСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УправлениеФормойСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ВалютаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииНаСервере(ОбновитьФорму=Истина)
	
	КоэффициентПересчетаВВалютуРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта, ВалютаРегламентированногоУчета, Объект.Дата);
	
	Если Объект.Валюта = ВалютаРегламентированногоУчета Тогда
		Для Каждого Строка Из Объект.ПрочиеДоходы Цикл
			Строка.Сумма = Строка.СуммаРегл;
		КонецЦикла;
		Для Каждого Строка Из Объект.ПрочиеРасходы Цикл
			Если Строка.Сумма = 0 Тогда
				Множитель = 1;
			Иначе
				Множитель = (Строка.СуммаБезНДС / Строка.Сумма);
			КонецЕсли;
			Строка.Сумма = Строка.СуммаРегл;
			Строка.СуммаБезНДС = Строка.СуммаРегл * Множитель;
		КонецЦикла;
	Иначе
		
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
			Валюта, Объект.Валюта, Объект.Дата);
		Для Каждого Строка Из Объект.ПрочиеДоходы Цикл
			Строка.Сумма = Строка.Сумма * КоэффициентПересчета;
		КонецЦикла;
		Для Каждого Строка Из Объект.ПрочиеРасходы Цикл
			Строка.Сумма = Строка.Сумма * КоэффициентПересчета;
			Строка.СуммаБезНДС = Строка.СуммаБезНДС * КоэффициентПересчета;
		КонецЦикла;
		
	КонецЕсли;
	Валюта = Объект.Валюта;
	
	Если ОбновитьФорму Тогда
		УправлениеФормойСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыПриИзменении(Элемент)

	РассчитатьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТЧ(Элемент.Имя, НоваяСтрока, Копирование)
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяАктивовПассивовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	СтатьяАктивовПассивовПриИзмененииСервер(СтрокаТаблицы.СтатьяАктивовПассивов, СтрокаТаблицы.АналитикаАктивовПассивов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) И Элементы.ПрочиеРасходы.ТекущиеДанные.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) И Элементы.ПрочиеРасходы.ТекущиеДанные.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Сумма) Тогда
		ТекущиеДанные.СуммаБезНДС = ТекущиеДанные.Сумма;
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.Сумма * КоэффициентПересчетаВВалютуРегл;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеДоходы

&НаКлиенте
Процедура ПрочиеДоходыПриИзменении(Элемент)

	РассчитатьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТЧ(Элемент.Имя, НоваяСтрока, Копирование)
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыСтатьяДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПрочиеДоходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДоходов) Тогда
		ПрочиеДоходыСтатьяДоходовПриИзмененииСервер();
	Иначе
		СтрокаТаблицы.АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыСтатьяАктивовПассивовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПрочиеДоходы.ТекущиеДанные;
	СтатьяАктивовПассивовПриИзмененииСервер(СтрокаТаблицы.СтатьяАктивовПассивов, СтрокаТаблицы.АналитикаАктивовПассивов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеДоходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеДоходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Сумма) Тогда
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.Сумма * КоэффициентПересчетаВВалютуРегл;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ПодобратьПрочиеРасходы(Команда)
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ОбработкаПодбора", ЭтотОбъект);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ДокументСсылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация",	Объект.Организация);
	ПараметрыПодбора.Вставить("Дата",			?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата));
	
	ОткрытьФорму("Документ.ПрочиеДоходыРасходы.Форма.ФормаПодбораПрочихРасходов",
					ПараметрыПодбора, ЭтаФорма, , , , ОписаниеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюРасходов(Команда)
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	Если Объект.ПрочиеРасходы.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Для выполнения команды требуется выделить строки табличной части.';uk='Для виконання команди потрібно виділити рядки табличної частини.'"));
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Неопределено;

	
	ОткрытьФорму(
		"ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаВыбораСтатьиИАналитики", 
		,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСтатьюРасходовЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранноеЗначение = Результат;
    Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
        
        Для Каждого Строка Из ВыделенныеСтроки Цикл
            
            СтрокаТаблицы = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
            Если СтрокаТаблицы <> Неопределено Тогда
                СтрокаТаблицы.СтатьяРасходов = ВыбранноеЗначение.СтатьяРасходов;
                СтрокаТаблицы.АналитикаРасходов = ВыбранноеЗначение.АналитикаРасходов;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюДоходов(Команда)
	Если Объект.ПрочиеДоходы.Количество()>0 Тогда
		СтатьяДоходов = Неопределено;

		ОткрытьФорму("ПланВидовХарактеристик.СтатьиДоходов.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ЗаполнитьСтатьюДоходовЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюДоходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтатьяДоходов = Результат;
    Если ЗначениеЗаполнено(СтатьяДоходов) Тогда
        УстановитьСтатьюДоходовСервер(СтатьяДоходов);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюАктивовПассивов(Команда)
	
	ВыделенныеСтроки = Элементы[ИмяТекущейТаблицы].ВыделенныеСтроки;
	
	Если Объект[ИмяТекущейТаблицы].Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Для выполнения команды требуется выделить строки табличной части.';uk='Для виконання команди потрібно виділити рядки табличної частини.'"));
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Неопределено;

	
	ОткрытьФорму(
		"ПланВидовХарактеристик.СтатьиАктивовПассивов.Форма.ФормаВыбораСтатьиИАналитики", 
		,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСтатьюАктивовПассивовЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюАктивовПассивовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранноеЗначение = Результат;
    Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
        
        Для Каждого Строка Из ВыделенныеСтроки Цикл
            
            СтрокаТаблицы = Объект[ИмяТекущейТаблицы].НайтиПоИдентификатору(Строка);
            Если СтрокаТаблицы <> Неопределено Тогда
                СтрокаТаблицы.СтатьяАктивовПассивов = ВыбранноеЗначение.Статья;
                СтрокаТаблицы.АналитикаАктивовПассивов = ВыбранноеЗначение.Аналитика;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры


// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки.

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Валюта = Объект.Валюта;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("ПрочиеРасходы"));
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("ПрочиеДоходы"));
	
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтоговыеПоказатели()
	
	ВсегоСумма = Объект.ПрочиеРасходы.Итог("Сумма") + Объект.ПрочиеДоходы.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Элементы.ПрочиеРасходы.ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
		Объект,
		СтрокаТаблицы.СтатьяРасходов,
		СтрокаТаблицы.АналитикаРасходов);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПрочиеДоходыСтатьяДоходовПриИзмененииСервер()
	
	СтрокаТаблицы = Объект.ПрочиеДоходы.НайтиПоИдентификатору(Элементы.ПрочиеДоходы.ТекущаяСтрока);
	ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(Объект, СтрокаТаблицы.СтатьяДоходов, СтрокаТаблицы.Подразделение, СтрокаТаблицы.АналитикаДоходов);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаДоходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияТЧ(ИмяТЧ, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Подразделение) Тогда
			СтрокаТаблицы.Подразделение = ПодразделениеПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодразделениеПоУмолчанию()
	
	Возврат ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	
КонецФункции

&НаСервере
Процедура СтатьяАктивовПассивовПриИзмененииСервер(СтатьяАктивовПассивов, АналитикаАктивовПассивов);
	
	ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтатьяАктивовПассивов, АналитикаАктивовПассивов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатьюДоходовСервер(СтатьяДоходов)
	
	Для Каждого Доход Из ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.ПрочиеДоходы, Элементы.ПрочиеДоходы.ВыделенныеСтроки) Цикл
		Доход.СтатьяДоходов = СтатьяДоходов;
		Доход.АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
			Доход.СтатьяДоходов,
			Объект,);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПрочиеДоходыРасходы.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ВидимостьПодбора = 
		(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПрочихРасходов)
		ИЛИ (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихРасходов);
		
	Элементы.ПрочиеРасходыПодобратьПрочиеРасходы.Видимость = ВидимостьПодбора;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихДоходов Тогда
		Элементы.СтраницаПрочиеРасходы.Видимость = Ложь;
		Элементы.СтраницаПрочиеДоходы.Видимость  = Истина;
		ИмяТекущейТаблицы = "ПрочиеДоходы";
	Иначе
		Элементы.СтраницаПрочиеДоходы.Видимость  = Ложь;
		Элементы.СтраницаПрочиеРасходы.Видимость = Истина;
		ИмяТекущейТаблицы = "ПрочиеРасходы";
	КонецЕсли;
	
	ЗаголовокСуммы = НСтр("ru='Сумма';uk='Сума'");
	ЗаголовокСуммыБезНДС = НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'");
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		ЗаголовокСуммы = СтрШаблон(НСтр("ru='Сумма (%1)';uk='Сума (%1)'"), Объект.Валюта);
		ЗаголовокСуммыБезНДС = СтрШаблон(НСтр("ru='Сумма без НДС (%1)';uk='Сума без ПДВ (%1)'"), Объект.Валюта);
	КонецЕсли;
	
	Элементы.ПрочиеРасходыСумма.Заголовок = ЗаголовокСуммы;
	Элементы.ПрочиеДоходыСумма.Заголовок = ЗаголовокСуммы;
	Элементы.ПрочиеРасходыСуммаБезНДС.Заголовок = ЗаголовокСуммыБезНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбора(АдресВоВременномХранилище, ДополнительныеПарметры) Экспорт
	
	Если АдресВоВременномХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПодбораСервер(АдресВоВременномХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораСервер(АдресВоВременномХранилище)
	
	РезультатПодбора = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если РезультатПодбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого Строка Из РезультатПодбора Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПрочиеРасходы.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

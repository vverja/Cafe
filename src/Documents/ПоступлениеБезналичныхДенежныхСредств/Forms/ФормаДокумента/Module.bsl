&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		ДенежныеСредстваСервер.ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу(Объект);
		Если Параметры.Свойство("Основание") Тогда
			Основание = Параметры.Основание;
		КонецЕсли;
	КонецЕсли;
		
	УточнитьСписокХозяйственныхОпераций();
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	Если Не ТекущийОбъект.ПроведеноБанком Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
	КонецЕсли;
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(
			ЭтаФорма,
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПоступлениеБезналичныхДенежныхСредств", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа, "СтатьяДоходов");

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ПереключательРасшифровки Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("РасшифровкаБезРазбиения", Истина);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
	Если Объект.ПроведеноБанком Тогда
		Объект.ДатаПроведенияБанком = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроведенияБанкомПриИзменении(Элемент)
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПлатежногоДокументаПриИзменении(Элемент)
	
	ТипПлатежногоДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТипПлатежногоДокументаПриИзмененииСервер()
	
	Если Не Объект.ПроведеноБанком Тогда
		
		Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
			Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер Тогда
			
			Объект.ПроведеноБанком = Истина;
			Объект.ДатаПроведенияБанком = Объект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведеноБанкомПриИзменении(Элемент)
	
	Если Не Объект.ПроведеноБанком Тогда
		Объект.ДатаПроведенияБанком = Неопределено;
	Иначе
		Если Не ЗначениеЗаполнено(Объект.ДатаПроведенияБанком) Тогда
			Объект.ДатаПроведенияБанком = Объект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	СтруктураРеквизитов = ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчет);
		
	// запрещено изменение валюты взаиморасчетов относительно валюты документа оплаты (кроме упр. организации)
	Если ЗначениеЗаполнено(Объект.Валюта) И 
		 ЗначениеЗаполнено(СтруктураРеквизитов.Валюта) И
		 (НЕ СтруктураРеквизитов.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация")) И
		 СтруктураРеквизитов.Валюта <> Объект.Валюта Тогда
		
		ПредставлениеТЧ = НСтр("ru='Расшифровка платежа';uk='Розшифровка платежу'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Табличная часть ""%1"" будет очищена, продолжить?';uk='Таблична частина ""%1"" буде очищена, продовжити?'"),
			ПредставлениеТЧ);
		ТекстВопроса = НСтр("ru='Валюта счета не совпадает с валютой взаиморасчетов в табличной части.';uk='Валюта рахунку не співпадає з валютою взаєморозрахунків у табличній частині.'") + Символы.ПС + ТекстВопроса;

		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросВалютаНеСовпадаетЗавершение", ЭтотОбъект, Новый Структура("СтруктураРеквизитов", СтруктураРеквизитов)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;	
	
	БанковскийСчетПриИзмененииФрагмент(СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВалютаНеСовпадаетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СтруктураРеквизитов = ДополнительныеПараметры.СтруктураРеквизитов;
	
	КодОтвета = РезультатВопроса;
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ПереключательРасшифровки = 0;
		ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		
		
		БанковскийСчетПриИзмененииФрагмент(СтруктураРеквизитов);
	Иначе
		Объект.БанковскийСчет = ТекущийБанковскийСчет;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзмененииФрагмент(Знач СтруктураРеквизитов)
	
	Перем КнопкиДиалогаВопрос, ОписаниеОповещения, ТекстВопроса;
	
	Если НЕ ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктураРеквизитов.Валюта) Тогда
		
		БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, Ложь);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		
	Иначе
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Пересчитать суммы в документе в валюту %1?';uk='Перерахувати суми в документі у валюту %1?'"),
		СтруктураРеквизитов.Валюта);
		
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Пересчитать';uk='Перерахувати'"));
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена,  НСтр("ru='Отменить';uk='Скасувати'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешенПересчетВВалюту", ЭтотОбъект, Новый Структура("СтруктураРеквизитов", СтруктураРеквизитов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиДиалогаВопрос);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазрешенПересчетВВалюту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		БанковскийСчетПриИзмененииСервер(ДополнительныеПараметры.СтруктураРеквизитов, Истина);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
	Иначе
		
		Объект.БанковскийСчет = ТекущийБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииСервер();
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПоЕдиномуНалогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФинансыКлиент.СуммаПоЕдиномуНалогуНачалоВыбора(ЭтотОбъект, Элемент, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	УстановитьВидимостьСчетаКонвертации();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяАктивовПассивовПриИзменении(Элемент)
	
	СтатьяАктивовПассивовПриИзмененииСервер(Объект.СтатьяАктивовПассивов, Объект.АналитикаАктивовПассивов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	ПодотчетноеЛицоПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетОтправительПриИзменении(Элемент)
	
	БанковскийСчетОтправительПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетОтправительПриИзмененииСервер()
	
	ЗаполнитьОрганизациюПлательщик();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленныхДС")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту") Тогда
		ЗаполнитьДокументВыдачи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗачисленияЗарплатыПриИзменении(Элемент)
	ПодтверждениеЗачисленияЗарплатыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СуммаКомиссииПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПенсионныйПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	Если Не ПереключательРасшифровки Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			ПриДобавлениСтрокиРасшифровкиПлатежа(Объект.РасшифровкаПлатежа[0]);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru='Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!';uk='Перемикання в режим без розбиття неможливе, якщо в розшифровці платежу введено більше одного рядка!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование,
		СтатьяДвиженияДенежныхСредств);

	Если НоваяСтрока И Не Копирование Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		ПриДобавлениСтрокиРасшифровкиПлатежа(СтрокаТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаВзаиморасчетов)
		И СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта
		И СтрокаТаблицы.СуммаВзаиморасчетов <> СтрокаТаблицы.Сумма Тогда
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
		СтрокаТаблицы.Заказ = Неопределено;
		ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация));
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация",           Объект.Организация);
	ЗначенияОтбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	ОплатаМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации");
	ВозвратМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации");
	Если ОплатаМеждуОрганизациями Или ВозвратМеждуОрганизациями Тогда
		ЗначенияОтбора.Вставить("Партнер",    ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
		ЗначенияОтбора.Вставить("Контрагент", ОрганизацияПлательщик);
	Иначе
		ЗначенияОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если НЕ Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация") Тогда
		ЗначенияОтбора.Вставить("Валюта", Объект.Валюта);
	КонецЕсли;
	
	ЭтоРасчетыСклиентами = ОплатаМеждуОрганизациями Или ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.ВыборОснованияПлатежа = Истина;
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = ЭтоРасчетыСклиентами;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора,
																		 Объект.Организация,
																		 Объект.Контрагент,
																		 Объект.ХозяйственнаяОперация,
																		 Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора,
																		 Объект.Организация,
																		 Объект.Контрагент,
																		 Объект.ХозяйственнаяОперация,
																		 Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ИсключаемыеСвойства = "";
		Если ВыбранноеЗначение.Свойство("СтатьяДвиженияДенежныхСредств")
			И НЕ ЗначениеЗаполнено(ВыбранноеЗначение.СтатьяДвиженияДенежныхСредств) Тогда
			ИсключаемыеСвойства = "СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение, , ИсключаемыеСвойства);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДоходов) Тогда
		РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаДоходов = Неопределено;
		СтрокаТаблицы.АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЭтаСтрока.СуммаВзаиморасчетов = 0;
	ЭтаСтрока.ТипСуммыКредитаДепозита = ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг");
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(
		ЭтаСтрока.ДоговорКредитаДепозита,
		ЭтаСтрока.ВалютаВзаиморасчетов,
		ЭтаСтрока.СтатьяДвиженияДенежныхСредств);
	
	Если Не ЗначениеЗаполнено(ЭтаСтрока.Партнер) Тогда
		ЭтаСтрока.Партнер = Партнер;
	КонецЕСли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	МассивПараметровВыбора = ПараметрыВыбораСтатьиДДС(ЭтаСтрока.ДоговорКредитаДепозита);
	Если ЗначениеЗаполнено(МассивПараметровВыбора) Тогда
		Элемент.ПараметрыВыбора = МассивПараметровВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяДоходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.РасшифровкаПлатежа.ТекущиеДанные.СтатьяДоходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетРеглУчетаАктивовПассивовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РасшифровкаПлатежаЗаказ" Тогда
		СтрокаТЧ = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			ПоказатьЗначение(, СтрокаТЧ.Заказ);
		КонецЕсли;
	КонецЕсли;
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаТипСуммыКредитаДепозитаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ТипСуммыКредитаДепозитаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ЭтоПоступлениеИзДругойОрганизации =
		(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации"));
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("БанковскийСчет", "Счет");
	Если ЭтоПоступлениеИзДругойОрганизации Тогда
		СтруктураРеквизитов.Вставить("БанковскийСчетОтправитель", "Отправитель");
	Иначе
		СтруктураРеквизитов.Вставить("Контрагент");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма,
		Неопределено,
		СтруктураРеквизитов);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровкуПлатежа(Команда)
	
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным") Тогда
		ЗаполнитьРасшифровкуПлатежаПоЗаймамКонтрагенту();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		Новый Структура("РасшифровкаПлатежа", "СтатьяДоходов, АналитикаДоходов"));
		
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(2); // Статьи доходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "РасшифровкаПлатежа", ТипыСтатей);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаЗаказ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.ОснованиеПлатежа");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<совпадает с основанием платежа>';uk='<збігається з підставою платежу>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаВалютаВзаиморасчетов.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Организации.УправленческаяОрганизация;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Дата проведения банком обязательна только если есть признак проведения банком

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроведенияБанком.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроведеноБанком");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Аналитики

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаДоходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаДоходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаДоходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаДоходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаДоходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаАктивовПассивов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеТорговлей");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ИнициализироватьРасшифровкуПлатежа();
	
	СтатьяПоХозОперации = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	Если Объект.СтатьяДвиженияДенежныхСредств.Пустая() 
		ИЛИ (Не Объект.СтатьяДвиженияДенежныхСредств.Пустая() И Не СтатьяПоХозОперации = Неопределено 
		И Объект.СтатьяДвиженияДенежныхСредств.ХозяйственныеОперации.Найти(Объект.ХозяйственнаяОперация) = Неопределено) Тогда
		Объект.СтатьяДвиженияДенежныхСредств = СтатьяПоХозОперации;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу(Объект);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();

	ПолучитьДоговорПоУмолчаниюСервер();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, ПересчитыватьСуммы)
	
	ТекущийБанковскийСчет = Объект.БанковскийСчет;
	
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктураРеквизитов.Валюта;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Если ТекущаяВалюта <> СтруктураРеквизитов.Валюта Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		ЗаполнятьСчетПоДоговору = ?(Объект.Организация = СтруктураРеквизитов.Организация, Ложь, Истина)
			Или НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента);
		Объект.Организация = СтруктураРеквизитов.Организация;
		ПолучитьДоговорПоУмолчаниюСервер(ЗаполнятьСчетПоДоговору);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита, Истина);
	КонецЕсли;
	
	Если ПересчитыватьСуммы Тогда
		ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ПересчитатьКурсКонвертации();
	КонецЕсли;
	
	УстановитьВозможныеЗначенияСчетаОтправителя();
	
	ДенежныеСредстваСервер.ЗаполнитьСтатьюДекларацииПоЕдиномуНалогу(Объект);
	ДенежныеСредстваСервер.УстановитьВидимостьСтатьиДекларацииПоЕдиномуНалогу(Объект, Элементы.СтатьяДекларацииПоЕдиномуНалогу);
	ДенежныеСредстваСервер.УправлениеЭлементомСуммаПоЕдиномуНалогу(Объект, Элементы.СуммаПоЕдиномуНалогу);
	ДенежныеСредстваСервер.ПересчетСуммыПоЕдиномуНалогу(Объект, Объект.СуммаДокумента);
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу();

	УстановитьВидимостьСчетаКонвертации();	
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСписанияДенежныхСредств(Объект, Элементы.ДокументВыдачи);
	// Проверим филиалы
	ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	Элементы.РасшифровкаПлатежаОрганизация.Видимость = ЕстьФилиалы И Элементы.РасшифровкаПлатежаЗаказ.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
		Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.Партнер = Партнер;
		КонецЦикла;
		
		ПолучитьДоговорПоУмолчаниюСервер();
		
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				Объект.Контрагент,
				Объект.Валюта);
		КонецЕсли;
		
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
		
		ЗаполнитьДокументВыдачи();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта,
		Объект.ВалютаКонвертации,
		Объект.Дата);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
	КонецЕсли;
	КурсКонвертацииПриИзмененииСервер();
	
	Элементы.ГруппаКонвертацияВалютыСуммаПенсионный.Видимость = Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета;
	Если НЕ Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
		Объект.СуммаПенсионный = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(КэшированныеЗначения);
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяДоходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаДоходов) Тогда
			СтрокаТаблицы.АналитикаДоходов = Неопределено;
			СтрокаТаблицы.АналитикаДоходовОбязательна = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяДоходовПриИзменении(
			Объект, СтрокаТаблицы.СтатьяДоходов, СтрокаТаблицы.Подразделение, СтрокаТаблицы.АналитикаДоходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаДоходовОбязательна");
	СтруктураДействий.Вставить("ЗаполнитьТипСтатьи", "СтатьяДоходов");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Организация, Контрагент, ХозяйственнаяОперация, Текст, ЭтоУИП = Ложь)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора,
		Текст, 
		Новый Структура("Организация, Контрагент, ХозяйственнаяОперация", Организация, Контрагент, ХозяйственнаяОперация),
		ЭтоУИП);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(Договор, Валюта, СтатьяДДС)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,"ВалютаВзаиморасчетов,ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПоступленияВыдачи");
	Валюта = Реквизиты.ВалютаВзаиморасчетов;
	Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
		СтатьяДДС = Реквизиты.СтатьяДДСПоступленияВыдачи;
	Иначе
		СтатьяДДС = Реквизиты.СтатьяДДСОсновногоДолга;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяАктивовПассивовПриИзмененииСервер(СтатьяАктивовПассивов, АналитикаАктивовПассивов);
	
	ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтатьяАктивовПассивов, АналитикаАктивовПассивов);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		КурсКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
	// Заполним реквизит "Партнер"
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаРасшифровки.Партнер.Пустая() Тогда
			СтрокаРасшифровки.Партнер = Партнер;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником
		И Объект.СуммаДокумента > 0 Тогда
		
		РаспределитьСуммуНаСервере();
		ИнициализироватьРасшифровкуПлатежа();
		УправлениеЭлементамиФормы();
		
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ОснованиеПлатежа)
		И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Заказ) Тогда
		Объект.РасшифровкаПлатежа[0].ОснованиеПлатежа = ДоговорКонтрагента;
		Объект.РасшифровкаПлатежа[0].Заказ = ДоговорКонтрагента;
		Объект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
			
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;
	
	ЗаполнитьДокументВыдачи();
	
	ДенежныеСредстваСервер.ПересчетСуммыПоЕдиномуНалогу(Объект, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ТипСуммыКредитаДепозитаПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Идентификатор);
	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
		СтатьиДДС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.ДоговорКредитаДепозита, "СтатьяДДСОсновногоДолга, СтатьяДДСПроцентов, СтатьяДДСКомиссии");
		Если ТекущиеДанные.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг Тогда
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСОсновногоДолга;
		ИначеЕсли ТекущиеДанные.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты Тогда
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСПроцентов;
		ИначеЕсли ТекущиеДанные.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия Тогда
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДДСКомиссии;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуВсего()
	
	Если Объект.ВалютаКонвертации = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		СуммаВсего = Объект.СуммаКонвертации + Объект.СуммаКомиссии + Объект.СуммаПенсионный;
	Иначе
		СуммаВсего = Объект.СуммаДокумента + Объект.СуммаКомиссии;

	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьОтметкуНезаполненного();
	УстановитьВозможныеЗначенияСчетаОтправителя(Ложь);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчета(Объект, Элементы.БанковскийСчет);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита, Истина);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСписанияДенежныхСредств(Объект, Элементы.ДокументВыдачи);
	
	ДенежныеСредстваСервер.ЗаполнитьСписокТиповСуммКредитовДепозитов(Элементы.РасшифровкаПлатежаТипСуммыКредитаДепозита.СписокВыбора, Объект.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.ЗаполнитьСписокТиповСуммКредитовДепозитов(Элементы.РасшифровкаБезРазбиенияТипСуммыКредитаДепозита.СписокВыбора, Объект.ХозяйственнаяОперация);
	
	УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу(); // После установки организации
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
		Объект.Валюта,
		Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС 
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником Тогда
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента,
			Объект.ПодотчетноеЛицо);
	Иначе
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента,
			Объект.Контрагент);
	КонецЕсли;
	
	Если Не СчетСоответствуетВладельцу Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru='Эквайер';uk='Еквайєр'");
	Иначе
		Элементы.Контрагент.Заголовок = НСтр("ru='Плательщик';uk='Платник'");
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС 
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником Тогда
		Элементы.БанковскийСчетКонтрагента.Заголовок = НСтр("ru='Лицевой счет';uk='Особовий рахунок'");
	Иначе
		Элементы.БанковскийСчетКонтрагента.Заголовок = НСтр("ru='Счет плательщика';uk='Рахунок платника'");
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником Тогда
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru='Сотрудник';uk='Співробітник'");
	Иначе
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru='Подотчетное лицо';uk='Підзвітна особа'");
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
	
	Элементы.ПроведеноБанком.ТолькоПросмотр =
		Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер;
		
	Элементы.ДатаПроведенияБанком.ТолькоПросмотр =
		Не Объект.ПроведеноБанком
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер;
		
	Если УправлениеТорговлей Тогда
		// Устаревшие операции, которые могут присутствовать только в УТ
		ЭтаФорма.ТолькоПросмотр = 
			Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПокупкаВалюты
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПродажаВалюты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
		
	Если НЕ ПереключательРасшифровки Тогда
		ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассивуРасширенный(
			Элементы,
			МассивВсехРеквизитов,
			МассивРеквизитовОперации,
			"РасшифровкаПлатежа",
			"РасшифровкаБезРазбиения");
	Иначе
		ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
			Элементы,
			МассивВсехРеквизитов,
			МассивРеквизитовОперации);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
		Объект.ХозяйственнаяОперация,
		Элементы.РасшифровкаПлатежаПодборПоОстаткам);
		
	ДенежныеСредстваСервер.УстановитьВидимостьСтатьиДекларацииПоЕдиномуНалогу(Объект, Элементы.СтатьяДекларацииПоЕдиномуНалогу);
	ДенежныеСредстваСервер.УправлениеЭлементомСуммаПоЕдиномуНалогу(Объект, Элементы.СуммаПоЕдиномуНалогу);

	Если Не ИспользоватьНесколькоВалют Тогда
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СтраницаРасшифровка.Видимость = (МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") <> Неопределено);
	Если ПереключательРасшифровки Тогда
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаСписком;
	Иначе
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаБезРазбиения;
	КонецЕсли;
	Если НЕ ПереключательРасшифровки Тогда
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
			"РасшифровкаПлатежаПартнер,РасшифровкаБезРазбиенияПартнер",
			"Доступность",
			Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
			"РасшифровкаПлатежаПартнер,РасшифровкаБезРазбиенияПартнер",
			"Доступность",
			Истина);
	КонецЕсли;
	
	Элементы.НадписьВалюта.Видимость = Не ИспользоватьНесколькоВалют;
	Элементы.РасшифровкаПлатежаОрганизация.Видимость = ЕстьФилиалы И Элементы.РасшифровкаПлатежаЗаказ.Видимость;
	Элементы.РасшифровкаПлатежаЗаполнитьРасшифровкуПлатежа.Видимость = (ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ")
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником)
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным;
	Элементы.ГруппаКонвертацияВалютыСуммаПенсионный.Видимость = Объект.ВалютаКонвертации = Константы.ВалютаРегламентированногоУчета.Получить();
	Элементы.СуммаВсего.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
	
	УстановитьВидимостьСчетаКонвертации();	
	
	Если (МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") <> Неопределено) Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного()
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		
		Элементы.ДатаВходящегоДокумента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерВходящегоДокумента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаВходящегоДокумента.ОтметкаНезаполненного = Ложь;
		Элементы.НомерВходящегоДокумента.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ДатаВходящегоДокумента.АвтоОтметкаНезаполненного = Истина;
		Элементы.НомерВходящегоДокумента.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОпераций()
	
	ЭлементХозяйственнаяОперация = Элементы.ХозяйственнаяОперация;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочееПоступлениеДенежныхСредств(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииКонвертацияВалютыБезналичные(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПоЗарплате(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийЭквайринга(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьУстаревшихОпераций(ЭлементХозяйственнаяОперация, Объект.ХозяйственнаяОперация, УправлениеТорговлей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСтатьиДекларацииПоЕдиномуНалогу()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВидНалоговойДекларации", Перечисления.ВидыНалоговыхДеклараций.ЕдиныйНалог));
	
	ЭтоВозврат = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту ИЛИ
	              Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	ОрганизацияПлательщикНДС = НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Объект.Организация, Объект.Дата);
	
	Если ЭтоВозврат ИЛИ Не ОрганизацияПлательщикНДС Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогПриход));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("НаборСтатейНалоговыхДеклараций", Справочники.НаборыСтатейНалоговыхДеклараций.ЕдиныйНалогРасход));		
	КонецЕсли;
	
	Элементы.СтатьяДекларацииПоЕдиномуНалогу.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСчетаКонвертации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И Объект.Валюта = Объект.ВалютаКонвертации Тогда
		Элементы.БанковскийСчетОтправитель.Заголовок = НСтр("ru='Счет конвертации';uk='Рахунок конвертації'");
		Элементы.БанковскийСчетОтправитель.Видимость = Истина;
	Иначе
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
			И Не Объект.Валюта = Объект.ВалютаКонвертации Тогда
			Элементы.БанковскийСчетОтправитель.Видимость = Ложь;
		КонецЕсли;
		Элементы.БанковскийСчетОтправитель.Заголовок = НСтр("ru='Счет отправитель';uk='Рахунок відправник'");
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	УправлениеТорговлей = ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ТекущийБанковскийСчет = Объект.БанковскийСчет;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	КонецЕсли;
	
	ЗаполнитьОрганизациюПлательщик();
	ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	ПолучитьДоговорПоУмолчаниюСервер(Ложь);
	
	ИнициализироватьРасшифровкуПлатежа();
	
	ПересчитатьСуммуВсего();
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа, "СтатьяДоходов");
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРасшифровкуПлатежа()
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") = Неопределено Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		ПереключательРасшифровки = 0;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
			ПриДобавлениСтрокиРасшифровкиПлатежа(Объект.РасшифровкаПлатежа[0]);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
		Иначе
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор);
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер(ЗаполнятьСчетПоДоговору = Истина)
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора);
		
	Если ЗаполнятьСчетПоДоговору Тогда
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ДоговорКонтрагента, , Объект.БанковскийСчетКонтрагента);
		Если Объект.Валюта <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ВалютаДенежныхСредств") Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер, ХозяйственнаяОперация)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет)
	
	Возврат Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	
КонецФункции

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораСтатьиДДС(ДоговорКредитаДепозита)
	
	Возврат ДенежныеСредстваСервер.ПолучитьПараметрыВыбораСтатьиДДС(
		Объект,
		Новый Структура("ДоговорКредитаДепозита", ДоговорКредитаДепозита));
	
КонецФункции

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				Объект.ПодотчетноеЛицо,
				Объект.Валюта);
		КонецЕсли;
		
		ЗаполнитьДокументВыдачи();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможныеЗначенияСчетаОтправителя(ИзменятьСчетОтправитель = Истина)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|
	|ГДЕ
	|	(БанковскиеСчета.ВалютаДенежныхСредств = &Валюта ИЛИ НЕ &ОтбиратьПоВалюте)
	|	И (БанковскиеСчета.Владелец В (&Владелец) ИЛИ НЕ &ОтбиратьПоВладельцу)
	|	И БанковскиеСчета.Владелец НЕ В (&ФильтрВладельца)
	|	И БанковскиеСчета.Ссылка <> &БанковскийСчет
	|");
	
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
		
		Запрос.УстановитьПараметр("Валюта", Объект.ВалютаКонвертации);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Объект.ВалютаКонвертации <> Объект.Валюта);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Истина);
	Иначе
		
		Запрос.УстановитьПараметр("Валюта", Неопределено);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Ложь);
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты)
		И ЗначениеЗаполнено(Объект.БанковскийСчет)
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Запрос.УстановитьПараметр("Владелец", Объект.Организация);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
		Запрос.УстановитьПараметр("Владелец", МассивВзаимосвязанныхОрганизаций);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
	Иначе
		
		Запрос.УстановитьПараметр("Владелец", Неопределено);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Ложь);
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации)
		И ЗначениеЗаполнено(Объект.БанковскийСчет)
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
		МассивВзаимосвязанныхОрганизаций.Добавить(Объект.Организация);
		Запрос.УстановитьПараметр("ФильтрВладельца", МассивВзаимосвязанныхОрганизаций);
		
	Иначе
		Запрос.УстановитьПараметр("ФильтрВладельца", Неопределено);
	КонецЕсли;
	
	МассивСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.БанковскийСчетОтправитель.СписокВыбора.ЗагрузитьЗначения(МассивСчетов);
	
	Если ИзменятьСчетОтправитель Тогда
		Если МассивСчетов.Количество() = 1 Тогда
			
			Объект.БанковскийСчетОтправитель = МассивСчетов[0];
			БанковскийСчетОтправительПриИзмененииСервер();
			
		ИначеЕсли ЗначениеЗаполнено(Объект.БанковскийСчетОтправитель)
			И МассивСчетов.Найти(Объект.БанковскийСчетОтправитель) = Неопределено Тогда
			
			Объект.БанковскийСчетОтправитель = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
			БанковскийСчетОтправительПриИзмененииСервер();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументВыдачи()
	
	Если (Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленныхДС")
		И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту"))
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СписаниеБезналичныхДенежныхСредств.Ссылка,
		|	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		|ГДЕ
		|	СписаниеБезналичныхДенежныхСредств.Организация = &Организация
		|	И СписаниеБезналичныхДенежныхСредств.ПодотчетноеЛицо = &ПодотчетноеЛицо
		|	И СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
		|	И СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
		|	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет
		|	И СписаниеБезналичныхДенежныхСредств.СуммаДокумента = &СуммаДокумента
		|	И СписаниеБезналичныхДенежныхСредств.Дата <= &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СписаниеБезналичныхДенежныхСредств.Ссылка,
		|	СписаниеБезналичныхДенежныхСредств.Дата
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		|ГДЕ
		|	СписаниеБезналичныхДенежныхСредств.Организация = &Организация
		|	И СписаниеБезналичныхДенежныхСредств.Контрагент = &Контрагент
		|	И СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
		|	И СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
		|	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет
		|	И СписаниеБезналичныхДенежныхСредств.Дата <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("БанковскийСчет",                   Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("БанковскийСчетКонтрагента",        Объект.БанковскийСчетКонтрагента);
	Запрос.УстановитьПараметр("Дата",                             КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация",                      Объект.Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо",                  Объект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Контрагент",                       Объект.Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента",                   Объект.СуммаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ДокументВыдачи = Выборка.Ссылка;
	Иначе
		Объект.ДокументВыдачи = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения()
	
	Если Объект.РасшифровкаПлатежа.Количество() Тогда
		
		ТекСтрока = Объект.РасшифровкаПлатежа[0];
		
		ТолькоПросмотрПартнераВалюты = ЗначениеЗаполнено(ТекСтрока.Заказ);
		Элементы.РасшифровкаБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.РасшифровкаБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты ИЛИ (НЕ Объект.Организация = Справочники.Организации.УправленческаяОрганизация);
		
		ВидимостьАналитикПоХО = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
		Элементы.РасшифровкаБезРазбиенияАналитикаДоходов.Видимость =          (ТекСтрока.ТипСтатьи = 2 И ВидимостьАналитикПоХО);
		Элементы.РасшифровкаБезРазбиенияАналитикаАктивовПассивов.Видимость =  (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО);
		
		Элементы.РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчете.Видимость = (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО И НЕ УправлениеТорговлей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником Тогда
	КонецЕсли;
	
	СуммаКРаспределению = Объект.СуммаДокумента;
	
	СтрокиПроценты = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ТипСуммыКредитаДепозита", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты));
	Для Каждого Строка Из СтрокиПроценты Цикл
		ТекущаяСумма = Мин(Строка.Сумма, СуммаКРаспределению);
		Если ТекущаяСумма > 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Сумма = ТекущаяСумма;
			СуммаКРаспределению = СуммаКРаспределению - ТекущаяСумма;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиОсновнойДолг = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ТипСуммыКредитаДепозита", Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг));
	Для Каждого Строка Из СтрокиОсновнойДолг Цикл
		ТекущаяСумма = Мин(Строка.Сумма, СуммаКРаспределению);
		Если ТекущаяСумма > 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Сумма = ТекущаяСумма;
			СуммаКРаспределению = СуммаКРаспределению - ТекущаяСумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки



&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаймамКонтрагенту()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	ДействующиеДоговоры = Справочники.ДоговорыКредитовИДепозитов.ДействующиеДоговорыПоКонтрагенту(
		Объект.Организация,
		Объект.Контрагент,
		Перечисления.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный);
	
	Для Каждого Договор Из ДействующиеДоговоры Цикл
		
		ДанныеРасшифровки = Справочники.ДоговорыКредитовИДепозитов.ДанныеРасшифровкиПлатежаДокументаДДС(Договор, Истина, Объект.Ссылка);
		
		Для Каждого Строка Из ДанныеРасшифровки Цикл
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокументаПоРасшифровкеПлатежаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИмяТабличнойЧасти") Тогда
		ТабличнаяЧасть = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		ОтветПередЗаписью = Истина;
		Объект.СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументВыдачиПриИзменении(Элемент)
	
	ДокументВыдачиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументВыдачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленныхДС") Или
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту") Тогда
		
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
		Элемент.ВыбиратьТип = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсКонвертацииПриИзменении(Элемент)
	КурсКонвертацииПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СуммаКонвертацииПриИзменении(Элемент)
	
	СуммаКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЭтоПоступлениеИзДругойОрганизации =
		(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации"));
		
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	ПараметрыПодбора = Новый Структура("
		|АдресПлатежейВХранилище, 
		|Организация, 
		|Контрагент,
		|Валюта,
		|СуммаДокумента,
		|ДатаДокумента,
		|ХозяйственнаяОперация",
		АдресПлатежейВХранилище,
		Объект.Организация,
		?(ЭтоПоступлениеИзДругойОрганизации, ОрганизацияПлательщик, Объект.Контрагент),
		Объект.Валюта,
		Объект.СуммаДокумента,
		Объект.Дата,
		Объект.ХозяйственнаяОперация);
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора, 
		ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДокументВыдачиПриИзмененииСервер()
	
	БанковскийСчетСохраненноеЗначение = Объект.БанковскийСчет;
	
	Если ЗначениеЗаполнено(Объект.ДокументВыдачи) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.Заполнить(Объект.ДокументВыдачи);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = БанковскийСчетСохраненноеЗначение;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
		Объект.СуммаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументВыдачи, "СуммаДокумента");
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.РасшифровкаПлатежа[0].Сумма = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	Если Объект.КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Объект.СуммаКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.СуммаКонвертации = (Объект.СуммаДокумента + Объект.СуммаКомиссии) / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.СуммаКонвертации = 0;
	КонецЕсли;
	
	ПересчитатьСуммуВсего();
	
КонецПроцедуры

&НаСервере
Процедура СуммаКонвертацииПриИзмененииСервер()
	
	Если Объект.КурсКонвертации <> 0 И Объект.СуммаДокумента = 0 Тогда
		Если Объект.ВалютаКонвертации = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Объект.СуммаДокумента = Объект.СуммаКонвертации / Объект.КурсКонвертации;
		Иначе
			Объект.СуммаДокумента = Объект.СуммаКонвертации * Объект.КурсКонвертации;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.РасшифровкаПлатежа[0].Сумма = Объект.СуммаДокумента;
	КонецЕсли;
	
	ПересчитатьСуммуВсего();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюПлательщик()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации")
	Тогда
		СтруктураРеквизитов = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчетОтправитель);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Организация) Тогда
			ОрганизацияПлательщик = СтруктураРеквизитов.Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодтверждениеЗачисленияЗарплатыПриИзмененииНаСервере()
	
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяДоходов = Результат;
	РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасшифровкиПлатежа(Строка)
	
	ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяДоходов");
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяДоходов")
	
КонецПроцедуры

Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.РасшифровкаБезРазбиенияСтатьяДоходов.Заголовок = НСтр("ru='Статья доходов';uk='Стаття доходів'");
		Элементы.РасшифровкаПлатежаСтатьяДоходов.Заголовок      = НСтр("ru='Статья доходов';uk='Стаття доходів'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

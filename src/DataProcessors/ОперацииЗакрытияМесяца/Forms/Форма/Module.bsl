
&НаКлиенте
Перем ПредыдущийЭтап;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Отказ = Истина;
		СообщениеПользователю = НСтр("ru='Выполнять регламентные операции по закрытию месяца в подчиненном узле распределенной информационной не требуется,
            |они выполняются только в центральном узле информационной базы.'
            |;uk='Виконувати регламентні операції з закриття місяця в підпорядкованому вузлі розподіленої інформаційної не потрібно,
            |вони виконуються тільки в центральному вузлі інформаційної бази.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ПериодРегистрации", Объект.ПериодРегистрации);
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Параметры.Свойство("Организация", Объект.Организация);
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Элементы.ГруппаАмортизация.Видимость = Ложь;
		Элементы.ГруппаПогашениеСтоимостиТМЦОбщая.Видимость = Ложь;
		Элементы.ГруппаНалогНаИмуществоОбщая.Видимость = Ложь;
		Элементы.ГруппаТранспортныйНалогОбщая.Видимость = Ложь;
		Элементы.ГруппаЗемельныйНалогОбщая.Видимость = Ложь;
		Элементы.ГруппаТорговыйСбор.Видимость = Ложь;
		Элементы.ГруппаПроизводственныеЗатраты.Видимость = Ложь;
		Элементы.ГруппаДолиСписанияКосвенныхРасходовОбщая.Видимость = Ложь;
		Элементы.ГруппаРасходыНаПродукциюОбщая.Видимость = Ложь;
		Элементы.ГруппаОтражениеВРеглУчете.Видимость = Ложь;
		Элементы.ГруппаФинансовыйРезультатОбщая.Видимость = Ложь;
		Элементы.ГруппаУСН.Видимость = Ложь;
		Элементы.ГруппаМеждународныйУчетОбщая.Видимость = Ложь;
		Элементы.ГруппаНачислениеОООбщая.Видимость = Ложь;
		Элементы.ГруппаОтражениеЗарплатыОбщая.Видимость = Ложь;
		Элементы.ГруппаРаспределениеМатериаловРаботНаПродукциюОбщая.Видимость = Ложь;
		Элементы.ГруппаНастройкаПоказателейРаспределенияРасходовОбщая.Видимость = Ложь;
		Элементы.ГруппаСписаниеЗатратНаВыпускОбщая.Видимость = Ложь;
		Элементы.ГруппаТорговыйСборОбщая.Видимость = Ложь;
        Элементы.ГруппаКорректировкаНалоговогоНазначенияКапитальныхИнвестицийОбщая.Видимость = Ложь;
        Элементы.ГруппаПерерасчетПропорциональногоНДСОбщая.Видимость = Ложь;
        Элементы.ГруппаКорректировкаУсловныхПродажПоПропорциональномуНДСОбщая.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Элементы.ИсправлениеОтрицательныхОстатков.Заголовок = НСтр("ru='Исправление отрицательных остатков товаров организации';uk='Виправлення від''ємних залишків товарів організації'");
		Элементы.ПереоценкаДенежныхСредств.Заголовок = НСтр("ru='Переоценка денежных средств';uk='Переоцінка грошових коштів'");
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет") Тогда
		Элементы.ПартииТоваров.Заголовок = НСтр("ru='Распределение доп. расходов по товарам';uk='Розподіл дод. витрат по товарах'");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.СписаниеЗатратНаВыпуск.Заголовок = НСтр("ru='Списание затрат на выпуск';uk='Списання витрат на випуск'");
		Элементы.ГруппаМеждународныйУчетОбщая.Видимость = Ложь;
		Элементы.ГруппаАмортизацияОСиНМАМеждународныйОбщая.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаОтчетСверкаДанныхПартионногоУчетаИСебестоимостиОткрыть.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	
	ВидПериодаРегистрации = Перечисления.ДоступныеПериодыОтчета.Месяц;
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ПоказатьСвязанныеОрганизации();
	ОшибкиРасчета = Новый Структура;
	РезультатыРасчетов = Новый Структура;
	
	УчитыватьПрочиеДоходыИРасходы		 = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	ФормироватьФинансовыйРезультат		 = ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	БазоваяВерсия						 = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	ИспользоватьНесколькоВалют			 = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьПодарочныеСертификаты	 = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользоватьКредитыДепозитыЗаймы	 = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов");
	ИспользоватьНачислениеЗарплаты		 = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ");
	
	ИспользоватьМеждународныйУчет = Ложь;
	
	ЗаполнитьСписокВыбораОрганизации();
	СкрытьУказанныеЭтапы(ОтключенныеЭтапы());
	
	Этапы = ОбщегоНазначенияКлиентСервер.СократитьМассив(ЭтапыКРасчету(), ОтключенныеЭтапы());
	ЭтапыКРасчету.ЗагрузитьЗначения(Этапы);
	ВывестиСостоянияЭтапов();
	СкрытьОтобразитьДлительныеОперации(Ложь);
	
	Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Пометка = Истина;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ФормаПоказатьСкрытьПоясненияКЭтапам","Заголовок",НСтр("ru='Скрыть пояснения к этапам';uk='Приховати пояснення до етапів'"));
	Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Ложь;
    
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Видимость = НЕ РазделениеВключено;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПредставлениеПериодаРегистрации = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
	ПредставлениеПериодРегистрацииРегламентный = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
	ПредыдущийЭтап = "";
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Настройки.Вставить("Объект.Организация", Параметры.Организация);
	КонецЕсли;
	Если Параметры.Свойство("ПериодРегистрации") И ЗначениеЗаполнено(Параметры.ПериодРегистрации) Тогда
		Настройки.Вставить("Объект.ПериодРегистрации", Параметры.ПериодРегистрации);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если Настройки.Получить("ПериодРегистрации") <> Неопределено Тогда
		Объект.ПериодРегистрации = Настройки["ПериодРегистрации"];
	КонецЕсли;
	Если Настройки.Получить("Организация") <> Неопределено Тогда
		Объект.Организация = Настройки["Организация"];
	КонецЕсли;
	Если Настройки.Получить("СкрыватьЭтапыСоСтатусомНеТребуется") <> Неопределено Тогда
		СкрыватьЭтапыСоСтатусомНеТребуется = Настройки["СкрыватьЭтапыСоСтатусомНеТребуется"];
		Элементы.ФормаСкрыватьЭтапыСоСтатусомНеТребуется.Пометка = СкрыватьЭтапыСоСтатусомНеТребуется;
		СкрыватьЭтапыСоСтатусомНеТребуетсяСервер();
	КонецЕсли;
	Если Настройки.Получить("ВыводитьПоясненияКЭтапам") <> Неопределено Тогда
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Пометка = Не Настройки["ВыводитьПоясненияКЭтапам"];
	КонецЕсли;
	Если Настройки.Получить("РезультатыРасчетов") <> Неопределено Тогда
		РезультатыРасчетов = Настройки.Получить("РезультатыРасчетов");
	Иначе
		РезультатыРасчетов = Новый Структура;
	КонецЕсли;
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ПоказатьСвязанныеОрганизации();
	ВывестиСостоянияЭтапов();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент,
		СтандартнаяОбработка,
		Объект.ПериодРегистрации,
		ЭтаФорма,
		Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	Если ВыбранныйПериод <> Неопределено Тогда
		Объект.ПериодРегистрации = ВыбранныйПериод;
		ПредставлениеПериодаРегистрации = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
		ПоказатьСвязанныеОрганизации();
		ОтобразитьЭтапы(ЭтапыКРасчету);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление,
		СтандартнаяОбработка,
		Объект.ПериодРегистрации,
		ПредставлениеПериодаРегистрации);
	ПоказатьСвязанныеОрганизации();
	ОтобразитьЭтапы(ЭтапыКРасчету);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиВыполнятьОперацииПоЗакрытиюМесяцаПриИзменении(Элемент)
	Если АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца Тогда
		Если НЕ ЗначениеЗаполнено(ПериодРегистрацииРегламентный) Тогда
			ПериодРегистрацииРегламентный = Объект.ПериодРегистрации;
			ПредставлениеПериодРегистрацииРегламентный = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
		КонецЕсли;
		Если РазделениеВключено Тогда
			РасписаниеРегламентногоЗадания = ПредопределенноеРасписание();
		КонецЕсли;
	КонецЕсли;
	СохранитьРеквизитыРегламентногоЗадания();
КонецПроцедуры

// Выполнение задания каждый день в 22:00.
&НаКлиенте
Функция ПредопределенноеРасписание()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы            = Месяцы;
	Расписание.ДниНедели         = ДниНедели;
	Расписание.ВремяНачала       = Дата('00010101220000'); // 22:00
	Расписание.ПериодПовтораДней = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление,
		СтандартнаяОбработка,
		ПериодРегистрацииРегламентный,
		ПредставлениеПериодРегистрацииРегламентный);
	СохранитьРеквизитыРегламентногоЗадания();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСпискаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент,
		СтандартнаяОбработка,
		ПериодРегистрацииРегламентный,
		ЭтаФорма,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСпискаЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		ПериодРегистрацииРегламентный = ВыбранныйПериод;
		
		ПредставлениеПериодРегистрацииРегламентный = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

#Область ОбработчикиСобытийЭтапов

#Область ДействиеВыполнитьЭтап

&НаКлиенте
Процедура ИсправлениеОтрицательныхОстатковНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ИсправлениеОтрицательныхОстатков")
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеМатериаловРаботНаПродукциюНажатие(Элемент)
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоказателейРаспределенияРасходовНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРБПНажатие(Элемент)
	ВыполнитьЭтапыРасчета("РаспределениеРБП");
КонецПроцедуры

&НаКлиенте
Процедура СписаниеЗатратНаВыпускНажатие(Элемент)
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ПередачаТоваровНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ПередачаТоваров")
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыКомитентамОСписанииНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ОтчетыКомитентамОСписании")
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПоКомиссииИнтеркампаниНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ОтчетыПоКомиссииИнтеркампани")
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеДвиженийПоРасчетуСПартнерамиНажатие(Элемент)
	ВыполнитьЭтапыРасчета("РасчетыСПартнерами", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеДвиженийПоПартиямТоваровНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ПартииТоваров", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАмортизацияОСиНМАреглНажатие(Элемент)
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПогашениеСтоимостиТМЦНажатие(Элемент)
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАмортизацияОСиНМАМеждународныйНажатие(Элемент)
	Возврат; // В УТ и КА данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачислениеООНажатие(Элемент)
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтражениеЗарплатыНажатие(Элемент)
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачисленияПоКредитамДепозитамЗаймамНажатие(Элемент)
	ВыполнитьЭтапыРасчета("НачисленияПоКредитамДепозитам");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНастройкаРаспределенияРасходовНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетДолейСписанияКосвенныхРасходовНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРаспределениеРасходовНаПродукциюАвтоматическиНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеКорректировкаНалоговогоНазначенияКапитальныхИнвестицийНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетСебестоимостиНажатие(Элемент)
	ВыполнитьЭтапыРасчета("Себестоимость", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПереоценкаДенежныхСредствНажатие(Элемент)
	ВыполнитьЭтапыРасчета("ПереоценкаДенежныхСредств", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАннулированиеПодарочныхСертификатовНажатие(Элемент)
	ВыполнитьЭтапыРасчета("АннулированиеПодарочныхСертификатов");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРаспределениеДоходовИРасходовПоНаправлениямНажатие(Элемент)
	ВыполнитьЭтапыРасчета("РаспределениеДоходовРасходов");
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтражениеДокументовВРеглУчетеНажатие(Элемент)
	Возврат; // В УТ данный обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСписаниеКосвенныхРасходовНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеРезервовПоСомнительнымДолгамНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеФинансовогоРезультатаНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетНалогаНаИмуществоНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетТранспортногоНалогаНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетЗемельногоНалогаНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеМеждународныйУчетНажатие(Элемент)
	Возврат; // В УТ и КА обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетКурсовыхРазницРеглНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеТорговыйСборНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ТорговыйСборНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовНажатие(Элемент)
	
	Возврат; // Чтобы в УТ не был пустым обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникПоУчетуНДСНажатие(Элемент)
	
	Возврат; // Чтобы не был пустым обработчик

КонецПроцедуры

&НаКлиенте
Процедура УсловныеПродажиНажатие(Элемент)
	ВыполнитьЭтапыРасчета("УсловныеПродажи");
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетПропорциональногоНДСНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаУсловныхПродажПоПропорциональномуНДСНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетНалоговыхРазницПослеПереходаСЕННажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаЭтапа

&НаКлиенте
Процедура ПогашениеСтоимостиТМЦНажатие(Элемент)
	Возврат; // Для УТ11 обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияОСиНМАреглНажатие(Элемент)
	Возврат; // В УТ11 обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДвиженийПоПартиямТоваровНажатие(Элемент)
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	ПартииТоваровВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("ПартииТоваров", ПартииТоваровВремяРасчета);
	Если НЕ ЗначениеЗаполнено(ПартииТоваровВремяРасчета) Тогда
		ПартииТоваровВремяРасчета = Новый Структура("Начало, Конец", Дата("00010101000000"), Дата("00010101000000"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", ПартииТоваровВремяРасчета.Начало);
	ПараметрыФормы.Вставить("ДатаОкончания", ПартииТоваровВремяРасчета.Конец);
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru='Партионный учет.Операции закрытия месяца.';uk='Партіонний облік.Операції закриття місяця.'"));
	
	ДополнитьОтборыРасчетаСебестоимостиДляЖурналаРегистрации(ПараметрыФормы);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Закрытие месяца");
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДвиженийПоРасчетуСПартнерамиНажатие(Элемент)
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", ОшибкиРасчета["РасчетыСПартнерами"].НачалоРасчета);
	ПараметрыФормы.Вставить("ДатаОкончания", ОшибкиРасчета["РасчетыСПартнерами"].КонецРасчета);
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить("Расчеты с партнерами.Операции закрытия месяца.");
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить("ОтложенноеПроведениеПоРасчетам");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "ЗакрытиеМесяца");
КонецПроцедуры

&НаКлиенте
Процедура ПереоценкаДенежныхСредствНажатие(Элемент)
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Документ.ПереоценкаВалютныхСредств.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулированиеПодарочныхСертификатовНажатие(Элемент)
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", ОшибкиРасчета["АннулированиеПодарочныхСертификатов"].НачалоРасчета);
	ПараметрыФормы.Вставить("ДатаОкончания", ОшибкиРасчета["АннулированиеПодарочныхСертификатов"].КонецРасчета);
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить("Аннулирование подарочных сертификатов.Операции закрытия месяца.");
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "ЗакрытиеМесяца");
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияОСиНМАМеждународныйНажатие(Элемент)
	Возврат; // В УТ11 и КА обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура РасчетДолейСписанияКосвенныхРасходовНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовНаПродукциюАвтоматическиНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаНалоговогоНазначенияКапитальныхИнвестицийНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетСебестоимостиНажатие(Элемент)
	ПартииТоваровВремяРасчета = Неопределено;
	СебестоимостьВремяРасчета = Неопределено;
	РезультатыРасчетов.Свойство("Себестоимость", СебестоимостьВремяРасчета);
	РезультатыРасчетов.Свойство("ПартииТоваров", ПартииТоваровВремяРасчета);
	Если НЕ ЗначениеЗаполнено(СебестоимостьВремяРасчета) Тогда
		СебестоимостьВремяРасчета = Новый Структура("Начало, Конец", Дата("00010101000000"), Дата("00010101000000"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПартииТоваровВремяРасчета) Тогда
		ПартииТоваровВремяРасчета = Новый Структура("Начало, Конец", Дата("00010101000000"), Дата("00010101000000"));
	КонецЕсли;
 	Если СебестоимостьВремяРасчета.Конец >= ПартииТоваровВремяРасчета.Конец Тогда
		Начало = СебестоимостьВремяРасчета.Начало;
		Конец = СебестоимостьВремяРасчета.Конец;
	Иначе
		Начало = ПартииТоваровВремяРасчета.Начало;
		Конец = ПартииТоваровВремяРасчета.Конец;
	КонецЕсли;
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	ПараметрыФормы = Новый Структура("ДатаНачала, ДатаОкончания, Уровень", Начало, Конец + 600, ОтборПоУровню);
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", Новый Массив);
	ПараметрыФормы.СобытиеЖурналаРегистрации.Добавить(НСтр("ru='Партионный учет.Операции закрытия месяца.';uk='Партіонний облік.Операції закриття місяця.'"));
	
	ДополнитьОтборыРасчетаСебестоимостиДляЖурналаРегистрации(ПараметрыФормы);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , "Расчет себестоимости");
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоходовИРасходовПоНаправлениямНажатие(Элемент)
	ПараметрыФормы = Новый Структура("ПериодРегистрации, Организация, НеПомеченныеНаУдаление",
		Объект.ПериодРегистрации, Объект.Организация, Истина);
	Форма = ПолучитьФорму("Документ.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.Форма.ФормаСписка",
		ПараметрыФормы,
		,
		ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено"));
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеДокументовВРеглУчетеНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура СписаниеКосвенныхРасходовНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеРезервовПоСомнительнымДолгамНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетКурсовыхРазницРеглНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеФинансовогоРезультатаНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетНалоговыхРазницПослеПереходаСЕННажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетИмущественныхНалоговНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетТранспортногоНалогаНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура РасчетЗемельногоНалогаНажатие(Элемент)
	Возврат; // Чтобы в УТ не был пустым обработчик
КонецПроцедуры

&НаКлиенте
Процедура НачислениеООНажатие(Элемент)
	Возврат; // Для УТ11 обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеЗарплатыНажатие(Элемент)
	Возврат; // Для УТ11 обработчик пустой
КонецПроцедуры

&НаКлиенте
Процедура МеждународныйУчетНажатие(Элемент)
	
	
	Возврат; // Для УТ и КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеКУДиРНажатие(Элемент)
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти // РасшифровкаЭтапа

#КонецОбласти // ОбработчикиСобытийЭтапов

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьВсе(Команда)
	ГраницаРасчета = 0;
	ВыполнитьЭтапыРасчета(Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРегламентногоЗадания(Команда)
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояния(Команда)
	ВывестиСостоянияЭтапов();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПояснения(Команда)
	ВыводитьПоясненияКЭтапам = Не ВыводитьПоясненияКЭтапам;
	Если ВыводитьПоясненияКЭтапам Тогда
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Пометка = Ложь;
	Иначе
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Пометка = Истина;
	КонецЕсли;
	УстановитьВидимостьПояснений();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗадание(Команда)
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
	ОтменитьФоновоеЗадание();
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьЭтапыСоСтатусомНеТребуется(Команда)
	СкрыватьЭтапыСоСтатусомНеТребуется = Не СкрыватьЭтапыСоСтатусомНеТребуется;
	Элементы.ФормаСкрыватьЭтапыСоСтатусомНеТребуется.Пометка = СкрыватьЭтапыСоСтатусомНеТребуется;
	СкрыватьЭтапыСоСтатусомНеТребуетсяСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСверкаДанныхПартионногоУчетаИСебестоимости(Команда)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",
		Объект.Организация);
	ПараметрыОтчета.Вставить("Период",
		Новый СтандартныйПериод(НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации)));
	
	ОткрытьФорму("Отчет.СверкаДанныхПартионногоУчетаИСебестоимости.ФормаОбъекта",
		Новый Структура("Отбор, СформироватьПриОткрытии", ПараметрыОтчета, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРасчетуСебестоимости(Команда)
	ОткрытьФорму("РегистрСведений.ЗаданияКРасчетуСебестоимости.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРаспределениюРасчетовСКлиентами(Команда)
	ОткрытьФорму("РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКРаспределениюРасчетовСПоставщиками(Команда)
	ОткрытьФорму("РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаданияКЗакрытиюМесяца(Команда)
	ОткрытьФорму("РегистрСведений.ЗаданияКЗакрытиюМесяца.ФормаСписка");
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьКартинкуСтатусаЭтапа(Этап, НазваниеЭтапа)
	Если Не ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	ИндексЗначения = Перечисления.СостоянияОперацийЗакрытияМесяца.Индекс(Этап);
	ИмяПеречисления = Метаданные.Перечисления.СостоянияОперацийЗакрытияМесяца.ЗначенияПеречисления[ИндексЗначения].Имя;
	Элементы["Картинки" + НазваниеЭтапа].ТекущаяСтраница = Элементы[НазваниеЭтапа + ИмяПеречисления];

	Если Этап = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Элементы["Действия" + НазваниеЭтапа].ТекущаяСтраница = Элементы["Действие" + НазваниеЭтапа+"НеТребуется"];
		Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Ложь;
	Иначе
		Элементы["Действия" + НазваниеЭтапа].ТекущаяСтраница = Элементы["Действие" + НазваниеЭтапа+"Выполнять"];
		Если ВыводитьПоясненияКЭтапам И Этап = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
			Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Истина;
		Иначе
			Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиПодвала()
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность 	= АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	Элементы.ПредставлениеПериодРегистрацииРегламентный.Доступность = АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	Элементы.СостояниеАвтоматическогоВыполненияОпераций.Доступность = АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	ОбновитьПредставлениеРасписания();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПояснений()
	Для Каждого Этап Из СостоянияЭтапов Цикл
		СостояниеЭтапа = Этап.Значение;
		Если ВыводитьПоясненияКЭтапам 
			И (СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			   ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками) Тогда
			Элементы["ГруппаПояснение"+Этап.Ключ].Видимость = Истина;
		Иначе
			Элементы["ГруппаПояснение"+Этап.Ключ].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СкрытьОтобразитьДлительныеОперации(Отобразить)
	Элементы.ГруппаДлительныеОперации.Видимость = Отобразить;
	Если Отобразить Тогда
		Элементы.ЗаголовокРасчетаВФоне.Заголовок = НСтр("ru='Выполняется операция';uk='Виконується операція'") + ": " + ЭтапРассчитываемыйВФоне;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьДоступностьЭлементов(Доступность)
	Элементы.ГруппаПараметры.Доступность = Доступность;
	Элементы.ФормаВыполнитьЗакрытие.Доступность = Доступность; 
	Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Доступность = Доступность;
	Элементы.ФормаОбновитьСостоянияОпераций.Доступность = Доступность;
	Элементы.ФормаСкрыватьЭтапыСоСтатусомНеТребуется.Доступность = Доступность;
	Элементы.ГруппаВыполнениеОпераций.Доступность = Доступность;
	Элементы.ГруппаЭтапы.Доступность = Доступность;
КонецПроцедуры

&НаСервере
Процедура ИзмененияВИнтерфейсеПриРаботеВФоне(ЗаданиеЗапущено)
	СкрытьОтобразитьДлительныеОперации(ЗаданиеЗапущено);	
	УстановитьСнятьДоступностьЭлементов(НЕ ЗаданиеЗапущено);
КонецПроцедуры

&НаСервере
Функция ДоступныеОрганизации(Организация = Неопределено, ДляВыбора = Ложь)
	
	// Для регламентных операций необходим полный список организаций,
	// а для списка выбора поля "Организация" - только доступные данному пользователю.
	СписокОрганизаций = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокОрганизаций.Добавить(Организация);
	Иначе
		СписокОрганизаций.ЗагрузитьЗначения(Справочники.Организации.ДоступныеОрганизации(ДляВыбора));
	КонецЕсли;
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизации()
	СписокВыбора = Элементы.Организация.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации(, Истина).ВыгрузитьЗначения());
	СписокВыбора.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='<По всем организациям>';uk='<За всіма організаціями>'"));
КонецПроцедуры

&НаСервере
Процедура СкрыватьЭтапыСоСтатусомНеТребуетсяСервер()
	ПараметрыОформления = Новый Структура("Статус");
	Для Каждого Состояние ИЗ СостоянияЭтапов Цикл
		Если Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			ПараметрыОформления.Статус = Состояние.Значение;
			ОформлениеЭтапа(Состояние.Ключ, ПараметрыОформления);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиСостоянияЭтапов()
	ОтобразитьЭтапы(ЭтапыКРасчету);
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЭтапВручную(Знач ИмяФормы, Знач ПараметрыФормы, Знач ПараметрыРасчета)
	Обработчик = Новый ОписаниеОповещения("РасчетЭтапаЗавершение", ЭтотОбъект, ПараметрыРасчета);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму(ИмяФормы, ПараметрыФормы,,,,, Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура РасчетЭтапаЗавершение(Знач РезультатЗакрытия, Знач Параметры) Экспорт
	ОтобразитьЭтапы(ЭтапыКРасчету);
КонецПроцедуры


&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ПоказатьСвязанныеОрганизации();
	ОтобразитьЭтапы(ЭтапыКРасчету);
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	Для Каждого Этап Из ЭтапыКРасчету Цикл
		ДобавитьУсловноеОформление(Этап);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление(НаименованиеЭтапа)
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[НаименованиеЭтапа].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭтапа);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);
	
КонецПроцедуры


#Область ФоновоеЗаданиеРасчета

&НаСервере
Функция ФоновоеЗаданиеЗапустить(КРасчету, ПараметрыЗадания, Отказ)

	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("ЭтапыКРасчету", КРасчету);
	ПараметрыЗадания.Вставить("СписокОрганизаций", СписокДоступныхОрганизаций.ВыгрузитьЗначения());
	ПараметрыЗадания.Вставить("Отказ", Ложь);
	ПараметрыЗадания.Вставить("АдресХранилища", АдресХранилища);
	
	ЗапускУспешен = ЗакрытиеМесяцаУТВызовСервера.РассчитатьВФоновомЗадании(ПараметрыЗадания);
	
	ИзмененияВИнтерфейсеПриРаботеВФоне(ЗапускУспешен);
	Возврат ЗапускУспешен;
КонецФункции

&НаКлиенте
Функция ФоновоеЗаданиеВыполнено()
	ЗаданиеВыполнено = Ложь;
	ПараметрыОформления = Новый Структура("Статус, ИмяЭтапа");
	Попытка
		Результат = ЗакрытиеМесяцаУТВызовСервера.СостояниеЗаданияЗакрытияМесяца();
		Если Результат.УспешноВыполнено Тогда
			ЗаданиеВыполнено = Истина;
			РезультатРасчета = ПолучитьИзВременногоХранилища(АдресХранилища);
			ОчиститьОшибкиРасчетаЭтапа(РезультатРасчета.РасчитанЭтап);
			Если Не РезультатРасчета.Отказ Тогда
				ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
				ЗагрузитьРезультат(РезультатРасчета.РасчитанЭтап, Результат);
				НомерЭтапа = ОпределитьНомерЭтапа(РезультатРасчета.РасчитанЭтап);
				ПараметрыОформления.ИмяЭтапа = РезультатРасчета.РасчитанЭтап;
				ПараметрыОформления.Статус = СостояниеЭтапа(СостоянияЭтапов, РезультатРасчета.РасчитанЭтап);
				СостоянияЭтапов[РезультатРасчета.РасчитанЭтап] = ПараметрыОформления.Статус;
				ОформлениеЭтапа(РезультатРасчета.РасчитанЭтап, ПараметрыОформления);
				Если ПараметрыОформления.Статус = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено")
					И ОстанавливатьсяПоОшибке 
				Тогда
					// этап не рассчитан, завершаем работу
					ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
					ОтобразитьЭтапы(ЭтапыКРасчету);
					ГраницаРасчета = 0;
					ТекстСообщения = НСтр("ru='Ошибка при расчете этапа';uk='Помилка при розрахунку етапу'")+ ": " + ЭтапРассчитываемыйВФоне;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат ЗаданиеВыполнено;
				КонецЕсли;
				Если НомерЭтапа < ГраницаРасчета Тогда 
					// продолжаем расчет этапов
					ВыполнитьЭтапыРасчета(ГраницаРасчета, Ложь, НомерЭтапа+1);
				Иначе
					ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
					ОтобразитьЭтапы(ЭтапыКРасчету);
				КонецЕсли;
			ИначеЕсли НЕ ОстанавливатьсяПоОшибке Тогда
				СведенияРасчета = Новый Структура("НачалоРасчета, КонецРасчета");
				ЗаполнитьЗначенияСвойств(СведенияРасчета, РезультатРасчета);
				ОшибкиРасчета.Вставить(РезультатРасчета.РасчитанЭтап, СведенияРасчета);
				ПараметрыОформления.ИмяЭтапа = РезультатРасчета.РасчитанЭтап;
				ПараметрыОформления.Статус = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено");
				ОформлениеЭтапа(РезультатРасчета.РасчитанЭтап, ПараметрыОформления);
				НомерЭтапа = ОпределитьНомерЭтапа(РезультатРасчета.РасчитанЭтап);
				ЗагрузитьРезультат(РезультатРасчета.РасчитанЭтап, Результат);
				Если НомерЭтапа + 2 <= ЭтапыКРасчету.Количество() Тогда
					СледующийЭтап = ЭтапыКРасчету.Получить(НомерЭтапа+1);
					ВыполнитьЭтапыРасчета(СледующийЭтап.Значение, Ложь, НомерЭтапа + 1);
				Иначе
					ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
					ОбновитьФорму();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Результат.ЕщеВыполняется Тогда
			ПараметрыОбработчика = Новый Структура("Интервал", 1);
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
		ИначеЕсли Результат.ВыполненоСОшибками Тогда
			ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
			ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
			ТекстСобытия = НСтр("ru='Закрытие месяца';uk='Закриття місяця'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСобытия, "Ошибка", Результат.ТекстОшибки);
			ПараметрыРасчета = Новый Структура("НачалоРасчета, КонецРасчета, СведенияОбОшибке",);
			ОбновитьФорму();
		КонецЕсли;
	Исключение
		ТекстСобытия = НСтр("ru='Закрытие месяца';uk='Закриття місяця'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ТекстСобытия, "Ошибка", ТекстОшибки);
		ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
		ОбновитьФорму();
	КонецПопытки;
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаКлиенте
Процедура ОчиститьОшибкиРасчетаЭтапа(Этап)
	Если ОшибкиРасчета.Свойство(Этап) Тогда
		ОшибкиРасчета.Удалить(Этап);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Если НЕ ФоновоеЗаданиеВыполнено() Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Интервал", 1);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат(РассчиталиЭтап, Результат)
	ВремяРасчета = Новый Структура("Начало, Конец");
	ЗаполнитьЗначенияСвойств(ВремяРасчета, Результат);
	РезультатыРасчетов.Вставить(РассчиталиЭтап, ВремяРасчета);
КонецПроцедуры

&НаСервере
Процедура ОтменитьФоновоеЗадание()
	ЗакрытиеМесяцаУТВызовСервера.ОтменитьВыполнениеЗадания("ЗакрытиеМесяца");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()
	ВывестиСостоянияЭтапов();
КонецПроцедуры
#КонецОбласти // ФоновоеЗаданиеРасчета

// Метод выполняет анализ массива этапов для определения их состояния.
// Параметры:
//		МассивЭтапов - Массив - Массив, содержащий в себе имена этапов.
//						Заполняется в методе МассивЭтаповКВыполнению()
// ВозвращаемоеЗначение - Соответствие - В ключе содержится имя этапа,
//						в значении его статус.
&НаСервере
Функция СостоянияЭтапов(СписокЭтапов) 
	УстановитьПривилегированныйРежим(Истина);
	СостоянияЭтапов = Новый Структура;
	Для Каждого Этап Из СписокЭтапов Цикл
		СостояниеЭтапа = СостояниеЭтапа(СостоянияЭтапов, Этап.Значение);
		СостоянияЭтапов.Вставить(Этап.Значение, СостояниеЭтапа);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СостоянияЭтапов;
КонецФункции

Функция ОпределитьНомерЭтапа(Этап)
	Элемент = ЭтапыКРасчету.НайтиПоЗначению(Этап);
	Если Элемент = Неопределено Тогда
		НомерЭтапа = ЭтапыКРасчету.Количество() - 1;
	Иначе
		НомерЭтапа = ЭтапыКРасчету.Индекс(Элемент);
	КонецЕсли;
	Возврат НомерЭтапа;
КонецФункции

&НаКлиенте
Процедура ВыполнитьЭтапыРасчета(ИмяЭтапаРасчета = Неопределено, РучнойЗапуск = Истина, НачалоРасчета = 0)
	Отказ = Ложь;
	РасчетВФоне = Ложь;
	ПараметрыРасчета = Новый Структура("РучнойЗапуск, Статус, Этап", РучнойЗапуск);
	СтатусНеТребуется = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеТребуется");
	СтатусВыполненоУспешно = ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно");
	
	Если ГраницаРасчета = 0 ИЛИ РучнойЗапуск Тогда
		ГраницаРасчета = ОпределитьНомерЭтапа(ИмяЭтапаРасчета);
	КонецЕсли;
	Пока НачалоРасчета <= ГраницаРасчета Цикл
		Если Отказ Тогда
			Прервать; // при расчете предыдущего этапа произошла критическая ошибка
		КонецЕсли;
		// Пропускаем все ручные операции кроме текущего
		Если НачалоРасчета <> ГраницаРасчета Тогда
			ПараметрыРасчета.РучнойЗапуск = Ложь;
		ИначеЕсли НачалоРасчета = ГраницаРасчета
			И ГраницаРасчета = ЭтапыКРасчету.Количество() - 1
		Тогда
			ПараметрыРасчета.РучнойЗапуск = РучнойЗапуск;
		Иначе
			ПараметрыРасчета.РучнойЗапуск = Истина;
		КонецЕсли;

		ЭтапКРасчету = ЭтапыКРасчету.Получить(НачалоРасчета).Значение;
		Если РезультатыРасчетов.Свойство(ЭтапКРасчету) И Не РучнойЗапуск Тогда
			РезультатыРасчетов.Удалить(ЭтапКРасчету);
		КонецЕсли;
		ПараметрыРасчета.Этап = ЭтапКРасчету;
		ПараметрыРасчета.Статус = СостояниеЭтапа(СостоянияЭтапов, ЭтапКРасчету);
		СостоянияЭтапов.Вставить(ЭтапКРасчету, ПараметрыРасчета.Статус);
		Если (ПараметрыРасчета.Статус = СтатусНеТребуется
				ИЛИ ПараметрыРасчета.Статус = СтатусВыполненоУспешно
				ИЛИ ПараметрыРасчета.Статус = Неопределено)
		Тогда
			СостояниеЭтапа = ПараметрыРасчета.Статус; // это финальный статус этапа
			ОформлениеЭтапа(ПараметрыРасчета.Этап, ПараметрыРасчета);
		Иначе
			РассчитатьЭтап(ЭтапКРасчету, Отказ, РасчетВФоне, ПараметрыРасчета);
			Если РасчетВФоне ИЛИ ПараметрыРасчета.РучнойЗапуск Тогда
				Прервать; // запущен обработчик ожидания, позже будет перезапуск расчета
			КонецЕсли;
			СостояниеЭтапа = СостояниеЭтапа(СостоянияЭтапов, ЭтапКРасчету);
		КонецЕсли; 
		СостоянияЭтапов.Вставить(ЭтапКРасчету, СостояниеЭтапа);
		НачалоРасчета = НачалоРасчета + 1;
	КонецЦикла;
	Если НачалоРасчета >= ГраницаРасчета Тогда
		ГраницаРасчета = 0;
		Если Не РасчетВФоне Тогда
			ИзмененияВИнтерфейсеПриРаботеВФоне(Ложь);
			ВывестиСостоянияЭтапов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ)
	РасчетВФоне = Истина;
	ЗапускУспешен = ФоновоеЗаданиеЗапустить(КРасчету, ПараметрыРасчета, Отказ);
	Если ЗапускУспешен Тогда
		ПараметрыОбработчика = Новый Структура("Интервал", 1);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.Интервал, Истина);
	КонецЕсли;
КонецПроцедуры

Функция ИнициализироватьПараметрыРасчета()
	ПараметрыРасчета = Новый Структура("Организация, Период", Объект.Организация, Объект.ПериодРегистрации);
	Возврат ПараметрыРасчета;
КонецФункции

#Область НастройкаРегламентногоЗадания

&НаСервере
Процедура СохранитьРеквизитыРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасписаниеЗадания.РегламентноеЗадание КАК ИдентификаторЗадания
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК РасписаниеЗадания
	|ГДЕ
	|	РасписаниеЗадания.Организация = &Организация
	|");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Результат = Запрос.Выполнить();
	
	ИдентификаторЗадания = Неопределено;
	Если Не Результат.Пустой() Тогда
		Расписание = Результат.Выгрузить();
		ИдентификаторЗадания = Расписание[0].ИдентификаторЗадания;
	КонецЕсли;
	
	ОрганизацииКРасчету = Новый Массив();
	ОрганизацииКРасчету.Добавить(Объект.Организация);
	
	ПараметрыЗадания = Новый Структура("Использование, Параметры", АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца, ОрганизацииКРасчету);
	Если РасписаниеРегламентногоЗадания <> Неопределено Тогда
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	КонецЕсли;
	
	ОбновитьЗаданиеЗакрытияМесяца(ИдентификаторЗадания, ПараметрыЗадания);
	
	Если НЕ ЗначениеЗаполнено(ПериодРегистрацииРегламентный) Тогда
		ПериодРегистрацииРегламентный = НачалоМесяца(ТекущаяДата());
 		ПредставлениеПериодРегистрацииРегламентный = Локализация.ФорматДляИнтерфейса(ПериодРегистрацииРегламентный, "ДФ='MMMM yyyy'");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	Запись = НаборЗаписей.Добавить();
	Запись.Организация = Объект.Организация;
	Запись.РегламентноеЗадание = ИдентификаторЗадания;
	Запись.ЗакрываемыйПериод = ПериодРегистрацииРегламентный;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УправлениеЭлементамиПодвала();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаданиеЗакрытияМесяца(ИдентификаторЗадания, ПараметрыЗадания)
	Задание = Неопределено;
	Если ИдентификаторЗадания <> Неопределено Тогда
		Отбор = Новый Структура("УникальныйИдентификатор", ИдентификаторЗадания);
		Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда // идентификатор не заполнен или задание не нашли
		СтрокаНаименования = НСтр("ru='Закрытие месяца по организации: %1';uk='Закриття місяця по організації: %1'");
		Если Объект.Организация = Справочники.Организации.ПустаяСсылка() Тогда
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
										НСтр("ru='По всем организациям.';uk='По всіх організаціях.'"));
		Иначе
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования, СокрЛП(Объект.Организация));
		КонецЕсли;
		ПараметрыЗадания.Вставить("Метаданные",Метаданные.РегламентныеЗадания.ЗакрытиеМесяца);
		ПараметрыЗадания.Вставить("Наименование", СтрокаНаименования);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		 ПредставлениеРасписания = НСтр("ru='Расписание не задано';uk='Розклад не заданий'");
	КонецЕсли;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	Диалог = ДополнительныеПараметры.Диалог;
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Диалог.Расписание;
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторЗадания = Неопределено;
	ПериодРегистрацииРегламентный = Дата("00010101000000");

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задание.РегламентноеЗадание,
	|	Задание.ЗакрываемыйПериод
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК Задание
	|ГДЕ
	|	Задание.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдентификаторЗадания = ВыборкаДетальныеЗаписи.РегламентноеЗадание;
		ПериодРегистрацииРегламентный = ВыборкаДетальныеЗаписи.ЗакрываемыйПериод;
	КонецЦикла;
	
	ПредставлениеПериодРегистрацииРегламентный = Формат(ПериодРегистрацииРегламентный, "ДФ='MMMM yyyy'");
	Если ИдентификаторЗадания <> Неопределено Тогда
		Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
		Если Задание <> Неопределено Тогда
			РасписаниеРегламентногоЗадания	= Задание.Расписание;
			АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Задание.Использование;
			
			СвойстваПоследнегоФоновогоЗадания = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(Задание);
            
			Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
				СостояниеАвтоматическогоВыполненияОпераций = НСтр("ru='Не выполнялось';uk='Не виконувалось'");
			Иначе
				СостояниеАвтоматическогоВыполненияОпераций = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние) + ": "
				+ Строка(СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения);
			КонецЕсли;
		Иначе
			РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
			АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Ложь;
			СостояниеАвтоматическогоВыполненияОпераций = "";
		КонецЕсли;
	Иначе
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Ложь;
		СостояниеАвтоматическогоВыполненияОпераций = "";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВнутреннийИнтерфейс
// Метод возвращает массив этапов к расчету,
// упорядоченных по приоритету выполнения (номеру индекса).
// Элементы с большим индексом зависят от элементов с меньшим индексом.
// Для добавления нового этапа необходимо добавить новый элемент в массив
// и прописать вызов соответствующего метода в методе ВыполнитьЭтапыРасчета()
Функция ЭтапыКРасчету()
	ОбработкаОъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОъект.ЭтапыКРасчету();
КонецФункции

// Метод возвращает массив этапов, исключаемых из расчета.
Функция ОтключенныеЭтапы()
	ОбработкаОъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОъект.ОтключенныеЭтапы();
КонецФункции

&НаКлиенте
Процедура РассчитатьЭтап(ИмяЭтапаРасчета, Отказ = Ложь, РасчетВФоне = Ложь, ПараметрыРасчета)
	Если ИмяЭтапаРасчета = "ИсправлениеОтрицательныхОстатков" Тогда
		ИсправлениеОтрицательныхОстатков(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПередачаТоваров" Тогда
		ПередачаВозвратТоваров(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыПоКомиссииИнтеркампани" Тогда
		ОтчетыПоКомиссииИнтеркампани(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыКомитентамОСписании" Тогда
		ОтчетыКомитентамОСписании(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПомощникПоУчетуНДС" Тогда
		ОперацииПоУчетуНДС(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетыСПартнерами" Тогда
		РасчетыСПартнерами(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРБП" Тогда
		РаспределениеРБП(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "НачисленияПоКредитамДепозитам" Тогда
		НачисленияПоКредитамДепозитам(Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "АннулированиеПодарочныхСертификатов" Тогда
		АннулированиеПодарочныхСертификатов(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "ПартииТоваров" Тогда
		РасчетПартийТоваров(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "Себестоимость" Тогда
		РасчетСебестоимости(ИмяЭтапаРасчета, РасчетВФоне, Отказ, ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПереоценкаДенежныхСредств" Тогда
		ПереоценкаДенежныхСредств(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеДоходовРасходов" Тогда
		РаспределениеДоходовРасходовПоНаправлениям(ИмяЭтапаРасчета, РасчетВФоне, Отказ);
	ИначеЕсли ИмяЭтапаРасчета = "УсловныеПродажи" Тогда
		УсловныеПродажи(Отказ, ПараметрыРасчета);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СостояниеЭтапа(ПредыдущиеЭтапы, ИмяЭтапаРасчета)
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыРасчета = Новый Структура("СписокОрганизаций, СписокПодразделений, Период",
						СписокДоступныхОрганизаций.ВыгрузитьЗначения(), СписокПодразделений(), Объект.ПериодРегистрации, Объект.Организация);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Состояние = ОбработкаОбъект.СостояниеЭтапа(ПредыдущиеЭтапы, ПараметрыРасчета, ИмяЭтапаРасчета);
	Возврат Состояние;
КонецФункции

&НаСервере
Процедура ОформлениеЭтапа(Этап, ПараметрыОформления)
	Если Этап = "ИсправлениеОтрицательныхОстатков" Тогда
		ОформлениеИсправлениеОтрицательныхОстатков(ПараметрыОформления);
	ИначеЕсли Этап = "ПередачаТоваров" Тогда
		ОформлениеПередачаВозвратТоваров(ПараметрыОформления);
	ИначеЕсли Этап = "ОтчетыПоКомиссииИнтеркампани" Тогда
		ОформлениеОтчетыПоКомиссииИнтеркампани(ПараметрыОформления);
	ИначеЕсли Этап = "ОтчетыКомитентамОСписании" Тогда
		ОформлениеОтчетыКомитентамОСписании(ПараметрыОформления);
	ИначеЕсли Этап = "ПомощникПоУчетуНДС" Тогда
		ОформлениеОперацииПоУчетуНДС(ПараметрыОформления);
	ИначеЕсли Этап = "РасчетыСПартнерами" Тогда
		ОформлениеРасчетыСПартнерами(ПараметрыОформления);
	ИначеЕсли Этап = "РаспределениеРБП" Тогда
		ОформлениеРаспределениеРБП(ПараметрыОформления);
	ИначеЕсли Этап = "НачисленияПоКредитамДепозитам" Тогда
		ОформлениеНачисленияПоКредитамДепозитам(ПараметрыОформления);
	ИначеЕсли Этап = "АннулированиеПодарочныхСертификатов" Тогда
		ОформлениеАннулированиеПодарочныхСертификатов(ПараметрыОформления);
	ИначеЕсли Этап = "ПартииТоваров" Тогда
		ОформлениеПартииТоваров(ПараметрыОформления);
	ИначеЕсли Этап = "Себестоимость" Тогда
		ОформлениеРасчетСебестоимости(ПараметрыОформления);
	ИначеЕсли Этап = "ПереоценкаДенежныхСредств" Тогда
		ОформлениеПереоценкаДенежныхСредств(ПараметрыОформления);
	ИначеЕсли Этап = "РаспределениеДоходовРасходов" Тогда
		ОформлениеРаспределениеДоходовРасходов(ПараметрыОформления);
	ИначеЕсли Этап = "УсловныеПродажи" Тогда
		ОформлениеУсловныеПродажи(ПараметрыОформления);
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиЭтапов

#Область СлужебныеМетодыОбработчиковЭтапов

&НаСервере
Процедура СкрытьУказанныеЭтапы(МассивЭтапов)
	ПараметрыОформления = Новый Структура("Скрыть, Статус", Истина, Неопределено);
	Для Каждого Этап Из МассивЭтапов Цикл
		ОформлениеЭтапа(Этап, ПараметрыОформления)
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭтапы(Этапы)
	
	СостоянияЭтапов = СостоянияЭтапов(Этапы);
	ПараметрыОформления = Новый Структура("ИмяЭтапа, Статус", "", Неопределено);
	
	ВыполненоУспешно = 0;
	НеТребуется		 = 0;
	НеВыполнено		 = 0;

	Для Каждого Состояние Из СостоянияЭтапов Цикл
		ПараметрыОформления.Статус = Состояние.Значение;
		ПараметрыОформления.ИмяЭтапа = Состояние.Ключ;
		ОформлениеЭтапа(Состояние.Ключ, ПараметрыОформления);
		Если Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
			НеВыполнено = НеВыполнено + 1;
		ИначеЕсли Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			НеТребуется = НеТребуется + 1;
		ИначеЕсли Состояние.Значение = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
			ВыполненоУспешно = ВыполненоУспешно + 1;
		КонецЕсли;
	КонецЦикла;
	Если ВыполненоУспешно > 0 И НеВыполнено = 0 Тогда
		Статус = НСтр("ru='Операции выполнены успешно';uk='Операції виконані успішно'");
		Элементы.ДекорацияВыполнено.Видимость= Истина;
		Элементы.ДекорацияНеВыполнено.Видимость = Ложь;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Ложь;
	ИначеЕсли НеТребуется > 0 И НеВыполнено = 0 Тогда
		Статус = "";
		Элементы.ДекорацияВыполнено.Видимость= Ложь;
		Элементы.ДекорацияНеВыполнено.Видимость = Ложь;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Ложь;
	Иначе
		Статус = НСтр("ru='Существуют невыполненные операции';uk='Існують невиконані операції'");
		Элементы.ДекорацияВыполнено.Видимость= Ложь;
		Элементы.ДекорацияНеВыполнено.Видимость = Истина;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СписокПодразделений()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервере
Функция АктивноЗаданиеРасчетаПартий()
	Отбор = Новый Структура("Ключ, Состояние", "ПартионныйУчет", СостояниеФоновогоЗадания.Активно);
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Возврат АктивныеЗадания.Количество() > 0;
КонецФункции

&НаКлиенте
Процедура ПроверитьЗавершениеРасчетаПартий()
	Если АктивноЗаданиеРасчетаПартий() Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Интервал", 1);
		ПодключитьОбработчикОжидания("ПроверитьЗавершениеРасчетаПартий", ПараметрыОбработчика.Интервал, Истина);
	Иначе
		РасчетВФоне = Ложь;
		Отказ = Ложь;
		РасчетПартийТоваров("ПартионныйУчет", РасчетВФоне, Отказ)
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьСвязанныеОрганизации()
	
	СвязанныеОрганизации.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.ГруппаПояснениеСвязанныеОрганизации.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаРасчета = ПартионныйУчет.СхемаРасчетаПартий(КонецМесяца(Объект.ПериодРегистрации), Объект.Организация);
	Если СхемаРасчета.Количество() = 0 Тогда
		МассивОрганизаций = Новый Массив;
	Иначе
		МассивОрганизаций = СхемаРасчета[СхемаРасчета.Количество() - 1].Организации;
	КонецЕсли;
		
	СвязанныеОрганизации.ЗагрузитьЗначения(МассивОрганизаций);
	
	Если СвязанныеОрганизации.Количество() < 2 Тогда
		// Это организация "одиночка" - нет связанных с ней по Интеркампани организаций
		Элементы.ГруппаПояснениеСвязанныеОрганизации.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СвязанныеОрганизации.СортироватьПоЗначению();
	
	// Перенесем организацию-отбор на первую позицию в списке
	ЭлементОрганизацииВСписке = СвязанныеОрганизации.НайтиПоЗначению(Объект.Организация);
	Если ЭлементОрганизацииВСписке <> Неопределено Тогда
		Если СвязанныеОрганизации.Индекс(ЭлементОрганизацииВСписке) > 0 Тогда
			СвязанныеОрганизации.Удалить(ЭлементОрганизацииВСписке);
			СвязанныеОрганизации.Вставить(0, Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем текст для вывода в форме
	ПояснениеСвязанныеОрганизации = "";
	
	Для Каждого ТекущаяОрганизация Из СвязанныеОрганизации Цикл
		ПояснениеСвязанныеОрганизации = ПояснениеСвязанныеОрганизации
			+ ?(ПояснениеСвязанныеОрганизации = "", "", "," + Символы.ПС) + "- " + СокрЛП(ТекущаяОрганизация.Значение);
	КонецЦикла;
	
	ПояснениеСвязанныеОрганизации =
		НСтр("ru='Будет выполнен расчет для следующих организаций:';uk='Буде виконаний розрахунок для наступних організацій:'") + Символы.ПС + ПояснениеСвязанныеОрганизации;
				
	Элементы.ПояснениеСвязанныеОрганизации.Высота = СвязанныеОрганизации.Количество() + 1;
	Элементы.ГруппаПояснениеСвязанныеОрганизации.Видимость = Истина;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьОтборыРасчетаСебестоимостиДляЖурналаРегистрации(ПараметрыФормы)
	РасчетСебестоимости.ДополнитьОтборыДляЖурналаРегистрации(ПараметрыФормы.Уровень, ПараметрыФормы.СобытиеЖурналаРегистрации);
КонецПроцедуры

#КонецОбласти

#Область Прочее
&НаКлиенте
Процедура ИсправлениеОтрицательныхОстатков(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ИмяФормыРасчета = "Обработка.ПомощникИсправленияОстатковТоваровОрганизаций.Форма.ФормаМониторСостоянияТоваровОрганизаций";
		РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеИсправлениеОтрицательныхОстатков(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИсправлениеОтрицательныхОстатковТоваров","Заголовок", НСтр("ru='Исправление отрицательных остатков товаров организации';uk='Виправлення від''ємних залишків товарів організації'"));
		КонецЕсли;
		Элементы.ГруппаИсправлениеОтрицательныхОстатковОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ИсправлениеОтрицательныхОстатков.Имя);
	Иначе
		Элементы.ГруппаИсправлениеОтрицательныхОстатковОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередачаВозвратТоваров(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ОткрытьФорму("ЖурналДокументов.ПередачиВозвратыТоваровМеждуОрганизациями.Форма.ФормаРабочееМесто", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеПередачаВозвратТоваров(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ГруппаПередачаТоваровОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПередачаТоваров.Имя);
	Иначе
		Элементы.ГруппаПередачаТоваровОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыКомитентамОСписании(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ОткрытьФорму("ЖурналДокументов.ОтчетыКомитентам.Форма.ФормаСпискаДокументов", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеОтчетыКомитентамОСписании(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ГруппаОтчетыКомитентамОСписанииОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПередачаТоваров.Имя);
	Иначе
		Элементы.ГруппаОтчетыКомитентамОСписанииОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПоКомиссииИнтеркампани(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус <> "НеТребуется" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
		ОткрытьФорму("ЖурналДокументов.ОтчетыПоКомиссииМеждуОрганизациями.Форма.ФормаСпискаДокументов", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеОтчетыПоКомиссииИнтеркампани(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ГруппаОтчетыПоКомиссииИнтеркампаниОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПередачаТоваров.Имя);
	Иначе
		Элементы.ГруппаОтчетыПоКомиссииИнтеркампаниОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерами(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ПараметрыРасчета.Вставить("Организация", СписокДоступныхОрганизаций);
	ЭтапРассчитываемыйВФоне = НСтр("ru='формирование движений по расчетам с партнерами и переоценка расчетов.';uk='формування рухів по розрахунках з партнерами і переоцінка розрахунків.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРасчетыСПартнерами(ПараметрыОформления)
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(ЭтотОбъект,
		"РасчетыСПартнерами",
		НСтр("ru='Формирование движений по расчетам с контрагентами';uk='Формування рухів за розрахунками з контрагентами'"),
		ИспользоватьПартнеровКакКонтрагентов);
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется
	Тогда
		Элементы.ГруппаРасчетыСПартнерамиОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Если ИспользоватьПартнеровКакКонтрагентов Тогда
			ПояснениеФормированиеДвиженийПоРасчетуСПартнерами = НСтр("ru='Необходимо выполнить формирование движений по взаиморасчетам с контрагентами.';uk='Необхідно виконати формування рухів по взаєморозрахунках з контрагентами.'");
		Иначе
			ПояснениеФормированиеДвиженийПоРасчетуСПартнерами = НСтр("ru='Необходимо выполнить формирование движений по взаиморасчетам с партнерами.';uk='Необхідно виконати формування рухів по взаєморозрахунках з партнерами.'");
		КонецЕсли;
		Если ОшибкиРасчета.Свойство("РасчетыСПартнерами") Тогда 
			Элементы.РасчетыСПартнерами.Гиперссылка = Истина;
		Иначе
			Элементы.РасчетыСПартнерами.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаРасчетыСПартнерамиОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РасчетыСПартнерами.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПоУчетуНДС(Отказ, ПараметрыРасчета)
	
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеОперацииПоУчетуНДС(ПараметрыОформления)
	
	Элементы.ГруппаПомощникПоУчетуНДСОбщая.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловныеПродажи(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	ИначеЕсли ПараметрыРасчета.Статус = "ОжидаетВыполненияПредыдущихОпераций" Тогда
		Возврат
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Период, Организация", Объект.ПериодРегистрации, Объект.Организация);
	ИмяФормыРасчета = "Обработка.НДСФормированиеУсловныхПродаж.Форма.Форма";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеУсловныеПродажи(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда	
		ПояснениеУсловныеПродажи = НСтр("ru='Требуется сформировать налоговые документы по условным продажам';uk='Потрібно сформувати податкові документи по умовних продажах'");
		Элементы.УсловныеПродажи.Гиперссылка = Истина;
		Элементы.ГруппаУсловныеПродажиОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.УсловныеПродажи.Имя);
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
		ПояснениеУсловныеПродажи = НСтр("ru='Необходимо расчитать себестоимость для заполнения регистра по условным продажам';uk='Необхідно розрахувати собівартість для заповнення регістра по умовним продажам'");
		Элементы.УсловныеПродажи.Гиперссылка = Истина;
		Элементы.ГруппаУсловныеПродажиОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.УсловныеПродажи.Имя);
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками Тогда
		ПояснениеУсловныеПродажи = НСтр("ru='Есть расхождения учетной суммы НДС и в сформированных документах';uk='Є розбіжності облікової суми ПДВ і в сформованих документах'");
		Элементы.ГруппаУсловныеПродажиОбщая.Видимость = Истина;
		Элементы.УсловныеПродажи.Гиперссылка = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.УсловныеПродажи.Имя);
	ИначеЕсли ПараметрыОформления.Статус = Неопределено Тогда
		Элементы.ГруппаУсловныеПродажиОбщая.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ГруппаУсловныеПродажиОбщая.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Затраты


&НаКлиенте
Процедура РаспределениеРБП(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", Объект.Организация, Объект.ПериодРегистрации);
	ИмяФормыРасчета = "Документ.РаспределениеРасходовБудущихПериодов.Форма.ФормаСпискаДокументов";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРаспределениеРБП(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеРаспределениеРБП = НСтр("ru='Существуют не распределенные расходы будущих периодов.';uk='Існують нерозподілені витрати майбутніх періодів.'");
		Элементы.ГруппаРаспределениеРБПОбщая.Видимость = Истина;
		УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РаспределениеРБП.Имя);
	Иначе
		Элементы.ГруппаРаспределениеРБПОбщая.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоКредитамДепозитам(Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Период", Объект.ПериодРегистрации);
	ИмяФормыРасчета = "Документ.НачисленияКредитовИДепозитов.Форма.ФормаСписка";
	РассчитатьЭтапВручную(ИмяФормыРасчета, ПараметрыФормы, ПараметрыРасчета);
КонецПроцедуры

&НаСервере
Процедура ОформлениеНачисленияПоКредитамДепозитам(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется 
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаНачисленияПоКредитамДепозитамОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеНачисленияПоКредитамДепозитамЗаймам = НСтр("ru='Существуют договора кредитов, депозитов или займов, по которым не выполнено начисление.';uk='Існують договору кредитів, депозитів або позик, за якими не виконано нарахування.'");
	Иначе
		Элементы.ГруппаНачисленияПоКредитамДепозитамОбщая.Видимость = Истина;
	КонецЕсли;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.НачисленияПоКредитамДепозитам.Имя);
КонецПроцедуры

&НаКлиенте
Процедура АннулированиеПодарочныхСертификатов(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru='аннулирование подарочных сертификатов.';uk='анулювання подарункових сертифікатів.'");
	ПараметрыРасчета.Вставить("СписокОрганизаций", СписокДоступныхОрганизаций);
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеАннулированиеПодарочныхСертификатов(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаАннулированиеПодарочныхСертификатовОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ПояснениеАннулированиеПодарочныхСертификатов = НСтр("ru='Необходимо выполнить аннулирование подарочных сертификатов.';uk='Необхідно виконати анулювання подарункових сертифікатів.'");
		Если ОшибкиРасчета.Свойство(ПараметрыОформления.ИмяЭтапа) Тогда 
			Элементы.АннулированиеПодарочныхСертификатов.Гиперссылка = Истина;
		Иначе
			Элементы.АннулированиеПодарочныхСертификатов.Гиперссылка = Ложь;
		КонецЕсли;
	Иначе
		Элементы.АннулированиеПодарочныхСертификатов.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаАннулированиеПодарочныхСертификатовОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.АннулированиеПодарочныхСертификатов.Имя);
КонецПроцедуры


#КонецОбласти


#Область Себестоимость

&НаКлиенте
Процедура РасчетПартийТоваров(ИмяЭтапа, РасчетВФоне, Отказ)
	Если Не АктивноЗаданиеРасчетаПартий() Тогда
		КРасчету = Новый Массив();
		КРасчету.Добавить(ИмяЭтапа);
		ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
		ЭтапРассчитываемыйВФоне = НСтр("ru='расчет себестоимости.';uk='розрахунок собівартості.'");
		РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьЗавершениеРасчетаПартий", 1);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеПартииТоваров(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется
	Тогда
		Элементы.ГруппаПартииТоваровОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Если ОшибкиРасчета.Свойство("ПартииТоваров") Тогда 
			Элементы.ПартииТоваров.Гиперссылка = Истина;
		Иначе
			Элементы.ПартииТоваров.Гиперссылка = Ложь;
		КонецЕсли;
		ПояснениеФормированиеДвиженийПоПартиямТоваров = 
			НСтр("ru='Формирование движений не выполнялось или при распределении партий товаров возникли ошибки.';uk='Формування рухів не виконувалося або при розподілі партій товарів виникли помилки.'");
	Иначе
		Элементы.ПартииТоваров.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаПартииТоваровОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПартииТоваров.Имя);
КонецПроцедуры



&НаКлиенте
Процедура РасчетСебестоимости(ИмяЭтапа, РасчетВФоне, Отказ, ПараметрыРасчета)
	Если Не ПараметрыРасчета.РучнойЗапуск И РезультатыРасчетов.Свойство("ПартииТоваров") Тогда
		Возврат;
	КонецЕсли;
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ПараметрыРасчета.Вставить("РучнойЗапуск", Истина);
	ЭтапРассчитываемыйВФоне = НСтр("ru='расчет себестоимости.';uk='розрахунок собівартості.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеРасчетСебестоимости(ПараметрыОформления)
	Если ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Элементы.Себестоимость.Гиперссылка = Ложь;
		Если СкрыватьЭтапыСоСтатусомНеТребуется Тогда
			Элементы.ГруппаСебестоимостьОбщая.Видимость = Ложь;
			Возврат;
		КонецЕсли;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		Элементы.Себестоимость.Гиперссылка = Ложь;
	Иначе
		Элементы.Себестоимость.Гиперссылка = ?(РезультатыРасчетов.Свойство("Себестоимость") ИЛИ РезультатыРасчетов.Свойство("ПартииТоваров"), Истина, Ложь);
		ПояснениеРасчетСебестоимости = НСтр("ru='Необходимо ввести документ расчета себестоимости с вариантом расчета - фактический.';uk='Необхідно ввести документ розрахунку собівартості з варіантом розрахунку - фактичний.'");
	КонецЕсли;
	Элементы.ГруппаСебестоимостьОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.Себестоимость.Имя);
	

КонецПроцедуры

#КонецОбласти

#Область ФинансовыйРезультат

&НаКлиенте
Процедура ПереоценкаДенежныхСредств(ИмяЭтапа, РасчетВФоне, Отказ)
	КРасчету = Новый Массив();
	КРасчету.Добавить(ИмяЭтапа);
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
	ЭтапРассчитываемыйВФоне = НСтр("ru='переоценка денежных средств.';uk='переоцінка грошових коштів.'");
	РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
КонецПроцедуры

&НаСервере
Процедура ОформлениеПереоценкаДенежныхСредств(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаПереоценкаДенежныхСредствОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.ПереоценкаДенежныхСредств.Гиперссылка = Истина;
		ПояснениеПереоценкаДенежныхСредств = НСтр("ru='Необходимо выполнить переоценку остатков денежных средств.';uk='Необхідно виконати переоцінку залишків грошових коштів.'");
	Иначе
		Элементы.ПереоценкаДенежныхСредств.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаПереоценкаДенежныхСредствОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.ПереоценкаДенежныхСредств.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоходовРасходовПоНаправлениям(ИмяЭтапа, РасчетВФоне, Отказ)
	Если УчитыватьПрочиеДоходыИРасходы И (ФормироватьФинансовыйРезультат ИЛИ БазоваяВерсия) Тогда
		КРасчету = Новый Массив();
		КРасчету.Добавить(ИмяЭтапа);
		ПараметрыРасчета = ИнициализироватьПараметрыРасчета();
		ЭтапРассчитываемыйВФоне = НСтр("ru='распределение доходов и расходов по направлениям деятельности.';uk='розподіл доходів і витрат за напрямами діяльності.'");
		РассчитатьЭтапВФоновомЗадании(КРасчету, ПараметрыРасчета, РасчетВФоне, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформлениеРаспределениеДоходовРасходов(ПараметрыОформления)
	Если (ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется
		И СкрыватьЭтапыСоСтатусомНеТребуется) ИЛИ ПараметрыОформления.Свойство("Скрыть")
	Тогда
		Элементы.ГруппаРаспределениеДоходовРасходовОбщая.Видимость = Ложь;
		Возврат;
	ИначеЕсли ПараметрыОформления.Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Элементы.РаспределениеДоходовРасходов.Гиперссылка = Истина;
		ПояснениеРаспределениеДоходовИРасходовПоНаправлениям = НСтр("ru='Необходимо выполнить распределение доходов и расходов по направлениям деятельности.';uk='Необхідно виконати розподіл доходів і видатків за напрямами діяльності.'");
	ИначеЕсли ПараметрыОформления.Статус = Неопределено Тогда
		Элементы.ГруппаРаспределениеДоходовРасходовОбщая.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.РаспределениеДоходовРасходов.Гиперссылка = Ложь;
	КонецЕсли;
	Элементы.ГруппаРаспределениеДоходовРасходовОбщая.Видимость = Истина;
	УстановитьКартинкуСтатусаЭтапа(ПараметрыОформления.Статус, Элементы.РаспределениеДоходовРасходов.Имя);
КонецПроцедуры

#КонецОбласти


#Область РеглУчет


#КонецОбласти


#КонецОбласти

#КонецОбласти

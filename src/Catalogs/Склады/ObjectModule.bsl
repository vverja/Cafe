#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ЗаписьСОграниченнымиПравами;

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ЗаписьСОграниченнымиПравами = Не ПравоДоступа("Добавление", ЭтотОбъект.Метаданные());

	Если ЗаписьСОграниченнымиПравами Тогда

		//Проверка программной записи объекта.
		УправлениеДоступомУТ.ПроверитьДопустимостьИзмененияРеквизитовСправочника(ЭтотОбъект, "Наименование", Отказ);

		//Есть доступ только на изменение отдельных реквизитов склада (роль "ИзменениеНастроекОбеспеченияПоСкладу")
		//дополнительные обработки данных склада выполнять не требуется.
		Возврат;

	КонецЕсли;

	Если Не ЭтоГруппа Тогда

		ЗаполнитьВыборГруппыТекущегоСклада();
		ОбновитьФлагИспользованияСерий();
		ОбновитьФлагКонтроляОперативныхОстатков();
		
		СкладыКлиентСервер.СогласоватьЗначенияПризнаков(ЭтотОбъект);

	КонецЕсли;
	
	Если Не ЭтоНовый()
		И Не ЭтоГруппа Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления,ИспользоватьАдресноеХранение,ИспользоватьАдресноеХранениеСправочно");
		Если ПометкаУдаления <> РеквизитыОбъекта.ПометкаУдаления Тогда
			Справочники.КлючиАналитикиУчетаНоменклатуры.УстановитьПометкуУдаления(Новый Структура("Склад", Ссылка), ПометкаУдаления);
		КонецЕсли;
		Если НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения Тогда
			ИспользоватьАдресноеХранение          = РеквизитыОбъекта.ИспользоватьАдресноеХранение;
			ИспользоватьАдресноеХранениеСправочно = РеквизитыОбъекта.ИспользоватьАдресноеХранениеСправочно;
		КонецЕсли;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		УстановитьПривилегированныйРежим(Истина);
 		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка <> &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьНесколькоСкладов.Установить(Истина);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаписьСОграниченнымиПравами Тогда
		//Есть доступ только на изменение отдельных реквизитов склада (роль "ИзменениеНастроекОбеспеченияПоСкладу")
		//доплнительные обработки данных склада выполняются частично.
		УстановитьНастройкуОбеспечения(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		
		ЗаполнитьВыборГруппыПодчиненныхСкладов(Отказ);
		
	Иначе
		
		УстановитьНастройкуОбеспечения(ЭтотОбъект);
		ДобавитьСкладВТЧПолитикиУчетаСерийВидовНоменклатуры();
		РегистрыСведений.НастройкиАдресныхСкладов.УстановитьНастройкиПоУмолчанию(Ссылка,
																				Справочники.СкладскиеПомещения.ПустаяСсылка(),
																				ИспользоватьАдресноеХранение,
																				ДатаНачалаАдресногоХраненияОстатков,
																				ИспользоватьАдресноеХранениеСправочно,
																				ИспользованиеРабочихУчастков = Перечисления.ИспользованиеСкладскихРабочихУчастков.Использовать);
		
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	УстановитьЗначениеФОИспользоватьОтветственноеХранение();
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа 
		Или Не ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка КАК Ссылка,
	|	ВидыНоменклатурыПолитикиУчетаСерий.НомерСтроки КАК НомерСтроки 
	|ИЗ
	|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|ГДЕ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И НЕ ВидыНоменклатурыПолитикиУчетаСерий.Ссылка.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры";
	
	Запрос.УстановитьПараметр("Склад", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидНоменклатурыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидНоменклатурыОбъект.ПолитикиУчетаСерий.Удалить(ВидНоменклатурыОбъект.ПолитикиУчетаСерий[Выборка.НомерСтроки - 1]);
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаполнениеТЧПолитикиУчетаСерий");
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаИспользованияСерий");
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
		ВидНоменклатурыОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Не ЭтоГруппа Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
			РозничныйВидЦены = Ценообразование.ВидЦеныПрайсЛист();
			УчетныйВидЦены = РозничныйВидЦены;
			ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
		КонецЕсли;
		Если ДанныеЗаполнения <> Неопределено И ДанныеЗаполнения.Свойство("ТипСклада") Тогда
			ТипСклада = ДанныеЗаполнения.ТипСклада;
		Иначе
			Если ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") Тогда
				ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
			Иначе
				ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеЗаполнения <> Неопределено И ДанныеЗаполнения.Свойство("Группа") Тогда
			Родитель = ДанныеЗаполнения.Группа;
		КонецЕсли;
		
		Если НоменклатураСервер.ЕстьВидНоменклатурыТребующийОбязательностиОрдернойСхемыПоИзлишкамНедостачам() Тогда
			ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если Не ЭтоГруппа Тогда
		
		Если (ТипСклада <> Перечисления.ТипыСкладов.РозничныйМагазин
			Или ЗначениеЗаполнено(РозничныйВидЦены) ) Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("РозничныйВидЦены");
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("ВыборГруппы");
		
	Иначе
		
		ПроверитьКорректностьВыбораГруппыРодителя(Отказ);
		
	КонецЕсли;
	
	Если Не ЭтоГруппа И НЕ СкладОтветственногоХранения Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидПоклажедержателя");
		МассивНепроверяемыхРеквизитов.Добавить("Поклажедержатель");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(КопируемыйОбъект)
	
	Если Не КопируемыйОбъект.ЭтоГруппа Тогда
		ИспользоватьСерииНоменклатуры = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура ЗаполнитьВыборГруппыПодчиненныхСкладов(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Родитель = &Ссылка
		|	И НЕ Склады.ЭтоГруппа
		|	И Склады.ВыборГруппы <> &ВыборГруппыСкладов";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Элемент%. %ОписаниеОшибки%';uk='Не вдалося заблокувати %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки;
			
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			
			Объект.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Элемент%. %ОписаниеОшибки%';uk='Не вдалося записати %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыборГруппыТекущегоСклада()
	
	Если Не ЗначениеЗаполнено(Родитель) Или
		(Не ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки")) Тогда
		
		ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить;
		
	Иначе
		
		ВыборГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ВыборГруппы");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьВыбораГруппыРодителя(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Родитель
		|	И Склады.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных)
		|	И &ВыборГруппыСкладов =  ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)";
		
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
			ТекстОшибки = НСтр("ru='Запрещено указывать значение ""Разрешить в заказах"", если в вышестоящей группе складов указано значение ""Разрешить в заказах и накладных""';uk='Заборонено вказувати значення ""Дозволити в замовленнях"", якщо у групі складів вищого рівня вказано параметр ""Дозволити в замовленнях і накладних""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ВыборГруппы",
			,
			Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьФлагИспользованияСерий()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ПропуститьОбновлениеФлагаИспользованияСерий") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ИспользоватьСерииНоменклатуры  = Ложь;
		УчитыватьСебестоимостьПоСериям = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ИспользоватьСерииНоменклатуры) КАК ИспользоватьСерииНоменклатуры,
	|	МАКСИМУМ(ВложенныйЗапрос.УчитыватьСебестоимостьПоСериям) КАК УчитыватьСебестоимостьПоСериям
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК ИспользоватьСерииНоменклатуры,
	|		ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ) КАК УчитыватьСебестоимостьПоСериям
	|	ИЗ
	|		Справочник.Склады КАК Склады
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ПО Склады.Ссылка = ПолитикиУчетаСерий.Склад
	|	ГДЕ
	|		Склады.Ссылка = &Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИСТИНА,
	|		ВидыНоменклатуры.ПолитикаУчетаСерийДляСкладов.УчитыватьСебестоимостьПоСериям
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	ГДЕ
	|		ВидыНоменклатуры.ЕдинаяНастройкаСерийДляСкладов) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("Склад", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ИспользоватьСерииНоменклатуры  = Выборка.ИспользоватьСерииНоменклатуры;
	УчитыватьСебестоимостьПоСериям = Выборка.УчитыватьСебестоимостьПоСериям;
	
КонецПроцедуры

Процедура ОбновитьФлагКонтроляОперативныхОстатков()
	Если ДополнительныеСвойства.Свойство("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|	КОНЕЦ КАК КонтролироватьОперативныеОстатки
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО Склады.Ссылка = ПолитикиУчетаСерий.Склад
	|ГДЕ
	|	Склады.Ссылка = &Склад";
	Запрос.УстановитьПараметр("Склад", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.КонтролироватьОперативныеОстатки Тогда
		КонтролироватьОперативныеОстатки = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСкладВТЧПолитикиУчетаСерийВидовНоменклатуры()
	
	Если ДополнительныеСвойства.ЭтоНовый
		И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ЕдинаяНастройкаСерийДляСкладов
		|	И НЕ ВидыНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
		|	И ВидыНоменклатуры.ИспользоватьСерии";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ВидОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			НоваяСтрока = ВидОбъект.ПолитикиУчетаСерий.Добавить();
			НоваяСтрока.Склад 				= Ссылка;
			НоваяСтрока.ПолитикаУчетаСерий  = ВидОбъект.ПолитикаУчетаСерийДляСкладов;
			
			ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаполнениеТЧПолитикиУчетаСерий");
			ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаИспользованияСерий");
			ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
			
			ВидОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура УстановитьНастройкуОбеспечения(Объект)

	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения) Тогда
		РегистрыСведений.НастройкаКонтроляОбеспечения.УстановитьНастройку(Объект.Ссылка, Объект.КонтролироватьОбеспечение);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЗначениеФОИспользоватьОтветственноеХранение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеОпции = Константы.ИспользоватьОтветственноеХранение.Получить();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьОтвСклад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.СкладОтветственногоХранения");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() = ЗначениеОпции Тогда
		Константы.ИспользоватьОтветственноеХранение.Установить(НЕ ЗначениеОпции);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
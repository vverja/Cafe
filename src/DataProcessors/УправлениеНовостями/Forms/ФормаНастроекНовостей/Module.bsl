#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() <> Истина Тогда
		Отказ = Истина;
		СтандартнаяОбработка= Ложь;
		Возврат;
	КонецЕсли;

	ЭтаФорма.ЛентыНовостей.Параметры.УстановитьЗначениеПараметра("Надпись_ОтключеноОбновлениеЧерезИнтернет", НСтр("ru='(отключено обновление через интернет)';uk='(відключено оновлення через інтернет)'"));
	ЭтаФорма.ЛентыНовостей.Параметры.УстановитьЗначениеПараметра("Надпись_СоздаютсяНапрямуюВСправочнике", НСтр("ru='Создаются напрямую в справочнике';uk='Створюються безпосередньо у довіднику'"));
	ЭтаФорма.ЛентыНовостей.Параметры.УстановитьЗначениеПараметра("Надпись_ЗагружаютсяИзФайла", НСтр("ru='Загружаются из файла';uk='Завантажуються з файлу'"));
	ЭтаФорма.ЛентыНовостей.Параметры.УстановитьЗначениеПараметра("Надпись_ЗагружаютсяЧерезИнтернетПоПротоколу", НСтр("ru='Загружаются через интернет по протоколу';uk='Завантажуються через інтернет по протоколу'"));

	ЭтаФорма.СписокОбновляемыхДанных.Параметры.УстановитьЗначениеПараметра("Надпись_СписокЗначенийКлассификатора", НСтр("ru='Список значений классификатора';uk='Список значень класифікатора'"));
	ЭтаФорма.СписокОбновляемыхДанных.Параметры.УстановитьЗначениеПараметра("Надпись_ТребуетсяОбновление", НСтр("ru='Требуется обновление';uk='Потрібне оновлення'"));
	ЭтаФорма.СписокОбновляемыхДанных.Параметры.УстановитьЗначениеПараметра("Надпись_ДанныеАктуальны", НСтр("ru='Данные актуальны';uk='Дані актуальні'"));

	// Если работаем в модели сервиса и зашли с разделением, то запретить работать с этой формой.
	// Если работаем в модели сервиса и зашли без разделения, то разрешать работать с этой формой только пользователя
	//    с ролями АдминистраторСистемы и ПолныеПрава.

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем без разделения (и не вошли в область данных).
		Если ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			Если РольДоступна(Метаданные.Роли.АдминистраторСистемы)
					И РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
				// Только (АдминистраторСистемы + ПолныеПрава) может работать в неразделенном режиме.
			Иначе
				ЭтаФорма.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;

	// Форма может открываться на определенной закладке.
	ТекущаяСтраница = Параметры.ТекущаяСтраница;
	НайденнаяСтраница = Элементы.Найти(ТекущаяСтраница);
	Если (НайденнаяСтраница <> Неопределено)
			И (ТипЗнч(НайденнаяСтраница) = Тип("ГруппаФормы")) Тогда
		Если НайденнаяСтраница.Видимость = Ложь Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ЭтаФорма.ТекущийЭлемент = НайденнаяСтраница;
	КонецЕсли;

	// Заголовок формы можно заменить с помощью передаваемых параметров.
	Если НЕ ПустаяСтрока(Параметры.ЗаголовокФормы) Тогда
		ЭтаФорма.Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;

	// Загрузить все административные настройки.
	// Пользовательские настройки здесь не настраиваются (НастройкиПоказаНовостей, ОтборыПоЛентамНовостейПользовательские).
	НастройкиПоказаНовостейНастроенныеАдминистратором = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостейНастроенныеАдминистратором");
	ЭтаФорма.СписокНовостей_ИнтервалАвтообновления = НастройкиПоказаНовостейНастроенныеАдминистратором.СписокНовостей_ИнтервалАвтообновления;

	НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПолученияНовостей",
		,
		,
		""); // Для всех пользователей
	ЭтаФорма.ВебСервисыТаймаутСоединенияСекунд             = НастройкиПолученияНовостей.ВебСервисыТаймаутСоединенияСекунд;
	ЭтаФорма.ВебСервисыКоличествоПопытокСоединения         = НастройкиПолученияНовостей.ВебСервисыКоличествоПопытокСоединения;
	ЭтаФорма.HTTPСоединениеТаймаутСоединенияСекунд         = НастройкиПолученияНовостей.HTTPСоединениеТаймаутСоединенияСекунд;
	ЭтаФорма.HTTPСоединениеКоличествоПопытокСоединения     = НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения;
	ЭтаФорма.HTTPСоединениеКоличествоПопытокПолученияФайла = НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла;

	НастройкиАвтоудаленияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиАвтоудаленияНовостей",
		,
		,
		""); // Для всех пользователей
	ЭтаФорма.АвтоудалениеНовостей_Актуальные_Месяцев        = НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Актуальные_Месяцев;
	ЭтаФорма.АвтоудалениеНовостей_Неактуальные_Дней         = НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Неактуальные_Дней;
	ЭтаФорма.АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней = НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней;
	ЭтаФорма.АвтоудалениеНовостей_СтараяВерсия_Дней         = НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_СтараяВерсия_Дней;
	Если ЭтаФорма.АвтоудалениеНовостей_Актуальные_Месяцев <= 0 Тогда
		ЭтаФорма.АвтоудалениеНовостей_Актуальные_Включить = Ложь;
	Иначе
		ЭтаФорма.АвтоудалениеНовостей_Актуальные_Включить = Истина;
	КонецЕсли;

	НастройкиЖурналаРегистрации = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиЖурналаРегистрации",
		,
		,
		""); // Для всех пользователей
	ЭтаФорма.ЖурналРегистрации_ПодробнаяЗапись = НастройкиЖурналаРегистрации.ЖурналРегистрации_ПодробнаяЗапись;

	// Справочник Пользователи используется независимо по областям данных, поэтому невозможно настроить пользователям
	//  настройки в модели сервиса в НЕразделенном режиме.
	//  Поэтому, чтобы не делать разные формы, настройки пользователей в модели сервиса НЕ настраиваются.

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда

		Элементы.СтраницаНастройкаПользователей.Видимость = Ложь;

	Иначе

		Элементы.СтраницаНастройкаПользователей.Видимость = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка                                    КАК Пользователь,
			|	Спр.ИдентификаторПользователяИБ               КАК ИдентификаторПользователяИБ,
			|	ЛОЖЬ                                          КАК НайденВ_ИБ,
			|	ЕСТЬNULL(Рег.РазрешенаНастройкаОтборов, ЛОЖЬ) КАК РазрешенаНастройкаОтборов
			|ИЗ
			|	Справочник.Пользователи КАК Спр
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.НастройкиПользователейБИП КАК Рег
			|	ПО
			|		Рег.Пользователь = Спр.Ссылка
			|ГДЕ
			|	Спр.Недействителен    = ЛОЖЬ
			|	И Спр.Служебный       = ЛОЖЬ
			|	И Спр.ПометкаУдаления = ЛОЖЬ
			|";

		Результат = Запрос.Выполнить(); // УправлениеНовостями.ФормаНастроекНовостей.ПриСозданииНаСервере()
		Если НЕ Результат.Пустой() Тогда
			ЭтаФорма.НастройкиОтборовПользователями.Загрузить(Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой));
			// В справочнике Пользователей могут быть элементы, не привязанные к пользователям, настроенным в конфигураторе.
			// Поэтому необходимо провести дополнительную проверку на наличие такого пользователя в списке пользователей (из конфигуратора).
			УстановитьПривилегированныйРежим(Истина);
				Для Каждого ТекущийПользователь Из ЭтаФорма.НастройкиОтборовПользователями Цикл
					НайденныйПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
					ТекущийПользователь.НайденВ_ИБ = (НайденныйПользователь <> Неопределено);
				КонецЦикла;
				БылиУдаления = Истина;
				Пока БылиУдаления = Истина Цикл
					БылиУдаления = Ложь;
					Для Каждого ТекущийПользователь Из ЭтаФорма.НастройкиОтборовПользователями Цикл
						Если ТекущийПользователь.НайденВ_ИБ = Ложь Тогда
							ЭтаФорма.НастройкиОтборовПользователями.Удалить(ТекущийПользователь);
							БылиУдаления = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;

	КонецЕсли;

	// Журнал регистрации
	ЭтаФорма.ВозможенЭкспортЖурналаРегистрации = Ложь;
	УстановитьПривилегированныйРежим(Истина);
		МассивУровнейИспользованияЖурналаРегистрации = ПолучитьИспользованиеЖурналаРегистрации();
		Если (МассивУровнейИспользованияЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Ошибка) <> Неопределено)
				И (МассивУровнейИспользованияЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Предупреждение) <> Неопределено)
				И (МассивУровнейИспользованияЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Информация) <> Неопределено)
				И (МассивУровнейИспользованияЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Примечание) <> Неопределено) Тогда
			ЭтаФорма.ВозможенЭкспортЖурналаРегистрации = Истина;
		КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	ЭтаФорма.РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.Получить();
	ЭтаФорма.РазрешенаРаботаСНовостямиЧерезИнтернет = Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Получить();

	ЭтаФорма.ЦветИнформацияОшибочна = ЦветаСтиля.ЦветИнформацияОшибочна;
	ЭтаФорма.ЦветМикротекста        = ЦветаСтиля.ЦветМикротекста;

	Если РольДоступна(Метаданные.Роли.АдминистраторСистемы)
			ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава)Тогда
		Элементы.ЛентыНовостейКонтекстноеМенюКомандаОткрытьФормуСпискаЛентНовостей.Видимость = Истина;
	Иначе
		Элементы.ЛентыНовостейКонтекстноеМенюКомандаОткрытьФормуСпискаЛентНовостей.Видимость = Ложь;
	КонецЕсли;

	УстановитьУсловноеОформление();

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	Если ЭтаФорма.Модифицированность Тогда
		ЗаписатьВсеНастройкиСервер();
		// Переподключить обработчики обновления новостей.
		ОбработкаНовостейКлиент.ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Новости. Очищена дата последней загрузки новостей" Тогда
		Элементы.ЛентыНовостей.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" Тогда // Из обработки ПанельАдминистрированияБИП
		Если Источник = "РазрешенаРаботаСНовостями" Тогда
			// Вне зависимости от текущего значения константы, просто закрыть форму.
			ЭтаФорма.Модифицированность = Ложь;
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокНовостей_ИнтервалАвтообновленияПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВебСервисыТаймаутСоединенияСекундПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВебСервисыКоличествоПопытокСоединенияПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура HTTPСоединениеТаймаутСоединенияСекундПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура HTTPСоединениеКоличествоПопытокСоединенияПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура HTTPСоединениеКоличествоПопытокПолученияФайлаПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЖурналРегистрации_ПодробнаяЗаписьПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РазрешенаРаботаСНовостямиЧерезИнтернетПриИзменении(Элемент)

	ЭтаФорма.Модифицированность = Истина;
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьНовостиОбработкаНавигационнойСсылки(Элемент, лкНавигационнаяСсылка, СтандартнаяОбработка)

	Если ВРег(лкНавигационнаяСсылка) = ВРег("DeleteNow") Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеОтветаУдалениеНовостей", ЭтаФорма);
		ПоказатьВопрос(
			ОписаниеОповещенияОЗакрытии,
			НСтр("ru='Удалить устаревшие новости?';uk='Вилучити застарілі новини?'"),
			РежимДиалогаВопрос.ДаНет,
			0,
			КодВозвратаДиалога.Нет,
			НСтр("ru='Удаление устаревших новостей вручную';uk='Вилучення застарілих новин вручну'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвтоудалениеНовостей_Актуальные_ВключитьПриИзменении(Элемент)

	Если ЭтаФорма.АвтоудалениеНовостей_Актуальные_Включить = Ложь Тогда
		ЭтаФорма.АвтоудалениеНовостей_Актуальные_Месяцев = 0;
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокОбновляемыхКатегорий

&НаКлиенте
Процедура СписокОбновляемыхКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	// В форме записи можно нажать кнопку "Скопировать" и начать редактировать запись.
	// Чтобы поле было только "для чтения" - запретить открывать форму записи.
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.СписокОбновляемыхДанных.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ВРег(ТекущиеДанные.Список) = ВРег("Список лент новостей") Тогда
			// Перейти на закладку лент новостей.
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройкиЛентНовостей;
		ИначеЕсли ВРег(ТекущиеДанные.Список) = ВРег("Список категорий новостей") Тогда
			// Открыть форму списка категорий.
			ОткрытьФорму(
				"ПланВидовХарактеристик.КатегорииНовостей.ФормаСписка",
				Новый Структура("ОткрытаИзОбработки_УправлениеНовостями", Истина),
				ЭтаФорма,
				"");
		ИначеЕсли ВРег(ТекущиеДанные.ТипСписка) = ВРег("Список значений классификатора") Тогда
			// Открыть форму объекта категории.
			ОткрытьФорму(
				"ПланВидовХарактеристик.КатегорииНовостей.ФормаОбъекта",
				Новый Структура("Ключ, ОткрытаИзОбработки_УправлениеНовостями",
					ТекущиеДанные.Список,
					Истина),
				ЭтаФорма,
				"");
		Иначе
			// Ничего не делать.
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЛентыНовостей

&НаКлиенте
Процедура ЛентыНовостейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если НЕ Элемент.ТекущиеДанные.Ссылка.Пустая() Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(
				"Справочник.ЛентыНовостей.ФормаОбъекта",
				Новый Структура("Ключ, ОткрытаИзОбработки_УправлениеНовостями",
					Элемент.ТекущиеДанные.Ссылка,
					Истина),
				ЭтаФорма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_НастройкиОтборовПользователями

&НаКлиенте
Процедура НастройкиОтборовПользователямиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "НастройкиОтборовПользователямиПользователь" Тогда
		КомандаНастройкиПользователя(Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНастройкиПрокси(Команда)

	// Открыть форму БСП.
	ОткрытьФорму(
		"ОбщаяФорма.ПараметрыПроксиСервера",
		Новый Структура("НастройкаПроксиНаКлиенте",
			Ложь), // Хранить параметры прокси на сервере, т.к. ими будут пользоваться регламентные задания
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьНовости(Команда)

	ФормаСостоянияОперации = ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма.ФормаСостоянияОперации",
		Новый Структура("Заголовок, СостояниеОперации", 
			НСтр("ru='Загрузка новостей';uk='Завантаження новин'"),
			НСтр("ru='Происходит загрузка новостей
                |Это может занять некоторое время...'
                |;uk='Відбувається завантаження новин
                |Це може зайняти деякий час...'")),
		ЭтаФорма,
		"Загрузка новостей");
	ИдентификаторФормыСостоянияОперации = ФормаСостоянияОперации.УникальныйИдентификатор;

	МассивВыделенныхЛентНовостей = Новый Массив;
	Если Команда.Имя = "КомандаЗагрузитьНовостиПоВсемЛентамНовостей" Тогда
	ИначеЕсли Команда.Имя = "КомандаЗагрузитьНовостиПоВыделеннымЛентамНовостей" Тогда
		Для каждого ТекущаяСтрока Из Элементы.ЛентыНовостей.ВыделенныеСтроки Цикл
			МассивВыделенныхЛентНовостей.Добавить(Элементы.ЛентыНовостей.ДанныеСтроки(ТекущаяСтрока).Ссылка);
		КонецЦикла;
	КонецЕсли;

	Если ЭтаФорма.Модифицированность Тогда
		ЗаписатьВсеНастройкиСервер(); // Это необходимо, если была изменена пометка разрешения получения новостей через интернет.
	КонецЕсли;

	ОбработкаНовостейВызовСервера.ПолучитьИОбработатьНовостиПоЛентамНовостей(МассивВыделенныхЛентНовостей);
	Элементы.ЛентыНовостей.Обновить();

	Оповестить(
		"Новости. Операция завершена",
		,
		ИдентификаторФормыСостоянияОперации);

	Оповестить(
		"Новости. Загружены новости",
		,
		ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьСтандартныеСписки(Команда)

	// Открыть форму состояния операции.
	ФормаСостоянияОперации = ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма.ФормаСостоянияОперации",
		Новый Структура("Заголовок, СостояниеОперации", 
			НСтр("ru='Обновление классификаторов с сервера';uk='Оновлення класифікаторів з сервера'"),
			НСтр("ru='Происходит обновление классификаторов с сервера
                |Это может занять некоторое время...'
                |;uk='Відбувається оновлення класифікаторів з сервера
                |Це може зайняти деякий час...'")),
		ЭтаФорма,
		"Загрузка стандартных классификаторов");
	ИдентификаторФормыСостоянияОперации = ФормаСостоянияОперации.УникальныйИдентификатор;

	// 1. Если администратор вручную решил загрузить стандартные списки, значит надо обновить даты актуальности с сервера.
	// При получении новостей срабатывает стандартное получение дат актуальности и обновление списков.
	Оповестить(
		"Новости. Изменился статус операции",
		"Происходит обновление классификаторов с сервера
			|Это может занять некоторое время...
			|
			|Обновление дат актуальности классификаторов",
		ИдентификаторФормыСостоянияОперации);
	ОбновитьДатыАктуальностиСтандартныхСписков();

	// 2. Эта форма сама определяет, какие Справочники необходимо обновить - по регистру сведений, заполненному на шаге 1.
	Оповестить(
		"Новости. Изменился статус операции",
		"Происходит обновление классификаторов с сервера
			|Это может занять некоторое время...
			|
			|Обновление классификаторов",
		ИдентификаторФормыСостоянияОперации);
	Результат = ОбновитьВсеСтандартныеСпискиССервераСервер();

	// 3. Перерисовать списки - классификаторы и ленты новостей.
	Оповестить(
		"Новости. Изменился статус операции",
		"Происходит обновление классификаторов с сервера
			|Это может занять некоторое время...
			|
			|Данные получены.
			|Обновление классификаторов на клиенте...",
		ИдентификаторФормыСостоянияОперации);
	Элементы.СписокОбновляемыхДанных.Обновить();
	Оповестить(
		"Новости. Изменился статус операции",
		"Происходит обновление классификаторов с сервера
			|Это может занять некоторое время...
			|
			|Данные получены.
			|Обновление лент новостей на клиенте...",
		ИдентификаторФормыСостоянияОперации);
	Элементы.ЛентыНовостей.Обновить();

	// Закрыть форму состояния операции.
	Оповестить(
		"Новости. Операция завершена",
		,
		ИдентификаторФормыСостоянияОперации);

КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаОтборовПользователями(Команда)

	Для каждого ТекущаяСтрока Из ЭтаФорма.НастройкиОтборовПользователями Цикл
		Если Команда.Имя = "КомандаНастройкаОтборовПользователями_ВключитьВсе" Тогда
			ТекущаяСтрока.РазрешенаНастройкаОтборов = Истина;
		ИначеЕсли Команда.Имя = "КомандаНастройкаОтборовПользователями_ВыключитьВсе" Тогда
			ТекущаяСтрока.РазрешенаНастройкаОтборов = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиПользователя(Команда)

	Если Элементы.НастройкиОтборовПользователями.ТекущиеДанные <> Неопределено Тогда
		Если ЭтаФорма.Модифицированность Тогда
			ЗаписатьВсеНастройкиСервер(); // Это необходимо, если была изменена пометка разрешения настройки отборов у пользователя.
		КонецЕсли;
		ОткрытьФорму(
			"ХранилищеНастроек.НастройкиНовостей.Форма.ФормаНастройкиПоказаНовостей",
			Новый Структура("ТекущийПользователь, ОткрытаИзОбработки_УправлениеНовостями",
				Элементы.НастройкиОтборовПользователями.ТекущиеДанные.Пользователь,
				Истина),
			ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьДатуЗагрузкиКлассификатора(Команда)

	ТекущиеДанные = Элементы.СписокОбновляемыхДанных.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		МассивВыделенныхКлассификаторов = Новый Массив;
		Для Каждого ТекущаяВыделеннаяСтрока Из Элементы.СписокОбновляемыхДанных.ВыделенныеСтроки Цикл
			МассивВыделенныхКлассификаторов.Добавить(Элементы.СписокОбновляемыхДанных.ДанныеСтроки(ТекущаяВыделеннаяСтрока).Список);
		КонецЦикла;

		ОбработкаНовостейВызовСервера.СбросДатыПоследнейУспешнойЗагрузкиКлассификатора(МассивВыделенныхКлассификаторов);

		// Обновлять формы элементов, только если выделена одна строка.
		Если МассивВыделенныхКлассификаторов.Количество() = 1 Тогда
			Оповестить(
				"Новости. Очищена дата последней загрузки классификатора",
				,
				ТекущиеДанные.Список);
		КонецЕсли;
		Элементы.СписокОбновляемыхДанных.Обновить();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьДатуЗагрузкиНовостей(Команда)

	ТекущиеДанные = Элементы.ЛентыНовостей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		Если Команда.Имя = "КомандаСброситьДатуЗагрузкиНовостей"
				ИЛИ Команда.Имя = "КомандаСброситьДатуЗагрузкиНовостейИУдалитьНовости" Тогда

			МассивВыделенныхЛентНовостей = Новый Массив;
			Для Каждого ТекущаяВыделеннаяСтрока Из Элементы.ЛентыНовостей.ВыделенныеСтроки Цикл
				МассивВыделенныхЛентНовостей.Добавить(ТекущаяВыделеннаяСтрока);
			КонецЦикла;

			Если Команда.Имя = "КомандаСброситьДатуЗагрузкиНовостей" Тогда
				ОбработкаНовостейВызовСервера.СбросДатыПоследнейУспешнойЗагрузкиНовостей(МассивВыделенныхЛентНовостей, Ложь);
			ИначеЕсли Команда.Имя = "КомандаСброситьДатуЗагрузкиНовостейИУдалитьНовости" Тогда
				ОбработкаНовостейВызовСервера.СбросДатыПоследнейУспешнойЗагрузкиНовостей(МассивВыделенныхЛентНовостей, Истина);
			КонецЕсли;

			// Обновлять формы элементов, только если выделена одна строка.
			Если МассивВыделенныхЛентНовостей.Количество() = 1 Тогда
				Оповестить(
					"Новости. Очищена дата последней загрузки новостей",
					,
					ТекущиеДанные.Ссылка);
			Иначе
				Элементы.ЛентыНовостей.Обновить();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуСпискаЛентНовостей(Команда)

	ОткрытьФорму(
		"Справочник.ЛентыНовостей.ФормаСписка",
		Новый Структура("ОткрытаИзОбработки_УправлениеНовостями", Истина),
		ЭтаФорма,
		"",
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)

	Если ЭтаФорма.Модифицированность Тогда
		ЗаписатьВсеНастройкиСервер();
		// Переподключить обработчики обновления новостей.
		ОбработкаНовостейКлиент.ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЭкспортироватьЖурналРегистрации(Команда)

	ПараметрыОткрытия = Новый Структура;
	ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма.ФормаЭкспортаЖурналаРегистрации",
		ПараметрыОткрытия,
		ЭтаФорма,"",
		ВариантОткрытияОкна.ОтдельноеОкно,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Управляет видимостью и доступностью элементов управления.
//
// Параметры:
//  Форма  - Управляемая форма - форма, в которой необходимо установить видимость / доступность.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	лкРазрешенаРаботаСНовостямиЧерезИнтернет = Форма.РазрешенаРаботаСНовостямиЧерезИнтернет;

	Элементы.ГруппаНастройкиПрокси.Доступность                                    = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ГруппаОбновлениеОбщихСписков.Доступность                             = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ГруппаПолучениеНовостей.Доступность                                  = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.КомандаЗагрузитьСтандартныеСписки.Доступность                        = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.КонтекстноеМенюКомандаСброситьДатуЗагрузкиКлассификатора.Доступность = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейГруппаПолучитьНовости.Видимость                         = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКонтекстноеМенюПолучитьНовости.Видимость                = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКонтекстноеМенюГруппаСбросДаты.Видимость                = лкРазрешенаРаботаСНовостямиЧерезИнтернет;

	Элементы.ЛентыНовостейКонтекстноеМенюКомандаЗагрузитьНовостиПоВсемЛентамНовостей.Видимость       = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКомандаЗагрузитьНовостиПоВсемЛентамНовостей.Видимость                      = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКонтекстноеМенюКомандаЗагрузитьНовостиПоВыделеннымЛентамНовостей.Видимость = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКомандаЗагрузитьНовостиПоВыделеннымЛентамНовостей.Видимость                = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.КомандаЗагрузитьСтандартныеСписки.Видимость                                             = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.КонтекстноеМенюКомандаСброситьДатуЗагрузкиКлассификатора.Видимость                      = лкРазрешенаРаботаСНовостямиЧерезИнтернет;

	Элементы.ДекорацияРежимРаботыСНовостямиЧерезИнтернет_ОбновлениеКлассификаторов.Видимость = НЕ лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ДекорацияРежимРаботыСНовостямиЧерезИнтернет_ЛентыНовостей.Видимость             = НЕ лкРазрешенаРаботаСНовостямиЧерезИнтернет;

	Элементы.АвтоудалениеНовостей_Актуальные_Месяцев.Доступность          = Форма.АвтоудалениеНовостей_Актуальные_Включить;
	Элементы.ДекорацияАвтоудалениеНовостей_Актуальные_Месяцев.Доступность = Форма.АвтоудалениеНовостей_Актуальные_Включить;

	Если Форма.АвтоудалениеНовостей_Актуальные_Включить = Истина Тогда
		Элементы.ДекорацияАвтоудалениеНовостей_Актуальные_Включить.ЦветТекста = Форма.ЦветИнформацияОшибочна;
	Иначе
		Элементы.ДекорацияАвтоудалениеНовостей_Актуальные_Включить.ЦветТекста = Форма.ЦветМикротекста;
	КонецЕсли;

	Элементы.КомандаЭкспортироватьЖурналРегистрации.Доступность = Форма.ВозможенЭкспортЖурналаРегистрации И Форма.ЖурналРегистрации_ПодробнаяЗапись;
	Если Элементы.КомандаЭкспортироватьЖурналРегистрации.Доступность Тогда
		Элементы.КомандаЭкспортироватьЖурналРегистрации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы.КомандаЭкспортироватьЖурналРегистрации.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
// Процедура заполняет данными из веб-сервиса регистр сведений ДатыОбновленияСтандартныхСписковНовостей.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьДатыАктуальностиСтандартныхСписков()

	Обработки.УправлениеНовостями.ОбновитьСписокСправочниковИВерсииССервера();

КонецПроцедуры

&НаСервереБезКонтекста
// Функция обновляет все стандартные списки с сервера. Возвращает Истина, если данные были успешно обновлены.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбновитьВсеСтандартныеСпискиССервераСервер()

	Результат = Обработки.УправлениеНовостями.ОбновитьВсеСтандартныеСпискиССервера();

	// Записать в регистр сведений ВсеОбновленияНовостей дату последней успешной загрузки.
	// Если ручная попытка получения классификаторов была не успешна, то не сдвигать время в регистре сведений ВсеОбновленияНовостей.
	Если Результат = Истина Тогда // Успешно
		ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();
		// Сохранить дату последнего выполнения / обновления.
		Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
		Запись.ВидОбновления = "Обновление классификаторов";
		Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
		Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
		Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 24*60*60;
		Запись.Записать(Истина);
	Иначе // Неудача
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
// Процедура сохраняет все настройки.
//
// Параметры:
//  Нет.
//
Процедура ЗаписатьВсеНастройкиСервер()

	НастройкиПоказаНовостейНастроенныеАдминистратором = Новый Структура("СписокНовостей_ИнтервалАвтообновления");
	ЗаполнитьЗначенияСвойств(НастройкиПоказаНовостейНастроенныеАдминистратором, ЭтаФорма);
	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиПоказаНовостейНастроенныеАдминистратором",
		,
		НастройкиПоказаНовостейНастроенныеАдминистратором,
		,
		""); // Для всех пользователей

	НастройкиПолученияНовостей = Новый Структура("ВебСервисыТаймаутСоединенияСекунд, ВебСервисыКоличествоПопытокСоединения,
			|HTTPСоединениеТаймаутСоединенияСекунд, HTTPСоединениеКоличествоПопытокСоединения, HTTPСоединениеКоличествоПопытокПолученияФайла");
	ЗаполнитьЗначенияСвойств(НастройкиПолученияНовостей, ЭтаФорма);
	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиПолученияНовостей",
		,
		НастройкиПолученияНовостей,
		,
		""); // Для всех пользователей

	НастройкиАвтоудаленияНовостей = Новый Структура("АвтоудалениеНовостей_Актуальные_Месяцев, АвтоудалениеНовостей_Неактуальные_Дней,
			|АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней, АвтоудалениеНовостей_СтараяВерсия_Дней");
	ЗаполнитьЗначенияСвойств(НастройкиАвтоудаленияНовостей, ЭтаФорма);
	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиАвтоудаленияНовостей",
		,
		НастройкиАвтоудаленияНовостей,
		,
		""); // Для всех пользователей

	НастройкиЖурналаРегистрации = Новый Структура("ЖурналРегистрации_ПодробнаяЗапись");
	ЗаполнитьЗначенияСвойств(НастройкиЖурналаРегистрации, ЭтаФорма);
	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиЖурналаРегистрации",
		,
		НастройкиЖурналаРегистрации,
		,
		""); // Для всех пользователей

	Для каждого ТекущаяСтрока Из ЭтаФорма.НастройкиОтборовПользователями Цикл
		Запись = РегистрыСведений.НастройкиПользователейБИП.СоздатьМенеджерЗаписи();
		Запись.Пользователь              = ТекущаяСтрока.Пользователь;
		Запись.Прочитать(); // Чтобы не сбросить другие настройки
		Запись.Пользователь              = ТекущаяСтрока.Пользователь;
		Запись.РазрешенаНастройкаОтборов = ТекущаяСтрока.РазрешенаНастройкаОтборов;
		Запись.Записать(Истина);
	КонецЦикла;

	Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(ЭтаФорма.РазрешенаРаботаСНовостямиЧерезИнтернет);
	ОбновитьПовторноИспользуемыеЗначения();

	ЭтаФорма.Модифицированность = Ложь;

КонецПроцедуры

// Процедура устанавливает условное оформление в форме.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// 1. Частота обновления = 0 (обновлять вручную), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Обновлять только вручную';uk='Оновлювати тільки вручну'"));

		// Использование
		Элемент.Использование = Истина;

	// 2. Частота обновления = 1 (Ежедневно), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 1;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Ежедневно';uk='Щодня'"));

		// Использование
		Элемент.Использование = Истина;

	// 3. Частота обновления = 2 (Ежечасно), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 2;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Ежечасно';uk='Щогодини'"));

		// Использование
		Элемент.Использование = Истина;

	// 4. Частота обновления = 3 (Каждые 15 минут), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 3;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Каждые 15 минут';uk='Кожні 15 хвилин'"));

		// Использование
		Элемент.Использование = Истина;

	// 5. Частота обновления = 4 (Каждую минуту), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 4;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Каждую минуту';uk='Кожну хвилину'"));

		// Использование
		Элемент.Использование = Истина;

	// 6. Частота обновления = не требуется, т.к. это локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));

		// Использование
		Элемент.Использование = Истина;

	// 7. Дата последнего обновления = пустая, то вывести текст "никогда не обновлялся".
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбновляемыхДанныхТекущаяВерсияНаКлиенте.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбновляемыхДанных.ТекущаяВерсияНаКлиенте");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = '00010101';

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='никогда не обновлялся';uk='ніколи не оновлювався'"));

		// Использование
		Элемент.Использование = Истина;

	// 8. Запрещена работа через интернет - выделить красным НЕлокальные ленты новостей с протоколом http*.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейИмяФайла.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейПротокол.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейСайт.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейНаименование.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенаРаботаСНовостямиЧерезИнтернет");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.Протокол");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = "file";

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.ЛентыНовостей.Шрифт, , , Истина)); // Жирный

		// Использование
		Элемент.Использование = Истина;

	// 9. Убрать колонку "ЛентыНовостейОбновлениеОтключено" если лента локальная, или включено обновление через интернет, или протокол file.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейОбновлениеОтключено.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенаРаботаСНовостямиЧерезИнтернет");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.Протокол");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "file";

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

		// Использование
		Элемент.Использование = Истина;

	// 10. Убрать колонку "СписокОбновляемыхДанныхТипСписка" если не заполнен СписокОбновляемыхДанных.ТипСписка.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбновляемыхДанныхТипСписка.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбновляемыхДанных.ТипСписка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

		// Использование
		Элемент.Использование = Истина;

	// 11. Убрать колонки "ЛентыНовостейПротокол", "ЛентыНовостейСайт", "ЛентыНовостейИмяФайла" если лента новостей - локальная.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейИмяФайла.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейПротокол.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейСайт.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

		// Использование
		Элемент.Использование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаУдалениеНовостей(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РезультатВыполнения = "";
		ОбработкаНовостейВызовСервера.УдалитьНовости_Ежедневно(РезультатВыполнения);
		ТекстСообщения = НСтр("ru='Результат выполнения:
            |%РезультатВыполнения%'
            |;uk='Результат виконання:
            |%РезультатВыполнения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
		Элементы.ДекорацияУдалитьНовости_РезультатВыполнения.Заголовок = ТекстСообщения;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

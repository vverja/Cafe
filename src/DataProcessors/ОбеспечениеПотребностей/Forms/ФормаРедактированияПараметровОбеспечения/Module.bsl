
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.РассчитыватьСтатистику Тогда

		ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
		КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
		Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(ТекущаяДатаСеанса(),
			ПериодКлассификации, - КоличествоПериодовКлассификации);
		АдресГрафикаРаботы = Обработки.ОбеспечениеПотребностей.СоздатьГрафикВХранилище(
			Период.ДатаНачала, Период.ДатаОкончания, УникальныйИдентификатор);

		ПараметрыРасчетаСтатистики = Новый Структура();
		ПараметрыРасчетаСтатистики.Вставить("ПериодКлассификацииДатаНачала", Период.ДатаНачала);
		ПараметрыРасчетаСтатистики.Вставить("ПериодКлассификацииДатаОкончания", Период.ДатаОкончания);
		ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ПараметрыРасчетаСтатистики.Вставить("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);

		СтатистикаПотребления = Обработки.ОбеспечениеПотребностей.СтатистикаПотребления(
			Параметры.КлючПотребности, ПараметрыРасчетаСтатистики, АдресГрафикаРаботы);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтатистикаПотребления);

		ПериодКлассификацииНачало    = ПараметрыРасчетаСтатистики.ПериодКлассификацииДатаНачала;
		ПериодКлассификацииОкончание = ПараметрыРасчетаСтатистики.ПериодКлассификацииДатаОкончания;

	ИначеЕсли ТипЗнч(Параметры.СтатистикаПотребления) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.СтатистикаПотребления);
		ПериодКлассификации = Константы.ПериодРасчетаТоварныхОграничений.Получить();
		КоличествоПериодовКлассификации = Константы.КоличествоПериодовРасчетаТоварныхОграничений.Получить();
		Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(ТекущаяДата(), ПериодКлассификации, - КоличествоПериодовКлассификации);
		ПериодКлассификацииНачало    = Период.ДатаНачала;
		ПериодКлассификацииОкончание = Период.ДатаОкончания;
		
	КонецЕсли;
	
	СпособУказанияНастройки = "";
	Если Параметры.РежимОткрытия = "Полный" Тогда
		
		// Получение записи регистра Товарные ограничения.
		ЗначениеНастройки = РегистрыСведений.ТоварныеОграничения.ПараметрыПоддержанияЗапасаТовараНаСкладе(Параметры.КлючПотребности);
		СпособУказанияНастройки = ЗначениеНастройки.СпособУказанияНастройки;
		ГруппировкаТоварныхОграничений = ЗначениеНастройки.Группировка;
		МетодОбеспечения  = ЗначениеНастройки.МетодОбеспеченияПотребностей;
		МинимальныйЗапас  = ЗначениеНастройки.МинимальноеКоличествоЗапаса;
		МаксимальныйЗапас = ЗначениеНастройки.МаксимальноеКоличествоЗапаса;
		СтраховойЗапас    = ЗначениеНастройки.СтраховоеКоличествоЗапаса;
		УпаковкаЗаказа    = ЗначениеНастройки.УпаковкаЗаказа;
		ОбеспечениеЗаказовПриПоддержанииЗапаса = ЗначениеНастройки.ОбеспечениеЗаказовПриПоддержанииЗапаса;
		НормаПотребления  = ЗначениеНастройки.НормаПотребления;
		
	КонецЕсли;
	
	Если Параметры.РежимОткрытия = "Полный" Или Параметры.РежимОткрытия = "ТолькоСпособ" Тогда
		//Инициализация способа обеспечения и параметров способа обеспечения.
		ПолучитьИндивидуальныйИУнаследованныйСпособыОбеспеченияНаСервере(Параметры.КлючПотребности);
		СпособИндивидуальныйСтарый = СпособИндивидуальный;
		
		НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
		ПараметрыЦиклаПоставки = СтруктураПараметровЦиклаПоставкиПоСпособуОбеспечения();
		
		Если ЗначениеЗаполнено(СпособУнаследованный) Тогда
			ПараметрыЦиклаПоставки.СпособОбеспечения = СпособУнаследованный;
			Обработки.ОбеспечениеПотребностей.ЗаполнитьРеквизитыСпособаОбеспечения(ПараметрыЦиклаПоставки, НачалоПериода, Истина);
			ПараметрыЦиклаПоставкиПоГрафикуРаботыУнаследованные = ПараметрыЦиклаПоставкиПоГрафикуРаботы(
				Параметры.КлючПотребности, ПараметрыЦиклаПоставки, НачалоПериода);
		Иначе
			ПараметрыЦиклаПоставкиПоГрафикуРаботыУнаследованные = СтруктураПараметровЦиклаПоставкиПоГрафикуРаботы();
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СпособИндивидуальный) Тогда
			ПараметрыЦиклаПоставки.СпособОбеспечения = СпособИндивидуальный;
			Обработки.ОбеспечениеПотребностей.ЗаполнитьРеквизитыСпособаОбеспечения(ПараметрыЦиклаПоставки, НачалоПериода, Истина);
			ПараметрыЦиклаПоставкиПоГрафикуРаботыИндивидуальные = ПараметрыЦиклаПоставкиПоГрафикуРаботы(
				Параметры.КлючПотребности, ПараметрыЦиклаПоставки, НачалоПериода);
		Иначе
			ПараметрыЦиклаПоставкиПоГрафикуРаботыИндивидуальные = СтруктураПараметровЦиклаПоставкиПоГрафикуРаботы();
		КонецЕсли;
		
		ПереключательСпособа = ?(ЗначениеЗаполнено(СпособИндивидуальный), 1, 0);
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КлючПотребности) = Тип("Структура")
		И Параметры.КлючПотребности.Свойство("Номенклатура") Тогда
		
		Номенклатура = Параметры.КлючПотребности.Номенклатура;
		ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Номенклатура, "ЕдиницаИзмерения");
		
	КонецЕсли;
	
	Если Параметры.РежимОткрытия = "ТолькоМетод" Тогда
		
		МетодОбеспечения = Параметры.КлючПотребности.МетодОбеспечения;
		
	КонецЕсли;
	
	// Настройка интерфейса формы.
	
	НастройкаУказанаДляГруппы = СпособУказанияНастройки = "ДЛЯ_ГРУППЫ_ТОВАРОВ"
		Или СпособУказанияНастройки = "ДЛЯ_ХАРАКТЕРИСТИК_ТОВАРА";
	
	Элементы.ГруппаПредупреждениеОЗапретеРедактированияПараметров.Видимость = НастройкаУказанаДляГруппы;
	Элементы.ГруппаМетодОбеспечения.Доступность                             = Не НастройкаУказанаДляГруппы;
	
	Если СпособУказанияНастройки = "ДЛЯ_ГРУППЫ_ТОВАРОВ" Тогда
		
		ШаблонТекста = НСтр("ru='Используются метод и параметры обеспечения, установленные для группы: %1';uk='Використовуються метод і параметри забезпечення, встановлені для групи: %1'");
		Элементы.КартинкаРедактированиеПараметровНедоступно.РасширеннаяПодсказка.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ГруппировкаТоварныхОграничений);
		
	ИначеЕсли СпособУказанияНастройки = "ДЛЯ_ХАРАКТЕРИСТИК_ТОВАРА" Тогда
		
		ШаблонТекста = НСтр("ru='Используются метод и параметры обеспечения, установленные в целом для номенклатуры: %1';uk='Використовуються метод і параметри забезпечення, встановлені в цілому для номенклатури: %1'");
		Элементы.КартинкаРедактированиеПараметровНедоступно.РасширеннаяПодсказка.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Параметры.КлючПотребности.Номенклатура);
		
	КонецЕсли;
	
	Если Параметры.РежимОткрытия = "Полный" Или Параметры.РежимОткрытия = "ТолькоСпособ" Тогда
		//1) Установка заголовка формы.
		ТекстХарактеристика = ?(ЗначениеЗаполнено(Параметры.КлючПотребности.Характеристика),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru=', Характеристика: %1';uk=', Характеристика: %1'"), Параметры.КлючПотребности.Характеристика),
			"");
		
		ТекстСклад = ?(Параметры.КлючПотребности.ЭтоРабота, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=', Склад: %1';uk=', Склад: %1'"), Параметры.КлючПотребности.Склад));
		Элементы.КлючПотребностиСтрокой.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Номенклатура: %1%2%3.';uk='Номенклатура: %1%2%3.'"),
			Параметры.КлючПотребности.Номенклатура, ТекстХарактеристика, ТекстСклад);
			
		//2) Заполнение списка переключателей способа обеспечения.
		Элементы.ПереключательСпособаУнаследованный.СписокВыбора[0].Представление =
			?(Не ЗначениеЗаполнено(СпособУнаследованный),
				НСтр("ru='Не использовать (задавать параметры обеспечения в процессе формирования заказа)';uk='Не використовувати (задавати параметри забезпечення в процесі формування замовлення)'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='""%1"" (настроенный для схемы обеспечения номенклатуры)';uk='""%1"" (налаштований для схеми забезпечення номенклатури)'"), СпособУнаследованный));
	КонецЕсли;
	
	Если Параметры.РежимОткрытия = "Полный" Тогда
		
		Элементы.ОкОтмена.Видимость = Ложь;
		Заголовок = НСтр("ru='Параметры обеспечения потребностей';uk='Параметри забезпечення потреб'");
		
	ИначеЕсли Параметры.РежимОткрытия = "ТолькоСпособ" Тогда
		
		Элементы.ОкОтмена.Видимость = Ложь;
		Элементы.ГруппаМетодОбеспечения.Видимость = Ложь;
		Заголовок = НСтр("ru='Параметры обеспечения потребностей';uk='Параметри забезпечення потреб'");
		
	ИначеЕсли Параметры.РежимОткрытия = "ТолькоМетод" Тогда
		
		ОбеспечениеЗаказовПриПоддержанииЗапаса = Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов;
		Элементы.КлючПотребностиСтрокой.Видимость   = Ложь;
		Элементы.ГруппаСпособОбеспечения.Видимость  = Ложь;
		Элементы.СпособОбеспеченияСтрокой.Видимость = Ложь;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Элементы.ЕдиницаИзмерения.Видимость      = Ложь;
			Элементы.ЕдиницаИзмеренияМин.Видимость   = Ложь;
			Элементы.ЕдиницаИзмеренияМакс.Видимость  = Ложь;
			Элементы.ЕдиницаИзмеренияСтрах.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ЗаписатьЗакрыть.Видимость          = Ложь;
		Элементы.Ок.КнопкаПоУмолчанию               = Истина;
		
		Заголовок = НСтр("ru='Выбор метода обеспечения потребностей';uk='Вибір методу забезпечення потреб'");
		
	КонецЕсли;
	
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	Если Не ИспользоватьУпаковки Тогда
		Элементы.УпаковкаЗаказаЗаголовок.Видимость = Ложь;
		Элементы.СтраницыУпаковкаЗначения.Видимость = Ложь;
	КонецЕсли;
	
	ПраваДоступа = Обработки.ПараметрыОбеспеченияПотребностей.ПраваДоступаНаЗаписьСпособаИлиМетода();
	МассивИменЭлементов = Новый Массив();
	Если Не ПраваДоступа.ВариантыОбеспечения Тогда
		МассивИменЭлементов.Добавить("ГруппаСпособОбеспечения");
	КонецЕсли;
	
	Если Не ПраваДоступа.ТоварныеОграничения Тогда
		МассивИменЭлементов.Добавить("ГруппаМетодОбеспечения");
	КонецЕсли;
	
	Если Не ПраваДоступа.ВариантыОбеспечения И Не ПраваДоступа.ТоварныеОграничения Тогда
		МассивИменЭлементов.Добавить("ФормаЗаписатьИЗакрыть");
		МассивИменЭлементов.Добавить("ФормаЗаписать");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Доступность", Ложь);
	
	ЦветОшибки = Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение;
	ЦветПоясняющейНадписи = Метаданные.ЭлементыСтиля.ПоясняющийТекст.Значение;
	ЦветИзСтиля = Элементы.МинимальныйЗапасСтрокой.ЦветТекста;

	ЗакрыватьПриВыборе = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриПереключенииСпособаОбеспечения();
	ПриПереключенииМетодаОбеспечения();
	РассчитатьЗапасы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НормаПотребленияПриИзменении(Элемент)
	РассчитатьЗапасы();
КонецПроцедуры

&НаКлиенте
Процедура СпособИндивидуальныйПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СпособИндивидуальный)Тогда
		НачалоПериода = НачалоДня(ТекущаяДата());
		ПараметрыЦиклаПоставки = СтруктураПараметровЦиклаПоставкиПоСпособуОбеспечения();
		ПараметрыЦиклаПоставки.СпособОбеспечения = СпособИндивидуальный;
		
		ПараметрыЦиклаПоставкиПоГрафикуРаботыИндивидуальные = ПараметрыЦиклаПоставкиПоГрафикуРаботыВызовСервера(
			Параметры.КлючПотребности, ПараметрыЦиклаПоставки, НачалоПериода)
	Иначе
		ПараметрыЦиклаПоставкиПоГрафикуРаботыИндивидуальные = СтруктураПараметровЦиклаПоставкиПоГрафикуРаботы();
	КонецЕсли;
	
	ПриПереключенииСпособаОбеспечения();
	РассчитатьЗапасы();

КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗаказПодЗаказПриИзменении(Элемент)
	МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ");
	ПриПереключенииМетодаОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательМинМаксПриИзменении(Элемент)
	МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс");
	ПриПереключенииМетодаОбеспечения();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательНаСрокПоНормеПриИзменении(Элемент)
	МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме");
	ПриПереключенииМетодаОбеспечения();
	РассчитатьЗапасы();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательНаСрокПоСтатистикеПриИзменении(Элемент)
	МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике");
	ПриПереключенииМетодаОбеспечения();
	РассчитатьЗапасы();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательСпособаУнаследованныйПриИзменении(Элемент)
	ПереключательСпособа = 0;
	ПриПереключенииСпособаОбеспечения();
	РассчитатьЗапасы();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательСпособаИндивидуальныйПриИзменении(Элемент)
	ПереключательСпособа = 1;
	ПриПереключенииСпособаОбеспечения();
	РассчитатьЗапасы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	Если ЗаписатьНаКлиенте() Тогда
		ЗакрытьНаКлиенте();
		Закрыть(ВыбранноеЗначение());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОкно(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Ок(Команда)

	ВыбранноеЗначение = ВыбранноеЗначение();
	ОповеститьОВыборе(ВыбранноеЗначение);
	Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ВыбранноеЗначение()
	
	ВыбранноеЗначение = Новый Структура();
	ВыбранноеЗначение.Вставить("МетодОбеспеченияПотребностей", МетодОбеспечения);
	ВыбранноеЗначение.Вставить("МинимальноеКоличествоЗапаса", МинимальныйЗапас);
	ВыбранноеЗначение.Вставить("МаксимальноеКоличествоЗапаса", МаксимальныйЗапас);
	ВыбранноеЗначение.Вставить("УпаковкаЗаказа", УпаковкаЗаказа);
	ВыбранноеЗначение.Вставить("СтраховоеКоличествоЗапаса", СтраховойЗапас);
	ВыбранноеЗначение.Вставить("ОбеспечениеЗаказовПриПоддержанииЗапаса", ОбеспечениеЗаказовПриПоддержанииЗапаса);
	ВыбранноеЗначение.Вставить("СреднедневноеПотребление", НормаПотребления);
	
	Возврат ВыбранноеЗначение;
	
КонецФункции

&НаСервере
Процедура ПолучитьИндивидуальныйИУнаследованныйСпособыОбеспеченияНаСервере(КлючПотребности)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Номенклатура   КАК Номенклатура,
		|	&Характеристика КАК Характеристика,
		|	&Склад          КАК Склад
		|ПОМЕСТИТЬ ВтТовары
		|;
		|
		|//////////////////////////////////////
		|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
		+ "ВЫБРАТЬ
		|Таблица.СпособОбеспеченияПотребностей               КАК СпособОбеспеченияПотребностей,
		|Таблица.СпособОбеспеченияПотребностейУнаследованный КАК СпособОбеспеченияПотребностейУнаследованный,
		|Таблица.ИсточникНастройки                           КАК ИсточникНастройки
		|ИЗ
		|	ВтСпособыОбеспечения КАК Таблица";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Склад",          КлючПотребности.Склад);
	Запрос.УстановитьПараметр("Номенклатура",   КлючПотребности.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", КлючПотребности.Характеристика);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ИсточникНастройки = "НоменклатураХарактеристикаСклад" Тогда
			
			СпособИндивидуальный = Выборка.СпособОбеспеченияПотребностей;
			
		КонецЕсли;
		СпособУнаследованный = Выборка.СпособОбеспеченияПотребностейУнаследованный;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыЦиклаПоставкиПоГрафикуРаботы(КлючПотребности, ПараметрыЦиклаПоставки, НачалоПериода)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&СпособОбеспечения    КАК СпособОбеспечения,
	|	&Склад                КАК Склад,
	|	&Номенклатура         КАК Номенклатура,
	|	NULL                  КАК Характеристика,
	|	NULL                  КАК Назначение,
	|	NULL                  КАК Подразделение
	|ПОМЕСТИТЬ Товары
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СпособОбеспечения             КАК СпособОбеспечения,
	|	&ДатаПоставки                  КАК ДатаПоставки,
	|	&ДатаСледующейПоставки         КАК ДатаСледующейПоставки,
	|	&ПлановаяДатаЗаказа            КАК ПлановаяДатаЗаказа,
	|	&ОбеспечиваемыйПериод          КАК ОбеспечиваемыйПериод,
	|	&СрокИсполненияЗаказа          КАК СрокИсполненияЗаказа,
	|	&ФормироватьПлановыеЗаказы     КАК ФормироватьПлановыеЗаказы,
	|	&НаступилаДатаОчередногоЗаказа КАК НаступилаДатаОчередногоЗаказа
	|ПОМЕСТИТЬ СпособыОбеспечения
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|"
	+ Обработки.ОбеспечениеПотребностей.СформироватьТекстЗапросаПорядкаОбеспечения() +
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ПорядокОбеспечения";
	
	Запрос.УстановитьПараметр("Склад",         КлючПотребности.Склад);
	Запрос.УстановитьПараметр("Номенклатура",  КлючПотребности.Номенклатура);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	Запрос.УстановитьПараметр("СпособОбеспечения"            , ПараметрыЦиклаПоставки.СпособОбеспечения);
	Запрос.УстановитьПараметр("ДатаПоставки"                 , ПараметрыЦиклаПоставки.ДатаПоставки);
	Запрос.УстановитьПараметр("ДатаСледующейПоставки"        , ПараметрыЦиклаПоставки.ДатаСледующейПоставки);
	Запрос.УстановитьПараметр("ПлановаяДатаЗаказа"           , ПараметрыЦиклаПоставки.ПлановаяДатаЗаказа);
	Запрос.УстановитьПараметр("ОбеспечиваемыйПериод"         , ПараметрыЦиклаПоставки.ОбеспечиваемыйПериод);
	Запрос.УстановитьПараметр("СрокИсполненияЗаказа"         , ПараметрыЦиклаПоставки.СрокИсполненияЗаказа);
	Запрос.УстановитьПараметр("ФормироватьПлановыеЗаказы"    , ПараметрыЦиклаПоставки.ФормироватьПлановыеЗаказы);
	Запрос.УстановитьПараметр("НаступилаДатаОчередногоЗаказа", ПараметрыЦиклаПоставки.ФормироватьПлановыеЗаказы);
	
	Результат = СтруктураПараметровЦиклаПоставкиПоГрафикуРаботы();
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыЦиклаПоставки);// копируем ошибки из структуры "ПараметрыЦиклаПоставки".
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЦиклаПоставкиОсновногоСпособаОбеспечения()
	
	Возврат ?(ПереключательСпособа = 1, ПараметрыЦиклаПоставкиПоГрафикуРаботыИндивидуальные,
			                            ПараметрыЦиклаПоставкиПоГрафикуРаботыУнаследованные);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровЦиклаПоставкиПоСпособуОбеспечения()
	
	Возврат Новый Структура("СпособОбеспечения,
		|ДатаПоставки, ДатаСледующейПоставки,
		|ОбеспечиваемыйПериод, СрокИсполненияЗаказа,
		|ПлановаяДатаЗаказа, ФормироватьПлановыеЗаказы, НаступилаДатаОчередногоЗаказа,
		|НетГрафикаПоставок, НетПлановойДатыЗаказаПоКалендарю, НетДатыПоставкиПоКалендарю",
		, '00010101', '00010101',
		0, 0,
		'00010101', Ложь, Ложь,
		Ложь, Ложь, Ложь);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровЦиклаПоставкиПоГрафикуРаботы()
	
	Возврат Новый Структура("СрокИсполненияЗаказа, ОбеспечиваемыйПериод,
		|НетГрафикаПоставок, НетПлановойДатыЗаказаПоКалендарю, НетДатыПоставкиПоКалендарю,
		|НетСрокаПоставкиПоКалендарюСклада, НетОбеспечиваемогоПериодаПоКалендарюСклада",
		0, 0,
		Ложь, Ложь, Ложь,
		Ложь, Ложь);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОшибкиЦиклаПоставки(ПараметрыЦиклаПоставки)
	
	Возврат ПараметрыЦиклаПоставки.НетГрафикаПоставок
			Или ПараметрыЦиклаПоставки.НетПлановойДатыЗаказаПоКалендарю
			Или ПараметрыЦиклаПоставки. НетДатыПоставкиПоКалендарю
			Или (ПараметрыЦиклаПоставки.Свойство("НетСрокаПоставкиПоКалендарюСклада")
				И (ПараметрыЦиклаПоставки.НетСрокаПоставкиПоКалендарюСклада
					Или ПараметрыЦиклаПоставки.НетОбеспечиваемогоПериодаПоКалендарюСклада));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстОшибкиЦиклаПоставки(ПараметрыЦиклаПоставки)
	
	Возврат ?(ПараметрыЦиклаПоставки.НетГрафикаПоставок, НСтр("ru='Ошибка. Нет графика поставок по способу обеспечения';uk='Помилка. Немає графіка надходжень за способом забезпечення'"),
			?(ПараметрыЦиклаПоставки.НетПлановойДатыЗаказаПоКалендарю
				Или ПараметрыЦиклаПоставки.НетДатыПоставкиПоКалендарю,
					НСтр("ru='Ошибка расчета даты поставки по способу обеспечения. Заполните календарь предприятия';uk='Помилка розрахунку дати надходження за способом забезпечення. Заповніть календар підприємства'"),
			?(ПараметрыЦиклаПоставки.Свойство("НетСрокаПоставкиПоКалендарюСклада")
				И (ПараметрыЦиклаПоставки.НетСрокаПоставкиПоКалендарюСклада
					Или ПараметрыЦиклаПоставки.НетОбеспечиваемогоПериодаПоКалендарюСклада),
						НСтр("ru='Ошибка расчета даты поставки по способу обеспечения. Заполните календарь работы склада';uk='Помилка розрахунку дати надходження за способом забезпечення. Заповніть календар роботи складу'"), "")));
	
КонецФункции

&НаКлиенте
Функция ФормаЗаполненаВерно()
	
	Если ПереключательСпособа = 1 И Не ЗначениеЗаполнено(СпособИндивидуальный) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Укажите способ обеспечения';uk='Вкажіть спосіб забезпечення'"),,, "СпособИндивидуальный",);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьНаКлиенте(НеПроверятьЗаполнение = Ложь)

	Если Не НеПроверятьЗаполнение И Не ФормаЗаполненаВерно() Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаписатьНаСервере();
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьНаКлиенте()

	ВыбранноеЗначение = Новый Структура("СпособОбеспечения",
		?(ПереключательСпособа = 1, СпособИндивидуальный, СпособУнаследованный));
	ОповеститьОВыборе(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ПриПереключенииСпособаОбеспечения()
	
	Если Параметры.РежимОткрытия = "ТолькоМетод" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыИндивидуальныйСпособ.ТекущаяСтраница = ?(ПереключательСпособа = 1,
		Элементы.СтраницаИспользоватьСпособ,
		Элементы.СтраницаНеИспользоватьСпособ);
		
	Сроки = ПараметрыЦиклаПоставкиОсновногоСпособаОбеспечения();
	
	СпособОбеспеченияСтрокой =
		?(ПереключательСпособа = 1 И Не ЗначениеЗаполнено(СпособИндивидуальный), "",
		?(ЕстьОшибкиЦиклаПоставки(Сроки), ТекстОшибкиЦиклаПоставки(Сроки), 
		?(Сроки.СрокИсполненияЗаказа > 0 И Сроки.ОбеспечиваемыйПериод > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ближайшее поступление (пополнение запаса) ожидается через %1 дн и обеспечивает период %2 дн.';uk='Найближче надходження (поповнення запасу) очікується через %1 дн і забезпечує період %2 дн.'"),
			Сроки.СрокИсполненияЗаказа,
			Сроки.ОбеспечиваемыйПериод),
		?(Сроки.СрокИсполненияЗаказа = 0 И Сроки.ОбеспечиваемыйПериод = 0,
			НСтр("ru='Поступление (пополнение запаса) возможно в любой день, обеспечиваемый период не ограничен.';uk='Надходження (поповнення запасу) можливо в будь-який день, забезпечуваний період не обмежений.'"),
		?(Сроки.СрокИсполненияЗаказа > 0 И Сроки.ОбеспечиваемыйПериод = 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ближайшее поступление (пополнение запаса) ожидается через %1 дн, обеспечиваемый период не ограничен.';uk='Найближче надходження (поповнення запасу) очікується через %1 дн, забезпечуваний період не обмежений.'"),
				Сроки.СрокИсполненияЗаказа),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Поступление (пополнение запаса) возможно в любой день и обеспечивает период %1 дн.';uk='Надходженн (поповнення запасу) можливо в будь-який день і забезпечує період %1 дн.'"),
			Сроки.ОбеспечиваемыйПериод))))));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереключенииМетодаОбеспечения()
	
	Если Параметры.РежимОткрытия = "ТолькоСпособ" Тогда
		Возврат;
	КонецЕсли;
	
	ПереключательЗаказПодЗаказ      = 0;
	ПереключательМинМакс            = 0;
	ПереключательНаСрокПоНорме      = 0;
	ПереключательНаСрокПоСтатистике = 0;
	
	Если МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ") Тогда
		ПереключательЗаказПодЗаказ = 1;
	ИначеЕсли МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс") Тогда
		ПереключательМинМакс = 1;
	ИначеЕсли МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме") Тогда
		ПереключательНаСрокПоНорме = 1;
	Иначе
		//Отрабатываем Метод обеспечения = "ПоддержаниеЗапасаНаСрокПоСтатистике".
		ПереключательНаСрокПоСтатистике = 1;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОбеспечениеЗаказовПриПоддержанииЗапаса) Тогда
		ОбеспечениеЗаказовПриПоддержанииЗапаса = ПредопределенноеЗначение("Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов");
	КонецЕсли;

	//Настраиваем видимость параметров поддержания запаса.
	Если МетодОбеспечения
		= ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ") Тогда
		
		Элементы.СтраницыНормаСреднедневноеЗаголовок.ТекущаяСтраница = Элементы.СтраницаНормаПотребленияЗаголовок;
		Элементы.СтраницыНормаЗначения.ТекущаяСтраница      = Элементы.СтраницаНормаНеИспользуется;
		Элементы.СтраницыМинЗапасЗначения.ТекущаяСтраница   = Элементы.СтраницаМинЗапасНеИспользуется;
		Элементы.СтраницыМаксЗапасЗначения.ТекущаяСтраница  = Элементы.СтраницаМаксЗапасНеИспользуется;
		Элементы.СтраницыСтрахЗапасЗначения.ТекущаяСтраница = Элементы.СтраницаСтрахЗапасНеИспользуется;
		Элементы.СтраницыУчетЗаказов.ТекущаяСтраница        = Элементы.СтраницаУчетЗаказовНеИспользуется;
		
	ИначеЕсли МетодОбеспечения
		= ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс") Тогда
		
		Элементы.СтраницыНормаСреднедневноеЗаголовок.ТекущаяСтраница = Элементы.СтраницаНормаПотребленияЗаголовок;
		Элементы.СтраницыНормаЗначения.ТекущаяСтраница      = Элементы.СтраницаНормаНеИспользуется;
		Элементы.СтраницыМинЗапасЗначения.ТекущаяСтраница   = Элементы.СтраницаМинЗапас;
		Элементы.СтраницыМаксЗапасЗначения.ТекущаяСтраница  = Элементы.СтраницаМаксЗапас;
		Элементы.СтраницыСтрахЗапасЗначения.ТекущаяСтраница = Элементы.СтраницаСтрахЗапасНеИспользуется;
		Элементы.СтраницыУчетЗаказов.ТекущаяСтраница        = Элементы.СтраницаУчетЗаказов;
		
	ИначеЕсли МетодОбеспечения
		= ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме") Тогда
		
		Элементы.СтраницыНормаСреднедневноеЗаголовок.ТекущаяСтраница = Элементы.СтраницаНормаПотребленияЗаголовок;
		Элементы.СтраницыНормаЗначения.ТекущаяСтраница      = Элементы.СтраницаНорма;
		Элементы.СтраницыМинЗапасЗначения.ТекущаяСтраница   = Элементы.СтраницаМинЗапасСтрокой;
		Элементы.СтраницыМаксЗапасЗначения.ТекущаяСтраница  = Элементы.СтраницаМаксЗапасСтрокой;
		Элементы.СтраницыСтрахЗапасЗначения.ТекущаяСтраница = Элементы.СтраницаСтрахЗапас;
		Элементы.СтраницыУчетЗаказов.ТекущаяСтраница        = Элементы.СтраницаУчетЗаказов;
		
	ИначеЕсли МетодОбеспечения
		= ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике") Тогда
		
		Элементы.СтраницыНормаСреднедневноеЗаголовок.ТекущаяСтраница = Элементы.СтраницаСреднедневноеПотреблениеЗаголовок;
		Элементы.СтраницыНормаЗначения.ТекущаяСтраница      = Элементы.СтраницаСреднедневноеПотреблениеСтрокой;
		Элементы.СтраницыМинЗапасЗначения.ТекущаяСтраница   = Элементы.СтраницаМинЗапасСтрокой;
		Элементы.СтраницыМаксЗапасЗначения.ТекущаяСтраница  = Элементы.СтраницаМаксЗапасСтрокой;
		Элементы.СтраницыСтрахЗапасЗначения.ТекущаяСтраница = Элементы.СтраницаСтрахЗапас;
		Элементы.СтраницыУчетЗаказов.ТекущаяСтраница        = Элементы.СтраницаУчетЗаказов;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.СтраницыУпаковкаЗначения.ТекущаяСтраница = Элементы.СтраницаУпаковкаСтрокой;
	Иначе
		Элементы.СтраницыУпаковкаЗначения.ТекущаяСтраница = Элементы.СтраницаУпаковка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗапасы()
	
	РассчитываетсяИндивидуально = НСтр("ru='индивидуальный расчет для номенклатуры';uk='індивідуальний розрахунок для номенклатури'");
	ОшибкаРасчетаЦиклПоставки   = НСтр("ru='ошибка расчета (нет данных графика поставок)';uk='помилка розрахунку (немає даних графіка надходжень)'");
	
	Если Параметры.РежимОткрытия = "ТолькоМетод" Тогда
		МинимальныйЗапасСтрокой = РассчитываетсяИндивидуально;
		МаксимальныйЗапасСтрокой = РассчитываетсяИндивидуально;
		СреднедневноеПотреблениеСтрокой = РассчитываетсяИндивидуально;
		Элементы.МинимальныйЗапасСтрокой.ЦветТекста = ЦветПоясняющейНадписи;
		Элементы.МаксимальныйЗапасСтрокой.ЦветТекста = ЦветПоясняющейНадписи;
		Элементы.СреднедневноеПотреблениеСтрокой.ЦветТекста = ЦветПоясняющейНадписи;
		
		Возврат;
	КонецЕсли;
	
	Сроки = ПараметрыЦиклаПоставкиОсновногоСпособаОбеспечения();
	ЕстьОшибкиЦиклаПоставки = ЕстьОшибкиЦиклаПоставки(Сроки);
	
	Если МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме") Тогда
		
		Если Не ЕстьОшибкиЦиклаПоставки Тогда
			МинимальныйЗапасРасчетный  = Сроки.СрокИсполненияЗаказа * НормаПотребления;
			МаксимальныйЗапасРасчетный = Сроки.ОбеспечиваемыйПериод * НормаПотребления;
		Иначе
			МинимальныйЗапасРасчетный  = 0;
			МаксимальныйЗапасРасчетный = 0;
		КонецЕсли;
		
		МинимальныйЗапасСтрокой =
			?(ЕстьОшибкиЦиклаПоставки, ОшибкаРасчетаЦиклПоставки,
			
			?(НормаПотребления = 0,
				НСтр("ru='задайте норму потребления';uk='задайте норму споживання'"),
			
			?(Сроки.СрокИсполненияЗаказа = 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='0.000 %1 (на 0 дн)';uk='0.000 %1 (на 0 дн)'"),
				ЕдиницаИзмерения),
					
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 %2 (на %3 дн)';uk='%1 %2 (на %3 дн)'"),
				Формат(МинимальныйЗапасРасчетный, "ЧДЦ=3"),
				ЕдиницаИзмерения,
				Сроки.СрокИсполненияЗаказа))));
		
		МаксимальныйЗапасСтрокой =
			?(ЕстьОшибкиЦиклаПоставки, ОшибкаРасчетаЦиклПоставки,
		
			?(НормаПотребления = 0,
				НСтр("ru='задайте норму потребления';uk='задайте норму споживання'"),
				
			?(Сроки.ОбеспечиваемыйПериод = 0,
				НСтр("ru='задайте обеспечиваемый период';uk='задайте забезпечуваний період'"),
					
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 %2 (на %3 дн)';uk='%1 %2 (на %3 дн)'"),
				Формат(МаксимальныйЗапасРасчетный, "ЧДЦ=3"),
				ЕдиницаИзмерения,
				Сроки.ОбеспечиваемыйПериод))));
		
		Элементы.МинимальныйЗапасСтрокой.ЦветТекста = ?(ЕстьОшибкиЦиклаПоставки Или НормаПотребления = 0,
			ЦветОшибки, ЦветИзСтиля);
			
		Элементы.МаксимальныйЗапасСтрокой.ЦветТекста = ?(ЕстьОшибкиЦиклаПоставки Или НормаПотребления = 0
			Или Сроки.ОбеспечиваемыйПериод = 0,
			ЦветОшибки, ЦветИзСтиля);
		
	ИначеЕсли МетодОбеспечения = ПредопределенноеЗначение("Перечисление.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоСтатистике") Тогда
		
		Если Не ЕстьОшибкиЦиклаПоставки Тогда
			МинимальныйЗапасРасчетный  = Сроки.СрокИсполненияЗаказа    * СреднедневноеПотребление;
			МаксимальныйЗапасРасчетный = Сроки.ОбеспечиваемыйПериод    * СреднедневноеПотребление;
		Иначе
			МинимальныйЗапасРасчетный  = 0;
			МаксимальныйЗапасРасчетный = 0;
		КонецЕсли;
		
		МинимальныйЗапасСтрокой =
			?(ЕстьОшибкиЦиклаПоставки, ОшибкаРасчетаЦиклПоставки,
			
			?(СреднедневноеПотребление = 0,
				НСтр("ru='нет потребления по статистике';uk='немає споживання за статистикою'"),
			
			?(Сроки.СрокИсполненияЗаказа = 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='0.000 %1 (на 0 дн)';uk='0.000 %1 (на 0 дн)'"),
				ЕдиницаИзмерения),
				
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 %2 (на %3 дн)';uk='%1 %2 (на %3 дн)'"),
				Формат(МинимальныйЗапасРасчетный, "ЧДЦ=3"),
				ЕдиницаИзмерения,
				Сроки.СрокИсполненияЗаказа))));
		
		МаксимальныйЗапасСтрокой =
			?(ЕстьОшибкиЦиклаПоставки, ОшибкаРасчетаЦиклПоставки,
			
			?(СреднедневноеПотребление = 0,
				НСтр("ru='нет потребления по статистике';uk='немає споживання за статистикою'"),
				
			?(Сроки.ОбеспечиваемыйПериод = 0,
				НСтр("ru='задайте обеспечиваемый период';uk='задайте забезпечуваний період'"),
				
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 %2 (на %3 дн)';uk='%1 %2 (на %3 дн)'"),
				Формат(МаксимальныйЗапасРасчетный, "ЧДЦ=3"),
				ЕдиницаИзмерения,
				Сроки.ОбеспечиваемыйПериод))));
		
		СреднедневноеПотреблениеСтрокой =
			?(ЕстьОшибкиЦиклаПоставки, ОшибкаРасчетаЦиклПоставки,
			
			?(СреднедневноеПотребление = 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='нет статистики за %1 - %2';uk='немає статистики за %1 - %2'"),
				Формат(ПериодКлассификацииНачало,    "ДЛФ=D"),
				Формат(ПериодКлассификацииОкончание, "ДЛФ=D")),
				
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (+/- %2) %3 (статистика за %4 - %5)';uk='%1 (+/- %2) %3 (статистика за %4 - %5)'"),
				Формат(СреднедневноеПотребление, "ЧДЦ=3"),
				Формат(СреднееОтклонение, "ЧДЦ=3; ЧН=0.000"),
				ЕдиницаИзмерения,
				Формат(ПериодКлассификацииНачало,    "ДЛФ=D"),
				Формат(ПериодКлассификацииОкончание, "ДЛФ=D"))));
		
		Элементы.МинимальныйЗапасСтрокой.ЦветТекста = ?(ЕстьОшибкиЦиклаПоставки Или СреднедневноеПотребление = 0,
			ЦветОшибки, ЦветИзСтиля);
			
		Элементы.МаксимальныйЗапасСтрокой.ЦветТекста = ?(ЕстьОшибкиЦиклаПоставки Или СреднедневноеПотребление = 0
			Или Сроки.ОбеспечиваемыйПериод = 0,
			ЦветОшибки, ЦветИзСтиля);
			
		Элементы.СреднедневноеПотреблениеСтрокой.ЦветТекста = ?(СреднедневноеПотребление = 0,
			ЦветОшибки, ЦветИзСтиля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	ПраваДоступа = Обработки.ПараметрыОбеспеченияПотребностей.ПраваДоступаНаЗаписьСпособаИлиМетода();
	Если СпособУказанияНастройки = "ДЛЯ_ХАРАКТЕРИСТИК_ТОВАРА" Или СпособУказанияНастройки = "ДЛЯ_ГРУППЫ_ТОВАРОВ" Тогда
		ПраваДоступа.ТоварныеОграничения = Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ПраваДоступа.ТоварныеОграничения Тогда
			//Запись товарного ограничения.
			Если МетодОбеспечения = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ
				И Не ЗначениеЗаполнено(УпаковкаЗаказа) И Параметры.РежимОткрытия = "Полный" Тогда
				
				//Очистка в регистре товарные ограничения.
				НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Номенклатура.Использование = Истина;
				НаборЗаписей.Отбор.Номенклатура.Значение = Параметры.КлючПотребности.Номенклатура;
				НаборЗаписей.Отбор.Номенклатура.ВидСравнения = ВидСравнения.Равно;
				НаборЗаписей.Отбор.Склад.Использование = Истина;
				НаборЗаписей.Отбор.Склад.Значение = Параметры.КлючПотребности.Склад;
				НаборЗаписей.Отбор.Склад.ВидСравнения = ВидСравнения.Равно;
				НаборЗаписей.Отбор.Характеристика.Использование = Истина;
				НаборЗаписей.Отбор.Характеристика.Значение = Параметры.КлючПотребности.Характеристика;
				НаборЗаписей.Отбор.Характеристика.ВидСравнения = ВидСравнения.Равно;
				
				НаборЗаписей.Записать(Истина);
				
			ИначеЕсли Параметры.РежимОткрытия = "Полный" Тогда
				
				//Запись товарного ограничения.
				НаборЗаписей = РегистрыСведений.ТоварныеОграничения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Номенклатура.Использование = Истина;
				НаборЗаписей.Отбор.Номенклатура.Значение = Параметры.КлючПотребности.Номенклатура;
				НаборЗаписей.Отбор.Номенклатура.ВидСравнения = ВидСравнения.Равно;
				НаборЗаписей.Отбор.Склад.Использование = Истина;
				НаборЗаписей.Отбор.Склад.Значение = Параметры.КлючПотребности.Склад;
				НаборЗаписей.Отбор.Склад.ВидСравнения = ВидСравнения.Равно;
				НаборЗаписей.Отбор.Характеристика.Использование = Истина;
				НаборЗаписей.Отбор.Характеристика.Значение = Параметры.КлючПотребности.Характеристика;
				НаборЗаписей.Отбор.Характеристика.ВидСравнения = ВидСравнения.Равно;
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Параметры.КлючПотребности);
				
				Запись.МетодОбеспеченияПотребностей = МетодОбеспечения;
				Запись.УпаковкаЗаказа = УпаковкаЗаказа;
				
				Если МетодОбеспечения = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс Тогда
					Запись.МинимальноеКоличествоЗапаса  = МинимальныйЗапас;
					Запись.МаксимальноеКоличествоЗапаса = МаксимальныйЗапас;
					Запись.ОбеспечениеЗаказовПриПоддержанииЗапаса = ОбеспечениеЗаказовПриПоддержанииЗапаса;
				ИначеЕсли МетодОбеспечения = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме Тогда
					Запись.СреднедневноеПотребление     = НормаПотребления;
					Запись.МинимальноеКоличествоЗапаса  = МинимальныйЗапасРасчетный;
					Запись.МаксимальноеКоличествоЗапаса = МаксимальныйЗапасРасчетный;
					Запись.СтраховоеКоличествоЗапаса    = СтраховойЗапас;
					Запись.ОбеспечениеЗаказовПриПоддержанииЗапаса = ОбеспечениеЗаказовПриПоддержанииЗапаса;
				Иначе // МетодОбеспечения = ПоддержаниеЗапасаНаСрокПоСтатистике
					Запись.СреднедневноеПотребление     = СреднедневноеПотребление;
					Запись.МинимальноеКоличествоЗапаса  = МинимальныйЗапасРасчетный;
					Запись.МаксимальноеКоличествоЗапаса = МаксимальныйЗапасРасчетный;
					Запись.СтраховоеКоличествоЗапаса    = СтраховойЗапас;
					Запись.ОбеспечениеЗаказовПриПоддержанииЗапаса = ОбеспечениеЗаказовПриПоддержанииЗапаса;
				КонецЕсли;
				НаборЗаписей.Записать(Истина);
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если ПраваДоступа.ВариантыОбеспечения Тогда
			
			НаборЗаписей = ?(Параметры.КлючПотребности.ЭтоРабота,
				РегистрыСведений.ВариантыОбеспеченияРаботами.СоздатьНаборЗаписей(),
				РегистрыСведений.ВариантыОбеспеченияТоварами.СоздатьНаборЗаписей());
			НаборЗаписей.Отбор.Номенклатура.Значение = Параметры.КлючПотребности.Номенклатура;
			НаборЗаписей.Отбор.Номенклатура.Использование = Истина;
			НаборЗаписей.Отбор.Характеристика.Значение = Параметры.КлючПотребности.Характеристика;
			НаборЗаписей.Отбор.Характеристика.Использование = Истина;
			Если Не Параметры.КлючПотребности.ЭтоРабота Тогда
				НаборЗаписей.Отбор.Склад.Значение          = Параметры.КлючПотребности.Склад;
				НаборЗаписей.Отбор.Склад.Использование = Истина;
			КонецЕсли;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитДопУпорядочивания", Ложь);
			НаборЗаписей.Отбор.СпособОбеспеченияПотребностей.Использование = Истина;
			
			//Удаление действовавшего ранее индивидуального способа обеспечения.
			Если ЗначениеЗаполнено(СпособИндивидуальныйСтарый) Тогда
				
				НаборЗаписей.Отбор.СпособОбеспеченияПотребностей.Значение = СпособИндивидуальныйСтарый;
				НаборЗаписей.Прочитать();
				НаборЗаписей[0].РеквизитДопУпорядочивания = 2;
				НаборЗаписей.Записать(Истина);
				
			КонецЕсли;
			
			//Чтение и запись нового индивидуального способа в качестве основного способа.
			Если ПереключательСпособа = 1 И ЗначениеЗаполнено(СпособИндивидуальный) Тогда
				
				НаборЗаписей.Отбор.СпособОбеспеченияПотребностей.Значение = СпособИндивидуальный;
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					Запись = НаборЗаписей[0];
				Иначе
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Параметры.КлючПотребности);
					Запись.СпособОбеспеченияПотребностей = СпособИндивидуальный;
				КонецЕсли;
				
				Запись.РеквизитДопУпорядочивания = 1;
				НаборЗаписей.Записать(Истина);
				СпособИндивидуальныйСтарый = СпособИндивидуальный;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		Модифицированность = Ложь;
		ДанныеЗаписаны = Истина;
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыЦиклаПоставкиПоГрафикуРаботыВызовСервера(КлючПотребности, ПараметрыЦиклаПоставки, НачалоПериода)
	Обработки.ОбеспечениеПотребностей.ЗаполнитьРеквизитыСпособаОбеспечения(ПараметрыЦиклаПоставки, НачалоПериода, Истина);
	Возврат ПараметрыЦиклаПоставкиПоГрафикуРаботы(КлючПотребности, ПараметрыЦиклаПоставки, НачалоПериода);
КонецФункции

#КонецОбласти

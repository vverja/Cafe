////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебныйВызовСервера: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы,
//
// Параметры:
//  ДобавленныйФайл - Ссылка на элемент справочника с электронным документом,
//  СтруктураЭД - Структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл,
		СтруктураЭД, ПоверятьОбязательныеРеквизиты);
	
КонецПроцедуры

// Получает сопоставление владельцев и актуальных ЭД
//
// Параметры:
//  МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьСоответствиеВладельцевИЭД(МассивСсылокНаВладельцев = Неопределено, МассивСсылокНаЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если Не МассивСсылокНаВладельцев = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
		Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	ИначеЕсли Не МассивСсылокНаЭД = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК СсылкаНаЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)";
		Запрос.УстановитьПараметр("МассивЭД", МассивСсылокНаЭД);
	Иначе
		Возврат СоответствиеВладельцевИЭД;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭД, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь, ВерсияФорматаПакета = Неопределено,
	ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
		
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД, НаправлениеЭД, ВладелецФайла");
	
	Если НЕ ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СвойстваЭД.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			
			СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
				ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
			
			Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
				// Для "Акта на передачу прав" и "с.ф." меняет состояние "Закрыт принудительно" на "Обмен завершен",
				// если для него пришла вторая подпись.
				Если Не ((СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав)
					И СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен) Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент
				
				ИЛИ ((СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
				И НоваяЗаписьНабора.ЭлектронныйДокумент.Пустая())
				
				ИЛИ (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий //новый каталог делает неактуальным старый
				И СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров)
				
				ИЛИ ПринудительнаяСменаСостоянияВерсии Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
				СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
				
				Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					ИЛИ НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
					СтруктураСводнойИнфПоСтатусу = Новый Структура;
					СтруктураСводнойИнфПоСтатусу.Вставить("СНашейСтороны", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
					СтруктураСводнойИнфПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
				КонецЕсли;
				
				Если Не НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					И НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия
					И СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено Тогда
					НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
					НаборЗаписей.Записать();
					Возврат;
					
				КонецЕсли;
				
				НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
				НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
				НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
				
				НаборЗаписей.Записать();
				
			ИначеЕсли (СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				//
				ИЛИ (СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
				//
				ИЛИ (СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
				
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
				СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
				
				НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
				НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
				
				НаборЗаписей.Записать();
				
			ИначеЕсли СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И НЕ НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент
				И НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				НаборЗаписей.Записать();
				
			ИначеЕсли (СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СвойстваЭД.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			
			
			Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
				Возврат;
			КонецЕсли;
			
			СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(
				НоваяЗаписьНабора.ЭлектронныйДокумент);
			
			НоваяЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
			
			СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(НоваяЗаписьНабора.ЭлектронныйДокумент);
			НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить,
//  ПрисоединенныйФайл - ссылка на электронный документ, который в данный момент является актуальным
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ПрисоединенныйФайл = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
		Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		НоваяЗаписьНабора.СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
			СсылкаНаОбъект, ЗначениеЗаполнено(ПрисоединенныйФайл));
		Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
	Иначе
		
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
			Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ОбменСКонтрагентамиСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
			СсылкаНаОбъект, ЗначениеЗаполнено(ПрисоединенныйФайл));
		Если ПрисоединенныйФайл = Неопределено ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
			Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
	ИначеЕсли НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	ТаблицаПриглашений = ОбменСКонтрагентамиВнутренний.ТаблицаДанныхУчастниковОбмена(СоотвСоглашенийИСтруктурСертификатов);
	ОбменСКонтрагентамиСлужебный.СохранитьПриглашения(ТаблицаПриглашений);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД = Неопределено, ВидЭД = Неопределено) Экспорт
	
	Результат = Истина;
	
	ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
		Если ЗначениеЗаполнено(ВидЭД) Тогда
			
			ПараметрыЭД.ВидЭД = ВидЭД;
		Иначе
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(СсылкаНаВладельца);
			
			СоответствиеВладельцевИЭД = ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
			Для Каждого ТекЭл Из МассивСсылок Цикл
				
				СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
				Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД, Неопределено);
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Результат = Ложь;
		
		Если ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоглашенияОбИспользованииЭД.Ссылка,
			|	СоглашенияОбИспользованииЭД.СтатусПодключения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
			|	И СоглашенияОбИспользованииЭД.ДоговорКонтрагента = &ДоговорКонтрагента
			|	И СоглашенияОбИспользованииЭД.Организация = &Организация
			|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
			Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыЭД.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
			
			// Получаем настройки ЭДО безусловно
			УстановитьПривилегированныйРежим(Истина);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭД.Ссылка,
				|	СоглашенияОбИспользованииЭД.СтатусПодключения
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
				|ГДЕ
				|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
				|	И СоглашенияОбИспользованииЭД.Организация = &Организация
				|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
				Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов"));
				Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
			КонецЕсли;
			
			ПараметрыЭД.Вставить("НастройкаЭДО", Выборка.Ссылка);
			ПараметрыЭД.Вставить("СтатусПодключения", Выборка.СтатусПодключения);
		КонецЕсли;
	Иначе
		ПараметрыЭД.Вставить("НастройкаЭДО", ПараметрыОбмена.СоглашениеЭД);
		ПараметрыЭД.Вставить("СтатусПодключения", ПараметрыОбмена.СоглашениеЭД.СтатусПодключения);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак существования настройки ЭДО между контрагентом и организацией
//Параметры:
// СсылкаНаВладельца - ссылка на документ ИБ
// ПараметрыЭД - свойства эдектронного документа, соотвествующте документу ИБ
//
// Возвращаемое значение - Булево - наличие настройки между организацией и контрагентом
//
Функция НастройкаЭДСуществует(СсылкаНаВладельца, ПараметрыЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	
	Возврат Ложь;
	
	Если ПараметрыЭД = Неопределено Тогда
		ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СсылкаНаВладельца);
		
		СоответствиеВладельцевИЭД = ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
		Для Каждого ТекЭл Из МассивСсылок Цикл
			
			СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ЗначениеЗаполнено(ПараметрыЭД.Организация)
		И ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
			ПараметрВидЭД = ПараметрыЭД.ВидЭД;
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				ПараметрВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.Ссылка.СтатусПодключения КАК СтатусПодключения,
			|	Т.Ссылка.СостояниеСоглашения КАК СостояниеСоглашения,
			|	Т.Ссылка КАК НастройкаЭДО,
			|	ВЫБОР
			|		КОГДА Т.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК Т
			|ГДЕ
			|	Т.ИсходящийДокумент = &ВидЭД
			|	И Т.Формировать = ИСТИНА
			|	И Т.Ссылка.Контрагент = &Контрагент
			|	И Т.Ссылка.Организация = &Организация
			|	И НЕ Т.Ссылка.ПометкаУдаления
			|	И Т.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";
			
			Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыЭД.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
			Запрос.УстановитьПараметр("ВидЭД",              ПараметрВидЭД);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				ПараметрыЭД.Вставить("НастройкаЭДО", Выборка.НастройкаЭДО);
				ПараметрыЭД.Вставить("СтатусПодключения", Выборка.СтатусПодключения);
				ПараметрыЭД.Вставить("СостояниеСоглашения", Выборка.СостояниеСоглашения);
				
				Результат = Истина;
				
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция МожноОткрытьВФормеДереваЭД(Знач СсылкаНаОбъект, ПроверятьДляСоглашения, ОткрытьФормуСоглашения, ПараметрыЭД) Экспорт
	
	ОткрытьВДереве = Ложь;
	Если ПроверятьДляСоглашения И Не ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД) Тогда
		ОткрытьФормуСоглашения = Истина;
	Иначе
		ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
		ОткрытьВДереве = Истина;
	КонецЕсли;
	
	Возврат ОткрытьВДереве;
	
КонецФункции

 // Устанавливает статус электронного документа
 //
 // Параметры
 //  <ЭД>  - <СправочникСсылка.ЭдПрисоединенныеФайлы> - ссылка на электронный документ
 //  <СтатусЭД>  - <ПеречислениеСсылка.СтатусыЭД> - новый статус электронного документа
 //
Процедура УстановитьСтатусЭД(ЭД, СтатусЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", СтатусЭД);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

 // Устанавливает статус электронного документа
 //
 // Параметры
 //  МассивЭД  - Массив - ссылки на электронные документы
 //  СтатусЭД  - ПеречислениеСсылка.СтатусыЭД - новый статус электронного документа
 //
Процедура УстановитьСтатусыЭД(МассивЭД, СтатусЭД) Экспорт
	
	Для Каждого ЭД Из МассивЭД Цикл
		УстановитьСтатусЭД(ЭД, СтатусЭД);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из асинхронной процедуры ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОчереднойПакетЭД(...), перед
// ее завершением. Выполняет запись ссылок на документы-основания в Произвольные ЭД, в которых по каким-либо
// причинам не удалось это сделать при распаковке ЭД докумнета-основания.
//
Процедура НайтиЗаполнитьОснованияУВладельцевЭД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументПотомок,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ИдентификаторДокументаОснования,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ЭлектронныйДокумент,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументОснование
		|ИЗ
		|	РегистрСведений.ИдентификаторыДокументовОснованийВладельцевЭД КАК ИдентификаторыДокументовОснованийВладельцевЭД
		|ГДЕ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ОснованиеПолучено";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			НачатьТранзакцию();
			Если ТипЗнч(Выборка.ДокументПотомок) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
				ДокументОбъект = Выборка.ДокументПотомок.ПолучитьОбъект();
				ДокументОбъект.ДокументОснование = Выборка.ДокументОснование;
				ДокументОбъект.Записать();
				НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ИдентификаторДокументаОснования);
				НаборЗаписей.Прочитать();
				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
					НаборЗаписей.Удалить(ЗаписьРегистра);
				КонецЦикла;
				НаборЗаписей.Записать(Истина);
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru='запись документа-основания ""%1"" в документ ""%2""';uk='запис документа-підстави ""%1"" документ ""%2""'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВидОперации, Выборка.ДокументОснование, Выборка.ДокументПотомок);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

#Область РаспаковкаПакетовЭД

Процедура РаспаковатьПакетыЭДНаСервере(Знач МассивПакетовЭД, КолРаспакованныхЭД) Экспорт
	
	// Подготовим данные по пакетам ЭД.
	ДанныеПакетовЭД = ДанныеПакетовЭД(МассивПакетовЭД);
	
	КолвоЭлементовКоллекции = ДанныеПакетовЭД.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		Счетчик = КолвоЭлементовКоллекции - ОбратныйИндекс;
		СтруктураПакетаЭД = ДанныеПакетовЭД[Счетчик];
		
		ОписаниеОшибки = "";
		
		// Расшифруем электронные документы
		Для каждого ЭлектронныйДокумент Из СтруктураПакетаЭД.МассивЭД Цикл
			
			Если ЭлектронныйДокумент.Зашифрован Тогда
				
				МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("РасшифровкаЭД", Ложь, ОписаниеОшибки);
				Если МенеджерКриптографии = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				ПарольДоступаКЗакрытомуКлючу = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(
					ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
				Если ПарольДоступаКЗакрытомуКлючу = Неопределено Тогда
					ШаблонСообщения = НСтр("ru='Не удалось получить пароль к сертификату: %1';uk='Не вдалося отримати пароль до сертифіката: %1'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
					Прервать;
				КонецЕсли;
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольДоступаКЗакрытомуКлючу;
				
				ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
				Попытка
					РасшифрованныеДвоичныеДанныеФайлаЭД = МенеджерКриптографии.Расшифровать(ДвоичныеДанныеФайлаЭД);
				Исключение
					ШаблонСообщения = НСтр("ru='Расшифровка пакета ЭД: %1';uk='Розшифровка пакету ЕД: %1'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Прервать;
				КонецПопытки;
				
				// Помещаем двоичные данные файла в тот же адрес хранилища.
				АдресЭД = ПоместитьВоВременноеХранилище(РасшифрованныеДвоичныеДанныеФайлаЭД, ЭлектронныйДокумент.АдресЭД);
			КонецЕсли;
		КонецЦикла;

		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ШаблонСообщения = НСтр("ru='При распаковке пакета %1 возникла ошибка:
            |%2.'
            |;uk='При розпакуванні пакета %1 виникла помилка:
            |%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураПакетаЭД.ПакетЭДСсылка,
				ОписаниеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"), ТекстСообщения,
				ТекстСообщения);
			
			ДанныеПакетовЭД.Удалить(Счетчик);
			Продолжить;
		КонецЕсли;
		
		// Получим сертификаты и выполним проверку подписи
		Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
			
			МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатовИзПодписи", Ложь, ОписаниеОшибки);
			Если МенеджерКриптографии = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			// Подпись не была прочитана при записи объекта.
			ДвоичныеДанныеФайлаЭП = ПолучитьИзВременногоХранилища(Подпись.АдресЭП);
			Попытка
				Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеФайлаЭП);
			Исключение
				ШаблонСообщения = НСтр("ru='Получение сертификатов из подписи: %1';uk='Отримання сертифікатів з підпису: %1'");
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Прервать;
			КонецПопытки;
			
			Если Сертификаты.Количество() > 0 Тогда
				Сертификат = Сертификаты[0];
				
				Подпись.Вставить("Отпечаток", Base64Строка(Сертификат.Отпечаток));
				Подпись.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат));
				Подпись.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(Сертификат.Выгрузить(), Новый УникальныйИдентификатор));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Подпись.АдресЭД) Тогда
				ОписаниеОшибки = НСтр("ru='Не удалось найти исходные данные для проверки ответной подписи.';uk='Не вдалося знайти вихідні дані для перевірки відповідної підпису.'");
				Прервать;
			КонецЕсли;
			
			ПодписьПроверена = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии, Подпись.АдресЭД, Подпись.АдресЭП, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				Прервать;
			КонецЕсли;
			
			Подпись.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
			Подпись.Вставить("ПодписьВерна",        ПодписьПроверена);
		КонецЦикла;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ШаблонСообщения = НСтр("ru='При распаковке пакета %1 возникла ошибка:
            |%2.'
            |;uk='При розпакуванні пакета %1 виникла помилка:
            |%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПакетаЭД.ПакетЭДСсылка, ОписаниеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"), ТекстСообщения,
				ТекстСообщения, 0);
			
			ДанныеПакетовЭД.Удалить(Счетчик);
		КонецЕсли;
	КонецЦикла;
	
	// Занесем данные в базу.
	МассивСлужебныхЭД = Новый Массив;
	ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, МассивСлужебныхЭД, КолРаспакованныхЭД);
	
	Если МассивСлужебныхЭД.Количество() > 0 Тогда
		Действия = "ПодписатьОтправить";
		СтСоотвСоглашенийИМассивовЭД = ВыполнитьДействияПоЭД(Новый Массив, Новый Массив, "", Новый Структура,
			МассивСлужебныхЭД, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПакетовЭД(МассивПакетовЭД) Экспорт
	
	ДанныеПакетовЭД = Новый Массив;
	// Делаем перебор пакетов и распавоку их содержимого в папку
	Для каждого ПакетЭД Из МассивПакетовЭД Цикл
		СтруктураПакетаЭД = Новый Структура("ПакетЭДСсылка, МассивЭД, МассивЭП");
		
		// УстановитьПривилегированныйРежим(Истина);
		НастройкаЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "НастройкаЭДО");
		
		МассивЭД = Новый Массив;
		МассивЭП = Новый Массив;
		УникальныйИдентификатор = ПакетЭД.УникальныйИдентификатор();
		
		Попытка
			
			// Необходимо получить архив пакета из присоединенных файлов к документу.
			ВыборкаПрисоединенныхФайлов = ОбменСКонтрагентамиСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
			Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждого из пакетов необходимо определить файл с данными.
			ПараметрыДанных = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
			
			ФайлАрхива = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
			ДвоичныеДанныеФайла.Записать(ФайлАрхива);
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
			ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка архива пакета ЭД';uk='Розпакування архіву пакету ЕД'"), ТекстОшибки,
					ТекстСообщения);
				
				УдалитьФайлы(ПапкаДляРаспаковки);
				УдалитьФайлы(ФайлАрхива);
				Продолжить;
			КонецПопытки;
			
			ЗИПЧтение.Закрыть();
			УдалитьФайлы(ФайлАрхива);
			
			МассивФайловТранспортнойИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
			
			Если МассивФайловТранспортнойИнформации.Количество() > 0 Тогда
				ФайлТранспортнойИнформации = МассивФайловТранспортнойИнформации[0];
			Иначе
				УдалитьФайлы(ПапкаДляРаспаковки);
				Продолжить;
			КонецЕсли;
			
			ОбъектXML = Новый ЧтениеXML;
			ОбъектXML.ОткрытьФайл(ФайлТранспортнойИнформации.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
				ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("ContainerDescription", "http://api-invoice.taxcom.ru/meta"));
			ОбъектXML.Закрыть();
			
			Для Каждого ДокОборот Из ЭД.DocFlow Цикл
				НомерЭДО = ДокОборот.Id;
				
				Для Каждого Документ Из ДокОборот.Documents.Document Цикл
					
					СтруктураВложения = Новый Структура("ТипДанных, АдресЭД, АдресДополнительногоЭД,
					|УникальныйИД, НомерЭД, КодТранзакции, КодРегламента, МассивИдентификаторовДокументовОснований,
					|Зашифрован, СсылкаНаСертификатРасшифровки, ДополнительныеПараметры,
					|ПроизвольныйЭД, ТипДокумента, ТекстПроизвольногоЭД, ТребуетсяПодтверждение,
					|АдресЭП, АдресСертификата, Отпечаток, КомуВыданСертификат, ДатаПроверкиПодписи, ПодписьВерна");
					
					КодТранзакции = Документ.TransactionCode;
					КодРегламента = Документ.ReglamentCode;
					Зашифрован = Ложь;
					ТипКарточкиЭД = Перечисления.ТипыЭД.Прочее;
					ТипКарточкиЭДПолучен = Ложь;
					ПроизвольныйЭД = Ложь;
					МассивИдентификаторовДокументовОснований = Новый Массив;
					
					// Получим карточку электронного документа
					Если Документ.Files.ExternalCard <> Неопределено Тогда
						ПолноеИмяФайлаКарточки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
							Документ.Files.ExternalCard.Path);
						СтруктураФайлаКарточки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаКарточки);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "\" Тогда
							СтруктураФайлаКарточки.ПолноеИмя = СтрЗаменить(СтруктураФайлаКарточки.ПолноеИмя, "/", "\");
						КонецЕсли;
						
						ОбъектXMLКарточки = Новый ЧтениеXML;
						ОбъектXMLКарточки.ОткрытьФайл(СтруктураФайлаКарточки.ПолноеИмя);
						КарточкаЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXMLКарточки,
							ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card"));
						ОбъектXMLКарточки.Закрыть();
						
						Если КарточкаЭД.Identifiers.ExternalIdentifier <> Неопределено Тогда
							НомерЭДКарточки = КарточкаЭД.Identifiers.ExternalIdentifier;
						КонецЕсли;
						
						Если КарточкаЭД.Description <> Неопределено Тогда
							Если КарточкаЭД.Description.AdditionalData <> Неопределено
								И КарточкаЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
								
								ДополнительныеПараметры = Новый Структура;
								Если ТипЗнч(КарточкаЭД.Description.AdditionalData.AdditionalParameter) = Тип("СписокXDTO") Тогда
									Для Каждого Свойство Из КарточкаЭД.Description.AdditionalData.AdditionalParameter Цикл
										Если Свойство.Name = "Зашифрован" Тогда
											Зашифрован = Булево(Свойство.Value);
											СтруктураВложения.Вставить("СсылкаНаСертификатРасшифровки",
												ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "СертификатОрганизацииДляРасшифровки"));
										ИначеЕсли Свойство.Name = "DocumentType" Тогда
										ИначеЕсли Свойство.Name = "ParentDocument" Тогда
											МассивИдентификаторовДокументовОснований.Добавить(Свойство.Value);
										Иначе
											ДополнительныеПараметры.Вставить(Свойство.Name, Свойство.Value);
										КонецЕсли;
									КонецЦикла;
									
								ИначеЕсли ТипЗнч(КарточкаЭД.Description.AdditionalData.AdditionalParameter) = Тип("ОбъектXDTO") Тогда
									Если КарточкаЭД.Description.AdditionalData.AdditionalParameter.Name = "Зашифрован" Тогда
										Зашифрован = Булево(КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
										СтруктураВложения.Вставить("СсылкаНаСертификатРасшифровки",
											ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "СертификатОрганизацииДляРасшифровки"));
									ИначеЕсли Свойство.Name = "ParentDocument" Тогда
										МассивИдентификаторовДокументовОснований.Добавить(КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
									Иначе
										ДополнительныеПараметры.Вставить(
											КарточкаЭД.Description.AdditionalData.AdditionalParameter.Name,
											КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
									КонецЕсли;
								КонецЕсли;
								СтруктураВложения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
							КонецЕсли;
							
							// Определим заголовок произвольного ЭД.
							Если КарточкаЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
								Если КарточкаЭД.Description.Title <> Неопределено Тогда
									ПроизвольныйЭД = (КарточкаЭД.Description.Title = Строка(Перечисления.ВидыЭД.ПроизвольныйЭД));
								КонецЕсли;
							КонецЕсли;
							
							ТекстПроизвольногоЭД = КарточкаЭД.Description.Comment;
						КонецЕсли;
						
						ТребуетсяПодтверждение = Ложь;
					КонецЕсли;
					
					// Из ЭД
					СтруктураВложения.Вставить("УникальныйИД",           НомерЭДО);
					СтруктураВложения.Вставить("НомерЭД",                НомерЭДКарточки);
					СтруктураВложения.Вставить("КодТранзакции",          КодТранзакции);
					СтруктураВложения.Вставить("КодРегламента",          КодРегламента);
					СтруктураВложения.Вставить("ПроизвольныйЭД",         ПроизвольныйЭД);
					СтруктураВложения.Вставить("ТипДокумента",           ТипКарточкиЭД);
					СтруктураВложения.Вставить("ТекстПроизвольногоЭД",   ТекстПроизвольногоЭД);
					СтруктураВложения.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
					СтруктураВложения.Вставить("МассивИдентификаторовДокументовОснований", МассивИдентификаторовДокументовОснований);
					
					// Получим файл электронного документа
					СтруктураЭлектронногоДокумента = Новый Структура();
					Если Документ.Files.MainImage <> Неопределено Тогда
						ПолноеИмяФайлаЭД = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
							Документ.Files.MainImage.Path);
						СтруктураФайлаЭД = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаЭД);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
							СтруктураФайлаЭД.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭД.ПолноеИмя, "\", "/");
						КонецЕсли;
						
						ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(СтруктураФайлаЭД.ПолноеИмя);
						СтруктураВложения.Вставить("АдресЭД", ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭД, УникальныйИдентификатор));
						СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						
						// Когда приходят пакеты от оператора ЭДО без явного признака НЕформализованный.
						Если СтруктураФайлаЭД.Расширение <> ".zip" И СтруктураФайлаЭД.Расширение <> ".xml" Тогда
							СтруктураВложения.Вставить("ПроизвольныйЭД", Истина);
						КонецЕсли;
						
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
						
						СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции));
						СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", СтруктураФайлаЭД.ИмяБезРасширения);
						СтруктураЭлектронногоДокумента.Вставить("Расширение",       СтруктураФайлаЭД.Расширение);
						СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Зашифрован);
						
						МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
					КонецЕсли;
					
					Если Документ.Files.MainImageSignature <> Неопределено Тогда
						
						Для Каждого Подпись Из Документ.Files.MainImageSignature Цикл
							ПолноеИмяФайлаЭП = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, Подпись.Path);
							СтруктураФайлаЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаЭП);
						
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи = Новый Структура();
							ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектроннойПодписи, СтруктураВложения);
							
							ДвоичныеДанныеФайлаЭП = Новый ДвоичныеДанные(СтруктураФайлаЭП.ПолноеИмя);
							СтруктураЭлектроннойПодписи.Вставить("АдресЭП",
								ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭП, УникальныйИдентификатор));
								
							СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        "ЭП");
							СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", СтруктураФайлаЭП.ИмяБезРасширения);
							СтруктураЭлектроннойПодписи.Вставить("Расширение",       СтруктураФайлаЭП.Расширение);
							
							// В случае ответной подписи найдем исходный ЭД.
							Если НЕ ЗначениеЗаполнено(СтруктураЭлектроннойПодписи.АдресЭД) Тогда
								
								СтруктураПараметровПоиска = Новый Структура;
								СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
								СтруктураПараметровПоиска.Вставить("УникальныйИД",  СтруктураЭлектроннойПодписи.УникальныйИД);
								Если КодТранзакции = "MainDocumentResign" Тогда
									СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
								ИначеЕсли КодТранзакции = "CancellationOfferResign" Тогда
									СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
								КонецЕсли;
								
								ЭлектронныйДокумент = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
								Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
									ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭлектронныйДокумент);
									СтруктураЭлектроннойПодписи.Вставить("АдресЭД", ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
									СтруктураЭлектроннойПодписи.Вставить("СсылкаНаЭДПрисоединенныйФайл", ЭлектронныйДокумент);
								КонецЕсли;
							КонецЕсли;
							
							МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
						КонецЦикла;
					КонецЕсли;
					
					Если Документ.Files.DataImage <> Неопределено Тогда
						ПолноеИмяФайлаДопДанныхЭД = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
							Документ.Files.DataImage.Path);
						СтруктураФайлаДопДанныхЭД = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаДопДанныхЭД);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
							СтруктураФайлаДопДанныхЭД.ПолноеИмя = СтрЗаменить(СтруктураФайлаДопДанныхЭД.ПолноеИмя, "\", "/");
						КонецЕсли;
						
						ДвоичныеДанныеФайлаДопДанныхЭД = Новый ДвоичныеДанные(СтруктураФайлаДопДанныхЭД.ПолноеИмя);
						АдресДополнительногоЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДопДанныхЭД, УникальныйИдентификатор);
						СтруктураВложения.Вставить("АдресЭД", АдресДополнительногоЭД);
						СтруктураЭлектронногоДокумента.Вставить("АдресДополнительногоЭД", АдресДополнительногоЭД);
						
						СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						
						СтруктураЭлектронногоДокумента = Новый Структура();
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
						
						СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        "ДополнительныйЭД");
						СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", СтруктураФайлаДопДанныхЭД.ИмяБезРасширения);
						СтруктураЭлектронногоДокумента.Вставить("Расширение",       СтруктураФайлаДопДанныхЭД.Расширение);
						СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Ложь);
						
						МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
					КонецЕсли;
					
					Если Документ.Files.DataImageSignature <> Неопределено Тогда
						
						Для Каждого Подпись Из Документ.Files.DataImageSignature Цикл
							ПолноеИмяФайлаДопДанныхЭП = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, Подпись.Path);
							СтруктураФайлаДопДанныхЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаДопДанныхЭП);
						
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаДопДанныхЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаДопДанныхЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи = Новый Структура();
							ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектроннойПодписи, СтруктураВложения);
							
							ДвоичныеДанныеФайлаДопДанныхЭП = Новый ДвоичныеДанные(СтруктураФайлаДопДанныхЭП.ПолноеИмя);
							СтруктураВложения.Вставить("АдресЭП", ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДопДанныхЭП,
								УникальныйИдентификатор));
								
							СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        "ПодписьДополнительногоЭД");
							СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", СтруктураФайлаДопДанныхЭП.ИмяБезРасширения);
							СтруктураЭлектроннойПодписи.Вставить("Расширение",       СтруктураФайлаДопДанныхЭП.Расширение);
							
							МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			СтруктураПакетаЭД.Вставить("ПакетЭДСсылка", ПакетЭД);
			СтруктураПакетаЭД.Вставить("МассивЭД",      МассивЭД);
			СтруктураПакетаЭД.Вставить("МассивЭП",      МассивЭП);
			ДанныеПакетовЭД.Добавить(СтруктураПакетаЭД);
			
			УдалитьФайлы(ПапкаДляРаспаковки);
			
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"), ТекстОшибки,
				ТекстСообщения);
			
			УдалитьФайлы(ПапкаДляРаспаковки);
		КонецПопытки;
	КонецЦикла;
	
	Возврат ДанныеПакетовЭД;
	
КонецФункции

Процедура ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, МассивСлужебныхЭД, КолРаспакованныхЭД) Экспорт
	
	Для каждого СтруктураПакетаЭД Из ДанныеПакетовЭД Цикл
		
		ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПакетаЭД.ПакетЭДСсылка,
			"ПрофильНастроекЭДО, СпособОбменаЭД, НастройкаЭДО, Отправитель, Получатель, Организация, Контрагент, ВерсияФорматаПакета");
		
		Попытка
			
			НачатьТранзакцию();
			
			МассивДобавленныхФайлов = Новый Массив;
			МассивДобавленныхФайловДляИзвещений = Новый Массив;
			
			// Записываем в базу ЭД
			Для каждого ЭлектронныйДокумент Из СтруктураПакетаЭД.МассивЭД Цикл
				
				АдресЭД = Неопределено;
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("dec", Новый УникальныйИдентификатор);
				
				// Распакуем пакет если в качестве ЭД пришел архив
				Если ЭлектронныйДокумент.Расширение = ".xml" Или ЭлектронныйДокумент.ПроизвольныйЭД Тогда
					
					ДвоичныеДанныеФайлЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
					ФайлЭД = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
					ДвоичныеДанныеФайлЭД.Записать(ФайлЭД);
					
					ФайлДанныхЭД = Новый Файл(ФайлЭД);
					АдресЭД = ЭлектронныйДокумент.АдресЭД;
					
				ИначеЕсли ЭлектронныйДокумент.Расширение = ".zip" Тогда
					
					ДвоичныеДанныеАрхиваЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
					ФайлЭД = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
					ДвоичныеДанныеАрхиваЭД.Записать(ФайлЭД);
					
					ФайлДанныхАрхиваЭД = Новый Файл(ФайлЭД);
					ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлДанныхАрхиваЭД.ПолноеИмя);
					Попытка
						ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
					Исключение
						ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"), ТекстОшибки,
						ТекстСообщения);
						
						ЧтениеЗИП.Закрыть();
						ФлагОшибки = Истина;
						Прервать;
					КонецПопытки;
					ЧтениеЗИП.Закрыть();
					
					ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
					Если ФайлыЭД.Количество() > 0 Тогда
						ФайлДанныхЭД = ФайлыЭД[0];
						
						ДвоичныеДанныеФайлЭД = Новый ДвоичныеДанные(ФайлДанныхЭД.ПолноеИмя);
						АдресЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлЭД);
					Иначе // Будем считать, что пришел произвольный ЭД.
						ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
						
						ДвоичныеДанныеФайлЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
						ФайлЭД = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
						ДвоичныеДанныеФайлЭД.Записать(ФайлЭД);
						
						ФайлДанныхЭД = Новый Файл(ФайлЭД);
						АдресЭД = ЭлектронныйДокумент.АдресЭД;
						
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "ЭД" Тогда
					
					// В присоединенные файлы к документу БД поместить файл с данными, подпись к нему,
					// указать его в табличной части транспортного пакета.
					СтруктураПараметровПоиска = Новый Структура;
					СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
					СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлектронныйДокумент.УникальныйИД);
					СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
					КонецЕсли;
					СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
					
					ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					Если ДобавленныйФайл = Неопределено Тогда
						
						// Готоим данные для создания Владельца ЭД
						ВладелецЭД = Неопределено;
						Если НЕ ЭлектронныйДокумент.ПроизвольныйЭД Тогда
							
							ОписаниеОшибки = "";
							ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ФайлДанныхЭД.ПолноеИмя, ОписаниеОшибки);
							Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
								Если ЭлектронныйДокумент.КодРегламента = "Nonformalized" Тогда // неизвестный XML не удалось прочитать
									ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
								Иначе
									ВызватьИсключение ОписаниеОшибки;
								КонецЕсли;
							Иначе
								
								СтруктураФайлаЭД = Новый Структура;
								ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ДанныеФайлаЭД, СтруктураФайлаЭД, ОписаниеОшибки);
								Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
									Если Не ЗначениеЗаполнено(СтруктураФайлаЭД) Тогда // неизвестный XML не удалось определить видЭД
										ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
									Иначе
										ВызватьИсключение ОписаниеОшибки;
									КонецЕсли;
								ИначеЕсли ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено
									И ЭлектронныйДокумент.КодРегламента = "Nonformalized" Тогда // Отправили формализованный XML через ПроизвольныйЭД
									
									ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
								Иначе
									
									// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
									// в этом случае возьмем НомерЭД из карточки транспортной информации.
									Если ЭлектронныйДокумент.Свойство("КодРегламента") И ЗначениеЗаполнено(ЭлектронныйДокумент.КодРегламента) Тогда
										СтруктураФайлаЭД.НомерЭД = ЭлектронныйДокумент.НомерЭД;
									КонецЕсли;
									
									СтруктураФайлаЭД.Вставить("НаправлениеЭД", ОпределитьНаправление(СтруктураФайлаЭД));
									
									// Организацию и контрагента берем из пакета, т.к. для входящих и исходящих файлов они меняются местами.
									СтруктураФайлаЭД.Вставить("Организация", ПараметрыПакетаЭД.Организация);
									СтруктураФайлаЭД.Вставить("Контрагент",  ПараметрыПакетаЭД.Контрагент);
									
									Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
										Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПакетаЭД.Контрагент, "Партнер");
										СтруктураФайлаЭД.Вставить("Партнер", Партнер);
									КонецЕсли;
									
									// Создаем объект привязки ЭД.
									СтруктураПараметров = Новый Структура;
									СтруктураПараметров.Вставить("ФайлДанныхСсылка", АдресЭД);
									СтруктураПараметров.Вставить("ФайлДопДанных",    ЭлектронныйДокумент.АдресДополнительногоЭД);
									
									ВладелецЭД = ?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров, ПараметрыПакетаЭД.НастройкаЭДО,
										ОпределитьОбъектПривязки(СтруктураФайлаЭД));
									
									Если ВладелецЭД = Неопределено
										И (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
											ИЛИ СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
											ИЛИ СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
											
										ТекстОшибки = НСтр("ru='Для полученного ответного титула (%1) не найден исходящий ЭД.
                                            |Возможные причины:
                                            |- первичный титул был удален из текущей базы;
                                            |- полученый пакет не предназначен для текущей ИБ (первичный титул был сформирован в другой базе/копии текущей базы).'
                                            |;uk='Для отриманого відповідного титулу (%1) не знайдено вихідний ЕД.
                                            |Можливі причини:
                                            |- первинний титул був видалений з поточної бази;
                                            |- отриманий пакет не призначений для поточної ІБ (первинний титул був сформований в іншій базі/копії поточної бази).'");
										ОписаниеОшибки = СтрШаблон(ТекстОшибки, СтруктураФайлаЭД.ВидЭД);
										
										ВызватьИсключение ОписаниеОшибки;
									КонецЕсли;
									СтруктураПараметров.Вставить("ВладелецЭД", ВладелецЭД);
									
									СтруктураЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
									СтруктураЭД.Свойство("ВладелецЭД", ВладелецЭД);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если ЭлектронныйДокумент.ПроизвольныйЭД Тогда
							
							СтруктураФайлаЭД = Новый Структура;
							СтруктураФайлаЭД.Вставить("ВидЭД",                          Перечисления.ВидыЭД.ПроизвольныйЭД);
							СтруктураФайлаЭД.Вставить("НомерЭД",                        ЭлектронныйДокумент.НомерЭД);
							СтруктураФайлаЭД.Вставить("Организация",                    ПараметрыПакетаЭД.Организация);
							СтруктураФайлаЭД.Вставить("Контрагент",                     ПараметрыПакетаЭД.Контрагент);
							СтруктураФайлаЭД.Вставить("НомерВерсииЭД",                  0);
							СтруктураФайлаЭД.Вставить("НомерДокументаОтправителя",      "");
							СтруктураФайлаЭД.Вставить("ДатаДокументаОтправителя",       "");
							СтруктураФайлаЭД.Вставить("ДатаФормированияЭДОтправителем", "");
							
							// Возможно надо удалить код поиска произвольного ЭД. Оставить только создание произвольногоЭД.
							Если ТипЗнч(ДобавленныйФайл) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы")
								И ЗначениеЗаполнено(ДобавленныйФайл) И ЗначениеЗаполнено(ДобавленныйФайл.ВладелецФайла) Тогда
								
								ДокументСообщение = ДобавленныйФайл.ВладелецФайла.ПолучитьОбъект();
							Иначе
								ДокументСообщение = Документы.ПроизвольныйЭД.СоздатьДокумент();
								ДокументСообщение.УстановитьСсылкуНового(Документы.ПроизвольныйЭД.ПолучитьСсылку());
								ДокументСообщение.ТипДокумента    = ЭлектронныйДокумент.ТипДокумента;
								ДокументСообщение.Направление     = Перечисления.НаправленияЭД.Входящий;
								ДокументСообщение.СтатусДокумента = Перечисления.СтатусыЭД.Получен;
								ДокументСообщение.Дата            = ТекущаяДатаСеанса();
								ДокументСообщение.Прочитан        = Ложь;
								ДокументСообщение.Текст           = ЭлектронныйДокумент.ТекстПроизвольногоЭД;
								ДокументСообщение.ТребуетсяПодтверждение = ЭлектронныйДокумент.ТребуетсяПодтверждение;
								ДокументСообщение.Контрагент      = ПараметрыПакетаЭД.Контрагент;
								ДокументСообщение.Организация     = ПараметрыПакетаЭД.Организация;
								
								#Область ПоискДокументовОснований
								
								УникальныйИДОснования = Неопределено;
								Если ЗначениеЗаполнено(ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований)
									И ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований.Количество() > 0 Тогда
									
									// Актуальный алгоритм поиска документов-оснований на стороне получателя.
									СтруктураПараметровПоиска = Новый Структура;
									СтруктураПараметровПоиска.Вставить("Организация", ПараметрыПакетаЭД.Организация);
									СтруктураПараметровПоиска.Вставить("Контрагент",  ПараметрыПакетаЭД.Контрагент);
									ТЗПолученныхОснований = ОбменСКонтрагентамиВнутренний.ТаблицаЗначенийДокументовОснованийПоИдентификаторам(
									ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований, СтруктураПараметровПоиска);
									
									НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
									Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
										СтрокаОснования = ТЗПолученныхОснований.Найти(Идентификатор, "НомерЭД");
										Если СтрокаОснования <> Неопределено Тогда
											ДокументСообщение.ДокументОснование = СтрокаОснования.Ссылка;
										Иначе
											НоваяЗапись = НаборЗаписей.Добавить();
											НоваяЗапись.ИдентификаторДокументаОснования = Идентификатор;
											НоваяЗапись.ЭлектронныйДокумент = ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл;
											НоваяЗапись.ОснованиеПолучено = Ложь;
											НоваяЗапись.ДокументПотомок = ДокументСообщение.ПолучитьСсылкуНового();
										КонецЕсли;
									КонецЦикла;
									НаборЗаписей.Записать(Истина);
									
								ИначеЕсли ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры)
									И ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("УникальныйИДОснования", УникальныйИДОснования)
									И ЗначениеЗаполнено(УникальныйИДОснования) Тогда
									// Для поддержания обратной совместимости. В данной реализации для поиска основания использовался
									// Уникальный идентификатор ЭД-отправителя.
									Запрос = Новый Запрос;
									Запрос.Текст =
									"ВЫБРАТЬ РАЗЛИЧНЫЕ
									|	ПроизвольныйЭД.Ссылка,
									|	ЭДПрисоединенныеФайлы.НомерЭД
									|ИЗ
									|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
									|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизвольныйЭД КАК ПроизвольныйЭД
									|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ПроизвольныйЭД.Ссылка
									|ГДЕ
									|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИДОснования
									|	И ЭДПрисоединенныеФайлы.Контрагент = &Контрагент
									|	И ЭДПрисоединенныеФайлы.Организация = &Организация";
									Запрос.УстановитьПараметр("УникальныйИДОснования", УникальныйИДОснования);
									Запрос.УстановитьПараметр("Контрагент", ПараметрыПакетаЭД.Контрагент);
									Запрос.УстановитьПараметр("Организация", ПараметрыПакетаЭД.Организация);
									Выборка = Запрос.Выполнить().Выбрать();
									Если Выборка.Следующий() Тогда
										ДокументСообщение.ДокументОснование = Выборка.Ссылка;
									КонецЕсли;
								ИначеЕсли ДокументСообщение.ТипДокумента = Перечисления.ТипыЭД.СоглашениеОбЭДО Тогда
									// Получено соглашение об обмене ЭД
									ДокументСообщение.ДокументОснование = ПараметрыПакетаЭД.НастройкаЭДО;
								КонецЕсли;
								
								#КонецОбласти
								
								ДокументСообщение.Записать();
								
							КонецЕсли;
							
							ВладелецЭД = ДокументСообщение.Ссылка;
							
							СтруктураЭД = Новый Структура;
							СтруктураЭД.Вставить("ВладелецЭД",    ВладелецЭД);
							СтруктураЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ПроизвольныйЭД);
							СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
							
						КонецЕсли;
						
						// Если Владельца подготовили, то создаем ЭД
						Если ВладелецЭД = Неопределено Тогда
							ТекстСообщения = НСтр("ru='Не удалось сформировать документ информационной базы для привязки электронного документа.';uk='Не вдалося сформувати документ інформаційної бази для прив''язки електронного документа.'");
							ВызватьИсключение ТекстСообщения;
						Иначе
							
							#Область ПоискДокументовПотомков
							
							НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.ИдентификаторДокументаОснования.Установить(ЭлектронныйДокумент.НомерЭД);
							НаборЗаписей.Прочитать();
							
							МассивЗаписейКУдалению = Новый Массив;
							Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
								ДокументПотомок = ЗаписьРегистра.ДокументПотомок;
								Если ТипЗнч(ДокументПотомок) = Тип("ДокументСсылка.ПроизвольныйЭД") И ЗначениеЗаполнено(ДокументПотомок) Тогда
									Попытка
										ДокументОбъект = ДокументПотомок.ПолучитьОбъект();
										ДокументОбъект.ДокументОснование = ВладелецЭД;
										ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
										МассивЗаписейКУдалению.Добавить(ЗаписьРегистра);
									Исключение
										ЗаписьРегистра.ОснованиеПолучено = Истина;
										ЗаписьРегистра.ДокументОснование = ВладелецЭД;
									КонецПопытки;
								КонецЕсли;
							КонецЦикла;
							Для Каждого ЗаписьРегистра Из МассивЗаписейКУдалению Цикл
								НаборЗаписей.Удалить(ЗаписьРегистра);
							КонецЦикла;
							НаборЗаписей.Записать(Истина);
							
							#КонецОбласти
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
							ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
						
							Ответственный = ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыПакетаЭД.Контрагент,
							ПараметрыПакетаЭД.НастройкаЭДО);
							
							ЭлектронныйДокументВладелец = "";
							Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
								
								ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
								
								// Определяем версию регламента 1С по коду регламента.
								ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
								Если ЭлектронныйДокумент.КодРегламента = "Formalized" ИЛИ ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
									ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
								КонецЕсли;
								
								СтруктураЭД.Вставить("Отправитель",                     ПараметрыПакетаЭД.Отправитель);
								СтруктураЭД.Вставить("Получатель",                      ПараметрыПакетаЭД.Получатель);
								СтруктураЭД.Вставить("ВерсияФорматаПакета",             ПараметрыПакетаЭД.ВерсияФорматаПакета);
								СтруктураЭД.Вставить("Ответственный",                   Ответственный);
								СтруктураЭД.Вставить("ПрофильНастроекЭДО",              ПараметрыПакетаЭД.ПрофильНастроекЭДО);
								СтруктураЭД.Вставить("СоглашениеЭД",                    ПараметрыПакетаЭД.НастройкаЭДО);
								СтруктураЭД.Вставить("УникальныйИД",                    ЭлектронныйДокумент.УникальныйИД);
								СтруктураЭД.Вставить("НомерЭД",                         ЭлектронныйДокумент.НомерЭД);
								СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",             ТипЭлементаВерсииЭД);
								СтруктураЭД.Вставить("ВерсияРегламентаЭДО",             ВерсияРегламентаЭДО);
								СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем",  СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
								СтруктураЭД.Вставить("НаименованиеФайла",               ЭлектронныйДокумент.ИмяБезРасширения);
								
								ДополнительныеПараметры = "";
								Если ЭлектронныйДокумент.Свойство("ДополнительныеПараметры", ДополнительныеПараметры)
									И ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
									
									Комментарий = "";
									Если ДополнительныеПараметры.Свойство("Комментарий", Комментарий)
										И ЗначениеЗаполнено(Комментарий) Тогда
										СтруктураЭД.Вставить("ДополнительнаяИнформация", Комментарий);
									КонецЕсли;
								КонецЕсли;
								
								Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец) Тогда
									СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
									СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныйДокументВладелец.НомерДокументаОтправителя);
									СтруктураЭД.Вставить("ДатаДокументаОтправителя", ЭлектронныйДокументВладелец.ДатаДокументаОтправителя);
								КонецЕсли;
								
								Организация = Неопределено;
								Если НЕ (СтруктураЭД.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация)) Тогда
									СтруктураЭД.Вставить("Организация", ПараметрыПакетаЭД.Организация);
								КонецЕсли;
								Контрагент = Неопределено;
								Если НЕ (СтруктураЭД.Свойство("Контрагент", Контрагент) И ЗначениеЗаполнено(Контрагент)) Тогда
									СтруктураЭД.Вставить("Контрагент", ПараметрыПакетаЭД.Контрагент);
								КонецЕсли;
								СтатусЭД = Неопределено;
								Если НЕ (СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
									СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
								КонецЕсли;
								
								ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
								ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
								ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
								Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
									НоваяСтрока = ТаблицаИдентификаторовОснований.Добавить();
									НоваяСтрока.ИдентификаторДокументаОснования = Идентификатор;
								КонецЦикла;
								СтруктураЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);
								
								УстановитьНовуюВерсиюЭД(ВладелецЭД, ДобавленныйФайл);
								
								ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
								
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ЭлектронныйДокументВладелец)
								И (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
								ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
								ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
								И ЭлектронныйДокументВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
								
								СтруктураПараметровЭДВладельца = Новый Структура;
								
								ДопустимыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
									Перечисления.СтатусыЭД.ПолученоПодтверждение,
									ЭлектронныйДокументВладелец);
								
								СтруктураПараметровЭДВладельца.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
								ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(
									ЭлектронныйДокументВладелец, СтруктураПараметровЭДВладельца, Ложь);
							КонецЕсли;
							
							// Данные для подготовки служебных ЭД извещения о получении.
							Если СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
								И СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
								И СтруктураЭД.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
								
								МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
							КонецЕсли;
							
							// Занесем информацию в пакет ЭД.
							МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
							
						КонецЕсли;
					Иначе
						// Для случая перераспаковки пакета ЭД.
						Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
							Если Подпись.УникальныйИД = ЭлектронныйДокумент.УникальныйИД Тогда
								Подпись.СсылкаНаЭДПрисоединенныйФайл = ДобавленныйФайл;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "ДополнительныйЭД" Тогда
					
					// Поищем владельца
					СтруктураПараметровПоиска = Новый Структура;
					СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
					СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлектронныйДокумент.УникальныйИД);
					СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
					КонецЕсли;
					СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
					
					ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					Если ДобавленныйФайл <> Неопределено Тогда
						
						// Поищем исходный файл доп. данных.
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураПараметровПоиска.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
						СтруктураПараметровПоиска.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
						
						ДобавленныйДопФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						Если ДобавленныйДопФайл = Неопределено Тогда
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ДобавленныйФайл.ВладелецФайла);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
							ДобавленныйДопФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
							
							ВспомогательнаяСтруктура = Новый Структура;
							ВспомогательнаяСтруктура.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
							ВспомогательнаяСтруктура.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
							ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД",         Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
							ВспомогательнаяСтруктура.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
							ВспомогательнаяСтруктура.Вставить("Контрагент",                  ПараметрыПакетаЭД.Контрагент);
							ВспомогательнаяСтруктура.Вставить("Организация",                 ПараметрыПакетаЭД.Организация);
							ВспомогательнаяСтруктура.Вставить("ПрофильНастроекЭДО",          ПараметрыПакетаЭД.ПрофильНастроекЭДО);
							ВспомогательнаяСтруктура.Вставить("СоглашениеЭД",                ПараметрыПакетаЭД.НастройкаЭДО);
							ВспомогательнаяСтруктура.Вставить("УникальныйИД",                ЭлектронныйДокумент.УникальныйИД);
							ВспомогательнаяСтруктура.Вставить("НомерЭД",                     ЭлектронныйДокумент.НомерЭД);
							ВспомогательнаяСтруктура.Вставить("НаименованиеФайла",           ЭлектронныйДокумент.ИмяБезРасширения);
							ВспомогательнаяСтруктура.Вставить("ВладелецЭД",                  ДобавленныйФайл.ВладелецФайла);
							ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
							
							ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйДопФайл, ВспомогательнаяСтруктура);
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "СлужебныйЭД" Тогда
					
					СтруктураФайлаЭД = СформироватьСтруктуруФайлаЭД();
					ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO(ФайлДанныхЭД.ПолноеИмя,
						ЭлектронныйДокумент.КодРегламента, ЭлектронныйДокумент.КодТранзакции, СтруктураФайлаЭД);
						
					СтруктураФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					СтруктураФайлаЭД.СоглашениеЭД  = ПараметрыПакетаЭД.НастройкаЭДО;
					СтруктураФайлаЭД.Организация   = ПараметрыПакетаЭД.Организация;
					СтруктураФайлаЭД.Контрагент    = ПараметрыПакетаЭД.Контрагент;
					
					// УИД первичного ЭД в ИБ отправителя, он же УникальныйИД в ИБ получателя.
					ГУИДПервичногоЭД = ЭлектронныйДокумент.УникальныйИД;
					
					ЭлектронныйДокументВладелец = Неопределено;
					
					// Для неформализованного документооборота служебные документы поступают только в ИБ отправителя.
					Если ЭлектронныйДокумент.КодТранзакции = "CancellationOfferReject" Тогда
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("ВидЭД",               Перечисления.ВидыЭД.ПредложениеОбАннулировании);
						СтруктураПараметровПоиска.Вставить("Организация",         СтруктураФайлаЭД.Организация);
						СтруктураПараметровПоиска.Вставить("Контрагент",          СтруктураФайлаЭД.Контрагент);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
						НаименованиеВладельца = СтруктураФайлаЭД.ДополнительныеДанные.НаименованиеВладельца;
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("Наименование",        НаименованиеВладельца);
						СтруктураПараметровПоиска.Вставить("Организация",         СтруктураФайлаЭД.Организация);
						СтруктураПараметровПоиска.Вставить("Контрагент",          СтруктураФайлаЭД.Контрагент);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли ЭлектронныйДокумент.КодРегламента = "Nonformalized" ИЛИ ЭлектронныйДокумент.КодРегламента = "Formalized"
						ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка
						ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
						ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
						ИЛИ СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка Тогда
							
							ПараметрыПоиска = Новый Структура;
							ПараметрыПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
							ПараметрыПоиска.Вставить("Организация",         СтруктураФайлаЭД.Организация);
							ПараметрыПоиска.Вставить("Контрагент",          СтруктураФайлаЭД.Контрагент);
							
							Если ВРег(ЭлектронныйДокумент.КодРегламента) = ВРег("Invoice") Тогда
								
								МассивТиповЭД = Новый Массив;
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
								ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТиповЭД);
								
							Иначе
								МассивТиповЭД = Новый Массив;
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
								ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТиповЭД);
								
							КонецЕсли;
							ПараметрыПоиска.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Исходящий);
							
							ПервичныйЭД = ОпределитьЭлектронныйДокумент(ПараметрыПоиска);
							
							ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
							
							Если ПервичныйЭДНайден Тогда
								Если ЗначениеЗаполнено(ПервичныйЭД.ЭлектронныйДокументВладелец) Тогда
									ПервичныйЭД = ПервичныйЭД.ЭлектронныйДокументВладелец;
								КонецЕсли;
							КонецЕсли;
						Иначе
							
							ПервичныйЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДПервичногоЭД));
							ПервичныйЭДНайден = (ПервичныйЭД.ПолучитьОбъект() <> Неопределено);
							
						КонецЕсли;
						
						ЭлектронныйДокументВладелец = ПервичныйЭД;
						
					Иначе
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Входящий);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = ПервичныйЭД <> Неопределено;
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
							ЭлектронныйДокументВладелец = ПервичныйЭД;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ПервичныйЭДНайден Тогда
						ТекстСообщения = НСтр("ru='Не удалось найти владельца для служебного электронного документа.';uk='Не вдалося знайти власника для службового електронного документа.'");
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
					
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						
						Параметры = Новый Структура;
						Параметры.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
							
							Параметры.Вставить("ВидЭД", Перечисления.ВидыЭД.ИзвещениеОПолучении);
							Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
						Иначе
							
							Параметры.Вставить("ВидЭД", Перечисления.ВидыЭД.УведомлениеОбУточнении);
							Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ);
						КонецЕсли;
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Параметры.НаправлениеЭД);
						СтруктураПараметровПоиска.Вставить("ВидЭД",               Параметры.ВидЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Параметры.ТипЭлементаВерсииЭД);
						ЭлектронныйДокументВладелец = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					КонецЕсли;
					
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						ТекстСообщения = НСтр("ru='Не удалось найти владельца для служебного электронного документа.';uk='Не вдалося знайти власника для службового електронного документа.'");
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
					
					ВладелецЭД = ПервичныйЭД.ВладелецФайла;
					
					Если СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.Ошибка Тогда
						
						ШаблонСообщения = НСтр("ru='Возникла ошибка при передаче электронного документа %1, получатель %2.
                        |(подробности см. в Журнале регистрации).'
                        |;uk='Виникла помилка при передачі електронного документа %1, одержувач %2.
                        |(подробиці див. у Журналі реєстрації).'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПервичныйЭД,
							ПервичныйЭД.Контрагент);
						
						ПодробныйШаблонОшибки = НСтр("ru='При передаче электронного документа %1, возникла ошибка: %2.
                        |Документ информационной базы (владелец электронного документа) - %3;
                        |Соглашение об обмене электронными документами - %4.'
                        |;uk='При передачі електронного документа %1, виникла помилка: %2.
                        |Документ інформаційної бази (власник електронного документа) - %3;
                        |Угода про обмін електронними документами %4.'");
						ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодробныйШаблонОшибки, ПервичныйЭД,
						СтруктураФайлаЭД.ОписаниеОшибки, ВладелецЭД, ПервичныйЭД.СоглашениеЭД);
						
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Передача электронного документа';uk='Передача електронного документа'"),
							ПодробныйТекстОшибки, ТекстСообщения);
						
						СтруктураОбновленияПараметров = Новый Структура;
						СтруктураОбновленияПараметров.Вставить("ВладелецЭД",     ВладелецЭД);
						СтруктураОбновленияПараметров.Вставить("ВидЭД",          ПервичныйЭД.ВидЭД);
						СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",  ПервичныйЭД.НаправлениеЭД);
						СтруктураОбновленияПараметров.Вставить("Контрагент",     ПервичныйЭД.Контрагент);
						СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",   ПервичныйЭД.СоглашениеЭД);
						СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ОписаниеОшибки);
						СтруктураОбновленияПараметров.Вставить("СтатусЭД", ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
						СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
						
						ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров);
						
					Иначе
						
						// Поместим файл данных в присоединенные файлы к документу БД.
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       СтруктураФайлаЭД.НаправлениеЭД);
						СтруктураПараметровПоиска.Вставить("ВидЭД",               СтруктураФайлаЭД.ВидЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
						
						ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						Если ДобавленныйФайл = Неопределено Тогда
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
							ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
							
							Ответственный = ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыПакетаЭД.Контрагент,
								ПараметрыПакетаЭД.НастройкаЭДО);
							
							СтруктураОбновленияПараметров = Новый Структура;
							СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                  ВладелецЭД);
							СтруктураОбновленияПараметров.Вставить("ВидЭД",                       СтруктураФайлаЭД.ВидЭД);
							СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
							СтруктураОбновленияПараметров.Вставить("УникальныйИД",                ГУИДПервичногоЭД);
							СтруктураОбновленияПараметров.Вставить("НомерЭД",                     ЭлектронныйДокументВладелец.НомерЭД);
							СтруктураОбновленияПараметров.Вставить("Организация",                 СтруктураФайлаЭД.Организация);
							СтруктураОбновленияПараметров.Вставить("Контрагент",                  СтруктураФайлаЭД.Контрагент);
							СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",               СтруктураФайлаЭД.НомерВерсииЭД);
							СтруктураОбновленияПараметров.Вставить("НомерДокументаОтправителя",   СтруктураФайлаЭД.НомерДокументаОтправителя);
							СтруктураОбновленияПараметров.Вставить("ДатаДокументаОтправителя",    СтруктураФайлаЭД.ДатаДокументаОтправителя);
							СтруктураОбновленияПараметров.Вставить("Ответственный",               Ответственный);
							СтруктураОбновленияПараметров.Вставить("Отправитель",                 ПараметрыПакетаЭД.Отправитель);
							СтруктураОбновленияПараметров.Вставить("Получатель",                  ПараметрыПакетаЭД.Получатель);
							СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",                ПараметрыПакетаЭД.НастройкаЭДО);
							СтруктураОбновленияПараметров.Вставить("ПрофильНастроекЭДО",          ПараметрыПакетаЭД.ПрофильНастроекЭДО);
							СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
							СтруктураОбновленияПараметров.Вставить("ВерсияРегламентаЭДО",         ЭлектронныйДокументВладелец.ВерсияРегламентаЭДО);
							СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",         СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
							СтруктураОбновленияПараметров.Вставить("НаименованиеФайла",           ЭлектронныйДокумент.ИмяБезРасширения);
							СтруктураОбновленияПараметров.Вставить("СтатусЭД", ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
							Перечисления.СтатусыЭД.Получен, ДобавленныйФайл));
							
							ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров, Ложь);
							
							СтруктураОбновленияПараметров = Новый Структура;
							СтруктураОбновленияПараметров.Вставить("СтатусЭД",
								ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
							
							Если ЗначениеЗаполнено(СтруктураФайлаЭД.ТекстУточнения) Тогда
								СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ТекстУточнения);
							КонецЕсли;
							
							СтатусЭДВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйЭД, "СтатусЭД");
							
							Если Не (СтруктураОбновленияПараметров.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
								И СтатусЭДВладельца = Перечисления.СтатусыЭД.Утвержден) Тогда	
								
								ОбменСКонтрагентамиСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров, Ложь);
							КонецЕсли;
							
							Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								
								Если ЭлектронныйДокумент.КодТранзакции <> "ReceiveNotice" И ЭлектронныйДокумент.КодТранзакции <> "CorrectionNoticeReceiveNotice" Тогда
									
									МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
								КонецЕсли;
								
								Если ЭлектронныйДокумент.КодТранзакции = "PostDateConfirmation" ИЛИ ЭлектронныйДокумент.КодТранзакции = "SendConfirmation"
									ИЛИ ЭлектронныйДокумент.КодТранзакции = "ReceiveNotice" ИЛИ ЭлектронныйДокумент.КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
									
									ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ДобавленныйФайл);
								КонецЕсли;
								
								Если ЭлектронныйДокумент.КодТранзакции = "ReceiveNotice" Тогда
									
								КонецЕсли;
								
							КонецЕсли;
						Иначе
							
							 //Для случая перераспаковки пакета ЭД.
							Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
								Если Подпись.УникальныйИД = ЭлектронныйДокумент.УникальныйИД Тогда
									Подпись.СсылкаНаЭДПрисоединенныйФайл = ДобавленныйФайл;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						
						// Занесем информацию в пакет ЭД.
						МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
						
						// Проверим актуальность версий форматов.
						ВходящаяВерсияФормата = Неопределено;
						Если ЭлектронныйДокумент.Свойство("ДополнительныеПараметры") И ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры)
							И ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("ВерсияФормата", ВходящаяВерсияФормата)
							И ЗначениеЗаполнено(ВходящаяВерсияФормата)
							И ПараметрыПакетаЭД.НастройкаЭДО.АвтоПереходНаНовыеФорматы Тогда
							
							ТекущаяВерсияФормата = ПараметрыПакетаЭД.НастройкаЭДО.ИсходящиеДокументы.Найти(ЭлектронныйДокументВладелец.ВидЭД, "ИсходящийДокумент").ВерсияФормата;
							АктуальнаяВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(ЭлектронныйДокументВладелец.ВидЭД);
							Если ВходящаяВерсияФормата <> ТекущаяВерсияФормата
								И ВходящаяВерсияФормата = АктуальнаяВерсияФормата Тогда
								
								ТекущаяНастройкаЭДО = ПараметрыПакетаЭД.НастройкаЭДО.ПолучитьОбъект();
								ИсходнаяСтрокаЭД = ТекущаяНастройкаЭДО.ИсходящиеДокументы.Найти(ЭлектронныйДокументВладелец.ВидЭД, "ИсходящийДокумент");
								ИсходнаяСтрокаЭД.ВерсияФормата = АктуальнаяВерсияФормата;
								ТекущаяНастройкаЭДО.Записать();
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Записываем ЭП в ЭД
			Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
				
				Если НЕ ЗначениеЗаполнено(Подпись.СсылкаНаЭДПрисоединенныйФайл) Тогда
					ТекстСообщения = НСтр("ru='Не удалось найти электронный документ для сохранения подписи.';uk='Не вдалося знайти електронний документ для збереження підпису.'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
				ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(Подпись.АдресЭП);
				Если ОбменСКонтрагентамиСлужебный.ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, Подпись.СсылкаНаЭДПрисоединенныйФайл) Тогда
					Продолжить;
				КонецЕсли;
				
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись",             ДвоичныеДанныеПодписи);
				СвойстваПодписи.Вставить("Сертификат",          ПолучитьИзВременногоХранилища(Подпись.АдресСертификата));
				СвойстваПодписи.Вставить("Отпечаток",           Подпись.Отпечаток);
				СвойстваПодписи.Вставить("КомуВыданСертификат", Подпись.КомуВыданСертификат);
				СвойстваПодписи.Вставить("ПодписьВерна",        Подпись.ПодписьВерна);
				СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Подпись.ДатаПроверкиПодписи);
				СвойстваПодписи.Вставить("ИмяФайлаПодписи",     Подпись.ИмяБезРасширения);
				
				ЭлектроннаяПодпись.ДобавитьПодпись(Подпись.СсылкаНаЭДПрисоединенныйФайл, СвойстваПодписи);
				
				Если Подпись.КодТранзакции = "MainDocumentResign" Или Подпись.КодТранзакции = "CancellationOfferResign" Тогда
					
					НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ПолученоПодтверждение,
						Подпись.СсылкаНаЭДПрисоединенныйФайл);
						
					СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
					ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Подпись.СсылкаНаЭДПрисоединенныйФайл,
						СтруктураПараметров, Ложь);
					
					ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подпись.СсылкаНаЭДПрисоединенныйФайл, "ВладелецФайла");
					Если ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
						ПроизвольныйЭДОбъект = ВладелецЭД.ПолучитьОбъект();
						ПроизвольныйЭДОбъект.СтатусДокумента = НовыйСтатусЭД;
						ПроизвольныйЭДОбъект.Записать();
					КонецЕсли;
					
					// Занесем информацию в пакет ЭД.
					МассивДобавленныхФайлов.Добавить(Подпись.СсылкаНаЭДПрисоединенныйФайл);
				КонецЕсли;
				
			КонецЦикла;
			
			// Отправим на формирование ИОП сразу на сервере.
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСлужебныхЭД,
					СформироватьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, Перечисления.ВидыЭД.ИзвещениеОПолучении));
			КонецЕсли;
			
			// Обработаем пакет ЭД
			ПакетЭДОбъект = СтруктураПакетаЭД.ПакетЭДСсылка.ПолучитьОбъект();
			
			// Добавим информацию о присоединенном файле в документ пакета электронных документов.
			Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
				
				НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
				НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
				НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
			КонецЦикла;
			
			ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
			ПакетЭДОбъект.Записать();
			
			КолРаспакованныхЭД = КолРаспакованныхЭД + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ЗначениеЗаполнено(ФайлЭД) Тогда
				УдалитьФайлы(ФайлЭД);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru='При распаковке пакетаЭД: %1 возникла ошибка:
            |%2'
            |;uk='При розпакуванні пакету ЕД: %1 виникла помилка:
            |%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				СтруктураПакетаЭД.ПакетЭДСсылка, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"), ТекстОшибки,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	// Обновим данные по основаниям у владельцев ЭД.
	ОбменСКонтрагентамиСлужебныйВызовСервера.НайтиЗаполнитьОснованияУВладельцевЭД();
КонецПроцедуры

Функция ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции)
	
	// Виды входящих ЭД и соответствующие коды транзакций:
	// ЭД       MainDocument
	// Подпись  MainDocumentResign
	// ЭД(ЭСФ)  Invoice
	// ПДПЭСФ   PostDateConfirmation
	// ИПЭСФ    ReceiveNotice
	// УУЭСФ    CorrectionNotice
	// ИПУУЭСФ  CorrectionNoticeReceiveNotice
	// ПДОЭСФ   SendConfirmation
	// ПДОИПЭСФ ReceiveNoticePostDateConfirmation
	// ПОА      CancellationOffer
	
	ВозвращаемоеЗначение = "СлужебныйЭД";
	Если КодТранзакции = "MainDocument" ИЛИ КодТранзакции = "Invoice"
		ИЛИ КодТранзакции = "VendorTitle" ИЛИ КодТранзакции = "CustomerTitle" Тогда
		
		ВозвращаемоеЗначение = "ЭД";
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьСтруктуруФайлаЭД()
	
	СтруктураФайлаЭД = Новый Структура();
	СтруктураФайлаЭД.Вставить("ВладелецЭД");
	СтруктураФайлаЭД.Вставить("Контрагент");
	СтруктураФайлаЭД.Вставить("ВидЭД");
	СтруктураФайлаЭД.Вставить("НаправлениеЭД");
	
	СтруктураФайлаЭД.Вставить("СоглашениеЭД");
	СтруктураФайлаЭД.Вставить("Организация");
	СтруктураФайлаЭД.Вставить("НомерЭД");
	СтруктураФайлаЭД.Вставить("НомерВерсииЭД");
	СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД");
	СтруктураФайлаЭД.Вставить("НомерДокументаОтправителя");
	СтруктураФайлаЭД.Вставить("ДатаДокументаОтправителя");
	
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		СтруктураФайлаЭД.Вставить("Партнер");
	КонецЕсли;
	СтруктураФайлаЭД.Вставить("СтатусЭДВладельца");
	СтруктураФайлаЭД.Вставить("ОписаниеОшибки");
	СтруктураФайлаЭД.Вставить("ТекстУточнения");
	СтруктураФайлаЭД.Вставить("ДополнительныеДанные");
	
	// Обязательные для заполнения параметры.
	СтруктураФайлаЭД.Вставить("ОбязательныеПараметры","ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД");
	
	Возврат СтруктураФайлаЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Шаблон = "
		|И ЭДПрисоединенныеФайлы.%1 %2 %3";
	Для Каждого Элемент Из СтруктураПараметровПоиска Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			
			ШаблонИмяРеквизита = СтрЗаменить(Шаблон, "%1", Элемент.Ключ);

			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				
				ЗнакСравнения = "В";
				
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "("+"&" +Элемент.Ключ+ ")");
				
				
			Иначе
				
				ЗнакСравнения = "=";
				
				ШаблонСравнение = СтрЗаменить(ШаблонИмяРеквизита, "%2", ЗнакСравнения);
				ШаблонИмяПараметра = СтрЗаменить(ШаблонСравнение, "%3", "&"+Элемент.Ключ);
				
			КонецЕсли;
			
			Текст = Текст + ШаблонИмяПараметра;
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = Текст;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

#КонецОбласти

// Устанавливает статус документа ПакетЭДО.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭДО
//  СтатусПакета - ссылка на перечисление СтатусыПакетовЭД
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Выполняет добавление ЭП в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на элемент справочника, содержащего в себе электронный документ,
//  ДанныеПодписи - Структура параметров ЭП.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ПрофильНастроекЭДО, "СпособОбменаЭД");
	
	Попытка
		НачатьТранзакцию();
		ПрисоединенныеФайлы.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, ДанныеПодписи);
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
		КонецЕсли;
		Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолностьюПодписан,
																		ПрисоединенныйФайл);
			Иначе
				НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.Подписан,
																		ПрисоединенныйФайл);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			ОбменСКонтрагентамиПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
			
		Иначе
			
			// В рамках интеркампани, документ должен иметь 2 подписи,
			// т.к. электронный документ подписан не полностью, то достаточно проверить,
			// что количество ЭП отлично от 0.
			ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
													И ПрисоединенныйФайл.ЭлектронныеПодписи.Количество() > 0);
			
			Если ДокументИнтеркампаниЧастичноПодписан Тогда
				
				НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
					Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
				ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru='Ошибка подписи электронного документа %1';uk='Помилка підпису електронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ВидОперации = НСтр("ru='установка подписи ЭП';uk='встановлення підпису ЕП'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ИнформацияОбОшибке, ТекстСообщения);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Выполняет действия с ЭД после установки электронной подписи.
//
// Параметры:
//   МассивЭДкОбновлениюСтатуса - Массив - элементы - СправочникСсылка.ЭДПрисоединенныеФайлы.
//
Процедура ДействияПослеПодписанияЭДНаСервере(МассивЭДкОбновлениюСтатуса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПрисоединенныйФайл Из МассивЭДкОбновлениюСтатуса Цикл
		СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ПрофильНастроекЭДО, "СпособОбменаЭД");
		Попытка
			НачатьТранзакцию();
			
			// Подпись установленная сейчас является валидной по-умолчанию
			УстановитьСтатусПоследнейПодписи(ПрисоединенныйФайл); 

			Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
				
				НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
				Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
					НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																			Перечисления.СтатусыЭД.ПолностьюПодписан,
																			ПрисоединенныйФайл);
				Иначе
					НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																			Перечисления.СтатусыЭД.Подписан,
																			ПрисоединенныйФайл);
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
				ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				ОбменСКонтрагентамиПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
				
			Иначе
				
				// В рамках интеркампани, документ должен иметь 2 подписи,
				// т.к. электронный документ подписан не полностью, то достаточно проверить,
				// что количество ЭП отлично от 0.
				ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
														И ПрисоединенныйФайл.ЭлектронныеПодписи.Количество() > 0);
				Если ДокументИнтеркампаниЧастичноПодписан Тогда
					
					НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
					СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
					ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
					
				КонецЕсли;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонСообщения = НСтр("ru='Ошибка подписи электронного документа %1';uk='Помилка підпису електронного документа %1'");
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
			Операция = НСтр("ru='установка подписи ЭП';uk='встановлення підпису ЕП'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы,
									  Знач ПризнакПодписи,
									  Знач СоотвСоглашенийИПараметровСертификатов = Неопределено) Экспорт
	
	МассивСтруктурПакетовЭД = ОбменСКонтрагентамиСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте Тогда
				МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если ЭлектронноеВзаимодействиеСлужебный.НемедленнаяОтправкаЭД() Тогда
				МассивПЭД = Новый Массив;
				МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
				КолОтправленных = КолОтправленных + ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИПараметровСертификатов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных",                    КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, Знач СоотвСоглашенийИПараметровСертификатов, ТекстСообщения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = 0;
	Для Каждого ПакетЭД Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		
		НачатьТранзакцию();
		
		ОбменСКонтрагентамиСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																		Перечисления.СтатусыПакетовЭД.Отправлен,
																		ТекущаяДатаСеанса());
		Если Не ПакетЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
				"ПрофильНастроекЭДО, НастройкаЭДО, СпособОбменаЭД, АдресРесурсаКонтрагента, ЭлектронныеДокументы");
			
			МассивПрофилейНастроекЭДО = Новый Массив;
			МассивПрофилейНастроекЭДО.Добавить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
			
			ТипОтправки = РеквизитыПакетаЭД.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				ОтправленТекущийПакет = ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
				РезультатОтправки = РезультатОтправки + ОтправленТекущийПакет;
				Если ОтправленТекущийПакет = 0 Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				СоотвСоглашений = Неопределено;
				Если ТипЗнч(СоотвСоглашенийИПараметровСертификатов) = Тип("Соответствие")
					И СоотвСоглашенийИПараметровСертификатов.Количество() > 0 Тогда
					ПараметрыСертификата = СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				ИначеЕсли ДоступныПараметрыДляАвторизацииНаСервереОператора(МассивПрофилейНастроекЭДО, СоотвСоглашений) Тогда
					ПараметрыСертификата = СоотвСоглашений.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Иначе
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				Маркер = Неопределено;
				Если Не (РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(ПараметрыСертификата)
					И ПараметрыСертификата.Свойство("МаркерРасшифрованный", Маркер) И ЗначениеЗаполнено(Маркер)) Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				
				КоличествоОтправленных = ОбменСКонтрагентамиВнутренний.ОтправитьЧерезОператораЭДО(
																	Маркер,
																	АдресКаталогаОтправки,
																	"SendMessage",
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО);
																	
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = НСтр("ru='Не удалось отправить оператору ЭДО ""%1"".';uk='Не вдалося надіслати оператору ЕДО ""%1"".'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ОтменитьТранзакцию();
					Продолжить;
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				
				АдресКаталога = РеквизитыПакетаЭД.АдресРесурсаКонтрагента
					+ ?(Прав(РеквизитыПакетаЭД.АдресРесурсаКонтрагента, 1) <> "\", "\", "");
				КаталогНаДиске = Новый Файл(АдресКаталога);
				Если НЕ КаталогНаДиске.Существует() Тогда
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
				
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога + Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				FTPСоединение = ОбменСКонтрагентамиСлужебный.ПолучитьFTPСоединение(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Если FTPСоединение = Неопределено Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				КаталогОтправки = РеквизитыПакетаЭД.АдресРесурсаКонтрагента;
				ОбменСКонтрагентамиСлужебный.ПодготовитьПутьFTP(КаталогОтправки);
				ТекстОшибки = "";
				Попытка
					FTPСоединение.УстановитьТекущийКаталог(КаталогОтправки);
				Исключение
					ОбменСКонтрагентамиСлужебный.СоздатьКаталогиFTP(FTPСоединение, КаталогОтправки, , ТекстОшибки);
				КонецПопытки;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					ОбменСКонтрагентамиСлужебный.ЗаписатьФайлНаFTP(FTPСоединение, Файл.ПолноеИмя, Файл.Имя, , ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
						Прервать;
					КонецЕсли;
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ШаблонСообщения = НСтр("ru='Ошибка отправки пакета по настройке: %1, способ обмена: %2
                                    |%3'
                                    |;uk='Помилка надсилання пакету по налаштуванню: %1, спосіб обміну: %2
                                    |%3'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД, КраткоеПредставлениеОшибки);
			ШаблонВидаОперации = НСтр("ru='отправка пакета ЭД по настройке: %1, способ обмена %2';uk='відправлення пакету ЕД по настройці: %1, спосіб обміну %2'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонВидаОперации, РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			
			ОтменитьТранзакцию();
			
		КонецПопытки;
		Если ЗначениеЗаполнено(АдресКаталогаОтправки) Тогда
			УдалитьФайлы(АдресКаталогаОтправки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса;
//
// Возвращаемый параметр:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла) Экспорт
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

// Устарела. Используется механизм БСП ПрисоединенныеФайлы.ПометитьНаУдалениеПрисоединенныеФайлы (Ред.1.2).
// Помечает на удаление элементы справочника ЭДПрисоединенныеФайлы с отбором по владельцу
//
// Параметры: 
//  Ссылка - ссылка на объект.
//
Процедура ПометитьНаУдалениеОбменСКонтрагентамиПоВладельцу(Ссылка, ПометкаУдаления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПометкаУдаленияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПометкаУдаления
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И (Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|			ИЛИ Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПустаяСсылка))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления <> ПометкаУдаления Тогда
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ФайлОбъект.Заблокировать();
			Исключение
				Шаблон = НСтр("ru='Не удалось заблокировать объект %1';uk='Не вдалося заблокувати об''єкт %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ФайлОбъект);
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = НСтр("ru='Пометка на удаление электронных документов';uk='Помітка на видалення електронних документів'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 5);
				Продолжить;
			КонецПопытки;
			ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			ФайлОбъект.Разблокировать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет по параметрам, существует ли действующее соглашение
// 
// Параметры:
//  ПараметрыЭД - структура, содержащая параметры поиска соглашения
//
// Возвращаемое значение:
//  Булево Истина или Ложь
//
Функция ЕстьДействующееСоглашение(ПараметрыЭД) Экспорт
	
	НастройкиОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат ЗначениеЗаполнено(НастройкиОбмена);
	
КонецФункции

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = ОбменСКонтрагентамиПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
																								СсылкаНаЭД);
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("ПараметрыОткрытияФормы") Тогда
		СтруктураПараметров.ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",
															РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	Возврат СтруктураПараметров;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - булево, Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	Результат = "";
	Возврат Результат;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		
	  	ТекущееСостояниеЭДО = СостояниеВерсииЭД(СсылкаНаВладельца);
	  	Результат = Строка(ТекущееСостояниеЭДО);
		
		ПараметрыЭД = Неопределено;
		Если НастройкаЭДСуществует(СсылкаНаВладельца, ПараметрыЭД) Тогда
			Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Ложь) Тогда
				ШаблонСостоянияЭД = НСтр("ru='%1 «Недостаточно прав для чтения ЭДО»';uk='%1 «Недостатньо прав для читання ЕДО»'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Ложь;
			Иначе
				Гиперссылка = Истина;
				Если Не ЗначениеЗаполнено(Результат) Тогда
					Гиперссылка = Ложь;
					Результат = НСтр("ru='ЭДО не начат';uk='ЕДО не розпочато'");
				КонецЕсли;
				
				СостояниеСоглашения = Неопределено;
				ПараметрыЭД.Свойство("СостояниеСоглашения", СостояниеСоглашения);
				Если СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости Тогда
					ШаблонСостоянияЭД = НСтр("ru='%1 (проверка технической совместимости)';uk='%1 (перевірка технічної сумісності)'");
					Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Результат) Тогда
				ШаблонСостоянияЭД = НСтр("ru='%1 (настройка ЭДО не подключена)';uk='%1 (настройка ЕДО не підключена)'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Истина;
			Иначе
				
				ЗаполнитьТекстПриглашенияКЭДО(Результат, ПараметрыЭД, СсылкаНаВладельца, Гиперссылка);
				
			КонецЕсли;
			Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоНастройкиЭДО(Ложь) Тогда
				ШаблонСостоянияЭД = НСтр("ru='%1 «Недостаточно прав для настройки ЭДО»';uk='%1 «Недостатньо прав для налаштування ЕДО»'");
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостоянияЭД, Результат);
				Гиперссылка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет текст приглашения контрагента к ЭДО
//Параметры:
// ТексиПриглашения - Строка- заполняемый текст надписи формы
// ПараметрыЭД - Структура - свойства электронного документа, соотвествующего документу ИБ
// СсылкаНаВладельца - ДокументССылка - ссылка на документ ИБ
// Гиперссылка - Булево - определяет отображать ли надпись на форме как гиперссылку
//
Процедура ЗаполнитьТекстПриглашенияКЭДО(ТекстПриглашения, ПараметрыЭД, СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстПриглашения = "";
	Возврат;
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		
		ТекстПриглашения = НСтр("ru='Нет действующей настройки ЭДО с организацией-получателем';uk='Немає діючої настройки ЕДО з організацією-отримувачем'");
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЭД.Организация) И ЗначениеЗаполнено(ПараметрыЭД.Контрагент)
		И Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|	И ПрофилиНастроекЭДО.Организация = &Организация
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
		Запрос.УстановитьПараметр("Организация", ПараметрыЭД.Организация);
		
		ШаблонТекстаНавигационнойСсылки = НСтр("ru='Пригласить %1 к обмену электронными документами в 1С-ЭДО';uk='Запросити %1 до обміну електронними документами в 1С-ЕДО'");
		ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки, ПараметрыЭД.Контрагент);
		
		НаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"НаименованиеКонтрагентаДляСообщенияПользователю");
		
		ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Контрагент, НаименованиеКонтрагентаДляСообщенияПользователю));
		Если Запрос.Выполнить().Пустой() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СостоянияКонтрагентовБЭД.Состояние
			|ИЗ
			|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
			|ГДЕ
			|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент";
			
			Запрос.УстановитьПараметр("Контрагент", ПараметрыЭД.Контрагент);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ШаблонТекстаНавигационнойСсылки = НСтр("ru='Подключить ""%1"" к ЭДО';uk='Підключити ""%1"" до ЕДО'");
			
			НаименованиеОрганизацииСокращенное = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СокращенноеНаименованиеОрганизации");
			
			ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Организация, НаименованиеОрганизацииСокращенное));
			
			Если Выборка.Следующий()
				И (Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.НеПодключен
				И Выборка.Состояние <> Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка()) Тогда
				
				ШаблонТекстаНавигационнойСсылки = НСтр("ru='С ""%1"" возможен обмен электронными документами';uk='З ""%1"" можливий обмін електронними документами'");
				
				ИмяРеализацияТоваровУслуг = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"РеализацияТоваровУслугВМетаданных");
				ИмяПоступлениеТоваровУслуг = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"ПоступлениеТоваровУслугВМетаданных");
				Если ИмяРеализацияТоваровУслуг <> Неопределено
					И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяРеализацияТоваровУслуг) Тогда
					
					ШаблонТекстаНавигационнойСсылки = НСтр("ru='Обмен электронными документами с ""%1"" можно начать прямо сейчас';uk='Обмін електронними документами з ""%1"" можна почати прямо зараз'");
				ИначеЕсли ИмяПоступлениеТоваровУслуг <> Неопределено
					И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяПоступлениеТоваровУслуг) Тогда
					
					ШаблонТекстаНавигационнойСсылки = НСтр("ru='Получать электронные документы от ""%1"", а не вводить руками, можно прямо сейчас';uk='Отримувати електронні документи від ""%1"", а не вводити руками, можна прямо зараз'");
				КонецЕсли;
				
				НаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагентаДляСообщенияПользователю");
				
				ТекстПриглашения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНавигационнойСсылки,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.Контрагент, НаименованиеКонтрагентаДляСообщенияПользователю));
			КонецЕсли;
		КонецЕсли;
		
		Гиперссылка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
Функция ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Экспорт
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.ТипЭлементаВерсииЭД) Тогда
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Иначе
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Ошибка
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ДопДанные);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет что эд с.ф. имеет конечный статус в зависимости от направления.
//
Функция ДОСФЗавершен(СсылкаСФ, НаправлениеЭД) Экспорт
	
	ДОЗавершен = Ложь;
	СтатусСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаСФ, "СтатусЭД");
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДОЗавершен = (СтатусСФ = Перечисления.СтатусыЭД.Утвержден);
	Иначе
		ДОЗавершен = (СтатусСФ = Перечисления.СтатусыЭД.Доставлен);
	КонецЕсли;
	
	Возврат ДОЗавершен;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения .
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	Попытка
		МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	Если Отказ Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	Для каждого СтрокаЭП Из ОбъектЭД.ЭлектронныеПодписи Цикл
		Попытка
			ДвоичныеДанныеЭП = СтрокаЭП.Подпись.Получить();
			ЭлектронноеВзаимодействиеСлужебный.ПроверитьПодпись(
				МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭП);
			СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭП.ПодписьВерна = Истина;
		Исключение
			СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭП.ПодписьВерна = Ложь;
			
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("114");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru='проверка электронной подписи';uk='перевірка електронного підпису'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОбъектЭД.Записать();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПерезаполнитьДокументыИБПоЭД(ДокументИБ, Знач ЭД, ОбъектМетаданных = Неопределено, ДокументЗагружен = Ложь) Экспорт
	
	// Внимание! Для однократной сделки в ЭД будет Структура.
	
	Если ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		ЭД = ЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	ЗаполнитьДокументИБПоЭД(ДокументИБ, ЭД, ДокументЗагружен);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ДокументИБ)).ПолноеИмя();
	
КонецПроцедуры

// Возвращает двоичные данные электронного документа
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
// СертификатПодписи  - ссылка - ссылка на элемент справочника Сертификаты ЭП.
//
Функция ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД);
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, Организация, НаправлениеЭД, Расширение");
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			ИЛИ (ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав)) Тогда
			
			Если СтрНайти(ПараметрыЭД.Расширение, "xml") > 0 Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла(ПараметрыЭД.Расширение);
				ДвоичныеДанныеЭД.Записать(ИмяФайла);
				
			ИначеЕсли СтрНайти(ПараметрыЭД.Расширение, "zip") > 0 Тогда
				
				ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
				ДвоичныеДанныеЭД.Записать(ИмяАрхива);
				
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяАрхива);
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("signature", СсылкаНаЭД.УникальныйИдентификатор());
				
				Попытка
					ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если Не ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Извлечение ЭД CML из архива при подписи';uk='Витяг ЕД CML з архіву при підписи'"),
					ТекстОшибки, ТекстСообщения);
				КонецПопытки;
				ЗИПЧтение.Закрыть();
				
				ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Если ФайлыЭД.Количество() > 0 Тогда
					ИмяФайла = ФайлыЭД[0].ПолноеИмя;
				КонецЕсли;
				
				УдалитьФайлы(ИмяАрхива);
			КонецЕсли;
			
			// Прочитаем файл для последующего редактирования.
			ОписаниеОшибки = "";
			ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ИмяФайла, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
			
			// Заполним тег Подписант в ЭД.
			ПространствоИменСхемы = ДанныеФайлаЭД.Тип().URIПространстваИмен;
			ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыЭД, СертификатПодписи);
			
			ДанныеФайлаЭД.Проверить();
			
			ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(ДанныеФайлаЭД, ИмяФайла);
			
			Если СтрНайти(ПараметрыЭД.Расширение, "zip") > 0 Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("zip");
				ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяФайла);
				
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
				Для Каждого Файл Из ФайлыАрхива Цикл
					ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
				КонецЦикла;
				
				Попытка
					ЗипКонтейнер.Записать();
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Формирование архива ЭД при подписи';uk='Формування архіву ЕД при підписи'"),
					ТекстОшибки, ТекстСообщения);
				КонецПопытки;
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			ДвоичныеДанныеЭД = Новый ДвоичныеДанные(ИмяФайла);
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(СсылкаНаЭД, ИнформацияОФайле);
				УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеЭД;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив - ссылки на электронные документы, для которых надо определить последовательность действий.
//  КлиентскиеНастройкиКриптографии - Массив - доступные сертификаты.
//  Действия - Строка - строковое представление необходимых действий.
//  ДопПараметры - Структура - дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - ссылки на элемент справочника ЭДПрисоединенныеФайлы.
//  СоотвСертификатовИПаролей - Соответствие - ключ - СертификатЭП, значение - пароль к сертификату.
//
// Возвращаемое значение:
//  Структура, Неопределено - результат выполненных действий.
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект,
							  Знач МассивОтпечатковСертификатов,
							  Знач Действия,
							  ДопПараметры,
							  Знач ЭД,
							  Знач СоотвСертификатовИПаролей) Экспорт
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	НемедленнаяОтправкаЭД = ЭлектронноеВзаимодействиеСлужебный.НемедленнаяОтправкаЭД();
	
	МассивОтпечатковКлиент = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковКлиент, МассивОтпечатковСертификатов);
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать")
		ИЛИ ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
				МассивОтпечатковСертификатовНаСервере = Новый Массив;
			КонецПопытки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
		КонецЕсли;
		
		ТаблицаДоступныхСертификатов = ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(
																				МассивОтпечатковСертификатов);
																				
		МассивОтпечатков = ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Отпечаток");

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
										ИЛИ ЭтоСлужебныйДокумент(ЭД))) Тогда
		ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	// Ключи структуры возврата:
	// ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД - тип Булево;
	// КоличествоНовыхЭД, КоличествоУтвержденныхЭД, КолПодписанных, КолПодготовленных, КолОтправленных - тип Число;
	// МассивНовыхЭД - тип Массив;
	// СоотвСертификатовИМассивовЭДКПодписи - тип Соответствие (ключ - СертификатЭП, значение - МассивЭД к подписи на клиенте)
	// СтруктураКОтправке - тип Структура с ключами:
	//                   БезПодписи, СПодписью - тип Массив, МассивЭД (к подготовке) к отправке, соответственно не подписываемые и подписываемые;
	//                   САвторизацией - тип Соответствие (ключ - СоглашениеЭД, значение - МассивЭД к отправке).
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
	
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	КолНовыхЭД = 0;
	Если ЭД = Неопределено И ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект,
																								   ,
																								   ,
																								   ,
																								   ВидЭД);
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылокНаОбъект.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
		
		Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
			ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
			ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
			|(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
			|ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован))";
		КонецЕсли;
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		Измерение = Метаданные.РегистрыСведений.СостоянияЭД.Измерения.Найти("СсылкаНаОбъект");
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Измерение.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		МассивНовыхЭД = Новый Массив;
		
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивНовыхЭД = ОбменСКонтрагентамиСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхЭД = МассивНовыхЭД.Количество();
		КонецЕсли;
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Формирование временных таблиц - обрабатываемых ЭД, сформированные ВТ используются далее на всех этапах:
	Если ЗначениеЗаполнено(ЭД) Тогда
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	ЭД.Ссылка,
			|	ЭД.ВидЭД,
			|	ЭД.ВладелецФайла,
			|	ЭД.Контрагент,
			|	ЭД.НаправлениеЭД,
			|	ЭД.Организация,
			|	ЭД.ПрофильНастроекЭДО,
			|	ЭД.СоглашениеЭД,
			|	ЭД.ЭлектронныйДокументВладелец,
			|	ВЫБОР
			|		КОГДА ЭД.ВидЭД В (&ВидыСлужебныхЭД)
			|			ТОГДА ЭД.ЭлектронныйДокументВладелец.ВидЭД
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ВидЭДВладельца,
			|	ЭД.ПодписанЭП,
			|	ЭД.СтатусЭД
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭД
			|ГДЕ
			|	ЭД.Ссылка В(&МассивСсылокЭД)";
		Если ТипЗнч(ЭД) <> Тип("Массив") Тогда
			МассивСсылокЭД = Новый Массив;
			МассивСсылокЭД.Добавить(ЭД);
		Иначе
			МассивСсылокЭД = ЭД;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	Иначе
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	ЭД.Ссылка,
			|	ЭД.ВидЭД,
			|	ЭД.ВладелецФайла,
			|	ЭД.Контрагент,
			|	ЭД.НаправлениеЭД,
			|	ЭД.Организация,
			|	ЭД.ПрофильНастроекЭДО,
			|	ЭД.СоглашениеЭД,
			|	ЭД.ЭлектронныйДокументВладелец,
			|	ВЫБОР
			|		КОГДА ЭД.ВидЭД В (&ВидыСлужебныхЭД)
			|			ТОГДА ЭД.ЭлектронныйДокументВладелец.ВидЭД
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ВидЭДВладельца,
			|	ЭД.ПодписанЭП,
			|	ЭД.СтатусЭД
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД
			|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭД.Ссылка
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
			|	И СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)";
		Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
			ДопУсловие = " И НЕ(ЭД.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
			Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ДопУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	КонецЕсли;
	
	ВидыСлужебныхЭД = Новый Массив;
	ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
	ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
	ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.ПредложениеОбАннулировании);
	
	Запрос.УстановитьПараметр("ВидыСлужебныхЭД", ВидыСлужебныхЭД);
	
	// Утверждение ЭД:
	
	КолУтвержденныхЭД = 0;
	
	// В этом массиве будут находиться вторичные титулы документов, сформированные после утверждения первичных титулов.
	МассивНовыхЭД = Новый Массив;
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		ТекстЗапроса =
			"
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ЭД.ВладелецФайла КАК ВладелецЭД,
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
			|	ВТ_ЭД.СтатусЭД,
			|	ВТ_ЭД.ВидЭД,
			|	ВТ_ЭД.СоглашениеЭД КАК СоглашениеЭД
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|ГДЕ
			|	ВТ_ЭД.СтатусЭД В(&МассивСтатусов)";
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.Текст = ТекстОсновногоЗапроса + ";" + ТекстЗапроса;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КолУтвержденныхРанее = 0;
		
		ДокументыРеализации= Новый Массив;
		
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			НовыйЭД = Неопределено;
			СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
			
			Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				
				СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
				НачатьТранзакцию();
				УстановитьПризнакУтвержден(СсылкаНаЭД, НовыйЭД);
				Если ТранзакцияАктивна() Тогда
					Если ЗначениеЗаполнено(НовыйЭД) Тогда
						МассивНовыхЭД.Добавить(НовыйЭД);
					КонецЕсли;
					ТекСтрока.СтатусЭД = СсылкаНаЭД.СтатусЭД;
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
				СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, НаправлениеЭД");
				
				// Для исходящих ЭД изменим состояние документов основания
				Если ЭтоИсходящийДокументРеализации(СвойстваЭД) Тогда
					ДокументыРеализации.Добавить(СсылкаНаЭД);
					КонецЕсли;
					
				
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
			КонецЕсли;
			
			// В массив новых ЭД добавляем служебные ЭД
			Если ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
				МассивНовыхЭД.Добавить(СсылкаНаЭД);
			КонецЕсли;
			
		КонецЦикла;
		
		// Для документов вида РТУ меняем состояние их документов основания, если они есть
		Если ДокументыРеализации.Количество() > 0 Тогда
			ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеОснованийРТУ(ДокументыРеализации);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
		
	КонецЕсли;
	
	// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
	// исключим их из последующих выборок:
	ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + "
		|И (Выбор Когда ЭД.НаправлениеЭД = &НаправлениеВходящий
		|		И ЭД.ВидЭД В (&МассивИсключаемыхВидовЭД)
		|	Тогда Ложь
		|	Иначе Истина
		|	Конец)";
	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("НаправлениеВходящий", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД", МассивИсключаемыхВидовЭД);
	
	// Получим из входящих параметров СоотвСертификатовИИхСтруктур.
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для Каждого Элемент Из СертификатыСПаролями Цикл
		Структура = Новый Структура("ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату",
			Элемент.Значение, Истина, Ложь);
		СоотвСертификатовИИхСтруктур.Вставить(Элемент.Ключ, Структура);
	КонецЦикла;
	
	// Это соответствие вернется на сторону клиента и на клиенте будет выполнена попытка получить пароли к сертификатам
	// и подписать массивы ЭД.
	СоотвСертификатовИМассивовЭД = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИМассивовЭД", СоотвСертификатовИМассивовЭД);
	
	СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", СоотвСоглашенийИМассивовЭДКОтправке);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией",
		СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
	// Подписание ЭД:
	
	// Каждый подписанный ЭД должен пройти процесс отправки, который состоит из подготовки к отправке (формирование ПЭД)
	// и непосредственно отправки ПЭД (если настроена НемедленнаяОтправка). Подготовка (отправка) подразделяется на
	// отправку не подписываемых ЭД, отправку подписываемых ЭД, отправку с авторизацией (на сервере ОЭДО).
	// В связи с вышеописанным, сформируем для передачи на клиента структуру с массивами ЭД к отправке:
	// Структура в первых 2-х элементах (БезПодписи, СПодписью) содержит массивы ЭД к отправке.
	// В 3-м элементе - соответствие: ключ - соглашение ЭД, значение - массив ЭД, отправляемый в рамках соглашения.
	// 3-й элемент заполняется только если в системе настроена немедленная отправка ЭД.
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью, САвторизацией",
		Новый Массив, Новый Массив, Новый Соответствие, Новый Соответствие, Новый Массив, Новый Массив);
	
	КолПодписанных = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		// Для подписания формируем выборку:
		// В виртуальную таблицу выбираем ЭД, которые НАДО и ЕСТЬ ВОЗМОЖНОСТЬ подписать, т.е. отвечающие следующим условиям:
		// - ЭД входит в список к обработке (либо передан как параметр "ЭД", либо получен из Регистра "СостоянияЭД" отобранного
		//     по массиву владельцев, параметр "МассивСсылокНаОбъект");
		// - статус ЭД либо "Утвержден", либо "Частично подписан";
		// - ЭД НАДО подписывать (определяется по соглашению, указанному в ЭД): либо способ обмена "Через ОЭДО", либо "Это
		//     интеркампани", либо если ЭД - входящий, то в соглашении, на вкладке "Входящие" отмечен для обмена вид ЭД,
		//     совпадающий с видом подписываемого ЭД и отмечена опция "Использовать ЭП", либо если ЭД - исходящий, то в
		//     соглашении, на вкладке "Исходящие" отмечен для обмена вид ЭД, совпадающий с видом подписываемого ЭД и отмечена
		//     опция "Использовать ЭП";
		// - существует сертификат для подписи ЭД:
		//     - Организация в сертификате совпадает с организацией в ЭД;
		//     - в сертификате отмечен вид ЭД, соответствующий виду подписываемого ЭД;
		//     - сертификат действует (не помечен на удаление, не отозван);
		//     - доступен для использования (не ограничен по пользователям, либо текущий пользователь совпадает с указанным в
		//         сертификате, а так же, отпечаток сертификата входит в массив отпечатков полученных из личного хранилища
		//         клиента либо сервера, в зависимости от настроек использования криптографии);
		//     - если способ обмена "Через ОЭДО", то сертификат должен быть зарегистрирован у ОЭДО (добавлен в таб.часть
		//         "СертификатыПодписейОрганизации" соглашения об обмене ЭД).
		//
		// Если все описанные условия выполняются, то ЭД попадает в виртуальную таблицу, туда же помещаются все необходимые для
		// подписания ЭД, данные: сертификат подписи, параметры сертификата, уже установленные в ЭД подписи, соглашение.
		// Затем из временной таблицы делается 3 выборки: ЭД на подпись, сертификаты для подписания ЭД, установленные подписи.
		// Из первой выборки берем подписываемый ЭД, из второй и третьей - выбираем сертификаты по условиям:
		// его отпечатка не должно быть среди уже установленных в ЭД подписей.
		
		
		// Основной запрос - выборка из временных таблиц:
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.ДанныеСертификата,
		|	Сертификаты.Организация КАК ОрганизацияВСертификате,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Наименование,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|		ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = ПрофилиЭДОСертификаты.Сертификат)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.Использовать)
		|			И ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
		|			И (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления
		|	И (Сертификаты.Пользователь = &ПустойПользователь
		|			ИЛИ Сертификаты.Пользователь = &ТекущийПользователь
		|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
		|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СертификатПодписи,
		|	ОрганизацияВСертификате
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭД_ЭП.Отпечаток КАК УстановленныеПодписи,
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
		|	ЕСТЬNULL(ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД, СоглашенияЭД.Ссылка.СпособОбменаЭД) КАК СпособОбменаЭД,
		|	ВТ_ЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
		|	ВТ_Сертификаты.Отпечаток,
		|	ВТ_Сертификаты.Отозван,
		|	ВТ_ЭД.Организация,
		|	ВТ_ЭД.Контрагент,
		|	ВТ_Сертификаты.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
		|	СоглашенияЭД.ЭтоИнтеркампани,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД В (&СпособыОбменаСАвторизацией)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизация,
		|	ВЫБОР
		|		КОГДА ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|			ТОГДА ЕСТЬNULL(ВТ_ЭД.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ)
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭДВладелецПодписан,
		|	ВТ_Сертификаты.Наименование КАК НаименованиеСертификата,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_Сертификаты.ДанныеСертификата
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
		|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
		|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка
		|				И (ВЫБОР
		|					КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
		|						ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Продавец)
		|					КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
		|						ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
		|					КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
		|						ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
		|					ИНАЧЕ ВТ_ЭД.ВидЭД = СоглашенияЭДИсходящие.ИсходящийДокумент
		|				КОНЕЦ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭД_ЭП
		|			ПО ВТ_ЭД.Ссылка = ЭД_ЭП.Ссылка
		|		ПО ВТ_Сертификаты.СсылкаНаЭД = ВТ_ЭД.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СоглашенияЭД.ЭтоИнтеркампани
		|				ТОГДА ИСТИНА
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|				ТОГДА ВТ_ЭД.ПодписанЭП
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И НЕ ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|						ТОГДА ВЫБОР
		|							КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
		|								ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Продавец)
		|							КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
		|								ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
		|							КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
		|								ТОГДА СоглашенияЭДИсходящие.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
		|							ИНАЧЕ ВТ_ЭД.ВидЭД = СоглашенияЭДИсходящие.ИсходящийДокумент
		|						КОНЕЦ
		|						И СоглашенияЭДИсходящие.Формировать
		|						И СоглашенияЭДИсходящие.ИспользоватьЭП
		|						И &ИспользоватьЭП
		|			КОГДА ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|				ТОГДА ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И НЕ СоглашенияЭД.ПометкаУдаления
		|	И СоглашенияЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|	И ВТ_ЭД.СтатусЭД В(&МассивСтатусов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.СсылкаНаЭД,
		|	ВТ.СпособОбменаЭД,
		|	ВТ.Организация,
		|	ВТ.Контрагент,
		|	ВТ.ЭтоИнтеркампани,
		|	ВТ.ТребуетсяАвторизация,
		|	ВТ.СоглашениеЭД,
		|	ВТ.ПрофильНастроекЭДО,
		|	ВТ.ЭДВладелецПодписан,
		|	ВТ.ВидЭД
		|ИЗ
		|	ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаЭД,
		|	ВТ.СертификатПодписи,
		|	ВТ.Отпечаток,
		|	ВТ.Отозван,
		|	ВТ.ОрганизацияВСертификате КАК Организация,
		|	ВТ.ДанныеСертификата КАК ДанныеСертификата,
		|	ВТ.НаименованиеСертификата КАК НаименованиеСертификата,
		|	ВТ.ВидЭД,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.СсылкаНаЭД,
		|	ВТ.УстановленныеПодписи,
		|	Сертификаты.Организация
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО ВТ.УстановленныеПодписи = Сертификаты.Отпечаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		Запрос.УстановитьПараметр("МассивСтатусов",			МассивСтатусов);
		Запрос.УстановитьПараметр("НаправлениеИсходящий",	Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатков);
		Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь",		Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ИспользоватьЭП",			ИспользоватьЭП);
		ОбменСАвторизацией = Новый Массив;
		ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		Запрос.УстановитьПараметр("СпособыОбменаСАвторизацией", ОбменСАвторизацией);
		Запрос.Текст = ТекстОсновногоЗапроса
			+ ";
			|////////////////
			|" + ТекстЗапроса;

		// После утверждения некоторых ЭД формируется в ответ новый ЭД,
		// поэтому на подпись отправляем новый ЭД.
		Если МассивНовыхЭД.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивСсылокЭД", МассивНовыхЭД);
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		ДоступныеСертификаты = Результат[2].Выгрузить();
		ТЗ_Сертификатов = Результат[4].Выгрузить();
		ТЗ_УстановленныхПодписей = Результат[5].Выгрузить();
		Выборка = Результат[3].Выбрать();
		ТЗ_ЭД = Новый ТаблицаЗначений;
		ТЗ_ЭД.Колонки.Добавить("СсылкаНаЭД");
		ТЗ_ЭД.Колонки.Добавить("ПрофильНастроекЭДО");
		ТЗ_ЭД.Колонки.Добавить("СертификатыПодписи");
		ТЗ_ЭД.Колонки.Добавить("ТребуетсяАвторизация");
		
		Если ТЗ_Сертификатов.Количество() = 0 И ЗначениеЗаполнено(ЭД) Тогда
			ОшибкаНастройкиКриптографии = Ложь;
			ОшибкаНастройкиСертификата = Ложь;
			Если ДоступныеСертификаты[0].Количество > 0 Тогда
				ПрофильНастроекЭДО   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,           "ПрофильНастроекЭДО");
				СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД");
				Если Не ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
					ШаблонСообщения = НСтр("ru='В профиле настроек ЭДО: %1
                        |не найден ни один из доступных сертификатов ЭП.'
                        |;uk='В профілі налаштувань ЕДО: %1
                        |не знайдено жоден з доступних сертифікатів ЕП.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии)
				И ОшибкаНастройкиКриптографии Тогда
				ТекстСообщения = НСтр("ru='Ошибка подписания электронного документа.
                                            |Проверьте настройки криптографии.'
                                            |;uk='Помилка підписання електронного документа.
                                            |Перевірте настройки криптографії.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиСертификата", ОшибкаНастройкиСертификата)
				И ОшибкаНастройкиСертификата Тогда
				ТекстСообщения = НСтр("ru='Ошибка подписания электронного документа.
                                            |Проверьте настройки сертификатов.'
                                            |;uk='Помилка підписання електронного документа.
                                            |Перевірте настройки сертифікатів.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
			КонецЕсли;
		КонецЕсли;
		
		// Для связки ЭД, Соглашения и Сертификата, в числе прочих нужно соответствие,
		// ключом которого является ссылка на ЭД, значение - Соглашение об обмене.
		// Например, 2 ЭД могут быть подписаны 2-я сертификатами (т.е пользователь должен выбрать,
		// каким сертификатом он будет подписывать эти ЭД), при этом ЭД относятся к разным соглашениям
		// (например один - прямой обмен, другой - через оператора), если пользователь отказался подписывать
		// эти ЭД, то тот ЭД, который относится к соглашению через оператора, надо удалить из массива на отправку,
		// для этого найдем его соглашение в соответствии (ЭД - Соглашения), по соглашению найдем этот ЭД в
		// соответствии Соглашения - Массивы ЭД к отправке и удалим из массива нужный ЭД.
		СоотвЭДиСоглашений = Новый Соответствие;
		
		// Ключ - Строка (сумма УИД сертификатов: Строка(Сертификат1.УникальныйИдентификатор())
		// + Строка(Сертификат2.УникальныйИдентификатор()) + ...), Значение - Структура массивов (МассивСертификатов
		// и МассивЭД).
		// Смысл данной структуры в том, что для подписания разных ЭД возможно будет доступен одинаковый
		// набор сертификатов. Например: РТиУ может быть подписана сертификатами Сертификат1 и Сертификат2,
		// СФ так же может быть подписана сертификатами Сертификат1 и Сертификат2, при этом РТиУ сформировано
		// по соглашению1 (прямой обмен), а СФ - по соглашению2 (через ОЭДО). НЕ ПРАВИЛЬНО 2 раза спрашивать
		// пользователя, каким из 2-х сертификатов он хочет подписывать документы, поэтому, надо для этой пары
		// сертификатов сформировать массив ЭД, для подписания которых доступна именно эта пара сертификатов.
		// Чтобы сделать запись в структуре уникальной и иметь возможность искать нужную запись по ключу,
		// ключ сделан составным (в результатах запроса сертификаты упорядочены по наименованию).
		СтруктСтруктурМассивовЭДиСертификатов = Новый Структура;
		
		// Если в системе настроена немедленная отправка и есть действие "Отправить", то из подписываемых ЭД
		// надо выделить те, которые для отправки требуют авторизации (обмен через ОЭДО) и будут подписываться на клиенте.
		// Для этого ТЗ_ЭД обработаем в 2 прохода (1- ЭД требующие авторизации, 2- не требующие).
		ВыделятьЭДКОтправкеСАвторизацией = (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить")
											И НемедленнаяОтправкаЭД);
		
		МассивЭД = Новый Массив;
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СсылкаНаЭД = Выборка.СсылкаНаЭД;
				Отбор = Новый Структура("СсылкаНаЭД", СсылкаНаЭД);
				КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
				МассивОтпечатковИсключения = Новый Массив;
				МассивСертификатов = Новый Массив;
				Если Выборка.ЭтоИнтеркампани Тогда
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() = 0 Тогда
						Если КопияТЗ.Количество() > 0 Тогда
							Для Каждого СтрокаСертификата Из КопияТЗ Цикл
								СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток,
									|Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату");
								ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
								МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
								ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
								Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
									ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
								КонецЕсли;
								СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
							КонецЦикла;
							НоваяСтрока = ТЗ_ЭД.Добавить();
							НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
							НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
							НоваяСтрока.СертификатыПодписи = МассивСертификатов;
							НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
							Организация2Стороны = ?(СтрокаСертификата.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					Иначе
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
						ТЗ_Отпечатков.Свернуть("Организация");
						СтрокаОтпечатка = ТЗ_Отпечатков[0];
						Если ЗначениеЗаполнено(СтрокаОтпечатка.Организация) Тогда
							Организация2Стороны = ?(СтрокаОтпечатка.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЭтоСлужебный = ЭтоСлужебныйДокумент(СсылкаНаЭД);
				ИДМассиваЭД = "й";
				ПарольПолучен = Ложь;
				Для Каждого СтрокаСертификата Из КопияТЗ Цикл
					Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено
						ИЛИ МассивСертификатов.Найти(СтрокаСертификата.СертификатПодписи) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
					ИДМассиваЭД = ИДМассиваЭД + Строка(СтрокаСертификата.СертификатПодписи.УникальныйИдентификатор());
					
					СтруктураСертификата = Новый Структура("СертификатПодписи,
						|ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату");
					ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
					ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
					Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
						ПарольПолучен = Истина;
						ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
					КонецЕсли;
					СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
					// Если обрабатывается служебный документ, то его можно подписать любым сертификатом,
					// в котором сохранен пароль.
					Если ЭтоСлужебный И ПарольПолучен Тогда
						МассивСертификатов = Новый Массив;
						МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если МассивСертификатов.Количество() > 0 Тогда
					Подписан = 0;
					
					Если НЕ Выборка.ЭДВладелецПодписан Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПарольПолучен И ВыполнятьКриптооперацииНаСервере Тогда
						Подписан = ПодписатьЭДОпределеннымСертификатом(СсылкаНаЭД, МассивСертификатов[0], СтруктураСертификата);
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
							// Если ЭД подписаны, то для определения сертификата авторизации и последующей отправки,
							// они будут получены запросом, на следующем этапе (Отправка ЭД).
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
					НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
					НоваяСтрока.СертификатыПодписи = МассивСертификатов;
					НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
					
					СоотвЭДиСоглашений.Вставить(СсылкаНаЭД, Выборка.ПрофильНастроекЭДО);
					СтруктураМассивов = "";
					ИДМассиваЭД = СтрЗаменить(ИДМассиваЭД, "-", "_");
					Если НЕ СтруктСтруктурМассивовЭДиСертификатов.Свойство(ИДМассиваЭД, СтруктураМассивов)
						ИЛИ ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
						СтруктСтруктурМассивовЭДиСертификатов.Вставить(ИДМассиваЭД,
							Новый Структура("МассивСертификатов", МассивСертификатов));
						СтруктураМассивов = СтруктСтруктурМассивовЭДиСертификатов[ИДМассиваЭД];
					КонецЕсли;
					
					СоответствиеЭДиДД = Неопределено;
					Если НЕ СтруктураМассивов.Свойство("СоответствиеЭДиДД", СоответствиеЭДиДД)
						ИЛИ ТипЗнч(СоответствиеЭДиДД) <> Тип("Соответствие") Тогда
						СтруктураМассивов.Вставить("СоответствиеЭДиДД", Новый Соответствие);
						СоответствиеЭДиДД = СтруктураМассивов.СоответствиеЭДиДД;
					КонецЕсли;
					Если МассивСертификатов.Количество() = 1 Тогда
						Значение = ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД, МассивСертификатов[0]),
							СсылкаНаЭД.УникальныйИдентификатор());
					Иначе
						Значение = Неопределено;
					КонецЕсли;
					СоответствиеЭДиДД.Вставить(СсылкаНаЭД, Значение);
					
					Если ВыделятьЭДКОтправкеСАвторизацией И Выборка.ТребуетсяАвторизация Тогда
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет попытаться их отправить, предварительно получив сертификат аутентификации по настройке ЭДО.
						МассивЭД = СоотвСоглашенийИМассивовЭДКОтправке.Получить(Выборка.ПрофильНастроекЭДО);
						Если МассивЭД = Неопределено Тогда
							МассивЭД = Новый Массив;
						КонецЕсли;
						Если МассивЭД.Найти(СсылкаНаЭД) = Неопределено Тогда
							МассивЭД.Добавить(СсылкаНаЭД);
						КонецЕсли;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(Выборка.ПрофильНастроекЭДО, МассивЭД);
					Иначе
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет подготовить их к отправке и при необходимости отправить.
						Для Каждого Элемент Из СоответствиеЭДиДД Цикл
							Если СтруктураКОтправке.СПодписью.Найти(Элемент.Ключ) = Неопределено Тогда
								СтруктураКОтправке.СПодписью.Добавить(Элемент.Ключ);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КолПодписанных > 0 Тогда
			СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
		КонецЕсли;
		Если СоотвЭДиСоглашений.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СоотвЭДиСоглашений", СоотвЭДиСоглашений);
		КонецЕсли;
		Если СтруктСтруктурМассивовЭДиСертификатов.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СтруктСтруктурМассивовЭДиСертификатов", СтруктСтруктурМассивовЭДиСертификатов);
		КонецЕсли;
	КонецЕсли;
	
	// Отправка ЭД:
	СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации);
	
	КолОтправленных = 0;
	КолПодготовленных = 0;
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		// Обработаем массивы ЭД (сформированные на этапе подписания ЭД), которые будут подписаны позже
		// и для отправки которых нужны сертификаты авторизации:
		Если СоотвСоглашенийИМассивовЭДКОтправке.Количество() > 0 Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				МассивПрофилейНастроекЭДО.Добавить(Элемент.Ключ);
			КонецЦикла;
			СоотвСоглашенийИСоответствийСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
				МассивПрофилейНастроекЭДО,
				СтМассивовСтруктурСертификатов,
				СоотвСертификатовИПаролей);
			// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
			// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				СоотвСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметров.Получить(ПрофильНастроекЭДО);
				Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
					Сертификат           = КлючИЗначение.Ключ;
					СтруктураСертификата = КлючИЗначение.Значение;
					
					МаркерРасшифрованный = Неопределено;
					МаркерЗашифрованный = Неопределено;
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
							ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
						И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
						
						СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
							СтруктураСертификата);
							
						МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
						Если МассивСертификатов = Неопределено Тогда
							МассивСертификатов = Новый Массив;
							СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
						КонецЕсли;
						МассивСертификатов.Добавить(Сертификат);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ИсходящийДокумент,
		|	ВТ_ЭД.Ссылка КАК ЭД,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК СоглашениеЭД
		|ПОМЕСТИТЬ ВТ_НастройкиОбмена
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|			И ВТ_ЭД.ВидЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
		|			И (НЕ ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
		|	ВТ_ЭД.Ссылка,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|			И ВТ_ЭД.ВидЭДВладельца = СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
		|			И (ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_ЭД.Ссылка,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик))
		|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_ЭД.Ссылка,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец))
		|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12покупатель))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД,
		|	ВТ_ЭД.ВидЭД,
		|	ВТ_ЭД.Ссылка,
		|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
		|			И (ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
		|			И (СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	ВТ_ЭД.СтатусЭД,
		|	ВТ_ЭД.ПрофильНастроекЭДО,
		|	ВТ_НастройкиОбмена.СоглашениеЭД КАК СоглашениеЭД,
		|	ВТ_НастройкиОбмена.СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизация,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|				ИЛИ СоглашенияЭД.ЭтоИнтеркампани
		|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|					И ВТ_ЭД.ПодписанЭП
		|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И НЕ ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|					И ВТ_НастройкиОбмена.ИспользоватьЭП
		|					И &ИспользоватьЭП
		|			ТОГДА ИСТИНА
		|		КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ЭДВладелецЭД.ПодписанЭП, ЛОЖЬ)
		|						ТОГДА НЕ ВТ_ЭД.ПодписанЭП
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяПодпись,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|				И НЕ СоглашенияЭД.ЭтоИнтеркампани
		|				И НЕ СоглашенияЭД.СертификатОрганизацииДляРасшифровки = &ПустаяСсылкаНаСертификат
		|				И &ИспользоватьЭП
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяШифрование
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
		|		ПО ВТ_ЭД.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиОбмена КАК ВТ_НастройкиОбмена
		|		ПО ВТ_ЭД.Ссылка = ВТ_НастройкиОбмена.ЭД
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_НастройкиОбмена.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|					ИЛИ СоглашенияЭД.ЭтоИнтеркампани
		|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|						И ВТ_ЭД.ПодписанЭП
		|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|						И НЕ ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|						И ВТ_НастройкиОбмена.ИспользоватьЭП
		|						И &ИспользоватьЭП
		|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И (НЕ ВТ_НастройкиОбмена.ИспользоватьЭП
		|						ИЛИ НЕ &ИспользоватьЭП)
		|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|				ТОГДА ВЫБОР
		|						КОГДА ЭДВладелецЭД.ПодписанЭП
		|							ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
		|						ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Подписан);
		
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			
		Если Действия = "ОтправитьПовторно" Тогда
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
		КонецЕсли;
		
		ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		
		Запрос.Текст = ТекстОсновногоЗапроса 
						+ "
						|;
						|//////////
						|" + ТекстЗапроса;
		
		Запрос.УстановитьПараметр("НаправлениеИсходящий",       Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
		Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью",  МассивСтатусовСПодписью);
		Запрос.УстановитьПараметр("ИспользоватьЭП",             ИспользоватьЭП);
		Запрос.УстановитьПараметр("ПустаяСсылкаНаСертификат",
			Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
			
		
		// После утверждения входящего ЭД, вида "Торг12Продавец", формируется новый ЭД,
		// который и должен отправиться на другую сторону.
		
		Если МассивНовыхЭД.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивСсылокЭД", МассивНовыхЭД);
		КонецЕсли;
		
		Тз_Эд_КОтправке = Запрос.Выполнить().Выгрузить();
		
		КолОтправленных = 0;
		КолПодготовленных = 0;
		Если Тз_Эд_КОтправке.Количество() > 0 Тогда
			Тз_Эд_СШифрованием = Тз_Эд_КОтправке.СкопироватьКолонки();
			Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
				// Скопируем в отдельную таблицу ЭД, которые надо шифровать на клиенте
				// и удалим эти строки из таблицы ЭД к отправке:
				Отбор = Новый Структура("ТребуетсяШифрование", Истина);
				Тз_Эд_СШифрованием = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
				Отбор = Новый Структура("ТребуетсяШифрование", Ложь);
				Тз_Эд_КОтправке = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			КонецЕсли;
			Отбор = Новый Структура("ТребуетсяПодпись", Ложь);
			ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
			СтруктураКОтправке.Вставить("БезПодписи", ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД"));
			
			Если Не НемедленнаяОтправкаЭД Тогда
				// Если используется отложенная отправка, то авторизация на сервере ОЭДО, на текущем этапе, не нужна.
				// Следовательно, ЭД передаваемые через ОЭДО, передаются на формирование ПЭД без сертификатов авторизации.
				Отбор = Новый Структура("ТребуетсяПодпись", Истина);
				ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					СтруктураКОтправке.СПодписью.Добавить(Элемент);
				КонецЦикла;
				
			Иначе
				Отбор = Новый Структура("ТребуетсяАвторизация, ТребуетсяПодпись", Ложь, Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВремТз.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено Тогда
						СтруктураКОтправке.СПодписью.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
				
				Отбор = Новый Структура("ТребуетсяАвторизация", Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				ТзПрофилейНастроекЭДО = ВремТз.Скопировать();
				ТзПрофилейНастроекЭДО.Свернуть("ПрофильНастроекЭДО");
				МассивПрофилейНастроекЭДО = ТзПрофилейНастроекЭДО.ВыгрузитьКолонку("ПрофильНастроекЭДО");
				Если МассивПрофилейНастроекЭДО.Количество() > 0 Тогда
					СоотвСоглашенийИСоответствийСертификатов = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
					                                                                 МассивПрофилейНастроекЭДО,
					                                                                 СтМассивовСтруктурСертификатов,
					                                                                 СоотвСертификатовИПаролей);
				КонецЕсли;
				// Если есть расшифрованные маркеры по сертификатам авторизации,
				// то здесь же отправим ЭД по данным сертификатам.
				МассивЭДКОтправкеССервера = Новый Массив;
				ЛокальноеСоотвСоглашенийИСтруктур = Новый Соответствие;
				
				Для Каждого ПрофильНастроекЭДО Из МассивПрофилейНастроекЭДО Цикл
					РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
					
					СоответствиеСертификатов = СоотвСоглашенийИСоответствийСертификатов.Получить(ПрофильНастроекЭДО);
					Отбор = Новый Структура("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ВремТЗПоПрофилюНастроекЭДО = ВремТз.Скопировать(Отбор);
					Если ВремТЗПоПрофилюНастроекЭДО.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					МассивЭД = ВремТЗПоПрофилюНастроекЭДО.ВыгрузитьКолонку("СсылкаНаЭД");
					Если Не ЗначениеЗаполнено(СоответствиеСертификатов)
						Или СоответствиеСертификатов.Количество() = 0 Тогда
						// Если нет сертификата авторизации, то передадим массив ЭД на формирование ПЭД,
						// далее, ПЭД встанет в очередь на отправку (отложенная отправка).
						Для Каждого СсылкаНаЭД Из МассивЭД Цикл
							СтруктураКОтправке.СПодписью.Добавить(СсылкаНаЭД);
						КонецЦикла;
						Продолжить;
					КонецЕсли;
					
					ОтправкаССервера = Ложь;
					Для Каждого КлючИЗначение Из СоответствиеСертификатов Цикл
						Сертификат           = КлючИЗначение.Ключ;
						СтруктураСертификата = КлючИЗначение.Значение;
						
						МаркерРасшифрованный = Неопределено;
						МаркерЗашифрованный = Неопределено;
						Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
							И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
							И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
							
							Если ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
								Для Каждого СсылкаНаЭД Из МассивЭД Цикл
									МассивЭДКОтправкеССервера.Добавить(СсылкаНаЭД);
								КонецЦикла;
								ЛокальноеСоотвСоглашенийИСтруктур.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
								ОтправкаССервера = Истина;
								Прервать;
							Иначе
								СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
									СтруктураСертификата);
									
								МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
								Если МассивСертификатов = Неопределено Тогда
									МассивСертификатов = Новый Массив;
									СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
								КонецЕсли;
								МассивСертификатов.Добавить(Сертификат);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ОтправкаССервера Тогда
						Продолжить;
					Иначе
						// По данному соглашению может быть массив, ожидающих подписи на клиенте, ЭД.
						// Данная ситуация может получиться, когда в журнале документов выбрана группа документов ИБ
						// с разными статусами ЭД (утвержден и подписан), тогда с предыдущего этапа (Подписание ЭД)
						// в соответствии соглашений и массивов придет массив ЭД на подпись, а на текущем этапе
						// будет сформирован массив ЭД к отправке.
						// Чтобы не затереть массив ЭД на подпись, добавим ЭД к отправке в существующий массив:
						МассивЭДОжидающихПодписи = СоотвСоглашенийИМассивовЭДКОтправке.Получить(ПрофильНастроекЭДО);
						Если МассивЭДОжидающихПодписи = Неопределено Тогда
							МассивЭДОжидающихПодписи = Новый Массив;
						КонецЕсли;
						Для Каждого ЭлементКОтправке Из МассивЭД Цикл
							МассивЭДОжидающихПодписи.Добавить(ЭлементКОтправке);
						КонецЦикла;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(ПрофильНастроекЭДО, МассивЭДОжидающихПодписи);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивЭДКОтправкеССервера.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправкеССервера, Истина, ЛокальноеСоотвСоглашенийИСтруктур);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				Если ВРег(Элемент.Ключ) = ВРег("САвторизацией") Тогда
					Продолжить;
				КонецЕсли;
				МассивКОтправке = Новый Массив;
				СтруктураКОтправке.Свойство(Элемент.Ключ, МассивКОтправке);
				ПризнакПодписи = (Элемент.Ключ = "СПодписью");
				МассивЭД = Элемент.Значение;
				Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭД, ПризнакПодписи);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
					МассивКОтправке = СтРезультата.МассивПакетовДляОбработкиНаКлиенте;
				КонецЕсли;
				МассивЭД = Новый Массив;
				// Добавим в структуру ЭД, которые надо шифровать на клиенте:
				Если ТЗ_ЭД_СШифрованием.Количество() > 0 Тогда
					Отбор = Новый Структура("ТребуетсяПодпись", ПризнакПодписи);
					ВремТЗ = ТЗ_ЭД_СШифрованием.Скопировать(Отбор);
					МассивЭД = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКОтправке, МассивЭД, Истина);
				СтруктураКОтправке.Вставить(Элемент.Ключ, МассивКОтправке);
			КонецЦикла;
		КонецЕсли;
		СтруктураКОтправке.Вставить("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке);
		СтруктураВозврата.Вставить("КолОтправленных", КолОтправленных);
		СтруктураВозврата.Вставить("КолПодготовленных", КолПодготовленных);
		СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		Если ТипЗнч(ДопПараметры)= Тип("Структура") Тогда
			ДопПараметры.Вставить("ЕстьОбработанныеЭД",
				(КолНовыхЭД + КолУтвержденныхЭД + КолПодписанных + КолПодготовленных + КолОтправленных) > 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьИПолучитьДокументы(СоотвСоглашенийИСтруктурСертификатов, ПовторноеПолучение = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	Если НЕ ПовторноеПолучение Тогда
		КолОтправленныхПакетов = ОбменСКонтрагентамиСлужебный.ОтправкаСформированныхЭД(
													СоотвСоглашенийИСтруктурСертификатов);
		СтруктураВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	КонецЕсли;
	
	НовыеДокументы = ОбменСКонтрагентамиСлужебный.ПолучитьНовыеЭД(
												СоотвСоглашенийИСтруктурСертификатов,
												ПовторноеПолучение);
	
	ДополнитьПакетамиКРаспаковке(НовыеДокументы.МассивПакетовЭД);
	
	СтруктураВозврата.Вставить("НовыеДокументы", НовыеДокументы);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - строка - "Факт" или "Юр";
//  ТекстОшибки         - строка - описание ошибки;
//
// Возвращаемое значение:
//  СтруктураАдреса - структура - информация о юридическом адресе.
//
Функция ПолучитьАдресСтруктурой(СтруктураПараметров = Неопределено,
								ВидКонтрагента = Неопределено,
								ВидАдреса = Неопределено,
								ТекстОшибки = "") Экспорт
	
	СтруктураАдреса = Новый Структура;
	// Поля структуры для адреса РФ.
	СтруктураАдреса.Вставить("АдресРФ");
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	// Поля структуры для иностранного адреса или адреса РФ строкой.
	СтруктураАдреса.Вставить("КодСтр");
	СтруктураАдреса.Вставить("АдрТекст");
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента,
		ВидАдреса, ТекстОшибки);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта,
							ИдОбъекта = "",
							ДополнительныеРеквизиты = Неопределено,
							ИДЭД = Неопределено) Экспорт
	
	Результат = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ТипОбъекта,
																		 ИдОбъекта,
																		 ДополнительныеРеквизиты,
																		 ИДЭД);

КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
												АдресВоВременномХранилище,
												ИдентификаторФормы);
	
КонецПроцедуры

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
	
КонецПроцедуры

// Возвращает проверку соответствия организаций в профиле, настройках ЭДО и сертификатах
//
// Параметры:
//  Ссылка - СправочникСсылка.ПрофилиНастроекЭДО, СправочникСсылка.СоглашенияОбИспользованииЭД, СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый объект
//  Организация - СправочникСсылка.Организации - организация для проверки (используется для типа ссылки СертификатыКлючейЭлектроннойПодписиИШифрования)
//
// Возвращаемое значение:
//  Истина - Организации соответствуют
//  Ложь - Не соответствуют
//
Функция ПроверитьСоответствиеОрганизаций(Ссылка, Организация = Неопределено) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Профили.Ссылка КАК Профиль,
		|	Профили.Организация КАК ПрофильОрганизация,
		|	Сертификаты.Сертификат КАК Сертификат,
		|	Сертификаты.Сертификат.Организация КАК СертификатОрганизация,
		|	Соглашения.Ссылка КАК Соглашение,
		|	Соглашения.Организация КАК СоглашениеОрганизация,
		|	Соглашения.СостояниеСоглашения КАК СостояниеСоглашения
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = Профили.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
		|		ПО (Соглашения.ПрофильНастроекЭДО = Профили.Ссылка)
		|			И (НЕ Соглашения.ПометкаУдаления)
		|			И (Соглашения.СостояниеСоглашения <> ЗНАЧЕНИЕ(Перечисление.СостоянияСоглашенийЭД.Закрыто))
		|ГДЕ
		|	Профили.Ссылка = &Ссылка
		|	И (НЕ Соглашения.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Соглашения.Организация
		|			ИЛИ НЕ Сертификаты.Сертификат.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Сертификаты.Сертификат.Организация)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Профили.Ссылка КАК Профиль,
		|	Профили.Организация КАК ПрофильОрганизация,
		|	Сертификаты.Сертификат КАК Сертификат,
		|	Сертификаты.Сертификат.Организация КАК СертификатОрганизация,
		|	Соглашения.Ссылка КАК Соглашение,
		|	Соглашения.Организация КАК СоглашениеОрганизация
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = Профили.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
		|		ПО (Соглашения.ПрофильНастроекЭДО = Профили.Ссылка)
		|ГДЕ
		|	Соглашения.Ссылка = &Ссылка
		|	И (НЕ Соглашения.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Соглашения.Организация
		|			ИЛИ НЕ Сертификаты.Сертификат.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Сертификаты.Сертификат.Организация)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = &Ссылка
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Организация <> &Организация";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Возвращает строку Base64, содержащей данные строки в виде двоичных данных файла в формате UTF8 без BOM.
//
// Параметры:
//  СтрокаДанных  - Строка - строка для преобразования в BASE64
//
// Возвращаемое значение:
//   Строка   - строка в BASE64
//
Функция СтрокаBase64БезBOM(СтрокаДанных) Экспорт

	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаДанных);
	ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.UTF8, Символы.ПС);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	СтрокаФорматBase64 = Сред(СтрокаФорматBase64, 5); // убираем BOM
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, ""); // убираем ВК
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, ""); // убираем ПС
	УдалитьФайлы(ВремФайл);
	Возврат СтрокаФорматBase64;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Используется для обратной совместимости с объектом Справочники.УдалитьСертификатыЭП.
// После физического удаления этого справочника из метаданных - функцию удалить.
//
Функция ЗагрузитьСертификат(СтруктураСертификата, ОписаниеОшибки) Экспорт
	
	НовыйЭлемент = Справочники.УдалитьСертификатыЭП.СоздатьЭлемент();
	НовыйЭлемент.Отпечаток     = СтруктураСертификата.Отпечаток;
	НовыйЭлемент.Наименование  = СтруктураСертификата.Организация;
	НовыйЭлемент.Организация   = СтруктураСертификата.Организация;
	НовыйЭлемент.ДатаОкончания = СтруктураСертификата.ДействителенДо;
	
	// Проверка сертификата на соответствие 63 ФЗ.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.18.108") >= 0 Тогда
		НовыйСертификат = Новый СертификатКриптографии(СтруктураСертификата.ФайлСертификата);
		
		// Корректно работаем только с сертификатами для подписи стандартной структуры.
		Если (НовыйСертификат.Субъект.Свойство("SN") ИЛИ НовыйСертификат.Субъект.Свойство("CN"))
			И НовыйСертификат.Субъект.Свойство("T") И НовыйСертификат.Субъект.Свойство("ST") Тогда
			
			Если НовыйСертификат.Субъект.Свойство("SN") Тогда
				
				ШаблонФИОВладельца = НСтр("ru='%1 %2';uk='%1 %2'");
				ФИОВладельца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФИОВладельца,
					НовыйСертификат.Субъект.SN, НовыйСертификат.Субъект.GN);
			ИначеЕсли НовыйСертификат.Субъект.Свойство("CN") Тогда
				
				ФИОВладельца = НовыйСертификат.Субъект.CN;
			КонецЕсли;
			НовыйЭлемент.ДолжностьПоСертификату = НовыйСертификат.Субъект.T;
			
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОВладельца);

			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ФИО);
				
			НовыйЭлемент.Наименование  = СтруктураСертификата.КомуВыдан;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонНазначения = НСтр("ru='Кем выдан: %1
                            |Действителен до: %2
                            |
                            |%3'
                            |;uk='Ким виданий: %1
                            |Дійсний до: %2
                            |
                            |%3'");
	НовоеНазначение = "";
	ОбменСКонтрагентамиСлужебный.ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
	НовыйЭлемент.Назначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНазначения, СтруктураСертификата.КемВыдан,
		СтруктураСертификата.ДействителенДо, НовоеНазначение);
	
	Если СтруктураСертификата.Свойство("ФайлСертификата")
		И ЗначениеЗаполнено(СтруктураСертификата.ФайлСертификата) Тогда
		
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ФайлСертификата, Новый СжатиеДанных(9));
		НовыйЭлемент.ФайлСертификата = ДанныеХранилища;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		ОписаниеОшибки = НСтр("ru='Ошибка получения данных сертификата подписи!';uk='Помилка отримання даних сертифіката підпису!'");
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с полями сертификата.
//
// Параметры:
//   ДвоичныеДанныеСертификата - ДвоичныеДанные - данные сертификата криптографии.
//
// Возвращаемое значение:
//   Структура - Структура с полями сертификата.
//
Функция СтруктураСертификата(Знач ДвоичныеДанныеСертификата) Экспорт
	
	Попытка
		НовыйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Исключение
		ВидОперации = НСтр("ru='Загрузка сертификата с банковского ключа';uk='Завантаження сертифіката з банківського ключа'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщения = НСтр("ru='Не удалось прочитать файл сертификата, операция прервана.';uk='Не вдалося прочитати файл сертифіката, операція перервана.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТестСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(НовыйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  МассивПрофилейНастроекЭДО - массив ссылок - ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - структура массивов - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента;
//  ВидЭД - перечисление ссылка - вид ЭД, для подписания которого требуется найти сертификат(ы). Имеет смысл только
//    при параметре ДляПодписи = Истина;
//  ДляПодписи - булево - Истина - требуется найти сертификаты для подписи. Имеет смысл только при заполненном
//    параметре ВидЭД;
//  ДляАвторизации - булево - Истина - требуется найти сертификаты для авторизации на сервере оператора ЭДО.
//
// Возвращаемое значение:
//  Структура соответствий - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи
//    СоотвСоглашенийИСертификатовАвторизации
//    СоотвСертификатовИИхСтруктур
//
Функция СтруктураСоответствийСоглашенийИСертификатовАвторизации(
	Знач МассивПрофилейНастроекЭДО = Неопределено, Знач МассивЭД = Неопределено,
	Знач СтМассивовСтруктурСертификатов = Неопределено, Знач СоотвСертификатовИПаролей = Неопределено,
	ПараметрыАутентификации = Неопределено) Экспорт
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивОтпечатковКлиент = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковСервер", МассивОтпечатковСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		Если ВыполнятьКриптооперацииНаСервере И НЕ ЗначениеЗаполнено(МассивОтпечатковСервер) И ИспользоватьЭП Тогда
			Попытка
				МассивОтпечатковСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатковСервер = ?(ЗначениеЗаполнено(МассивОтпечатковСервер), МассивОтпечатковСервер, Новый Массив);
	МассивОтпечатковКлиент = ?(ЗначениеЗаполнено(МассивОтпечатковКлиент), МассивОтпечатковКлиент, Новый Массив);
	
	МассивОтпечатковДляАвторизации = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковКлиент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковСервер);
	
	Если (МассивОтпечатковСервер <> Неопределено И МассивОтпечатковСервер.Количество())
		ИЛИ (МассивОтпечатковКлиент <> Неопределено И МассивОтпечатковКлиент.Количество()) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСертификатов.Сертификат,
		|	ТаблицаСертификатов.ПарольПользователя
		|ПОМЕСТИТЬ ТаблицаСертификатов
		|ИЗ
		|	&ТаблицаСертификатов КАК ТаблицаСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
		|	ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ПрофилиНастроекЭДО.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	ТаблицаСертификатов.ПарольПользователя КАК ПарольПользователя,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗапомнитьПарольКСертификату,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
		|	Сертификаты.ДействителенДо КАК ДатаОкончания
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
		|				ПО (ТаблицаСертификатов.Сертификат = Сертификаты.Ссылка)
		|			ПО ПрофилиНастроекЭДОСертификаты.Сертификат = Сертификаты.Ссылка
		|		ПО (ПрофилиНастроекЭДОСертификаты.Ссылка = ПрофилиНастроекЭДО.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И (Сертификаты.Пользователь = &ПустойПользователь
		|			ИЛИ Сертификаты.Пользователь = &ТекущийПользователь
		|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковДляАвторизации)
		|	И ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|	И &ИспользоватьЭП
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		|	И ПрофилиНастроекЭДО.Ссылка В(&МассивПрофилейНастроекЭДО)
		|	И ВЫБОР
		|			КОГДА Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, ДЕНЬ) > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПарольПолучен УБЫВ";
		
		Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации", МассивОтпечатковДляАвторизации);
		Запрос.УстановитьПараметр("ПустойПользователь",		Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ИспользоватьЭП",			ИспользоватьЭП);
		Запрос.УстановитьПараметр("ТекущаяДата",			ТекущаяДатаСеанса());
		СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату();
		ТЗ_Сертификатов = Новый ТаблицаЗначений;
		ТЗ_Сертификатов.Колонки.Добавить("Сертификат",
			Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
		ТЗ_Сертификатов.Колонки.Добавить("ПарольПользователя", Новый ОписаниеТипов("Строка"));
		Для Каждого Элемент Из СертификатыСПаролями Цикл
			НоваяСтрока = ТЗ_Сертификатов.Добавить();
			НоваяСтрока.Сертификат = Элемент.Ключ;
			НоваяСтрока.ПарольПользователя = Элемент.Значение;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаСертификатов", ТЗ_Сертификатов);
		Если НЕ ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
		КонецЕсли;
		Если ЗначениеЗаполнено(МассивЭД) Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
			Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
				СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ПрофильНастроекЭДО");
				Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
					ПрофильНастроекЭДО = ЭДВладелец.Значение.ПрофильНастроекЭДО;
					Если МассивПрофилейНастроекЭДО.Найти(ПрофильНастроекЭДО) = Неопределено Тогда
						МассивПрофилейНастроекЭДО.Добавить(ПрофильНастроекЭДО);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если МассивПрофилейНастроекЭДО.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивПрофилейНастроекЭДО", МассивПрофилейНастроекЭДО);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ПрофилиНастроекЭДО.Ссылка В(&МассивПрофилейНастроекЭДО)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		СоотвСоглашенийИМассиваСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		// Для авторизации, помимо сертификатов, попытаемся получить маркеры, по возможности расшифрованные.
		
		МенеджерКриптографииДоступенНаСервере = Ложь;
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии();
				МенеджерКриптографииДоступенНаСервере = Истина;
			Исключение
				МенеджерКриптографииДоступенНаСервере = Ложь;
			КонецПопытки;
		КонецЕсли;
	
		ТекущийПрофильНастроекЭДО = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущийПрофильНастроекЭДО <> Выборка.ПрофильНастроекЭДО Тогда
				МассивСертификатов = Новый Массив;
				ТекущийПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
			КонецЕсли;
			МассивСертификатов.Добавить(Выборка.СертификатПодписи);
			
			Если СоотвСоглашенийИМассиваСертификатовАвторизации.Получить(ТекущийПрофильНастроекЭДО) = Неопределено Тогда
				СоотвСоглашенийИМассиваСертификатовАвторизации.Вставить(ТекущийПрофильНастроекЭДО, МассивСертификатов);
			КонецЕсли;
			СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток, Отозван,
													|ДанныеСертификата, ОповещенОСрокеДействия, ДатаОкончания, ЗапомнитьПарольКСертификату");
			ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
		
			// Заполняем данные для авторизации.
			Если ТипЗнч(СтруктураСертификата.ДанныеСертификата) = Тип("ХранилищеЗначения") Тогда
				ПарольПолучен = Выборка.ПарольПолучен;
				СтруктураСертификата.Вставить("ПарольПользователя", Выборка.ПарольПользователя);
				СтруктураСертификата.Вставить("ПарольПолучен", ПарольПолучен);
				Расшифровывать = (ПарольПолучен И МенеджерКриптографииДоступенНаСервере);
				
				Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Выборка.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", Выборка.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
					
				Маркер = ОбменСКонтрагентамиВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Расшифровывать, ПараметрыАутентификации);
				
				Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
					Если Расшифровывать Тогда
						СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
					Иначе
						СтруктураСертификата.Вставить("МаркерЗашифрованный", Маркер);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СоотвСертификатовИИхСтруктур.Вставить(Строка(Выборка.СертификатПодписи.УникальныйИдентификатор()) + "_" + Выборка.ИдентификаторОрганизации,
				СтруктураСертификата);
			
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		МенеджерКриптографии = Неопределено;
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии();
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный) И МенеджерКриптографии <> Неопределено Тогда
			Попытка
				СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
				Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
				Если ЗначениеЗаполнено(Маркер) Тогда
					Расшифрован = Истина;
					СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
				КонецЕсли;
			Исключение
				Операция = НСтр("ru='Расшифровка маркера';uk='Розшифровка маркера'");
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					Операция, ТекстОшибки, ТекстСообщения, 2);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

// Функция используется для минимизации серверных вызовов, в случае, когда есть несколько массивов ЭД,
// требующих подписания различными сертификатами и в настройках указано выполнение крипто операций на сервере.
//
// Параметры:
//  СоотвСертификатовИМассивовЭДКПодписи - Соответствие - ключ - справочник-ссылка СертификатЭП,
//    значение - массив ссылок на подписываемые ЭД. После подписания ЭД, возможно потребуется их отправка, поэтому
//    в случае, если подписать массив ЭД не удалось - то он удаляется из соответствия.
//  СоотвСертификатовИИхСтруктур - Соответствие - ключ - справочник-ссылка СертификатЭП,
//    значение - структура параметров сертификата ЭП.
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
// Возвращаемое значение:
//  Число - количество подписанных ЭД.
//
Функция ПодписатьЭДНаСервере(СоотвСертификатовИМассивовЭДКПодписи,
								Знач СоотвСертификатовИИхСтруктур,
								МассивНеПодписанныхЭД = Неопределено) Экспорт
	
	КолПодписанных = 0;
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Если ТипЗнч(СоотвСертификатовИМассивовЭДКПодписи) = Тип("Соответствие")
		И СоотвСертификатовИМассивовЭДКПодписи.Количество() > 0
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие")
		И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
		МассивКУдалению = Новый Массив;
		Для Каждого Элемент Из СоотвСертификатовИМассивовЭДКПодписи Цикл
			Сертификат = Элемент.Ключ;
			МассивЭД = Элемент.Значение;
			Если НЕ (ЗначениеЗаполнено(Сертификат) И ЗначениеЗаполнено(МассивЭД)) Тогда
				МассивКУдалению.Добавить(Сертификат.Ключ);
				Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
					МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
			Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
				МассивКУдалению.Добавить(Сертификат.Ключ);
				Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
					МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			Подписан = ПодписатьЭДОпределеннымСертификатом(МассивЭД, Сертификат, СтруктураСертификата, МассивНеПодписанныхЭД);
			Если Подписан > 0 Тогда
				КолПодписанных = КолПодписанных + Подписан;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивКУдалению Цикл
			СоотвСертификатовИМассивовЭДКПодписи.Удалить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КолПодписанных;
	
КонецФункции

// Перед формированием служебных ЭД (извещений о получении ЭД), из массива ЭД удаляются
// те ЭД, для которых извещения формироваться не должны (например, при получении ТОРГ-12
// титул покупателя при обмене по регламенту 2.0).
//
// Параметры:
//  МассивЭД - Массив электронных документов, на основании которых должны быть сформированы извещения.
//
Процедура УдалитьИзМассиваНеОбрабатываемыеЭД(МассивЭД) Экспорт
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ВерсияРегламентаЭДО, ВидЭД, СоглашениеЭД");
	Для Каждого Элемент Из РеквизитыОбъектов Цикл
		Значение = Элемент.Значение;
		ВерсияФорматаПакета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Значение.СоглашениеЭД, "ВерсияФорматаПакета");
		
		Если (Значение.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
			Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30)
			
			И (Значение.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				
			МассивЭД.Удалить(МассивЭД.Найти(Элемент.Ключ));
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//   МассивСтруктурСертификатовКлиента - Массив - массив структур сертификатов,
//      установленных в личном хранилище на компьютере пользователя.
//   НастройкаЭДО - СправочникСсылка.СоглашенияОбОбменеЭД - будут выбраны сертификаты,
//                  зарегистрированные в указанном соглашении и доступные текущему пользователю.
//   -----//----- - СправочникСсылка.ПрофилиНастроекЭДО - будут выбраны сертификаты,
//                  зарегистрированные в указанном профиле и доступные текущему пользователю.
//   -----//----- - Неопределено - будут выбраны сертификаты доступные текущему пользователю.
//   ДляАвторизации - Булево - если Истина - значит выполняется выбор сертификатов для выполнения
//                  аутентификации на сервере оператора ЭДО.
//
// Возвращаемое значение:
//  Соответствие:
//     Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//     Значение - Структура - данные сертификата.
//
Функция СоответствиеДоступныхСертификатовИПараметров(Знач МассивОтпечатковСертификатов, Знач НастройкаЭДО = Неопределено) Экспорт
	
	Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		МассивОтпечатковСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера);
	КонецЕсли;
	МассивСтруктур = ОбменСКонтрагентамиСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(
														МассивОтпечатковСертификатов, НастройкаЭДО);
	
	СоответствиеСертификатовИПаролей = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату();
	ДанныеВозврата = Новый Соответствие;
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		Для Каждого Элемент Из МассивСтруктур Цикл
			ПарольКСертификату = СоответствиеСертификатовИПаролей.Получить(Элемент.Сертификат);
			Если ПарольКСертификату <> Неопределено Тогда
				Элемент.ПарольПользователя = ПарольКСертификату;
				Элемент.ПарольПолучен = Истина;
			КонецЕсли;
			ДанныеВозврата.Вставить(Элемент.Сертификат, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Возвращает свойства сертификата, необходимые для открытия формы сертификата
// Параметры
// АдресДанныхСертификата - адрес во временном хранилище, где находяться двоичные данные сертификата
// Возвращаемое значение:
// СтруутураСертификата - структура - описание полей см. ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат)
//
Функция СвойстваСертификата(АдресДанныхСертификата) Экспорт
	
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	
	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сертификат не найден';uk='Сертифікат не знайдений'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// _БСП_ПрисоединенныеФайлыСлужебныйВызовСервера

// Получает все подписи файла.
//
// Подробнее - см. описание ЭлектроннаяПодпись.ПолучитьВсеПодписи().
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// только для внутреннего использования
Функция РеквизитыНастройкиЭДО(Знач НастройкаЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО,
		"ИдентификаторОрганизации, ЭтоИнтеркампани, СпособОбменаЭД,
		|СтатусСоглашения, СертификатКонтрагентаДляШифрования, ПометкаУдаления");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии =  ОбменСКонтрагентамиСлужебный.ПолучитьСтруктуруВерсииЭД(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И (СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
		ИЛИ СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", СтруктураВерсии.СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД = ОбменСКонтрагентамиСлужебный.ДанныеСостоянияЭД(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		
		Комментарий = Неопределено;
		ДобавитьПричинуЗакрытия = (СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
		
		Если СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО завершен';uk='ЕДО завершено'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
			СостояниеВерсии = НСтр("ru='ЭДО завершен с исправлением';uk='ЕДО завершено з виправленням'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
			СостояниеВерсии = НСтр("ru='ЭДО аннулирован';uk='ЕДО анульований'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			СостояниеВерсии = НСтр("ru='ЭДО закрыт принудительно';uk='ЕДО закритий примусово'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО закрыт с отклонением';uk='ЕДО закритий з відхиленням'");
		ИначеЕсли СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован 
			ИЛИ СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
			СостояниеВерсии = НСтр("ru='ЭДО не начат';uk='ЕДО не розпочато'");
		Иначе
			СостояниеВерсии = Строка(СтруктураВерсииЭД.СостояниеВерсииЭД);
		КонецЕсли;
		
		Если ДобавитьПричинуЗакрытия Тогда
			СтруктураВерсииЭД.Свойство("КомментарийРС", Комментарий);
			Причина = СтрЗаменить(НСтр("ru=', причина: %1';uk=' причина: %1'"), "%1", ?(ЗначениеЗаполнено(Комментарий), Комментарий, "не указана"));
			ВозвращаемоеЗначение = СостояниеВерсии + Причина;
		Иначе
			ВозвращаемоеЗначение = СостояниеВерсии;
		КонецЕсли;
		
	КонецЕсли;
		
	// Для произвольных документов старых версий состояние хранится в реквизите СтатусДокумента.
	Если ПустаяСтрока(СостояниеВерсии) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
		ВозвращаемоеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаВладельца, "СтатусДокумента");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов 

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент) Экспорт
	
	ФлагПодписанПолностью = Истина;
	
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Возврат ФлагПодписанПолностью;
	КонецЕсли;
	
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ТЗ = ЭлектронныйДокумент.ЭлектронныеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = ТЗ.Количество() > 1;
	Иначе
		// Массив отпечатков всех установленных ЭП на ЭД
		МассивОтпечатковСертификатов = ЭлектронныйДокумент.ЭлектронныеПодписи.ВыгрузитьКолонку("Отпечаток");
		
		// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
		// совпадающие с сертификатами установленных ЭП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК СертификатЭП
		|ИЗ
		|	РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|			ИЗ
		|				Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|					ПО ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|			ГДЕ
		|				ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				СоглашенияЭДСертификаты.Сертификат
		|			ИЗ
		|				Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|					ПО ЭДПрисоединенныеФайлы.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка
		|			ГДЕ
		|				ЭДПрисоединенныеФайлы.Ссылка = &Ссылка) КАК СертификатыИзНастроекИПрофилей
		|			ПО СертификатыИзНастроекИПрофилей.Сертификат = Сертификаты.Ссылка
		|		ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
		|ГДЕ
		|	ВидыЭДЭП.ВидЭД = &ВидДокумента
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковСертификатов)
		|	И НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления";
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		Запрос.УстановитьПараметр("Ссылка",                       ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ВидДокумента",                 ЭлектронныйДокумент.ВидЭД);
		
		ФлагПодписанПолностью = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью);
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через электронную почту

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	УдалитьФайлы(АдресКаталогаСВложениями);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И СтрНайти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
//  Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
//  СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ПакетЭД,
							"Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации, ПрофильНастроекЭДО");
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(РеквизитыПакетаЭД.АдресРесурсаОрганизации, "Пароль");
	
	Получатель  = РеквизитыПакетаЭД.Получатель;
	Отправитель = РеквизитыПакетаЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Кому",     РеквизитыПакетаЭД.АдресРесурсаКонтрагента);
	ПараметрыОтправки.Вставить("Тема",     СформироватьТемуПисьма(Отправитель, Получатель));
	ПараметрыОтправки.Вставить("Тело",     );
	ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
	ПараметрыОтправки.Вставить("Пароль",   Пароль);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РеквизитыПакетаЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = НСтр("ru='Ошибка при отправке сообщения на сервер электронной почты по профилю настроек ЭДО %1.
                        |%2'
                        |;uk='Помилка при відправці повідомлення на сервер електронної пошти за профілем налаштувань ЕДО %1.
                        |%2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	Текст,
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО,
																	ТекстОшибки);
		
		ШаблонСообщения = НСтр("ru='Ошибка при отправке эл.документов по профилю настроек ЭДО: %1, способ обмена: %2.';uk='Помилка при відправці ел.документів за профілем налаштувань ЕДО: %1, спосіб обміну: %2.'"); 
								

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								РеквизитыПакетаЭД.ПрофильНастроекЭДО,
								Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		ВидОперации = НСтр("ru='Отправка эл.документов';uk='Відправлення ел.документів'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
							ВидОперации,
							ТекстОшибки,
							ТекстСообщения);
 		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

Функция СформироватьТемуПисьма(Отправитель, Получатель)
	
	Возврат НСтр("ru='Обмен эл.документами:';uk='Обмін ел.документами:'")+ " " + Отправитель + ?(ЗначениеЗаполнено(Получатель), " -> " + Получатель, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//  НовыйЭД - ссылка на электронный документ, если при утверждении был создан новый электронный документ.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл, НовыйЭД)
	
	// Проверим, все ли необходимые условия выполнены
	Если ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл) Тогда
		Попытка
			
			НовыйСтатусЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДопустимыйСтатусЭД(
																	Перечисления.СтатусыЭД.Утвержден,
																	ПрисоединенныйФайл);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
			СтруктураПараметров.Вставить("Изменил",  Пользователи.АвторизованныйПользователь());
			
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			
			ОбменСКонтрагентамиПереопределяемый.НазначенСтатусУтвержден(ПрисоединенныйФайл);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='утверждение ЭД';uk='затвердження ЕД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Если ТранзакцияАктивна() И ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И (ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
		
		Если ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
		КонецЕсли;
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла");
		Если ОпределитьДействующуюНастройкуЭДО(ВладелецФайла,, ПрисоединенныйФайл.ВидЭД) Тогда
			Если НовыйЭД = Неопределено Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
		Иначе
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры
//  МассивСсылок  - Массив - массив ссылок
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|			И НЕ(СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОшибкаПередачи))
	|";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.';uk='Для документа %1 вже є актуальний електронний документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, СтатусЭД, НаправлениеЭД,
	|ВерсияРегламентаЭДО, СоглашениеЭД, ПрофильНастроекЭДО, ЭлектронныйДокументВладелец, ВладелецФайла");
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если СсылкаНаЭД <> Неопределено Тогда
		
			
		Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
			ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
			ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
			ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			
			СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			
			// Если обмен прямой, и получен ответный ЭД на отправленный ЭД, то больше не требуется действий с нашей стороны.
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				И ЗначениеЗаполнено(ПараметрыЭД.ЭлектронныйДокументВладелец) Тогда
				
				СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
				Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
					ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			
			СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
		
		Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
			И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
			ИЛИ (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении) Тогда
			
			СостояниеЭД = Неопределено;
			Если ОбменСКонтрагентамиСлужебный.ЕстьНеотправленноеПодтверждение(ПараметрыЭД.ВладелецФайла, СостояниеЭД) Тогда
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ОбменСКонтрагентамиСлужебный.ЕстьНепринятоеПодтверждение(ПараметрыЭД.ВладелецФайла, СостояниеЭД) Тогда
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			 И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
			СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		КонецЕсли;
		
		Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
			И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ) Тогда
			СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
		
		Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		ИначеЕсли ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
			ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании Тогда
			СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
		
		Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Рекурсивная функция, получает все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//             Электронный документ - владелец добавляется в этот массив отдельно (до или после вызова данной процедуры).
//
Функция ПолучитьПодчиненныеЭД(Знач МассивЭДВладельцев, Знач МассивЭД = Неопределено)

	Если МассивЭД = Неопределено Тогда
		МассивЭД = Новый Массив;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ Уровень1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В (&МассивЭДВладельцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уровень1.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЭДПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПодчиненныеЭлементы
	|ИЗ
	|	Уровень1 КАК Уровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО Уровень1.Ссылка = ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец";
	
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПодчиненныхЭД = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЭД.Добавить(Выборка.Ссылка);
		Если Выборка.ЕстьПодчиненныеЭлементы Тогда
			МассивПодчиненныхЭД.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПодчиненныхЭД.Количество() Тогда
		МассивЭД = ПолучитьПодчиненныеЭД(МассивПодчиненныхЭД, МассивЭД);	
	КонецЕсли;
	
	Возврат МассивЭД;
	
КонецФункции

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
			Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Функция МожноОтклонитьЭтотЭД(СсылкаНаЭД, ФормироватьУОУ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СтатусЭД, ВидЭД, НаправлениеЭД, СоглашениеЭД");
	
	Если ЭДОтклонен(ПараметрыЭД.СтатусЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		ВозвращаемоеЗначение = Истина;
		Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ФормироватьУОУ = Истина;
		КонецЕсли;
	ИначеЕсли ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
		|			И (ЭД_ПОА.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
		|			И (ПодчиненныеЭД.ВидЭД В (&ВидыЭДОтветныхТитулов))
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL
		|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|				ТОГДА ВЫБОР
		|						КОГДА ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыЭДПервичныхТитулов)
		|							ТОГДА ВЫБОР
		|									КОГДА ПодчиненныеЭД.Ссылка ЕСТЬ NULL
		|											ИЛИ ПодчиненныеЭД.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|											ИЛИ ПодчиненныеЭД.СтатусЭД В (&СтатусыИсходящихЭДДопускающиеОтклонение)
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ЛОЖЬ
		|								КОНЕЦ
		|						ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыВходящихЭДДопускающиеОтклонение)
		|					КОНЕЦ
		|			ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыИсходящихЭДДопускающиеОтклонение)
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
		Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
		СтатусыИсходящихЭДДопускающиеОтклонение = Новый Массив;
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Сформирован);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыИсходящихЭДДопускающиеОтклонение", СтатусыИсходящихЭДДопускающиеОтклонение);
		СтатусыВходящихЭДДопускающиеОтклонение = Новый Массив;
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыВходящихЭДДопускающиеОтклонение", СтатусыВходящихЭДДопускающиеОтклонение);
		ВидыЭДОтветныхТитулов = Новый Массив;
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		Запрос.УстановитьПараметр("ВидыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
		ВидыЭДПервичныхТитулов = Новый Массив;
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
		Запрос.УстановитьПараметр("ВидыЭДПервичныхТитулов", ВидыЭДПервичныхТитулов);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ВозвращаемоеЗначение = Ложь;
		Иначе
			ФормироватьУОУ = (НЕ ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭДОтклонен(СтатусЭД) Экспорт
	
	ЭДОтклонен = (СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
	Возврат ЭДОтклонен
	
КонецФункции

Функция ПолучитьСсылкиНаЭДДляПОА(Знач ПервичныйЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ПОА,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДВладелецЭД.ВладелецФайла
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
		|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании)
		|	И ЭДВладелецЭД.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПервичныйЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ПОА", Выборка.ПОА);
		СтруктураВозврата.Вставить("Организация", Выборка.Организация);
		СтруктураВозврата.Вставить("ВладелецФайла", Выборка.ВладелецФайла);
	Иначе
		СтруктураВозврата = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МожноАннулироватьЭтотЭД(Знач СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД)
		ИЛИ ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
			|	ПодчиненныеЭД.Ссылка КАК ПодчиненныйЭД,
			|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
			|	ЭДПрисоединенныеФайлы.СтатусЭД,
			|	ПодчиненныеЭД.СтатусЭД КАК СтатусПодчиненногоЭД
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
			|		ПО (ЭД_ПОА.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании))
			|			И ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
			|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
			|			И (ПодчиненныеЭД.ВидЭД В (&ВидыЭДОтветныхТитулов))
			|ГДЕ
			|	НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовИсключений)
			|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
			|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
			|	И ВЫБОР
			|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL 
			|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ";
		
		МассивСтатусовИсключений = Новый Массив;
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Аннулирован);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Отклонен);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ОтклоненПолучателем);
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
		Запрос.УстановитьПараметр("СписокСтатусовИсключений", МассивСтатусовИсключений);
		Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
		ВидыЭДОтветныхТитулов = Новый Массив;
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		Запрос.УстановитьПараметр("ВидыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
		Выборка = Запрос.Выполнить().Выбрать();
		ВозвращаемоеЗначение = Ложь;
		Если Выборка.Следующий() Тогда
			Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				Если ЗначениеЗаполнено(Выборка.ПодчиненныйЭД) Тогда
					ОбрабатываемыйЭД = Выборка.ПодчиненныйЭД;
					СтатусЭД = Выборка.СтатусПодчиненногоЭД;
				Иначе
					ОбрабатываемыйЭД = Выборка.ЭД;
					СтатусЭД = Выборка.СтатусЭД;
				КонецЕсли;
			Иначе
				ОбрабатываемыйЭД = Выборка.ЭД;
				СтатусЭД = Выборка.СтатусЭД;
			КонецЕсли;
			НастройкиОбмена = ОбменСКонтрагентамиСлужебный.НастройкиОбменаЭД(ОбрабатываемыйЭД);
			МассивСтатусов = ОбменСКонтрагентамиСлужебный.ВернутьМассивСтатусовЭД(НастройкиОбмена);
			Если МассивСтатусов.ВГраница() >= 0 И СтатусЭД = МассивСтатусов[МассивСтатусов.ВГраница()] Тогда
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// ЭД владелец - первичный ЭД к которому пришла вторая подпись
// для этого ЭД необходимо найти пакет ЭД, из него извлечь доп данные - наименование эл документа на основании которого он был введен
// по наименованию найти ЭДОснвания, установить у его владельца статус "Обмен завершен с исправлением"
Процедура УстановитьСостояниеЗавершен(ДобавленныйФайл, НаправлениеЭД) Экспорт
	
	Если Не ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ЭД = ДобавленныйФайл;
	Если ЗначениеЗаполнено(ДобавленныйФайл.ЭлектронныйДокументВладелец) Тогда
		ЭД = ДобавленныйФайл.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	НомераЭД = ЭД.ИдентификаторыОснованийВладельцаФайла.ВыгрузитьКолонку("ИдентификаторДокументаОснования");
	
	Если НомераЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НомерЭД В (&НомерЭД)
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)";
	Запрос.УстановитьПараметр("НомерЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ДокументыОснования = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументыОснования.Добавить(Выборка.ДокументОснования);
		
	КонецЦикла;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		ОбменСКонтрагентамиВнутренний.УстановитьСостояниеОбменЗавершенСИсправлением(ДокументыОснования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтветныйДокумент(ЭлектронныйДокумент) 
	
	Результат = Ложь;
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД)
	
	Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
		ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Если ЭтоОтветныйДокумент(ЭлектронныйДокумент) Тогда
				
				СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД, НаправлениеЭД");
				Если СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					Возврат;
				КонецЕсли;
				
				УстановитьСостояниеЗавершен(ЭлектронныйДокумент, Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент Из НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	|				И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПодготовленКОтправке)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершенСИсправлением)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
	|)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеобрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		ТекстСообщения = НСтр("ru='Обработка %1.
                |Не требуется выполнения действий с электронным документом.'
                |;uk='Обробка %1.
                |Не вимагається виконання дій з електронним документом.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Используется для получения представления ЭД с клиента.
//
// Параметры:
//   СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ЭД для которого надо получить представление.
//
// Возвращаемое значение:
//   Строка - представление электронного документа.
//
Функция ПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Представление", ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(СсылкаНаЭД));
	Структура.Вставить("Значение", СсылкаНаЭД);
	
	Возврат Структура.Представление;
	
КонецФункции

// Используется для получения списка представлений ЭД с клиента.
//
// Параметры:
//   МассивЭД - Массив - СправочникСсылка.ЭДПрисоединенныеФайлы, для которых надо сформировать список представлений.
//
// Возвращаемое значение:
//   СписокЗначений:
//      Значение - СправочникСсылка.ЭДПрисоединенныеФайлы.
//      Представление - Строка - представление электронного документа.
//
Функция СписокПредставленийЭД(МассивЭД) Экспорт
	
	СписокПредставлений = Новый СписокЗначений;
	Для Каждого ЭД Из МассивЭД Цикл
		Представление = ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(ЭД);
		СписокПредставлений.Добавить(ЭД, Представление);
	КонецЦикла;
	
	Возврат СписокПредставлений;
	
КонецФункции

// Ищет документы основания ИБ по реквизиту документа ЭД"НомерЭД" документа и заполняет ОснованияИБ
// Параметры:
// НомераЭД - Массив ИД документов основания,
//  колонка "ИдентификаторДокументаОснования" табличной части "ИдентификаторыОснованийВладельцаФайла" эд;
// НаправлениеЭД - определяет параметры поиска документа (входящий, исходящий);
// ОснованияИБ - массив в котрой помещаются документы основания.
//
Процедура НайтиДокументыОснования(НомераЭД, НаправлениеЭД, ОснованияИБ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования,
	|	ЭДПрисоединенныеФайлыИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ИдентификаторыОснованийВладельцаФайла КАК ЭДПрисоединенныеФайлыИдентификаторыОснованийВладельцаФайла
	|		ПО (ЭДПрисоединенныеФайлыИдентификаторыОснованийВладельцаФайла.Ссылка = ЭДПрисоединенныеФайлы.Ссылка)
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
	
	Запрос.УстановитьПараметр("НомераЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СвойстваЭД = Новый Структура;
	
	
	Пока Выборка.Следующий() Цикл
		
		
		ОснованияИБ.Добавить(Выборка.ДокументОснования);
		
		Если ЗначениеЗаполнено(Выборка.ИДОснования) Тогда
			
			МассивИД = Новый Массив;
			МассивИД.Добавить(Выборка.ИДОснования);
			
			НайтиДокументыОснования(МассивИД, НаправлениеЭД, ОснованияИБ)
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ЭтоДокументКорректировки(ДобавленныйФайл) Экспорт
	
	// Документ, основания которых должны поменять свой статус должен быть вида:
	// ТОРГ12Продавец, ТОРГ12Покупатель
	
	Результат = Ложь;
	
	Если (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав)
			
			Тогда
				
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ОбменСКонтрагентамиСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

// Только для внутреннего использования
Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ФайлДанныхСсылка) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДопДанные = ОбменСКонтрагентамиСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВладелецЭД",		СсылкаНаВладельца);
	СтруктураПараметров.Вставить("ФайлДанныхСсылка",	ФайлДанныхСсылка);
	СтруктураПараметров.Вставить("НаправлениеЭД",	СсылкаНаЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("ЗаполнитьДокумент", Истина);
	
	Если ФайлДопДанныхСсылка <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	
	СтруктураЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
		
	Если СтруктураЭД.Загружен Тогда
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияЭД");
		ЭлементБлокировки.УстановитьЗначение("СсылкаНаОбъект", СсылкаНаВладельца);
		Блокировка.Заблокировать();
	
		МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаВладельца;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.ЭлектронныйДокумент <> СсылкаНаЭД Тогда
			МенеджерЗаписи.ЭлектронныйДокумент = СсылкаНаЭД;
			МенеджерЗаписи.Записать();
			
			ОбновитьВерсиюЭД(СсылкаНаЭД);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	ДокЗаполнен = СтруктураЭД.Загружен;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СоответствиеДанныхПакетов(МассивПакетовЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.НаправлениеЭД КАК НаправлениеЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.ВидЭД КАК ВидЭД
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка В(&МассивПакетовЭД)
	|ИТОГИ ПО
	|	ПакетЭД";
	
	Запрос.УстановитьПараметр("МассивПакетовЭД", МассивПакетовЭД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПакеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПакеты.Следующий() Цикл
		ВыборкаЭД = ВыборкаПакеты.Выбрать();
		МассивЭД = Новый Массив;
		Пока ВыборкаЭД.Следующий() Цикл
			СтруктураДанныхФайла = Новый Структура;
			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ЭлектронныйДокумент", ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ДанныеФайла",         ДанныеФайла);
			СтруктураДанныхФайла.Вставить(
					"ЭтоОтправкаПодтверждения",
					ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
			ПараметрыШифрования = ОбменСКонтрагентамиСлужебный.ПолучитьМассивАдресовСертификатовШифрования(
																			ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ПараметрыШифрования", ПараметрыШифрования);
			МассивЭД.Добавить(СтруктураДанныхФайла);
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаПакеты.ПакетЭД, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов

// Сохраняет результаты проверки ЭП, выполненные на клиенте
//
// Параметры:
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
// МассивРезультатов - Массив - содержит данные установленных подписей.
//
Процедура СохранитьРезультатыПроверкиПодписей(ЭД, МассивРезультатов) Экспорт
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСправочник = ЭД.ПолучитьОбъект();
	
	Попытка
		ОбъектСправочник.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось заблокировать объект %1
                        |%2'
                        |;uk='Не вдалося заблокувати об''єкт %1
                        |%2'");
		
		ВидОперации = НСтр("ru='Сохранение результатов проверки подписей';uk='Збереження результатів перевірки підписів'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
		Возврат;
	КонецПопытки;
	
	Для Каждого Элемент Из МассивРезультатов Цикл
		СтрокаТЧ = ОбъектСправочник.ЭлектронныеПодписи.Получить(Элемент.НомерСтроки-1);
		СтрокаТЧ.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаТЧ.ПодписьВерна = Элемент.Результат;
	КонецЦикла;
	
	Попытка
		ОбъектСправочник.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено)
											
	Если Не ТипЗнч(ДобавленныеФайлы) = Тип("Массив") Тогда
		ФайлыНаПодпись = Новый Массив;
		ФайлыНаПодпись.Добавить(ДобавленныеФайлы);
	Иначе
		ФайлыНаПодпись = ДобавленныеФайлы;
	КонецЕсли;
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Если Отказ Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПолучитьСертификатПоОтпечатку(
		ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат,
													 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("112");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='проверка сертификата на корректность';uk='перевірка сертифіката на коректність'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопытки;
		
		Для Каждого ТекДокумент Из ФайлыНаПодпись Цикл
			
			СтруктураДанныхПодписи = Новый Структура("Сертификат, ПарольПользователя, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
				НСтр("ru='Подписание электронного документа';uk='Підписання електронного документа'"));
			Попытка
				ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
				ДанныеПодписи = ЭлектронноеВзаимодействиеСлужебный.СформироватьДанныеПодписи(
					МенеджерКриптографии, ТекДокумент, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
				
				ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
				КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
				ОпределитьСтатусыПодписей(ТекДокумент);
			Исключение
				ШаблонСообщения = НСтр("ru='Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
                |%2'
                |;uk='Помилка підпису на сервері. Необхідно провести тест сертифіката шифрування для: %1.
                |%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						НСтр("ru='установка подписи ЭП';uk='встановлення підпису ЕП'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Операции с зашифрованными данными

// Только для внутреннего использования
Функция ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации = Неопределено) Экспорт
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СтруктураПараметровЗапросаМаркера.СпособОбменаЭД);
	Возврат ОбменСКонтрагентамиВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Ложь, ПараметрыАутентификации)
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Создает присоединенные файлы пакетов, зашифрованных на клиенте
//
// Параметры:
// СоответствиеДанных - соответствие - содержит данные по пакетам и зашифрованным файлам
// СоответствиеПаролейДляЭДО - Соответствие - данные о паролях
//
Процедура СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанных, СоотвСоглашенийИСтруктурСертификатов, КолОтправленных) Экспорт
	
	МассивПЭД = Новый Массив;
	Для Каждого ЭлементПЭД Из СоответствиеДанных Цикл
		ПакетЭД = ЭлементПЭД.Ключ;
		ОбменСКонтрагентамиСлужебный.СформироватьЭДПрисоединенныйФайлПакета(ПакетЭД, ЭлементПЭД.Значение);
		МассивПЭД.Добавить(ПакетЭД);
	КонецЦикла;
		
	Если СоответствиеДанных.Количество() > 0 И ЭлектронноеВзаимодействиеСлужебный.НемедленнаяОтправкаЭД() Тогда
		КолОтправленных = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
КонецПроцедуры

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ
//
// Возвращаемое значение:
//  Структура или неопределено - данные электронного документа, Неопределено - если нет подписей
//
Функция СтруктураСодержимогоЭД(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВидЭД КАК ВидЭД,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.СоглашениеЭД,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ЭлектронныйДокументВладелец
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &ЭД";
	
	Запрос.УстановитьПараметр("ЭД", ЭД);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СтруктураВозврата = Новый Структура;
	МассивПодписей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПодписей = Новый Структура;
		СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
		СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
		МассивПодписей.Добавить(СтруктураПодписей);
	КонецЦикла;
	ДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	СтруктураВозврата.Вставить("ДанныеЭД", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД));
	СтруктураВозврата.Вставить("Подписи",  МассивПодписей);
	СтруктураВозврата.Вставить("СоглашениеЭД", Выборка.СоглашениеЭД);
	СтруктураВозврата.Вставить("ЭлектронныйДокументВладелец", Выборка.ЭлектронныйДокументВладелец);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера);
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + "EDI_" + Строка(Новый УникальныйИдентификатор) + ".tst";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru='Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
                |Необходимо указать сетевой каталог для обмена.'
                |;uk='Вказаний каталог %1 не може використовуватися для обміну, так як він не доступний з сервера.
                |Необхідно вказати мережевий каталог для обміну.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			УдалитьФайлы(Каталог.ПолноеИмя);
		Иначе
			УдалитьФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Только для внутреннего использования
Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Неопределено;
	
	Если СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ЭДВладелецСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтруктураПараметровДокумента.ИдЭДВладельца));
		Если ЭДВладелецСсылка.ПолучитьОбъект() <> Неопределено Тогда
			СтруктураПараметровДокумента.Вставить("ЭлектронныйДокументВладелец", ЭДВладелецСсылка);
			ВозвращаемоеЗначение = ЭДВладелецСсылка.ВладелецФайла;
		КонецЕсли;
	Иначе
		ПозПодстроки = СтрНайти(СтруктураПараметровДокумента.НомерЭД, "##") - 1;
		Если ПозПодстроки > 0 Тогда
			ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, ПозПодстроки);
		Иначе
			ЭлектронныйНомерДокумента = СтруктураПараметровДокумента.НомерЭД;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронныйНомерДокумента) Тогда
			ЗапросДокументовОснований = Новый Запрос;
			ЗапросДокументовОснований.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	(НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД)
			|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
			|	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
			|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
			|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
			ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД", СтруктураПараметровДокумента.НаправлениеЭД);
			ЗапросДокументовОснований.УстановитьПараметр("Параметр",      ЭлектронныйНомерДокумента + "%");
			ЗапросДокументовОснований.УстановитьПараметр("ВидЭД",         СтруктураПараметровДокумента.ВидЭД);
			
			НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выбрать();
			Если НайденныеДокументы.Следующий() Тогда
				ВозвращаемоеЗначение = НайденныеДокументы.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Процедура закрывает электронный документооборот для переданного массива ссылок на документы ИБ.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - массив ссылок на документы ИБ, для которых требуется закрыть ЭДО
//  ПричинаЗакрытия - Строка - описание причины закрытия ЭДО
//  КоличествоОбработанныхЭД - Число - число документов ИБ, для которых ЭДО был закрыт
//
Процедура ЗакрытьДокументыПринудительно(Знач МассивСсылокНаВладельцев, Знач ПричинаЗакрытия, КоличествоОбработанныхЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаВладельцев);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТЗОбъектов = Новый ТаблицаЗначений;
	ТЗОбъектов.Колонки.Добавить("СсылкаНаОбъект");
	ТЗОбъектов.Колонки.Добавить("ЭлектронныйДокумент");
	
	Для Каждого Элемент Из МассивСсылокНаВладельцев Цикл
		НовСтрока = ТЗОбъектов.Добавить();
		СтрокаТЗ = ТЗ.Найти(Элемент, "СсылкаНаОбъект");
		ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		Если СтрокаТЗ <> Неопределено Тогда
			ЭлектронныйДокумент = СтрокаТЗ.ЭлектронныйДокумент;
		КонецЕсли;
		НовСтрока.СсылкаНаОбъект = Элемент;
		НовСтрока.ЭлектронныйДокумент = ЭлектронныйДокумент;
	КонецЦикла;
	
	Для Каждого Строка Из ТЗОбъектов Цикл
		ЗаписьРегистра = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
		ЗаписьРегистра.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ЗаписьРегистра.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ЗаписьРегистра.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
		ЗаписьРегистра.ЭлектронныйДокумент = Строка.ЭлектронныйДокумент;
		ЗаписьРегистра.Комментарий = ПричинаЗакрытия;
		ЗаписьРегистра.Записать();
	КонецЦикла;
	
	КоличествоОбработанныхЭД = ТЗОбъектов.Количество();
	
КонецПроцедуры

Функция ЕстьДоступныеСертификаты(МассивОтпечатковСертификатов, ЭД) Экспорт
	
	Если Не ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО
	|ПОМЕСТИТЬ ВТ_ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сертификаты.Ссылка
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|						ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					СоглашенияЭДСертификаты.Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|						ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	|				ПО (СертификатыИзНастроекИПрофилей.Сертификат = Сертификаты.Ссылка)
	|			ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|				И ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|		ПО ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
	|ГДЕ
	|	НЕ Сертификаты.Отозван
	|	И (Сертификаты.Пользователь = &ТекущийПользователь
	|			ИЛИ Сертификаты.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
	|	И НЕ Сертификаты.ПометкаУдаления
	|	И ВидыЭДЭП.Использовать
	|	И Сертификаты.Отпечаток В(&МассивОтпечатков)";
	
	Запрос.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатковСертификатов);
	Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("Ссылка",					ЭД);

	ЕстьСертификаты = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ЕстьСертификаты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соглашения

// Используется в случае отсутствия возможности предложить пользователю выбрать сертификат из списка доступных и/или
// ввести пароль для сертификата (например при выполнении регламентного задания).
// Возвращает Истина, если для входящих переменных найден хотя бы один сертификат с сохраненным в ИБ паролем.
// 
// Параметры:
//  МассивПрофилейНастроекЭДО     - Массив - содержит ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ПараметрыАвторизации - Соответствие - в этой переменной в вызывающий метод возвращается соответствие:
//    * Ключ     - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение, для которого определен сертификат авторизации.
//    * Значение - Соответствие - соответствие сертификата и его параметров:
//       ** Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//       ** Значение - Структура - структура параметров сертификата:
//           *** СертификатПодписи           - СправочникСсылка.СертификатыЭП.
//           *** ПарольПолучен               - Булево.
//           *** ПарольПользователя          - Строка.
//           *** Отпечаток                   - Строка.
//           *** Отозван                     - Булево.
//           *** ДвоичныеДанныеСертификата             - ХранилищеЗначений.
//           *** ОповещенОСрокеДействия      - Булево.
//           *** ДатаОкончания               - Дата.
//           *** ЗапомнитьПарольКСертификату - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если найдены сертификат(ы) с сохраненными в ИБ паролями, иначе Ложь.
//
Функция ДоступныПараметрыДляАвторизацииНаСервереОператора(Знач МассивПрофилейНастроекЭДО = Неопределено,
														ПараметрыАвторизации = Неопределено) Экспорт
	
	Попытка
		МассивОтпечатковСертификатов = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
	Исключение
		МассивОтпечатковСертификатов = Новый Массив;
	КонецПопытки;
	
	ДоступныПараметры = Ложь;
	Если МассивОтпечатковСертификатов.Количество() > 0 Тогда
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковСервер", МассивОтпечатковСертификатов);
		
		Результат = СтруктураСоответствийСоглашенийИСертификатовАвторизации(МассивПрофилейНастроекЭДО, , СтМассивовСтруктурСертификатов);
		
		ПараметрыАвторизации = Новый Соответствие;
		СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
			И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
			И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
			// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
			// по данному соглашению. Функция должна вернуть (в ПараметрыАвторизации) Соответствие, в котором Ключ - Соглашение,
			// Значение - Соответствие сертификата и его параметров.
			Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
				
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				МассивСертификатов = Элемент.Значение;
				Для Каждого Сертификат Из МассивСертификатов Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					
					Если ПараметрыСертификата.ПарольПолучен Тогда
						ПараметрыАвторизации.Вставить(Элемент.Ключ, ПараметрыСертификата);
						ДоступныПараметры = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныПараметры;
	
КонецФункции

// Функция возвращает соответствие соглашению - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  МассивСоглашений               - Массив    - содержит ссылки на соглашения, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - Структура - содержит структуру со свойствами:
//    * МассивСтруктурСертификатовСервер - Массив - массив структур сертификатов личного хранилища с сервера.
//    * МассивСтруктурСертификатовКлиент - Массив - массив структур сертификатов личного хранилища с клиента.
//  СоотвСертификатовИПаролей      - Фиксированное соответствие:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//    * Значение - Строка - пароль к сертификату.
//
// Возвращаемое значение:
//  Соответствие: ключ - соглашение об обмене ЭД, значение - структура параметров сертификата ЭП
//    ("СертификатДляАвторизации, ЗапомнитьПарольКСертификату, ПарольПользователя, МаркерРасшифрованный, МаркерЗашифрованный").
//
Функция СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
		Знач МассивПрофилейНастроекЭДО = Неопределено, Знач СтМассивовСтруктурСертификатов = Неопределено,
		Знач СоотвСертификатовИПаролей = Неопределено)
	
	Результат = СтруктураСоответствийСоглашенийИСертификатовАвторизации(МассивПрофилейНастроекЭДО, ,
											СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей);
	
	СоотвСоглашений = Новый Соответствие;
	СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
		// по данному соглашению. Функция должна вернуть Соответствие, в котором Ключ - Соглашение,
		// Значение - Соответствие сертификатов и их параметров.
		Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
			
			ПрофильНастроекЭДО = Элемент.Ключ;
			РеквизитыПрофиляНастроекЭДО = РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
			
			Соответствие = Новый Соответствие;
			МассивСертификатов = Элемент.Значение;
			Для Каждого Сертификат Из МассивСертификатов Цикл
				КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
				
				Структура = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
				Если ЗначениеЗаполнено(Структура) И Структура.ПарольПолучен Тогда
					// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
					// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
					// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
					// диалог выбора сертификата.
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Сертификат, Структура);
					Прервать;
				КонецЕсли;
				Соответствие.Вставить(Сертификат, Структура);
			КонецЦикла;
			СоотвСоглашений.Вставить(Элемент.Ключ, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвСоглашений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение реквизитов объектов

// Возвращает ссылку на соглашение ЭД для переданного ЭД
//
// Параметры
//  <ЭД>  - <СправочникСсылка.ЭДПрисоединенныеФайлы> - электронный документ
//
// Возвращаемое значение:
//   <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение ЭД
//
Функция СоглашениеЭД(Знач ЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СоглашениеЭД");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование электронных документов

Функция ВерсияФорматаПакета(Пакет) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пакет, "ВерсияФорматаПакета");
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//  <СоглашениеЭД> - СправочникСсылка.СоглашениеОбИспользованииЭД - ссылка на соглашение
//
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на элемент справочника СертификатыЭП, значение - двоичные данные сертификата
//
Функция ДоступныеСертификаты(СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сертификаты.Ссылка,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	Сертификаты.Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО СертификатыПодписейОрганизации.Сертификат = Сертификаты.Ссылка
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД
	|	И (Сертификаты.Пользователь = &ТекущийПользователь
	|			ИЛИ Сертификаты.Пользователь = &ПустойПользователь
	|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)";
	Запрос.УстановитьПараметр("СоглашениеЭД",			СоглашениеЭД);
	Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь",		Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());

	Результат = Запрос.Выполнить().Выбрать();
	ДанныеВозврата = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		Структура = Новый Структура("ПарольПользователя, Отпечаток, ДанныеСертификата, ПарольПолучен, ЗапомнитьПарольКСертификату");
		ЗаполнитьЗначенияСвойств(Структура, Результат);
		Структура.Вставить("ДанныеСертификата", Результат.ДанныеСертификата.Получить());
		ДанныеВозврата.Вставить(Результат.Ссылка, Структура);
	КонецЦикла;
	Возврат ДанныеВозврата;
	
КонецФункции

// См. эту функцию в модуле ОбменСКонтрагентамиСлужебный.
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

Функция ВидИВладелецЭД(СсылкаНаЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, ВладелецФайла");
	
КонецФункции

// Процедура используется для минимизации серверных вызовов, при необходимости
// получения на клиенте всех или нескольких значений, перечисленных в параметрах констант.
//
Процедура ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД = Неопределено) Экспорт
	
	НемедленнаяОтправкаЭД = ЭлектронноеВзаимодействиеСлужебный.НемедленнаяОтправкаЭД();
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();

КонецПроцедуры

// Возвращает массив проведенных документов
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, которые проведены
//
Функция МассивПроведенныхДокументов(Знач МассивДокументов) Экспорт
	
	МассивПроведенныхДокументов = Новый Массив;
	МассивПроводимыхДокументов = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивПроводимыхДокументов(
		МассивДокументов);
	
	Для Каждого Документ Из МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен") Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

Процедура ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыЭД, СертификатПодписи)
	
	ТекстОшибки = "";
	
	// Получим данные для заполнения Тега Подписант
	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата  = ПараметрыСертификата.Фамилия;
	ИмяСертификата      = ПараметрыСертификата.Имя;
	ОтчествоСертификата = ПараметрыСертификата.Отчество;
	Фирма               = ПараметрыСертификата.Фирма;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	
	ЭтоФизЛицо = ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(ПараметрыЭД.Организация);
	ДанныеЮрФизЛица = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыЭД.Организация);
	
	// Заполнение блока подписанта в ЭД.
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, ТекстОшибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , ТекстОшибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ПространствоИменСхемы = "TORGPR" ИЛИ ПространствоИменСхемы = "RUISP" Тогда // Передача товаров, акт результатов работ (Исполнитель).
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ПространствоИменСхемы = "TORGPOK" ИЛИ ПространствоИменСхемы = "RUZAK" Тогда // Передача товаров, акт результатов работ (Заказчик).
			
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, ТекстОшибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, ТекстОшибки);
			КонецЕсли;
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		КонецЕсли;
		
		// Заполнение блока ответственного в ЭД
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если ПространствоИменСхемы = "TORGPR" Тогда // Передача товаров, акт результатов работ (Исполнитель).
				ЛицоГрузПолучил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз", ПространствоИменСхемы);
				СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ3.СвЛицОтпГруз.РабОргПрод", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЛицоГрузПолучил, "РабОргПрод", СведенияЛица, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СодФХЖ3, "СвЛицОтпГруз", ЛицоГрузПолучил, Истина, ТекстОшибки);
				
			Иначе
				
				ОтпускРазреш = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазреш, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазреш, "Должность", ДолжностьПоСертификату, , ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНО.ОтпускГруз, "ОтпускРазреш", ОтпускРазреш, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			Если ПространствоИменСхемы = "TORGPOK" Тогда // Передача товаров, акт результатов работ (Исполнитель).
				ЛицоГрузПолучил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4.ГрузПолучил.СвЛицПолГруз", ПространствоИменСхемы);
				СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СодФХЖ4.ГрузПолучил.СвЛицПолГруз.РабОргПок", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЛицоГрузПолучил, "РабОргПок", СведенияЛица, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СодФХЖ4.ГрузПолучил, "СвЛицПолГруз", ЛицоГрузПолучил, Истина, ТекстОшибки);
			Иначе
				ГрузПолучил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНП.ПолучилГруз, "ГрузПолучил", ГрузПолучил, Истина, ТекстОшибки);
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUISP") Тогда
				
				ПодписьИсполн = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполн, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполн, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Сдал, "ПодписьИсполн", ПодписьИсполн, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUZAK") Тогда
				
				ПодписьЗаказ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "ФИО", ФИО, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Принял, "ПодписьЗаказ", ПодписьЗаказ, Истина, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
		ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФИО", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, ТекстОшибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , ТекстОшибки);
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, ТекстОшибки);
		
	ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав) Тогда
		
		Если ДанныеФайлаЭД.ВерсияСхемы = СокрЛП(СтрЗаменить(ОбменСКонтрагентамиПовтИсп.ВерсияСхемыCML2(), "CML", "")) Тогда
			
			// Добавление шаблона подписанта для заполнения при подписи.
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИменСхемы);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант", ПространствоИменСхемы);
			Иначе
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
			КонецЕсли;
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ФамилияСертификата, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ИмяСертификата, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ОтчествоСертификата, , ТекстОшибки);
			КонецЕсли;
			
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, ТекстОшибки);
			КонецЕсли;
			
			Подписанты.Подписант.Добавить(Подписант);
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Каталог, "Подписанты", Подписанты, Ложь, ТекстОшибки);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ПакетПредложений, "Подписанты", Подписанты, Ложь, ТекстОшибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ[0], "Подписанты", Подписанты, Ложь, ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УстановитьОтветственногоЭД(Знач СписокОбъектов, Знач НовыйОтветственный, КоличествоОбработанныхЭД, ПричинаПеренаправления = "") Экспорт
	
	МассивЭД = Новый Массив;
	КоличествоОбработанныхЭД = 0;
	
	Для Каждого ЭлСписка Из СписокОбъектов Цикл
		Если ТипЗнч(ЭлСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивЭД.Добавить(ЭлСписка.Ссылка);
	КонецЦикла;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.Ответственный,
	|	ЭДПрисоединенныеФайлы.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И (ЭДПрисоединенныеФайлы.Ответственный <> &Ответственный
	|			ИЛИ &ЗаписьОписания)");
	
	Запрос.УстановитьПараметр("МассивЭД",      МассивЭД);
	Запрос.УстановитьПараметр("Ответственный", НовыйОтветственный);
	Запрос.УстановитьПараметр("ЗаписьОписания", ?(ЗначениеЗаполнено(ПричинаПеренаправления), Истина, Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	ОбщийТекстОшибки = "";
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось заблокировать электронный документ (%Объект%). %ОписаниеОшибки%';uk='Не вдалося заблокувати електронний документ (%Объект%). %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Объект%",         Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + ТекстОшибки;
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	
		Попытка
			СтруктураПараметров = Новый Структура("Ответственный", НовыйОтветственный);
			СтруктураПараметров.Вставить("Описание", ПричинаПеренаправления);
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Выборка.Ссылка, СтруктураПараметров, Ложь);
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось выполнить запись электронного документа';uk='Не вдалося виконати запис електронного документа'") + " (%Объект%). %ОписаниеОшибки%'";
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Объект%",         Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + ТекстОшибки;
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки;
		КонецПопытки
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Только для внутреннего использования
Функция СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУточнения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	ДанныеЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "НаправлениеЭД, Контрагент, ВидЭД, СтатусЭД,
	                      |УникальныйИД, ПрофильНастроекЭДО, СоглашениеЭД, ВерсияРегламентаЭДО, ТипЭлементаВерсииЭД, ВладелецФайла, НомерЭД");
	
	Для Каждого СсылкаНаЭД Из МассивЭД Цикл
	
		ПараметрыЭД = ДанныеЭД.Получить(СсылкаНаЭД);
		
		ЭтоИзвещение = НЕ ЗначениеЗаполнено(ТекстУточнения);
		
		Если ЭтоИзвещение Тогда
			// Не формируем извещение о получении для версии регламента 20 в формализованных документах.
			Если ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				
				Возврат МассивВозврата;
			КонецЕсли;

			Если НЕ (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД) Тогда
				
				ШаблонСообщения = НСтр("ru='Для типа ЭД %1 не предусмотрено формирование Извещения о получении.';uk='Для типу ЕД %1 не передбачено формування Сповіщення про отримання.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПараметрыЭД.ТипЭлементаВерсииЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат МассивВозврата;
			КонецЕсли;
		КонецЕсли;
		
		АдресВоВременномХранилище = "";
		
		СтруктураЭД = Неопределено;
		Если НЕ ЗначениеЗаполнено(СтруктураЭД)
			ИЛИ НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			
			Возврат МассивВозврата;
		КонецЕсли;
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		Попытка
			НачатьТранзакцию();
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПараметрыЭД.ВладелецФайла);
			ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
			ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
				ПараметрыФайла, АдресВоВременномХранилище, , , НоваяСсылкаЭД);

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Исходящий);
			СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Утвержден);
			СтруктураПараметров.Вставить("ВидЭД",                       СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("Получатель",                  СтруктураЭД.ИдПолучателя);
			СтруктураПараметров.Вставить("Отправитель",                 СтруктураЭД.ИдОтправителя);
			СтруктураПараметров.Вставить("НомерЭД",                     ПараметрыЭД.НомерЭД);
			СтруктураПараметров.Вставить("Организация",                 СтруктураЭД.Отправитель);
			СтруктураПараметров.Вставить("Контрагент",                  СтруктураЭД.Получатель);
			СтруктураПараметров.Вставить("ПрофильНастроекЭДО",          ПараметрыЭД.ПрофильНастроекЭДО);
			СтруктураПараметров.Вставить("СоглашениеЭД",                ПараметрыЭД.СоглашениеЭД);
			СтруктураПараметров.Вставить("ВладелецЭД",                  ПараметрыЭД.ВладелецФайла);
			СтруктураПараметров.Вставить("УникальныйИД",                ПараметрыЭД.УникальныйИД);
			СтруктураПараметров.Вставить("НаименованиеФайла",           СтруктураЭД.ИдФайла);
			Если ЭтоИзвещение Тогда
				ТипЭлементаВерсииЭД = ОбменСКонтрагентамиВнутренний.ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			Иначе
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",         ТипЭлементаВерсииЭД);
			СтруктураПараметров.Вставить("ДатаДокументаОтправителя",    ДатаСозданияФайла);
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
			СтруктураПараметров.Вставить("ВерсияРегламентаЭДО",         СсылкаНаЭД.ВерсияРегламентаЭДО);
			
			ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
			
			Если НЕ ЭтоИзвещение Тогда
				Если ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен;
					Запрос = Новый Запрос;
					Запрос.Текст =
						"ВЫБРАТЬ
						|	ПодчиненныеЭД.Ссылка
						|ИЗ
						|	Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
						|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
						|ГДЕ
						|	ПодчиненныеЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
						|	И ПодчиненныеЭД.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
						|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЭДОбъект = Выборка.Ссылка.ПолучитьОбъект();
						ЭДОбъект.СтатусЭД = НовыйСтатусЭД;
						ЭДОбъект.ПричинаОтклонения = ТекстУточнения;
						ЭДОбъект.Записать();
					КонецЦикла;
				Иначе
					НовыйСтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании;
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, ТекстУточнения);
				ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров, Ложь);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			МассивВозврата.Добавить(ДобавленныйФайл);
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура УстановитьСтатусПоследнейПодписи(ЭД)
	
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	СтрокаЭП = ОбъектЭД.ЭлектронныеПодписи[ОбъектЭД.ЭлектронныеПодписи.Количество()-1];
	СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	СтрокаЭП.ПодписьВерна = Истина;
		
	ОбъектЭД.Записать();

КонецПроцедуры

// Только для внутреннего использования
Функция ДОЗакрытПринудительно(ВладелецФайла) Экспорт
	
	СостояниеЭДО = СостояниеДокументооборота(ВладелецФайла);
	
	Результат = Ложь;
	Если СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеЭД(СсылкаНаЭД)
	
	СсылкаНаДанные = "";
	
	ДопИнформацияПоЭД = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла
		ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
		
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
			
			УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"), ТекстОшибки, ТекстСообщения);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат "";
			КонецПопытки;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
				Прервать;
			КонецЦикла;
			
			УдалитьФайлы(ПапкаДляРаспаковки);
			
		ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНаДанные;
	
КонецФункции

// Дополняет массив пакетов, которые будут распаковываться, не распакованными пакетами.
// 
// Параметры:
// ПакетыСоСвойствами - массив, элементами которого являются структура, которая содержит
// ссылка на документ ПакетЭД и параметры, необходимые для его распаковки
//
Процедура ДополнитьПакетамиКРаспаковке(МассивПакетовЭД) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильЭДО,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО
	|ПОМЕСТИТЬ втПрофилиОбмена
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК Пакет
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПрофилиОбмена КАК втПрофилиОбмена
	|		ПО ПакетЭД.НастройкаЭДО = втПрофилиОбмена.НастройкаЭДО
	|			И ПакетЭД.ПрофильНастроекЭДО = втПрофилиОбмена.ПрофильЭДО
	|ГДЕ
	|	ПакетЭД.СтатусПакета = &СтатусПакета
	|	И ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.ПрофильНастроекЭДО В
	|			(ВЫБРАТЬ
	|				втПрофилиОбмена.ПрофильЭДО
	|			ИЗ
	|				втПрофилиОбмена)
	|	И НЕ ПакетЭД.Ссылка В (&НовыеПакеты)";
	
	Запрос.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.КРаспаковке);
	Запрос.УстановитьПараметр("НовыеПакеты", МассивПакетовЭД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПакетовЭДКРаспаковке = Результат.Выгрузить().ВыгрузитьКолонку("Пакет");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПакетовЭД, МассивПакетовЭДКРаспаковке);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЭтоПрямойОбмен(СпособОбменаЭД) Экспорт
	
	Результат = Ложь;
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
		ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
		ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоИсходящийДокументРеализации(СвойстваЭД)
	
	Результат = Ложь;
	
	МассивРТУ = Новый Массив;
	МассивРТУ.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивРТУ.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивРТУ.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
	Если Не МассивРТУ.Найти(СвойстваЭД.ВидЭД) = Неопределено
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД, ИдентификаторОрганизации");
	
КонецФункции

// Только для внутреннего использования
//
Функция ЕстьДОПоДокументу(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ЕстьДО = Истина;
	Если Результат.Пустой() Тогда
		ЕстьДО = Ложь;
	КонецЕсли;
	
	Возврат ЕстьДО;
	
КонецФункции

#КонецОбласти


#Область НовыеМетоды

Функция ПроверитьСостояниеЭДО(ДокументИБ, СостояниеЭДО) Экспорт
	
	Если ТипЗнч(СостояниеЭДО) = Тип("ПеречислениеСсылка.СостоянияВерсийЭД") Тогда
		Состояния = Новый Массив;
		Состояния.Добавить(СостояниеЭДО);
	Иначе
		Состояния = СостояниеЭДО;
	КонецЕсли;
	
	СостояниеДО = СостояниеДокументооборота(ДокументИБ);
	
	Результат = Истина;
	Если Состояния.Найти(СостояниеДО) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостояниеДокументооборота(ДокументИБ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &ДокументИБ";
	
	Запрос.УстановитьПараметр("ДокументИБ", ДокументИБ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СостояниеЭД;
	
КонецФункции

Функция ВходящийТитул(СсылкаНаЭД) Экспорт
	
	ПервыйТитул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
	
	Возврат ПервыйТитул;
	
КонецФункции

#КонецОбласти

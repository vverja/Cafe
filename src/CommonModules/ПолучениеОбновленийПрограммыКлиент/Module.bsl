
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение обновлений программы".
// ОбщийМодуль.ПолучениеОбновленийПрограммыКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывает механизм поиска и установки обновлений платформы.
// Параметры:
//	ВерсияКонфигурации – Строка – версия конфигурации, для которой выполняется
//		получение и установка новой версии платформы.
//		Если значение параметра заполнено, тогда версия платформы будет определена
//		сервисом Интернет-обновлений для указанной версии конфигурации,
//		иначе – для текущей версии конфигурации.
//	ДанныеАвторизации – Структура – логин и пароль пользователя на портале
//		сервисов ИТС. Посредством этого параметра можно указывать произвольные
//		логин и пароль для получения дистрибутива обновления платформы.
//		Если значение параметра не заполнено, тогда по умолчанию будут использованы
//		логин и пароль из подсистемы «Базовая функциональность Интернет-поддержки
//		пользователей». Поля:
//		* Логин – Строка – логин пользователя;
//		* Пароль – Строка – пароль пользователя;
// ОповещениеОбАвторизацииВСервисеОбновлений – ОписаниеОповещения –
//		описание обработчика успешной авторизации в сервисе обновлений,
//		для возвращения логина и пароля в вызывающий механизм. Обработчик
//		вызывается после успешного получения дистрибутива платформы с указанным
//		логином и паролем.
//		В обработчик передается параметр типа Структура с полями:
//			* Логин – Строка – логин пользователя сервиса обновлений,
//				введенный пользователем при получении обновления платформы;
//			* Пароль – пароль пользователя сервиса обновлений;
//				введенный при получении обновления платформы;
//
Процедура УстановитьОбновлениеПлатформы1СПредприятие(
	ВерсияКонфигурации = Неопределено,
	ДанныеАвторизации = Неопределено,
	ОповещениеОбАвторизацииВСервисеОбновлений = Неопределено) Экспорт
	
	ФормаОбработки = ПолучитьФорму("Обработка.ПереходНаНовуюВерсиюПлатформы1СПредприятие.Форма.Форма",
		Новый Структура(
			"ВерсияКонфигурации, ДанныеАвторизации, ОбновитьИнформацию, СкрытьЗаголовки",
			ВерсияКонфигурации,
			ДанныеАвторизации,
			Истина,
			Истина));
	ФормаОбработки.ОповещениеОбАвторизацииВСервисеОбновлений = ОповещениеОбАвторизацииВСервисеОбновлений;
	ФормаОбработки.Открыть();
	
КонецПроцедуры

// Определяет возможность использования механизма автоматического обновления
// платформы в текущем режиме работы.
//
// Возвращаемое значение:
//	Булево - признак возможности использования: Истина, если использование
//		возможно, Ложь - в противном случае.
//
Функция ДоступноИспользованиеПолученияОбновленийПлатформы() Экспорт
	
	#Если ЭтоВебКлиент Тогда
	Возврат Ложь;
	
	#Иначе
	
	СистИнфо = Новый СистемнаяИнформация;
	Если СистИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86
		И СистИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	Возврат (ПараметрыКлиента.ИнформационнаяБазаФайловая
		И НЕ ПараметрыКлиента.РазделениеВключено
		И ПараметрыКлиента.ЭтоПолноправныйПользователь
		И НЕ ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя());
	
	#КонецЕсли
	
КонецФункции

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при начале работы системы из
// ИнтернетПоддержкаПользователейКлиент.ПриНачалеРаботыСистемы().
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ПараметрыИПП = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске().ИнтернетПоддержкаПользователей;
	Если НЕ ПараметрыИПП.Свойство("ПолучениеОбновленийПрограммы") Тогда
		// Использование обновления платформы недоступно в текущем режиме работы
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = ИнтернетПоддержкаПользователейКлиент.ЗначениеИзФиксированногоТипа(
		ПараметрыИПП.ПолучениеОбновленийПрограммы);
	ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
		"НастройкиОбновления",
		НастройкиОбновления);
	
	Если НастройкиОбновления.СпособАвтоматическойПроверки = 0 Тогда
		// Если не используется автоматическая проверка обновлений
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			"ПроверкаПриЗапускеВыполнена", Истина);
		Возврат;
	ИначеЕсли НастройкиОбновления.СпособАвтоматическойПроверки <> 1 Тогда
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			"ПроверкаПриЗапускеВыполнена", Истина);
	КонецЕсли;
	
	// Вызвать автоматическую проверку обновления через 1 секунду после начала работы программы.
	ПодключитьОбработчикОжидания("ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений", 1.0, Истина);
	
КонецПроцедуры

// Отображает при начале работы программы форму помощника "Переход на новую
// версию платформы" в режиме "Используется нерекомендуемая
// версия платформы".
// Первый шаг помощника - информация о том, что используется версия платформы
// ниже рекомендуемой. Доступны кнопки: "Перейти на новую версию платформы",
// "Завершить работу", "Продолжить работу на текущей версии" (в зависимости от
// переданных параметров).
// Форма помощника отображается в режиме "Блокировать весь интерфейс".
// Предназначена для Интеграции с библиотекой стандартных подсистем (БСП).
//
// Параметры:
//	ОповещениеОЗакрытии - ОписаниеОповещения - обработчик оповещения о завершении
//		работы помощника. В обработчик оповещения передается значение:
//		- "Продолжить", если пользователь нажал кнопку "Продолжить работу на текущей версии",
//		- Неопределено - во всех остальных случаях;
//	СтандартнаяОбработка - Булево - в параметре возвращается значение Ложь,
//		если необходимо выполнить стандартную обработку версии платформы,
//		из-за недоступности использования помощника в текущем режиме
//		работы (см. функцию ДоступноИспользованиеПолученияОбновленийПлатформы()).
//
// Возвращаемое значение:
//	УправляемаяФорма - форма помощника перехода на новую версию платформы.
//
Процедура ПриПроверкеВерсииПлатформыПриЗапуске(ОповещениеОЗакрытии, СтандартнаяОбработка) Экспорт
	
	Попытка
		Если ПолучениеОбновленийПрограммыВызовСервера.ДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
			ОткрытьФорму("Обработка.ПереходНаНовуюВерсиюПлатформы1СПредприятие.Форма",
				Новый Структура("СценарийНерекомендуемаяВерсияПлатформы", Истина),
				,
				,
				,
				,
				ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Исключение
		// Возникновение необрабатываемого исключения при начале работы системы приведет
		// к невозможности открытия информационной базы, поэтому исключение обязательно
		// обрабатывается, информация об ошибке записывается в журнал регистрации,
		// возвращается признак стандартной обработки при возникновении исключения открытия
		// помощника обновления платформы.
		СтандартнаяОбработка = Истина;
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка проверки версии платформы при запуске. %1';uk='Помилка перевірки версії платформи при запуску. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ГлобальнаяИнформацияОДоступномОбновлении() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
		"ИнформацияОДоступномОбновлении");
	
КонецФункции

Функция ГлобальныеНастройкиОбновления() Экспорт
	
	НастройкиОбновления = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
		"НастройкиОбновления");
	Если НастройкиОбновления = Неопределено Тогда
		НастройкиОбновления = ПолучениеОбновленийПрограммыВызовСервера.НастройкиОбновления();
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			"НастройкиОбновления", НастройкиОбновления);
	КонецЕсли;
	
	Возврат НастройкиОбновления;
	
КонецФункции

Процедура ПодключитьПроверкуПоРасписанию() Экспорт
	
	ПодключитьОбработчикОжидания("ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений", 300, Истина);
	
КонецПроцедуры

Процедура ПодключитьОбработкуРезультатаПроверки() Экспорт
	
	ПодключитьОбработчикОжидания("ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений", 10, Истина);
	
КонецПроцедуры

Процедура ОтключитьПроверкуПоРасписанию() Экспорт
	
	ОтключитьОбработчикОжидания("ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений");
	
КонецПроцедуры

Функция ОткрытаФормаОбработкиПолученияОбновлений() Экспорт
	
	ПараметрОповещения = Новый Структура("Форма", Неопределено);
	Оповестить("ПолучениеОбновленийПрограммы_ПроверкаОткрытияФормы", ПараметрОповещения, ЭтотОбъект);
	Возврат (ПараметрОповещения.Форма <> Неопределено);
	
КонецФункции

#КонецОбласти

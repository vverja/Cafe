#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


// Устанавливает документу статус проведения банком
//
// Параметры:
//    НовыйСтатус - Строка - Не используется
//    ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//    Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ДатаПроведенияБанком", ДатаПроведенияБанком) Тогда
			ПроведеноБанком = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		ДенежныеСредстваСервер.ЗаполнитьДокументПоЗаявкеНаРасходованиеДенежныхСредств(
			ДанныеЗаполнения,
			Валюта,
			ДанныеЗаполнения,
			РасшифровкаПлатежа,
			Перечисления.ФормыОплаты.Безналичная,
			?(Константы.ИспользоватьНачислениеЗарплаты.Получить(), ВедомостиНаВыплатуЗарплаты, Неопределено),
			ХозяйственнаяОперация);
		ЗаполнитьБанковскийСчетПолучательПоУмолчанию(ДанныеЗаполнения);
		
		// Если документ был записан, необходимо перезаполнить заполненные поля.
		Если НЕ ЭтоНовый() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("НесколькоЗаявокНаРасходованиеСредств") Тогда
		
		МассивДокументов = ДанныеЗаполнения.ДокументОснование;
		ДанныеЗаполнения = ДанныеЗаполнения.РеквизитыШапки;
		
		ДенежныеСредстваСервер.ЗаполнитьДокументПоСпискуЗаявокНаРасходованиеДенежныхСредств(
			МассивДокументов,
			Валюта,
			ДанныеЗаполнения,
			РасшифровкаПлатежа,
			Перечисления.ФормыОплаты.Безналичная,
			?(Константы.ИспользоватьНачислениеЗарплаты.Получить(), ВедомостиНаВыплатуЗарплаты, Неопределено),
			);
		
		ЗаполнитьБанковскийСчетПолучательПоУмолчанию(ДанныеЗаполнения);
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьПоЗаказуПоставщику(
			ДанныеЗаполнения,
			0, // СуммаКОплате
			ДанныеЗаполнения);
			
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ЗаполнитьПоПоступлениюТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения.СуммаДокумента,
			ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
		
		ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(
			ДанныеЗаполнения,
			ДанныеЗаполнения.СуммаДокумента,
			ДанныеЗаполнения);
			
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		ЗаполнитьПоОтчетуКомитентуОПродажах(
			ДанныеЗаполнения,
			0, //СуммаКОплате
			ДанныеЗаполнения);
	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		ЗаполнитьПоОтчетуКомиссионераОПродажах(
			ДанныеЗаполнения,
			0, //СуммаКОплате
			ДанныеЗаполнения);
	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ЗаполнитьПоДоговоруКонтрагента(
			ДанныеЗаполнения,
			0,
			ДанныеЗаполнения);
	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаказПоставщику") Тогда
		
		ДокОснование = ДанныеЗаполнения.ЗаказПоставщику;
		КОплате = ДанныеЗаполнения.СуммаКОплате;
		
		Если ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ЗаполнитьПоЗаказуПоставщику(ДокОснование, КОплате, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ЗаполнитьПоПоступлениюТоваров(ДокОснование, КОплате, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
			ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(ДокОснование, КОплате, ДанныеЗаполнения);
				
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			ЗаполнитьПоОтчетуКомитентуОПродажах(ДокОснование, КОплате, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			ЗаполнитьПоОтчетуКомитентуОСписании(ДокОснование, КОплате, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			ЗаполнитьПоОтчетуКомиссионераОПродажах(ДокОснование, КОплате, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			ЗаполнитьПоПередачеТоваров(ДокОснование, КОплате, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			ЗаполнитьПоОтчетуПоКомиссии(ДокОснование, ДанныеЗаполнения.Организация, КОплате, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			ЗаполнитьПоВозвратуТоваровОтКлиента(ДокОснование, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЗаполнитьПоДоговору(ДокОснование, КОплате, ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
			ЗаполнитьПоТаможеннойДекларации(ДокОснование, КОплате, ДанныеЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ТипЗнч(ДокументОснование) = Тип("Массив") Тогда
		
		Для каждого СтрокаМассива Из ДанныеЗаполнения.ДокументОснование Цикл
			
			Если ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ЗаполнитьПоЗаказуПоставщику(СтрокаМассива, 0, ДанныеЗаполнения);
				
			ИначеЕсли ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда	 
				ЗаполнитьПоПоступлениюТоваров(СтрокаМассива, 0, ДанныеЗаполнения);
				
			ИначеЕсли ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда	 
				ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(СтрокаМассива, 0, ДанныеЗаполнения);
				
			ИначеЕсли ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ОтчетКомитенту") Тогда	 
				ЗаполнитьПоОтчетуКомитентуОПродажах(СтрокаМассива, 0, ДанныеЗаполнения);
				
			ИначеЕсли ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда	 
				ЗаполнитьПоОтчетуКомитентуОСписании(СтрокаМассива, 0, ДанныеЗаполнения);
				
			ИначеЕсли ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ОтчетКомиссионера") Тогда	 
				ЗаполнитьПоОтчетуКомиссионераОПродажах(СтрокаМассива, 0, ДанныеЗаполнения);
				
			ИначеЕсли ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда	 
				ЗаполнитьПоПередачеТоваров(СтрокаМассива, 0, ДанныеЗаполнения);
				
			ИначеЕсли ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда	 
				ЗаполнитьПоТаможеннойДекларации(СтрокаМассива, 0, ДанныеЗаполнения);
			
			КонецЕсли;
			
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ЗаполнитьПоАвансовомуОтчету(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
		
		ДенежныеСредстваСервер.ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств(
			ДанныеЗаполнения,
			ЭтотОбъект,
			ДанныеЗаполнения,
			РасшифровкаПлатежа);
		
		// Если документ был записан, необходимо перезаполнить заполненные поля.
		Если НЕ ЭтоНовый() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ЗаполнитьПоВозвратуТоваровОтКлиента(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		
		ДенежныеСредстваСервер.ЗаполнитьПоДоговоруКредитаДепозита(ДанныеЗаполнения, ДанныеЗаполнения, РасшифровкаПлатежа, Ложь);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
		И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		И ДанныеЗаполнения.Свойство("ПодотчетноеЛицо") Тогда
		
		ДанныеЗаполнения.Вставить("Подразделение", ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(ДанныеЗаполнения.ПодотчетноеЛицо));
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		
	Иначе
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("БанковскийСчет") Тогда
			БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		Иначе
			БанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
		КонецЕсли;
		
	КонецЕсли;
	
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ДенежныеСредстваСервер.ЗаполнитьСтатьюДвиженияДенежныхСредств(
		ЭтотОбъект,
		ДанныеЗаполнения,
		?(ЗначениеЗаполнено(ХозяйственнаяОперация), ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ОплатаПоставщику));
		
	Если СуммаДокумента <> 0 Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("БанковскийСчетКонтрагента") Тогда
			БанковскийСчетКонтрагента = ДанныеЗаполнения.БанковскийСчетКонтрагента;
			Если Не ЗначениеЗаполнено(НазначениеПлатежа)
				И (ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
					Или Не ДанныеЗаполнения.Свойство("НазначениеПлатежа")
					Или Не ЗначениеЗаполнено(ДанныеЗаполнения.НазначениеПлатежа)) Тогда
				НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	ОшибкиЗаполнения = "";
	РасшифровкаБезРазбиения = Ложь;
	
	Если ДополнительныеСвойства.Свойство("РасшифровкаБезРазбиения")
		И ДополнительныеСвойства.РасшифровкаБезРазбиения Тогда
		РасшифровкаБезРазбиения = Истина;
	КонецЕсли;
	
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		Ложь,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ИспользоватьЗаявки = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
		
	МассивНепроверяемыхРеквизитов.Добавить("ВидПеречисленияВБюджет");
	МассивНепроверяемыхРеквизитов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
	
	Если (ДенежныеСредстваСервер.РазрешеныПлатежиБезУказанияЗаявок(ЭтотОбъект)
			Или Не ИспользоватьЗаявки Или НеКонтролироватьЗаполнениеЗаявки)
		И Не ОплатаПоЗаявкам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств");
	КонецЕсли;
	
	Если Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийБезРасшифровкиПлатежа().Найти(ХозяйственнаяОперация) <> Неопределено
		И (ДенежныеСредстваСервер.РазрешеныПлатежиБезУказанияЗаявок(ЭтотОбъект)
			Или Не ИспользоватьЗаявки Или НеКонтролироватьЗаполнениеЗаявки)
		И Не ОплатаПоЗаявкам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
	КонецЕсли;
	
	Если ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВходящегоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("НомерВходящегоДокумента");
	КонецЕсли;
	
	Если Не ПроведеноБанком Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПроведенияБанком");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
		
		МассивНепроверяемыхРеквизитов.Добавить("ДатаАвансовогоОтчета");
		
		Если НЕ ЗначениеЗаполнено(ДатаАвансовогоОтчета) Тогда
			ТекстОшибки = НСтр("ru='Поле ""Отчитаться"" не заполнено';uk='Поле ""Відзвітувати"" не заповнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"ПериодАвансовогоОтчета",
				, // ПутьКДанным
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Подразделение");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(ЭтотОбъект, МассивНепроверяемыхРеквизитов);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, Новый Структура("РасшифровкаПлатежа"), МассивНепроверяемыхРеквизитов, Отказ);
	
	Если ДенежныеСредстваСервер.ОперацияПоЗарплате(ХозяйственнаяОперация) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ВедомостиНаВыплатуЗарплаты.ФизическоеЛицо");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("ВедомостиНаВыплатуЗарплаты.Ведомость");
		КонецЕсли;
		
		Если СуммаДокумента <> ВедомостиНаВыплатуЗарплаты.Итог("Сумма") И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
			
			Текст = НСтр("ru='Сумма по строкам табличной части не равна сумме документа. Документ не может быть проведен.';uk='Сума за рядками табличної частини не дорівнює сумі документа. Документ не може бути проведений.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"СуммаДокумента",
			,
			Отказ);
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнениеПартнера(ЭтотОбъект,
	                                                   ХозяйственнаяОперация,
	                                                   МассивНепроверяемыхРеквизитов,
	                                                   РасшифровкаБезРазбиения,
	                                                   Отказ);
													   
	ДенежныеСредстваСервер.ПроверитьСуммуПоЕдиномуНалогу(ЭтотОбъект, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
		
	ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ,
		ОшибкиЗаполнения);
		
	ДенежныеСредстваСервер.ПроверитьЗаявкуНаРасходованиеДенежныхСредств(ЭтотОбъект, Отказ);
	ДенежныеСредстваСервер.ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств(ЭтотОбъект, Отказ);
	
	ДенежныеСредстваСервер.ПроверитьБанковскийСчетПолучатель(ЭтотОбъект, Отказ, ОшибкиЗаполнения);
	ДенежныеСредстваСервер.ПроверитьБанковскийСчетКонтрагента(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ОшибкиЗаполнения);
	ДенежныеСредстваСервер.ПроверитьВалютуКонвертации(ЭтотОбъект, Отказ, ОшибкиЗаполнения);
	
	Если РасшифровкаБезРазбиения Тогда
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиБезРазбиения(ЭтотОбъект, ПроверяемыеРеквизиты, "РасшифровкаПлатежа", "РасшифровкаБезРазбиения", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	// Очистим табличную часть, если она не должна заполняться.
	МассивРеквизитовОперации = Новый Массив;
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, Ложь, Неопределено, МассивРеквизитовОперации);
	
	Если РасшифровкаПлатежа.Количество() > 0
		И (МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") = Неопределено
			Или Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийБезРасшифровкиПлатежа().Найти(ХозяйственнаяОперация) <> Неопределено
				И Не ОплатаПоЗаявкам) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
		Тогда
			ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
				Валюта,
				?(ПроведеноБанком, ДатаПроведенияБанком, Дата),
				РасшифровкаПлатежа);
		КонецЕсли;
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(РасшифровкаПлатежа);
		ДенежныеСредстваСервер.ЗаполнитьВладельцаОбъектаРасчета(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Если НЕ ЗначениеЗаполнено(СтатьяАктивовПассивов) Тогда
			СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы;
		КонецЕсли;
	КонецЕсли;
	
	Если ДенежныеСредстваСервер.ОперацияПоЗарплате(ХозяйственнаяОперация) Тогда
		СтатьяАктивовПассивов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда;
		АналитикаАктивовПассивов = Неопределено;
		
		
	КонецЕсли;
	
	Если ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение И НЕ ЗначениеЗаполнено(НомерПоручения) Тогда
		СформироватьНомерПоручения();
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		Ложь,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ПроверитьИзменениеТипаПлатежногоДокумента();
	
	Если Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение
		И Не (ЗначениеЗаполнено(НомерВходящегодокумента) Или ЗначениеЗаполнено(ДатаВходящегоДокумента)) Тогда
		НомерВходящегодокумента = СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, Истина, Истина));
		ДатаВходящегоДокумента = Дата;
	КонецЕсли;
	
	ФорматированноеНазначениеПлатежа = ДенежныеСредстваСервер.ФорматироватьНазначениеПлатежа(НазначениеПлатежа);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОшибкиЗагрузки = "";
	КонецЕсли;
	
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(РасшифровкаПлатежа, "СтатьяРасходов");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.СписаниеБезналичныхДенежныхСредств.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваВПути(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьЛимитыРасходаДенежныхСредств(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по расчетам с поставщиками и клиентами
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по прочим расходам
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по расчетам по договорам кредитов (депозитов)
	ДенежныеСредстваСервер.ОтразитьРасчетыПоДоговорамКредитовИДепозитов(ДополнительныеСвойства, Движения, Отказ);
	
	
	// Движения по единому налогу.
	ДенежныеСредстваСервер.ОтразитьКнигаДоходовИРасходовПоЕдиномуНалогу(ДополнительныеСвойства, Движения, Отказ);
	
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныхСредств(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваКонтрагент(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияКонтрагентКонтрагент(ДополнительныеСвойства, Движения, Отказ);
	
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = "0";
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаВходящегоДокумента = "";
	НомерВходящегоДокумента = "";
	ПроведеноБанком = Ложь;
	ДатаПроведенияБанком = "";
	ДатаВыгрузки = "";
	ДатаЗагрузки = "";
	ОшибкиЗагрузки = "";
	ФорматированноеНазначениеПлатежа = "";
	ДанныеВыписки = "";
	ИмяКонтрагента = "";
	ПоказательТипа = "";
	НомерПоручения = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоАвансовомуОтчету(Знач ДокументОснование, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	Неопределено КАК БанковскийСчет,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ПодотчетноеЛицо,
	|	ДанныеДокумента.ПодотчетноеЛицо.Наименование КАК Выдать,
	|	ДанныеДокумента.Ссылка КАК АвансовыйОтчет,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Ссылка) КАК Основание,
	|	(-ДенежныеСредства.СуммаОстаток) КАК Сумма,
	|	(-ДенежныеСредства.СуммаОстаток) КАК СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Организация = ДанныеДокумента.Организация
	|		И ДенежныеСредства.ПодотчетноеЛицо = ДанныеДокумента.ПодотчетноеЛицо
	|		И ДенежныеСредства.Валюта = ДанныеДокумента.Валюта
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Безналичная, ДанныеЗаполнения);
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.ПодотчетноеЛицо);
		НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоРезультатуЗапроса(ДокументОснование, РезультатЗапроса, СуммаКОплате, ДанныеЗаполнения)
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить Списание безналичных ДС на основании документа %1';uk='Не потрібно вводити Списання безготівкових ГК на підставі документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Безналичная, ДанныеЗаполнения);
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет) Тогда
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.Валюта);
		Иначе			
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент);
		КонецЕсли;
		НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТовары.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Ссылка.ПоступлениеПоЗаказам
		|");
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
		РезультатЗапросаПоЗаказам = Запрос.Выполнить();
		Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
			ЗаказыПоставщику = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
			ЗаказыПоставщику.Добавить(ДокументОснование);
		Иначе
			ЗаказыПоставщику = ДокументОснование;
		КонецЕсли;		
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
			ЗаказыПоставщику,
			Выборка.Договор,
			ДанныеЗаполнения.Валюта,
			СуммаКОплате,
			РасшифровкаПлатежа);
		
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПоставщику(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Договор,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет
	|	ИНАЧЕ
	|		ДанныеДокумента.Договор.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеДокумента.Договор.БанковскийСчет.ВалютаДенежныхСредств, ДанныеДокумента.Валюта)
	|	КОНЕЦ КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт)
	|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюТоваров(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|		)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитентуОПродажах(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитентуОСписании(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	Неопределено КАК БанковскийСчет,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионераОПродажах(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	&Ссылка КАК ДокументОснование,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.СуммаДокумента >= 0 ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.УдержатьВознаграждение КАК УдержатьВознаграждение
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить Списание безналичных ДС на основании документа %1';uk='Не потрібно вводити Списання безготівкових ГК на підставі документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Безналичная, ДанныеЗаполнения);
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет) Тогда
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.Валюта);
		Иначе			
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент);
		КонецЕсли;
		
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
			
			Если ДанныеЗаполнения.УдержатьВознаграждение Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не требуется вводить списание безналичных денежных средств на основании документа %1, поскольку в нем удержано вознаграждение';uk='Не потрібно вводити списання безготівкових грошових коштів на підставі документа %1, оскільки в ньому утримано винагороду'"),
					ДокументОснование);
				ВызватьИсключение Текст;
			Иначе
				
				ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
					ДокументОснование,
					Выборка.Договор,
					ДанныеЗаполнения.Валюта,
					СуммаКОплате,
					РасшифровкаПлатежа);
				
			КонецЕсли;
			
		Иначе
			
			ОбъектыРасчетов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОснование);
			ОбъектыРасчетов.Добавить(Выборка.Договор);
			
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
				ОбъектыРасчетов,
				ДанныеЗаполнения.Валюта,
				-ДанныеЗаполнения.Сумма,
				ДанныеЗаполнения.Партнер,
				РасшифровкаПлатежа);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоПередачеТоваров(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
	|	ДанныеДокумента.Организация КАК ОрганизацияПолучатель,
	|	Неопределено КАК Контрагент,
	|	Неопределено КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетПолучатель,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизацииПолучателя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизацииПолучателя.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
	|	ДанныеДокумента.Организация КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	Неопределено КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетПолучатель,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизацииПолучателя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизацииПолучателя.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуПоКомиссии(Знач ДокументОснование, Знач ОрганизацияДокумента, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Комиссионер КАК Организация,
	|	ДанныеДокумента.Организация КАК ОрганизацияПолучатель,
	|	Неопределено КАК Контрагент,
	|	Неопределено КАК Договор,
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК БанковскийСчетПолучатель,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Комиссионер = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Комиссионер КАК Организация,
	|	ДанныеДокумента.Организация КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	Неопределено КАК Договор,
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК БанковскийСчетПолучатель,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Комиссионер = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Комиссионер КАК ОрганизацияПолучатель,
	|	Неопределено КАК Контрагент,
	|	Неопределено КАК Договор,
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК БанковскийСчетПолучатель,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Комиссионер КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	Неопределено КАК Договор,
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК БанковскийСчетПолучатель,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация = &Организация
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", ОрганизацияДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ДанныеЗаполнения.БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.ОрганизацияПолучатель,
			ДанныеЗаполнения.Валюта);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПоВозвратуТоваровОтКлиента(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ДанныеДокумента.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента,
	|	&Ссылка КАК ДокументОснование,
	|
	|	Неопределено КАК Касса,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.СпособКомпенсации КАК СпособКомпенсации,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить списание безналичных денежных средств на основании документа %1';uk='Не має потреби вводити списання безготівкових коштів на підставі документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
	
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
		
		ОбъектыРасчетов = Новый Массив;
		Если Выборка.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства Тогда
			ОбъектыРасчетов.Добавить(ДокументОснование);
		Иначе
			ОбъектыРасчетов.Добавить(Неопределено);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
			ОбъектыРасчетов.Добавить(Выборка.ЗаявкаНаВозвратТоваровОтКлиента);
		КонецЕсли;
		ОбъектыРасчетов.Добавить(Выборка.Договор);
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
			ОбъектыРасчетов,
			ДанныеЗаполнения.Валюта,
			ДанныеЗаполнения.Сумма,
			ДанныеЗаполнения.Партнер,
			РасшифровкаПлатежа);
		
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");              
	
КонецПроцедуры

Процедура ЗаполнитьПоДоговору(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Ссылка КАК Договор,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьБанковскийСчетПолучательПоУмолчанию(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ВалютаКонвертации);
		ДанныеЗаполнения.Вставить("БанковскийСчетПолучатель", БанковскийСчетПолучатель);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоТаможеннойДекларации(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|
	|	ВЫБОР КОГДА ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОформлениеГТДСамостоятельно)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КОНЕЦ КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ЗаполнитьПоДоговоруКонтрагента(Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ДанныеДокумента.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.ТипДоговора КАК ТипДоговора,
	|	РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток КАК СуммаВзаиморасчетов,
	|	РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток КАК Сумма,
	|	РасчетыСПоставщиками.ОплачиваетсяОстаток - РасчетыСПоставщиками.КОплатеОстаток КАК СуммаДокумента,
	|	Неопределено КАК Касса,
	|	&Ссылка КАК ДокументОснование
	|	
	|	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, ЗаказПоставщику = &Ссылка) КАК РасчетыСПоставщиками
	|	ПО
	|		ИСТИНА
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не требуется вводить списание безналичных денежных средств на основании договора %1';uk='Не має потреби вводити списання безготівкових коштів на підставі договору %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Не (Выборка.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
			Или Выборка.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом
			Или Выборка.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком
			Или Выборка.ТипДоговора = Перечисления.ТипыДоговоров.Импорт) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не требуется вводить списание безналичных денежных средств на основании договора с типом взаимоотношений ""%1""';uk='Не має потреби вводити списання безготівкових коштів на підставі договору з типом взаємин ""%1""'"),
				Выборка.ТипДоговора);
			ВызватьИсключение Текст;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Безналичная, ДанныеЗаполнения);
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоДоговоруСПоставщиком(
			ДокументОснование,
			ДанныеЗаполнения.Валюта,
			РасшифровкаПлатежа);
		
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры


Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		Или Не ДанныеЗаполнения.Свойство("БанковскийСчет")
		Или Не ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет) Тогда
		
		БанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				?(ЗначениеЗаполнено(Организация), Организация, Неопределено),
				?(ЗначениеЗаполнено(Валюта), Валюта, Неопределено));
		КонецЕсли;
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			СтруктураРеквизитов = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			Организация = СтруктураРеквизитов.Организация;
			Валюта = СтруктураРеквизитов.Валюта;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ПроведеноБанком") Тогда
		ПроведеноБанком = ЗначениеЗаполнено(ТипПлатежногоДокумента) И
			Не (ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение
				Или ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ДатаПроведенияБанком") Тогда
		Если ПроведеноБанком Тогда
			ДатаПроведенияБанком = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(РасшифровкаПлатежа, "СтатьяРасходов");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьИзменениеТипаПлатежногоДокумента() 
	
	Если Не ЭтоНовый() Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.ТипПлатежногоДокумента КАК ТипПлатежногоДокумента
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ТипПлатежногоДокумента <> ТипПлатежногоДокумента Тогда
				Номер = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств") Тогда
			Массив.Добавить(Движения.ДенежныеСредстваКВыплате);
		КонецЕсли;

		Массив.Добавить(Движения.РасчетыСКлиентами);

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В (ВЫБРАТЬ
	|			РасшифровкаПлатежа.Заказ
	|		ИЗ
	|			Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ГДЕ
	|			РасшифровкаПлатежа.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			РасшифровкаПлатежа.Заказ)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В (ВЫБРАТЬ
	|			РасшифровкаПлатежа.Заказ
	|		ИЗ
	|			Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ГДЕ
	|			РасшифровкаПлатежа.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			РасшифровкаПлатежа.Заказ)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка;
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В (ВЫБРАТЬ
	|			РасшифровкаПлатежа.Заказ
	|		ИЗ
	|			Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ГДЕ
	|			РасшифровкаПлатежа.Ссылка = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			РасшифровкаПлатежа.Заказ)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	МассивЗависимыхЗаказов = Результат[0].Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
	МассивЗависимыхЗаказов = Результат[1].Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовПоставщикам", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Процедура СформироватьНомерПоручения()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Нумератор", 	   Перечисления.Нумераторы.ПлатежноеПоручение);
	СтруктураПараметров.Вставить("Дата",           Дата);
	СтруктураПараметров.Вставить("Организация",    Организация);
	СтруктураПараметров.Вставить("БанковскийСчет", БанковскийСчет);
	
	ДенежныеСредстваСервер.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, НомерПоручения);
	ДенежныеСредстваСервер.ЗаписатьОчереднойНомер(СтруктураПараметров, НомерПоручения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

&НаКлиенте
Перем ПередЗакрытиемПовторныйВызов; // Используется для не модальных вопросов перед закрытием

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
	
		Возврат;
	
	КонецЕсли;
	
	// Получение параметров
	ОбновитьДополнить = Параметры.ОбновитьДополнить;
	АдресПравилаЗаполнения = Параметры.АдресПравилаЗаполнения;
	Если Параметры.Свойство("РежимРедактирования") Тогда
		Элементы.ФормаЗаполнитьДокументСохранить.Заголовок = НСтр("ru='Сохранить';uk='Зберегти'");
	КонецЕсли; 
	Если Параметры.Свойство("ИзменитьРезультатНа") Тогда
		ИзменитьРезультатНа = Параметры.ИзменитьРезультатНа;
	Иначе
		Элементы.ИзменитьРезультатНа.Видимость = Ложь;
	КонецЕсли; 
	Если Параметры.Свойство("ТочностьОкругления") Тогда
		ТочностьОкругления = Параметры.ТочностьОкругления;
	Иначе
		Элементы.ТочностьОкругления.Видимость = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("ПланироватьПоСумме") Тогда
		ПланироватьПоСумме = Параметры.ПланироватьПоСумме;
	КонецЕсли;
	Если Параметры.Свойство("КоличествоПериодов") Тогда
		КоличествоПериодов = Параметры.КоличествоПериодов;
	КонецЕсли;
	Элементы.ФормаЗаполнитьДокументСохранить.Доступность = НЕ Параметры.ТолькоПросмотр;
	
	ВидПлана = Параметры.ВидПлана;
	ТипПлана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ТипПлана");
	АдресСхемыПреобразованияДанных = Планирование.ПолучитьАдресСхемыПреобразованияДанных(ТипПлана, УникальныйИдентификатор);
	АдресПользовательскихНастроек = Параметры.АдресПользовательскихНастроек;
	Если Параметры.Свойство("РаспределитьПоРабочимДням") Тогда
		РаспределитьПоРабочимДням = Параметры.РаспределитьПоРабочимДням;
	Иначе
		Элементы.РаспределитьПоРабочимДням.Видимость = Ложь;
	КонецЕсли; 
	
	// Дерево заполняется данными табличной части документа
	ВосстановитьДеревоИзТабличнойЧасти(ПравилоЗаполнения, АдресПравилаЗаполнения, ПланироватьПоСумме);
	
	ИнициализироватьКомпоновщикНастроек(АдресПользовательскихНастроек, АдресСхемыПреобразованияДанных);
	
	ИспользоватьРасширенныеВозможностиЗаполнения = ИспользуютсяРасширенныеВозможности(ЭтаФорма);
	
	НастроитьФорму();

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПередЗакрытиемПовторныйВызов = Истина Тогда
		ПередЗакрытиемПовторныйВызов = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Продолжить без сохранения';uk='Продовжити без збереження'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Результат = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
			НСтр("ru='Настройки правила были изменены. Продолжить без сохранения?';uk='Настройки правила були змінені. Продовжити без збереження?'"), 
			Кнопки);
		Отказ = Истина;
		ПередЗакрытиемПовторныйВызов = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Результат = РезультатВопроса;
	Если Результат  = КодВозвратаДиалога.Да Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	ПередЗакрытиемПовторныйВызов = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ПравилоЗаполненияКоличествоИсточникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПравилоЗаполненияКоличествоИсточникОбработкаВыбораСервер(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПравилоЗаполненияКоличествоИсточникОбработкаВыбораСервер(ВыбранноеЗначение)

	КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения);
	ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
	
	Если ЭлементыИсточники.Количество() > 0 Тогда
		
		ЭлементИсточник = ЭлементыИсточники.Получить(0);
		Если ЭлементИсточник.Источник <> ВыбранноеЗначение.Значение Тогда
			
			ЭлементИсточник.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
		КонецЕсли;
		
	Иначе
		
		ЭлементИсточник = ЭлементыИсточники.Добавить();
		ЭлементИсточник.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
	КонецЕсли;
	
	ЭлементИсточник.Источник = ВыбранноеЗначение.Значение;
	ЭлементИсточник.Использование = Истина;
	ЭлементИсточник.ВариантПериода = ВыбранноеЗначение.ОграничениеВыборкиПоПериоду;
	Если ВыбранноеЗначение.Свойство("ПоляЗаполнения") Тогда
		ЭлементИсточник.ПоляЗаполнения = ВыбранноеЗначение.ПоляЗаполнения;
	Иначе
		ЭлементИсточник.ПоляЗаполнения = ПолучитьПоляЗаполнения(ЭлементИсточник.Источник, ЭлементИсточник.ВариантПериода,
		АдресСхемыПреобразованияДанных, ВидПлана, ЭлементИсточник.АдресПользовательскихНастроек, Истина, КоличествоПериодов);
	КонецЕсли;
	
	ПравилоЗаполненияКоличествоИсточник = ЭлементИсточник.Источник;
	ВариантПериодаИсточникаКоличества   = ЭлементИсточник.ВариантПериода;
	ПравилоЗаполненияКоличествоДата     = ЭлементИсточник.Дата;
	ПравилоЗаполненияКоличествоПериод   = ЭлементИсточник.Период;
	
	Элементы.ПравилоЗаполненияКоличествоБезПериода.Видимость = ВариантПериодаИсточникаКоличества = 0 ИЛИ ВариантПериодаИсточникаКоличества = 3;
	Элементы.ПравилоЗаполненияКоличествоПериод.Видимость     = ВариантПериодаИсточникаКоличества = 2;
	Элементы.ПравилоЗаполненияКоличествоДата.Видимость       = ВариантПериодаИсточникаКоличества = 1;
	Элементы.ПравилоЗаполненияКоличествоНастройка.Видимость  = ЗначениеЗаполнено(ПравилоЗаполненияКоличествоИсточник);
	Элементы.ПравилоЗаполненияКоличествоНастройкаБезИсточника.Видимость = НЕ ЗначениеЗаполнено(ПравилоЗаполненияКоличествоИсточник);
	
	Модифицированность = Истина;

КонецПроцедуры
 
&НаКлиенте
Процедура ПравилоЗаполненияКоличествоИсточникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПравилоЗаполненияКоличествоИсточник) Тогда
	
		КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения);
		ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
		
		Если ЭлементыИсточники.Количество() > 0 Тогда
			
			ЭлементыИсточники.Очистить();
			
		КонецЕсли;
		
		НастроитьФорму();
		
	КонецЕсли; 
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияЦенаИсточникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПравилоЗаполненияЦенаИсточникОбработкаВыбораСервер(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПравилоЗаполненияЦенаИсточникОбработкаВыбораСервер(ВыбранноеЗначение)

	КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения, Истина);
	ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
	
	Если ЭлементыИсточники.Количество() > 0 Тогда
		
		ЭлементИсточник = ЭлементыИсточники.Получить(0);
		Если ЭлементИсточник.Источник <> ВыбранноеЗначение.Значение Тогда
			
			ЭлементИсточник.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
		КонецЕсли;
		
	Иначе
		
		ЭлементИсточник = ЭлементыИсточники.Добавить();
		ЭлементИсточник.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
	КонецЕсли;
	
	ЭлементИсточник.Источник = ВыбранноеЗначение.Значение;
	ЭлементИсточник.Использование = Истина;
	ЭлементИсточник.Присоединять = Истина;
	ЭлементИсточник.ВариантПериода = ВыбранноеЗначение.ОграничениеВыборкиПоПериоду;
	Если ВыбранноеЗначение.Свойство("ПоляЗаполнения") Тогда
		ЭлементИсточник.ПоляЗаполнения = ВыбранноеЗначение.ПоляЗаполнения;
	Иначе
		ЭлементИсточник.ПоляЗаполнения = ПолучитьПоляЗаполнения(ЭлементИсточник.Источник, ЭлементИсточник.ВариантПериода,
		АдресСхемыПреобразованияДанных, ВидПлана, ЭлементИсточник.АдресПользовательскихНастроек, Истина, КоличествоПериодов);
	КонецЕсли; 
	
	ПравилоЗаполненияЦенаИсточник = ЭлементИсточник.Источник;
	ВариантПериодаИсточникаЦены   = ЭлементИсточник.ВариантПериода;
	ПравилоЗаполненияЦенаДата     = ЭлементИсточник.Дата;
	ПравилоЗаполненияЦенаПериод   = ЭлементИсточник.Период;
	
	Элементы.ПравилоЗаполненияЦенаБезПериода.Видимость = ВариантПериодаИсточникаЦены = 0 ИЛИ ВариантПериодаИсточникаЦены = 3;
	Элементы.ПравилоЗаполненияЦенаПериод.Видимость     = ВариантПериодаИсточникаЦены = 2;
	Элементы.ПравилоЗаполненияЦенаДата.Видимость       = ВариантПериодаИсточникаЦены = 1;
	Элементы.ПравилоЗаполненияЦенаНастройка.Видимость  = ЗначениеЗаполнено(ПравилоЗаполненияЦенаИсточник);
	
	Модифицированность = Истина;

КонецПроцедуры
 
&НаКлиенте
Процедура ПравилоЗаполненияКоличествоПериодПриИзменении(Элемент)
	
	ЭлементИсточник = ПолучитьПервыйЭлементПравилаЗаполнения();
	
	ЭлементИсточник.Период = ПравилоЗаполненияКоличествоПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияЦенаИсточникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПравилоЗаполненияЦенаИсточник) Тогда
	
		КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения, Истина);
		ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
		
		Если ЭлементыИсточники.Количество() > 0 Тогда
			
			ЭлементыИсточники.Очистить();
			
		КонецЕсли;
		
		НастроитьФорму();
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияЦенаПериодПриИзменении(Элемент)
	
	ЭлементИсточник = ПолучитьПервыйЭлементПравилаЗаполнения(Истина);
	
	ЭлементИсточник.Период = ПравилоЗаполненияЦенаПериод;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияКоличествоДатаПриИзменении(Элемент)
	
	ЭлементИсточник = ПолучитьПервыйЭлементПравилаЗаполнения();
	
	ЭлементИсточник.Дата = ПравилоЗаполненияКоличествоДата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияЦенаДатаПриИзменении(Элемент)
	
	ЭлементИсточник = ПолучитьПервыйЭлементПравилаЗаполнения(Истина);
	
	ЭлементИсточник.Дата = ПравилоЗаполненияЦенаДата;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилозаполнения

&НаКлиенте
Процедура ПравилоЗаполненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Корневой элемент не копируется
	Если Элемент.ТекущиеДанные.ТипЭлемента = 2 И Копирование Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Источник копируется
	Если Элемент.ТекущиеДанные.ТипЭлемента = 0 И Копирование Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Способ преобразования копируется с подчиненными
	Если Элемент.ТекущиеДанные.ТипЭлемента = 1 И Копирование Тогда
		
		Отказ = Истина;
		СкопироватьСтрокуСПодчиненными(
			ПравилоЗаполнения, 
			ПравилоЗаполнения.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя(), 
			ПравилоЗаполнения.НайтиПоИдентификатору(Элемент.ТекущаяСтрока), 
			Копирование);
		Возврат;
		
	КонецЕсли;
	
	Если ДобавляетсяНоваяСтрока Тогда
		
		ДобавляетсяНоваяСтрока = Ложь;
		Возврат;
		
	КонецЕсли;
		
	Отказ = Истина;
	ДобавляетсяНоваяСтрока = Истина;
		
	// Источник не может быть помещен в другой источник
	Если Элемент.ТекущиеДанные.ТипЭлемента = 0 Тогда
		
		Элемент.ТекущаяСтрока = Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// Добавление нового источника
	Элемент.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПередУдалением(Элемент, Отказ)
	
	// Корневой элемент не удаляется
	Если Элемент.ТекущиеДанные.ТипЭлемента = 2 Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ Копирование И ДобавляетсяВариантПреобразования Тогда
			
			Элемент.ТекущиеДанные.ТипЭлемента = 1;
			Элемент.ТекущиеДанные.ВариантПреобразования = ПредопределенноеЗначение("Перечисление.ВариантыПреобразования.Сложение");
			ДобавляетсяВариантПреобразования = Ложь;
			
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.ТипЭлемента = 0 Тогда
			
			Если ЭтоАдресВременногоХранилища(Элемент.ТекущиеДанные.АдресПользовательскихНастроек) Тогда
				
				Элемент.ТекущиеДанные.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
					ПолучитьИзВременногоХранилища(Элемент.ТекущиеДанные.АдресПользовательскихНастроек),
					УникальныйИдентификатор);
				
			Иначе
				
				Элемент.ТекущиеДанные.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.ТекущиеДанные.Присоединять = Элемент.ТекущиеДанные.ПолучитьРодителя().Присоединять;
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПравилоЗаполненияИсключать" Тогда
		Если Элемент.ТекущиеДанные.Присоединять = Истина Тогда
			Элемент.ТекущиеДанные.Исключать = Ложь;
		Иначе
			Элемент.ТекущиеДанные.Исключать = НЕ Элемент.ТекущиеДанные.Исключать;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПравилоЗаполненияНастройки" 
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ПравилоЗаполненияИзменитьРезультатНа"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ПравилоЗаполненияПоляЗаполнения" Тогда
		
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Источник) Тогда
			
			ПараметрыФормы = Новый Структура("Источник, АдресПользовательскихНастроек, ИзменитьРезультатНа", 
				Элемент.ТекущиеДанные.Источник,
				Элемент.ТекущиеДанные.АдресПользовательскихНастроек,
				Элемент.ТекущиеДанные.ИзменитьРезультатНа);
				
			ДополнительныеПараметры = Новый Структура("ЭлементИсточник", Элемент.ТекущиеДанные);
			Оповещение = Новый ОписаниеОповещения("ПравилоЗаполненияНастройкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Справочник.ИсточникиДанныхПланирования.Форма.ФормаНастройка", 
				ПараметрыФормы, 
				ЭтаФорма,
				УникальныйИдентификатор,
				,
				,
				Оповещение, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Для каждого Строка из ПараметрыПеретаскивания.Значение Цикл
		
		Если ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 2 Тогда
			
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = Новый Структура("ИсточникПеретаскивания, ЗначениеПеретаскивания", УникальныйИдентификатор, ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Свойство("ИсточникПеретаскивания") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.ИсточникПеретаскивания <> УникальныйИдентификатор Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Строка <> Неопределено И (ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 2 ИЛИ ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 1) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	Если Строка <> Неопределено И (ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 2 ИЛИ ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 1) Тогда
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		
		Для каждого ИдентификаторПеретаскиваемойСтроки из ПараметрыПеретаскивания.Значение.ЗначениеПеретаскивания Цикл

			ПеретаскиваемаяСтрока = ПравилоЗаполнения.НайтиПоИдентификатору(ИдентификаторПеретаскиваемойСтроки);
			
			СкопироватьСтрокуСПодчиненными(
				ПравилоЗаполнения, 
				ПравилоЗаполнения.НайтиПоИдентификатору(Строка), 
				ПеретаскиваемаяСтрока, 
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование);
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				
				ПеретаскиваемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ПеретаскиваемаяСтрока);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияИсточникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоДругойИсточник = Элементы.ПравилоЗаполнения.ТекущиеДанные.Источник <> ВыбранноеЗначение.Значение;
	
	Элементы.ПравилоЗаполнения.ТекущиеДанные.Источник = ВыбранноеЗначение.Значение;
	Элементы.ПравилоЗаполнения.ТекущиеДанные.Использование = Истина;
	Элементы.ПравилоЗаполнения.ТекущиеДанные.ВариантПериода = ВыбранноеЗначение.ОграничениеВыборкиПоПериоду;
	Если ЭтоДругойИсточник Тогда
		Элементы.ПравилоЗаполнения.ТекущиеДанные.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	КонецЕсли;
	Элементы.ПравилоЗаполнения.ТекущиеДанные.ПоляЗаполнения = ПолучитьПоляЗаполнения(Элементы.ПравилоЗаполнения.ТекущиеДанные.Источник,
		Элементы.ПравилоЗаполнения.ТекущиеДанные.ВариантПериода, АдресСхемыПреобразованияДанных, ВидПлана, 
		Элементы.ПравилоЗаполнения.ТекущиеДанные.АдресПользовательскихНастроек, Истина, КоличествоПериодов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияВариантПреобразованияПриИзменении(Элемент)
	
	Элементы.ПравилоЗаполнения.ТекущиеДанные.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьНовыйВариантПреобразования(Команда)
	
	// Способ преобразования не может быть помещен в источник
	Если Элементы.ПравилоЗаполнения.ТекущиеДанные.ТипЭлемента = 0 Тогда
		
		Элементы.ПравилоЗаполнения.ТекущаяСтрока = Элементы.ПравилоЗаполнения.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		
	КонецЕсли;
	
	ДобавляетсяНоваяСтрока = Истина;
	ДобавляетсяВариантПреобразования = Истина;
	
	// Добавление нового способа преобразования
	Элементы.ПравилоЗаполнения.ДобавитьСтроку();
	Элементы.ПравилоЗаполнения.ТекущийЭлемент = Элементы.ПравилоЗаполненияВариантПреобразования;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументСохранить(Команда)
	
	ОчиститьСообщения();
	
	ПравилоКорректно = ЗаполнитьДокументСохранитьСервер();
	Если НЕ ПравилоКорректно Тогда
		ТектВопроса = НСтр("ru='Правила содержат ошибки. Продолжить заполнение документа или вернуться к редактированию правила?';uk='Правила містять помилки. Продовжити заповнення документа або повернутися до редагування правила?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Продолжить';uk='Продовжити'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Редактировать правила';uk='Редагувати правила'"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДокументСохранитьЗавершение", ЭтотОбъект), ТектВопроса, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДокументСохранитьЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументСохранитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да  Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьДокументСохранитьСервер(Истина);
	
	ЗаполнитьДокументСохранитьЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументСохранитьЗакрыть()
	
	Модифицированность = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОбновитьДополнить", ОбновитьДополнить);
	Настройки.Вставить("ИзменитьРезультатНа", ИзменитьРезультатНа);
	Настройки.Вставить("ТочностьОкругления", ТочностьОкругления);
	Настройки.Вставить("РаспределитьПоРабочимДням", РаспределитьПоРабочимДням);
	
	Закрыть(Настройки);
	
КонецПроцедуры
 
&НаКлиенте
Процедура Разгруппировать(Команда)
	
	// Разгруппировать можно только только одну группу
	ВыделенныеСтроки = Элементы.ПравилоЗаполнения.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 1 И ПравилоЗаполнения.НайтиПоИдентификатору(ВыделенныеСтроки[0]).ТипЭлемента = 1 Тогда
		
		РазгруппировываемаяСтрока = ПравилоЗаполнения.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
		
		Для каждого КопируемаяСтрока из РазгруппировываемаяСтрока.ПолучитьЭлементы() Цикл
			
			СкопироватьСтрокуСПодчиненными(
				ПравилоЗаполнения, 
				РазгруппировываемаяСтрока.ПолучитьРодителя(), 
				КопируемаяСтрока, 
				Ложь);
			
		КонецЦикла;
		
		РазгруппировываемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(РазгруппировываемаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьИсточники(Команда)
	
	// Группировка возможна только для элементов с одним родителем
	ПредыдущийРодитель = Неопределено;
	
	ВыделенныеСтроки = Элементы.ПравилоЗаполнения.ВыделенныеСтроки;
	ГруппировкаВозможна = ВыделенныеСтроки.Количество() > 0;
	
	ИндексПервойВыделеннойСтроки = Неопределено;
	
	Для каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		
		ДанныеФормыЭлементДерева = ПравилоЗаполнения.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ТекущийРодитель = ДанныеФормыЭлементДерева.ПолучитьРодителя();
		
		// Корневой элемент или разные родители
		Если ДанныеФормыЭлементДерева.ТипЭлемента = 2 
			ИЛИ ПредыдущийРодитель <> Неопределено 
			И ТекущийРодитель <> ПредыдущийРодитель Тогда
			
			ГруппировкаВозможна = Ложь;
			Прервать;
			
		КонецЕсли;
		
		ПредыдущийРодитель = ТекущийРодитель;
		
		Если ИндексПервойВыделеннойСтроки = Неопределено Тогда
			
			ИндексПервойВыделеннойСтроки = ДанныеФормыЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ДанныеФормыЭлементДерева);
			
		Иначе
			
			ИндексПервойВыделеннойСтроки = Мин(ИндексПервойВыделеннойСтроки, 
				ДанныеФормыЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ДанныеФормыЭлементДерева));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГруппировкаВозможна Тогда
		
		НовыйВариантПреобразования = ПредыдущийРодитель.ПолучитьЭлементы().Вставить(ИндексПервойВыделеннойСтроки);
		НовыйВариантПреобразования.Использование = Истина;
		НовыйВариантПреобразования.ТипЭлемента = 1;
		НовыйВариантПреобразования.Присоединять = НовыйВариантПреобразования.ПолучитьРодителя().Присоединять;
		НовыйВариантПреобразования.ВариантПреобразования = ПредопределенноеЗначение("Перечисление.ВариантыПреобразования.Сложение");
		
		Для каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
			
			КопируемаяСтрока = ПравилоЗаполнения.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			СкопироватьСтрокуСПодчиненными(
				ПравилоЗаполнения, 
				НовыйВариантПреобразования, 
				КопируемаяСтрока, 
				Ложь);
			
			КопируемаяСтрока = ПравилоЗаполнения.НайтиПоИдентификатору(ВыделеннаяСтрока);
			КопируемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(КопируемаяСтрока);
			
		КонецЦикла;
		
		Элементы.ПравилоЗаполнения.Развернуть(НовыйВариантПреобразования.ПолучитьИдентификатор(), Истина);
		Элементы.ПравилоЗаполнения.ТекущаяСтрока = НовыйВариантПреобразования.ПолучитьИдентификатор();
		Элементы.ПравилоЗаполнения.ТекущийЭлемент = Элементы.ПравилоЗаполненияВариантПреобразования;
		Элементы.ПравилоЗаполнения.ИзменитьСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	УстановитьПометкиСПодчиненными(ПравилоЗаполнения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	УстановитьПометкиСПодчиненными(ПравилоЗаполнения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравилоЗаполнения(Команда)
	
	ОчиститьСообщения();
	
	ПравилоКорректно = ПроверитьПравилоЗаполненияСервер(ПравилоЗаполнения, АдресПравилаЗаполнения, АдресСхемыПреобразованияДанных, ВидПлана, ПланироватьПоСумме, Истина);
	Если ПравилоКорректно Тогда
		ПоказатьПредупреждение(,НСтр("ru='Правило не содержит ошибок.';uk='Правило не містить помилок.'"),60);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРасширенныйРежим(Команда)
	
	ИспользоватьРасширенныеВозможностиЗаполнения = Истина;
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРасширенныйРежим(Команда)
	
	Если ИспользуютсяРасширенныеВозможности(ЭтаФорма) Тогда
		ТекстВопроса = НСтр("ru='Расширенные настройки будут удалены, продолжить?';uk='Розширені настройки будуть вилучені, продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ВыключитьРасширенныйРежимЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыключитьРасширенныйРежимЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияКоличествоНастройка(Команда)
	
	ЭлементИсточник = ПолучитьПервыйЭлементПравилаЗаполнения();
	
	Если ЗначениеЗаполнено(ЭлементИсточник.Источник) Тогда
		
		ПараметрыФормы = Новый Структура("Источник, АдресПользовательскихНастроек, ИзменитьРезультатНа", 
			ЭлементИсточник.Источник,
			ЭлементИсточник.АдресПользовательскихНастроек,
			ЭлементИсточник.ИзменитьРезультатНа);
		
		ДополнительныеПараметры = Новый Структура("ЭлементИсточник", ЭлементИсточник);
		Оповещение = Новый ОписаниеОповещения("ПравилоЗаполненияНастройкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.ИсточникиДанныхПланирования.Форма.ФормаНастройка", 
			ПараметрыФормы, 
			ЭтаФорма,
			УникальныйИдентификатор,
			,
			,
			Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияНастройкаЗавершение(ПараметрыНастройки, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыНастройки <> Неопределено Тогда
		ЭлементИсточник = ДополнительныеПараметры.ЭлементИсточник;
		
		ЭлементИсточник.ИзменитьРезультатНа = ПараметрыНастройки.ИзменитьРезультатНа;
		ЭлементИсточник.ПоляЗаполнения = ПараметрыНастройки.ПоляЗаполнения;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияЦенаНастройка(Команда)
	
	ЭлементИсточник = ПолучитьПервыйЭлементПравилаЗаполнения(Истина);
	
	Если ЗначениеЗаполнено(ЭлементИсточник.Источник) Тогда
		
		ПараметрыФормы = Новый Структура("Источник, АдресПользовательскихНастроек, ИзменитьРезультатНа", 
			ЭлементИсточник.Источник,
			ЭлементИсточник.АдресПользовательскихНастроек,
			ЭлементИсточник.ИзменитьРезультатНа);
		
		ДополнительныеПараметры = Новый Структура("ЭлементИсточник", ЭлементИсточник);
		Оповещение = Новый ОписаниеОповещения("ПравилоЗаполненияНастройкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.ИсточникиДанныхПланирования.Форма.ФормаНастройка", 
			ПараметрыФормы, 
			ЭтаФорма,
			УникальныйИдентификатор,
			,
			,
			Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияТипЭлементаВариантПреобразования.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияВариантПреобразования.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияТипЭлементаИсточник.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИсточник.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияНастройки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИзменитьРезультатНа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияПоляЗаполнения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЗаполнения.ТипЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИспользование.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИсключать.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияПрисоединять.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЗаполнения.ТипЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияТипЭлементаИсточник.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИсточник.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИсточники.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияНастройки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИзменитьРезультатНа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияПоляЗаполнения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЗаполнения.ТипЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияТипЭлементаВариантПреобразования.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияВариантПреобразования.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИсточники.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЗаполнения.ТипЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияПериод.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЗаполнения.ВариантПериода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(0);
	СписокЗначений.Добавить(1);
	СписокЗначений.Добавить(3);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияДата.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЗаполнения.ВариантПериода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(0);
	СписокЗначений.Добавить(2);
	СписокЗначений.Добавить(3);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияИсключать.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЗаполнения.Присоединять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоЗаполненияПрисоединять.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЗаполнения.Присоединять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

#Область Прочее

&НаСервере
Процедура НастроитьФорму()
	
	ВариантПериодаИсточникаКоличества = 0;
	ВариантПериодаИсточникаЦены = 0;
	Если НЕ ИспользоватьРасширенныеВозможностиЗаполнения Тогда
		
		КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения);
		ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
		
		Если ЭлементыИсточники.Количество() > 0 Тогда
			
			ЭлементИсточник = ЭлементыИсточники.Получить(0);
			
			ПравилоЗаполненияКоличествоИсточник = ЭлементИсточник.Источник;
			ВариантПериодаИсточникаКоличества   = ЭлементИсточник.ВариантПериода;
			ПравилоЗаполненияКоличествоДата     = ЭлементИсточник.Дата;
			ПравилоЗаполненияКоличествоПериод   = ЭлементИсточник.Период;
			
		КонецЕсли;
		
		Если ПланироватьПоСумме Тогда
			
			КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения, Истина);
			ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
			
			Если ЭлементыИсточники.Количество() > 0 Тогда
				
				ЭлементИсточник = ЭлементыИсточники.Получить(0);
				
				ПравилоЗаполненияЦенаИсточник = ЭлементИсточник.Источник;
				ВариантПериодаИсточникаЦены   = ЭлементИсточник.ВариантПериода;
				ПравилоЗаполненияЦенаДата     = ЭлементИсточник.Дата;
				ПравилоЗаполненияЦенаПериод   = ЭлементИсточник.Период;
				
			КонецЕсли;
		
		КонецЕсли; 
	
	КонецЕсли; 

	Элементы.ВключитьРасширенныйРежим.Видимость = Не ИспользоватьРасширенныеВозможностиЗаполнения;
	Элементы.ВыключитьРасширенныйРежим.Видимость = ИспользоватьРасширенныеВозможностиЗаполнения;
	
	Элементы.ГруппаУпрощеннаяНастройка.Видимость = Не ИспользоватьРасширенныеВозможностиЗаполнения;
	Элементы.ПравилоЗаполнения.Видимость = ИспользоватьРасширенныеВозможностиЗаполнения;
	Элементы.КомпоновщикНастроекПользовательскиеНастройки.Видимость = ИспользоватьРасширенныеВозможностиЗаполнения;
	
	Элементы.ПравилоЗаполненияКоличествоБезПериода.Видимость = ВариантПериодаИсточникаКоличества = 0 ИЛИ ВариантПериодаИсточникаКоличества = 3;
	Элементы.ПравилоЗаполненияКоличествоПериод.Видимость     = ВариантПериодаИсточникаКоличества = 2;
	Элементы.ПравилоЗаполненияКоличествоДата.Видимость       = ВариантПериодаИсточникаКоличества = 1;
	Элементы.ПравилоЗаполненияКоличествоНастройка.Видимость  = ЗначениеЗаполнено(ПравилоЗаполненияКоличествоИсточник);
	Элементы.ПравилоЗаполненияКоличествоНастройкаБезИсточника.Видимость = НЕ ЗначениеЗаполнено(ПравилоЗаполненияКоличествоИсточник);
	
	Элементы.ПравилоЗаполненияЦенаИсточник.Видимость   = ПланироватьПоСумме;
	Элементы.ПравилоЗаполненияЦенаБезПериода.Видимость = ПланироватьПоСумме И (ВариантПериодаИсточникаЦены = 0 ИЛИ ВариантПериодаИсточникаЦены = 3);
	Элементы.ПравилоЗаполненияЦенаПериод.Видимость     = ПланироватьПоСумме И ВариантПериодаИсточникаЦены = 2;
	Элементы.ПравилоЗаполненияЦенаДата.Видимость       = ПланироватьПоСумме И ВариантПериодаИсточникаЦены = 1;
	Элементы.ПравилоЗаполненияЦенаНастройка.Видимость  = ПланироватьПоСумме И ЗначениеЗаполнено(ПравилоЗаполненияЦенаИсточник);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(АдресПользовательскихНастроек, АдресСхемыПреобразованияДанных)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыПреобразованияДанных);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(АдресПользовательскихНастроек);
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументСохранитьСервер(ПропускатьПроверку = Ложь)
	
	ПравилоКорректно = Ложь;
	
	Если НЕ ПропускатьПроверку Тогда
		
		ПравилоКорректно = ПроверитьПравилоЗаполненияСервер(ПравилоЗаполнения, АдресПравилаЗаполнения, АдресСхемыПреобразованияДанных, ВидПлана, ПланироватьПоСумме, Истина);
	
	КонецЕсли; 
	
	Если ПропускатьПроверку ИЛИ ПравилоКорректно Тогда
	
		ПоместитьВоВременноеХранилищеПравилоЗаполнения(ПравилоЗаполнения, АдресПравилаЗаполнения, ПланироватьПоСумме);
		ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПользовательскиеНастройки, АдресПользовательскихНастроек);
		
	Иначе
		
		Возврат ПравилоКорректно;
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура СкопироватьСтрокуСПодчиненными(Дерево, Приемник, Источник, Копирование, СкопированныеСтроки = Неопределено)
	
	// Скопированные строки сохраняются в массив
	Если СкопированныеСтроки = Неопределено Тогда
		
		СкопированныеСтроки = Новый Массив;
		
	КонецЕсли;
	
	// Если строка источник есть в скопированных строках, копирование завершается
	Если СкопированныеСтроки.Найти(Источник.ПолучитьИдентификатор()) <> Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	НоваяСтрока.Присоединять = Приемник.Присоединять;
	
	// Добавленная строка помещается в скопированные строки
	СкопированныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	// Для скопированных источников данных создается новое хранилище настроек
	Если НоваяСтрока.ТипЭлемента = 0 И Копирование Тогда
		
		Если ЭтоАдресВременногоХранилища(НоваяСтрока.АдресПользовательскихНастроек) Тогда
		
			НоваяСтрока.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
				ПолучитьИзВременногоХранилища(НоваяСтрока.АдресПользовательскихНастроек),
				УникальныйИдентификатор);
		
		Иначе
		
			НоваяСтрока.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	// Копируются подчиненные строки
	Для каждого ПодчиненнаяСтрокаИсточника из Источник.ПолучитьЭлементы() Цикл
		
		СкопироватьСтрокуСПодчиненными(Дерево, НоваяСтрока, ПодчиненнаяСтрокаИсточника, Копирование, СкопированныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КорневойЭлемент(Дерево, ЗаполнениеЦен = Ложь)
	
	ДеревоЭлементы = Дерево.ПолучитьЭлементы();
	
	// Корневой элемент уже добавлен
	Если НЕ ЗаполнениеЦен И ДеревоЭлементы.Количество() > 0 Тогда
		
		Возврат ДеревоЭлементы.Получить(0);
		
	ИначеЕсли ЗаполнениеЦен И ДеревоЭлементы.Количество() > 1 Тогда
		
		Возврат ДеревоЭлементы.Получить(1);
		
	КонецЕсли;
	
	// Добавление корневого элемента
	Если ЗаполнениеЦен Тогда
		КорневойЭлемент = ДеревоЭлементы.Добавить();
		
		КорневойЭлемент.Источники = НСтр("ru='Источники заполнения цен';uk='Джерела заповнення цін'");
		КорневойЭлемент.ТипЭлемента = 2; // Корневой элемент
		КорневойЭлемент.Присоединять = Истина;
	Иначе
		КорневойЭлемент = ДеревоЭлементы.Добавить();
		
		КорневойЭлемент.Источники = НСтр("ru='Источники заполнения количества';uk='Джерела заповнення кількості'");
		КорневойЭлемент.ТипЭлемента = 2; // Корневой элемент
		КорневойЭлемент.Присоединять = Ложь;
	КонецЕсли; 
		
	Возврат КорневойЭлемент;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуДереваВТабличнуюЧасть(ТабличнаяЧасть, ДобавляемаяСтрока, Родитель = 0)
	
	ТабличнаяЧастьНоваяСтрока = ТабличнаяЧасть.Добавить();
	
	ТабличнаяЧастьНоваяСтрока.Использование = ДобавляемаяСтрока.Использование;
	ТабличнаяЧастьНоваяСтрока.Исключать = ДобавляемаяСтрока.Исключать;
	ТабличнаяЧастьНоваяСтрока.Присоединять = ДобавляемаяСтрока.Присоединять;
	ТабличнаяЧастьНоваяСтрока.ИзменитьРезультатНа = ДобавляемаяСтрока.ИзменитьРезультатНа;
	ТабличнаяЧастьНоваяСтрока.ВариантПреобразования = ДобавляемаяСтрока.ВариантПреобразования;
	ТабличнаяЧастьНоваяСтрока.Источник = ДобавляемаяСтрока.Источник;
	ТабличнаяЧастьНоваяСтрока.Период = Новый ХранилищеЗначения(ДобавляемаяСтрока.Период);
	ТабличнаяЧастьНоваяСтрока.Дата = Новый ХранилищеЗначения(ДобавляемаяСтрока.Дата);
	ТабличнаяЧастьНоваяСтрока.ТипЭлемента = ДобавляемаяСтрока.ТипЭлемента;
	ТабличнаяЧастьНоваяСтрока.НомерСтроки = ТабличнаяЧасть.Количество();
	ТабличнаяЧастьНоваяСтрока.НомерСтрокиРодитель = Родитель;
	
	Если ДобавляемаяСтрока.ТипЭлемента = 0 Тогда
		Если ЭтоАдресВременногоХранилища(ДобавляемаяСтрока.АдресПользовательскихНастроек) Тогда
			ТабличнаяЧастьНоваяСтрока.ПользовательскиеНастройки = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ДобавляемаяСтрока.АдресПользовательскихНастроек));
		Иначе
			ТабличнаяЧастьНоваяСтрока.ПользовательскиеНастройки = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли; 
	КонецЕсли;
	
	Для каждого СтрокаДерева из ДобавляемаяСтрока.ПолучитьЭлементы() Цикл
		
		СтрокаДерева.Присоединять = ДобавляемаяСтрока.Присоединять;
		ДобавитьСтрокуДереваВТабличнуюЧасть(ТабличнаяЧасть, СтрокаДерева, ТабличнаяЧастьНоваяСтрока.НомерСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьДеревоИзТабличнойЧасти(Дерево, АдресПравилаЗаполнения, ПланироватьПоСумме)
	
	ТабличнаяЧасть = ПолучитьИзВременногоХранилища(АдресПравилаЗаполнения);
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	КорневойЭлементСтрок = КорневойЭлемент(Дерево);
	ДобавленныеСтрокиДерева = Новый Массив;
	ДобавленныеСтрокиДерева.Добавить(КорневойЭлементСтрок);
	
	Если ПланироватьПоСумме Тогда
		КорневойЭлементКолонок = КорневойЭлемент(Дерево, Истина);
		ДобавленныеСтрокиДереваПрисоединения = Новый Массив;
		ДобавленныеСтрокиДереваПрисоединения.Добавить(КорневойЭлементКолонок);
	КонецЕсли; 
	
	СмещениеДереваПрисоединения = 0;
	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
		
		Если СтрокаТабличнойЧасти.Присоединять = Истина Тогда
			Если НЕ ПланироватьПоСумме Тогда
				Продолжить;
			КонецЕсли; 
			Индекс = ?(СтрокаТабличнойЧасти.НомерСтрокиРодитель =0, 0, СтрокаТабличнойЧасти.НомерСтрокиРодитель - СмещениеДереваПрисоединения);
			ДеревоНоваяСтрока = ДобавленныеСтрокиДереваПрисоединения[Индекс].ПолучитьЭлементы().Добавить();
		Иначе
			СмещениеДереваПрисоединения = СмещениеДереваПрисоединения + 1;
			ДеревоНоваяСтрока = ДобавленныеСтрокиДерева[СтрокаТабличнойЧасти.НомерСтрокиРодитель].ПолучитьЭлементы().Добавить();
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ДеревоНоваяСтрока, СтрокаТабличнойЧасти, "Использование, Исключать, Присоединять,
			|ИзменитьРезультатНа, ВариантПреобразования, Источник, ТипЭлемента");
		ДеревоНоваяСтрока.Период = СтрокаТабличнойЧасти.Период.Получить();
		ДеревоНоваяСтрока.Дата = СтрокаТабличнойЧасти.Дата.Получить();
		ДеревоНоваяСтрока.ВариантПериода = СтрокаТабличнойЧасти.Источник.ОграничениеВыборкиПоПериоду;
		
		Если СтрокаТабличнойЧасти.ТипЭлемента = 0 Тогда
			
			ДеревоНоваяСтрока.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(
				СтрокаТабличнойЧасти.ПользовательскиеНастройки.Получить(), 
				Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Присоединять = Истина Тогда
			ДобавленныеСтрокиДереваПрисоединения.Добавить(ДеревоНоваяСтрока);
		Иначе
			ДобавленныеСтрокиДерева.Добавить(ДеревоНоваяСтрока);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.ТипЭлемента = 0 Тогда
			ДеревоНоваяСтрока.ПоляЗаполнения = ПолучитьПоляЗаполнения(СтрокаТабличнойЧасти.Источник, ДеревоНоваяСтрока.ВариантПериода, 
				Неопределено, Неопределено, СтрокаТабличнойЧасти.ПользовательскиеНастройки.Получить());
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПервыйЭлементПравилаЗаполнения(ЗаполнениеЦен = Ложь)

	КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения, ЗаполнениеЦен);
	ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
	
	Если ЭлементыИсточники.Количество() > 0 Тогда
		
		ЭлементИсточник = ЭлементыИсточники.Получить(0);
		
	Иначе
		
		ЭлементИсточник = ЭлементыИсточники.Добавить();
		
	КонецЕсли;
	
	Возврат ЭлементИсточник;

КонецФункции 
 
&НаСервереБезКонтекста
Функция ПолучитьПоляЗаполнения(Знач Источник,
	Знач ВариантПериода,
	Знач АдресСхемыПреобразованияДанных, 
	Знач ВидПлана, 
	АдресПользовательскиеНастройки = Неопределено, 
	УдалятьНеиспользуемыеПоля = Ложь,
	КоличествоПериодов = 0)

	ПоляЗаполнения = "";
	
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		
		Возврат ПоляЗаполнения;
	
	КонецЕсли; 
	
	Если УдалятьНеиспользуемыеПоля Тогда
		ПоляСхемы = Планирование.ПолучитьПоляСхемыПреобразованияДанных(АдресСхемыПреобразованияДанных, ВидПлана); 
	КонецЕсли;
	
	// Если в документе один период значит все данные из источника помещаем в него
	Если УдалятьНеиспользуемыеПоля И ВариантПериода <> 3 И КоличествоПериодов = 1 Тогда
		
		Индекс = ПоляСхемы.Найти("Период");
		Если Индекс <> Неопределено Тогда
			ПоляСхемы.Удалить(Индекс);
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если ЭтоАдресВременногоХранилища(АдресПользовательскиеНастройки) Тогда
	
		ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(АдресПользовательскиеНастройки);
	
	Иначе
		
		ПользовательскиеНастройки = АдресПользовательскиеНастройки;
	
	КонецЕсли; 
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
		"ИмяШаблонаСКД, СхемаКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных");
	Если ЗначениеЗаполнено(Реквизиты.ИмяШаблонаСКД) Тогда
		СхемаКомпоновкиДанных = Справочники.ИсточникиДанныхПланирования.СхемаКомпоновкиПоИмениШаблона(Реквизиты.ИмяШаблонаСКД);
		Если СхемаКомпоновкиДанных = Неопределено Тогда
			СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
		КонецЕсли; 
	Иначе
		СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
	КонецЕсли;
	
	// Загрузка настроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	НастройкиКомпоновкиДанных = Реквизиты.ХранилищеНастроекКомпоновкиДанных.Получить();
	Если НастройкиКомпоновкиДанных <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	КомпоновщикНастроек.Восстановить();
	
	Если ПользовательскиеНастройки <> Неопределено И НЕ ПустаяСтрока(ПользовательскиеНастройки) Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	ПоляЗаполнения = ПланированиеКлиентСервер.ПолучитьТекстВыбираемыхПолейКомпоновки(
		КомпоновщикНастроек,
		УдалятьНеиспользуемыеПоля,
		ПоляСхемы);
	
	Если УдалятьНеиспользуемыеПоля И ЭтоАдресВременногоХранилища(АдресПользовательскиеНастройки) Тогда
		ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПользовательскиеНастройки, АдресПользовательскиеНастройки);
	КонецЕсли;
	
	Возврат ПоляЗаполнения;

КонецФункции 
 
&НаКлиенте
Процедура УстановитьПометкиСПодчиненными(Дерево, Значение)
	
	ДеревоЭлементы = Дерево.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева из ДеревоЭлементы Цикл
		
		ЭлементДерева.Использование = Значение;
		УстановитьПометкиСПодчиненными(ЭлементДерева, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВоВременноеХранилищеПравилоЗаполнения(Знач Данные, Адрес, ПланироватьПоСумме)
	
	ПравилоЗаполненияТаблица = ПолучитьИзВременногоХранилища(Адрес);
	
	ПравилоЗаполненияТаблица.Очистить();
	
	Для каждого СтрокаДанные из Данные.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы() Цикл
		
		СтрокаДанные.Присоединять = Ложь;
		ДобавитьСтрокуДереваВТабличнуюЧасть(ПравилоЗаполненияТаблица, СтрокаДанные);
		
	КонецЦикла;
	
	Если ПланироватьПоСумме Тогда
		Для каждого СтрокаДанные из Данные.ПолучитьЭлементы().Получить(1).ПолучитьЭлементы() Цикл
			
			СтрокаДанные.Присоединять = Истина;
			ДобавитьСтрокуДереваВТабличнуюЧасть(ПравилоЗаполненияТаблица, СтрокаДанные);
			
		КонецЦикла;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ПравилоЗаполненияТаблица, Адрес);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПравилоЗаполненияСервер(Знач Данные, АдресПравилаЗаполнения, АдресСхемыПреобразованияДанных, ВидПлана, ПланироватьПоСумме, СообщатьОбОшибках = Ложь)

	ПравилоЗаполненияТаблица = ПолучитьИзВременногоХранилища(АдресПравилаЗаполнения);
	
	ПравилоЗаполненияТаблица.Очистить();
	
	Для каждого СтрокаДанные из Данные.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы() Цикл
		
		СтрокаДанные.Присоединять = Ложь;
		ДобавитьСтрокуДереваВТабличнуюЧасть(ПравилоЗаполненияТаблица, СтрокаДанные);
		
	КонецЦикла;
	
	Если ПланироватьПоСумме Тогда
		Для каждого СтрокаДанные из Данные.ПолучитьЭлементы().Получить(1).ПолучитьЭлементы() Цикл
			
			СтрокаДанные.Присоединять = Истина;
			ДобавитьСтрокуДереваВТабличнуюЧасть(ПравилоЗаполненияТаблица, СтрокаДанные);
			
		КонецЦикла;
	КонецЕсли; 
	
	Возврат Планирование.ПроверитьПравилоЗаполнения(ПравилоЗаполненияТаблица, АдресСхемыПреобразованияДанных, ВидПлана,  "ПравилоЗаполнения", СообщатьОбОшибках);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуютсяРасширенныеВозможности(Форма)
	
	ИспользоватьРасширенныеВозможности = Ложь;
	
	Для каждого Настройка Из Форма.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
	
		Если ТипЗнч(Настройка) = Тип("ЭлементОтбораКомпоновкиДанных") И Настройка.Использование Тогда
			ИспользоватьРасширенныеВозможности = Истина;
			Прервать;
		КонецЕсли; 
		
		Если ТипЗнч(Настройка) = Тип("ОтборКомпоновкиДанных") Тогда
			Для каждого ЭлементОтбора Из Настройка.Элементы Цикл
				Если ЭлементОтбора.Использование Тогда
					ИспользоватьРасширенныеВозможности = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		Если ТипЗнч(Настройка) = Тип("ПорядокКомпоновкиДанных") Тогда
			Для каждого ЭлементПорядка Из Настройка.Элементы Цикл
				Если ЭлементПорядка.Использование Тогда
					ИспользоватьРасширенныеВозможности = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
	
	КонецЦикла;
	
	КорневойЭлементСтрок = КорневойЭлемент(Форма.ПравилоЗаполнения);
	ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
	
	Если ЭлементыИсточники.Количество() > 1 ИЛИ ЭлементыИсточники.Количество() = 1 И ЭлементыИсточники.Получить(0).ТипЭлемента <> 0 Тогда
		
		ИспользоватьРасширенныеВозможности = Истина;
		
	КонецЕсли; 
	
	Если Форма.ПланироватьПоСумме Тогда
		
		КорневойЭлементСтрок = КорневойЭлемент(Форма.ПравилоЗаполнения, Истина);
		ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
		
		Если ЭлементыИсточники.Количество() > 1 ИЛИ ЭлементыИсточники.Количество() = 1 И ЭлементыИсточники.Получить(0).ТипЭлемента <> 0 Тогда
			
			ИспользоватьРасширенныеВозможности = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИспользоватьРасширенныеВозможности;
	
КонецФункции

&НаКлиенте
Процедура ВыключитьРасширенныйРежимЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения);
	ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
	
	Если ЭлементыИсточники.Количество() > 1 ИЛИ ЭлементыИсточники.Количество() = 1 И ЭлементыИсточники.Получить(0).ТипЭлемента <> 0 Тогда
		
		ЭлементыИсточники.Очистить();
		
	КонецЕсли; 
	
	Если ЭлементыИсточники.Количество() = 0 Тогда
		ПравилоЗаполненияКоличествоИсточник = Неопределено;
	КонецЕсли;
	
	Если ПланироватьПоСумме Тогда
		
		КорневойЭлементСтрок = КорневойЭлемент(ПравилоЗаполнения, Истина);
		ЭлементыИсточники = КорневойЭлементСтрок.ПолучитьЭлементы();
		
		Если ЭлементыИсточники.Количество() > 1 ИЛИ ЭлементыИсточники.Количество() = 1 И ЭлементыИсточники.Получить(0).ТипЭлемента <> 0 Тогда
			
			ЭлементыИсточники.Очистить();
			
		КонецЕсли;
		
		Если ЭлементыИсточники.Количество() = 0 Тогда
			ПравилоЗаполненияЦенаИсточник = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Настройка Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
	
		Если ТипЗнч(Настройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Настройка.Использование = Ложь;
		КонецЕсли; 
		
		Если ТипЗнч(Настройка) = Тип("ОтборКомпоновкиДанных") Тогда
			Для каждого ЭлементОтбора Из Настройка.Элементы Цикл
				ЭлементОтбора.Использование = Ложь;
			КонецЦикла; 
		КонецЕсли; 
		
		Если ТипЗнч(Настройка) = Тип("ПорядокКомпоновкиДанных") Тогда
			Для каждого ЭлементПорядка Из Настройка.Элементы Цикл
				ЭлементПорядка.Использование = Ложь;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
	ИспользоватьРасширенныеВозможностиЗаполнения = Ложь;
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры работы с номенклатурой и связанными справочниками
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует наименование элемента справочника по заданному для вида номенклатуры шаблону.
//
//Параметры:
//		ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры
//		ОбъектСправочник - СправочникОбъект.Номенклатура, СправочникОбъект.ХарактеристикиНоменклатуры,
//							СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры
// Возвращаемое значение:
// Строка - Наименование полученное по алгоритму расчета
// Пустая строка - если не удалось сформировать наименование или не заполнены операнды алгоритма
//
Функция НаименованиеПоШаблону (Знач ШаблонНаименования, ОбъектСправочник) Экспорт
	
	ФормулаНаименованияСтруктура = ФормулаНаименования(ШаблонНаименования, ОбъектСправочник);
	ФормулаНаименования = """"" + " + СтрЗаменить(ФормулаНаименованияСтруктура.ФормулаНаименования,
		"МассивЗначенийРеквизитов[",
		"Параметры[");
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(ФормулаНаименования) Тогда
		
		Попытка
			
			Наименование = РаботаВБезопасномРежиме.ВычислитьВБезопасномРежиме(
				ФормулаНаименования,
				ФормулаНаименованияСтруктура.МассивЗначенийРеквизитов);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru='Невозможно сформировать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.';uk='Неможливо сформувати найменування за заданим для виду номенклатури ""%ВидНоменклатуры%"" шаблоном. Перевірте правильність шаблону.'");
			
			Если ТипЗнч(ОбъектСправочник) = Тип("СправочникОбъект.Номенклатура")
			 ИЛИ ТипЗнч(ОбъектСправочник) = Тип("СправочникОбъект.СерииНоменклатуры") Тогда
				
				ВидНоменклатуры = ОбъектСправочник.ВидНоменклатуры;
				
			Иначе
				
				Если ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСправочник.Владелец, "ВидНоменклатуры");
					
				ИначеЕсли ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
					
					ВидНоменклатуры = ОбъектСправочник.Владелец;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

//Подставляет в шаблон наименования значения реквизитов.
//
//Параметры:
//	ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры
//	ОбъектСправочник - СправочникОбъект, СправочникСсылка - объект, для которого нужно расчитать наименование
//
//Возвращаемое значение:
//		Структура с ключами
//			ФормулаНаименования - Строка - программный код, который нужно выполнить с помощью фукнции Выполнить для расчета наименования
//			МассивЗначенийРеквизитов - Массив - значения реквизитов, используемых в формуле наименования
//			ИндексыНаименованияВМассивеЗначенийРеквизитов - Массив - массив индексов элементов МассивЗначенийРеквизитов,
//																	которые хранят значение реквизита "Наименование" 
//
Функция ФормулаНаименования(Знач ШаблонНаименования, Знач ОбъектСправочник) Экспорт
	
	Результат = Новый Структура(
		"ФормулаНаименования, МассивЗначенийРеквизитов, ИндексыНаименованияВМассивеЗначенийРеквизитов",
		"" + ШаблонНаименования, Новый Массив, Новый Массив);
		
	ПримитивныеТипы = Новый ОписаниеТипов("Число,Строка,Дата,Булево,ХранилищеЗначения,УникальныйИдентификатор");
	
	Для СчетчикОперандов = 0 По СтрДлина(ШаблонНаименования) Цикл
		
		// Ищем в формуле очередной операнд вида [...]
		ПервыйСимвол    = СтрНайти(ШаблонНаименования, "[");
		ПоследнийСимвол = СтрНайти(ШаблонНаименования, "]");
		
		Если ПервыйСимвол = 0 Или ПоследнийСимвол = 0 ИЛИ ПервыйСимвол > ПоследнийСимвол Тогда
			Прервать; // больше операндов в формуле нет
		КонецЕсли;
		
		// Свойства текущего операнда
		ИмяОперанда 	 = Сред(ШаблонНаименования, ПервыйСимвол + 1, ПоследнийСимвол - ПервыйСимвол - 1);
		ЗначениеОперанда = ОбъектСправочник;
		
		// Разложим имя операнда на его составляющие (реквизиты и доп. реквизиты), разделенные символом "."
		// Ограничение ни имена доп. реквизитов: нельзя использовать символ ".", иначе будет ошибка расчета значения операнда
		МассивРеквизитовОперанда = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОперанда, ".");
		
		Для СчетчикРеквизитов = 0 По МассивРеквизитовОперанда.Количество()-1 Цикл
			
			ИмяРеквизита = МассивРеквизитовОперанда[СчетчикРеквизитов];
			
			Если СчетчикРеквизитов > 0 И НЕ ЗначениеЗаполнено(ЗначениеОперанда) Тогда
				// Если реквизит предыдущего уровня имеет пустое значение, то дальше нечего вычислять
				Прервать;
			КонецЕсли;
			
			Если НЕ ПримитивныеТипы.СодержитТип(ТипЗнч(ЗначениеОперанда)) Тогда
				ИмяОбъектаМетаданных = ЗначениеОперанда.Метаданные().ПолноеИмя();
			Иначе
				// Ошибка в значении реквизита предыдущего уровня - у него нет метода Метаданные().
				// Например если значение имеет тип Строка, а у него пытаются получить какое-то свойство через "."
				ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда, ИмяРеквизита);
			КонецЕсли;
			
			Если ОбщегоНазначенияУТПовтИсп.ЕстьРеквизитОбъекта(ИмяОбъектаМетаданных, ИмяРеквизита) Тогда
				
				// Это реквизит
				Если СчетчикРеквизитов > 0 ИЛИ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеОперанда)) Тогда
					ЗначениеОперанда = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеОперанда, ИмяРеквизита);
				Иначе
					ЗначениеОперанда = ЗначениеОперанда[ИмяРеквизита];
				КонецЕсли;
				
				Если ИмяРеквизита = "Наименование" И МассивРеквизитовОперанда.Количество() = 1 Тогда
					Результат.ИндексыНаименованияВМассивеЗначенийРеквизитов.Добавить(СчетчикОперандов);
				КонецЕсли;
				
			Иначе
				
				// Это доп. реквизит
				ДопРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяРеквизита, Истина);
				
				Если НЕ ЗначениеЗаполнено(ДопРеквизит) Тогда
					// Ошибка в операнде - текущий реквизит не является не реквизитом предыдущего значения, и его не доп. реквизитом
					ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда, ИмяРеквизита);
				КонецЕсли;
				
				Если СчетчикРеквизитов > 0 ИЛИ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеОперанда)) Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ДополнительныеРеквизиты.Значение КАК Значение
					|ИЗ
					|	" + ИмяОбъектаМетаданных + ".ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
					|ГДЕ
					|	ДополнительныеРеквизиты.Ссылка = &Ссылка
					|	И ДополнительныеРеквизиты.Свойство = &Свойство";
					
					Запрос.УстановитьПараметр("Ссылка",   ЗначениеОперанда);
					Запрос.УстановитьПараметр("Свойство", ДопРеквизит);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЗначениеОперанда = Выборка.Значение;
					Иначе
						ЗначениеОперанда = "";
					КонецЕсли;
					
				Иначе
					
					СтрокаДопРеквизита = ЗначениеОперанда.ДополнительныеРеквизиты.Найти(ДопРеквизит, "Свойство");
					ЗначениеОперанда   = ?(СтрокаДопРеквизита <> Неопределено, СтрокаДопРеквизита.Значение, "");
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.МассивЗначенийРеквизитов.Добавить(
			?(МассивРеквизитовОперанда.Количество() > 0 И ЗначениеЗаполнено(ЗначениеОперанда), ЗначениеОперанда, ""));
		
		Результат.ФормулаНаименования = СтрЗаменить(
			Результат.ФормулаНаименования,
			"[" + ИмяОперанда + "]",
			"МассивЗначенийРеквизитов[" + СчетчикОперандов + "]");
		ШаблонНаименования = СтрЗаменить(
			ШаблонНаименования,
			"[" + ИмяОперанда + "]",
			"");
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает параметры выбора для номенклатуры.
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	ЭлементНоменклатура - ПолеФормы - Поле для ввода номенклатуры.
Процедура УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, ЭлементНоменклатура, ИспользоватьНаборы = Ложь) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	СписокОперацийБезУслуг = СписокХозяйственныхОперацийИсключающихУслуги();
	Если СписокОперацийБезУслуг.НайтиПоЗначению(ХозяйственнаяОперация) = Неопределено Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	КонецЕсли;
	
	Если ИспользоватьНаборы Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	КонецЕсли;
	
	ФиксированныйМассивТиповНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ФиксированныйМассивТиповНоменклатуры));
	
	ЭлементНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораНоменклатуры()

// Функция возвращает список хозяйственных операций в которых не используется номенклатура
// с типом "Услуга" или "Работа"
//
// Возвращаемое значение:
// 		СписокЗначений - список операций
//
Функция СписокХозяйственныхОперацийИсключающихУслуги() Экспорт
	
	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция возвращает параметры проверки заполнения характеристик номенклатуры
//
//	Возвращаемое значение:
//		Структура:
//			*ИмяТЧ - Строка - значение по умолчанию "Товары"
//			*СуффиксДопРеквизита - Строка - значение по умолчанию "" - если в ТЧ два реквизита "Характеристика", то второй назван с суффиком. 
//											если суффикс передан, то проверяются оба реквизита
//          *СписокСтрок - Массив, Неопределенно - значение по умолчанию Неопределенно
//			*ВыводитьНомераСтрок - Булево - значение по умолчанию Истина
//			*ОтборПроверяемыхСтрок - Структура - значение по умолчанию пустая Структура
//
Функция ПараметрыПроверкиЗаполненияХарактеристик() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                 "Товары");	
	ПараметрыПроверки.Вставить("СуффиксДопРеквизита",   "");	
	ПараметрыПроверки.Вставить("СписокСтрок",           Неопределено);
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",   Истина);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок", Новый Структура);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверки заполнения колонок "Характеристика" в объектах
// Параметры:
//	Объект - ДокументОбъект (СправочникОбъект и т.п.)
//  МассивНепроверяемыхРеквизитов - массив реквизитов, которые не нужно проверять платформенной проверкой
//	Отказ - отказ продолжения операции
//	ПараметрыЗаполнения - Структура - см. НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияХарактеристик();
	КонецЕсли;
	
	ИмяТЧ                 = ПараметрыПроверки.ИмяТЧ;
	СуффиксДопРеквизита   = ПараметрыПроверки.СуффиксДопРеквизита;
	СписокСтрок           = ПараметрыПроверки.СписокСтрок;
	ВыводитьНомераСтрок   = ПараметрыПроверки.ВыводитьНомераСтрок;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика");
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика"+СуффиксДопРеквизита);
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура"+СуффиксДопРеквизита+" КАК Номенклатура"+СуффиксДопРеквизита+",
	|	ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" КАК Характеристика"+СуффиксДопРеквизита+",";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаХарактеристика" + СуффиксДопРеквизита +",";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита+",Характеристика"+СуффиксДопРеквизита);
	Запрос.УстановитьПараметр("ТаблицаТоваров",
		Объект[ИмяТЧ].Выгрузить(СписокСтрок,
			"НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".';uk='Не заповнена колонка ""%Характеристика%"" в рядку %НомерСтроки% списку ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в списке ""%ТаблицаТовары%"".';uk='Не заповнена колонка ""%Характеристика%"" в списку ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ТипЗнч(Объект) = Тип("УправляемаяФорма") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ                      = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Характеристика.Синоним;
	ПредставлениеРеквизитаХарактеристикаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты["Характеристика"+СуффиксДопРеквизита].Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуффиксДопРеквизита)
			И Выборка["НеЗаполненаХарактеристика" + СуффиксДопРеквизита] Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристикаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика"+СуффиксДопРеквизита);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура проверки заполнения колонок "Содержание" в формах.
// Параметры:
//	Объект - ДокументОбъект
//	Отказ - отказ продолжения операции
Процедура ПроверитьЗаполнениеСодержания(Объект, Отказ, ИмяТЧ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Содержание = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	СтрокиСОшибками.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
	|";
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧ].Выгрузить(,"НомерСтроки,Номенклатура,Содержание"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();

	ПредставлениеТЧ                 = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;

	ШаблонСообщения = НСтр("ru='Не заполнена колонка """"Содержание"""" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".';uk='Не заповнена колонка """"Зміст"""" в рядку %НомерСтроки% списку ""%ТаблицаТовары%"".'");

	Пока Выборка.Следующий() Цикл
					
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
					
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Содержание");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);

	КонецЦикла;
		
КонецПроцедуры

// Функция определяет наличие в табличной части работ.
// Параметры:
//	ТЧ - ДанныеФормыКоллекция - проверяемая табличная часть
//
Функция ПроверитьНаличиеРабот(ТЧ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ 
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 
	|	ИСТИНА КАК ЕстьРаботы
	|ИЗ 
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ 
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры 
	|	= ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТЧ.Выгрузить(, "Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	ТипыНоменклатуры = Новый Структура("ЕстьРаботы", Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТипыНоменклатуры.ЕстьРаботы = Истина;
		
	КонецЕсли;
	
	Возврат ТипыНоменклатуры;
	
КонецФункции //ПроверитьНаличиеРабот()

// Функция возвращает параметры проверки заполнения упаковок
//
//	Возвращаемое значение:
//		Структура:
//			*ИмяТЧ - Строка - значение по умолчанию "Товары"
//			*ИмяПоляУпаковка - Строка - значение по умолчанию "Упаковка"
//			*ВыводитьНомераСтрок - Булево - значение по умолчанию Истина
//			*ОтборПроверяемыхСтрок - Структура - значение по умолчанию пустая Структура
//
Функция ПараметрыПроверкиЗаполненияУпаковок() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                 "Товары");
	ПараметрыПроверки.Вставить("ИмяПоляУпаковка",       "Упаковка");
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок", Истина);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок", Новый Структура);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверки заполнения колонок "Упаковка" в документах по адресному складу. Указание упаковок обязательно для товаров
// и необязательно для многоборотной тары
// Параметры:
//	Объект - ДокументОбъект (СправочникОбъект и т.п.)
//  МассивНепроверяемыхРеквизитов - массив реквизитов, которые не нужно проверять платформенной проверкой
//	Отказ - отказ продолжения операции
//	ПараметрыЗаполнения - Структура - см. НоменклатураСервер.ПараметрыПроверкиЗаполненияУпаковок
//
Процедура ПроверитьЗаполнениеУпаковок(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияУпаковок();
	КонецЕсли;
	
	ИмяТЧ                 = ПараметрыПроверки.ИмяТЧ;
	ИмяПоляУпаковка       = ПараметрыПроверки.ИмяПоляУпаковка;
	ВыводитьНомераСтрок   = ПараметрыПроверки.ВыводитьНомераСтрок;
	ОтборПроверяемыхСтрок = ПараметрыПроверки.ОтборПроверяемыхСтрок;
	
	Если МассивНепроверяемыхРеквизитов.Найти(ИмяТЧ+"." + ИмяПоляУпаковка) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+"." + ИмяПоляУпаковка);
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	&ИмяПоляУпаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|	И ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В (ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук), ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяПоляУпаковка","ТаблицаТоваров." + ИмяПоляУпаковка);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			Объект[ИмяТЧ].Выгрузить(ОтборПроверяемыхСтрок, "НомерСтроки,Номенклатура,"+ИмяПоляУпаковка));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			Объект[ИмяТЧ].Выгрузить(, "НомерСтроки,Номенклатура,"+ИмяПоляУпаковка));
	КонецЕсли;
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Упаковка%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".';uk='Не заповнена колонка ""%Упаковка%"" в рядку %НомерСтроки% списку ""%ТаблицаТовары%"".'");
	Иначе
		ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Упаковка%"" в списке ""%ТаблицаТовары%"".';uk='Не заповнена колонка ""%Упаковка%"" в списку ""%ТаблицаТовары%"".'");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ТипЗнч(Объект) = Тип("УправляемаяФорма") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	ПредставлениеТЧ                = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаУпаковка = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяПоляУпаковка].Синоним;
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Упаковка%", ПредставлениеРеквизитаУпаковка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИмяПоляУпаковка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверки соответствия вида номенклатуры товаров другого качества виду номенклатуры исходного качества.
// Для номенклатуры, по которой ведется учет серий, товары другого качества должны быть одного вида с исходными.
// Параметры:
//	Объект - ДокументОбъект
//	Отказ - Булево - отказ продолжения операции
//	ИмяТЧДляПроверки - Строка - значение по умолчанию "Товары"
//	ТаблицаДляПроверки - ТаблицаЗначений, Неопределено - если передана таблица значений, то проверяется она, попытка выгрузки из объекта не делается
//  	* НомерСтроки - Число
//		* Номенклатура - СправочникСсылка.Номенклатура
//		* НоменклатураОприходование - СправочникСсылка.Номенклатура
//
Процедура ПроверитьВидНоменклатурыОприходования(Объект, Отказ, ИмяТЧДляПроверки = "Товары", ТаблицаДляПроверки = Неопределено) Экспорт
	
	//Номенклатура с разным качеством должна быть совместимма по настройкам серий:
	// - или у серий должен быть один владелец (тогдан настройки учета совпадают)
	// - или учета серий быть не должно
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.НоменклатураОприходование КАК НоменклатураБрак
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляЗапроса.НомерСтроки,
	|	ТоварыДляЗапроса.Номенклатура,
	|	ТоварыДляЗапроса.НоменклатураБрак,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВладелецСерий = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВладелецСерий
	|	КОНЕЦ КАК ВладелецСерий,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВладелецСерий = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВидНоменклатуры
	|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВладелецСерий
	|	КОНЕЦ КАК ВладелецСерийБрак
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК ТоварыДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляЗапроса.НомерСтроки,
	|	ТоварыДляЗапроса.Номенклатура КАК Номенклатура,
	|	ТоварыДляЗапроса.НоменклатураБрак КАК НоменклатураБрак
	|ИЗ
	|	ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|ГДЕ
	|	ТоварыДляЗапроса.ВладелецСерий <> ТоварыДляЗапроса.ВладелецСерийБрак
	|	И (ТоварыДляЗапроса.ВладелецСерий.ИспользоватьСерии
	|		ИЛИ ТоварыДляЗапроса.ВладелецСерийБрак.ИспользоватьСерии)";
	
	Если ТаблицаДляПроверки <> Неопределено Тогда
		Запрос.УстановитьПараметр("Товары", ТаблицаДляПроверки);
	Иначе
		Запрос.УстановитьПараметр("Товары",
			Объект[ИмяТЧДляПроверки].Выгрузить(,"НомерСтроки,Номенклатура,НоменклатураОприходование"));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = НСтр("ru='По номенклатурам %Номенклатура% и %НоменклатураБрак%(испорченный товар) различаются настройки учета по сериям.';uk='За номенклатурами %Номенклатура% і %НоменклатураБрак%(зіпсований товар) розрізняються настройки обліку за серіями.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НоменклатураБрак%", Выборка.НоменклатураБрак);
		Если ТаблицаДляПроверки = Неопределено Тогда
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧДляПроверки,Выборка.НомерСтроки,"НоменклатураОприходование");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект,Поле,,Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение коэффициента пересчета единицы измерения в метрические тонны.
// Например, для килограмма коэфициент = 0.001.
//
// Параметры:
//	УпаковкаЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка / единица измерения, 
//		для которой осуществляется пересчет.
//
// Возвращаемое значение:
//	Число - коэффициент.
//
Функция КоэффициентПересчетаВТонны(УпаковкаЕдиницаИзмерения) Экспорт
	
	КоэффициентПересчетаВТонны = 0;
	
	Если НЕ ЗначениеЗаполнено(УпаковкаЕдиницаИзмерения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось рассчитать коэффициент пересчета в тонны, т.к. единица измерения веса не заполнена. Обратитесь к администратору.';uk='Не вдалося розрахувати коефіцієнт перерахунку в тонни, тому що одиниця вимірювання ваги не заповнена. Зверніться до адміністратора.'"));
		Возврат КоэффициентПересчетаВТонны;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|				И УпаковкиЕдиницыИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				И УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Вес * УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Числитель / УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ / 1000 КАК КоэффициентПересчетаВТонны
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", УпаковкаЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоэффициентПересчетаВТонны = Выборка.КоэффициентПересчетаВТонны;
	КонецЕсли;
	
	Если КоэффициентПересчетаВТонны = 0 Тогда
		ТекстСообщения = НСтр("ru='Не удалось рассчитать коэффициент пересчета в тонны для единицы ""%1"". Обратитесь к администратору.';uk='Не вдалося розрахувати коефіцієнт перерахунку в тонни для одиниці ""%1"". Зверніться до адміністратора.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(УпаковкаЕдиницаИзмерения));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КоэффициентПересчетаВТонны;
	
КонецФункции

// Возвращает значение коэффициента единицы измерения в кубические метры.
//
// Параметры:
//  УпаковкаЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка / единица измерения,
//  	для которой осуществляется пересчет.
// 
// Возвращаемое значение:
//  Число - коэффициент пересчета.
//
Функция КоэффициентПересчетаВКубическиеМетры(УпаковкаЕдиницаИзмерения) Экспорт
	
	КоэффициентПересчетаВКубическиеМетры = 0;
	
	Если НЕ ЗначениеЗаполнено(УпаковкаЕдиницаИзмерения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось рассчитать коэффициент пересчета в кубические метры, т.к. единица измерения объема не заполнена. Обратитесь к администратору.';uk='Не вдалося розрахувати коефіцієнт перерахунку в кубічні метри, оскільки. одиниця вимірювання об''єму не заповнена. Зверніться до адміністратора.'"));
		Возврат КоэффициентПересчетаВКубическиеМетры;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|				И УпаковкиЕдиницыИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				И УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Объем * УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Числитель / УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентПересчетаВКубическиеМетры
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", УпаковкаЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоэффициентПересчетаВКубическиеМетры = Выборка.КоэффициентПересчетаВКубическиеМетры;
	КонецЕсли;
	
	Если КоэффициентПересчетаВКубическиеМетры = 0 Тогда
		ТекстСообщения = НСтр("ru='Не удалось рассчитать коэффициент пересчета в кубические метры для единицы ""%1"". Обратитесь к администратору.';uk='Не вдалося розрахувати коефіцієнт перерахунку в кубічні метри для одиниці ""%1"". Зверніться до адміністратора.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(УпаковкаЕдиницаИзмерения));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КоэффициентПересчетаВКубическиеМетры;
	
КонецФункции


#Область ПроцедурыРаботыССериями

//Процедура заполняет статусы указания серий в строках ТЧ товары (комментарий содержит описание подсистемы серий)
//
//Возможные статусы указания серий:
//
//  0 - серии указывать не требуется
//  первый указанный статус - количество по сериям не совпадает с количеством товаров
//  второй указанный статус   - количество по сериям совпадает с количеством товаров
//  третий указанный статус   - количество по сериям совпадает с количеством товаров
//		 1,2,21  - серии указываются справочно
//       3,4,23  - по сериям учитываются остатки, серии указываются по факту отбора
//       5,6,25  - по сериям учитываются остатки, серии указываются при планировании отбора,
//					заполняются по FEFO (используются только в документах отгрузки товаров)
//       7,8,27  - по сериям учитываются остатки, серии указываются при планировании отбора
//       9,10,11 - по сериям учитываются остатки, серии указываются при планировании отгрузки,
//				по сериям формируются движения по регистру СвободныеОстатки (как при приходе, так и при расходе)
//		 13,14,15 - по сериям учитывается себестоимость
//
//Параметры процедуры:
//
//		Объект - объект, в котором нужно заполнить статусы. Тип: ДанныеФормыСтруктура или ДокументОбъект
//
//      ПараметрыУказанияСерий - структура, состав полей задается фукнцией ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//											(см. описание полей в комментарии к этой фукнции)
//
//      СтрокиТоваровДляОбработки - массив строк товаров, в которых нужно заполнить статусы указания серий,
//									если передано "Неопределено", то статусы заполняются во всех строках товаров
//      
//		СтрокиСерийДляОбработки - массив строк серий, по данным которых нужно заполнить статусы указания серий,
//									если передано "Неопределено", то учитываются все строки серий
//		
Процедура ЗаполнитьСтатусыУказанияСерий(Объект,
											ПараметрыУказанияСерий,
											СтрокиТоваровДляОбработки = Неопределено,
											СтрокиСерийДляОбработки = Неопределено) Экспорт
	
	Если Не (ПараметрыУказанияСерий.ТоварВШапке
		Или Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Количество() <> 0 ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Если ПараметрыУказанияСерий.ТоварВШапке Тогда
				Объект.СтатусУказанияСерий = 0;	
			Иначе
				Для Каждого СтрТабл из Объект[ПараметрыУказанияСерий.ИмяТЧТовары] Цикл
					Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
						СтрТабл.СтатусУказанияСерий = 0;
					Иначе
						Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
							СтрТабл[ИмяПоляСтатус] = 0;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено
		Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено;
	
	Если Не СкладыВТЧ
		И ПараметрыУказанияСерий.ИмяПоляСклад <> Неопределено Тогда
		
		Если ПараметрыУказанияСерий.ИмяПоляСкладОтправитель <> Неопределено
			И ПараметрыУказанияСерий.ИмяПоляСкладПолучатель <> Неопределено Тогда
			Склад = Новый Структура("Отправитель,Получатель");
			Склад.Отправитель = Объект[ПараметрыУказанияСерий.ИмяПоляСкладОтправитель];
			Склад.Получатель  = Объект[ПараметрыУказанияСерий.ИмяПоляСкладПолучатель];
		Иначе
			Склад = Объект[ПараметрыУказанияСерий.ИмяПоляСклад];
		КонецЕсли;
		
	Иначе
		Склад = Неопределено;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		
		ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров);
		
		СтрокаТовара = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
		Если ПараметрыУказанияСерий.ЭтоЗаказ
			И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено
			И Объект.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			// В шапке заказов при смене варианта обеспечения не очищается назначение,
			//	поэтому для необособленной отгрузки очистим назначение здесь
			СтрокаТовара.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
		СтрокаТовара.НомерСтроки = 1;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Назначение");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаТовара);
		НайденныеСтрокиСерий =  Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Выборка = ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий,
																ТаблицаТоваров,
																Объект[ПараметрыУказанияСерий.ИмяТЧСерии],
																Склад,
																,
																НайденныеСтрокиСерий);
		
		Если Выборка.Следующий() Тогда
			
			Объект.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			
			Если Выборка.СтатусУказанияСерий <> 14 Тогда
				Объект.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Выборка = ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий,
																Объект[ПараметрыУказанияСерий.ИмяТЧТовары],
																Объект[ПараметрыУказанияСерий.ИмяТЧСерии],
																Склад,
																СтрокиТоваровДляОбработки,
																СтрокиСерийДляОбработки);
		
		Пока Выборка.Следующий() Цикл
			СтрТабл = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][Выборка.НомерСтроки - 1];
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтрТабл.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			Иначе
				Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтрТабл[ИмяПоляСтатус] = Выборка[ИмяПоляСтатус];
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо,
// переподчиняет строки серий другим строкам ТЧ "Товары"
// Параметры
//      Объект - ДанныеФормыСтуктура - основной реквизит формы документа
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//      ТекущиеДанныеИдентификатор - идентификатор текущей строки товаров в форме документа
//      КэшированныеЗначения - структура кеша реквизитов текущей строки товаров
//      
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																			ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		Возврат; // Если ТЧ Серии нет, тогда все статусы пересчитываются при изменении реквизитов ТЧ, а не при окончании редактирования
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		ТекущаяСтрока = Неопределено //значит строку удалили;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	//Если строка новая (в т.ч. скопированная) или используется разделение по вариантам продажи - будет закешированно Неопределено
	//Тогда не нужно искать строки со старыми значениями
	Если КэшированныеЗначения.Номенклатура <> Неопределено Тогда
		
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения,КэшированныеЗначения);
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиСерий   = Новый Массив;
	КонецЕсли;
	
	//Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитвать в строках по новым ключевым полям и по старым
	Если ТекущаяСтрока <> Неопределено 
		И Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		//Определелим, нужно ли переподчинять серии. Это нужно если:
		//- серии относились только к одной строке
		//- новые и старые ключевые поля поддерживают одну политику учета
		//Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество
		Если КэшированныеЗначения.Номенклатура <> Неопределено 
			И НайденныеСтрокиТоваров.Количество() = 0 Тогда//т.к. строк с такими ключевыми полями не осталось, значит такая строка была одна
			
			Если КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
				ПереподчинитьСерии = Истина;
			Иначе //будем переподчинять, если не поменялся вид номенклатуры
				ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//Если строка удалена, то в качестве текущих значений будет передано Неопределено
		//Тогда не нужно искать строки с новыми значениями
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения,ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);    
		
		//Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий 
		
		//При объединении массивов будем обходить меньший массив
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрМас из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрМас);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрМас из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрМас);
			КонецЦикла;
		КонецЕсли;
		
		//Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда		
			//Сначала переподчиним серии
			
			Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрМас,ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрМас,СтруктураДействий,КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			//Если серии переподчинены, то достаточно произвести поиск по новым полям поиска
			НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
		Иначе	
			НайденныеСтрокиСерийНовые = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			//Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям
			
			//При объединении массивов будем обходить меньший массив
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрМас);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрМас из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрМас);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтрокиТоваров.Количество() > 0 Тогда 
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров,НайденныеСтрокиСерий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусм указания серий для товара в шапке документа, если это необходимо, переподчиняет строки серий
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы документа
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		КэшированныеЗначения - структура кеша реквизитов текущей строки товаров
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, Знач ПараметрыУказанияСерий, КэшированныеЗначения) Экспорт
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	//Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитвать в строках по новым ключевым полям и по старым
	
	ИзменилисьКлючевыеПоля = Ложь;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или  КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика
		Или  КэшированныеЗначения.НазначениеШапка <> Объект.Назначение Тогда
		ИзменилисьКлючевыеПоля = Истина;
	Иначе	
		Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если КэшированныеЗначения[СтрМас+"Шапка"] <> Объект[СтрМас] Тогда
				ИзменилисьКлючевыеПоля = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПересчитатьСтатус = Ложь;

	Если ИзменилисьКлючевыеПоля Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		//Определелим, нужно ли переподчинять серии. Это нужно если:
		//- серии относились только к одной строке
		//- новые и старые ключевые поля поддерживают одну политику учета
		//Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество
		
		Если КэшированныеЗначения.НоменклатураШапка = Объект.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
			ПереподчинитьСерии = Истина;
		Иначе //будем переподчинять, если не поменялся вид номенклатуры
			ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.НоменклатураШапка,"ВидНоменклатуры");
			ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Номенклатура, "ВидНоменклатуры");
			
			ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			ПересчитатьСтатус  = Не (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
		КонецЕсли;
		
		Если ПереподчинитьСерии
			И ЕстьУпаковки
			И КэшированныеЗначения.УпаковкаШапка <> Объект.Упаковка Тогда
			
			ПересчитатьКоличество = Истина;
			
		КонецЕсли;
			
		Если ПереподчинитьСерии Тогда		
			СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			Для Каждого КлючИЗначение из СтруктураПоискаСтарыеЗначения Цикл
				СтруктураПоискаСтарыеЗначения[КлючИЗначение.Ключ] = КэшированныеЗначения[КлючИЗначение.Ключ+"Шапка"]	
			КонецЦикла;
			
			НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
			
			Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрМас,Объект, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(
						СтрМас,
						Новый Структура("ПересчитатьКоличествоУпаковок"),
						КэшированныеЗначения);
				КонецЕсли;	
				
			КонецЦикла;
		Иначе
			Объект.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьУпаковки Тогда
		Если КэшированныеЗначения.КоличествоУпаковокШапка <> Объект.КоличествоУпаковок Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	Иначе
		Если КэшированныеЗначения.КоличествоШапка <> Объект.Количество Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПересчитатьСтатус Тогда 
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,Неопределено,Неопределено);
	КонецЕсли;
	
КонецПроцедуры

//Процедура удаляет строки ТЧ "Серии", которым по полям связи нет соотвествующих строк в ТЧ "Товары"
//или в этих строках статус указания серий равен 0 (не указывать)
//Параметры
//		ДокументОбъект - ДокументОбъект, в котором нужно удалить неиспользуемые строки серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
Процедура ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий, НоменклатураШапки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ТоварВШапке = ПараметрыУказанияСерий.ТоварВШапке;
	
	Если ТоварВШапке Тогда
		ТЧ = Новый Массив;
		ТЧ.Добавить(ДокументОбъект);
	Иначе
		ТЧ = ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары];
	КонецЕсли;
	
	ЕстьСерииВТЧТовары = ТЧ.Количество() > 0
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТЧ[0], "Серия");
	
	Если ЕстьСерииВТЧТовары Тогда
		
		Для Каждого СтрТабл из ТЧ Цикл
			
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				Если Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрТабл.СтатусУказанияСерий, ПараметрыУказанияСерий)
					Или НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтрТабл.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
					
					СтрТабл.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
					
				КонецЕсли;
			Иначе
				Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
					
					Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрТабл, "Серия" + Суффикс)
						И (НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтрТабл[ИмяПоляСтатус], ПараметрыУказанияСерий)
						Или Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(СтрТабл.СтатусУказанияСерий, ПараметрыУказанияСерий)) Тогда
						
						СтрТабл["Серия" + Суффикс] = Справочники.СерииНоменклатуры.ПустаяСсылка();
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли; 
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии
		Или ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПоляСвязиТовары = "";
	ТекстПоляСвязиСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязиТовары = ТекстПоляСвязиТовары + "
		|	ТаблицаТоваров." + СтрМас + ",";
		ТекстПоляСвязиСерии = ТекстПоляСвязиСерии + "
		|	ТаблицаСерий." + СтрМас + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
		|			И ТаблицаТоваров."+СтрМас+" = ТаблицаСерий."+СтрМас;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	&ТекстПоляСвязиТовары,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПоляСвязиСерии,
	|	ТаблицаСерий.НомерСтроки,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|
	|ГДЕ &УсловиеПоНоменклатуреШапки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО ТаблицаСерий.Номенклатура = ТаблицаТоваров.Номенклатура
	|			И ТаблицаСерий.Характеристика = ТаблицаТоваров.Характеристика
	|			И &ТекстПоляСвязиСоединениеТоварыСерии
	|ГДЕ
	|	НЕ ЕСТЬNULL(ТаблицаТоваров.СтатусУказанияСерий, 0) В (&СтатусыСерийУказываемыхВТЧСерии)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	Запрос = Новый Запрос;
	
	СтатусыСерийУказываемыхВТЧСерии = Новый Массив;
	СтатусыСерийУказываемыхВТЧСерии.Добавить(1);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(2);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(3);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(4);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(5);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(6);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(7);
	СтатусыСерийУказываемыхВТЧСерии.Добавить(8);
	Если НЕ НоменклатураКлиентСервер.СерииПриПланированииОтгрузкиУказываютсяВТЧТовары(ПараметрыУказанияСерий) Тогда
		СтатусыСерийУказываемыхВТЧСерии.Добавить(9);
		СтатусыСерийУказываемыхВТЧСерии.Добавить(10);
	КонецЕсли;
	Если Не ЕстьСерииВТЧТовары Тогда
		СтатусыСерийУказываемыхВТЧСерии.Добавить(13);
		СтатусыСерийУказываемыхВТЧСерии.Добавить(14);
	КонецЕсли;
	
	Если ТоварВШапке Тогда
		
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТовары);
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДокументОбъект);
		Если ПараметрыУказанияСерий.ЭтоЗаказ
			И СкладыКлиентСервер.ЕстьОтгрузка(ПараметрыУказанияСерий.СкладскиеОперации)
			И ДокументОбъект.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			
			НоваяСтрока.Назначение = Справочники.Назначения.ПустаяСсылка();
			
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоНоменклатуреШапки", "ТаблицаСерий.Номенклатура = &НоменклатураШапки");
	Иначе
		ТаблицаТовары = ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоНоменклатуреШапки", "ТаблицаСерий.Номенклатура <> &НоменклатураШапки");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить());
	Запрос.УстановитьПараметр("СтатусыСерийУказываемыхВТЧСерии", СтатусыСерийУказываемыхВТЧСерии);
	Запрос.УстановитьПараметр("НоменклатураШапки",НоменклатураШапки);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСвязиТовары,", ТекстПоляСвязиТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляСвязиСерии,", ТекстПоляСвязиСерии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстПоляСвязиСоединениеТоварыСерии", ТекстПоляСвязиСоединениеТоварыСерии);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии][Выборка.НомерСтроки-1]);
		
	КонецЦикла;
	
КонецПроцедуры

//Если по сериям для переданных Номенклатуры/Склада учитывается себестоимость, то рассчитывает статус указания серий.
//Проверяет принадлежность уже указанной серии переданной номенклатуре.
//
// Параметры:
//		ТекущаяСтрока - Структура - для которой расчитавается статус указания серий
//		Склад - СправочникСсылка.Склады
//		ПараметрыУказанияСерий - Структура - структура, описанная в фукнции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
// Возвращаемое значение:
//		Структура:
//			Серия - СправочникСсылка.СерииНоменклатуры - если серия указана и она может использоваться с новым значением номенклатуры,
//				на указанном складе, то возвращается переданное значение, если нет - пустая ссылка
//			СтатусУказанияСерий - Число - если серии указываются в ТЧ "Товары", то возвращается рассчитанный статус,
//										  если для переданной номенклатуры/склада серии не используется - возвращается 0
//										  иначе возвращается переданный статус
//
Функция ПроверитьСериюРассчитатьСтатусПриИзмененииРеквизитаВТЧ(ТекущаяСтрока, Склад, ПараметрыУказанияСерий) Экспорт
	МетаданныеОбъекта = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	Суффиксы = Новый Массив;
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		Суффиксы.Добавить("");
	Иначе
		Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
			
			Если МетаданныеОбъекта.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты.Найти("Серия" + Суффикс) <> Неопределено Тогда
				Суффиксы.Добавить(Суффикс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Серия");
	СтруктураВозврата.Вставить("УказыватьСерии");
	
	СтруктураВозврата.Серия = ТекущаяСтрока.Серия;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК РазличаютсяВладельцыСерииИНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура,
	|	Справочник.СерииНоменклатуры КАК Серии
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Серии.Ссылка = &Серия
	|	И НЕ(Серии.ВидНоменклатуры.ВладелецСерий = Номенклатура.ВидНоменклатуры.ВладелецСерий
	|					И Серии.ВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|					И Номенклатура.ВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				ИЛИ Номенклатура.ВладелецСерий = Серии.ВидНоменклатуры
	|				ИЛИ Номенклатура.ВидНоменклатуры = Серии.ВидНоменклатуры)";
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Серия", ТекущаяСтрока.Серия);
	Если Не Запрос.Выполнить().Пустой() Тогда
		СтруктураВозврата.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		СтруктураВозврата.Вставить("СтатусУказанияСерий");
	Иначе
		Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			СтруктураВозврата.Вставить(ИмяПоляСтатус);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		СтруктураВозврата.Серия               = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураВозврата.СтатусУказанияСерий = 0;
		Иначе
			Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				СтруктураВозврата[ИмяПоляСтатус] = 0;
			КонецЦикла;
		КонецЕсли;
		СтруктураВозврата.УказыватьСерии      = Ложь;
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	Для Каждого Суффикс из Суффиксы Цикл
		ТаблицаТоваров.Колонки.Добавить("Номенклатура"+Суффикс,Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика"+Суффикс,Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Серия"+Суффикс,Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляКоличество,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
	
	ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, МетаданныеОбъекта);
	
	ТаблицаСерий = Новый ТаблицаЗначений;
	ТаблицаСерий.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСерий.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаСерий.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляКоличество,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаСерий, МетаданныеОбъекта, Истина);
	
	СтрокаТовара = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТовара,ТекущаяСтрока);
	СтрокаТовара.НомерСтроки = 1;
	СтрокаТовара.Серия = СтруктураВозврата.Серия;
	
	Выборка = ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, ТаблицаСерий, Склад);
	
	Если Выборка.Следующий() Тогда
		
		//Если серии указываются в отдельной ТЧ, то при изменении реквизитов
		//будут пересчитаты только статусы, связанные с сериями, указываемыми
		//в ТЧ "Товары" (т.е. по которым ведется учет себестоимости)
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(Выборка.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтруктураВозврата.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			Иначе
				Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтруктураВозврата[ИмяПоляСтатус] = Выборка[ИмяПоляСтатус];
				КонецЦикла;
			КонецЕсли;
						
		Иначе
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтруктураВозврата.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерий;
			Иначе
				Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтруктураВозврата[ИмяПоляСтатус] = ТекущаяСтрока[ИмяПоляСтатус];
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтруктураВозврата.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			СтруктураВозврата.УказыватьСерии = Ложь;
			СтруктураВозврата.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураВозврата.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерий;
		Иначе
			Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				СтруктураВозврата[ИмяПоляСтатус] = ТекущаяСтрока[ИмяПоляСтатус];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

//Процедура подбирает серии по FEFO и заполняет подобранными значениями ТЧ "Серии"
//Учитываются движения документа, заполненные серии перезаполняются
////Параметры
//		Объект - объект, в котором нужно заполнить статусы. Тип: ДанныеФормыКоллекция или ДокументОбъект
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		СтатусыУказанияСерийЗаполнены - если статусы указания серий в ТЧ Товары заполнены
//
Процедура ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий, СтатусыУказанияСерийЗаполнены = Истина) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Не СтатусыУказанияСерийЗаполнены Тогда
        НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
    КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда 
		Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.МаршрутныйЛистПроизводства" Тогда
			// У маршрутного листа особая логика заполнения серий
		Иначе
			ЗаполнитьСерииПоFEFOВТЧТовары(Объект, ПараметрыУказанияСерий);
		КонецЕсли;
	Иначе
		ЗаполнитьСерииПоFEFOВТЧСерии(Объект, ПараметрыУказанияСерий);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьСерииПоFEFOВТЧСерии(Объект, ПараметрыУказанияСерий)
	
	Если ПараметрыУказанияСерий.ИмяПоляПомещение <> Неопределено Тогда
		//Если серии по FEFO заполняется в ТЧ "Серии", то помещения в документе не может быть
		ТекстИсключения = НСтр("ru='Ошибка заполнения серий по FEFO. Есть складское помещение.';uk='Помилка заповнення серій по FEFO. Є складське приміщення.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
    
    СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено
		Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено;
    
	ТекстЗапроса = ТекстЗапросаДляЗаполненияСерийПОFEFO(ПараметрыУказанияСерий);
	
	КлючевыеПоля = "Номенклатура,Характеристика";
    ПоляСвязиВТекстЗапроса = "";
    Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
        КлючевыеПоля = КлючевыеПоля + "," + ПолеСвязи;
        ПоляСвязиВТекстЗапроса = ПоляСвязиВТекстЗапроса + "
        |ДанныеДокумента." + ПолеСвязи + ",";
    КонецЦикла;
    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.ПоляСвязи,", ПоляСвязиВТекстЗапроса);
    
	Если ПараметрыУказанияСерий.ЭтоНакладная
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению) <> Неопределено Тогда
		ИмяПоляСклад = "СкладОтправитель";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Назначение КАК Назначение", "ДанныеДокумента.НазначениеОтправителя КАК Назначение");
    Иначе
        ИмяПоляСклад = ПараметрыУказанияСерий.ИмяПоляСклад;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
   	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    
    Если Не СкладыВТЧ Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.Склад", "&Склад");
        Запрос.УстановитьПараметр("Склад",Объект[ИмяПоляСклад]);
    КонецЕсли;
    
    Запрос.Текст = ТекстЗапроса;
    
    Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
    Запрос.УстановитьПараметр("ТаблицаСерий", Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить());
    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    
    РезультатЗапроса = Запрос.ВыполнитьПакет();
    
    Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Загрузить(РезультатЗапроса[5].Выгрузить()); //Серии, которые не надо менять
    
    Выборка = РезультатЗапроса[4].Выбрать();
    СтруктураКоличества = Новый Структура("Количество,КоличествоУпаковок");
	ОстаткиПоСтрокамТоваров = Новый Соответствие;
	
	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Склад") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("Серия") Цикл
				ОстатокПоСерии = Выборка.СвободныйОстаток;
				КэшКлючевыхПолей = Новый Структура(КлючевыеПоля);
				Пока Выборка.Следующий() Цикл // Обход строк товаров
					ТекСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][Выборка.НомерСтроки - 1];
					
					Если ОстаткиПоСтрокамТоваров[Выборка.НомерСтроки] = Неопределено Тогда
						ОстатокПоТовару = ТекСтрока.Количество;
					Иначе
						ОстатокПоТовару = ОстаткиПоСтрокамТоваров[Выборка.НомерСтроки];
					КонецЕсли;
					
					Если ОстатокПоТовару = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекСтрока,КэшКлючевыхПолей,КлючевыеПоля) Тогда
						ЗаполнитьЗначенияСвойств(КэшКлючевыхПолей,ТекСтрока);
						// Выборка упорядочена по ключевым полям,
						// поэтому изменение ключевых полей говорит нужно добавить новую строку серий
						НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока,,"Количество");
					НоваяСтрока.Серия = Выборка.Серия;
					ДобавляемоеКоличество = Мин(ОстатокПоТовару,ОстатокПоСерии);
					СтруктураКоличества.Количество         = НоваяСтрока.Количество + ДобавляемоеКоличество;
					СтруктураКоличества.КоличествоУпаковок = СтруктураКоличества.Количество;
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураКоличества); 
					
					ОстатокПоТовару = ОстатокПоТовару - ДобавляемоеКоличество;
					ОстаткиПоСтрокамТоваров.Вставить(Выборка.НомерСтроки,ОстатокПоТовару);
					
					Если ОстатокПоТовару = 0 Тогда
						ТекСтрока.СтатусУказанияСерий = 6;
						
						Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
							НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
									ТекСтрока[ИмяПоляСтатус],
									Истина,
									ДобавляемоеКоличество);
						КонецЦикла;
						
					КонецЕсли;
					ОстатокПоСерии = ОстатокПоСерии - ДобавляемоеКоличество;
					Если ОстатокПоСерии = 0 Тогда
						Прервать;
					КонецЕсли;
					ОстаткиПоСтрокамТоваров.Вставить(Выборка.НомерСтроки, ОстатокПоТовару)
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	НайденныеТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(Новый Структура("СтатусУказанияСерий",5));
	
	Если НайденныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоляСклад = ПараметрыУказанияСерий.ИмяПоляСклад;
	СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти(ИмяПоляСклад) <> Неопределено
		Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти(ИмяПоляСклад) <> Неопределено;
    
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура";
	
	ЕдиницыИзмерения = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр из НайденныеТовары Цикл
		
		Если СкладыВТЧ Тогда
			ТекущийСклад = Стр.Склад;
		Иначе
			ТекущийСклад = Объект[ИмяПоляСклад];
		КонецЕсли;
		ЭтоПодразделение = (ТипЗнч(ТекущийСклад) = Тип("СправочникСсылка.СтруктураПредприятия"));
		
		КоличествоНеРаспределено = 0;
		Если Стр.Количество = 0 Тогда
			
			ТекстСообщения = НСтр("ru='Товар ""%ПредставлениеТовара%"" - серии не заполнены. В табличной части ""Товары"" не указано количество.""';uk='Товар ""%ПредставлениеТовара%"" - серії не заповнені. У табличній частині ""Товари"" не зазначено кількість.""'");
			
		ИначеЕсли ОстаткиПоСтрокамТоваров[Стр.НомерСтроки] = Неопределено Тогда 
			
			Если ЭтоПодразделение Тогда
				ТекстСообщения = НСтр("ru='Товар ""%ПредставлениеТовара%"" - серии не заполнены.
                    |В подразделении ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'
                    |;uk='Товар ""%ПредставлениеТовара%"" - серії не заповнені.
                    |У підрозділі ""%ПредставлениеСклада%"" не вистачає ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			Иначе
				ТекстСообщения = НСтр("ru='Товар ""%ПредставлениеТовара%"" - серии не заполнены.
                    |На складе ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'
                    |;uk='Товар ""%ПредставлениеТовара%"" - серії не заповнені.
                    |На складі ""%ПредставлениеСклада%"" не вистачає ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			КонецЕсли; 

			КоличествоНеРаспределено = Стр.Количество;
			
		Иначе
			
			Если ЭтоПодразделение Тогда
				ТекстСообщения = НСтр("ru='Товар ""%ПредставлениеТовара%"" - серии заполнены не полностью.
                    |В подразделении ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'
                    |;uk='Товар ""%ПредставлениеТовара%"" - серії заповнені не повністю.
                    |У підрозділі ""%ПредставлениеСклада%"" не вистачає ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			Иначе	
				ТекстСообщения = НСтр("ru='Товар ""%ПредставлениеТовара%"" - серии заполнены не полностью.
                    |На складе ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'
                    |;uk='Товар ""%ПредставлениеТовара%"" - серії заповнені не повністю.
                    |На складі ""%ПредставлениеСклада%"" не вистачає ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			КонецЕсли; 
			КоличествоНеРаспределено = ОстаткиПоСтрокамТоваров[Стр.НомерСтроки];
			
		КонецЕсли;	
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеТовара%", НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Стр.Номенклатура, Стр.Характеристика));
		
		Если СкладыВТЧ Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеСклада%", СкладыСервер.ПолучитьПредставлениеСклада(ТекущийСклад));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеСклада%", СкладыСервер.ПолучитьПредставлениеСклада(Объект[ИмяПоляСклад]));
		КонецЕсли;
			
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Количество%", КоличествоНеРаспределено);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ЕдиницаИзмерения%",ЕдиницыИзмерения.Найти(Стр.Номенклатура,"Номенклатура").ЕдиницаИзмерения);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Стр.НомерСтроки, "Номенклатура");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСерииПоFEFOВТЧТовары(Объект, ПараметрыУказанияСерий)
    
	Если Не (ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары"
		Или ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ОрдерНаПеремещениеТоваров")Тогда
		//Если серии по FEFO заполняется в ТЧ "Товары", то склад может быть только в шапке
		ТекстИсключения = НСтр("ru='Ошибка заполнения серий по FEFO. Процедура заполнения не поддерживает данный документ.';uk='Помилка заповнення серій по FEFO. Процедура заповнення не підтримує цей документ.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено Тогда
		//Если серии по FEFO заполняется в ТЧ "Товары", то склад может быть только в шапке
		ТекстИсключения = НСтр("ru='Ошибка заполнения серий по FEFO. Упаковки не должно быть в полях связи.';uk='Помилка заповнення серій по FEFO. Упаковки не повинно бути в полях зв''язку.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ДанныеДокумента.ПоляСвязи,
	|	ДанныеДокумента.Количество КАК Количество,
	|	ДанныеДокумента.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.СтатусУказанияСерий В (5, 6)
	|	И (ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать)
	|			ИЛИ &УсловиеЕслиНеИспользуютсяСтатусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровДляЗапроса.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровДляЗапроса.Характеристика КАК Характеристика,
	|	ТаблицаТоваровДляЗапроса.Назначение КАК Назначение,
	|	СУММА(ТаблицаТоваровДляЗапроса.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапросаОстатков
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваровДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровДляЗапроса.Номенклатура,
	|	ТаблицаТоваровДляЗапроса.Характеристика,
	|	ТаблицаТоваровДляЗапроса.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ДанныеДокумента.НомерСтроки) КАК НомерСтроки,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ДанныеДокумента.ПоляСвязи,
	|	СУММА(ДанныеДокумента.Количество) КАК Количество,
	|	СУММА(ДанныеДокумента.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ МинимальныеНомераСтрок
	|ИЗ
	|	ТаблицаТоваров КАК ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.ПоляСвязи,
	|	ДанныеДокумента.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныеНомераСтрок.НомерСтроки КАК НомерСтроки,
	|	МинимальныеНомераСтрок.Количество КАК Количество,
	|	МинимальныеНомераСтрок.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	МинимальныеНомераСтрок КАК МинимальныеНомераСтрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныеНомераСтрок КАК МинимальныеНомераСтрок
	|		ПО ТаблицаТоваров.НомерСтроки = МинимальныеНомераСтрок.НомерСтроки
	|ГДЕ
	|	МинимальныеНомераСтрок.НомерСтроки ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииТоваров.Номенклатура КАК Номенклатура,
	|	СерииТоваров.Характеристика КАК Характеристика,
	|	СерииТоваров.Назначение КАК Назначение,
	|	СерииТоваров.Серия КАК Серия,
	|	СУММА(СерииТоваров.СвободныйОстаток) КАК СвободныйОстаток,
	|	СерииТоваров.Серия.ГоденДо КАК ГоденДо,
	|	СерииТоваров.Серия.Номер КАК Номер
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК СвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(Номенклатура, Характеристика, Назначение, Склад, Помещение) В
	|					(ВЫБРАТЬ
	|						ТаблицаТоваровДляЗапросаОстатков.Номенклатура,
	|						ТаблицаТоваровДляЗапросаОстатков.Характеристика,
	|						ТаблицаТоваровДляЗапросаОстатков.Назначение,
	|						&Склад,
	|						&Помещение
	|					ИЗ
	|						ТаблицаТоваровДляЗапросаОстатков)) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаСкладах.Номенклатура,
	|		ТоварыНаСкладах.Характеристика,
	|		ТоварыНаСкладах.Серия,
	|		ТоварыНаСкладах.Назначение,
	|		ТоварыНаСкладах.КОтгрузке - ТоварыНаСкладах.ВНаличии
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапросаОстатков КАК ТаблицаТоваровДляЗапросаОстатков
	|			ПО ТоварыНаСкладах.Номенклатура = ТаблицаТоваровДляЗапросаОстатков.Номенклатура
	|				И ТоварыНаСкладах.Характеристика = ТаблицаТоваровДляЗапросаОстатков.Характеристика
	|				И ТоварыНаСкладах.Назначение = ТаблицаТоваровДляЗапросаОстатков.Назначение
	|				И (ТоварыНаСкладах.Регистратор = &Ссылка)) КАК СерииТоваров
	|ГДЕ
	|	СерииТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииТоваров.Номенклатура,
	|	СерииТоваров.Характеристика,
	|	СерииТоваров.Назначение,
	|	СерииТоваров.Серия,
	|	СерииТоваров.Серия.ГоденДо,
	|	СерииТоваров.Серия.Номер
	|
	|ИМЕЮЩИЕ
	|	СУММА(СерииТоваров.СвободныйОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	ГоденДо,
	|	Номер,
	|	Серия";
    
	ПоляСвязиВТекстЗапроса = "";
    Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
        ПоляСвязиВТекстЗапроса = ПоляСвязиВТекстЗапроса + "
        |ДанныеДокумента." + ПолеСвязи + ",";
    КонецЦикла;
	
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокумента.ПоляСвязи,", ПоляСвязиВТекстЗапроса);
	
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары"
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", Новый Структура("Склад", Объект.Склад)) Тогда
		
		УсловиеЕслиНеИспользуютсяСтатусы = 
		" (НЕ ДанныеДокумента.ЭтоУпаковочныйЛист
		| И ДанныеДокумента.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		| И ДанныеДокумента.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать))";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЕслиНеИспользуютсяСтатусы", УсловиеЕслиНеИспользуютсяСтатусы);
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЕслиНеИспользуютсяСтатусы", "ЛОЖЬ");
		
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;    
	
	Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
    
    Запрос.УстановитьПараметр("Склад",Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
    
    Запрос.Текст = ТекстЗапроса;
    
    Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
    
    Если ПараметрыУказанияСерий.ИмяПоляПомещение <> Неопределено Тогда
        Помещение = Объект[ПараметрыУказанияСерий.ИмяПоляПомещение];
    Иначе
        Помещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
    КонецЕсли;
    
    Запрос.УстановитьПараметр("Помещение",Помещение);
    Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСтрокСуммыКоличества = РезультатыЗапроса[3].Выбрать();
	ВыборкаУдаляемыхСтрок = РезультатыЗапроса[4].Выбрать();
	
	Пока ВыборкаСтрокСуммыКоличества.Следующий() Цикл
		
		ТекущаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][ВыборкаСтрокСуммыКоличества.НомерСтроки - 1];
		
		ТекущаяСтрока.Количество = ВыборкаСтрокСуммыКоличества.Количество;
		ТекущаяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		ТекущаяСтрока.СтатусУказанияСерий = 5;
		ТекущаяСтрока.КоличествоУпаковок = ВыборкаСтрокСуммыКоличества.КоличествоУпаковок;
		
	КонецЦикла;
	
	Пока ВыборкаУдаляемыхСтрок.Следующий() Цикл
		Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Удалить(ВыборкаУдаляемыхСтрок.НомерСтроки - 1);
	КонецЦикла;
		
    ОстаткиСерий = РезультатыЗапроса[5].Выгрузить();
	
	СтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(Новый Структура("СтатусУказанияСерий", 5));

	Для Каждого СтрокаТоваров из СтрокиТоваров Цикл
		
		ОстатокТовара = СтрокаТоваров.Количество;
		
		Если ОстатокТовара = 0 Тогда
			Прервать;
		КонецЕсли;
			
		Отбор = Новый Структура("Номенклатура,Характеристика,Назначение");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТоваров);
		
		НайденныеСтрокиСерий = ОстаткиСерий.НайтиСтроки(Отбор);
		
		ИзменяемаяСтрока = СтрокаТоваров;
		
		Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
			
			КоличествоВСтроку = Мин(ОстатокТовара, СтрМас.СвободныйОстаток);
			
			ИзменяемаяСтрока.Количество = КоличествоВСтроку;
			ИзменяемаяСтрока.КоличествоУпаковок = КоличествоВСтроку;
			ИзменяемаяСтрока.Серия = СтрМас.Серия;
			
			ОстатокТовара = ОстатокТовара - КоличествоВСтроку;
			СтрМас.СвободныйОстаток = СтрМас.СвободныйОстаток - КоличествоВСтроку;
			
			Если СтрМас.СвободныйОстаток = 0 Тогда
				ОстаткиСерий.Удалить(СтрМас);
			КонецЕсли;
			
			Если ОстатокТовара > 0 Тогда
				ИзменяемаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Вставить(ИзменяемаяСтрока.НомерСтроки);
				
				ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, СтрокаТоваров,,"Количество,КоличествоУпаковок,Серия");
				ИзменяемаяСтрока.Количество = ОстатокТовара;	
				ИзменяемаяСтрока.КоличествоУпаковок = ОстатокТовара;	
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	НайденныеТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(Новый Структура("СтатусУказанияСерий",5));
	Если НайденныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура";
	
	ЕдиницыИзмерения = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр из НайденныеТовары Цикл
		
		КоличествоНеРаспределено = 0;
		Если Стр.Количество = 0 Тогда
			
			ТекстСообщения = НСтр("ru='Товар ""%ПредставлениеТовара%"" - серии не заполнены, т.к. не указано количество товаров.';uk='Товар ""%ПредставлениеТовара%"" - серії не заповнені, тому що не вказана кількість товарів.'");
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Товар ""%ПредставлениеТовара%"" - серии не заполнены.
                |На складе ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'
                |;uk='Товар ""%ПредставлениеТовара%"" - серії не заповнені.
                |На складі ""%ПредставлениеСклада%"" не вистачає ""%Количество%"" ""%ЕдиницаИзмерения%""'");
			КоличествоНеРаспределено = Стр.Количество;
			
		КонецЕсли;	
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеТовара%", НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Стр.Номенклатура, Стр.Характеристика));
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеСклада%", СкладыСервер.ПолучитьПредставлениеСклада(Объект[ПараметрыУказанияСерий.ИмяПоляСклад],Помещение));
			
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Количество%", КоличествоНеРаспределено);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ЕдиницаИзмерения%",ЕдиницыИзмерения.Найти(Стр.Номенклатура,"Номенклатура").ЕдиницаИзмерения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,"Объект");
		
	КонецЦикла;
	
КонецПроцедуры


Функция ТекстЗапросаДляЗаполненияСерийПОFEFO(ПараметрыУказанияСерий)

	
		ТекстЗапросаТаблицаОстатковПоСериям =
	    "ВЫБРАТЬ
	    |	СерииТоваров.Номенклатура КАК Номенклатура,
	    |	СерииТоваров.Характеристика КАК Характеристика,
	    |	СерииТоваров.Назначение,
	    |	СерииТоваров.Склад,
	    |	СерииТоваров.Серия,
	    |	СУММА(СерииТоваров.СвободныйОстаток) КАК СвободныйОстаток,
	    |	СерииТоваров.Серия.ГоденДо КАК ГоденДо,
	    |	СерииТоваров.Серия.Номер КАК Номер
	    |ПОМЕСТИТЬ ТаблицаОстатковПоСериям
	    |ИЗ
	    |	(ВЫБРАТЬ
	    |		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	    |		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	    |		ТоварыНаСкладахОстатки.Серия КАК Серия,
	    |		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	    |		ТоварыНаСкладахОстатки.Склад КАК Склад,
	    |		ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК СвободныйОстаток
	    |	ИЗ
	    |		РегистрНакопления.ТоварыНаСкладах.Остатки(
	    |				,
	    |				(Номенклатура, Характеристика, Назначение, Склад) В
	    |					(ВЫБРАТЬ
	    |						ТаблицаТоваровДляЗапроса.Номенклатура,
	    |						ТаблицаТоваровДляЗапроса.Характеристика,
	    |						ТаблицаТоваровДляЗапроса.Назначение,
	    |						ТаблицаТоваровДляЗапроса.Склад
	    |					ИЗ
	    |						ТаблицаТоваровДляЗапроса)) КАК ТоварыНаСкладахОстатки
	    |	
	    |	ОБЪЕДИНИТЬ ВСЕ
	    |	
	    |	ВЫБРАТЬ
	    |		ТоварыНаСкладах.Номенклатура,
	    |		ТоварыНаСкладах.Характеристика,
	    |		ТоварыНаСкладах.Серия,
	    |		ТоварыНаСкладах.Назначение,
	    |		ТоварыНаСкладах.Склад,
	    |		ТоварыНаСкладах.КОтгрузке - ТоварыНаСкладах.ВНаличии
	    |	ИЗ
	    |		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	    |			ПО ТоварыНаСкладах.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	    |				И ТоварыНаСкладах.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика
	    |				И ТоварыНаСкладах.Назначение = ТаблицаТоваровДляЗапроса.Назначение
	    |				И ТоварыНаСкладах.Склад = ТаблицаТоваровДляЗапроса.Склад
	    |				И (ТоварыНаСкладах.Регистратор = &Ссылка)
		|	) КАК СерииТоваров
	    |ГДЕ
	    |	СерииТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	СерииТоваров.Номенклатура,
	    |	СерииТоваров.Характеристика,
	    |	СерииТоваров.Назначение,
	    |	СерииТоваров.Склад,
	    |	СерииТоваров.Серия,
	    |	СерииТоваров.Серия.ГоденДо,
	    |	СерииТоваров.Серия.Номер
	    |
	    |ИМЕЮЩИЕ
	    |	СУММА(СерииТоваров.СвободныйОстаток) > 0";

	
	ТекстЗапроса =
	    "ВЫБРАТЬ
	    |	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	    |	ДанныеДокумента.Склад КАК Склад,
	    |	ДанныеДокумента.Номенклатура КАК Номенклатура,
	    |	ДанныеДокумента.Характеристика КАК Характеристика,
	    |	ДанныеДокумента.Назначение КАК Назначение,
	    |	ДанныеДокумента.ПоляСвязи,
	    |	ДанныеДокумента.Количество КАК Количество
	    |ПОМЕСТИТЬ ТаблицаТоваров
	    |ИЗ
	    |	&ТаблицаТоваров КАК ДанныеДокумента
	    |ГДЕ
	    |	ДанныеДокумента.СтатусУказанияСерий В (5, 6)
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ДанныеДокумента.Номенклатура КАК Номенклатура,
	    |	ДанныеДокумента.Характеристика КАК Характеристика,
	    |	ДанныеДокумента.Серия КАК Серия,
	    |	ДанныеДокумента.Склад КАК Склад,
	    |	ДанныеДокумента.ПоляСвязи,
	    |	ДанныеДокумента.Количество КАК Количество
	    |ПОМЕСТИТЬ ТаблицаСерий
	    |ИЗ
	    |	&ТаблицаСерий КАК ДанныеДокумента
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ТаблицаТоваровДляЗапроса.Склад КАК Склад,
	    |	ТаблицаТоваровДляЗапроса.Номенклатура КАК Номенклатура,
	    |	ТаблицаТоваровДляЗапроса.Характеристика КАК Характеристика,
	    |	ТаблицаТоваровДляЗапроса.Назначение КАК Назначение,
	    |	СУММА(ТаблицаТоваровДляЗапроса.Количество) КАК Количество
	    |ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	    |ИЗ
	    |	ТаблицаТоваров КАК ТаблицаТоваровДляЗапроса
	    |ГДЕ
	    |	ТаблицаТоваровДляЗапроса.Количество > 0
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ТаблицаТоваровДляЗапроса.Склад,
	    |	ТаблицаТоваровДляЗапроса.Номенклатура,
	    |	ТаблицаТоваровДляЗапроса.Характеристика,
	    |	ТаблицаТоваровДляЗапроса.Назначение
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |" + ТекстЗапросаТаблицаОстатковПоСериям + "
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ДанныеДокумента.Номенклатура,
	    |	ДанныеДокумента.Склад,
	    |	ДанныеДокумента.НомерСтроки,
	    |	ТаблицаОстатковПоСериям.Серия КАК Серия,
	    |	ЕСТЬNULL(ТаблицаОстатковПоСериям.СвободныйОстаток, 0) КАК СвободныйОстаток
	    |ИЗ
	    |	ТаблицаОстатковПоСериям КАК ТаблицаОстатковПоСериям
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ДанныеДокумента
	    |		ПО (ДанныеДокумента.Номенклатура = ТаблицаОстатковПоСериям.Номенклатура)
	    |			И (ДанныеДокумента.Характеристика = ТаблицаОстатковПоСериям.Характеристика)
	    |			И (ДанныеДокумента.Назначение = ТаблицаОстатковПоСериям.Назначение)
	    |			И (ДанныеДокумента.Склад = ТаблицаОстатковПоСериям.Склад)
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	ДанныеДокумента.Номенклатура,
	    |	ДанныеДокумента.Склад,
	    |	ТаблицаОстатковПоСериям.ГоденДо,
	    |	ТаблицаОстатковПоСериям.Номер,
	    |	ТаблицаОстатковПоСериям.Серия,
	    |	ДанныеДокумента.ПоляСвязи,
	    |	ДанныеДокумента.НомерСтроки
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ДанныеДокумента.ПоляСвязи,
	    |	ДанныеДокумента.Номенклатура,
	    |	ДанныеДокумента.Характеристика,
	    |	ДанныеДокумента.Серия,
	    |	ДанныеДокумента.Количество
	    |ИЗ
	    |	ТаблицаСерий КАК ДанныеДокумента
	    |ГДЕ
	    |	НЕ (ДанныеДокумента.Номенклатура, ДанныеДокумента.Склад) В
	    |				(ВЫБРАТЬ
	    |					ТаблицаТоваров.Номенклатура,
	    |					ТаблицаТоваров.Склад
	    |				ИЗ
	    |					ТаблицаТоваров)";
		
	Возврат ТекстЗапроса;
	
КонецФункции

//Функция проверяет наличие в ТЧ "Товары" строк, по которым серии заполнены по FEFO
////Параметры
//		ТЧ - ДанныеФормыКоллеция
// Возвращаемое значение - тип Булево
Функция ЕстьСтрокиСЗаполненнымиПоFEFOСериями(ТЧ) Экспорт
	Возврат ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",6)).Количество() > 0;	
КонецФункции

//Функция проверяет наличие в ТЧ "Товары" строк, по которым серии можно за полнить по FEFO
////Параметры
//		ТЧ - ДанныеФормыКоллеция
// Возвращаемое значение - тип Булево
Функция ЕстьСтрокиСЗаполняемымиПоFEFOСериями(ТЧ) Экспорт
	Возврат ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",6)).Количество() > 0
		Или ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",5)).Количество() > 0
		Или ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",25)).Количество() > 0;
КонецФункции

// Проверяет, предусматривает ли политика указания серий на переданном складе указание серий 
// и проверяет принадлежность серии
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура
//		Склад - СправочникСсылка.Склад
//		ИмяПараметраПолитикиУчетаСерий - Строка - имя реквизита политики учета серий, по которому нужно проверить
//			статус указания серий
//	Возвращаемое значение:
//		Структура:
//			СтатусУказанияСерий - Строка - статус указания серий
//			Серия - СправочникСсылка.СерииНоменклатуры - если серия принадлежит тому же виду номенклатуры,
//				то переданная серия, иначе - пустая ссылка
//
Функция СерияУказанаКорректно(Склад, Номенклатура, Серия, ИмяПараметраПолитикиУчетаСерий) Экспорт
	Результат = Новый Структура("СтатусУказанияСерий,Серия");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий + "
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Результат.СтатусУказанияСерий = 0;
	Иначе
		Если ИмяПараметраПолитикиУчетаСерий = "УчетСебестоимостиПоСериям" Тогда
			Результат.СтатусУказанияСерий = 14;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УказыватьПриПланированииОтгрузки" Тогда 
			Результат.СтатусУказанияСерий = 10;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УказыватьПриПланированииОтбора" Тогда
			Результат.СтатусУказанияСерий = 8;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УчетСерийПоFEFO" Тогда
			Результат.СтатусУказанияСерий = 6;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УказыватьПоФактуОтбора" Тогда
			Результат.СтатусУказанияСерий = 4;
		Иначе
			Результат.СтатусУказанияСерий = 2;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.СтатусУказанияСерий = 0 Тогда
		Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	Иначе
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия, "ВидНоменклатуры")
			 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры") Тогда
			Результат.Серия = Серия;
		Иначе
			Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//По указанным параметрам функция возвращает статус указания серий.
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого вычисляется статус указания серий
//		Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой вычисляется статус указания серий
//		ИмяПараметраПолитикиУчетаСерий - Строка - имя параметра политики, который нужно проверить
//		
//	Возвращаемое значение
//		Число - статус указания серий
//
Функция СтатусУказанияСерии(Склад, Номенклатура, ИмяПараметраПолитикиУчетаСерий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям 	КАК УчитыватьСебестоимостьПоСериям,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки 	КАК УказыватьПриПланированииОтгрузки,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора 	КАК УказыватьПриПланированииОтбора,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO 					КАК УчетСерийПоFEFO,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора 			КАК УказыватьПоФактуОтбора
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтатусУказанияСерий = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.УчитыватьСебестоимостьПоСериям Тогда 
			СтатусУказанияСерий = 14;
		ИначеЕсли Выборка.УказыватьПриПланированииОтгрузки Тогда 
			СтатусУказанияСерий = 10;
		ИначеЕсли Выборка.УказыватьПриПланированииОтбора Тогда
			СтатусУказанияСерий = 8;
		ИначеЕсли Выборка.УчетСерийПоFEFO Тогда
			СтатусУказанияСерий = 6;
		ИначеЕсли Выборка.УказыватьПоФактуОтбора Тогда
			СтатусУказанияСерий = 4;
		Иначе
			СтатусУказанияСерий = 2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусУказанияСерий;
	
КонецФункции

//Процедура проверяет правильность указания серий товаров по статусам в ТЧ "Товары"
//Если статусы
//       1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//       3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
//       5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, серии заполняются по FEFO)
//       7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отбора)
//       9 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки)
//       13 - количество по сериям не совпадает с количеством товаров или серия не указана (учет себестоимости по сериям)
//то выдается ошибка
//Параметры:
//		ДокументОбъект - ДокументОбъект, в котором нужно проверить указание серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		Отказ - признак ошибки проверки
//      МассивНепроверяемыхРеквизитов - Массив, Строка - массив имен реквизитов, которые нужно исключить из платформенной проверки
//      ВыдаватьСообщения - Булево - признак того, что нужно выдавать сообщения об ошибках проверки
//
Процедура ПроверитьЗаполнениеСерий(ДокументОбъект,ПараметрыУказанияСерий,Отказ,МассивНепроверяемыхРеквизитов = Неопределено,ВыдаватьСообщения = Истина) Экспорт
	МетаданныеДокумента = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	Суффиксы = Новый Массив;
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		Суффиксы.Добавить("");
	Иначе
		Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
			Если МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты.Найти("Серия" + Суффикс) <> Неопределено Тогда
				Суффиксы.Добавить(Суффикс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов <> Неопределено Тогда
		Для Каждого Суффикс из Суффиксы Цикл
			МассивНепроверяемыхРеквизитов.Добавить(ПараметрыУказанияСерий.ИмяТЧТовары  +".Серия" + Суффикс);
		КонецЦикла;
		МассивНепроверяемыхРеквизитов.Добавить("Серия");
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		Если НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана().Найти(ДокументОбъект.СтатусУказанияСерий) <> Неопределено
			И ДокументОбъект.СтатусУказанияСерий <> 13 Тогда
			
			ТекстСообщения = НСтр("ru='Для номенклатуры ""%Товар%"" необходимо указать серии';uk='Для номенклатури ""%Товар%"" необхідно зазначити серії'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДокументОбъект.Номенклатура, ДокументОбъект.Характеристика) );
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,"Номенклатура","Объект",Отказ);
		ИначеЕсли ДокументОбъект.СтатусУказанияСерий = 13 Тогда
			ТекстСообщения = НСтр("ru='Поле ""Серия"" не заполнено';uk='Поле ""Серія"" не заповнено'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,"Серия","Объект",Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяТЧТовары) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		
		Если ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий Тогда
	
			МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
			ТекстЗапроса =	МодульМенеджера.ТекстЗапросаПроверкиЗаполненияСерий(ПараметрыУказанияСерий);
			
		Иначе
			
			ПроверитьКоличествоПоСериям(ДокументОбъект, ПараметрыУказанияСерий, Отказ, ВыдаватьСообщения);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
			|	ТаблицаСерий.Серия КАК Серия,
			|	ТаблицаСерий.Номенклатура КАК Номенклатура,
			|	ТаблицаСерий.Характеристика КАК Характеристика,
			|	ТаблицаСерий.ПоляСвязи КАК ПоляСвязи,
			|	ТаблицаСерий.ИмяПоляКоличество КАК КоличествоУпаковок
			|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
			|ИЗ
			|	&ТаблицаСерий КАК ТаблицаСерий
			|ГДЕ
			|	ТаблицаСерий.СтатусУказанияСерий  > 0
			|	И НЕ ТаблицаСерий.СтатусУказанияСерий В (&СтатусыСерийСериюМожноУказать)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаСерий.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаСерий.Номенклатура КАК Номенклатура,
			|	СУММА(ТаблицаСерий.КоличествоУпаковок) КАК КоличествоУпаковок
			|ПОМЕСТИТЬ ТаблицаСерий
			|ИЗ
			|	ТаблицаСерийДляЗапроса КАК ТаблицаСерий
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерий.Серия,
			|	ТаблицаСерий.Номенклатура,
			|	ТаблицаСерий.ПоляСвязи,
			|	ТаблицаСерий.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Т.Номенклатура) КАК ТоварПредставление,
			|	""Серия"" КАК ИмяПоляСерия,
			|	Т.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНеЗаполнена,
			|	ЛОЖЬ КАК ОшибкаКоличества,
			|	Т.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	ТаблицаСерийДляЗапроса КАК Т
			|ГДЕ
			|	Т.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Т.НомерСтроки";
			
			ПоляСвязиВЫБРАТЬ = "";
			ПоляСвязиСГРУППИРОВАТЬПО = "";
			Для Каждого ПолеСвязи Из ПараметрыУказанияСерий.ПоляСвязи Цикл
				ПоляСвязиВЫБРАТЬ = ПоляСвязиВЫБРАТЬ + "
				|	ТаблицаСерий." + ПолеСвязи + " КАК " + ПолеСвязи + ",";
				
				ПоляСвязиСГРУППИРОВАТЬПО = ПоляСвязиСГРУППИРОВАТЬПО + "
				|	ТаблицаСерий." + ПолеСвязи + ",";
			КонецЦикла;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерий.ПоляСвязи КАК ПоляСвязи,", ПоляСвязиВЫБРАТЬ);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаСерий.ПоляСвязи,", ПоляСвязиСГРУППИРОВАТЬПО);
		
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ФактОтбора", ПараметрыУказанияСерий.ФактОтбора);
		Запрос.УстановитьПараметр("СтатусыСерийСериюМожноУказать", НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());
		
		Если ПараметрыУказанияСерий.ОтборПроверяемыхСтрок <> Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
		КонецЕсли;
		
		Если ВыдаватьСообщения Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			ПредставлениеТЧ = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Синоним;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.СерияНеЗаполнена Тогда
					ТекстСообщения = НСтр("ru='Не заполнена колонка ""%ИмяРеквизитаСерия%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';uk='Не заповнена колонка ""%ИмяРеквизитаСерия%"" в рядку %НомерСтроки% списку ""%ПредставлениеТЧ%""'");
					
					ИмяРеквизитаСерия = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты[Выборка.ИмяПоляСерия].Синоним;
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРеквизитаСерия%", ИмяРеквизитаСерия);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, Выборка.ИмяПоляСерия);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
				КонецЕсли;
				
				Если Выборка.ОшибкаКоличества Тогда
					// Только для случая ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий, 
					ТекстСообщения = НСтр("ru='Политика учета серий товара ""%ТоварПредставление%"" предусматривает, что количество по любой серии этого товара всегда будет равно 1""';uk='Політика обліку серій товару ""%ТоварПредставление%"" передбачає, що кількість будь-якої серії цього товару завжди буде дорівнювати 1""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварПредставление%", Выборка.ТоварПредставление);
					
					//Сделано неуниверсально, т.к. во всех документах, где справочные серии указываются только в той же ТЧ, что и товары, есть поле КоличествоУпаковок
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "КоличествоУпаковок");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если Не Запрос.Выполнить().Пустой() Тогда
				Отказ = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстПоляВыбораТовары,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.ИмяПоляКоличество КАК Количество,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|   ТаблицаТоваров.СтатусУказанияСерий В (&СтатусыСерийСерияНеУказана)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПоляВыбораТовары,
	|	ТаблицаТоваров.ИмяПоляЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	&ТекстПоляВыбораТовары,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.ИмяПоляЕдиницаИзмерения,
	|	ТаблицаТоваров.СтатусУказанияСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПоляВыбораСерии,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	ТаблицаСерий.ИмяПоляКоличество КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТекстПоляВыбораСерии,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|
	|СГРУППИРОВАТЬ ПО
	|	&ТекстПоляВыбораСерии,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) КАК КоличествоСерий,
	|	ТаблицаТоваровДляЗапроса.Количество КАК КоличествоТоваров,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровДляЗапроса.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров                           
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
	|			ПО ТаблицаТоваровДляЗапроса.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
	|				И ТаблицаТоваровДляЗапроса.Характеристика = ТаблицаСерийДляЗапроса.Характеристика
	|				И &ТекстПоляСвязиСоединениеТоварыСерии
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика
	|			И &ТекстПоляСвязиСоединениеТоварыВсеТовары
	|ГДЕ
	|	ТаблицаТоваров.СтатусУказанияСерий = 13
	|	ИЛИ &СерииПриПланированииОтгрузкиУказываютсяВТЧТовары
	|		И ТаблицаТоваров.СтатусУказанияСерий = 9
	|	ИЛИ ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) <> ТаблицаТоваровДляЗапроса.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстПоляВыбораТовары = "";
	ТекстПоляВыбораСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров." + СтрМас + ",";
		ТекстПоляВыбораСерии = ТекстПоляВыбораСерии + "
		|	ТаблицаСерий." + СтрМас + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
		|			И ТаблицаТоваровДляЗапроса."+СтрМас+" = ТаблицаСерийДляЗапроса."+СтрМас;
		ТекстПоляСвязиСоединениеТоварыВсеТовары = ТекстПоляСвязиСоединениеТоварыВсеТовары + "
		|			И ТаблицаТоваров."+СтрМас+" = ТаблицаТоваровДляЗапроса." + СтрМас;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляВыбораТовары,", ТекстПоляВыбораТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляВыбораСерии,", ТекстПоляВыбораСерии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстПоляСвязиСоединениеТоварыСерии", ТекстПоляСвязиСоединениеТоварыСерии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстПоляСвязиСоединениеТоварыВсеТовары", ТекстПоляСвязиСоединениеТоварыВсеТовары);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляЕдиницаИзмерения",
		?(ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено, "Упаковка","Номенклатура.ЕдиницаИзмерения"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если ПараметрыУказанияСерий.Свойство("ОтборПроверяемыхСтрок") Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтатусыСерийСерияНеУказана", НоменклатураКлиентСервер.СтатусыСерийСерияНеУказана());
	
	Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить());
	СерииПриПланированииОтгрузкиУказываютсяВТЧТовары = НоменклатураКлиентСервер.СерииПриПланированииОтгрузкиУказываютсяВТЧТовары(ПараметрыУказанияСерий);
	Запрос.УстановитьПараметр("СерииПриПланированииОтгрузкиУказываютсяВТЧТовары", СерииПриПланированииОтгрузкиУказываютсяВТЧТовары);
	
	ПредставлениеТЧ = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Синоним;
	ЕстьРеквизитСерия = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты.Найти("Серия") <> Неопределено;
			
	Если ВыдаватьСообщения Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если (Выборка.СтатусУказанияСерий = 13
					Или СерииПриПланированииОтгрузкиУказываютсяВТЧТовары И Выборка.СтатусУказанияСерий = 9)
				И  ЕстьРеквизитСерия Тогда
				ТекстСообщения = НСтр("ru='Не заполнена колонка ""Серия"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""';uk='Не заповнена колонка ""Серія"" в рядку %НомерСтроки% списку ""%ПредставлениеТЧ%""'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%",Выборка.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%",ПредставлениеТЧ);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "Серия");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, "Объект", Отказ);
			Иначе
				ТекстСообщения = НСтр("ru='Для товара ""%Товар%"" указано по сериям %КоличествоСерий% %ЕдиницаИзмерения%. Необходимо указать %КоличествоТоваров% %ЕдиницаИзмерения%. Исправьте серии.';uk='Для товару ""%Товар%"" зазначено за серіями %КоличествоСерий% %ЕдиницаИзмерения%. Необхідно зазначити %КоличествоТоваров% %ЕдиницаИзмерения%. Виправте серії.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура,
				Выборка.Характеристика));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоСерий%",Выборка.КоличествоСерий);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоТоваров%",Выборка.КоличествоТоваров);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%",Выборка.ЕдиницаИзмерения);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "СтатусУказанияСерий");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Процедура проверяет правильность указания количества для серий товаров,
//которые идентифицируют экземпляр товара по уникальному номеру и указываются в основной ТЧ документа (Товары).
//Если для такой серии указано количество не равное 1, то выдается ошибка.
//Параметры:
//		ДокументОбъект - ДокументОбъект, в котором нужно проверить указание серий
//		ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		Отказ - признак ошибки проверки
//		ВыдаватьСообщения - Булево - признак того, что нужно выдавать сообщения об ошибках проверки
//
Процедура ПроверитьКоличествоПоСериям(ДокументОбъект, ПараметрыУказанияСерий, Отказ, ВыдаватьСообщения = Истина) Экспорт
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары <> ПараметрыУказанияСерий.ИмяТЧСерии 
		 ИЛИ ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.Упаковка КАК Упаковка,
	|	Т.ИмяПоляКоличество КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	&ТаблицаСерий КАК Т
	|ГДЕ
	|	Т.СтатусУказанияСерий > 0
	|	И НЕ Т.СтатусУказанияСерий В (&СтатусыСерийСериюМожноУказать)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия
	|ПОМЕСТИТЬ ТоварыСОшибкамиВКоличестве
	|ИЗ
	|	ТаблицаСерийДляЗапроса КАК Т
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.КоличествоУпаковок) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Т.Номенклатура) КАК НоменклатураПредставление,
	|	НЕ ТоварыСОшибкамиВКоличестве.Номенклатура ЕСТЬ NULL  КАК ОшибкаКоличества,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель, 1) / ЕСТЬNULL(ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель, 1) <> 1 КАК ОшибкаУпаковки,
	|	Т.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаСерийДляЗапроса КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОшибкамиВКоличестве КАК ТоварыСОшибкамиВКоличестве
	|		ПО ТоварыСОшибкамиВКоличестве.Номенклатура = Т.Номенклатура
	|			И ТоварыСОшибкамиВКоличестве.Характеристика = Т.Характеристика
	|			И ТоварыСОшибкамиВКоличестве.Серия = Т.Серия
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии
	|	И (НЕ ТоварыСОшибкамиВКоличестве.Номенклатура ЕСТЬ NULL 
	|			ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель, 1) / ЕСТЬNULL(ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель, 1) <> 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т.Упаковка", "ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СтатусыСерийСериюМожноУказать", НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());
	
	Если ПараметрыУказанияСерий.ОтборПроверяемыхСтрок <> Неопределено Тогда
		Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	КонецЕсли;
	
	Если ВыдаватьСообщения Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПредставлениеТЧ = МетаданныеДокумента.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Синоним;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОшибкаКоличества Тогда
				ТекстСообщения = НСтр("ru='Политика учета серий товара ""%НоменклатураПредставление"" предусматривает, что количество по любой серии этого товара всегда будет равно 1.';uk='Політика обліку серій товару ""%НоменклатураПредставление"" передбачає, що кількість будь-якої серії цього товару завжди буде дорівнювати 1.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураПредставление", Выборка.НоменклатураПредставление);
				//Сделано неуниверсально, т.к. во всех документах, где справочные серии указываются только в той же ТЧ, что и товары, есть поле КоличествоУпаковок
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "КоличествоУпаковок");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
			КонецЕсли;
			Если Выборка.ОшибкаУпаковки Тогда
				ТекстСообщения = НСтр("ru='Политика учета серий товара ""%НоменклатураПредставление%"" предусматривает, что серии указываются для каждого экземпляра, укажите единичную упаковку.""';uk='Політика обліку серій товару ""%НоменклатураПредставление%"" передбачає, що серії зазначаються для кожного екземпляра, вкажіть одиничну упаковку.""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураПредставление%", Выборка.НоменклатураПредставление);
				//Сделано неуниверсально, т.к. во всех документах, где справочные серии указываются только в той же ТЧ, что и товары, есть поле КоличествоУпаковок
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "Упаковка");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
			КонецЕсли;			
		КонецЦикла;
	Иначе
		Если Не Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет, какую форму для указания серий нужно открыть (регистрации или подбора),
// подготавливает параметры (в т.ч. помещает нужные данные во временное хранилище) для ее открытия и возвращает их.
//
// Параметры:
//  Объект						 - ДанныеФормыСтуктура	 - основной реквизит формы документа
//  ПараметрыУказанияСерий		 - Структура			 - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//  ТекущиеДанныеИдентификатор	 - Число				 - идентификатор текущей строки товаров в форме документа
//  Форма						 - УправляемаяФорма		 - форма, из которой инициировано указание серий
//  Метаданные					 - ОбъектМетаданных 	 - метаданные объекта, для которого помещаются серии в хранилище, значение по умолчанию - Неопределено.
//														   Если параметр не указан - метаданные извлекаются из ссылки (Объект.Ссылка) 
//  ЗаголовокКолонкиКоличество	 - Строка				 - заголовок колонки с количеством в открываемой форме указания серий, значение по умолчанию - ""
//															Если заголовок не передан, то колонка будет называться в форме "Количество"
//
// Возвращаемое значение:
//  Структура - структура с именем и параметрами формы указания серий:  
// - Основные поля
//		* ИмяФормы - Строка - имя формы, которую нужно отрыть. Это или форма регистрации или формы подбора серий. Зависит от ПараметрыУказанияСерий
// 		* АдресВоВременномХранилище - Строка - адрес во временном хранилище отобранных строк серий. 
//												Если вызывается форма подбора серий - то во временном хранилище лежит структура(ТаблицаТоваров, ТаблицаСерий)
//											    ТаблицаСерий - это ТЧ Серии, ТаблицаТоваров - сгруппированная по полям связи таблица товаров
//		* РегистрироватьСерии - Булево - нужно ли согласно ПараметрыУказанияСерий давать возможность регистрировать серии (или только подбирать из имеющихся)
//		* ТолькоПросмотр - Булево
//		* Количество - Число - количество товаров по срокам, для которых указываются серии. Имеет смысл, для формы регистрации серии, т.к. форма подбора открывается для всей ТЧ Товары
//		* СерииВТЧТовары - Булево - признак, что серии указываются в той же ТЧ, что и товары
//		* Регистратор - ДокументСсылка - имеет смысл для формы подбора серий. В этой форме отображаются остатки, при этом при отображении сторнируется
//										 изменение остатков текущим документом
//      * ПараметрыУказанияСерий - Структура - значение параметра ПараметрыУказанияСерий данной фукнции для передачи в форму указания серий
//		* ЗначенияПолейДляОпределенияРаспоряжения - Структура - имеет смысл для формы подбора серий, в которой показываются остатки. Для запроса остатков нужны
//													нужны параметры. Возвращается фукнцией см. НоменклатураКлиентСервер.ЗначенияПолейДляОпределенияРаспоряжения
// - Значения полей текущей строки или объекта, если в строке нет таких полей
// 		* Номенклатура - СправочникСсылка.Номенклатура 	
// 		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры 	
// 		* СтатусУказанияСерий - Число 	
// 		* ХарактеристикиИспользуются - Булево 	
//		* Значения полей связи из ПараметрыУказанияСерий.ПоляСвязи
// 		* Склад - СправочникСсылка.Склады
// 		* Помещение - СправочникСсылка.СкладскиеПомещения
// 		* УпаковкаДляПодстановки - СправочникСсылка.УпаковкиЕдиницыИзмерения, Неопределено - упаковка, в которой нужно выводить количество в форме регистрации серий
//								Если в ТЧ "Товары" для всех строк товара одна упаковка и упаковка не входит в поля связи - передается это значение, если упаковки
//								разные - то Неопределено
//
Функция ПараметрыФормыУказанияСерий(Объект,ПараметрыУказанияСерий,ТекущиеДанныеИдентификатор,Форма, Метаданные = Неопределено, ЗаголовокКолонкиКоличество = "") Экспорт
	МетаданныеДокумента = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	
	//Если нужно будет изменять количество, то данные формы нужно заблокировать
	//Если заблокировать не удастся - вылетит исключение
	Если Не ПараметрыУказанияСерий.ТолькоПросмотр
		И ПараметрыУказанияСерий.БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ТолькоПросмотр Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	ТекстВыбораТоваров = "";
	БратьАбсолютноеЗначение = Ложь;
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстВыбораТоваров = ТекстВыбораТоваров + "
		|	ТаблицаТоваров."  + СтрМас + ", ";
		
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
		Если СтрМас = "ВидВозвратаЧерезКассу" Тогда
			БратьАбсолютноеЗначение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ТекущиеДанные = Объект;
	Иначе
		ТекущиеДанные = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	КонецЕсли;

	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
	ЕстьДействие = ПараметрыУказанияСерий.ПоляСвязи.Найти("Действие") <> Неопределено;
	УпаковкаДляПодстановки = Неопределено;
	
	Если ЕстьДействие Тогда
		РегистрироватьСерии = ?(ТекущиеДанные.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать, Ложь, Истина);
	Иначе
		РегистрироватьСерии = ПараметрыУказанияСерий.РегистрироватьСерии;
	КонецЕсли;
	
	Если РегистрироватьСерии Тогда
		НомераСтрокДокумента = "";
		
		Если ЕстьУпаковки
			И ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда //не заполнена для тары
			ДанныеУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(ТекущиеДанные.Упаковка, ТекущиеДанные.Номенклатура);
			КоэффициентУпаковки      = ДанныеУпаковки.Коэффициент; 
			НужноОкруглятьКоличество = ДанныеУпаковки.НужноОкруглятьКоличество;
		Иначе
			КоэффициентУпаковки = 1;
			НужноОкруглятьКоличество = Ложь;
		КонецЕсли;
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			КоличествоВДокументе = Объект[ПараметрыУказанияСерий.ИмяПоляКоличество]*КоэффициентУпаковки;	
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
		Иначе
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущиеДанные);
			
			НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
			
			КоличествоВДокументе = 0;	
			Для Каждого СтрМас из НайденныеСтрокиТоваров Цикл
				
				Если СтрМас.Свойство("Упаковка") Тогда
					//Расчитаем упаковку, в которой нужно отображать количество в форме редактирования упаковок
					//Если для всех строк указана одна упаковка - то в ней и будем отображать количество
					//Если упаковка входит в поля связи, то она и будет единственной для всех строк
					Если УпаковкаДляПодстановки = Неопределено Тогда
						УпаковкаДляПодстановки = СтрМас.Упаковка;
					ИначеЕсли УпаковкаДляПодстановки <> СтрМас.Упаковка Тогда
						УпаковкаДляПодстановки = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					КонецЕсли;	
					
				КонецЕсли;
				
				Если НужноОкруглятьКоличество Тогда
					СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество] = Окр(СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество], 0, РежимОкругления.Окр15как20);	
				КонецЕсли;
				
				КоличествоВДокументе = КоличествоВДокументе + СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество]*КоэффициентУпаковки;
				
				НомераСтрокДокумента = НомераСтрокДокумента + Строка(СтрМас.НомерСтроки) + ", ";
			КонецЦикла;
			
			Если Не ПустаяСтрока(НомераСтрокДокумента) Тогда
				НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
			КонецЕсли;
		КонецЕсли;
		
		Если БратьАбсолютноеЗначение Тогда
			КоличествоВДокументе = ?(КоличествоВДокументе < 0, -КоличествоВДокументе, КоличествоВДокументе);
		КонецЕсли;
		
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		ТаблицаСерий = Новый ТаблицаЗначений;
		ТаблицаСерий.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаСерий.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		
		Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
			
			НоваяСтрока = ТаблицаСерий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
			
			//Сделано неуниверсально. Если упаковки есть в полях связи, то поля с количеством во всех документах называются стандартно
			Если Не ЕстьУпаковки Тогда
				НоваяСтрока.Количество = СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество];	
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			КонецЕсли;
			
		КонецЦикла;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаСерий,УникальныйИдентификаторФормы);
		
	Иначе
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		Если НЕ ЕстьУпаковки Тогда
			ТаблицаТоваров.Колонки.Добавить("Упаковка",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		КонецЕсли;
		ТаблицаТоваров.Колонки.Добавить("НомераСтрокДокумента",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
		
		ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, Метаданные); 
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			СтрокаТовара = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
			Если ПараметрыУказанияСерий.ЭтоЗаказ
				И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено
				И Объект.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				// В шапке заказов при смене варианта обеспечения не очищается назначение,
				//	поэтому для необособленной отгрузки сбросим назначение здесь
				СтрокаТовара.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ 
			|   ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Количество,
			|	ТаблицаТоваров.Упаковка,
			|	ТаблицаТоваров.НомерСтроки
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.СтатусУказанияСерий В (&ОтборПоСтатусам)
			|	И &УсловиеПоДействию
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ 
			|   ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Количество КАК Количество,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|УПОРЯДОЧИТЬ ПО 
			|   ТаблицаТоваров.ТекстВыбораТоваров,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.НомерСтроки";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров.ТекстВыбораТоваров,", ТекстВыбораТоваров); 
			
			Если Не ЕстьУпаковки Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТоваров.Упаковка,", ""); 
			КонецЕсли;
			
			Если ЕстьДействие Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
											"&УсловиеПоДействию",
											"ТаблицаТоваров.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать)");
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДействию", "ИСТИНА");
			КонецЕсли;		
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			
			Если ПараметрыУказанияСерий.НужноОкруглятьКоличество
				И СтрНайти(ПараметрыУказанияСерий.ИмяПоляКоличество, "КоличествоУпаковок") = 0 Тогда
				
				Если ПараметрыУказанияСерий.ТоварВШапке Тогда
					ДанныеУпаковки = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Объект.Упаковка, Объект.Номенклатура);
					Если ДанныеУпаковки.НужноОкруглятьКоличество Тогда
						Объект[ПараметрыУказанияСерий.ИмяПоляКоличество] = Окр(Объект[ПараметрыУказанияСерий.ИмяПоляКоличество], 0, РежимОкругления.Окр15как20);
					КонецЕсли;
				Иначе
					ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
					ПараметрыОкругления.ИмяТЧ = ПараметрыУказанияСерий.ИмяТЧТовары;
					
					ДлинаИмяПоляКоличество = СтрДлина(ПараметрыУказанияСерий.ИмяПоляКоличество);
					
					Если ДлинаИмяПоляКоличество > 10 Тогда
						ПараметрыОкругления.СуффиксДопРеквизита = Прав(ПараметрыУказанияСерий.ИмяПоляКоличество, ДлинаИмяПоляКоличество - 10);
					КонецЕсли;
					
					ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(Объект, Неопределено, ПараметрыОкругления);
				КонецЕсли;
				
			КонецЕсли;
			
			ТЧ = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить();
			
			Запрос.УстановитьПараметр("ТаблицаТоваров",ТЧ);

			ОтборПоСтатусамУказанияСерий = Новый Массив;
			ОтборПоСтатусамУказанияСерий.Добавить(3);
			ОтборПоСтатусамУказанияСерий.Добавить(23);
			ОтборПоСтатусамУказанияСерий.Добавить(4);
			ОтборПоСтатусамУказанияСерий.Добавить(5);
			ОтборПоСтатусамУказанияСерий.Добавить(25);
			ОтборПоСтатусамУказанияСерий.Добавить(6);
			ОтборПоСтатусамУказанияСерий.Добавить(7);
			ОтборПоСтатусамУказанияСерий.Добавить(27);
			ОтборПоСтатусамУказанияСерий.Добавить(8);
			Если НЕ НоменклатураКлиентСервер.СерииПриПланированииОтгрузкиУказываютсяВТЧТовары(ПараметрыУказанияСерий)
				ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
				ОтборПоСтатусамУказанияСерий.Добавить(9);
				ОтборПоСтатусамУказанияСерий.Добавить(10);
				ОтборПоСтатусамУказанияСерий.Добавить(11);
			КонецЕсли;
			Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
				ОтборПоСтатусамУказанияСерий.Добавить(13);
				ОтборПоСтатусамУказанияСерий.Добавить(14);
				ОтборПоСтатусамУказанияСерий.Добавить(15);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ОтборПоСтатусам", ОтборПоСтатусамУказанияСерий);
			
			ПоляГруппировки = "Номенклатура,Характеристика" + ТекстПоляСвязи;
			
			ТекущаяГруппировка = Новый Структура(ПоляГруппировки);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДляСортировки",
				Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
			
			Количество               = 0;
			НомераСтрокДокумента     = "";
			НомерСтрокиДляСортировки = 0;
			
			НоваяСтрокаТоваров = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущаяГруппировка, Выборка, ПоляГруппировки) Тогда
					
					Если НоваяСтрокаТоваров <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ТекущаяГруппировка);
						НоваяСтрокаТоваров.Количество = Количество;
						
						НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
						НоваяСтрокаТоваров.НомераСтрокДокумента     = НомераСтрокДокумента;
						НоваяСтрокаТоваров.НомерСтрокиДляСортировки = НомерСтрокиДляСортировки;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ТекущаяГруппировка,Выборка);
					НоваяСтрокаТоваров       = ТаблицаТоваров.Добавить();
					НомерСтрокиДляСортировки = Выборка.НомерСтроки;
					Количество           = 0;
					НомераСтрокДокумента = "";
					
				КонецЕсли;
				
				Количество           = Количество + Выборка.Количество;
				НомераСтрокДокумента = НомераСтрокДокумента + Выборка.НомерСтроки + ", ";
				
			КонецЦикла;
			
			Если НоваяСтрокаТоваров <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ТекущаяГруппировка);
				НоваяСтрокаТоваров.Количество = Количество;
				
				НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
				НоваяСтрокаТоваров.НомераСтрокДокумента = НомераСтрокДокумента;
				НоваяСтрокаТоваров.НомерСтрокиДляСортировки = НомерСтрокиДляСортировки;
			КонецЕсли;
			
			ТаблицаТоваров.Сортировать("НомерСтрокиДляСортировки");
			ТаблицаТоваров.Колонки.Удалить("НомерСтрокиДляСортировки");
			
		КонецЕсли;
		СтруктураДляВременногоХранилища = Новый Структура;
		СтруктураДляВременногоХранилища.Вставить("ТаблицаТоваров",ТаблицаТоваров);
		
		ТаблицаСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(); 
		
		СтрокиСерийКУдалению = ТаблицаСерий.НайтиСтроки(Новый Структура("Серия",Справочники.СерииНоменклатуры.ПустаяСсылка()));
		
		Для Каждого СтрМас из СтрокиСерийКУдалению Цикл
			ТаблицаСерий.Удалить(СтрМас);
		КонецЦикла;
		
		СтруктураДляВременногоХранилища.Вставить("ТаблицаСерий",ТаблицаСерий);
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДляВременногоХранилища,УникальныйИдентификаторФормы);
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = Новый Структура("Номенклатура,Характеристика,СтатусУказанияСерий,ХарактеристикиИспользуются"+ТекстПоляСвязи);
	ПараметрыФормыУказанияСерий.Вставить("НомераСтрокДокумента", НомераСтрокДокумента); 
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,Объект);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,ТекущиеДанные);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Склад", Неопределено);
	ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Склад", ТекущиеДанные[ПараметрыУказанияСерий.ИмяПоляСклад]);
	Иначе
		ПараметрыФормыУказанияСерий.Вставить("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Помещение") <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Помещение", ТекущиеДанные.Помещение);
	ИначеЕсли ПараметрыУказанияСерий.ИмяПоляПомещение = Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("Помещение", Справочники.СкладскиеПомещения.ПустаяСсылка());
	Иначе
		ПараметрыФормыУказанияСерий.Вставить("Помещение", Объект[ПараметрыУказанияСерий.ИмяПоляПомещение]);
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("УпаковкаДляПодстановки",УпаковкаДляПодстановки);
	
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("РегистрироватьСерии", РегистрироватьСерии);
	ПараметрыФормыУказанияСерий.Вставить("ТолькоПросмотр", ПараметрыУказанияСерий.ТолькоПросмотр);
	ПараметрыФормыУказанияСерий.Вставить("ТолькоРедактированиеКоличества", Ложь);
	ПараметрыФормыУказанияСерий.Вставить("Количество",КоличествоВДокументе);
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("СерииВТЧТовары", ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары);
	Если Объект.Свойство("Ссылка") Тогда
		ПараметрыФормыУказанияСерий.Вставить("Регистратор",Объект.Ссылка);
	КонецЕсли;
	ПараметрыФормыУказанияСерий.Вставить("ПараметрыУказанияСерий",ПараметрыУказанияСерий);
	
	ЗначенияПолейДляОпределенияРаспоряжения = НоменклатураКлиентСервер.ЗначенияПолейДляОпределенияРаспоряжения(Объект,
																							  ТекущиеДанные,
																							  ПараметрыУказанияСерий);

	ПараметрыФормыУказанияСерий.Вставить("ЗначенияПолейДляОпределенияРаспоряжения", ЗначенияПолейДляОпределенияРаспоряжения);
	
	Если РегистрироватьСерии Тогда
		ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.РегистрацияИПодборСерийПоОднойСтрокеТоваров";
	Иначе
		ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ПодборСерийПоОстаткамДляВсехСтрокТоваров";
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("ИмяФормы", ИмяФормы);
	
	Если ЗначениеЗаполнено(ЗаголовокКолонкиКоличество) Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗаголовокКолонкиКоличество", ЗаголовокКолонкиКоличество);
	КонецЕсли;
	
	Возврат ПараметрыФормыУказанияСерий;
	
КонецФункции

// Процедура извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" документа,
// перерасчитывает статусы указания серий строках товаров
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы документа
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//      ПараметрыФормыУказанияСерий - структура, которая была передана в форму редактирования серий как параметры формы
Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, Действия = Неопределено, КешированныеЗначения = Неопределено) Экспорт
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
	
#Область ОбработкаПодбораСерий
	//Если обрабатывается результаты формы подбора серий,
	//то серии целиком загружаются из обработки
	
	Если Не ПараметрыФормыУказанияСерий.РегистрироватьСерии Тогда 
		
		СтруктураВозврата = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
		
		Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
			
			ЗаполнитьСерииВТЧПоТаблицеСерий(Объект,
											ПараметрыУказанияСерий,
											СтруктураВозврата.ТаблицаСерий,
											Действия);
			
		Иначе
			Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Загрузить(СтруктураВозврата.ТаблицаСерий);
			ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		КонецЕсли;
		
		
		Возврат;
	КонецЕсли;
#КонецОбласти	

#Область ОбработкаРегистрацииСерий
//Удалим прежние строки серий
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);

	НомерВставляемойСтроки = 0;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ПараметрыФормыУказанияСерий);
	НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	КоличествоУпаковокДоУдаленияСерий = 0;
	
	ТаблицаСерий = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	
	Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
		
		Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
			КоличествоУпаковокДоУдаленияСерий = КоличествоУпаковокДоУдаленияСерий + СтрМас.КоличествоУпаковок;
		КонецЕсли;
		
		Если ТаблицаСерий.НайтиСтроки(Новый Структура("Серия", СтрМас.Серия)).Количество() = 0 Тогда 
			Если НомерВставляемойСтроки = 0 Тогда
				НомерВставляемойСтроки = СтрМас.НомерСтроки;
			КонецЕсли;
			Если ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества Тогда
				СтрМас[ПараметрыУказанияСерий.ИмяПоляКоличество] = 0;
			Иначе
				Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(СтрМас);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Добавим новые строки серий
	СтрокиСерийДляОбработки =  Новый Массив;	
	
	КоличествоУпаковокПослеУдаленияСерий = 0;
	
	Для Каждого СтрТабл из ТаблицаСерий Цикл
		СтруктураПоискаПоСериям = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоиска);
		СтруктураПоискаПоСериям.Вставить("Серия", СтрТабл.Серия);
		
		СтарыеСтроки = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаПоСериям);
		
		Если СтарыеСтроки.Количество() = 0 Тогда 
			Если НомерВставляемойСтроки = 0 Тогда
				НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
			Иначе
				НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Вставить(НомерВставляемойСтроки - 1);
			КонецЕсли;
		Иначе
			НоваяСтрока = СтарыеСтроки[0];
		КонецЕсли;
		НомерВставляемойСтроки = НоваяСтрока.НомерСтроки + 1;
			
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыФормыУказанияСерий);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
		
		Если ПараметрыУказанияСерий.ИмяПоляКоличество <> "Количество"
			И ПараметрыУказанияСерий.ИмяПоляКоличество <> "КоличествоУпаковок" Тогда
			Если ЕстьУпаковки Тогда
				НоваяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрТабл.КоличествоУпаковок;
			Иначе
				НоваяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрТабл.Количество;
			КонецЕсли;
		КонецЕсли;  
		
		СтрокиСерийДляОбработки.Добавить(НоваяСтрока);
		
		Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
			
			Если Действия <> Неопределено Тогда
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, КешированныеЗначения);
				
			КонецЕсли;
			
			КоличествоУпаковокПослеУдаленияСерий = КоличествоУпаковокПослеУдаленияСерий + НоваяСтрока.КоличествоУпаковок; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары Тогда
		
		Дельта = КоличествоУпаковокПослеУдаленияСерий - КоличествоУпаковокДоУдаленияСерий;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") 
			И ЕстьУпаковки Тогда
			ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(ПараметрыФормыУказанияСерий.Номенклатура,
																					ПараметрыФормыУказанияСерий.Упаковка); 
			
			Для Каждого СтрТабл из ТаблицаТары Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", СтрТабл.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", СтрТабл.Характеристика);
				
				СтрокиТары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиТары.Количество() = 0 Тогда
					//Если форма указания серий была открыта после сканирования штрихкода товара,
					//то тара была добавлена в документ обработкой сканирования штрихкода.
					//Значит это условие может отработать только при ручном открытии формы серий, что эквивалентно
					//ручному редактированию количества товаров.
					//При ручном радактировании количества товаров мы тару не пересчитываем.
					Продолжить;	
				Иначе
					СтрокаТары = СтрокиТары[0];
				КонецЕсли;
				
				СтрокаТары.Количество         = СтрокаТары.Количество + Дельта * СтрТабл.Количество;
				СтрокаТары.КоличествоУпаковок = СтрокаТары.Количество;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ЕстьУпаковки
		И ЗначениеЗаполнено(ПараметрыФормыУказанияСерий.Упаковка) Тогда //не заполнена для тары
		КоличествоСерий = ТаблицаСерий.Итог("КоличествоУпаковок");
		КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество 
							/Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ПараметрыФормыУказанияСерий.Упаковка, ПараметрыФормыУказанияСерий.Номенклатура); 
	Иначе
		КоличествоСерий = ТаблицаСерий.Итог("Количество");
		КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество;
	КонецЕсли;	
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров);
		
		НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																			Объект.СтатусУказанияСерий,
																			СерииУказаныПолностью,
																			КоличествоСерий);
		
	Иначе
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
		
		Если КоличествоСерий <> КоличествоТоваров 
			И Действия <> Неопределено
			И Действия.Свойство("ОбновлятьКоличествоТоваровПриРегистрацииСерий")
			И Действия.ОбновлятьКоличествоТоваровПриРегистрацииСерий Тогда
			
			ЕстьПересчетКоличества = Ложь;
			КоличествоЕдиницСуффикс = "";
			
			Если Действия.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
				Действия.Удалить("ПересчитатьКоличествоЕдиниц");
				ЕстьПересчетКоличества = Истина;
			ИначеЕсли Действия.Свойство("ПересчитатьКоличествоЕдиницСуффикс") Тогда
				КоличествоЕдиницСуффикс = Действия.ПересчитатьКоличествоЕдиницСуффикс;
				Действия.Удалить("ПересчитатьКоличествоЕдиницСуффикс");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			Если Действия.Свойство("ПересчитатьКоличествоУпаковок") Тогда
				Действия.Удалить("ПересчитатьКоличествоУпаковок");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			КоличествоКРаспределению = КоличествоСерий - КоличествоТоваров;
			
			Для Каждого СтрокаТоваров из НайденныеСтрокиТоваров Цикл
				Дельта = КоличествоКРаспределению;
				
				Если -Дельта > СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] Тогда
					Дельта = -СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество];
					СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] = 0;
				Иначе
					СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] = СтрокаТоваров[ПараметрыУказанияСерий.ИмяПоляКоличество] + Дельта;
				КонецЕсли;
				
				Если ЕстьПересчетКоличества Тогда
					Если ЕстьУпаковки Тогда
						Если КоличествоЕдиницСуффикс <> "" Тогда
							Действия.Вставить("ПересчитатьКоличествоЕдиницСуффикс", КоличествоЕдиницСуффикс);
						Иначе
							Действия.Вставить("ПересчитатьКоличествоЕдиниц");
						КонецЕсли; 
					Иначе
						Если КоличествоЕдиницСуффикс <> "" Тогда
							Действия.Вставить("ПересчитатьКоличествоУпаковокСуффикс", КоличествоЕдиницСуффикс);
						Иначе
							Действия.Вставить("ПересчитатьКоличествоУпаковок");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				КоличествоТоваров = КоличествоТоваров + Дельта;
				
				КоличествоКРаспределению = КоличествоКРаспределению - Дельта;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, Действия, КешированныеЗначения);
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару")
					// В документах, в строках которых нет упаковки, и тару добавлять не нужно (т.к. ее нельзя корректно рассчитать)
					И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТоваров, "Упаковка") Тогда
					
					ТаблицаТары = МногооборотнаяТараСервер.МногооборотнаяТараНоменклатуры(СтрокаТоваров.Номенклатура, СтрокаТоваров.Упаковка); 
					
					Для Каждого СтрТабл из ТаблицаТары Цикл
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Номенклатура", СтрТабл.Номенклатура);
						СтруктураПоиска.Вставить("Характеристика", СтрТабл.Характеристика);
						
						СтрокиТары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
						
						Если СтрокиТары.Количество() = 0 Тогда
							//Если форма указания серий была открыта после сканирования штрих-кода товара,
							//то тара была добавлена в документ обработкой сканирования штрих-кода.
							//Это условие может отработать только при ручном открытии формы серий, что эквивалентно
							//ручному редактированию количества товаров. При ручном редактировании количества
							//товаров мы тару не пересчитываем.
							Продолжить;	
						Иначе
							СтрокаТары = СтрокиТары[0];
						КонецЕсли;
						
						//Написано неувиверсально, т.к. во всех документах, в которых есть тара, поля "Количество" называются стандартно
						СтрокаТары.Количество         = СтрокаТары.Количество + Дельта * СтрТабл.Количество;
						СтрокаТары.КоличествоУпаковок = СтрокаТары.Количество;
						
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТары, Действия, КешированныеЗначения);

					КонецЦикла;
					
				КонецЕсли;
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров
			И (КоличествоТоваров > 0
				Или ПараметрыФормыУказанияСерий.ТолькоРедактированиеКоличества));
		 // В режиме ТолькоРедактированиеКоличества допускается нулевое количество как в ТЧ Товары, так и в ТЧ Серии.
		Для Каждого СтрМас из НайденныеСтрокиТоваров Цикл
				
			Если СтрМас.СтатусУказанияСерий = 0 Тогда
				ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий, НайденныеСтрокиТоваров, СтрокиСерийДляОбработки);
				Прервать;
			КонецЕсли;
		
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																					СтрМас.СтатусУказанияСерий,
																					СерииУказаныПолностью,
																					КоличествоСерий);
			Иначе
				
				Для Каждого ИмяПоляСтатус из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					НоменклатураКлиентСервер.ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий,
																						СтрМас[ИмяПоляСтатус],
																						СерииУказаныПолностью,
																						КоличествоСерий);
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
#КонецОбласти	

КонецПроцедуры

//Возвращает параметры указания серий для товаров, указанных в документе
//Параметры
//			Объект - ДокументОбъект или ДанныеФормыСтруктура - документ, для которого нужно сфомировать параметры проверки
//Возвращаемое значение
//			Тип Структура
//				Состав полей определяется требованиями фукнции ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий
Функция ПараметрыУказанияСерий(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий();
	ЗначенияРеквизитов = ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов);
	Возврат МенеджерОбъекта.ПараметрыУказанияСерий(ЗначенияРеквизитов);
	
КонецФункции

//Сохраняет режим сканирования серий. Используется для того, чтобы режим сканирования был един для всех форм
//
// Параметры:
//		Форма - УправляемаяФорма - форма, в которой должен быть реквизит строкового типа РежимСканированияСерий
//
Процедура СохранитьНастройкуРежимСканированияСерий(Форма) Экспорт
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("РежимСканированияСерий","",Форма.РежимСканированияСерий);
	
КонецПроцедуры

//Загружает из настроек режим сканирования серий. Если настройка не была ранее сохранена, то используется режим ТоварВсеСерии
//
// Параметры:
//		Форма - УправляемаяФорма - форма, в которой должен быть реквизит строкового типа РежимСканированияСерий
//
Процедура ЗагрузитьНастройкуРежимСканированияСерий(Форма) Экспорт
	
	Форма.РежимСканированияСерий = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("РежимСканированияСерий",,"ТоварВсеСерии");
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Получает служебные реквизиты по номенклатуре в структуре
//
// Параметры:
// 		СтруктураДанных - Структура, СтрокаТаблицыЗначений - Структура данных, в которой необходимо заполнить поля
// 		Реквизиты - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(СтруктураДанных, СтруктураДействий) Экспорт
	
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий);
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Для Каждого Источник Из СтруктураДопДанных.СтруктураИсточников Цикл
		Если Источник.Ключ = "Упаковка" Тогда
			ТаблицаВыгрузки.Колонки.Добавить(Источник.Ключ, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		Иначе
			ТаблицаВыгрузки.Колонки.Добавить(Источник.Ключ, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ТаблицаВыгрузки.Добавить(), СтруктураДанных);
	
	Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос.УстановитьПараметр("КоллекцияДанных", ТаблицаВыгрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВСтруктуре()

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначний - Таблица, в которой необходимо заполнить реквизиты
// 		Реквизиты - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
// 		СтрокиЗаполнения - Массив ДанныеФормыЭлементКоллекции - строки, для которых требуется заполнение
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, СтруктураДействий, СтрокиЗаполнения = Неопределено) Экспорт
	
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий);
	
	Если СтрокиЗаполнения = Неопределено Тогда
		ПараметрКоллекция = КоллекцияДанных.Выгрузить( ,"НомерСтроки" + СтруктураДопДанных.РеквизитыВыгрузки);
	ИначеЕсли СтрокиЗаполнения.Количество() > 0 Тогда
		ПараметрКоллекция = КоллекцияДанных.Выгрузить(СтрокиЗаполнения ,"НомерСтроки" + СтруктураДопДанных.РеквизитыВыгрузки);
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос.УстановитьПараметр("КоллекцияДанных", ПараметрКоллекция);
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		
		ТЗРезультат = Запрос.Выполнить().Выгрузить();
		Для Каждого Стр Из ТЗРезультат Цикл
			ЗаполнитьЗначенияСвойств(КоллекцияДанных[Стр.Номерстроки - 1], Стр, СтруктураДопДанных.РеквизитыЗаполнения);
		КонецЦикла;
		
	Иначе
		
		Выборка = Запрос.Выполнить().Выбрать();
		Для Н=0 По КоллекцияДанных.Количество()-1 Цикл
			Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
			ЗаполнитьЗначенияСвойств(КоллекцияДанных[Н], Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВКоллекции()

// Процедура заполнения колонок "ХарактеристикиИспользуются" в формах.
// Параметры:
//	ТаблицаФормы - ДанныеФормыКоллекция
//	ПараметрыЗаполнения - структура
//		возможное поле (необязательное):
//  СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты,
//						например, "Оприходование", если в ТЧ помимо "Номенклатура" и "Характеристика" есть еще
//						"НоменклатураОприходование" и "ХарактеристикаОприходование"
Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы,ПараметрыЗаполнения = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	Если ТаблицаФормы.Количество() = 0
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
	|	ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),	
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))	
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																											ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
	
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл из ТаблицаФормы Цикл
		
		СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливаем условное оформление для назначений номенклатуры
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаНазначения - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика"
// 		ПутьКПолюОтбораТипНоменклатуры - Строка - Полный путь к реквизиту "Тип номенклатуры",
//									если он отличается от "Объект.Товары.ТипНоменклатуры"
// 
Процедура УстановитьУсловноеОформлениеНазначенияНоменклатуры(Форма,
	                                                            ИмяПоляВводаНазначения = "ТоварыНазначение",
																ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры",
																ТолькоТовары = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНазначения].Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	
	Если ТолькоТовары Тогда
		Текст = НСтр("ru='<для товаров>';uk='<для товарів>'");
	Иначе
		Текст = НСтр("ru='<для товаров и работ>';uk='<для товарів і робіт>'");
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
КонецПроцедуры

// Устанавливаем условное оформление для характеристик номенклатуры
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаХарактеристики - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "характеристики используются",
//									если он отличается от "Объект.Товары.ХарактеристикиИспользуются"
// 
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
																ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливаем условное оформление для серий номенклатуры
//
// Параметры:
// 		Форма - Форма - Содержит данную форму
//		ОсобыйВариантУказанияСерий - Булево, Строка - Ложь, если серии указываются в отдельной ТЧ,
//			"СерииВсегдаВТЧТовары" - если у объекта нет специальной ТЧ для указания серий,
//			"СерииПриПланированииОтгрузкиУказываютсяВТЧТовары" - если серии могут указываться в разных ТЧ,
//				при этом серии с политикой учета "При планировании отгрузки" указываются в ТЧ Товары,
// 		ИмяПоляВводаСерии - Строка - Наименование элемента формы, содержащего серии номенклатуры,
//									   если оно отличается от "ТоварыСерия"
// 		ПутьКПолюОтбораСтатусУказанияСерий - Строка - Полный путь к реквизиту "Статус указания серий",
//														если он отличается от "Объект.Товары.СтатусУказанияСерий"
// 		ПутьКПолюОтбораТипНоменклатуры - Строка - Полный путь к реквизиту "Тип номенклатуры",
//														если он отличается от "Объект.Товары.ТипНоменклатуры"
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ОсобыйВариантУказанияСерий,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	СерииВсегдаВТЧТовары = (ОсобыйВариантУказанияСерий = "СерииВсегдаВТЧТовары");
	СерииПриПланированииОтгрузкиУказываютсяВТЧТовары = (ОсобыйВариантУказанияСерий = "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
														
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	СписокТиповДляСерий = Новый СписокЗначений;
	СписокТиповДляСерий.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокТиповДляСерий.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	//Для товаров
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСерии].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповДляСерий;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Серия не указывается
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСерии].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповДляСерий;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<серия не указывается>';uk='<серія не зазначається>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Если Не СерииВсегдаВТЧТовары Тогда
		//Серия указывается отдельно
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСерии].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ОтборЭлемента.ПравоеЗначение = 1;
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		
		Если СерииПриПланированииОтгрузкиУказываютсяВТЧТовары Тогда
			ОтборЭлемента.ПравоеЗначение = 8;
		Иначе
			ОтборЭлемента.ПравоеЗначение = 11;
		КонецЕсли;
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокТиповДляСерий;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<серия указывается отдельно>';uk='<серія зазначається окремо>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Иначе
		//Серия указывается в ТЧ Товары
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСерии].Имя);
		
		СписокСтатусовСерий = Новый СписокЗначений;
		СписокСтатусовСерий.ЗагрузитьЗначения(НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());
	
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокСтатусовСерий;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливаем условное оформление для единиц измерения номенклатуры
//
// Параметры:
// 		Форма - Форма - Содержит данную форму
// 		ИмяПоляВводаЕдиницИзмерения - Строка - Наименование элемента формы, содержащего ед. измерения номенклатуры,
//									   			если оно отличается от "ТоварыНоменклатураЕдиницаИзмерения"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "Упаковка",
//									если он отличается от "Объект.Товары.Упаковка"
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
													  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
													  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаЕдиницИзмерения].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);	
	
КонецПроцедуры

// Устанавливаем условное оформление содержания в зависимости от варианта оформления продажи
//
// Параметры:
// 		Форма - Форма - Содержит данную форму
// 		ИмяПоляВводаСодержания - Строка - Наименование элемента формы "Содержание",
//									   		если оно отличается от "ТоварыСодержание"
// 		ИмяПоляВводаУпаковки - Строка - Наименование элемента формы "Упаковка",
//									   		если оно отличается от "ТоварыУпаковка"
// 		ПутьКПолюОтбораВариантаОформления - Строка - Полный путь к реквизиту "ВариантОформленияПродажи",
//														если он отличается от "Объект.Товары.ВариантОформленияПродажи"
// 		ПутьКПолюОтбораСодержания - Строка - Полный путь к реквизиту "Содержание",
//												если он отличается от "Объект.Товары.Содержание"
//
Процедура УстановитьУсловноеОформлениеСодержания(Форма,
												 ИмяПоляВводаСодержания = "ТоварыСодержание",
												 ИмяПоляВводаУпаковки = "ТоварыУпаковка",
												 ПутьКПолюОтбораВариантаОформления = "Объект.Товары.ВариантОформленияПродажи",
												 ПутьКПолюОтбораСодержания = "Объект.Товары.Содержание") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСодержания].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораВариантаОформления);
	Если ПутьКПолюОтбораВариантаОформления = "Объект.Товары.ВариантОформленияПродажи" Тогда
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;
	Иначе
		СписокТиповВариантыОформленияПродажи = Новый СписокЗначений;
		СписокТиповВариантыОформленияПродажи.Добавить(Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		СписокТиповВариантыОформленияПродажи.Добавить(Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокТиповВариантыОформленияПродажи;
	КонецЕсли;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для работ>';uk='<для робіт>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", ПолучитьФункциональнуюОпцию("НеБазоваяВерсия"));
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСодержания].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораВариантаОформления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСодержания);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);	
	
	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаУпаковки].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораВариантаОформления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

// Устанавливаем условное оформление номеров ГТД
//
// Параметры:
// 		Форма - Форма - Содержит данную форму
// 		ИмяПоляВводаНомераГТД - Строка - Наименование элемента формы, содержащего номер ГТД,
//									   		если оно отличается от "ТоварыНомерГТД"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "ВедетсяУчетПоГТД",
//										если он отличается от "Объект.Товары.ВедетсяУчетПоГТД"
//
Процедура УстановитьУсловноеОформлениеНомераГТД(Форма,
												ИмяПоляВводаНомераГТД = "ТоварыНомерГТД",
												ПутьКПолюОтбора = "Объект.Товары.ВедетсяУчетПоГТД") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНомераГТД].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<УКТВЭД и ГТД не используются>';uk='<УКТЗЕД та ВМД не використовуються>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаНомераГТД].Имя);

	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Устанавливаем условное оформление для статусов указания серий
//
// Параметры:
// 		Форма - Форма - Содержит данную форму
//		СерииВсегдаВТЧТовары - Булево - Истина, если у объекта нет специальной ТЧ для указания серий
// 		ИмяПоляВводаСтатусаУказанияСерий - Строка - Наименование элемента формы, содержащего статус указания
//									   				серии номенклатуры,если оно отличается от "ТоварыСтатусУказанияСерий"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "СтатусУказанияСерий",
//									если он отличается от "Объект.Товары.СтатусУказанияСерий"
//
Процедура УстановитьУсловноеОформлениеСтатусовУказанияСерий(Форма,
															СерииВсегдаВТЧТовары,	
													  		ИмяПоляВводаСтатусаУказанияСерий = "ТоварыСтатусУказанияСерий",
													 		ПутьКПолюОтбора = "Объект.Товары.СтатусУказанияСерий") Экспорт
	
	Если СерииВсегдаВТЧТовары Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Возврат;
		КонецЕсли;												
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад") Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаСтатусаУказанияСерий].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда, ИмяРеквизита = "")
	
	ШаблонСообщенияОбОшибке =
		НСтр("ru='Невозможно рассчитать наименование по шаблону.
                   |Ошибка в имени операнда ""%ИмяОперанда%"".'
                   |;uk='Неможливо розрахувати найменування за шаблоном.
                   |Помилка в імені операнда ""%ИмяОперанда%"".'");
	ТекстСообщенияОбОшибке  =
		СтрЗаменить(ШаблонСообщенияОбОшибке, "%ИмяОперанда%", ИмяОперанда + ?(ИмяРеквизита = "", "", ":" + ИмяРеквизита));
	
	ВызватьИсключение ТекстСообщенияОбОшибке;
	
КонецПроцедуры

#Область ПроцедурыРаботыССериями

Функция ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий,
													ТаблицаТовары,
													ТаблицаСерии,
													Склад, //Если склады в ТЧ, то параметр игнорируется
													СтрокиТоваровДляОбработки = Неопределено,
													СтрокиСерийДляОбработки = Неопределено)
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);												
	
	ТекстЗапроса =	МодульМенеджера.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если ТипЗнч(Склад) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("СкладОтправитель", Склад.Отправитель);
		Запрос.УстановитьПараметр("СкладПолучатель", Склад.Получатель);
	Иначе
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("СкладОтправитель", Склад);
		Запрос.УстановитьПараметр("СкладПолучатель", Склад);
	КонецЕсли;
	                         
 	УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий);
	
	Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоварыПараметрЗапроса = ТаблицаТовары;
	Иначе
		Если СтрокиТоваровДляОбработки <> Неопределено Тогда
			ТаблицаТоварыПараметрЗапроса = ТаблицаТовары.Выгрузить(СтрокиТоваровДляОбработки);
		Иначе
			ТаблицаТоварыПараметрЗапроса = ТаблицаТовары.Выгрузить();
		КонецЕсли;
	КонецЕсли;			
	
	Если ТипЗнч(ТаблицаСерии) = Тип("ТаблицаЗначений") Тогда
		ТаблицаСерииПараметрЗапроса = ТаблицаСерии;
	Иначе
		Если СтрокиСерийДляОбработки <> Неопределено Тогда
			ТаблицаСерииПараметрЗапроса = ТаблицаСерии.Выгрузить(СтрокиСерийДляОбработки);
		Иначе
			ТаблицаСерииПараметрЗапроса = ТаблицаСерии.Выгрузить();
		КонецЕсли;			
	КонецЕсли;
	
 	Запрос.УстановитьПараметр("Товары", ТаблицаТоварыПараметрЗапроса);
	Запрос.УстановитьПараметр("Серии", ТаблицаСерииПараметрЗапроса);
	
	УстановитьПривилегированныйРежим(Истина); // В перемещении товаров один из складов может быть недоступен пользователю
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов)
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
	Иначе
		Структура = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Структура, Объект);
	КонецЕсли;
	Если Структура.Свойство("Дата") И НЕ ЗначениеЗаполнено(Структура.Дата) Тогда
		Структура.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Структура.Свойство("ДатаОтгрузки") И НЕ ЗначениеЗаполнено(Структура.ДатаОтгрузки) Тогда
		Структура.ДатаОтгрузки = ТекущаяДатаСеанса();
	КонецЕсли;
	Возврат Структура;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий)
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Ложь);
	КонецЕсли;
		
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаНаВнутренниеНужды", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаНаВнутренниеНужды", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПрочемуОприходованию) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Ложь);            
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаСобранныхКомплектов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаКомплектующихПослеРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеИзлишков) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеНедостач) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеНедостач", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеНедостач", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеПорчи) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеПорчи", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеПорчи", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.Пересчет) <> Неопределено Тогда
		Запрос.УстановитьПараметр("Пересчет", Истина);
	Иначе
		Запрос.УстановитьПараметр("Пересчет", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеРезультатовПересчетов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтборИзЯчеек) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтборИзЯчеек", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтборИзЯчеек", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.КонтрольОтгрузки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("КонтрольОтгрузки", Истина);
	Иначе
		Запрос.УстановитьПараметр("КонтрольОтгрузки", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.РазмещениеВЯчейки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("РазмещениеВЯчейки", Истина);
	Иначе
		Запрос.УстановитьПараметр("РазмещениеВЯчейки", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПеремещениеМеждуПомещениями) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПеремещениеМеждуПомещениями", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПеремещениеМеждуПомещениями", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПродукцииИзПроизводства", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПродукцииИзПроизводства", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПередачаВПроизводствоОтгрузка", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПередачаВПроизводствоОтгрузка", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПередачаВПроизводствоПриемка) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПередачаВПроизводствоПриемка", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПередачаВПроизводствоПриемка", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещениюВПроизводстве) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещениюВПроизводстве", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещениюВПроизводстве", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПеремещениюВПроизводстве) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПеремещениюВПроизводстве", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПеремещениюВПроизводстве", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ВозвратИзПроизводстваНаСклад) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВозвратИзПроизводстваНаСклад", Истина);
	Иначе
		Запрос.УстановитьПараметр("ВозвратИзПроизводстваНаСклад", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.СписаниеМатериаловНаЗатраты) <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписаниеМатериаловНаЗатраты", Истина);
	Иначе
		Запрос.УстановитьПараметр("СписаниеМатериаловНаЗатраты", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.РасходМатериаловПриВыполненииМаршрутныхЛистов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("РасходМатериаловПриВыполненииМаршрутныхЛистов", Истина);
	Иначе
		Запрос.УстановитьПараметр("РасходМатериаловПриВыполненииМаршрутныхЛистов", Ложь);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ПланированиеОтгрузки", ПараметрыУказанияСерий.ПланированиеОтгрузки);
	
	Запрос.УстановитьПараметр("ПланированиеОтбора", ПараметрыУказанияСерий.ПланированиеОтбора);
	
	Запрос.УстановитьПараметр("ФактОтбора", ПараметрыУказанияСерий.ФактОтбора);
	
	Запрос.УстановитьПараметр("ПроверкаОтбора", ПараметрыУказанияСерий.ПроверкаОтбора);              
	
	Запрос.УстановитьПараметр("ПодготовкаОрдера", ПараметрыУказанияСерий.ПодготовкаОрдера);
	
	Запрос.УстановитьПараметр("ТолькоСерииДляСебестоимости", ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости);
	
	Запрос.УстановитьПараметр("Дата", ПараметрыУказанияСерий.Дата);
	
	Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение",ПараметрыУказанияСерий.ИспользоватьАдресноеХранение);
	
	Запрос.УстановитьПараметр("Дата", ПараметрыУказанияСерий.Дата);
	Запрос.УстановитьПараметр("ТоварВШапке", ПараметрыУказанияСерий.ТоварВШапке);
	
	Запрос.УстановитьПараметр("ТолькоСерииСУчетомОстатков", ПараметрыУказанияСерий.ТолькоСерииСУчетомОстатков);
	
	Запрос.УстановитьПараметр("Спецификация", ПараметрыУказанияСерий.Спецификация);
	
КонецПроцедуры


// Настраивает отбор в параметрах по другим параметрам. Вызывается из обработки получения данных выбора
// и при создании формы выбора политик учета серий
//
// Параметры:
//  Параметры - Структура - или параметры формы выбора политик учета серий, или параметр обработчика ПриПолученииДанныхВыбора модуля
//							менеджера политик учета серий
//
Процедура НастроитьОтборВПараметрахПолитикУчетаСерий(Параметры) Экспорт
	
	ИспользоватьСерии = Ложь;
	
	Если Не Параметры.Свойство("ИспользоватьСерии", ИспользоватьСерии) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьСерии Тогда
		Возврат;
	КонецЕсли;
	
	МассивДопустимыхТиповПолитик = ДопустимыеТипыПолитикУчетаСерий(Параметры);

	Параметры.Отбор.Вставить("ТипПолитики", Новый ФиксированныйМассив(МассивДопустимыхТиповПолитик));
	
	Склад = Неопределено;
	
	Параметры.Свойство("Склад", Склад);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
			
			Параметры.Отбор.Вставить("ДляСклада", Истина);
			Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(Склад) Тогда
				Параметры.Отбор.Вставить("УказыватьПриОтраженииИзлишков", Ложь);
				Параметры.Отбор.Вставить("УказыватьПриОтраженииНедостач", Ложь);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Параметры.Отбор.Вставить("ДляПроизводства", Истина);
		КонецЕсли;
	Иначе
		Если Параметры.Свойство("ДляСклада") Тогда
			Параметры.Отбор.Вставить("ДляСклада", Истина);
			Если СкладыСервер.ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач() Тогда
				Параметры.Отбор.Вставить("УказыватьПриОтраженииИзлишков", Ложь);
				Параметры.Отбор.Вставить("УказыватьПриОтраженииНедостач", Ложь);
			КонецЕсли;
		ИначеЕсли Параметры.Свойство("ДляПроизводства")	Тогда
			Параметры.Отбор.Вставить("ДляПроизводства", Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Функция возвращает массив типов политик учета серий в зависимости от шаблона серий номенклатуры
//
Функция ДопустимыеТипыПолитикУчетаСерий(Параметры) Экспорт
	
	МассивДопустимыхТиповПолитик = Новый Массив;
	
	Если Не Параметры.ИспользоватьСерии Тогда
		Возврат МассивДопустимыхТиповПолитик;
	КонецЕсли;
	
	Если Параметры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		
		МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий);
		
	ИначеЕсли  Параметры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		
		Если Параметры.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
			
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий);
			
        ИначеЕсли Параметры.ИспользоватьСрокГодностиСерии Тогда    
			
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УправлениеПоFEFOОстаткамиСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УчетСебестоимостиПоСериям);
			
		Иначе	
			
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий);
			МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.УчетСебестоимостиПоСериям);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивДопустимыхТиповПолитик;
		
КонецФункции

// Определяет, есть ли вид, для которого серии одинаково учитываются на всех складах по политике, для которой нужна ордерная схема
// Возвращаемое значение:
//  Булево
//
Функция ЕстьВидНоменклатурыТребующийОбязательностиОрдернойСхемыПоИзлишкамНедостачам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	НЕ ВидыНоменклатуры.ЭтоГруппа
	|	И ВидыНоменклатуры.ЕдинаяНастройкаСерийДляСкладов
	|	И (ВидыНоменклатуры.ПолитикаУчетаСерийДляСкладов.УказыватьПриОтраженииНедостач
	|			ИЛИ ВидыНоменклатуры.ПолитикаУчетаСерийДляСкладов.УказыватьПриОтраженииИзлишков)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, Таблица, Знач Метаданные = Неопределено, ЭтоТаблицаСерий = Ложь) Экспорт
	
	Если Метаданные = Неопределено Тогда
		Метаданные = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		МетаданныеРеквизитовТЧТовары = Метаданные.Реквизиты;
	Иначе
		МетаданныеРеквизитовТЧТовары = Метаданные.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты;
	КонецЕсли;	
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		Если Таблица.Колонки.Найти(СтрМас) = Неопределено Тогда
			Таблица.Колонки.Добавить(СтрМас,МетаданныеРеквизитовТЧТовары[СтрМас].Тип);
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоТаблицаСерий Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
		Если Таблица.Колонки.Найти(СтрМас) = Неопределено Тогда
			Таблица.Колонки.Добавить(СтрМас,МетаданныеРеквизитовТЧТовары[СтрМас].Тип);
		КонецЕсли;
	КонецЦикла;

	Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
		Если Таблица.Колонки.Найти("Отменено") = Неопределено Тогда
			Таблица.Колонки.Добавить("Отменено",Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		Если Таблица.Колонки.Найти("ВариантОбеспечения") = Неопределено Тогда
			Таблица.Колонки.Добавить("ВариантОбеспечения",Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		Если Таблица.Колонки.Найти("СтатусУказанияСерий") = Неопределено Тогда
			Таблица.Колонки.Добавить("СтатусУказанияСерий",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
		КонецЕсли;
	Иначе
		Для Каждого СтрМас из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			Если Таблица.Колонки.Найти(СтрМас) = Неопределено Тогда
				Таблица.Колонки.Добавить(СтрМас,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСерииВТЧПоТаблицеСерий(Объект, ПараметрыУказанияСерий, Серии, Действия) Экспорт
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
	
	СвернутаяТаблицаТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика"+ТекстПоляСвязи);
	СвернутаяТаблицаТоваров.Свернуть("Номенклатура,Характеристика"+ТекстПоляСвязи);
	
	Для Каждого СтрТабл из СвернутаяТаблицаТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрТабл);
		
		НайденныеСтрокиСерий = Серии.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиСерий.Количество() > 0 Тогда
			
			НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
			НомерПервойУдаляемойСтроки = 0;
			Для Каждого СтрМас из НайденныеСтрокиТоваров Цикл
				
				Если НомерПервойУдаляемойСтроки = 0 Тогда
					НомерПервойУдаляемойСтроки = СтрМас.НомерСтроки;
				КонецЕсли;
				
				Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Удалить(СтрМас);	
				
			КонецЦикла;
			
			Индекс = 0;
			
			Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
				
				Если НомерПервойУдаляемойСтроки = 0 Тогда
					НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Добавить();
				Иначе
					НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Вставить(НомерПервойУдаляемойСтроки - 1 + Индекс);
					Индекс = Индекс + 1;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, Действия, Неопределено);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

// Возвращает значение константы
//
// Параметры:
//  ТипИзмеряемойВеличиныСтрока	 - Строка - тип измеряемой величины строкой
// 
// Возвращаемое значение:
//   СправочникСсылка.УпаковкиЕдиницыИзмерения 
//
Функция ЕдиницаИзмеренияПоУмолчанию(ТипИзмеряемойВеличиныСтрока) Экспорт
	
	Если ТипИзмеряемойВеличиныСтрока = "Вес" Тогда
		Значение = Константы.ЕдиницаИзмеренияВеса.Получить();
	ИначеЕсли ТипИзмеряемойВеличиныСтрока = "Объем" Тогда
		Значение = Константы.ЕдиницаИзмеренияОбъема.Получить();
	ИначеЕсли ТипИзмеряемойВеличиныСтрока = "Площадь" Тогда
		Значение = Константы.ЕдиницаИзмеренияПлощади.Получить();
	ИначеЕсли ТипИзмеряемойВеличиныСтрока = "Длина" Тогда 
		Значение = Константы.ЕдиницаИзмеренияДлины.Получить();
	Иначе
		Значение = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ПрограммныйИнтерфейс

// Функция возвращает, имя дополнительной колонки, выводимой в таблицу товаров
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	ДопКолонка =  Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Возврат "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		Возврат "Код";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ИмяДополнительнойКолонки()

// Возвращает строку со сводным описанием организации / контрагента / физ.лица.
//
// Параметры: 
//  СписокСведений - Структура - значения параметров организации, формируется функцией СведенияОЮрФизЛице()
//  Список         - Строка - перечень запрашиваемых параметров организации, разделенных запятыми
//  СПрефиксом     - Булево - признак вывода префикса параметра организации
//  КодЯзыка       - Строка - код языка, на котором формируется описание организации
//
// Возвращаемое значение:
//  Строка - описание организации / контрагента / физ.лица
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, КодЯзыка = "ru") Экспорт	
	
	Если ПустаяСтрока(Список) Тогда
		// Формат описания по умолчанию
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,ИнформацияОСтатусеПлательщикаНалогов";
	КонецЕсли;
	
	Список = СтрЗаменить(Список, "НомерСчета,Банк,МФО", "ПредставлениеБанковскогоСчета");
	СписокСведений.Вставить("ПредставлениеБанковскогоСчета", ПолучитьОписаниеБанковскогоСчета(СписокСведений, КодЯзыка));
	
	Результат = "";
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", 			" ");
	СоответствиеПараметров.Вставить("СокращенноеНаименование",		" ");
	СоответствиеПараметров.Вставить("НаименованиеДляПечатныхФорм", 	" ");
	
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ",        					НСтр("ru='код по ЕГРПОУ ';uk='код за ЄДРПОУ '",	КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоДРФО",          					НСтр("ru='код по ГРФЛ ';uk='код за ДРФО '",		КодЯзыка));
	СоответствиеПараметров.Вставить("ИНН",                					НСтр("ru='ИНН ';uk='ІПН '",						КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСвидетельства", 					НСтр("ru='№ свид. ';uk='№ свід.  '",			КодЯзыка));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   					НСтр("ru='юр. адрес: ';uk='юр. адреса: '",		КодЯзыка));
	СоответствиеПараметров.Вставить("ФактическийАдрес",   					НСтр("ru='адрес: ';uk='адреса: '",				КодЯзыка));
	СоответствиеПараметров.Вставить("Телефоны",           					НСтр("ru='тел.: ';uk='тел.: '",					КодЯзыка));
 	СоответствиеПараметров.Вставить("НомерСчета",         					НСтр("ru='т/с ';uk='п/р '",						КодЯзыка));
	СоответствиеПараметров.Вставить("Банк",               					НСтр("ru='в банке ';uk='у банку '",				КодЯзыка));
	СоответствиеПараметров.Вставить("МФО",                					НСтр("ru='МФО ';uk='МФО '",					КодЯзыка));
	СоответствиеПараметров.Вставить("ИнформацияОСтатусеПлательщикаНалогов",	НСтр("ru='';uk=''",								КодЯзыка));
	СоответствиеПараметров.Вставить("ПредставлениеБанковскогоСчета", "");
	СоответствиеПараметров.Вставить("МФО_Платеж",                НСтр("ru='МФО ';uk='МФО '",КодЯзыка));

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список       = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Если ИмяПараметра = "/" Тогда
				НоваяСтрока = Истина;
				Продолжить;
			КонецЕсли;

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если ПустаяСтрока(Результат)Тогда 
					// это первый параметр, выведем префикс с большой буквы
					Префикс = ВРег(Лев(Префикс,1)) + Сред(Префикс,2);
				ИначеЕсли НоваяСтрока Тогда
					Результат = Результат + "," + Символы.ПС;
				Иначе
					Результат = Результат + ", " 
				КонецЕсли; 
				НоваяСтрока = Ложь;

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СокрЛП(СтрокаДополнения);
				
			Исключение
				
				ТекстСообщения  = НСтр("ru='Не удалось определить значение параметра организации: %ИмяПараметра%';uk='Не вдалося визначити значення параметра організації: %ИмяПараметра%'");
				ТекстСообщения  = СтрЗаменить(ТекстСообщения,"%ИмяПараметра%",ИмяПараметра);
				Сообщение       = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
				
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);
	
КонецФункции

// Функция формирует сведения об указанном юридическом или физическом лице.
// К сведениям относятся: наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм, 
		|КодПоЕДРПОУ, КодПоДРФО, ИНН, НомерСвидетельства, Телефоны, ЮридическийАдрес, ФактическийАдрес, 
		|Банк, МФО, НомерСчета, АдресБанка, ИнформацияОСтатусеПлательщикаНалогов,
		|НомерСчетаУстаревший, ПредставлениеБанковскогоСчета, МФО_Платеж,
		|НаименованиеДСТУ");
		
	РеквизитыСчета = Неопределено;
	

	Если ЗначениеЗаполнено(ЮрФизЛицо)
	   И (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
	
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(ЮрФизЛицо, ДатаПериода);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			Сведения.Вставить("НаименованиеДСТУ", 			 ВРег(Реквизиты.НаименованиеПолное));
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			Реквизиты = Справочники.Контрагенты.РеквизитыКонтрагента(ЮрФизЛицо);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
			Сведения.Вставить("НаименованиеДСТУ", 			 ВРег(Реквизиты.Наименование));
		КонецЕсли;

		Сведения.Вставить("Представление", 				 Реквизиты.Представление);
		Сведения.Вставить("СокращенноеНаименование", 	 Реквизиты.Представление);
		Сведения.Вставить("ПолноеНаименование", 		 Реквизиты.Наименование);
		Сведения.Вставить("НаименованиеДляПечатныхФорм", Реквизиты.Наименование);
		Сведения.Вставить("ИНН", 						 Реквизиты.ИННПлательщикаНДС);
		Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Сведения.Вставить("КодПоЕДРПОУ", Реквизиты.КодПоЕДРПОУ);
		ИначеЕсли ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
			Сведения.Вставить("КодПоЕДРПОУ", Реквизиты.КодПоЕДРПОУ);
		Иначе
			Сведения.Вставить("КодПоДРФО", Реквизиты.КодПоЕДРПОУ);
		КонецЕсли;
		Сведения.Вставить("НомерСвидетельства", 		 Реквизиты.НомерСвидетельства);
		Сведения.Вставить("ЮрФизЛицо", 					 Реквизиты.ЮрФизЛицо);
		
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.НаименованиеПолное);
			Сведения.Вставить("ИнформацияОСтатусеПлательщикаНалогов", Реквизиты.ИнформацияОСтатусеПлательщикаНалогов);
		Иначе
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.Наименование);
			Сведения.Вставить("ИнформацияОСтатусеПлательщикаНалогов", "");			
		КонецЕсли;
		
		
		Сведения.Вставить("Телефоны", 		  ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
		
		Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический", ДатаПериода));
		Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический"));
		
	ИначеЕсли ЗначениеЗаполнено(ЮрФизЛицо)
	   И ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица")  Тогда
	   
	   Реквизиты = ПолучитьРеквизитыФизическогоЛица(ЮрФизЛицо, ДатаПериода);
	   
	   Сведения.Вставить("Представление", 				 Реквизиты.Наименование);
	   Сведения.Вставить("ПолноеНаименование", 		 Реквизиты.ФИОПолные);
	   Сведения.Вставить("СокращенноеНаименование", 	 Реквизиты.ФамилияИО);
	   ФИО = ?(ДляФизЛицаТолькоИнициалы, Реквизиты.ФамилияИО, Реквизиты.ФИОПолные); 
	   Сведения.Вставить("ОфициальноеНаименование",	 ФИО);
	   Сведения.Вставить("НаименованиеДляПечатныхФорм",ФИО);
	   Сведения.Вставить("НаименованиеДСТУ", ВРег(Реквизиты.ФИОПолные));
	   Сведения.Вставить("КодПоДРФО", 					 Реквизиты.КодПоДРФО);
	   Сведения.Вставить("ЮрФизЛицо", 					 Перечисления.ЮрФизЛицо.ФизЛицо);
	   
	   Сведения.Вставить("Телефоны", 		 Реквизиты.Телефоны);
	   Сведения.Вставить("ЮридическийАдрес", ?(ЗначениеЗаполнено(Реквизиты.АдресПоПрописке), Реквизиты.АдресПоПрописке, Реквизиты.АдресДляИнформирования));
	   Сведения.Вставить("ФактическийАдрес", ?(ЗначениеЗаполнено(Реквизиты.АдресМестаПроживания), Реквизиты.АдресМестаПроживания, Реквизиты.АдресДляИнформирования));
	   
	   Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		   БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
	   КонецЕсли;
	   РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
	   
	КонецЕсли;

	Если РеквизитыСчета <> Неопределено Тогда
		
		ОпределитьНомерБанковскогоСчетаПоПериодуПереходаНаIBAN(РеквизитыСчета, ДатаПериода);
		
		Сведения.Вставить("НомерСчета", 	  РеквизитыСчета.НомерСчета);
		Сведения.Вставить("НомерСчетаУстаревший",       РеквизитыСчета.НомерСчетаУстаревший);
		Сведения.Вставить("Банк", 			  РеквизитыСчета.Банк);
		Сведения.Вставить("МФО",              РеквизитыСчета.МФО);
		Сведения.Вставить("МФО_Платеж",       РеквизитыСчета.МФО_Платеж);
		Сведения.Вставить("АдресБанка", 	  РеквизитыСчета.АдресБанка);
		
	КонецЕсли;
		
	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "", Дата = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипАдреса = "Фактический" Тогда
			Начало = "Факт";
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			Начало = "Юр";
		Иначе
			Начало = "";
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
			Окончание = "Склада";
		КонецЕсли;
		
		ВладелецКонтактнойИнформации = Объект;
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало + "Адрес" + Окончание].Ссылка;
		
		Если ВидАдреса.ИмяПредопределенныхДанных = "ЮрАдресОрганизации" Тогда
			
			Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВладелецКонтактнойИнформации, ВидАдреса, Дата);
			
		Иначе
		
			ТабЗн = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
			
			НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Возврат НайденныеСтроки[0].Представление;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Склады") Тогда
			Окончание = "Склада";
		КонецЕсли;
		
		ВладелецКонтактнойИнформации = Объект;
		
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;
		
		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Строка - Отформатированная строка.
//
Функция СуммаПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, СтрНайти(Результат, "="));
			
		Иначе
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД=','; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД=','; ЧГ=0");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СуммаПлатежногоДокумента()

// Функция формирует представление суммы в гривнах и копейках.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//
// Возвращаемое значение
//  Строка - Отформатированная сумма.
//
Функция СуммаГрнКоп(Сумма, Валюта, ВалютаРегламентированногоУчета) Экспорт
	
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		Гривны = Цел(Сумма);
		Копейки = Окр(100 * (Сумма - Гривны), 0, 1);
		СуммаГрнКоп = "" 
			+ Формат(Гривны, "ЧДЦ=0; ЧГ=0")
			+ " грн. " 
			+ Цел(Копейки /10) 
			+ (Копейки - 10 * Цел(Копейки / 10))
			+" коп."
		;
	Иначе
		СуммаГрнКоп = СуммаПлатежногоДокумента(Сумма, Ложь);
	КонецЕсли;
	
	Возврат СуммаГрнКоп;
	
КонецФункции // СуммаГрнКоп()

// Функция возвращает структуру с заголовками Скидка или Наценка для таблицы печатной формы,
// а также с флагами ЕстьСкидки и ТолькоНаценка
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки, КодЯзыка="ru") Экспорт	
	
	ЕстьНаценки = Ложь;
	ЕстьСкидки  = Ложь;
	
	СтруктураШапки = Новый Структура("Скидка, СуммаСкидки, ЕстьСкидки, ТолькоНаценка");
	
	Если ИспользоватьСкидки Тогда
		
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если СтрокаТоваров.СуммаСкидки>0 Тогда
					ЕстьСкидки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если СтрокаТоваров.СуммаСкидки<0 Тогда
					ЕстьНаценки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			Пока Товары.Следующий() Цикл
				Если Товары.СуммаСкидки>0 Тогда
					ЕстьСкидки = Истина;
				ИначеЕсли Товары.СуммаСкидки<0 Тогда
					ЕстьНаценки = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьНаценки И ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка",        НСтр("ru='Скидка (Наценка)';uk= 'Знижка (Націнка)'", КодЯзыка));
			СтруктураШапки.Вставить("СуммаСкидки",   НСтр("ru='Сумма ';uk= 'Сума '", КодЯзыка) + Символы.ПС + НСтр("ru='без скидки (наценки)';uk= 'без знижки (націнки)'", КодЯзыка));
			СтруктураШапки.Вставить("ТолькоНаценка", Ложь);
		ИначеЕсли ЕстьНаценки И НЕ ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка",        НСтр("ru='Наценка';uk= 'Націнка'", КодЯзыка));
			СтруктураШапки.Вставить("СуммаСкидки",   НСтр("ru='Сумма ';uk= 'Сума '", КодЯзыка) + Символы.ПС + НСтр("ru='без наценки';uk= 'без націнки'", КодЯзыка));
			СтруктураШапки.Вставить("ТолькоНаценка", Истина);
		ИначеЕсли ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка",        НСтр("ru='Скидка';uk= 'Знижка'", КодЯзыка));
			СтруктураШапки.Вставить("СуммаСкидки",   НСтр("ru='Сумма ';uk= 'Сума '", КодЯзыка) + Символы.ПС + НСтр("ru='без скидки';uk= 'без знижки'", КодЯзыка));
			СтруктураШапки.Вставить("ТолькоНаценка", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШапки.Вставить("ЕстьСкидки", ЕстьНаценки или ЕстьСкидки);

	Возврат СтруктураШапки;

КонецФункции // НужноВыводитьСкидки()

// Функция проверяет, что в строке товара заполнена номенклатура,
// и выдает сообщение, если не заполнена.
//
Функция ПроверитьЗаполнениеНоменклатуры(СтрокаТовары, НомерСтроки) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
		
		ТекстОшибки = НСтр("ru='В строке %НомерСтроки% не заполнено значение номенклатуры - строка при печати пропущена.';uk='У рядку %НомерСтроки% не заповнено значення номенклатури - рядок при друку пропущений.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьЗаполнениеНоменклатуры()

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
// СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
// КодЯзыка        - Строка - код языка, на котором формируется текст НДС
//
// Возвращаемое значение:
// Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС, КодЯзыка="ru") Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):';uk= 'У т.ч. ПДВ (%СтавкаНДС%):'", КодЯзыка), НСтр("ru='НДС (%СтавкаНДС%):';uk= 'ПДВ (%СтавкаНДС%):'", КодЯзыка));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", Локализация.ПолучитьЛокализованноеПредставление(СтавкаНДС, КодЯзыка));
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции // ТекстНДСПоСтавке()

// Создает соответствие ставок и сумм НДС
//
// Возвращаемое значение:
// Соответствие
//
Функция ПолучитьСоответствиеСтавокНДС() Экспорт
	
	СоответствиеСтавокНДС = Новый Соответствие();
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС20,     0);
    СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС14,      0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС7,      0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	
	Возврат СоответствиеСтавокНДС;
	
КонецФункции // ПолучитьСоответствиеСтавокНДС()

// Формирует текст НДС по этапу оплаты
//
// Параметры:
// СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
// ПроцентПлатежа       - Число - Процент платежа по этапу
// КодЯзыка              - Строка - код языка, на котором формируется текст НДС
//
// Возвращаемое значение:
// Строка
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа, КодЯзыка="ru") Экспорт		
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС 
							+ ?(ПустаяСтрока(ТекстНДС), 
									НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%';uk='ПДВ(%СтавкаНДС%) %СуммаНДС%'", КодЯзыка), 
									НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%';uk=', ПДВ(%СтавкаНДС%) %СуммаНДС%'", КодЯзыка)
							   );
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", Локализация.ПолучитьЛокализованноеПредставление(ТекСтавкаНДС.Ключ, КодЯзыка));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч.';uk='У т.ч.'", КодЯзыка) + " " + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без НДС';uk='Без ПДВ';", КодЯзыка);
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции // СформироватьТекстНДСЭтапаОплаты()

// Формирует строковое описание периода действия
//
// Параметры:
// 		ДатаНачалаДействия - Дата - Дата начала действия
// 		ДатаОкончанияДействия - Дата - Дата окончания действия
// 		КодЯзыка       - Строка - код языка, на котором формируется период действия
//
// Возвращаемое значение:
// 		Строка - Строковое описание периода действия
//
Функция СформироватьТекстПериодДействия(ДатаНачалаДействия, ДатаОкончанияДействия, КодЯзыка = "ru") Экспорт
	
	
	ПустаяДата = Дата(1,1,1);
	
	Если ДатаНачалаДействия = ПустаяДата И ДатаОкончанияДействия = ПустаяДата Тогда
		
		Возврат НСтр("ru='Срок действия не ограничен.';uk= 'Термін дії не обмежений.'", КодЯзыка);
		
	ИначеЕсли  ДатаНачалаДействия <> ПустаяДата И ДатаОкончанияДействия = ПустаяДата Тогда
		
		Возврат  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует с %1.';uk= 'Діє з %1.'", КодЯзыка),
			Формат(ДатаНачалаДействия,"ДЛФ=DD; Л="+КодЯзыка));
		
	ИначеЕсли ДатаНачалаДействия = ПустаяДата И ДатаОкончанияДействия <> ПустаяДата Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует по %1.';uk= 'Діє по %1.'", КодЯзыка),
			Формат(ДатаОкончанияДействия,"ДЛФ=DD; Л="+КодЯзыка));
		
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует с %1 по %2.';uk= 'Діє с %1 по %2.'", КодЯзыка),
			Формат(ДатаНачалаДействия,"ДЛФ=DD; Л="+КодЯзыка),
			Формат(ДатаОкончанияДействия,"ДЛФ=DD; Л="+КодЯзыка));
		
	КонецЕсли;
	
КонецФункции // СформироватьТекстПериодДействия()

// Формирует текст НДС
//
Функция СформироватьТекстНДС(НалогообложениеНДС, ЦенаВключаетНДС, КодЯзыка = "ru") Экспорт 
	
	Возврат Локализация.ПолучитьЛокализованноеПредставление(НалогообложениеНДС, КодЯзыка) + 
			?(ЦенаВключаетНДС,
				НСтр("ru='. Цена включает НДС.';uk= '. Ціна включає ПДВ.'", КодЯзыка),
				НСтр("ru='. Цена не включает НДС.';uk= '. Ціна не включає ПДВ.'", КодЯзыка)
			);
	
КонецФункции // СформироватьТекстНДС()

//Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	Если НЕ РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОбъектовПечати) = Тип("Массив") Тогда
		СоответствиеТиповДанныхОбъектовПечати = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(ДанныеОбъектовПечати);
	Иначе
		СоответствиеТиповДанныхОбъектовПечати = ДанныеОбъектовПечати;
	КонецЕсли;
	
	СоответствиеТиповДанныхОбъектовПечати = ДополнитьСоответствиеДанныхОбъектовПечати(СоответствиеТиповДанныхОбъектовПечати);
	
	Если Не ЗаполнениеПараметровОтправкиВозможно(СоответствиеТиповДанныхОбъектовПечати) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПолучателей(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Выводит логотип в табличный документ. Если в переданной области макета картинки
// логотипа нет, находится отдельная область с логотипом в макете и логотип выводится
// в данную область.
//
// Параметры:
// 		Макет - Макет - Макет печатной формы
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		ИмяОбласти - Строка - Название передаваемой области
// 		Организация - СправочникСсылка.Организации - Содержит ссылку на организацию для получения логотипа
//
Процедура ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, ИмяОбласти, Организация)Экспорт
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ФайлЛоготип");
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, "Логотип") Тогда
		// Картинки логотипа в этой области макета нет.
		
		Если Макет.Области.Найти(ИмяОбласти+"Логотип") <> Неопределено Тогда
			
			// Проверка картинки логотипа в области с логотипом
			ОбластьМакетаЛоготип = Макет.ПолучитьОбласть(ИмяОбласти+"Логотип");
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакетаЛоготип.Рисунки, "Логотип") 
				И ЗначениеЗаполнено(ФайлКартинки) Тогда
				
				ОбластьМакета = ОбластьМакетаЛоготип;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки.Логотип);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ФайлКартинки);
	
	Если ТипЗнч(ДвоичныеДанныеФайла) = Тип("Картинка") Тогда
		Картинка = ДвоичныеДанныеФайла;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеФайла);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли; 
	
	ОбластьМакета.Рисунки.Логотип.Картинка = Картинка;
	
КонецПроцедуры

// Выводит факсимиле в табличный документ, заменяя переданную область картинкой факсимиле.
//
// Параметры:
// 		Макет - Макет - Макет печатной формы
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		Организация - СправочникСсылка.Организации - Содержит ссылку на организацию для получения факсимиле
// 		ПараметрыПечати - Структура - Содержит структуру параметров печати
//
Процедура ВывестиФаксимилеВТабличныйДокумент(Макет, ОбластьМакета, Организация, ПараметрыПечати = Неопределено) Экспорт
	
	ОтображатьФаксимиле = Ложь;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьФаксимиле") Тогда
		ОтображатьФаксимиле = ПараметрыПечати.ОтображатьФаксимиле;
	КонецЕсли;
	
	Если НЕ ОтображатьФаксимиле Тогда
		Возврат
	КонецЕсли;
	
	ФайлКартинкиПечать  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ФайлФаксимильнаяПечать");
	ФайлКартинкиПодпись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ФайлФаксимильнаяПодпись");
	
	Если ОтображатьФаксимиле И НЕ ЗначениеЗаполнено(ФайлКартинкиПечать) И НЕ ЗначениеЗаполнено(ФайлКартинкиПодпись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Факсимильная печать и подпись для организации не указаны. 
            |Укажите файлы с факсимильной печатью и подписью в карточке организации, раздел ""Настройка печати"".'
            |;uk='Факсимільна печатка та підпис для організації не вказані. 
            |Вкажіть файли з факсимільною печаткою і підписом у картці організації, розділ ""Параметри друку"".'"));
	КонецЕсли;
	
	НеобходимаПечать = Ложь;
	
	Если Не ЗначениеЗаполнено(ФайлКартинкиПечать) И ЗначениеЗаполнено(ФайлКартинкиПодпись) И Макет.Области.Найти("ОбластьСФаксимильнойПодписью") <> Неопределено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьСФаксимильнойПодписью");		
	ИначеЕсли (ЗначениеЗаполнено(ФайлКартинкиПечать) Или ЗначениеЗаполнено(ФайлКартинкиПодпись)) И Макет.Области.Найти("ОбластьСФаксимильнойПечатьюИПодписью") <> Неопределено Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьСФаксимильнойПечатьюИПодписью");
		НеобходимаПечать = Истина;
	Иначе	
		Возврат;	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ФайлКартинкиПодпись) Тогда
		ДвоичныеДанныеПодписи = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ФайлКартинкиПодпись);
		Если ТипЗнч(ДвоичныеДанныеПодписи) = Тип("Картинка") Тогда
			КартинкаПодписи = ДвоичныеДанныеПодписи;
		ИначеЕсли ТипЗнч(ДвоичныеДанныеПодписи) = Тип("ДвоичныеДанные") Тогда
			КартинкаПодписи = Новый Картинка(ДвоичныеДанныеПодписи);
		Иначе
			КартинкаПодписи = Новый Картинка;
		КонецЕсли;
	Иначе
		КартинкаПодписи = Новый Картинка;
	КонецЕсли;
	
	Если НеобходимаПечать Тогда
		Если ЗначениеЗаполнено(ФайлКартинкиПечать) Тогда
			ДвоичныеДанныеПечати = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ФайлКартинкиПечать);
			Если ТипЗнч(ДвоичныеДанныеПечати) = Тип("Картинка") Тогда
				КартинкаПечати = ДвоичныеДанныеПечати;
			ИначеЕсли ТипЗнч(ДвоичныеДанныеПечати) = Тип("ДвоичныеДанные") Тогда
				КартинкаПечати = Новый Картинка(ДвоичныеДанныеПечати);
			Иначе
				КартинкаПечати = Новый Картинка;
			КонецЕсли;
		Иначе
			КартинкаПечати = Новый Картинка;
		КонецЕсли;
		
		ОбластьМакета.Рисунки.ФаксимильнаяПодпись.Картинка = КартинкаПодписи;
		ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка  = КартинкаПечати;
		
	Иначе
		ОбластьМакета.Рисунки.ФаксимильнаяПодписьБезПечати.Картинка = КартинкаПодписи;	
	КонецЕсли;	
			
КонецПроцедуры

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое необходимо отформатировать
//
// Возвращаемое значение:
//  Отформатированное должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество, КодЯзыка) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, десятая, десятых, десятых, м, 1';uk= 'ціла, цілих, цілих, ж, десята, десятих, десятих, м, 1'", КодЯзыка);
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, сотая, сотых, сотых, м, 2';uk= 'ціла, цілих, цілих, ж, сота, сотих, сотих, м, 2'", КодЯзыка);
	Иначе
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3';uk= 'ціла, цілих, цілих, ж, тисячна, тисячних, тисячних, м, 3'", КодЯзыка);
	КонецЕсли;

 	Возврат ЧислоПрописью(Количество, "Л="+КодЯзыка, ПараметрыПрописи);

КонецФункции


// Функция возвращает код организации (для юр/физ. лица)
//
// Параметры
//  СписокСведений - список значений со значениями параметров организации
//
// Возвращаемое значение:
//   Строка   – код ЕДРПОУ, если организация юр.лицо, код по ДРФО если физ.лицо
//
Функция ПолучитьКодОрганизации(СписокСведений) Экспорт

	Код = "";
	
	Если ТипЗнч(СписокСведений) = Тип("Структура") Тогда
		
		Если СписокСведений.Свойство("КодПоЕДРПОУ") Тогда
			
			Код = СписокСведений.КодПоЕДРПОУ;	
			
		КонецЕсли;
		
		// если в списке есть код по ДРФО, значит организация - физ.лицо.
		Если СписокСведений.Свойство("КодПоДРФО") Тогда
			
			Если НЕ ПустаяСтрока(СписокСведений.КодПоДРФО) Тогда
			
				Код = СписокСведений.КодПоДРФО;		
			
			КонецЕсли; 
			
		КонецЕсли;
		
	Иначе
		
		// странно, должна передаваться структура
		Код = СписокСведений;
		
	КонецЕсли;
	
	Возврат Код;
        
КонецФункции // ПолучитьКодОрганизации()

Функция ПолучитьТелефонДляНалоговойНакладной(Телефоны) Экспорт
	
	Результат = СокрЛП(Телефоны);
	// может быть несколько телефонов, через запятую, возьмем до первой запятой
	Поз = Найти(Результат, ",");
	Если Поз > 0 Тогда
		Результат = Лев(Результат, Поз - 1);
	КонецЕсли; 
	
	Поз = Найти(Результат, ";");
	Если Поз > 0 Тогда
		Результат = Лев(Результат, Поз - 1);
	КонецЕсли; 
	
	РезультатТолькоЦифры = "";
	ДлинаСтрокиТелефонов = СтрДлина(Результат);
	
	// удалим все не цифры
	Для НомерСимвола = 1 По ДлинаСтрокиТелефонов Цикл
		ТекСимвол = Сред(Результат, НомерСимвола, 1);
		Если Найти("0123456789", ТекСимвол) = 0 Тогда
			Продолжить;
		Иначе
			РезультатТолькоЦифры = РезультатТолькоЦифры + ТекСимвол;
		КонецЕсли;
	КонецЦикла; 	
	//для выравнивания по правому краю дополним слева пробелами
	РезультатТолькоЦифры = "          " + РезультатТолькоЦифры;
	
	// возьмем 10 правых 
	РезультатТолькоЦифры = Прав(РезультатТолькоЦифры, 10);
	
	Возврат РезультатТолькоЦифры;

КонецФункции // ПолучитьТелефонДляНалоговойНакладной()

// Формирует структуру для заполнения стандартной области "Подписи" при печати документов
//
Функция СведенияОбОтветсвенныхЛицах(ВыборкаШапка, знач КодЯзыка = "ru") Экспорт
	
	ДанныеДокумента = Новый Структура("ПредставительОрганизации, ПредставительОрганизацииДолжность,"+
									  "ПредставительКонтрагента, ПредставительОрганизацииПолучателя, ПредставительОрганизацииПолучателяДолжность, "+
									  "ДоверенностьАльтернативныйВидДокумента, ДоверенностьСерия, ДоверенностьНомер, ДоверенностьДата, ДоверенностьВыдана, ДоверенностьПримечание, ПолучилПоДругомуДокументу");
									  
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаШапка);
	
	СведенияОбОтветсвенныхЛицах = Новый Структура("ДолжностьИФИОПредставителяОрганизации, ДолжностьИФИОПредставителяКонтрагента, ДокументПодтверждающийПравоНаПолучениеЦенностей");
	СведенияОбОтветсвенныхЛицах.ДолжностьИФИОПредставителяОрганизации = СокрЛ(СокрЛП(ДанныеДокумента.ПредставительОрганизацииДолжность)+" "+СокрЛП(ДанныеДокумента.ПредставительОрганизации));	
	Если ЗначениеЗаполнено(ДанныеДокумента.ПредставительКонтрагента) Тогда
		// Обычная операция
		СведенияОбОтветсвенныхЛицах.ДолжностьИФИОПредставителяКонтрагента = СокрЛП(ДанныеДокумента.ПредставительКонтрагента);
	Иначе
		// Интеркампани
		СведенияОбОтветсвенныхЛицах.ДолжностьИФИОПредставителяКонтрагента = СокрЛ(СокрЛП(ДанныеДокумента.ПредставительОрганизацииПолучателяДолжность)+" "+СокрЛП(ДанныеДокумента.ПредставительОрганизацииПолучателя));
	КонецЕсли;
	
	Строка = "";
	Если ДанныеДокумента.ПолучилПоДругомуДокументу = Неопределено Тогда
		Строка = "";
	ИначеЕсли НЕ ДанныеДокумента.ПолучилПоДругомуДокументу Тогда
		Строка = НСтр("ru='По доверенности';uk= 'За довіреністю'", КодЯзыка);
	Иначе
		Строка = СокрЛП(ДанныеДокумента.ДоверенностьАльтернативныйВидДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ДоверенностьСерия) Тогда
		Строка = Строка+" "+СокрЛП(ДанныеДокумента.ДоверенностьСерия);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДокумента.ДоверенностьНомер) Тогда
		Строка = Строка+" №"+СокрЛП(ДанныеДокумента.ДоверенностьНомер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДокумента.ДоверенностьДата) Тогда
		Строка = Строка+НСтр("ru=' от ';uk= ' від '", КодЯзыка)+Формат(ДанныеДокумента.ДоверенностьДата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДокумента.ДоверенностьВыдана) Тогда
		Строка = Строка+Символы.ПС+НСтр("ru='Документ выдан ';uk= 'Документ виданий '", КодЯзыка)+СокрЛП(ДанныеДокумента.ДоверенностьВыдана);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ДоверенностьПримечание) Тогда
		Строка = Строка+Символы.ПС+СокрЛП(ДанныеДокумента.ДоверенностьПримечание);
	КонецЕсли;
	
	СведенияОбОтветсвенныхЛицах.ДокументПодтверждающийПравоНаПолучениеЦенностей = СокрЛ(Строка);
	
	Возврат СведенияОбОтветсвенныхЛицах;
	
КонецФункции

// Формирует массив параметров, для печати дополнительной информации
//
// Параметры: 
//  ВыборкаШапка   - результат запроса по шапке
//  Список         - список запрашиваемых параметров организации
//
// Возвращаемое значение:
//  Массив - со струтктурой (парами НазваниеПараметра:ЗначениеПараметра).
//
Функция ДополнительнаяИнформация(ВыборкаШапка, Список = "", КодЯзыка = "ru") Экспорт

	МассивСтруктур = Новый Массив();

	Если ПустаяСтрока(Список) Тогда
		Возврат МассивСтруктур;
	КонецЕсли; 
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ДоговорНаименованиеДляПечати", НСтр("ru='Договор:';uk= 'Договір:'", КодЯзыка));
	СоответствиеПараметров.Вставить("Склад",						НСтр("ru='Склад:';uk= 'Склад:'", КодЯзыка));
	СоответствиеПараметров.Вставить("Заказ",						НСтр("ru='Заказ:';uk= 'Замовлення:'", КодЯзыка));
	СоответствиеПараметров.Вставить("Заявка",						НСтр("ru='Заявка:';uk= 'Заява:'", КодЯзыка));
	СоответствиеПараметров.Вставить("Соглашение",					НСтр("ru='Соглашение:';uk= 'Угода:'", КодЯзыка));
	СоответствиеПараметров.Вставить("Основание",					НСтр("ru='Основание:';uk= 'Підстава:'", КодЯзыка));
	СоответствиеПараметров.Вставить("КассаККМ",						НСтр("ru='Касса ККМ:';uk= 'Каса ККМ:'",КодЯзыка));
	СоответствиеПараметров.Вставить("АдресДоставки",				НСтр("ru='Адрес доставки:';uk= 'Адреса доставки:'", КодЯзыка));
	
	Список = СокрЛП(Список);
	Список = Список + ?(Прав(Список, 1) = ",", "", ",");

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ИмяПараметра = СокрЛП(Лев(Список, ПозЗапятой - 1));
		Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

		ЗначениеПараметра = ВыборкаШапка[ИмяПараметра];
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			// В договоре не указано особое наименование для печати
			Если ИмяПараметра = "ДоговорНаименованиеДляПечати" Тогда
				
				Попытка
					ДоговорКонтрагента = ВыборкаШапка["Договор"];
				Исключение 
					Продолжить;	
				КонецПопытки;
				
				Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					Продолжить;
				КонецЕсли;

				ДоговорНомер = ДоговорКонтрагента.Номер;
				ДоговорДата  = ДоговорКонтрагента.Дата;
				
				Если ЗначениеЗаполнено(ДоговорНомер) Тогда
					// Заменим название договора на его настоящий номер
					ЗначениеПараметра = "№ " + СокрП(ДоговорНомер);
				Иначе
					// Названием будет наименование справочника
					ЗначениеПараметра = ДоговорКонтрагента.Наименование;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДоговорДата) Тогда
					// Добавим дату договора
					ЗначениеПараметра = ЗначениеПараметра + НСтр("ru=' от ';uk=' від '",КодЯзыка) + Формат(ДоговорДата,"ДФ=dd.MM.yyyy")
				КонецЕсли;
			Иначе					
				Продолжить;
			КонецЕсли;
		Иначе
			// Корректируем представление документов
			ТипЗначения = ТипЗнч(ЗначениеПараметра);
			МетаданныеТип = Метаданные.НайтиПоТипу(ТипЗначения);
			
			Если ТипЗначения = Тип("СправочникСсылка.СоглашенияСКлиентами") 
			 ИЛИ ТипЗначения = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			 
				СоглашениеНомер        = ЗначениеПараметра.Номер;
				СоглашениеНаименование = ЗначениеПараметра.Наименование;
			 	СоглашениеДата         = ЗначениеПараметра.Дата;
				
				Если ЗначениеЗаполнено(СоглашениеНомер) Тогда
					// Заменим название соглашения на его настоящий номер
					ЗначениеПараметра = "№ " + СокрП(СоглашениеНомер);
				Иначе
					// Названием будет наименование справочника
					ЗначениеПараметра = СоглашениеНаименование;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СоглашениеДата) Тогда
					// Добавим дату договора
					ЗначениеПараметра = ЗначениеПараметра + НСтр("ru=' от ';uk=' від '",КодЯзыка) + Формат(СоглашениеДата,"ДФ=dd.MM.yyyy")
				КонецЕсли;
					
			ИначеЕсли МетаданныеТип <> Неопределено И Метаданные.Документы.Содержит(МетаданныеТип) Тогда
				ЗначениеПараметра = Локализация.ПолучитьЛокализованноеПредставление(ЗначениеПараметра, КодЯзыка);
				
			КонецЕсли; 
			
		КонецЕсли;
						
		НазваниеПараметра = Строка(СоответствиеПараметров[ИмяПараметра]);
		Если Не ЗначениеЗаполнено(НазваниеПараметра) Тогда
			НазваниеПараметра = ИмяПараметра + ":";
		КонецЕсли;
		
		МассивСтруктур.Добавить(Новый Структура("НазваниеПараметра,ЗначениеПараметра", 
		                                  НазваниеПараметра,
										  ЗначениеПараметра));
	КонецЦикла;

	Возврат МассивСтруктур;

КонецФункции // ДополнительнаяИнформация()

Функция СформироватьЗаголовкиДляСуммовыхПоказателей(ВыборкаШапка, КодЯзыка = "ru", ЭтоКомиссионнаяПродажа = Ложь, ЦенаВключаетНДС = Неопределено) Экспорт
	
	Если ЭтоКомиссионнаяПродажа Тогда
		СтруктураПараметров = Новый Структура("ЦенаКомитента, СуммаКомитента, ЦенаПродажи, СуммаПродажи, СуммаВознаграждения");
	Иначе		
		СтруктураПараметров = Новый Структура("Цена, Сумма");
	КонецЕсли;
	
	Суффикс = "";
	Если ВыборкаШапка.УчитыватьНДС Тогда
		Если ?(ЦенаВключаетНДС = Неопределено, ВыборкаШапка.ЦенаВключаетНДС, ЦенаВключаетНДС) Тогда
			Суффикс = Суффикс + НСтр("ru=' с ';uk= ' з '", КодЯзыка);
		Иначе	
			Суффикс = Суффикс + НСтр("ru=' без ';uk= ' без '", КодЯзыка);
		КонецЕсли;
		Суффикс = Суффикс + НСтр("ru='НДС';uk= 'ПДВ'", КодЯзыка);
	КонецЕсли;
	
	ПредставлениеЦены  = НСтр("ru='Цена';uk= 'Ціна'", КодЯзыка) + Суффикс;
	ПредставлениеСуммы = НСтр("ru='Сумма';uk= 'Сума'", КодЯзыка) + Суффикс;
	
	Если ЭтоКомиссионнаяПродажа Тогда
		Суффикс = НСтр("ru=' комитента';uk= ' комітента'", КодЯзыка);
		СтруктураПараметров.ЦенаКомитента  = ПредставлениеЦены + Суффикс;
		СтруктураПараметров.СуммаКомитента = ПредставлениеСуммы + Суффикс;
		
		Суффикс = НСтр("ru=' продажи';uk= ' продажу'", КодЯзыка);
		СтруктураПараметров.ЦенаПродажи  = ПредставлениеЦены + Суффикс;
		СтруктураПараметров.СуммаПродажи = ПредставлениеСуммы + Суффикс;
		
		Суффикс = НСтр("ru=' вознаграждения';uk= ' винагороди'", КодЯзыка);
		СтруктураПараметров.СуммаВознаграждения = ПредставлениеСуммы + Суффикс;
	Иначе		
		СтруктураПараметров.Цена  = ПредставлениеЦены;
		СтруктураПараметров.Сумма = ПредставлениеСуммы;	
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьОписаниеБанковскогоСчета(СписокСведений, КодЯзыка) Экспорт
	
	ПредставлениеСчета = "";
	
	ПервыйНомерСчета = СписокСведений.НомерСчета;
	
	Если ЗначениеЗаполнено(ПервыйНомерСчета) Тогда
		
		ВторойНомерСчета = СписокСведений.НомерСчетаУстаревший;
		
		НуженМФОПервогоСчета = НЕ РегламентированныеДанныеКлиентСервер.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(ПервыйНомерСчета);
		НуженМФОВторогоСчета = НЕ НуженМФОПервогоСчета И ЗначениеЗаполнено(ВторойНомерСчета) И НЕ РегламентированныеДанныеКлиентСервер.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(ВторойНомерСчета);
	
		ПредставлениеСчета = НСтр("ru='т/с ';uk='п/р '",КодЯзыка) + ПервыйНомерСчета 
			+ ?(ЗначениеЗаполнено(ВторойНомерСчета), 
				" (" + НСтр("ru='устар. ';uk='застар. '",КодЯзыка) + ВторойНомерСчета 
				+ ?(НуженМФОВторогоСчета, ", " + НСтр("ru='МФО ';uk='МФО '",КодЯзыка) + СокрЛП(СписокСведений.МФО), "")+ ")", "") 
			+ " " + НСтр("ru='в банке ';uk='у банку '",КодЯзыка) + СписокСведений.Банк
			+ ?(НуженМФОПервогоСчета, ", " + НСтр("ru='МФО ';uk='МФО '",КодЯзыка) + СокрЛП(СписокСведений.МФО), "");
			
	КонецЕсли;
	
	Возврат ПредставлениеСчета;
	
КонецФункции

Процедура ОпределитьНомерБанковскогоСчетаПоПериодуПереходаНаIBAN(РеквизитыСчета, ДатаПериода) Экспорт
		
	НачалоПереходногоПериода = ЗначениеНастроекПовтИсп.ПолучитьДатуНачалаПереходаНаСтандартIBAN();
	КонецПереходногоПериода = ЗначениеНастроекПовтИсп.ПолучитьДатуОкончанияПереходаНаСтандартIBAN();
	
	ПервыйНомерСчета = "";
	ВторойНомерСчета = "";
	Если ДатаПериода > КонецПереходногоПериода Тогда
		ПервыйНомерСчета = РеквизитыСчета.НомерСчета;
	ИначеЕсли ДатаПериода >= НачалоПереходногоПериода И ДатаПериода <= КонецПереходногоПериода Тогда
		ПервыйНомерСчета = РеквизитыСчета.НомерСчета;
		Если ЗначениеЗаполнено(РеквизитыСчета.НомерСчетаУстаревший) И РеквизитыСчета.НомерСчетаУстаревший <> РеквизитыСчета.НомерСчета Тогда
			ВторойНомерСчета = РеквизитыСчета.НомерСчетаУстаревший;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(РеквизитыСчета.НомерСчетаУстаревший) Тогда
			ПервыйНомерСчета = РеквизитыСчета.НомерСчетаУстаревший;
		Иначе
			ПервыйНомерСчета = РеквизитыСчета.НомерСчета;
		КонецЕсли;
	КонецЕсли;
	
	//заменяем для вывода номер счета на старый
	РеквизитыСчета.Вставить("НомерСчета",       			ПервыйНомерСчета);
	РеквизитыСчета.Вставить("НомерСчетаУстаревший",       ВторойНомерСчета);
	
	//заменяем для вывода МФО в платежках
	Если РегламентированныеДанныеКлиентСервер.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(РеквизитыСчета.НомерСчета) Тогда
		РеквизитыСчета.Вставить("МФО_Платеж", "0");
	Иначе
		РеквизитыСчета.Вставить("МФО_Платеж", РеквизитыСчета.МФО);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРеквизитыФизическогоЛица(ФизЛицо, Знач ДатаПериода) Экспорт
	
	Реквизиты = Новый Структура("Наименование, ФИОПолные, ФамилияИО, КодПоДРФО, АдресДляИнформирования, АдресПоПрописке, АдресМестаПроживания, ТелефонДомашний, ТелефонРабочий, ТелефонМобильный, Телефоны");
	
	Если ЗначениеЗаполнено(ФизЛицо) И ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ДанныеФизлица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизЛицо, "Наименование, КодПоДРФО");
		ЗаполнитьЗначенияСвойств(Реквизиты, ДанныеФизлица);
		
		ДанныеФИО = ФизическиеЛицаУТ.ФамилияИмяОтчество(ФизЛицо, ДатаПериода);
		ФИОПолные = СокрЛП(ДанныеФИО.Фамилия + " " + ДанныеФИО.Имя + " " + ДанныеФИО.Отчество);
		ФИОПолные = СтрЗаменить(ФИОПолные, "  ", " ");
		Реквизиты.Вставить("ФИОПолные", ФИОПолные);
		Реквизиты.Вставить("ФамилияИО", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ДанныеФИО));
		
		СоответствиеКИ = Новый Соответствие;
		СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "АдресДляИнформирования");
		СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "АдресПоПрописке");
		СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "АдресМестаПроживания");
		СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица, "ТелефонМобильный");
		СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
		СоответствиеКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ФизЛицо);
		
		МассивКИ = Новый Массив;
		Для каждого ЭлементКИ ИЗ СоответствиеКИ Цикл
			МассивКИ.Добавить(ЭлементКИ.Ключ);
		КонецЦикла;
		
		МассивТелефонов = Новый Массив;
		
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок,,МассивКИ, ДатаПериода);
		
		Для каждого СтрокаКИ ИЗ ДанныеКИ Цикл
			
			Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				
				Реквизиты.Вставить(СоответствиеКИ[СтрокаКИ.Вид], СтрокаКИ.Представление);
				
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					МассивТелефонов.Добавить(СтрокаКИ.Представление);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Реквизиты.Вставить("Телефоны", СтрСоединить(МассивТелефонов, ", "));
		
	КонецЕсли;
	
	Возврат Реквизиты;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеПараметровОтправкиПечатныхФормПоЭлектроннойПочте

Процедура ЗаполнитьПолучателей(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм) 
	
	МассивДокументовРодителей = Новый Массив;
	
	СформироватьТемуИТекстПисьма(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм, МассивДокументовРодителей);
	СформироватьПараметрыОтправки(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, МассивДокументовРодителей);
	
КонецПроцедуры

Процедура СформироватьТемуИТекстПисьма(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм, МассивДокументовРодителей)
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		Запрос = Новый Запрос;
		
		Счетчик = 1;
		ПервыйЗапросВОбъединении = Истина;
		КоличествоЭлементовВСоответствии = СоответствиеТиповДанныхОбъектовПечати.Количество();
		
		ТекстЗапросаПоЭлементуСоответствия = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ %РАЗРЕШЕННЫЕ%
		|	ОбъектМетаданных.Представление КАК ПредставлениеОбъектаПечати,
		|	ОбъектМетаданных.Ссылка КАК СсылкаНаОбъектПечати,
		|	%СинонимОбъектаМетаданных% КАК СинонимОбъектаМетаданных,
		|	%НомерДокумента% КАК НомерДокумента,
		|	%ДатаДокумента% КАК ДатаДокумента
		|ИЗ
		|	%ОбъектМетаданных% КАК ОбъектМетаданных
		|ГДЕ
		|	ОбъектМетаданных.Ссылка В %МассивСсылок% 
		|
		|%ОБЪЕДИНИТЬВСЕ%
		|";
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(Счетчик), ЭлементСоответствия.Значение.МассивДанных);
		Запрос.УстановитьПараметр("СинонимОбъектаМетаданных_" + Строка(Счетчик),Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ).Синоним);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%МассивСсылок%", "(&МассивСсылок_" + Строка(Счетчик) + ")");
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%СинонимОбъектаМетаданных%", "&СинонимОбъектаМетаданных_" + Строка(Счетчик));
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОбъектМетаданных%", ЭлементСоответствия.Ключ);
		
		Если Счетчик = 1 Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%РАЗРЕШЕННЫЕ%", "РАЗРЕШЕННЫЕ");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%РАЗРЕШЕННЫЕ%", "");
		КонецЕсли;
		
		Если СтрНайти(ЭлементСоответствия.Ключ,"Документ") > 0 Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%НомерДокумента%", "ОбъектМетаданных.Номер");
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ДатаДокумента%", "ОбъектМетаданных.Дата");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%НомерДокумента%", "NULL");
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ДатаДокумента%", "NULL");
		КонецЕсли;
		
		Если Счетчик = КоличествоЭлементовВСоответствии Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОБЪЕДИНИТЬВСЕ%", "");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОБЪЕДИНИТЬВСЕ%", "ОБЪЕДИНИТЬ ВСЕ");
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПоЭлементуСоответствия;
		
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		ПараметрыОтправки.Тема = КоллекцияПечатныхФорм[0].СинонимМакета;
		
	Иначе 
		ПараметрыОтправки.Тема = НСтр("ru='Документы';uk='Документи'");
	КонецЕсли;
	
	ПараметрыОтправки.Текст = НСтр("ru='Во вложении печатные формы.';uk='У вкладенні друковані форми.'") + Символы.ПС;
	
	Выборка = Результат.Выбрать();
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + "   " + ПечатнаяФорма.СинонимМакета + Символы.ПС;
	КонецЦикла;
	
	ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + НСтр("ru='Для документов:';uk='Для документів:'") + Символы.ПС;
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + "   " + ПредставлениеОбъектаПечати(Выборка, Истина) + Символы.ПС;
		ПолучитьРодительскиеДокументы(МассивДокументовРодителей,Выборка.СсылкаНаОбъектПечати);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолучателяПечатнойФормы(Получатели, ДанныеПолучателя, Пояснение = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеПолучателя.Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Пояснение) Тогда
		Получатель = Неопределено;
		Для каждого Получатель Из Получатели Цикл
			Если Получатель.ИсточникКонтактнойИнформации = ДанныеПолучателя.ИсточникКонтактнойИнформации Тогда
				Если СтрНайти(Получатель.Адрес, ДанныеПолучателя.Адрес) = 0 Тогда
					Получатель.Адрес = Получатель.Адрес + "; " + ДанныеПолучателя.Адрес;
				КонецЕсли;
				Пояснение = ПредставлениеОбъектаПечати(ДанныеПолучателя);
				Если СтрНайти(Получатель.Пояснение, Пояснение) = 0 Тогда
					Получатель.Пояснение = Получатель.Пояснение + ", " + Пояснение;
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		ПредставлениеОбъектаПечати = ПредставлениеОбъектаПечати(ДанныеПолучателя);
		Пояснение = ДанныеПолучателя.СинонимРеквизитаПолучателя + " " 
		            + ?(ПустаяСтрока(ПредставлениеОбъектаПечати),"", НСтр("ru='из';uk='з'")) + " " + ПредставлениеОбъектаПечати;
	КонецЕсли;
	
	СтруктураПолучатель = Новый Структура;
	СтруктураПолучатель.Вставить("Адрес", ДанныеПолучателя.Адрес);
	СтруктураПолучатель.Вставить("Представление", ДанныеПолучателя.ПредставлениеПолучателя);
	СтруктураПолучатель.Вставить("ИсточникКонтактнойИнформации", ДанныеПолучателя.ИсточникКонтактнойИнформации);
	СтруктураПолучатель.Вставить("ВидПочтовогоАдреса", Строка(ДанныеПолучателя.ВидПочтовогоАдреса));
	СтруктураПолучатель.Вставить("Пояснение", Пояснение);
	СтруктураПолучатель.Вставить("ОбъектИсточник", ДанныеПолучателя.СсылкаНаОбъектПечати);
	
	Получатели.Добавить(СтруктураПолучатель);
	
КонецПроцедуры

Функция ПредставлениеОбъектаПечати(ДанныеПолучателя,ПреобразовыватьПредставлениеДокумента = Ложь)
	
	ТипСсылки = ТипЗнч(ДанныеПолучателя.СсылкаНаОбъектПечати);
	
	Если ТипСсылки = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат НСтр("ru='Договор';uk='Договір'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Возврат НСтр("ru='Соглашение с клиентом';uk='Оферта клієнту'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		Возврат НСтр("ru='Сделка с клиентом';uk='Угода з клієнтом'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат "";
	Иначе
		Если ПреобразовыватьПредставлениеДокумента Тогда
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПолучателя.НомерДокумента, Ложь, Истина);
			ДатаДокумента  = ДанныеПолучателя.ДатаДокумента;
			
			ПредставлениеДокумента = НСтр("ru='%Синоним% №%Номер% от %Дата%';uk='%Синоним% №%Номер% від %Дата%'");
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Номер%", НомерДокумента);
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Синоним%", ДанныеПолучателя.СинонимОбъектаМетаданных);
			Возврат ПредставлениеДокумента;
			
		Иначе
			Возврат ДанныеПолучателя.ПредставлениеОбъектаПечати;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 

Функция ДополнитьСоответствиеДанныхОбъектовПечати(СоответствиеТиповДанныхОбъектовПечати)

	ДополненноеСоответствие = Новый Соответствие;
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		СтруктураДанныхОбъектаПечати = Новый Структура("ОсновнойПолучатель, МассивРеквизитовПолучателей, МассивДанных",
		                                               "",Новый Массив, ЭлементСоответствия.Значение);
		ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ЭлементСоответствия.Ключ , СтруктураДанныхОбъектаПечати);
		
		ДополненноеСоответствие.Вставить(ЭлементСоответствия.Ключ, СтруктураДанныхОбъектаПечати);
	
	КонецЦикла;
	
	Возврат ДополненноеСоответствие;

КонецФункции

Процедура ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ПолноеИмяОбъектаМетаданных , СтруктураДанныхОбъектаПечати) Экспорт
	
	Если ПолноеИмяОбъектаМетаданных = "Справочник.Партнеры"
		Или ПолноеИмяОбъектаМетаданных = "Документ.АктВыполненныхРабот"
		Или ПолноеИмяОбъектаМетаданных = "Документ.АктОРасхожденияхПослеОтгрузки"
		Или ПолноеИмяОбъектаМетаданных = "Документ.АктОРасхожденияхПослеПриемки"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВзаимозачетЗадолженности"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровМеждуОрганизациями" 
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровОтКлиента" 
		Или ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровПоставщику"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ЗаказКлиента"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ЗаказПоставщику"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ЗаявкаНаВозвратТоваровОтКлиента"
		Или ПолноеИмяОбъектаМетаданных = "Документ.КоммерческоеПредложениеКлиенту"
		Или ПолноеИмяОбъектаМетаданных = "Документ.КорректировкаРеализации"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомиссионера"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомиссионераОСписании"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомитенту" 
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомитентуОСписании"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ОтчетПоКомиссииМеждуОрганизациями"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПередачаТоваровМеждуОрганизациями"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПеремещениеТоваров"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПоступлениеТоваровУслуг"
		Или ПолноеИмяОбъектаМетаданных = "Документ.ПриходныйКассовыйОрдер"
		Или ПолноеИмяОбъектаМетаданных = "Документ.РасходныйКассовыйОрдер"
		Или ПолноеИмяОбъектаМетаданных = "Документ.РеализацияТоваровУслуг"
		Или ПолноеИмяОбъектаМетаданных = "Документ.РеализацияУслугПрочихАктивов"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СверкаВзаиморасчетов"
		Или ПолноеИмяОбъектаМетаданных = "Документ.СписаниеБезналичныхДенежныхСредств" 
		Или ПолноеИмяОбъектаМетаданных = "Документ.СчетНаОплатуКлиенту"  Тогда

		
		ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных).ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнениеПараметровОтправкиВозможно(СоответствиеТиповДанныхОбъектовПечати)
	
		Запрос = Новый Запрос;
	
	Счетчик = 1;
	ЭтоПервыйЭлементЗапроса = Истина;
	КоличествоЭлементовВСоответствии = СоответствиеТиповДанныхОбъектовПечати.Количество();
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСоответствия.Значение.ОсновнойПолучатель) Тогда
			Счетчик = Счетчик + 1;
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Запрос.Текст) Тогда
		Запрос.Текст = Запрос.Текст  + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапросаПоЭлементуСоответствия = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ %РАЗРЕШЕННЫЕ_ПЕРВЫЕ%
		|	ОбъектМетаданных.%ИмяРеквизита% КАК ОсновнойПолучатель
		|ИЗ
		|	%ОбъектМетаданных% КАК ОбъектМетаданных
		|ГДЕ
		|	ОбъектМетаданных.Ссылка В %МассивСсылок% 
		|";
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(Счетчик), ЭлементСоответствия.Значение.МассивДанных);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%МассивСсылок%", "(&МассивСсылок_" + Строка(Счетчик) + ")");
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОбъектМетаданных%", ЭлементСоответствия.Ключ);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ИмяРеквизита%", ЭлементСоответствия.Значение.ОсновнойПолучатель);
		
		Если ЭтоПервыйЭлементЗапроса Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%РАЗРЕШЕННЫЕ_ПЕРВЫЕ%", "РАЗРЕШЕННЫЕ ПЕРВЫЕ 2");
			ЭтоПервыйЭлементЗапроса = Ложь;
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%РАЗРЕШЕННЫЕ_ПЕРВЫЕ%", "");
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПоЭлементуСоответствия;
		
	КонецЦикла;
	
	//Если основные получатели не заданы, то и посылать нет смысла
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

Процедура ПолучитьРодительскиеДокументы(МассивДокументовРодителей, ДокументПечати) Экспорт

	Если ДокументПечати.Метаданные().Реквизиты.Найти("КонтактноеЛицо") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДокументов = Новый ДеревоЗначений;
	ДеревоДокументов.Колонки.Добавить("Ссылка");
	ДополнитьДеревоРодительскихДокументов(ДокументПечати, ДеревоДокументов);
	
	ДобавитьРодительскиеДокументыВМассивИзДерева(ДеревоДокументов, МассивДокументовРодителей)

КонецПроцедуры

Процедура ДобавитьРодительскиеДокументыВМассивИзДерева(ДеревоРодитель, МассивДокументовРодителей)

	СтрокиДерева = ДеревоРодитель.Строки;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если МассивДокументовРодителей.Найти(СтрокаДерева.Ссылка) = Неопределено Тогда
			МассивДокументовРодителей.Добавить(СтрокаДерева.Ссылка);
		КонецЕсли;
		ДобавитьРодительскиеДокументыВМассивИзДерева(СтрокаДерева, МассивДокументовРодителей);
	КонецЦикла;

КонецПроцедуры

Функция РеквизитУдовлетворяетУсловиям(Реквизит)

	Возврат Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) ИЛИ 
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) ИЛИ
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.СоглашенияСКлиентами")) ИЛИ
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.СделкиСКлиентами"));

КонецФункции

Процедура ДополнитьДеревоРодительскихДокументов(ТекущийДокумент, ДеревоРодитель)

	СтрокиДерева = ДеревоРодитель.Строки;
	МетаданныеДокумента        = ТекущийДокумент.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеДокумента.ПолноеИмя();
	
	СписокРеквизитов    = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		
		Если РеквизитУдовлетворяетУсловиям(Реквизит) Тогда
			
			Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				
				Если МетаданныеРеквизита <> Неопределено
					И (Метаданные.Документы.Содержит(МетаданныеРеквизита) ИЛИ Метаданные.Справочники.Содержит(МетаданныеРеквизита))
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					
					Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ОбъектМетаданных.%ИмяРеквизита% КАК ЗначениеРеквизита
					|ИЗ
					|	%ПолноеИмяОбъектаМедаданных% КАК ОбъектМетаданных
					|ГДЕ
					| ОбъектМетаданных.Ссылка = &ТекущийДокумент");
					
					Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолноеИмяОбъектаМедаданных%", ПолноеИмяОбъектаМетаданных);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРеквизита%", Реквизит.Имя);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЗначениеРеквизита = Выборка.ЗначениеРеквизита;
					Иначе
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						
						СписокРеквизитов.Добавить(ЗначениеРеквизита);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";

		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл

			Если РеквизитУдовлетворяетУсловиям(Реквизит) Тогда
				
				Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
					
					МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
					
					Если МетаданныеРеквизита<>Неопределено
						И (Метаданные.Документы.Содержит(МетаданныеРеквизита) ИЛИ Метаданные.Справочники.Содержит(МетаданныеРеквизита))
						И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
						
						СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(СтрРеквизитов) Тогда
			Продолжить;
		КонецЕсли;
		
		СодержимоеТЧ = ТекущийДокумент[ТЧ.Имя].Выгрузить();
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл

			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл

				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];

				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения <> Неопределено Тогда

					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И (Метаданные.Документы.Содержит(МетаданныеЗначения) ИЛИ Метаданные.Справочники.Содержит(МетаданныеЗначения))
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда

							СписокРеквизитов.Добавить(ЗначениеРеквизита);

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ЭлементСписка Из СписокРеквизитов Цикл
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Ссылка = ЭлементСписка.Значение;
		Если НЕ ДобавляемаяСсылкаИмеетсяСредиРодителей(ДеревоРодитель, ЭлементСписка.Значение) Тогда
			ДополнитьДеревоРодительскихДокументов(ЭлементСписка.Значение, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавляемаяСсылкаИмеетсяСредиРодителей(СтрокаРодитель,ИскомыйДокумент)
	
	Если ТипЗнч(СтрокаРодитель) = Тип("ДеревоЗначений") Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	ТекущийРодитель = СтрокаРодитель;
	Пока ТекущийРодитель <> Неопределено Цикл
		Если ТекущийРодитель.Ссылка = ИскомыйДокумент Тогда
			Возврат Истина;
		КонецЕсли;
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура СформироватьПараметрыОтправки(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, МассивДокументовРодителей, ТребуетсяТелефоны = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	СчетчикОбъектовМетаданных = 1;
	ПервыйЗапросВОбъединении = Истина;
	КоличествоЭлементовВСоответствии = СоответствиеТиповДанныхОбъектовПечати.Количество();
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		МассивРеквизитовПолучателей = ЭлементСоответствия.Значение.МассивРеквизитовПолучателей;
		
		Если МассивРеквизитовПолучателей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеОбъектаПолучателя = Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ);
		Если МетаданныеОбъектаПолучателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикРеквизитовПолучателей = 1;
		КоличествоЭлементовВМассиве = МассивРеквизитовПолучателей.Количество();
		
		Для каждого ИмяРеквизитаПолучателя Из МассивРеквизитовПолучателей Цикл
			
			ТабличнаяЧасть = Неопределено;
			Если ИмяРеквизитаПолучателя = "Ссылка" Тогда
				СинонимРеквизитаПолучателя = МетаданныеОбъектаПолучателя.ПредставлениеОбъекта;
				ОписаниеТиповРеквизита = Новый ОписаниеТипов((СтрЗаменить(ЭлементСоответствия.Ключ, "Справочник", "СправочникСсылка")));
				ТаблицаОбъектаПечати = ЭлементСоответствия.Ключ;
			Иначе
				РеквизитПолучателя = МетаданныеОбъектаПолучателя.Реквизиты.Найти(ИмяРеквизитаПолучателя);
				ТаблицаОбъектаПечати = ЭлементСоответствия.Ключ;
				
				Если РеквизитПолучателя = Неопределено Тогда
					ДанныеРеквизита = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизитаПолучателя,".");
					Если ДанныеРеквизита.Количество() = 2 Тогда
						ИмяТабличнойЧасти = ДанныеРеквизита[0];
						ТабличнаяЧасть    = МетаданныеОбъектаПолучателя.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
						Если ТабличнаяЧасть <> Неопределено Тогда
							ИмяРеквизитаПолучателя = ДанныеРеквизита[1];
							РеквизитПолучателя = ТабличнаяЧасть.Реквизиты.Найти(ИмяРеквизитаПолучателя);
							Если РеквизитПолучателя = Неопределено Тогда
								Возврат;
							Иначе
								ТаблицаОбъектаПечати = ЭлементСоответствия.Ключ + "." + ИмяТабличнойЧасти;
							КонецЕсли;
						Иначе
							МетаданныеРеквизита = МетаданныеОбъектаПолучателя.Реквизиты.Найти(ДанныеРеквизита[0]);
							Если МетаданныеРеквизита <> Неопределено Тогда
								МетаданныеТипаРеквизита = Метаданные.НайтиПоТипу(МетаданныеРеквизита.Тип.Типы()[0]);
								Если МетаданныеТипаРеквизита <> Неопределено Тогда
									РеквизитПолучателя = МетаданныеТипаРеквизита.Реквизиты.Найти(ДанныеРеквизита[1]);
									Если РеквизитПолучателя = Неопределено Тогда
										Возврат;
									КонецЕсли;
								Иначе
									Возврат;
								КонецЕсли;
							Иначе
									Возврат;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				СинонимРеквизитаПолучателя = РеквизитПолучателя.Синоним;
				ОписаниеТиповРеквизита     = РеквизитПолучателя.Тип;
				
			КонецЕсли;
			
			Если ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.Партнеры")) Тогда
					ИмяТаблицыКонтактнойИнформации = "Справочник.Партнеры.КонтактнаяИнформация";
				ИначеЕсли ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
					ИмяТаблицыКонтактнойИнформации = "Справочник.Контрагенты.КонтактнаяИнформация";
				ИначеЕсли ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
					ИмяТаблицыКонтактнойИнформации = "Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация";
				Иначе
					
					Продолжить;
					
			КонецЕсли;
			
			ТекстЗапросаПоРеквизиту ="
			|
			|%ОБЪЕДИНИТЬВСЕ%
			|
			|ВЫБРАТЬ %РАЗРЕШЕННЫЕ% РАЗЛИЧНЫЕ
			|	ОбъектПечати.%ПредставлениеОбъектаПечати% КАК ПредставлениеОбъектаПечати,
			|	ОбъектПечати.Ссылка КАК СсылкаНаОбъектПечати,
			|	&%СинонимРеквизитаПолучателя% КАК СинонимРеквизитаПолучателя,
			|	ОбъектПечати.%ИмяРеквизитаПолучателя% КАК ИсточникКонтактнойИнформации,
			|	ПРЕДСТАВЛЕНИЕ(ОбъектПечати.%ИмяРеквизитаПолучателя%) КАК ПредставлениеПолучателя,
			|	ТаблицаКонтактнойИнформации.АдресЭП КАК Адрес,
			|	ТаблицаКонтактнойИнформации.Вид КАК ВидПочтовогоАдреса
			|ИЗ
			|	%ОбъектПечати% КАК ОбъектПечати
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ТаблицаКонтактнойИнформации% КАК ТаблицаКонтактнойИнформации
			|		ПО ОбъектПечати.%ИмяРеквизитаПолучателя% = ТаблицаКонтактнойИнформации.Ссылка
			|ГДЕ
			|	ОбъектПечати.Ссылка В(%МассивСсылок%)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
			
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%МассивСсылок%", "&МассивСсылок_" + Строка(СчетчикОбъектовМетаданных));
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%СинонимРеквизитаПолучателя%", "СинонимРеквизитаПолучателя_" + Строка(СчетчикОбъектовМетаданных) + "_" + Строка(СчетчикРеквизитовПолучателей));
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ИмяРеквизитаПолучателя%", ИмяРеквизитаПолучателя);
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ОбъектПечати%", ТаблицаОбъектаПечати);
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ТаблицаКонтактнойИнформации%", ИмяТаблицыКонтактнойИнформации);
			
			Запрос.УстановитьПараметр("СинонимРеквизитаПолучателя_" + Строка(СчетчикОбъектовМетаданных) + "_" + Строка(СчетчикРеквизитовПолучателей), СинонимРеквизитаПолучателя);
			
			Если ПервыйЗапросВОбъединении Тогда
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%РАЗРЕШЕННЫЕ%", "РАЗРЕШЕННЫЕ");
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ОБЪЕДИНИТЬВСЕ%", "");
				ПервыйЗапросВОбъединении = Ложь;
			Иначе
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%РАЗРЕШЕННЫЕ%", "");
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ОБЪЕДИНИТЬВСЕ%", "ОБЪЕДИНИТЬ ВСЕ");
			КонецЕсли;
			
			Если ТабличнаяЧасть = Неопределено Тогда
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ПредставлениеОбъектаПечати%", "Представление");
			Иначе
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ПредставлениеОбъектаПечати%", "Ссылка.Представление");
			КонецЕсли;
			
			Если ТребуетсяТелефоны Тогда
				
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "АдресЭлектроннойПочты", "Телефон");
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "АдресЭП", "Представление");
				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПоРеквизиту;
			СчетчикРеквизитовПолучателей = СчетчикРеквизитовПолучателей + 1;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(СчетчикОбъектовМетаданных), ЭлементСоответствия.Значение.МассивДанных);
		СчетчикОбъектовМетаданных = СчетчикОбъектовМетаданных + 1;
		
	КонецЦикла;
	
	Если МассивДокументовРодителей.Количество() > 0 Тогда
		
		СчетчикТипыДокументыРодители = 1;
		СоответствиеТиповДанныхРодительскихДокументов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивДокументовРодителей);
		Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхРодительскихДокументов Цикл
			
			Если Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ).Реквизиты.Найти("КонтактноеЛицо") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапросаПоДокументуРодителю = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	ДокументРодитель.Представление КАК ПредставлениеОбъектаПечати,
			|	ДокументРодитель.Ссылка КАК СсылкаНаОбъектПечати,
			|	&КонтактноеЛицо КАК СинонимРеквизитаПолучателя,
			|	ДокументРодитель.КонтактноеЛицо КАК ИсточникКонтактнойИнформации,
			|	ПРЕДСТАВЛЕНИЕ(ДокументРодитель.КонтактноеЛицо) КАК ПредставлениеПолучателя,
			|	ТаблицаКонтактнойИнформации.АдресЭП КАК Адрес,
			|	ТаблицаКонтактнойИнформации.Вид КАК ВидПочтовогоАдреса
			|ИЗ
			|	%ДокументРодитель% КАК ДокументРодитель
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|		ПО ДокументРодитель.КонтактноеЛицо = ТаблицаКонтактнойИнформации.Ссылка
			|ГДЕ
			|	ДокументРодитель.Ссылка В(%МассивСсылок%)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
			
			ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "%ДокументРодитель%", ЭлементСоответствия.Ключ);
			ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "%МассивСсылок%", "&МассивСсылокДокументыРодители_" + Строка(СчетчикТипыДокументыРодители));
			
			Если ТребуетсяТелефоны Тогда
				ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "АдресЭлектроннойПочты", "Телефон");
				ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "АдресЭП", "Представление");
			КонецЕсли;

			Запрос.УстановитьПараметр("МассивСсылокДокументыРодители_" + Строка(СчетчикТипыДокументыРодители), ЭлементСоответствия.Значение);
			
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПоДокументуРодителю;
			
			СчетчикТипыДокументыРодители = СчетчикТипыДокументыРодители + 1;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("КонтактноеЛицо", НСтр("ru='Контактное лицо';uk='Контактна особа'"));
		
	КонецЕсли;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПараметрыОтправки.Получатель = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ДобавитьПолучателяПечатнойФормы(ПараметрыОтправки.Получатель, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

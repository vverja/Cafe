#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	Если ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Справочники.ДоговорыКонтрагентов);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает статус договоров.
//
// Параметры:
//	Договоры - Массив(СправочникСсылка.ДоговорыКонтрагентов) - Массив ссылок на договоры;
//	Статус - ПеречислениеСсылка.СтатусыДоговоровКонтрагентов - Статус, который будет установлен у договоров.
//
// Возвращаемое значение:
//	Число - Количество обработанных объектов.
//
Функция УстановитьСтатус(Договоры, Статус) Экспорт
	
	МассивСсылок = Новый Массив();
	КоличествоОбработанных = 0;
	
	Для Каждого Договор Из Договоры Цикл
		
		Если ТипЗнч(Договор) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Договор);
		
	КонецЦикла;
	
	Если МассивСсылок = 0 Тогда
		Возврат КоличествоОбработанных;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Статус", Статус);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			
			ТекстОшибки = НСтр("ru='Договор %Договор% помечен на удаление. Невозможно изменить статус';uk='Договір %Договор% позначений на вилучення. Неможливо змінити статус'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Если Выборка.СтатусСовпадает Тогда
			
			ТекстОшибки = НСтр("ru='Договору %Договор% уже присвоен статус ""%Статус%""';uk='Договору %Договор% вже присвоєно статус ""%Статус%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Договор%. %ОписаниеОшибки%';uk='Не вдалося заблокувати %Договор%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецПопытки;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Статус = Статус;
		
		Если Статус = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован Тогда
			Если Объект.Согласован Тогда
				Объект.Согласован = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Объект.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			Объект.Записать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Договор%. %ОписаниеОшибки%';uk='Не вдалося записати %Договор%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Договор%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецПопытки
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

// Процедура заполняет банковские счета документа по договору.
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в документе;
//	БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций - Реквизит документа "Банковский счет организации";
//	БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - Реквизит документа "Банковский счет контрагента".
//
Процедура ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента) Экспорт
	
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "БанковскийСчет, БанковскийСчетКонтрагента"); 
		
	Если БанковскийСчетОрганизации <> Неопределено И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчет) Тогда
		БанковскийСчетОрганизации = ДанныеДоговора.БанковскийСчет;
	КонецЕсли;
	Если БанковскийСчетКонтрагента <> Неопределено И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчетКонтрагента) Тогда
		БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет статью движения денежных средств по договору
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в документе;
//	СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств - Реквизит документа "Статья движения денежных средств";
//
Процедура ЗаполнитьСтатьюДвиженияДенежныхСредствПоДоговору(Договор, СтатьяДвиженияДенежныхСредств) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СтатьяДвиженияДенежныхСредств"); 
	КонецЕсли;
	
КонецПроцедуры

Функция ХозяйственнаяОперация(ТипДоговора) Экспорт
	Типы = Перечисления.ТипыДоговоров;
	Операции = Перечисления.ХозяйственныеОперации;
	
	
	Возврат
		?(ТипДоговора = Типы.СПокупателем, Операции.РеализацияКлиенту,
		?(ТипДоговора = Типы.СКомиссионером, Операции.ПередачаНаКомиссию,
		?(ТипДоговора = Типы.СПоставщиком, Операции.ЗакупкаУПоставщика,
		?(ТипДоговора = Типы.СКомитентом, Операции.ПриемНаКомиссию,
		?(ТипДоговора = Типы.Импорт, Операции.ЗакупкаПоИмпорту,
		?(ТипДоговора = Типы.ИмпортКомиссия, Операции.ПриемНаКомиссиюИмпорт,
		Неопределено))))));
КонецФункции

Функция ТипДоговора(ХозяйственнаяОперация) Экспорт
	Типы = Перечисления.ТипыДоговоров;
	Операции = Перечисления.ХозяйственныеОперации;
	
	
	Возврат
		?(ХозяйственнаяОперация = Операции.РеализацияКлиенту 
			и ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами"), Типы.СПокупателем,
		?(ХозяйственнаяОперация = Операции.ПередачаНаКомиссию, Типы.СКомиссионером, 
		?(ХозяйственнаяОперация = Операции.ЗакупкаУПоставщика
			И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками"), Типы.СПоставщиком, 
		?(ХозяйственнаяОперация = Операции.ПриемНаКомиссию, Типы.СКомитентом, 
		?(ХозяйственнаяОперация = Операции.ЗакупкаПоИмпорту, Типы.Импорт, 
		?(ХозяйственнаяОперация = Операции.ПриемНаКомиссиюИмпорт, Типы.ИмпортКомиссия, 
		Неопределено))))));
КонецФункции

// Определяет, является ли договор внешнеэкономическим
Функция ЭтоВнешнеэкономическийДоговор(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Возврат ((Объект.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить()) ИЛИ
	         (Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт) ИЛИ
	         (Объект.ТипДоговора = Перечисления.ТипыДоговоров.ИмпортКомиссия));
						   
КонецФункции // ЭтоВнешнеэкономическийДоговор
		 
// Определяет, необходимо ли указание номенклатуры на аванс для данного договора
Функция ИспользоватьНоменклатуруЗаполненияНалоговыхНаАванс(Объект) Экспорт
	
	// Доступно только тогда, когда есть настраиваемые моменты определения базы НДС
	Возврат ((Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем) ИЛИ 
	         (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом)) И 
			(Объект.МоментОпределенияБазыНДС <> Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке);
						   
КонецФункции // ИспользоватьНоменклатуруЗаполненияНалоговыхНаАванс

// Функция возвращает значение по умолчанию для реквизита МоментОпределенияБазыНДСПоТипуДоговора на основании данных
// организации. Если для данного договора МоментОпределенияБазыНДС не настраивается, то возвращается Неопределено
//
Функция ПолучитьМоментОпределенияБазыНДСПоУмолчанию(Объект) Экспорт
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Внешнеэкономический = ЭтоВнешнеэкономическийДоговор(Объект);
	
	Если ЗначениеЗаполнено(Объект.ТипДоговора) Тогда
		
		Если Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
			Если Не Внешнеэкономический Тогда
				Возврат Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
			Иначе
				Возврат Объект.Организация.МоментОпределенияБазыНДСПоЭкспорту;
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
			Если Не Внешнеэкономический Тогда
				Возврат Объект.Организация.МоментОпределенияБазыНДСПоЗакупкам;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
			Если Не Внешнеэкономический Тогда
				Возврат Объект.Организация.МоментОпределенияБазыНДСПоЗакупкам;
			Иначе
				Возврат Неопределено;				
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом Тогда
			Если Не Внешнеэкономический Тогда
			    Возврат Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
			Иначе
				Возврат Объект.Организация.МоментОпределенияБазыНДСПоПродажам;				
			КонецЕсли;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
			Возврат Неопределено;				
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.ИмпортКомиссия Тогда
			Возврат Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
			
		ИначеЕсли Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем Тогда
			Возврат Объект.Организация.МоментОпределенияБазыНДСПоПродажам;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции // ПолучитьМоментОпределенияБазыНДСПоУмолчанию

Процедура ЗаполнитьРеквизитыНалоговыхДокументов(Объект) Экспорт
	
	ТипДоговора = Объект.ТипДоговора;
		
КонецПроцедуры
	

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("ТипДоговора");
	Результат.Добавить("Партнер");
	Результат.Добавить("Контрагент");
	Результат.Добавить("Организация");
	Результат.Добавить("ПорядокОплаты");
	Результат.Добавить("ВалютаВзаиморасчетов");
	Результат.Добавить("ПорядокРасчетов");
	Результат.Добавить("НаправлениеДеятельности");
	Результат.Добавить("МоментОпределенияБазыНДС");
	
	Возврат Результат;
КонецФункции

Функция ДобавитьКомандуСоздатьНаОснованииДоговорКонтрагентаВводНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.ДоговорКонтрагентаВводНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "ДоговорКонтрагентаВводНаОсновании";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Договор';uk='Договір'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьДоговорыСКлиентами,ИспользоватьДоговорыСПоставщиками";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;	
КонецФункции

// Определяет реквизиты выбранного элемента справочника
//
// Параметры:
//	Ссылка - Ссылка на элемент справочника
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного элемента справочника
//
Функция РеквизитыОбъекта(Ссылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Дата КАК Дата,
	|	Данные.Организация КАК Организация,
	|	Данные.Партнер КАК Партнер,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Данные.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Данные.Сумма КАК СуммаДокумента,
	|	Данные.Сумма КАК СуммаВзаиморасчетов,
	|	&Ссылка КАК Договор,
	|	Данные.ПорядокРасчетов КАК ПорядокРасчетов,
	|	НЕ Данные.ПометкаУдаления КАК Проведен
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, СуммаДокумента, СуммаВзаиморасчетов",
		Дата,
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		ХозяйственнаяОперация,
		СуммаДокумента,
		СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	
	ТекстСоединений = "";
	ТекстУсловий    = "";
	НомерОтбора     = 0;
	
	Если Параметры.Свойство("Партнер") Тогда
		
		Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
		
		ТекстСоединений = ТекстСоединений + "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
		|	ПО Договоры.Партнер = ИерархияПартнеров.Родитель
		|		И ИерархияПартнеров.Партнер = &Партнер";
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Соглашение") Тогда
		
		Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
			И Тип("СправочникСсылка.СоглашенияСКлиентами") = ТипЗнч(Параметры.Соглашение) Тогда
			
			ТекстСоединений = ТекстСоединений + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
			|	ПО Договоры.ПорядокОплаты = СоглашенияСКлиентами.ПорядокОплаты
			|		И СоглашенияСКлиентами.Ссылка = &Соглашение";
			
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками")
			И Тип("СправочникСсылка.СоглашенияСПоставщиками") = ТипЗнч(Параметры.Соглашение)
			И ЗначениеЗаполнено(Параметры.Соглашение) Тогда
		
			ТекстСоединений = ТекстСоединений + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
			|	ПО Договоры.ПорядокОплаты = СоглашенияСПоставщиками.ПорядокОплаты
			|		И СоглашенияСПоставщиками.Ссылка = &Соглашение";
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Параметры.Свойство("Отбор") Тогда
		
		Для Каждого ТекущийОтбор Из Параметры.Отбор Цикл
			
			Если ТекущийОтбор.Ключ = "Контрагент" И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
				
				Если Не Запрос.Параметры.Свойство("Партнер") Тогда
					
					Запрос.УстановитьПараметр("Контрагент", ТекущийОтбор.Значение);
					
					ТекстСоединений = ТекстСоединений + "
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
					|	ПО Договоры.Партнер = Контрагенты.Партнер
					|		И Контрагенты.Ссылка = &Контрагент";
					
					СтандартнаяОбработка = Ложь;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
            
			Если ТекущийОтбор.Ключ = "ХозяйственнаяОперация" И
				ТекущийОтбор.Значение = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика И
				Параметры.Свойство("ПоказыватьЗакупкуПоИмпорту") Тогда
				
				ТекстУсловий = ТекстУсловий + "
				|	И Договоры.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика))";
				
				СтандартнаяОбработка = Ложь;
				
				Продолжить;
					
			КонецЕсли;
			
			НомерОтбора = НомерОтбора + 1;
			
			ТекстУсловий = ТекстУсловий + "
			|	И Договоры." + ТекущийОтбор.Ключ + " В (&ЗначениеОтбора" + СокрЛП(НомерОтбора) + ")";
			
			Запрос.УстановитьПараметр("ЗначениеОтбора" + СокрЛП(НомерОтбора), ТекущийОтбор.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Договоры.Ссылка       КАК Ссылка,
		|	Договоры.Наименование КАК Наименование,
		|	Договоры.Наименование КАК Совпадение,
		|	1                     КАК Порядок
		|	
		|ПОМЕСТИТЬ ДоговорыПоиск
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|
		|//ТекстСоединений
		|
		|ГДЕ
		|	Договоры.Наименование ПОДОБНО &СтрокаПоиска
		|	//ТекстУсловий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Договоры.Ссылка,
		|	Договоры.Наименование,
		|	Договоры.Номер,
		|	2
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|
		|//ТекстСоединений
		|
		|ГДЕ
		|	Договоры.Номер ПОДОБНО &СтрокаПоиска
		|	//ТекстУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыПоиск.Ссылка           КАК Ссылка,
		|	МИНИМУМ(ДоговорыПоиск.Порядок) КАК Порядок
		|ПОМЕСТИТЬ ДоговорыПоПорядку
		|ИЗ
		|	ДоговорыПоиск КАК ДоговорыПоиск
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоговорыПоиск.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыПоиск.Ссылка       КАК Ссылка,
		|	ДоговорыПоиск.Наименование КАК Наименование,
		|	ДоговорыПоиск.Совпадение   КАК Совпадение,
		|	ДоговорыПоиск.Порядок      КАК Порядок
		|ИЗ
		|	ДоговорыПоПорядку КАК ДоговорыПоПорядку
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыПоиск КАК ДоговорыПоиск
		|		ПО ДоговорыПоПорядку.Ссылка = ДоговорыПоиск.Ссылка
		|			И ДоговорыПоПорядку.Порядок = ДоговорыПоиск.Порядок
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Совпадение,
		|	Наименование";
		
		Если Не ПустаяСтрока(ТекстСоединений) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстСоединений", ТекстСоединений);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстУсловий) Тогда
			
			ТекстУсловий = Сред(ТекстУсловий, 3);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстУсловий", ТекстУсловий);
			
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстЗначение = ?(
				Выборка.Порядок = 1,
				Выборка.Наименование,
				СокрП(Выборка.Совпадение) + " (" + Выборка.Наименование + ")");
				
			ДанныеВыбора.Добавить(Выборка.Ссылка, ТекстЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	ЗаполнитьДелоДоговорыСКлиентами(ТекущиеДела, ОбщиеПараметрыЗапросов);
	ЗаполнитьДелоДоговорыСПоставщиками(ТекущиеДела, ОбщиеПараметрыЗапросов);
	
КонецПроцедуры

Процедура ЗаполнитьДелоДоговорыСКлиентами(ТекущиеДела, ОбщиеПараметрыЗапросов)
	
	ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаСпискаПродажи";
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов))
		И ДоступныДоговорыСКлиентами();
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|		КОНЕЦ) КАК ДоговорыСКлиентамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|					И (ДоговорСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСКлиентом.ДатаНачалаДействия < &ДатаАктуальности
	|						ИЛИ ДоговорСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности)
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|					И ДоговорСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДоговорСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|		КОНЕЦ) КАК ДоговорыСКлиентамиПросроченные
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорСКлиентом
	|ГДЕ
	|	ДоговорСКлиентом.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|	И (ДоговорСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ИЛИ ДоговорСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
	|	И ДоговорСКлиентом.Менеджер = &Пользователь
	|	И (НЕ ДоговорСКлиентом.ПометкаУдаления)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ДоговорыСКлиентами
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ДоговорыСКлиентами";
	ДелоРодитель.Представление  = НСтр("ru='Договоры с клиентами';uk='Договори з клієнтами'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
	
	// ДоговорыСКлиентамиНаСогласовании
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СостоянияДоговоровКонтрагентов.ОжидаетсяСогласование);
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Организация", Неопределено);
	ПараметрыОтбора.Вставить("Контрагент", Неопределено);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ДоговорыСКлиентамиНаСогласовании";
	Дело.ЕстьДела       = Результат.ДоговорыСКлиентамиНаСогласовании > 0;
	Дело.Представление  = НСтр("ru='Договоры на согласовании';uk='Договори на погодженні'");
	Дело.Количество     = Результат.ДоговорыСКлиентамиНаСогласовании;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ДоговорыСКлиентами";
	
	// ДоговорыСКлиентамиПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Неопределено);
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Просроченные';uk='Прострочені'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Организация", Неопределено);
	ПараметрыОтбора.Вставить("Контрагент", Неопределено);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ДоговорыСКлиентамиПросроченные";
	Дело.ЕстьДела       = Результат.ДоговорыСКлиентамиПросроченные > 0;
	Дело.Представление  = НСтр("ru='Просроченные договоры';uk='Прострочені договори'");
	Дело.Количество     = Результат.ДоговорыСКлиентамиПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ДоговорыСКлиентами";
	
	Если Результат.ДоговорыСКлиентамиНаСогласовании > 0
		Или Результат.ДоговорыСКлиентамиПросроченные > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДелоДоговорыСПоставщиками(ТекущиеДела, ОбщиеПараметрыЗапросов)
	
	ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаСпискаЗакупки";
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов))
		И ДоступныДоговорыСПоставщиками();
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|		КОНЕЦ) КАК ДоговорыСПоставщикамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|					И (ДоговорСПоставщиком.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСПоставщиком.ДатаНачалаДействия < &ДатаАктуальности
	|						ИЛИ ДоговорСПоставщиком.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСПоставщиком.ДатаОкончанияДействия < &ДатаАктуальности)
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|					И ДоговорСПоставщиком.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДоговорСПоставщиком.ДатаОкончанияДействия < &ДатаАктуальности
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|		КОНЕЦ) КАК ДоговорыСПоставщикамиПросроченные
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорСПоставщиком
	|ГДЕ
	|	ДоговорСПоставщиком.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|	И (ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт)
	|	ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|	И ДоговорСПоставщиком.Менеджер = &Пользователь
	|	И (НЕ ДоговорСПоставщиком.ПометкаУдаления)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ДоговорыСПоставщиками
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ДоговорыСПоставщиками";
	ДелоРодитель.Представление  = НСтр("ru='Договоры с поставщиками';uk='Договори з постачальниками'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
	
	// ДоговорыСПоставщикамиНаСогласовании
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СостоянияДоговоровКонтрагентов.ОжидаетсяСогласование);
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Организация", Неопределено);
	ПараметрыОтбора.Вставить("Контрагент", Неопределено);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ДоговорыСПоставщикамиНаСогласовании";
	Дело.ЕстьДела       = Результат.ДоговорыСПоставщикамиНаСогласовании > 0;
	Дело.Представление  = НСтр("ru='Договоры на согласовании';uk='Договори на погодженні'");
	Дело.Количество     = Результат.ДоговорыСПоставщикамиНаСогласовании;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ДоговорыСПоставщиками";
	
	// ДоговорыСПоставщикамиПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Неопределено);
	ПараметрыОтбора.Вставить("Актуальность", НСтр("ru='Просроченные';uk='Прострочені'"));
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Организация", Неопределено);
	ПараметрыОтбора.Вставить("Контрагент", Неопределено);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ДоговорыСПоставщикамиПросроченные";
	Дело.ЕстьДела       = Результат.ДоговорыСПоставщикамиПросроченные > 0;
	Дело.Представление  = НСтр("ru='Просроченные договоры';uk='Прострочені договори'");
	Дело.Количество     = Результат.ДоговорыСПоставщикамиПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ДоговорыСПоставщиками";
	
	Если Результат.ДоговорыСПоставщикамиНаСогласовании > 0
		Или Результат.ДоговорыСПоставщикамиПросроченные > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныДоговорыСКлиентами()
	
	МассивХозяйственныхОпераций = Новый Массив;
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	Возврат ЕстьПравоНаИзменениеДоговоров(МассивХозяйственныхОпераций);
	
КонецФункции

Функция ДоступныДоговорыСПоставщиками()
	
	МассивХозяйственныхОпераций = Новый Массив;
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
	
	Возврат ЕстьПравоНаИзменениеДоговоров(МассивХозяйственныхОпераций);
	
КонецФункции

Функция ЕстьПравоНаИзменениеДоговоров(МассивХозяйственныхОпераций)
	
	ТаблицаНаборы = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
	
	//Заполним наборы значений доступа к договорам
	Сч = 1;
	Для Каждого ХозяйственнаяОперация из МассивХозяйственныхОпераций Цикл
		СтрокаТаб = ТаблицаНаборы.Добавить();
		СтрокаТаб.НомерНабора     = Сч;
		СтрокаТаб.ЗначениеДоступа = ХозяйственнаяОперация;
		Сч = Сч+1;
	КонецЦикла;
	
	Возврат УправлениеДоступом.ЕстьРоль("ДобавлениеИзменениеДоговоровКонтрагентов", ТаблицаНаборы);
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуВедомостьРасчетов(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаЭлемента,ФормаСписка,ФормаСпискаПродажи,ФормаСпискаЗакупки";
	КонецЕсли;

	
КонецПроцедуры

// Рассчитывает текущее состояние оплаты и отгрузки по договору
//
// Параметры:
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с контрагентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(Договор) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСКлиентами.КОплатеРасход, 0) КАК СуммаОплаты,
		|	ВЫБОР КОГДА ДанныеОбъекта.Сумма <> 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСКлиентами.КОплатеРасход, 0) * 100 / ДанныеОбъекта.Сумма
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОплаты,
		|	
		|	ЕСТЬNULL(РасчетыСКлиентами.КОтгрузкеПриход, 0) КАК СуммаОтгрузки,
		|	ВЫБОР КОГДА ДанныеОбъекта.Сумма <> 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСКлиентами.КОтгрузкеПриход, 0) * 100 / ДанныеОбъекта.Сумма
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОтгрузки
		|	
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеОбъекта
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,, ЗаказКлиента = &Договор) КАК РасчетыСКлиентами
		|	ПО
		|		Истина
		|	
		|ГДЕ
		|	ДанныеОбъекта.Ссылка = &Договор
		|	И ДанныеОбъекта.ПорядокРасчетов = &ПорядокРасчетов
		|	И ДанныеОбъекта.ТипДоговора В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем)
		|	)
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РасчетыСПоставщиками.КОплатеПриход, 0) КАК СуммаОплаты,
		|	ВЫБОР КОГДА ДанныеОбъекта.Сумма <> 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСПоставщиками.КОплатеПриход, 0) * 100 / ДанныеОбъекта.Сумма
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОплаты,
		|	
		|	ЕСТЬNULL(РасчетыСПоставщиками.КПоступлениюРасход, 0) КАК СуммаОтгрузки,
		|	ВЫБОР КОГДА ДанныеОбъекта.Сумма <> 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСПоставщиками.КПоступлениюРасход, 0) * 100 / ДанныеОбъекта.Сумма
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОтгрузки
		|	
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеОбъекта
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,, ЗаказПоставщику = &Договор) КАК РасчетыСПоставщиками
		|	ПО
		|		Истина
		|	
		|ГДЕ
		|	ДанныеОбъекта.Ссылка = &Договор
		|	И ДанныеОбъекта.ПорядокРасчетов = &ПорядокРасчетов
		|	И ДанныеОбъекта.ТипДоговора В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Импорт),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком)
		|	)
		|";
		
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Осуществляет инициализацию структуры состояния расчетов
//
// Возвращаемое значение:
//	СтруктураСостоянияРасчетов - Структура - Необходимые поля состояния расчетов
//
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	
	Возврат СтруктураСостоянияРасчетов;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


// Обработчик обновления BAS УТ 3.2.1
// Заполняет константу ИспользоватьДоговорыСПоставщиками
Процедура ЗаполнитьКонстантуИспользоватьДоговорыСПоставщиками() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Партнер.Поставщик");
	
	КоличествоЗаписей = Запрос.Выполнить().Выбрать().Количество();
	
	Константы.ИспользоватьДоговорыСПоставщиками.Установить(КоличествоЗаписей > 0);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбновлениеИнформационнойБазы


Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизацийКОформлению";
	
#Область Заполнить_суммы_в_движениях
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыОрганизацийКОформлению.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКОформлению КАК ТоварыОрганизацийКОформлению
	|ГДЕ
	|	ТоварыОрганизацийКОформлению.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|	И ТоварыОрганизацийКОформлению.Активность
	|	И ТоварыОрганизацийКОформлению.Сумма = 0;
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры,
		Регистраторы,
		ПолноеИмяРегистра);
	
#КонецОбласти
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
// Производит заполнение ресурса ""Сумма"" движений регистра накопления "Товары организаций к оформлению".
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизацийКОформлению";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоПоступление,
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК ДокументПоступления,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Период,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Организация КАК Организация,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Партнер КАК Поставщик,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Валюта КАК Валюта,
	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ПоступлениеТоваровУслугТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ВидЗапасов КАК ВидЗапасов,
	|	ПоступлениеТоваровУслугТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	|	ПоступлениеТоваровУслугТовары.СуммаСНДС КАК СуммаСНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				СсылкиДляОбработки.Регистратор
	|			ИЗ
	|				&ВТДляОбработкиСсылка КАК СсылкиДляОбработки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтоПоступление,
	|	ТаможеннаяДекларацияИмпортТовары.ДокументПоступления КАК ДокументПоступления,
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка.Дата КАК Период,
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка.Организация КАК Организация,
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка.Поставщик КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	ТаможеннаяДекларацияИмпортТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаможеннаяДекларацияИмпортТовары.ВидЗапасов КАК ВидЗапасов,
	|	0 КАК СуммаВзаиморасчетов,
	|	ТаможеннаяДекларацияИмпортТовары.Количество КАК Количество,
	|	ТаможеннаяДекларацияИмпортТовары.ТаможеннаяСтоимость КАК СуммаСНДС
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|ГДЕ
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				СсылкиДляОбработки.Регистратор
	|			ИЗ
	|				&ВТДляОбработкиСсылка КАК СсылкиДляОбработки)
	|	И ТаможеннаяДекларацияИмпортТовары.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|;
	|
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоПоступление,
	|	СсылкиДляОбработки.Регистратор КАК ДокументПоступления,
	|	ПоступлениеТоваровУслуг.Дата КАК Период,
	|	ПоступлениеТоваровУслуг.Валюта КАК Валюта,
	|	ПоступлениеТоваровУслуг.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ПО ПоступлениеТоваровУслуг.Ссылка = СсылкиДляОбработки.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтоПоступление,
	|	СсылкиДляОбработки.Регистратор КАК ДокументПоступления,
	|	ТаможеннаяДекларацияИмпорт.Дата КАК Период,
	|	ТаможеннаяДекларацияИмпорт.Валюта КАК Валюта,
	|	ТаможеннаяДекларацияИмпорт.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|		ПО ТаможеннаяДекларацияИмпорт.Ссылка = СсылкиДляОбработки.Регистратор";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		Неопределено,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаПоступлений = РезультатЗапроса[0].Выгрузить();
	Выборка = РезультатЗапроса[1].Выбрать();
	
	СтруктураПоиска = Новый Структура("Период, Организация, Поставщик, АналитикаУчетаНоменклатуры, ВидЗапасов, ДокументПоступления, Количество, ЭтоПоступление");
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПолноеИмяДокумента = "";
	
	Пока Выборка.Следующий() Цикл
		
		ОбрабатываемыйДокумент = Выборка.ДокументПоступления;
		
		Если Выборка.ЭтоПоступление Тогда
			ПолноеИмяДокумента = "Документ.ПоступлениеТоваровУслуг";
		Иначе
			ПолноеИмяДокумента = "Документ.ТаможеннаяДекларацияИмпорт";
		КонецЕсли;
		
		КоэффициентПересчета = РаботаСКурсамивалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Выборка.Валюта, ВалютаРегламентированногоУчета, Выборка.Период);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ОбрабатываемыйДокумент);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.ТоварыОрганизацийКОформлению.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ОбрабатываемыйДокумент);
			НаборЗаписей.Прочитать();
			
			Для каждого ТекСтрока Из НаборЗаписей Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
				СтруктураПоиска.ЭтоПоступление = Выборка.ЭтоПоступление;
				
				НайденныеСтроки = ТаблицаПоступлений.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					
					Если НайденнаяСтрока.ЭтоПоступление Тогда
						ТекСтрока.Сумма = ?(НайденнаяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
							И НайденнаяСтрока.Валюта <> ВалютаРегламентированногоУчета,
							НайденнаяСтрока.СуммаВзаиморасчетов,
							НайденнаяСтрока.СуммаСНДС * КоэффициентПересчета);
					Иначе
						ТекСтрока.Сумма = НайденнаяСтрока.СуммаСНДС * КоэффициентПересчета;
					КонецЕсли;
					ТаблицаПоступлений.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось перезаписать движения в регистр %ИмяРегистра% по документу %Ссылка% по причине: %Причина%';uk='Не вдалося перезаписати рухи в регістр %ИмяРегистра% по документу %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбрабатываемыйДокумент);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяРегистра);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента), 
				ОбрабатываемыйДокумент, ТекстСообщения);
			
		КонецПопытки;

	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли
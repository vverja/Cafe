&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаКлиенте
Перем КэшированныеЗначения; //текущая номенклатура для передачи в обработчики ожидания

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПодразделения                         = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьРучныеСкидкиВПродажах                 = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьКоммерческиеПредложенияКлиентам       = ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	ИспользоватьЗаказыКлиентов                        = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьТиповыеСоглашенияСКлиентами           = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами    = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьСоглашенияСКлиентами                  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьПодключаемоеОборудование              = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента      = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	ИспользоватьРасширенныеВозможностиЗаказаКлиента   = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ИспользоватьГрафикиОплаты                         = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	ИспользоватьУпрощеннуюСхемуОплаты                 = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	ИспользоватьСтатусыРеализацийТоваровУслуг         = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг");
	ИспользоватьОрдерныеСклады				          = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
	ИспользоватьНаправленияДеятельности				  = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	ВыводитьСкидкиВПечатныеФормы                      = Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить() 
		<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки;
        
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");	
        
	ПараметрыВыбораРеквизитов = ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(Метаданные.Обработки.ПомощникПродаж);
	
	ВариантКлассификацииЗадолженности = Справочники.ВариантыКлассификацииЗадолженности.ЭлементПоУмолчанию();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж));
	
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	ПродажиСервер.УстановитьОтметкуНезаполненногоДоговора(Элементы, "Договор");
	
	ИспользоватьТиповыеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	
	СкрытьНедоступныеДополнительныеРеквизиты();
	
	УстановитьНалогообложениеНДСПоУмолчанию(Истина);
	
	УстановитьЗаголовокРеквизитовПечати();
	ПроверитьДоступностьПечатиПКО();
	ИнициализироватьПомощникПродаж();
	УстановитьВидимостьОпераций();
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	УстановитьДоступностьКомандОбеспечения();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "Товары");
	
	Элементы.РазворачиватьГруппировкиДосье.Пометка = РазворачиватьГруппировкиДосье;
	
	ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	Если ИспользоватьУправлениеДоставкой Тогда
		
		Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
			Элементы.СтраницыПеревозчик.ТекущаяСтраница = Элементы.СтраницаПеревозчикПусто;
			Элементы.СтраницыДоставки.ТекущаяСтраница   = Элементы.СтраницаДоставкаКоммерческоеПредложение;
		Иначе
			ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	РежимФормированияРасходныхОрдеров = Константы.РежимФормированияРасходныхОрдеров.Получить();
	ДоступноСозданиеРасходныхОрдеров  = РежимФормированияРасходныхОрдеров = Перечисления.РежимыФормированияРасходныхОрдеров.Менеджером
										И ПравоДоступа("Добавление", Метаданные.Документы.РасходныйОрдерНаТовары);
	
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС1);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо1);
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
		Элементы.ГруппаШапка.ЦветФона = Новый Цвет();
		Элементы.ГруппаОсновнаяКоманднаяПанель.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары");
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
		
		СохраненныйСтатус = Настройки.Получить("Объект.СтатусЗаказаКлиента");
		Если ЗначениеЗаполнено(СохраненныйСтатус) Тогда
			
			ДоступныеСтатусы = Новый СписокЗначений;
			Перечисления.СтатусыЗаказовКлиентов.ЗаполнитьСписокВыбора(
				ДоступныеСтатусы, Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
				
			Если ДоступныеСтатусы.НайтиПоЗначению(СохраненныйСтатус) = Неопределено Тогда
				РазмерСписка = ДоступныеСтатусы.Количество();
				Объект.СтатусЗаказаКлиента = ДоступныеСтатусы[РазмерСписка - 1].Значение;
				Настройки.Удалить("Объект.СтатусЗаказаКлиента");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВариантОформленияДокументовПродажиПоУмолчанию();
	Элементы.РазворачиватьГруппировкиДосье.Пометка = РазворачиватьГруппировкиДосье;
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьДоступностьКомандОбеспечения();
	УстановитьВидимостьРеквизитовОплаты();
	УстановитьВидимостьНаправленияДеятельности();
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ВыполняетсяЗакрытие и Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru='Закрыть';uk='Закрити'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru='Не закрывать';uk='Не закривати'"));
		
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru='Работа помощника будет завершена, все введенные данные будут потеряны. Закрыть помощник?';uk='Робота помічника буде завершена, всі введені дані будуть втрачені. Закрити помічник?'"), СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = "Закрыть" Тогда
        ВыполняетсяЗакрытие = Истина;
		Закрыть();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия, Источник, Параметр", ИмяСобытия, Источник, Параметр)), Параметр.КартаЛояльности);
        Возврат;
	КонецЕсли;
	
	ОбработкаОповещенияФрагмент(ИмяСобытия, Источник, Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
    Источник = ДополнительныеПараметры.Источник;
    Параметр = ДополнительныеПараметры.Параметр;
    
    
    ОбработкаОповещенияФрагмент(ИмяСобытия, Источник, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Знач Источник, Знач Параметр)
    
    Перем АдресНабораВоВременномХранилище, ПараметрыКомплекта, ПараметрыОткрытия, ЭтоСобытиеЗаписи;
    
    Если ИмяСобытия = "ПолученыСообщения"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПолученыСообщения(Параметр.Сообщения);
    КонецЕсли;
    
	Если ИмяСобытия = "ВыборПартнераНайдено"
		И Не Параметр.Перевозчик Тогда
		Объект.Партнер =  Параметр.Партнер;
		ПриИзмененииПартнераСервер();
	КонецЕсли;
    
    Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
        ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
        
        УстановитьВидимостьЗапретаОтгрузкиПартнеру();
    КонецЕсли;
    
    Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
    КонецЕсли;
    
    Если ИмяСобытия = "РедактироватьНабор"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        
        ПараметрыКомплекта = Новый Структура;
        ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
        ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
        
        АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
        
        ПараметрыОткрытия = Новый Структура;
        ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
        ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
        ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыОткрытия.Вставить("НалогообложениеНДС", НалогообложениеНДСПоУмолчанию);
        ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
        ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
        ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
        
        ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
        
    КонецЕсли;
    
    // При событии записи нужно обновить состояние документа.
    ЭтоСобытиеЗаписи = (Лев(ИмяСобытия,7) = "Запись_");
    
    Если ЭтоСобытиеЗаписи Тогда
        ОбновитьСостояниеДокумента(Источник);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ПроверяемыеРеквизиты.Очистить();
	МассивНепроверяемыхРеквизитов = Новый Массив;

#Область ПроверкиРеквизитовШапки
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Клиент"" не заполнено';uk='Поле ""Клієнт"" не заповнено'"),
			,
			"Объект.Партнер",
			,
			Отказ);
	
	КонецЕсли;
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Соглашение"" не заполнено';uk='Поле ""Оферта"" не заповнено'"),
			,
			"Объект.Соглашение",
			,
			Отказ);
	
	КонецЕсли;
	
	ЕстьТовары = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар)).Количество() > 0;
	ЕстьТара   = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.МногооборотнаяТара)).Количество() > 0;
		
	Если СкладОбязателен И Не СкладГруппа И Не ЗначениеЗаполнено(Объект.Склад)
		И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Склад"" не заполнено';uk='Поле ""Склад"" не заповнено'"),,"Объект.Склад",, Отказ);
		
	ИначеЕсли (ЕстьТовары ИЛИ ЕстьТара) И СкладГруппа И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ВыборГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ВыборГруппы");
		
		Если (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Или
			Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) И
			ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Необходимо указать группу складов, разрешенную для выбора в заказах';uk='Необхідно вказати групу складів, дозволену для вибору замовлення'"),
				,
				"Объект.Склад",
				,
				Отказ);
			
		ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг И
			(ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Или 
			ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Необходимо указать группу складов, разрешенную для выбора в реализациях';uk='Необхідно вказати групу складів, дозволену для вибору в реалізаціях'"),
				,
				"Объект.Склад",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

	Если НаправлениеДеятельностиОбязательно 
			И НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности)
			И НЕ Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru='Необходимо заполнить Направление деятельности';uk='Необхідно заповнити Напрям діяльності'");
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.НаправлениеДеятельности",
			,
			Отказ);
		
	КонецЕсли;
	
#КонецОбласти

#Область ПроверкиТабличнойЧастиТовары
	
	ЕстьОшибкиТовары = Ложь;
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не введено ни одной строки в список ""Товары""';uk='Не введено жодного рядка в список ""Товари""'"),
			,
			"Объект.Товары",
			,
			ЕстьОшибкиТовары);
		
	КонецЕсли;
	
	ПараметрыОтбораПродажа = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
	СтрокиПродажи = Объект.Товары.НайтиСтроки(ПараметрыОтбораПродажа);
	
	Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""';uk=' у рядку %НомерСтроки% списку ""Товари""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Объект.Товары[ТекИндекс].НомерСтроки);
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Номенклатура) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Номенклатура""';uk='Не заповнена колонка ""Номенклатура""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Номенклатура"),
				,
				ЕстьОшибкиТовары);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].КоличествоУпаковок) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Количество""';uk='Не заповнена колонка ""Кількість""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "КоличествоУпаковок"),
				,
				ЕстьОшибкиТовары);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Цена) 
			И ?(Объект.ВернутьМногооборотнуюТару И НЕ Объект.ТребуетсяЗалогЗаТару, Объект.Товары[ТекИндекс].ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара, Истина) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Цена""';uk='Не заповнена колонка ""Ціна""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Цена"),
				,
				ЕстьОшибкиТовары);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Сумма) 
			И ?(Объект.ВернутьМногооборотнуюТару И НЕ Объект.ТребуетсяЗалогЗаТару, Объект.Товары[ТекИндекс].ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара, Истина) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Сумма""';uk='Не заповнена колонка ""Сума""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Сумма"),
				,
				ЕстьОшибкиТовары);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].СтавкаНДС) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Ставка НДС""';uk='Не заповнена колонка ""Ставка ПДВ""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "СтавкаНДС"),
				,
				ЕстьОшибкиТовары);
			
		КонецЕсли;
		
		Если Объект.Товары[ТекИндекс].СкладОбязателен И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Склад)
			И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Склад""';uk='Не заповнена колонка ""Склад""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Склад"),
				,
				ЕстьОшибкиТовары);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].ВариантОформления) 
			И Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Оформить""';uk='Не заповнена колонка ""Оформити""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "ВариантОформления"),
				,
				ЕстьОшибкиТовары);
			
		КонецЕсли;
		
		Если (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
				Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) Тогда
				
			Если Объект.Товары[ТекИндекс].ДатаОтгрузкиОбязательна И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].ДатаОтгрузки) И Не Объект.НеотгружатьЧастями Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнена колонка ""Дата отгрузки""';uk='Не заповнена колонка ""Дата відвантаження""'") + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
					,
					ЕстьОшибкиТовары);
				
			КонецЕсли;
			
			// Дата отгрузки в тч Товары должна быть не меньше даты документа
			Если НЕ Объект.НеОтгружатьЧастями 
				И ЗначениеЗаполнено(Объект.Товары[ТекИндекс].ДатаОтгрузки) 
				И Объект.Товары[ТекИндекс].ДатаОтгрузки < НачалоДня(Объект.Дата) Тогда
			
				ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты продажи ""%Дата%""';uk='Дата відвантаження повинна бути не менше дати продажу ""%Дата%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Объект.Дата, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
					,
					Отказ);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ОбработкаОбъект, ПроверяемыеРеквизиты, ЕстьОшибкиТовары);
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ОбработкаОбъект, МассивНепроверяемыхРеквизитов,ЕстьОшибкиТовары);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж);
	
	Если ЭтоРеализация(Объект.ВариантОформленияДокументов) Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(Объект, ПараметрыУказанияСерий.Реализация, ЕстьОшибкиТовары);
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(Объект, ПараметрыУказанияСерий.Заказ, ЕстьОшибкиТовары);
		
	КонецЕсли;
	
	Если (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
				Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг)
			И ДатаОтгрузкиОбязательна И Объект.НеОтгружатьЧастями И Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Дата отгрузки"" не заполнено';uk='Поле ""Дата відвантаження"" не заповнено'"),
			,
			"Объект.ДатаОтгрузки",
			,
			ЕстьОшибкиТовары);
	
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеСодержания(ОбработкаОбъект, ЕстьОшибкиТовары, "Товары");

#КонецОбласти

#Область ПроверкиРеквизитовОплатыИОтгрузкиИТабличнойЧастиЭтапыоплаты
	
	ЕстьОшибкиОплатаОтгрузка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Организация"" не заполнено';uk='Поле ""Організація"" не заповнене'"),
			,
			"Объект.Организация",
			,
			ЕстьОшибкиОплатаОтгрузка);
	
	КонецЕсли;

	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
		И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов")
		И Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Контрагент"" не заполнено';uk='Поле ""Контрагент"" не заповнено'"),
			,
			"Объект.Контрагент",
			,
			ЕстьОшибкиОплатаОтгрузка);
	
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение 
		И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")
		И ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение)
		И Не ЗначениеЗаполнено(Объект.Договор)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Договор"" не заполнено';uk='Поле ""Договір"" не заповнено'"),
			,
			"Объект.Договор",
			,
			ЕстьОшибкиОплатаОтгрузка);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Менеджер) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Менеджер"" не заполнено';uk='Поле ""Менеджер"" не заповнено'"),
			,
			"Объект.Менеджер",
			,
			ЕстьОшибкиОплатаОтгрузка);
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Валюта"" не заполнено';uk='Поле ""Валюта"" не заповнено'"),
			,
			"Объект.Валюта",
			,
			ЕстьОшибкиОплатаОтгрузка);
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Операция"" не заполнено';uk='Поле ""Операція"" не заповнено'"),
			,
			"Объект.ХозяйственнаяОперация",
			,
			ЕстьОшибкиОплатаОтгрузка);
	
	КонецЕсли;

	
	// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ОбработкаОбъект.ЖелаемаяДатаОтгрузки) И ОбработкаОбъект.ЖелаемаяДатаОтгрузки < НачалоДня(ОбработкаОбъект.Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть не меньше даты документа %Дата%';uk='Бажана дата відвантаження повинна бути не менше дати документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ОбработкаОбъект.Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ЖелаемаяДатаОтгрузки",
			,
			ЕстьОшибкиОплатаОтгрузка);
		
	КонецЕсли;
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если Объект.НеОтгружатьЧастями И ЗначениеЗаполнено(ОбработкаОбъект.ДатаОтгрузки) И ОбработкаОбъект.ДатаОтгрузки < НачалоДня(ОбработкаОбъект.Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%';uk='Дата відвантаження повинна бути не менше дати документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ОбработкаОбъект.Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ДатаОтгрузки",
			,
			ЕстьОшибкиОплатаОтгрузка);
		
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
		Объект.СоздаватьПриходныйКассовыйОрдер И
		Не ЗначениеЗаполнено(Объект.Касса) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Касса"" не заполнено';uk='Поле ""Каса"" не заповнено'"),
			,
			"НадписьЭтапыОплаты",
			,
			ЕстьОшибкиОплатаОтгрузка);
	
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		СуммаОплатыПоДокументу = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
		СуммаЗалогаЗаТару      = ?(Объект.ТребуетсяЗалогЗаТару, Объект.Товары.Итог("СуммаСНДС") - СуммаОплатыПоДокументу, 0);
		
		ОплатаУказываетсяВРеализации = ОплатаУказываетсяВРеализации(Объект.ВариантОформленияДокументов, Объект.ПорядокРасчетов);
		
		Если Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента")
			И ОплатаУказываетсяВРеализации
			Или (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов И ГрафикИсполненияВДоговоре) Тогда
		
			НеобходимаПроверкаОплаты = Ложь;
			
		Иначе
			
			НеобходимаПроверкаОплаты = Истина;
			
		КонецЕсли;
		
		Если НеобходимаПроверкаОплаты Тогда
			
			Если ОплатаУказываетсяВРеализации Тогда
				
				Если Объект.СуммаПредоплаты < СуммаОплатыПоДокументу
					Или (Объект.ТребуетсяЗалогЗаТару И Объект.СуммаПредоплатыЗаТару < СуммаЗалогаЗаТару) Тогда
					ЭтапыОплатыСервер.ПроверитьЗаполнениеКорректностьДатыПлатежа(Объект.ДатаПлатежа, Объект.Дата, ЕстьОшибкиОплатаОтгрузка);
				КонецЕсли;
				
			Иначе
				
				ПродажиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
					Объект,
					СуммаВсего,
					СуммаЗалогаЗаТару,
					Истина,
					ЕстьОшибкиОплатаОтгрузка,
					Истина);
				
				КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверка запрета отгрузки
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента 
		И Объект.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован  Тогда
		
		ПродажиСервер.ПроверитьЗапретОтгрузки(Объект.Партнер, Отказ);
		
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Тогда
		ПараметрыОтбораАкт = Новый Структура("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот);
		
		ТоварыАкт = Объект.Товары.Выгрузить(ПараметрыОтбораАкт);
		
		Если (ТоварыАкт.Количество() > 0 
			ИЛИ Объект.СтатусРеализацииТоваровУслуг <> Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате 
			ИЛИ Объект.СуммаПредоплаты = 0) Тогда
			ПродажиСервер.ПроверитьЗапретОтгрузки(Объект.Партнер, Отказ);
		КонецЕсли;
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
		ПараметрыОтбораЗаказ = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента);
		ПараметрыОтбораЗаказ = Объект.Товары.Выгрузить(ПараметрыОтбораЗаказ);
		
		Если ПараметрыОтбораЗаказ.Количество() = Объект.Товары.Количество() 
			И Объект.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
			ПродажиСервер.ПроверитьЗапретОтгрузки(Объект.Партнер, Отказ);
		КонецЕсли;
		
		Если СтрокиПродажи.Количество() > 0 Тогда
			ПродажиСервер.ПроверитьЗапретОтгрузки(Объект.Партнер, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Проверка реквизитов доставки
	ЕстьОшибкиДоставки = Ложь;
	Если ИспользоватьУправлениеДоставкой
			И (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
				ИЛИ Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) Тогда
		Если Объект.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда
			Если НЕ ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
				Если Объект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда
					ТекстОшибки = НСтр("ru='Поле ""Адрес доставки"" не заполнено';uk='Поле ""Адреса доставки"" не заповнено'")
				Иначе
					ТекстОшибки = НСтр("ru='Поле ""Адрес доставки до получателя"" не заполнено';uk='Поле ""Адреса доставки до одержувача"" не заповнено'")
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"Объект.АдресДоставки",
					,
					ЕстьОшибкиДоставки);
			КонецЕсли;
			Если (Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
				ИЛИ Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				И НЕ ЗначениеЗаполнено(Объект.ПеревозчикПартнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле ""Перевозчик"" не заполнено';uk='Поле ""Перевізник"" не заповнено'"),
					,
					"Объект.ПеревозчикПартнер",
					,
					ЕстьОшибкиДоставки);
			КонецЕсли;
			Если Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
				И НЕ ЗначениеЗаполнено(Объект.АдресДоставкиПеревозчика) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле ""Адрес доставки до перевозчика"" не заполнено';uk='Поле ""Адреса доставки до перевізника"" не заповнено'"),
					,
					"Объект.АдресДоставкиПеревозчика",
					,
					ЕстьОшибкиДоставки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкиТовары Тогда
		
		СброситьПометкиКомандШапки(Элементы);
		Элементы.ПерейтиКорзина.Пометка = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКорзина;
	ИначеЕсли ЕстьОшибкиОплатаОтгрузка Тогда
		
		СброситьПометкиКомандШапки(Элементы);
		Элементы.ПерейтиОтгрузкаОплата.Пометка = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОплатаОтгрузка;
	
	ИначеЕсли ЕстьОшибкиДоставки Тогда
		
		СброситьПометкиКомандШапки(Элементы);
		Элементы.ПерейтиДоставка.Пометка = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоставка;
		
	КонецЕсли;
	
	Отказ = Отказ Или ЕстьОшибкиТовары Или ЕстьОшибкиОплатаОтгрузка ИЛИ ЕстьОшибкиДоставки;
	
#КонецОбласти
	
	Если Не Отказ Тогда
		ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(РеквизитФормыВЗначение("Объект"), Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда

		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда

		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда

		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.Настройка" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			ОбработатьИзменениеПараметровСервер(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Или
		ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.РеквизитыПечатиАкта" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
				Объект.БанковскийСчет = ВыбранноеЗначение.БанковскийСчетОрганизации;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗагрузитьДополнительныеРеквизитыИзХранилищаСервер(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ОпределитьПараметрыСерийНаКлиенте(ВыбранноеЗначение.ИдентификаторТекущейСтроки), ВыбранноеЗначение);
			
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДополнительныеРеквизитыИзХранилищаСервер(ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.КоммерческоеПредложениеКлиенту" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыКоммерческогоПредложения";
	ИначеЕсли ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.ЗаказКлиента" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыЗаказа";
	ИначеЕсли ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.РеализацияТоваровУслуг" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыРеализации";
	ИначеЕсли ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.АктВыполненныхРабот" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыАкта";
	КонецЕсли;
	
	Объект[ИмяТаблицы].Загрузить(ПолучитьИзВременногоХранилища(ВыбранноеЗначение.ДополнительныеРеквизиты));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Прочее

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Объект.Партнер) ИЛИ ТолькоИндивидуальные Тогда
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Соглашение, Объект.Дата,,,,Объект);
	Иначе
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму (
			"Справочник.СоглашенияСКлиентами.ФормаВыбора",
			Новый Структура("ДатаДокумента,ТолькоТиповые,ТекущаяСтрока", Объект.Дата, Истина, Объект.Соглашение),
			Элемент);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		НалогообложениеИзСоглашения = Ложь;
		ЗаполнитьУсловияПродажПоУмолчанию();
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПомощникПродаж.Форма.Элемент.Партнер.ПриИзменении");
	
	ПриИзмененииПартнераСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер();
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПриИзмененииВалютыСервер(
			Объект.Валюта,
			ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента));
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПоУмолчаниюПриИзменении(Элемент)	
	
	НалогообложениеНДСПоУмолчаниюПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ОплатаУказываетсяВРеализации = ОплатаУказываетсяВРеализации(Объект.ВариантОформленияДокументов, Объект.ПорядокРасчетов);
	
	УчитыватьВариантОплаты = Не ОплатаУказываетсяВРеализации Или ИспользоватьСтатусыРеализацийТоваровУслуг;
	ТребуетсяЗалогЗаТару   = Объект.ВернутьМногооборотнуюТару И Объект.ТребуетсяЗалогЗаТару;
	
	ЭтоЗаказ = (Объект.ВариантОформленияДокументов
		= ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента"));
		
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("СуммаОплатыПоДокументу",         Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"));
	ПараметрыФормы.Вставить("СуммаЗалогаПоДокументу",         Объект.Товары.Итог("СуммаСНДС") - Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"));
	ПараметрыФормы.Вставить("ТребуетсяЗалогЗаТару",           ТребуетсяЗалогЗаТару);
	ПараметрыФормы.Вставить("ГрафикОплаты",                   Объект.ГрафикОплаты);
	ПараметрыФормы.Вставить("Соглашение",                     Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата",                           Объект.Дата);
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки",           Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("Валюта",                         Объект.Валюта);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",         УчитыватьВариантОплаты);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",        УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ФормаОплаты",                    Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Касса",                          Объект.Касса);
	ПараметрыФормы.Вставить("БанковскийСчет",                 Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("Организация",                    Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыВыбораРеквизитов",      ПараметрыВыбораРеквизитов);
	ПараметрыФормы.Вставить("РасширенныйРежимНеИспользуется", ОплатаУказываетсяВРеализации);
	ПараметрыФормы.Вставить("РежимРеализации",                ОплатаУказываетсяВРеализации);
	ПараметрыФормы.Вставить("ПорядокРасчетов",                Объект.ПорядокРасчетов);
	ПараметрыФормы.Вставить("ДоступныеПорядкиРасчетов",       ДоступныеПорядкиРасчетов);
	ПараметрыФормы.Вставить("ЭтоЗаказ",                       ЭтоЗаказ);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",        Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("ГрафикИсполненияВДоговоре",      ГрафикИсполненияВДоговоре);
	
	Если УчитыватьВариантОплаты Тогда
		АдресВоВременномХранилище = ПоместитьЭтапыОплатыВоВременноеХранилищеНаСервере(ОплатаУказываетсяВРеализации);
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Иначе
		ПараметрыФормы.Вставить("ДатаПлатежа",               Объект.ДатаПлатежа);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОплатаУказываетсяВРеализации", ОплатаУказываетсяВРеализации);
	ДополнительныеПараметры.Вставить("УчитыватьВариантОплаты", УчитыватьВариантОплаты);
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
		ПараметрыФормы, 
		ЭтаФорма,,,, 
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(ПараметрыОплаты, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		ОплатаУказываетсяВРеализации = ДополнительныеПараметры.ОплатаУказываетсяВРеализации;
		УчитыватьВариантОплаты = ДополнительныеПараметры.УчитыватьВариантОплаты;
		
		Модифицированность = Истина;
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Объект.Касса                = ПараметрыОплаты.Касса;
		Объект.БанковскийСчет       = ПараметрыОплаты.БанковскийСчет;
		Объект.ГрафикОплаты         = ПараметрыОплаты.ГрафикОплаты;
		Объект.ЖелаемаяДатаОтгрузки = ПараметрыОплаты.ЖелаемаяДатаОтгрузки;
		
		Если Объект.ФормаОплаты <> ПараметрыОплаты.ФормаОплаты Тогда
			Объект.ФормаОплаты = ПараметрыОплаты.ФормаОплаты;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;
		
		Если Объект.ПорядокРасчетов <> ПараметрыОплаты.ПорядокРасчетов Тогда
			Объект.ПорядокРасчетов = ПараметрыОплаты.ПорядокРасчетов;
		КонецЕсли;
		
		Если Не УчитыватьВариантОплаты Тогда
			Объект.ДатаПлатежа = ПараметрыОплаты.ДатаПлатежа;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище, ОплатаУказываетсяВРеализации);
		КонецЕсли;
		
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиРеализации(Элемент)	
	
	ОткрытьРеквизитыПечатиРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатьАкта(Элемент)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Контрагент",                    Объект.Контрагент);
	СтруктураПараметров.Вставить("ДополнительнаяИнформация",      Объект.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("ДополнительнаяИнформацияШапки", Объект.ДополнительнаяИнформацияШапки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                ДокументыСформированы И Не Модифицированность);
	
	ОткрытьФорму("Обработка.ПомощникПродаж.Форма.РеквизитыПечатиАкта", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСформированныеДокументыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКДокументам(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПодобраноПозицийНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиКорзина(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("СуммаВзаиморасчетов", ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Договор));
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Договор);
	
КонецПроцедуры


&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЗалогЗаТаруПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		
	Иначе
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПриИзмененииКорзиныНаСервере();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Элемент.ТекущийЭлемент = Элементы.ТоварыВариантОбеспечения И Не ТолькоПросмотрУстановлен Тогда

		СтандартнаяОбработка = Ложь;
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Иначе
			
			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
			ПараметрыПроверки.Поля.Удалить("Подразделение");
			
			Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
				Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
				
				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
					ЭтаФорма, УникальныйИдентификатор);
				Иначе
					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru='Товары';uk='Товари'"));
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не Объект.СкидкиРассчитаны Тогда
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
			
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		
	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",        УникальныйИдентификатор);
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""';uk='Для редагування ціни виберіть вид ціни ""<довільна>""'"),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ);
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	
	Если Не Отказ Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ОпределитьПараметрыСерийНаКлиенте(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, Неопределено, ТоварыКешТекущейСтроки, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,
		ПараметрыУказанияСерий.Реализация);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,
		ПараметрыУказанияСерий.Заказ);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	НеобходимоОбновитьСтатусыСерий = Ложь;
	
	Если ТекущиеДанные <> Неопределено Тогда

		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элемент, КэшированныеЗначения, ОпределитьПараметрыСерийНаКлиенте(ТекущаяСтрокаИдентификатор));

		Если НеобходимоОбновитьСтатусыСерий Тогда
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		КонецЕсли;

	КонецЕсли;

	Если НеобходимоОбновитьСтатусыСерий Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ОпределитьПараметрыСерийНаКлиенте(ТекущаяСтрокаИдентификатор));
	КонецЕсли;

	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущиеДанные, НоваяСтрока, Копирование);
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
			ЗаполнитьОбособленно, Объект.СтатусЗаказаКлиента, Объект.ЖелаемаяДатаОтгрузки);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
		
		ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
	КонецЕсли;

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ОпределитьПараметрыСерийНаКлиенте(ТекущиеДанные.ПолучитьИдентификатор()),
		Копирование);
		
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекущиеДанные, Объект.ВариантОформленияДокументов);
		КонецЕсли;
		ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ТоварыКешТекущейСтроки);
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОтгрузки) И Объект.НеОтгружатьЧастями
			И (КешСтроки = Неопределено Или КешСтроки.ДатаОтгрузки <> ТекущиеДанные.ДатаОтгрузки) Тогда
			ПриИзмененииДатыОтгрузкиВТабЧасти(); // вызов сервера.
		КонецЕсли;
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элемент,КэшированныеЗначения, ОпределитьПараметрыСерийНаКлиенте(ТекущиеДанные.ПолучитьИдентификатор())) Тогда
			
			ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
			
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
			СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ОпределитьПараметрыСерийНаКлиенте(ТекущаяСтрокаИдентификатор));
			
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Элементы.Товары.ТекущиеДанные.Содержание",
		НСтр("ru='Содержание услуги';uk='Зміст послуги'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанныеИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
		ЗаполнитьОбособленно, Объект.СтатусЗаказаКлиента, Объект.ЖелаемаяДатаОтгрузки);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
								Новый Структура("Склад, ПараметрыУказанияСерий",
												ТекущаяСтрока.Склад,
												ОпределитьПараметрыСерийНаКлиенте(ТекущиеДанныеИдентификатор)));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
		ЗаполнитьОбособленно, Объект.СтатусЗаказаКлиента, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	НеобходимоРассчитыватьИтоги = ТекущаяСтрока.ВариантОбеспечения
		= ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);

	РассчитатьИтоговыеПоказатели(ЭтаФорма);

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанныеИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
								Новый Структура("Склад, ПараметрыУказанияСерий", 
												ТекущаяСтрока.Склад,
												ОпределитьПараметрыСерийНаКлиенте(ТекущиеДанныеИдентификатор)));
	
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
		ЗаполнитьОбособленно, Объект.СтатусЗаказаКлиента, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма,
		ОпределитьПараметрыСерийНаКлиенте(ВыбранноеЗначение.ИдентификаторТекущейСтроки),
		ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантОформленияПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанныеИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	СтруктураДействий = Новый Структура;
 	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
								Новый Структура("Склад, ПараметрыУказанияСерий",
												ТекущаяСтрока.Склад,
												ОпределитьПараметрыСерийНаКлиенте(ТекущиеДанныеИдентификатор)));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОформленныеДокументы

&НаКлиенте
Процедура ОформленныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ОформленныеДокументыДокумент Тогда
		СтандартнаяОбработка = Ложь;
		Если Элементы.ОформленныеДокументы.ТекущиеДанные <> Неопределено Тогда
			ПоказатьЗначение(Неопределено, Элементы.ОформленныеДокументы.ТекущиеДанные.Документ);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ОформленныеДокументыПечать Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Элементы.ОформленныеДокументы.ТекущиеДанные <> Неопределено Тогда
			
			Если Не ДоступнаПечатьКомплекта(Элементы.ОформленныеДокументы.ТекущиеДанные.Документ) Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru='Для выбранного документа печать недоступна';uk='Для вибраного документа друк недоступний'"));
				
			Иначе
			
				МассивОбъектов = Новый Массив();
				МассивОбъектов.Добавить(Элементы.ОформленныеДокументы.ТекущиеДанные.Документ);
				
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("ТипОбъекта", ПолноеИмяДокумента(Элементы.ОформленныеДокументы.ТекущиеДанные.Документ));
				ПараметрыФормы.Вставить("Объекты",    МассивОбъектов);
				
				ОткрытьФорму("РегистрСведений.НастройкиПечатиОбъектов.Форма.НастройкаПечатиКомплекта", ПараметрыФормы);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаПечатьКомплекта(Документ)
	
	ПараметрыОбъекта = РегистрыСведений.НастройкиПечатиОбъектов.ПараметрыОбъектаДляПечатиКомплектно(Документ.Метаданные().ПолноеИмя());
	Возврат ПараметрыОбъекта.ДоступнаПечатьКомплекта;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НоваяПродажа(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПомощникПродаж.Форма.Команда.НоваяПродажа");
	
	Если Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Начать", НСтр("ru='Начать новую продажу';uk='Почати новий продаж'"));
		СписокКнопок.Добавить("НеНачинать", НСтр("ru='Завершить текущую продажу';uk='Завершити поточну продаж'"));
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("НоваяПродажаЗавершение", ЭтотОбъект), НСтр("ru='Все несохраненные данные будут потеряны. Начать новую продажу?';uk='Всі незбережені зміни будуть втрачені. Почати новий продаж?'"), СписокКнопок);
		Возврат;
		
	КонецЕсли;
	
	НоваяПродажаФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура НоваяПродажаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = "НеНачинать" Тогда
		Возврат;
	КонецЕсли;
	
	
	НоваяПродажаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура НоваяПродажаФрагмент()
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиКорзина.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКорзина;
	
	НоваяПродажаСервер();
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКорзина(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиКорзина.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКорзина;
	ЗаполнитьСтатусыУказанияСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПартнер(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПартнер.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПартнер;
	Если Не ДосьеПартнераОбновлено Тогда
		ОбновитьДосьеПартнера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиОтгрузкаОплата(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиОтгрузкаОплата.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОплатаОтгрузка;
	
	ПроверитьПерезаполнитьЭтапыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДокументы(Команда)
	
	ПерейтиКДокументам(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДокументам(Знач Оповещение)

	ЗаполнитьСтатусыУказанияСерий();
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиДокументы.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументы;
	
	Если Модифицированность Или Не ДокументыСформированы Тогда
		СоздатьДокументыКлиент(Новый ОписаниеОповещения("ПерейтиКДокументамЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)));
		Возврат;
	КонецЕсли;
	
	ПерейтиКДокументамФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДокументамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ПерейтиКДокументамФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДокументамФрагмент(Знач Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ОткрытьФормуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПечататьАктВыполненныхРабот",                   Объект.ПечататьАктВыполненныхРабот);
	СтруктураПараметров.Вставить("ПечататьЗаказКлиента",                          Объект.ПечататьЗаказКлиента);
	СтруктураПараметров.Вставить("ПечататьКоммерческоеПредложение",               Объект.ПечататьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("ПечататьПриходныйКассовыйОрдер",                Объект.ПечататьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("ПечататьРеализациюТоваровУслуг",                Объект.ПечататьРеализациюТоваровУслуг);
	СтруктураПараметров.Вставить("ПечататьСчетНаОплату",                          Объект.ПечататьСчетНаОплату);
	СтруктураПараметров.Вставить("СоздаватьДокументПродажи",                      Объект.СоздаватьДокументПродажи);
	СтруктураПараметров.Вставить("СоздаватьЗаказКлиента",                         Объект.СоздаватьЗаказКлиента);
	СтруктураПараметров.Вставить("СоздаватьКоммерческоеПредложение",              Объект.СоздаватьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("СоздаватьПриходныйКассовыйОрдер",               Объект.СоздаватьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("СоздаватьСчетНаОплату",                         Объект.СоздаватьСчетНаОплату);
	СтруктураПараметров.Вставить("СтатусЗаказаКлиента",                           Объект.СтатусЗаказаКлиента);
	СтруктураПараметров.Вставить("СтатусКоммерческогоПредложения",                Объект.СтатусКоммерческогоПредложения);
	СтруктураПараметров.Вставить("СтатусРеализацииТоваровУслуг",                  Объект.СтатусРеализацииТоваровУслуг);
	СтруктураПараметров.Вставить("СоздаватьТранспортнуюНакладнуюПоУмолчанию",     Объект.СоздаватьТранспортнуюНакладнуюПоУмолчанию);
	СтруктураПараметров.Вставить("ВариантОформленияДокументов",                   Объект.ВариантОформленияДокументов);
	
	ОткрытьФорму("Обработка.ПомощникПродаж.Форма.Настройка", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПартнера(Команда)
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		ТекстВопроса = НСтр("ru='Текущий клиент %Партнер% будет заменен на нового. Создать нового клиента?';uk='Поточний клієнт %Партнер% буде замінений на новий. Створити нового клієнта?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Партнер%", Объект.Партнер);
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("СоздатьНовогоКлиента", НСтр("ru='Создать нового';uk='Створити нового'"));
		СписокКнопок.Добавить("ОставитьТекущегоКлиента", НСтр("ru='Оставить текущего';uk='Залишити поточного'"));
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьПартнераЗавершение", ЭтотОбъект), ТекстВопроса, СписокКнопок);
        Возврат;
		
	КонецЕсли;
	
	СоздатьПартнераФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПартнераЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = "ОставитьТекущегоКлиента" Тогда
        Возврат;
    КонецЕсли;
    
    
    СоздатьПартнераФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПартнераФрагмент()
    
    ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",Новый Структура("ЗаголовокФормыВладельца", НСтр("ru='Партнеры (Клиенты)';uk='Партнери (Клієнти)'")), ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки",
		ЗависимыеРеквизиты(), "КоличествоУпаковок");
	Если ТаблицаФормы.ТекущиеДанные <> Неопределено Тогда
		ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТаблицаФормы.ТекущиеДанные);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
	КонецЕсли;
	
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	ОткрытьПодборСерий();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
    
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
    
	Если Объект.Товары.Количество() > 0 Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;

		ЭтоРеализация = ЭтоРеализация(Элементы.Товары.ТекущиеДанные.ВариантОформления);
		
		Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ОпределитьПараметрыСерийНаКлиенте(ТекущиеДанныеИдентификатор), Текст, ТекущиеДанные) Тогда
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор,ЭтоРеализация);
			
			ЗначениеВозврата = Неопределено;

			
			ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий, ЭтоРеализация", ПараметрыФормыУказанияСерий, ЭтоРеализация)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    ЭтоРеализация = ДополнительныеПараметры.ЭтоРеализация;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,ЭтоРеализация);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Скидки (наценки)';uk='Знижки (націнки)'"),
			,
			НСтр("ru='Скидки (наценки) рассчитаны';uk='Знижки (націнки) розраховані'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары';uk='Товари'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары';uk='Товари'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары';uk='Товари'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары';uk='Товари'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары';uk='Товари'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, НСтр("ru='Товары';uk='Товари'"), ВыделенныеСтроки) Тогда
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		СтруктураОтбора = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСкладВВыделенныхСтрокахЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтрокахЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад = Результат;
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПартнера(Команда)
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента", Новый Структура("Ключ", Объект.Партнер));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Если ДокументыСформированы Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Создать", НСтр("ru='Создать';uk='Створити'"));
		СписокКнопок.Добавить("НеСоздавать", НСтр("ru='Не создавать';uk='Не створювати'"));
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьДокументыЗавершение", ЭтотОбъект), НСтр("ru='Документы уже были созданы. Создать документы заново?';uk='Документи вже були створені. Створити документи заново?'"), СписокКнопок);
        Возврат;
		
	КонецЕсли;
	
	СоздатьДокументыКлиент(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = "НеСоздавать" Тогда
        Возврат;
    КонецЕсли;
    
    СоздатьДокументыКлиент(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ВыделенныеДокументы = Неопределено;

	
	ПолучитьВыделенныеДокументы(Новый ОписаниеОповещения("ПометитьНаУдалениеПослеПолучитьВыделение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеДокументы = ДополнительныеПараметры.ВыделенныеДокументы;
    
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоИзмененныхДокументов = УстановитьПометкуУдаленияСервер(ВыделенныеДокументы);
    
    Если КоличествоИзмененныхДокументов > 0 Тогда
        ПоказатьОповещениеПользователя(
        СтрЗаменить(НСтр("ru='Пометка удаления установлена (%КоличествоИзмененныхДокументов%)';uk='Позначка вилучення встановлена (%КоличествоИзмененныхДокументов%)'"), "%КоличествоИзмененныхДокументов%", КоличествоИзмененныхДокументов),
        ,
        ,
        БиблиотекаКартинок.Информация32);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ВыделенныеДокументы = Неопределено;

	
	ПолучитьВыделенныеДокументы(Новый ОписаниеОповещения("ПровестиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеДокументы = Результат;
    
    Если ВыделенныеДокументы = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоИзмененныхДокументов = ПровестиОтменитьПроведениеДокументовСервер(ВыделенныеДокументы, Истина);
    УправлениеПометкойКомандыТранспортнойНакладной();
    Если КоличествоИзмененныхДокументов > 0 Тогда
        
        ПоказатьОповещениеПользователя(
        СтрЗаменить(НСтр("ru='Выполнено проведение документов (%КоличествоИзмененныхДокументов%)';uk='Виконано проведення документів (%КоличествоИзмененныхДокументов%)'"), "%КоличествоИзмененныхДокументов%", КоличествоИзмененныхДокументов),
        ,,БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	ВыделенныеДокументы = Неопределено;

	
	ПолучитьВыделенныеДокументы(Новый ОписаниеОповещения("ОтменаПроведенияЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеДокументы = Результат;
    
    Если ВыделенныеДокументы = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    КоличествоИзмененныхДокументов = ПровестиОтменитьПроведениеДокументовСервер(ВыделенныеДокументы, Ложь);
    УправлениеПометкойКомандыТранспортнойНакладной();
    Если КоличествоИзмененныхДокументов > 0 Тогда
        
        ПоказатьОповещениеПользователя(
        СтрЗаменить(НСтр("ru='Выполнена отмена проведения документов (%КоличествоИзмененныхДокументов%)';uk='Виконане скасування проведення документів (%КоличествоИзмененныхДокументов%)'"), "%КоличествоИзмененныхДокументов%", КоличествоИзмененныхДокументов),
        ,,БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазворачиватьГруппировкиДосье(Команда)
	
	РазворачиватьГруппировкиДосье = Не РазворачиватьГруппировкиДосье;
	Элементы.РазворачиватьГруппировкиДосье.Пометка = РазворачиватьГруппировкиДосье;
	Если РазворачиватьГруппировкиДосье Тогда
		ДосьеПартнера.ПоказатьУровеньГруппировокСтрок(1);
	Иначе
		ДосьеПартнера.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьДокументы(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПомощникПродаж.Форма.Команда.НапечататьДокументы");
	
	МассивДокументов = Новый Массив();
	
	Для Каждого ТекСтрока Из Объект.Документы Цикл
		
		Если ТекСтрока.Состояние = 0 Тогда
			
			ТипДокумента = ТипЗнч(ТекСтрока.Документ);
			
			Если ТипДокумента = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") И Объект.ПечататьКоммерческоеПредложение Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента") И Объект.ПечататьЗаказКлиента Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуКлиенту") И Объект.ПечататьСчетНаОплату Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Объект.ПечататьРеализациюТоваровУслуг Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") И Объект.ПечататьАктВыполненныхРабот Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") И Объект.ПечататьПриходныйКассовыйОрдер Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура("ОтображатьСкидки", ВыводитьСкидкиВПечатныеФормы);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
		"РегистрСведений.НастройкиПечатиОбъектов",
		"КомплектДокументов",
		МассивДокументов,
		ПараметрыПечати);
	
	Если МассивДокументов.Количество() > 0 Тогда
	
		ПоказатьОповещениеПользователя(
			СтрЗаменить(НСтр("ru='Документы напечатаны (%КоличествоДокументов%)';uk='Документи надруковані (%КоличествоДокументов%)'"), "%КоличествоДокументов%", МассивДокументов.Количество()),
			,,БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	СписокКнопок = Новый СписокЗначений();
	СписокКнопок.Добавить("Изменить", НСтр("ru='Изменить';uk='Змінити'"));
	СписокКнопок.Добавить("НеИзменять", НСтр("ru='Не изменять';uk='Не змінювати'"));
	
	ОтветНаВопрос = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьЗавершение", ЭтотОбъект), НСтр("ru='Сформированные документы будут заменены. Изменить реквизиты текущей продажи?';uk='Сформовані документи будуть замінені. Змінити реквізити поточного продажу?'"), СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = "НеИзменять" Тогда
        Возврат;
    КонецЕсли;
    
    УстановитьТолькоПросмотрЭлементовФормы(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)

	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(ЭтаФорма) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Соглашение"" не заполнено';uk='Поле ""Оферта"" не заповнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Валюта"" не заполнено';uk='Поле ""Валюта"" не заповнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		ИЛИ Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru='Подбор товаров в помощник продаж';uk='Підбір товарів у помічник продаж'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
    ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
	Иначе
		ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                Истина);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий.Заказ);
	ПараметрыФормы.Вставить("Назначение",                              Неопределено);
	ПараметрыФормы.Вставить("Подразделение",                           Объект.Подразделение);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения", Истина);
	
	ПараметрыФормы.Вставить("ЗаполнитьОбособленно",                    ЗаполнитьОбособленно);
	ПараметрыФормы.Вставить("Статус",                                  Объект.СтатусЗаказаКлиента);
		
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
	
	ИменаПолей = ИменяПолейПодбораМногооборотнойТары(Объект.ВариантОформленияДокументов);
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		ИменаПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", НалогообложениеНДСПоУмолчанию);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортнаяНакладная(Команда)
	
	Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка = НЕ Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка;
	СоздаватьТранспортнуюНакладную = Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка;
	УправлениеТранспортнымиНакладными();
	УправлениеПометкойКомандыТранспортнойНакладной();
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьСделку(Команда)
	
	ИмяФормыОбъекта = "Справочник.СделкиСКлиентами.ФормаОбъекта";
	ПараметрыОткрытияФормы = Новый Структура("Партнер, СоглашениеСКлиентом", Партнер, Объект.Соглашение);
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("Основание", ПараметрыОткрытияФормы), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление обеспечения.
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление,"ДатаОтгрузки", "ДатаОтгрузки", "", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ТоварыДатаОтгрузки", "ДатаОтгрузки", "Товары", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ТоварыСклад", "Склад", "Товары", "СкладОбязателен");
		
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "Склад", "Склад", "", "СкладОбязателен");
	
	УстановкаОтметкиНезаполненногоСкладаИДатыОтгрузкиДляВариантаОформления();
	
	// Скрытие варианта обеспечения для вариантов оформления Реализация и Коммерческое предложение
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВариантОбеспечения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение);
	СписокЗначений.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Ценообразование.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма);
	
	//
	
	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСодержания(ЭтаФорма);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КартинкаНесколькоСкладов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусУказанияСерий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОформленныеДокументыПечать.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Документы.Печать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Документы.Документ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ОтборЭлемента.ПравоеЗначение = "Расходный ордер";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Печатные формы';uk='Друковані форми'"));
	
	//
	
	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВариантОформления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма);
	
	//
	
	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ЭтаФорма, Ложь);
	
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииПриПланированииОтгрузкиУказываютсяВТЧТовары");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерия.Имя);
	
	СписокСтатусовСерий = Новый СписокЗначений;
	СписокСтатусовСерий.Добавить(11);
	СписокСтатусовСерий.Добавить(15);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатусУказанияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусовСерий;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь);
	
	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
	//
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

Процедура УстановкаОтметкиНезаполненногоСкладаИДатыОтгрузкиДляВариантаОформления()
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Склад");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Склад");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Склад");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Склад");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДатаОтгрузки");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаОтгрузки");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыДатаОтгрузки");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ДатаОтгрузки");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСклад");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Склад");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСклад");
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВариантОформленияДокументов");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Склад");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#Область Подбор

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
		ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
		ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
		
		ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
			ЭтаФорма,
			ЗначенияРеквизитов,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопроса");
		
	Иначе
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры);
	
КонецПРоцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, ВариантОбеспечения, Серия";
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			СписокСвойств = СписокСвойств + ", Склад";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураДействий = Новый Структура;
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
			ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
				ЗаполнитьОбособленно, Объект.СтатусЗаказаКлиента, Объект.ЖелаемаяДатаОтгрузки);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
			
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
				Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекущаяСтрока, Объект.ВариантОформленияДокументов);
		
		Если ИспользоватьРасширенныеВозможностиЗаказаКлиента 
			И (ТекущаяСтрока.ДатаОтгрузки = НачалоДня(ТекущаяДата()) 
			ИЛИ (ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") 
			ИЛИ ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"))) Тогда
				ТекущаяСтрока.ВариантОбеспечения = ?(ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно,
								Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно,
								Перечисления.ВариантыОбеспечения.Отгрузить);
		КонецЕсли;
			
    КонецЦикла;
    
	Если Объект.НеОтгружатьЧастями И ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		Объект.ДатаОтгрузки = Макс(ВыбранноеЗначение.МаксимальнаяДатаОтгрузки, Объект.ДатаОтгрузки, НачалоДня(ТекущаяДатаСеанса()));
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерий();
	
	ПриИзмененииКорзиныНаСервере();
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
КонецПроцедуры
	
#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, Организация, РасчитыватьНаборы, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			Объект.Организация,
			Истина,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ЦенаВключаетНДС, РасчитыватьНаборы, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			Объект.ЦенаВключаетНДС,
			Истина,
			"Цена, ВидЦены"
		),
		СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;

	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		
		ПараметрыСкидки = Новый Структура();
		ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
		ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
		ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
		ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
		ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		ПараметрыСкидки.Вставить("РеализацияСверхЗаказа", Ложь);
				
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
		
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(Знач Оповещение, КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("СчитанаКартаЛояльностиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru='Нет доступа к партнеру-владельцу карты лояльности.';uk='Немає доступу до партнера-власника карти лояльності.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в погмощнике.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в помощнике?';uk='Карта лояльності належить партнеру ""%1"". Змінити партнера у помічнику?'"), ДанныеКартыЛояльности.Партнер),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииКонтрагента = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
				И ЗначениеЗаполнено(Объект.Контрагент) И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент Тогда
				ВопросОбИзмененииКонтрагента = Истина;
			КонецЕсли;
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииКонтрагента Или ВопросОбИзмененииСоглашения Тогда
				
				Если ВопросОбИзмененииКонтрагента И ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности заданы контрагент ""%1"" и соглашение ""%2"". Применить карту лояльности и подставить в помощник контрагента ""%1"" и соглашение ""%2""?';uk='Для карти лояльності задані контрагент ""%1"" та оферта ""%2"". Застосувати карту лояльності і підставити у помічник контрагента ""%1"" та оферту ""%2""?'");
				ИначеЕсли ВопросОбИзмененииКонтрагента Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности задан контрагент ""%1"". Применить карту лояльности и подставить в помощник контрагента ""%1""?';uk='Для карти лояльності заданий контрагент ""%1"". Застосувати карту лояльності і підставити у помічник контрагента ""%1""?'");
				ИначеЕсли ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru='Для карты лояльности задано соглашение ""%2"". Применить карту лояльности и подставить в помощник соглашение ""%2""?';uk='Для карти лояльності задана оферта ""%2"". Застосувати карту лояльності і підставити у помічник оферту ""%2""?'");
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Контрагент, ДанныеКартыЛояльности.Соглашение),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = ДополнительныеПараметры.КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДополнительныеПараметры.ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиЗавершение(ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Знач Оповещение)
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма,,,, Новый ОписаниеОповещения("ПрименитьИзмененияСкидокНаценокНаКлиентеЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
	КонецЕсли;
	
	ПрименитьИзмененияСкидокНаценокНаКлиентеФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ПрименитьИзмененияСкидокНаценокНаКлиентеФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиентеФрагмент(Знач Оповещение)
    
    ПоказатьОповещениеПользователя(
    НСтр("ru='Скидки (наценки)';uk='Знижки (націнки)'"),
    ,
    НСтр("ru='Скидки (наценки) рассчитаны';uk='Знижки (націнки) розраховані'"),
    БиблиотекаКартинок.Информация32);
    ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ЭтоРеализация)
	ПараметрыУказанияСерийВФорму = ?(ЭтоРеализация, ПараметрыУказанияСерий.Реализация, ПараметрыУказанияСерий.Заказ);
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект,
														ПараметрыУказанияСерийВФорму,
														ТекущиеДанныеИдентификатор,
														ЭтаФорма,
														РеквизитФормыВЗначение("Объект").Метаданные());
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ЭтоРеализация)
	ПараметрыУказанияСерийПараметр = ?(ЭтоРеализация, ПараметрыУказанияСерий.Реализация, ПараметрыУказанияСерий.Заказ);
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерийПараметр,ПараметрыФормыУказанияСерий);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
				ОпределитьПараметрыСерийНаСервере(ТекущаяСтрокаИдентификатор), ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость  = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры;
	
	Элементы.ТоварыУказатьСерии.Видимость = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры;
		
	Элементы.ТоварыКонтекстноеМенюУказатьСерии.Видимость = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры;
	
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры
										Или ПараметрыУказанияСерий.Заказ.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий()
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Реализация);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заказ);
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПараметрыСерийНаКлиенте(ТекущиеДанныеИдентификатор)
	Возврат ОпределитьПараметрыСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор);
КонецФункции 

&НаСервере
Функция ОпределитьПараметрыСерийНаСервере(ТекущиеДанныеИдентификатор)
	Возврат ОпределитьПараметрыСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор);
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьПараметрыСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор)
	Если ТекущиеДанныеИдентификатор<> Неопределено Тогда
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
		Если ЭтоРеализация(ТекущиеДанные.ВариантОформления) Тогда
			Возврат ПараметрыУказанияСерий.Реализация
		Иначе
			Возврат ПараметрыУказанияСерий.Заказ
		КонецЕсли;
	Иначе
		Возврат ПараметрыУказанияСерий.Реализация
	КонецЕсли; 
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРеализация(ВариантОформления)
	Если ВариантОформления = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг")
		Или	ВариантОформления = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг") Тогда
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Истина;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
		ЗаполнитьОбособленно, Объект.СтатусЗаказаКлиента, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий.Реализация;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	КонецЕсли;
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	ЗаполнитьВариантОформленияВТабличнойЧастиСервер(Ложь);
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Функция ЗаписатьКоммерческоеПредложение(МассивНайденныхДокументов, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.КоммерческоеПредложениеКлиенту,
		Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	
	ДокументОбъект.Статус = Объект.СтатусКоммерческогоПредложения;
	ДокументОбъект.Товары.Загрузить(Объект.Товары.Выгрузить());
	
	Для Каждого ТекСтрока Из ДокументОбъект.Товары Цикл
		ТекСтрока.Активность = Истина;
	КонецЦикла;
	
	СрокДействия = Неопределено;
	Если ИспользоватьСоглашенияСКлиентами Тогда 
		СрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ДатаОкончанияДействия");
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) Тогда
		СрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ДатаОкончанияДействия");
	КонецЕсли;
	
	Если СрокДействия <> Неопределено И СрокДействия >= ДокументОбъект.Дата Тогда
		ДокументОбъект.СрокДействия = СрокДействия;
	КонецЕсли;
	
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыКоммерческогоПредложения.Выгрузить());
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				1);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				1);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьЗаказ(МассивНайденныхДокументов, Отказ, БезПроведения)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.ЗаказКлиента,
		Тип("ДокументСсылка.ЗаказКлиента"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		
		ДокументОбъект.Статус = Объект.СтатусЗаказаКлиента;
		
	Иначе
		
		ПараметрыОтбораПродажа = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
		ПараметрыОтбораЗаказ = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента);
		
		СтрокиПродажи = Объект.Товары.НайтиСтроки(ПараметрыОтбораПродажа);
		СтрокиЗаказ = Объект.Товары.НайтиСтроки(ПараметрыОтбораЗаказ);
		
		РеализацияБезПроведения = Объект.СоздаватьПриходныйКассовыйОрдер
				И (Объект.СуммаПредоплаты > 0 Или (Объект.ТребуетсяЗалогЗаТару И Объект.СуммаПредоплатыЗаТару > 0))
				И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
				
		КонтролироватьОплату = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
		КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
			
		Если СтрокиЗаказ.Количество() = 0
				И НЕ КонтролироватьОплату
				И НЕ РеализацияБезПроведения Тогда
			Если ИспользоватьРасширенныеВозможностиЗаказаКлиента И НЕ ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
			ИначеЕсли ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			Иначе
				ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
			КонецЕсли;
		ИначеЕсли СтрокиПродажи.Количество() > 0 Тогда
			Если ИспользоватьРасширенныеВозможностиЗаказаКлиента И НЕ ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
				ДокументОбъект.Статус = ?(КонтролироватьОплату И БезПроведения И НЕ КонтролироватьОтгрузку, 
					Перечисления.СтатусыЗаказовКлиентов.Закрыт, 
					Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
			ИначеЕсли ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
				ДокументОбъект.Статус = ?(КонтролироватьОплату И БезПроведения И НЕ КонтролироватьОтгрузку, 
					Перечисления.СтатусыЗаказовКлиентов.Закрыт, 
					Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
			Иначе
				ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
			КонецЕсли;
		Иначе
			ДокументОбъект.Статус = Объект.СтатусЗаказаКлиента;
		КонецЕсли;
		СменитьСтатусЗаказа = ?(КонтролироватьОтгрузку И Объект.СтатусЗаказаКлиента = Перечисления.СтатусыЗаказовКлиентов.Закрыт, Истина, Ложь);
		
	КонецЕсли;
	
	ДокументОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
	
	ДокументОбъект.Товары.Очистить();
	
	ЗаполнитьВариантОтгрузить = НЕ ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента 
			И ИспользоватьРасширенныеВозможностиЗаказаКлиента 
			И ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
	ВариантОтгружено = Перечисления.ВариантыОбеспечения.Отгрузить;
	
	КодСтроки = 0;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		КодСтроки = КодСтроки + 1;
		ТекСтрока.КодСтроки = КодСтроки;
		
		НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ТекСтрока);
		
		Если ЗаполнитьВариантОтгрузить Тогда
			
			ТекСтрока.ВариантОбеспечения = ВариантОтгружено;
			
		КонецЕсли;
			
	КонецЦикла;
	ДокументОбъект.МаксимальныйКодСтроки = КодСтроки;
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыЗаказа.Выгрузить());
	
	ПараметрыУказанияСерийЗаказ = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ЗаказКлиента);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерийЗаказ);
	
	Попытка
		Если БезПроведения Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				2);
				
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				2);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьРеализацию(МассивНайденныхДокументов, Отказ, БезПроведения = Ложь)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.РеализацияТоваровУслуг,
		Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);
	
	ДокументОбъект.РеализацияПоЗаказам = Ложь;
	ДокументОбъект.ЗаказКлиента = Неопределено;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	ДокументОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДатаПлатежа) Тогда
		ЭтапыОплатыСервер.ЗаполнитьДатуПлатежаПоУмолчанию(ДокументОбъект);
	КонецЕсли;
	
	Если ДокументОбъект.ВернутьМногооборотнуюТару Тогда
		
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "РассчитыватьДатуВозвратаТарыПоКалендарю, КалендарьВозвратаТары");
		Если Не ИспользоватьСоглашенияСКлиентами Тогда
			РеквизитыСоглашения.Вставить("РассчитыватьДатуВозвратаТарыПоКалендарю", Ложь);
		КонецЕсли;
		ДокументОбъект.ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ДокументОбъект,
			Объект.СрокВозвратаМногооборотнойТары,
			РеквизитыСоглашения.РассчитыватьДатуВозвратаТарыПоКалендарю,
			РеквизитыСоглашения.КалендарьВозвратаТары);
			
	КонецЕсли;
	
	ОбщаяСуммаПредоплаты = Объект.СуммаПредоплаты + ?(ДокументОбъект.ТребуетсяЗалогЗаТару, Объект.СуммаПредоплатыЗаТару, 0);
	ДокументОбъект.СуммаПредоплаты = ОбщаяСуммаПредоплаты;
	
	Если ИспользоватьСтатусыРеализацийТоваровУслуг Тогда
		Если ДокументОбъект.СуммаПредоплаты = 0 И Объект.СтатусРеализацииТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		Иначе
				ДокументОбъект.Статус = Объект.СтатусРеализацииТоваровУслуг;
		КонецЕсли;
	Иначе
		ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	КонецЕсли;
	
	ПараметрыОтбораАктНаПередачу = Новый Структура(
		"ВариантОформленияПродажи,ВариантОформления",
		Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав,
		Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг);
	ТоварыСАктом = Объект.Товары.Выгрузить(ПараметрыОтбораАктНаПередачу);
	
	ДокументОбъект.ВариантОформленияПродажи = ?(ТоварыСАктом.Количество() = Объект.Товары.Количество(), 
		Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав,
		Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	
	ДокументОбъект.Товары.Загрузить(Объект.Товары.Выгрузить());
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.Серии.Загрузить(Объект.Серии.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыРеализации.Выгрузить());
	
	ПараметрыУказанияСерийРеализация = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РеализацияТоваровУслуг);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерийРеализация);
	
	Попытка
		Если БезПроведения Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				3);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				3);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьРеализациюПоЗаказу(МассивНайденныхДокументов, ОснованиеОбъект, Товары, Склад, Отказ, БезПроведения = Ложь, БезСменыСтатусаЗаказа = Ложь)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.РеализацияТоваровУслуг,
		Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, ,
		"Дата,СпособДоставки,ЗонаДоставки,ПеревозчикПартнер,АдресДоставкиПеревозчика,,АдресДоставкиПеревозчикаЗначенияПолей,ВремяДоставкиС,ВремяДоставкиПо,ДополнительнаяИнформацияПоДоставке");
	ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ДокументОбъект.Склад = Склад;
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	ДокументОбъект.ЗаказКлиента = ОснованиеОбъект.Ссылка;
	ДокументОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	
	ПараметрыОтбораАктНаПередачу = Новый Структура(
		"ВариантОформленияПродажи",
		Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав);
	ТоварыСАктом = Товары.НайтиСтроки(ПараметрыОтбораАктНаПередачу);
	
	ДокументОбъект.ВариантОформленияПродажи = ?(ТоварыСАктом.Количество() = Товары.Количество(), 
		Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав,
		Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		
	Если ДокументОбъект.ВернутьМногооборотнуюТару Тогда
		
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "РассчитыватьДатуВозвратаТарыПоКалендарю, КалендарьВозвратаТары");
		Если Не ИспользоватьСоглашенияСКлиентами Тогда
			РеквизитыСоглашения.Вставить("РассчитыватьДатуВозвратаТарыПоКалендарю", Ложь);
		КонецЕсли;
		ДокументОбъект.ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ДокументОбъект,
			Объект.СрокВозвратаМногооборотнойТары,
			РеквизитыСоглашения.РассчитыватьДатуВозвратаТарыПоКалендарю,
			РеквизитыСоглашения.КалендарьВозвратаТары);
			
	КонецЕсли;
	
	ОбщаяСуммаПредоплаты = Объект.СуммаПредоплаты + ?(ДокументОбъект.ТребуетсяЗалогЗаТару, Объект.СуммаПредоплатыЗаТару, 0);
	ДокументОбъект.СуммаПредоплаты = ОбщаяСуммаПредоплаты;
	
	Если Товары.Итог("СуммаСНДС") <> Объект.Товары.Итог("СуммаСНДС")
		И Объект.Товары.Итог("СуммаСНДС") <> 0 Тогда
		
		КоэффициентОтношения = Товары.Итог("СуммаСНДС") / Объект.Товары.Итог("СуммаСНДС");
		
		ДокументОбъект.СуммаПредоплаты = ОбщаяСуммаПредоплаты * КоэффициентОтношения;
		Если ДокументОбъект.ТребуетсяЗалогЗаТару Тогда
			ДокументОбъект.СуммаПредоплатыЗаТару = Объект.СуммаПредоплатыЗаТару * КоэффициентОтношения;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьСтатусыРеализацийТоваровУслуг Тогда
		Если ДокументОбъект.СуммаПредоплаты = 0 И Объект.СтатусРеализацииТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		Иначе
			Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки") Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
			Иначе
				ДокументОбъект.Статус = Объект.СтатусРеализацииТоваровУслуг;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	КонецЕсли;
	ДокументОбъект.РеализацияПоЗаказам = Истина;
	
	Если Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ДокументОбъект.ЗаполнитьДатуПлатежаПоОснованию();
	ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.ДатаПлатежа) Тогда
		ЭтапыОплатыСервер.ЗаполнитьДатуПлатежаПоУмолчанию(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(Товары);
	Для Каждого ТекСтрока Из ДокументОбъект.Товары Цикл
		ТекСтрока.ЗаказКлиента = ДокументОбъект.ЗаказКлиента;
		ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаСНДС;
	КонецЦикла;
	
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	Для Каждого СтрокаСкидкиЗаказа Из Объект.СкидкиНаценки Цикл
		Если ДокументОбъект.Товары.Найти(СтрокаСкидкиЗаказа.КлючСвязи, "КлючСвязи") <> Неопределено Тогда
			СтрокаСкидки = ДокументОбъект.СкидкиНаценки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтбораПродажа = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
	ДокументОбъект.Серии.Загрузить(Объект.Серии.Выгрузить(Объект.Серии.НайтиСтроки(ПараметрыОтбораПродажа)));
	
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыРеализации.Выгрузить());
	
	ПараметрыУказанияСерийРеализация = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РеализацияТоваровУслуг);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерийРеализация);
	
	Попытка
		Если БезПроведения Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				3);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				3);
		КонецЕсли;
		Если СменитьСтатусЗаказа И НЕ БезСменыСтатусаЗаказа Тогда
			Заказ = ДокументОбъект.ЗаказКлиента.ПолучитьОбъект();
			Заказ.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьАкт(МассивНайденныхДокументов, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.АктВыполненныхРабот,
		Тип("ДокументСсылка.АктВыполненныхРабот"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);
	
	ДокументОбъект.АктПоЗаказам = Ложь;
	ДокументОбъект.ЗаказКлиента = Неопределено;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	ДокументОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	
	Если ЗначениеЗаполнено(Объект.ЭтапыГрафикаОплаты) Тогда
		ТаблицаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Выгрузить();
		ТаблицаЭтаповОплаты.Сортировать("ДатаПлатежа Убыв");
		ДокументОбъект.ДатаПлатежа = ТаблицаЭтаповОплаты.Получить(0).ДатаПлатежа;
	Иначе
		ДокументОбъект.ДатаПлатежа = ДокументОбъект.Дата;
	КонецЕсли;
	
	ДокументОбъект.Услуги.Загрузить(Объект.Товары.Выгрузить());
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыАкта.Выгрузить());
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				4);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				4);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьАктПоЗаказу(МассивНайденныхДокументов, ОснованиеОбъект, Работы, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.АктВыполненныхРабот,
		Тип("ДокументСсылка.АктВыполненныхРабот"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	ДокументОбъект.ЗаказКлиента = ОснованиеОбъект.Ссылка;
	ДокументОбъект.АктПоЗаказам = Истина;
	ДокументОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	ДокументОбъект.Услуги.Загрузить(Работы);
	
	Для Каждого ТекСтрока Из ДокументОбъект.Услуги Цикл
		ТекСтрока.ЗаказКлиента = ДокументОбъект.ЗаказКлиента;
		ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаСНДС;
	КонецЦикла;
	
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыАкта.Выгрузить());
	
	Для Каждого СтрокаСкидкиЗаказа Из Объект.СкидкиНаценки Цикл
		Если ДокументОбъект.Услуги.Найти(ТекСтрока.КлючСвязи, "КлючСвязи") <> Неопределено Тогда
			СтрокаСкидки = ДокументОбъект.СкидкиНаценки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				4);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				4);
		КонецЕсли;
		Если СменитьСтатусЗаказа Тогда
			Заказ = ДокументОбъект.ЗаказКлиента.ПолучитьОбъект();
			Заказ.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
			Заказ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ОснованиеОбъект, ЭтапыГрафикаОплаты, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.СчетНаОплатуКлиенту,
		Тип("ДокументСсылка.СчетНаОплатуКлиенту"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.ДокументОснование = ОснованиеОбъект.Ссылка;
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Очистить();
	Для Каждого ЭтапГрафика Из ЭтапыГрафикаОплаты Цикл
		
		Если ЭтапГрафика.СуммаПлатежа > 0 Тогда
			НовыйЭтап = ДокументОбъект.ЭтапыГрафикаОплаты.Добавить();
			НовыйЭтап.ДатаПлатежа = ЭтапГрафика.ДатаПлатежа;
			НовыйЭтап.ПроцентПлатежа = ЭтапГрафика.ПроцентПлатежа;
			НовыйЭтап.СуммаПлатежа = ЭтапГрафика.СуммаПлатежа;
			НовыйЭтап.ЭтоЗалогЗаТару = Ложь;
		КонецЕсли;
		Если ЭтапГрафика.СуммаЗалогаЗаТару > 0 Тогда
			НовыйЭтап = ДокументОбъект.ЭтапыГрафикаОплаты.Добавить();
			НовыйЭтап.ДатаПлатежа = ЭтапГрафика.ДатаПлатежа;
			НовыйЭтап.ПроцентПлатежа = 0;
			НовыйЭтап.СуммаПлатежа = ЭтапГрафика.СуммаЗалогаЗаТару;
			НовыйЭтап.ЭтоЗалогЗаТару = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = Документы.СчетНаОплатуКлиенту.ПолучитьСуммуДокументаОснования(ОснованиеОбъект.Ссылка);
	ДокументОбъект.НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
		ОснованиеОбъект.Номер,
		ОснованиеОбъект.Ссылка);
		
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				6);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				6);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции


&НаСервере
Функция ЗаписатьПриходныйКассовыйОрдер(МассивНайденныхДокументов, ОснованиеОбъект, Отказ)
	
	// Приходный кассовый ордер создается только если
	//  в этапах графика оплаты есть этапы на дату оформления продажи
	//  или если для реализации указана сумма предоплаты
	СуммаПКО = 0;
	Если ТипЗнч(ОснованиеОбъект) = Тип("Массив") Тогда
		Для Каждого ПродажаОбъект Из ОснованиеОбъект Цикл
			Если ПродажаОбъект.ДатаПлатежа = НачалоДня(ТекущаяДата()) Тогда
				СуммаПКО = СуммаПКО + ПродажаОбъект.СуммаВзаиморасчетов;
			ИначеЕсли ТипЗнч(ПродажаОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
				СуммаПКО = СуммаПКО + ПродажаОбъект.СуммаПредоплаты;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОснованиеОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Если ОснованиеОбъект.ДатаПлатежа = НачалоДня(ТекущаяДата()) Тогда
			СуммаПКО = СуммаПКО + ОснованиеОбъект.СуммаВзаиморасчетов;
		Иначе
			СуммаПКО = ОснованиеОбъект.СуммаПредоплаты;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОснованиеОбъект) = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		Если ОснованиеОбъект.ДатаПлатежа = НачалоДня(ТекущаяДата()) Тогда
			СуммаПКО = ОснованиеОбъект.СуммаВзаиморасчетов;
		КонецЕсли;
	Иначе
		НайденныеСтроки = Объект.ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("ДатаПлатежа", НачалоДня(Объект.Дата)));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				СуммаПКО = СуммаПКО + ТекСтрока.СуммаПлатежа + ТекСтрока.СуммаЗалогаЗаТару;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаПКО = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.ПриходныйКассовыйОрдер,
		Тип("ДокументСсылка.ПриходныйКассовыйОрдер"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	Если ТипЗнч(ОснованиеОбъект) <> Тип("Массив") Тогда
		ДокументОбъект.ДокументОснование = ОснованиеОбъект.Ссылка;
	КонецЕсли;
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Контрагент,
		"Наименование,НаименованиеПолное");
	
	Если Не ПустаяСтрока(РеквизитыКонтрагента.НаименованиеПолное) Тогда
		ДокументОбъект.ПринятоОт = РеквизитыКонтрагента.НаименованиеПолное;
	Иначе
		ДокументОбъект.ПринятоОт = РеквизитыКонтрагента.Наименование;
	КонецЕсли;
	
	ДокументОбъект.Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.Касса).Валюта;
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ДокументОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	Если ТипЗнч(ОснованиеОбъект) = Тип("Массив") Тогда
		
		Для Каждого ПродажаОбъект Из ОснованиеОбъект Цикл
			
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер              = ПродажаОбъект.Партнер;
			НоваяСтрока.Заказ                = ПродажаОбъект.Ссылка;
			НоваяСтрока.ОснованиеПлатежа     = ПродажаОбъект.Ссылка;
			НоваяСтрока.ВалютаВзаиморасчетов = ПродажаОбъект.Валюта;
			НоваяСтрока.СуммаВзаиморасчетов  = ПродажаОбъект.СуммаПредоплаты;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.Партнер = ОснованиеОбъект.Партнер;
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			НоваяСтрока.Заказ = ОснованиеОбъект.Договор;
		Иначе
			НоваяСтрока.Заказ = ОснованиеОбъект.Ссылка;
		КонецЕсли;
		
		НоваяСтрока.ОснованиеПлатежа     = НоваяСтрока.Заказ;
		НоваяСтрока.ВалютаВзаиморасчетов = ОснованиеОбъект.Валюта;
		НоваяСтрока.СуммаВзаиморасчетов  = СуммаПКО;
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ДокументОбъект.Валюта, Объект.Валюта, ТекущаяДата());
	НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма");
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				7);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				7);
		КонецЕсли;
	Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции


&НаСервере
Процедура ЗаписатьТранспортнуюНакладную(МассивНайденныхДокументов, ОснованиеОбъект, Отказ)
		
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	Если ОснованиеОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
		Или ОснованиеОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
		Возврат
	КонецЕсли;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.ТранспортнаяНакладная,
		Тип("ДокументСсылка.ТранспортнаяНакладная"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы);	
		
	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда 	
		Грузополучатель = Объект.Грузополучатель;
	Иначе 
		Грузополучатель = Объект.Контрагент;
	КонецЕсли;
	
	Если Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда 
		Перевозчик = Объект.ПеревозчикПартнер;
	Иначе
		Перевозчик = Неопределено;
	КонецЕсли;
		
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("АдресДоставки", 	Объект.АдресДоставки);
	ЗначенияЗаполнения.Вставить("Организация", 		Объект.Организация);
	ЗначенияЗаполнения.Вставить("Плательщик", 		Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("Грузополучатель", 	Грузополучатель);
	ЗначенияЗаполнения.Вставить("Перевозчик", 		Перевозчик);
		
	МассивРаспоряжений = Новый Массив;
	МассивРаспоряжений.Добавить(ОснованиеОбъект.Ссылка);
	Документы.ТранспортнаяНакладная.СоздатьИлиЗаполнитьТранспортнуюНакладную(
		МассивРаспоряжений,
		ЗначенияЗаполнения,,
		ДокументОбъект);
		
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда 
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Если СозданНовыйДокумент Тогда
				ДобавитьСтрокуВТаблицуСформированныхДокументов(
					ДокументОбъект.Ссылка,
					0,
					Справочники.Валюты.ПустаяСсылка(),
					8);
				МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
			ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
				ОбновитьСтрокуВТаблицуСформированныхДокументов(
					СтрокаТаблицы,
					0,
					Справочники.Валюты.ПустаяСсылка(),
					8);
			КонецЕсли;
		Исключение
		Сообщение = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Сообщение,"Объект",ОписаниеОшибки(), "");
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Сообщение, Отказ);
		Отказ = Истина;
		КонецПопытки;
	Иначе
		Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка = Ложь;
		СоздаватьТранспортнуюНакладную = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументыСервер()
	
#КонецОбласти	

#Область ОтменаПроведенияРанееСозданныхДокументов
	
	Если ДокументыСформированы Тогда
		
		МассивДокументов = Новый Массив();
		
		Для Каждого ТекСтрока Из Объект.Документы Цикл
			МассивДокументов.Добавить(ТекСтрока.ПолучитьИдентификатор());
		КонецЦикла;
		
		ПровестиОтменитьПроведениеДокументовСервер(МассивДокументов, Ложь);
		
	КонецЕсли;

#КонецОбласти

#Область Инициализация

	НачатьТранзакцию();
	Отказ = Ложь;
	СозданНовыйДокумент = Ложь;
	МассивНайденныхДокументов = Новый Массив();

#КонецОбласти

#Область СозданиеКоммерческогоПредложения
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И НЕ Отказ Тогда
		
		ЗаписатьКоммерческоеПредложение(МассивНайденныхДокументов, Отказ);

#КонецОбласти

#Область СозданиеЗаказаКлиента
	
	ИначеЕсли (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Или
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) И НЕ Отказ Тогда
		
		БезПроведения = Объект.СоздаватьПриходныйКассовыйОрдер И Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
							Объект.ЭтапыГрафикаОплаты.Количество()>0 И
							Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
							Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным;
		
		ОснованиеОбъект = ЗаписатьЗаказ(МассивНайденныхДокументов, Отказ, БезПроведения);
		
		// Создание счета на оплату по заказу клиента
		Если Объект.СоздаватьСчетНаОплату И НЕ Отказ
			И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
			И Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") + Объект.ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару") > 0 Тогда
			
			ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ОснованиеОбъект, Объект.ЭтапыГрафикаОплаты.Выгрузить(), Отказ);
			
		КонецЕсли;
		
		// Создание приходного кассового ордера по заказу клиента
		Если Объект.СоздаватьПриходныйКассовыйОрдер И НЕ Отказ И
			Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И 
			Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным И
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			
			ПКО = ЗаписатьПриходныйКассовыйОрдер(МассивНайденныхДокументов, ОснованиеОбъект, Отказ);
			Если БезПроведения Тогда
				ОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

#Область СозданиеРеализацииТоваровИУслугАктаВыполненныхРабот
	
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг И НЕ Отказ Тогда
		
		ПараметрыОтбораАкт = Новый Структура(
			"ВариантОформленияПродажи,ВариантОформления",
			Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот,
			Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг);
		ПараметрыОтбораРеализация = Новый Структура(
			"ВариантОформленияПродажи,ВариантОформления",
			Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг,
			Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг);
		
		Работы = Объект.Товары.Выгрузить(ПараметрыОтбораАкт);
		Товары = Объект.Товары.Выгрузить(ПараметрыОтбораРеализация);
		
		СоздаватьСчетПКО = Ложь;
		
		ОбщаяСуммаПредоплаты = Объект.СуммаПредоплаты + ?(Объект.ТребуетсяЗалогЗаТару, Объект.СуммаПредоплатыЗаТару, 0);
		
		БезПроведения = Объект.СоздаватьПриходныйКассовыйОрдер И Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
					ОбщаяСуммаПредоплаты > 0 И
					Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		
		// Если только работы - все помещаем в акт выполненных работ
		Если Работы.Количество() > 0 И Товары.Количество() = 0 Тогда
			
			ОснованиеОбъект = ЗаписатьАкт(МассивНайденныхДокументов, Отказ);
			СоздаватьСчетПКО = Истина;
			
			// Создание счета на оплату по акту
			Если Объект.СоздаватьСчетНаОплату И НЕ Отказ
				И Объект.Товары.Итог("СуммаБезВозвратнойТары") > 0 Тогда
				
				ЭтапыГрафикаОплаты = Новый ТаблицаЗначений;
				ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,2)));
				ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
				ЭтапОплаты.ДатаПлатежа = ОснованиеОбъект.ДатаПлатежа;
				ЭтапОплаты.СуммаПлатежа = ОснованиеОбъект.СуммаВзаиморасчетов;
				ЭтапОплаты.ПроцентПлатежа = 100;
				
				ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ОснованиеОбъект, ЭтапыГрафикаОплаты, Отказ);
				
			КонецЕсли;
			
		// Если нет работ или есть товары + работы - все помещаем в реализацию товаров услуг
		Иначе
			
			ОснованиеОбъект = ЗаписатьРеализацию(МассивНайденныхДокументов, Отказ, БезПроведения);
			СоздаватьСчетПКО = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			
			// Создание транспортной накладной по реализации
			Если Не БезПроведения И СоздаватьТранспортнуюНакладную И Не Отказ Тогда
				ЗаписатьТранспортнуюНакладную(МассивНайденныхДокументов, ОснованиеОбъект, Отказ); 
			КонецЕсли;
			
			// Создание счета на оплату по реализации
			Если Объект.СоздаватьСчетНаОплату И НЕ Отказ
				И СоздаватьСчетПКО И Объект.Товары.Итог("СуммаБезВозвратнойТары") > 0 Тогда
				
				ЭтапыГрафикаОплаты = Новый ТаблицаЗначений;
				ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,2)));
				ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				
				СуммаЗалога = ?(Объект.ТребуетсяЗалогЗаТару, 
					Объект.Товары.Итог("СуммаСНДС") - Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"), 0);
				ПроцентПредоплаты = 0;
				ПроцентПредоплатыЗаТару = 0;
				
				Если ОснованиеОбъект.СуммаПредоплаты > 0 Тогда
					ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
					ЭтапОплаты.ДатаПлатежа = ОснованиеОбъект.Дата;
					Если Объект.ТребуетсяЗалогЗаТару И СуммаЗалога > 0 Тогда
						ЭтапОплаты.СуммаЗалогаЗаТару = ОснованиеОбъект.СуммаПредоплатыЗаТару;
						ПроцентПредоплатыЗаТару = ЭтапОплаты.СуммаЗалогаЗаТару / СуммаЗалога * 100;
						ЭтапОплаты.ПроцентЗалогаЗаТару = ПроцентПредоплатыЗаТару;
					КонецЕсли;
					Если ОснованиеОбъект.СуммаВзаиморасчетов > СуммаЗалога Тогда
						ЭтапОплаты.СуммаПлатежа = ОснованиеОбъект.СуммаПредоплаты - ЭтапОплаты.СуммаЗалогаЗаТару;
						ПроцентПредоплаты = ЭтапОплаты.СуммаПлатежа / (ОснованиеОбъект.СуммаВзаиморасчетов - СуммаЗалога) * 100;
						ЭтапОплаты.ПроцентПлатежа = ПроцентПредоплаты;
					КонецЕсли;
				КонецЕсли;
				Если ОснованиеОбъект.СуммаВзаиморасчетов > ОснованиеОбъект.СуммаПредоплаты Тогда
					ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
					ЭтапОплаты.ДатаПлатежа = ОснованиеОбъект.ДатаПлатежа;
					Если Объект.ТребуетсяЗалогЗаТару И СуммаЗалога > ОснованиеОбъект.СуммаПредоплатыЗаТару Тогда
						ЭтапОплаты.СуммаЗалогаЗаТару = СуммаЗалога - ОснованиеОбъект.СуммаПредоплатыЗаТару;
						ЭтапОплаты.ПроцентЗалогаЗаТару = 100 - ПроцентПредоплатыЗаТару;
					КонецЕсли;
					ЭтапОплаты.СуммаПлатежа = ОснованиеОбъект.СуммаВзаиморасчетов - ОснованиеОбъект.СуммаПредоплаты - 
						СуммаЗалога + ОснованиеОбъект.СуммаПредоплатыЗаТару;
					ЭтапОплаты.ПроцентПлатежа = 100 - ПроцентПредоплаты;
				КонецЕсли;
				
				ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ОснованиеОбъект, ЭтапыГрафикаОплаты, Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		// Создание приходного кассового ордера по реализации / акту
		Если Объект.СоздаватьПриходныйКассовыйОрдер И СоздаватьСчетПКО И НЕ Отказ И
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			
			ПКО = ЗаписатьПриходныйКассовыйОрдер(МассивНайденныхДокументов, ОснованиеОбъект, Отказ);
			Если БезПроведения И ПКО <> Неопределено Тогда
				ОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
				// Создание транспортной накладной по реализации
				Если СоздаватьТранспортнуюНакладную И Не Отказ Тогда
					ЗаписатьТранспортнуюНакладную(МассивНайденныхДокументов, ОснованиеОбъект, Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;

#КонецОбласти

#Область СозданиеРеализацииТоваровИУслугИАктаВыполненныхРаботПоЗаказу
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг И НЕ Отказ Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ *, 
			|	Товары.ВариантОбеспечения КАК ВариантОбеспечения,
			|	Товары.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
			|	Товары.Склад КАК Склад,
			|	Товары.ВариантОформления КАК ВариантОформления
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	&Товары КАК Товары;
			|
			|ВЫБРАТЬ *
			|ИЗ 
			|	ВтТовары КАК Товары
			|ГДЕ
			|	(Товары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), 
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|	ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента)
			|	И Товары.ВариантОформления = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг)
			|	И Товары.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот);
			|
			|ВЫБРАТЬ *
			|ИЗ 
			|	ВтТовары КАК Товары
			|ГДЕ
			|	(Товары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), 
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|	ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента)
			|	И Товары.ВариантОформления = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг)
			|	И Товары.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав);
			|
			|ВЫБРАТЬ *
			|ИЗ 
			|	ВтТовары КАК Товары
			|ГДЕ
			|	(Товары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), 
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|	ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента)
			|	И Товары.ВариантОформления = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг)
			|	И Товары.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
			|";
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ИспользоватьРасширенныеВозможностиЗаказаКлиента);
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		
		Работы    = ПакетРезультатов[1].Выгрузить();
		ТоварыАкт = ПакетРезультатов[2].Выгрузить();
		Товары    = ПакетРезультатов[3].Выгрузить();
		
		СоздаватьПКО = Ложь;
		МассивРеализаций = Новый Массив;
		
		БезПроведения = Объект.СоздаватьПриходныйКассовыйОрдер И Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
					(Объект.СуммаПредоплаты > 0 Или (Объект.ТребуетсяЗалогЗаТару И Объект.СуммаПредоплатыЗаТару > 0)) И
					Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		
		// Создание реализации товаров и услуг по заказу
		Если Товары.Количество() > 0 Тогда
			
			СоздатьРеализациюПоЗаказу(Товары, 
				МассивРеализаций, 
				МассивНайденныхДокументов,
				ОснованиеОбъект, 
				Работы.Количество() >0 ИЛИ ТоварыАкт.Количество() >0, 
				БезПроведения,
				Отказ);
			
		КонецЕсли;
		
		// Создание акта на передачу прав по заказу
		Если ТоварыАкт.Количество() > 0  И НЕ Отказ Тогда
			
			СоздатьРеализациюПоЗаказу(ТоварыАкт, 
				МассивРеализаций, 
				МассивНайденныхДокументов,
				ОснованиеОбъект, 
				Работы.Количество() >0 ИЛИ Товары.Количество() >0, 
				БезПроведения,
				Отказ);
			
		КонецЕсли;
		
		// Создание акта выполненных работ по заказу
		Если Работы.Количество() > 0 И НЕ Отказ Тогда
			
			ПродажаОбъект = ЗаписатьАктПоЗаказу(МассивНайденныхДокументов, ОснованиеОбъект, Работы, Отказ);
			
			
			// Создание счета на оплату по реализации / акту
			Если Объект.СоздаватьСчетНаОплату И НЕ Отказ
				И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
				И Объект.Товары.Итог("СуммаБезВозвратнойТары") > 0 Тогда
				
				ЭтапыГрафикаОплаты = Новый ТаблицаЗначений;
				ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,2)));
				ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
				ЭтапОплаты.ДатаПлатежа = ПродажаОбъект.ДатаПлатежа;
				ЭтапОплаты.СуммаПлатежа = ПродажаОбъект.СуммаВзаиморасчетов;
				ЭтапОплаты.ПроцентПлатежа = 100;
				
				ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ПродажаОбъект, ЭтапыГрафикаОплаты, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Создание приходного кассового ордера по реализации / акту
		Если Объект.СоздаватьПриходныйКассовыйОрдер И СоздаватьПКО И НЕ Отказ И
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным И
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			
			ПКО = ЗаписатьПриходныйКассовыйОрдер(МассивНайденныхДокументов, МассивРеализаций, Отказ);
			Если БезПроведения И ПКО <> Неопределено Тогда
				Для Каждого ПродажаОбъект Из МассивРеализаций Цикл
					ПродажаОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					// Создание транспортной накладной по реализации
					Если СоздаватьТранспортнуюНакладную И Не Отказ Тогда
						ЗаписатьТранспортнуюНакладную(МассивНайденныхДокументов, ПродажаОбъект, Отказ);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

#КонецОбласти

#Область СозданиеРасходногоОрдераНаТовары

	Если ТребуетсяОформлениеРасходногоОрдера И Не Отказ Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ *, 
			|	Товары.ВариантОбеспечения КАК ВариантОбеспечения,
			|	Товары.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
			|	Товары.Склад КАК Склад,
			|	Товары.ВариантОформления КАК ВариантОформления
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	&Товары КАК Товары;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ *
			|ИЗ 
			|	ВтТовары КАК Товары
			|ГДЕ
			|	(Товары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), 
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|	ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента)
			|	И Товары.ВариантОформления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг),
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента),
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг))
			|	И Товары.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
			|";
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ИспользоватьРасширенныеВозможностиЗаказаКлиента);
		РезультатЗапроса = Запрос.Выполнить();
		
		Товары    = РезультатЗапроса.Выгрузить();

		Если Товары.Количество() > 0 Тогда
			
			СоздатьРасходныеОрдера(Товары, 
				МассивНайденныхДокументов,
				МассивРеализаций,
				ОснованиеОбъект,
				БезПроведения,
				Отказ);
			
		КонецЕсли;
			
	КонецЕсли;
	
#КонецОбласти

#Область ПометкаНаУдалениеЛишнихДокументов

	Если Не Отказ тогда	
		Для Каждого ТекСтрока Из Объект.Документы Цикл
			Если МассивНайденныхДокументов.Найти(ТекСтрока.Документ) = Неопределено Тогда
			ПометитьНаУдалениеДокумент(ТекСтрока, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

#КонецОбласти

#Область ЗавершениеСозданияИзмененияДокументов
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Для Каждого ТекСтрока Из Объект.Документы Цикл
			ПометитьНаУдалениеДокумент(ТекСтрока, Отказ);
		КонецЦикла;
		
		Объект.Документы.Очистить();
		МассивНайденныхДокументов.Очистить();
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
		
	Если МассивНайденныхДокументов.Количество() > 0 Тогда
		
		ДокументыСформированы = Истина;
		Модифицированность = Ложь;
		ОбновитьГиперссылкуИнформационнойНадписиФормируемыеДокументы();
		УправлениеСозданиемТранспортныхНакладных();
		УстановитьТолькоПросмотрЭлементовФормы(Истина);
		Объект.Документы.Сортировать("Состояние,Порядок");
		
		Если Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель Тогда
			ОформляласьПродажаРозничномуКлиенту = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивНайденныхДокументов.Количество();
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументыКлиент(Знач Оповещение)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	
	ИменаПолей = ИменяПолейПодбораМногооборотнойТары(Объект.ВариантОформленияДокументов);
	МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		ИменаПолей,
		Новый ОписаниеОповещения("СоздатьДокументыКлиентПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыКлиентПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			
			СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки(
				Новый ОписаниеОповещения(
					"ПредложитьПользователюРассчитатьСкидкиЗавершение", 
					ЭтотОбъект,
					ДополнительныеПараметры)
			);
			Возврат;
			
		Иначе
			Объект.СкидкиРассчитаны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СоздатьДокументыКлиентФрагмент(ДополнительныеПараметры.Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПользователюРассчитатьСкидкиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		Возврат;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		ПрименитьИзмененияСкидокНаценокНаКлиенте(Новый ОписаниеОповещения("СоздатьДокументыКлиентЗавершение", ЭтотОбъект, Новый Структура("Оповещение", ДополнительныеПараметры.Оповещение)));
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыКлиентФрагмент(ДополнительныеПараметры.Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыКлиентЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    СоздатьДокументыКлиентФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыКлиентФрагмент(Знач Оповещение)
	
	Перем КоличествоСозданныхДокументов, МаксДатаАванса;
	
	ПроверитьПерезаполнитьЭтапыОплаты();
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
		
		МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
		Если ЗначениеЗаполнено(МаксДатаАванса) И МаксДатаАванса > Объект.ЖелаемаяДатаОтгрузки Тогда
			Объект.ЖелаемаяДатаОтгрузки = МаксДатаАванса;
		КонецЕсли;
	
	КонецЕсли;
	
	ОчиститьСообщения();
	Если ПроверитьЗаполнение() Тогда
		КоличествоСозданныхДокументов = СоздатьДокументыСервер();
		Если КоличествоСозданныхДокументов > 0 Тогда
			ПоказатьОповещениеПользователя(
				СтрЗаменить(НСтр("ru='Созданы документы (%КоличествоСозданныхДокументов%)';uk='Створені документи (%КоличествоСозданныхДокументов%)'"), "%КоличествоСозданныхДокументов%", КоличествоСозданныхДокументов),
				,
				,
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru='Документы не созданы';uk='Документи не створені'"),
				,
				,
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеДокумент(СтрокаТаблицы, Отказ)
	
	Если ЗаблокироватьДокумент(СтрокаТаблицы.Документ) Тогда
		ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		Если НЕ ДокументОбъект = Неопределено И Не ДокументОбъект.ПометкаУдаления Тогда
			Попытка
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				СтрокаТаблицы.Состояние = 1;
			Исключение
				ТекстОшибки = НСтр("ru='Не удалось установить пометку удаления для документа %Документ%. %ОписаниеОшибки%';uk='Не вдалося встановити позначку вилучення для документа %Документ%. %ОписаниеОшибки%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект);
				Отказ = Истина;
			КонецПопытки;
		Иначе
			СтрокаТаблицы.Состояние = 1;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаблокироватьДокумент(ДокументСсылка)
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%';uk='Не вдалося заблокувати %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументСсылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция НайтиСозданныйДокументПоТипу(ТипДокумента, МассивНайденныхДокументов)
	
	Для Каждого ТекСтрока Из Объект.Документы Цикл
		
		Если ТипЗнч(ТекСтрока.Документ) = ТипДокумента И
			МассивНайденныхДокументов.Найти(ТекСтрока.Документ) = Неопределено Тогда
			Возврат ТекСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьДокумент(МенеджерДокумента, ТипДокумента, МассивНайденныхДокументов, СозданНовыйДокумент, СтрокаТаблицы)
	
	Если ДокументыСформированы Тогда
		
		СтрокаТаблицы = НайтиСозданныйДокументПоТипу(ТипДокумента, МассивНайденныхДокументов);
		Если СтрокаТаблицы <> Неопределено И ЗаблокироватьДокумент(СтрокаТаблицы.Документ) Тогда
			ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
			Если ДокументОбъект.ПометкаУдаления Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			МассивНайденныхДокументов.Добавить(СтрокаТаблицы.Документ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		
		ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		СозданНовыйДокумент = Истина;
		
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицуСформированныхДокументов(ДокументСсылка, Сумма, Валюта, Порядок, Состояние = 0)
	
	НоваяСтрока = Объект.Документы.Добавить();
	НоваяСтрока.Документ 	= ДокументСсылка;
	НоваяСтрока.Состояние 	= Состояние;
	НоваяСтрока.Сумма 		= Сумма;
	НоваяСтрока.Валюта 		= Валюта;
	НоваяСтрока.Порядок		= Порядок;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуВТаблицуСформированныхДокументов(СтрокаТаблицы, Сумма,Валюта, Порядок, Состояние = 0)
	
	СтрокаТаблицы.Состояние = Состояние;
	СтрокаТаблицы.Сумма 	= Сумма;
	СтрокаТаблицы.Валюта 	= Валюта;
	СтрокаТаблицы.Порядок 	= Порядок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыделенныеДокументы(Знач Оповещение)
	
	Если Объект.Документы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПолучитьВыделенныеДокументыЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru='Отсутствуют оформленные документы';uk='Відсутні оформлені документи'"));
		Возврат;
	ИначеЕсли Элементы.ОформленныеДокументы.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПолучитьВыделенныеДокументыЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru='Отсутствуют выделенные документы';uk='Відсутні виділені документи'"));
		Возврат;
	Иначе
		МассивДокументов = Новый Массив();
		Для Каждого ТекЭлемент Из Элементы.ОформленныеДокументы.ВыделенныеСтроки Цикл
			МассивДокументов.Добавить(ТекЭлемент);
		КонецЦикла;
		ВыполнитьОбработкуОповещения(Оповещение, МассивДокументов);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыделенныеДокументыЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение, Неопределено);

КонецПроцедуры

&НаСервере
Функция УстановитьПометкуУдаленияСервер(ВыделенныеДокументы)
	
	Сч = ВыделенныеДокументы.Количество();
	КоличествоИзмененныхДокументов = 0;
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		ДокументНеПомеченНаУдаление = Ложь;
		
		СтрокаТаблицы = Объект.Документы.НайтиПоИдентификатору(ВыделенныеДокументы[Сч]);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПометитьНаУдалениеДокумент(СтрокаТаблицы, ДокументНеПомеченНаУдаление);
		Если ДокументНеПомеченНаУдаление Тогда
			Отказ = Истина;
		Иначе
			КоличествоИзмененныхДокументов = КоличествоИзмененныхДокументов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
		УправлениеТранспортнымиНакладными();
		УправлениеПометкойКомандыТранспортнойНакладной();
	КонецЕсли;
	
	Возврат КоличествоИзмененныхДокументов;
	
КонецФункции

&НаСервере
Функция ПровестиОтменитьПроведениеДокументовСервер(ВыделенныеДокументы, Проведение = Истина)
	
	Сч = ВыделенныеДокументы.Количество();
	КоличествоИзмененныхДокументов = 0;
	Отказ = Ложь;
	МассивСтрокКУдалению = Новый Массив;
	
	НачатьТранзакцию();
	
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		
		СтрокаТаблицы = Объект.Документы.НайтиПоИдентификатору(ВыделенныеДокументы[Сч]);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаблокироватьДокумент(СтрокаТаблицы.Документ) Тогда
			
			ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
			
			// Если документ удалили, запомним его и потом удалим из таблицы Документы
			Если ДокументОбъект = Неопределено Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.ПометкаУдаления И Проведение Тогда
				
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(Ложь);
					СтрокаТаблицы.Состояние = 1;
				Исключение
					ТекстОшибки = НСтр("ru='Не удалось снять пометку удаления для документа %Документ%. %ОписаниеОшибки%';uk='Не вдалося зняти позначку вилучення для документа %Документ%. %ОписаниеОшибки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект);
				КонецПопытки;
				
			КонецЕсли;
			
			Если ДокументОбъект.Проведен <> Проведение Тогда
				
				Если Проведение И Не ДокументОбъект.ПроверитьЗаполнение() Тогда 
					Продолжить;
				КонецЕсли;
				
				Попытка
					ДокументОбъект.Записать(?(Проведение, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
				Исключение
					Если Проведение Тогда
						ТекстОшибки = НСтр("ru='Не удалось провести документ %Документ%. %ОписаниеОшибки%';uk='Не вдалося провести документ %Документ%. %ОписаниеОшибки%'");
					Иначе
						ТекстОшибки = НСтр("ru='Не удалось отменить проведение документа %Документ%. %ОписаниеОшибки%';uk='Не вдалося скасувати проведення документа %Документ%. %ОписаниеОшибки%'");
					КонецЕсли;
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект);
					Отказ = Истина;
					Продолжить;
				КонецПопытки;
				
				СтрокаТаблицы.Состояние = ?(Проведение, 0, 2);
				КоличествоИзмененныхДокументов = КоличествоИзмененныхДокументов + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		Объект.Документы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
		УправлениеТранспортнымиНакладными();
	КонецЕсли;

	Возврат КоличествоИзмененныхДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеИмяДокумента(ДокументСсылка)
	
	Возврат ДокументСсылка.Метаданные().ПолноеИмя();
	
КонецФункции

&НаСервере
Процедура ОбновитьТекстИнформационнойНадписиФормируемыеДокументы()
	
	МассивНадписей = Новый Массив();
	
	СуммаИтог = ?(Объект.ТребуетсяЗалогЗаТару,
		Объект.Товары.Итог("СуммаСНДС"), Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"));
	СуммаЗаказа = 0;
	СуммаАкта = 0;
	СуммаРеализации = 0;
	СуммаПКО = 0;
	СуммаАктаНаПередачуПрав = 0;
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		
		СуммаЗаказа = ?(Объект.ТребуетсяЗалогЗаТару,
			Объект.Товары.Итог("СуммаСНДС"), Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"));
		
		ТекстНадписи = НСтр("ru='Коммерческое предложение (%СуммаИтог% %Валюта%)';uk='Комерційна пропозиція (%СуммаИтог% %Валюта%)'");
		МассивНадписей.Добавить(ТекстНадписи);
		
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		
		СуммаЗаказа = ?(Объект.ТребуетсяЗалогЗаТару,
			Объект.Товары.Итог("СуммаСНДС"), Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"));
		ДобавитьТекстНадписиВМассив(МассивНадписей, НСтр("ru='Заказ';uk='Замовлення'"), "%СуммаИтог%", СуммаЗаказа, Объект.СоздаватьСчетНаОплату И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным);
		
	ИначеЕсли ЭтоРеализация(Объект.ВариантОформленияДокументов) Тогда
		
		ТребуетсяОформлениеЗаказа = Ложь;
		ТребуетсяОформлениеАкта = Ложь;
		ТребуетсяОформлениеРеализации = Ложь;
		ТребуетсяОформлениеАктаНаПередачуПрав = Ложь;
		
		ЕстьТовары  = Объект.Товары.НайтиСтроки(Новый Структура("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг)).Количество() > 0;
		ЕстьТоварыСАктомНаПередачу = Объект.Товары.НайтиСтроки(Новый Структура("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)).Количество() > 0;
		ЕстьУслугиАкт  = Объект.Товары.НайтиСтроки(Новый Структура("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот)).Количество() > 0;
		
		Если Объект.Товары.Количество() = 0 Тогда
			Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
				ДобавитьТекстНадписиВМассив(
					МассивНадписей, 
					НСтр("ru='Заказ';uk='Замовлення'"), 
					"%СуммаЗаказа%", 
					СуммаЗаказа, 
					Объект.СоздаватьСчетНаОплату И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным);
			Иначе
				ДобавитьТекстНадписиВМассив(
					МассивНадписей, 
					НСтр("ru='Реализация';uk='Реалізація'"), 
					"%СуммаЗаказа%", 
					СуммаЗаказа, 
					Объект.СоздаватьСчетНаОплату И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			
			Если ТекСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
				
				СуммаЗаказа = СуммаЗаказа + ?(Объект.ТребуетсяЗалогЗаТару,ТекСтрока.СуммаСНДС, ТекСтрока.СуммаСНДСБезВозвратнойТары);
				ТребуетсяОформлениеЗаказа = Истина;
				
			Иначе
				
				Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
				
					СуммаЗаказа = СуммаЗаказа + ?(Объект.ТребуетсяЗалогЗаТару,ТекСтрока.СуммаСНДС, ТекСтрока.СуммаСНДСБезВозвратнойТары);
					ТребуетсяОформлениеЗаказа = Истина;
					
				КонецЕсли;
				
				Если ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
					ИЛИ ((ЕстьТовары ИЛИ ЕстьТоварыСАктомНаПередачу) И ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот
					И Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг)
					ИЛИ ((ЕстьТовары ИЛИ ЕстьУслугиАкт) И ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав
					И Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг) Тогда
					
					СуммаРеализации = СуммаРеализации + ?(Объект.ТребуетсяЗалогЗаТару,ТекСтрока.СуммаСНДС, ТекСтрока.СуммаСНДСБезВозвратнойТары);
					ТребуетсяОформлениеРеализации = Истина;
					
				ИначеЕсли ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
					СуммаАктаНаПередачуПрав = СуммаАктаНаПередачуПрав + ?(Объект.ТребуетсяЗалогЗаТару,ТекСтрока.СуммаСНДС, ТекСтрока.СуммаСНДСБезВозвратнойТары);
					ТребуетсяОформлениеАктаНаПередачуПрав = Истина;
				ИначеЕсли ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
					СуммаАкта = СуммаАкта + ?(Объект.ТребуетсяЗалогЗаТару,ТекСтрока.СуммаСНДС, ТекСтрока.СуммаСНДСБезВозвратнойТары);
					ТребуетсяОформлениеАкта = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТребуетсяОформлениеЗаказа Тогда
			ДобавитьТекстНадписиВМассив(
				МассивНадписей, 
				НСтр("ru='Заказ';uk='Замовлення'"), 
				"%СуммаЗаказа%", 
				СуммаЗаказа, 
				Объект.СоздаватьСчетНаОплату И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным);
		КонецЕсли;
		
		Если ТребуетсяОформлениеРеализации Тогда
			ДобавитьТекстНадписиВМассив(
				МассивНадписей,
				НСтр("ru='Реализация';uk='Реалізація'"),
				"%СуммаРеализации%",
				СуммаРеализации,
				Объект.СоздаватьСчетНаОплату
				И (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
				ИЛИ (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
					И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)));
		КонецЕсли;
		
		Если ТребуетсяОформлениеАктаНаПередачуПрав Тогда
			ДобавитьТекстНадписиВМассив(
				МассивНадписей,
				НСтр("ru='Акт на передачу прав';uk='Акт на передачу прав'"),
				"%СуммаАктаНаПередачуПрав%",
				СуммаАктаНаПередачуПрав,
				Объект.СоздаватьСчетНаОплату
				И (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
				ИЛИ (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
					И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)));
		КонецЕсли;
		
		Если ТребуетсяОформлениеАкта Тогда
			ДобавитьТекстНадписиВМассив(
				МассивНадписей,
				НСтр("ru='Акт';uk='Акт'"),
				"%СуммаАкта%",
				СуммаАкта,
				Объект.СоздаватьСчетНаОплату
				И (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
				ИЛИ (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
					И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)));
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОформлениеРасходногоОрдера = Ложь;	
	
	Если ИспользоватьОрдерныеСклады И ДоступноСозданиеРасходныхОрдеров
		И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда	
		
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			 СкладИспользуетОрдернуюСхему = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(ТекСтрока.Склад);
			 
			 Если СкладИспользуетОрдернуюСхему И ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить тогда
				 ТребуетсяОформлениеРасходногоОрдера = Истина;
				 Прервать;
			 КонецЕсли;
			 
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТребуетсяОформлениеРасходногоОрдера тогда
			
			ТекстНадписи=НСтр("ru='Расходный ордер на товары';uk='Видатковий ордер на товари'");
			МассивНадписей.Добавить(ТекстНадписи);
			
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
		И Объект.СоздаватьПриходныйКассовыйОрдер
		И Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		Если ОплатаУказываетсяВРеализации(Объект.ВариантОформленияДокументов, Объект.ПорядокРасчетов) Тогда
			
			СуммаОплаты = 0;
			Если Объект.ДатаПлатежа = НачалоДня(ТекущаяДата()) Тогда
				СуммаОплаты = СуммаРеализации;
			ИначеЕсли ИспользоватьСтатусыРеализацийТоваровУслуг Тогда
				СуммаОплаты = Объект.СуммаПредоплаты + ?(Объект.ТребуетсяЗалогЗаТару, Объект.СуммаПредоплатыЗаТару, 0);
			КонецЕсли;
			
			Если СуммаОплаты > 0 Тогда
				СуммаПКО = СуммаОплаты;
				ТекстНадписи = НСтр("ru='ПКО (%СуммаПКО% %Валюта%)';uk='ПКО (%СуммаПКО% %Валюта%)'");
				МассивНадписей.Добавить(ТекстНадписи);
			КонецЕсли;
			
		Иначе
			
			СтрокиОплаты = Объект.ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("ДатаПлатежа", Объект.Дата));
			Если СтрокиОплаты.Количество() > 0 Тогда
				ТаблицаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Выгрузить(СтрокиОплаты, "СуммаПлатежа, СуммаЗалогаЗаТару");
				ТаблицаЭтаповОплаты.Свернуть(,"СуммаПлатежа, СуммаЗалогаЗаТару");
				СуммаПКО = ТаблицаЭтаповОплаты[0].СуммаПлатежа + ТаблицаЭтаповОплаты[0].СуммаЗалогаЗаТару;
				ТекстНадписи = НСтр("ru='ПКО (%СуммаПКО% %Валюта%)';uk='ПКО (%СуммаПКО% %Валюта%)'");
				МассивНадписей.Добавить(ТекстНадписи);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НадписьСформированныеДокументы = "";
	
	Для Каждого ТекЭлемент Из МассивНадписей Цикл
		НадписьСформированныеДокументы = НадписьСформированныеДокументы + ТекЭлемент + ", ";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НадписьСформированныеДокументы) Тогда
		НадписьСформированныеДокументы = Лев(НадписьСформированныеДокументы, СтрДлина(НадписьСформированныеДокументы) - 2);
	КонецЕсли;
	
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаИтог%",       Формат(СуммаИтог, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаЗаказа%",     Формат(СуммаЗаказа, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаРеализации%", Формат(СуммаРеализации, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаАкта%",       Формат(СуммаАкта, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаАктаНаПередачуПрав%", Формат(СуммаАктаНаПередачуПрав, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%Валюта%",          Объект.Валюта);
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаПКО%",        Формат(СуммаПКО, "ЧДЦ=2"));
	
	ОбновитьГиперссылкуИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГиперссылкуИнформационнойНадписиФормируемыеДокументы()
	
	Если ДокументыСформированы Тогда
		Элементы.НадписьСформированныеДокументы.Гиперссылка = Истина;
	Иначе
		Элементы.НадписьСформированныеДокументы.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТекстНадписиВМассив(МассивНадписей, ИмяПараметраДокумент, ИмяПараметраСумма, СуммаДокумента, СоздаватьСчетНаОплату)
	
	Если СоздаватьСчетНаОплату и Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ТекстНадписи = НСтр("ru='%ИмяПараметраДокумент% + Счет (%ИмяПараметраСумма% %Валюта%)';uk='%ИмяПараметраДокумент% + Рахунок (%ИмяПараметраСумма% %Валюта%)'");
	Иначе
		ТекстНадписи = НСтр("ru='%ИмяПараметраДокумент% (%ИмяПараметраСумма% %Валюта%)';uk='%ИмяПараметраДокумент% (%ИмяПараметраСумма% %Валюта%)'");
	КонецЕсли;
	
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ИмяПараметраДокумент%", ИмяПараметраДокумент);
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ИмяПараметраСумма%", ИмяПараметраСумма);
	
	МассивНадписей.Добавить(ТекстНадписи);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеУсловийПродаж

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта, 
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта);
	КонецЕсли;
	
	Если Договор <> Объект.Договор Тогда
		
		Объект.Договор = Договор;
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма);
		
		
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажПоУмолчанию()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
		Объект.Партнер,
		Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение, ПустаяСсылкаДокумента", 
		Истина,
		Объект.Соглашение,
		Документы.РеализацияТоваровУслуг.ПустаяСсылка()));
	
	ЗаполнитьДанныеПоПартнеру = Истина;
	
	Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
		Если НЕ ИспользоватьСоглашенияСКлиентами ИЛИ 
			(Объект.Соглашение <> УсловияПродажПоУмолчанию.Соглашение И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
			
			Объект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			ЗаполнитьДанныеПоПартнеру = Ложь;
			Если ИспользоватьСоглашенияСКлиентами Тогда
					
				ПриИзмененииСоглашенияСервер();
					
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
				ПродажиСервер.ЗаполнитьЦены(
					Объект.Товары,
					, // Массив строк или структура отбора
					Новый Структура( // Параметры заполнения
						"Дата, Валюта, Соглашение, РасчитыватьНаборы, ПоляЗаполнения",
						Объект.Дата,
						Объект.Валюта,
						Объект.Соглашение,
						Истина,
						"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
					),
					Новый Структура( // Структура действий с измененными строками
						"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
						"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Истина)));
			КонецЕсли;
		Иначе
			Объект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
		КонецЕсли;
		ПриИзмененииХозяйственнойОперацииСервер(Ложь);
	КонецЕсли;
	
	Если ЗаполнитьДанныеПоПартнеру И ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
		ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Объект.Партнер, Объект.КонтактноеЛицо);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажПоCоглашению()
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, РасчитыватьНаборы, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			Истина,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Истина)));
			
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Объект.Организация;
	СтруктураПараметров.БанковскийСчет			= Объект.БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	Объект.БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж)
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Валюта = УсловияПродаж.Валюта;
	Объект.ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		Объект.ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	НалогообложениеНДСПоУмолчанию   = УсловияПродаж.НалогообложениеНДС;
	Объект.ЦенаВключаетНДС      = УсловияПродаж.ЦенаВключаетНДС;
	Объект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	Объект.СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
	Объект.ТребуетсяЗалогЗаТару = УсловияПродаж.ТребуетсяЗалогЗаТару;
	Объект.ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	
	ИзмененаОрганизация = ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Объект.Организация;
	ИзмененаФормаОплаты = ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) И УсловияПродаж.ФормаОплаты <> Объект.ФормаОплаты;
	
	Объект.ФормаОплаты = УсловияПродаж.ФормаОплаты;
	
	Если ИзмененаОрганизация Тогда
		Объект.Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	Если ИзмененаОрганизация Или ИзмененаФормаОплаты Тогда
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация  = Объект.Организация;
		Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация     = Объект.Организация;
		СтруктураПараметров.ФормаОплаты		= Объект.ФормаОплаты;
		Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Объект.Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) 
			И НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			Объект.КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Объект.Партнер, Объект.КонтактноеЛицо);
	
	Объект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, Объект.ХозяйственнаяОперация, Объект.Валюта);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Объект.Склад = УсловияПродаж.Склад;
		Объект.МестоСоставленияДокумента = ПродажиСервер.ПолучитьМестоСоставленияДокумента("РеализацияТоваровУслуг", Объект.Менеджер, Объект.Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки)
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала,Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
	Иначе
		ЖелаемаяДатаОтгрузки = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УсловияОплаты

&НаСервере
Процедура УстановитьВидимостьРеквизитовОплаты()
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
			И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным) Тогда
			
			ВидимостьЭлемента = Ложь;
		
		Иначе
			
			ВидимостьЭлемента = Истина;
			
		КонецЕсли;
	
	Элементы.НадписьЭтапыОплаты.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаправленияДеятельности()
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
			
			ВидимостьЭлемента = Ложь;
		
		Иначе
			
			ВидимостьЭлемента = Истина;
			
		КонецЕсли;
	
	Элементы.НаправлениеДеятельности.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПерезаполнитьЭтапыОплаты()
	
	Если Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") И ГрафикИсполненияВДоговоре Тогда
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Возврат;
	КонецЕсли;
	
	СуммаОплатыПоДокументу = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	СуммаЗалогаПоДокументу = ?(Объект.ТребуетсяЗалогЗаТару, Объект.Товары.Итог("СуммаСНДС") - СуммаОплатыПоДокументу, 0);
	СуммаВсего = СуммаОплатыПоДокументу + СуммаЗалогаПоДокументу;
	
	Если СуммаВсего = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УсловияОплатыИзменились = Ложь;
	
	Если ОплатаУказываетсяВРеализации(Объект.ВариантОформленияДокументов, Объект.ПорядокРасчетов) Тогда
		
		Если ИспользоватьСтатусыРеализацийТоваровУслуг Тогда
			
			ГрафикСоглашенияЗаполнен = ИспользоватьСоглашенияСКлиентами
				И ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
			ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты);
			
			Если ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен Тогда
				
				СтруктураПредоплаты = СуммаПредоплатыПоСоглашению(Объект, Объект.ЭтапыГрафикаОплаты, СуммаВсего);
				Если Объект.СуммаПредоплаты <> СтруктураПредоплаты.СуммаПредоплаты
					Или Объект.СуммаПредоплатыЗаТару <> СтруктураПредоплаты.СуммаПредоплатыЗаТару Тогда
					Объект.СуммаПредоплаты = СтруктураПредоплаты.СуммаПредоплаты;
					Объект.СуммаПредоплатыЗаТару = СтруктураПредоплаты.СуммаПредоплатыЗаТару;
					УсловияОплатыИзменились = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщаяСуммаПредоплаты = Объект.СуммаПредоплаты + Объект.СуммаПредоплатыЗаТару;
		
		Если (Не ИспользоватьСтатусыРеализацийТоваровУслуг Или ОбщаяСуммаПредоплаты <> СуммаВсего)
				И Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
			ЗаполнитьДатуПлатежаПоУмолчанию();
			УсловияОплатыИзменились = Истина;
		КонецЕсли;
		
	Иначе
		
		СуммаЭтаповОплаты   = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		СуммаЗалогаПоЭтапам = Объект.ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
		
		Если СуммаОплатыПоДокументу <> СуммаЭтаповОплаты Или СуммаЗалогаПоДокументу <> СуммаЗалогаПоЭтапам Тогда
			
			Если Объект.ЭтапыГрафикаОплаты.Количество() = 0  Тогда
				
				ГрафикСоглашенияЗаполнен = ИспользоватьСоглашенияСКлиентами
					И ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
				ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты);
				
				Если Не (ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен) Тогда
					
					ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
						Объект,
						ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
						Объект.ЖелаемаяДатаОтгрузки,
						СуммаОплатыПоДокументу,
						СуммаЗалогаПоДокументу);
					
				Иначе
					ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен);
				КонецЕсли;
					
			Иначе
				
				ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
					Объект.ЭтапыГрафикаОплаты,
					СуммаОплатыПоДокументу,
					СуммаЗалогаПоДокументу);
				
			КонецЕсли;
			
			УсловияОплатыИзменились = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УсловияОплатыИзменились Тогда
		ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
		НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЭтапыОплатыПриИзмененииСоглашения(ПредыдущийГрафикОплаты)
	
	ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И ПредыдущийГрафикОплаты <> Объект.ГрафикОплаты;
	ГрафикСоглашенияЗаполнен = ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	
	Если ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен Тогда
		
		Если ОплатаУказываетсяВРеализации(Объект.ВариантОформленияДокументов, Объект.ПорядокРасчетов) Тогда
			
			Если ИспользоватьСтатусыРеализацийТоваровУслуг Тогда
				СтруктураПредоплаты = СуммаПредоплатыПоСоглашению(Объект, Объект.ЭтапыГрафикаОплаты, СуммаВсего);
				Объект.СуммаПредоплаты = СтруктураПредоплаты.СуммаПредоплаты;
				Объект.СуммаПредоплатыЗаТару = СтруктураПредоплаты.СуммаПредоплатыЗаТару;
			КонецЕсли;
			
			ЭтапыОплатыСервер.ЗаполнитьДатуПлатежаПоУмолчанию(Объект, Объект.ГрафикОплаты, Истина);
			
		Иначе
			ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен)
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
		Объект,
		ГрафикСоглашенияЗаполнен,
		ГрафикЗаполнен,
		Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"),
		?(Объект.ТребуетсяЗалогЗаТару,
			Объект.Товары.Итог("СуммаСНДС") - Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"), 0));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуммаПредоплатыПоСоглашению(Знач Объект, Знач ЭтапыГрафикаОплаты, СуммаВсего)
	
	СуммаПродажи      = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	СуммаЗалогаЗаТару = ?(Объект.ТребуетсяЗалогЗаТару, СуммаВсего - СуммаПродажи, 0);
	
	Возврат ПродажиСервер.СуммаПредоплатыПоСоглашению(
		Объект,
		ЭтапыГрафикаОплаты,
		СуммаПродажи,
		СуммаЗалогаЗаТару);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДатуПлатежаПоУмолчанию()
	
	ЭтапыОплатыСервер.ЗаполнитьДатуПлатежаПоУмолчанию(Объект, Объект.ГрафикОплаты, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ВариантыОформленияДокументов

&НаСервере
Процедура ВариантОформленияДокументовПриИзмененииСервер()
	
	УстановитьДоступностьКомандОбеспечения();
	УстановитьВидимостьОпераций();
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаполнитьВариантОформленияВТабличнойЧастиСервер();
	КонецЕсли;
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("КартинкаНесколькоСкладов");
	МассивЭлементов.Добавить("НадписьНесколькоСкладов");
	МассивЭлементов.Добавить("ДекорацияРеквизитыПечатиРеализации");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение);
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		Элементы.ГруппаДополнительныеРеквизиты.ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизитыКоммерческоеПредложение;
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		Элементы.ГруппаДополнительныеРеквизиты.ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизитыЗаказКлиента;
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Тогда
		Элементы.ГруппаДополнительныеРеквизиты.ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизитыРеализацияТоваровУслуг;
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
		Элементы.ГруппаДополнительныеРеквизиты.ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизитыЗаказКлиентаРеализацияТоваровУслуг;
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		Элементы.АдресДоставкиСамовывоз.Видимость = Ложь;
		СпособДоставки = Объект.СпособДоставки;
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
		Объект.СпособДоставки = СпособДоставки;
		Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаДоставкаКоммерческоеПредложение;
		Элементы.СтраницыПеревозчик.ТекущаяСтраница = Элементы.СтраницаПеревозчикПусто;
	Иначе
		Элементы.АдресДоставкиСамовывоз.Видимость = Истина;
		// Вызываем заполнение реквизитов доставки при изменении Партнера,
		//	чтобы полностью их перезаполнить, т.к. поменялся тип документа
		ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, "Партнер", Объект);
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовОплаты();
	УстановитьВидимостьНаправленияДеятельности();
	ИнициализироватьДатуПлатежа();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж));
	УстановитьВидимостьЭлементовСерий();
	ЗаполнитьСтатусыУказанияСерий();
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантОформленияВТабличнойЧастиСервер(ЗаполнитьСЗаменой = Истина)
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЗаполнитьСЗаменой ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ВариантОформления) Тогда
			ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекСтрока, Объект.ВариантОформленияДокументов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекСтрока, ВариантОформленияДокументов)
	
	Если ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг") Тогда
		Если ТекСтрока.ДатаОтгрузки = НачалоДня(ТекущаяДата()) Или ТекСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Или ТекСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			ТекСтрока.ВариантОформления = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг");
		Иначе
			ТекСтрока.ВариантОформления = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента");
		КонецЕсли;
	Иначе
		ТекСтрока.ВариантОформления = ВариантОформленияДокументов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантОформленияДокументовПродажиПоУмолчанию()
	
	Если Объект.СоздаватьЗаказКлиента И Объект.СоздаватьДокументПродажи И ИспользоватьЗаказыКлиентов Тогда
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг;
	ИначеЕсли Объект.СоздаватьДокументПродажи Тогда
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
	ИначеЕсли Объект.СоздаватьЗаказКлиента  И ИспользоватьЗаказыКлиентов Тогда
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента;
	ИначеЕсли Объект.СоздаватьКоммерческоеПредложение И ИспользоватьКоммерческиеПредложенияКлиентам Тогда
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДатыОтгрузки

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(Команда)

	МассивВыделенныхСтрок = Элементы.Товары.ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() > 0 Тогда
		ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуОтгрузкиЗавершение", ЭтотОбъект, Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок));
		
		РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru='Введите дату отгрузки';uk='Введіть дату відвантаження'"), ЧастиДаты.Дата, Оповещение);
		
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе не выбраны строки для заполнения. Дата отгрузки не будет заполнена.';uk='В документі не обрані рядки для заповнення. Дата відвантаження не буде заповнена.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаОтгрузки = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок)

	ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", ДатаОтгрузки, МассивВыделенныхСтрок);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыОтгрузкиВТабЧасти()
	
	Если Объект.НеОтгружатьЧастями Тогда
		МаксимальнаяДата = ОбеспечениеСервер.МаксимальноеЗначениеВКоллекции(Объект.Товары, "ДатаОтгрузки", '00010101');
		Объект.ДатаОтгрузки = ?(ЗначениеЗаполнено(МаксимальнаяДата), МаксимальнаяДата, Объект.ДатаОтгрузки);
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьРеквизитыДоставки(ИмяЭлементаФормы)
	
	ПараметрыЗаполнения = ДоставкаТоваров.ПараметрыЗаполненияРеквизитов();
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
		ПараметрыЗаполнения.ИсточникСтатистики = Документы.РеализацияТоваровУслуг;
	Иначе
		ПараметрыЗаполнения.ИсточникСтатистики = Документы.ЗаказКлиента;
	КонецЕсли;
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьПомощникПродаж()
	
	Модифицированность = Ложь;
	ДокументыСформированы = Ложь;
	ТолькоПросмотрУстановлен = Ложь;
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Объект.Товары.Очистить();
	Объект.ЭтапыГрафикаОплаты.Очистить();
	Объект.СкидкиНаценки.Очистить();
	Объект.Серии.Очистить();
	Объект.Документы.Очистить();
	Объект.ДополнительныеРеквизитыКоммерческогоПредложения.Очистить();
	Объект.ДополнительныеРеквизитыЗаказа.Очистить();
	Объект.ДополнительныеРеквизитыРеализации.Очистить();
	Объект.ДополнительныеРеквизитыАкта.Очистить();
	ВидыЦен.Очистить();
	
	Если ОформляласьПродажаРозничномуКлиенту Тогда
		Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	Иначе
		Объект.Партнер = Неопределено;
	КонецЕсли;
	
	Объект.Соглашение                     = Неопределено;
	Объект.Организация                    = Неопределено;
	Объект.БанковскийСчет                 = Неопределено;
	Объект.Склад                          = Неопределено;
	Объект.ЦенаВключаетНДС                = Неопределено;
	Объект.Контрагент                     = Неопределено;
	Объект.Договор                        = Неопределено;
	Объект.Сделка                         = Неопределено;
	Объект.ГрафикОплаты                   = Неопределено;
	Объект.ЖелаемаяДатаОтгрузки           = Неопределено;
	Объект.ДополнительнаяИнформация       = Неопределено;
	Объект.ФормаОплаты                    = Неопределено;
	Объект.БанковскийСчет                 = Неопределено;
	Объект.БанковскийСчетКонтрагента      = Неопределено;
	Объект.Касса                          = Неопределено;
	Объект.АдресДоставки                  = Неопределено;
	Объект.Комментарий                    = Неопределено;
	Объект.НомерПоДаннымКлиента           = Неопределено;
	Объект.ДатаПоДаннымКлиента            = Неопределено;
	Объект.Грузоотправитель               = Неопределено;
	Объект.Грузополучатель                = Неопределено;
	Объект.БанковскийСчетГрузоотправителя = Неопределено;
	Объект.БанковскийСчетГрузополучателя  = Неопределено;
	Объект.ГруппаФинансовогоУчета         = Неопределено;
	Объект.КартаЛояльности                = Неопределено;
	Объект.Автомобиль                     = Неопределено;
	Объект.ДоверенностьВыдана             = Неопределено;
	Объект.ДоверенностьАльтернативныйВидДокумента = Неопределено;
	Объект.ДоверенностьПримечание         = Неопределено;
	Объект.ДоверенностьДата               = Неопределено;
	Объект.ПредставительКонтрагента       = Неопределено;
	Объект.ДоверенностьСерия              = Неопределено;
	Объект.ДоверенностьНомер              = Неопределено;
	Объект.МестоСоставленияДокумента      = Неопределено;
	Объект.ПредставительОрганизации       = Неопределено;
	Объект.ПредставительОрганизацииДолжность = Неопределено;
	Объект.Подразделение                  = Неопределено;
	Объект.Водитель                       = Неопределено;
	Объект.ВариантОформленияДокументов    = Неопределено;
	Объект.СуммаДокумента                 = Неопределено;
	Объект.СкидкиРассчитаны               = Неопределено;
	Объект.ВернутьМногооборотнуюТару      = Неопределено;
	Объект.СрокВозвратаМногооборотнойТары = Неопределено;
	Объект.ТребуетсяЗалогЗаТару           = Неопределено;
	Объект.ПорядокРасчетов                = Неопределено;
	Объект.НеОтгружатьЧастями             = Истина;
	Объект.ДатаОтгрузки                   = ТекущаяДатаСеанса();
	Объект.НаправлениеДеятельности        = Неопределено;
	
	Объект.Менеджер       = Пользователи.ТекущийПользователь();
	Объект.Валюта         = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Объект.Валюта);
	Объект.Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);

	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Объект.Организация;
	СтруктураПараметров.БанковскийСчет			= Объект.БанковскийСчет;
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ИспользоватьНесколькоКасс = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.ФормаОплаты	= Объект.ФормаОплаты;
	СтруктураПараметров.Касса		= Объект.Касса;
	
	Объект.Касса	= ?(ИспользоватьНесколькоКасс,
						ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров),
						ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию());
	
	Объект.Склад          = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	Объект.Подразделение  = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.Менеджер, Объект.Подразделение);
	
	Партнер = Объект.Партнер;
	ОбновитьДосьеПартнера();
	
	ПорядокРасчетов = Неопределено;
	
	ЗаполнитьУсловияПродажПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСкладаСервер();
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма);
	
	ОбновитьОграничениеЗадолженности();
	
	Объект.МестоСоставленияДокумента         = ПродажиСервер.ПолучитьМестоСоставленияДокумента("РеализацияТоваровУслуг", Объект.Менеджер, Объект.Склад);
	Объект.ПредставительОрганизации          = Объект.Менеджер.ФизическоеЛицо;
	ПредставительОрганизацииДолжность = ДолжностиДляПечатиКлиентСервер.ДолжностьФизическогоЛица(Объект.ПредставительОрганизации, Объект.Организация, Объект.Дата);
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	
	Если Не ИспользоватьСоглашенияСКлиентами И ВидыЦен.Количество() > 0 Тогда
		ВидЦеныПоУмолчанию = ВидыЦен[0].Значение;
	КонецЕсли;
	
	ОбновитьЭлементыПартнера(ЭтаФорма);
	ЗаголовокКорзины = НСтр("ru='Корзина';uk='Кошик'");
	УстановитьВариантОформленияДокументовПродажиПоУмолчанию();
	ВариантОформленияДокументовПриИзмененииСервер();
	ОбновитьГиперссылкуИнформационнойНадписиФормируемыеДокументы();
	УстановитьТолькоПросмотрЭлементовФормы(Ложь);
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	ИнициализироватьДатуПлатежа();
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьПометкиКомандШапки(Элементы)
	
	Элементы.ПерейтиПартнер.Пометка = Ложь;
	Элементы.ПерейтиКорзина.Пометка = Ложь;
	Элементы.ПерейтиОтгрузкаОплата.Пометка = Ложь;
	Элементы.ПерейтиДокументы.Пометка = Ложь;
	Элементы.ПерейтиДоставка.Пометка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж));
	УстановитьВидимостьЭлементовСерий();
	ЗаполнитьСтатусыУказанияСерий();
	
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	Объект.МестоСоставленияДокумента = ПродажиСервер.ПолучитьМестоСоставленияДокумента("РеализацияТоваровУслуг", Объект.Менеджер, Объект.Склад);	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		
		ГрафикОплаты = Объект.ГрафикОплаты;
		УстановитьВидимостьОпераций();
		ЗаполнитьУсловияПродажПоУмолчанию();
		ОбновитьОграничениеЗадолженности();
		
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			
			ВалютаДокумента = Объект.Валюта;
			
			ПерезаполнитьЭтапыОплатыПриИзмененииСоглашения(ГрафикОплаты);
			ИнициализироватьДатуПлатежа();
		
			ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
			ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Элементы.Соглашение.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив()); 
		Иначе
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("ТолькоТиповые", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.СегментПартнеров", Справочники.СегментыПартнеров.ПустаяСсылка());
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Соглашение.ПараметрыВыбора = НовыеПараметры; 
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Объект.Партнер) ТОгда
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
			ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Объект.Партнер, Объект.КонтактноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьНалогообложениеНДСПоУмолчанию();
	
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма);
	
	ПриИзмененииСкладаСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	
	ОбновитьЭлементыПартнера(ЭтаФорма);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПартнер Тогда
		ОбновитьДосьеПартнера();
	Иначе
		ДосьеПартнераОбновлено = Ложь;
	КонецЕсли;
	
	
	Партнер = Объект.Партнер;
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		ДоставкаТоваров.КоммерческоеПредложениеПриИзмененииПартнера(Элементы,Объект);
	Иначе
		ЗаполнитьРеквизитыДоставки("Партнер");
	КонецЕсли;
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказатели(Форма)
	
	Форма.СуммаВсего = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		Форма.Объект.Товары.Итог("СуммаСНДС"), Форма.Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"));
	Форма.СуммаНДС = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		Форма.Объект.Товары.Итог("СуммаНДС"), Форма.Объект.Товары.Итог("СуммаНДСБезВозвратнойТары"));
	Форма.СуммаАвтоСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		Форма.Объект.Товары.Итог("СуммаАвтоматическойСкидки"), Форма.Объект.Товары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары"));
	Форма.СуммаРучнойСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		Форма.Объект.Товары.Итог("СуммаРучнойСкидки"), Форма.Объект.Товары.Итог("СуммаРучнойСкидкиБезВозвратнойТары"));
	Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	
	СуммаВсего = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		Форма.Объект.Товары.Итог("Сумма"), Форма.Объект.Товары.Итог("СуммаБезВозвратнойТары"));
	
	Если СуммаВсего > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
		
	Иначе
		
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
		
	КонецЕсли;
	
	Если Форма.НалогообложениеНДСПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
	Форма.СуммаАвансаДоОбеспечения = 0;
	Форма.СуммаПредоплатыДоОтгрузки = 0;
	Форма.СуммаКредитаПослеОтгрузки = 0;
	Форма.ПроцентАвансаДоОбеспечения = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения"));
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки"));
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки"));
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа
				+ ?(Форма.Объект.ТребуетсяЗалогЗаТару, ТекСтрока.СуммаЗалогаЗаТару, 0);
		КонецЕсли;
	КонецЦикла;
	
	СуммаВсегоПоЭтапам = Форма.СуммаАвансаДоОбеспечения + Форма.СуммаПредоплатыДоОтгрузки + Форма.СуммаКредитаПослеОтгрузки;
	Если СуммаВсегоПоЭтапам <> 0 Тогда
		Форма.ПроцентАвансаДоОбеспечения  = (Форма.СуммаАвансаДоОбеспечения/СуммаВсегоПоЭтапам)*100;
		Форма.ПроцентПредоплатыДоОтгрузки = (Форма.СуммаПредоплатыДоОтгрузки/СуммаВсегоПоЭтапам)*100;;
		Форма.ПроцентКредитаПослеОтгрузки = (Форма.СуммаКредитаПослеОтгрузки/СуммаВсегоПоЭтапам)*100;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер(ВызовПоКоманде = Истина)
	
	Если ВызовПоКоманде Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина);
		КонецЕсли;
		
		
		Если Объект.ТребуетсяЗалогЗаТару Тогда
			Объект.ТребуетсяЗалогЗаТару = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("СуммаРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентАвтоСкидки");
	МассивЭлементов.Добавить("СуммаАвтоСкидки");
	МассивЭлементов.Добавить("ПроцентСкидки");
	МассивЭлементов.Добавить("СуммаСкидки");
	МассивЭлементов.Добавить("СуммаПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("ПроцентПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("СуммаКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("ПроцентКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("НашДолгСуммаДолга");
	МассивЭлементов.Добавить("ДолгКлиентаСуммаДолга");
	МассивЭлементов.Добавить("СуммаДолга");
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаОтгрузки");
	МассивЭлементов.Добавить("ПроцентОтгрузки");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	МассивЭлементов.Добавить("ДекорацияОтступТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СуммаАвансаДоОбеспечения");
	МассивЭлементов.Добавить("ПроцентАвансаДоОбеспечения");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", Не (ЭтоПередачаНаКомиссию Или ИспользоватьУпрощеннуюСхемуОплаты));

	УстановитьВидимостьРеквизитовОплаты();
	УстановитьВидимостьНаправленияДеятельности();
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Элементы.НалогообложениеНДСПоУмолчанию, Объект.ХозяйственнаяОперация);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		ЗаполнитьСтатусыУказанияСерий();
		
		СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
		
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ЗаполнитьУсловияПродажПоCоглашению();
	ОбновитьОграничениеЗадолженности();
	УстановитьВидимостьОпераций();
	
	ВалютаДокумента = Объект.Валюта;
	УстановитьНалогообложениеНДСПоУмолчанию();
	ПриИзмененииХозяйственнойОперацииСервер(Ложь);
	ПриИзмененииСкладаСервер();
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма);
	
	ПерезаполнитьЭтапыОплатыПриИзмененииСоглашения(ГрафикОплаты);
	ИнициализироватьДатуПлатежа();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПартнер Тогда
		ОбновитьДосьеПартнера();
	Иначе
		ДосьеПартнераОбновлено = Ложь;
	КонецЕсли;
	
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ОбеспечиватьЗаказыОбособленно");
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыПартнера(Форма)
	
	ДоступностьКоманд = ЗначениеЗаполнено(Форма.Объект.Партнер);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("РазворачиватьГруппировкиДосье");
	МассивЭлементов.Добавить("ОткрытьКарточкуКлиента");
	МассивЭлементов.Добавить("СоздатьКонтактноеЛицо");
	МассивЭлементов.Добавить("СоздатьСделку");
	МассивЭлементов.Добавить("СоздатьДоговор");
	МассивЭлементов.Добавить("СоздатьЗадание");
	МассивЭлементов.Добавить("СоздатьПретензию");
	МассивЭлементов.Добавить("ЗапланироватьВзаимодействие");
	МассивЭлементов.Добавить("ЗапланироватьВстречу");
	МассивЭлементов.Добавить("НаписатьЭлектронноеПисьмо");
	МассивЭлементов.Добавить("Позвонить");
	МассивЭлементов.Добавить("СоздатьЗаметку");
	МассивЭлементов.Добавить("УстановитьНапоминание");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", ДоступностьКоманд);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДосьеПартнера()
	
	ДосьеПартнера.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		ОтчетДосьеПартнера = Отчеты.ДосьеПартнера.Создать();
		ОтчетДосьеПартнера.Контакты = Истина;
		ОтчетДосьеПартнера.ТекущаяАктивность = Истина;
		ОтчетДосьеПартнера.ДанныеКлиента = Истина;
		ОтчетДосьеПартнера.Классификация = Истина;
		ОтчетДосьеПартнера.ВариантКлассификацииЗадолженности = ВариантКлассификацииЗадолженности;
		ОтчетДосьеПартнера.СформироватьОтчет(ДосьеПартнера, Объект.Партнер);
		Если Не РазворачиватьГруппировкиДосье Тогда
			ДосьеПартнера.ПоказатьУровеньГруппировокСтрок(0);
		КонецЕсли;
		
	КонецЕсли;
	
	ДосьеПартнераОбновлено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
		
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма);
	УстановитьВидимостьРеквизитовОплаты();
	УстановитьВидимостьНаправленияДеятельности();
	
	ОбновитьОграничениеЗадолженности();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчет, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	УстановитьНалогообложениеНДСПоУмолчанию();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы = Истина)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			Истина,
			Истина);
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
		Ценообразование.РаспределитьСуммуПоЭтапамОплаты(
			Объект,
			Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"),
			?(Объект.ТребуетсяЗалогЗаТару,
				Объект.Товары.Итог("СуммаСНДС") - Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"), 0));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		Если ВидыЦен.Количество() > 0 Тогда
			ВидЦеныПоУмолчанию = ВидыЦен[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПоУмолчаниюПриИзмененииСервер(КэшированныеЗначения = Неопределено)	
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНалогообложениеНДСПоУмолчанию(ПриОткрытииФормы = Ложь)
	
	НалогообложениеНДСПоУмолчаниюИзменено = Ложь;
	ДоступностьНалогообложенияНДСПоУмолчанию = Истина;
	ЗаполнитьСтавкиНДС = Ложь;
	
	НовоеНалогообложениеНДСПоУмолчанию       = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(Объект.Организация, Объект.Контрагент, Объект.Соглашение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), Истина, Неопределено);
	ДоступностьНалогообложенияНДСПоУмолчанию = НДСОбщегоНазначенияСервер.ДоступностьНалогообложенияНДС(Объект.Организация, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Если НалогообложениеНДСПоУмолчанию <> НовоеНалогообложениеНДСПоУмолчанию Тогда
		ЗаполнитьСтавкиНДС = НДСОбщегоНазначенияСервер.НужноОбработатьНовоеНалогообложениеНДС(НалогообложениеНДСПоУмолчанию, НовоеНалогообложениеНДСПоУмолчанию);
		НалогообложениеНДСПоУмолчанию = НовоеНалогообложениеНДСПоУмолчанию;
		НалогообложениеНДСПоУмолчаниюИзменено = Истина;
	КонецЕсли;
	
	Если НалогообложениеНДСПоУмолчаниюИзменено И ЗаполнитьСтавкиНДС И НЕ ПриОткрытииФормы Тогда
		НалогообложениеНДСПоУмолчаниюПриИзмененииСервер();
	КонецЕсли; 
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДСПоУмолчанию", "Доступность", ДоступностьНалогообложенияНДСПоУмолчанию);
	
КонецПроцедуры // УстановитьНалогообложениеНДСПоУмолчанию


&НаСервере
Функция ПоместитьЭтапыОплатыВоВременноеХранилищеНаСервере(ОплатаРеализации)
	
	Если ОплатаРеализации Тогда
		
		ТаблицаЭтапов = Объект.ЭтапыГрафикаОплаты;
		ТаблицаЭтапов.Очистить();
		
		СуммаОплатыПоДокументу = Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
		СуммаЗалогаЗаТару = ?(Объект.ТребуетсяЗалогЗаТару, Объект.Товары.Итог("СуммаСНДС") - СуммаОплатыПоДокументу, 0);
		
		ДоляПредоплаты = 0;
		ДоляПредоплатыЗаТару = 0;
		
		Если СуммаОплатыПоДокументу > 0 Тогда
			ДоляПредоплаты = Объект.СуммаПредоплаты * 100 / СуммаОплатыПоДокументу;
		КонецЕсли;
		Если СуммаЗалогаЗаТару > 0 Тогда
			ДоляПредоплатыЗаТару = Объект.СуммаПредоплатыЗаТару * 100 / СуммаЗалогаЗаТару;
		КонецЕсли;
		
		СтрокаПредоплаты = ТаблицаЭтапов.Добавить();
		СтрокаПредоплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки;
		СтрокаПредоплаты.ДатаПлатежа          = ТекущаяДата();
		СтрокаПредоплаты.ПроцентПлатежа       = ДоляПредоплаты;
		СтрокаПредоплаты.СуммаПлатежа         = Объект.СуммаПредоплаты;
		СтрокаПредоплаты.ПроцентЗалогаЗаТару = ДоляПредоплатыЗаТару;
		СтрокаПредоплаты.СуммаЗалогаЗаТару    = Объект.СуммаПредоплатыЗаТару;
		
		СтрокаКредита = ТаблицаЭтапов.Добавить();
		СтрокаКредита.ВариантОплаты  = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
		СтрокаКредита.ДатаПлатежа          = Объект.ДатаПлатежа;
		СтрокаКредита.ПроцентПлатежа       = 100-ДоляПредоплаты;
		СтрокаКредита.СуммаПлатежа         = СуммаОплатыПоДокументу - Объект.СуммаПредоплаты;
		СтрокаКредита.ПроцентЗалогаЗаТару = 100-ДоляПредоплатыЗаТару;
		СтрокаКредита.СуммаЗалогаЗаТару    = СуммаЗалогаЗаТару - Объект.СуммаПредоплатыЗаТару;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище, ОплатаРеализации)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ОплатаРеализации Тогда
		
		Объект.СуммаПредоплаты = 0;
		Объект.СуммаПредоплатыЗаТару = 0;
		Объект.ДатаПлатежа = Неопределено;
		
		Для Каждого СтрокаЭтапа Из ЭтапыОплаты Цикл
			Если СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				Объект.СуммаПредоплаты = Объект.СуммаПредоплаты + СтрокаЭтапа.СуммаПлатежа;
				Объект.СуммаПредоплатыЗаТару = Объект.СуммаПредоплатыЗаТару + СтрокаЭтапа.СуммаЗалогаЗаТару;
			Иначе
				Объект.ДатаПлатежа = СтрокаЭтапа.ДатаПлатежа;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
			НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораЖелаемаяДатаОтгрузки();
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПараметровСервер(ЗначенияПараметров)
	
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияПараметров);
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	УправлениеСозданиемТранспортныхНакладных();
	Если НЕ ЗначениеЗаполнено(Объект.ВариантОформленияДокументов) Тогда
		УстановитьВариантОформленияДокументовПродажиПоУмолчанию();
	КонецЕсли;
	ВариантОформленияДокументовПриИзмененииСервер();
	Если ЭтоРеализация(Объект.ВариантОформленияДокументов)
		И ИспользоватьСтатусыРеализацийТоваровУслуг
		И Объект.СтатусРеализацииТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			Объект.Серии.Очистить();
			УстановитьВидимостьЭлементовСерий();
			ЗаполнитьСтатусыУказанияСерий();
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрЭлементовФормы(Установить = Истина)
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Партнер");
	
	МассивЭлементов.Добавить("НастройкаВШапке");
	МассивЭлементов.Добавить("ОткрытьПодбор");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Сделка");
	МассивЭлементов.Добавить("ВалютаДокументов");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("НалогообложениеНДСПоУмолчанию");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("Менеджер");
	МассивЭлементов.Добавить("КонтактноеЛицо");
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("ГруппаФинансовогоУчета");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДополнительнаяИнформация");
	МассивЭлементов.Добавить("Комментарий");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Товары");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	МассивЭлементов.Добавить("СтраницаДоставка");
	МассивЭлементов.Добавить("ГруппаДатаОтгрузкиНеОтгружатьЧастями");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Установить);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("СоздатьПартнера");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыУказатьСерии");
	МассивЭлементов.Добавить("ТоварыОтменитьУказаниеСерий");
	МассивЭлементов.Добавить("ЗаполнитьДатуОтгрузки");
	МассивЭлементов.Добавить("СостояниеОбеспечения");
	МассивЭлементов.Добавить("ЗаполнитьОбеспечение");
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУказатьСерии");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюОтменитьУказаниеСерий");
	МассивЭлементов.Добавить("Настройка");
	МассивЭлементов.Добавить("ДополнитьМногооборотнойТарой");
	МассивЭлементов.Добавить("ТоварыСоставНабора");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не Установить);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изменить", "Доступность", Установить);

	ТолькоПросмотрУстановлен = Установить;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации()
	
	ИспользуетсяДоставка = ИспользоватьУправлениеДоставкой
						   И (Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
							  ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу"));
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ПредставительКонтрагента",       Объект.ПредставительКонтрагента);
	СтруктураПараметров.Вставить("ДоверенностьСерия",              Объект.ДоверенностьСерия);
	СтруктураПараметров.Вставить("ДоверенностьАльтернативныйВидДокумента", Объект.ДоверенностьАльтернативныйВидДокумента);
	СтруктураПараметров.Вставить("ДоверенностьПримечание",         Объект.ДоверенностьПримечание);
	СтруктураПараметров.Вставить("ПолучилПоДругомуДокументу",      Объект.ПолучилПоДругомуДокументу);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("МестоСоставленияДокумента",      Объект.МестоСоставленияДокумента);
	СтруктураПараметров.Вставить("ПредставительОрганизации",       Объект.ПредставительОрганизации);
	СтруктураПараметров.Вставить("ПредставительОрганизацииДолжность",Объект.ПредставительОрганизацииДолжность);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                 ДокументыСформированы И Не Модифицированность);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "ПомощникПродаж");
	СтруктураПараметров.Вставить("ИспользуетсяДоставка",           ИспользуетсяДоставка);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Склад",                          Объект.Склад);
	СтруктураПараметров.Вставить("Менеджер",                       Объект.Менеджер);
		
	Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика")
	  ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда
		СтруктураПараметров.Вставить("ПеревозчикПартнер",              Объект.ПеревозчикПартнер);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗаказКлиента(Команда)
	
	АдресВоВременномХранилище = ПоместитьДополнительныеРеквизитыВоВременноеХранилище("ДополнительныеРеквизитыЗаказа");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("ТипДокумента",              "ДокументОбъект.ЗаказКлиента");
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	ОткрытьФорму(
		"Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты",
		ПараметрыФормы,
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыКоммерческоеПредложение(Команда)
	
	АдресВоВременномХранилище = ПоместитьДополнительныеРеквизитыВоВременноеХранилище("ДополнительныеРеквизитыКоммерческогоПредложения");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("ТипДокумента",              "ДокументОбъект.КоммерческоеПредложениеКлиенту");
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	ОткрытьФорму(
		"Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты",
		ПараметрыФормы,
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыРеализацияТоваровУслуг(Команда)
	
	АдресВоВременномХранилище = ПоместитьДополнительныеРеквизитыВоВременноеХранилище("ДополнительныеРеквизитыРеализации");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("ТипДокумента",              "ДокументОбъект.РеализацияТоваровУслуг");
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	ОткрытьФорму(
		"Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты",
		ПараметрыФормы,
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыАктВыполненныхРабот(Команда)
	
	АдресВоВременномХранилище = ПоместитьДополнительныеРеквизитыВоВременноеХранилище("ДополнительныеРеквизитыАкта");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("ТипДокумента",              "ДокументОбъект.АктВыполненныхРабот");
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	ОткрытьФорму(
		"Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты",
		ПараметрыФормы,
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДополнительныеРеквизитыВоВременноеХранилище(ДополнительныеРеквизиты)
	
	ТаблицаДопРеквизитов = Объект[ДополнительныеРеквизиты].Выгрузить();
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаДопРеквизитов, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, КоличествоПодобранныхПозиций)
	
	Надпись = НСтр("ru='Корзина (%КоличествоПодобранныхПозиций%)';uk='Кошик (%КоличествоПодобранныхПозиций%)'");
	НадписьВсегоПодобраноПозиций = СтрЗаменить(Надпись, "%КоличествоПодобранныхПозиций%", КоличествоПодобранныхПозиций);
	
КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииСервер()

	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = ОбеспечениеСервер.МаксимальноеЗначениеВКоллекции(Объект.Товары, "ДатаОтгрузки", '00010101');
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;

	УстановитьВидимостьЭлементовФормыДатОтгрузки();

КонецПроцедуры

&НаСервере
Процедура УправлениеПометкойКомандыТранспортнойНакладной()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|						И РеализацияТоваровУслуг.Проведен
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК КоличествоВалидныхДокументов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", Объект.Документы.Выгрузить().ВыгрузитьКолонку("Документ"));	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Если Результат.КоличествоВалидныхДокументов = 0 Тогда
			Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка = Ложь;
			СоздаватьТранспортнуюНакладную = Ложь;
			Элементы.ОформленныеДокументыТранспортнаяНакладная.Доступность = Ложь;
		Иначе
			Элементы.ОформленныеДокументыТранспортнаяНакладная.Доступность = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УправлениеСозданиемТранспортныхНакладных()
	
	ИспользоватьТТН = ПолучитьФункциональнуюОпцию("ИспользоватьТТН");
		
	Элементы.ОформленныеДокументыТранспортнаяНакладная.Видимость = ИспользоватьТТН;
		
	ТранспортныеНакладныеСозданы = Ложь;
	РеализацииСозданы 			 = Ложь;
	Для Каждого Документ Из Объект.Документы Цикл 
		Если ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
			ТранспортныеНакладныеСозданы = Истина;
		КонецЕсли;
		Если ТипЗнч(Документ.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			РеализацииСозданы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоздаватьТранспортнуюНакладную = ИспользоватьТТН И Объект.СоздаватьТранспортнуюНакладнуюПоУмолчанию;
	
	Если (Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз
			ИЛИ Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика)
		И РеализацииСозданы Тогда 
		Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка = СоздаватьТранспортнуюНакладную И ТранспортныеНакладныеСозданы;
		Элементы.ОформленныеДокументыТранспортнаяНакладная.Доступность = Истина;
		Если СоздаватьТранспортнуюНакладную И НЕ ТранспортныеНакладныеСозданы Тогда
			УправлениеТранспортнымиНакладными();
			Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка = Истина;
		КонецЕсли;
	Иначе
		Элементы.ОформленныеДокументыТранспортнаяНакладная.Пометка = Ложь;
		Элементы.ОформленныеДокументыТранспортнаяНакладная.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеТранспортнымиНакладными()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьТТН") Тогда
		Возврат;
	КонецЕсли;
	
	РеализацияПомеченаНаУдаление = Ложь;
	РеализацияПроведена = Ложь;
	СтрокаТранспортнаяНакладная = Неопределено;
	РеализацияОснование = Неопределено;
	Для Каждого СтрокаДокумент Из Объект.Документы Цикл 
		Если ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДокумент.Документ, "ПометкаУдаления, Проведен");
			РеализацияОснование = СтрокаДокумент.Документ;
			РеализацияПомеченаНаУдаление = СтруктураРезультат.ПометкаУдаления;
			РеализацияПроведена 		 = СтруктураРезультат.Проведен;
		ИначеЕсли ТипЗнч(СтрокаДокумент.Документ) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
			СтрокаТранспортнаяНакладная = СтрокаДокумент;	
		КонецЕсли;
	КонецЦикла;
		
	Если СтрокаТранспортнаяНакладная <> Неопределено 
		И (НЕ СоздаватьТранспортнуюНакладную ИЛИ НЕ РеализацияПроведена ИЛИ РеализацияПомеченаНаУдаление) Тогда 
		Объект.Документы.Удалить(СтрокаТранспортнаяНакладная);
	ИначеЕсли СтрокаТранспортнаяНакладная = Неопределено И РеализацияОснование <> Неопределено
		И СоздаватьТранспортнуюНакладную И РеализацияПроведена И НЕ РеализацияПомеченаНаУдаление Тогда
		ЗаписатьТранспортнуюНакладную(Новый Массив, РеализацияОснование, Ложь);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция НадписьЭтапыОплаты(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоЗаказ = (Объект.ВариантОформленияДокументов 
		= ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента"));
	
	Если Не ЭтоЗаказ И ОплатаУказываетсяВРеализации(Объект.ВариантОформленияДокументов, Объект.ПорядокРасчетов) Тогда
		
		Параметры = ЭтапыОплатыКлиентСервер.СтруктураПолученияНадписиЭтаповОплатыДляРеализациииТоваровУслуг();
		ЗаполнитьЗначенияСвойств(Параметры, Форма.Объект);
		
		ОбщаяСуммаПредоплаты = Объект.СуммаПредоплаты + Объект.СуммаПредоплатыЗаТару;
		
		Параметры.Вставить("СуммаВсего",      Форма.СуммаВсего);
		Параметры.Вставить("СуммаПредоплаты", ОбщаяСуммаПредоплаты);
		Параметры.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", Форма.ИспользоватьСтатусыРеализацийТоваровУслуг);
		Параметры.Вставить("ГрафикИсполненияВДоговоре", Форма.ГрафикИсполненияВДоговоре);
		
		Возврат ЭтапыОплатыКлиентСервер.НадписьЭтапыОплатыДляРеализациииТоваровУслуг(Параметры);
		
	Иначе
		
		Возврат ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(Форма, ЭтоЗаказ);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОплатаУказываетсяВРеализации(ВариантОформления, ПорядокРасчетов)
	
	Возврат
		ВариантОформления <> ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение")
		И (ВариантОформления = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг")
			Или ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокРеквизитовПечати()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") Тогда
		Элементы.РеквизитыПечатиТОРГ12.Заголовок = 
			НСтр("ru='Реквизиты печати ТОРГ12 / Акта на передачу прав';uk='Реквізити печатки ТОРГ12 / Акта на передачу прав'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеализациюПоЗаказу(Товары, МассивРеализаций, МассивНайденныхДокументов, ОснованиеОбъект, БезСменыСтатусаЗаказа, БезПроведения, Отказ)

	МассивСкладов = Новый Массив();
	РеализацияСГруппыСкладов = Ложь;
	
	Если СкладГруппа Тогда
		ВыборГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ВыборГруппы");
		Если ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных Тогда
			МассивСкладов.Добавить(Объект.Склад);
			РеализацияСГруппыСкладов = Истина;
		Иначе
			ВремТаблицаСкладов = Товары.Скопировать(, "Склад");
			ВремТаблицаСкладов.Свернуть("Склад");
			МассивСкладов = ВремТаблицаСкладов.ВыгрузитьКолонку("Склад");
		КонецЕсли;
	Иначе
		МассивСкладов.Добавить(Объект.Склад);
	КонецЕсли;
	
	ВключатьУслуги = Истина;
	
	Для Каждого ТекСклад Из МассивСкладов Цикл
		
		Если ЗначениеЗаполнено(ТекСклад) Или МассивСкладов.Количество() = 1 Тогда
			
			Если РеализацияСГруппыСкладов Тогда
				
				ТоварыПоСкладу = Товары;
				
			Иначе
				
				ТоварыПоСкладу = Товары.Скопировать(Новый Структура("Склад", ТекСклад));
				
				Если ВключатьУслуги И ЗначениеЗаполнено(ТекСклад) Тогда
					Услуги = Товары.Скопировать(Новый Структура("Склад", Справочники.Склады.ПустаяСсылка()));
					Для Каждого ТекСтрока Из Услуги Цикл
						НоваяСтрока = ТоварыПоСкладу.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					КонецЦикла;
					ВключатьУслуги = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ПродажаОбъект = ЗаписатьРеализациюПоЗаказу(МассивНайденныхДокументов, ОснованиеОбъект, ТоварыПоСкладу, ТекСклад, Отказ, БезПроведения, БезСменыСтатусаЗаказа);
			МассивРеализаций.Добавить(ПродажаОбъект);
			СоздаватьПКО = Истина;
			
			// Создание транспортной накладной по реализации
			Если Не БезПроведения И СоздаватьТранспортнуюНакладную И Не Отказ Тогда
				ЗаписатьТранспортнуюНакладную(МассивНайденныхДокументов, ПродажаОбъект, Отказ);
			КонецЕсли;
			
			
			// Создание счета на оплату по реализации / акту
			Если Объект.СоздаватьСчетНаОплату И НЕ Отказ
				И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
				И Объект.Товары.Итог("СуммаБезВозвратнойТары") > 0 Тогда
				
				ЭтапыГрафикаОплаты = Новый ТаблицаЗначений;
				ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");
				ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,2)));
				ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаЗалогаЗаТару", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
				
				СуммаЗалога = ?(Объект.ТребуетсяЗалогЗаТару, 
					Объект.Товары.Итог("СуммаСНДС") - Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары"), 0);
				ПроцентПредоплаты = 0;
				ПроцентПредоплатыЗаТару = 0;
				
				Если ПродажаОбъект.СуммаПредоплаты > 0 Тогда
					ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
					ЭтапОплаты.ДатаПлатежа = ПродажаОбъект.Дата;
					Если Объект.ТребуетсяЗалогЗаТару И СуммаЗалога > 0 Тогда
						ЭтапОплаты.СуммаЗалогаЗаТару = ПродажаОбъект.СуммаПредоплатыЗаТару;
						ПроцентПредоплатыЗаТару = ЭтапОплаты.СуммаЗалогаЗаТару / СуммаЗалога * 100;
						ЭтапОплаты.ПроцентЗалогаЗаТару = ПроцентПредоплатыЗаТару;
					КонецЕсли;
					Если ПродажаОбъект.СуммаВзаиморасчетов > СуммаЗалога Тогда
						ЭтапОплаты.СуммаПлатежа = ПродажаОбъект.СуммаПредоплаты - ЭтапОплаты.СуммаЗалогаЗаТару;
						ПроцентПредоплаты = ЭтапОплаты.СуммаПлатежа / (ПродажаОбъект.СуммаВзаиморасчетов - СуммаЗалога) * 100;
						ЭтапОплаты.ПроцентПлатежа = ПроцентПредоплаты;
					КонецЕсли;
				КонецЕсли;
				Если ПродажаОбъект.СуммаВзаиморасчетов > ПродажаОбъект.СуммаПредоплаты Тогда
					ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
					ЭтапОплаты.ДатаПлатежа = ПродажаОбъект.ДатаПлатежа;
					Если Объект.ТребуетсяЗалогЗаТару И СуммаЗалога > ПродажаОбъект.СуммаПредоплаты Тогда
						ЭтапОплаты.СуммаЗалогаЗаТару = СуммаЗалога - ПродажаОбъект.СуммаПредоплаты;
						ЭтапОплаты.ПроцентЗалогаЗаТару = 100 - ПроцентПредоплатыЗаТару;
					КонецЕсли;
					ЭтапОплаты.СуммаПлатежа = ПродажаОбъект.СуммаВзаиморасчетов - ПродажаОбъект.СуммаПредоплаты -
						СуммаЗалога + ПродажаОбъект.СуммаПредоплатыЗаТару;
					ЭтапОплаты.ПроцентПлатежа = 100 - ПроцентПредоплаты;
				КонецЕсли;
				
				ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ПродажаОбъект, ЭтапыГрафикаОплаты, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьРасходныеОрдера(Товары, МассивНайденныхДокументов, МассивРеализаций, ОснованиеОбъект, БезПроведения, Отказ)
	
	ТабСкладов = Товары.Скопировать(,"Склад");
	ТабСкладов.Свернуть("Склад");
	МассивСкладов = ТабСкладов.ВыгрузитьКолонку("Склад");
			
	РаспоряженияНаОтгрузку=Новый массив;
	
	Если ТипЗнч(ОснованиеОбъект)=Тип("Массив") тогда
		
		Для каждого Основание из ОснованиеОбъект цикл
			РаспоряженияНаОтгрузку=Основание.ссылка;
		КонецЦикла;
		
	Иначе		
		РаспоряженияНаОтгрузку.Добавить(ОснованиеОбъект.ссылка);		
	КонецЕсли;
		
	//Заполняем таблицу созданных документов для перезапонлнения
	СозданныеРасходныеОрдера = Новый ТаблицаЗначений;
	СозданныеРасходныеОрдера.Колонки.Добавить("ДокументОбъект",Новый ОписаниеТипов("ДокументОбъект.РасходныйОрдерНаТовары"));
	СозданныеРасходныеОрдера.Колонки.Добавить("Использован",Новый ОписаниеТипов("Булево"));
	
	СтрокаТаблицы = НайтиСозданныйДокументПоТипу(Тип("ДокументСсылка.РасходныйОрдерНаТовары"), МассивНайденныхДокументов);
	
	Пока СтрокаТаблицы <> Неопределено И ЗаблокироватьДокумент(СтрокаТаблицы.Документ) Цикл
		
		ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
		МассивНайденныхДокументов.Добавить(СтрокаТаблицы.Документ);
		
		НовСтр = СозданныеРасходныеОрдера.Добавить();
		НовСтр.ДокументОбъект = ДокументОбъект;
		НовСтр.Использован = Ложь;
		
		СтрокаТаблицы = НайтиСозданныйДокументПоТипу(Тип("ДокументСсылка.РасходныйОрдерНаТовары"), МассивНайденныхДокументов);
	КонецЦикла;
	
	Для каждого ТекСклад из МассивСкладов цикл
	
		ДокументОбъект = неопределено;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Получатель", Объект.Партнер);
		СтруктураПараметров.Вставить("Склад",ТекСклад);
		СтруктураПараметров.Вставить("РаспоряженияНаОтгрузку",РаспоряженияНаОтгрузку);
		СтруктураПараметров.Вставить("Помещение",Справочники.СкладскиеПомещения.ПустаяСсылка());
		СтруктураПараметров.Вставить("ЗонаОтгрузки",Справочники.СкладскиеЯчейки.ПустаяСсылка());
		СтруктураПараметров.Вставить("ЗаданиеНаПеревозку",Документы.ЗаданиеНаПеревозку.ПустаяСсылка());
		СтруктураПараметров.Вставить("ФоновоеЗадание",Ложь);
		СтруктураПараметров.Вставить("СозданныеРасходныеОрдера",СозданныеРасходныеОрдера);

		Результат = СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметров);
		
		Если Результат.ЕстьОшибка тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		ТаблицаСозданныхДокументов = Результат.ОформленныеОрдера;
		
		Для Каждого ТекСтрока Из ТаблицаСозданныхДокументов Цикл 
			
			ДокументПроведен = ТекСтрока.РасходныйОрдер.Проведен;
			
			СтрокиДокументов= Объект.Документы.НайтиСтроки(Новый структура("Документ",ТекСтрока.РасходныйОрдер));
			
			Если ДокументПроведен Тогда
				Состояние = 0;
			Иначе
				Состояние = 2;
			КонецЕсли;
		
			Если СтрокиДокументов.Количество() = 0 Тогда
				
				ДобавитьСтрокуВТаблицуСформированныхДокументов(
					ТекСтрока.РасходныйОрдер,
					0,
					Справочники.Валюты.ПустаяСсылка(),
					7, 
					Состояние);
					
				МассивНайденныхДокументов.Добавить(ТекСтрока.РасходныйОрдер);
				
			Иначе 
				
				ОбновитьСтрокуВТаблицуСформированныхДокументов(
					СтрокиДокументов[0],
					0,
					Справочники.Валюты.ПустаяСсылка(),
					7, 
					Состояние);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;	
	
	//убираем неиспользвоанные документы
	Для Каждого Стр из СозданныеРасходныеОрдера Цикл
		Если не Стр.Использован и не МассивНайденныхДокументов.найти(стр.ДокументОбъект.Ссылка)=неопределено тогда
			МассивНайденныхДокументов.Удалить(МассивНайденныхДокументов.найти(стр.ДокументОбъект.Ссылка));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()

	ЭтоКоммерческоеПредложение = Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	Элементы.ТоварыДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями И Не ЭтоКоммерческоеПредложение;
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями И Не ЭтоКоммерческоеПредложение;
	Элементы.ЗаполнитьДатуОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями И Не ЭтоКоммерческоеПредложение;
	Элементы.ДекорацияДатаОтгрузки.Видимость = Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента И Не ЭтоКоммерческоеПредложение;
	Элементы.ЖелаемаяДатаОтгрузки.Видимость = Не ЭтоКоммерческоеПредложение;
	Элементы.НеОтгружатьЧастями.Видимость = Не ЭтоКоммерческоеПредложение;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьДополнительныхРеквизитов()
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.АктВыполненныхРабот.ПустаяСсылка());
	Если НаборСвойств.Количество() > 0 И НаборСвойств[0].Набор.ДополнительныеРеквизиты.Количество() > 0 Тогда
		ЕстьДопРеквизитыАкта = Истина;
	КонецЕсли;
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.ЗаказКлиента.ПустаяСсылка());
	Если НаборСвойств.Количество() > 0 И НаборСвойств[0].Набор.ДополнительныеРеквизиты.Количество() > 0 Тогда
		ЕстьДопРеквизитыЗаказа = Истина;
	КонецЕсли;
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	Если НаборСвойств.Количество() > 0 И НаборСвойств[0].Набор.ДополнительныеРеквизиты.Количество() > 0 Тогда
		ЕстьДопРеквизитыРеализации = Истина;
	КонецЕсли;
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка());
	Если НаборСвойств.Количество() > 0 И НаборСвойств[0].Набор.ДополнительныеРеквизиты.Количество() > 0 Тогда
		ЕстьДопРеквизитыКомПредложения = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкрытьНедоступныеДополнительныеРеквизиты()
	
	ПроверитьДоступностьДополнительныхРеквизитов();
	
	МассивЭлементов = Новый Массив();
	
	Если НЕ ЕстьДопРеквизитыКомПредложения Тогда
		МассивЭлементов.Добавить("ДополнительныеРеквизитыКоммерческоеПредложение");
	КонецЕсли;
	
	Если НЕ ЕстьДопРеквизитыЗаказа Тогда
		МассивЭлементов.Добавить("ДополнительныеРеквизитыЗаказКлиента");
		МассивЭлементов.Добавить("ДополнительныеРеквизитыЗаказКлиента1");
	КонецЕсли;
	
	Если НЕ ЕстьДопРеквизитыРеализации Тогда
		МассивЭлементов.Добавить("ДополнительныеРеквизитыРеализацияТоваровУслуг");
		МассивЭлементов.Добавить("ДополнительныеРеквизитыРеализацияТоваровУслуг1");
	КонецЕсли;
		
	Если НЕ ЕстьДопРеквизитыАкта Тогда
		МассивЭлементов.Добавить("ДополнительныеРеквизитыАктВыполненныхРабот");
		МассивЭлементов.Добавить("ДополнительныеРеквизитыАктВыполненныхРабот1");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		Ложь);
	КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьПечатиПКО()
	
	ЕстьПравоПечатиПКО = ПравоДоступа("Добавление",Метаданные.Документы.ПриходныйКассовыйОрдер);
	
	Если НЕ ЕстьПравоПечатиПКО Тогда
		Если Объект.СоздаватьПриходныйКассовыйОрдер Тогда
			Объект.СоздаватьПриходныйКассовыйОрдер = Ложь;
		КонецЕсли;
		Если Объект.ПечататьПриходныйКассовыйОрдер Тогда
			Объект.ПечататьПриходныйКассовыйОрдер = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов() Экспорт
	
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(ЭтаФорма);
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеДокумента(ДокументИсточник)
	
	НайденныеДокументы = Объект.Документы.НайтиСтроки(Новый Структура("Документ", ДокументИсточник));
	
	Если НайденныеДокументы.Количество() = 1 Тогда
		
		ДокументПроведен = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ДокументИсточник, "Проведен");
		
		Если ДокументПроведен Тогда
			НайденныеДокументы[0].Состояние = 0;
		Иначе
			НайденныеДокументы[0].Состояние = 2;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	Если Не Объект.ВернутьМногооборотнуюТару Тогда
		Объект.ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры


&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
		Колонки.Добавить("ПроцентАвтоматическойСкидки");
		Колонки.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	ПриИзмененииКорзиныНаСервере();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры) Экспорт
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	// Склад будет вставлен позже
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Неопределено);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьВариантОбеспечения");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьХарактеристикуПоВладельцу", Неопределено);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", Неопределено);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Неопределено);
	
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
		ЗаполнитьОбособленно, Объект.СтатусЗаказаКлиента, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Товары", ПараметрыДанных);
	
	ПриИзмененииКорзиныНаСервере();
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПерейтиДоставка(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиДоставка.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоставка;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	Если Не Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
		ЗаполнитьРеквизитыДоставки(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийНаСервере

&НаСервере
Процедура ПриИзмененииКорзиныНаСервере()
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивЭлементов,
		"Доступность",
		Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДСПоУмолчанию);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийИзмененныеСтроки.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));

	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(
		ЗаполнитьОбособленно, Объект.СтатусЗаказаКлиента, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействийДобавленныеСтроки.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);

	СтруктураДействийДобавленныеСтроки.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	ИменаПолей = ИменяПолейПодбораМногооборотнойТары(Объект.ВариантОформленияДокументов, Истина);
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		ИменаПолей,
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.ВариантОформления)
			И ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекСтрока, Объект.ВариантОформленияДокументов);
		КонецЕсли;
	КонецЦикла;
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменяПолейПодбораМногооборотнойТары(ВариантОформленияДокументов, ИсключитьКоличество = Ложь)
	
	Если ИсключитьКоличество Тогда
		
		Если ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
			ИменаПолей = "Номенклатура,Характеристика";
		ИначеЕсли ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг") Тогда
			ИменаПолей = "Номенклатура,Характеристика,Склад";
		Иначе
			ИменаПолей = "Номенклатура,Характеристика,Склад,ДатаОтгрузки";
		КонецЕсли;
		
	Иначе
		
		Если ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
			ИменаПолей = "Номенклатура,Характеристика,Количество";
		ИначеЕсли ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг") Тогда
			ИменаПолей = "Номенклатура,Характеристика,Количество,Склад";
		Иначе
			ИменаПолей = "Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИменаПолей;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	
	Если Элементы.Найти("ХозяйственнаяОперация") <> Неопределено  Тогда
		
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(
				Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьУправленческуюОрганизацию") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(
				Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЖелаемаяДатаОтгрузки()
	МаксДатаАванса = ПродажиСервер.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
	ЖелаемаяДатаОтгрузкиСписокВыбора = Элементы.ЖелаемаяДатаОтгрузки.СписокВыбора;
	
	Если ЗначениеЗаполнено(МаксДатаАванса) Тогда
		
		ПредставлениеМаксДатаАванса = "%МаксДатаАванса%";
		ПредставлениеМаксДатаАванса = СтрЗаменить(ПредставлениеМаксДатаАванса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
		ЖелаемаяДатаОтгрузкиСписокВыбора.Очистить();
		ЖелаемаяДатаОтгрузкиСписокВыбора.Добавить(МаксДатаАванса, ПредставлениеМаксДатаАванса);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДатуПлатежа()
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПлатежа)
		И Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
			Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		
			Объект.ДатаПлатежа =  Неопределено;
		
		Иначе
			
			ЭтапыОплатыСервер.ЗаполнитьДатуПлатежаПоУмолчанию(Объект);
			
			Если НЕ ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
				ДатаПлатежа = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ДатаПлатежа = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура ЗаполнитьОбеспечение(Команда)

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.Поля.Удалить("Подразделение");

	Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.Товары, Элементы.Товары.ВыделенныеСтроки, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда

		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа("ПомощникПродаж");
		ПараметрыФормы.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
			
		ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();	
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспечения()

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра",
		Объект.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован,
		Объект.Склад, РегистрыНакопления.ЗаказыКлиентов);

	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		Элементы.Товары.ТекущаяСтрока,
		Объект,
		Объект.Товары,
		ПутиКДанным,
		ПараметрыЗаполнения);

	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
		ПараметрыПроверки.Поля.Удалить("Подразделение");

	Если Не ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(); // получен, в том числе, параметр "АдресТаблицыПодобраноРанее".
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru='Товары';uk='Товари'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыФормы.Вставить("Склад",                         Объект.Склад);
	Иначе
		ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",          Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);
	
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.Заказ);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	
	Возврат ПараметрыФормы
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспечения(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
	ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопроса");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()

	РеквизитыЗаказа = Новый Структура("ЖелаемаяДатаОтгрузки, Ссылка, НеОтгружатьЧастями, Статус, Дата, Партнер, Менеджер");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);
	РеквизитыЗаказа.Статус = Объект.СтатусЗаказаКлиента; //сутки

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.Товары, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ИмяМенеджераРегистра",
		Объект.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован, "ЗаказыКлиентов");

	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	ПараметрыФормы.НастройкаЭлементовФормы.Заголовок = НСтр("ru='Состояние обеспечения корзины (Помощник продаж)';uk='Стан забезпечення кошика (Помічник продажів)'");
	ПараметрыФормы.НастройкаЭлементовФормы.ТекстКомандыПеренестиВДокумент = НСтр("ru='Перенести в корзину';uk='Перенести в кошик'");
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.Товары.ТекущаяСтрока);
	КонецЦикла;
	ТекстОповещения = Обработки.ПомощникПродаж.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокаТовары", ВыбранноеЗначение, ПараметрыУказанияСерий, ЗависимыеРеквизиты());

	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ПереченьВариантов)

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра",
		Объект.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован,
		Объект.Склад, РегистрыНакопления.ЗаказыКлиентов);

	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.Товары.ВыделенныеСтроки,
		Объект,
		Объект.Товары,
		ПутиКДанным,
		ПереченьВариантов,
		ПараметрыЗаполнения);

	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура("Ошибки", ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
			Таблица, "Товары", НСтр("ru='Товары';uk='Товари'")));
	КонецЕсли;

	//Перенос результатов в документ.
	ТекстОповещения = Обработки.ПомощникПродаж.ЗаполнитьВариантОбеспечения(Объект, ЭтаФорма, "СтрокиТовары", Таблица,
			ПараметрыУказанияСерий, ЗависимыеРеквизиты());

	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());

	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение)

	Если ВыбранноеЗначение.ОтгружатьЧастями Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	ТекстОповещения    = Обработки.ПомощникПродаж.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "Заказ", ТаблицаОбеспечения, ПараметрыУказанияСерий, ЗависимыеРеквизиты());

	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандОбеспечения()

	Элементы.ЗаполнитьДатуОтгрузки.Видимость =
		Не Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;

	КомандыОбеспеченияДоступны = Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
		Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг;
	Элементы.ЗаполнитьОбеспечение.Видимость = КомандыОбеспеченияДоступны;
	Элементы.СостояниеОбеспечения.Видимость = КомандыОбеспеченияДоступны;

КонецПроцедуры

&НаСервере
Процедура НоваяПродажаСервер()
	ИнициализироватьПомощникПродаж();
	ПриИзмененииКорзиныНаСервере();
	ПриИзмененииСкладаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеПослеПолучитьВыделение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеДокументы = Результат;
    
    Если ВыделенныеДокументы = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ОтветНаВопрос = Неопределено;
    
    
    ПоказатьВопрос(Новый ОписаниеОповещения("ПометитьНаУдалениеЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеДокументы", ВыделенныеДокументы)), НСтр("ru='Пометить на удаление выделенные документы?';uk='Позначити на вилучення виділені документи?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

#КонецОбласти

ВыполняетсяЗакрытие = Ложь;
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбновлениеИнформационнойБазы



Процедура КорректироватьДвижения_ДанныеДляОбновления(Параметры) Экспорт
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.МоментВремени КАК МоментВремени
	|
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.РасчетСебестоимостиТоваров)
	|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|	И ДанныеРегистра.КорАналитикаУчетаНоменклатуры = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.МоментВремени КАК МоментВремени
	|
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.РасчетСебестоимостиТоваров)
	|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И ДанныеРегистра.Количество > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.МоментВремени КАК МоментВремени
	|
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями)
	|";
	
	ДанныеКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеКОбработке, ДополнительныеПараметрыОтметки);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
// В документах РасчетСебестоимостиТоваров удаляет движения регистра с хоз. операцией СборкаТоваров и пустой КорАналитикойУчетаНоменклатуры
// В документах РасчетСебестоимостиТоваров удаляет количество в движениях регистра с хоз. операцией ВозвратОтКомиссионера
// В документах ПередачаТоваровМеждуОрганизациями по хоз.операции "ПередачаНаКомиссиюВДругуюОрагнизацию" переформировывает движения
Процедура КорректироватьДвижения(Параметры) Экспорт
	
	// Корректировка движений по документам ПередачаТоваровМеждуОрганизациями
	ПередачаТоваровМеждуОрганизациямиОК = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
        "Документ.ПередачаТоваровМеждуОрганизациями",
		ПолноеИмяРегистра(),
		Параметры.Очередь
    );
	
	// Корректировка движений по документам РасчетСебестоимостиТоваров
	Запрос = Новый Запрос(ТекстЗапросаДвиженийДокументаРасчетаСебестоимости());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
        Параметры.Очередь,
		Неопределено,
		ПолноеИмяРегистра(),
		Запрос.МенеджерВременныхТаблиц
    );
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
    КонецЕсли;
    
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		Регистратор = ВыборкаПоДокументу.Регистратор;
		Если ТипЗнч(Регистратор) <> Тип("ДокументСсылка.РасчетСебестоимостиТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
            
			БлокировкаДокумента = Блокировка.Добавить("Документ.РасчетСебестоимостиТоваров");
			БлокировкаДокумента.УстановитьЗначение("Ссылка", Регистратор);
			
			БлокировкаРегистра = Блокировка.Добавить("РегистрНакопления.ДвиженияНоменклатураНоменклатура.НаборЗаписей");
			БлокировкаРегистра.УстановитьЗначение("Регистратор", Регистратор);
			
			Блокировка.Заблокировать();
		
			// Записать правильные движения
			Набор = РегистрыНакопления.ДвиженияНоменклатураНоменклатура.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Выборка = ВыборкаПоДокументу.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
            КонецЦикла;
            
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать %Документ% по причине: %Причина%';uk='Не вдалося обробити %Документ% з причини: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
                ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
                УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				Регистратор,
				ТекстСообщения
            );
            
		КонецПопытки;
	
	КонецЦикла;
	
	РасчетСебестоимостиОК = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяРегистра()
    );
    
	Параметры.ОбработкаЗавершена = ПередачаТоваровМеждуОрганизациямиОК И РасчетСебестоимостиОК;
	
КонецПроцедуры

Функция ТекстЗапросаДвиженийДокументаРасчетаСебестоимости()
	
	Возврат
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.НомерСтроки КАК НомерСтроки,
	|	ДанныеРегистра.Активность,
	|
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.Склад,
	|	ДанныеРегистра.ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов,
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорСклад,
	|	ДанныеРегистра.КорТипЗапасов,
	|	ДанныеРегистра.КорВидЗапасов,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|		ТОГДА 0
	|		ИНАЧЕ ДанныеРегистра.Количество 
	|	КОНЕЦ КАК Количество,
	|	ДанныеРегистра.КорКоличество,
	|	ДанныеРегистра.Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС,
	|	ДанныеРегистра.СтоимостьРегл,
	|
	|	ДанныеРегистра.ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.КорИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ДокументДвижения,
	|	ДанныеРегистра.КорОрганизация
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДляОбработкиДвиженияНоменклатураНоменклатура КАК Фильтр
	|			ПО ДанныеРегистра.Регистратор = Фильтр.Регистратор
	|ГДЕ
	|	НЕ (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|		И ДанныеРегистра.КорАналитикаУчетаНоменклатуры = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.НомерСтроки
	|
	|ИТОГИ ПО
	|	ДанныеРегистра.Регистратор";
	
КонецФункции


Функция ПолноеИмяРегистра()
	Возврат "РегистрНакопления.ДвиженияНоменклатураНоменклатура";
КонецФункции


#КонецОбласти

#КонецЕсли
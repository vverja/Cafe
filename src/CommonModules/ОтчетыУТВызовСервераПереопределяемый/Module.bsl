////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Форма отчета УТ (вызов сервера, переопределяемый)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается из модуля ОтчетыУТКлиентПереопределяемый"
//
Функция КомпоновщикНастроекВариантаОтчета(СвойстваВариантаОтчета) Экспорт
	
	СКДОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СвойстваВариантаОтчета.КлючОбъекта).ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ИскомыйВариантОтчета = СКДОтчета.ВариантыНастроек.Найти(СвойстваВариантаОтчета.КлючВарианта);
	
	Если ИскомыйВариантОтчета <> Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(ИскомыйВариантОтчета.Настройки);
		Возврат КомпоновщикНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Вызывается для отчета "ТоварыСИстекающимиСертификатами"
//
Функция СформироватьДанныеРасшифровки(Расшифровка, АдресРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);			
	СтруктураРасшифровки = Новый Структура;	
	СтруктураРасшифровки.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураРасшифровки.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураРасшифровки.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	ПолучитьЗначенияПолей(СтруктураРасшифровки, ДанныеРасшифровки.Элементы, Расшифровка);
	
	ВыбранноеПоле = ДанныеРасшифровки.Элементы[Расшифровка]; 
	Если ТипЗнч(ВыбранноеПоле) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") тогда
		Для Каждого Поле из ВыбранноеПоле.ПолучитьПоля() Цикл
			Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				СтруктураРасшифровки.Вставить(СтрЗаменить(Поле.Поле,".",""), Поле.Значение);
				Если Поле.Поле = "Серия" Тогда
					ПолучитьЗначениеПоля(СтруктураРасшифровки, ДанныеРасшифровки.Элементы[Расшифровка-1]);
					СтруктураРасшифровки.Вставить("ДетализироватьПоХарактеристикамИСериям", Истина);
				ИначеЕсли Поле.Поле = "Характеристика" Тогда
					ПолучитьЗначениеПоля(СтруктураРасшифровки, ДанныеРасшифровки.Элементы[Расшифровка+1]);
					СтруктураРасшифровки.Вставить("ДетализироватьПоХарактеристикамИСериям", Истина);
				КонецЕсли;					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРасшифровки.Номенклатура) Тогда  
		СтруктураРасшифровки.Вставить("ВидНоменклатуры",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРасшифровки.Номенклатура,"ВидНоменклатуры"));
	КонецЕсли;
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

// Получает значения всех вышестоящих группировок
//
// Параметры:
//		СписокПолей - Структура - Ключ имя поля, значение - значение группировочного поля отчета - параметр в который будет помещен список найденных значений
//		КоллекцияЭлементов - ЭлементыРасшифровкиКомпоновкиДанных - коллекция элементов расшифровки отчета (ДанныеРасшифровки.Элементы)
//		Идентификатор - ИдентификаторРасшифровкиКомпоновкиДанных - идентификатор расшифровываемого поля
//
Процедура ПолучитьЗначенияПолей(СписокПолей, КоллекцияЭлементов, Идентификатор) Экспорт
	
	Для Каждого Родитель Из  КоллекцияЭлементов[Идентификатор].ПолучитьРодителей() Цикл
		ПолучитьЗначенияПолей(СписокПолей, КоллекцияЭлементов, Родитель.Идентификатор);
		ПолучитьЗначениеПоля(СписокПолей, Родитель);
	КонецЦикла;
	
КонецПроцедуры

// Получает значения полей текущего элемента расшифровки
//
// Параметры:
//		СписокПолей - Структура - Ключ имя поля, значение - значение группировочного поля отчета - параметр в который будет помещен список найденных значений
//		ВыбранноеПоле - ЭлементРасшифровкиКомпоновкиДанныхПоля - элемент расшифровки поля которого необходимо получить
//
Процедура ПолучитьЗначениеПоля(СписокПолей, ВыбранноеПоле) Экспорт
	
	Если ТипЗнч(ВыбранноеПоле) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") тогда
		Для Каждого Поле из ВыбранноеПоле.ПолучитьПоля() Цикл
			Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				СписокПолей.Вставить(СтрЗаменить(Поле.Поле,".",""), Поле.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение функциональной опции для настройки отчета
//
Функция ЗначениеФункциональнойОпции(Имя) Экспорт
	Возврат ПолучитьФункциональнуюОпцию(Имя);	
КонецФункции

// Проверяет статус указанного фонового задания.
Функция ПроверитьФоновоеЗадание(Знач КлючЗадания) Экспорт
	Результат = Новый Структура("ОтмененоИлиНеНайдено, УспешноВыполнено, ЕщеВыполняется, ВыполненоСОшибками, ТекстОшибки", Ложь, Ложь, Ложь, Ложь, "");
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() = 0 Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.ЕщеВыполняется = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.УспешноВыполнено = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ВыполненоСОшибками = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(АктивныеЗадания[0].ИнформацияОбОшибке);
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
	
// Возвращает границу, на которую актуализированы партии товаров.
Функция ГраницаРасчетаПартий(ГраницаАнализа, НомерЗадания) Экспорт
	ПараметрыРасчета = Новый Структура;
	ПартионныйУчет.РассчитатьВсеПоГраницу(ПараметрыРасчета, ГраницаАнализа, НомерЗадания);
	Возврат ПараметрыРасчета.ГраницаРасчета;
КонецФункции

// Возвращает границу, на которую актуализированы взаиморасчеты.
Функция НачалоРаспределенияВзаиморасчетов(КонецРасчета, АналитикиКРасчету, ИмяРасчета, НомерЗадания) Экспорт
	Возврат РаспределениеВзаиморасчетов.НачалоРасчетов(КонецРасчета, АналитикиКРасчету, ИмяРасчета, НомерЗадания);
КонецФункции

// Возвращает массив хозяйственных операций, которые используются в аналитических регистрах
//
// Параметры:
//  ИмяРегистра  - Строка - имя регистра как оно задано в метаданных
//
// Возвращаемое значение:
//   Массив   - массив соответствующих хозяйственных операций
//
Функция ХозяйственныеОперацииАналитическихРегистров(ИмяРегистра) Экспорт
	Возврат Справочники.НастройкиХозяйственныхОпераций.ХозяйственныеОперацииАналитическихРегистров(ИмяРегистра);
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ЗаполнитьЗначенияПоУмолчанию();
	
	СтруктураУстанавливаемыхПараметров = Новый Структура;
	СтруктураУстанавливаемыхПараметров.Вставить("Склад",Объект.Склад);
	СтруктураУстанавливаемыхПараметров.Вставить("Помещение",Объект.Помещение);
	
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураУстанавливаемыхПараметров);
	
	Объект.ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Хранение;
	
	ВремМассив = Новый Массив;
	ВремМассив.Добавить("Секции");
	ВремМассив.Добавить("Линии");
	ВремМассив.Добавить("Стеллажи");
	ВремМассив.Добавить("Ярусы");
	ВремМассив.Добавить("Позиции");
	МассивЧастейАдреса = Новый ФиксированныйМассив(ВремМассив);
	
	ВремМассив = Новый Массив;
	ВремМассив.Добавить("ДиапазонЧиселОт");
	ВремМассив.Добавить("ДиапазонЧиселДо");
	ВремМассив.Добавить("ЛидирующиеНули");
	ВремМассив.Добавить("КоличествоЦифр");
	МассивИменЧисловой = Новый ФиксированныйМассив(ВремМассив);
	
	ВремМассив = Новый Массив;
	ВремМассив.Добавить("СоздаватьГруппы");
	ВремМассив.Добавить("Разделитель");
	ВремМассив.Добавить("ТипНомера");
	ВремМассив.Добавить("Количество");
	МассивИменОбщий = Новый ФиксированныйМассив(ВремМассив);
	
	ВремМассив = Новый Массив;
	ВремМассив.Добавить("ДиапазонБуквОт");
	ВремМассив.Добавить("ДиапазонБуквДо");
	МассивИменСимвольный = Новый ФиксированныйМассив(ВремМассив);
	
	СтрокаРазделителей = " .-_";

	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Объект.МаксимальныйКоэффициентНаполненностиПоВесу = 100;
	Объект.МаксимальныйКоэффициентНаполненностиПоОбъему = 100;
	Объект.УровеньДоступности = 1;
	
	Объект.ОбновлятьСуществующие = Ложь;
	
	Для каждого СтрМас из МассивЧастейАдреса Цикл
		
		Объект["НаборБукв"+СтрМас] = "РУС";
		Объект["ТипНомера"+СтрМас] = "Числовой";
		Объект["Количество"+СтрМас] = 1;
		Если СтрМас <> "Позиции" Тогда
			Объект["Разделитель"+СтрМас] = "-";
		КонецЕсли;
		
		Объект["ДиапазонЧиселОт"+СтрМас]	= 1;
		Объект["ДиапазонЧиселДо"+СтрМас]	= 1;
		Объект["КоличествоЦифр"+СтрМас] 	= 1;
		
	КонецЦикла;
	
	Для Каждого СтрМас из МассивЧастейАдреса Цикл
		УстановитьВидимостьПоИспользованию(СтрМас);
		УстановитьДоступностьПоЛидирующимНулям(СтрМас);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПомещениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	
	СкладПомещениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПриИзменении(Элемент)
	ИмяУровня = Элемент.Имя;
	
	Если Элемент.Имя <> "Позиции" Тогда
		Объект["СоздаватьГруппы"+ИмяУровня] = Объект[ИмяУровня];
	КонецЕсли;
	
	Если Не Объект[ИмяУровня] Тогда
		Объект["Количество"+ИмяУровня] = 1;
	Иначе
		РасчитатьКоличествоЭлементовУровня(ИмяУровня);
	КонецЕсли;
	УстановитьВидимостьПоИспользованию(ИмяУровня);
	ПостроитьПример();
	РасчитатьКоличествоЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РазделительПриИзменении(Элемент)
	ПостроитьПример();
КонецПроцедуры

&НаКлиенте
Процедура ТипНомераПриИзменении(Элемент)
	ИмяУровня = СтрЗаменить(Элемент.Имя,"ТипНомера",""); 
	
	Если СтрНайти(ВРЕГ(Объект["ТипНомера"+ИмяУровня]),"РУС") <> 0 Тогда
		Объект["НаборБукв"+ИмяУровня] = "РУС";
	ИначеЕсли СтрНайти(ВРЕГ(Объект["ТипНомера"+ИмяУровня]),"ЛАТ") <> 0 Тогда
		Объект["НаборБукв"+ИмяУровня] = "ЛАТ";
	КонецЕсли;
	
	ПостоитьШаблонПоНомеруОт(ИмяУровня);
	ПроверитьНомерДоПоНомеруОт(ИмяУровня);	
	
	УстановитьВидимостьПоИспользованию(ИмяУровня);
	ПостроитьПример();
	РасчитатьКоличествоЭлементовУровня(ИмяУровня);
	РасчитатьКоличествоЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонБуквОтПриИзменении(Элемент)
	
	ИмяУровня = СтрЗаменить(Элемент.Имя,"ДиапазонБуквОт","");
	
	ПостоитьШаблонПоНомеруОт(ИмяУровня);
	
	ПроверитьНомерДоПоНомеруОт(ИмяУровня);	
	
	ПостроитьПример();
	РасчитатьКоличествоЭлементовУровня(ИмяУровня);
	РасчитатьКоличествоЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонБуквДоПриИзменении(Элемент)
	ИмяУровня = СтрЗаменить(Элемент.Имя,"ДиапазонБуквДо","");
	
	ПроверитьНомерДоПоНомеруОт(ИмяУровня);	
	
	ПостроитьПример();
	РасчитатьКоличествоЭлементовУровня(ИмяУровня);
	РасчитатьКоличествоЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонЧиселОтПриИзменении(Элемент)
	ИмяУровня = СтрЗаменить(Элемент.Имя,"ДиапазонЧиселОт","");
	
	Если Объект["ДиапазонЧиселОт"+ИмяУровня] > Объект["ДиапазонЧиселДо"+ИмяУровня] Тогда
		Объект["ДиапазонЧиселДо"+ИмяУровня] = Объект["ДиапазонЧиселОт"+ИмяУровня];
	КонецЕсли;
	
	ПроверитьКоличествоЦифр(ИмяУровня);
	ПостроитьПример();
	РасчитатьКоличествоЭлементовУровня(ИмяУровня);
	РасчитатьКоличествоЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонЧиселДоПриИзменении(Элемент)
	ИмяУровня = СтрЗаменить(Элемент.Имя,"ДиапазонЧиселДо","");
	
	Если Объект["ДиапазонЧиселОт"+ИмяУровня] > Объект["ДиапазонЧиселДо"+ИмяУровня] Тогда
		Объект["ДиапазонЧиселДо"+ИмяУровня] = Объект["ДиапазонЧиселОт"+ИмяУровня];
	КонецЕсли;
	
	ПроверитьКоличествоЦифр(ИмяУровня);
	
	РасчитатьКоличествоЭлементовУровня(ИмяУровня);
	РасчитатьКоличествоЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЛидирующиеНулиПриИзменении(Элемент)
	ИмяУровня = СтрЗаменить(Элемент.Имя,"ЛидирующиеНули","");
		
	ПроверитьКоличествоЦифр(ИмяУровня);	
	
	УстановитьДоступностьПоЛидирующимНулям(ИмяУровня);
	ПостроитьПример();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЦифрПриИзменении(Элемент)
	ИмяУровня = СтрЗаменить(Элемент.Имя,"КоличествоЦифр","");
	ПроверитьКоличествоЦифр(ИмяУровня);
	ПостроитьПример();
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонБуквОтРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяУровня = СтрЗаменить(Элемент.Имя,"ДиапазонБуквОт",""); 
	
	ТекНомер = Объект["ДиапазонБуквОт"+ИмяУровня];
	
	Если ТекНомер <> "" Тогда
	
		Если Направление > 0 Тогда
			Номер = СледующийНомерУровня(ТекНомер,ИмяУровня,Ложь);
		Иначе
			Номер = ПредыдущийНомерУровня(ТекНомер,ИмяУровня,Ложь);
		КонецЕсли;
		
		Если Номер <> ТекНомер Тогда
			Объект["ДиапазонБуквОт"+ИмяУровня] = Номер;
			ПроверитьНомерДоПоНомеруОт(ИмяУровня);
			РасчитатьКоличествоЭлементовУровня(ИмяУровня);
			РасчитатьКоличествоЭлементов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиапазонБуквДоСекцииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ИмяУровня = СтрЗаменить(Элемент.Имя,"ДиапазонБуквДо",""); 
	
	ТекНомер = Объект["ДиапазонБуквДо"+ИмяУровня];
	
	Если ТекНомер <> "" Тогда
	
		Если Направление > 0 Тогда
			Номер = СледующийНомерУровня(ТекНомер,ИмяУровня,Ложь);
		Иначе
			Номер = ПредыдущийНомерУровня(ТекНомер,ИмяУровня,Ложь);
		КонецЕсли;
		
		Если Номер <> ТекНомер Тогда
			Объект["ДиапазонБуквДо"+ИмяУровня] = Номер;
			ПроверитьНомерДоПоНомеруОт(ИмяУровня);
			РасчитатьКоличествоЭлементовУровня(ИмяУровня);
			РасчитатьКоличествоЭлементов();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	ОчиститьСообщения();
	
	ТабДок = СгенерироватьСтруктуруСклада(Истина);
	Если ТабДок <> Неопределено Тогда
		ТабДок.Показать(НСтр("ru='Предварительный просмотр структуры склада';uk='Попередній перегляд структури складу'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСтруктуру(Команда)
	ОчиститьСообщения();
	
	Если Объект.ОбновлятьСуществующие Тогда
		ТекстВопроса = НСтр("ru='Создать (обновить) элементы справочника ""Складские ячейки""?';uk='Створити (оновити) елементи довідника ""Складські комірки""?'");
	Иначе
		ТекстВопроса = НСтр("ru='Создать элементы справочника ""Складские ячейки""?';uk='Створити елементи довідника ""Складські комірки""?'");
	КонецЕсли;
		
	Ответ = Неопределено;

		
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьСтруктуруЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСтруктуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;	
    КонецЕсли;
    
    ТекстСообщения = НСтр("ru='Идет обработка справочника ""Складские ячейки""...';uk='Йде обробка довідника ""Складські комірки""...'");
    
    Состояние(ТекстСообщения);
    
    СгенерироватьСтруктуруСклада(Ложь);
    
    ТекстСообщения = НСтр("ru='Обработка справочника ""Складские ячейки"" завершена.';uk='Обробка довідника ""Складські комірки"" завершена.'");
    Состояние(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьРеквизитПриИзменении(Элемент)
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "Обновлять", "");
	Элементы[ИмяЭлемента].Доступность = Объект[Элемент.Имя];
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеИИнициализация

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция НоваяГруппаСправочника(ТекущийРодитель, Адрес)
	СправочникСсылка = Справочники.СкладскиеЯчейки.НайтиПоКоду(Адрес,,,Объект.Склад);
	
	Если СправочникСсылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.СкладскиеЯчейки.СоздатьГруппу();
		
	ИначеЕсли Объект.ОбновлятьСуществующие Тогда
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		
	Иначе
		
		Возврат СправочникСсылка;
		
	КонецЕсли;
	
	СправочникОбъект.Код 				= Адрес;
	СправочникОбъект.Наименование 		= Адрес;
	СправочникОбъект.Владелец 			= Объект.Склад;
	СправочникОбъект.Помещение 			= Объект.Помещение;
	СправочникОбъект.Родитель			= ТекущийРодитель;
	
	Попытка
		Если СправочникОбъект.ПроверитьЗаполнение() Тогда
			СправочникОбъект.Записать();
			СправочникСсылка = СправочникОбъект.Ссылка;
		КонецЕсли;
	Исключение
		СправочникСсылка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
		
		ТекстСообщения = НСтр("ru='Группа ""%Группа%"" не записана: %ИнформацияОбОшибке%';uk='Група ""%Группа%"" не записана: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Группа%",Адрес);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИнформацияОбОшибке%",ИнформацияОбОшибке().Описание);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,);
	КонецПопытки;
	
	Возврат СправочникСсылка;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементСправочника(ТекущийРодитель, Адрес, Секция, Линия, Стеллаж, Ярус, Позиция)
	
	СправочникСсылка = Справочники.СкладскиеЯчейки.НайтиПоКоду(Адрес,,,Объект.Склад);
	
	Если СправочникСсылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.СкладскиеЯчейки.СоздатьЭлемент();
		
	ИначеЕсли Объект.ОбновлятьСуществующие Тогда
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		
		Если СправочникОбъект.ЭтоГруппа Тогда
			ТекстИнформацииОбОшибке = НСтр("ru='Не возможно создать ячейку с адресом %Ячейка%, т.к. уже существует группа ячеек с таким адресом.';uk='Не можливо створити комірку з адресою %Ячейка%, тому що вже існує група комірок з такою адресою.'");
			ТекстИнформацииОбОшибке = СтрЗаменить(ТекстИнформацииОбОшибке, "%Ячейка%", СправочникОбъект.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИнформацииОбОшибке,,,);
			Возврат;
		КонецЕсли;
			
	Иначе
		ТекстСообщения = НСтр("ru='Ячейка ""%Элемент%"" уже есть в структуре склада';uk='Комірка ""%Элемент%"" вже є в структурі складу'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Элемент%",Адрес);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИнформацияОбОшибке%",ИнформацияОбОшибке().Описание);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,);
		Возврат;
		
	КонецЕсли;
	
	СправочникОбъект.Код 					= Адрес;
	СправочникОбъект.Наименование 			= Адрес;
	СправочникОбъект.Владелец 				= Объект.Склад;
	СправочникОбъект.Помещение 	            = Объект.Помещение;
	СправочникОбъект.Родитель				= ТекущийРодитель;
	СправочникОбъект.ТипСкладскойЯчейки		= Объект.ТипСкладскойЯчейки;
	
	СправочникОбъект.Секция 				= Секция;
	СправочникОбъект.Линия 					= Линия;
	СправочникОбъект.Стеллаж 				= Стеллаж;
	СправочникОбъект.Ярус 					= Ярус;
	СправочникОбъект.Позиция 				= Позиция;
	
	Если Объект.ОбновлятьРабочийУчасток Тогда
		СправочникОбъект.РабочийУчасток 		= Объект.РабочийУчасток;
	КонецЕсли;
	
	Если Объект.ОбновлятьОбластьХранения Тогда
		СправочникОбъект.ОбластьХранения 		= Объект.ОбластьХранения;
	КонецЕсли;
	
	Если Объект.ОбновлятьУровеньДоступности Тогда
		СправочникОбъект.УровеньДоступности 	= Объект.УровеньДоступности;
	КонецЕсли;
	
	Если Объект.ОбновлятьТипоразмер Тогда
		СправочникОбъект.Типоразмер			 	= Объект.Типоразмер;
	КонецЕсли;
	
	Если Объект.ОбновлятьМаксимальныйКоэффициентНаполненностиПоВесу Тогда
		СправочникОбъект.МаксимальныйКоэффициентНаполненностиПоВесу 	= Объект.МаксимальныйКоэффициентНаполненностиПоВесу;
	КонецЕсли;
	
	Если Объект.ОбновлятьМаксимальныйКоэффициентНаполненностиПоОбъему Тогда
		СправочникОбъект.МаксимальныйКоэффициентНаполненностиПоОбъему 	= Объект.МаксимальныйКоэффициентНаполненностиПоОбъему;
	КонецЕсли;
	
	СправочникОбъект.ИспользованиеПериодичностиИнвентаризацииЯчейки =
		Перечисления.ВариантыИспользованияПериодическойИнвентаризацииЯчеек.ИспользоватьНастройкиОбластиХранения;
	
	Попытка
		Если СправочникОбъект.ПроверитьЗаполнение() Тогда
			СправочникОбъект.Записать();
			СправочникСсылка = СправочникОбъект.Ссылка;
		КонецЕсли;
	Исключение
		
		СправочникСсылка = Справочники.СкладскиеЯчейки.ПустаяСсылка();
		
		ТекстСообщения = НСтр("ru='Элемент ""%Элемент%"" не записан: %ИнформацияОбОшибке%';uk='Елемент ""%Элемент%"" не записаний: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Элемент%",Адрес);
		
		Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "ЭтоГруппа") Тогда
			ТекстИнформацииОбОшибке = НСтр("ru='Не возможно создать группу ячеек с адресом %ТекущийРодитель%, т.к. уже существует ячейка с таким адресом.';uk='Не можливо створити групу комірок з адресою %ТекущийРодитель%, т.я. вже існує комірка з такою адресою.'");
			ТекстИнформацииОбОшибке = СтрЗаменить(ТекстИнформацииОбОшибке, "%ТекущийРодитель%", ТекущийРодитель);
		Иначе
			ТекстИнформацииОбОшибке = ИнформацияОбОшибке().Описание;
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИнформацияОбОшибке%",ТекстИнформацииОбОшибке);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция СгенерироватьМассивУровня(ИмяУровня,МассивУровня,Счетчик)
	
	Если Объект[ИмяУровня] Тогда
		
		СтарыйНомер = "старый";
		ТекНомер = "";
		
		Пока Истина Цикл
			
			ТекНомер = СледующийНомерУровня(ТекНомер,ИмяУровня);
			
			Если СтарыйНомер <> ТекНомер Тогда
				МассивУровня.Добавить(ТекНомер);
				СтарыйНомер = ТекНомер;
				Счетчик = Счетчик + 1;
			Иначе
				Прервать;
			КонецЕсли;
					
		КонецЦикла;
		
	Иначе
		МассивУровня.Добавить("");
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СледующийНомерУровня(ТекНомер,ИмяУровня,УчитыватьДиапазоны = Истина)
	
	НовыйНомер = "";
	Код0 = 48;
	Код9 = 57;
	
	Если Объект["ТипНомера"+ИмяУровня] = "Числовой" Тогда
		Если УчитыватьДиапазоны Тогда
			ЧислоОт = Объект["ДиапазонЧиселОт"+ИмяУровня];
			ЧислоДо = Объект["ДиапазонЧиселДо"+ИмяУровня];
		Иначе
			ЧислоОт = 0;
			ЧислоДо = Pow(10,КоличествоЦифрУровня(ИмяУровня))-1;
		КонецЕсли;
		
		ЛидирНули = Объект["ЛидирующиеНули"+ИмяУровня];
		
		ДлинаНомера = Объект["КоличествоЦифр"+ИмяУровня];
		
		Если ПустаяСтрока(ТекНомер) Тогда
			НовыйНомер = Формат(ЧислоОт,"ЧЦ="+Строка(ДлинаНомера)+"; ЧН=; " + ?(ЛидирНули,"ЧВН=;","")+ "ЧГ=0");	
		Иначе
			ТекЧисло = Число(ТекНомер)+ 1;
			Если ТекЧисло <= ЧислоДо Тогда 
				НовыйНомер = Формат(ТекЧисло,"ЧЦ="+Строка(ДлинаНомера)+"; ЧН=; " + ?(ЛидирНули,"ЧВН=;","")+ "ЧГ=0");
			Иначе
				НовыйНомер = ТекНомер;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Шаблон = Объект["Шаблон"+ИмяУровня];
		ДлинаНомера = СтрДлина(Шаблон); 
		НомерОт = Объект["ДиапазонБуквОт"+ИмяУровня];
		НомерДо = Объект["ДиапазонБуквДо"+ИмяУровня];
		
		Если ПустаяСтрока(ТекНомер) Тогда //Генерация первого номера
			
			НовыйНомер = НомерОт;
			
		Иначе //Генерация следующего номера
			
			НадоУвеличивать = Истина;
			ТекРазряд = ДлинаНомера;
			НовыйНомер = ТекНомер;
			НаборБукв = Объект["НаборБукв"+ИмяУровня];
			
			Пока ТекРазряд > 0
				И НадоУвеличивать Цикл
				
				Если УчитыватьДиапазоны Тогда
					СимволОт = КодСимвола(Сред(НомерОт,ТекРазряд,1));
					СимволДо = КодСимвола(Сред(НомерДо,ТекРазряд,1));
				Иначе
						Если КодСимвола(Сред(НомерОт,ТекРазряд,1)) > КодСимвола("9") Тогда
							СимволОт = МинимальнаяБукваУровня(НаборБукв);
							СимволДо = МаксимальнаяБукваУровня(НаборБукв);
						Иначе
							СимволОт = КодСимвола("1");
							СимволДо = КодСимвола("9");
						КонецЕсли;
				КонецЕсли;
				
				КодТекСимвола = КодСимвола(Сред(НовыйНомер,ТекРазряд,1));
				
				Если ТекРазряд > 1 Тогда
					КодСледующегоСимвола = КодСимвола(Сред(НовыйНомер,ТекРазряд - 1,1));
					СимволСледующийДо = КодСимвола(Сред(НомерДо,ТекРазряд - 1,1));
				Иначе
					КодСледующегоСимвола = -1;
					СимволСледующийДо = -1;
				КонецЕсли;
				
				Если КодСледующегоСимвола < 0 
					Или Не ЭтоЦифра(КодСледующегоСимвола) 
					Или Не ЭтоЦифра(КодТекСимвола) Тогда
					
					Если  КодТекСимвола < СимволДо Тогда
						//Если можно, увеличиваем текущий разряд
						НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(КодТекСимвола+1) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
						НадоУвеличивать = Ложь;
					Иначе
						//иначе обнуляем текущий разряд и переходим к более страшему разряду
						НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(СимволОт) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
					КонецЕсли;
					
				Иначе
					Если КодСледующегоСимвола < СимволСледующийДо Тогда
						
						Если  КодТекСимвола < Код9 Тогда
							//Если можно, увеличиваем текущий разряд
							НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(КодТекСимвола+1) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
							НадоУвеличивать = Ложь;
						Иначе
							//иначе обнуляем текущий разряд и переходим к более страшему разряду
							НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(Код0) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
						КонецЕсли;
						
					Иначе
						Если  КодТекСимвола < СимволДо Тогда
							//Если можно, увеличиваем текущий разряд
							НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(КодТекСимвола+1) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
							НадоУвеличивать = Ложь;
						Иначе
							//иначе обнуляем текущий разряд и переходим к более страшему разряду
							НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(СимволОт) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ТекРазряд = ТекРазряд - 1;		
			КонецЦикла;
			
			Если НадоУвеличивать Тогда
				НовыйНомер = ТекНомер;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйНомер;
	
КонецФункции

&НаСервере
Функция ПредыдущийНомерУровня(ТекНомер,ИмяУровня,УчитыватьДиапазоны = Истина)
	
	НовыйНомер = "";
	Код0 = 48;
	Код9 = 57;
	
	Если Объект["ТипНомера"+ИмяУровня] = "Числовой" Тогда
		Если УчитыватьДиапазоны Тогда
			ЧислоОт = Объект["ДиапазонЧиселОт"+ИмяУровня];
			ЧислоДо = Объект["ДиапазонЧиселДо"+ИмяУровня];
		Иначе
			ЧислоОт = 0;
			ЧислоДо = Pow(10,КоличествоЦифрУровня(ИмяУровня))-1;
		КонецЕсли;
		
		ЛидирНули = Объект["ЛидирующиеНули"+ИмяУровня];
		
		ДлинаНомера = Объект["КоличествоЦифр"+ИмяУровня];
		
		Если ПустаяСтрока(ТекНомер) Тогда
			НовыйНомер = Формат(ЧислоОт,"ЧЦ="+Строка(ДлинаНомера)+"; ЧН=; " + ?(ЛидирНули,"ЧВН=;","")+ "ЧГ=0");	
		Иначе
			ТекЧисло = Число(ТекНомер)- 1;
			Если ТекЧисло >= ЧислоОт Тогда 
				НовыйНомер = Формат(ТекЧисло,"ЧЦ="+Строка(ДлинаНомера)+"; ЧН=; " + ?(ЛидирНули,"ЧВН=;","")+ "ЧГ=0");
			Иначе
				НовыйНомер = ТекНомер;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Шаблон = Объект["Шаблон"+ИмяУровня];
		ДлинаНомера = СтрДлина(Шаблон); 
		НомерОт = Объект["ДиапазонБуквОт"+ИмяУровня];
		НомерДо = Объект["ДиапазонБуквДо"+ИмяУровня];
		
		Если ПустаяСтрока(ТекНомер) Тогда //Генерация первого номера
			
			НовыйНомер = НомерОт;
			
		Иначе //Генерация предыдущего номера
			
			НадоУменьшать = Истина;
			ТекРазряд = ДлинаНомера;
			НовыйНомер = ТекНомер;
			НаборБукв = Объект["НаборБукв"+ИмяУровня];

			Пока ТекРазряд > 0
				И НадоУменьшать Цикл
				
				Если УчитыватьДиапазоны Тогда
					СимволОт = КодСимвола(Сред(НомерОт,ТекРазряд,1));
					СимволДо = КодСимвола(Сред(НомерДо,ТекРазряд,1));
				Иначе
						Если КодСимвола(Сред(НомерОт,ТекРазряд,1)) > КодСимвола("9") Тогда
							СимволОт = МинимальнаяБукваУровня(НаборБукв);
							СимволДо = МаксимальнаяБукваУровня(НаборБукв);
						Иначе
							СимволОт = КодСимвола("1");
							СимволДо = КодСимвола("9");
						КонецЕсли;
				КонецЕсли;
				
				КодТекСимвола = КодСимвола(Сред(НовыйНомер,ТекРазряд,1));
				
				Если ТекРазряд > 1 Тогда
					КодСледующегоСимвола = КодСимвола(Сред(НовыйНомер,ТекРазряд - 1,1));
					Если УчитыватьДиапазоны Тогда
						СимволСледующийОт = КодСимвола(Сред(НомерОт,ТекРазряд-1,1));
					Иначе
						СимволСледующийОт = МинимальнаяБукваУровня(ИмяУровня);
					КонецЕсли;
				Иначе
					КодСледующегоСимвола = -1;
					СимволСледующийОт = -1;
				КонецЕсли;
				
				Если КодСледующегоСимвола < 0 
					Или Не ЭтоЦифра(КодСледующегоСимвола) 
					Или Не ЭтоЦифра(КодТекСимвола) Тогда
					
					Если  КодТекСимвола > СимволОт Тогда      
						//Если можно, уменьшаем текущий разряд
						НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(КодТекСимвола-1) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
						НадоУменьшать = Ложь;
					Иначе
						//иначе обнуляем текущий разряд и переходим к более страшему разряду
						НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(СимволДо) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
					КонецЕсли;
					
				Иначе
					Если КодСледующегоСимвола > СимволСледующийОт Тогда
						
						Если  КодТекСимвола > Код0 Тогда
							//Если можно, увеличиваем текущий разряд
							НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(КодТекСимвола-1) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
							НадоУменьшать = Ложь;
						Иначе
							//иначе обнуляем текущий разряд и переходим к более страшему разряду
							НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(Код9) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
						КонецЕсли;
						
					Иначе
						Если  КодТекСимвола > СимволОт Тогда
							//Если можно, уменьшаем текущий разряд
							НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + Символ(КодТекСимвола-1) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
							НадоУменьшать = Ложь;
						Иначе
							//иначе обнуляем текущий разряд и переходим к более страшему разряду
							НовыйНомер = Лев(НовыйНомер,ТекРазряд-1) + КодСимвола(СимволОт) + Прав(НовыйНомер,ДлинаНомера - ТекРазряд);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ТекРазряд = ТекРазряд - 1;		
			КонецЦикла;
			
			Если НадоУменьшать Тогда
				НовыйНомер = ТекНомер;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйНомер;
	
КонецФункции

&НаСервере
Процедура ПостроитьПример()
	
	СтрПримера = "";
	
	Для каждого СтрМас из МассивЧастейАдреса Цикл
		
		Если Объект[СтрМас] Тогда
			
			НовыйНомер 	= СледующийНомерУровня("",СтрМас);
			СтрПримера 	= СтрПримера +  СокрЛП(НовыйНомер) + РазделительУровня(СтрМас);
				
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьРазделительВКонце(СтрПримера, СтрокаРазделителей);
	Объект.Пример = СтрПримера;
	
КонецПроцедуры

&НаСервере
Функция РазделительУровня(ИмяУровня)
	
	Разделитель = "";
	
	Если ИмяУровня <> "Позиции" Тогда
		
		Разделитель = СокрЛП(Объект["Разделитель" + ИмяУровня]);
		
		Если Не ПустаяСтрока(Разделитель) Тогда
			
			Если Разделитель = "П" Тогда
				Разделитель = " ";	
			ИначеЕсли Разделитель = "Н"	Тогда
				Разделитель = "";	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Разделитель;
	
КонецФункции

&НаСервере
Функция АдресПоНомерам(Секция = "", Линия = "", Стеллаж = "", Ярус = "", Позиция = "")
	
	Адрес = "";
	
	Если Не ПустаяСтрока(Секция) Тогда
		Адрес = Адрес + СокрЛП(Секция) + РазделительУровня("Секции");
	КонецЕсли;	
	
	Если Не ПустаяСтрока(Линия) Тогда
		Адрес = Адрес +  СокрЛП(Линия) + РазделительУровня("Линии");
	КонецЕсли;	
	
	Если Не ПустаяСтрока(Стеллаж) Тогда
		Адрес = Адрес + СокрЛП(Стеллаж) + РазделительУровня("Стеллажи");
	КонецЕсли;	
	
	Если Не ПустаяСтрока(Ярус) Тогда
		Адрес = Адрес +  СокрЛП(Ярус) + РазделительУровня("Ярусы");
	КонецЕсли;	
	
	Если Не ПустаяСтрока(Позиция) Тогда
		Адрес = Адрес +  СокрЛП(Позиция);
	КонецЕсли;	
	
	УдалитьРазделительВКонце(Адрес, СтрокаРазделителей);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Функция  СгенерироватьСтруктуруСклада(ВТабличныйДокумент = Истина)
	
	Отказ = Ложь;
	
	Если НЕ НомераЗаполненыВерно() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ВТабличныйДокумент
		И Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВТабличныйДокумент Тогда
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.ОтображатьСетку = Ложь;
		Макет = Обработки.ГенерацияТопологииСклада.ПолучитьМакет("Макет");
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьГруппы = Макет.ПолучитьОбласть("ОбластьГруппы");
		ОбластьЯчейки = Макет.ПолучитьОбласть("ОбластьЯчейки");
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.НачатьАвтогруппировкуСтрок();
	КонецЕсли;		
	
	МассивСекций = Новый Массив;
	МассивЛиний = Новый Массив;
	МассивСтеллажей = Новый Массив;
	МассивЯрусов = Новый Массив;
	МассивПозиций = Новый Массив;
	
	Счетчик = 0;
	
	СгенерироватьМассивУровня("Секции",МассивСекций, Счетчик);
	СгенерироватьМассивУровня("Линии",МассивЛиний, Счетчик);
	СгенерироватьМассивУровня("Стеллажи",МассивСтеллажей, Счетчик);
	СгенерироватьМассивУровня("Ярусы",МассивЯрусов, Счетчик);
	СгенерироватьМассивУровня("Позиции",МассивПозиций, Счетчик);
	
	ИмяПоследнегоУровня = "";
	
	Если Объект.Секции Тогда
		ИмяПоследнегоУровня = "Секции";
	КонецЕсли;
	Если Объект.Линии Тогда
		ИмяПоследнегоУровня = "Линии";
	КонецЕсли;
	Если Объект.Стеллажи Тогда
		ИмяПоследнегоУровня = "Стеллажи";
	КонецЕсли;
	Если Объект.Ярусы Тогда
		ИмяПоследнегоУровня = "Ярусы";
	КонецЕсли;
	Если Объект.Позиции Тогда
		ИмяПоследнегоУровня = "Позиции";
	КонецЕсли;
	
	Если ИмяПоследнегоУровня <> "Позиции" Тогда
		Объект["СоздаватьГруппы" + ИмяПоследнегоУровня] = Ложь;
	КонецЕсли;
	
	Уровень = 0;
	РодительСекций 	  = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	РодительЛиний 	  = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	РодительСтеллажей = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	РодительЯрусов    = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	РодительПозиций   = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	
	Для Каждого СтрСекций из МассивСекций Цикл
		
		Если Объект["Секции"]
			И Объект["СоздаватьГруппыСекции"] Тогда
			
			Адрес = АдресПоНомерам(СтрСекций);
			
			Если ВТабличныйДокумент Тогда
				ОбластьГруппы.Параметры.Группа = Адрес;
				ТабДок.Вывести(ОбластьГруппы,Уровень);
			Иначе
				РодительЛиний = НоваяГруппаСправочника(РодительСекций,Адрес);
			КонецЕсли;
			
			Уровень = Уровень + 1;
		Иначе
			
			РодительЛиний = РодительСекций;
			
		КонецЕсли;
		
		Для Каждого СтрЛиний из МассивЛиний Цикл
			
			Если Объект["Линии"]
				И Объект["СоздаватьГруппыЛинии"] Тогда
				
				Адрес = АдресПоНомерам(СтрСекций,СтрЛиний);
				
				Если ВТабличныйДокумент Тогда
					ОбластьГруппы.Параметры.Группа = Адрес;
					ТабДок.Вывести(ОбластьГруппы,Уровень);
				Иначе
					РодительСтеллажей = НоваяГруппаСправочника(РодительЛиний,Адрес);
				КонецЕсли;
				
				Уровень = Уровень + 1;
				
			Иначе
				
				РодительСтеллажей = РодительЛиний;
				
			КонецЕсли;
			
			Для Каждого СтрСтеллажей из МассивСтеллажей Цикл
				
				Если Объект["Стеллажи"]
					И Объект["СоздаватьГруппыСтеллажи"] Тогда
					
					Адрес = АдресПоНомерам(СтрСекций,СтрЛиний,СтрСтеллажей);
					
					Если ВТабличныйДокумент Тогда
						ОбластьГруппы.Параметры.Группа = Адрес;
						ТабДок.Вывести(ОбластьГруппы,Уровень);
					Иначе
						РодительЯрусов = НоваяГруппаСправочника(РодительСтеллажей,Адрес);
					КонецЕсли;
					
					Уровень = Уровень + 1;
					
				Иначе
					
					РодительЯрусов = РодительСтеллажей;
					
				КонецЕсли;
				
				Для Каждого СтрЯрусов из МассивЯрусов Цикл
					
					Если Объект["Ярусы"]
						И Объект["СоздаватьГруппыЯрусы"] Тогда
						
						Адрес = АдресПоНомерам(СтрСекций,СтрЛиний,СтрСтеллажей,СтрЯрусов);
						
						Если ВТабличныйДокумент Тогда
							ОбластьГруппы.Параметры.Группа = Адрес;
							ТабДок.Вывести(ОбластьГруппы,Уровень);
						Иначе
							РодительПозиций = НоваяГруппаСправочника(РодительЯрусов,Адрес);
						КонецЕсли;
						
						Уровень = Уровень + 1;
						
					Иначе
						
						РодительПозиций = РодительЯрусов;
						
					КонецЕсли;
					
					Уровень = Уровень + 1;
					
					Для Каждого СтрПозиций из МассивПозиций Цикл
						
						Адрес = АдресПоНомерам(СтрСекций,СтрЛиний,СтрСтеллажей,СтрЯрусов,СтрПозиций);
						
						Если ВТабличныйДокумент Тогда
							ОбластьЯчейки.Параметры.Ячейка = Адрес;
							ТабДок.Вывести(ОбластьЯчейки,Уровень);
						Иначе
							СоздатьЭлементСправочника(РодительПозиций,Адрес,СтрСекций,СтрЛиний,СтрСтеллажей,СтрЯрусов,СтрПозиций);
						КонецЕсли;
						
					КонецЦикла;
					
					Уровень = Уровень - 1;
					
					Если Объект["Ярусы"]
						И Объект["СоздаватьГруппыЯрусы"] Тогда
											
						Уровень = Уровень - 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Объект["Стеллажи"]
					И Объект["СоздаватьГруппыСтеллажи"] Тогда
								
					Уровень = Уровень - 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Объект["Линии"]
				И Объект["СоздаватьГруппыЛинии"] Тогда
			
				Уровень = Уровень - 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Объект["Секции"]
			И Объект["СоздаватьГруппыСекции"] Тогда
			
			Уровень = Уровень - 1;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ВТабличныйДокумент Тогда
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		Возврат ТабДок;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НомераЗаполненыВерно()
	
	Результат = Истина;
	ЕстьУровни = Ложь;
	
	ШаблонСообщения = НСтр("ru='Не заполнено поле ""%ИмяПоля%"" в уровне адресации ""%ИмяУровня%""';uk='Не заповнене поле ""%ИмяПоля%"" в рівні адресації ""%ИмяУровня%""'");
	
	Для Каждого ИмяУровня из МассивЧастейАдреса Цикл
		Если Объект[ИмяУровня] Тогда
			ЕстьУровни = Истина;
			
			Если Объект["ТипНомера" + ИмяУровня] <> "Числовой" Тогда
				
				Если Не ЗначениеЗаполнено(Объект["ДиапазонБуквОт" + ИмяУровня]) Тогда
					Результат = Ложь;
									
					ТекстСообщения = СтрЗаменить(ШаблонСообщения,"%ИмяПоля%", НСтр("ru='Номер от';uk='Номер від'"));
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяУровня%", ИмяУровня);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДиапазонБуквОт" + ИмяУровня, "Объект"); 
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект["ДиапазонБуквДо" + ИмяУровня]) Тогда
					Результат = Ложь;
									
					ТекстСообщения = СтрЗаменить(ШаблонСообщения,"%ИмяПоля%", НСтр("ru='Номер до';uk='Номер до'"));
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяУровня%", ИмяУровня);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДиапазонБуквДо" + ИмяУровня, "Объект"); 
				КонецЕсли;
				
			Иначе
				
				Если Не ЗначениеЗаполнено(Объект["ДиапазонЧиселОт" + ИмяУровня]) Тогда
					Результат = Ложь;
									
					ТекстСообщения = СтрЗаменить(ШаблонСообщения,"%ИмяПоля%", НСтр("ru='Номер от';uk='Номер від'"));
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяУровня%", ИмяУровня);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДиапазонЧиселОт" + ИмяУровня, "Объект"); 
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект["ДиапазонЧиселДо" + ИмяУровня]) Тогда
					Результат = Ложь;
									
					ТекстСообщения = СтрЗаменить(ШаблонСообщения,"%ИмяПоля%", НСтр("ru='Номер до';uk='Номер до'"));
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ИмяУровня%", ИмяУровня);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДиапазонЧиселДо" + ИмяУровня, "Объект"); 
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьУровни Тогда
		ТекстСообщения = НСтр("ru='Не выбран ни один уровень адресации.';uk='Не обраний жоден рівень адресації.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
		Результат = Ложь;	
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад,Помещение",Объект.Склад,Объект.Помещение));
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение,,Ложь);
	Элементы.РеквизитыПрочиеСтолбецЕдиницыИзмерения.Видимость = ИспользоватьАдресноеХранение;
	Элементы.РеквизитыПрочиеСтолбецДекорация.Видимость = ИспользоватьАдресноеХранение;
КонецПроцедуры

&НаСервере
Функция ЭтоЦифра(КодСимвола)
	Код0 = 48;
	Код9 = 57;
	
	Если КодСимвола >= Код0
		И КодСимвола <= Код9 Тогда	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция МаксимальнаяБукваУровня(НаборБукв)
	Если НаборБукв = "РУС" Тогда
		КодКонечногоСимвола = 1071;
	Иначе
		КодКонечногоСимвола = 90;
	КонецЕсли;
	
	Возврат КодКонечногоСимвола;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция МинимальнаяБукваУровня(НаборБукв)
	Если НаборБукв = "РУС" Тогда
		КодНачальногоСимвола = 1040;
	Иначе
		КодНачальногоСимвола = 65;
	КонецЕсли;
	
	Возврат КодНачальногоСимвола;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьРазделительВКонце(Адрес, СтрокаРазделителей)
	
	Адрес = СокрЛП(Адрес);
	
	ДлинаАдреса = СтрДлина(Адрес);
	
	Если  ДлинаАдреса > 0 Тогда
		
		ПоследнийСимвол = Прав(Адрес,1);
		
		Если СтрНайти(СтрокаРазделителей,ПоследнийСимвол) <> 0 Тогда
			
			Адрес = Лев(Адрес,ДлинаАдреса - 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоЦифрУровня(ИмяУровня)
	Если ИмяУровня = "Позиции" Тогда
		ДлинаМакс = 2;
	ИначеЕсли ИмяУровня = "Стеллажи" Тогда
		ДлинаМакс = 5;
	Иначе
		ДлинаМакс = 3;
	КонецЕсли;
	
	Возврат ДлинаМакс;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьПоИспользованию(ИмяУровня)
	Для каждого СтрМас из МассивИменОбщий Цикл
		Если Не ((СтрМас = "СоздаватьГруппы"
			Или СтрМас = "Разделитель")
			И ИмяУровня = "Позиции") Тогда
			
			Элементы[СтрМас+ИмяУровня].Видимость = Объект[ИмяУровня];
		КонецЕсли;
	КонецЦикла;
	
	Если Объект["ТипНомера"+ИмяУровня] = "Числовой" Тогда
		Для каждого СтрМас из МассивИменЧисловой Цикл
			Если СтрМас = "ЛидирующиеНули" Тогда
				Элементы[СтрМас+ИмяУровня].Доступность = Истина;
			ИначеЕсли СтрМас = "КоличествоЦифр" Тогда	
				Элементы[СтрМас+ИмяУровня].Доступность = Объект["ЛидирующиеНули"+ИмяУровня];
			КонецЕсли;
			
			Элементы[СтрМас+ИмяУровня].Видимость = Объект[ИмяУровня];
		КонецЦикла;
		
		Для каждого СтрМас из МассивИменСимвольный Цикл
			Элементы[СтрМас+ИмяУровня].Видимость = Ложь;
		КонецЦикла;
	Иначе
		Для каждого СтрМас из МассивИменСимвольный Цикл
			Элементы[СтрМас+ИмяУровня].Видимость = Объект[ИмяУровня];
		КонецЦикла;
		
		Для каждого СтрМас из МассивИменЧисловой Цикл
			Если СтрМас = "ЛидирующиеНули"
				Или СтрМас = "КоличествоЦифр" Тогда
				Элементы[СтрМас+ИмяУровня].Доступность = Ложь;
				Элементы[СтрМас+ИмяУровня].Видимость = Объект[ИмяУровня];
			Иначе	
				Элементы[СтрМас+ИмяУровня].Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПоЛидирующимНулям(ИмяУровня)
	
	Элементы["КоличествоЦифр"+ИмяУровня].Доступность = Объект["ЛидирующиеНули"+ИмяУровня];

КонецПроцедуры

&НаКлиенте
Процедура РасчитатьКоличествоЭлементовУровня(ИмяУровня)
	Объект["Количество"+ИмяУровня] = 1;
	Если Объект["ТипНомера"+ИмяУровня] = "Числовой" Тогда
		Объект["Количество"+ИмяУровня] = Объект["ДиапазонЧиселДо"+ИмяУровня] - Объект["ДиапазонЧиселОт"+ИмяУровня] + 1;	
	Иначе
		Шаблон = Объект["Шаблон"+ИмяУровня];
		ДлинаНомера = СтрДлина(Шаблон); 
		
		Для ТекРазряд = 1 по ДлинаНомера Цикл
			БукваОт = КодСимвола(Сред(Объект["ДиапазонБуквОт"+ИмяУровня],ТекРазряд,1));
			БукваДо = КодСимвола(Сред(Объект["ДиапазонБуквДо"+ИмяУровня],ТекРазряд,1));
			
			КоличествоБукв = БукваДо - БукваОт + 1;
			
			Объект["Количество"+ИмяУровня] = Объект["Количество"+ИмяУровня] * КоличествоБукв;		
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьКоличествоЭлементов()
	
	Если Не (Объект.Секции
		Или Объект.Линии
		Или Объект.Стеллажи
		Или Объект.Ярусы
		Или Объект.Позиции) Тогда
		
		Объект.КоличествоЯчеек = 0;
		
	Иначе
		
		Объект.КоличествоЯчеек = Объект.КоличествоСекции * Объект.КоличествоЛинии * Объект.КоличествоСтеллажи 
								* Объект.КоличествоЯрусы * Объект.КоличествоПозиции;	
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПостоитьШаблонПоНомеруОт(ИмяУровня)
	
	НомерОт = Объект["ДиапазонБуквОт"+ИмяУровня];
	НаборБукв = Объект["НаборБукв"+ИмяУровня];
	
	НомерОт = СокрЛП(ВРег(НомерОт));
	
	КодНачальногоСимвола = МинимальнаяБукваУровня(НаборБукв);
	КодКонечногоСимвола = МаксимальнаяБукваУровня(НаборБукв);
	
	Код0 = 48;
	Код9 = 57;
	
	НомерОт = СокрЛП(НомерОт);
	
	ДлинаНомера = СтрДлина(НомерОт);
	
	НовыйШаблон = "";
	
	Для ТекРазряд = 1 по ДлинаНомера Цикл
		
		СимволОт = КодСимвола(Сред(НомерОт,ТекРазряд,1));
		КодТекСимвола = КодСимвола(Сред(НомерОт,ТекРазряд,1));
		
		Если СимволОт >= КодНачальногоСимвола
			И СимволОт <= КодКонечногоСимвола Тогда
			
			НовыйШаблон = НовыйШаблон + "Б";
			
		ИначеЕсли СимволОт >= Код0
			И СимволОт <= Код9 Тогда
			
			НовыйШаблон = НовыйШаблон + "Ц";
			
		Иначе
			
			НовыйШаблон = НовыйШаблон + "Б";
			НомерОт = Лев(НомерОт,ТекРазряд-1) + Символ(КодНачальногоСимвола) + Прав(НомерОт,ДлинаНомера - ТекРазряд);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Объект["ДиапазонБуквОт"+ИмяУровня] = НомерОт;
	Объект["Шаблон"+ИмяУровня] = НовыйШаблон;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНомерДоПоНомеруОт(ИмяУровня)
	Шаблон = Объект["Шаблон"+ИмяУровня];
	НаборБукв = Объект["НаборБукв"+ИмяУровня];
	НомерОт = Объект["ДиапазонБуквОт"+ИмяУровня];
	НомерДо = Объект["ДиапазонБуквДо"+ИмяУровня];
	
	ДлинаНомера = СтрДлина(Шаблон);
	
	ДлинаНомераДо = СтрДлина(НомерДо);
	
	Если ДлинаНомераДо < ДлинаНомера  Тогда
		
		Для Индекс = 1 по ДлинаНомераДо - ДлинаНомера Цикл
			
			НомерДо = НомерДо + " ";
			
		КонецЦикла;
		
	ИначеЕсли ДлинаНомераДо > ДлинаНомера Тогда
		
		 НомерДо = Лев(НомерОт,ДлинаНомера);
		 
	КонецЕсли;
	
	НомерДо = ВРег(НомерДо);
	КодНачальногоСимвола = МинимальнаяБукваУровня(НаборБукв);
	КодКонечногоСимвола = МаксимальнаяБукваУровня(НаборБукв);
	
	Для ТекРазряд = 1 по ДлинаНомера Цикл
		
		СимволОт = КодСимвола(Сред(НомерОт,ТекРазряд,1));
		КодТекСимвола = КодСимвола(Сред(НомерДо,ТекРазряд,1));
		
		Если КодТекСимвола < СимволОт Тогда
			НомерДо = Лев(НомерДо,ТекРазряд-1) + Символ(СимволОт) + Прав(НомерДо,ДлинаНомера - ТекРазряд);
		Иначе
			ТекСимволШаблона = Сред(Шаблон,ТекРазряд,1);
			
			Если ТекСимволШаблона = "Б" Тогда
				
				Если КодТекСимвола > КодКонечногоСимвола Тогда
					НомерДо = Лев(НомерДо,ТекРазряд-1) + Символ(СимволОт) + Прав(НомерДо,ДлинаНомера - ТекРазряд);
				КонецЕсли;
				
			Иначе
				
				Если КодТекСимвола > 57 Тогда
					НомерДо = Лев(НомерДо,ТекРазряд-1) + Символ(СимволОт) + Прав(НомерДо,ДлинаНомера - ТекРазряд);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Объект["ДиапазонБуквДо"+ИмяУровня] = НомерДо;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоЦифр(ИмяУровня)
	
	ДлинаНомера = СтрДлина(Формат(Объект["ДиапазонЧиселДо"+ИмяУровня],"ЧН=; ЧГ=0"));
	
	ДлинаМакс = КоличествоЦифрУровня(ИмяУровня);
	
	Если Объект["КоличествоЦифр"+ИмяУровня] < ДлинаНомера Тогда
		Объект["КоличествоЦифр"+ИмяУровня] = ДлинаНомера;
	ИначеЕсли Не Объект["ЛидирующиеНули"+ИмяУровня] Тогда
		Объект["КоличествоЦифр"+ИмяУровня] = ДлинаНомера;
	ИначеЕсли Объект["КоличествоЦифр"+ИмяУровня] > ДлинаМакс Тогда
		Объект["КоличествоЦифр"+ИмяУровня] = ДлинаМакс;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

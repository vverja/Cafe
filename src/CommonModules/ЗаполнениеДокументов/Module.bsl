// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры:
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента) Тогда
		// Если валюта документа совпадает с валютой регл. учета, то курс 1.
		Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) И (ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда

			МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

			// Если есть реквизит КурсДокумента - его и вернем
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КурсДокумента")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсДокумента;
			КонецЕсли;

			// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета,
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КурсВзаиморасчетов")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсВзаиморасчетов;
			КонецЕсли;

			// Если нет КурсВзаиморасчетов и валюта документа не совпадает с валютой регл. учета,
			// то КурсВзаиморасчетов должен быть в табличной части документа или может вообще отсутствовать.
			// Тогда возьмем курс из справочника на дату документа.
			Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Курс;

		КонецЕсли;
	КонецЕсли;

	Возврат 1;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры:
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента) Тогда
		// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
		Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) И (ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда

			// Если есть реквизит КратностьДокумента - его и вернем
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КратностьДокумента")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьДокумента;
			КонецЕсли;

			// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета,
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КратностьВзаиморасчетов")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьВзаиморасчетов;
			КонецЕсли;

			// Если нет КратностьВзаиморасчетов и валюта документа не совпадает с валютой регл. учета,
			// то КратностьВзаиморасчетов должна быть в табличной части документа или может вообще отсутствовать.
			// Тогда возьмем Кратность из справочника на дату документа.
			Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Кратность;

		КонецЕсли;
    КонецЕсли;

	Возврат 1;

КонецФункции // КратностьДокумента()

Функция ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента)
	ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.Склад)
		И ДокументОбъект.Склад.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Склад, "ПодразделениеОрганизации");
		ПодразделениеОрганизации = РеквизитыСклада.ПодразделениеОрганизации;
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
		И ДокументОбъект.СчетОрганизации.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.СчетОрганизации, "ПодразделениеОрганизации");
		ПодразделениеОрганизации = РеквизитыСчетаОрганизации.ПодразделениеОрганизации;
	Иначе
		ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;

    Возврат(ПодразделениеОрганизации);

КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект   - <ДокументОбъект> - документ, реквизиты которого необходимо заполнить
//  ДанныеЗаполнения - <Структура> или <Неопределено> - одноименный параметр обработчика ОбработкаЗаполнения документа
//  ЗаполнятьСчетаУчета - Булево - Если Истина, то необходимо заполнять счета учета в документе.
//
Процедура Заполнить(ДокументОбъект, ДанныеЗаполнения = Неопределено, ЗаполнятьСчетаУчета = Ложь) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	КонецЕсли;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьПоСтруктуре(ДокументОбъект, ДанныеЗаполнения, МетаданныеДокумента);
	КонецЕсли;
    
	ЕстьРеквизитОрганизация          = ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация",          МетаданныеДокумента);
	ЕстьРеквизитКонтрагент           = ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент",           МетаданныеДокумента);
	ЕстьРеквизитДоговор              = ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента",   МетаданныеДокумента);
	ЕстьРеквизитВалютаДокумента      = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента",      МетаданныеДокумента);
	ЕстьРеквизитВалютаВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаВзаиморасчетов", МетаданныеДокумента);
	ЕстьРеквизитСчетОрганизации      = ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации",      МетаданныеДокумента);

	ПлательщикНДС = ЕстьРеквизитОрганизация И УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);

	// Проверяем корректность связанных реквизитов, заполненных из ДанныхЗаполнения документа:
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", МетаданныеДокумента) Тогда
		ДокументОбъект.РучнаяКорректировка = Ложь;
	КонецЕсли;

	// Заполняем реквизиты значениями по умолчанию:
	Если ЕстьРеквизитОрганизация И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтруктурнаяЕдиница", ДокументОбъект, МетаданныеДокумента)
		И ЕстьРеквизитОрганизация Тогда
		ДокументОбъект.СтруктурнаяЕдиница = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация);
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ВидОперации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("Склад", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СкладОрдер", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СкладОрдер = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтавкаНДС", ДокументОбъект, МетаданныеДокумента) Тогда
		
		ДокументЯвляетсяРеализацией	= БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализацией(ДокументОбъект.Ссылка);
		
		Если НЕ ПлательщикНДС И ДокументЯвляетсяРеализацией Тогда
			ДокументОбъект.СтавкаНДС	= Перечисления.СтавкиНДС.НеНДС;
		Иначе
			ДокументОбъект.СтавкаНДС    = НДСОбщегоНазначенияПовтИсп.СтавкаНДСПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("БанковскийСчет", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.БанковскийСчет = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация);
		Если ЕстьРеквизитВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.БанковскийСчет, "ВалютаДенежныхСредств");
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СчетОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СчетОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация);
		Если ЕстьРеквизитВалютаДокумента И Не ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СчетОрганизации, "ВалютаДенежныхСредств");
		КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитСчетОрганизации И ЕстьРеквизитВалютаДокумента И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
		ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СчетОрганизации, "ВалютаДенежныхСредств");
		Если ВалютаСчета <> ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента = ВалютаСчета;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.ПодразделениеОрганизации, ДокументОбъект.Организация) Тогда

		ПодразделениеОрганизации = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеОрганизации, ДокументОбъект.Организация) Тогда
			ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		КонецЕсли;

	КонецЕсли;
	
	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("МестонахождениеОС", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.МестонахождениеОС, ДокументОбъект.Организация) Тогда

		МестонахождениеОС = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(МестонахождениеОС) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(МестонахождениеОС, ДокументОбъект.Организация) Тогда
			ДокументОбъект.МестонахождениеОС = МестонахождениеОС;
		КонецЕсли;

	КонецЕсли;

	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Местонахождение", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.Местонахождение, ДокументОбъект.Организация) Тогда

		Местонахождение = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(Местонахождение) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Местонахождение, ДокументОбъект.Организация) Тогда
			ДокументОбъект.Местонахождение = Местонахождение;
		КонецЕсли;

	КонецЕсли;
	
	Если ЕстьРеквизитВалютаДокумента И НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ЕстьРеквизитВалютаВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаВзаиморасчетов) Тогда
		ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсДокумента", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)
			ИЛИ ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета И ДокументОбъект.КурсДокумента = 1 Тогда

			СтруктураКурсаДокумента      = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)
			ИЛИ ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета И ДокументОбъект.КурсВзаиморасчетов = 1 Тогда

			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ЗанимаемыхСтавок", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ЗанимаемыхСтавок = 1;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ДатаС", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСВключенВСтоимость", МетаданныеДокумента) Тогда
		
		ДокументОбъект.НДСВключенВСтоимость	= НЕ ПлательщикНДС;
		
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ПериодРегистрации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	// Заполнение реквизитов расчетного документа
	// Очищено
	
КонецПроцедуры 

// Заполняет реквизиты объекта значениями, полученными в структуре ДанныхЗаполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура.
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения"
//
//
// Параметры
//  <Объект>  - <СправочникОбъект>, <ДокументОбъект> и т.д. - Заполняемый объект
//  <ДанныеЗаполнения>  - <произвольный тип> - параметр, полученный в ОбработкеЗаполнения объекта
//  <МетаданныеОбъекта>  - <Метаданные> -
//
//
Процедура ЗаполнитьПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт

	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	Если  Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;

	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ
					(НЕ Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)
					Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаполняемыйЭлемент Из СтруктураЗаполнения Цикл
		ЗначениеЗаполнения = ДанныеЗаполнения[ЗаполняемыйЭлемент.Ключ];
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("Массив")
			ИЛИ ТипЗнч(ЗначениеЗаполнения) = Тип("ФиксированныйМассив") Тогда
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения[0];
		Иначе
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);

КонецПроцедуры

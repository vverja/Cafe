////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиОбработчикиОбновления: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Появился новый справочник ПрофилиНастроекЭДО.
Процедура ЗаполнитьДанныеОПрофиляхНастроекЭДО() Экспорт
	
	НачатьТранзакцию();
	
	// Пометим на удаление не действующие настройки ЭДО
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И СоглашенияОбИспользованииЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
		НастройкаЭДО.УстановитьПометкуУдаления(Истина);
		НастройкаЭДО.Комментарий = НСтр("ru='##Настройка ЭДО помечена на удаление автоматически при обновлении.';uk='##Настройка ЕДО відмічена для вилучення автоматично при оновленні.'");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
	КонецЦикла;
	
	// Создаем элементы справочника ПрофилиНастроекЭДО.
	// Проверим не было ли обновления
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеПодписи");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияОбИспользованииЭД.Организация,
		|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
		|	СоглашенияОбИспользованииЭД.СпособОбменаЭД,
		|	ИСТИНА КАК Ссылка,
		|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
		|	СоглашенияОбИспользованииЭД.УдалитьАдресСервера КАК АдресСервера,
		|	СоглашенияОбИспользованииЭД.УдалитьПользователь КАК Пользователь,
		|	СоглашенияОбИспользованииЭД.УдалитьПароль КАК Пароль,
		|	СоглашенияОбИспользованииЭД.УдалитьПортFTP КАК Порт,
		|	СоглашенияОбИспользованииЭД.УдалитьПассивноеСоединениеFTP КАК ПассивноеСоединение
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
		|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
		|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И НЕ СоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйПрофильНастроек = Справочники.ПрофилиНастроекЭДО.СоздатьЭлемент();
			
			ШаблонНаименование = НСтр("ru='%1, %2';uk='%1, %2'");
			НовыйПрофильНастроек.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименование,
			Выборка.Организация, Выборка.СпособОбменаЭД);
			
			НовыйПрофильНастроек.Организация              = Выборка.Организация;
			НовыйПрофильНастроек.ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
			НовыйПрофильНастроек.СпособОбменаЭД           = Выборка.СпособОбменаЭД;
			
			АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
			
			Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
				Если ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.УведомлениеОбУточнении
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.Ошибка
					И ЗначениеПеречисления <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					
					НоваяСтрока = НовыйПрофильНастроек.ИсходящиеДокументы.Добавить();
					НоваяСтрока.Формировать = Истина;
					НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
					
					Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
						"ИспользоватьЭлектронныеПодписи") Тогда
						НоваяСтрока.ИспользоватьЭП = Истина;
					КонецЕсли;
					
					// Проставим в новые соглашения прямого обмена версию формата обмена.
					ВерсияФормата = "CML 4.02";
					Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						ВерсияФормата = "";
					ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
						ВерсияФормата = "CML 2.08";
					КонецЕсли;
					НоваяСтрока.ВерсияФормата = ВерсияФормата;
				КонецЕсли;
			КонецЦикла;
			
			НовыйПрофильНастроек.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
			
			// Настройки обмена ЭД
			Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				ПутьКаталога = Выборка.РесурсВходящихДокументов;
				СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
				
				Если СтрокиПути.Количество() >= 1 Тогда
					НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
				КонецЕсли;
				ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
				НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
				
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				НовыйПрофильНастроек.РесурсВходящихДокументов = Выборка.РесурсВходящихДокументов;
				
			ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				НовыйПрофильНастроек.АдресСервера             = Выборка.АдресСервера;
				НовыйПрофильНастроек.Порт                     = Выборка.Порт;
				НовыйПрофильНастроек.ПассивноеСоединение      = Выборка.ПассивноеСоединение;
				НовыйПрофильНастроек.Логин                    = Выборка.Пользователь;
				НовыйПрофильНастроек.Пароль                   = Выборка.Пароль;
				
				ПутьКаталога = Выборка.РесурсВходящихДокументов;
				СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьКаталога);
				
				Если СтрокиПути.Количество() >= 1 Тогда
					НовоеИмя = СтрокиПути[СтрокиПути.Количество() - 1];
				КонецЕсли;
				ПутьКаталога = СтрЗаменить(ПутьКаталога, НовоеИмя, "");
				НовыйПрофильНастроек.РесурсВходящихДокументов = ПутьКаталога;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйПрофильНастроек);

		КонецЦикла;
	КонецЕсли;
	
	// Обновляем р/с СостоянияОбменовЭДЧерезОператоровЭДО
	НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
		|	И ПрофилиНастроекЭДО.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация",    Запись.УдалитьСоглашениеОбИспользованииЭД.Организация);
		Запрос.УстановитьПараметр("СпособОбменаЭД", Запись.УдалитьСоглашениеОбИспользованииЭД.СпособОбменаЭД);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запись.ПрофильНастроекЭДО = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
	// Обновляем соглашения прямого обмена.
	// Проверим на уникальность настроек прямого обмена.
	// Лишние настройки пометим на удаление.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.Ссылка) КАК Ссылка,
	|	СоглашенияОбИспользованииЭД.Контрагент
	|ПОМЕСТИТЬ КонтрагентыДубли
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	(СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СоглашенияОбИспользованииЭД.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СоглашенияОбИспользованииЭД.Ссылка) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка,
	|	СоглашенияОбИспользованииЭД.Контрагент КАК Контрагент
	|ИЗ
	|	КонтрагентыДубли КАК КонтрагентыДубли
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО КонтрагентыДубли.Контрагент = СоглашенияОбИспользованииЭД.Контрагент
	|ГДЕ
	|	(СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	Выборка = Запрос.Выполнить().Выбрать();
	ИскомыйКонтрагент = "";
	Пока Выборка.Следующий() Цикл
		
		Если ИскомыйКонтрагент = Выборка.Контрагент Тогда
			НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
			НастройкаЭДО.УстановитьПометкуУдаления(Истина);
			НастройкаЭДО.Комментарий = НСтр("ru='##Настройка ЭДО помечена на удаление автоматически при обновлении.';uk='##Настройка ЕДО відмічена для вилучення автоматично при оновленні.'");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
		Иначе
			ИскомыйКонтрагент = Выборка.Контрагент;
		КонецЕсли;
	КонецЦикла;
	
	// Заполним недостающую информацию в настройках ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭД.Ссылка,
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
	|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК СТРОКА(100)) КАК ИдентификаторКонтрагента,
	|	ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(100)) КАК ИдентификаторОрганизации,
	|	СоглашенияОбИспользованииЭД.Контрагент,
	|	СоглашенияОбИспользованииЭД.СпособОбменаЭД,
	|	СоглашенияОбИспользованииЭД.РесурсВходящихДокументов,
	|	СоглашенияОбИспользованииЭД.РесурсИсходящихДокументов
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|		ПО СоглашенияОбИспользованииЭД.СпособОбменаЭД = ПрофилиНастроекЭДО.СпособОбменаЭД
	|			И СоглашенияОбИспользованииЭД.Организация = ПрофилиНастроекЭДО.Организация
	|ГДЕ
	|	(СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И НЕ СоглашенияОбИспользованииЭД.ЭтоИнтеркампани";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкаЭДО = Выборка.Ссылка.ПолучитьОбъект();
		
		НастройкаЭДО.Наименование       = Строка(Выборка.Контрагент);
		НастройкаЭДО.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;

		ИсходнаяТаблицаЭД = НастройкаЭДО.ИсходящиеДокументы.Выгрузить();
		
		ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ПрофильНастроекЭДО,       "ПрофильНастроекЭДО");
		ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.СпособОбменаЭД,           "СпособОбменаЭД");
		ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторОрганизации, "ИдентификаторОрганизации");
		ИсходнаяТаблицаЭД.ЗаполнитьЗначения(Выборка.ИдентификаторКонтрагента, "ИдентификаторКонтрагента");
		
		НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
		
		НастройкаЭДО.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
		
		НастройкаЭДО.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
		НастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Действует;
		
		Если ЗначениеЗаполнено(НастройкаЭДО.СертификатОрганизацииДляРасшифровки) Тогда
			ШифроватьДанныеПакетаЭД = Истина;
		КонецЕсли;
		Если НастройкаЭДО.СертификатыПодписейКонтрагента.Количество() > 0 Тогда
			ПроверятьСертификатыПодписей = Истина;
		КонецЕсли;
		
		// Настройки обмена ЭД
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
			ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
			СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
			СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
			
			Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
				НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество() - 1];
			КонецЕсли;
			Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
				НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество() - 1];
			КонецЕсли;
			НастройкаЭДО.КаталогВходящихДокументов = НовоеИмяВходящегоКаталога;
			НастройкаЭДО.КаталогИсходящихДокументов = НовоеИмяИсходящегоКаталога;
			
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			НастройкаЭДО.ЭлектроннаяПочтаКонтрагента = Выборка.РесурсИсходящихДокументов;
		
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			ПутьВходящегоКаталога = Выборка.Ссылка.РесурсВходящихДокументов;
			ПутьИсходящегоКаталога = Выборка.Ссылка.РесурсИсходящихДокументов;
			СтрокиПутиВходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьВходящегоКаталога);
			СтрокиПутиИсходящегоКаталога = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПутьИсходящегоКаталога);
			
			Если СтрокиПутиВходящегоКаталога.Количество() >= 1 Тогда
				НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[СтрокиПутиВходящегоКаталога.Количество()-1];
				
			ИначеЕсли СтрокиПутиВходящегоКаталога.Количество() = 1 Тогда
				НовоеИмяВходящегоКаталога = СтрокиПутиВходящегоКаталога[0];
			КонецЕсли;
			Если СтрокиПутиИсходящегоКаталога.Количество() >= 1 Тогда
				НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[СтрокиПутиИсходящегоКаталога.Количество()-1];
				
			ИначеЕсли СтрокиПутиИсходящегоКаталога.Количество() = 1 Тогда
				НовоеИмяИсходящегоКаталога = СтрокиПутиИсходящегоКаталога[0];
			КонецЕсли;
			НастройкаЭДО.КаталогВходящихДокументовFTP = НовоеИмяВходящегоКаталога;
			НастройкаЭДО.КаталогИсходящихДокументовFTP = НовоеИмяИсходящегоКаталога;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);

	КонецЦикла;
	
	// Обновляем соглашения обмена через оператора.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ДатаИзмененияСтатуса,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Статус,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ФорматФайловОбменаЭД,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.ОписаниеОшибки,
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО КАК УдалитьУчастникиОбменовЭДЧерезОператоровЭДО
	|ГДЕ
	|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И НЕ УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД.ПометкаУдаления";
	
	ВыборкаУчастников = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУчастников.Следующий() Цикл
		
		Если Не ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПометкаУдаления Тогда
			НастройкаЭДО = ВыборкаУчастников.СоглашениеОбИспользованииЭД.ПолучитьОбъект();
			НастройкаЭДО.УстановитьПометкуУдаления(Истина);
			НастройкаЭДО.Наименование = НСтр("ru='Не использовать';uk='Не використовувати'") + " - " + НастройкаЭДО.Наименование;
			НастройкаЭДО.Комментарий = НСтр("ru='##Настройка ЭДО помечена на удаление автоматически при обновлении.';uk='##Настройка ЕДО відмічена для вилучення автоматично при оновленні.'");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
		КонецЕсли;
	КонецЦикла;
	
	// Определим и заполним в электронных документах реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент,
	|	ЭДПрисоединенныеФайлы.Контрагент,
	|	ЭДПрисоединенныеФайлы.Организация,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|		ПО ЭДПрисоединенныеФайлы.Контрагент = СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент
	|			И ЭДПрисоединенныеФайлы.Организация = СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО.Организация
	|ГДЕ
	|	НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|	И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И ЭДПрисоединенныеФайлы.СоглашениеЭД <> ЗНАЧЕНИЕ(Справочник.СоглашенияОбИспользованииЭД.ПустаяСсылка)
	|	И ЭДПрисоединенныеФайлы.Контрагент ССЫЛКА Справочник.Контрагенты
	|
	|СГРУППИРОВАТЬ ПО
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО,
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
	|	ЭДПрисоединенныеФайлы.Контрагент,
	|	ЭДПрисоединенныеФайлы.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент.ПолучитьОбъект();
		ЭлектронныйДокумент.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
		ЭлектронныйДокумент.СоглашениеЭД       = Выборка.НастройкаЭДО;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлектронныйДокумент);
	КонецЦикла;
	
	// Определим и заполним в незавершенных пакетахЭД реквизиты "ПрофильНастроекЭДО" и "НастройкаЭДО".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК ПакетЭД,
	|	ПакетЭД.Отправитель,
	|	ПакетЭД.Получатель,
	|	ПакетЭД.ПрофильНастроекЭДО,
	|	ПакетЭД.Направление
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	(ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке)
	|			ИЛИ ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке))
	|	И НЕ ПакетЭД.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Отправитель) И ЗначениеЗаполнено(Выборка.Получатель)
			И Не ЗначениеЗаполнено(Выборка.ПрофильНастроекЭДО) Тогда
			Если Выборка.Направление = Перечисления.НаправленияЭД.Входящий Тогда
				
				ПараметрыНастройкиЭДО = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Получатель, Выборка.Отправитель);
			ИначеЕсли Выборка.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
				
				ПараметрыНастройкиЭДО = ОбменСКонтрагентамиСлужебный.ПолучитьНастройкиОбменаЭДПоИД(Выборка.Отправитель, Выборка.Получатель);
			КонецЕсли;
			Если ПараметрыНастройкиЭДО <> Неопределено Тогда
				ПакетЭД = Выборка.ПакетЭД.ПолучитьОбъект();
				ПакетЭД.ПрофильНастроекЭДО = ПараметрыНастройкиЭДО.ПрофильНастроекЭДО;
				ПакетЭД.НастройкаЭДО       = ПараметрыНастройкиЭДО.НастройкаЭДО;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПакетЭД);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


// Процедура - Выполняет первоначальное заполнение регистра на основе справочника контрагентов.
// 		Заполнение выполняется:
// 		1. После ручного включения проверки фоновым заданием.
// 		2. В режиме сервисов - обновлением ИБ в каждой области отдельно.
//
// Параметры:
//  Параметры	 - Структура или Неопределено - Параметры очереди заданий в модели сервиса.
//		В локальной версии - Неопределено.
Процедура ПроверитьКонтрагентовБЭД(Параметры = Неопределено) Экспорт
	
	ЭтоОбновлениеИБВМоделиСервиса = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме,
	// либо в модели сервисов в отложенном обновлении из областей данных.
	Если НЕ ЭтоОбновлениеИБВМоделиСервиса
		ИЛИ ЭтоОбновлениеИБВМоделиСервиса И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ОбменСКонтрагентамиСлужебный.ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления видов ЭД актуальными.
// Используется при необходимости добавить новый вид ЭД в справочники БЭД
//
// Параметры:
//  ВидЭД - ЗначениеПеречисления - значение перечисления ВидыЭД.
//
Процедура ОбновитьНастройкиЭДО(ВидЭД) Экспорт
	
	НачатьТранзакцию();
	
	// Обновим элементы справочника Профили настроек ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомыйПрофильНастроек = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
		Если СтрокаВидЭД = Неопределено Тогда
			
			НоваяСтрока = ИскомыйПрофильНастроек.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент         = ВидЭД;
			Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеПодписи") Тогда
				НоваяСтрока.ИспользоватьЭП = Истина;
			КонецЕсли;
			
			ВерсияФормата = "CML 2.08";
			Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				ВерсияФормата = "";
			КонецЕсли;
			НоваяСтрока.ВерсияФормата = ВерсияФормата;
			
			ЗаписатьОбъект = Истина;
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомыйПрофильНастроек);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим элементы справочника Настройки ЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ИскомаяНастройка = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
		
		Если СтрокаВидЭД = Неопределено Тогда
			НоваяСтрока = ИскомаяНастройка.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент         = ВидЭД;
			Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеПодписи") Тогда
				НоваяСтрока.ИспользоватьЭП = Истина;
			КонецЕсли;
			
			ВерсияФормата = "CML 2.08";
			Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				
				ВерсияФормата = "";
			КонецЕсли;
			НоваяСтрока.ВерсияФормата = ВерсияФормата;
			
			Если ИскомаяНастройка.РасширенныйРежимНастройкиСоглашения Тогда
				НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ИсходящиеДокументы[0].ПрофильНастроекЭДО;
				НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.ИсходящиеДокументы[0].СпособОбменаЭД;
				НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторОрганизации;
				НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторКонтрагента;
			Иначе
				НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ПрофильНастроекЭДО;
				НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.СпособОбменаЭД;
				НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИдентификаторОрганизации;
				НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИдентификаторКонтрагента;
			КонецЕсли;
			
			ЗаписатьОбъект = Истина;
			
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомаяНастройка);
		КонецЕсли;
		
	КонецЦикла;

	// Обновим элементы справочника Сертификаты ЭП.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО (СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка)
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.ПометкаУдаления
	|	И НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.Отозван
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|			ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Сертификат КАК СертификатЭП,
	|	ПодписываемыеВидыЭД.ВидЭД,
	|	ПодписываемыеВидыЭД.Использовать
	|ИЗ
	|	Сертификаты КАК Сертификаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|		ПО Сертификаты.Сертификат.Ссылка = ПодписываемыеВидыЭД.СертификатЭП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Сертификат КАК СертификатЭП
	|ИЗ
	|	Сертификаты КАК Сертификаты";
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[2].Выбрать();
	ТЗ = Результат[1].Выгрузить();
	Попытка
		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("СертификатЭП", Выборка.СертификатЭП);
			КопияТЗ = ТЗ.Скопировать(Отбор);
			ЗаписатьОбъект = Ложь;
			
			СтрокаВидЭД = КопияТЗ.Найти(ВидЭД, "ВидЭД");
			Если СтрокаВидЭД = Неопределено Тогда
				НоваяСтрока = КопияТЗ.Добавить();
				НоваяСтрока.ВидЭД        = ВидЭД;
				НоваяСтрока.Использовать = Истина;
				НоваяСтрока.СертификатЭП = Выборка.СертификатЭП;
				ЗаписатьОбъект = Истина;
			ИначеЕсли НЕ СтрокаВидЭД.Использовать Тогда
				СтрокаВидЭД.Использовать = Истина;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				СохранитьПодписываемыеВидыЭД(Выборка.СертификатЭП, КопияТЗ);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ВидОперации = НСтр("ru='Обновление информационной базы';uk='Оновлення інформаційної бази'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.2.4.4
// Переносит настройки контекста криптографии в объект БСП СоздаватьЭлектронныеПодписиНаСервере.
//
Процедура ПеренестиНастройкиКонтекстаКриптографии() Экспорт
	
	НачатьТранзакцию();
	Попытка
		Если Константы.ИспользоватьЭлектронныеПодписи.Получить() = Истина Тогда
			РаботатьСЭПНаСервере = НЕ (ОбщегоНазначения.ИнформационнаяБазаФайловая()
					ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено())
				И (Константы.УдалитьКонтекстКриптографии.Получить() = Перечисления.УдалитьКонтекстыРаботыСЭД.НаСервере
					ИЛИ Константы.УдалитьКонтекстАвторизации.Получить() = Перечисления.УдалитьКонтекстыРаботыСЭД.НаСервере);
			МенеджерЗначения = Константы.СоздаватьЭлектронныеПодписиНаСервере.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = РаботатьСЭПНаСервере;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			МенеджерЗначения = Константы.ПроверятьЭлектронныеПодписиНаСервере.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = РаботатьСЭПНаСервере;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаление устаревших отложенных разделенных обработчиков обновления.
Процедура УдалитьУстаревшиеОбработчики() Экспорт
	
	ОбновлениеИнформационнойБазы.УдалитьОтложенныйОбработчикИзОчереди(
		"ЭлектронныеДокументыСлужебный.ПроверитьНепроверенныхКонтрагентов");
	
КонецПроцедуры

// Обработчик обновления БЭД 1.3.2.22
// Переносит настройки контекста криптографии в объект БСП СоздаватьЭлектронныеПодписиНаСервере.
//
Процедура НастроитьАвтоПереходНаНовыеВерсииФорматовЭД() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаЭДО);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru='Обновление подсистемы обмена с контрагентами';uk='Оновлення підсистеми обміну з контрагентами'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru='При обновлении подсистемы обмена с контрагентами произошла ошибка';uk='При оновленні підсистеми обміну з контрагентами сталася помилка'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьПодписываемыеВидыЭД(СертификатСсылка, ПодписываемыеЭД)
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СертификатЭП.Установить(СертификатСсылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(ПодписываемыеЭД);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

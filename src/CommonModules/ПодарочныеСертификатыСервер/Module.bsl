
#Область ПрограммныйИнтерфейс

// Процедура записывает в базу данных подарочный сертификат на основании
// переданной структуры с данными подарочного сертификата.
//
// Параметры
//  СтруктураДанныхКарты - Структура с данными подарочного сертификата
//
// Возвращаемое значение
//  СправочникСсылка.ПодарочныеСертификаты
//
Функция ЗарегистрироватьПодарочныйСертификат(СтруктураДанныхПодарочногоСертификата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодарочныйСертификатОбъект = Справочники.ПодарочныеСертификаты.СоздатьЭлемент();
	
	ПодарочныйСертификатОбъект.Штрихкод      = СтруктураДанныхПодарочногоСертификата.Штрихкод;
	ПодарочныйСертификатОбъект.МагнитныйКод  = СтруктураДанныхПодарочногоСертификата.МагнитныйКод;
	
	ПодарочныйСертификатОбъект.Владелец      = СтруктураДанныхПодарочногоСертификата.ВидПодарочногоСертификата;
	Если ЗначениеЗаполнено(СтруктураДанныхПодарочногоСертификата.СерийныйНомер) Тогда
		ПодарочныйСертификатОбъект.Код = СтруктураДанныхПодарочногоСертификата.СерийныйНомер;
	КонецЕсли;
	
	ПодарочныйСертификатОбъект.Наименование = Строка(ПодарочныйСертификатОбъект.Владелец)
	                                        + ?(ЗначениеЗаполнено(ПодарочныйСертификатОбъект.Штрихкод), " " + Строка(ПодарочныйСертификатОбъект.Штрихкод), "")
	                                        + ?(ЗначениеЗаполнено(ПодарочныйСертификатОбъект.МагнитныйКод), " " + Строка(ПодарочныйСертификатОбъект.МагнитныйКод), "");
	ПодарочныйСертификатОбъект.Записать();
	
	Возврат ПодарочныйСертификатОбъект.Ссылка;
	
КонецФункции

// Функция возвращает тип кода подарочного сертификата, если только он
// используется в видах подарочных сертификатов.
//
// Параметры
//  Нет
//
// Возвращаемое значение
//  Перечисление.ТипыКодовКарт / Неопределено
//
Функция ПолучитьОсновнойТипКодаПодарочногоСертификата() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыПодарочныхСертификатов.ТипКарты КАК ТипКарты
	|ИЗ
	|	Справочник.ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Количество = Выборка.Количество();
	Если Количество = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Количество = 1 Тогда
		Выборка.Следующий();
		Если Выборка.ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
			Возврат Перечисления.ТипыКодовКарт.Штрихкод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			Возврат Перечисления.ТипыКодовКарт.МагнитныйКод;
		ИначеЕсли Выборка.ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Возврат Неопределено;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура проверяет заполнение подарочных сертификатов табличной части "ПодарочныеСертификаты".
//
// Параметры:
//	Объект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ПроверитьЗаполнениеПодарочныхСертификатов(Объект, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопустимыеСтатусы = Новый Массив;
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияПодарочныхСертификатов") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.НеАктивирован);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АннулированиеПодарочныхСертификатов") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Активирован);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Возвращен);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.ЧастичноПогашен);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.ПолностьюПогашен);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Активирован);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.НеАктивирован);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ") Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.Активирован);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыПодарочныхСертификатов.ЧастичноПогашен);
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	Таблица.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ПодарочныеСертификаты
	|ИЗ
	|&ПодарочныеСертификаты КАК Таблица
	|;
	|
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.НомерСтроки КАК НомерСтроки,
	|	ПодарочныеСертификаты.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|	ЕСТЬNULL(ПодарочныеСертификаты.ПодарочныйСертификат.Владелец.Номинал, 0) КАК Номинал,
	|	ЕСТЬNULL(ПодарочныеСертификаты.ПодарочныйСертификат.Владелец.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
	|	ПодарочныеСертификаты.ПодарочныйСертификат.Владелец КАК ВидСертификата,
	|	ПодарочныеСертификаты.ПодарочныйСертификат.Владелец.СтатьяДоходов КАК СтатьяДоходов,
	|	ЕСТЬNULL(ИсторияПодарочныхСертификатовСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус,
	|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток,0) КАК Остаток,
	|	АктивацияПодарочныхСертификатов.Период КАК ДатаАктивации,
	|	АктивацияПодарочныхСертификатов.Регистратор КАК РегистраторАктивации,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕНЬ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, НЕДЕЛЯ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, МЕСЯЦ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, КВАРТАЛ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ГОД, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕКАДА, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		КОГДА АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ПОЛУГОДИЕ, АктивацияПодарочныхСертификатов.ПодарочныйСертификат.Владелец.КоличествоПериодовДействия)
	|		ИНАЧЕ АктивацияПодарочныхСертификатов.Период
	|	КОНЕЦ, ДатаВремя(1,1,1)) КАК ДатаОкончанияДействия
	|ИЗ
	|	ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&Дата, ПодарочныйСертификат В (Выбрать Т.ПодарочныйСертификат Из ПодарочныеСертификаты КАК Т)) КАК ИсторияПодарочныхСертификатовСрезПоследних
	|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = ИсторияПодарочныхСертификатовСрезПоследних.ПодарочныйСертификат
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = АктивацияПодарочныхСертификатов.ПодарочныйСертификат
	|			И (АктивацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&Дата, ПодарочныйСертификат В (Выбрать Т.ПодарочныйСертификат Из ПодарочныеСертификаты КАК Т)) КАК ПодарочныеСертификатыОстатки
	|		ПО ПодарочныеСертификаты.ПодарочныйСертификат = ПодарочныеСертификатыОстатки.ПодарочныйСертификат
	|
	|");
	
	Запрос.УстановитьПараметр("ПодарочныеСертификаты", Объект.ПодарочныеСертификаты.Выгрузить());
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата - 1, ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") Тогда
		РеквизитыВидПодарочногоСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидПодарочногоСертификата, "Номинал, Валюта");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков")
			И РеквизитыВидПодарочногоСертификата.Номинал < Объект.ПодарочныеСертификаты[Выборка.НомерСтроки - 1].СуммаВВалютеСертификата Тогда
			
			ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""Подарочные сертификаты"" имеет остаток, превышающий номинал %Номинал% %Валюта%.';uk='Подарунковий сертифікат %Сертификат% у рядку %НомерСтроки% списку ""Подарункові сертифікати"" має залишок, що перевищує номінал %Номинал% %Валюта%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  Выборка.ПодарочныйСертификат);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номинал%",     РеквизитыВидПодарочногоСертификата.Номинал);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      РеквизитыВидПодарочногоСертификата.Валюта);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
				
		КонецЕсли;
		
		Если (ДопустимыеСтатусы.Найти(Выборка.Статус) = Неопределено И ТипЗнч(Объект) <> Тип("ДокументОбъект.ВводОстатков"))
			ИЛИ (ДопустимыеСтатусы.Найти(Выборка.Статус) = Неопределено И ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") И Выборка.РегистраторАктивации <> Объект.Ссылка) Тогда
			
			ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""Подарочные сертификаты"" имеет недопустимый статус ""%Статус%"".';uk='Подарунковий сертифікат %Сертификат% у рядку %НомерСтроки% списку ""Подарункові сертифікати"" має некоректний статус ""%Статус%"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  Выборка.ПодарочныйСертификат);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",      Выборка.Статус);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
			Если Выборка.ДатаОкончанияДействия < Объект.Дата Тогда
			
				ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""Подарочные сертификаты"" просрочен. Дата окончания действия %ДатаОкончанияДействия%.';uk='Подарунковий сертифікат %Сертификат% у рядку %НомерСтроки% списку ""Подарункові сертифікати"" прострочений. Дата закінчення дії %ДатаОкончанияДействия%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",             Выборка.ПодарочныйСертификат);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",            Выборка.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействия%",  Выборка.ДатаОкончанияДействия);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
					,
					Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратПодарочныхСертификатов") Тогда
			Если Не Выборка.Номинал = Выборка.Остаток Тогда
				
				ТекстОшибки = НСтр("ru='Подарочный сертификат %Сертификат% в строке %НомерСтроки% списка ""Подарочные сертификаты"" имеет остаток %Остаток% %Валюта% при номинале в %Номинал% %Валюта% и недоступен для возврата.';uk='Подарунковий сертифікат %Сертификат% у рядку %НомерСтроки% списку ""Подарункові сертифікати"" має залишок %Остаток% %Валюта% при номіналі в %Номинал% %Валюта% і недоступний для повернення.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  Выборка.ПодарочныйСертификат);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Остаток%",     Выборка.Остаток);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      Выборка.Валюта);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номинал%",     Выборка.Номинал);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
					,
					Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.СтатьяДоходов) Тогда
			
			ТекстОшибки = НСтр("ru='В строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" не заполнены данные вида сертификата %ВидСертификата%. 
                                    |Заполните статью доходов в виде сертификата.'
                                    |;uk='У рядку %НомерСтроки% табличної частини """"Подарункові сертифікати"""" не заповнені дані виду сертифіката %ВидСертификата%. 
                                    |Заповніть статтю доходів у виді сертифіката.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидСертификата%",  Выборка.ВидСертификата);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сертификат%",  Выборка.ПодарочныйСертификат);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатков") Тогда
		
		ТипКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПодарочногоСертификата, "ТипКарты");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Таблица.ВидПодарочногоСертификата КАК ВидПодарочногоСертификата,
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.ДлинаШтрихкода КАК ДлинаШтрихкода,
		|	Таблица.ДлинаМагнитногоКода КАК ДлинаМагнитногоКода,
		|	Таблица.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&ПодарочныеСертификаты КАК Таблица
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ КорректныеКоды
		|ИЗ
		|	Таблица КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|		ПО ШаблоныКодовПодарочныхСертификатов.Ссылка = Таблица.ВидПодарочногоСертификата
		|
		|	//ПроверитьМагнитныйКод И ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода <= Таблица.МагнитныйКод
		|	//ПроверитьМагнитныйКод И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода  >= Таблица.МагнитныйКод
		|	//ПроверитьМагнитныйКод И ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода           = Таблица.ДлинаМагнитногоКода
		|
		|	//ПроверитьШтрихкод И ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода <= Таблица.Штрихкод
		|	//ПроверитьШтрихкод И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода  >= Таблица.Штрихкод
		|	//ПроверитьШтрихкод И ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода           = Таблица.ДлинаШтрихкода
		|;
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.Штрихкод КАК Штрихкод
		|ИЗ
		|	Таблица
		|ГДЕ
		|	Таблица.НомерСтроки НЕ В (ВЫБРАТЬ Т.НомерСтроки Из КорректныеКоды КАК Т)
		|");
		
		ПодарочныеСертификаты = Объект.ПодарочныеСертификаты.Выгрузить();
		ПодарочныеСертификаты.Колонки.Добавить("ВидПодарочногоСертификата", Новый ОписаниеТипов("СправочникСсылка.ВидыПодарочныхСертификатов"));
		ПодарочныеСертификаты.Колонки.Добавить("ДлинаШтрихкода",            ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(3,0));
		ПодарочныеСертификаты.Колонки.Добавить("ДлинаМагнитногоКода",       ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(3,0));
		Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
			СтрокаТЧ.ВидПодарочногоСертификата = Объект.ВидПодарочногоСертификата;
			СтрокаТЧ.ДлинаШтрихкода = СтрДлина(СтрокаТЧ.Штрихкод);
			СтрокаТЧ.ДлинаМагнитногоКода = СтрДлина(СтрокаТЧ.МагнитныйКод);
		КонецЦикла;
		
		ТипКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидПодарочногоСертификата, "ТипКарты");
		Если ТипКарты = Перечисления.ТипыКарт.Магнитная ИЛИ ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПроверитьМагнитныйКод", "");
		КонецЕсли;
		Если ТипКарты = Перечисления.ТипыКарт.Штриховая ИЛИ ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПроверитьШтрихкод", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПодарочныеСертификаты", ПодарочныеСертификаты);
		
		Если ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
			ТекстОшибки = НСтр("ru='Магнитный код %МагнитныйКод% в строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""';uk='Магнітний код %МагнитныйКод% у рядку %НомерСтроки% табличної частини """"Подарункові сертифікати"""" не відповідає вимогам виду подарункового сертифіката """"%ВидПодарочногоСертификата%""""'");
		ИначеЕсли ТипКарты = Перечисления.ТипыКарт.Штриховая  Тогда
			ТекстОшибки = НСтр("ru='Штрихкод %Штрихкод% в строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""';uk='Штрихкод %Штрихкод% у рядку %НомерСтроки% табличної частини """"Подарункові сертифікати"""" не відповідає вимогам виду подарункового сертифіката """"%ВидПодарочногоСертификата%""""'");
		Иначе
			ТекстОшибки = НСтр("ru='Магнитный код %МагнитныйКод% или штрихкод %Штрихкод% в строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" не соответствует требованиям вида подарочного сертификата """"%ВидПодарочногоСертификата%""""';uk='Магнітний код %МагнитныйКод% або штрихкод %Штрихкод% у рядку %НомерСтроки% табличної частини """"Подарункові сертифікати"""" не відповідає вимогам виду подарункового сертифіката """"%ВидПодарочногоСертификата%""""'");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Текст = ТекстОшибки;
			Текст = СтрЗаменить(Текст, "%ВидПодарочногоСертификата%",             Объект.ВидПодарочногоСертификата);
			Текст = СтрЗаменить(Текст, "%Штрихкод%",     Выборка.Штрихкод);
			Текст = СтрЗаменить(Текст, "%МагнитныйКод%", Выборка.МагнитныйКод);
			Текст = СтрЗаменить(Текст, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", Выборка.НомерСтроки, "ПодарочныйСертификат"),
				,
				Отказ);
		
		КонецЦикла;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&ПодарочныеСертификаты КАК Таблица
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.Штрихкод КАК Штрихкод,
		|	Таблица.МагнитныйКод КАК МагнитныйКод,
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.СерийныйНомер КАК СерийныйНомер,
		|	ЕСТЬNULL(СправочникПодарочныеСертификатыПоШтрихкоду.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоШтрихкоду,
		|	ЕСТЬNULL(СправочникПодарочныеСертификатыПоМагнитномуКоду.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоМагнитномуКоду,
		|	ЕСТЬNULL(СправочникПодарочныйСертификатПоСерийномуНомеру.Ссылка, ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)) КАК ПодарочныйСертификатПоСерийномуНомеру
		|ИЗ
		|	Таблица КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныеСертификатыПоШтрихкоду
		|		ПО СправочникПодарочныеСертификатыПоШтрихкоду.Штрихкод = Таблица.Штрихкод
		|		И СправочникПодарочныеСертификатыПоШтрихкоду.Владелец = &ВидПодарочногоСертификата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныеСертификатыПоМагнитномуКоду
		|		ПО СправочникПодарочныеСертификатыПоМагнитномуКоду.МагнитныйКод = Таблица.МагнитныйКод
		|		И СправочникПодарочныеСертификатыПоМагнитномуКоду.Владелец = &ВидПодарочногоСертификата
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК СправочникПодарочныйСертификатПоСерийномуНомеру
		|		ПО СправочникПодарочныйСертификатПоСерийномуНомеру.Код = Таблица.СерийныйНомер
		|");
		
		Запрос.УстановитьПараметр("ВидПодарочногоСертификата", Объект.ВидПодарочногоСертификата);
		Запрос.УстановитьПараметр("ПодарочныеСертификаты", Объект.ПодарочныеСертификаты.Выгрузить());
		
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТЧ Из ПодарочныеСертификаты Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПодарочныйСертификат) Тогда
				
				НайденнаяСтрока = Таблица.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаТЧ.НомерСтроки))[0];
				
				Если ТипКарты = Перечисления.ТипыКарт.Штриховая Тогда
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" данные заполнены некорректно.
                                         |Для штрихкода %Штрихкод% сертификат %1%.
                                         |Для серийного номера %СерийныйНомер% сертификат %2%.'
                                         |;uk='У рядку %НомерСтроки% табличної частини """"Подарункові сертифікати"""" дані заповнені некоректно.
                                         |Для штрихкоду %Штрихкод% сертифікат %1%.
                                         |Для серійного номера %СерийныйНомер% сертифікат %2%.'");
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду),НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду,НСтр("ru='не найден';uk='не знайдений'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru='не найден';uk='не знайдений'")));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
					КонецЕсли;
					
				ИначеЕсли ТипКарты = Перечисления.ТипыКарт.Магнитная Тогда
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" данные заполнены некорректно.
                                         |Для магнитного кода %МагнитныйКод% сертификат %1%.
                                         |Для серийного номера %СерийныйНомер% сертификат %2%.'
                                         |;uk='У рядку %НомерСтроки% табличної частини """"Подарункові сертифікати"""" дані заповнені некоректно.
                                         |Для магнітного коду %МагнитныйКод% сертифікат %1%.
                                         |Для серійного номера %СерийныйНомер% сертифікат %2%.'");
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду),НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду,НСтр("ru='не найден';uk='не знайдений'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru='не найден';uk='не знайдений'")));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
						
					КонецЕсли;
					
				Иначе
					
					Если НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду
						ИЛИ НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру <> НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду Тогда
						
						Текст = НСтр("ru='В строке %НомерСтроки% табличной части """"Подарочные сертификаты"""" данные заполнены некорректно.
                                         |Для магнитного кода %МагнитныйКод% сертификат %1%.
                                         |Для штрихкода %Штрихкод% сертификат %2%.
                                         |Для серийного номера %СерийныйНомер% сертификат %3%.'
                                         |;uk='У рядку %НомерСтроки% табличної частини """"Подарункові сертифікати"""" дані заповнені некоректно.
                                         |Для магнітного коду %МагнитныйКод% сертифікат %1%.
                                         |Для штрихкоду %Штрихкод% сертифікат %2%.
                                         |Для серійного номера %СерийныйНомер% сертифікат %3%.'");
						Текст = СтрЗаменить(Текст, "%Штрихкод%",      НайденнаяСтрока.Штрихкод);
						Текст = СтрЗаменить(Текст, "%СерийныйНомер%", НайденнаяСтрока.СерийныйНомер);
						Текст = СтрЗаменить(Текст, "%МагнитныйКод%",  НайденнаяСтрока.МагнитныйКод);
						Текст = СтрЗаменить(Текст, "%НомерСтроки%",   НайденнаяСтрока.НомерСтроки);
						Текст = СтрЗаменить(Текст, "%1%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду),НайденнаяСтрока.ПодарочныйСертификатПоМагнитномуКоду,НСтр("ru='не найден';uk='не знайдений'")));
						Текст = СтрЗаменить(Текст, "%2%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду),НайденнаяСтрока.ПодарочныйСертификатПоШтрихкоду,НСтр("ru='не найден';uk='не знайдений'")));
						Текст = СтрЗаменить(Текст, "%3%", ?(ЗначениеЗаполнено(НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру),НайденнаяСтрока.ПодарочныйСертификатПоСерийномуНомеру,НСтр("ru='не найден';uk='не знайдений'")));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодарочныеСертификаты", НайденнаяСтрока.НомерСтроки, "ПодарочныйСертификат"),
							,
							Отказ);
						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КлючевыеРеквизиты = Новый Массив;
	КлючевыеРеквизиты.Добавить("ПодарочныйСертификат");
	ОбщегоНазначенияУТ.ПроверитьНаличиеДублейСтрокТЧ(Объект, "ПодарочныеСертификаты", КлючевыеРеквизиты, Отказ, НСтр("ru='Подарочные сертификаты';uk='Подарункові сертифікати'"));
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита "СуммаВВалютеСертификата" в табличной части ПодарочныеСертификаты.
//
// Параметры:
//	ТабличнаяЧасть - ТабличнаяЧасть - подарочные сертификаты
//	Дата - Дата - Дата документа
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//
Процедура ЗаполнитьСуммуВВалютеСертификатаВТабличнойЧасти(ТабличнаяЧасть, Дата, Валюта) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.СуммаВВалютеСертификата КАК СуммаВВалютеСертификата,
	|	ТаблицаДокумента.ПодарочныйСертификат КАК ПодарочныйСертификат
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СуммаВВалютеСертификата = 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СуммаВВалютеСертификата = 0 ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|		)
	|	ИНАЧЕ
	|		ТаблицаДокумента.СуммаВВалютеСертификата
	|	КОНЕЦ КАК СуммаВВалютеСертификата
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|	
	|	// Определим курс валюты документа.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютДокумента
	|	ПО
	|		Истина
	|		
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|	ПО
	|		ТаблицаДокумента.ПодарочныйСертификат.Владелец.Валюта = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	Запрос.Параметры.Вставить("ТаблицаДокумента", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	// Получим таблицу документа с рассчитанной суммой взаиморасчетов.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПоискПодарочныхСертификатов

// Функция выполняет поиск видов подарочных сертификатов, которые могут иметь заданный код и тип кода.
//
// Параметры
//  КодКарты - Строка
//  ТипКода - Перечисление.ТипыКодовКарт
//
// Возвращаемое значение
//  Массив ссылок на виды подарочных сертификатов.
//
Функция ПолучитьВозможныеВидыПодарочныхСертификатовПоКодуПодарочногоСертификата(КодКарты, ТипКода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыПодарочныхСертификатов = Новый Массив;
	
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШаблоныКодовПодарочныхСертификатов.Ссылка КАК ВидПодарочногоСертификата
		|ИЗ
		|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|ГДЕ
		|	  ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода <= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода  >= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода = &ДлинаКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоДиапазонаМагнитногоКода");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШаблоныКодовПодарочныхСертификатов.Ссылка КАК ВидПодарочногоСертификата
		|ИЗ
		|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
		|ГДЕ
		|	ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода <= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода >= &КодКарты
		|	И ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода = &ДлинаКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода");
	КонецЕсли;

	Запрос.УстановитьПараметр("КодКарты",  Строка(КодКарты));
	Запрос.УстановитьПараметр("ДлинаКода", СтрДлина(Строка(КодКарты)));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыПодарочныхСертификатов.Добавить(Выборка.ВидПодарочногоСертификата);
	КонецЦикла;
	
	Возврат ВидыПодарочныхСертификатов;
	
КонецФункции

// Функция выполняет поиск подарочных сертификатов
//
// Параметры
//  КодКарты - Строка
//  ТипКода - Перечисление.ТипыКодовКарт
//
// Возвращаемое значение
//  Структура. В структуре содержится 2 таблицы значений: ЗарегистрированныеПодарочныеСертификаты
//  и НеЗарегистрированныеПодарочныеСертификаты.
//
Функция НайтиПодарочныеСертификаты(КодКарты, ТипКода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарегистрированныеПодарочныеСертификаты = Новый Массив;
	НеЗарегистрированныеПодарочныеСертификаты = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка                            КАК Ссылка,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ПериодДействия             КАК ПериодДействия,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Номинал                    КАК Номинал,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.Валюта                     КАК Валюта,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.ТипКарты                   КАК ТипКарты,
	|	ШаблоныКодовПодарочныхСертификатов.Ссылка.СегментНоменклатуры        КАК СегментНоменклатуры
	|ПОМЕСТИТЬ ВидыПодарочныхСертификатов
	|ИЗ
	|	Справочник.ВидыПодарочныхСертификатов.ШаблоныКодовПодарочныхСертификатов КАК ШаблоныКодовПодарочныхСертификатов
	|ГДЕ
	|	&УсловиеНачалоДиапазона                    <= &КодКарты
	|	И &УсловиеКонецДиапазона                   >= &КодКарты
	|	И &УсловиеДлинаКода                         = &ДлинаКода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
	|	ПодарочныеСертификаты.Наименование          КАК Наименование,
	|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
	|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
	|	ПодарочныеСертификаты.Код                   КАК СерийныйНомер,
	|	ЕСТЬNULL(ИсторияПодарочныхСертификатов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован)) КАК Статус,
	|	ЕСТЬNULL(ОстаткиДенежныхСредствНаПодарочныхСертификатах.СуммаОстаток, 0)                                           КАК Остаток,
	|	
	|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
	|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
	|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
	|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
	|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
	|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры,
	|
	|	ЕСТЬNULL(АктивацияПодарочныхСертификатов.Период, ДатаВремя(1,1,1)) КАК ДатаНачалаДействия,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕНЬ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, НЕДЕЛЯ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, МЕСЯЦ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, КВАРТАЛ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ГОД, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ДЕКАДА, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		КОГДА ПодарочныеСертификаты.Владелец.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(АктивацияПодарочныхСертификатов.Период, ПОЛУГОДИЕ, ПодарочныеСертификаты.Владелец.КоличествоПериодовДействия)
	|		ИНАЧЕ АктивацияПодарочныхСертификатов.Период
	|	КОНЕЦ, ДатаВремя(1,1,1)) КАК ДатаОкончанияДействия
	|
	|ПОМЕСТИТЬ ПодарочныеСертификаты
	|ИЗ
	|	Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыПодарочныхСертификатов
	|		ПО ВидыПодарочныхСертификатов.Ссылка  = ПодарочныеСертификаты.Владелец
	|		 И &ИмяПоляКодКарты = &КодКарты
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&ТекущаяДата) КАК ИсторияПодарочныхСертификатов
	|		ПО ИсторияПодарочныхСертификатов.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПодарочныеСертификаты.Остатки(&ТекущаяДата) КАК ОстаткиДенежныхСредствНаПодарочныхСертификатах
	|		ПО ОстаткиДенежныхСредствНаПодарочныхСертификатах.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияПодарочныхСертификатов
	|		ПО ПодарочныеСертификаты.Ссылка = АктивацияПодарочныхСертификатов.ПодарочныйСертификат
	|			И (АктивацияПодарочныхСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован))
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1                                           КАК Порядок,
	|	ПодарочныеСертификаты.Ссылка                КАК Ссылка,
	|	ПодарочныеСертификаты.Наименование          КАК Наименование,
	|	ПодарочныеСертификаты.МагнитныйКод          КАК МагнитныйКод,
	|	ПодарочныеСертификаты.Штрихкод              КАК Штрихкод,
	
	|	ПодарочныеСертификаты.СерийныйНомер         КАК СерийныйНомер,
	|	ПодарочныеСертификаты.Статус                КАК Статус,
	|	ПодарочныеСертификаты.Остаток               КАК Остаток,
	|	
	|	ПодарочныеСертификаты.ВидПодарочногоСертификата         КАК ВидПодарочногоСертификата,
	|	ПодарочныеСертификаты.ПериодДействия                    КАК ПериодДействия,
	|	ПодарочныеСертификаты.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ПодарочныеСертификаты.Номинал                           КАК Номинал,
	|	ПодарочныеСертификаты.Валюта                            КАК Валюта,
	|	ПодарочныеСертификаты.ТипКарты                          КАК ТипКарты,
	|	ПодарочныеСертификаты.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	ПодарочныеСертификаты.ДатаНачалаДействия                КАК ДатаНачалаДействия,
	|	ПодарочныеСертификаты.ДатаОкончанияДействия             КАК ДатаОкончанияДействия
	|ИЗ
	|	ПодарочныеСертификаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                         КАК Порядок,
	|	ЗНАЧЕНИЕ(Справочник.ПодарочныеСертификаты.ПустаяСсылка)   КАК Ссылка,
	|	Неопределено                                              КАК Наименование,
	|	&МагнитныйКод                                             КАК МагнитныйКод,
	|	&Штрихкод                                                 КАК Штрихкод,
	|	Неопределено                                                       КАК СерийныйНомер,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.НеАктивирован) КАК Статус,
	|	0                                                                  КАК Остаток,
	|	
	|	ВидыПодарочныхСертификатов.Ссылка                            КАК ВидПодарочногоСертификата,
	|	ВидыПодарочныхСертификатов.ПериодДействия                    КАК ПериодДействия,
	|	ВидыПодарочныхСертификатов.КоличествоПериодовДействия        КАК КоличествоПериодовДействия,
	|	ВидыПодарочныхСертификатов.Номинал                           КАК Номинал,
	|	ВидыПодарочныхСертификатов.Валюта                            КАК Валюта,
	|	ВидыПодарочныхСертификатов.ТипКарты                          КАК ТипКарты,
	|	ВидыПодарочныхСертификатов.СегментНоменклатуры               КАК СегментНоменклатуры,
	|	
	|	&ТекущаяДата КАК ДатаНачалаДействия,
	|	ВЫБОР
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕКАДА, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		КОГДА ВидыПодарочныхСертификатов.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ПОЛУГОДИЕ, ВидыПодарочныхСертификатов.КоличествоПериодовДействия)
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ КАК ДатаОкончанияДействия
	|ИЗ
	|	ВидыПодарочныхСертификатов КАК ВидыПодарочныхСертификатов
	|ГДЕ
	|	(НЕ ВидыПодарочныхСертификатов.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.ВидПодарочногоСертификата
	|				ИЗ
	|					ПодарочныеСертификаты КАК Т))
	|УПОРЯДОЧИТЬ ПО
	|	Порядок Возр
	|");
	
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеНачалоДиапазона", "ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеКонецДиапазона",  "ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеДлинаКода",       "ШаблоныКодовПодарочныхСертификатов.ДлинаМагнитногоКода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ПодарочныеСертификаты.МагнитныйКод");
		
		Запрос.УстановитьПараметр("Штрихкод",     "");
		Запрос.УстановитьПараметр("МагнитныйКод", КодКарты);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеНачалоДиапазона", "ШаблоныКодовПодарочныхСертификатов.НачалоДиапазонаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеКонецДиапазона",  "ШаблоныКодовПодарочныхСертификатов.КонецДиапазонаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеДлинаКода",       "ШаблоныКодовПодарочныхСертификатов.ДлинаШтрихкода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ИмяПоляКодКарты",        "ПодарочныеСертификаты.Штрихкод");
		
		Запрос.УстановитьПараметр("Штрихкод",     КодКарты);
		Запрос.УстановитьПараметр("МагнитныйКод", "");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодКарты",    КодКарты);
	Запрос.УстановитьПараметр("ДлинаКода",   СтрДлина(КодКарты));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПодарочныеСертификатыВызовСервера.ПолучитьСтруктуруДанныхПодарочногоСертификата();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ЗарегистрированныеПодарочныеСертификаты.Добавить(НоваяСтрока);
		Иначе
			НеЗарегистрированныеПодарочныеСертификаты.Добавить(НоваяСтрока);
		КонецЕсли;
	
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура("ЗарегистрированныеПодарочныеСертификаты, НеЗарегистрированныеПодарочныеСертификаты");
	ВозвращаемоеЗначение.ЗарегистрированныеПодарочныеСертификаты   = ЗарегистрированныеПодарочныеСертификаты;
	ВозвращаемоеЗначение.НеЗарегистрированныеПодарочныеСертификаты = НеЗарегистрированныеПодарочныеСертификаты;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция выполняет поиск карт лояльности по магнитному коду
//
// Параметры
//  Магнитный код - Строка
//
// Возвращаемое значение
//  Структура. В структуре содержится 2 таблицы значений: Зарегистрированные карты лояльности
//  и НеЗарегистрированныеПодарочныеСертификаты.
//
Функция НайтиПодарочныеСертификатыПоМагнитномуКоду(МагнитныйКод) Экспорт
	
	Возврат НайтиПодарочныеСертификаты(МагнитныйКод, Перечисления.ТипыКодовКарт.МагнитныйКод);
	
КонецФункции

#КонецОбласти

#Область ОтражениеДвиженийВРегистрах

// Процедура формирования движений по регистру "Подарочные сертификаты".
//
// Параметры:
//	ДополнительныеСвойства - Структура дополнительный свойств
//	Движения - Коллекция движений
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПодарочныеСертификаты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодарочныеСертификаты;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПодарочныеСертификаты.Записывать = Истина;
	Движения.ПодарочныеСертификаты.Загрузить(Таблица);

КонецПроцедуры

// Процедура формирования движений по регистру "История подарочных сертификатов".
//
// Параметры:
//	ДополнительныеСвойства - Структура дополнительный свойств
//	Движения - Коллекция движений
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьИсториюПодарочныхСертификатов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаИсторияПодарочныхСертификатов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ИсторияПодарочныхСертификатов.Записывать = Истина;
	Движения.ИсторияПодарочныхСертификатов.Загрузить(Таблица);

КонецПроцедуры

// Процедура формирования движений по регистру "ДвиженияДенежныеСредстваКонтрагент"
// для документов "РеализацияПодарочныхСертификатов" и "ВозвратПодарочныхСертификатов".
// Определяет какие сертификаты оплачены картой. 
// (распределяет сумму оплаты по карте по стоимостям сертификатов в порядке следования серификатов)
//
// Параметры:
//	ТаблицыДляДвижений - Структура содержащая таблицы движений
//
Функция ПодготовитьТаблицуДвиженияДенежныеСредстваКонтрагент(ОплатаПодарочныеСертификаты, ОплатаПлатежныеКарты) Экспорт
	
	ТаблицаДвижений = РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Если ОплатаПлатежныеКарты.Количество() = 0 Тогда
		
		Для Каждого Сертификат Из ОплатаПодарочныеСертификаты Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДвижений.Добавить(), Сертификат);
		КонецЦикла;
		
		Возврат ТаблицаДвижений;
		
	КонецЕсли;
	
	Ресурсы = Новый Массив;
	Ресурсы.Добавить("СуммаПостоплаты");
	Ресурсы.Добавить("СуммаПостоплатыРегл");
	Ресурсы.Добавить("СуммаПостоплатыВВалютеПлатежа");
	Ресурсы.Добавить("СуммаПостоплатыВВалютеВзаиморасчетов");
	Прочее = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Ресурсы.Найти(Колонка.Имя) = Неопределено Тогда
			Прочее.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПоКарте Из ОплатаПлатежныеКарты Цикл
		
		Для Каждого Сертификат Из ОплатаПодарочныеСертификаты Цикл
			
			// Спишем с оплаты по карте стоимость сертификата
			Сумма =     ВзаиморасчетыСервер.СписатьСумму(ПоКарте.СуммаПостоплатыВВалютеПлатежа, Сертификат.СуммаПостоплатыВВалютеПлатежа);
			СуммаУпр =  ВзаиморасчетыСервер.СписатьСумму(ПоКарте.СуммаПостоплаты,     Сертификат.СуммаПостоплаты);
			СуммаРегл = ВзаиморасчетыСервер.СписатьСумму(ПоКарте.СуммаПостоплатыРегл, Сертификат.СуммаПостоплатыРегл);
			
			// Часть стоимости оплатим картой
			Если Сумма > 0 Тогда
				
				НовоеДвижение = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеДвижение, ПоКарте);
				НовоеДвижение.ОбъектРасчетов = Сертификат.ОбъектРасчетов;
				
				НовоеДвижение.СуммаПостоплаты = СуммаУпр;
				НовоеДвижение.СуммаПостоплатыРегл = СуммаРегл;
				НовоеДвижение.СуммаПостоплатыВВалютеПлатежа = Сумма;
				НовоеДвижение.СуммаПостоплатыВВалютеВзаиморасчетов = Сумма;
				
			КонецЕсли;
			
			// Оставшуюся стоимость сертификата оплатим наличными
			Если ПоКарте.СуммаПостоплатыВВалютеПлатежа = 0 И Сертификат.СуммаПостоплатыВВалютеПлатежа > 0 Тогда
				НовоеДвижение = ТаблицаДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеДвижение, Сертификат);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаДвижений.Свернуть(СтрСоединить(Прочее, ","),
	                         СтрСоединить(Ресурсы, ","));
	
	Возврат ТаблицаДвижений;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Метод возвращает массив этапов к расчету,
// упорядоченных по приоритету выполнения (номеру индекса).
// Элементы с большим индексом зависят от элементов с меньшим индексом.
// Для добавления нового этапа необходимо добавить новый элемент в массив
// и прописать вызов соответствующего метода в методе ВыполнитьЭтапыРасчета()
Функция ЭтапыКРасчету() Экспорт
	КРасчету = Новый Массив();
	
	
	
	
#Область ЭтапыЗапускаютсяВручную	
	КРасчету.Добавить("ИсправлениеОтрицательныхОстатков");
	КРасчету.Добавить("РаспределениеРБП");
	
	
	КРасчету.Добавить("ПередачаТоваров");
	КРасчету.Добавить("ОтчетыПоКомиссииИнтеркампани");
	КРасчету.Добавить("ОтчетыКомитентамОСписании");
#КонецОбласти //ЭтапыЗапускаютсяВручную

	КРасчету.Добавить("РасчетыСПартнерами");
	КРасчету.Добавить("ПереоценкаДенежныхСредств");
	КРасчету.Добавить("НачисленияПоКредитамДепозитам");
	КРасчету.Добавить("АннулированиеПодарочныхСертификатов");
	КРасчету.Добавить("ОтражениеЗарплаты");
	КРасчету.Добавить("АмортизацияОСиНМА");
	
	
	КРасчету.Добавить("ПартииТоваров");
	
	КРасчету.Добавить("РасходыНаПродукцию");
	
	КРасчету.Добавить("Себестоимость");
	
	
	КРасчету.Добавить("УсловныеПродажи");

	
	КРасчету.Добавить("РаспределениеДоходовРасходов");
	
	Возврат КРасчету;
	
КонецФункции

// Метод возвращает массив этапов, исключаемых из расчета.
Функция ОтключенныеЭтапы(Критерии = Неопределено) Экспорт
	
	Если Критерии = Неопределено Тогда
		 Критерии = ПолучитьКритерии();
	КонецЕсли;
	ОтключенныеЭтапы = Новый Массив();
	
	ОтключенныеЭтапы.Добавить("ПомощникПоУчетуНДС");
	ОтключенныеЭтапы.Добавить("НачислениеОО");
	ОтключенныеЭтапы.Добавить("ПогашениеСтоимостиТМЦ");
	ОтключенныеЭтапы.Добавить("НалогНаИмущество");
	ОтключенныеЭтапы.Добавить("ТранспортныйНалог");
	ОтключенныеЭтапы.Добавить("ЗемельныйНалог");
	ОтключенныеЭтапы.Добавить("ТорговыйСбор");
	//-- НЕ УТ
	//  ОтключенныеЭтапы.Добавить("Себестоимость");
	Если НЕ Критерии.ФормироватьФинансовыйРезультат Тогда
		ОтключенныеЭтапы.Добавить("РаспределениеДоходовРасходов");
	КонецЕсли;
    
	
	Возврат ОтключенныеЭтапы;
	
КонецФункции

// Возвращает для указанного этапа его состояние.
Функция СостояниеЭтапа(ПредыдущиеЭтапы, ПараметрыРасчета, ИмяЭтапаРасчета) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ИмяЭтапаРасчета = "ИсправлениеОтрицательныхОстатков" Тогда
		Состояние = СостояниеИсправлениеОтрицательныхОстатков(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПередачаТоваров" Тогда
		Состояние = СостояниеПередачаВозвратТоваров(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыПоКомиссииИнтеркампани" Тогда
		Состояние = СостояниеОтчетыПоКомиссииИнтеркампани(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыКомитентамОСписании" Тогда
		Состояние = СостояниеОтчетыКомитентамОСписании(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПомощникПоУчетуНДС" Тогда
		Состояние = СостояниеОперацииПоУчетуНДС(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетыСПартнерами" Тогда
		Состояние = СостояниеРасчетыСПартнерами(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРБП" Тогда
		Состояние = СостояниеРаспределениеРБП(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "НачисленияПоКредитамДепозитам" Тогда
		Состояние = СостояниеНачисленияПоКредитамДепозитам(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "АннулированиеПодарочныхСертификатов" Тогда
		Состояние = СостояниеАннулированиеПодарочныхСертификатов(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПартииТоваров" Тогда
		Состояние = СостояниеРасчетПартийТоваров(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "Себестоимость" Тогда
		Состояние = СостояниеРасчетСебестоимости(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ПереоценкаДенежныхСредств" Тогда
		Состояние = СостояниеПереоценкаДенежныхСредств(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеДоходовРасходов" Тогда
		Состояние = СостояниеРаспределениеДоходовРасходовПоНаправлениям(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "УсловныеПродажи" Тогда
		Состояние = СостояниеУсловныеПродажи(ПараметрыРасчета, ПредыдущиеЭтапы);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Состояние;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКритерии()
	Критерии = Новый Структура();
	Критерии.Вставить("УчитыватьПрочиеДоходыИРасходы", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	Критерии.Вставить("ФормироватьФинансовыйРезультат", ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
	Критерии.Вставить("БазоваяВерсия", ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	Критерии.Вставить("ИспользоватьНесколькоВалют", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	Критерии.Вставить("ИспользоватьПодарочныеСертификаты", ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты"));
	Критерии.Вставить("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	Критерии.Вставить("ИспользоватьКредитыДепозитыЗаймы", ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов"));
	Возврат Критерии;
КонецФункции

#Область СостоянияЭтапов

Функция СостояниеИсправлениеОтрицательныхОстатков(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.КоличествоОстаток
	|ПОМЕСТИТЬ
	|	НачОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&НачДата, Организация В (&МассивОрганизаций)) КАК Остатки
	|ГДЕ
	|	Остатки.КоличествоОстаток < 0
	|;
	|ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Граница, Организация В (&МассивОрганизаций)) КАК Остатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ НачОстатки КАК НачОстатки
	|		ПО НачОстатки.Организация = Остатки.Организация
	|		И НачОстатки.АналитикаУчетаНоменклатуры = Остатки.АналитикаУчетаНоменклатуры
	|		И НачОстатки.ВидЗапасов = Остатки.ВидЗапасов
	|		И НачОстатки.НомерГТД = Остатки.НомерГТД
	|ГДЕ
	|	Остатки.КоличествоОстаток < 0
	|	И Остатки.КоличествоОстаток <> ЕСТЬNULL(НачОстатки.КоличествоОстаток, 0)
	|");
	Запрос.УстановитьПараметр("НачДата", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеПередачаВозвратТоваров(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КПередачеВозврату.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&Граница) КАК КПередачеВозврату
	|ГДЕ
	|	(КПередачеВозврату.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И (КПередачеВозврату.КоличествоОстаток > 0
	|		ИЛИ КПередачеВозврату.ВозвращеноОстаток > 0)
	|");
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОтчетыПоКомиссииИнтеркампани(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОформлению.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КОформлению
	|ГДЕ
	|	(КОформлению.АналитикаУчетаНоменклатуры.Склад В (&МассивОрганизаций)
	|		ИЛИ (&ПоВсемОрганизациям И КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации))
	|	И (КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток <> 0
	|		ИЛИ КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОформлению.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.ОстаткиИОбороты(&НачалоПериода, &КонецПериода) КАК КОформлению
	|ГДЕ
	|	(КОформлению.ВидЗапасов.Организация В (&МассивОрганизаций) ИЛИ &ПоВсемОрганизациям)
	|	И КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации
	|	И (КОформлению.КоличествоКонечныйОстаток - КОформлению.КоличествоНачальныйОстаток <> 0
	|		ИЛИ КОформлению.КоличествоСписаноКонечныйОстаток - КОформлению.КоличествоСписаноНачальныйОстаток <> 0)
	|");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОтчетыКомитентамОСписании(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОформлению.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&Граница) КАК КОформлению
	|ГДЕ
	|	(КОформлению.ВидЗапасов.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И НЕ (КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации)
	|	И КОформлению.КоличествоСписаноОстаток > 0
	|");
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРасчетыСПартнерами(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Расчеты.АналитикаУчетаПоПартнерам В(&МассивКлючейАналитики)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Расчеты.АналитикаУчетаПоПартнерам В (&МассивКлючейАналитики)
	|	И Расчеты.Активность");
	
	ПоляОтбора = Новый Структура("Организация, Партнер, Контрагент, Договор");
	ПоляОтбора.Организация = ПараметрыРасчета.СписокОрганизаций;
	АналитикиРасчета = РаспределениеВзаиморасчетов.АналитикиКРасчету(ПоляОтбора);
		
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("МассивКлючейАналитики", АналитикиРасчета);
	
	НачалоРасчета = РаспределениеВзаиморасчетов.НачалоРасчетов(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);
	Результат = Запрос.Выполнить();
	ТребуетсяПереоценка = Документы.ПереоценкаВалютныхСредств.ТребуетсяПереоценкаВзаиморасчетов(
							ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период, АналитикиРасчета);

	Если Результат.Пустой() И (НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > ПараметрыРасчета.Период) И НЕ ТребуетсяПереоценка Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > ПараметрыРасчета.Период И НЕ ТребуетсяПереоценка Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеРБП(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Приходы.Организация,
		|	Приходы.НалоговоеНазначение,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов,
		|	СУММА(Приходы.Сумма) КАК Сумма,
		|	СУММА(Приходы.СуммаРегл) КАК СуммаРегл,
		|	СУММА(Приходы.СуммаРеглБезНДС) КАК СуммаРеглБезНДС,
		|	СУММА(Приходы.НДСРегл) КАК НДСРегл,
		|	СУММА(Приходы.ПостояннаяРазница) КАК ПостояннаяРазница,
		|	СУММА(Приходы.ВременнаяРазница) КАК ВременнаяРазница
		|ПОМЕСТИТЬ Приходы
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК Приходы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Статьи.Ссылка = Приходы.СтатьяРасходов
		|		И Статьи.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|ГДЕ
		|	Приходы.Период <= &ДатаОкончания
		|	И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Приходы.Организация В (&СписокОрганизаций)
		|СГРУППИРОВАТЬ ПО
		|	Приходы.Организация,
		|	Приходы.НалоговоеНазначение,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расходы.Организация,
		|	Расходы.НалоговоеНазначение,
		|	Расходы.Подразделение,
		|	Расходы.СтатьяРасходов,
		|	Расходы.АналитикаРасходов,
		|	СУММА(Расходы.Сумма) КАК Сумма,
		|	СУММА(Расходы.СуммаРегл) КАК СуммаРегл,
		|	СУММА(Расходы.СуммаРеглБезНДС) КАК СуммаРеглБезНДС,
		|	СУММА(Расходы.НДСРегл) КАК НДСРегл,
		|	СУММА(Расходы.ПостояннаяРазница) КАК ПостояннаяРазница,
		|	СУММА(Расходы.ВременнаяРазница) КАК ВременнаяРазница
		|ПОМЕСТИТЬ Расходы
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК Расходы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Статьи.Ссылка = Расходы.СтатьяРасходов
		|		И Статьи.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|ГДЕ
		|	Расходы.Регистратор.Дата <= &ДатаОкончания
		|	И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расходы.Организация В (&СписокОрганизаций)
		|СГРУППИРОВАТЬ ПО
		|	Расходы.Организация,
		|	Расходы.НалоговоеНазначение,
		|	Расходы.Подразделение,
		|	Расходы.СтатьяРасходов,
		|	Расходы.АналитикаРасходов
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Приходы.Организация,
		|	Приходы.НалоговоеНазначение,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов,
		|	Приходы.Сумма - ЕСТЬNULL(Расходы.Сумма ,0) КАК Сумма,
		|	Приходы.СуммаРегл - ЕСТЬNULL(Расходы.СуммаРегл, 0) КАК СуммаРегл,
		|	Приходы.СуммаРеглБезНДС - ЕСТЬNULL(Расходы.СуммаРеглБезНДС, 0) КАК СуммаРеглБезНДС,
		|	Приходы.НДСРегл - ЕСТЬNULL(Расходы.НДСРегл, 0) КАК НДСРегл,
		|	Приходы.ПостояннаяРазница - ЕСТЬNULL(Расходы.ПостояннаяРазница, 0) КАК ПостояннаяРазница,
		|	Приходы.ВременнаяРазница - ЕСТЬNULL(Расходы.ВременнаяРазница, 0) КАК ВременнаяРазница
		|ИЗ
		|	Приходы КАК Приходы
		|	ЛЕВОЕ СОЕДИНЕНИЕ Расходы КАК Расходы
		|	ПО Расходы.Организация = Приходы.Организация
		|		И Расходы.НалоговоеНазначение = Приходы.НалоговоеНазначение
		|		И Расходы.Подразделение = Приходы.Подразделение
		|		И Расходы.СтатьяРасходов = Приходы.СтатьяРасходов
		|		И Расходы.АналитикаРасходов = Приходы.АналитикаРасходов
		|ГДЕ
		|	(Приходы.Сумма - ЕСТЬNULL(Расходы.Сумма, 0)) <> 0
		|	ИЛИ (Приходы.СуммаРегл - ЕСТЬNULL(Расходы.СуммаРегл, 0)) <> 0
		|	ИЛИ (Приходы.СуммаРеглБезНДС - ЕСТЬNULL(Расходы.СуммаРеглБезНДС, 0)) <> 0
		|	ИЛИ (Приходы.НДСРегл - ЕСТЬNULL(Расходы.НДСРегл, 0)) <> 0
		|	ИЛИ (Приходы.ПостояннаяРазница - ЕСТЬNULL(Расходы.ПостояннаяРазница ,0)) <> 0
		|	ИЛИ (Приходы.ВременнаяРазница - ЕСТЬNULL(Расходы.ВременнаяРазница, 0)) <> 0
		|");
		
		Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
		УстановитьПривилегированныйРежим(Истина);
		Если Запрос.Выполнить().Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
		
	Возврат Состояние;
	
КонецФункции

Функция СостояниеНачисленияПоКредитамДепозитам(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика 
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Договор.Ссылка КАК Договор,
	|	График.Проценты КАК ПроцентНачисленияПлан,
	|	График.Комиссия КАК КомиссияНачисленияПлан,
	|	0 КАК ПроцентНачисленияФакт,
	|	0 КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФактРазвернуто
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.ВариантГрафика.Используется
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Договор КАК Договор,
	|	0 КАК ПроцентНачисленияПлан,
	|	0 КАК КомиссияНачисленияПлан,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА Расчеты.СуммаВВалюте
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентНачисленияФакт,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|		ТОГДА Расчеты.СуммаВВалюте
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КомиссияНачисленияФакт
	|ИЗ
	|	РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|	ПО Расчеты.Договор = Договоры.Ссылка
	|		И Договоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И Расчеты.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыГрафикаКредитовИДепозитов.Начисления)
	|		И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Договор КАК Договор,
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) КАК ПроцентНачисленияПлан,
	|	СУММА(втПланФакт.КомиссияНачисленияПлан) КАК КомиссияНачисленияПлан,
	|	СУММА(втПланФакт.ПроцентНачисленияФакт) КАК ПроцентНачисленияФакт,
	|	СУММА(втПланФакт.КомиссияНачисленияФакт) КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФакт
	|ИЗ
	|	втПланФактРазвернуто КАК втПланФакт
	|СГРУППИРОВАТЬ ПО
	|	втПланФакт.Договор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Договор КАК Договор,
	|	втПланФакт.ПроцентНачисленияПлан - втПланФакт.ПроцентНачисленияФакт КАК ОтклонениеПроцентаНачисления,
	|	втПланФакт.КомиссияНачисленияПлан - втПланФакт.КомиссияНачисленияФакт КАК ОтклонениеКомиссииНачисления
	|ИЗ
	|	втПланФакт КАК втПланФакт
	|ГДЕ
	|	втПланФакт.Договор.Организация В (&СписокОрганизаций)
	|	И (втПланФакт.ПроцентНачисленияПлан - втПланФакт.ПроцентНачисленияФакт > 0
	|		ИЛИ втПланФакт.КомиссияНачисленияПлан - втПланФакт.КомиссияНачисленияФакт > 0)
	|");
	
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СтатусДоговора", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли РезультатЗапроса[3].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеАннулированиеПодарочныхСертификатов(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено) КАК СостояниеАннулирования
	|
	|ИЗ
	|	РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&КонецПериода) КАК ИсторияСертификатов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияСертификатов
	|	ПО
	|		ИсторияСертификатов.ПодарочныйСертификат = АктивацияСертификатов.ПодарочныйСертификат
	|		И АктивацияСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ПодарочныеСертификаты КАК СправочникСертификаты
	|	ПО
	|		ИсторияСертификатов.ПодарочныйСертификат = СправочникСертификаты.Ссылка
	|ГДЕ
	|	АктивацияСертификатов.Регистратор.Организация В (&СписокОрганизаций)
	|	И ИсторияСертификатов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Аннулирован)
	|	И ВЫБОР АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ДЕНЬ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, НЕДЕЛЯ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, МЕСЯЦ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, КВАРТАЛ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ГОД, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ДЕКАДА, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ПОЛУГОДИЕ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			ИНАЧЕ АктивацияСертификатов.Период
	|		КОНЕЦ < &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно)
	|
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК Аннулирование
	|
	|ГДЕ
	|	Аннулирование.Организация В (&СписокОрганизаций)
	|	И Аннулирование.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аннулирование.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.НеТребуется)
	|");
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СостояниеАннулирования;
КонецФункции

Функция СостояниеРасчетПартийТоваров(ПараметрыРасчета, ПредыдущиеЭтапы)
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьПартионныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет");
	Если ПредыдущиеЭтапы.РасчетыСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		ПараметрыДанных = Новый Структура("ПериодРасчета", КонецМесяца(ПараметрыРасчета.Период));
		ПараметрыДанных.Вставить("Организация", ПараметрыРасчета.СписокОрганизаций);
		ПараметрыДанных.Вставить("ПоВсемОрганизациям", Не ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
		СвязиОрганизаций = ПартионныйУчет.СвязиОрганизацийПоСхемеИнтеркампани(ПараметрыРасчета.Период, ПараметрыРасчета.СписокОрганизаций);
		ПартииАктуальны = ПартионныйУчет.НачалоПериодаРасчета(ПараметрыРасчета.Период, СвязиОрганизаций) > ПараметрыРасчета.Период;
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК Таб
		|ГДЕ
		|	Таб.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.ПартииПрочихРасходов КАК Таб
		|ГДЕ
		|	Таб.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.ПартииПрочихРасходов КАК Расходы
		|ГДЕ
		|	Расходы.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|");
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
		Результат = Запрос.ВыполнитьПакет();
		НетЗаписейВПоследовательностяхВПериодеРегистрации = Результат[0].Пустой();
		НетПартийПрочихРасходов = Результат[1].Пустой();
		
		НеТребуетсяКорректировкаНДС = Истина;
		ВыполненаКорректировкаНДС = Истина;
		Если ПартииАктуальны
			И НетПартийПрочихРасходов  И НеТребуетсяКорректировкаНДС
			И НетЗаписейВПоследовательностяхВПериодеРегистрации
		Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		Иначе
			Если ПартииАктуальны
				И (НеТребуетсяКорректировкаНДС ИЛИ ВыполненаКорректировкаНДС)
			Тогда
				Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
				АктуализировалиПартииТоваров = Ложь;
			Иначе
				Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции


Функция СостояниеРасчетСебестоимости(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если ПредыдущиеЭтапы.ПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		Состояние = ЗакрытиеМесяцаУТВызовСервера.СостояниеРасчетаСебестоимости(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеПереоценкаДенежныхСредств(ПараметрыРасчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецМесяца
	|	И Задания.Операция = &ОперацияПереоценки
	|	И (Задания.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|");
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОперацияПереоценки", Перечисления.ОперацииЗакрытияМесяца.ПереоценкаВалютныхСредств);
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	ЗаданияКРасчету = Запрос.Выполнить();
	Если НЕ ЗаданияКРасчету.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		ХозОперации = Новый Массив;
		ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаКредитовИДепозитов);
		КонецЕсли;
		
		ЕстьВалютныеОстатки = Документы.ПереоценкаВалютныхСредств.ЕстьВалютныеОстатки(
			ПараметрыРасчета.СписокОрганизаций,
			КонецМесяца(ПараметрыРасчета.Период),
			ХозОперации);
		ТребуетсяПереоценка = Документы.ПереоценкаВалютныхСредств.ТребуетсяПереоценка(
			ПараметрыРасчета.СписокОрганизаций,
			КонецМесяца(ПараметрыРасчета.Период),
			ХозОперации);
			
		Если ЕстьВалютныеОстатки И НЕ ТребуетсяПереоценка Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеДоходовРасходовПоНаправлениям(ПараметрыРасчета, ПредыдущиеЭтапы)
    Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") И (ПредыдущиеЭтапы.Свойство("УсловныеПродажи") И ПредыдущиеЭтапы.УсловныеПродажи = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено) Тогда
        Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
    ИначеЕсли ПредыдущиеЭтапы.Свойство("КорректировкаУсловныхПродажПоПропорциональномуНДС") И ПредыдущиеЭтапы.КорректировкаУсловныхПродажПоПропорциональномуНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Расходы.Организация КАК Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Обороты(
		|		&ДатаНачала,
		|		&ГраницаДатаОкончания,
		|		,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Расходы
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Расходы.СтатьяРасходов = Статьи.Ссылка
		|		И (Статьи.ВариантРаспределенияРасходов = 
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
		|ГДЕ
		|	Расходы.СуммаПриход <> 0
		|	ИЛИ Расходы.СуммаРасход <> 0
		|	ИЛИ Расходы.СуммаРеглПриход <> 0
		|	ИЛИ Расходы.СуммаРеглРасход <> 0
		|	ИЛИ Расходы.СуммаРеглБезНДСПриход <> 0
		|	ИЛИ Расходы.СуммаРеглБезНДСРасход <> 0
		|	ИЛИ Расходы.НДСРеглПриход <> 0
		|	ИЛИ Расходы.НДСРеглРасход <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Доходы.Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеДоходы.Обороты(
		|		&ДатаНачала,
		|		&ГраницаДатаОкончания,
		|		,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Доходы
		|ГДЕ
		|	Доходы.СуммаПриход <> 0
		|	ИЛИ Доходы.СуммаРасход <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расходы.Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Остатки(
		|		&ГраницаДатаОкончания,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Расходы
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Расходы.СтатьяРасходов = Статьи.Ссылка
		|		И (Статьи.ВариантРаспределенияРасходов = 
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
		|ГДЕ
		|	Расходы.СуммаОстаток <> 0
		|	ИЛИ Расходы.СуммаРеглОстаток <> 0
		|	ИЛИ Расходы.СуммаРеглБезНДСОстаток <> 0
		|	ИЛИ Расходы.НДСРеглОстаток <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Доходы.Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеДоходы.Остатки(
		|		&ГраницаДатаОкончания,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Доходы
		|ГДЕ
		|	Доходы.СуммаОстаток <> 0
		|");
		
		Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
		Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[0].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		ИначеЕсли Результат[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		ИначеЕсли НЕ Результат[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОперацииПоУчетуНДС(ПараметрыРасчета)
	
	Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
	Возврат Состояние;
	
КонецФункции


Функция СостояниеУсловныеПродажи(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если ПредыдущиеЭтапы.Себестоимость = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.Себестоимость = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
	Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СтатусРасхождения
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(УсловнаяПродажа.СтатусРасхождения) КАК СтатусРасхождения
	|	ИЗ
	|		АнализУсловныхПродаж КАК УсловнаяПродажа) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.СтатусРасхождения ЕСТЬ NULL
	|");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	НДСИсходящийСервер.ПодготовитьДанныеДляАнализаУсловныхПродаж(Запрос.МенеджерВременныхТаблиц, ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период); 
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
	    Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли Выборка.СтатусРасхождения = 4 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли Выборка.СтатусРасхождения = 3 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти // Состояния этапов

#КонецОбласти

#КонецЕсли
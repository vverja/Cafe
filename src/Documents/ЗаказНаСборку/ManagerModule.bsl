#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.ЗаказНаПеремещение.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	
	Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.СборкаТоваров.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСоздатьНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаСборку) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ЗаказНаСборку.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаСборку);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыНаСборку";
		
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#Область Обеспечение

//Используется для получения данных из заказов на сборку/разборку, используемых в обработке "Состояние обеспечения заказов".
//Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
//Возвращаемое значение:
// Строка - Текст запроса - Текст запроса для выборки данных:
//                          1) источнике данных о потребности:
//                          - "Заказ", "КодСтроки", "НомерСтроки",
//                          2) аналитики потребности:
//                          - "Номенклатура", "Характеристика", "Склад", "Назначение", "Подразделение",
//                          3) текущем варианте обеспечения:
//                          - "ВариантОбеспечения", "ДатаОтгрузки", "Количество",
//                          4) общих для заказа параметрах обеспечения:
//                          - "ЖелаемаяДатаОтгрузки", "НеОтгружатьЧастями".
//                          5) реквизиты документа отображаемые в форме обработки состояния обеспечения":
//                          - "Упаковка", "Дата", "Статус", "СтатусИспользуется", "Дата".
//                          
//                          "Количество" - количество из заказа, по которому не оформлена накладная,
//                          поступает из таблицы "ВтРегистрЗаказыКлиентов", где предварительно рассчитывается
//                          по ресурсу "Заказано", регистра накопления "ЗаказыКлиентов".
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт

	ТекстЗапроса =
		//Потребности в материалах для сборки
		"ВЫБРАТЬ
		|	Т.Ссылка                КАК Заказ,
		|	Т.КодСтроки             КАК КодСтроки,
		|	Т.НомерСтроки           КАК НомерСтроки,
		|	0                       КАК НомерСтрокиПродукция,
		|	НЕОПРЕДЕЛЕНО            КАК Продукция,
		|	НЕОПРЕДЕЛЕНО            КАК Этап,
		|	0                       КАК ЭтапПорядок,
		|
		|	Т.Номенклатура          КАК Номенклатура,
		|	Т.Характеристика        КАК Характеристика,
		|	Т.Ссылка.Склад          КАК Склад,
		|	ВЫБОР КОГДА Т.Ссылка.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|			Т.Ссылка.НазначениеТовары
		|		ИНАЧЕ
		|			Т.Ссылка.Назначение
		|		КОНЕЦ               КАК Назначение,
		|	Т.Ссылка.Подразделение  КАК Подразделение,
		|
		|	Т.ВариантОбеспечения    КАК ВариантОбеспечения,
		|	Т.Ссылка.НачалоСборкиРазборки КАК ДатаОтгрузки,
		|	Т.Упаковка              КАК Упаковка,
		|
		|	ДанныеУчета.Количество  КАК Количество,
		|
		|	ВЫБОР КОГДА Т.Ссылка.ЖелаемаяДатаПоступления <=&НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			КОГДА ДОБАВИТЬКДАТЕ(Т.Ссылка.ЖелаемаяДатаПоступления, ДЕНЬ, - Т.Ссылка.ДлительностьСборкиРазборки) < &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				ДОБАВИТЬКДАТЕ(Т.Ссылка.ЖелаемаяДатаПоступления, ДЕНЬ, - Т.Ссылка.ДлительностьСборкиРазборки)
		|		КОНЕЦ                     КАК ЖелаемаяДатаОтгрузки,
		|
		|	ИСТИНА                        КАК НеОтгружатьЧастями,
		|	Т.Ссылка.Дата                 КАК Дата,
		|	NULL                          КАК Партнер,
		|	Т.Ссылка.Статус               КАК Статус,
		|	&ИспользоватьСтатусыЗаказовНаСборку КАК СтатусИспользуется
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистрЗаказыНаСборку КАК ДанныеУчета
		|		ПО Т.Ссылка    = ДанныеУчета.Заказ
		|		 И Т.КодСтроки = ДанныеУчета.КодСтроки
		|
		|ГДЕ
		|	Т.Ссылка.Проведен
		|	И Т.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|	И Т.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|
		|{ГДЕ
		|	Т.Ссылка.*          КАК Заказ,
		|	Т.Ссылка.Склад.*    КАК Склад,
		|	Т.Ссылка.Ответственный.* КАК Менеджер}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Потребности в комплектах для разборки
		|ВЫБРАТЬ
		|	Т.Ссылка                КАК Заказ,
		|	1                       КАК КодСтроки,
		|	1                       КАК НомерСтроки,
		|	0                       КАК НомерСтрокиПродукция,
		|	НЕОПРЕДЕЛЕНО            КАК Продукция,
		|	НЕОПРЕДЕЛЕНО            КАК Этап,
		|	0                       КАК ЭтапПорядок,
		|
		|	Т.Номенклатура          КАК Номенклатура,
		|	Т.Характеристика        КАК Характеристика,
		|	Т.Склад                 КАК Склад,
		|	Т.Назначение            КАК Назначение,
		|	Т.Подразделение         КАК Подразделение,
		|
		|	Т.ВариантОбеспечения    КАК ВариантОбеспечения,
		|	Т.НачалоСборкиРазборки  КАК ДатаОтгрузки,
		|	Т.Упаковка              КАК Упаковка,
		|
		|	ДанныеУчета.Количество  КАК Количество,
		|
		|	ВЫБОР КОГДА Т.Ссылка.ЖелаемаяДатаПоступления <=&НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			КОГДА ДОБАВИТЬКДАТЕ(Т.Ссылка.ЖелаемаяДатаПоступления, ДЕНЬ, - Т.Ссылка.ДлительностьСборкиРазборки) < &НачалоТекущегоДня ТОГДА
		|				&НачалоТекущегоДня
		|			ИНАЧЕ
		|				ДОБАВИТЬКДАТЕ(Т.Ссылка.ЖелаемаяДатаПоступления, ДЕНЬ, - Т.Ссылка.ДлительностьСборкиРазборки)
		|		КОНЕЦ                     КАК ЖелаемаяДатаОтгрузки,
		|
		|	ИСТИНА                        КАК НеОтгружатьЧастями,
		|	Т.Ссылка.Дата                 КАК Дата,
		|	NULL                          КАК Партнер,
		|	Т.Ссылка.Статус               КАК Статус,
		|	&ИспользоватьСтатусыЗаказовНаСборку КАК СтатусИспользуется
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистрЗаказыНаСборку КАК ДанныеУчета
		|		ПО Т.Ссылка = ДанныеУчета.Заказ
		|		 И 1        = ДанныеУчета.КодСтроки
		|ГДЕ
		|	Т.Ссылка.Проведен
		|	И Т.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|
		|{ГДЕ
		|	Т.Ссылка.*          КАК Заказ,
		|	Т.Склад.*           КАК Склад,
		|	Т.Ответственный.*   КАК Менеджер}
		|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	ЭтоВыборОбеспеченияСУчетомСерий = (Операция = "СтрокаТовары" Или Операция = "Комплект")
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДата()), Объект.ЖелаемаяДатаПоступления
		- Объект.ДлительностьСборкиРазборки * 86400); //86400 - длительность суток

	Если Операция = "Комплект" Тогда
		
		Если ПараметрыУказанияСерий = Неопределено Тогда
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаСборку));
		КонецЕсли;
		
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			
			Если СерииУказываютсяВОтдельнойТабличнойЧасти(Объект) Тогда
				
				ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", Объект.Номенклатура, Объект.Характеристика);
				НайденныеСтроки = Объект.Серии.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Объект.Серии.Удалить(НайденнаяСтрока);
				КонецЦикла;
				
				Объект.Количество = 0;
				Для Каждого Строка Из ДанныеЗаполнения Цикл
					
					Объект.Количество = Объект.Количество + Строка.Количество;
					
					Если (Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
								Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
								Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада)
							И ЗначениеЗаполнено(Строка.Серия) Тогда
							
								СтрокаСерии = Объект.Серии.Добавить();
								СтрокаСерии.Номенклатура   = Объект.Номенклатура;
								СтрокаСерии.Характеристика = Объект.Характеристика;
								СтрокаСерии.Серия          = Строка.Серия;
								СтрокаСерии.Количество     = Строка.Количество;
								
								Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
									СтрокаСерии.Назначение = Объект.Назначение;
								Иначе
									СтрокаСерии.Назначение = Справочники.Назначения.ПустаяСсылка();
								КонецЕсли;
							
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Объект.Количество = ДанныеЗаполнения[0].Количество;
				Объект.Серия = ДанныеЗаполнения[0].Серия;
				
			КонецЕсли;
			
		Иначе
			
			Объект.Количество = ДанныеЗаполнения[0].Количество;
			
		КонецЕсли;
		
		Объект.ВариантОбеспечения = ДанныеЗаполнения[0].ВариантОбеспечения;
		Объект.НачалоСборкиРазборки = Макс(Объект.НачалоСборкиРазборки, ДанныеЗаполнения[0].ДатаОтгрузки, ДатаПоУмолчанию);
		КоэффициентУпаковки = Объект.КоличествоУпаковок / Объект.Количество;
		Объект.КоличествоУпаковок = Объект.Количество * КоэффициентУпаковки;
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Шапка);
		ТекстРезультат = "";
		
	Иначе

		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");

		ТекСтрокаТовары = Неопределено;
		Идентификатор   = Неопределено;
		СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
		НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
		Счетчик = 0;
		Добавлено = 0;
		ОбеспечениеСервер.СвернутьСтрокиДляОтгрузкиОднойДатой(ДанныеЗаполнения, Истина, Операция = "СтрокаТовары");
		Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.Товары[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Иначе
			ТекСтрокаТовары = Объект.Товары.Вставить(Объект.Товары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;

			//Заполнение полей обеспечения.
			ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения");
			Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
				ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
			КонецЕсли;
			
			Если СтрокаОбеспечения.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				Если ЗначениеЗаполнено(Объект.Назначение) Тогда
					ТекСтрокаТовары.Назначение = Объект.Назначение;
				Иначе
					ТекСтрокаТовары.Назначение = Объект.НазначениеТовары;
				КонецЕсли;
			Иначе
				ТекСтрокаТовары.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;
			
			Если СтрокаОбеспечения.Отгружено = 0 Тогда
				ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			КонецЕсли;
			
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок"
				Или ДатаПоУмолчанию > Объект.НачалоСборкиРазборки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.НачалоСборкиРазборки = ДатаПоУмолчанию;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
			ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
			ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		КонецЦикла;
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
		ТекстРезультат = ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

	КонецЕсли;

	Объект.ОкончаниеСборкиРазборки = Объект.НачалоСборкиРазборки
		+ Объект.ДлительностьсборкиРазборки * 86400; //86400 - длительность суток

	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаСборку));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ТЧ);

	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Возврат ТекстРезультат;

КонецФункции

Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Ложь;
КонецФункции

Функция ПараметрыВыбораОбеспечения(Статус) Экспорт

	Параметры = Новый Структура("ПутиКДанным, ИмяТабличнойЧасти, СтатусКВыполнению, ИмяМенеджераРегистра",
		Новый Соответствие(), "Товары", Истина, "ЗаказыНаСборку");

	Параметры.ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоСборкиРазборки");
	Параметры.ПутиКДанным.Вставить("Назначение", "НазначениеТовары");

	Возврат Параметры;

КонецФункции

// Возвращает количество собранных (разобранных) комплектов по переданному заказу
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаСборку, ДокументСсылка.ЗаказНаСборку - 
// 
// Возвращаемое значение:
//   - Число
//
Функция ОформленоКомплектов(Объект) Экспорт

	ОтборОформлено = Новый ТаблицаЗначений();
	ОтборОформлено.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
	ОтборОформлено.Колонки.Добавить("Ссылка", ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению());
	
	СтрокаОтбораКомлектов = ОтборОформлено.Добавить();
	СтрокаОтбораКомлектов.Ссылка = Объект.Ссылка;
	СтрокаОтбораКомлектов.КодСтроки = 1;
	
	ТаблицаШапки = Новый ТаблицаЗначений();
	ТаблицаШапки.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаШапки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаШапки.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаШапки.Колонки.Добавить("Назначение",     Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаШапки.Колонки.Добавить("Серия",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаШапки.Колонки.Добавить("Ссылка",         Новый ОписаниеТипов("ДокументСсылка.ЗаказНаСборку"));
	
	Корректировка = ТаблицаШапки.Скопировать(); // пустая табличная часть для передачи в регистры
	Корректировка.Колонки.Добавить("КПоступлению",  Новый ОписаниеТипов("Число"));
	Корректировка.Колонки.Добавить("КОтгрузке",      Новый ОписаниеТипов("Число"));
	
	УчитыватьНазначение = ЗначениеЗаполнено(Объект.Назначение) 
	И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Назначение, "ДвиженияПоСкладскимРегистрам") = Истина;
	
	Если Объект.СтатусУказанияСерий = 14 Тогда
		СтрокаШапки = ТаблицаШапки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаШапки, Объект);
		СтрокаШапки.Назначение = ?(УчитыватьНазначение, Объект.Назначение, Справочники.Назначения.ПустаяСсылка());
	Иначе
		// СтатусУказанияСерий = 10
		// Используется табличная часть Серии

		Для Каждого Строка Из Объект.Серии Цикл
			СтрокаШапки = ТаблицаШапки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаШапки, Строка, "Номенклатура, Характеристика, Серия, Назначение");
			ЗаполнитьЗначенияСвойств(СтрокаШапки, Объект, "Склад, Ссылка");
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		ОформитьКомплектовПоНакладным = РегистрыНакопления.ЗаказыНаСборку.ТаблицаОформлено(ОтборОформлено);
		ОформитьКомплектовПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(ТаблицаШапки, Корректировка);
	Иначе
		ОформитьКомплектовПоНакладным = РегистрыНакопления.ЗаказыНаСборку.ТаблицаОформлено(ОтборОформлено, Истина);
		ОформитьКомплектовПоОрдерам = РегистрыНакопления.ТоварыКПоступлению.ТаблицаОформлено(ТаблицаШапки, Корректировка);
	КонецЕсли;
	
	ОформитьКомплектовПоНакладным.Свернуть(, "Количество");
	ОформитьКомплектовПоОрдерам.Свернуть(, "Количество");
	ОформленоКомплектов = Макс(ОформитьКомплектовПоНакладным.Итог("Количество"), ОформитьКомплектовПоОрдерам.Итог("Количество"));
	
	Возврат ОформленоКомплектов;

КонецФункции

Функция МетаданныеДокумента() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.Вставить("ОформляетсяПоЗаказу", Ложь);
	СтруктураОбъекта.Вставить("ЭтоИсточникПотребности", Ложь);
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#Область РасчетСостояний

// Возвращает структуру параметров для расчета состояния выполнения заказа в списке заказов.
//
Функция ПараметрыДляРасчетаСостояний() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("МодульОстаткиЗаказов", РегистрыНакопления.ЗаказыНаСборку);
	Структура.Вставить("КонтролироватьЗакрытиеЗаказа",
		ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки"));
	Структура.Вставить("СтатусВПроцессеПоступления", Перечисления.СостоянияВнутреннихЗаказов.ВПроцессеСборки);
	Структура.Вставить("СтатусВПроцессеОтгрузки", Перечисления.СостоянияВнутреннихЗаказов.ВПроцессеСборки);
	Структура.Вставить("СтатусГотовКОтгрузке", Перечисления.СостоянияВнутреннихЗаказов.ГотовКСборке);
	
	Возврат Структура;
	
КонецФункции

// Возвращает структуру, содержащую тексты запросов временных таблиц для расчета состояния выполнения заказа в списке заказов.
//
Функция ВременныеТаблицыДокументаДляРасчетаСостояний() Экспорт
	
	ТекстЗапросаТовары =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                  КАК Ссылка,
		|	Документ.НачалоСборкиРазборки   КАК ДатаОтгрузки,
		|	Таблица.ВариантОбеспечения      КАК ВариантОбеспечения,
		|	Документ.Склад                  КАК Склад,
		|	Таблица.Номенклатура            КАК Номенклатура,
		|	Таблица.Характеристика          КАК Характеристика,
		|
		|	ВЫБОР КОГДА Документ.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				Документ.Назначение
		|			ИНАЧЕ
		|				Документ.НазначениеТовары
		|		КОНЕЦ                       КАК Назначение,
		|	
		|	ИСТИНА                          КАК ЭтоТовар,
		|	Таблица.Количество              КАК Количество
		|	
		|ПОМЕСТИТЬ ВтТоварыДокумента
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Документ
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И НЕ Таблица.Отменено
		|	И Документ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка                  КАК Ссылка,
		|	Таблица.НачалоСборкиРазборки    КАК ДатаОтгрузки,
		|	Таблица.ВариантОбеспечения      КАК ВариантОбеспечения,
		|	Таблица.Склад                   КАК Склад,
		|	Таблица.Номенклатура            КАК Номенклатура,
		|	Таблица.Характеристика          КАК Характеристика,
		|
		|	Таблица.Назначение              КАК Назначение,
		|	
		|	ИСТИНА                          КАК ЭтоТовар,
		|	Таблица.Количество - Таблица.КоличествоОтменено КАК Количество
		|	
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И Таблица.Количество - Таблица.КоличествоОтменено > 0
		|	И Таблица.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)";
	
	ТекстЗапросаРеквизиты =
		"ВЫБРАТЬ
		|	Таблица.Ссылка            КАК Ссылка,
		|	Таблица.Проведен          КАК Проведен,
		|	
		|	ВЫБОР КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению) ТОГДА
		|				ЛОЖЬ
		|			ИНАЧЕ
		|				ИСТИНА
		|		КОНЕЦ                 КАК СтатусКОтгрузке,
		|	
		|	ВЫБОР КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                 КАК СтатусЗакрыт
		|	
		|ПОМЕСТИТЬ ВтРеквизитыДокумента
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)";
	
	Результат = Новый Структура("ТоварыДокумента, РеквизитыДокумента", ТекстЗапросаТовары, ТекстЗапросаРеквизиты);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Возвращает текст запроса для получениях доступных назначений
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Возврат Справочники.Назначения.ТекстЗапросаНазначенийРасширенный();
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.ЗаказНаСборку КАК ЗаказНаСборку
		|ПОМЕСТИТЬ втОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В (&МассивДокументов)) КАК Остатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Остатки.ЗаказНаСборку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|ПОМЕСТИТЬ втОстаткиПоОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&МассивДокументов)) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОстатки.ДокументПоступления
		|ПОМЕСТИТЬ втОстаткиПоПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления В (&МассивДокументов)) КАК ТоварыКПоступлениюОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТоварыКПоступлениюОстатки.ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ТаблицаДокументов.ТипОперации КАК ТипОперации,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		//  Если хотя бы один регистр имеет остатки, работа по документу не завершена
		|	ВЫБОР
		|			КОГДА втОстаткиПоЗаказам.ЗаказНаСборку ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		ИЛИ ВЫБОР
		|			КОГДА втОстаткиПоОтгрузке.ДокументОтгрузки ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		ИЛИ ВЫБОР
		|			КОГДА втОстаткиПоПоступлению.ДокументПоступления ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоЗаказам КАК втОстаткиПоЗаказам
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказНаСборку
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоОтгрузке КАК втОстаткиПоОтгрузке
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоОтгрузке.ДокументОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоПоступлению КАК втОстаткиПоПоступлению
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоПоступлению.ДокументПоступления
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ТаблицаДокументов.ТипОперации КАК ТипОперации,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ выполнен не полностью';uk='У документа %Документ% статус ""%Статус%"" не встановлений, оскільки замовлення виконане не повністю'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок") Тогда
		
		ОформленоКомплектов = ОформленоКомплектов(ВыборкаПроверки.Ссылка);
		
		Если ОформленоКомплектов = 0 Тогда
			
			ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. ';uk='У документа %Документ% статус ""%Статус%"" не встановлено, так як '");
			
			Если ВыборкаПроверки.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
				ТекстОшибкиЗавершение = НСтр("ru='не предусмотрена возможность отмены неотработанных комплектов для документа, по которому не собран ни один комплект.
                    |Полная отмена сборки возможна путем распроведения документа.'
                    |;uk='не передбачена можливість скасування невідпрацьованих комплектів для документа, за яким не зібраний жоден комплект.
                    |Повне скасування складання можливе шляхом розпроведення документа.'");
			Иначе
				ТекстОшибкиЗавершение = НСтр("ru='не предусмотрена возможность отмены неотработанных комплектов для документа, по которому не разобран ни один комплект.
                    |Полная отмена разборки возможна путем распроведения документа.'
                    |;uk='не передбачена можливість скасування невідпрацьованих комплектів для документа, за яким не розібраний жоден комплект.
                    |Повне скасування розбирання можливе шляхом розпроведення документа.'");
			КонецЕсли;
				
			ТекстОшибки = ТекстОшибки + ТекстОшибкиЗавершение;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,ТипОперации,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Шапка = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	Шапка.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		Шапка.ИспользоватьСерииНоменклатуры  = Ложь;
		Шапка.УчитыватьСебестоимостьПоСериям = Ложь;
		Шапка.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	Иначе
		Шапка.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
		Шапка.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		Шапка.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки);
		Шапка.ИменаПолейДополнительные.Добавить("ВариантОбеспечения");
	КонецЕсли;
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		Шапка.ПоляСвязи.Добавить("Назначение");
	КонецЕсли;
	
	Шапка.ЭтоЗаказ = Истина;
	Шапка.ПланированиеОтгрузки = Истина;
	Шапка.РегистрироватьСерии = Ложь;
	Шапка.ТоварВШапке = Истина;
	Шапка.Дата = Объект.Дата;
	
	ТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ТЧ.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	ТЧ.ИмяТЧСерии = "Товары";
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		ТЧ.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
		ТЧ.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки);
	Иначе
		ТЧ.ИспользоватьСерииНоменклатуры  = Ложь;
		ТЧ.УчитыватьСебестоимостьПоСериям = Ложь;
		ТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	КонецЕсли;	
	
	ТЧ.ЭтоЗаказ = Истина;
	ТЧ.ПланированиеОтгрузки = Истина;
	ТЧ.РегистрироватьСерии = Ложь;
	ТЧ.ТоварВШапке = Ложь;
	ТЧ.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий = Новый Структура;
	
	ПараметрыУказанияСерий.Вставить("Шапка",Шапка);
	ПараметрыУказанияСерий.Вставить("ТЧ",ТЧ);	
	
	Возврат ПараметрыУказанияСерий;

КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) <> Неопределено Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Товары.Номенклатура,
			|	Товары.Серия,
			|	Товары.Отменено,
			|	Товары.ВариантОбеспечения,
			|	Товары.Количество,
			|	Товары.СтатусУказанияСерий,
			|	Товары.НомерСтроки
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
			|	ВЫБОР
			|		КОГДА Товары.Отменено
			|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
			|				ИЛИ НЕ Товары.ВариантОбеспечения В (
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|			ТОГДА 0
			|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
			|			ТОГДА ВЫБОР
			|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|						ТОГДА 14
			|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|						ТОГДА 15
			|					ИНАЧЕ 13
			|				КОНЕЦ
			|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
			|			ТОГДА ВЫБОР
			|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|						ТОГДА 10
			|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|						ТОГДА 11
			|					ИНАЧЕ 9
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СтатусУказанияСерий
			|ПОМЕСТИТЬ Статусы
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
			|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
			|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Статусы.НомерСтроки КАК НомерСтроки,
			|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
			|ИЗ
			|	Статусы КАК Статусы
			|ГДЕ
			|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Товары.Номенклатура,
			|	Товары.Серия,
			|	Товары.Отменено,
			|	Товары.Количество,
			|	Товары.СтатусУказанияСерий,
			|	Товары.НомерСтроки,
			|	Товары.ВариантОбеспечения
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Серии.Количество
			|ПОМЕСТИТЬ Серии
			|ИЗ
			|	&Серии КАК Серии
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
			|	ВЫБОР
			|		КОГДА Товары.Отменено
			|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
			|				ИЛИ НЕ Товары.ВариантОбеспечения В (
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|			ТОГДА 0
			|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
			|			ТОГДА ВЫБОР
			|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|						ТОГДА 14
			|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|						ТОГДА 15
			|					ИНАЧЕ 13
			|				КОНЕЦ
			|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
			|			ТОГДА ВЫБОР
			|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|							И ЕСТЬNULL(Серии.Количество, 0) = 0
			|						ТОГДА 11
			|					КОГДА Товары.Количество = ЕСТЬNULL(Серии.Количество, 0)
			|							И Товары.Количество > 0
			|						ТОГДА 10
			|					ИНАЧЕ 9
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СтатусУказанияСерий
			|ПОМЕСТИТЬ Статусы
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ СУММА(Серии.Количество) КАК Количество ИЗ Серии КАК Серии) КАК Серии
			|			ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
			|			ПО (ПолитикиУчетаСерий.Склад = &Склад)
			|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Статусы.НомерСтроки КАК НомерСтроки,
			|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
			|ИЗ
			|	Статусы КАК Статусы
			|ГДЕ
			|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Создает в менеджере таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаказНаСборку - документ, по которому создаются временные таблицы
//
Процедура ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.ЗаказНаСборку.Склад КАК Склад,
	|	Заказы.ЗаказНаСборку.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Заказы.ЗаказНаСборку.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА Заказы.ЗаказНаСборку.Назначение
	|		ИНАЧЕ Заказы.ЗаказНаСборку.НазначениеТовары
	|	КОНЕЦ КАК Назначение,
	|	СУММА(Заказы.ЗаказаноОстаток) КАК Заказано,
	|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(Товары.Упаковка) КАК Упаковка2,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку = &Заказ) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК Товары
	|		ПО Заказы.ЗаказНаСборку = Товары.Ссылка
	|			И Заказы.КодСтроки = Товары.КодСтроки
	|			И (Заказы.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка))
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.ЗаказНаСборку.Склад,
	|	Заказы.ЗаказНаСборку.Подразделение,
	|	ВЫБОР КОГДА Заказы.ЗаказНаСборку.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|		Заказы.ЗаказНаСборку.Назначение
	|		ИНАЧЕ
	|		Заказы.ЗаказНаСборку.НазначениеТовары
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Заказано КАК Заказано,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Ссылка.Склад КАК Склад,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(Товары.Количество) КАК Заказано,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК Товары
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Упаковка,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.Склад,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаСборку);
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИницициализироватьСтруктуруСостояниеВыполненияДокумента();
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка", 2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление", 3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка", 4);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление", 5);
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru='Товар';uk='Товар'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление", НСтр("ru='Товар';uk='Товар'"));
	
	ТаблицаНеобеспеченныеТовары = ТаблицаНеобеспеченныеТоварыДляОтчетаСостояниеВыполнения();
	ТаблицаСостояниеОбеспечения = ТаблицаСостояниеОбеспеченияДляОтчетаСостояниеВыполнения();
	ВТТоварыРаспоряжениеЗаказОтгружено = ВременнаяТаблицаТоварыРаспоряжениеЗаказОтгруженоДляОтчетаСостояниеВыполнения();
	ВТТоварыПоступление = ВременнаяТаблицаТоварыПоступлениеДляОтчетаСостояниеВыполнения();
	ВТТоварыРаспоряженияПоступлениеЗаказ = ВременнаяТаблицаТоварыРаспоряженияПоступлениеЗаказДляОтчетаСостояниеВыполнения();
	ТаблицаОтмененоОтгрузка = ТаблицаОтмененоОтгрузкаДляОтчетаСостояниеВыполнения();
	ТаблицаОтмененоПоступление = ТаблицаОтмененоПоступлениеДляОтчетаСостояниеВыполнения();
	
	СтруктураДопЗапросов = Новый Структура();
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаНеобеспеченныеТовары",          ТаблицаНеобеспеченныеТовары);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаСостояниеОбеспечения",          ТаблицаСостояниеОбеспечения);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено",   ВТТоварыРаспоряжениеЗаказОтгружено);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыПоступление",                  ВТТоварыПоступление);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ", ВТТоварыРаспоряженияПоступлениеЗаказ);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаОтмененоОтгрузка",              ТаблицаОтмененоОтгрузка);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаОтмененоПоступление",           ТаблицаОтмененоПоступление);
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", СтруктураДопЗапросов);
	
	Возврат СтруктураСостояние;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыНаСборку(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);

	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеШапки.Статус КАК Статус,
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Склад КАК Склад,
	|	ДанныеШапки.ТипОперации КАК ТипОперации,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СборкаКомплектующих,
	|	ДанныеШапки.НачалоСборкиРазборки КАК НачалоСборкиРазборки,
	|	ДанныеШапки.ОкончаниеСборкиРазборки КАК ОкончаниеСборкиРазборки,
	|	ДанныеШапки.Назначение КАК Назначение,
	|	ДанныеШапки.НазначениеТовары КАК НазначениеТовары,
	|	ЕСТЬNULL(ДанныеШапки.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) КАК ДвиженияПоСкладскимРегистрамНазначение,
	|	ЕСТЬNULL(ДанныеШапки.НазначениеТовары.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) КАК ДвиженияПоСкладскимРегистрамНазначениеТовары,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И ДанныеШапки.НачалоСборкиРазборки >= ДанныеШапки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И ДанныеШапки.Дата >= ДанныеШапки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриПоступлении
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Склад",                   Реквизиты.Склад);
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Статус",                  Реквизиты.Статус);
	Запрос.УстановитьПараметр("НачалоСборкиРазборки",    Реквизиты.НачалоСборкиРазборки);
	Запрос.УстановитьПараметр("ОкончаниеСборкиРазборки", Реквизиты.ОкончаниеСборкиРазборки);
	Запрос.УстановитьПараметр("СборкаКомплектующих",     Реквизиты.СборкаКомплектующих);
	Запрос.УстановитьПараметр("НазначениеШапка",         Реквизиты.Назначение);
	Запрос.УстановитьПараметр("НазначениеТовары",        Реквизиты.НазначениеТовары);
	Запрос.УстановитьПараметр("ДвиженияПоСкладскимРегистрамШапка",                 Реквизиты.ДвиженияПоСкладскимРегистрамНазначение);
	Запрос.УстановитьПараметр("ДвиженияПоСкладскимРегистрамНазначениеТовары", Реквизиты.ДвиженияПоСкладскимРегистрамНазначениеТовары);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриОтгрузке",    Реквизиты.ОрдернаяСхемаПриОтгрузке);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриПоступлении", Реквизиты.ОрдернаяСхемаПриПоступлении);

КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыНаСборку(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаказыНаСборку";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	//////////////// СБОРКА ////////////////
	// Получение заказанных комплектов для поля "Заказано".
	// Т.к. поле "Количество" уже уменьшено на величину отмены, расчитывается изначальная величина
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество
	|		+ ТаблицаТовары.КоличествоОтменено КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено > 0
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества для заказанных комплектов (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.КоличествоОтменено      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектов для поля "КОформлению".
	// Т.к. поле "Количество" уже уменьшено на величину отмены, расчитывается изначальная величина
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	ТаблицаТовары.Количество
	|	+ ТаблицаТовары.КоличествоОтменено     КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено > 0
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества для заказанных комплектов (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	-ТаблицаТовары.КоличествоОтменено      КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектующих (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество        КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества заказанных комплектующих (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.Количество        КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектующих (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	ТаблицаТовары.Количество        КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ВариантОбеспечения В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества заказанных комплектующих (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	-ТаблицаТовары.Количество        КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ВариантОбеспечения В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.Отменено
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//////////////// РАЗБОРКА ////////////////
	// Получение заказанных комплектов для поля "Заказано".
	// Т.к. поле "Количество" уже уменьшено на величину отмены, расчитывается изначальная величина
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество
	|		+ ТаблицаТовары.КоличествоОтменено КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества для заказанных комплектов (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.КоличествоОтменено      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектов для поля "КОформлению".
	// Т.к. поле "Количество" уже уменьшено на величину отмены, расчитывается изначальная величина
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	ТаблицаТовары.Количество
	|	+ ТаблицаТовары.КоличествоОтменено     КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества для заказанных комплектов (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	-ТаблицаТовары.КоличествоОтменено      КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектующих (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество        КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества заказанных комплектующих (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.Количество        КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектующих (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	ТаблицаТовары.Количество        КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества заказанных комплектующих (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	-ТаблицаТовары.Количество        КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))	
	|	И ТаблицаТовары.Отменено
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//////////////// ОБЩЕЕ ////////////////
	// ТЧ Серии относится к шапке документа с операцией "Разборка"
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                    КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Серия                     КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|	                                       КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество                КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Серии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка.СтатусУказанияСерий = 10
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// ТЧ Серии относится к шапке документа с операцией "Разборка"
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                    КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Серия                     КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|	                                       КАК ТипСборки,
	|	ТаблицаТовары.Количество                КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Серии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.Ссылка.ВариантОбеспечения В(
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТовары.Ссылка.СтатусУказанияСерий = 10";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	//График поступления комплекта при сборке
	|ВЫБРАТЬ
	|	0                            КАК Порядок,
	|	1                            КАК НомерСтроки,
	|	&ОкончаниеСборкиРазборки     КАК Период,
	|	ЗаказНаСборку.Ссылка         КАК Распоряжение,
	|
	|	ЗаказНаСборку.Номенклатура   КАК Номенклатура,
	|	ЗаказНаСборку.Характеристика КАК Характеристика,
	|	&Склад                       КАК Склад,
	|
	|	&НазначениеШапка                  КАК Назначение,
	|
	|	ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ЗаказНаСборку.Количество
	|		КОНЕЦ                    КАК ПланируемоеПоступление,
	|
	|	ВЫБОР КОГДА &НазначениеШапка <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ЗаказНаСборку.Количество
	|		КОНЕЦ                    КАК ПланируемоеПоступлениеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|ГДЕ
	|	ЗаказНаСборку.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//График поступления комплектующих при разборке
	|ВЫБРАТЬ
	|	1                                   КАК Порядок,
	|	ТаблицаКомплектующие.НомерСтроки    КАК НомерСтроки,
	|	&ОкончаниеСборкиРазборки            КАК Период,
	|	ТаблицаКомплектующие.Ссылка         КАК Распоряжение,
	|
	|	ТаблицаКомплектующие.Номенклатура   КАК Номенклатура,
	|	ТаблицаКомплектующие.Характеристика КАК Характеристика,
	|	&Склад                              КАК Склад,
	|
	|	ТаблицаКомплектующие.Назначение     КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаКомплектующие.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаКомплектующие.Количество
	|		КОНЕЦ                           КАК ПланируемоеПоступление,
	|
	|	ВЫБОР КОГДА ТаблицаКомплектующие.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаКомплектующие.Количество
	|		КОНЕЦ                           КАК ПланируемоеПоступлениеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаКомплектующие
	|ГДЕ
	|	ТаблицаКомплектующие.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|   И НЕ ТаблицаКомплектующие.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок, НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	//Резерв комплектов при разборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ТаблицаТовары.Номенклатура                          КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                        КАК Характеристика,
	|	&Склад                                              КАК Склад,
	|	ТаблицаТовары.Количество                            КАК ВРезервеСоСклада,
	|	0                                                   КАК ВРезервеПодЗаказ,
	|	0                                                   КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Отгрузка комплектов при разборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ТаблицаТовары.Номенклатура                          КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                        КАК Характеристика,
	|	&Склад                                              КАК Склад,
	|	0                                                   КАК ВРезервеСоСклада,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|			ТОГДА ТаблицаТовары.Количество
	|		КОНЕЦ                                           КАК ВРезервеПодЗаказ,
	|	ТаблицаТовары.Количество                            КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Резерв комплектующих при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	ТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                 КАК Характеристика,
	|	&Склад                                       КАК Склад,
	|	ТаблицаТовары.Количество                     КАК ВРезервеСоСклада,
	|	0                                            КАК ВРезервеПодЗаказ,
	|	0                                            КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И(ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|   И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Отгрузка комплектующих при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	ТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                 КАК Характеристика,
	|	&Склад                                       КАК Склад,
	|	0                                            КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|		ТаблицаТовары.Количество
	|	КОНЕЦ                                        КАК ВРезервеПодЗаказ,
	|
	|	ТаблицаТовары.Количество                     КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|   И НЕ ТаблицаТовары.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	//Обеспечение склада обособленными комплектами при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&НазначениеШапка                       КАК Назначение,
	|	0                                      КАК Потребность,
	|	-ТаблицаТовары.Количество              КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И НЕ ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Формирование потребности в комплектующих при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			&НазначениеТовары
	|		ИНАЧЕ
	|			&НазначениеШапка
	|		КОНЕЦ                              КАК Назначение,
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	ТаблицаТовары.Количество               КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Закрытие потребности в комплектующих при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			&НазначениеТовары
	|		ИНАЧЕ
	|			&НазначениеШапка
	|		КОНЕЦ                              КАК Назначение,
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	0                                      КАК КЗаказу,
	|	ТаблицаТовары.Количество	           КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Формирование потребности в комплектах при разборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&НазначениеШапка                       КАК Назначение,
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	ТаблицаТовары.Количество               КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Закрытие потребности в комплектах при разборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&НазначениеШапка                       КАК Назначение,
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	0                                      КАК КЗаказу,
	|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|
	//Обеспечение склада комплектующими при разборке
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	0                                      КАК Потребность,
	|	-ТаблицаТовары.Количество              КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И НЕ ТаблицаТовары.Отменено
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки КАК Период,
	|	&Склад КАК Склад,
	|	&Склад КАК Получатель,
	|	&Ссылка КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТаблицаТовары.Количество КАК ВРезерве,
	|	0 КАК КОтгрузке,
	|	0 КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|	И НЕ ТаблицаТовары.Отменено
	|	И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению)
	|				И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|			ИЛИ &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|				И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА ВЫБОР
	|					КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА &ДвиженияПоСкладскимРегистрамНазначениеТовары
	|									ТОГДА &НазначениеТовары
	|								ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|								ТОГДА &НазначениеШапка
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	0,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Резерв комплектов при разборке, серия в шапке.
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТаблицаТовары.Количество,
	|	0,
	|	0
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10 // серия не указана в отдельной табличной части ""Серии""
	|	
	|	И(ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Отгрузка комплектов при разборке, серия в шапке.
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	
	|	ВЫБОР КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|			И ТаблицаТовары.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
	|				
	|				&НазначениеШапка
	|				
	|			ИНАЧЕ
	|				
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				
	|		КОНЕЦ,
	|	
	|	0,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10 // серия не указана в отдельной табличной части ""Серии""
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Резерв комплектов при разборке, серия в отдельной табличной части "Серии".
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТаблицаТовары.Количество,
	|	0,
	|	0
	|ИЗ
	|	Документ.ЗаказНаСборку.Серии КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка.СтатусУказанияСерий = 10
	|
	|	И(ТаблицаТовары.Ссылка.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.Ссылка.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Отгрузка комплектов при разборке, серия в отдельной табличной части "Серии".
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	
	|	
	|	ВЫБОР КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|			И ТаблицаТовары.Ссылка.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
	|				
	|				&НазначениеШапка
	|				
	|			ИНАЧЕ
	|				
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				
	|		КОНЕЦ,
	|	
	|	
	|	0,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаказНаСборку.Серии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И ТаблицаТовары.Ссылка.СтатусУказанияСерий = 10
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.Ссылка.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	//График отгрузки комплекта при разборке
	"ВЫБРАТЬ
	|	&НачалоСборкиРазборки        КАК Период,
	|	&НачалоСборкиРазборки        КАК ДатаОтгрузки,
	|
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&Склад                       КАК Склад,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			&НазначениеШапка
	|		КОНЕЦ                                  КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоИзЗаказов,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|				ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоПодЗаказ,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоНеобеспечено
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//График отгрузки комплектующих при сборке
	|ВЫБРАТЬ
	|	&НачалоСборкиРазборки               КАК Период,
	|	&НачалоСборкиРазборки               КАК ДатаОтгрузки,
	|
	|	ТаблицаТовары.Номенклатура          КАК Номенклатура,
	|	ТаблицаТовары.Характеристика        КАК Характеристика,
	|	&Склад                              КАК Склад,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|
	|		ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|					&НазначениеТовары
	|				ИНАЧЕ
	|					&НазначениеШапка
	|			КОНЕЦ
	|
	|		КОНЕЦ                                  КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоИзЗаказов,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоПодЗаказ,
	|
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоНеобеспечено
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА &ДвиженияПоСкладскимРегистрамШапка ТОГДА
	|				ТаблицаТовары.Назначение
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КПоступлению
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|	И &ОрдернаяСхемаПриПоступлении
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам ТОГДА
	|				ТаблицаТовары.Назначение
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КПоступлению
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И НЕ &СборкаКомплектующих
	|	И &ОрдернаяСхемаПриПоступлении
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = ПолноеИмяОбъекта();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("СборкаКомплектующих",
		"ТаблицаТовары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрамШапка",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрамНазначениеТовары",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.НазначениеТовары.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	ПереопределениеРасчетаПараметров.Вставить("НазначениеШапка",
		"ТаблицаТовары.Ссылка.Назначение");
	ПереопределениеРасчетаПараметров.Вставить("НазначениеТовары",
		"ТаблицаТовары.Ссылка.НазначениеТовары");
	ПереопределениеРасчетаПараметров.Вставить("ОрдернаяСхемаПриПоступлении",
		"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|	И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ");
	
	Если ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
        
	ИначеЕсли ИмяРегистра = "ТоварыКПоступлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ЗаказыНаСборку" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаСборку(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru='В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';uk='У документі %ПолноеИмяДокумента% не реалізована адаптація тексту запиту формування рухів по регістру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


Функция ЗаказыНаРазборкуКоторыеНужноРазбитьПередЗаполнениемСерий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Ссылка
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|			И (Накладные.Проведен)
	|			И (Заказы.Проведен)
	|ГДЕ
	|	Заказы.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
	|	И Заказы.СтатусУказанияСерий В (11, 12)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Заказы.Количество) > СУММА(Накладные.Количество)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заказы.Ссылка
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|			И (Накладные.Проведен)
	|			И (Заказы.Проведен)
	|			И (Заказы.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие))
	|			И Заказы.СтатусУказанияСерий В (15,16)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Накладные.Серия) > 1";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция РазборкиКоторыеНужноПривязатьКНовымЗаказамПослеРазбиенияЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Накладные.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заказы.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказНаСборку КАК Заказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|			ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|				И (Накладные.Проведен)
	|				И (Заказы.Проведен)
	|				И (Заказы.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие))
	|				И Заказы.СтатусУказанияСерий В (15,16)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Заказы.Ссылка
	|	
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Накладные.Серия) > 1) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|			И (Накладные.Проведен)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция РазборкиКоторыеНужноРазбитьПоВариантуОбеспечения() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Заказ
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладная
		|		ПО Заказ.Ссылка = Накладная.ЗаказНаСборку
		|		 И Накладная.Проведен
		|		 И Заказ.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		 И Заказ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|		
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ЗаказыНаРазборкуТЧКоторыхНужноРазбитьПослеЗаполненияСерийВНакладных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.Ссылка
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК СтрокиДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Товары КАК ТоварыНакладной
	|			ПО (ТоварыНакладной.Ссылка.ЗаказНаСборку = СтрокиДляОбработки.Ссылка)
	|				И (ТоварыНакладной.Ссылка.Проведен)
	|				И (ТоварыНакладной.КодСтроки = СтрокиДляОбработки.КодСтроки)
	|				И (ТоварыНакладной.СтатусУказанияСерий = 10)
	|		ПО (Заказы.Проведен)
	|			И (НЕ СтрокиДляОбработки.Отменено)
	|			И Заказы.Ссылка = СтрокиДляОбработки.Ссылка
	|			И (Заказы.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие))";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции



Процедура ЗаполнитьОтгрузитьОперацияРазборкаЗаполнитьДанныеДляОбновления(Параметры) Экспорт
	
	// Заказы на разборку по которым есть накладные но нет варианта обеспечения "Отгрузить".
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Заказ
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладная
		|		ПО Заказ.Ссылка = Накладная.ЗаказНаСборку
		|		 И Накладная.Проведен
		|		 И Заказ.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|		 И Заказ.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|		
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Ссылка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Ссылки);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Заполняет вариант обеспечения Отгрузить в заказах на разборку.
Процедура ЗаполнитьОтгрузитьОперацияРазборкаОтложенно(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// 1) Получение порции документов, которые еще не обрабатывались во временную таблицу "ВТДляОбработкиСсылка".
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
        Параметры.Очередь, 
        ПолноеИмяОбъекта, 
        МенеджерВременныхТаблиц
    );
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Не Результат.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	
	// 2) Получение временных таблиц читаемых в процессе обработки данных, которые еще не обрабатывались:
	//   - временная таблица накладных по обрабатываемому заказу.
	РезультатБлокировкиНакладной = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(
	    Параметры.Очередь, 
        "Документ.СборкаТоваров", 
    МенеджерВременныхТаблиц);
	
	// 3) Выборка документов для обработки, читаемые данные для выполнения которой уже обновлены на новую версию.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказ.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Накладная.Ссылка) КАК КоличествоНакладных
	|ИЗ
	|	ВТДляОбработкиЗаказНаСборку КАК Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладная
	|		ПО Заказ.Ссылка = Накладная.ЗаказНаСборку
	|			И (Накладная.Проведен)
	|			И (Накладная.ЗаказНаСборку = Заказ.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСборкаТоваров КАК ВТЗаблокированоСборкаТоваров
	|		ПО (ВТЗаблокированоСборкаТоваров.Ссылка = Накладная.Ссылка)
	|ГДЕ
	|	ВТЗаблокированоСборкаТоваров.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказ.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗаблокированоСборкаТоваров", РезультатБлокировкиНакладной.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ВыборкаДокумента = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокумента.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// 4) Управляемая блокировка для ответственного чтения данных.
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Накладная.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СборкаТоваров КАК Накладная
			|ГДЕ
			|	Накладная.Проведен
			|	И Накладная.ЗаказНаСборку = &Заказ";
			Запрос = Новый Запрос();
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Заказ", ВыборкаДокумента.Ссылка);
			Накладные = Запрос.Выполнить().Выгрузить();
			
			// ЗапросНакладныеВыборка возвращает полное количество накладных, Выборка - с вычетом заблокированных.
			// Обработка возможна только если все накладные доступны
			Если Накладные.Количество() = ВыборкаДокумента.КоличествоНакладных Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.СборкаТоваров.ПолноеИмя());
				ЭлементБлокировки.ИсточникДанных = Накладные;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				
				// 5) Управляемая блокировка для последующей записи обрабатываемого документа.
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокумента.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
			Иначе
				
				ОтменитьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Накладная.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СборкаТоваров КАК Накладная
			|ГДЕ
			|	Накладная.Проведен
			|	И Накладная.ЗаказНаСборку = &Заказ
			|	И НЕ Накладная.Ссылка В(&УправляемаяБлокировкаУстановлена)";
            
        Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("УправляемаяБлокировкаУстановлена", Накладные.ВыгрузитьКолонку("Ссылка"));
		Запрос.УстановитьПараметр("Заказ", ВыборкаДокумента.Ссылка);
		Если Не Запрос.Выполнить().Пустой() Тогда
		    ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		// Все проверки выполнены, заказ можно обрабатывать консистентно.
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Заказ.Ссылка КАК Заказ,
		|	МАКСИМУМ(Заказ.Количество) КАК КоличествоЗаказа,
		|	СУММА(Накладная.Количество) КАК КоличествоНакладной,
		|	МАКСИМУМ(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиКомплекта, 1)) КАК КоэффициентУпаковкиКомплект
		|ПОМЕСТИТЬ ВтДанныеШапкиДокумента
		|ИЗ
		|	Документ.СборкаТоваров КАК Накладная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказ
		|		ПО Накладная.ЗаказНаСборку = Заказ.Ссылка
		|ГДЕ
		|	Заказ.Ссылка = &Заказ
		|	И Накладная.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказ.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Ссылка КАК Ссылка,
		|	Набор.ОформленоКомплект КАК ОформленоКомплект,
		|	Набор.ЭтоТовары КАК ЭтоТовары,
		|	Набор.Индекс КАК Индекс,
		|	Набор.Оформлено КАК Оформлено,
		|	ВтДанныеШапкиДокумента.КоличествоЗаказа КАК КоличествоЗаказа,
		|	ВтДанныеШапкиДокумента.КоличествоНакладной КАК КоличествоНакладной,
		|	ВтДанныеШапкиДокумента.КоэффициентУпаковкиКомплект КАК КоэффициентУпаковкиКомплект,
		|	Набор.КоэффициентУпаковки КАК КоэффициентУпаковки
		|ИЗ
		// Выбрать строки табличной части Товары, оформленные накладной
		|	(ВЫБРАТЬ
		|		ИСТИНА КАК ЭтоТовары,
		|		&Заказ КАК Ссылка,
		|		СУММА(ТоварыНакладной.Количество) КАК ОформленоКомплект,
		|		ТоварыЗаказа.НомерСтроки - 1 КАК Индекс,
		|		СУММА(ТоварыНакладной.Количество) КАК Оформлено,
		|		МАКСИМУМ(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиСтроки, 1)) КАК КоэффициентУпаковки
		|	ИЗ
		|		Документ.ЗаказНаСборку.Товары КАК ТоварыЗаказа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Товары КАК ТоварыНакладной
		|			ПО ТоварыЗаказа.КодСтроки = ТоварыНакладной.КодСтроки
		|				И (ТоварыНакладной.Ссылка.ЗаказНаСборку = ТоварыЗаказа.Ссылка)
		|	ГДЕ
		|		ТоварыЗаказа.Ссылка = &Заказ
		|		И ТоварыНакладной.Ссылка.Проведен
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТоварыЗаказа.НомерСтроки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		// Выбрать серии заказа
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		&Заказ,
		|		0,
		|		СерииЗаказа.НомерСтроки - 1,
		|		СУММА(ЕСТЬNULL(СерииНакладной.Количество, 0)),
		|		НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.ЗаказНаСборку.Серии КАК СерииЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Серии КАК СерииНакладной
		|		ПО (СерииЗаказа.Серия = СерииНакладной.Серия)
		|			И (СерииЗаказа.Ссылка.Номенклатура = СерииНакладной.Номенклатура)
		|			И СерииНакладной.Ссылка.ЗаказНаСборку = СерииЗаказа.Ссылка
		|	ГДЕ
		|		СерииЗаказа.Ссылка = &Заказ
		|		И СерииНакладной.Ссылка.Проведен
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СерииЗаказа.НомерСтроки
		|	) КАК Набор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеШапкиДокумента КАК ВтДанныеШапкиДокумента
		|		ПО Набор.Ссылка = ВтДанныеШапкиДокумента.Заказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ЭтоТовары УБЫВ,
		|	Индекс УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(КоличествоЗаказа),
		|	МАКСИМУМ(КоличествоНакладной),
		|	МАКСИМУМ(КоэффициентУпаковкиКомплект)
		|ПО
		|	Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковкиКомплекта",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Заказ.Упаковка", "Заказ.Номенклатура"));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковкиСтроки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ТоварыЗаказа.Упаковка", "ТоварыЗаказа.Номенклатура"));
			
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Заказ", ВыборкаДокумента.Ссылка);
		
		ДокументОбъект = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		
		ВариантОтгрузить = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ЗаказРазделен = Ложь;
		
		Если Выборка.Следующий() И ДокументОбъект.Количество <> Выборка.КоличествоНакладной Тогда
			
			// 6) Обработка документа.
			ТоварыКУдалению = Новый Массив();
			СерииКУдалению = Новый Массив();
			
			ТаблицаСерииШапки = ДокументОбъект.Серии.ВыгрузитьКолонки();
			
			НовыйДокумент  = Документы.ЗаказНаСборку.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ДокументОбъект);
			НовыйДокумент.УстановитьНовыйНомер();
			
			НовыйДокумент.Количество = ДокументОбъект.Количество - Выборка.КоличествоНакладной;
			НовыйДокумент.КоличествоУпаковок = НовыйДокумент.Количество * Выборка.КоэффициентУпаковкиКомплект;
			ШаблонКомментария = НСтр("ru='Сформирован при обновлении поля ""Действие"" в документе %1.';uk='Сформований при оновленні поля ""Дія"" у документі %1.'");
			НовыйДокумент.Комментарий = СтрШаблон(ШаблонКомментария, Выборка.Ссылка);
			
			ДокументОбъект.Количество = Выборка.КоличествоНакладной;
			ДокументОбъект.КоличествоУпаковок = ДокументОбъект.КоличествоУпаковок - НовыйДокумент.КоличествоУпаковок;
			ДокументОбъект.ВариантОбеспечения = ВариантОтгрузить;
			
			ВыборкаСтроки = Выборка.Выбрать();
			Пока ВыборкаСтроки.Следующий() Цикл
				
				// Обрабатываются строки табличной части "Товары".
				Если ВыборкаСтроки.ЭтоТовары Тогда
					
					СтрокаТовары = ДокументОбъект.Товары[ВыборкаСтроки.Индекс];
					
					Если СтрокаТовары.Количество > ВыборкаСтроки.Оформлено Тогда
						
						НоваяСтрока = НовыйДокумент.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
						
						НоваяСтрока.Количество = СтрокаТовары.Количество - ВыборкаСтроки.Оформлено;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество * ВыборкаСтроки.КоэффициентУпаковки;
						
						СтрокаТовары.Количество = ВыборкаСтроки.Оформлено;
						СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
						
						Если СтрокаТовары.Количество = 0 Тогда
							ТоварыКУдалению.Добавить(СтрокаТовары);
						КонецЕсли;
						
						Если НоваяСтрока.Количество = 0 Тогда
							НовыйДокумент.Товары.Удалить(НоваяСтрока);
						КонецЕсли;
						
					КонецЕсли;
					
				// Обрабатываются строки табличной части "Серии".
				Иначе
					
					СтрокаСерии = ?(ВыборкаСтроки.Индекс <> Неопределено, ДокументОбъект.Серии[ВыборкаСтроки.Индекс], Неопределено);
					
					// В накладной оформлены не все серии. Недостающие серии необходимо перенести в новый заказ
					Если ЗначениеЗаполнено(СтрокаСерии)
						И СтрокаСерии.Количество > ВыборкаСтроки.Оформлено Тогда
						
						НоваяСтрока = НовыйДокумент.Серии.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
						
						НоваяСтрока.Количество = СтрокаСерии.Количество - ВыборкаСтроки.Оформлено;
						
						СтрокаСерии.Количество = ВыборкаСтроки.Оформлено;
						
						Если СтрокаСерии.Количество = 0 Тогда
							СерииКУдалению.Добавить(СтрокаСерии);
						КонецЕсли;
						
						Если НоваяСтрока.Количество = 0 Тогда
							НовыйДокумент.Серии.Удалить(НоваяСтрока);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Строка Из ТоварыКУдалению Цикл
				ДокументОбъект.Товары.Удалить(Строка);
			КонецЦикла;
			
			Для Каждого Строка Из СерииКУдалению Цикл
				ДокументОбъект.Серии.Удалить(Строка);
			КонецЦикла;
			
			НовыйДокумент.Проведен = НовыйДокумент.Товары.Количество() > 0;
			
			НовыйДокумент.Серии.Свернуть("Серия, Номенклатура, Характеристика, Назначение", "Количество");
			ДокументОбъект.Серии.Свернуть("Серия, Номенклатура, Характеристика, Назначение", "Количество");
			
			ЗаполнитьСтатусУказанияСерийРазборкиОбновлениеИБ(НовыйДокумент);
			ЗаполнитьСтатусУказанияСерийРазборкиОбновлениеИБ(ДокументОбъект);
			
			Попытка
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент,,,РежимЗаписиДокумента.Проведение);
				
				ШаблонКомментария = НСтр("ru='При обновлении поля ""Действие"" часть данных перенесена в документ %1.';uk='При оновленні поля ""Дія"" частина даних перенесена в документ %1.'");
				ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + " " + СтрШаблон(ШаблонКомментария, НовыйДокумент.Ссылка);
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
				
				ЗаказРазделен = Истина;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
				
				ВызватьИсключение;
				
			КонецПопытки;
		КонецЕсли;
		
		Если Не ЗаказРазделен Тогда
			
			Попытка
				
				ДокументОбъект.ВариантОбеспечения = ВариантОтгрузить;
				ЗаполнитьСтатусУказанияСерийРазборкиОбновлениеИБ(ДокументОбъект);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
                ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
        Параметры.Очередь, 
        ПолноеИмяОбъекта()
    );
	
КонецПроцедуры

Процедура ЗаполнитьСтатусУказанияСерийРазборкиОбновлениеИБ(ДокументОбъект)
	
	Если ЗначениеЗаполнено(ДокументОбъект.Серия) Тогда
		ДокументОбъект.СтатусУказанияСерий = 14;
	ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.Серии) Тогда
		ДокументОбъект.СтатусУказанияСерий = 10;
	ИначеЕсли ДокументОбъект.СтатусУказанияСерий = 12 Тогда
		ДокументОбъект.СтатусУказанияСерий = 11;
	ИначеЕсли ДокументОбъект.СтатусУказанияСерий = 16 Тогда
		ДокументОбъект.СтатусУказанияСерий = 15;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазборкаРазбитьСтрокиТЧПоНакладнымССериямиЗаполнитьДанныеДляОбновления(Параметры) Экспорт
	
	ЗаказыНаРазборку = ЗаказыНаРазборкуТЧКоторыхНужноРазбитьПослеЗаполненияСерийВНакладных();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ЗаказыНаРазборку);
	
КонецПроцедуры

Процедура РазборкаРазбитьСтрокиТЧПоНакладнымССериями(Параметры) Экспорт
	
	// Разобьем строки ТЧ Товары Заказов на разборку, если в связанной накладной после переноса серий изменились коды строк в ТЧ Товары,
	// при этом в ТЧ Заказа на разборку серий быть не может, но нужно перенести из накладной новые коды строк
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		ПолноеИмяОбъекта(), МенеджерВТ);
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
		"Документ.СборкаТоваров", МенеджерВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.ВерсияДанных КАК ЗаказВерсияДанных,
	|	ТоварыНакладной.Ссылка.ВерсияДанных КАК НакладнаяВерсияДанных,
	|	Заказы.Ссылка КАК ЗаказСсылка,
	|	СтрокиДляОбработки.НомерСтроки КАК ЗаказНомерСтроки,
	|	ЕСТЬNULL(ТоварыНакладной.Ссылка, НЕОПРЕДЕЛЕНО) КАК НакладнаяСсылка,
	|	ТоварыНакладной.Серия КАК Серия,
	|	ТоварыНакладной.КодСтроки,
	|	ТоварыНакладной.Количество,
	|	11 КАК СтатусУказанияСерий,
	|	НЕ ВТЗаблокированоСборкаТоваров.Ссылка ЕСТЬ NULL  КАК ЕстьЗаблокированнаяНакладная,
	|	СтрокиДляОбработки.Ссылка ЕСТЬ NULL  КАК УдалитьИзОчереди,
	|	ВЫБОР
	|		КОГДА ТоварыНакладной.КодСтроки > Заказы.МаксимальныйКодСтроки
	|			ТОГДА ТоварыНакладной.КодСтроки
	|		ИНАЧЕ Заказы.МаксимальныйКодСтроки
	|	КОНЕЦ КАК МаксимальныйКодСтроки
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиЗаказНаСборку КАК ЗаказыФильтр
	|		ПО Заказы.Ссылка = ЗаказыФильтр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК СтрокиДляОбработки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Товары КАК ТоварыНакладной
	|			ПО (ТоварыНакладной.Ссылка.ЗаказНаСборку = СтрокиДляОбработки.Ссылка)
	|				И (ТоварыНакладной.Ссылка.Проведен)
	|				И (ТоварыНакладной.УдалитьСтарыйКодСтроки = СтрокиДляОбработки.КодСтроки)
	|				И (ТоварыНакладной.СтатусУказанияСерий = 10)
	|		ПО (Заказы.Проведен)
	|			И (НЕ СтрокиДляОбработки.Отменено)
	|			И Заказы.Ссылка = СтрокиДляОбработки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСборкаТоваров КАК ВТЗаблокированоСборкаТоваров
	|		ПО (ВТЗаблокированоСборкаТоваров.Ссылка = ТоварыНакладной.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНомерСтроки,
	|	ТоварыНакладной.КодСтроки
	|
	|ИТОГИ
	|	МАКСИМУМ(ЕстьЗаблокированнаяНакладная),
	|	МАКСИМУМ(УдалитьИзОчереди),
	|	МАКСИМУМ(МаксимальныйКодСтроки)
	|ПО
	|	ЗаказСсылка";
	
	ВыборкаПоСсылкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Если ВыборкаПоСсылкам.ЕстьЗаблокированнаяНакладная Тогда
			Продолжить;
		ИначеЕсли ВыборкаПоСсылкам.УдалитьИзОчереди Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСсылкам.ЗаказСсылка);
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоСсылкам.Выбрать();
		
		НачатьТранзакцию();
		
		Блокировка = ЗаказыСервер.БлокировкаСвязанныхОбъектов(Выборка,"Заказ","Накладная");
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойБлокировке(ВыборкаПоСсылкам.ЗаказСсылка);
			Продолжить;
		КонецПопытки;
		
		ЗаказОбъект = ВыборкаПоСсылкам.ЗаказСсылка.ПолучитьОбъект();
		Если ЗаказОбъект.ВерсияДанных <> ВыборкаПоСсылкам.ЗаказВерсияДанных Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		Если ЗаказОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСсылкам.ЗаказСсылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗаказыСервер.ПроверитьИзменениеВерсий(Выборка, "Накладная") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаказОбъект.МаксимальныйКодСтроки = ВыборкаПоСсылкам.МаксимальныйКодСтроки;
		
		// Для разбиения строк по сериям воспользуемся обработкой по переносу серий из накладных в заказы
		ЗаказыСервер.ОбработатьСерииЗаказа(ЗаказОбъект, Выборка);
		
		// В нашем случае не должны быть заполнены Серии, СтатусыУказанияСерий и ВариантыОбеспечения
		СтруктураЗаполнения = Новый Структура("Серия, СтатусУказанияСерий, ВариантОбеспечения",
			Справочники.СерииНоменклатуры.ПустаяСсылка(),0,Перечисления.ВариантыОбеспечения.ПустаяСсылка());
		Для Каждого Стр Из ЗаказОбъект.Товары Цикл
			ЗаполнитьЗначенияСвойств(Стр, СтруктураЗаполнения);
		КонецЦикла;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаказОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(ЗаказОбъект.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

Процедура РазбитьЗаказыНаРазборкуПоФинСериямПривязатьНакладныеЗаполнитьДанныеДляОбновления(Параметры) Экспорт
	РазборкиТоваров = РазборкиКоторыеНужноПривязатьКНовымЗаказамПослеРазбиенияЗаказов();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РазборкиТоваров);
КонецПроцедуры

Процедура РазбитьЗаказыНаРазборкуПоФинСериямПривязатьНакладные(Параметры) Экспорт
	
	ВариантОбособленно          = Перечисления.ВариантыОбеспечения.Обособленно;
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ВариантОтгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		"Документ.СборкаТоваров", МенеджерВТ);
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
		"Документ.ЗаказНаСборку", МенеджерВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Накладные.Ссылка КАК Ссылка,
	|	Накладные.ЗаказНаСборку КАК ЗаказСсылка
	|ПОМЕСТИТЬ ВТБлокируемыеНакладные
	|ИЗ
	|	ВТДляОбработкиСборкаТоваров КАК ВТДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.Ссылка = ВТДляОбработки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоЗаказНаСборку КАК ВТЗаблокировано
	|		ПО (ВТЗаблокировано.Ссылка = Накладные.ЗаказНаСборку)
	|ГДЕ
	|	ВТЗаблокировано.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТБлокируемыеНакладные.ЗаказСсылка,
	|	ВТБлокируемыеНакладные.Ссылка
	|ИЗ
	|	ВТБлокируемыеНакладные КАК ВТБлокируемыеНакладные";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Блокировка = Новый БлокировкаДанных;
	Пока Выборка.Следующий() Цикл
		ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		ЭлементБлокировки = Блокировка.Добавить(Выборка.ЗаказСсылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.ЗаказСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// Разобьем заказы на разборку, в которых не указана серия комплекта и по которым есть накладные
	//	- если в нескольких накладных по заказу указано несколько фин.серий
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Ссылка
	|ПОМЕСТИТЬ ВТЗаказыФильтр
	|ИЗ
	|	ВТБлокируемыеНакладные КАК ВТДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказы
	|		ПО ВТДляОбработки.ЗаказСсылка = Заказы.Ссылка
	|			И (Заказы.Проведен)
	|			И (Заказы.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие))
	|			И (Заказы.СтатусУказанияСерий = 15)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.Ссылка = ВТДляОбработки.Ссылка)
	|			И (Накладные.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Накладные.Серия) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказы.Ссылка
	|;
	|
	|//1//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка,
	|	Заказы.Дата,
	|	Заказы.Организация,
	|	Заказы.Склад,
	|	Заказы.ДокументОснование,
	|	Заказы.Ответственный,
	|	Заказы.Статус,
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Упаковка,
	|	Заказы.ТипОперации,
	|	Заказы.НачалоСборкиРазборки,
	|	Заказы.ОкончаниеСборкиРазборки,
	|	Заказы.ЖелаемаяДатаПоступления,
	|	Заказы.ДлительностьСборкиРазборки,
	|	Заказы.МаксимальныйКодСтроки,
	|	Заказы.ВариантКомплектации,
	|	Заказы.Сделка,
	|	Заказы.Подразделение,
	|	Заказы.СтатусУказанияСерий,
	|	Заказы.Назначение,
	|	Заказы.НазначениеТовары,
	|	Заказы.ВариантОбеспечения,
	|	Заказы.КоличествоУпаковокОтменено,
	|	Заказы.КоличествоОтменено,
	|	Заказы.Количество,
	|	Заказы.КоличествоУпаковок,
	|	ВЫРАЗИТЬ(Заказы.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	|	Накладные.Серия КАК СерияНакладной,
	|	СУММА(ЕСТЬNULL(Накладные.КоличествоУпаковок, 0)) КАК ОформленоУпаковокКомплект,
	|	СУММА(ЕСТЬNULL(Накладные.Количество, 0)) КАК ОформленоКомплект
	|ИЗ
	|	ВТЗаказыФильтр КАК ЗаказыФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказы
	|		ПО (Заказы.Ссылка = ЗаказыФильтр.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|			И (Накладные.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Ссылка,
	|	Накладные.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказы.Ссылка,
	|	Накладные.Серия
	|;
	|
	|//2//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка,
	|	Накладные.Серия КАК СерияНакладной,
	|	СУММА(ЕСТЬNULL(ТоварыНакладной.КоличествоУпаковок, 0)) КАК ОформленоУпаковокКомплектующая,
	|	СУММА(ЕСТЬNULL(ТоварыНакладной.Количество, 0)) КАК ОформленоКомплектующая,
	|	ТоварыЗаказа.НомерСтроки,
	|	ТоварыЗаказа.Номенклатура,
	|	ТоварыЗаказа.Характеристика,
	|	ТоварыЗаказа.Назначение,
	|	ТоварыЗаказа.Упаковка,
	|	ТоварыЗаказа.Количество,
	|	ТоварыЗаказа.КоличествоУпаковок,
	|	ТоварыЗаказа.КодСтроки,
	|	ТоварыЗаказа.СтатусУказанияСерий,
	|	ТоварыЗаказа.УказыватьСерии,
	|	ТоварыЗаказа.ВариантОбеспечения,
	|	ТоварыЗаказа.Серия,
	|	ТоварыЗаказа.Отменено
	|ИЗ
	|	ВТЗаказыФильтр КАК ЗаказыФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказы
	|		ПО (Заказы.Ссылка = ЗаказыФильтр.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК ТоварыЗаказа
	|		ПО (Заказы.Ссылка = ТоварыЗаказа.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Товары КАК ТоварыНакладной
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|			ПО (Накладные.Ссылка = ТоварыНакладной.Ссылка)
	|				И (Накладные.Проведен)
	|		ПО (Накладные.ЗаказНаСборку = ТоварыЗаказа.Ссылка)
	|			И (ТоварыНакладной.КодСтроки = ТоварыЗаказа.КодСтроки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Ссылка,
	|	Накладные.Серия,
	|	ТоварыЗаказа.НомерСтроки,
	|	ТоварыЗаказа.Номенклатура,
	|	ТоварыЗаказа.Характеристика,
	|	ТоварыЗаказа.Назначение,
	|	ТоварыЗаказа.Упаковка,
	|	ТоварыЗаказа.Количество,
	|	ТоварыЗаказа.КоличествоУпаковок,
	|	ТоварыЗаказа.КодСтроки,
	|	ТоварыЗаказа.СтатусУказанияСерий,
	|	ТоварыЗаказа.УказыватьСерии,
	|	ТоварыЗаказа.ВариантОбеспечения,
	|	ТоварыЗаказа.Серия,
	|	ТоварыЗаказа.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказы.Ссылка,
	|	Накладные.Серия,
	|	ТоварыЗаказа.НомерСтроки УБЫВ
	|;
	|
	|//3//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка,
	|	Накладные.Серия КАК СерияНакладной,
	|	Накладные.Ссылка КАК НакладнаяСсылка
	|ИЗ
	|	ВТЗаказыФильтр КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Ссылка,
	|	Накладные.Серия,
	|	Накладные.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказы.Ссылка,
	|	Накладные.Серия";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПоЗаказам    = РезультатЗапроса[1].Выбрать();
	ВыборкаСтрокиЗаказа = РезультатЗапроса[2].Выбрать();
	ВыборкаНакладные    = РезультатЗапроса[3].Выбрать();
	
	СтруктураСтрокиЗаказа = Новый Структура(
		"НомерСтроки,Номенклатура,Характеристика,Назначение,Упаковка,Количество,КоличествоУпаковок,
		|КодСтроки,СтатусУказанияСерий, УказыватьСерии, ВариантОбеспечения, Серия, Отменено");
	
	Пока ВыборкаСтрокиЗаказа.СледующийПоЗначениюПоля("Ссылка") Цикл
		ВыборкаНакладные.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоЗаказам.СледующийПоЗначениюПоля("Ссылка");
		
		ЗаказыНаЗапись = Новый Массив;
		НакладныеНаЗапись = Новый Массив;
		СтрокиЗаказа = Новый Соответствие;
		
		ОстатокКоличество         = ВыборкаПоЗаказам.Количество;
		ОстатокКоличествоУпаковок = ВыборкаПоЗаказам.КоличествоУпаковок;
		
		Пока ВыборкаСтрокиЗаказа.СледующийПоЗначениюПоля("СерияНакладной") Цикл
			ВыборкаНакладные.СледующийПоЗначениюПоля("СерияНакладной");
			ВыборкаПоЗаказам.СледующийПоЗначениюПоля("СерияНакладной");
			
			ЗаказСсылка = Документы.ЗаказНаСборку.ПолучитьСсылку();
			ДокументОбъект  = Документы.ЗаказНаСборку.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаПоЗаказам);
			ДокументОбъект.УстановитьСсылкуНового(ЗаказСсылка);
			ДокументОбъект.УстановитьНовыйНомер();
			
			Если ВыборкаПоЗаказам.ВариантОбеспечения = ВариантОбособленно Тогда
				ДокументОбъект.ВариантОбеспечения = ВариантОтгрузитьОбособленно;
			Иначе
				ДокументОбъект.ВариантОбеспечения = ВариантОтгрузить;
			КонецЕсли;
			
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Создан автоматически при обновлении информационной базы (разбит документ %1)';uk='Створений автоматично при оновленні інформаційної бази (розбитий документ %1)'"),
				ВыборкаПоЗаказам.Ссылка);
			ДокументОбъект.Комментарий = Комментарий + Символы.ПС + ДокументОбъект.Комментарий;
			
			Пока ВыборкаНакладные.Следующий() Цикл
				НакладнаяОбъект = ВыборкаНакладные.НакладнаяСсылка.ПолучитьОбъект();
				НакладнаяОбъект.ЗаказНаСборку = ЗаказСсылка;
				НакладныеНаЗапись.Добавить(НакладнаяОбъект);
			КонецЦикла;
			
			ДокументОбъект.Количество         = ВыборкаПоЗаказам.ОформленоКомплект;
			ДокументОбъект.КоличествоУпаковок = ВыборкаПоЗаказам.ОформленоУпаковокКомплект;
			
			ОстатокКоличество                 = ОстатокКоличество - ДокументОбъект.Количество;
			ОстатокКоличествоУпаковок         = ОстатокКоличествоУпаковок - ДокументОбъект.КоличествоУпаковок;
			
			ДокументОбъект.Серия = ВыборкаНакладные.СерияНакладной;
			ДокументОбъект.СтатусУказанияСерий = 14;
			
			Пока ВыборкаСтрокиЗаказа.Следующий() Цикл
				Если СтрокиЗаказа[ВыборкаСтрокиЗаказа.НомерСтроки] = Неопределено Тогда
					// Кешируем строки заказа для заполнения "остаточного" заказа
					ЗаполнитьЗначенияСвойств(СтруктураСтрокиЗаказа, ВыборкаСтрокиЗаказа);
					СтрокиЗаказа.Вставить(ВыборкаСтрокиЗаказа.НомерСтроки, СтруктураСтрокиЗаказа);
				КонецЕсли;
				НоваяСтрока = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрокиЗаказа);
				
				НоваяСтрока.Количество            = ВыборкаСтрокиЗаказа.ОформленоКомплектующая;
				НоваяСтрока.КоличествоУпаковок    = ВыборкаСтрокиЗаказа.ОформленоУпаковокКомплектующая;
				
				СтрокиЗаказа[ВыборкаСтрокиЗаказа.НомерСтроки].Количество         = СтрокиЗаказа[ВыборкаСтрокиЗаказа.НомерСтроки].Количество - НоваяСтрока.Количество;
				СтрокиЗаказа[ВыборкаСтрокиЗаказа.НомерСтроки].КоличествоУпаковок = СтрокиЗаказа[ВыборкаСтрокиЗаказа.НомерСтроки].КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
				
			КонецЦикла;
			
			ЗаказыНаЗапись.Добавить(ДокументОбъект);
			
		КонецЦикла;
		
		Если ОстатокКоличество > 0 Тогда
			ДокументОбъект = Документы.ЗаказНаСборку.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаПоЗаказам);
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Создан автоматически при обновлении информационной базы (разбит документ %1)';uk='Створений автоматично при оновленні інформаційної бази (розбитий документ %1)'"),
				ВыборкаПоЗаказам.Ссылка);
			ДокументОбъект.УстановитьНовыйНомер();
			ДокументОбъект.Комментарий = Комментарий + Символы.ПС + ДокументОбъект.Комментарий;
			ДокументОбъект.Количество = ОстатокКоличество;
			ДокументОбъект.КоличествоУпаковок = ОстатокКоличествоУпаковок;
			Если ВыборкаПоЗаказам.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				ДокументОбъект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
				ДокументОбъект.СтатусУказанияСерий = 0;
			Иначе
				ДокументОбъект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				ДокументОбъект.СтатусУказанияСерий = 15;
			КонецЕсли;
			Для Каждого КлючИЗначение Из СтрокиЗаказа Цикл
				Если КлючИЗначение.Значение.Количество > 0 Тогда
					ЗаполнитьЗначенияСвойств(ДокументОбъект.Товары.Добавить(), КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			ДокументОбъект.Проведен = ДокументОбъект.Товары.Количество() > 0;
			ЗаказыНаЗапись.Добавить(ДокументОбъект);
		КонецЕсли;
		
		Попытка
			
			Для Каждого ДокументОбъект Из ЗаказыНаЗапись Цикл
				ДокументОбъект.УдалитьИсходныйЗаказ = ВыборкаПоЗаказам.Ссылка;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина, , РежимЗаписиДокумента.Проведение);
			КонецЦикла;
			
			Для Каждого ДокументОбъект Из НакладныеНаЗапись Цикл
				Если ДокументОбъект.Статус = Перечисления.СтатусыСборокТоваров.УдалитьКСборкеРазборке Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыСборокТоваров.ВРаботе;
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			КонецЦикла;
			
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(ВыборкаПоЗаказам.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДляОбработки.Ссылка
	|ИЗ
	|	ВТБлокируемыеНакладные КАК ВТДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаказыФильтр КАК ВТЗаказыФильтр
	|		ПО (ВТЗаказыФильтр.Ссылка = ВТДляОбработки.Ссылка)
	|ГДЕ
	|	ВТЗаказыФильтр.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Документ.СборкаТоваров");
	
КонецПроцедуры

Процедура РазбитьЗаказыНаРазборкуПоСериямЗаполнитьДанныеДляОбновления(Параметры) Экспорт
	
	ЗаказыНаРазборку = ЗаказыНаРазборкуКоторыеНужноРазбитьПередЗаполнениемСерий();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ЗаказыНаРазборку);
	
КонецПроцедуры

Процедура РазбитьЗаказыНаРазборкуПоСериям(Параметры) Экспорт
	
	ВариантОбособленно          = Перечисления.ВариантыОбеспечения.Обособленно;
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ВариантОтгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		ПолноеИмяОбъекта(), МенеджерВТ);
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
		"Документ.СборкаТоваров", МенеджерВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Ссылка КАК ЗаказСсылка
	|ПОМЕСТИТЬ ВТБлокируемыеЗаказы
	|ИЗ
	|	ВТДляОбработкиЗаказНаСборку КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|			И (Накладные.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСборкаТоваров КАК ВТЗаблокированоСборкаТоваров
	|		ПО (ВТЗаблокированоСборкаТоваров.Ссылка = Накладные.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Ссылка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(НЕ ВТЗаблокированоСборкаТоваров.Ссылка ЕСТЬ NULL ) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЗаказСсылка,
	|	Накладные.Ссылка КАК НакладнаяСсылка
	|ИЗ
	|	ВТБлокируемыеЗаказы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Т.ЗаказСсылка)
	|			И (Накладные.Проведен)
	|
	|ИТОГИ ПО
	|	Т.ЗаказСсылка";
	
	ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Блокировка = Новый БлокировкаДанных;
	Пока ВыборкаПоЗаказам.Следующий() Цикл
		ЗаказыСервер.БлокировкаСвязанныхОбъектов(ВыборкаПоЗаказам.Выбрать(), "Заказ", "Накладная")
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// Разобьем заказы на разборку, в которых не указана серия комплекта и по которым есть накладные
	//	- если серия комплекта нефинансовая и не на все количество заказа оформлены накладные (нет серий для перезаполнения)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТДляОбработки.ЗаказСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаказыФильтрСтатус11
	|ИЗ
	|	ВТБлокируемыеЗаказы КАК ВТДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказы
	|		ПО (Заказы.Ссылка = ВТДляОбработки.ЗаказСсылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|			И (Накладные.Проведен)
	|			И (Заказы.Проведен)
	|			И (Заказы.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие))
	|			И (Заказы.СтатусУказанияСерий = 11)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДляОбработки.ЗаказСсылка
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Заказы.Количество) > СУММА(Накладные.Количество)
	|;
	|
	|//1//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка,
	|	ТоварыЗаказа.НомерСтроки,
	|	СУММА(ЕСТЬNULL(Накладные.КоличествоУпаковок, 0)) КАК ОформленоУпаковокКомплект,
	|	СУММА(ЕСТЬNULL(ТоварыНакладной.КоличествоУпаковок, 0)) КАК ОформленоУпаковокКомплектующая,
	|	СУММА(ЕСТЬNULL(Накладные.Количество, 0)) КАК ОформленоКомплект,
	|	СУММА(ЕСТЬNULL(ТоварыНакладной.Количество, 0)) КАК ОформленоКомплектующая
	|ИЗ
	|	ВТЗаказыФильтрСтатус11 КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК ТоварыЗаказа
	|		ПО Заказы.Ссылка = ТоварыЗаказа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = ТоварыЗаказа.Ссылка)
	|			И (Накладные.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Товары КАК ТоварыНакладной
	|		ПО (Накладные.Ссылка = ТоварыНакладной.Ссылка)
	|			И (ТоварыНакладной.КодСтроки = ТоварыЗаказа.КодСтроки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Ссылка,
	|	ТоварыЗаказа.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказы.Ссылка,
	|	ТоварыЗаказа.НомерСтроки УБЫВ
	|;
	|
	|//2//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка КАК ЗаказСсылка,
	|	Накладные.Ссылка КАК НакладнаяСсылка,
	|	ВЫБОР
	|		КОГДА Накладные.СтатусУказанияСерий = 10
	|			ТОГДА НакладныеСерии.Серия
	|		ИНАЧЕ Накладные.Серия
	|	КОНЕЦ КАК Серия,
	|	НакладныеСерии.Количество
	|ИЗ
	|	ВТЗаказыФильтрСтатус11 КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = Заказы.Ссылка)
	|			И (Накладные.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК НакладныеСерии
	|		ПО (Накладные.Ссылка = НакладныеСерии.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказСсылка,
	|	НакладнаяСсылка
	|ИТОГИ ПО
	|	ЗаказСсылка";
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[1].Выбрать();
	ВыборкаПоСериям = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ВыборкаПоСериям.СледующийПоЗначениюПоля("ЗаказСсылка");
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НовыйДокумент  = Документы.ЗаказНаСборку.СоздатьДокумент();

		ЗаполнитьЗначенияСвойств(НовыйДокумент, ДокументОбъект);
		НовыйДокумент.УстановитьНовыйНомер();
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Создан автоматически при обновлении информационной базы (разбит документ %1)';uk='Створений автоматично при оновленні інформаційної бази (розбитий документ %1)'"),
			ДокументОбъект.Ссылка);
			
		НовыйДокумент.Комментарий = Комментарий + Символы.ПС + НовыйДокумент.Комментарий;
		
		НовыйДокумент.Количество = ДокументОбъект.Количество - Выборка.ОформленоКомплект;
		НовыйДокумент.КоличествоУпаковок = ДокументОбъект.КоличествоУпаковок - Выборка.ОформленоУпаковокКомплект;
		
		ДокументОбъект.Количество         = Выборка.ОформленоКомплект;
		ДокументОбъект.КоличествоУпаковок = Выборка.ОформленоУпаковокКомплект;
		
		Если ДокументОбъект.ВариантОбеспечения = ВариантОбособленно Тогда
			ДокументОбъект.ВариантОбеспечения = ВариантОтгрузитьОбособленно;
		Иначе
			ДокументОбъект.ВариантОбеспечения = ВариантОтгрузить;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл

			СтрокаТовары = ДокументОбъект.Товары[Выборка.НомерСтроки - 1];

			Если СтрокаТовары.Количество > Выборка.ОформленоКомплектующая Тогда

				НоваяСтрока = НовыйДокумент.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);

				НоваяСтрока.Количество = СтрокаТовары.Количество - Выборка.ОформленоКомплектующая;
				НоваяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок - Выборка.ОформленоУпаковокКомплектующая;

				СтрокаТовары.Количество         = Выборка.ОформленоКомплектующая;
				СтрокаТовары.КоличествоУпаковок = Выборка.ОформленоУпаковокКомплектующая;
				
				Если СтрокаТовары.Количество = 0 Тогда
					ДокументОбъект.Товары.Удалить(СтрокаТовары);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСерииЗаказаНаРазборку(ДокументОбъект, ВыборкаПоСериям.Выбрать());
		
		НовыйДокумент.Проведен = НовыйДокумент.Товары.Количество() > 0;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент, Истина, , РежимЗаписиДокумента.Проведение);
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(ДокументОбъект.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	// Пометим на удаление заказы со статусом 15
	// ранее они были разбиты обработчиком РазбитьЗаказыНаРазборкуПоФинСериямПривязатьНакладные
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Ссылка
	|ПОМЕСТИТЬ ВТЗаказыФильтрСтатус15
	|ИЗ
	|	ВТБлокируемыеЗаказы КАК ВТДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказы
	|		ПО ВТДляОбработки.ЗаказСсылка = Заказы.Ссылка
	|			И (Заказы.Проведен)
	|			И (Заказы.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие))
	|			И (Заказы.СтатусУказанияСерий = 15)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка
	|ИЗ
	|	ВТЗаказыФильтрСтатус15 КАК Заказы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Комментарий = НСтр("ru='Заказ разделен по сериям при обновлении информационной базы (см. в структуре подчиненности).';uk='Замовлення розділене по серіям при оновленні інформаційної бази (див. в структурі підпорядкованості).'");
	Пока Выборка.Следующий() Цикл
		
		ЗаказОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаказОбъект.Проведен = Ложь;
		ЗаказОбъект.ПометкаУдаления = Истина;
		ЗаказОбъект.Комментарий = Комментарий + Символы.ПС + ЗаказОбъект.Комментарий;
		
		Попытка
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаказОбъект, Истина);
			
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(ЗаказОбъект.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	// Удалим из очереди заказы, которые не потребовалось обновлять
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТДляОбработки.ЗаказСсылка
	|ИЗ
	|	ВТБлокируемыеЗаказы КАК ВТДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаказыФильтрСтатус15 КАК ВТЗаказыФильтрСтатус15
	|		ПО (ВТЗаказыФильтрСтатус15.Ссылка = ВТДляОбработки.ЗаказСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаказыФильтрСтатус11 КАК ВТЗаказыФильтрСтатус11
	|		ПО (ВТЗаказыФильтрСтатус11.Ссылка = ВТДляОбработки.ЗаказСсылка)
	|ГДЕ
	|	ВТЗаказыФильтрСтатус11.Ссылка ЕСТЬ NULL 
	|	И ВТЗаказыФильтрСтатус15.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.ЗаказСсылка);
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

Процедура ЗаполнитьСерииЗаказаНаРазборку(ЗаказОбъект, Выборка)
	
	Если ЗаказОбъект.СтатусУказанияСерий = 12
		Или ЗаказОбъект.СтатусУказанияСерий = 16 Тогда
		ЗаказОбъект.СтатусУказанияСерий = 0;
		
	Иначе
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.НакладнаяСсылка) Тогда
		
				Если ЗаказОбъект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
					ЗаказОбъект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
					ЗаказОбъект.СтатусУказанияСерий = 0;
				Иначе
					ЗаказОбъект.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
			Если ЗаказОбъект.СтатусУказанияСерий = 15 Тогда
				ЗаказОбъект.СтатусУказанияСерий = 14;
				ЗаказОбъект.Серия = Выборка.Серия;
			Иначе
				ЗаказОбъект.СтатусУказанияСерий = 10;
				СтрокаСерийЗаказа = ЗаказОбъект.Серии.Добавить();
				СтрокаСерийЗаказа.Номенклатура = ЗаказОбъект.Номенклатура;
				СтрокаСерийЗаказа.Характеристика = ЗаказОбъект.Назначение;
				СтрокаСерийЗаказа.Серия = Выборка.Серия;
				СтрокаСерийЗаказа.Количество = Выборка.Количество;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЗаказОбъект.СтатусУказанияСерий = 10 Тогда
		ЗаказОбъект.Серии.Свернуть("Номенклатура, Характеристика, Назначение, Серия", "Количество");
	КонецЕсли;
	
КонецПроцедуры

Процедура СборкаЗаполнитьСерииПоНакладнымЗаполнитьДанныеДляОбновления(Параметры) Экспорт
	
	// Серии комплектующих можно указать только для заказа на сборку
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТоварыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказы
	|		ПО (Заказы.Ссылка = ТоварыЗаказа.Ссылка)
	|			И (Заказы.Проведен)
	|ГДЕ
	|	НЕ ТоварыЗаказа.Отменено
	|	И (ТоварыЗаказа.СтатусУказанияСерий = 10
	|				И ТоварыЗаказа.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ИЛИ ТоварыЗаказа.СтатусУказанияСерий В (12, 16)
	|			ИЛИ ТоварыЗаказа.СтатусУказанияСерий В (11, 15)
	|				И НЕ ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
//	В заказах заполняет серии товаров, для которых серии не указаны, а указание серий стало обязательным;
//		если серию заполнить не удается, откатывается вариант обеспечения в строке;
//		для строк серий заполняется новое поле связи ВариантОбеспечения.
//	В связанных накладных в ТЧ Товары заполняем ДокументРезерваСерий;
//		если строка заказа разделилась - в связанных строках накладной записываем новые коды строк (для серий со статусом 14).
Процедура СборкаЗаполнитьСерииПоНакладнымОтложенно(Параметры) Экспорт
	
	// Серии комплектующих можно указать только для заказа на сборку
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		ПолноеИмяОбъекта(), МенеджерВТ);
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
		"Документ.СборкаТоваров", МенеджерВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.ВерсияДанных КАК ЗаказВерсияДанных,
	|	Накладные.ВерсияДанных КАК НакладнаяВерсияДанных,
	|	Заказы.Ссылка КАК ЗаказСсылка,
	|	СтрокиДляОбработки.НомерСтроки КАК ЗаказНомерСтроки,
	|	ВЫБОР
	|		КОГДА СтрокиДляОбработки.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА СтрокиДляОбработки.СтатусУказанияСерий
	|		ИНАЧЕ 20
	|	КОНЕЦ КАК ПорядокЗаполнения,
	|	ЕСТЬNULL(ТоварыНакладной.Ссылка, НЕОПРЕДЕЛЕНО) КАК НакладнаяСсылка,
	|	ТоварыНакладной.Серия КАК Серия,
	|	ТоварыНакладной.КодСтроки,
	|	ТоварыНакладной.Количество,
	|	СтрокиДляОбработки.СтатусУказанияСерий,
	|	НЕ ВТЗаблокированоСборкаТоваров.Ссылка ЕСТЬ NULL  КАК ЕстьЗаблокированнаяНакладная,
	|	СтрокиДляОбработки.Ссылка ЕСТЬ NULL КАК УдалитьИзОчереди,
	|	ВЫБОР
	|		КОГДА ТоварыНакладной.КодСтроки > Заказы.МаксимальныйКодСтроки
	|			ТОГДА ТоварыНакладной.КодСтроки
	|		ИНАЧЕ Заказы.МаксимальныйКодСтроки
	|	КОНЕЦ КАК МаксимальныйКодСтроки
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиЗаказНаСборку КАК ЗаказыФильтр
	|		ПО Заказы.Ссылка = ЗаказыФильтр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК СтрокиДляОбработки
	|		ПО (Заказы.Проведен)
	|			И НЕ СтрокиДляОбработки.Отменено
	|			И Заказы.Ссылка = СтрокиДляОбработки.Ссылка
	|			И (СтрокиДляОбработки.СтатусУказанияСерий = 10
	|					И СтрокиДляОбработки.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				ИЛИ СтрокиДляОбработки.СтатусУказанияСерий В (12, 16)
	|				ИЛИ СтрокиДляОбработки.СтатусУказанияСерий В (11, 15)
	|					И НЕ СтрокиДляОбработки.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Товары КАК ТоварыНакладной
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|			ПО (Накладные.Ссылка = ТоварыНакладной.Ссылка)
	|				И (Накладные.Проведен)
	|		ПО (Накладные.ЗаказНаСборку = СтрокиДляОбработки.Ссылка)
	|			И (ТоварыНакладной.УдалитьСтарыйКодСтроки = СтрокиДляОбработки.КодСтроки
	|				ИЛИ ТоварыНакладной.КодСтроки = СтрокиДляОбработки.КодСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСборкаТоваров КАК ВТЗаблокированоСборкаТоваров
	|		ПО (ВТЗаблокированоСборкаТоваров.Ссылка = ТоварыНакладной.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЗаполнения,
	|	ЗаказНомерСтроки,
	|	ТоварыНакладной.КодСтроки
	|ИТОГИ
	|	МАКСИМУМ(ЕстьЗаблокированнаяНакладная),
	|	МАКСИМУМ(УдалитьИзОчереди),
	|	МАКСИМУМ(МаксимальныйКодСтроки)
	|ПО
	|	ЗаказСсылка";
	
	ВыборкаПоСсылкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Если ВыборкаПоСсылкам.ЕстьЗаблокированнаяНакладная Тогда
			Продолжить;
		ИначеЕсли ВыборкаПоСсылкам.УдалитьИзОчереди Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСсылкам.ЗаказСсылка);
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоСсылкам.Выбрать();
		
		НачатьТранзакцию();
		
		Блокировка = ЗаказыСервер.БлокировкаСвязанныхОбъектов(Выборка,"Заказ","Накладная");
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойБлокировке(ВыборкаПоСсылкам.ЗаказСсылка);
			Продолжить;
		КонецПопытки;
		
		ЗаказОбъект = ЗаказыСервер.ПроверитьПолучитьОбъект(ВыборкаПоСсылкам.ЗаказСсылка, ВыборкаПоСсылкам.ЗаказВерсияДанных, Параметры.Очередь);
		Если ЗаказОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Если Не ЗаказыСервер.ПроверитьИзменениеВерсий(Выборка, "Накладная") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаказОбъект.МаксимальныйКодСтроки = ВыборкаПоСсылкам.МаксимальныйКодСтроки;
		ЗаказыСервер.ОбработатьСерииЗаказа(ЗаказОбъект, Выборка);
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаказОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(ЗаказОбъект.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

Функция ЗаполнитьСерииПоНакладнымПроверитьДанныеОбновлены(МетаданныеИОтбор) Экспорт
	
	Если МетаданныеИОтбор.Метаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта()) Тогда
		Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.ЗаказНаСборку
	|ИЗ
	|	Документ.СборкаТоваров КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",МетаданныеИОтбор.Отбор);
	
	Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, ПолноеИмяОбъекта(), Ссылки);
	
КонецФункции

Процедура РазборкаЗаполнитьСерииПоНакладнымЗаполнитьДанныеДляОбновления(Параметры) Экспорт
	
	// Серии комплекта можно указать только для заказа на разборку
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказы
	|ГДЕ
	|	Заказы.Проведен
	|	И (Заказы.СтатусУказанияСерий В (12, 16)
	|			ИЛИ Заказы.СтатусУказанияСерий В (11, 15)
	|				И НЕ Заказы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
//	В заказах заполняет серии товаров, для которых серии не указаны, а указание серий стало обязательным;
//		если серию заполнить не удается, откатывается вариант обеспечения в строке;
//		для строк серий заполняется новое поле связи ВариантОбеспечения.
//	В связанных накладных в ТЧ Товары заполняем ДокументРезерваСерий;
//		если строка заказа разделилась - в связанных строках накладной записываем новые коды строк (для серий со статусом 14).
Процедура РазборкаЗаполнитьСерииПоНакладнымОтложенно(Параметры) Экспорт
	
	// Серии комплекта можно указать только для заказа на разборку
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
		ПолноеИмяОбъекта(), МенеджерВТ);
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
		"Документ.СборкаТоваров", МенеджерВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.ВерсияДанных КАК ЗаказВерсияДанных,
	|	Накладные.ВерсияДанных КАК НакладнаяВерсияДанных,
	|	Заказы.Ссылка КАК ЗаказСсылка,
	|	Накладные.Ссылка КАК НакладнаяСсылка,
	|	ЗаказыКОбработке.Ссылка ЕСТЬ NULL  КАК УдалитьИзОчереди,
	|	НЕ ВТЗаблокированоСборкаТоваров.Ссылка ЕСТЬ NULL  КАК ЕстьЗаблокированнаяНакладная,
	|	ВЫБОР
	|		КОГДА Накладные.СтатусУказанияСерий = 10
	|			ТОГДА НакладныеСерии.Серия
	|		ИНАЧЕ Накладные.Серия
	|	КОНЕЦ КАК Серия,
	|	НакладныеСерии.Количество
	|ИЗ
	|	ВТДляОбработкиЗаказНаСборку КАК ВТДляОбработкиЗаказНаСборку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказы
	|		ПО (Заказы.Ссылка = ВТДляОбработкиЗаказНаСборку.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК ЗаказыКОбработке
	|		ПО (ЗаказыКОбработке.Ссылка = ВТДляОбработкиЗаказНаСборку.Ссылка)
	|			И (ЗаказыКОбработке.Проведен)
	|			И (ЗаказыКОбработке.СтатусУказанияСерий В (12, 16)
	|				ИЛИ ЗаказыКОбработке.СтатусУказанияСерий В (11, 15)
	|					И НЕ ЗаказыКОбработке.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК Накладные
	|		ПО (Накладные.ЗаказНаСборку = ЗаказыКОбработке.Ссылка)
	|			И (Накладные.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Серии КАК НакладныеСерии
	|		ПО (Накладные.Ссылка = НакладныеСерии.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированоСборкаТоваров КАК ВТЗаблокированоСборкаТоваров
	|		ПО (ВТЗаблокированоСборкаТоваров.Ссылка = Заказы.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказСсылка,
	|	НакладнаяСсылка
	|ИТОГИ
	|	МАКСИМУМ(УдалитьИзОчереди),
	|	МАКСИМУМ(ЕстьЗаблокированнаяНакладная)
	|ПО
	|	ЗаказСсылка";
	
	ВыборкаПоСсылкам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Если ВыборкаПоСсылкам.ЕстьЗаблокированнаяНакладная Тогда
			Продолжить;
		ИначеЕсли ВыборкаПоСсылкам.УдалитьИзОчереди Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСсылкам.ЗаказСсылка);
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоСсылкам.Выбрать();
		
		НачатьТранзакцию();
		
		Блокировка = ЗаказыСервер.БлокировкаЗаказаИНакладных(Выборка);
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойБлокировке(ВыборкаПоСсылкам.ЗаказСсылка);
			Продолжить;
		КонецПопытки;
		
		ЗаказОбъект = ЗаказыСервер.ПроверитьПолучитьОбъект(ВыборкаПоСсылкам.ЗаказСсылка, ВыборкаПоСсылкам.ЗаказВерсияДанных, Параметры.Очередь);
		Если ЗаказОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Если Не ЗаказыСервер.ПроверитьИзменениеВерсий(Выборка, "Накладная") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьСерииЗаказаНаРазборку(ЗаказОбъект, Выборка);
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаказОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаказыСервер.СообщитьОНеудачнойОбработке(ЗаказОбъект.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

Функция СерииУказываютсяВОтдельнойТабличнойЧасти(Объект)
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		Возврат Истина;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.Склад = &Склад
	|	И ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|	И НЕ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|   И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаказНаСборку";
КонецФункции

Функция ЕстьСборкаПоЗаказу(ЗаказНаСборку) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК ЕстьЗаписи
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку КАК Таблица
	|ГДЕ
	|	Таблица.ЗаказНаСборку = &ЗаказНаСборку
	|	И Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Таблица.КОформлению <> 0
	|");
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Разделяет входящую таблицу на две по признаку отменено-не отменено
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаказНаСборку					 - ссылка на документ
//  Таблица	 - ТабличнаяЧасть.Товары, ДанныеФормыКоллекция	 - таблица "Товары"
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьТаблицыДляОтменыНеотработанныхСтрок(Ссылка, Таблица) Экспорт
	
	// Предварительная отмена строк таблицы
	ОбработаннаяТаблица = Таблица.Выгрузить();
	ОбработаннаяТаблица.Очистить();
	
	ОбработаннаяТаблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	ОбработаннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОбработаннаяТаблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаСборку"));
	
	Для Каждого Строка Из Таблица Цикл
		
		// В алгоритме участвуют неотмененные строки готовые к отгрузке
		Если Не Строка.Отменено Тогда
			
			НоваяСтрока = ОбработаннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Если ТипЗнч(Таблица) = Тип("ДанныеФормыКоллекция") Тогда
				НоваяСтрока.Идентификатор = Строка.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока.Идентификатор = Строка.НомерСтроки - 1;
			КонецЕсли;
			НоваяСтрока.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Склад");
			
			// Для последующей обработки выставляется вариант Отгрузить 
			НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			
		КонецЕсли;
	КонецЦикла;
	
	ОбработаннаяТаблица.ЗаполнитьЗначения(Ссылка, "Ссылка");
	
	// Разделение таблицы на две - с отмененными строками и без
	ТаблицаПредварительноОтмененныеСтроки = ОбработаннаяТаблица.Скопировать();
	ТаблицаПредварительноОтмененныеСтроки.Очистить();
	
	Для Каждого Строка Из ОбработаннаяТаблица Цикл
		Если Строка.Отменено Тогда
			НоваяСтрока = ТаблицаПредварительноОтмененныеСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Отменено = Истина;
			
			ОбработаннаяТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Структура = Новый Структура();
	Структура.Вставить("ТаблицаВыделенныеСтроки", ОбработаннаяТаблица);
	Структура.Вставить("ТаблицаПредварительноОтмененныеСтроки", ТаблицаПредварительноОтмененныеСтроки);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область ОтчетСостояниеВыполненияДокумента

Функция ТаблицаНеобеспеченныеТоварыДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|	И НЕ ДокументТовары.Отменено
		|	И ДокументТовары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	1 КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|	И ДокументТовары.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|
		|
		|ИТОГИ ПО
		|	Документ;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТаблицаСостояниеОбеспеченияДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Серия КАК Серия,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ДокументТовары.Ссылка.НачалоСборкиРазборки КАК ДатаОтгрузки,
		|	ДокументТовары.ВариантОбеспечения КАК Действие,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	(ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|		
		|		ИЛИ ДокументТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению)
		|			И ДокументТовары.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)))
		|		
		|	И НЕ ДокументТовары.Отменено
		|	И ДокументТовары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	1 КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Серия КАК Серия,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ДокументТовары.НачалоСборкиРазборки КАК ДатаОтгрузки,
		|	ДокументТовары.ВариантОбеспечения КАК Действие,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	(ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|		
		|		ИЛИ ДокументТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению)
		|			И ДокументТовары.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)))
		|	
		|	И ДокументТовары.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|
		|ИТОГИ ПО
		|	Документ;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ВременнаяТаблицаТоварыРаспоряжениеЗаказОтгруженоДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	СУММА(ДокументТовары.Количество) КАК Количество,
		|	0 КАК СуммаСНДС,
		|	ДокументТовары.Серия КАК Серия,
		|	ДокументТовары.Ссылка.Склад КАК Склад,
		|	ВтДокументы.ДокументСсылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	НЕ ДокументТовары.Отменено
		|	И ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И ВтДокументы.Проведен
		|
		|	И ДокументТовары.Ссылка.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|
		|	И ДокументТовары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Серия,
		|	ДокументТовары.Ссылка.Склад,
		|	ВтДокументы.ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Количество КАК Количество,
		|	0 КАК СуммаСНДС,
		|	ДокументТовары.Серия КАК Серия,
		|	ДокументТовары.Склад КАК Склад,
		|	ВтДокументы.ДокументСсылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И ВтДокументы.Проведен
		|	И ДокументТовары.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|
		|	И ДокументТовары.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|
		|;
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаТоварыПоступлениеДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Набор.ДокументПоступления КАК ДокументПоступления,
		|	Набор.Номенклатура        КАК Номенклатура,
		|	Набор.Характеристика      КАК Характеристика,
		|	Набор.Склад               КАК Склад,
		|
		|	СУММА(Набор.Принимается) КАК Принимается,
		|	СУММА(Набор.Принято)     КАК Принято,
		|	СУММА(Набор.Принять)     КАК Принять,
		|	СУММА(Набор.Поступило)   КАК Поступило,
		|
		|	СУММА(Набор.КПоступлению) КАК КПоступлению,
		|	СУММА(Набор.Оформить)     КАК Оформить,
		|	СУММА(Набор.Оформлено)    КАК Оформлено,
		|
		|	МАКСИМУМ(Набор.ОрдернаяСхемаПриПоступлении) КАК ОрдернаяСхемаПриПоступлении
		|
		|ПОМЕСТИТЬ ВТТоварыПоступление
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|		ТоварыКПоступлению.Номенклатура        КАК Номенклатура,
		|		ТоварыКПоступлению.Характеристика      КАК Характеристика,
		|		ТоварыКПоступлению.Склад               КАК Склад,
		|
		|		ТоварыКПоступлению.ПринимаетсяКонечныйОстаток  КАК Принимается,
		|		ТоварыКПоступлению.КПоступлениюРасход          КАК Принято,
		|		ТоварыКПоступлению.КПоступлениюКонечныйОстаток КАК Принять,
		|		ТоварыКПоступлению.КПоступлениюРасход          КАК Поступило,
		|
		|		0                                              КАК КПоступлению,
		|		0                                              КАК Оформить,
		|		0                                              КАК Оформлено,
		|
		|		ВЫБОР КОГДА ТоварыКПоступлению.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|						И &ТекущаяДата >= ТоварыКПоступлению.Склад.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                      КАК ОрдернаяСхемаПриПоступлении
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты( , , , ,
		|				ДокументПоступления В(
		|					ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКПоступлению
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТоварыКОформлению.ЗаказНаСборку       КАК ДокументПоступления,
		|		ТоварыКОформлению.Номенклатура        КАК Номенклатура,
		|		ТоварыКОформлению.Характеристика      КАК Характеристика,
		|		ТоварыКОформлению.ЗаказНаСборку.Склад КАК Склад,
		|
		|		0                                    КАК Принимается,
		|		0                                    КАК Принято,
		|		0                                    КАК Принять,
		|		0                                    КАК Поступило,
		|
		|		ТоварыКОформлению.КОформлениюПриход          КАК КПоступлению,
		|		ТоварыКОформлению.КОформлениюКонечныйОстаток КАК Оформить,
		|		ТоварыКОформлению.КОформлениюРасход          КАК Оформлено,
		|
		|		ВЫБОР КОГДА ТоварыКОформлению.ЗаказНаСборку.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|						И &ТекущаяДата >= ТоварыКОформлению.ЗаказНаСборку.Склад.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                    КАК ОрдернаяСхемаПриПоступлении
		|	ИЗ
		|		РегистрНакопления.ЗаказыНаСборку.ОстаткиИОбороты(, , , ,
		|				(ЗаказНаСборку, ТипСборки) В(
		|					ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка КАК ЗаказНаСборку,
		|						ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКОформлению) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.ДокументПоступления,
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаТоварыРаспоряженияПоступлениеЗаказДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	СУММА(ДокументТовары.Количество) КАК Количество,
		|	0 КАК СуммаСНДС,
		|	ДокументТовары.Ссылка.Склад КАК Склад,
		|	ВтДокументы.ДокументСсылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	НЕ ДокументТовары.Отменено
		|	И ВтДокументы.Проведен
		|	И ДокументТовары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|
		|	И ДокументТовары.Ссылка.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Ссылка.Склад,
		|	ВтДокументы.ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Количество КАК Количество,
		|	0 КАК СуммаСНДС,
		|	ДокументТовары.Склад КАК Склад,
		|	ВтДокументы.ДокументСсылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	ВтДокументы.Проведен
		|	И ДокументТовары.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|
		|	И ДокументТовары.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|;
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаОтмененоОтгрузкаДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	"""" КАК ПричинаОтмены,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.Отменено
		|	И ДокументТовары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	1 КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковокОтменено КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	"""" КАК ПричинаОтмены,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.КоличествоОтменено > 0
		|	И ДокументТовары.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|
		|ИТОГИ ПО
		|	Документ;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТаблицаОтмененоПоступлениеДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	"""" КАК ПричинаОтмены,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.Отменено
		|	И ДокументТовары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	1 КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковокОтменено КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	"""" КАК ПричинаОтмены,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.КоличествоОтменено > 0
		|	И ДокументТовары.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
		|
		|ИТОГИ ПО
		|	Документ;
		|";
	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
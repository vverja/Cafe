&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках");
	
	Параметры.ЗакрыватьПриВыборе            = Истина;
	Параметры.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры);
	
	УпрощенныйРежим = РасширенныйРежимНеИспользуется Или ИспользоватьУпрощеннуюСхемуОплаты;
	
	ЭтапыГрафикаОплаты.Очистить();
	ИдентификаторВызывающейФормы = Параметры.УникальныйИдентификатор;
	ТолькоПросмотр               = Параметры.ТолькоПросмотр;
	
	ГрафикСоглашенияЗаполнен = ЗакупкиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);

	Если Не Параметры.ИспользоватьОтрицательныеСуммыПлатежа Тогда
		ОграничитьТипЭлементовСуммыПлатежа();
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	НастроитьЭлементыФормыПоПараметрам();
	УстановитьТекстКнопкиЗаполнения(ЭтаФорма);
	
	Если Параметры.ПараметрыВыбораРеквизитов <> Неопределено Тогда
		Для Каждого ЭлНастройки Из Параметры.ПараметрыВыбораРеквизитов Цикл
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлНастройки.Ключ, "ПараметрыВыбора", ЭлНастройки.Значение);
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьСписокВыбораФормыОплаты();
	УстановитьДоступностьЭлементовПоФормеОплаты();
	
	Если УпрощенныйРежим И Не УчитыватьВариантОплаты Тогда
		СуммаПлатежаПредоплата        = СуммаОплатыПоДокументу;
		СуммаЗалогаЗаТаруПредоплата   = СуммаЗалогаПоДокументу;
		ПроцентЗалогаЗаТаруПредоплата = 100;
		ПроцентПлатежаПредоплата      = 100;
		ДатаПредоплата                = Параметры.ДатаПлатежа;
	Иначе
		ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(Параметры.АдресВоВременномХранилище);
	КонецЕсли;
	
	Если Не ТребуетсяЗалогЗаТару Тогда
		СуммаЗалогаПоДокументу = 0;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
	
	УстановитьСвойстваЭлементаПорядокРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ВыполняетсяЗакрытие Тогда
	
		СтандартнаяОбработка = Ложь;
		
		Если Модифицированность И Не Готово Тогда
			
			СписокКнопок = Новый СписокЗначений();
			СписокКнопок.Добавить("Закрыть", НСтр("ru='Закрыть';uk='Закрити'"));
			СписокКнопок.Добавить("НеЗакрывать", НСтр("ru='Не закрывать';uk='Не закривати'"));
			
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru='Все измененные данные будут потеряны. Закрыть форму?';uk='Всі змінені дані будуть втрачені. Закрити форму?'"), СписокКнопок);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = "Закрыть" Тогда
        ВыполняетсяЗакрытие = Истина;
		Закрыть();
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию()
	
	ОчиститьСообщения();
	
	ЗаполнитьЭтапыГрафикаОплаты();
	
Конецпроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказам(Команда)
	
	ОчиститьСообщения();
	
	Если УпрощенныйРежим Тогда
		СуммаОплатыПоЭтапам    = СуммаПлатежаПредоплата + СуммаПлатежаКредит;
		СуммаЗалогаПоЭтапам    = СуммаЗалогаЗаТаруПредоплата + СуммаЗалогаЗаТаруКредит;
		ЭтапыОплатыНеЗаполнены = СуммаПлатежаПредоплата = 0 И СуммаПлатежаКредит = 0 И СуммаЗалогаПоЭтапам = 0;
	Иначе
		СуммаОплатыПоЭтапам    = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		СуммаЗалогаПоЭтапам    = ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
		ЭтапыОплатыНеЗаполнены = ЭтапыГрафикаОплаты.Количество() = 0;
	КонецЕсли;
	
	Если СуммаОплатыПоДокументу = 0 И СуммаЗалогаПоДокументу = 0 Тогда
		
		Если ЭтапыОплатыНеЗаполнены Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Сумма заказанных строк нулевая. Заполнение этапов оплаты не требуется.';uk='Сума замовлених рядків нульова. Заповнення етапів оплати не потрібно.'"));
			Возврат;
		КонецЕсли;
		
		ЭтапыГрафикаОплаты.Очистить();
		ОчиститьДанныеУпрощенногоРежима(ЭтаФорма);
		ЭтапыОплатыКлиент.ОповеститьОНевозможностиЗаполненияЭтаповГрафикаОплаты();
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		Возврат;
		
	КонецЕсли;
	
	КоличествоДокументов = ЗаполнитьШаблоныГрафиков();
	КодГрафика = Неопределено;
	
	Если ШаблоныГрафиков.Количество() > 1 Тогда
		
		АдресТаблицыШаблонов = ПоместитьШаблоныГрафикаВоВременноеХранилище();
		ОткрытьФорму(
			"Документ.ЗаказПоставщику.Форма.ФормаВыбораГрафикаИзПредыдущихЗаказов", 
			Новый Структура("АдресТаблицыШаблонов, КоличествоДокументов", АдресТаблицыШаблонов, КоличествоДокументов),,,,, Новый ОписаниеОповещения("ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамПослеВыбора", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
        Возврат;
		
	ИначеЕсли ШаблоныГрафиков.Количество() = 1 Тогда
		
		КодГрафика = ШаблоныГрафиков[0].КодГрафика;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Для поставщика ""%Поставщик%"", нет проведенных заказов. Заполнение этапов отменено.';uk='Для постачальника ""%Поставщик%"", немає проведених замовлень. Заповнення етапів скасовано.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Поставщик%", Партнер);
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамЗавершение", ЭтотОбъект, Новый Структура("КодГрафика", КодГрафика)), ТекстСообщения);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамФрагмент(КодГрафика);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
    
    КодГрафика = Результат;
    
    
    ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамФрагмент(КодГрафика);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамЗавершение(ДополнительныеПараметры) Экспорт
    
    КодГрафика = ДополнительныеПараметры.КодГрафика;
    
    
    ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамФрагмент(КодГрафика);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамФрагмент(Знач КодГрафика)
    
    Если КодГрафика <> Неопределено Тогда
        
        ЗаполнитьЭтапыГрафикаОплатыПоШаблону(КодГрафика);
        ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
        ПронумероватьТаблицуЭтапов();
        РассчитатьИтоговыеПоказатели(ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСумму(Команда)
	
	ОчиститьСообщения();
	
	РаспределитьСуммуПоЭтапамГрафикаОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ОчиститьСообщения();
	
	Если Не Модифицированность Или ТолькоПросмотр Тогда
		
		Закрыть();
		
	Иначе
		
		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("ПорядокРасчетов",         ПорядокРасчетов);
		СтруктураОбъекта.Вставить("ФормаОплаты",             ФормаОплаты);
		СтруктураОбъекта.Вставить("Касса",                   Касса);
		СтруктураОбъекта.Вставить("БанковскийСчет",          БанковскийСчет);
		СтруктураОбъекта.Вставить("ЖелаемаяДатаПоступления", ЖелаемаяДатаПоступления);
		
		Если УпрощенныйРежим И Не УчитыватьВариантОплаты Тогда
			
			ТекстОшибки = "";
			
			Если Не ЗначениеЗаполнено(ДатаПредоплата) Тогда
				Если СуммаОплатыПоДокументу <> 0 Тогда
					ТекстОшибки = НСтр("ru='Поле ""Дата платежа"" не заполнено';uk='Поле ""Дата платежу"" не заповнено'");
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Дата) И ДатаПредоплата < Дата Тогда
				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%';uk='Дата платежу повинна бути не менше дати документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(Дата, "ДЛФ=DD"));
			КонецЕсли;
			
			Если ТекстОшибки = "" Тогда
				Готово = Истина;
				СтруктураОбъекта.Вставить("ДатаПлатежа", ДатаПредоплата);
				Закрыть(СтруктураОбъекта);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ДатаПредоплата");
			КонецЕсли;

		Иначе
			
			АдресВоВременномХранилище = ПроверитьОплатуПоместитьВХранилище();
			
			Если Не ПустаяСтрока(АдресВоВременномХранилище) Тогда
				Готово = Истина;
				СтруктураОбъекта.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
				Закрыть(СтруктураОбъекта);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	ПорядокРасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ПриИзмененииФормыОплатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаПредоплатаПриИзменении(Элемент)
	
	СуммаПлатежаПриИзменении(СуммаПлатежаПредоплата, ПроцентПлатежаПредоплата, 
							СуммаПлатежаКредит, ПроцентПлатежаКредит, СуммаОплатыПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПлатежаПредоплатаПриИзменении(Элемент)
	
	ПроцентПлатежаПриИзменении(СуммаПлатежаПредоплата, ПроцентПлатежаПредоплата,
								СуммаПлатежаКредит, ПроцентПлатежаКредит, СуммаОплатыПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗалогаЗаТаруПредоплатаПриИзменении(Элемент)
	
	СуммаПлатежаПриИзменении(СуммаЗалогаЗаТаруПредоплата, ПроцентЗалогаЗаТаруПредоплата, 
							СуммаЗалогаЗаТаруКредит, ПроцентЗалогаЗаТаруКредит, СуммаЗалогаПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентЗалогаЗаТаруПредоплатаПриИзменении(Элемент)
	
	ПроцентПлатежаПриИзменении(СуммаЗалогаЗаТаруПредоплата, ПроцентЗалогаЗаТаруПредоплата, 
							СуммаЗалогаЗаТаруКредит, ПроцентЗалогаЗаТаруКредит, СуммаЗалогаПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаКредитПриИзменении(Элемент)
	
	СуммаПлатежаПриИзменении(СуммаПлатежаКредит, ПроцентПлатежаКредит, 
							СуммаПлатежаПредоплата, ПроцентПлатежаПредоплата, СуммаОплатыПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПлатежаКредитПриИзменении(Элемент)
	
	ПроцентПлатежаПриИзменении(СуммаПлатежаКредит, ПроцентПлатежаКредит, 
							СуммаПлатежаПредоплата, ПроцентПлатежаПредоплата, СуммаОплатыПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗалогаЗаТаруКредитПриИзменении(Элемент)
	
	СуммаПлатежаПриИзменении(СуммаЗалогаЗаТаруКредит, ПроцентЗалогаЗаТаруКредит,
							СуммаЗалогаЗаТаруПредоплата, ПроцентЗалогаЗаТаруПредоплата, СуммаЗалогаПоДокументу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентЗалогаЗаТаруКредитПриИзменении(Элемент)
	
	ПроцентПлатежаПриИзменении(СуммаЗалогаЗаТаруКредит, ПроцентЗалогаЗаТаруКредит,
							СуммаЗалогаЗаТаруПредоплата, ПроцентЗалогаЗаТаруПредоплата, СуммаЗалогаПоДокументу);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыГрафикаОплаты

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПослеУдаления(Элемент)
	
	ПронумероватьТаблицуЭтапов();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СортироватьЭтапыОплаты();
	ПронумероватьТаблицуЭтапов();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПроцентПлатежаПриИзменении(Элемент)

	ЭтапыОплатыКлиент.ЭтапыГрафикаОплатыПроцентПлатежаПриИзменении(
		Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные,
		ЭтапыГрафикаОплаты,
		СуммаОплатыПоДокументу);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыСуммаПлатежаПриИзменении(Элемент)

	ЭтапыОплатыКлиент.ЭтапыГрафикаОплатыСуммаПлатежаПриИзменении(
		Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные,
		ЭтапыГрафикаОплаты,
		СуммаОплатыПоДокументу);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПриИзменении(Элемент)
	
	ПронумероватьТаблицуЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыПроцентЗалогаЗаТаруПриИзменении(Элемент)

	ЭтапыОплатыКлиент.ЭтапыГрафикаОплатыПроцентЗалогаЗаТаруПриИзменении(
		Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные,
		ЭтапыГрафикаОплаты,
		СуммаЗалогаПоДокументу);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыГрафикаОплатыСуммаЗалогаЗаТаруПриИзменении(Элемент)

	ЭтапыОплатыКлиент.ЭтапыГрафикаОплатыСуммаЗалогаЗаТаруПриИзменении(
		Элементы.ЭтапыГрафикаОплаты.ТекущиеДанные,
		ЭтапыГрафикаОплаты,
		СуммаЗалогаПоДокументу);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыДатаПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ДатаЗаполненаНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаКредит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПредоплата");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ПроцентЗаполненНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентПлатежаПредоплата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентПлатежаКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентПлатежейОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 100;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаОплатыПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентПлатежаПредоплата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентПлатежаКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентПлатежейОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 100;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаОплатыПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПредоплата.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаПлатежаПредоплата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаОплатыПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗалогЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаЗаТаруПредоплата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаКредит.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаПлатежаКредит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаОплатыПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗалогЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаЗаТаруКредит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ДатаЗаполненаНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("НомерСтрокиПолнойОплаты");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерСтрокиПолнойОплаты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Seagreen);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентЗалогаЗаТару.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ПроцентЗалогаЗаполненНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентЗалогаЗаТаруПредоплата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентЗалогаЗаТаруКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентЗалогаОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 100;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентЗалогаЗаТаруПредоплата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроцентЗалогаЗаТаруКредит.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроцентЗалогаОбщий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 100;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаЗалогаПоДокументу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентЗалогаЗаТару.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ДатаЗаполненаНеВерно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.НомерСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("НомерСтрокиПолнойОплатыЗалога");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерСтрокиПолнойОплатыЗалога");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Seagreen);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентПлатежа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентЗалогаЗаТару.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ПроцентПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентЗалогаЗаТару.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСуммаЗалогаЗаТару.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяЗалогЗаТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

#Область ГрафикОплаты

&НаСервере
Процедура ЗаполнитьЭтапыОплатыПоСоглашениюСервер(ЗаполнятьФормуОплаты = Ложь)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ФормаОплаты",             ФормаОплаты);
	ПараметрыЗаполнения.Вставить("ЭтапыГрафикаОплаты",      ЭтапыГрафикаОплаты);
	ПараметрыЗаполнения.Вставить("Дата",                    Дата);
	ПараметрыЗаполнения.Вставить("ЖелаемаяДатаПоступления", ЖелаемаяДатаПоступления);
	ПараметрыЗаполнения.Вставить("Соглашение",              Соглашение);

	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаЗакупкиПоСоглашению(
		ПараметрыЗаполнения,
		СуммаОплатыПоДокументу,
		СуммаЗалогаПоДокументу);
		
	Если УпрощенныйРежим Тогда
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыГрафикаОплаты.Выгрузить());
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		ПриИзмененииФормыОплатыСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыГрафикаОплатыПоШаблону(КодГрафика)
	
	ЭтапыВыбранногоШаблона = ЭтапыШаблонов.НайтиСтроки(Новый Структура("КодГрафика", КодГрафика));
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ФормаОплаты", ФормаОплаты);
	ПараметрыЗаполнения.Вставить("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты);
	ПараметрыЗаполнения.Вставить("Дата", Дата);
	ПараметрыЗаполнения.Вставить("ЖелаемаяДатаПоступления", ЖелаемаяДатаПоступления);
	ПараметрыЗаполнения.Вставить("Соглашение", Соглашение);
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаЗакупкиПоШаблону(
		ПараметрыЗаполнения,
		СуммаОплатыПоДокументу,
		СуммаЗалогаПоДокументу,
		ЭтапыВыбранногоШаблона,
		Соглашение.Календарь);
	
	Если УпрощенныйРежим Тогда
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыГрафикаОплаты.Выгрузить());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуПредоплатыПоГрафикуСервер()

	ДатаПредоплата = ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(
		?(ЗначениеЗаполнено(ЖелаемаяДатаПоступления), ЖелаемаяДатаПоступления, Дата),
		Соглашение);
	
	Если Не ЗначениеЗаполнено(ДатаПредоплата) Тогда
		ДатаПредоплата = ?(ЗначениеЗаполнено(ЖелаемаяДатаПоступления), ЖелаемаяДатаПоступления, Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапОплатыПоУмолчанию()
	
	Если УпрощенныйРежим Тогда
		
		ОчиститьДанныеУпрощенногоРежима(ЭтаФорма);
		
		ДатаКредит                = ?(ЗначениеЗаполнено(ЖелаемаяДатаПоступления), ЖелаемаяДатаПоступления, Дата);
		СуммаПлатежаКредит        = СуммаОплатыПоДокументу;
		ПроцентПлатежаКредит      = 100;
		СуммаЗалогаЗаТаруКредит   = СуммаЗалогаПоДокументу;
		ПроцентЗалогаЗаТаруКредит = 100;
		
	Иначе
		
		ВариантОплатыПоУмолчанию = Неопределено;
		Если УчитыватьВариантОплаты Тогда
			ВариантОплатыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления");
		КонецЕсли;
		
		ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
			ЭтаФорма,
			ВариантОплатыПоУмолчанию,
			ЖелаемаяДатаПоступления,
			СуммаОплатыПоДокументу,
			СуммаЗалогаПоДокументу);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПоЭтапамГрафикаОплаты()
	
	Если УпрощенныйРежим Тогда
		
		ЭтапыОплаты = ПреобразоватьДанныеУпрощенногоРежимаВТаблицуЭтапов();
		
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			ЭтапыОплаты,
			СуммаОплатыПоДокументу,
			СуммаЗалогаПоДокументу);
		
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыОплаты);
		
	Иначе
		
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
			ЭтапыГрафикаОплаты,
			СуммаОплатыПоДокументу,
			СуммаЗалогаПоДокументу);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если УпрощенныйРежим Тогда
		ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыОплаты);
	Иначе
		
		Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
			НоваяСтрока = ЭтапыГрафикаОплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеШаблонаГрафика(МассивЭтаповГрафика)
	
	ПредставлениеГрафика = "";
	
	ФормСтрока = "Л = ru_RU; НД = ЛОЖЬ";
	ПарПредмета=НСтр("ru='день,дня,дней,м,день,дня,дней,м,0';uk='день,дні,днів,м,день,дні,днів,м,0'");
	
	ШаблонПредставленияЭтапа = НСтр("ru='%ВариантОплаты% %ПроцентПлатежа%% (%Отсрочка%)';uk='%ВариантОплаты% %ПроцентПлатежа%% (%Отсрочка%)'");
	
	ПервыйЭтап = Истина;
	
	Для Каждого ЭтапГрафика Из МассивЭтаповГрафика Цикл
		
		Если ЭтапГрафика.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
			ТекстВариантаОплаты = НСтр("ru='Предоплата';uk='Передоплата'");
		ИначеЕсли ЭтапГрафика.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
			ТекстВариантаОплаты = НСтр("ru='Аванс';uk='Аванс'");
		Иначе
			ТекстВариантаОплаты = НСтр("ru='Кредит';uk='Кредит'");
		КонецЕсли;
		
		ТекстОтсрочки = Формат(ЭтапГрафика.Сдвиг, "ЧН=0; ЧГ=0") + " " + СтрЗаменить(Прав(ЧислоПрописью(ЭтапГрафика.Сдвиг, ФормСтрока, ПарПредмета), 4)," ", "");
		
		ПредставлениеЭтапа = СтрЗаменить(ШаблонПредставленияЭтапа, "%ВариантОплаты%", ТекстВариантаОплаты);
		ПредставлениеЭтапа = СтрЗаменить(ПредставлениеЭтапа, "%Отсрочка%", ТекстОтсрочки);
		ПредставлениеЭтапа = СтрЗаменить(ПредставлениеЭтапа, "%ПроцентПлатежа%", ЭтапГрафика.ПроцентПлатежа);
		
		Если ПервыйЭтап Тогда
			ПервыйЭтап = Ложь;
			ПредставлениеГрафика = ПредставлениеГрафика + ПредставлениеЭтапа;
		Иначе
			ПредставлениеГрафика = ПредставлениеГрафика + ", " + ПредставлениеЭтапа;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставлениеГрафика + ".";
	
КонецФункции

&НаСервере
Процедура ПоместитьГрафикВТаблицуШаблонов(ПредставлениеГрафика,
	                                      МассивЭтаповГрафика,
	                                      КодГрафика,
	                                      ДатаПоследнегоИспользования,
	                                      ДокументПоследнегоИспользования)
	
	СтрокаТаблицыГрафиков = ШаблоныГрафиков.Добавить();
	СтрокаТаблицыГрафиков.ПредставлениеГрафика            = ПредставлениеГрафика;
	СтрокаТаблицыГрафиков.КодГрафика                      = КодГрафика;
	СтрокаТаблицыГрафиков.ЧастотаИспользования            = 1;
	СтрокаТаблицыГрафиков.ДатаПоследнегоИспользования     = ДатаПоследнегоИспользования;
	СтрокаТаблицыГрафиков.ДокументПоследнегоИспользования = ДокументПоследнегоИспользования;
	
	Для Каждого ЭтапГрафика Из МассивЭтаповГрафика Цикл
		
		СтрокаЭтапа = ЭтапыШаблонов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтапа, ЭтапГрафика);
		СтрокаЭтапа.КодГрафика = КодГрафика;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстЗапросаПоГрафикамДокументов(ТекстЗапроса)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка КАК Ссылка,
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.Соглашение КАК Соглашение,
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.Дата КАК Дата,
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ ДокументыЗаказов
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЗаказПоставщикуЭтапыГрафикаОплаты
	|ГДЕ
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.Проведен = ИСТИНА
	|	И ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.Партнер = &Партнер
	|	И ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.Ссылка <> &СсылкаНаТекущийЗаказ
	|	И ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|	)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыЗаказов.Ссылка КАК ДокументПоследнегоИспользования,
	|	СоглашенияСПоставщиками.Календарь КАК Календарь,
	|	НАЧАЛОПЕРИОДА(ДокументыЗаказов.Дата, ДЕНЬ) КАК ДатаДокумента,
	|	НАЧАЛОПЕРИОДА(ДокументыЗаказов.ЖелаемаяДатаПоступления, ДЕНЬ) КАК ДатаПоступления,
	|	НАЧАЛОПЕРИОДА(ЗаказПоставщикуЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК ДатаПлатежа,
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
	|	ДокументыЗаказов.Дата КАК ДатаПоследнегоИспользования
	|ИЗ
	|	ДокументыЗаказов КАК ДокументыЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЗаказПоставщикуЭтапыГрафикаОплаты
	|		ПО (ЗаказПоставщикуЭтапыГрафикаОплаты.Ссылка = ДокументыЗаказов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ПО ДокументыЗаказов.Соглашение = СоглашенияСПоставщиками.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыЗаказов.МоментВремени,
	|	ЗаказПоставщикуЭтапыГрафикаОплаты.НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Календарь),
	|	КОЛИЧЕСТВО(ВариантОплаты),
	|	МАКСИМУМ(ДатаПоследнегоИспользования)
	|ПО
	|	ДокументПоследнегоИспользования";
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьШаблоныГрафиков()
	
	ШаблоныГрафиков.Очистить();
	ЭтапыШаблонов.Очистить();
	
	ОдинДень = 86400;
	
	Запрос = Новый Запрос;
	СформироватьТекстЗапросаПоГрафикамДокументов(Запрос.Текст);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("СсылкаНаТекущийЗаказ", Ключ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	СчетГрафиков = 0;
	
	ВыборкаДокумент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокумент.Следующий() Цикл
		
		КоличествоЭтаповГрафика = ВыборкаДокумент.ВариантОплаты;
		
		Если КоличествоЭтаповГрафика = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Календарь = ВыборкаДокумент.Календарь;
		
		НовыйГрафик = Новый Массив();
		ВыборкаГрафик = ВыборкаДокумент.Выбрать();
		ДатаНачала = Неопределено;
		ДатаОкончания = Неопределено;
		Пока ВыборкаГрафик.Следующий() Цикл
			
			СтруктураЭтапа = Новый Структура("ВариантОплаты, ПроцентПлатежа, ПроцентЗалогаЗаТару");
			ЗаполнитьЗначенияСвойств(СтруктураЭтапа, ВыборкаГрафик);
			
			ДатаНачала = ВыборкаГрафик.ДатаДокумента;
			Если ВыборкаГрафик.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				Если ЗначениеЗаполнено(ВыборкаГрафик.ДатаПоступления) Тогда
					ДатаНачала = ВыборкаГрафик.ДатаПоступления;
				Иначе
					ДатаНачала = ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ВыборкаГрафик.ДатаДокумента);
				КонецЕсли;
			КонецЕсли;
			
			ДатаОкончания = ВыборкаГрафик.ДатаПлатежа;
			
			Если ЗначениеЗаполнено(Календарь) Тогда
				СтруктураЭтапа.Вставить("Сдвиг", КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(Календарь, ДатаНачала, ДатаОкончания));
			Иначе
				СтруктураЭтапа.Вставить("Сдвиг", Цел((ДатаОкончания-ДатаНачала)/ОдинДень));
			КонецЕсли;
			
			НовыйГрафик.Добавить(СтруктураЭтапа);
			
		КонецЦикла;
		
		ПредставлениеГрафика = СформироватьПредставлениеШаблонаГрафика(НовыйГрафик);
		СтрокиГрафиков = ШаблоныГрафиков.НайтиСтроки(Новый Структура("ПредставлениеГрафика", ПредставлениеГрафика));
		Если СтрокиГрафиков.Количество() = 0 Тогда
			
			ПоместитьГрафикВТаблицуШаблонов(
				ПредставлениеГрафика,
				НовыйГрафик,
				СчетГрафиков,
				ВыборкаДокумент.ДатаПоследнегоИспользования,
				ВыборкаДокумент.ДокументПоследнегоИспользования);
			СчетГрафиков = СчетГрафиков + 1;
			
		Иначе
			
			СтруктураГрафика = СтрокиГрафиков[0];
			СтруктураГрафика.ЧастотаИспользования = СтруктураГрафика.ЧастотаИспользования + 1;
			Если СтруктураГрафика.ДатаПоследнегоИспользования < ВыборкаДокумент.ДатаПоследнегоИспользования Тогда
				СтруктураГрафика.ДатаПоследнегоИспользования = ВыборкаДокумент.ДатаПоследнегоИспользования;
				СтруктураГрафика.ДокументПоследнегоИспользования = ВыборкаДокумент.ДокументПоследнегоИспользования;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШаблоныГрафиков.Сортировать("ЧастотаИспользования Убыв, ДатаПоследнегоИспользования Убыв");
	
	Возврат ВыборкаДокумент.Количество();
	
КонецФункции

&НаСервере
Функция ПроверитьОплатуПоместитьВХранилище()
	
	Если УпрощенныйРежим Тогда
		ЭтапыГрафикаОплаты.Загрузить(ПреобразоватьДанныеУпрощенногоРежимаВТаблицуЭтапов());
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если НЕ (ЭтоЗаказ И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов) Тогда
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЖелаемаяДатаПоступления", ЖелаемаяДатаПоступления);
		СтруктураПараметров.Вставить("Дата", Дата);
		СтруктураПараметров.Вставить("Валюта", Валюта);
		ЗакупкиСервер.ПроверитьКорректностьЭтаповГрафикаОплатыПоТаблицеЗначений(
			ЭтапыГрафикаОплаты,
			СуммаОплатыПоДокументу,
			СуммаЗалогаПоДокументу,
			УчитыватьВариантОплаты,
			Отказ,
			УпрощенныйРежим,
			СтруктураПараметров);
			
	КонецЕсли;
	
	Возврат ?(Отказ, "", ПоместитьВоВременноеХранилищеНаСервере());
	
КонецФункции

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииФормыОплатыСервер()

	УстановитьДоступностьЭлементовПоФормеОплаты();
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.БанковскийСчет 			= БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;

	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);

	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация 			= Организация;
	СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
	СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
	СтруктураПараметров.Касса 					= Касса;

	Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);

КонецПроцедуры

&НаСервере
Процедура ПорядокРасчетовПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(ПорядокРасчетов) Тогда
		ПорядокРасчетов = Элементы.ПорядокРасчетов.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если ЭтоЗаказ И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		СуммаПлатежаПредоплата      = 0;
		СуммаПлатежаКредит          = 0;
		СуммаЗалогаЗаТаруПредоплата = 0;
		СуммаЗалогаЗаТаруКредит     = 0;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоПорядкуРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаПриИзменении(Сумма, Процент, ЗависимаяСумма, ЗависимыйПроцент, СуммаВсего)

	Если СуммаВсего <> 0 Тогда
		
		Процент           = Мин(Сумма * 100 / СуммаВсего, 100);
		ЗависимаяСумма    = Макс(СуммаВсего - Сумма, 0);
		ЗависимыйПроцент  = 100 - Процент;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПроцентПлатежаПриИзменении(Сумма, Процент, ЗависимаяСумма, ЗависимыйПроцент, СуммаВсего)

	Сумма            = СуммаВсего * Процент / 100;
	ЗависимаяСумма   = СуммаВсего - Сумма;
	ЗависимыйПроцент = 100 - Процент;

	РассчитатьИтоговыеПоказатели(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЭтаповГрафикаОплаты

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаОплаты()

	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перезаполнить этапы оплаты';uk='Перезаповнити етапи оплати'"));
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить';uk='Скасувати'"));
	
	ТекстВопроса = "";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьДату",  УпрощенныйРежим И Не УчитыватьВариантОплаты);
	ПараметрыЗаполнения.Вставить("РаспределитьСумму", Ложь);
	ПараметрыЗаполнения.Вставить("ПерезаполнитьЭтапы", Ложь);
	
	Если Не ПараметрыЗаполнения.ЗаполнитьДату Тогда
		
		Если УпрощенныйРежим Тогда
			СуммаОплатыПоЭтапам    = СуммаПлатежаПредоплата + СуммаПлатежаКредит;
			СуммаЗалогаПоЭтапам    = СуммаЗалогаЗаТаруПредоплата + СуммаЗалогаЗаТаруКредит;
			ЭтапыОплатыНеЗаполнены = СуммаПлатежаПредоплата = 0 И СуммаПлатежаКредит = 0 И СуммаЗалогаПоЭтапам = 0;
		Иначе
			СуммаОплатыПоЭтапам    = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			СуммаЗалогаПоЭтапам    = ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
			ЭтапыОплатыНеЗаполнены = ЭтапыГрафикаОплаты.Количество() = 0;
		КонецЕсли;
		
		Если СуммаОплатыПоДокументу = 0 И СуммаЗалогаПоДокументу = 0 Тогда
			
			Если ЭтапыОплатыНеЗаполнены Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru='Сумма неотмененных строк заказа нулевая. Заполнение этапов оплаты не требуется.';uk='Сума нескасованих рядків замовлення нульова. Заповнення етапів оплати не потрібно.'"));
				Возврат;
				
			КонецЕсли;
			
			ЭтапыГрафикаОплаты.Очистить();
			ОчиститьДанныеУпрощенногоРежима(ЭтаФорма);
			ЭтапыОплатыКлиент.ОповеститьОНевозможностиЗаполненияЭтаповГрафикаОплаты();
			РассчитатьИтоговыеПоказатели(ЭтаФорма);
			Возврат;
			
		КонецЕсли;
		
		Если СуммаОплатыПоДокументу = СуммаОплатыПоЭтапам И СуммаЗалогаПоДокументу = СуммаЗалогаПоЭтапам Тогда
			
			ТекстВопроса = НСтр("ru='Сумма заказанных строк совпадает с суммой этапов оплаты';uk='Сума замовлених рядків співпадає із сумою етапів оплати'") + Символы.ПС +
								НСтр("ru='Перезаполнить этапы оплаты %ИсточникЗаполнения%?';uk='Перезаповнити етапи оплати %ИсточникЗаполнения%?'");
			
		ИначеЕсли Не ЭтапыОплатыНеЗаполнены Тогда
			
			ВариантыОтветов.Вставить(1, КодВозвратаДиалога.Нет, НСтр("ru='Распределить сумму';uk='Розподілити суму'"));
			
			ТекстВопроса = НСтр("ru='Этапы оплаты заполнены';uk='Етапи оплати заповнені'")+ Символы.ПС +
								НСтр("ru='Перезаполнить этапы оплаты %ИсточникЗаполнения% или распределить сумму по имеющимся этапам?';uk='Перезаповнити етапи оплати %ИсточникЗаполнения% або розподілити суму за наявними етапами?'");
			
		Иначе
			ПараметрыЗаполнения.ПерезаполнитьЭтапы = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстВопроса) Тогда
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИсточникЗаполнения%", ?(ГрафикСоглашенияЗаполнен,НСтр("ru='по соглашению';uk='за офертою'"),НСтр("ru='по умолчанию';uk='по умовчанню'")));
		
		Оповещение = Новый ОписаниеОповещения("ВыборИсточникаЗаполненияЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, ВариантыОтветов);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЭтапыГрафикаОплатыФрагмент(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИсточникаЗаполненияЗавершение(РезультатВопроса, ПараметрыЗаполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаполнения.ПерезаполнитьЭтапы = Истина;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаполнения.РаспределитьСумму = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЭтапыГрафикаОплатыФрагмент(ПараметрыЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаОплатыФрагмент(ПараметрыЗаполнения)
	
	Если (ПараметрыЗаполнения.ЗаполнитьДату Или ПараметрыЗаполнения.ПерезаполнитьЭтапы) Тогда
		
		ПроверитьКорректностьЖелаемойДатыПоступления(ПараметрыЗаполнения);
		
	Иначе
		
		ЗаполнитьЭтапыГрафикаОплатыЗавершение(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьЖелаемойДатыПоступления(ПараметрыЗаполнения)

	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВводЖелаемойДатыПоступленияФрагмент", ЭтаФорма, ПараметрыЗаполнения);
		
		ТекстВопроса = НСтр("ru='Желаемая дата поступления меньше даты документа. Необходимо ввести корректную желаемую дату.';uk='Бажана дата надходження менше дати документа. Необхідно ввести коректну бажану дату.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ЗаполнитьЭтапыГрафикаОплатыЗавершение(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводЖелаемойДатыПоступленияФрагмент(Результат, ПараметрыЗаполнения) Экспорт
	
	Если Результат <> Неопределено И Результат = КодВозвратаДиалога.ОК Тогда
		
		ЖелаемаяДата = НачалоДня(Дата);
		
		Оповещение = Новый ОписаниеОповещения("ВводЖелаемойДатыПоступленияЗавершение", ЭтаФорма, ПараметрыЗаполнения);
		
		РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			ЖелаемаяДата,
			НСтр("ru='Введите желаемую дату поступления';uk='Введіть бажану дату надходження'"),
			ЧастиДаты.Дата,
			Оповещение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводЖелаемойДатыПоступленияЗавершение(ВыбраннаяДата, ПараметрыЗаполнения) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Если ВыбраннаяДата < НачалоДня(Дата) Тогда
			ТекстПредупреждения = НСтр("ru='Желаемая дата поступления меньше даты документа. Этапы оплаты не могут быть заполнены.';uk='Бажана дата надходження менше дати документа. Етапи оплати не можуть бути заповнені.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		Иначе
			ЖелаемаяДатаПоступления = ВыбраннаяДата;
			ЗаполнитьЭтапыГрафикаОплатыЗавершение(ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыГрафикаОплатыЗавершение(ПараметрыЗаполнения)

	Если ПараметрыЗаполнения.ЗаполнитьДату Тогда
		ЗаполнитьДатуПредоплатыПоГрафикуСервер();
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПерезаполнитьЭтапы Тогда
		
		Если ГрафикСоглашенияЗаполнен Тогда
			ЗаполнитьЭтапыОплатыПоСоглашениюСервер();
		Иначе
			ДобавитьЭтапОплатыПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.РаспределитьСумму Тогда
		РаспределитьСуммуПоЭтапамГрафикаОплаты();
	КонецЕсли;
	
	ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
	ПронумероватьТаблицуЭтапов();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура НастроитьЭлементыФормыПоПараметрам()

	МассивЭлементов = Новый Массив;
	Если УпрощенныйРежим Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаУпрощеннаяСхема;
		МассивЭлементов.Добавить("СтраницаРасширеннаяНастройка");
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасширеннаяНастройка;
		МассивЭлементов.Добавить("СтраницаУпрощеннаяСхема");
		МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплатыФорма");
		МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамФорма");
		МассивЭлементов.Добавить("РаспределитьСуммуФорма");
	КонецЕсли;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЭтапыГрафикаОплатыВариантОплаты");
	МассивЭлементов.Добавить("ГруппаКредит");
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", Параметры.УчитыватьВариантОплаты);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СуммаПлатежаПредоплата");
	МассивЭлементов.Добавить("СуммаЗалогаЗаТаруПредоплата");
	МассивЭлементов.Добавить("ПроцентПлатежаПредоплата");
	МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруПредоплата");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "ТолькоПросмотр", Не Параметры.УчитыватьВариантОплаты);
	
	Элементы.ГруппаПредоплата.ОтображатьЗаголовок = Истина;;
	Элементы.ГруппаПредоплата.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	Если Не Параметры.УчитыватьВариантОплаты И УпрощенныйРежим Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("СуммаОплатыПоДокументу");
		МассивЭлементов.Добавить("ВалютаОплатыПоДокументу");
		МассивЭлементов.Добавить("СуммаЗалогаПоДокументу");
		МассивЭлементов.Добавить("ВалютаЗалогаПоДокументу");
		МассивЭлементов.Добавить("РаспределитьСуммуФорма");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
		Элементы.ГруппаПредоплата.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаПредоплата.Отображение = ОтображениеОбычнойГруппы.Нет;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПредоплата", "ТолькоПросмотр",
		Параметры.УчитыватьВариантОплаты И Параметры.РасширенныйРежимНеИспользуется);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("СуммаЗалогаЗаТаруКредит");
	МассивЭлементов.Добавить("СуммаЗалогаЗаТаруПредоплата");
	МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруКредит");
	МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруПредоплата");
	МассивЭлементов.Добавить("ВалютаЗалогаЗаТаруКредит");
	МассивЭлементов.Добавить("ВалютаЗалогаЗаТаруПредоплата");
	МассивЭлементов.Добавить("СуммаЗалогаПоДокументу");
	МассивЭлементов.Добавить("ВалютаЗалогаПоДокументу");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", Параметры.ТребуетсяЗалогЗаТару);
		
	Если СуммаЗалогаПоДокументу = 0 Тогда
			
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("СуммаЗалогаЗаТаруКредит");
		МассивЭлементов.Добавить("СуммаЗалогаЗаТаруПредоплата");
			МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруКредит");
		МассивЭлементов.Добавить("ПроцентЗалогаЗаТаруПредоплата");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если СуммаОплатыПоДокументу = 0 Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("СуммаПлатежаПредоплата");
		МассивЭлементов.Добавить("СуммаПлатежаКредит");
		МассивЭлементов.Добавить("ПроцентПлатежаПредоплата");
		МассивЭлементов.Добавить("ПроцентПлатежаКредит");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если СуммаЗалогаПоДокументу = 0 И СуммаОплатыПоДокументу =0 Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ДатаПредоплата");
		МассивЭлементов.Добавить("ДатаКредит");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если Не Параметры.УчитыватьВариантОплаты И УпрощенныйРежим Тогда
		Элементы.Переместить(Элементы.ГруппаПредоплата, Элементы.ГруппаСлева);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаИсточникиОплаты", "Видимость", Не Параметры.НеУказыватьИсточникиОплаты);
		
	Если Параметры.ОтключитьЗаполнениеПоПредыдущимЗаказам
		Или Не ЗначениеЗаполнено(Партнер)
		Или (Не Параметры.УчитыватьВариантОплаты И УпрощенныйРежим) Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамФорма");
		МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамТаблица");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокЗаполнения()
	
	ДоступностьЭлемента = СуммаЗалогаПоДокументу <> 0 Или СуммаОплатыПоДокументу <> 0;
	Элементы.ЗаполнитьЭтапыГрафикаОплатыФорма.Доступность                = ДоступностьЭлемента;
	Элементы.ЗаполнитьЭтапыГрафикаОплатыТаблица.Доступность              = ДоступностьЭлемента;
	Элементы.ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамФорма.Доступность   = ДоступностьЭлемента;
	Элементы.ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамТаблица.Доступность = ДоступностьЭлемента;
	Элементы.РаспределитьСуммуФорма.Доступность                          = ДоступностьЭлемента;
	Элементы.РаспределитьСуммуТаблица.Доступность                        = ДоступностьЭлемента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоФормеОплаты()
	
	ЛюбаяОплата      = Не ЗначениеЗаполнено(ФормаОплаты);
	ДоступностьКассы = ЛюбаяОплата Или (ФормаОплаты = Перечисления.ФормыОплаты.Наличная);
	ДоступностьСчета = ЛюбаяОплата Или (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Касса", "Доступность", ДоступностьКассы);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчет", "Доступность", ДоступностьСчета);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаПорядокРасчетов()
	
	Если Параметры.Свойство("ПорядокРасчетов") Тогда
		
		ПорядокРасчетов = Параметры.ПорядокРасчетов;
		ДоступныеПорядкиРасчетов = Неопределено;
		
		Если Параметры.Свойство("ДоступныеПорядкиРасчетов", ДоступныеПорядкиРасчетов)
				И ДоступныеПорядкиРасчетов.Количество() > 1 Тогда
			
			Элементы.ПорядокРасчетов.СписокВыбора.ЗагрузитьЗначения(ДоступныеПорядкиРасчетов.ВыгрузитьЗначения());
			Элементы.ПорядокРасчетов.ТолькоПросмотр = Ложь;
			Элементы.ПорядокРасчетов.РежимВыбораИзСписка = Истина;
			
		КонецЕсли;
		
		УстановитьДоступностьЭлементовПоПорядкуРасчета();
		
	Иначе
		
		Элементы.ПорядокРасчетов.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоПорядкуРасчета()
	
	Если ЭтоЗаказ И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		Элементы.ГруппаСтраницы.Доступность                                = Ложь;
		Элементы.ЗаполнитьЭтапыГрафикаОплатыФорма.Доступность              = Ложь;
		Элементы.ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамФорма.Доступность = Ложь;
		Элементы.РаспределитьСуммуФорма.Доступность                        = Ложь;
		Элементы.ФормаОплаты.Доступность                                   = Ложь;
		Элементы.Касса.Доступность                                         = Ложь;
		Элементы.БанковскийСчет.Доступность                                = Ложь;
		
	Иначе
		
		Элементы.ГруппаСтраницы.Доступность = Истина;
		Элементы.ФормаОплаты.Доступность    = Истина;
		
		УстановитьДоступностьКнопокЗаполнения();
		УстановитьДоступностьЭлементовПоФормеОплаты();
		
	КонецЕсли;
	
	ЗапретРедактированияГрафика = (ГрафикИсполненияВДоговоре И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	Если ЗапретРедактированияГрафика Тогда
		Элементы.ПорядокРасчетов.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы.ПорядокРасчетов.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	Элементы.ГруппаПредоплата.Доступность = Не ЗапретРедактированияГрафика;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстКнопкиЗаполнения(Форма)
	
	ТекстКнопкиЗаполнения = НСтр("ru='Заполнить по умолчанию';uk='Заповнити по умовчанню'");
	Если Форма.ГрафикСоглашенияЗаполнен Тогда
		ТекстКнопкиЗаполнения = НСтр("ru='Заполнить по соглашению';uk='Заповнити за офертою'");
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплатыФорма");
	МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплатыТаблица");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы, МассивЭлементов, "Заголовок", ТекстКнопкиЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьТипЭлементовСуммыПлатежа()
	
	ОграниченныйТип = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("ЭтапыГрафикаОплатыСуммаПлатежа");
	МассивЭлементов.Добавить("СуммаПлатежаПредоплата");
	МассивЭлементов.Добавить("СуммаПлатежаКредит");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ОграничениеТипа", ОграниченныйТип);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(ЭтапыГрафикаОплаты.Выгрузить(), ИдентификаторВызывающейФормы);
	
КонецФункции

&НаСервере
Функция ПреобразоватьДанныеУпрощенногоРежимаВТаблицуЭтапов()
	
	ТаблицаРезультат = ЭтапыГрафикаОплаты.Выгрузить();
	ТаблицаРезультат.Очистить();
	
	Если ЭтапСодержитДанные("Предоплата") Тогда
		
		СтрокаПредоплаты = ТаблицаРезультат.Добавить();
		СтрокаПредоплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления;
		
		СтрокаПредоплаты.ДатаПлатежа             = ДатаПредоплата;
		СтрокаПредоплаты.СуммаПлатежа            = СуммаПлатежаПредоплата;
		СтрокаПредоплаты.ПроцентПлатежа          = ПроцентПлатежаПредоплата;
		Если ТребуетсяЗалогЗаТару Тогда
			СтрокаПредоплаты.СуммаЗалогаЗаТару   = СуммаЗалогаЗаТаруПредоплата;
			СтрокаПредоплаты.ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТаруПредоплата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтапСодержитДанные("Кредит") Тогда
		
		СтрокаКредита = ТаблицаРезультат.Добавить();
		СтрокаКредита.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
		
		СтрокаКредита.ДатаПлатежа             = ДатаКредит;
		СтрокаКредита.СуммаПлатежа            = СуммаПлатежаКредит;
		СтрокаКредита.ПроцентПлатежа          = ПроцентПлатежаКредит;
		Если ТребуетсяЗалогЗаТару Тогда
			СтрокаКредита.СуммаЗалогаЗаТару   = СуммаЗалогаЗаТаруКредит;
			СтрокаКредита.ПроцентЗалогаЗаТару = ПроцентЗалогаЗаТаруКредит;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервере
Функция ЭтапСодержитДанные(ВариантОплаты)
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("СуммаПлатежа");
	Если ТребуетсяЗалогЗаТару Тогда
		МассивРеквизитов.Добавить("СуммаЗалогаЗаТару");
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МассивРеквизитов Цикл
		Если ЗначениеЗаполнено(ЭтаФорма[ТекРеквизит + ВариантОплаты]) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьТаблицуЭтаповВДанныеУпрощенногоРежима(ЭтапыОплаты)
	
	ОчиститьДанныеУпрощенногоРежима(ЭтаФорма);
	
	Если ЭтапыОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		
		Если ТекСтрока.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
			СуммаПлатежаКредит   = СуммаПлатежаКредит + ТекСтрока.СуммаПлатежа;
			ПроцентПлатежаКредит = ПроцентПлатежаКредит + ТекСтрока.ПроцентПлатежа;
			Если ТребуетсяЗалогЗаТару Тогда
				СуммаЗалогаЗаТаруКредит   = СуммаЗалогаЗаТаруКредит + ТекСтрока.СуммаЗалогаЗаТару;
				ПроцентЗалогаЗаТаруКредит = ПроцентЗалогаЗаТаруКредит + ТекСтрока.ПроцентЗалогаЗаТару;
			КонецЕсли;
			ДатаКредит = Макс(ДатаКредит, ТекСтрока.ДатаПлатежа);
		Иначе //аванс и предоплата суммируются в общую сумму
			СуммаПлатежаПредоплата   = СуммаПлатежаПредоплата + ТекСтрока.СуммаПлатежа;
			ПроцентПлатежаПредоплата = ПроцентПлатежаПредоплата + ТекСтрока.ПроцентПлатежа;
			Если ТребуетсяЗалогЗаТару Тогда
				СуммаЗалогаЗаТаруПредоплата   = СуммаЗалогаЗаТаруПредоплата + ТекСтрока.СуммаЗалогаЗаТару;
				ПроцентЗалогаЗаТаруПредоплата = ПроцентЗалогаЗаТаруПредоплата + ТекСтрока.ПроцентЗалогаЗаТару;
			КонецЕсли;
			ДатаПредоплата = Макс(ДатаПредоплата, ТекСтрока.ДатаПлатежа);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеУпрощенногоРежима(Форма)
	
	Форма.ДатаПредоплата                = Неопределено;
	Форма.ДатаКредит                    = Неопределено;
	Форма.СуммаПлатежаПредоплата        = 0;
	Форма.СуммаПлатежаКредит            = 0;
	Форма.ПроцентПлатежаПредоплата      = 0;
	Форма.ПроцентПлатежаКредит          = 0;
	Форма.СуммаЗалогаЗаТаруПредоплата   = 0;
	Форма.СуммаЗалогаЗаТаруКредит       = 0;
	Форма.ПроцентЗалогаЗаТаруПредоплата = 0;
	Форма.ПроцентЗалогаЗаТаруКредит     = 0;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьШаблоныГрафикаВоВременноеХранилище()
	
	ШаблоныГрафиковДанные = РеквизитФормыВЗначение("ШаблоныГрафиков");
	Возврат ПоместитьВоВременноеХранилище(ШаблоныГрафиковДанные);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказатели(Форма)
	
	ПредыдущееЗначениеДаты = Дата(1,1,1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	Форма.НомерСтрокиПолнойОплатыЗалога = 0;
	Форма.ПроцентПлатежейОбщий = 0;
	Форма.ПроцентЗалогаОбщий = 0;
	
	Если Форма.УпрощенныйРежим Тогда
		
		Форма.ПроцентПлатежейОбщий = Форма.ПроцентПлатежаПредоплата + Форма.ПроцентПлатежаКредит;
		Форма.ПроцентЗалогаОбщий   = Форма.ПроцентЗалогаЗаТаруПредоплата + Форма.ПроцентЗалогаЗаТаруКредит;
		
	Иначе
		
		Для Каждого ТекСтрока Из Форма.ЭтапыГрафикаОплаты Цикл
			
			Форма.ПроцентПлатежейОбщий = Форма.ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
			ТекСтрока.ПроцентЗаполненНеВерно = (Форма.ПроцентПлатежейОбщий > 100);
			Если Форма.ПроцентПлатежейОбщий = 100 Тогда
				Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
			КонецЕсли;
			
			Форма.ПроцентЗалогаОбщий = Форма.ПроцентЗалогаОбщий + ТекСтрока.ПроцентЗалогаЗаТару;
			ТекСтрока.ПроцентЗалогаЗаполненНеВерно = (Форма.ПроцентЗалогаОбщий > 100);
			Если Форма.ПроцентЗалогаОбщий = 100 Тогда
				Форма.НомерСтрокиПолнойОплатыЗалога = ТекСтрока.НомерСтроки;
			КонецЕсли;
			
			ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
			ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьЭтапыОплаты()
	
	Если УчитыватьВариантОплаты Тогда
		
		Для Каждого ЭтапОплаты Из ЭтапыГрафикаОплаты Цикл
			Если ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 1;
			ИначеЕсли ЭтапОплаты.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления") Тогда
				ЭтапОплаты.НомерВариантаОплаты = 2;
			Иначе
				ЭтапОплаты.НомерВариантаОплаты = 3;
			КонецЕсли;
		КонецЦикла;
		
		ЭтапыГрафикаОплаты.Сортировать("НомерВариантаОплаты, ДатаПлатежа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПронумероватьТаблицуЭтапов()
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из ЭтапыГрафикаОплаты Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораФормыОплаты()
	
	Перем ОтборПоСсылке;
	
	Для Каждого ТекПараметр Из Элементы.ФормаОплаты.ПараметрыВыбора Цикл
		Если ТекПараметр.Имя = "Отбор.Ссылка" Тогда
			ОтборПоСсылке = ТекПараметр.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФормыОплаты.Ссылка
	|ИЗ
	|	Перечисление.ФормыОплаты КАК ФормыОплаты";
	
	Если ОтборПоСсылке <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("Ссылка В(&ОтборПоСсылке)");
		Запрос.УстановитьПараметр("ОтборПоСсылке", ОтборПоСсылке);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
		
	Выборка      = Запрос.Выполнить().Выбрать();
	СписокВыбора = Элементы.ФормаОплаты.СписокВыбора;
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ФормыОплаты.ПустаяСсылка(), НСтр("ru='Любая';uk='Будь-яка'"));
	ДенежныеСредстваСервер.УстановитьВидимостьОплатыПлатежнойКартой(Элементы.ФормаОплаты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

ВыполняетсяЗакрытие = Ложь;

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение обновлений программы".
// ОбщийМодуль.ПолучениеОбновленийПрограммыКлиентГлобальный.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ПолучениеОбновленийПрограммы_ПроверитьНаличиеОбновлений() Экспорт
	
	Если НЕ ПолучениеОбновленийПрограммыКлиент.ДоступноИспользованиеПолученияОбновленийПлатформы() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = ПолучениеОбновленийПрограммыКлиент.ГлобальныеНастройкиОбновления();
	ИДЗадания = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения("ИДЗадания");
	ДатаПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если ИДЗадания = Неопределено Тогда
		// Обработать настройки авт. проверки обновления
		
		ВыполнитьПроверку = Ложь;
		Если НастройкиОбновления.СпособАвтоматическойПроверки = 1 Тогда
			Если НЕ ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
				"ПроверкаПриЗапускеВыполнена", Ложь) Тогда
				ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
					"ПроверкаПриЗапускеВыполнена", Истина);
				ВыполнитьПроверку = Истина;
			КонецЕсли;
			
		ИначеЕсли НастройкиОбновления.СпособАвтоматическойПроверки = 2 Тогда
			// Определение необходимости выполнения проверки по расписанию
			
			Расписание = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(НастройкиОбновления.Расписание);
			ДатаПоследнейПроверки = Неопределено;
			Если НЕ НастройкиОбновления.Свойство("ДатаПоследнейПроверки", ДатаПоследнейПроверки) Тогда
				ДатаПоследнейПроверки = '00010101';
			КонецЕсли;
			
			Если Расписание.ТребуетсяВыполнение(ДатаПроверки, ДатаПоследнейПроверки) Тогда
				ВыполнитьПроверку = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыполнитьПроверку Тогда
			
			// Очистить информацию о доступном обновлении перед выполнением проверки
			ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
				"ИнформацияОДоступномОбновлении",
				Неопределено);
			
			Если НастройкиОбновления.СпособАвтоматическойПроверки = 2 Тогда
				// Записать дату последней проверки
				НастройкиОбновления.Вставить("ДатаПоследнейПроверки", ДатаПроверки);
				ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьНастройкиОбновления(НастройкиОбновления);
			КонецЕсли;
			
			ИДЗадания = ПолучениеОбновленийПрограммыВызовСервера.НачатьПроверкуНаличияОбновления();
			Если ИДЗадания <> Неопределено Тогда
				
				ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
					"ИДЗадания", ИДЗадания);
				ПолучениеОбновленийПрограммыКлиент.ПодключитьОбработкуРезультатаПроверки();
				
			ИначеЕсли НастройкиОбновления.СпособАвтоматическойПроверки = 2 Тогда
				ПолучениеОбновленийПрограммыКлиент.ПодключитьПроверкуПоРасписанию();
				
			КонецЕсли;
			
		ИначеЕсли НастройкиОбновления.СпособАвтоматическойПроверки = 2 Тогда
			// Если проверка по расписанию, тогда повторить вызов через 5 минут.
			ПолучениеОбновленийПрограммыКлиент.ПодключитьПроверкуПоРасписанию();
			
		КонецЕсли;
		
	Иначе
		
		// Выполняется проверка, определить состояние проверки
		ИнформацияОДоступномОбновлении = ПолучениеОбновленийПрограммыВызовСервера.РезультатЗаданияПроверкиНаличияОбновлений(ИДЗадания);
		Если ИнформацияОДоступномОбновлении = Неопределено Тогда
			// Задание еще не завершено, повторить вызов через 10 секунд
			ПолучениеОбновленийПрограммыКлиент.ПодключитьОбработкуРезультатаПроверки();
			
		Иначе
			
			// Задание завершено
			ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
				"ИДЗадания", Неопределено);
			
			// Обработка результата выполнения задания
			Если ТипЗнч(ИнформацияОДоступномОбновлении) = Тип("Структура") Тогда
				
				ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
					"ШтампВремениИнформацииОбОбновлении",
					ДатаПроверки);
				
				ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
					"ИнформацияОДоступномОбновлении",
					ИнформацияОДоступномОбновлении);
				
				Если НЕ ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
					
					Если ИнформацияОДоступномОбновлении.ИмяОшибки = "ConnectError"
						ИЛИ ИнформацияОДоступномОбновлении.ИмяОшибки = "ServerError"
						ИЛИ ИнформацияОДоступномОбновлении.ИмяОшибки = "ClientError" Тогда
						
						// Обработать ошибку подключения
						
						Если НЕ ПолучениеОбновленийПрограммыКлиент.ОткрытаФормаОбработкиПолученияОбновлений() Тогда
							ПоказатьОповещениеПользователя(
								НСтр("ru='Обновление платформы';uk='Оновлення платформи'"),
								"e1cib/app/Обработка.ПереходНаНовуюВерсиюПлатформы1СПредприятие",
								НСтр("ru='Не удалось подключиться к сервису Интернет-обновлений.';uk='Не вдалося підключитися до сервісу Інтернет-оновлення.'"),
								БиблиотекаКартинок.Ошибка32);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					СистИнфо = Новый СистемнаяИнформация;
					Если ЗначениеЗаполнено(ИнформацияОДоступномОбновлении.Версия)
						И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
							ИнформацияОДоступномОбновлении.Версия,
							ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие()) > 0 Тогда
						
						Если НЕ ПолучениеОбновленийПрограммыКлиент.ОткрытаФормаОбработкиПолученияОбновлений() Тогда
							
							Если ИнформацияОДоступномОбновлении.РекомендуетсяПереход Тогда
								
								ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Доступна новая версия %1.
                                        |Рекомендуется перейти на эту версию платформы.'
                                        |;uk='Доступна нова версія %1.
                                        |Рекомендується перейти на цю версію платформи.'"),
									ИнформацияОДоступномОбновлении.Версия);
								
								ПоказатьОповещениеПользователя(
									НСтр("ru='Обновление платформы';uk='Оновлення платформи'"),
									"e1cib/app/Обработка.ПереходНаНовуюВерсиюПлатформы1СПредприятие",
									ТекстОповещения
									,
									БиблиотекаКартинок.Предупреждение32);
								
							ИначеЕсли НЕ ИнформацияОДоступномОбновлении.Установлена Тогда
								
								ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Доступна новая версия %1.';uk='Доступна нова версія %1.'"),
									ИнформацияОДоступномОбновлении.Версия);
								
								ПоказатьОповещениеПользователя(
									НСтр("ru='Обновление платформы';uk='Оновлення платформи'"),
									"e1cib/app/Обработка.ПереходНаНовуюВерсиюПлатформы1СПредприятие",
									ТекстОповещения,
									БиблиотекаКартинок.Информация32);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НастройкиОбновления.СпособАвтоматическойПроверки = 2 Тогда
				ПолучениеОбновленийПрограммыКлиент.ПодключитьПроверкуПоРасписанию();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);


КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПланПродажПоКатегориям) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПланПродажПоКатегориям.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПланПродажПоКатегориям);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПланированиеПродажПоКатегориям";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры


// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПланов[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Формирует структуру дополнительных реквизитов по документу
//
// Параметры:
// Параметры     - Структура - Значения дополнительных реквизитов
// ДопПараметры  - Структура - Состав операндов по указанному виду плана и сценарию
//
Процедура ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры) Экспорт
	
	ВидПлана                  = Параметры.ВидПланаРеквизиты;
	Сценарий                  = Параметры.СценарийРеквизиты;
	ПутьКРеквизиту            = Параметры.ПутьКРеквизиту;
	ЭтоПланПродажПоКатегориям = ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям;
	ЭтоПланПродаж             = ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродаж;
	
	ИспользоватьПланированиеПродажПоКатегориям = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродажПоКатегориям") 
		И Сценарий.ИспользоватьВПланированииПродажПоКатегориям
		И НЕ Сценарий.ИспользоватьРасчетПоСкоростиПродаж;
	ИспользоватьРасчетПоСкоростиПродаж = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродажПоКатегориям") 
		И Сценарий.ИспользоватьВПланированииПродажПоКатегориям
		И Сценарий.ИспользоватьРасчетПоСкоростиПродаж;
	ИспользоватьПланыПродаж 	= ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж") 
		И Сценарий.ИспользоватьВПланированииПродаж;
	
	СоздаватьРеквизитСОтбором = ВидПлана.ЗаполнятьПартнера 
		ИЛИ ВидПлана.ЗаполнятьФорматМагазина 
		ИЛИ ВидПлана.ЗаполнятьСклад 
		ИЛИ ВидПлана.ЗаполнятьПодразделение;
	
	
#Область ПланыПродажПоКатегориям
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПродажПоКатегориям");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План продаж по категориям';uk='План продажів по категоріях'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланированиеПродажПоКатегориям 
		И (ЭтоПланПродаж 
			ИЛИ ЭтоПланПродажПоКатегориям 
			ИЛИ НЕ ИспользоватьПланыПродаж));
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланированиеПродажПоКатегориям 
		И (ЭтоПланПродаж 
			ИЛИ ЭтоПланПродажПоКатегориям 
			ИЛИ НЕ ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План продаж по категориям';uk='План продажів по категоріях'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПродажПоКатегориям");
	
	ДопПараметры.Вставить("ПланыПродажПоКатегориям", ДопПараметр);
#КонецОбласти
	
#Область ПланыПродажПоКатегориямСОтбором
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПродажПоКатегориямСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План продаж по категориям*';uk='План продажів по категоріях*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланированиеПродажПоКатегориям 
		И СоздаватьРеквизитСОтбором 
		И (ЭтоПланПродаж 
			ИЛИ ЭтоПланПродажПоКатегориям 
			ИЛИ НЕ ИспользоватьПланыПродаж));
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланированиеПродажПоКатегориям 
		И СоздаватьРеквизитСОтбором 
		И (ЭтоПланПродаж 
			ИЛИ ЭтоПланПродажПоКатегориям 
			ИЛИ НЕ ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План продаж по категориям*';uk='План продажів по категоріях*'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПродажПоКатегориям");
	
	ДопПараметры.Вставить("ПланыПродажПоКатегориямСОтбором", ДопПараметр);
#КонецОбласти

#Область ПланыПродажПоКатегориямПоСкоростиПродаж
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПродажПоКатегориямПоСкоростиПродаж");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План продаж по категориям (по скорости продаж)';uk='План продажів по категоріях (за швидкістю продажів)'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьРасчетПоСкоростиПродаж 
		И (ЭтоПланПродаж 
			ИЛИ ЭтоПланПродажПоКатегориям 
			ИЛИ НЕ ИспользоватьПланыПродаж));
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьРасчетПоСкоростиПродаж 
		И (ЭтоПланПродаж 
			ИЛИ ЭтоПланПродажПоКатегориям 
			ИЛИ НЕ ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План продаж по категориям (по скорости продаж)';uk='План продажів по категоріях (за швидкістю продажів)'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПродажПоКатегориям");
	
	ДопПараметры.Вставить("ПланыПродажПоКатегориямПоСкоростиПродаж", ДопПараметр);
#КонецОбласти
	
#Область ПланыПродажПоКатегориямПоСкоростиПродажСОтбором
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПродажПоКатегориямПоСкоростиПродажСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План продаж по категориям (по скорости продаж)*';uk='План продажів по категоріях (за швидкістю продажів)*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьРасчетПоСкоростиПродаж 
		И СоздаватьРеквизитСОтбором 
		И (ЭтоПланПродаж 
			ИЛИ ЭтоПланПродажПоКатегориям 
			ИЛИ НЕ ИспользоватьПланыПродаж));
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьРасчетПоСкоростиПродаж 
		И СоздаватьРеквизитСОтбором 
		И (ЭтоПланПродаж 
			ИЛИ ЭтоПланПродажПоКатегориям 
			ИЛИ НЕ ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План продаж по категориям (по скорости продаж)*';uk='План продажів по категоріях (за швидкістю продажів)*'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПродажПоКатегориям");
	
	ДопПараметры.Вставить("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором", ДопПараметр);
#КонецОбласти

#Область ФактПродажПоКатегориям
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ФактПродажПоКатегориям");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='Факт продаж по категориям';uk='Факт продажів по категоріях'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ЭтоПланПродажПоКатегориям);
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", ЭтоПланПродажПоКатегориям);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru='Факт продаж по категориям';uk='Факт продажів по категоріях'"));
	
	ДопПараметры.Вставить("ФактПродажПоКатегориям", ДопПараметр);
#КонецОбласти

КонецПроцедуры

// Возвращает макеты операндов для данного плана
//
// Параметры:
//  Макеты  - Соотвествие - Общий список макетов, в который добавляютя макеты этого документа
//
// Возвращаемое значение:
//   Соотвествие   - Макеты для операндов
//
Функция МакетыОперандовПлана(Макеты = Неопределено) Экспорт 

	Если Макеты = Неопределено Тогда
		Макеты = Новый Соответствие;
	КонецЕсли; 
	
	Макеты.Вставить("ПланыПродажПоКатегориям",                         ПолучитьМакет("СКД_ПланыПродажПоКатегориям"));
	Макеты.Вставить("ПланыПродажПоКатегориямСОтбором",                 ПолучитьМакет("СКД_ПланыПродажПоКатегориямСОтбором"));
	Макеты.Вставить("ПланыПродажПоКатегориямПоСкоростиПродаж",         ПолучитьМакет("СКД_ПланыПродажПоКатегориямПоСкоростиПродаж"));
	Макеты.Вставить("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором", ПолучитьМакет("СКД_ПланыПродажПоКатегориямПоСкоростиПродажСОтбором"));
	Макеты.Вставить("ФактПродажПоКатегориям",                          ПолучитьМакет("СКД_ФактПродажПоКатегориям"));
	Макеты.Вставить("ТоварныеКатегории",                               ПолучитьМакет("СКД_ТоварныеКатегории"));
	Макеты.Вставить("ТоварныеКатегорииСкладаФормат",                   ПолучитьМакет("СКД_ТоварныеКатегорииСкладаФормат"));
	
	Возврат Макеты;

КонецФункции

// Процедура заполняет табличную часть документа по формулам или по правилу заполнения по источникам данных планирования,
// предназначена для заполнения документа в фоне
//
// Параметры:
//  Параметры  - Структура - Настройки для заполнения
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//
Процедура ЗаполнитьДокумент(Знач Параметры, Знач АдресХранилища) Экспорт 
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Параметры.КлючОбщихНастроек, 
		"НастройкиФоновогоЗадания_"+Параметры.УникальныйИдентификатор);
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаполнятьПоФормуле") Тогда
		
		Параметры.Вставить("ЗаполняемаяТЧ", Настройки.ЗаполняемаяТЧ);
		ЗаполнитьДокументПоФормуле(Параметры, АдресХранилища);
	
	ИначеЕсли Параметры.Свойство("ЗаполнятьПоПравилу") Тогда
		
		Параметры.Вставить("ПравилоЗаполнения", Настройки.ПравилоЗаполнения);
		Параметры.Вставить("ПользовательскиеНастройки", Настройки.ПользовательскиеНастройки);
		Параметры.Вставить("ЗаполняемаяТЧ", Настройки.ЗаполняемаяТЧ);
		
		ЗаполнитьПоПравилуЗаполнения(Параметры, АдресХранилища);
	
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(Параметры.КлючОбщихНастроек, 
		"НастройкиФоновогоЗадания_"+Параметры.УникальныйИдентификатор, Пользователи.ТекущийПользователь());
	
КонецПроцедуры

// Процедура заполняет табличную часть документа по формулам
// Параметры:
//  Параметры  - Структура - Настройки для заполнения
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//
Процедура ЗаполнитьДокументПоФормуле(Знач Параметры, Знач АдресХранилища) Экспорт 
	
	Если НЕ Параметры.Свойство("ЗаполнятьПоФормуле") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонкиПериода = "ДатаОтгрузки";
	
	Периоды = Планирование.ПолучитьТаблицуПериодов();
	Планирование.ЗаполнитьТаблицуПериодов(Периоды, Параметры.Периодичность, Параметры.НачалоПериодаСмещения, Параметры.КонецПериодаСмещения);
	
	НайденныеСтрокиПериодов = Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
	ВсегоПериодов = НайденныеСтрокиПериодов.Количество();
	Если Параметры.КроссТаблица И ВсегоПериодов = 0 Тогда 
		
		ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, АдресХранилища);
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Периоды", Периоды); 
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	ЗаполняемаяТЧ.Колонки[ИмяКолонкиПериода].Имя = "ПериодСостава";
	
	Результат = Планирование.ЗаполнитьПоФормуле(Параметры);
	
	Если Результат.Колонки.Найти("ПериодСостава") = Неопределено Тогда
		Результат.Колонки.Добавить("ПериодСостава", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата))
	КонецЕсли; 
	
	Результат.Колонки["ПериодСостава"].Имя = ИмяКолонкиПериода;
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Процедура заполняет табличную часть документа по правилу заполнения из различных источников
//
// Параметры:
//  Параметры  - Структура - Настройки для заполнения
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//  Настройки  - Структура - Дополнительные настройки для заполнения, Правило заполнения, пользовательские настройки, ТЧ заполнения
//
Процедура ЗаполнитьПоПравилуЗаполнения(Знач Параметры, Знач АдресХранилища) Экспорт 
	
	Если НЕ Параметры.Свойство("ЗаполнятьПоПравилу") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонкиПериода = "ДатаОтгрузки";
	
	ТаблицаПериоды = Планирование.ПолучитьТаблицуПериодов();
	Планирование.ЗаполнитьТаблицуПериодов(ТаблицаПериоды, Параметры.Периодичность, Параметры.НачалоПериода, Параметры.ОкончаниеПериода);
	
	НайденныеСтрокиПериодов = ТаблицаПериоды.НайтиСтроки(Новый Структура("Активная", Истина));
	ВсегоПериодов = НайденныеСтрокиПериодов.Количество();
	Если Параметры.КроссТаблица И ВсегоПериодов = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыДанных", Планирование.ПолучитьПараметрыПлана(Параметры));
	
	Если ЗначениеЗаполнено(Параметры.ИзменитьРезультатНа) Тогда
		
		ДополнительныеПараметры.ПараметрыДанных.Вставить("Коэффициент", (100 + Параметры.ИзменитьРезультатНа) / 100);
		
	КонецЕсли;
	
	ПравилоЗаполнения = Параметры.ПравилоЗаполнения;
	ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
	
	
	Результат = Планирование.ВыбратьДанныеПоПравилам(
		Перечисления.ТипыПланов.ПланПродажПоКатегориям, 
		ПравилоЗаполнения, 
		ПользовательскиеНастройки, 
		ДополнительныеПараметры);
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	Если Результат <> Неопределено Тогда
		
		РазрядностьОкругления = Параметры.ТочностьОкругления + 3;
		
		Для каждого СтрокаРезультата из Результат Цикл
			
			Если СтрокаРезультата.Количество = null Тогда
				Продолжить;
			КонецЕсли;
			
			Если Цел(СтрокаРезультата.Количество * Pow(10, РазрядностьОкругления)) = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Количество = Окр(СтрокаРезультата.Количество, РазрядностьОкругления);
			
			Если Параметры.КроссТаблица Тогда
				
				Если ЗначениеЗаполнено(СтрокаРезультата.Период) 
					И СтрокаРезультата.Период >= Параметры.НачалоПериода 
					И СтрокаРезультата.Период <= Параметры.ОкончаниеПериода Тогда
					
					// Распределять по периодам не требуется
					НоваяСтрока = ЗаполняемаяТЧ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
					
					НоваяСтрока.Количество = Количество;
					НоваяСтрока[ИмяКолонкиПериода] = СтрокаРезультата.Период;
					
					Продолжить;
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаРезультата.Период) Тогда
					// Исключаем строку т.к. не попадает в заданный период плана
					Продолжить;
					
				КонецЕсли; 
				
				Если СтрокаРезультата.Количество < 0 Тогда
					ЗнакКоличества = -1;
				Иначе
					ЗнакКоличества = 1;
				КонецЕсли;
				
				ОсталосьРаспределить 	= ЗнакКоличества * Окр(Цел(СтрокаРезультата.Количество * Pow(10, РазрядностьОкругления)) / Pow(10, РазрядностьОкругления), РазрядностьОкругления);
				ОсталосьПериодов		= ВсегоПериодов;
				
				Пока ОсталосьРаспределить > 0 И ОсталосьПериодов > 0 Цикл
					
					ДатаПерода = НайденныеСтрокиПериодов[НайденныеСтрокиПериодов.ВГраница() + 1 - ОсталосьПериодов].ДатаНачала;
					
					//Двигаемся к последним датам выпуска пока распределяемое количество в конкретной дате не станет ненулевым.
					Пока ОсталосьРаспределить > 0 И ОсталосьПериодов > 0 Цикл
						
						РаспределитьВДате = Окр(Цел(ОсталосьРаспределить * Pow(10, РазрядностьОкругления) / ОсталосьПериодов) / Pow(10, РазрядностьОкругления), РазрядностьОкругления);
						
						Если РаспределитьВДате > 0 Тогда
							
							Прервать;
							
						Иначе
							
							ОсталосьПериодов = ОсталосьПериодов - 1;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если ОсталосьПериодов = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
					//РаспределитьВДате не равно нулю, значит помещаем в таблицу товаров
					НоваяСтрока = ЗаполняемаяТЧ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
					
					НоваяСтрока.Количество = ЗнакКоличества * РаспределитьВДате;
					НоваяСтрока[ИмяКолонкиПериода] = ДатаПерода;
					
					ОсталосьПериодов = ОсталосьПериодов - 1;
					
					ОсталосьРаспределить = ОсталосьРаспределить - РаспределитьВДате;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = ЗаполняемаяТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
				НоваяСтрока.Количество = Количество;
				НоваяСтрока[ИмяКолонкиПериода] = СтрокаРезультата.Период;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ЗаполняемаяТЧ, АдресХранилища);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ФорматМагазина КАК ФорматМагазина,
	|	ДанныеДокумента.Сценарий КАК Сценарий,
	|	ДанныеДокумента.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Реквизиты = РезультатыЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	
	Запрос.УстановитьПараметр("НачалоПериода",  Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("Активность",     Реквизиты.Статус = Перечисления.СтатусыПланов.Утвержден);
	Запрос.УстановитьПараметр("Подразделение",  Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Сценарий",       Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("ФорматМагазина", Реквизиты.ФорматМагазина);
	
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаПланПродажПоКатегориям(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаПланПродажПоКатегориям(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПланПродажПоКатегориям";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	&Активность КАК Активность,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ТаблицаДокумента.ДатаОтгрузки
	|	КОНЕЦ КАК Период,
	|	&Сценарий КАК Сценарий,
	|	&ФорматМагазина КАК ФорматМагазина,
	|	&Подразделение КАК Подразделение,
	|	ТаблицаДокумента.Ссылка КАК ПланПродажПоКатегориям,
	|	ТаблицаДокумента.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ТаблицаДокумента.Склад КАК Склад,
	|	ТаблицаДокумента.РейтингПродаж КАК РейтингПродаж,
	|	ТаблицаДокумента.Количество КАК Количество
	|ИЗ
	|	Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// План продаж по категориям
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПланПродажПоКатегориям";
	КомандаПечати.Представление = НСтр("ru='План продаж по категориям';uk='План продажів по категоріях'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПланПродажПоКатегориям") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПланПродажПоКатегориям",
			НСтр("ru='План продаж по категориям';uk='План продажів по категоріях'"),
			СформироватьПечатнуюФормуПлана(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода),
			,
			"Документ.ПланПродажПоКатегориям.ПФ_MXL_ПланПродажПоКатегориям",
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма
			);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуПлана(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("КроссТаблица") Тогда
		ПоУмолчаниюКроссТаблица = ПараметрыПечати.КроссТаблица = Истина;
		ПоУмолчаниюТаблица = ПараметрыПечати.КроссТаблица = Ложь;
	Иначе
		ПоУмолчаниюКроссТаблица = Ложь;
		ПоУмолчаниюТаблица = Ложь;
	КонецЕсли; 
	
	ВыводитьШапку = Истина;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ВыводитьШапку") Тогда
		ВыводитьШапку = ПараметрыПечати.ВыводитьШапку;
	КонецЕсли;
	
	ВыводитьСценарий 		= Истина;
	ВыводитьПериодСтатус	= Истина;
	ВыводитьПодразделение	= Истина;
	ВыводитьСклад 			= Истина;
	ВыводитьФорматМагазина	= Истина;
	ВыводитьСкладВТЧ 		= Истина;
	ВыводитьРейтингПродаж	= Истина;
	
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСценарий", ВыводитьСценарий) Тогда
		ВыводитьСценарий 	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьПериодСтатус", ВыводитьПериодСтатус) Тогда
		ВыводитьПериодСтатус 	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьПодразделение", ВыводитьПодразделение) Тогда
		ВыводитьПодразделение 	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСклад", ВыводитьСклад) Тогда
		ВыводитьСклад 			= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьФорматМагазина", ВыводитьФорматМагазина) Тогда
		ВыводитьФорматМагазина	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСкладВТЧ", ВыводитьСкладВТЧ) Тогда
		ВыводитьСкладВТЧ 		= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСкладВТЧ", ВыводитьСкладВТЧ) Тогда
		ВыводитьСкладВТЧ 		= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьРейтингПродаж", ВыводитьРейтингПродаж) Тогда
		ВыводитьРейтингПродаж	= Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                         КАК Ссылка,
	|	ТаблицаДокумента.Номер                          КАК Номер,
	|	ТаблицаДокумента.Дата                           КАК Дата,
	|	ТаблицаДокумента.Ответственный                  КАК Ответственный,
	|	ТаблицаДокумента.Статус                         КАК Статус,
	|	ТаблицаДокумента.Периодичность                  КАК Периодичность,
	|	ТаблицаДокумента.НачалоПериода                  КАК НачалоПериода,
	|	ТаблицаДокумента.ОкончаниеПериода               КАК ОкончаниеПериода,
	|	ТаблицаДокумента.Сценарий                       КАК Сценарий,
	|	ТаблицаДокумента.ВидПлана                       КАК ВидПлана,
	|	ВЫБОР
	|		КОГДА &ПоУмолчаниюКроссТаблица
	|				ИЛИ ТаблицаДокумента.КроссТаблица
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК КроссТаблица,
	|	ТаблицаДокумента.ЗаполненоАвтоматически         КАК ЗаполненоАвтоматически,
	|	СпрВидыПланов.ЗаполнятьПодразделение            КАК ЗаполнятьПодразделение,
	|	СпрВидыПланов.ЗаполнятьСклад                    КАК ЗаполнятьСклад,
	|	СпрВидыПланов.ЗаполнятьФорматМагазина           КАК ЗаполнятьФорматМагазина,
	|	СпрВидыПланов.ЗаполнятьСкладВТЧ                 КАК ЗаполнятьСкладВТЧ,
	|	СценарииПланирования.ОтображатьНомерПериода     КАК ОтображатьНомерПериода,
	|	СценарииПланирования.ИспользоватьРасчетПоСкоростиПродаж КАК ЗаполнятьРейтингПродаж,
	|	Пользователи.ФизическоеЛицо                     КАК ОтветственныйФизЛицо,
	|	ТаблицаДокумента.Подразделение                  КАК Подразделение,
	|	ТаблицаДокумента.ФорматМагазина                 КАК ФорматМагазина,
	|	ТаблицаДокумента.Склад                          КАК Склад
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СценарииТоварногоПланирования КАК СценарииПланирования
	|		ПО ТаблицаДокумента.Сценарий = СценарииПланирования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК СпрВидыПланов
	|		ПО ТаблицаДокумента.ВидПлана = СпрВидыПланов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ТаблицаДокумента.Ответственный = Пользователи.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка                            КАК Ссылка,
	|	ТаблицаТовары.ТоварнаяКатегория                 КАК ТоварнаяКатегория,
	|	ТаблицаТовары.ТоварнаяКатегория.Наименование    КАК ТоварнаяКатегорияНаименование,
	|	ТаблицаТовары.НомерСтроки                       КАК НомерСтроки,
	|	ТаблицаТовары.ДатаОтгрузки                      КАК ДатаПериода,
	|	ТаблицаТовары.Количество                        КАК Количество,
	|	ТаблицаТовары.Комментарий                       КАК Комментарий,
	|	ТаблицаТовары.Склад                             КАК Склад,
	|	ТаблицаТовары.РейтингПродаж                     КАК РейтингПродаж
	|ИЗ
	|	Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ТаблицаТовары
	|ГДЕ
	|	(&ПоУмолчаниюТаблица
	|			ИЛИ НЕ ТаблицаТовары.Ссылка.КроссТаблица)
	|	И ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.ТоварнаяКатегория.Наименование,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки),
	|	ВложенныйЗапрос.ДатаПериода,
	|	СУММА(ВложенныйЗапрос.Количество),
	|	МАКСИМУМ(ВложенныйЗапрос.Комментарий),
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.РейтингПродаж
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|		ВЫБОР ТаблицаДокумента.Периодичность
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, ГОД)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, ПОЛУГОДИЕ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, КВАРТАЛ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, МЕСЯЦ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, ДЕКАДА)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, НЕДЕЛЯ)
	|			ИНАЧЕ ТаблицаТовары.ДатаОтгрузки
	|		КОНЕЦ КАК ДатаПериода,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР КОГДА ТаблицаТовары.Отменено ТОГДА 0 ИНАЧЕ ТаблицаТовары.Количество КОНЕЦ КАК Количество,
	|		ВЫБОР КОГДА ТаблицаТовары.Отменено ТОГДА """" ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.Комментарий КАК СТРОКА(1000)) КОНЕЦ КАК Комментарий,
	|		ТаблицаТовары.Склад                 КАК Склад,
	|		ТаблицаТовары.РейтингПродаж         КАК РейтингПродаж
	|	ИЗ
	|		Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ТаблицаТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ТаблицаДокумента
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|	ГДЕ
	|		(&ПоУмолчаниюКроссТаблица
	|				ИЛИ ТаблицаТовары.Ссылка.КроссТаблица)
	|		И ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.ТоварнаяКатегория.Наименование,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.РейтингПродаж,
	|	ВложенныйЗапрос.ДатаПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки,
	|	ТоварнаяКатегорияНаименование,
	|	Склад,
	|	РейтингПродаж,
	|	ДатаПериода
	|ИТОГИ ПО
	|	Ссылка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланПродажПоКатегориям_ПланПродажПоКатегориям";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПоУмолчаниюКроссТаблица", ПоУмолчаниюКроссТаблица);
	Запрос.УстановитьПараметр("ПоУмолчаниюТаблица", ПоУмолчаниюТаблица);
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	ДанныеПечати			= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам 	= МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	ЕстьКроссТаблицы = Ложь;
	НачалоШапки = 0;
	ОкончаниеШапки = 0;
	ШиринаНомера = 0;
	ОкончаниеНомера = 0;
	
	//ДЕБАГ
	ПланироватьПоСумме = ЛОЖЬ;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
		
		КроссТаблица = ДанныеПечати.КроссТаблица;
		
		Если КроссТаблица Тогда
			ТаблицаПериодов = Планирование.ПолучитьТаблицуПериодов();
			Планирование.ЗаполнитьТаблицуПериодов(ТаблицаПериодов, 
				ДанныеПечати.Периодичность, 
				ДанныеПечати.НачалоПериода, 
				ДанныеПечати.ОкончаниеПериода, 
				?(ВыводитьШапку, ДанныеПечати.ОтображатьНомерПериода, Ложь));
			КроссТаблица = ТаблицаПериодов.Количество() > 1 ИЛИ НЕ ВыводитьШапку;
		КонецЕсли;
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПланПродажПоКатегориям.ПФ_MXL_ПланПродажПоКатегориям", КодЯзыкаПечать);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку плана
		Если ВыводитьШапку Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
			
			ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='План продаж по категориям';uk='План продажів по категоріях'",КодЯзыкаПечать), КодЯзыкаПечать);
			ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ВыводитьСценарий Тогда
				ОбластьМакета                                  = Макет.ПолучитьОбласть("Сценарий");
				ПредставлениеСценария                          = Строка(ДанныеПечати.Сценарий) + ", "+ Строка(ДанныеПечати.Периодичность);
				ОбластьМакета.Параметры.ПредставлениеСценария  = ПредставлениеСценария;
				ОбластьМакета.Параметры.Сценарий               = ДанныеПечати.Сценарий;
				ПредставлениеВидаПлана                         = Строка(ДанныеПечати.ВидПлана);
				ОбластьМакета.Параметры.ПредставлениеВидаПлана = ПредставлениеВидаПлана;
				ОбластьМакета.Параметры.ВидПлана               = ДанныеПечати.ВидПлана;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ВыводитьПериодСтатус Тогда
				ОбластьМакета                                = Макет.ПолучитьОбласть("Период");
				ПредставлениеПериода                         = НСтр("ru='Период с %1 по %2';uk='Період з %1 по %2'",КодЯзыкаПечать);
				ПредставлениеПериода                         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода,
					Формат(ДанныеПечати.НачалоПериода, "ДЛФ=D"), 
					Формат(ДанныеПечати.ОкончаниеПериода, "ДЛФ=D"));
				ОбластьМакета.Параметры.ПредставлениеПериода = ПредставлениеПериода;
				ОбластьМакета.Параметры.Статус = Строка(ДанныеПечати.Статус);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеПечати.ЗаполнятьПодразделение И ВыводитьПодразделение Тогда
				ОбластьМакета                                       = Макет.ПолучитьОбласть("Подразделение");
				ПредставлениеПодразделения                          = Строка(ДанныеПечати.Подразделение);
				ОбластьМакета.Параметры.ПредставлениеПодразделения  = ПредставлениеПодразделения;
				ОбластьМакета.Параметры.Подразделение               = ДанныеПечати.Подразделение;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеПечати.ЗаполнятьФорматМагазина И ВыводитьФорматМагазина Тогда
				ОбластьМакета                                        = Макет.ПолучитьОбласть("ФорматМагазина");
				ПредставлениеФорматаМагазина                         = Строка(ДанныеПечати.ФорматМагазина);
				ОбластьМакета.Параметры.ПредставлениеФорматаМагазина = ПредставлениеФорматаМагазина;
				ОбластьМакета.Параметры.ФорматМагазина               = ДанныеПечати.ФорматМагазина;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеПечати.ЗаполнятьСклад И ВыводитьСклад Тогда
				ОбластьМакета                               = Макет.ПолучитьОбласть("Склад");
				ПредставлениеСклада                         = Строка(ДанныеПечати.Склад);
				ОбластьМакета.Параметры.ПредставлениеСклада = ПредставлениеСклада;
				ОбластьМакета.Параметры.Склад               = ДанныеПечати.Склад;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
		КонецЕсли;
	
		// Выводим заголовок таблицы Товары
		ДопПоля = Новый Массив;
		Если ДанныеПечати.ЗаполнятьСкладВТЧ Тогда
			СтруктураДопПоля = Новый Структура;
			СтруктураДопПоля.Вставить("Заголовок", НСтр("ru='Склад';uk='Склад'",КодЯзыкаПечать));
			СтруктураДопПоля.Вставить("КолонкаЗначения", "Склад");
			ДопПоля.Добавить(СтруктураДопПоля);
		КонецЕсли;
		Если ДанныеПечати.ЗаполнятьРейтингПродаж Тогда
			СтруктураДопПоля = Новый Структура;
			СтруктураДопПоля.Вставить("Заголовок", НСтр("ru='Рейтинг продаж';uk='Рейтинг продажів'",КодЯзыкаПечать));
			СтруктураДопПоля.Вставить("КолонкаЗначения", "РейтингПродаж");
			ДопПоля.Добавить(СтруктураДопПоля);
		КонецЕсли;
		
		СуффиксКроссТаблицы = ?(КроссТаблица, "Кросс","");
		
		ИспользоватьХарактеристикиНоменклатуры = ЛОжь;
		БезХарактеристик = НЕ (ВыводитьШапку ИЛИ ИспользоватьХарактеристикиНоменклатуры);
		// Расчет ширины колонки товарной категории
		ШиринаКолонкиТоварнаяКатегория = Макет.Область("ТоварнаяКатегория").ШиринаКолонки;
		
		Если ДопПоля.Количество() > 0 Тогда
			ШиринаКолонкиТоварнаяКатегория = ШиринаКолонкиТоварнаяКатегория -Макет.Область("ТоварнаяКатегорияДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0")).ШиринаКолонки * ДопПоля.Количество();
		КонецЕсли; 
		Макет.Область("ТоварнаяКатегория").ШиринаКолонки = ШиринаКолонкиТоварнаяКатегория;
		
		ПериодовНаПервойСтранице = 2;
		ПериодовНаСтранице = 6;
		
		ОбластьНомера                   = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьУИ                       = Макет.ПолучитьОбласть("ШапкаТаблицы|УникальныеИдентификаторы");
		ОбластьТоварнаяКатегория        = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварнаяКатегория");
		ОбластьДанных                   = Макет.ПолучитьОбласть("ШапкаТаблицы|Количество" + СуффиксКроссТаблицы);
		ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("ШапкаТаблицы|КоличествоКроссОкончание");
		ОбластьДатаПериод               = Макет.ПолучитьОбласть("ШапкаТаблицы|ДатаПериод");
		Если ДопПоля.Количество() > 0 Тогда
			ОбластьТоварнаяКатегорияДопПоле = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварнаяКатегорияДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0"));
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если Не ВыводитьШапку Тогда
			ТабличныйДокумент.Присоединить(ОбластьУИ);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегория);
		
		Для каждого ДопПоле Из ДопПоля Цикл
			ОбластьТоварнаяКатегорияДопПоле.Параметры.Заголовок = ДопПоле.Заголовок;
			ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегорияДопПоле);
		КонецЦикла; 
		
		НомерСтраницы = 1;
		Если КроссТаблица Тогда
			Для каждого Период Из ТаблицаПериодов Цикл
				Индекс = ТаблицаПериодов.Индекс(Период);
				Если Индекс = ТаблицаПериодов.Количество()-1 Тогда
					ОбластьДанныхКроссОкончание.Параметры.Заголовок = Период.Заголовок;
					ТабличныйДокумент.Присоединить(ОбластьДанныхКроссОкончание);
				Иначе
					ОбластьДанных.Параметры.Заголовок = Период.Заголовок;
					ТабличныйДокумент.Присоединить(ОбластьДанных);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
		КонецЕсли; 
		
		НачалоШапки = ТабличныйДокумент.ВысотаТаблицы - ОбластьНомера.ВысотаТаблицы +1;
		ОкончаниеШапки = ТабличныйДокумент.ВысотаТаблицы;
		ШиринаНомера = ОбластьНомера.ШиринаТаблицы;
		
		ОбластьНомера                   = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьУИ                       = Макет.ПолучитьОбласть("СтрокаТаблицы|УникальныеИдентификаторы");
		ОбластьТоварнаяКатегория        = Макет.ПолучитьОбласть("СтрокаТаблицы|ТоварнаяКатегория");
		ОбластьДанных                   = Макет.ПолучитьОбласть("СтрокаТаблицы|Количество" + СуффиксКроссТаблицы);
		ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("СтрокаТаблицы|КоличествоКроссОкончание");
		ОбластьДатаПериод               = Макет.ПолучитьОбласть("СтрокаТаблицы|ДатаПериод");
		Если ДопПоля.Количество() > 0 Тогда
			ОбластьТоварнаяКатегорияДопПоле = Макет.ПолучитьОбласть("СтрокаТаблицы|ТоварнаяКатегорияДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0") );
		КонецЕсли;
		
		ТекущаяСтрока  = Новый Структура("ТоварнаяКатегория, Склад, РейтингПродаж");
		ТекущийПериод  = 0;
		НомерСтроки    = 0;
	
		// Выводим строки таблицы Товары
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			ОдинаковыеСтроки = Истина;
			Если КроссТаблица Тогда
				Для каждого Элемент Из ТекущаяСтрока Цикл
					Если ВыборкаПоТоварам[Элемент.Ключ] <> Элемент.Значение Тогда
						ОдинаковыеСтроки = Ложь;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
			Если НЕ КроссТаблица ИЛИ КроссТаблица И НЕ ОдинаковыеСтроки Тогда
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаПоТоварам);
				ТекущийПериод = 0;
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомера);
				
				Если Не ВыводитьШапку Тогда
					ОбластьУИ.Параметры.УникальныйИдентификаторТоварнаяКатегория = Строка(ВыборкаПоТоварам.ТоварнаяКатегория.УникальныйИдентификатор());
					ОбластьУИ.Параметры.УникальныйИдентификаторСклад             = Строка(ВыборкаПоТоварам.Склад.УникальныйИдентификатор());
					ОбластьУИ.Параметры.УникальныйИдентификаторРейтингПродаж     = Строка(ВыборкаПоТоварам.РейтингПродаж.УникальныйИдентификатор());
					
					ТабличныйДокумент.Присоединить(ОбластьУИ);
				КонецЕсли;
				
				ОбластьТоварнаяКатегория.Параметры.Заполнить(ВыборкаПоТоварам);
				
				ОбластьТоварнаяКатегория.Параметры.ТоварнаяКатегория = ВыборкаПоТоварам.ТоварнаяКатегорияНаименование;
				
				ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегория);
				
				Для каждого ДопПоле Из ДопПоля Цикл
					ОбластьТоварнаяКатегорияДопПоле.Параметры.Значение = ВыборкаПоТоварам[ДопПоле.КолонкаЗначения];
					ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегорияДопПоле);
				КонецЦикла;
				
			КонецЕсли;
			
			Если КроссТаблица Тогда
				
				ТекущийПериод = ТекущийПериод + 1;
				
				Период = ТаблицаПериодов.Найти(ВыборкаПоТоварам.ДатаПериода, "ДатаНачала");
				
				Индекс = ТаблицаПериодов.Индекс(Период);
				Если Индекс < ТаблицаПериодов.Количество()-1 Тогда
					
					ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
					Область = ОбластьДанных.Область("R1C1:R1C1");
					Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
					ТабличныйДокумент.Присоединить(ОбластьДанных);
				Иначе
					ОбластьДанныхКроссОкончание.Параметры.Заполнить(ВыборкаПоТоварам);
					Область = ОбластьДанныхКроссОкончание.Область("R1C1:R1C1");
					Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
					ТабличныйДокумент.Присоединить(ОбластьДанныхКроссОкончание);
				КонецЕсли; 
				
				Пока ТекущийПериод < Период.НомерКолонки Цикл
				
					ТабличныйДокумент.Присоединить(ОбластьДанных);
					ТекущийПериод = ТекущийПериод + 1;
				
				КонецЦикла;
				
			Иначе
				ОбластьДатаПериод.Параметры.Заполнить(ВыборкаПоТоварам);
				ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
				Область = ОбластьДанных.Область("R1C1:R1C1");
				Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал, в том случае если выводили шапку
		Если ВыводитьШапку Тогда
			ОбластьНомера                   = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьУИ                       = Макет.ПолучитьОбласть("ПодвалТаблицы|УникальныеИдентификаторы");
			ОбластьТоварнаяКатегория        = Макет.ПолучитьОбласть("ПодвалТаблицы|ТоварнаяКатегория");
			ОбластьДанных                   = Макет.ПолучитьОбласть("ПодвалТаблицы|Количество" + СуффиксКроссТаблицы);
			ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("ПодвалТаблицы|КоличествоКроссОкончание");
			ОбластьДатаПериод               = Макет.ПолучитьОбласть("ПодвалТаблицы|ДатаПериод");
			Если ДопПоля.Количество() > 0 Тогда
				ОбластьТоварнаяКатегорияДопПоле = Макет.ПолучитьОбласть("ПодвалТаблицы|ТоварнаяКатегорияДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0") );
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегория);
			Для каждого ДопПоле Из ДопПоля Цикл
				ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегорияДопПоле);
			КонецЦикла; 
			
			Если КроссТаблица Тогда
				
				Для каждого Период Из ТаблицаПериодов Цикл
					Если Период.Активная И Период.НомерКолонки <= 0 Тогда
						Продолжить;
					КонецЕсли; 
					
					ТабличныйДокумент.Присоединить(ОбластьДанных);
				КонецЦикла;
			Иначе
				ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЕсли;
			
			ОкончаниеНомера = ТабличныйДокумент.ВысотаТаблицы;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтоговаяСтрока");
			ИтоговаяСтрока = НСтр("ru='Всего наименований %КоличествоНаименований%.';uk='Всього найменувань %КоличествоНаименований%.'",КодЯзыкаПечать);
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", НомерСтроки);
			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подписи
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			
			Если ЗначениеЗаполнено(ДанныеПечати.ОтветственныйФизЛицо) Тогда
				ОбластьМакета.Параметры.ПредствлениеОтветственного =
					ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ОтветственныйФизЛицо, ДанныеПечати.Дата);
				ОбластьМакета.Параметры.Ответственный = ДанныеПечати.ОтветственныйФизЛицо;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
		Если КроссТаблица Тогда
			ЕстьКроссТаблицы = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ДанныеПечати.Количество() = 1 И ЕстьКроссТаблицы Тогда
	
		ОбластьШапки = ТабличныйДокумент.Область(НачалоШапки, , ОкончаниеШапки, );
		ТабличныйДокумент.ПовторятьПриПечатиСтроки = ОбластьШапки;
		
		ОбластьНомера = ТабличныйДокумент.Область(, 1, , ШиринаНомера);
		ТабличныйДокумент.ПовторятьПриПечатиКолонки = ОбластьНомера;
	
	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция СоздатьПрисоединенныйФайлExcel(ДокументСсылка, ИдентификаторФормы) Экспорт 
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьШапку", Ложь);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДокументСсылка);
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ДокументСсылка);
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", Локализация.ПолучитьЯзыкФормированияПечатныхФорм());
	
	ТабличныйДокумент = СформироватьПечатнуюФормуПлана(МассивДокументов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), ИдентификаторФормы);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", ДокументСсылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", "Excel" + " " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ.мм.сс'"));
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xls");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДата());
	
	Файл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище, Неопределено);
	Если Файл <> Неопределено Тогда
		ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(Файл);
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Файл, ИдентификаторФормы, Истина);
		СтруктураДействийExcel = Новый Структура;
		СтруктураДействийExcel.Вставить("AutoFilter", Новый Структура("СтрокаНачало, КолонкаНачало", 2, 2));
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик, упаковки, партнера, соглашения, склада
		МассивКолонок = Новый Массив;
		МассивКолонок.Добавить(3);
		МассивКолонок.Добавить(4);
		МассивКолонок.Добавить(5);
		СтруктураДействийExcel.Вставить("HiddenColumns", МассивКолонок);
		
		Возврат Новый Структура("ДанныеФайла, Файл, СтруктураДействийExcel", ДанныеФайла, Файл, СтруктураДействийExcel);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецЕсли
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Физические лица".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Раскладывает полное имя в структуру.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя.
//
// Возвращаемое значение:
//  Структура - коллекция со свойствами:
//   * Фамилия  - Строка;
//   * Имя      - Строка;
//   * Отчество - Строка.
//
Функция ЧастиИмени(ФамилияИмяОтчество) Экспорт
	
	Результат = Новый Структура("Фамилия,Имя,Отчество");
	
	ЧастиИмени = СтрРазделить(ФамилияИмяОтчество, " ", Ложь);
	
	Если ЧастиИмени.Количество() >= 1 Тогда
		Результат.Фамилия = ЧастиИмени[0];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		Результат.Имя = ЧастиИмени[1];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 3 Тогда
		Результат.Отчество = ЧастиИмени[2];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() > 3 Тогда
		ДополнительныеЧастиОтчества = Новый Массив;
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='оглы';uk='огли'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='улы';uk='ули'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='уулу';uk='уулу'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='кызы';uk='кизи'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='гызы';uk='гизи'"));
		
		Если ДополнительныеЧастиОтчества.Найти(НРег(ЧастиИмени[3])) <> Неопределено Тогда
			Результат.Отчество = Результат.Отчество + " " + ЧастиИмени[3];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует краткое представление из полного имени.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя;
//                     - Структура - коллекция со свойствами:
//                        * Фамилия  - Строка;
//                        * Имя      - Строка;
//                        * Отчество - Строка.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Пупкин Василий Иванович"); // Результат = "Пупкин В. И."
//
Функция ФамилияИнициалы(Знач ФамилияИмяОтчество) Экспорт
	
	Если ТипЗнч(ФамилияИмяОтчество) = Тип("Строка") Тогда
		ФамилияИмяОтчество = ЧастиИмени(ФамилияИмяОтчество);
	КонецЕсли;
	
	Фамилия = ФамилияИмяОтчество.Фамилия;
	Имя = ФамилияИмяОтчество.Имя;
	Отчество = ФамилияИмяОтчество.Отчество;
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат Фамилия;
	КонецЕсли;
	
	Если ПустаяСтрока(Отчество) Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2.", Фамилия, Лев(Имя, 1));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2.%3.", Фамилия, Лев(Имя, 1), Лев(Отчество, 1));
	
КонецФункции

// Формирует из полного имени имя и фамилию в формате ДСТУ 4163:2020.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя;
//                     - Структура - коллекция со свойствами:
//                        * Фамилия  - Строка;
//                        * Имя      - Строка;
//                        * Отчество - Строка.
//
// Возвращаемое значение:
//  Строка - Имя ФАМИЛИЯ.
//
Функция ИмяФамилияВФорматеДСТУ(Знач ФамилияИмяОтчество) Экспорт
	
	Если ФамилияИмяОтчество = NULL ИЛИ ФамилияИмяОтчество = Неопределено Тогда
		Возврат "";
	КонецЕсли;		

	Если ТипЗнч(ФамилияИмяОтчество) = Тип("Строка") Тогда
		ФамилияИмяОтчество = ЧастиИмени(ФамилияИмяОтчество);
	КонецЕсли;
	
	Фамилия = ФамилияИмяОтчество.Фамилия;
	Имя = ФамилияИмяОтчество.Имя;
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат ВРег(Фамилия);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", Имя, ВРег(Фамилия));
	
КонецФункции

// Проверяет верно ли написано ФИО.
// ФИО может быть написано либо только на кириллице, либо только на латинице.
// Также можно указать, что ФИО может быть верным только в кириллице.
//
// Параметры:
//		СтрокаПараметр - строка - ФИО.
//		ДопустимаТолькоКириллица - если Истина, то ФИО проверяется на кириллицу, латиница в этом случае считается ошибкой.
//									Ложь - ФИО считается верным, если оно написано либо на латинице, либо на кириллице.
//
// Возвращаемое значение:
//		Истина - ФИО написано верно, иначе Ложь.
//
Функция ФИОНаписаноВерно(Знач СтрокаПараметр, ТолькоКириллица = Ложь) Экспорт
	
	ДопустимыеСимволы = "-";
	
	Возврат (Не ТолькоКириллица И СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СтрокаПараметр, Ложь, ДопустимыеСимволы))
		Или СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(СтрокаПараметр, Ложь, ДопустимыеСимволы);
	
КонецФункции

// Возвращает тип серии документа удостоверяющего личность.
//
// Параметры:
//	ВидДокумента - Справочник.ВидыДокументовФизическихЛиц
//
// Возвращаемое значение:
//	Число	- тип серии для документа, 0 - требований к серии нет.
//
Функция ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента) Экспорт
	
	ТипДокумента = 0;
	
 	Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении") Тогда
		ТипДокумента = 1;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилет")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.Паспорт") Тогда
		ТипДокумента = 2;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМоряка")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.Загранпаспорт")  Тогда
		
		ТипДокумента = 3;
	
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

// Возвращает тип номера документа удостоверяющего личность.
//
// Параметры:
//	ВидДокумента - Справочник.ВидыДокументовФизическихЛиц
//
// Возвращаемое значение:
//	Число	- тип номера для документа, 0 - требований к номеру нет.
//
Функция ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента) Экспорт
	
	ТипДокумента = 0;
	
    Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилет")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.Загранпаспорт") Тогда
		ТипДокумента = 1;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМоряка") Тогда
		ТипДокумента = 3;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.Паспорт") Тогда
		ТипДокумента = 4;
		
	КонецЕсли;
	
	
	Возврат ТипДокумента;
	
КонецФункции

// Проверяет, что серия документа для переданного вида документа указана правильно.
//
// Параметры:
//	ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц	- вид документа, для которого необходимо
//																проверить правильность серии.
//	Серия - Строка												- серия документа.
//	ТекстОшибки - Строка										- текст ошибки, если серия указана неправильно.
//
// Возвращаемое значение:
//	Булево - результат проверки, Истина - правильно, Ложь - нет.
//
Функция СерияДокументаУказанаПравильно(ВидДокумента, Знач Серия , ТекстОшибки) Экспорт
	
	ТипДокумента = ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента);
	
	Серия = СокрЛП(Серия);
	
	Если ТипДокумента = 1 Тогда // Свидетельство о рождении.
		
		Поз = СтрНайти(Серия, "-");
		Если Поз = 0 Тогда
			ТекстОшибки = НСтр("ru='Серия документа должна состоять из двух частей, разделенных символом ""-"".';uk='Серія документа повинна складатися із двох частин, розділених символом ""-"".'");
			Возврат Ложь;
		КонецЕсли;
		
		ЧастьСерии1 = Лев(Серия, Поз - 1);
		ЧастьСерии2 = СокрЛП(Сред(Серия, Поз + 1));
		
		Поз = СтрНайти(ЧастьСерии2, "-");
		Если Поз <> 0 Тогда
			ТекстОшибки = НСтр("ru='В серии документа должно быть только две группы символов.';uk='У серії документа повинне бути тільки дві групи символів.'");
			Возврат Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ЧастьСерии1) Тогда
			ТекстОшибки = НСтр("ru='В серии документа отсутствует числовая часть.';uk='У серії документа відсутня числова частина.'");
			Возврат Ложь;
			
		ИначеЕсли  ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC1УХЛС", ЧастьСерии1, "          ")) = 0 Тогда
			ТекстОшибки = НСтр("ru='Числовая часть серии документа должна указываться символами 1 У Х Л С  или  I V X L C.';uk='Числова частина серії документа повинна вказуватися символами 1 У Х Л С  або  I V X L C.'");
			Возврат Ложь;
			
		ИначеЕсли СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC", ЧастьСерии1, "1УХЛС") <> СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВАрабскуюНотацию(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC", ЧастьСерии1, "1УХЛС"))) Тогда
			ТекстОшибки = НСтр("ru='Числовая часть серии документа указана некорректно.';uk='Числова частина серії документа зазначена некоректно.'");
			Возврат Ложь;
			
		ИначеЕсли СтрДлина(ЧастьСерии2) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", ЧастьСерии2, "                                 ")) Тогда
			ТекстОшибки = НСтр("ru='После разделителя ""-"" в серии документа должны быть ДВЕ русские заглавные буквы.';uk='Після роздільника ""-"" в серії документа повинні бути ДВІ російські великі літери.'");
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 2 Тогда // Серия - две буквы: военный билет, различные паспорта	
		Если СтрДлина(Серия) = 0 Тогда
	         // у ID карточки нет серии 
		ИначеЕсли СтрДлина(Серия) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯІЇЄ", Серия, "                                 ")) Тогда
			ТекстОшибки = НСтр("ru='В серии документа должны быть ДВЕ украинские заглавные буквы.';uk='У серії документа повинні бути ДВІ українські великі літери.'");
			Возврат Ложь;
		КонецЕсли;

	ИначеЕсли ТипДокумента = 3 Тогда // Серия - две латинские буквы: загран паспорта
 		Если СтрДлина(Серия) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Серия, "                                 ")) Тогда
			ТекстОшибки = НСтр("ru='В серии документа должны быть ДВЕ латинские заглавные буквы.';uk='У серії документа повинні бути ДВІ латинські заголовні літери.'");
			Возврат Ложь;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что номер документа для переданного вида документа указан правильно.
//
// Параметры:
//	ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц	- вид документа, для которого необходимо
//																проверить правильность номера.
//	Номер - Строка												- номер документа.
//	ТекстОшибки - Строка										- текст ошибки, если номер указан неправильно.
//
// Возвращаемое значение:
//	Булево - результат проверки, Истина - правильно, Ложь - нет.
//
Функция НомерДокументаУказанПравильно(ВидДокумента, Знач Номер, ТекстОшибки) Экспорт
	
	Если Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("0123456789", Номер, "          ")) Тогда
		ТекстОшибки = НСтр("ru='В номере документа присутствуют недопустимые символы.';uk='У номері документа присутні неприпустимі символи.'");
		Возврат Ложь;
	КонецЕсли;
	
	ТипДокумента = ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента);
	
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	
	Если ТипДокумента = 1 Тогда
		Если ДлинаНомера <> 6 Тогда
			ТекстОшибки = НСтр("ru='Номер документа должен состоять из 6 символов.';uk='Номер документа повинен складатися з 6 символів.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 2 Тогда
		Если ДлинаНомера <> 7 Тогда
			ТекстОшибки = НСтр("ru='Номер документа должен состоять из 7 символов.';uk='Номер документа повинен складатися з 7 символів.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 3 Тогда
		Если (ДлинаНомера < 6 ) Или ( ДлинаНомера > 7 ) Тогда
			ТекстОшибки = НСтр("ru='Номер документа должен состоять из 6 или 7 символов.';uk='Номер документа повинен складатися з 6 або 7 символів.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 4 Тогда
		Если НЕ ((ДлинаНомера  = 6 ) Или ( ДлинаНомера = 9 )) Тогда
			ТекстОшибки = НСтр("ru='Номер документа должен состоять из 6 или 9 символов.';uk='Номер документу повинен складатися з 6 або 9 символів.'");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ЧастиИмени.
//
// Функция раскладывает ФИО в структуру.
//
// Параметры:
//	 ФИО - строка - наименование.
//
// Возвращаемое значение:
//	 Структура - со свойствами: 
//     * Фамилия  - Строка
//     * Имя      - Строка
//     * Отчество - Строка
//
Функция ФамилияИмяОтчество(Знач ФИО) Экспорт
	
	СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество");
	
	МассивПодстрок = СтрРазделить(ФИО, " ", Ложь);
	
	Если МассивПодстрок.Количество() > 0 Тогда
		СтруктураФИО.Вставить("Фамилия", МассивПодстрок[0]);
		Если МассивПодстрок.Количество() > 1 Тогда
			СтруктураФИО.Вставить("Имя", МассивПодстрок[1]);
		КонецЕсли;
		Если МассивПодстрок.Количество() > 2 Тогда
			Отчество = "";
			Для Шаг = 2 По МассивПодстрок.Количество()-1 Цикл
				Отчество = Отчество + МассивПодстрок[Шаг] + " ";
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Отчество, 1);
			СтруктураФИО.Вставить("Отчество", Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураФИО;
	
КонецФункции

// Устарела. Следует использовать функции ФамилияИнициалы и ЧастиИмени.
// Формирует фамилию и инициалы либо по переданным строкам.
//
// Параметры:
//  ФИОСтрокой	- Строка - если указан это параметр, то остальные игнорируются.
//  Фамилия		- Строка - фамилия физического лица.
//  Имя			- Строка - имя физического лица.
//  Отчество	- Строка - отчество физического лица.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы одной строкой. 
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); // Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ФИОСтрокой = "", Фамилия = " ", Имя = " ", Отчество = " ", ПорядокИОФамилия = Ложь) Экспорт

	ТипОбъекта = ТипЗнч(ФИОСтрокой);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтрРазделить(ФИОСтрокой, " ", Ложь);
	Иначе
		// Используем возможно переданные отдельные строки.
		Если НЕ ПорядокИОФамилия Тогда
			Возврат ?(Не ПустаяСтрока(Фамилия), 
			          Фамилия + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество), Лев(Отчество,1) + ".", ""), ""),
			          "");
		Иначе
			Возврат ?(Не ПустаяСтрока(Имя),      Лев(Имя,1) + "." ,     "") + 
			        ?(Не ПустаяСтрока(Отчество), Лев(Отчество,1) + ".", "") + 
					Фамилия;
		КонецЕсли; 		  
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
	Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
	Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	
	Если КоличествоПодстрок > 3 Тогда
		ДополнительныеЧастиОтчества = Новый Массив;
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='оглы';uk='огли'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='улы';uk='ули'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='уулу';uk='уулу'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='кызы';uk='кизи'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='гызы';uk='гизи'"));
		
		Если ДополнительныеЧастиОтчества.Найти(НРег(ФИО[3])) <> Неопределено Тогда
			Отчество = Отчество + " " + ФИО[3];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?(Не ПустаяСтрока(Фамилия), 
	          Фамилия + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "." + ?(Не ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""),
	          "");
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Процедура СостояниеЗаполнения(Текст)
	#Если Клиент Тогда
		Состояние(Текст);
	#КонецЕсли
КонецПроцедуры
 
// Получает для реквизита менеджер соответствующего ему объекта метаданных
Функция ПолучитьМенеджерПоТипу(ТипРеквизита)
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
	Если МетаданныеТипа = Неопределено Тогда
		// нет такого типа - скорее всего он примитивный
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
	 	// Это справочник
		Менеджер = Справочники[МетаданныеТипа.Имя];	
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеТипа) Тогда
		// Это перечисление
		Менеджер = Перечисления[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеТипа) Тогда
	 	// Это план счетов
		Менеджер = ПланыСчетов[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа) Тогда
	 	// Это план Видов Характеристик
		Менеджер = ПланыВидовХарактеристик[МетаданныеТипа.Имя];
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеТипа) Тогда
	 	// Это план ВидовРасчета
		Менеджер = ПланыВидовРасчета[МетаданныеТипа.Имя];
	Иначе
		//Для примитивных типов менеджер не нужен,
		Менеджер = Неопределено; 
	КонецЕсли; 
	
	Возврат Менеджер;
	
КонецФункции
	
// Формирует значение ссылочного типа
Функция СформированиеЗначениеСсылочногоТипа(ТипРеквизита, ЗначениеРеквизита, СоздаватьЭлементыСправочников = Ложь)
	
	Менеджер = ПолучитьМенеджерПоТипу(ТипРеквизита);
	
	Если Менеджер = Неопределено Тогда
		// нет смысла дальше искать ...
		Возврат ЗначениеРеквизита;
	КонецЕсли;
	
	Значение = Неопределено;
	
	// сначала попробуем получить предопределенный
	Значение = ПолучитьПредопределенный(ТипРеквизита, Менеджер, ЗначениеРеквизита);
	
	Если НЕ ПустаяСтрока(ЗначениеРеквизита) Тогда

		// если предопределенного нет, поищем по коду
		Если Значение = Неопределено Тогда
			// проверим, можно ли искать по коду
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
				ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
				ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
				ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда 
				// можно искать по коду
				Значение = Менеджер.НайтиПоКоду(ЗначениеРеквизита);
				Если Значение = Менеджер.ПустаяСсылка() Тогда
					Значение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		// если  по коду не нашли, поищем по наименованию
		Если Значение = Неопределено Тогда
			// проверим, можно ли искать по наименованию
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
				ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
				ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипРеквизита) ИЛИ
				ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда 
				// можно искать по коду
				Значение = Менеджер.НайтиПоНаименованию(ЗначениеРеквизита, Истина);
				Если Значение = Менеджер.ПустаяСсылка() Тогда
					Значение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;

		// Если не нашли и по коду, то тут надо что то решать :) 
		Если Значение = Неопределено И СоздаватьЭлементыСправочников = Истина Тогда
			Если Менеджер = Справочники.Номенклатура 
				И НЕ ПустаяСтрока(ЗначениеРеквизита) Тогда
				//для номенклатуры находим по имени или создаём группу
				Значение = Менеджер.НайтиПоНаименованию(ЗначениеРеквизита,Истина,Менеджер.ПустаяСсылка());
				Если Значение = Менеджер.ПустаяСсылка() Тогда
					Группа = Менеджер.СоздатьГруппу();
					Группа.Наименование = ЗначениеРеквизита;
					Группа.Записать();
					Значение = Группа.Ссылка;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// если и после этого не создали, то ругаемся 
	Если Значение = Неопределено Тогда
		Если НЕ ПустаяСтрока(ЗначениеРеквизита) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось получить значение %1 по типу %2!';uk='Не вдалося одержати значення %1 по типу %2!'"), ЗначениеРеквизита, ТипРеквизита));
		КонецЕсли;
		Возврат ЗначениеРеквизита;
	Иначе
		Возврат Значение;
	КонецЕсли;
КонецФункции // ()
 
// Формирует значение реквизита по его типу
// Если для реквизита есть менеджер в ТаблицаТипов то берем оттуда,
// иначе берем тип из Параметр,
// иначе возвращаем само ЗначениеРеквизита
//
Функция СформироватьЗначение(ТаблицаТипов, ИмяРеквизита, ЗначениеРеквизита, ТипСтрокой, СоздаватьЭлементыСправочников = Ложь)
	
 	ТекущаяСтрока = ТаблицаТипов.Найти(ИмяРеквизита,"Реквизит");
	Если ТекущаяСтрока.Менеджер <> Неопределено Тогда
		Возврат СформированиеЗначениеСсылочногоТипа(ТекущаяСтрока.Тип, ЗначениеРеквизита, СоздаватьЭлементыСправочников)
	Иначе
		Если ТекущаяСтрока.Тип = Тип("Булево") Тогда
			Если ВРег(ЗначениеРеквизита) = "ИСТИНА" 
			 ИЛИ ВРег(ЗначениеРеквизита) = "ІСТИНА" 
			 ИЛИ ВРег(ЗначениеРеквизита) = "TRUE" Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;	
		ИначеЕсли Найти(ЗначениеРеквизита,"%Значение%") <> 0 Тогда
			Выражение = СтрЗаменить(ЗначениеРеквизита,"%Значение%","Значение = ");
			Значение = Неопределено;
			Выполнить(Выражение);
			Возврат Значение;			
        //Менеджера нет, посмотрим что в параметре ТипСтрокой
		ИначеЕсли НЕ ЗначениеЗаполнено(ТипСтрокой) Тогда
			//В параметре ничего нет, значит мы тут ничем не поможем
			Возврат ЗначениеРеквизита;
		Иначе
			//В параметре указан конкретный тип
			Возврат СформированиеЗначениеСсылочногоТипа(Тип(ТипСтрокой), ЗначениеРеквизита, СоздаватьЭлементыСправочников)
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	


Функция СуществуетПредопределенныйЭлемент(ПолноеИмяОбъекта, ИмяПредопределенного)

	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСправочника.ИмяПредопределенныхДанных
	|ИЗ
	|	"+ПолноеИмяОбъекта+" КАК ТаблицаСправочника
	|ГДЕ
	|	ТаблицаСправочника.Предопределенный = ИСТИНА
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтуктураПоиска = Новый Структура("ИмяПредопределенныхДанных", ИмяПредопределенного);
	Если Выборка.НайтиСледующий(СтуктураПоиска) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции // СуществуетПредопределенныйЭлемент(()

Функция ПолучитьПредопределенный(ТипРеквизита, Менеджер, ИмяПредопределенного)
	
	
	Если ПустаяСтрока(ИмяПредопределенного) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипРеквизита);
	Если Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
		// Это перечисление
		ЗначениеПеречисления = МетаданныеОбъекта.ЗначенияПеречисления.Найти(ИмяПредопределенного);
		Если НЕ ЗначениеПеречисления = Неопределено Тогда
			Результат = Менеджер[ИмяПредопределенного];
		КонецЕсли;
	Иначе
		ПервыйСимвол = Лев(ИмяПредопределенного,1);
		Если Нрег(ПервыйСимвол) = Врег(ПервыйСимвол) Тогда
			// если первый символ одинаков в верхнем и нижнем регистре
			// , то это не буква, и это не имя предопределенного, а код
			// прекращаем поиск
			Возврат Неопределено;
		КонецЕсли; 
		ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
		
		Если СуществуетПредопределенныйЭлемент(ПолноеИмяОбъекта, ИмяПредопределенного) Тогда
			// есть такой предопределенный, можно получать
			Результат = Менеджер[ИмяПредопределенного];
		Иначе
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден предопределённый элемент "+ИмяПредопределенного+" для "+ПолноеИмяОбъекта);
			Результат = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	//Если Результат = Неопределено Тогда
	//	ОбщегоНазначения.СообщитьСлужебнуюИнформацию("Не найден предопределенный элемент "+ИмяПредопределенного+" для "+Менеджер);
	//КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция КодЭлементаУникален(ИмяОбъекта, Код, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСправочника.Ссылка
	|ИЗ
	|	"+ИмяОбъекта+" КАК ТаблицаСправочника
	|ГДЕ
	|	ТаблицаСправочника.Код = &Код
	|	И ТаблицаСправочника.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Код",Код);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	

КонецФункции

Функция СуществуетЗаписьРегистраСведений(ИмяОбъекта, СтруктураИзмерений)
	
	Запрос = Новый Запрос;
	
	ЭтоПервый = Истина;
	Для каждого ЭлементСтруктуры Из СтруктураИзмерений Цикл
		Если ЭтоПервый Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаРС."+ЭлементСтруктуры.Ключ+"
			|ИЗ
			|	РегистрСведений."+ИмяОбъекта+" КАК ТаблицаРС  
			|ГДЕ
			|	";
		Иначе
			Запрос.Текст = Запрос.Текст + " И ";
		КонецЕсли;
		ЭтоПервый = Ложь;
		Запрос.Текст = Запрос.Текст + "ТаблицаРС."+ЭлементСтруктуры.Ключ+" = &"+ЭлементСтруктуры.Ключ + "
						|";
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ,ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Преобразовывает из формата "ДД.ММ.ГГГГ [ЧЧ:мм:сс]" в дату, не зависимо от настроек формата
Функция ПолучитьДатуПоСтроке(Знач ДатаСтрокой, ИмяОбъекта, ИмяПоля)
	
	ДатаСтрокой = СокрЛП(ДатаСтрокой);
	Если ПустаяСтрока(ДатаСтрокой) Тогда
		Возврат '00010101';
	ИначеЕсли Найти(ДатаСтрокой,":") <> 0 Тогда
		// есть время
		Если СтрДлина(ДатаСтрокой)<>19 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при заполнении объекта %1! При заполнении поля %2 не удалось преобразовать ""%3"" к дате!';uk='Помилка при заповненні об''єкта %1! При заповненні поля %2 не вдалося перетворити ""%3"" до дати!'"), ИмяОбъекта, ИмяПоля, ДатаСтрокой));
			Возврат '00010101';
		Иначе
			Возврат Дата(Число(Сред(ДатаСтрокой,7,4)), Число(Сред(ДатаСтрокой,4,2)), Число(Сред(ДатаСтрокой,1,2)), Число(Сред(ДатаСтрокой,12,2)), Число(Сред(ДатаСтрокой,15,2)), Число(Сред(ДатаСтрокой,18,2)));
		КонецЕсли; 
	Иначе
		Если СтрДлина(ДатаСтрокой)<>10 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при заполнении объекта %1! При заполнении поля %2 не удалось преобразовать ""%3"" к дате!';uk='Помилка при заповненні об''єкта %1! При заповненні поля %2 не вдалося перетворити ""%3"" до дати!'"), ИмяОбъекта, ИмяПоля, ДатаСтрокой));
			Возврат '00010101';
		Иначе
			Возврат Дата(Число(Сред(ДатаСтрокой,7,4)), Число(Сред(ДатаСтрокой,4,2)), Число(Сред(ДатаСтрокой,1,2)));
		КонецЕсли; 
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияОбъектов

// Выполняет начальное заполнение справочника
Процедура ЗаполнитьСправочник(ИмяОбъекта, ЗаполнятьПредопределенные = Истина, ЗаполнятьНеПредопределенные = Ложь, ЗаполнениеСинонимовОбъектов = Ложь)
	
	МетаданныеОбъекта = Метаданные.Справочники.Найти(ИмяОбъекта);
	Если МетаданныеОбъекта = Неопределено Тогда
		// нет такого справочника
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаполнятьПредопределенные И НЕ ЗаполнятьНеПредопределенные Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеЗаполнения(НСтр("ru='Заполняется справочник ';uk='Заповнюється довідник '")+МетаданныеОбъекта.Синоним);
	
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеОбъекта.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
	
	МакетXML = Справочники[ИмяОбъекта].ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ДанныеМакета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML);
	ТаблицаДанныхНачальногоЗаполнения = ДанныеМакета.Данные;
	ЗаполнениеТолькоСинонимов = ДанныеМакета.НастройкиЗаполнения.Свойство("ЗаполнениеТолькоСинонимов");
		
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 
	ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	ТаблицаРеквизитов.Колонки.Добавить("ЕстьОписаниеТипаДляСтроки"); // Используется когда колонка "Тип" не возможно заполненить однозначно по метаданным
	
	ЕстьДанныеГруппа = Ложь;
	
	// Формируем таблицу типов реквизитов
	Для Каждого Колонка Из ТаблицаДанныхНачальногоЗаполнения.Колонки Цикл
		
		ИмяРеквизита = Колонка.Имя;
		
		Если ИмяРеквизита = "Родитель" ИЛИ ИмяРеквизита = "ЭтоГруппа" Тогда
			ЕстьДанныеГруппа = Истина;
			НоваяСтрока = ТаблицаРеквизитов.Добавить();
			НоваяСтрока.Реквизит = ИмяРеквизита;
			НоваяСтрока.Тип 	 = ?(ИмяРеквизита = "ЭтоГруппа", Тип("Булево"), Тип("СправочникСсылка."+ ИмяОбъекта));
			НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу(НоваяСтрока.Тип);
			НоваяСтрока.ЕстьОписаниеТипаДляСтроки = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "ИмяПредопределенного" 
		 ИЛИ ИмяРеквизита = "Наименование" ИЛИ ИмяРеквизита = "Код"
		 ИЛИ Прав(ИмяРеквизита, СтрДлина("_Тип"))="_Тип" Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
		
		Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
			МетаданныеРеквизита = МетаданныеОбъекта.ТабличныеЧасти.Способы.Реквизиты.Найти(ИмяРеквизита);
		КонецЕсли;
		
		Если МетаданныеРеквизита = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при заполнении объекта %1! Не найден рекизит %2.
|Объект не заполнен!'
|;uk='Помилка при заповненні об''єкта %1! Не знайдений реквізит %2.
|Об''єкт не заповнений!'"), ИмяОбъекта, ИмяРеквизита));
			Возврат;
		КонецЕсли;
		
		// Возможно это указание реквизита вместе с его типом, описывается в атрибуте "ColumnTitles" узла "Items"
		Если ЗначениеЗаполнено(Колонка.Заголовок) Тогда
			ТипРеквизита = Тип(Колонка.Заголовок);
		Иначе
			ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
			ТипРеквизита  = Неопределено;
			Если ТипыРеквизита.Количество() = 1 Тогда
				ТипРеквизита = ТипыРеквизита[0];
			КонецЕсли;
		КонецЕсли;		
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит = ИмяРеквизита;
		НоваяСтрока.Тип 	 = ТипРеквизита;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу(ТипРеквизита);
		НоваяСтрока.ЕстьОписаниеТипаДляСтроки = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти(ИмяРеквизита+"_Тип") <> Неопределено);
		
	КонецЦикла;	
		
	ЗаполняемыйСправочник = Справочники[ИмяОбъекта];
	
	ЕстьДанныеКода         = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Код") <> Неопределено);
	ЕстьДанныеНаименования = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Наименование") <> Неопределено);
	ДляКодаНуженПрефиксИБ = Ложь;
	ТипыСправочниковПодпискаПрефиксИБ = Метаданные.ПодпискиНаСобытия.УстановитьПрефиксИнформационнойБазыКодуСправочника.Источник.Типы();
	Если НЕ ТипыСправочниковПодпискаПрефиксИБ.Найти(Тип("СправочникСсылка."+ИмяОбъекта)) = Неопределено Тогда 
		// входит в подписку
		ДляКодаНуженПрефиксИБ = Истина;
	КонецЕсли;
	
	//Заполняем справочник
	Для Каждого СтрокаДанныхНачальногоЗаполнения Из ТаблицаДанныхНачальногоЗаполнения Цикл
		
		//Предопределенные реквизиты
		ИмяПредопределенного = СтрокаДанныхНачальногоЗаполнения.ИмяПредопределенного;
		
		Если ПустаяСтрока(ИмяПредопределенного) Тогда
			
			Если НЕ ЗаполнятьНеПредопределенные Тогда
				Продолжить;
			КонецЕсли;
			
			// Это создание не предопределенных элементов (например ВидыДоговоровПоГК)	
			Если ЕстьДанныеНаименования Тогда
				СсылкаНаЭлемент = Справочники[ИмяОбъекта].НайтиПоНаименованию(СтрокаДанныхНачальногоЗаполнения.Наименование, Истина);
				Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
					ТекущийОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
				Иначе
					Если ЕстьДанныеГруппа И СтрокаДанныхНачальногоЗаполнения.ЭтоГруппа = "Истина" Тогда
						ТекущийОбъект = Справочники[ИмяОбъекта].СоздатьГруппу();
					Иначе 
						ТекущийОбъект = Справочники[ИмяОбъекта].СоздатьЭлемент();
					КонецЕсли;					
				КонецЕсли;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не указано правило поиска не предопределённых элементов справочника %1';uk='Не вказано правило пошуку не наперед визначених елементів довідника %1'"), ИмяОбъекта));
				Возврат;
			КонецЕсли;
		Иначе
			Если НЕ ЗаполнятьПредопределенные Тогда
				Продолжить;
			КонецЕсли;
			
			СсылкаНаЭлемент = ПолучитьПредопределенный(Тип("СправочникСсылка."+ИмяОбъекта), ЗаполняемыйСправочник, ИмяПредопределенного);
			Если СсылкаНаЭлемент = Неопределено Тогда
				Если ИмяОбъекта = "НаборыДополнительныхРеквизитовИСведений" 
					ИЛИ ИмяОбъекта = "ПрофилиГруппДоступа" Тогда
					Продолжить;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден предопределённый элемент %1 для справочника %2';uk='Не знайдений напередвизначений елемент %1 для довідника %2'"), ИмяПредопределенного, ИмяОбъекта));
				Возврат;
			КонецЕсли;
			ТекущийОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
		КонецЕсли;

		//Если ЕстьДанныеГруппа И ЗначениеЗаполнено(СтрокаДанныхНачальногоЗаполнения.Родитель) Тогда
		//	НовоеЗначение = СформироватьЗначение(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, "");
		//КонецЕсли;					
		Если (МетаданныеОбъекта.ДлинаНаименования > 0) И ЕстьДанныеНаименования Тогда
			Наименование = СтрокаДанныхНачальногоЗаполнения.Наименование;			
			Если НЕ ПустаяСтрока(Наименование) И (Наименование <> ТекущийОбъект.Наименование) Тогда
				ТекущийОбъект.Наименование = Наименование;
			КонецЕсли;
		КонецЕсли;
		
		//В режиме "ЗаполнениеСинонимовОбъектов" ничего больше не делаем
		Если НЕ ЗаполнениеСинонимовОбъектов Тогда
			
			Если (МетаданныеОбъекта.ДлинаКода > 0) И ЕстьДанныеКода Тогда
				Код = СтрокаДанныхНачальногоЗаполнения.Код;
				Если НЕ ПустаяСтрока(Код) И (Код <> ТекущийОбъект.Код) Тогда
					ТекущийОбъект.Код = Код;
				Конецесли;
			Конецесли;
			
			
			Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
				СправочникОбъект = ТекущийОбъект;
				Если ТекущийОбъект.Способы.Количество() = 0 Тогда
					ТекущийОбъект = ТекущийОбъект.Способы.Добавить();	
				Иначе
					ТекущийОбъект = ТекущийОбъект.Способы[0];	
				КонецЕсли;
				МетаданныеРеквизита = МетаданныеОбъекта.ТабличныеЧасти.Способы.Реквизиты.Найти(ИмяРеквизита);
			КонецЕсли;
			
			//Дополнительные реквизиты
			Для Каждого ОписаниеКолонки Из ТаблицаРеквизитов Цикл
				
				ИмяРеквизита = ОписаниеКолонки.Реквизит;
				ЗначениеРеквизита = СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита];
				ТипСтрокой = ?(ОписаниеКолонки.ЕстьОписаниеТипаДляСтроки, СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита+"_Тип"], "");
				
				НовоеЗначение = СформироватьЗначение(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, ТипСтрокой);
				
				Если НовоеЗначение <> ТекущийОбъект[ИмяРеквизита] Тогда
					
					Если ЗначениеЗаполнено(НовоеЗначение)
						ИЛИ ЗначениеЗаполнено(ТекущийОбъект[ИмяРеквизита]) Тогда
						
						Если НЕ ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
							Если МетаданныеОбъекта.Иерархический Тогда 
								Если ИмяРеквизита = "ЭтоГруппа" Тогда
									Продолжить;
								ИначеЕсли ИмяРеквизита = "Родитель" Тогда
									Если НЕ ПустаяСтрока(ИмяПредопределенного) Тогда
										Продолжить;
									Иначе
										Использование = ""
									КонецЕсли;
								Иначе
									МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
									Использование = Строка(МетаданныеРеквизита.Использование);
								КонецЕсли;
								Если (ТекущийОбъект.ЭтоГруппа И Использование = "ДляЭлемента") 
									ИЛИ (Не ТекущийОбъект.ЭтоГруппа И Использование = "ДляГруппы" ) Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						ТекущийОбъект[ИмяРеквизита] = НовоеЗначение;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			Если ИмяОбъекта = "СпособыОтраженияРасходовПоАмортизации" Тогда
				ТекущийОбъект = СправочникОбъект;
			КонецЕсли;
			
		КонецЕсли; 
		
		
		Если ТекущийОбъект.Модифицированность() Тогда
			
			// проверим, нет ли случайно второго элемента с таким же кодом, 
			// чтобы не было лишних проблем при записи
			Если МетаданныеОбъекта.ДлинаКода > 0 И МетаданныеОбъекта.КонтрольУникальности = Истина Тогда
				Если НЕ КодЭлементаУникален("Справочник."+ИмяОбъекта,ТекущийОбъект.Код,СсылкаНаЭлемент) Тогда
					ПрефиксИБ = "";
					Если ДляКодаНуженПрефиксИБ Тогда
						ПерепрефиксацияОбъектов.ПриОпределенииПрефиксаИнформационнойБазы(ПрефиксИБ);
						ПрефиксИБ = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксИБ, 2, "0", "Слева") + "-";
					КонецЕсли;
					ТекущийОбъект.УстановитьНовыйКод(ПрефиксИБ);
				КонецЕсли;
				Если НЕ КодЭлементаУникален("Справочник."+ИмяОбъекта,ТекущийОбъект.Код,СсылкаНаЭлемент) Тогда
					// все равно есть лишние проблемы, не будем записывать
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать объект справочника %1: %2, по причине того, что сгенерированный код был не уникален!';uk='Не вдалося записати об''єкт довідника %1: %2, через те, що згенерований код був не унікальний!'"), ИмяОбъекта, ТекущийОбъект));
					Продолжить;
				КонецЕсли;
			Конецесли;
			Попытка
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеСинонимовОбъектов", ЗаполнениеСинонимовОбъектов ИЛИ ЗаполнениеТолькоСинонимов);
				Если ЗаполнениеСинонимовОбъектов ИЛИ ЗаполнениеТолькоСинонимов Тогда
					ТекущийОбъект.ОбменДанными.Загрузка = Истина;
				КонецЕсли; 
				ТекущийОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать объект справочника %1: %2!';uk='Не вдалося записати об''єкт довідника %1: %2!'"), ИмяОбъекта, ТекущийОбъект));
			КонецПопытки;	
		КонецЕсли;	
				
    КонецЦикла;
 	
КонецПроцедуры

// Выполняет начальное заполнение регистра сведений
Процедура ЗаполнитьРегистрСведений(ИмяОбъекта, ОчиститьРегистрыСведенийПередЗаписью)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.Найти(ИмяОбъекта);
	
	Если МетаданныеОбъекта = Неопределено Тогда
		// нет такого регистра сведений
		Возврат;
	КонецЕсли;
	
	СостояниеЗаполнения(НСтр("ru='Заполняется регистр сведений ';uk='Заповнюється регістр відомостей '")+МетаданныеОбъекта.Синоним);
	
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеОбъекта.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
	
	МакетXML = РегистрыСведений[ИмяОбъекта].ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	ДанныеМакета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML);
	
	НастройкиЗаполнения               = ДанныеМакета.НастройкиЗаполнения;
	ТаблицаДанныхНачальногоЗаполнения = ДанныеМакета.Данные;
		
	// Настройки по умолчанию
	ЗамещатьЗаписи 					= Ложь;
	НеЗаполнятьПоУмолчанию 			= Ложь;
	СоздаватьЭлементыСправочников 	= Ложь;
	
	// Возможно переопределены в самом макете
	Если НастройкиЗаполнения.Свойство("ЗамещатьЗаписи") Тогда
		ЗамещатьЗаписи = Истина;
	КонецЕсли;
	Если НастройкиЗаполнения.Свойство("НеЗаполнятьПоУмолчанию") Тогда
		НеЗаполнятьПоУмолчанию = Истина;
	КонецЕсли;
	Если НастройкиЗаполнения.Свойство("СоздаватьЭлементыСправочников") Тогда
		СоздаватьЭлементыСправочников = Истина;
	КонецЕсли;
	
	// Признак ОчиститьРегистрыСведенийПередЗаписью устанавливается только при ручном вызове функции из формы этой обработки
	Если Не ОчиститьРегистрыСведенийПередЗаписью И НеЗаполнятьПоУмолчанию Тогда
		// При общем заполнении таки объекты нужно пропускать
		Возврат;
	КонецЕсли; 
	
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("КлассРеквизита"); // Строка: "Измерение", "Ресурс", "Реквизит"
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 
    ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	ТаблицаРеквизитов.Колонки.Добавить("ЕстьОписаниеТипаДляСтроки"); // Используется когда колонка "Тип" не возможно заполненить однозначно по метаданным
	
	//Формируем таблицу типов реквизитов
	Для Каждого Колонка Из ТаблицаДанныхНачальногоЗаполнения.Колонки Цикл
		
		ИмяРеквизита = Колонка.Имя;
		
		Если ИмяРеквизита = "Период"
		 ИЛИ Прав(ИмяРеквизита, СтрДлина("_Тип"))="_Тип" Тогда
			Продолжить;
		КонецЕсли;
		
		КлассРеквизита = Неопределено;
		
		МетаданныеРеквизита = МетаданныеОбъекта.Измерения.Найти(ИмяРеквизита);		
		Если МетаданныеРеквизита <> Неопределено Тогда
			КлассРеквизита = "Измерение";
		КонецЕсли;
		Если КлассРеквизита = Неопределено Тогда
			МетаданныеРеквизита = МетаданныеОбъекта.Ресурсы.Найти(ИмяРеквизита);		
			Если МетаданныеРеквизита <> Неопределено Тогда
				КлассРеквизита = "Ресурс";
			КонецЕсли;			
		КонецЕсли;
		Если КлассРеквизита = Неопределено Тогда
			МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);		
			Если МетаданныеРеквизита <> Неопределено Тогда
				КлассРеквизита = "Реквизит";
			КонецЕсли;
		КонецЕсли;

		Если КлассРеквизита = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при заполнении объекта %1! Не найдено поле %2.
|Объект не заполнен!'
|;uk='Помилка при заповненні об''єкта %1! Не знайдено поле %2.
|Об''єкт не заповнений!'"), ИмяОбъекта, ИмяРеквизита));
			Возврат;
		КонецЕсли;
		
		// Возможно это указание реквизита вместе с его типом, описывается в атрибуте "ColumnTitles" узла "Items"
		Если ЗначениеЗаполнено(Колонка.Заголовок) Тогда
			ТипРеквизита = Тип(Колонка.Заголовок);
		Иначе
			ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
			ТипРеквизита  = Неопределено;
			Если ТипыРеквизита.Количество() = 1 Тогда
				ТипРеквизита = ТипыРеквизита[0];
			КонецЕсли;
		КонецЕсли;		
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.КлассРеквизита = КлассРеквизита;
		НоваяСтрока.Реквизит       = ИмяРеквизита;
		НоваяСтрока.Тип 	       = ТипРеквизита;
		НоваяСтрока.Менеджер       = ПолучитьМенеджерПоТипу(ТипРеквизита);
		НоваяСтрока.ЕстьОписаниеТипаДляСтроки = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти(ИмяРеквизита+"_Тип") <> Неопределено);
		
	КонецЦикла;	
	
	Если ОчиститьРегистрыСведенийПередЗаписью Тогда
		РегистрыСведений[ИмяОбъекта].СоздатьНаборЗаписей().Записать();
	КонецЕсли;
	
	РегистрПериодический = НЕ МетаданныеОбъекта.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический; 
	ЕстьДанныеОПериоде = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Период") <> Неопределено);
	
	Для Каждого СтрокаДанныхНачальногоЗаполнения Из ТаблицаДанныхНачальногоЗаполнения Цикл
		
		ПараметрыЗаписи = "";
		СтруктураИзмерений = Новый Структура;
		
		ТекущаяЗапись = РегистрыСведений[ИмяОбъекта].СоздатьМенеджерЗаписи();
		
		Если РегистрПериодический И ЕстьДанныеОПериоде Тогда
			Период = ПолучитьДатуПоСтроке(СтрокаДанныхНачальногоЗаполнения.Период, ИмяОбъекта, "Период");
			ТекущаяЗапись["Период"] = Период;
			СтруктураИзмерений.Вставить("Период", ТекущаяЗапись["Период"]);
			ПараметрыЗаписи = ПараметрыЗаписи+Период;
		КонецЕсли;
		
		Для Каждого ОписаниеКолонки Из ТаблицаРеквизитов Цикл
			
			ИмяРеквизита = ОписаниеКолонки.Реквизит;
			ЗначениеРеквизита = СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита];
			ТипСтрокой = ?(ОписаниеКолонки.ЕстьОписаниеТипаДляСтроки, СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита+"_Тип"], "");
			
			ТекущаяЗапись[ИмяРеквизита] = СформироватьЗначение(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, ТипСтрокой, СоздаватьЭлементыСправочников);
			Если ОписаниеКолонки.КлассРеквизита = "Измерение" Тогда				
				СтруктураИзмерений.Вставить(ИмяРеквизита, ТекущаяЗапись[ИмяРеквизита]);
			КонецЕсли;
			
			ПараметрыЗаписи = ПараметрыЗаписи+" "+Строка(ТекущаяЗапись[ИмяРеквизита]);
			
		КонецЦикла;
		
		// проверим, есть ли запись с такими измерениями
		Если Не ЗамещатьЗаписи И СуществуетЗаписьРегистраСведений(ИмяОбъекта, СтруктураИзмерений) Тогда
			//запись с такими измерениями есть, перезаполнять не требуется
			Продолжить;
		КонецЕсли;
				
		Попытка
			ТекущаяЗапись.Записать(ЗамещатьЗаписи);
		Исключение
			// Сообщаем только, если не удалось создать запись при "замещении"
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В регистре сведений %1 не удалось создать запись с параметрами %2';uk='В регістрі відомостей %1 не вдалося створити запис із параметрами %2'"), ИмяОбъекта, ПараметрыЗаписи));
			Продолжить;
		КонецПопытки;	
				
    КонецЦикла;
	
КонецПроцедуры	

	
// Выполняет начальное заполнение плана видов характеристик
//
Процедура ЗаполнитьПланВидовХарактеристик(ИмяОбъекта,ЗаполнениеСинонимовОбъектов = Ложь)
	
	МетаданныеОбъекта = Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта);
	Если МетаданныеОбъекта = Неопределено Тогда
		// нет такого справочника
		Возврат;
	КонецЕсли;
	
	ТипПВХ = Тип("ПланВидовХарактеристикСсылка."+МетаданныеОбъекта.Имя);
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеОбъекта.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
		
	СостояниеЗаполнения(НСтр("ru='Заполняется план видов характеристик ';uk='Заповнюється план видів характеристик '")+МетаданныеОбъекта.Синоним);
	
	МакетXML = ПланыВидовХарактеристик[ИмяОбъекта].ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ДанныеМакета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML);
	ТаблицаДанныхНачальногоЗаполнения = ДанныеМакета.Данные;
	ЗаполнениеТолькоСинонимов = ДанныеМакета.НастройкиЗаполнения.Свойство("ЗаполнениеТолькоСинонимов");
		
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 
	ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	ТаблицаРеквизитов.Колонки.Добавить("ЕстьОписаниеТипаДляСтроки"); // Используется когда колонка "Тип" не возможно заполненить однозначно по метаданным
	
	ЕстьДанныеГруппа = Ложь;
	
	//Формируем таблицу типов реквизитов
	Для Каждого Колонка Из ТаблицаДанныхНачальногоЗаполнения.Колонки Цикл
		
		ИмяРеквизита = Колонка.Имя;
		
		Если ИмяРеквизита = "Родитель" ИЛИ ИмяРеквизита = "ЭтоГруппа" Тогда
			ЕстьДанныеГруппа = Истина;
			НоваяСтрока = ТаблицаРеквизитов.Добавить();
			НоваяСтрока.Реквизит = ИмяРеквизита;
			НоваяСтрока.Тип 	 = ?(ИмяРеквизита = "ЭтоГруппа", Тип("Булево"), ТипПВХ);
			НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу(НоваяСтрока.Тип);
			НоваяСтрока.ЕстьОписаниеТипаДляСтроки = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "ИмяПредопределенного" 
		 ИЛИ ИмяРеквизита = "Наименование" ИЛИ ИмяРеквизита = "Код"
		 ИЛИ Прав(ИмяРеквизита, СтрДлина("_Тип"))="_Тип" Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
		
		Если МетаданныеРеквизита = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при заполнении объекта %1! Не найден рекизит %2.
|Объект не заполнен!'
|;uk='Помилка при заповненні об''єкта %1! Не знайдений реквізит %2.
|Об''єкт не заповнений!'"), ИмяОбъекта, ИмяРеквизита));
			Возврат;
		КонецЕсли;
		
		// Возможно это указание реквизита вместе с его типом, описывается в атрибуте "ColumnTitles" узла "Items"
		Если ЗначениеЗаполнено(Колонка.Заголовок) Тогда
			ТипРеквизита = Тип(Колонка.Заголовок);
		Иначе
			ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
			ТипРеквизита  = Неопределено;
			Если ТипыРеквизита.Количество() = 1 Тогда
				ТипРеквизита = ТипыРеквизита[0];
			КонецЕсли;
		КонецЕсли;		
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит = ИмяРеквизита;
		НоваяСтрока.Тип 	 = ТипРеквизита;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу(ТипРеквизита);
		НоваяСтрока.ЕстьОписаниеТипаДляСтроки = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти(ИмяРеквизита+"_Тип") <> Неопределено);
		
	КонецЦикла;	
	
	ЗаполняемыйПВХ = ПланыВидовХарактеристик[ИмяОбъекта];

	ЕстьДанныеКода         = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Код") <> Неопределено);
	ЕстьДанныеНаименования = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Наименование") <> Неопределено);
	
	//Заполняем справочник
	Для Каждого СтрокаДанныхНачальногоЗаполнения Из ТаблицаДанныхНачальногоЗаполнения Цикл
		
		//Предопределенные реквизиты
		ИмяПредопределенного = СтрокаДанныхНачальногоЗаполнения.ИмяПредопределенного;
		
		Если ПустаяСтрока(ИмяПредопределенного) Тогда
			
			Продолжить;
		Иначе
			
			СсылкаНаЭлемент = ПолучитьПредопределенный(ТипПВХ, ЗаполняемыйПВХ, ИмяПредопределенного);
			Если СсылкаНаЭлемент = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден предопределённый элемент %1 для плана видов характеристик %2';uk='Не знайдений наперед визначений елемент %1 для плану видів характеристик %2'"), ИмяПредопределенного, ИмяОбъекта));
				Возврат;
			КонецЕсли;
			ТекущийОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
		КонецЕсли;

		//Если ЕстьДанныеГруппа И ЗначениеЗаполнено(СтрокаДанныхНачальногоЗаполнения.Родитель) Тогда
		//	НовоеЗначение = СформироватьЗначение(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, "");
		//КонецЕсли;					
		
		Если (МетаданныеОбъекта.ДлинаНаименования > 0) И ЕстьДанныеНаименования Тогда
			Наименование = СтрокаДанныхНачальногоЗаполнения.Наименование;			
			Если НЕ ПустаяСтрока(Наименование) И (Наименование <> ТекущийОбъект.Наименование) Тогда
				ТекущийОбъект.Наименование = Наименование;
			КонецЕсли;
		КонецЕсли;
		
		//В режиме "ЗаполнениеСинонимовОбъектов" ничего больше не делаем
		Если НЕ ЗаполнениеСинонимовОбъектов Тогда
			
			Если (МетаданныеОбъекта.ДлинаКода > 0) И ЕстьДанныеКода Тогда
				Код = СтрокаДанныхНачальногоЗаполнения.Код;
				Если НЕ ПустаяСтрока(Код) И (Код <> ТекущийОбъект.Код) Тогда
					ТекущийОбъект.Код = Код;
				Конецесли;
			Конецесли;
			
			
			//Дополнительные реквизиты
			Для Каждого ОписаниеКолонки Из ТаблицаРеквизитов Цикл
				
				ИмяРеквизита = ОписаниеКолонки.Реквизит;
				ЗначениеРеквизита = СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита];
				ТипСтрокой = ?(ОписаниеКолонки.ЕстьОписаниеТипаДляСтроки, СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита+"_Тип"], "");
				
				НовоеЗначение = СформироватьЗначение(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, ТипСтрокой);
				
				Если НовоеЗначение <> ТекущийОбъект[ИмяРеквизита] Тогда
					
					Если ЗначениеЗаполнено(НовоеЗначение)
						ИЛИ ЗначениеЗаполнено(ТекущийОбъект[ИмяРеквизита]) Тогда
						
						Если МетаданныеОбъекта.Иерархический Тогда 
							Если ИмяРеквизита = "ЭтоГруппа" Тогда
								Продолжить;
							ИначеЕсли ИмяРеквизита = "Родитель" Тогда
								Если НЕ ПустаяСтрока(ИмяПредопределенного) Тогда
									Продолжить;
								Иначе
									Использование = ""
								КонецЕсли;
							Иначе
								МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
								Использование = Строка(МетаданныеРеквизита.Использование);
							КонецЕсли;
							Если (ТекущийОбъект.ЭтоГруппа И Использование = "ДляЭлемента") 
								ИЛИ (Не ТекущийОбъект.ЭтоГруппа И Использование = "ДляГруппы" ) Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						ТекущийОбъект[ИмяРеквизита] = НовоеЗначение;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли; 
		
		Если ТекущийОбъект.Модифицированность() Тогда
			
			// проверим, нет ли случайно второго элемента с таким же кодом, 
			// чтобы не было лишних проблем при записи
			Если МетаданныеОбъекта.ДлинаКода > 0 И МетаданныеОбъекта.КонтрольУникальности = Истина Тогда
				Если НЕ КодЭлементаУникален("ПланВидовХарактеристик."+ИмяОбъекта,ТекущийОбъект.Код,СсылкаНаЭлемент) Тогда
					ТекущийОбъект.УстановитьНовыйКод();
				КонецЕсли;
				Если НЕ КодЭлементаУникален("ПланВидовХарактеристик."+ИмяОбъекта,ТекущийОбъект.Код,СсылкаНаЭлемент) Тогда
					// всеравно есть лишние проблемы, не будем записывать
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать объект справочника %1: %2, по причине того, что сгенерированный код был не уникален!';uk='Не вдалося записати об''єкт довідника %1: %2, через те, що згенерований код був не унікальний!'"), ИмяОбъекта, ТекущийОбъект));
					Продолжить;
				КонецЕсли;
			Конецесли;
			Попытка
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеСинонимовОбъектов", ЗаполнениеСинонимовОбъектов ИЛИ ЗаполнениеТолькоСинонимов);
				Если ЗаполнениеСинонимовОбъектов ИЛИ ЗаполнениеТолькоСинонимов Тогда
					ТекущийОбъект.ОбменДанными.Загрузка = Истина;
				КонецЕсли; 
				ТекущийОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать объект справочника %1: %2!';uk='Не вдалося записати об''єкт довідника %1: %2!'"), ИмяОбъекта, ТекущийОбъект));
			КонецПопытки;	
		КонецЕсли;	
				
	КонецЦикла;
	
КонецПроцедуры	

// Выполняет начальное заполнение плана счетов
//
Процедура ЗаполнитьПланСчетов(ИмяОбъекта,ЗаполнениеСинонимовОбъектов = Ложь)

	МетаданныеОбъекта = Метаданные.ПланыСчетов.Найти(ИмяОбъекта);
	Если МетаданныеОбъекта = Неопределено Тогда
		// нет такого плана счетов
		Возврат;
	КонецЕсли;

	ТипПС = Тип("ПланСчетовСсылка."+МетаданныеОбъекта.Имя);
	ИмяМакета = "НачальноеЗаполнение";

	ЕстьМакет = МетаданныеОбъекта.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;

	СостояниеЗаполнения(НСтр("ru='Заполняется план счетов ';uk='Заповнюється план рахунків '")+МетаданныеОбъекта.Синоним);
	
	МакетXML = ПланыСчетов[ИмяОбъекта].ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ДанныеМакета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML);
	ТаблицаДанныхНачальногоЗаполнения = ДанныеМакета.Данные;
	ЗаполнениеТолькоСинонимов = ДанныеМакета.НастройкиЗаполнения.Свойство("ЗаполнениеТолькоСинонимов");
		
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 
	ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	ТаблицаРеквизитов.Колонки.Добавить("ЕстьОписаниеТипаДляСтроки"); // Используется когда колонка "Тип" не возможно заполненить однозначно по метаданным
	
	ЕстьДанныеГруппа = Ложь;
	
	//Формируем таблицу типов реквизитов
	Для Каждого Колонка Из ТаблицаДанныхНачальногоЗаполнения.Колонки Цикл
		
		ИмяРеквизита = Колонка.Имя;
		
		Если ИмяРеквизита = "Родитель" ИЛИ ИмяРеквизита = "ЭтоГруппа" Тогда
			ЕстьДанныеГруппа = Истина;
			НоваяСтрока = ТаблицаРеквизитов.Добавить();
			НоваяСтрока.Реквизит = ИмяРеквизита;
			НоваяСтрока.Тип 	 = ?(ИмяРеквизита = "ЭтоГруппа", Тип("Булево"), ТипПС);
			НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу(НоваяСтрока.Тип);
			НоваяСтрока.ЕстьОписаниеТипаДляСтроки = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "ИмяПредопределенного" 
		 ИЛИ ИмяРеквизита = "Наименование" ИЛИ ИмяРеквизита = "Код"
		 ИЛИ Прав(ИмяРеквизита, СтрДлина("_Тип"))="_Тип" Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
		
		Если МетаданныеРеквизита = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при заполнении объекта %1! Не найден рекизит %2.
|Объект не заполнен!'
|;uk='Помилка при заповненні об''єкта %1! Не знайдений реквізит %2.
|Об''єкт не заповнений!'"), ИмяОбъекта, ИмяРеквизита));
			Возврат;
		КонецЕсли;
		
		// Возможно это указание реквизита вместе с его типом, описывается в атрибуте "ColumnTitles" узла "Items"
		Если ЗначениеЗаполнено(Колонка.Заголовок) Тогда
			ТипРеквизита = Тип(Колонка.Заголовок);
		Иначе
			ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
			ТипРеквизита  = Неопределено;
			Если ТипыРеквизита.Количество() = 1 Тогда
				ТипРеквизита = ТипыРеквизита[0];
			КонецЕсли;
		КонецЕсли;		
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит = ИмяРеквизита;
		НоваяСтрока.Тип 	 = ТипРеквизита;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу(ТипРеквизита);
		НоваяСтрока.ЕстьОписаниеТипаДляСтроки = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти(ИмяРеквизита+"_Тип") <> Неопределено);
		
	КонецЦикла;	
	
	ЗаполняемыйПС = ПланыСчетов[ИмяОбъекта];

	ЕстьДанныеКода         = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Код") <> Неопределено);
	ЕстьДанныеНаименования = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Наименование") <> Неопределено);
	
	//Заполняем справочник
	Для Каждого СтрокаДанныхНачальногоЗаполнения Из ТаблицаДанныхНачальногоЗаполнения Цикл
		
		//Предопределенные реквизиты
		ИмяПредопределенного = СтрокаДанныхНачальногоЗаполнения.ИмяПредопределенного;
		
		Если ПустаяСтрока(ИмяПредопределенного) Тогда
			
			Продолжить;
		Иначе
			
			СсылкаНаЭлемент = ПолучитьПредопределенный(ТипПС, ЗаполняемыйПС, ИмяПредопределенного);
			Если СсылкаНаЭлемент = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден предопределённый элемент %1 для плана счетов %2';uk='Не знайдений напередвизначений елемент %1 для плану рахунків %2'"), ИмяПредопределенного, ИмяОбъекта));
				Возврат;
			КонецЕсли;
			ТекущийОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
		КонецЕсли;

		//Если ЕстьДанныеГруппа И ЗначениеЗаполнено(СтрокаДанныхНачальногоЗаполнения.Родитель) Тогда
		//	НовоеЗначение = СформироватьЗначение(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, "");
		//КонецЕсли;					
		
		Если (МетаданныеОбъекта.ДлинаНаименования > 0) И ЕстьДанныеНаименования Тогда
			Наименование = СтрокаДанныхНачальногоЗаполнения.Наименование;			
			Если НЕ ПустаяСтрока(Наименование) И (Наименование <> ТекущийОбъект.Наименование) Тогда
				ТекущийОбъект.Наименование = Наименование;
			КонецЕсли;
		КонецЕсли;
		
		
		//В режиме "ЗаполнениеСинонимовОбъектов" ничего больше не делаем
		Если ЗаполнениеСинонимовОбъектов Тогда
			Если (МетаданныеОбъекта.ДлинаКода > 0) И ЕстьДанныеКода Тогда
				Код = СтрокаДанныхНачальногоЗаполнения.Код;
				Если НЕ ПустаяСтрока(Код) И (Код <> ТекущийОбъект.Код) Тогда
					ТекущийОбъект.Код = Код;
				Конецесли;
			Конецесли;
			
			
			//Дополнительные реквизиты
			Для Каждого ОписаниеКолонки Из ТаблицаРеквизитов Цикл
				
				ИмяРеквизита = ОписаниеКолонки.Реквизит;
				ЗначениеРеквизита = СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита];
				ТипСтрокой = ?(ОписаниеКолонки.ЕстьОписаниеТипаДляСтроки, СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита+"_Тип"], "");
				
				НовоеЗначение = СформироватьЗначение(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, ТипСтрокой);
				
				Если НовоеЗначение <> ТекущийОбъект[ИмяРеквизита] Тогда
					
					Если ЗначениеЗаполнено(НовоеЗначение)
						ИЛИ ЗначениеЗаполнено(ТекущийОбъект[ИмяРеквизита]) Тогда
						
						Если МетаданныеОбъекта.Иерархический Тогда 
							Если ИмяРеквизита = "ЭтоГруппа" Тогда
								Продолжить;
							ИначеЕсли ИмяРеквизита = "Родитель" Тогда
								Если НЕ ПустаяСтрока(ИмяПредопределенного) Тогда
									Продолжить;
								Иначе
									Использование = ""
								КонецЕсли;
							Иначе
								МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
								Использование = Строка(МетаданныеРеквизита.Использование);
							КонецЕсли;
							Если (ТекущийОбъект.ЭтоГруппа И Использование = "ДляЭлемента") 
								ИЛИ (Не ТекущийОбъект.ЭтоГруппа И Использование = "ДляГруппы" ) Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						ТекущийОбъект[ИмяРеквизита] = НовоеЗначение;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли; 
		
		Если ТекущийОбъект.Модифицированность() Тогда
			
			// проверим, нет ли случайно второго элемента с таким же кодом, 
			// чтобы не было лишних проблем при записи
			Если МетаданныеОбъекта.ДлинаКода > 0 И МетаданныеОбъекта.КонтрольУникальности = Истина Тогда
				Если НЕ КодЭлементаУникален("ПланСчетов."+ИмяОбъекта,ТекущийОбъект.Код,СсылкаНаЭлемент) Тогда
					// всеравно есть лишние проблемы, не будем записывать
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать объект плана счетов %1: %2, по причине того, что его код не уникален!';uk='Не вдалося записати об''єкт плану рахунків %1: %2, через те, що його код не унікальний!'"), ИмяОбъекта, ТекущийОбъект));
					Продолжить;
				КонецЕсли;
			Конецесли;
			Попытка
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеСинонимовОбъектов", ЗаполнениеСинонимовОбъектов ИЛИ ЗаполнениеТолькоСинонимов);
				Если ЗаполнениеСинонимовОбъектов ИЛИ ЗаполнениеТолькоСинонимов Тогда
					ТекущийОбъект.ОбменДанными.Загрузка = Истина;
				КонецЕсли; 
				ТекущийОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать объект плана счетов %1: %2!';uk='Не вдалося записати об''єкт плану рахунків %1: %2!'"), ИмяОбъекта, ТекущийОбъект));
			КонецПопытки;	
		КонецЕсли;	
				
    КонецЦикла;
 	
КонецПроцедуры

Процедура ЗаполнитьПланВидовРасчета(ИмяОбъекта,ЗаполнениеСинонимовОбъектов = Ложь)
	
	МетаданныеОбъекта = Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта);
	Если МетаданныеОбъекта = Неопределено Тогда
		// нет такого ПВР
		Возврат;
	КонецЕсли;
	
	СостояниеЗаполнения(НСтр("ru='Заполняется план видов расчета ';uk='Заповнюється план видів розрахунку '")+МетаданныеОбъекта.Синоним);
	
	ИмяМакета = "НачальноеЗаполнение";
	
	ЕстьМакет = МетаданныеОбъекта.Макеты.Найти(ИмяМакета);
	Если ЕстьМакет = Неопределено Тогда
		// нет такого макета
		Возврат;
	КонецЕсли;
	
	МакетXML = ПланыВидовРасчета[ИмяОбъекта].ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ДанныеМакета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетXML);
	ТаблицаДанныхНачальногоЗаполнения = ДанныеМакета.Данные;
	ЗаполнениеТолькоСинонимов = ДанныеМакета.НастройкиЗаполнения.Свойство("ЗаполнениеТолькоСинонимов");
		
	ТаблицаРеквизитов = Новый ("ТаблицаЗначений");
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("Тип"); 
	ТаблицаРеквизитов.Колонки.Добавить("Менеджер"); 
	ТаблицаРеквизитов.Колонки.Добавить("ЕстьОписаниеТипаДляСтроки"); // Используется когда колонка "Тип" не возможно заполненить однозначно по метаданным
	
	ИмяМакетаБВВ = "НачальноеЗаполнениеБВВ";
	ЕстьМакетБВВ = МетаданныеОбъекта.Макеты.Найти(ИмяМакета);
	Если ЕстьМакетБВВ <> Неопределено Тогда
		МакетБВВ = ПланыВидовРасчета[ИмяОбъекта].ПолучитьМакет(ИмяМакетаБВВ).ПолучитьТекст();
	    ТаблицаДанныхБВВ = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетБВВ).Данные;
	КонецЕсли;
	
	//Формируем таблицу типов реквизитов
	Для Каждого Колонка Из ТаблицаДанныхНачальногоЗаполнения.Колонки Цикл
		
		ИмяРеквизита = Колонка.Имя;
		
		Если ИмяРеквизита = "ИмяПредопределенного" 
		 ИЛИ ИмяРеквизита = "Наименование" ИЛИ ИмяРеквизита = "Код"
		 ИЛИ Прав(ИмяРеквизита, СтрДлина("_Тип"))="_Тип" Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
		
		Если МетаданныеРеквизита = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка при заполнении объекта %1! Не найден рекизит %2.
|Объект не заполнен!'
|;uk='Помилка при заповненні об''єкта %1! Не знайдений реквізит %2.
|Об''єкт не заповнений!'"), ИмяОбъекта, ИмяРеквизита));
			Возврат;
		КонецЕсли;
		
		// Возможно это указание реквизита вместе с его типом, описывается в атрибуте "ColumnTitles" узла "Items"
		Если ЗначениеЗаполнено(Колонка.Заголовок) Тогда
			ТипРеквизита = Тип(Колонка.Заголовок);
		Иначе
			ТипыРеквизита = МетаданныеРеквизита.Тип.Типы();
			ТипРеквизита  = Неопределено;
			Если ТипыРеквизита.Количество() = 1 Тогда
				ТипРеквизита = ТипыРеквизита[0];
			КонецЕсли;
		КонецЕсли;		
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит = ИмяРеквизита;
		НоваяСтрока.Тип 	 = ТипРеквизита;
		НоваяСтрока.Менеджер = ПолучитьМенеджерПоТипу(ТипРеквизита);
		НоваяСтрока.ЕстьОписаниеТипаДляСтроки = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти(ИмяРеквизита+"_Тип") <> Неопределено);
		
	КонецЦикла;	
		
	ЗаполняемыйПВР = ПланыВидовРасчета[ИмяОбъекта];
	
	ЕстьДанныеКода         = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Код") <> Неопределено);
	ЕстьДанныеНаименования = (ТаблицаДанныхНачальногоЗаполнения.Колонки.Найти("Наименование") <> Неопределено);
	
	//Заполняем ПВР
	Для Каждого СтрокаДанныхНачальногоЗаполнения Из ТаблицаДанныхНачальногоЗаполнения Цикл
		
		//Предопределенные реквизиты
		ИмяПредопределенного = СтрокаДанныхНачальногоЗаполнения.ИмяПредопределенного;
		
		СсылкаНаЭлемент = ПолучитьПредопределенный(Тип("ПланВидовРасчетаСсылка."+ИмяОбъекта), ЗаполняемыйПВР, ИмяПредопределенного);
		Если СсылкаНаЭлемент = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден предопределённый элемент %1 для плана видов расчета %2';uk='Не знайдений напередвизначений елемент %1 для плану видів розрахунку %2'"), ИмяПредопределенного, ИмяОбъекта));
			Возврат;
		КонецЕсли;
		
		ТекущийОбъект = СсылкаНаЭлемент.ПолучитьОбъект();

		Если (МетаданныеОбъекта.ДлинаНаименования > 0) И ЕстьДанныеНаименования Тогда
			Наименование = СтрокаДанныхНачальногоЗаполнения.Наименование;			
			Если НЕ ПустаяСтрока(Наименование) И (Наименование <> ТекущийОбъект.Наименование) Тогда
				ТекущийОбъект.Наименование = Наименование;
			КонецЕсли;
		КонецЕсли;
		
		//В режиме "ЗаполнениеСинонимовОбъектов" ничего больше не делаем
		Если Не ЗаполнениеСинонимовОбъектов Тогда
			
			Если (МетаданныеОбъекта.ДлинаКода > 0) И ЕстьДанныеКода Тогда
				Код = СтрокаДанныхНачальногоЗаполнения.Код;
				Если НЕ ПустаяСтрока(Код) И (Код <> ТекущийОбъект.Код) Тогда
					ТекущийОбъект.Код = Код;
				Конецесли;
			Конецесли;
			
			//Дополнительные реквизиты
			Для Каждого ОписаниеКолонки Из ТаблицаРеквизитов Цикл
				
				ИмяРеквизита = ОписаниеКолонки.Реквизит;
				ЗначениеРеквизита = СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита];
				ТипСтрокой = ?(ОписаниеКолонки.ЕстьОписаниеТипаДляСтроки, СтрокаДанныхНачальногоЗаполнения[ИмяРеквизита+"_Тип"], "");
				
				НовоеЗначение = СформироватьЗначение(ТаблицаРеквизитов, ИмяРеквизита, ЗначениеРеквизита, ТипСтрокой);
				
				Если НовоеЗначение <> ТекущийОбъект[ИмяРеквизита] Тогда
					
					Если ЗначениеЗаполнено(НовоеЗначение)
						ИЛИ ЗначениеЗаполнено(ТекущийОбъект[ИмяРеквизита]) Тогда
						
						ТекущийОбъект[ИмяРеквизита] = НовоеЗначение;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			
			Если ЕстьМакетБВВ <> Неопределено Тогда
				
				Очередность = 0;
				
				ЗаполнитьБВВ(ТекущийОбъект, ИмяПредопределенного, ИмяОбъекта, ТаблицаДанныхБВВ, Очередность);
				
				ТекущийОбъект.ОчередностьРасчета = Очередность;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ТекущийОбъект.Модифицированность() Тогда
			
			Попытка
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеСинонимовОбъектов", ЗаполнениеСинонимовОбъектов ИЛИ ЗаполнениеТолькоСинонимов);
				Если ЗаполнениеСинонимовОбъектов ИЛИ ЗаполнениеТолькоСинонимов Тогда
					ТекущийОбъект.ОбменДанными.Загрузка = Истина;
				КонецЕсли; 
				ТекущийОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать объект плана видов расчета %1: %2!';uk='Не вдалося записати об''єкт плану видів розрахунку %1: %2!'"), ИмяОбъекта, ТекущийОбъект));
			КонецПопытки;	
		КонецЕсли;	
				
	КонецЦикла;
 	
КонецПроцедуры

Процедура ЗаполнитьБВВ(ТекущийОбъект, Имя, ИмяОбъекта, ТаблицаДанныхБВВ, Очередность)
	
	//Очистка
	Если Строка(ТекущийОбъект.Метаданные().ЗависимостьОтВидовРасчета) <> "НеИспользовать" Тогда
		Индекс = ТекущийОбъект.БазовыеВидыРасчета.Количество();
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Если ЗначениеЗаполнено(ТекущийОбъект.БазовыеВидыРасчета[Индекс].ВидРасчета) И НЕ ТекущийОбъект.БазовыеВидыРасчета[Индекс].ВидРасчета.Предопределенный Тогда
				Продолжить;
			КонецЕсли;
			ТекущийОбъект.БазовыеВидыРасчета.Удалить(Индекс);
		КонецЦикла;
	КонецЕсли;	
	
	Если ТекущийОбъект.Метаданные().ИспользованиеПериодаДействия Тогда
		Индекс = ТекущийОбъект.ВытесняющиеВидыРасчета.Количество();
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Если НЕ ТекущийОбъект.ВытесняющиеВидыРасчета[Индекс].ВидРасчета.Предопределенный И ЗначениеЗаполнено(ТекущийОбъект.ВытесняющиеВидыРасчета[Индекс].ВидРасчета) Тогда
				Продолжить;
			КонецЕсли;
			ТекущийОбъект.ВытесняющиеВидыРасчета.Удалить(Индекс);
		КонецЦикла;
	КонецЕсли;	
	
	Индекс = ТекущийОбъект.ВедущиеВидыРасчета.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Если НЕ ТекущийОбъект.ВедущиеВидыРасчета[Индекс].ВидРасчета.Предопределенный  И ЗначениеЗаполнено(ТекущийОбъект.ВедущиеВидыРасчета[Индекс].ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
		ТекущийОбъект.ВедущиеВидыРасчета.Удалить(Индекс);
	КонецЦикла;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИмяПредопределенного",Имя);

	СтрокиБВВ = ТаблицаДанныхБВВ.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаБВВ из СтрокиБВВ Цикл
		ИмяПоиска = СтрокаБВВ.Имя;
		Если СтрокаБВВ.ИмяПлана = "" Тогда
			ИмяПлана = ИмяОбъекта;
		Иначе
			ИмяПлана = СтрокаБВВ.ИмяПлана;
		КонецЕсли;
		
		СсылкаНаЭлемент = ПолучитьПредопределенный(Тип("ПланВидовРасчетаСсылка."+ИмяПлана), ПланыВидовРасчета[ИмяПлана], ИмяПоиска);
		Если СсылкаНаЭлемент = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для элемента %1 плана видов расчета %2 не найден зависимый элемент %3';uk='Для елементу %1 плану видів розрахунку %2 не знайдений залежний елемент %3'"), Имя, ИмяОбъекта, ИмяПоиска));
			Продолжить;
		КонецЕсли;
		
		Если СтрокаБВВ.Базовый <> "" Тогда
			Попытка
				НоваяСтрока            = ТекущийОбъект.БазовыеВидыРасчета.Добавить();	
				НоваяСтрока.ВидРасчета = СсылкаНаЭлемент;
			Исключение	
				//Не удалось записать
			КонецПопытки;
		КонецЕсли;
		
		Если СтрокаБВВ.Ведущий <> "" Тогда
			Попытка
				НоваяСтрока            = ТекущийОбъект.ВедущиеВидыРасчета.Добавить();	
				НоваяСтрока.ВидРасчета = СсылкаНаЭлемент;
			Исключение	
				//Не удалось записать
			КонецПопытки;
		КонецЕсли;
		
		Если СтрокаБВВ.Вытесняющий <> "" Тогда
			Попытка
				НоваяСтрока            = ТекущийОбъект.ВытесняющиеВидыРасчета.Добавить();	
				НоваяСтрока.ВидРасчета = СсылкаНаЭлемент;
			Исключение	
				//Не удалось записать
			КонецПопытки;
		КонецЕсли;

	КонецЦикла;
	
	Очередность = -1;
	Для Каждого Ведущий ИЗ ТекущийОбъект.ВедущиеВидыРасчета Цикл
		Очередность = МАКС(Очередность,Ведущий.ВидРасчета.ОчередностьРасчета);
	КонецЦикла;
	Очередность = Очередность+1;
	
КонецПроцедуры	

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Возвращает дерево значений с объектами у которых есть макет НачальноеЗаполнение
//
Функция ПолучитьДеревоОбъектовСНачальнымЗаполнением(ЗаполнениеСинонимовОбъектов = Ложь) Экспорт
	
	СостояниеЗаполнения(НСтр("ru='Поиск объектов для заполнения';uk='Пошук об''єктів для заповнення'"));
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Имя");
	Дерево.Колонки.Добавить("Представление");
	
	СтруктураРазделовКОбработке = Новый Структура;
	
	СтруктураРазделовКОбработке.Вставить("Справочники", Новый Структура("Имя, Представление", 
	                                     "Справочник", 
										 НСтр("ru='Справочник';uk='Довідник'")));
										 
	СтруктураРазделовКОбработке.Вставить("ПланыВидовХарактеристик", Новый Структура("Имя, Представление",
	                                     "ПланВидовХарактеристик",
										 НСтр("ru='План видов характеристик';uk='План видів характеристик'")));
										 
	СтруктураРазделовКОбработке.Вставить("ПланыВидовРасчета", Новый Структура("Имя, Представление",
	                                     "ПланВидовРасчета",
										 НСтр("ru='План видов расчета';uk='План видів розрахунку'")));


	Если НЕ ЗаполнениеСинонимовОбъектов Тогда
		СтруктураРазделовКОбработке.Вставить("РегистрыСведений", Новый Структура("Имя, Представление",
		"РегистрСведений",
		НСтр("ru='Регистр сведений';uk='Регістр відомостей'")));
	КонецЕсли; 
	 
	СтруктураРазделовКОбработке.Вставить("ПланыСчетов", Новый Структура("Имя, Представление",
	                                     "ПланСчетов",
										 НСтр("ru='План счетов';uk='План рахунків'")));

	
	Для каждого ОписаниеРаздела Из СтруктураРазделовКОбработке Цикл
		
		СтрокаДереваРаздела = Неопределено;
	
		Для Каждого ОбъектМетаданных Из Метаданные[ОписаниеРаздела.Ключ] Цикл
			МакетНачальноеЗаполнение = ОбъектМетаданных.Макеты.Найти("НачальноеЗаполнение");
			Если МакетНачальноеЗаполнение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ МакетНачальноеЗаполнение.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ТекстовыйДокумент Тогда 
				Продолжить;
			КонецЕсли;
			Если СтрокаДереваРаздела = Неопределено Тогда
				СтрокаДереваРаздела = Дерево.Строки.Добавить();
				СтрокаДереваРаздела.Имя =           ОписаниеРаздела.Значение.Имя;
				СтрокаДереваРаздела.Представление = ОписаниеРаздела.Значение.Представление;
			КонецЕсли;
			НоваяСтрока = СтрокаДереваРаздела.Строки.Добавить();
			НоваяСтрока.Имя = ОбъектМетаданных.Имя;
			НоваяСтрока.Представление = ОбъектМетаданных.Представление();
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции

// Заполняет объект указанный извне
//
Процедура ЗаполнитьОбъект(ТипОбъекта, НаименованиеОбъекта, ОчиститьРегистрыСведенийПередЗаписью = Ложь, ЗаполнятьПредопределенные = Истина, ЗаполнятьНеПредопределенные = Ложь,ЗаполнениеСинонимовОбъектов = Ложь) Экспорт
	
	Если ТипОбъекта = "Справочник" Тогда
		ЗаполнитьСправочник(НаименованиеОбъекта, ЗаполнятьПредопределенные, ЗаполнятьНеПредопределенные,ЗаполнениеСинонимовОбъектов);
		
	ИначеЕсли ТипОбъекта = "ПланВидовХарактеристик" Тогда
		ЗаполнитьПланВидовХарактеристик(НаименованиеОбъекта,ЗаполнениеСинонимовОбъектов );	
		

	ИначеЕсли ТипОбъекта = "ПланВидовРасчета" Тогда
		ЗаполнитьПланВидовРасчета(НаименованиеОбъекта,ЗаполнениеСинонимовОбъектов );	
		
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		ЗаполнитьРегистрСведений(НаименованиеОбъекта, ОчиститьРегистрыСведенийПередЗаписью);	
		
	ИначеЕсли ТипОбъекта = "ПланСчетов" Тогда
		ЗаполнитьПланСчетов(НаименованиеОбъекта,ЗаполнениеСинонимовОбъектов );	
		
	КонецЕсли;
	
КонецПроцедуры	

// Заполняет все возможные объекты метаданных
//
Процедура ЗаполнитьВсеОбъекты(ОчиститьРегистрыСведенийПередЗаписью = Ложь, ЗаполнятьПредопределенные = Истина, ЗаполнятьНеПредопределенные = Ложь, ЗаполнениеСинонимовОбъектов = Ложь) Экспорт
	
	ДеревоОбъектов = ПолучитьДеревоОбъектовСНачальнымЗаполнением(ЗаполнениеСинонимовОбъектов);
	
	Если ЗаполнятьПредопределенные ИЛИ ЗаполнятьНеПредопределенные Тогда
		Раздел = ДеревоОбъектов.Строки.Найти("Справочник", "Имя", Ложь);
		Если Раздел <> Неопределено Тогда
			Для каждого ОписаниеОбъекта Из Раздел.Строки Цикл
				ЗаполнитьСправочник(ОписаниеОбъекта.Имя, ЗаполнятьПредопределенные, ЗаполнятьНеПредопределенные,ЗаполнениеСинонимовОбъектов);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьПредопределенные Тогда
		//для этих объектов других заполнять не умеем
		
		Раздел = ДеревоОбъектов.Строки.Найти("ПланВидовХарактеристик", "Имя", Ложь);
		Если Раздел <> Неопределено Тогда
			Для каждого ОписаниеОбъекта Из Раздел.Строки Цикл
				ЗаполнитьПланВидовХарактеристик(ОписаниеОбъекта.Имя,ЗаполнениеСинонимовОбъектов);
			КонецЦикла;
		КонецЕсли;
		
		Раздел = ДеревоОбъектов.Строки.Найти("ПланСчетов", "Имя", Ложь);
		Если Раздел <> Неопределено Тогда
			Для каждого ОписаниеОбъекта Из Раздел.Строки Цикл
				ЗаполнитьПланСчетов(ОписаниеОбъекта.Имя,ЗаполнениеСинонимовОбъектов);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Раздел = ДеревоОбъектов.Строки.Найти("ПланВидовРасчета", "Имя", Ложь);
	Если Раздел <> Неопределено Тогда
		Для каждого ОписаниеОбъекта Из Раздел.Строки Цикл
			ЗаполнитьПланВидовРасчета(ОписаниеОбъекта.Имя,ЗаполнениеСинонимовОбъектов);
		КонецЦикла;
	КонецЕсли;

	Раздел = ДеревоОбъектов.Строки.Найти("РегистрСведений", "Имя", Ложь);
	Если Раздел <> Неопределено Тогда
		Для каждого ОписаниеОбъекта Из Раздел.Строки Цикл
			ЗаполнитьРегистрСведений(ОписаниеОбъекта.Имя, ОчиститьРегистрыСведенийПередЗаписью);
		КонецЦикла;
	КонецЕсли;
	
	СостояниеЗаполнения(НСтр("ru='Заполнение завершено';uk='Заповнення завершене'"));
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли

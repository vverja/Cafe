#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//	Параметры:
//			ВидНоменклатуры    - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, параметры серий которого которой нужно получить
//			СкладПодразделение - СправочникСсылка.Склады, СправочникСсылка.СтруктураПредприятия - склад или производственное подразделение
//									для которого нужно получить настройки серий. Если значение не задано - возвращаются настройки, которые
//									от склада не зависят
//	Возвращаемое значение:
//		Структура - структура с ключами:
//			* ВидНоменклатуры
//			* ИспользоватьСерии
//			* ИспользоватьНомерСерии
//			* ИспользоватьСрокГодностиСерии
//			* ИспользоватьКоличествоСерии
//			* ТочностьУказанияСрокаГодностиСерии
//			* ШаблонРабочегоНаименованияСерии
//			* ВладелецСерий
//			* НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
//			* ШаблонЭтикеткиСерии
//			* ФорматнаяСтрокаСрокаГодности
//			* ОбязательныеДопРеквизиты
//			* ПолитикаУчетаСерий
//			* УказыватьПриПоступлении
//			* УказыватьПриОтгрузке
//			* УказыватьПриПланированииОтгрузки
//			* УчетСерийПоFEFO
//			* УказывыватьПоФактуОтбора
//			* УчитыватьОстаткиСерий
//			* УчитыватьСебестоимостьПоСериям
//
Функция НастройкиИспользованияСерий(ВидНоменклатуры, СкладПодразделение = Неопределено) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ВидНоменклатуры");
	Результат.Вставить("ИспользоватьСерии");
	Результат.Вставить("ИспользоватьНомерСерии");
	Результат.Вставить("ИспользоватьСрокГодностиСерии");
	Результат.Вставить("ИспользоватьКоличествоСерии");
	Результат.Вставить("ТочностьУказанияСрокаГодностиСерии");
	Результат.Вставить("ШаблонРабочегоНаименованияСерии");
	Результат.Вставить("ВладелецСерий");
	Результат.Вставить("НастройкиСерийБерутсяИзДругогоВидаНоменклатуры");
	Результат.Вставить("ШаблонЭтикеткиСерии");
	
	Результат.Вставить("ФорматнаяСтрокаСрокаГодности");
	Результат.Вставить("ОбязательныеДопРеквизиты");
	
	Результат.Вставить("ПолитикаУчетаСерий");
	Результат.Вставить("УказыватьПриПоступлении");
	Результат.Вставить("УказыватьПриОтгрузке");
	Результат.Вставить("УказыватьПриПланированииОтгрузки");
	Результат.Вставить("УчетСерийПоFEFO");
	Результат.Вставить("УказывыватьПоФактуОтбора");
	Результат.Вставить("УчитыватьОстаткиСерий");
	Результат.Вставить("УчитыватьСебестоимостьПоСериям");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	ВидыНоменклатуры.ИспользоватьНомерСерии КАК ИспользоватьНомерСерии,
	|	ВидыНоменклатуры.ИспользоватьСрокГодностиСерии КАК ИспользоватьСрокГодностиСерии,
	|	ВидыНоменклатуры.ИспользоватьКоличествоСерии КАК ИспользоватьКоличествоСерии,
	|	ВидыНоменклатуры.ТочностьУказанияСрокаГодностиСерии КАК ТочностьУказанияСрокаГодностиСерии,
	|	ВидыНоменклатуры.ШаблонРабочегоНаименованияСерии КАК ШаблонРабочегоНаименованияСерии,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
	|			ТОГДА ВидыНоменклатуры.ВладелецСерий
	|		ИНАЧЕ ВидыНоменклатуры.Ссылка
	|	КОНЕЦ КАК ВладелецСерий,
	|	ВидыНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры КАК НастройкиСерийБерутсяИзДругогоВидаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
	|			ТОГДА ВидыНоменклатуры.ВладелецСерий.ШаблонЭтикеткиСерии
	|		ИНАЧЕ ВидыНоменклатуры.ШаблонЭтикеткиСерии
	|	КОНЕЦ КАК ШаблонЭтикеткиСерии,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий, ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)) КАК ПолитикаУчетаСерий,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке, ЛОЖЬ) КАК УказыватьПриПоступлении,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузке, ЛОЖЬ) КАК УказыватьПриОтгрузке,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки, ЛОЖЬ) КАК УказыватьПриПланированииОтгрузки,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO, ЛОЖЬ) КАК УчетСерийПоFEFO,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора, ЛОЖЬ) КАК УказывыватьПоФактуОтбора,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий, ЛОЖЬ) КАК УчитыватьОстаткиСерий,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ) КАК УчитыватьСебестоимостьПоСериям
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ТЧПолитикиУчетаСерий
	|		ПО ВидыНоменклатуры.Ссылка = ТЧПолитикиУчетаСерий.Ссылка
	|			И (ТЧПолитикиУчетаСерий.Склад = &СкладПодразделение)
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка = &ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНоменклатурыРеквизитыДляКонтроляСерий.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК ВидыНоменклатурыРеквизитыДляКонтроляСерий
	|ГДЕ
	|	ВидыНоменклатурыРеквизитыДляКонтроляСерий.Ссылка = ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
	|				ТОГДА ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).ВладелецСерий
	|			ИНАЧЕ &ВидНоменклатуры
	|		КОНЕЦ
	|	И ВидыНоменклатурыРеквизитыДляКонтроляСерий.ЭтоДопРеквизит
	|	И ВидыНоменклатурыРеквизитыДляКонтроляСерий.ОбязателенДляЗаполнения";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("СкладПодразделение", СкладПодразделение);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, РеквизитыШапки);
	Результат.ФорматнаяСтрокаСрокаГодности = ФорматнаяСтрокаСрокаГодности(Результат.ТочностьУказанияСрокаГодностиСерии);
		
	Результат.ОбязательныеДопРеквизиты = Новый ФиксированныйМассив(РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Свойство"));
	
	Возврат Результат;	
	
КонецФункции

// Получает вид номенклатуры, если вид номенклатуры один в справочнике.
//
// Возвращаемое значение:
// 	СправочникСсылка.ВидНоменклатуры - найденный вид номенклатуры
// 	Неопределено - если видов номенаклатуры нет или видов номенклатуры больше одного
//
Функция ВидНоменклатурыПоУмолчанию() Экспорт
	
	Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	НЕ ВидыНоменклатуры.ПометкаУдаления
	|	И НЕ ВидыНоменклатуры.ЭтоГруппа";
	
	Запрос = Новый Запрос(Текст);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ВидНоменклатуры = Выборка.ВидНоменклатуры;
	Иначе
		ВидНоменклатуры = Неопределено;
	КонецЕсли;
	
	Возврат ВидНоменклатуры;
	
КонецФункции // ВидНоменклатуры()

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП.
//
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("ТипНоменклатуры; ТипНоменклатуры");
	Результат.Добавить("ИспользованиеХарактеристик");
	Результат.Добавить("ИспользоватьХарактеристики");
	Результат.Добавить("ИспользоватьСерии; ВариантЗаданияНастроекСерий, НастройкаСерийПоСкладам1, НастройкаСерийПоСкладам2, НастройкаСерийПоПозраделениям1, НастройкаСерийПоПозраделениям2");
	Результат.Добавить("ПолитикиУчетаСерий;ПолитикаУчетаСерий,ПолитикиУчетаСерийДобавитьСкладВПолитикиУчетаСерий,ПолитикиУчетаСерийДобавитьПодразделениеВПолитикиУчетаСерий");
	Результат.Добавить("НастройкаИспользованияСерий");
	Результат.Добавить("ТочностьУказанияСрокаГодностиСерии");
	Результат.Добавить("ВариантОформленияПродажи");
	Результат.Добавить("ВариантПредставленияНабораВПечатныхФормах");
	Результат.Добавить("ВариантРасчетаЦеныНабора;ГруппаЦенаНабора");
	Результат.Добавить("ВариантОказанияУслуг");
	Результат.Добавить("ВладелецХарактеристик");
	Результат.Добавить("ВладелецСерий");
	Результат.Добавить("НастройкиСерийБерутсяИзДругогоВидаНоменклатуры");
	Результат.Добавить("ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры");
	Результат.Добавить("ВладелецТоварныхКатегорий; НастройкиТоварныхКатегорий");
	Результат.Добавить("ПолитикаУчетаСерийДляПодразделений");
	Результат.Добавить("ПолитикаУчетаСерийДляСкладов");
	
	Возврат Результат;
	
КонецФункции

// Возвращает форматную строку представления срока годности.
//
// Параметры:
//	ТочностьУказанияСрокаГодности - Перечисления.ТочностиУказанияСрокаГодности
//
//	Возвращаемое значание:
//		Строка - форматная строка
//
Функция ФорматнаяСтрокаСрокаГодности(ТочностьУказанияСрокаГодности)Экспорт
	
	Если ТочностьУказанияСрокаГодности = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов Тогда
		ФорматнаяСтрока = "ДФ='dd.MM.yy HH:00'";
	Иначе
		ФорматнаяСтрока = "ДФ=dd.MM.yy";
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
	
КонецФункции

// Возвращает предустановленные виды номенклатуры.
//
// Возвращаемое значение:
//	Массив, элементы - СправочникСсылка.ВидыНоменклатуры
//
Функция ПолучитьПредустановленныеВидыНоменклатуры() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивВидов = Новый Массив;
	
	ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, Перечисления.ТипыНоменклатуры.Товар, НСтр("ru='Товар';uk='Товар'"));
	ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, Перечисления.ТипыНоменклатуры.Услуга, НСтр("ru='Услуга';uk='Послуга'"));
	
	Возврат МассивВидов;

КонецФункции 

// Добавляет в массив вид номенклатуры с указанным типом.
// Если вида номенклатуры с таким типов нет в ИБ, то он создается.
//
// Параметры:
//	МассивВидов - Массив
//	Тип - Перечисления.ТипыНоменклатуры
//	Имя - Строка - имя нового вида номенклатуры
//
Процедура ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, Тип, Имя) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ТипНоменклатуры = &Тип
	|	И НЕ ВидыНоменклатуры.ПометкаУдаления";
						  
	Запрос.УстановитьПараметр("Тип", Тип);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйВид = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		
		НовыйВид.Наименование = Имя;
		НовыйВид.ТипНоменклатуры = Тип;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
			НовыйВид.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.ПолучитьГруппуДоступаПоУмолчанию(НовыйВид);
		КонецЕсли;
		НовыйВид.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		
        ЗаполнитьРеквизитыДляКонтроля(НовыйВид, "Номенклатура");
		НовыйВид.Заполнить(Неопределено);
		
		НастройкаЕдИзмерения = НовыйВид.РеквизитыДляКонтроляНоменклатуры.Найти("ЕдиницаИзмерения");
		Если НастройкаЕдИзмерения <> Неопределено Тогда
			НастройкаЕдИзмерения.ОтображатьПриСоздании = Истина;
			НастройкаЕдИзмерения.ОбязателенДляЗаполнения = Истина;
		КонецЕсли;
		
		НовыйВид.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		НовыйВид.ЕдиницаДляОтчетов = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
		НовыйВид.Записать();
		
		МассивВидов.Добавить(НовыйВид.Ссылка);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		МассивВидов.Добавить(Выборка.Ссылка);
		
	КонецЕсли;	

КонецПроцедуры 

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	НоменклатураВызовСервера.ВидыНоменклатурыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы


// Обработчик обновления BAS УТ 3.2.1
// Обработчик выполняет заполнение новых реквизитов для контоля заполнения серий
Процедура ЗаполнитьРеквизитыДляКонтроляСерий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНоменклатуры.Ссылка,
	|	ВидыНоменклатуры.НаборСвойствСерий
	|ПОМЕСТИТЬ ВТВидыНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляСерий КАК ВидыНоменклатурыРеквизитыДляКонтроляСерий
	|		ПО ВидыНоменклатуры.Ссылка = ВидыНоменклатурыРеквизитыДляКонтроляСерий.Ссылка
	|ГДЕ
	|	ВидыНоменклатуры.ИспользоватьСерии
	|	И ВидыНоменклатуры.НаборСвойствСерий <> ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|	И ВидыНоменклатурыРеквизитыДляКонтроляСерий.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Ссылка КАК НаборСвойств,
	|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ВЫБОР
	|		КОГДА НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит
	|ПОМЕСТИТЬ ВТДопРеквизиты
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВТДопРеквизиты.ИмяРеквизита,
	|	ВТДопРеквизиты.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	ВТДопРеквизиты.ТипЗначения,
	|	ВТДопРеквизиты.Свойство,
	|	ВТДопРеквизиты.ЗаполнятьОбязательно КАК ОбязателенДляЗаполнения,
	|	ВТДопРеквизиты.ЭтоОбщийРеквизит,
	|	ИСТИНА КАК ЭтоДопРеквизит
	|ИЗ
	|	ВТВидыНоменклатуры КАК ВТВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДопРеквизиты КАК ВТДопРеквизиты
	|		ПО (ВТВидыНоменклатуры.НаборСвойствСерий = ВТДопРеквизиты.НаборСвойств
	|				ИЛИ ВТДопРеквизиты.ЭтоОбщийРеквизит)
	|ГДЕ
	|	ВТДопРеквизиты.НаборСвойств ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНоменклатуры,
	|	ПредставлениеРеквизита";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ВидНоменклатуры = Неопределено;
	ВидНоменклатурыОбъект = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидНоменклатуры <> Выборка.ВидНоменклатуры Тогда
			
			Если ВидНоменклатуры <> Неопределено Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидНоменклатурыОбъект);
			КонецЕсли;
			
			ВидНоменклатуры = Выборка.ВидНоменклатуры;
			ВидНоменклатурыОбъект = ВидНоменклатуры.ПолучитьОбъект();
			
		КонецЕсли;
		
		СтрокаРеквизитовДляКонтроля = ВидНоменклатурыОбъект.РеквизитыДляКонтроляСерий.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, Выборка);
		
		СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения =
			?(Выборка.ТипЗначения = ОписаниеТиповБулево, Ложь, СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения);
		
		СтрокаРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения =
			Выборка.ТипЗначения <> ОписаниеТиповБулево И НЕ Выборка.ОбязателенДляЗаполнения;
		
		Если Выборка.ЭтоОбщийРеквизит Тогда
			СтрокаРеквизитовДляКонтроля.ПредставлениеРеквизита =
				СтрокаРеквизитовДляКонтроля.ПредставлениеРеквизита + НСтр("ru=' (Общий)';uk=' (Загальний)'");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидНоменклатуры <> Неопределено Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидНоменклатурыОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.1
// Для элементов с типом номенклатуры - услуга
// и незаполненным вариантом оказания услуг, заполняет вариант оказания услуг 
// значением по умолчанию - "организацией продавцом".
Процедура ЗаполнитьВариантОказанияУслугПоУмолчанию() Экспорт
    
    УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Справочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК Справочник
	|ГДЕ
	|	Справочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И Справочник.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ПустаяСсылка)
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			НачатьТранзакцию();
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ОрганизациейПродавцом;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось обработать %1 по причине: %2';uk='Не вдалося обробити %1 з причини: %2'"), // Сообщение
				Выборка.Ссылка,                                         // %1
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));    // %2
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ВидыНоменклатуры,
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
Процедура ЗаполнитьПолитикаУчетаСерийДляСкладовКогдаНеИспользуетсяНесколькоСкладов() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка КАК Ссылка,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий КАК ПолитикаУчетаСерий
	|ИЗ
	|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|ГДЕ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Склад ССЫЛКА Справочник.Склады";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидОбъект.ЕдинаяНастройкаСерийДляСкладов = Истина;
		ВидОбъект.ПолитикаУчетаСерийДляСкладов = Выборка.ПолитикаУчетаСерий;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
Процедура ОбновитьДляУказанияКоличестваВРазличныхЕдиницах() Экспорт 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка,
	|	ЕСТЬNULL(ЕдиницыИзмерения.УдалитьУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЕдиницыДляОтчетов.УдалитьУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаДляОтчетов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЕдиницыИзмерения.УдалитьУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЕСТЬNULL(ЕдиницыДляОтчетов.УдалитьУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ ВидыНоменклатуры.КоэффициентЕдиницыДляОтчетов
	|	КОНЕЦ КАК КоэффициентЕдиницыДляОтчетов
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (ЕдиницыИзмерения.Ссылка = ВидыНоменклатуры.ЕдиницаИзмерения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьЕдиницыИзмерения КАК ЕдиницыДляОтчетов
	|		ПО (ЕдиницыДляОтчетов.Ссылка = ВидыНоменклатуры.ЕдиницаДляОтчетов)
	|ГДЕ
	|	(ЕСТЬNULL(ЕдиницыИзмерения.УдалитьУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ВидыНоменклатуры.ЕдиницаИзмерения
	|			ИЛИ ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				И ВидыНоменклатуры.ВариантОказанияУслуг = ЗНАЧЕНИЕ(Перечисление.ВариантыОказанияУслуг.ПустаяСсылка))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПоиска = Новый Структура("ИмяРеквизита","");
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СпрОбъект,Выборка);
		
		Если СпрОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			И СпрОбъект.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ПустаяСсылка() Тогда
			
			СпрОбъект.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ОрганизациейПродавцом;
			
		КонецЕсли;
        
		
		Если Не ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения)
			Или Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Выборка.ЕдиницаИзмерения) Тогда
			СпрОбъект.ПоставляетсяВМногооборотнойТаре  = Ложь;
			СпрОбъект.НоменклатураМногооборотнаяТара   = Справочники.Номенклатура.ПустаяСсылка();
			СпрОбъект.ХарактеристикаМногооборотнаяТара = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		НайденныеСтроки = СпрОбъект.РеквизитыДляКонтроляНоменклатуры.НайтиСтроки(Новый Структура("ИмяРеквизита","Вес"));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ИмяРеквизита = "ВесИспользовать";
			НайденныеСтроки[0].Уникален = Ложь;
			НайденныеСтроки[0].ОбязателенДляЗаполнения = Ложь;
			НайденныеСтроки[0].ОтборПриВыборе = Ложь;
			НайденныеСтроки[0].ДоступностьУникален = Ложь;
			НайденныеСтроки[0].ДоступностьОбязателенДляЗаполнения = Ложь;
		КонецЕсли;
		НайденныеСтроки = СпрОбъект.РеквизитыДляКонтроляНоменклатуры.НайтиСтроки(Новый Структура("ИмяРеквизита","Объем"));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ИмяРеквизита = "ОбъемИспользовать";
			НайденныеСтроки[0].Уникален = Ложь;
			НайденныеСтроки[0].ОбязателенДляЗаполнения = Ложь;
			НайденныеСтроки[0].ОтборПриВыборе = Ложь;
			НайденныеСтроки[0].ДоступностьУникален = Ложь;
			НайденныеСтроки[0].ДоступностьОбязателенДляЗаполнения = Ложь;
		КонецЕсли;
		
		НайденныеСтроки = СпрОбъект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Новый Структура("ИмяРеквизита","Вес"));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СпрОбъект.РеквизитыБыстрогоОтбораНоменклатуры.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
		НайденныеСтроки = СпрОбъект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Новый Структура("ИмяРеквизита","Объем"));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СпрОбъект.РеквизитыБыстрогоОтбораНоменклатуры.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);
		
	КонецЦикла;
	
КонецПроцедуры


// Вызывается после окончания загрузки данных из локальной версии
// в область данных сервиса или наоборот.
//
Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	(ВидыНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры
	|			ИЛИ ВидыНоменклатуры.ЗапретРедактированияНаименованияДляПечатиХарактеристики
	|			ИЛИ ВидыНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры
	|			ИЛИ ВидыНоменклатуры.ЗапретРедактированияРабочегоНаименованияХарактеристики)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.ЗапретРедактированияНаименованияДляПечатиНоменклатуры   = Ложь;
		СправочникОбъект.ЗапретРедактированияНаименованияДляПечатиХарактеристики = Ложь;
		СправочникОбъект.ЗапретРедактированияРабочегоНаименованияНоменклатуры    = Ложь;
		СправочникОбъект.ЗапретРедактированияРабочегоНаименованияХарактеристики  = Ложь;
		
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаВерсию2_1_12() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыДляКонтроляНоменклатуры.Ссылка
	|ПОМЕСТИТЬ ВидыНоменклатурыСЗаполненнымиНаименованиями
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроляНоменклатуры
	|ГДЕ
	|	РеквизитыДляКонтроляНоменклатуры.ИмяРеквизита = ""НаименованиеПолное""
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВложенныйЗапрос.Действие
	|ИЗ
    |	(ВЫБРАТЬ    
    |		ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,    
    |		""ЗаполнениеТЧРеквизитыПроверкиНоменклатуры"" КАК Действие
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВидыНоменклатурыСЗаполненнымиНаименованиями КАК ВидыНоменклатурыСЗаполненнымиНаименованиями
	|			ПО ВидыНоменклатурыСЗаполненнымиНаименованиями.Ссылка = ВидыНоменклатуры.Ссылка
	|	ГДЕ
	|		ВидыНоменклатурыСЗаполненнымиНаименованиями.Ссылка ЕСТЬ NULL 
	|		И НЕ ВидыНоменклатуры.ЭтоГруппа 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыНоменклатуры.Ссылка,
	|		""ЗаполнениеНастройкиИспользованияСерий""
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	ГДЕ
	|		ВидыНоменклатуры.НастройкаИспользованияСерий В (ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоНомеру), ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоНомеруИСрокуГодности), ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоСрокуГодности))) КАК ВложенныйЗапрос
	|ИТОГИ ПО
	|	ВидНоменклатуры";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.ВидНоменклатуры.ПолучитьОбъект();
		
		ВыборкаПоДействиям = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоДействиям.Следующий() Цикл
            
            Если ВыборкаПоДействиям.Действие = "ЗаполнениеТЧРеквизитыПроверкиНоменклатуры" Тогда    
				ЗаполнитьРеквизитыДляКонтроля(СправочникОбъект, "Номенклатура");			
				
			ИначеЕсли ВыборкаПоДействиям.Действие = "ЗаполнениеНастройкиИспользованияСерий" Тогда
				
				Если (СправочникОбъект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоНомеру
					Или СправочникОбъект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоНомеруИСрокуГодности
					Или СправочникОбъект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.УдалитьПартияТоваровПоСрокуГодности) Тогда
					
					СправочникОбъект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров;
					
				КонецЕсли;
			Иначе
				
				ТекстИсключения = НСтр("ru='Неизвестное действие обновления.';uk='Невідома дія оновлення.'");
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

// Проверяет, является ли реквизит реквизитом составного типа.
//
// Параметры:
//	Реквизит - ОбъектМетаданных, ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения- доп. реквизит или доп. сведение.
//
// Возвращаемое значение:
//	Булево - тип реквизита составной
//
Функция ЭтоРеквизитСоставногоТипа(Реквизит) Экспорт
	
	ТипЗначенияРеквизита = ТипЗнч(Реквизит);
	
	Если ТипЗначенияРеквизита = Тип("ОбъектМетаданных") Тогда
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизит, "Тип") Тогда
			Возврат (Не Реквизит.Тип.Типы().Количество() < 2);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗначенияРеквизита = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
		Возврат (Не Реквизит.ТипЗначения.Типы().Количество() < 2);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет возможность изменения настройки отображения реквизита.
//
//	Параметры:
//		Объект - СправочникОбъект.Номенклатура
//		ИмяРеквизита - Строка
//		ВладелецРеквизита - Строка
//		ЭтоДопРеквизит - Булево
//		ЗаполнятьОбязательно - Булево
//
//	Возвращаемое значение:
//		Булево - изменение настройки возможно
//
Функция ДоступноИзменениеНастройкиОтображенияРеквизита(Объект, СтрокаРеквизита, ВладелецРеквизита) Экспорт
			
	ИмяРеквизита         = СтрокаРеквизита.ИмяРеквизита;
	ЭтоДопРеквизит       = СтрокаРеквизита.ЭтоДопРеквизит;
	
	Если ЭтоДопРеквизит Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаРеквизита.Свойство,"ЗаполнятьОбязательно");
		ЗаполнятьОбязательно = Реквизиты.ЗаполнятьОбязательно;
	Иначе
		Если ВладелецРеквизита = "Номенклатура" Тогда
			
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				ТекстИсключения = НСтр("ru='Ошибка при вызове функции ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита: реквизит номенклатуры не найден.';uk='Помилка при виклику функції ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита: реквізит номенклатури не знайдений.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			ТипЗначения = Реквизит.Тип; 
			ЗаполнятьОбязательно = ОбязательныйДляЗаполненияРеквизит(Объект, Реквизит);
		Иначе
			ЗаполнятьОбязательно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДоступноИзменениеНастройки = Не ЗаполнятьОбязательно;
	
	Если ЭтоОбязательноОтображаемыйРеквизит(Объект, ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит, ЗаполнятьОбязательно) Тогда
		ДоступноИзменениеНастройки = Ложь;
	КонецЕсли;
		
	Возврат ДоступноИзменениеНастройки
			И Не (СтрокаРеквизита.Уникален
					Или СтрокаРеквизита.ОбязателенДляЗаполнения); 	
КонецФункции

// Проверяет возможность изменения настройки обязательности заполнения реквизита.
//
//	Параметры:
//		Объект - СправочникОбъект.Номенклатура
//		ИмяРеквизита - Строка
//		ВладелецРеквизита - Строка
//		ЭтоДопРеквизит - Булево
//		ЗаполнятьОбязательно - Булево
//
//	Возвращаемое значение:
//		Булево - изменение настройки возможно
//
Функция ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита(Объект, СтрокаРеквизита, ВладелецРеквизита) Экспорт
	
	ИмяРеквизита         = СтрокаРеквизита.ИмяРеквизита;
	ЭтоДопРеквизит       = СтрокаРеквизита.ЭтоДопРеквизит;
	
	Если ЭтоДопРеквизит Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаРеквизита.Свойство,"ЗаполнятьОбязательно,ТипЗначения");
		ЗаполнятьОбязательно = Реквизиты.ЗаполнятьОбязательно;
		ТипЗначения          = Реквизиты.ТипЗначения;
	Иначе
		Если ВладелецРеквизита = "Номенклатура" Тогда
			
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				ТекстИсключения = НСтр("ru='Ошибка при вызове функции ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита: реквизит номенклатуры не найден.';uk='Помилка при виклику функції ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита: реквізит номенклатури не знайдений.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			ТипЗначения = Реквизит.Тип; 
			ЗаполнятьОбязательно = ОбязательныйДляЗаполненияРеквизит(Объект, Реквизит);
		Иначе
			ЗаполнятьОбязательно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДоступноИзменениеНастройки = НЕ ЗаполнятьОбязательно;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");

	Возврат ДоступноИзменениеНастройки
		И ТипЗначения <> ОписаниеТиповБулево; 
	
КонецФункции

// Добавляет реквизит в табличные части элемента справочника номенклатуры.
//
// Параметры:
//	Объект - СправочникОбъект.Номенклатура
//	Реквизит - ОбъектМетаданных:Реквизит
//	ТаблицаРеквизитовДляКонтроляНоменклатуры - ТаблицаЗначений
//	ТаблицаРеквизитовОтбораНоменклатуры - ТаблицаЗначений
//
Процедура ДобавитьРеквизитДляКонтроляИОтбораНоменклатуры(Объект, Реквизит, ВладелецРеквизита) Экспорт
	
	Если Справочники.Номенклатура.НеотображаемыеВТаблицеНастроекРеквизиты().Найти(Реквизит.Имя) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеиспользуемыеДляКонтроляРеквизиты = Справочники.Номенклатура.НеиспользуемыеДляКонтроляУникальностиРеквизиты();
	ТипыНеИспользуемыеДляКонтроля = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы();
			
	СвойстваДляЗаполнения =
		"Уникален, ОбязателенДляЗаполнения, ОтображатьПриСоздании, ДоступностьУникален,
		|ДоступностьОбязателенДляЗаполнения, ДоступностьОтображатьПриСоздании";
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизит, "Тип") Тогда
		ТипРеквизита = Новый ОписаниеТипов("Неопределено");
	Иначе
		ТипРеквизита = Реквизит.Тип;
	КонецЕсли;
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	Если Реквизит.Имя = "ЕдиницаИзмерения" Тогда
		Если ЭтоТовар  
			Или ЭтоМногооборотнаяТара Тогда
			ПредставлениеРеквизита = НСтр("ru='Единица хранения';uk='Одиниця зберігання'");
		Иначе
			ПредставлениеРеквизита = НСтр("ru='Единица измерения';uk='Одиниця вимірювання'");
		КонецЕсли;
	Иначе
		ПредставлениеРеквизита = Реквизит.Синоним;
		Если Не ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
			ПредставлениеРеквизита = Реквизит.Имя;
		КонецЕсли;
	КонецЕсли;				
	
	ЭтоНеиспользуемыйДляКонтроляРеквизит = (НеиспользуемыеДляКонтроляРеквизиты.Найти(Реквизит.Имя) <> Неопределено);
	ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(Реквизит.Имя) <> Неопределено);
	ЭтоРеквизитСоставногоТипа = ЭтоРеквизитСоставногоТипа(Реквизит);
	ЭтоОбязательныйДляЗаполненияРеквизит = ОбязательныйДляЗаполненияРеквизит(Объект, Реквизит);
	ТипРеквизитаБулево = (ТипРеквизита = ОписаниеТиповБулево);
	
	ЭтоРеквизитРекомендуемыйДляКонтроляУникальности = ЭтоРеквизитРекомендуемыйДляКонтроляУникальности(Объект, Реквизит.Имя); 
	
	Отбор = Новый Структура("ИмяРеквизита,ЭтоДопРеквизит", Реквизит.Имя, Ложь);
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
		ИмяТЧ = "РеквизитыДляКонтроляНоменклатуры";
	Иначе
		ИмяТЧ = "РеквизитыДляКонтроляХарактеристик";
	КонецЕсли;
		
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Отбор);	
	
	ЭтоНоваяСтрока = Ложь;
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаРеквизитовДляКонтроля = Объект[ИмяТЧ].Добавить();
		СтрокаРеквизитовДляКонтроля.ИмяРеквизита = Реквизит.Имя;
		ЭтоНоваяСтрока = Истина;
	Иначе
		СтрокаРеквизитовДляКонтроля = НайденныеСтроки[0];
	КонецЕсли;	
	
	СтрокаРеквизитовДляКонтроля.ПредставлениеРеквизита = ПредставлениеРеквизита;
	
	Если Не СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения Тогда
		СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения = ЭтоОбязательныйДляЗаполненияРеквизит;
	КонецЕсли;
	
	Если Не СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании Тогда
		СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании =
			ЭтоОбязательноОтображаемыйРеквизит(Объект, СтрокаРеквизитовДляКонтроля.ИмяРеквизита, "Номенклатура", Ложь, ЭтоОбязательныйДляЗаполненияРеквизит);
	КонецЕсли;
	
	Если ЭтоРеквизитРекомендуемыйДляКонтроляУникальности
		И ЭтоНоваяСтрока Тогда
		СтрокаРеквизитовДляКонтроля.Уникален = Истина;
		СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании = Истина;
		СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Истина;
	ИначеЕсли ЭтоНеиспользуемыйДляКонтроляРеквизит
		Или ЭтоНеиспользуемыйДляКонтроляТип Тогда
		СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Ложь;
		СтрокаРеквизитовДляКонтроля.Уникален = Ложь;
	Иначе
		СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Истина;
	КонецЕсли;
	
	СтрокаРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита(Объект,
																												СтрокаРеквизитовДляКонтроля,
																												ВладелецРеквизита);

		
	СтрокаРеквизитовДляКонтроля.ДоступностьОтображатьПриСоздании   = ДоступноИзменениеНастройкиОтображенияРеквизита(Объект,
																													СтрокаРеквизитовДляКонтроля,
																													ВладелецРеквизита);
КонецПроцедуры

Функция ОбязательныйДляЗаполненияРеквизит(Объект, Реквизит) Экспорт
	
	ИмяРеквизита = Реквизит.Имя;
	
	ОбязательныйДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
	
	Если ИмяРеквизита = "ШаблонЦенника" Или ИмяРеквизита = "ШаблонЭтикетки" Тогда
		ОбязательныйДляЗаполнения = Ложь;
	ИначеЕсли ИмяРеквизита = "ЕдиницаИзмерения" Тогда
		ОбязательныйДляЗаполнения = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар)
									Или (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ИначеЕсли ИмяРеквизита = "Принципал" Тогда
		ОбязательныйДляЗаполнения = (Объект.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме)
										ИЛИ (Объект.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.Партнером);
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		ОбязательныйДляЗаполнения = (Объект.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.Партнером)
	КонецЕсли;
	
	Возврат ОбязательныйДляЗаполнения;
	
КонецФункции

Функция ЭтоОбязательноОтображаемыйРеквизит(Объект, ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит, ЗаполнятьОбязательно)
	
	Если ЭтоДопРеквизит Тогда
		Возврат ЗаполнятьОбязательно;
	КонецЕсли;
	
	Если ЗаполнятьОбязательно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
        
		ОбязательноОтображаемыеРеквизиты = Справочники.Номенклатура.ОбязательноОтображаемыеПриСозданииРеквизиты(
            Объект.ТипНоменклатуры,
			Объект.ВариантОказанияУслуг
        );
		ОбязательноОтображаемый = (ОбязательноОтображаемыеРеквизиты.Найти(ИмяРеквизита) <> Неопределено);
		
		Возврат ОбязательноОтображаемый;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоРеквизитРекомендуемыйДляКонтроляУникальности(Объект, ИмяРеквизита) Экспорт
    
    Возврат Ложь;
КонецФункции

Функция ИменаРеквизитовДляФормыНастройкаСоставаРеквизитовСерии(Событие) Экспорт
	
	//Событие: СохранениеРезультатов,ОткрытиеФормыРедактирования
    
	ИменаРеквизитов = "ИспользоватьНомерСерии,ИспользоватьСрокГодностиСерии,"
					  +	"ТочностьУказанияСрокаГодностиСерии,НастройкаИспользованияСерий";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

Процедура УдалитьРеквизитДляКонтроля(Объект, ИмяРеквизита, ВладелецРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	КоллекцияРеквизитовДляКонтроля = КоллекцияРеквизитовДляКонтроля(Объект, ВладелецРеквизита);
	
	НайденныеСтроки = КоллекцияРеквизитовДляКонтроля.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаТаблицыРеквизитов = НайденныеСтроки[0];
		КоллекцияРеквизитовДляКонтроля.Удалить(СтрокаТаблицыРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьРеквизитДляОтбора(Объект, ИмяРеквизита, ВладелецРеквизита)
	
	КоллекцияРеквизитовОтбора = КоллекцияРеквизитовОтбора(Объект, ВладелецРеквизита); 
	
	МассивСтрок = КоллекцияРеквизитовОтбора.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицыРеквизитов = МассивСтрок[0];
		КоллекцияРеквизитовОтбора.Удалить(СтрокаТаблицыРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииФлагаУникален(Объект, ВладелецРеквизита, ИдентификаторСтрокиТаблицы) Экспорт
	
	КоллекцияРеквизитовДляКонтроля = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовДляКонтроля(Объект, ВладелецРеквизита);
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ВидыНоменклатуры") Тогда
		ТекущиеДанные = КоллекцияРеквизитовДляКонтроля[ИдентификаторСтрокиТаблицы];
	Иначе	
		ТекущиеДанные = КоллекцияРеквизитовДляКонтроля.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
		
	Если ВладелецРеквизита <> "СерииНоменклатуры" 
		И ТекущиеДанные.Уникален Тогда
		ТекущиеДанные.ОбязателенДляЗаполнения = Истина;
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
		
	// Если тип реквизита - Булево, то не включать контроль заполнения.
	Если ТекущиеДанные.ЭтоДопРеквизит Тогда
		
		ТипЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Свойство, "ТипЗначения");
		
		Если ТипЗначения = ОписаниеТиповБулево Тогда
			ТекущиеДанные.ОбязателенДляЗаполнения = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ВладелецРеквизита = "Номенклатура" Тогда
			
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ТекущиеДанные.ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если Реквизит.Тип = ОписаниеТиповБулево Тогда
				ТекущиеДанные.ОбязателенДляЗаполнения = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВладелецРеквизита <> "СерииНоменклатуры" Тогда 
		ТекущиеДанные.ДоступностьОтображатьПриСоздании = Справочники.ВидыНоменклатуры.ДоступноИзменениеНастройкиОтображенияРеквизита(Объект,
												   																						ТекущиеДанные,
												   																						ВладелецРеквизита);
		//
	КонецЕсли;

	ТекущиеДанные.ДоступностьОбязателенДляЗаполнения =  Справочники.ВидыНоменклатуры.ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита(Объект,
																ТекущиеДанные,
																ВладелецРеквизита);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДляКонтроля(Объект, ВладелецРеквизитов) Экспорт
	
	ЭтоРеквизитыХарактеристик = ВладелецРеквизитов = "ХарактеристикиНоменклатуры";
	
	Если ЭтоРеквизитыХарактеристик
		И Не Объект.ИспользоватьХарактеристики Тогда
		Возврат;
	КонецЕсли;
    
	ЗависимостьОтТипаНоменклатуры = Справочники.Номенклатура.ЗависимостьРеквизитовОтТипаНоменклатуры(
        Объект.ТипНоменклатуры,
		Ложь, // ИспользоватьСрокГодностиСерии
		Объект.ВариантОказанияУслуг,
		Объект.ИспользоватьХарактеристики,
		ЭтоРеквизитыХарактеристик,
        Объект.ВестиУчетПоГТД,
        Ложь, // ИзмеряетсяТолькоВСуммовомВыражении
        Объект.ПодакцизныйТовар
    );
    
    РеквизитыОтключенныеПоФО = Справочники.Номенклатура.РеквизитыОтключенныеПоФО(ЭтоРеквизитыХарактеристик);
		
	Для Каждого НастройкаОтТипа из ЗависимостьОтТипаНоменклатуры Цикл
		
		Если НастройкаОтТипа.ДействиеСРеквизитом = "Добавить"
			И РеквизитыОтключенныеПоФО.Найти(НастройкаОтТипа.Реквизит.Имя) = Неопределено Тогда
			ДобавитьРеквизитДляКонтроляИОтбораНоменклатуры(Объект, НастройкаОтТипа.Реквизит, ВладелецРеквизитов);			
		Иначе
			УдалитьРеквизитДляКонтроля(Объект, НастройкаОтТипа.Реквизит.Имя, ВладелецРеквизитов);
			УдалитьРеквизитДляОтбора(Объект, НастройкаОтТипа.Реквизит.Имя, ВладелецРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВладелецРеквизитов = "ХарактеристикиНоменклатуры" Тогда
		Объект.РеквизитыДляКонтроляХарактеристик.Сортировать("ПредставлениеРеквизита");
	Иначе
		Объект.РеквизитыДляКонтроляНоменклатуры.Сортировать("ПредставлениеРеквизита");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДопРеквизитыДляКонтроляИОтбора(Объект, НазначениеДопРеквизитов) Экспорт
	
	Если НазначениеДопРеквизитов = "ХарактеристикиНоменклатуры"
		И Не Объект.ИспользоватьХарактеристики Тогда
		Объект.РеквизитыБыстрогоОтбораХарактеристик.Очистить();
		Объект.РеквизитыДляКонтроляХарактеристик.Очистить();
		Возврат;
	ИначеЕсли НазначениеДопРеквизитов = "СерииНоменклатуры"
		И Не Объект.ИспользоватьСерии Тогда
		Объект.РеквизитыДляКонтроляСерий.Очистить();
		Возврат;
	КонецЕсли;
	
	ТипыНеИспользуемыеДляКонтроля = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы();
	
	СвойстваДляЗаполнения = "Уникален, ОбязателенДляЗаполнения, ОтображатьПриСоздании, ДоступностьУникален, ДоступностьОбязателенДляЗаполнения, ДоступностьОтображатьПриСоздании";
	
	Отбор = Новый Структура("Свойство, ЭтоДопРеквизит");
		
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ВсеДопРеквизиты = Справочники.Номенклатура.ВсеДополнительныеРеквизиты(Объект.Ссылка, НазначениеДопРеквизитов);
	
	РеквизитыДляКонтроля    = КоллекцияРеквизитовДляКонтроля(Объект, НазначениеДопРеквизитов);
	РеквизитыБыстрогоОтбора = КоллекцияРеквизитовОтбора(Объект, НазначениеДопРеквизитов);
	
	УдаляемыеСтроки = Новый Массив;
	
	Для каждого ДопРеквизит из РеквизитыДляКонтроля Цикл
		Если Не ДопРеквизит.ЭтоДопРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, ДопРеквизит);
		
		Если ВсеДопРеквизиты.НайтиСтроки(Отбор).Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(ДопРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрМас из УдаляемыеСтроки Цикл
		РеквизитыДляКонтроля.Удалить(СтрМас);
	КонецЦикла;
	
	Если РеквизитыБыстрогоОтбора <> Неопределено Тогда
		УдаляемыеСтроки = Новый Массив;
		
		Для каждого ДопРеквизит из РеквизитыБыстрогоОтбора Цикл
			Если Не ДопРеквизит.ЭтоДопРеквизит Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Отбор, ДопРеквизит);
			
			Если ВсеДопРеквизиты.НайтиСтроки(Отбор).Количество() = 0 Тогда
				УдаляемыеСтроки.Добавить(ДопРеквизит);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрМас из УдаляемыеСтроки Цикл
			РеквизитыБыстрогоОтбора.Удалить(СтрМас);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДопРеквизит Из ВсеДопРеквизиты Цикл
		
		ТипЗначения = ДопРеквизит.Тип;
		ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(ТипЗначения) <> Неопределено);
		ТипРеквизитаБулево = (ТипЗначения = ОписаниеТиповБулево);
		
		ЗаполнитьЗначенияСвойств(Отбор, ДопРеквизит);
		
		НайденныеСтроки = РеквизитыДляКонтроля.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		// Добавить доп.реквизит в таблицу реквизитов номенклатуры.
		СтрокаРеквизитовДляКонтроля = РеквизитыДляКонтроля.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, ДопРеквизит);
		
		Если ДопРеквизит.ЗаполнятьОбязательно Тогда
			СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения = Истина;
			Если НазначениеДопРеквизитов <> "СерииНоменклатуры" Тогда
				СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании   = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЭтоНеиспользуемыйДляКонтроляТип
			И НазначениеДопРеквизитов <> "СерииНоменклатуры" Тогда
			СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникОбъект.ВидыНоменклатуры") Тогда
			ПриИзмененииФлагаУникален(Объект, НазначениеДопРеквизитов, СтрокаРеквизитовДляКонтроля.НомерСтроки - 1);
		Иначе
			ПриИзмененииФлагаУникален(Объект, НазначениеДопРеквизитов, СтрокаРеквизитовДляКонтроля.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КоллекцияРеквизитовДляКонтроля(ТекущийОбъект, ТипВладельцаНабораЭлементов) Экспорт
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляНоменклатуры;
	ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляХарактеристик;
	ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляСерий;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КоллекцияРеквизитовОтбора(ТекущийОбъект, ТипВладельцаНабораЭлементов) Экспорт
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат ТекущийОбъект.РеквизитыБыстрогоОтбораНоменклатуры;
	ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
		Возврат ТекущийОбъект.РеквизитыБыстрогоОтбораХарактеристик;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ИспользоватьПроизводство() Экспорт
	
	ИспользоватьПроизводство = Ложь; //Для УТ
	
	
	Возврат ИспользоватьПроизводство;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецЕсли

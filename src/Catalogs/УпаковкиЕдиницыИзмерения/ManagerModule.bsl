
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
//Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("Числитель");
	Результат.Добавить("Знаменатель");
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("Родитель");
	Результат.Добавить("КоличествоУпаковок");
	Результат.Добавить("ТипУпаковки");
	Результат.Добавить("ТипИзмеряемойВеличины");
	Возврат Результат;
КонецФункции

//Ищет упаковку идентичную переданной упаковке, если не находит - создает упаковку для переданной номенклатуры
//
//	Параметры:
//		НоменклатураИсходногоКачества - СправочникСслыка.Номенклатура - номенклатура, среди упаковок производится поиск
//		Номенклатура - СправочникСсылка.Номенклатура - владелец новой упаковки
//		УпаковкаВДокументе - СправочникСсылка.Упаковки - упаковка качественного товара, по которой ищется идентичная упаковка
//			некачественного товара
//	Возвращаемое значение:
//		СправочникСсылка.УпаковкиЕдиницыИзмерения
//
Функция ИндентичнаяУпаковка(НоменклатураИсходногоКачества, Номенклатура, УпаковкаВДокументе) Экспорт
	
	Если ЗначениеЗаполнено(УпаковкаВДокументе) Тогда
		ЗапросПоУпаковке = Новый Запрос;
		ЗапросПоУпаковке.УстановитьПараметр("Ссылка", УпаковкаВДокументе);
		ЗапросПоУпаковке.УстановитьПараметр("Номенклатура", Номенклатура);
		ЗапросПоУпаковке.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УпаковкаНекачественногоТовара.Ссылка КАК УпаковкаНекачественногоТовара
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкаКачественногоТовара
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкаНекачественногоТовара
		|		ПО &ТекстЗапросаКоэффициентУпаковки1 = &ТекстЗапросаКоэффициентУпаковки2
		|			И УпаковкаКачественногоТовара.ЕдиницаИзмерения = УпаковкаНекачественногоТовара.ЕдиницаИзмерения
		|			И УпаковкаКачественногоТовара.СкладскаяГруппа = УпаковкаНекачественногоТовара.СкладскаяГруппа
		|ГДЕ
		|	УпаковкаКачественногоТовара.Ссылка = &Ссылка
		|	И УпаковкаНекачественногоТовара.Владелец = ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|				ТОГДА &Номенклатура
		|			ИНАЧЕ ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НаборУпаковок
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	УпаковкаНекачественногоТовара.Наименование,
		|	УпаковкаНекачественногоТовара.Ссылка";
		
		ЗапросПоУпаковке.Текст = СтрЗаменить(ЗапросПоУпаковке.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкаКачественногоТовара", Неопределено));
			
		ЗапросПоУпаковке.Текст = СтрЗаменить(ЗапросПоУпаковке.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкаНекачественногоТовара", Неопределено));
			
		ВыборкаПоУпаковке = ЗапросПоУпаковке.Выполнить().Выбрать();
		Если ВыборкаПоУпаковке.Следующий() Тогда
			НайденнаяУпаковка = ВыборкаПоУпаковке.УпаковкаНекачественногоТовара;
		Иначе
			НайденнаяУпаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяУпаковка)
			//если у некачественной номенклатуры не индивидуальные упаковки, то создавать их автоматически мы не будем
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура,"НаборУпаковок") <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			
			Возврат НайденнаяУпаковка;
		КонецЕсли;
	Иначе
		Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;	
	
	ЗапросПоУпаковкам = Новый Запрос;
	ЗапросПоУпаковкам.Текст =
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Наименование КАК Наименование,
	|	УпаковкиЕдиницыИзмерения.Безразмерная КАК Безразмерная,
	|	УпаковкиЕдиницыИзмерения.Высота КАК Высота,
	|	УпаковкиЕдиницыИзмерения.Глубина КАК Глубина,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ЛинейныеРазмерыПредставление КАК ЛинейныеРазмерыПредставление,
	|	УпаковкиЕдиницыИзмерения.СкладскаяГруппа КАК СкладскаяГруппа,
	|	УпаковкиЕдиницыИзмерения.Типоразмер КАК Типоразмер,
	|	УпаковкиЕдиницыИзмерения.Ширина КАК Ширина,
	|	УпаковкиЕдиницыИзмерения.Представление КАК Представление,
	|	УпаковкиЕдиницыИзмерения.Числитель,
	|	УпаковкиЕдиницыИзмерения.Знаменатель,
	|	УпаковкиЕдиницыИзмерения.Вес,
	|	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Объем,
	|	УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаВДокументе";
			
	ЗапросПоУпаковкам.УстановитьПараметр("УпаковкаВДокументе", УпаковкаВДокументе);
	ВыборкаПоУпаковкам = ЗапросПоУпаковкам.Выполнить().Выбрать();
	
	ВыборкаПоУпаковкам.Следующий();
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяУпаковка = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяУпаковка, ВыборкаПоУпаковкам);
	
	//Упаковка может быть только индивидульной
	НоваяУпаковка.Владелец = Номенклатура;
	НоваяУпаковка.Записать();
	
	Возврат НоваяУпаковка.Ссылка;
КонецФункции

// Заполняет список выбора упаковок по параметрам выбора, предварительно список очищается.
// Пример вызова из обработчиков форм:
//	Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьСписокВыбора(Элементы.Упаковка.СписокВыбора,
//		Новый Структура("Номенклатура, ДобавлятьПустуюУпаковку", Объект.Номенклатура, Истина));
Процедура ЗаполнитьСписокВыбора(СписокВыбора, ПараметрыВыбора) Экспорт
	СписокВыбора.Очистить();
	Для Каждого ЭлементВыбора Из Справочники.УпаковкиЕдиницыИзмерения.ПолучитьДанныеВыбора(ПараметрыВыбора) Цикл
		СписокВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление, ЭлементВыбора.Пометка, ЭлементВыбора.Картинка);
	КонецЦикла;
КонецПроцедуры

// Отображает единицу измерения номенклатуры как подсказку ввода в поле упаковки
//
// Параметры:
//  Номенклатура		 - СправочникСсылка.Номенклатура 
//  ПолеВводаУпаковки	 - ПолеВвода 
//
Процедура ОтобразитьИнформациюОЕдиницеХранения(Номенклатура, ПолеВводаУпаковки) Экспорт
	
	ПолеВводаУпаковки.ПодсказкаВвода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
КонецПроцедуры

// Функция - Текст запроса коэффициента упаковки
//
// Параметры:
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)" или "ТаблицаТовары.Упаковка"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура" или "ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"
// 
// Возвращаемое значение:
//   - 
//
Функция ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ИсточникНоменклатуры)  Тогда 
		
		ТекстЗапроса = 
		"ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,1) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаТовары.Упаковка.Числитель,1) / ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,1) КАК Число(15,7))
		|	ИНАЧЕ NULL
		|КОНЕЦ";
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫБОР
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|				И ТаблицаТовары.Номенклатура.ВесИспользовать
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|				И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|				И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|				И ТаблицаТовары.Номенклатура.ДлинаИспользовать
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|			ТОГДА 1
		|		ИНАЧЕ NULL
		|	КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса коэффициента упаковки
//
// Параметры:
//  ИсточникУпаковки	 - Строка	 - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)"
//  ИсточникНоменклатуры - Строка	 - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки
//  	должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//  	Например, "ТаблицаТовары.Номенклатура"
//  ВесУпаковкиВЕдиницеКонстанты	 - 	Булево	- если ЛОЖЬ, то текст запроса вернет вес в кг, иначе - в константе - единице измерения веса . 
// 
// Возвращаемое значение:
//  Строка - строка текста запроса, которая вернет вес либо в единице константы, либо в кг (см. параметр ВесУпаковкиВЕдиницеКонстанты)
//
Функция ТекстЗапросаВесУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, ВесУпаковкиВЕдиницеКонстанты = Истина) Экспорт 
	
	Если ИсточникНоменклатуры = Неопределено Тогда 
		
		ТекстЗапроса = "ВЫРАЗИТЬ((ЕСТЬNULL(ТаблицаТовары.Упаковка.Вес, 0) * (ЕСТЬNULL(ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Знаменатель,1)) / &КоличествоКгВЕдиницеИзмеренияВеса) КАК Число(15,7))";		
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель) * (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель) * (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель) * (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Вес * ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|					ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель * (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			ИНАЧЕ 0
		|		КОНЕЦ / (ВЫРАЗИТЬ(&КоличествоКгВЕдиницеИзмеренияВеса КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))";
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	Если ВесУпаковкиВЕдиницеКонстанты Тогда
		ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ВызватьИсключение НСтр("ru='Не задано значение константы ""Единица измерения веса"". Обратитесь к администратору.';uk='Не задано значення константи ""Одиниця вимірювання ваги"". Зверніться до адміністратора.'");
		КонецЕсли;
		СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияВеса, "Числитель, Знаменатель");
		КоличествоКгВЕдиницеИзмеренияВеса = СтруктураРезультат.Числитель / СтруктураРезультат.Знаменатель;		
	Иначе
		КоличествоКгВЕдиницеИзмеренияВеса = 1; 		
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоКгВЕдиницеИзмеренияВеса", Формат(КоличествоКгВЕдиницеИзмеренияВеса, "ЧРД=.; ЧГ=0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса коэффициента упаковки
//
// Параметры:
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура"
//  ВесУпаковкиВЕдиницеКонстанты	 - 	Булево	- если ЛОЖЬ, то текст запроса вернет объем в м3, иначе - в константе - единице измерения объема. 
// 
// Возвращаемое значение:
//  Строка - строка текста запроса, которая вернет объем либо в единице константы, либо в м3 (см. параметр ВесУпаковкиВЕдиницеКонстанты)
//
Функция ТекстЗапросаОбъемУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, ОбъемУпаковкиВЕдиницеКонстанты = Истина) Экспорт 
	
	Если ИсточникНоменклатуры = Неопределено Тогда
		
		ТекстЗапроса = "ВЫРАЗИТЬ((ЕСТЬNULL(ТаблицаТовары.Упаковка.Объем, 0) * (ЕСТЬNULL(ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Знаменатель,1)) / &КоличествоКубометровВЕдиницеИзмеренияОбъема) КАК Число(15,7))";		
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель) * (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель) * (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель) * (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Объем * ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|					ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель * (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			ИНАЧЕ 0
		|		КОНЕЦ / (ВЫРАЗИТЬ(&КоличествоКубометровВЕдиницеИзмеренияОбъема КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))";
		
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	Если ОбъемУпаковкиВЕдиницеКонстанты Тогда
		ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияОбъема) Тогда
			ВызватьИсключение НСтр("ru='Не задано значение константы ""Единица измерения объема"". Обратитесь к администратору.';uk='Не задане значення константи ""Одиниця вимірювання об''єму"". Зверніться до адміністратора.'");
		КонецЕсли;
		СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияОбъема, "Числитель, Знаменатель");
		КоличествоКубометровВЕдиницеИзмеренияОбъема = СтруктураРезультат.Числитель / СтруктураРезультат.Знаменатель;	 
	Иначе
		КоличествоКубометровВЕдиницеИзмеренияОбъема = 1;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоКубометровВЕдиницеИзмеренияОбъема", Формат(КоличествоКубометровВЕдиницеИзмеренияОбъема, "ЧРД=.; ЧГ=0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса значение реквизита единицы измерения
//
// Параметры:
//	ИмяРеквизита		 -	Строка - Имя реквизата единицы измерения, значение которого необходимо получить.
//							Для получения ссылки на единицу измерения следует передать значение "Ссылка".
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ТаблицаТовары.Упаковка"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура"
// 
// Возвращаемое значение:
//  Строка - текст для подстановки в запрос.
//
Функция ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(ИмяРеквизита, ИсточникУпаковки, ИсточникНоменклатуры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИсточникНоменклатуры) Тогда
		
		ТекстЗапроса = 
		"ВЫБОР
		|	КОГДА ЕСТЬNULL(ТаблицаТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА NULL
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА ТаблицаТовары.Упаковка.ЕдиницаИзмерения#ИмяРеквизита
		|	ИНАЧЕ ТаблицаТовары.Упаковка#ИмяРеквизита
		|КОНЕЦ";
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫБОР
		|	КОГДА ЕСТЬNULL(ТаблицаТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения#ИмяРеквизита
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА ТаблицаТовары.Упаковка.ЕдиницаИзмерения#ИмяРеквизита
		|	ИНАЧЕ ТаблицаТовары.Упаковка#ИмяРеквизита
		|КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Если ИмяРеквизита = "Ссылка" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизита", "");
	Иначе
		
		Реквизиты = РеквизитыЕдиницыИзмерения();
		Если Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизита", "." + ИмяРеквизита);
		Иначе
			ВызватьИсключение НСтр("ru='Некорректное значение параметра [1] метода Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения.';uk='Некоректне значення параметра [1] методу Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыизмерения.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция - Значения веса объема коэффициента прочих реквизитов упаковки
//
// Параметры:
//  Упаковка							 - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка, реквизиты которой нужно получить
//  Номенклатура						 - СправочникСсылка.Номенклатура			 - обязательно для указания, если упаковка НЕ типа "Упаковка"
//  ПрочиеРеквизиты						 - Строка									 - названия других реквизитов через запятую. Не допускается вложенное обращение (например, "Родитель.Наименование" - нельзя).
//  ВесОбъемУпаковкиВЕдиницеКонстанты	 - Булево 									 - если ЛОЖЬ, то текст запроса вернет объем в м3 и вес в кг, иначе - в константе - единице измерения веса / объема.
// 
// Возвращаемое значение:
//  Структура - структура со значениями коэффициента, веса в константе - единице измерения веса, объема в константе - единице измерения объема и прочих реквизитов упаковки
//
Функция КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка, Номенклатура, ПрочиеРеквизиты = "", ВесОбъемУпаковкиВЕдиницеКонстанты = Истина) Экспорт 
	
	Результат = Новый Структура("Вес, Объем, Коэффициент" + ?(ЗначениеЗаполнено(ПрочиеРеквизиты), "," + ПрочиеРеквизиты, ""), 0, 0, 0);
	СтрокаПрочихРеквизитов = "";
	
	Результат.Вставить("НужноОкруглятьКоличество", Ложь);
	Если Не ЗначениеЗаполнено(Упаковка) Тогда
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Результат.Коэффициент = 1;
			Возврат Результат;
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Коэффициент,
			|	Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличиныДляПроверки,
			|	&ТекстЗапросаВесУпаковки КАК Вес,
			|	&ТекстЗапросаОбъемУпаковки КАК Объем
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Номенклатура";
			ИсточникНоменклатуры = "Номенклатура";
			ИсточникУпаковки = "Номенклатура.ЕдиницаИзмерения"
		КонецЕсли;
	Иначе
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрочиеРеквизиты, ",",,Истина);
		
		Если Реквизиты.Найти("ТипИзмеряемойВеличины") = Неопределено Тогда
			Реквизиты.Добавить("ТипИзмеряемойВеличины");
		КонецЕсли;
		
		Для Каждого Реквизит Из Реквизиты Цикл
			СтрокаПрочихРеквизитов = СтрокаПрочихРеквизитов + "Упаковка." + Реквизит + " КАК " + Реквизит;
			Если Реквизиты.Найти(Реквизит) <> Реквизиты.ВГраница() Тогда
				СтрокаПрочихРеквизитов = СтрокаПрочихРеквизитов + ",";
			КонецЕсли;
			СтрокаПрочихРеквизитов = СтрокаПрочихРеквизитов + Символы.ПС + Символы.Таб;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Упаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличиныДляПроверки,
			|	&ПрочиеРеквизиты,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
			|	&ТекстЗапросаВесУпаковки КАК Вес,
			|	&ТекстЗапросаОбъемУпаковки КАК Объем
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковка
			|ГДЕ
			|	Упаковка.Ссылка = &УпаковкаЕдиницаИзмерения";
			
			ИсточникНоменклатуры = Неопределено;
			ИсточникУпаковки = "Упаковка";
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Упаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличиныДляПроверки,
			|	&ПрочиеРеквизиты,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
			|	&ТекстЗапросаВесУпаковки КАК Вес,
			|	&ТекстЗапросаОбъемУпаковки КАК Объем
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО (Упаковка.Ссылка = &УпаковкаЕдиницаИзмерения)
			|			И (Номенклатура.Ссылка = &Номенклатура)";
			
			ИсточникНоменклатуры = "Номенклатура";
			ИсточникУпаковки = "Упаковка";
		КонецЕсли;
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаКоэффициентУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки,
																										ИсточникНоменклатуры));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаВесУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковки,
																							ИсточникНоменклатуры, 
																							ВесОбъемУпаковкиВЕдиницеКонстанты));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаОбъемУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковки,
																								ИсточникНоменклатуры, 
																								ВесОбъемУпаковкиВЕдиницеКонстанты));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПрочиеРеквизиты", 		СтрокаПрочихРеквизитов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		НужноОкруглять = ЗначениеЗаполнено(Номенклатура) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения.ТипИзмеряемойВеличины") = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
			И (Выборка.ТипИзмеряемойВеличиныДляПроверки = Перечисления.ТипыИзмеряемыхВеличин.Вес																									
			Или Выборка.ТипИзмеряемойВеличиныДляПроверки = Перечисления.ТипыИзмеряемыхВеличин.Длина																									
			Или Выборка.ТипИзмеряемойВеличиныДляПроверки = Перечисления.ТипыИзмеряемыхВеличин.Объем																									
			Или Выборка.ТипИзмеряемойВеличиныДляПроверки = Перечисления.ТипыИзмеряемыхВеличин.Площадь);																									
		Результат.НужноОкруглятьКоличество = НужноОкруглять;
	КонецЕсли;
	

	Возврат Результат;
	
КонецФункции

// Функция - Коэффициент упаковки
//
// Параметры:
//  Упаковка	 - 	СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка, коэффициент которой нужно получить
//  Номенклатура - 	СправочникСсылка.Номенклатура - обязательно для указания, если упаковка НЕ типа "Упаковка"
// 
// Возвращаемое значение:
//  Число - коэффициент упаковки
//
Функция КоэффициентУпаковки(Упаковка, Номенклатура) Экспорт 
	
	Если Не ЗначениеЗаполнено(Упаковка) Тогда
		Возврат 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
		|	Упаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковка
		|ГДЕ
		|	Упаковка.Ссылка = &УпаковкаЕдиницаИзмерения";
		
		ИсточникНоменклатуры = Неопределено;
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
		|	Упаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (Номенклатура.Ссылка = &Номенклатура)
		|			И (Упаковка.Ссылка = &УпаковкаЕдиницаИзмерения)";
		ИсточникНоменклатуры =  "Номенклатура";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаКоэффициентУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Упаковка",ИсточникНоменклатуры));

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.Упаковка
			И Номенклатура = Неопределено Тогда
			ТекстИсключения = НСтр("ru='Для расчета коэффициента упаковки нужно передать номенклатуру.';uk='Для розрахунку коефіцієнта упаковки потрібно передати номенклатуру.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Коэффициент = Выборка.Коэффициент;
		
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

// Функция - Это мерная упковка
//
// Параметры:
//  ЕдиницаИзмерения -  СправочникСсылка.УпаковкиЕдиницыИзмерения
//  ВозвращаемыйПараметрТипИзмеряемойВеличины - Строка - возвращаемый параметр, тип измеряемой величины
// 
// Возвращаемое значение:
//  Булево - признак того, является ли Упаковка - мерной 
//
Функция ЭтоМернаяЕдиница(ЕдиницаИзмерения, ВозвращаемыйПараметрТипИзмеряемойВеличины = "") Экспорт 
	
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ТипЕдиницыЗначение = Неопределено;
	Иначе
		ТипЕдиницыЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "ТипИзмеряемойВеличины");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЕдиницыЗначение) Тогда
		ВозвращаемыйПараметрТипИзмеряемойВеличины = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипЕдиницыЗначение);
	Иначе
		ВозвращаемыйПараметрТипИзмеряемойВеличины = "";
	КонецЕсли;
	
	Если ВозвращаемыйПараметрТипИзмеряемойВеличины = "Вес"
		Или ВозвращаемыйПараметрТипИзмеряемойВеличины = "Объем"
		Или ВозвращаемыйПараметрТипИзмеряемойВеличины = "Площадь"
		Или ВозвращаемыйПараметрТипИзмеряемойВеличины = "Длина" Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция получает перечень кодов единиц измерения и по этим кодам ищет единицы в справочнике.
// Если их нет, то создает элементы справочника в соответствии с классификатором единиц.
//
// Параметры:
//  СтрокаКодов - Строка - Строка с кодами единиц измерения через запятую
//
// Возвращаемое значение:
//  Соответствие
//		Ключ - Код единицы измерения по классификатору единиц
//		Значение - ссылка на единицу измерения или Неопределено, если такого кода нет в классификаторе единиц
// 
Функция ЗаполнитьЕдиницыИзмеренияИзКлассификатора(СтрокаКодов, РежимОбновления = Ложь) Экспорт
	
	Соответствие = Новый Соответствие;
	Дерево = ПолучитьДанныеКлассификатора();
	
	МассивКодов = СтрРазделить(СтрокаКодов, ",", Ложь);
	
	Для Каждого Код Из МассивКодов Цикл
		
		СуществующийЭлемент = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(Код);
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			
			СтуруктураПоиска = Новый Структура("КодЧисловой", Код);
			СтрокаДерева = Дерево.Строки.НайтиСтроки(СтуруктураПоиска, Истина);
			
			Если СтрокаДерева.Количество() > 0 Тогда
				СвойстваЕдИзмерения = СтрокаДерева[0];
				
				СправочникОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				
				Если ЗначениеЗаполнено(СвойстваЕдИзмерения.УсловноеОбозначениеНациональное) Тогда
					Наименование = СвойстваЕдИзмерения.УсловноеОбозначениеНациональное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное) Тогда
					Наименование = СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное;
				Иначе
					Наименование = СвойстваЕдИзмерения.Наименование;
				КонецЕсли;
				
				СправочникОбъект.Наименование            = СтрЗаменить(Наименование,Символы.ПС,"/");
				СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное,Символы.ПС,"/");
				СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СвойстваЕдИзмерения.Наименование,Символы.ПС,"/");
				СправочникОбъект.Код                     = СвойстваЕдИзмерения.КодЧисловой;
				СправочникОбъект.Числитель               = СвойстваЕдИзмерения.Числитель;
				СправочникОбъект.Знаменатель             = СвойстваЕдИзмерения.Знаменатель;
				СправочникОбъект.Владелец				 = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
				
				Если ЗначениеЗаполнено(СвойстваЕдИзмерения.ТипИзмеряемойВеличины) Тогда
					СправочникОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин[СвойстваЕдИзмерения.ТипИзмеряемойВеличины];
				КонецЕсли;
				Если РежимОбновления Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				Иначе
					СправочникОбъект.Записать();
				КонецЕсли;
				
				Соответствие.Вставить(Код, СправочникОбъект.Ссылка);
			Иначе
				Соответствие.Вставить(Код, Неопределено);
			КонецЕсли;
		Иначе
			Соответствие.Вставить(Код, СуществующийЭлемент);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Устанавливает значения реквизитов по умолчанию в зависимости от типа упаковки / ед. измерения и других параметров.
//
// Параметры:
//  Упаковка - ДанныеФормыСтруктура, СправочникОбъект.УпаковкиЕдиницыИзмерения - упаковка / единица измерения, в которой нужно настроить значения реквизитов в зависимости от типа и прочих параметров.
//
Процедура ОтработатьЛогикуСвязиРеквизитов(Упаковка) Экспорт
	
	Если Упаковка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
		Упаковка.Безразмерная  = Ложь;
		Упаковка.Высота  = 0;
		Упаковка.Ширина  = 0;
		Упаковка.Глубина = 0;
		Упаковка.Объем   = 0;
		Упаковка.ЛинейныеРазмерыПредставление = "";
		Упаковка.ВесЕдиницаИзмерения = Неопределено;
		Упаковка.ВысотаЕдиницаИзмерения = Неопределено;
		Упаковка.ГлубинаЕдиницаИзмерения = Неопределено;
		Упаковка.ЕдиницаИзмерения = Неопределено;
		Упаковка.ОбъемЕдиницаИзмерения = Неопределено;
		Упаковка.СкладскаяГруппа = Неопределено;
		Упаковка.СкладскаяГруппа = Неопределено;
		Упаковка.Типоразмер = Неопределено;
		Упаковка.ШиринаЕдиницаИзмерения = Неопределено;
		Упаковка.КоличествоУпаковок = 0;
		Упаковка.ПоставляетсяВМногооборотнойТаре = Ложь;
		Упаковка.НоменклатураМногооборотнаяТара = Неопределено;
		Упаковка.ХарактеристикаМногооборотнаяТара = Неопределено;
		Упаковка.МинимальноеКоличествоУпаковокМногооборотнойТары = 0;
		Упаковка.ТипУпаковки = Неопределено;
	Иначе	
		Упаковка.Код = "";
		Упаковка.НаименованиеПолное = "";
		Упаковка.МеждународноеСокращение = "";
		
		Если Упаковка.Безразмерная Тогда
			Упаковка.Высота  = 0;
			Упаковка.Ширина  = 0;
			Упаковка.Глубина = 0;
			Упаковка.Объем   = 0;
			
			Упаковка.ЛинейныеРазмерыПредставление = НСтр("ru='Безразмерная';uk='Безрозмірна'");
		Иначе
			Упаковка.ЛинейныеРазмерыПредставление = Строка(Упаковка.Высота) + " X " + Строка(Упаковка.Ширина) + " X " + Строка(Упаковка.Глубина);
		КонецЕсли;
		
		Если Упаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Составная Тогда
			Если ЗначениеЗаполнено(Упаковка.Родитель) Тогда 
				Результат   = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка.Родитель,
					Неопределено,
					"Числитель");
				Упаковка.Числитель   = Результат.Числитель * Упаковка.КоличествоУпаковок;
				Упаковка.Знаменатель = 1;
			КонецЕсли;
		ИначеЕсли Упаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка Тогда
			Упаковка.Родитель           = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Упаковка.КоличествоУпаковок = 0;
			Упаковка.Числитель          = 1;
			
			Упаковка.ПоставляетсяВМногооборотнойТаре   = Ложь;
			Упаковка.НоменклатураМногооборотнаяТара    = Неопределено;
			Упаковка.ХарактеристикаМногооборотнаяТара  = Неопределено;
		ИначеЕсли Упаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная Тогда
			Упаковка.Родитель           = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Упаковка.КоличествоУпаковок = 0;
			Упаковка.Знаменатель        = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	НоменклатураВызовСервера.УпаковкиЕдиницыИзмеренияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	НоменклатураВызовСервера.УпаковкиЕдиницыИзмеренияОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция СформироватьНаименование(ТипУпаковки, ЕдиницаИзмерения, Числитель, Знаменатель, ЕдиницаИзмеренияВладельца) Экспорт
	
	Если ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная 
		И Числитель / Знаменатель = 1 Тогда
		Возврат СокрЛП(ЕдиницаИзмерения);
	ИначеЕсли ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка Тогда
		Возврат СокрЛП(СокрЛП(ЕдиницаИзмерения) + " (" + Формат(Числитель, "ЧРД=.") + "/" + Формат(Знаменатель, "ЧРД=.") + " " + СокрЛП(ЕдиницаИзмеренияВладельца) + ")");
	Иначе
		Возврат СокрЛП(СокрЛП(ЕдиницаИзмерения) + " (" + Формат(Числитель / Знаменатель,"ЧРД=.") + " " + СокрЛП(ЕдиницаИзмеренияВладельца) + ")");
	КонецЕсли;

КонецФункции

Процедура СкопироватьИерархиюУпаковок(СтарыйВладелец, НовыйВладелец) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Наименование,
	|	УпаковкиЕдиницыИзмерения.Безразмерная,
	|	УпаковкиЕдиницыИзмерения.Вес,
	|	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Высота,
	|	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Глубина,
	|	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
	|	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель,
	|	УпаковкиЕдиницыИзмерения.ЛинейныеРазмерыПредставление,
	|	УпаковкиЕдиницыИзмерения.Объем,
	|	УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.СкладскаяГруппа,
	|	УпаковкиЕдиницыИзмерения.Типоразмер,
	|	УпаковкиЕдиницыИзмерения.Ширина,
	|	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Представление,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок,
	|	УпаковкиЕдиницыИзмерения.ТипУпаковки КАК ТипУпаковки,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК СсылкаДляКонтроля,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК СсылкаДляЛистовДерева,
	|	УпаковкиЕдиницыИзмерения.ПоставляетсяВМногооборотнойТаре,
	|	УпаковкиЕдиницыИзмерения.НоменклатураМногооборотнаяТара,
	|	УпаковкиЕдиницыИзмерения.ХарактеристикаМногооборотнаяТара,
	|	УпаковкиЕдиницыИзмерения.МинимальноеКоличествоУпаковокМногооборотнойТары,
	|	УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины,
	|	УпаковкиЕдиницыИзмерения.НаименованиеПолное,
	|	УпаковкиЕдиницыИзмерения.МеждународноеСокращение
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|ИТОГИ ПО
	|	СсылкаДляКонтроля ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Владелец", СтарыйВладелец);
	
	ДеревоУпаковок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрДрв из ДеревоУпаковок.Строки Цикл
		
		Если СтрДрв.Наименование <> Null Тогда
			
			УпаковкаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(УпаковкаОбъект,СтрДрв);
			
			УпаковкаОбъект.Владелец = НовыйВладелец;
			УпаковкаОбъект.Записать();
			
			СтрДрв.СсылкаДляЛистовДерева = УпаковкаОбъект.Ссылка;	
						
		КонецЕсли;
		
		ЗаписатьИерархиюУпаковок(СтрДрв.Строки, НовыйВладелец);

	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаписатьИерархиюУпаковок(СтрокиТекущегоУровня, ВладелецУпаковок)
	Для Каждого СтрДрв из СтрокиТекущегоУровня Цикл
		
		Если СтрДрв.СсылкаДляКонтроля = СтрДрв.Родитель.СсылкаДляКонтроля Тогда
			Продолжить;
		КонецЕсли;
		
		УпаковкаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(УпаковкаОбъект,СтрДрв);
		
		УпаковкаОбъект.Владелец = ВладелецУпаковок;
		
		Если СтрДрв.Родитель <> Неопределено Тогда
			УпаковкаОбъект.Родитель = СтрДрв.Родитель.СсылкаДляЛистовДерева;
		КонецЕсли;	
			
		УпаковкаОбъект.Записать();
		
		СтрДрв.СсылкаДляЛистовДерева = УпаковкаОбъект.Ссылка;
		
		ЗаписатьИерархиюУпаковок(СтрДрв.Строки, ВладелецУпаковок);
	КонецЦикла;	
КонецПроцедуры

Функция БазовыеЕдиницыИзмерения() Экспорт
	
	ЕдиницыИзмерения = Новый Структура;
	ЕдиницаИзмеренияДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
	ЕдиницыИзмерения.Вставить("ВысотаЕдиницаИзмерения",  ЕдиницаИзмеренияДлины);
	ЕдиницыИзмерения.Вставить("ШиринаЕдиницаИзмерения",  ЕдиницаИзмеренияДлины);
	ЕдиницыИзмерения.Вставить("ГлубинаЕдиницаИзмерения", ЕдиницаИзмеренияДлины);
	ЕдиницыИзмерения.Вставить("ОбъемЕдиницаИзмерения",   Константы.ЕдиницаИзмеренияОбъема.Получить());
	ЕдиницыИзмерения.Вставить("ВесЕдиницаИзмерения",   Константы.ЕдиницаИзмеренияВеса.Получить());
	Возврат ЕдиницыИзмерения;
	
КонецФункции

Функция РеквизитыЕдиницыИзмерения()
	
	Результат = Новый Массив;
	
	Результат.Добавить("Код");
	Результат.Добавить("Наименование");
	Результат.Добавить("НаименованиеПолное");
	Результат.Добавить("МеждународноеСокращение");
	Результат.Добавить("ТипИзмеряемойВеличины");
	Результат.Добавить("Знаменатель");
	Результат.Добавить("Числитель");
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТаблицуВариантовПереупаковкиНаСервере(Владелец) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Источник,
	|	УпаковкиЕдиницыИзмерения.Родитель КАК Упаковка,
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.КоличествоУпаковок = 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
	|		ИНАЧЕ УпаковкиЕдиницыИзмерения.КоличествоУпаковок
	|	КОНЕЦ КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК МаксимальнаяУпаковкаВВетви
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
	|	И Не УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаВариантовПереупаковки = ТаблицаУпаковок.СкопироватьКолонки();
	ТекущаяИерархия = ТаблицаУпаковок.СкопироватьКолонки();
	
	ЗаполнитьВариантыПереупаковки(ТаблицаУпаковок, ТаблицаВариантовПереупаковки, ТекущаяИерархия, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	//Переупаковка в пустую упаковку используется только для мерных единиц хранения
	ТипИзмеряемойВеличиныВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец,"ЕдиницаИзмерения.ТипИзмеряемойВеличины");
	
	Если Не (ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.Вес
		Или ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.Объем
		Или ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.Площадь
		Или ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.Длина) Тогда
		
		Отбор = Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		УдаляемыеСтроки = ТаблицаВариантовПереупаковки.НайтиСтроки(Отбор);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ТаблицаВариантовПереупаковки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаВариантовПереупаковки;
	
КонецФункции

Процедура ЗаполнитьВариантыПереупаковки(ТаблицаУпаковок, ТаблицаВариантовПереупаковки, ТекущаяИерархия, Упаковка)
	
	Отбор = Новый Структура("Упаковка", Упаковка);
	Строки = ТаблицаУпаковок.НайтиСтроки(Отбор);
    Если Строки.Количество() = 0 Тогда
		Если Не ЗначениеЗаполнено(Упаковка) Тогда
			Возврат;
		КонецЕсли;
        
		//Конечный элемент в дереве, можно заполнять максимальную упаковку в ветви
		Для Каждого СтрокаИерархии Из ТекущаяИерархия Цикл
			НоваяСтрока = ТаблицаВариантовПереупаковки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИерархии);
			НоваяСтрока.МаксимальнаяУпаковкаВВетви = Упаковка;
        КонецЦикла;
        
		НоваяСтрока = ТаблицаВариантовПереупаковки.Добавить();
		НоваяСтрока.Упаковка = Упаковка;
		НоваяСтрока.МаксимальнаяУпаковкаВВетви = Упаковка;
		НоваяСтрока.Количество = 1;
	Иначе
		Для Каждого Строка Из Строки Цикл
			
			ИерархияУпаковок = ТекущаяИерархия.Скопировать();
			
			Отбор = Новый Структура("Источник", Строка.Упаковка);
			СтрокиПереупаковки = ТекущаяИерархия.НайтиСтроки(Отбор);
			//Переупаковка из упаковки источника в меньшие упаковки
			Для Каждого СтрокаПереупаковки Из СтрокиПереупаковки Цикл
				НоваяСтрока = ИерархияУпаковок.Добавить();
				НоваяСтрока.Упаковка = СтрокаПереупаковки.Упаковка;
				НоваяСтрока.Источник = Строка.Источник;
				НоваяСтрока.Количество = СтрокаПереупаковки.Количество * Строка.Количество;
			КонецЦикла;
			
			//Переупаковка из упаковки истоника в текущую упаковку
			НоваяСтрока = ИерархияУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
			//Переупаковка из упаковок больше источника
			ЗаполнитьВариантыПереупаковки(ТаблицаУпаковок, ТаблицаВариантовПереупаковки, ИерархияУпаковок, Строка.Источник);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


// Обработчик обновления BAS УТ 3.2.2
Процедура ОбъединитьЕдиницыИзмеренияИУпаковкиЗаменитьСсылки() Экспорт
	
	Дерево = ПолучитьДанныеКлассификатора();
	Соответствие = Новый Соответствие;
	Для Каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Для Каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
			Для Каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаУровень3.ТипИзмеряемойВеличины) Тогда
					СтруктураРеквизитов = Новый Структура("ТипИзмеряемойВеличины,Числитель,Знаменатель",
						Перечисления.ТипыИзмеряемыхВеличин[СтрокаУровень3.ТипИзмеряемойВеличины]);
					ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, СтрокаУровень3,,"ТипИзмеряемойВеличины");
					Соответствие.Вставить(СокрЛП(СтрокаУровень3.КодЧисловой), СтруктураРеквизитов);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Дерево ="";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УдалитьЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.УдалитьУпаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)";
	
	// Если возможно, перенесем единицы измерения с теми же уникальными идентификаторами.
	// Проверим пересечение идентификаторов упаковок и единиц измерения (пересечение могло произойти из-за обменов, например УТ-РТ)
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	СсылкиДляПроверки = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СсылкиДляПроверки.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Выборка.Ссылка.УникальныйИдентификатор()));
    КонецЦикла;
    
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	Ссылка В (&СсылкиДляПроверки)
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СсылкиДляПроверки", СсылкиДляПроверки);
	СуществующиеСсылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		НовыйОбъектСсылка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(Выборка.Ссылка.УникальныйИдентификатор());
		НовыйОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		Если СуществующиеСсылки.Найти(НовыйОбъектСсылка) <> Неопределено Тогда
			НовыйОбъектСсылка = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку();
		КонецЕсли;
		НовыйОбъект.УстановитьСсылкуНового(НовыйОбъектСсылка);
		НовыйОбъект.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
		
		ОбъектЕдиницаИзмерения = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектЕдиницаИзмерения.УдалитьУпаковка = НовыйОбъектСсылка;
		ОбъектЕдиницаИзмерения.ПометкаУдаления = Истина;
		
		ЗаполнитьЗначенияСвойств(НовыйОбъект, ОбъектЕдиницаИзмерения, "Код,Наименование,НаименованиеПолное,МеждународноеСокращение");
		НовыйОбъект.ТипИзмеряемойВеличины = ОбъектЕдиницаИзмерения.ТипЕдиницыИзмерения;
		
		ДанныеКлассификатора = Соответствие.Получить(СокрЛП(ОбъектЕдиницаИзмерения.Код));
		Если ДанныеКлассификатора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НовыйОбъект, ДанныеКлассификатора); // Числитель, Знаменатель, ТипИзмеряемойВеличины
		КонецЕсли;
		
		НачатьТранзакцию();
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйОбъект);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектЕдиницаИзмерения);
		
		СоответствиеСсылок = Новый Соответствие;
		СоответствиеСсылок.Вставить(ОбъектЕдиницаИзмерения.Ссылка, НовыйОбъектСсылка);
		
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	Если ТипЗнч(ЕдиницаИзмеренияВеса) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда 
			ЕдиницаИзмеренияУпаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмеренияВеса,"УдалитьУпаковка");
			Константы.ЕдиницаИзмеренияВеса.Установить(ЕдиницаИзмеренияУпаковка);
			
			РеквизитыУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияУпаковка, "Числитель,Знаменатель");
			
			Если РеквизитыУпаковки.Числитель = 0
				Или РеквизитыУпаковки.Знаменатель = 0 Тогда
				
				КоэффициентПересчетаВКГ = Константы.УдалитьКоэффициентПересчетаВТонны.Получить() * 1000;
				
				ЕдиницаИзмеренияУпаковкаОбъект = ЕдиницаИзмеренияУпаковка.ПолучитьОбъект();
				Если КоэффициентПересчетаВКГ <> 0 Тогда
					
					Если КоэффициентПересчетаВКГ < 1 Тогда
						
						ЕдиницаИзмеренияУпаковкаОбъект.Числитель   = 1;
						ЕдиницаИзмеренияУпаковкаОбъект.Знаменатель = 1 / КоэффициентПересчетаВКГ;
						
					Иначе
						
						ЕдиницаИзмеренияУпаковкаОбъект.Числитель   = КоэффициентПересчетаВКГ;
						ЕдиницаИзмеренияУпаковкаОбъект.Знаменатель = 1;
						
					КонецЕсли;	
				Иначе
					ЕдиницаИзмеренияУпаковкаОбъект.Числитель   = 1;
					ЕдиницаИзмеренияУпаковкаОбъект.Знаменатель = 1;
					
				КонецЕсли;
				
				ЕдиницаИзмеренияУпаковкаОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Вес;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЕдиницаИзмеренияУпаковкаОбъект);
				
			КонецЕсли;
		Иначе
            Константы.ЕдиницаИзмеренияВеса.Установить(Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("0301")); // Килограмм
		КонецЕсли;
		
	КонецЕсли;
	
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	Если  ТипЗнч(ЕдиницаИзмеренияОбъема) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияОбъема) Тогда 
			ЕдиницаИзмеренияУпаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмеренияОбъема,"УдалитьУпаковка");
			Константы.ЕдиницаИзмеренияОбъема.Установить(ЕдиницаИзмеренияУпаковка);
			
			РеквизитыУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияУпаковка, "Числитель,Знаменатель");
			
			Если РеквизитыУпаковки.Числитель = 0
				Или РеквизитыУпаковки.Знаменатель = 0 Тогда
				
				КоэффициентПересчетаВМ3 = Константы.УдалитьКоэффициентПересчетаВКубическиеМетры.Получить();
				
				ЕдиницаИзмеренияУпаковкаОбъект = ЕдиницаИзмеренияУпаковка.ПолучитьОбъект();
				Если КоэффициентПересчетаВМ3 <> 0 Тогда
					
					Если КоэффициентПересчетаВМ3 < 1 Тогда
						
						ЕдиницаИзмеренияУпаковкаОбъект.Числитель   = 1;
						ЕдиницаИзмеренияУпаковкаОбъект.Знаменатель = 1 / КоэффициентПересчетаВМ3;
						
					Иначе
						
						ЕдиницаИзмеренияУпаковкаОбъект.Числитель   = КоэффициентПересчетаВМ3;
						ЕдиницаИзмеренияУпаковкаОбъект.Знаменатель = 1;
						
					КонецЕсли;	
				Иначе
					ЕдиницаИзмеренияУпаковкаОбъект.Числитель   = 1;
					ЕдиницаИзмеренияУпаковкаОбъект.Знаменатель = 1;
				КонецЕсли;
				ЕдиницаИзмеренияУпаковкаОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Объем;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЕдиницаИзмеренияУпаковкаОбъект);
			КонецЕсли;
		Иначе
            Константы.ЕдиницаИзмеренияОбъема.Установить(Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("0134")); // Кубический метр 
		КонецЕсли;
	КонецЕсли;
	
	ЕдиницаИзмеренияДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
	Если  ТипЗнч(ЕдиницаИзмеренияДлины) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияДлины) Тогда 
			ЕдиницаИзмеренияУпаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмеренияДлины,"УдалитьУпаковка");
			Константы.ЕдиницаИзмеренияДлины.Установить(ЕдиницаИзмеренияУпаковка);
			
			РеквизитыУпаковки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияУпаковка, "Числитель,Знаменатель");
			
			Если РеквизитыУпаковки.Числитель = 0
				Или РеквизитыУпаковки.Знаменатель = 0 Тогда
				ЕдиницаИзмеренияУпаковкаОбъект = ЕдиницаИзмеренияУпаковка.ПолучитьОбъект();
				
				ЕдиницаИзмеренияУпаковкаОбъект.Числитель   = 1;
				ЕдиницаИзмеренияУпаковкаОбъект.Знаменатель = 1;
				
				ЕдиницаИзмеренияУпаковкаОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Длина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЕдиницаИзмеренияУпаковкаОбъект);
			КонецЕсли;
		Иначе			
            Константы.ЕдиницаИзмеренияДлины.Установить(Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("0101")); // Метр 
		КонецЕсли;		
	КонецЕсли;
	
	Константы.ДопустимоеОтклонениеПриОкругленииКоличества.Установить(3);
	
	// Для заполнения единицы площади: 0123 - м2; для заполнения единиц в транспорте: 0134 - м3, 0306 - тонны.
	Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора("0123,0134,0306", Истина);
    Константы.ЕдиницаИзмеренияПлощади.Установить(Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("0123")); // Квадратный метр
	
	Справочники.НаборыУпаковок.ОбновитьДляУказанияКоличестваВРазличныхЕдиницах();
	
	Справочники.Номенклатура.ОбновитьДляУказанияКоличестваВРазличныхЕдиницах();
	
	Справочники.ВидыНоменклатуры.ОбновитьДляУказанияКоличестваВРазличныхЕдиницах();
	
	Справочники.ТипоразмерыЯчеек.ЗаполнитьЕдиницыИзмерения();
	
	Справочники.ТипоразмерыУпаковок.ЗаполнитьЕдиницыИзмерения();
    
	
	ОбновитьУпаковкиДляУказанияКоличестваВРазличныхЕдиницах();
	
КонецПроцедуры

Процедура ОбновитьУпаковкиДляУказанияКоличестваВРазличныхЕдиницах()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.УдалитьУпаковка КАК ЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.УдалитьУпаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.УдалитьУпаковка.ТипИзмеряемойВеличины <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения ССЫЛКА Справочник.УдалитьЕдиницыИзмерения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ТипИзмеряемойВеличины) Тогда
			ЕдиницаИзмеренияОбъект = Выборка.ЕдиницаИзмерения.ПолучитьОбъект();
			ЕдиницаИзмеренияОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЕдиницаИзмеренияОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Упаковки.Ссылка КАК Ссылка,
	|	ЕдиницыИзмерения.УдалитьУпаковка КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмерения.УдалитьУпаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличиныЕдиницыИзмерения,
	|	Упаковки.Владелец.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличиныВладельца
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО Упаковки.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьЕдиницыИзмерения КАК ЕдиницыИзмеренияПроверка
	|		ПО Упаковки.Ссылка = ЕдиницыИзмеренияПроверка.УдалитьУпаковка
	|ГДЕ
	|	Упаковки.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
	|	И Упаковки.Владелец <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)
	|	И ЕдиницыИзмеренияПроверка.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Упаковки.Числитель УБЫВ";
	
	ЕдиницыИзмерения = БазовыеЕдиницыИзмерения();
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕдиницаУпаковкаСсылка = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СпрОбъект,ЕдиницыИзмерения);
		
		Если Не ЗначениеЗаполнено(Выборка.ТипИзмеряемойВеличиныЕдиницыИзмерения)
			Или Выборка.ТипИзмеряемойВеличиныЕдиницыИзмерения <> Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук Тогда
            Если Не ЗначениеЗаполнено(ЕдиницаУпаковкаСсылка) Тогда
				Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора("2102", Истина); // Паковання (упаковка)
				ЕдиницаУпаковкаСсылка = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("2102");
			КонецЕсли;
			СпрОбъект.ЕдиницаИзмерения = ЕдиницаУпаковкаСсылка;
		Иначе
			СпрОбъект.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		
		СпрОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Упаковка;
		
		Если СпрОбъект.УдалитьСостоитИзДругихУпаковок Тогда
			СпрОбъект.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Составная;
			СпрОбъект.Знаменатель = 1;
			Если СпрОбъект.Числитель = 0 Тогда
				Если СпрОбъект.КоличествоУпаковок = 0 Тогда
					СпрОбъект.КоличествоУпаковок = 1;
					СпрОбъект.Числитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СпрОбъект.Родитель, "Числитель");
				Иначе
					СпрОбъект.Числитель = СпрОбъект.КоличествоУпаковок * ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СпрОбъект.Родитель, "Числитель");
				КонецЕсли;
				
				Если СпрОбъект.Числитель = 0 Тогда
					СпрОбъект.Числитель = 1;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если СпрОбъект.Числитель = 0 Тогда
				СпрОбъект.Числитель = 1;
				СпрОбъект.Знаменатель = 1;
				СпрОбъект.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
			ИначеЕсли СпрОбъект.Числитель < 1
				И Выборка.ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук Тогда
				СпрОбъект.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка;
				СпрОбъект.Знаменатель = 1 / СпрОбъект.Числитель;
				СпрОбъект.Числитель = 1;
			Иначе
				СпрОбъект.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная;
				СпрОбъект.Знаменатель = 1;
			КонецЕсли;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.2
// Вызывается из обработчиков обновления ЗаменитьСсылкиЕдиницИзмерения документов 
Процедура ЗаменитьСсылкиЕдиницИзмеренияВОбъекте(Данные, СоответствиеЕдиницыУпаковки, ИмяТЧ = "") Экспорт

	// Данные между чтением и записью могли быть изменены, будем проверять
	Для Каждого Стр Из Данные[ИмяТЧ] Цикл
		Если ТипЗнч(Стр.ЕдиницаИзмерения) <> Тип("СправочникСсылка.УдалитьЕдиницыИзмерения") Тогда
			Продолжить;
		КонецЕсли;
		Если СоответствиеЕдиницыУпаковки.Получить(Стр.ЕдиницаИзмерения) = Неопределено Тогда
			СоответствиеЕдиницыУпаковки.Вставить(Стр.ЕдиницаИзмерения, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ЕдиницаИзмерения,"УдалитьУпаковка"));
		КонецЕсли;
		Стр.ЕдиницаИзмерения = СоответствиеЕдиницыУпаковки[Стр.ЕдиницаИзмерения];
	КонецЦикла;
	
КонецПроцедуры


// Функция возвращает дерево значений с данными классификатора единиц из макета хранимого в конфигурации
//
Функция ПолучитьДанныеКлассификатора() Экспорт

	
	КлассификаторXML = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Наименование",                             Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("КодЧисловой",                              Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("УсловноеОбозначениеНациональное",          Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("УсловноеОбозначениеМеждународное",         Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("КодСОЕИ",                                  Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("ТипИзмеряемойВеличины",                  	Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Числитель",                  				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Дерево.Колонки.Добавить("Знаменатель",                  			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	
	Для Каждого КлассификаторЗапись Из КлассификаторТаблица Цикл
		
		Если КлассификаторЗапись.Level = "1" Тогда
			СтрокаУровень1 = Дерево.Строки.Добавить();
			НоваяСтрока = СтрокаУровень1;
		ИначеЕсли КлассификаторЗапись.Level = "2" Тогда
			СтрокаУровень2 = СтрокаУровень1.Строки.Добавить();		
			НоваяСтрока = СтрокаУровень2;
		Иначе
			НоваяСтрока = СтрокаУровень2.Строки.Добавить();		
		КонецЕсли;
		
		НоваяСтрока.Наименование                        = КлассификаторЗапись.Name;
		НоваяСтрока.КодЧисловой                         = КлассификаторЗапись.CodeNum;
		НоваяСтрока.УсловноеОбозначениеНациональное     = КлассификаторЗапись.ShortNameN;
		НоваяСтрока.УсловноеОбозначениеМеждународное	= КлассификаторЗапись.ShortNameI;
		НоваяСтрока.КодСОЕИ                             = КлассификаторЗапись.CodeSOEI;
		
		НоваяСтрока.ТипИзмеряемойВеличины               = КлассификаторЗапись.UnitType;
		НоваяСтрока.Числитель                           = КлассификаторЗапись.Numerator;
		НоваяСтрока.Знаменатель                         = КлассификаторЗапись.Denominator;
		
	КонецЦикла;	
	
	Возврат Дерево;

КонецФункции

Процедура ЗаполнитьВладельцевУНекорректныхЕдиницИзмерений() Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО УпаковкиЕдиницыИзмерения.Владелец = Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
	|		ПО УпаковкиЕдиницыИзмерения.Владелец = НаборыУпаковок.Ссылка
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И Номенклатура.Ссылка ЕСТЬ NULL 
	|	И НаборыУпаковок.Ссылка ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Дерево = ПолучитьДанныеКлассификатора();
	
	Пока Выборка.Следующий() Цикл
		
		ЕдиницаИзмеренияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЕдиницаИзмеренияОбъект.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
		
		// Если тип измеряемой величины не заполнен, но есть код по ОКЕИ, тогда попробуем восстановить тип из классификатора
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияОбъект.ТипИзмеряемойВеличины) И ЗначениеЗаполнено(ЕдиницаИзмеренияОбъект.Код) Тогда 
			СтруктураПоиска = Новый Структура("КодЧисловой", ЕдиницаИзмеренияОбъект.Код);
			СтрокаДерева = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			Если СтрокаДерева.Количество() > 0 И ЗначениеЗаполнено(СтрокаДерева[0].ТипИзмеряемойВеличины) Тогда
				ЕдиницаИзмеренияОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин[СтрокаДерева[0].ТипИзмеряемойВеличины];
				ЕдиницаИзмеренияОбъект.Числитель = СтрокаДерева[0].Числитель;
				ЕдиницаИзмеренияОбъект.Знаменатель = СтрокаДерева[0].Знаменатель;
			КонецЕсли;			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЕдиницаИзмеренияОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

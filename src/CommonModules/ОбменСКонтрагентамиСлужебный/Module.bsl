////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Регистрация объектов для обмена электронными документами

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - Объект - владелец присоединенного файла.
//  Отказ           - Булево - признак отказа от записи.
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ОбменСКонтрагентамиВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	// ЭД делаем только когда есть действующее соглашение об обмене
	Если (Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение)
		И Не ТипИсточника = Тип("ДокументОбъект.ПакетЭД") Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		
		Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьДействующееСоглашение(ПараметрыЭД) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ЭлектронноеВзаимодействиеСлужебный.ПроверитьМодификациюОбъектаДляОбменаЭД(Источник);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла,
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ОбменСКонтрагентамиВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗарегистрироватьОбъект")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЗарегистрироватьОбъект Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЭтоНовыйОбъект") Тогда
		РедактированиеРазрешено = Истина;
		ОбменСКонтрагентамиПереопределяемый.ПроверитьВозможностьРедактированияОбъекта(Источник.Ссылка,
			РедактированиеРазрешено);
		Если НЕ РедактированиеРазрешено Тогда
			ТекстСообщения = НСтр("ru='Существует электронный документ. Изменение ключевых реквизитов документа запрещено.';uk='Існує електронний документ. Зміна ключових реквізитів документа заборонено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// При изменении ключевых реквизитов объекта устанавливается новая версия электронного документа.
	ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение электронных документов

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - Объект - электронный документ.
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.НаправлениеЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВидЭД)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		Возврат;
	ИначеЕсли Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда
		Если Источник.Ссылка.Ответственный <> Источник.Ответственный ИЛИ Источник.Ссылка.Описание <> Источник.Описание Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
	Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - Объект - электронный документ.
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		 И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
	Если Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
	 ИЛИ Источник.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеВерсииЭД = Неопределено;
	
	Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД") Тогда
		СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка);
	КонецЕсли;
	
	ВерсияЭДОбновлена = Ложь;
	ПринудительнаяСменаСостоянияВерсии = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
	ВерсияФорматаПакета = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
	ОтклонениеАннулирования = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ОтклонениеАннулирования", ОтклонениеАннулирования);

	Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
		
		СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
		СтруктураТекВерсииЭД  = ПолучитьСтруктуруВерсииЭД(Источник.ВладелецФайла);
		
		ОбновитьВерсию = СостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД;
		Если ОбновитьВерсию Тогда
			ВерсияЭДОбновлена = Истина;
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьВерсиюЭД(Источник.Ссылка, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета, ОтклонениеАннулирования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получает выборку элементов справочника ЭДПрисоединенныеФайлы по отбору.
//
// Параметры:
//  Параметры - Структура - ключ - название реквизита отбора, значение - значение отбора.
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ 
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Только для внутреннего использования
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчете(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьНесколькоОрганизацийЭД")
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Источник.Метаданные())
		И Не ЗначениеЗаполнено(Источник.Организация) Тогда
		
		Источник.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru='Не удалось заполнить поле ""Организация"". В информационной базе введено несколько организаций,
                                             |Включите функциональную опцию ""Использовать несколько организаций""!'
                                             |;uk='Не вдалося заповнити поле ""Організація"". В інформаційній базі введено кілька організацій,
                                             |Увімкніть функціональну опцію ""Використовувати кілька організацій""!'");
			Иначе
				ВызватьИсключение НСтр("ru='Не удалось заполнить поле ""Организация"". Возможно, в информационной базе не введено ни одной организации!';uk='Не вдалося заповнити поле ""Організація"". Можливо, в інформаційній базі не введено жодної організації!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Выполняет регламентное задание по получению новых электронных документов.
//
// Параметры:
//  ОписаниеОшибки - строка, описание ошибки, в случае ее возникновения в ходе получения документов.
//
Процедура РегламентноеПолучениеНовыхЭД() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru='Работа регламентного задания в режиме сервиса не предусмотрена.';uk='Робота регламентного завдання в режимі сервісу не передбачена.'");
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru='Начато регламентное задание по получению новых эл.документов.';uk='Розпочато регламентне завдання з отримання нових ел.документів.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		Текст, 4, УровеньЖурналаРегистрации.Информация);
	
	Попытка
		СоотвСоглашений = Неопределено;
		КоличествоПакетов = 0; КолРаспакованныхЭД = 0;
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.ДоступныПараметрыДляАвторизацииНаСервереОператора( , СоотвСоглашений) Тогда
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашений);
			НовыеДокументы = ПолучитьНовыеЭД(СоотвСоглашений);
			КоличествоПакетов = НовыеДокументы.МассивПакетовЭД.Количество();
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ДополнитьПакетамиКРаспаковке(НовыеДокументы.МассивПакетовЭД);
			
			// Распаковываем принятые пакеты с электронными документами.
			ОбменСКонтрагентамиСлужебныйВызовСервера.РаспаковатьПакетыЭДНаСервере(НовыеДокументы.МассивПакетовЭД, КолРаспакованныхЭД);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru='Закончено регламентное задание.
                                    |Получено пакетов: %1. Распаковано: %2.'
                                    |;uk='Закінчене регламентне завдання.
                                    |Отримано пакунків: %1. Распаковано: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПакетов, КолРаспакованныхЭД);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 4,
			УровеньЖурналаРегистрации.Информация);
	Исключение
		
		Операция = НСтр("ru='Регламентное получение электронных документов';uk='Регламентне одержання електронних документів'");
		
		ШаблонСообщения = НСтр("ru='При процессе выполнении произошла ошибка: %1';uk='При процесі виконання сталася помилка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке электронных документов.
Процедура РегламентнаяОтправкаОформленныхЭД() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru='Работа регламентного задания в режиме сервиса не предусмотрена.';uk='Робота регламентного завдання в режимі сервісу не передбачена.'");
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru='Начато регламентное задание по отправке оформленных эл.документов.';uk='Розпочато регламентне завдання по відправці оформлених ел.документів.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	
	Попытка
		КоличествоПакетов = ОтправкаСформированныхЭД();
		Текст = НСтр("ru='Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.';uk='Закінчено регламентне завдання. Відправлено пакунків: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 4, УровеньЖурналаРегистрации.Информация);
	Исключение
		ОписаниеОшибки = НСтр("ru='Во время регламентной отправки оформленных эл.документов произошла ошибка.
        |Дополнительное описание:
        |%ДополнительноеОписание%'
        |;uk='Під час регламентної відправки оформлених ел.документів сталася помилка.
        |Додатковий опис:
        |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеОшибки, 4, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

// Процедура - метод регламентного задания по проверке контрагентов в справочнике.
// 		В модели сервиса обновляет состояния контрагентов по каждой записи регистра.
// 		В локальном режима записывает недостающих контрагентов в регистр и обновляет состояния по каждой записи регистра.
Процедура ПроверитьКонтрагентовРегламентноеЗадание() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентов";

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
			
	КонецЕсли;

	// Указываем дату, на которую будет выполняться проверка.
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр.
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме.
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭП

// Только для внутреннего использования
Процедура СохранитьВместеСПоследнейЭП(ПрисоединенныйФайл,
										ДанныеФайла,

										АдресКаталога,
										СоответствиеФайлЭД) Экспорт
	
	ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		КоличествоПодписей = МассивСтруктурПодписей.Количество();
		Для Сч = 1 По КоличествоПодписей - 1 Цикл
			МассивСтруктурПодписей.Удалить(0);
		КонецЦикла;
		СохранитьПодписи(
				ПрисоединенныйФайл,
				ПолноеИмяФайла,
				МассивСтруктурПодписей,
				АдресКаталога,
				СоответствиеФайлЭД,
				Истина);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СохранитьВместеСЭП(ПрисоединенныйФайл,
								ДанныеФайла,
								АдресКаталога,
								СоответствиеФайлЭД,
								ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись.
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ПолучитьВсеПодписи(ПрисоединенныйФайл, УникальныйИдентификатор);
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодписьДокумента Из ЭлектронныйДокумент.ЭлектронныеПодписи Цикл
		ДвоичныеДанныеПодписи = ПодписьДокумента.Подпись.Получить();
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИспользоватьКриптоСредства() Экспорт
	
	Отказ = Ложь;
	ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Возврат НЕ Отказ;
	
КонецФункции

// Сертификаты электронных документов

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаЭДО, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке или профилю сертификатов.
//
// Параметры:
//  МассивОтпечатков - Массив - содержит строки отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//                     (в зависимости от настроек работы с криптографией).
//  ПрофильНастроекЭДО - СправочникСсылка.ПрофилиНастроекЭДО, СправочникСсылка.НастройкиЭДО - список сертификатов
//                       по которой требуется получить.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатков, НастройкаЭДО = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	Если ТипЗнч(МассивОтпечатков) = Тип("Массив") Тогда
		ЗапросПоСертификатам = Новый Запрос;
		Если ТипЗнч(НастройкаЭДО) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
			|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
			|		ПО СоглашенияЭДСертификаты.Сертификат = Сертификаты.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|		ПО СоглашенияЭДСертификаты.Ссылка = СоглашенияОбИспользованииЭД.Ссылка
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.Ссылка = &НастройкаЭДО
			|	И Сертификаты.Отпечаток В(&МассивОтпечатков)";
			ЗапросПоСертификатам.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
		ИначеЕсли ТипЗнч(НастройкаЭДО) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофильНастроекЭДОСертификаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
			|			ПО Сертификаты.Ссылка = ВидыЭДЭП.СертификатЭП
			|		ПО ПрофильНастроекЭДОСертификаты.Сертификат = Сертификаты.Ссылка
			|ГДЕ
			|	ПрофильНастроекЭДОСертификаты.Ссылка = &НастройкаЭДО
			|	И Сертификаты.Отпечаток В (&МассивОтпечатков)";
			ЗапросПоСертификатам.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|ГДЕ
			|	НЕ Сертификаты.Отозван
			|	И Сертификаты.Отпечаток В (&МассивОтпечатков)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|	И (Сертификаты.Пользователь = &ТекущийПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПустойПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
			|	И НЕ Сертификаты.ПометкаУдаления";
		
		ЗапросПоСертификатам.Текст = ТекстЗапроса;
			
		ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь",	Справочники.Пользователи.ПустаяСсылка());
		ЗапросПоСертификатам.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатков);
		ВозвращаемоеЗначение = ЗапросПоСертификатам.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивОтпечатковСертификатов - Массив - массив отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//                                 (в зависимости от настроек работы с криптографией).
//  СоглашениеЭД - СправочникСсылка - ссылка на соглашение об обмене ЭД через оператора ЭДО, список сертификатов которого требуется.
//
// Возвращаемое значение:
//  Массив - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаЭДО = Неопределено) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаЭДО);
	Для Каждого ТекЭл Из МассивОтпечатковСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток",                   ТекЭл);
		СтруктураСертификата.Вставить("Сертификат",                  СтрокаТаблицы.Ссылка);
		СтруктураСертификата.Вставить("ПарольПолучен",               СтрокаТаблицы.ПарольПолучен);
		СтруктураСертификата.Вставить("ПарольПользователя",          СтрокаТаблицы.ПарольПользователя);
		СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", СтрокаТаблицы.ЗапомнитьПарольКСертификату);
		СтруктураСертификата.Вставить("Комментарий",                 "");
		
		МассивСтруктурДоступныхСертификатов.Добавить(СтруктураСертификата);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
	|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК ЭлектронныйДокумент,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.СтатусЭД КАК СтатусЭД,
	|	СостоянияЭД.Комментарий
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НомерВерсииЭД) КАК НомерВерсииЭД
	|ПОМЕСТИТЬ МаксВерсия
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаОбъект
	|	И ЭДПрисоединенныеФайлы.НомерВерсииЭД В
	|			(ВЫБРАТЬ
	|				МаксВерсия.НомерВерсииЭД
	|			ИЗ
	|				МаксВерсия)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	КомментарийРС = "";
	ВыборкаПоРегистру = Результат[0].Выбрать();
	Если ВыборкаПоРегистру.Следующий() Тогда
		НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
		СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
		СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
		СтатусЭД          = ВыборкаПоРегистру.СтатусЭД;
		КомментарийРС     = ВыборкаПоРегистру.Комментарий;
	Иначе
		НомерВерсииЭД     = 0;
		СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		СтатусЭД          = Перечисления.СтатусыЭД.ПустаяСсылка();
	КонецЕсли;
	
	Если НомерВерсииЭД = 0 Тогда
		ВыборкаПоСправочнику = Результат[2].Выбрать();
		Если ВыборкаПоСправочнику.Количество() > 0 Тогда
			ВыборкаПоСправочнику.Следующий();
			НомерВерсииЭД    = ВыборкаПоСправочнику.НомерВерсииЭД;
			СсылкаНаДокумент = ВыборкаПоСправочнику.Ссылка;
			СтатусЭД         = ВыборкаПоСправочнику.СтатусЭД;
		КонецЕсли;
	КонецЕсли;
	СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
	СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
	СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
	СтруктураВерсииЭД.Вставить("СтатусЭД",          СтатусЭД);
	СтруктураВерсииЭД.Вставить("КомментарийРС",     КомментарийРС);
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь) Экспорт
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

// Только для внутреннего использования
Функция ДанныеСостоянияЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСостоянияЭД = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СостояниеВерсииЭД Как СостояниеВерсииЭД,
	|	СостоянияЭД.Комментарий Как Комментарий
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДанныеСостоянияЭД.Вставить("СостояниеВерсииЭД", Выборка.СостояниеВерсииЭД);
		ДанныеСостоянияЭД.Вставить("КомментарийРС", Выборка.Комментарий);
	КонецЕсли;
	
	Возврат ДанныеСостоянияЭД;
	
КонецФункции

// Только для внутреннего использования
Функция АктуальнаяВерсияФорматаЭД(ВидЭД) Экспорт
	
	Результат = Неопределено;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

// Только для внутреннего использования
Функция ПолучитьFTPСоединение(ПрофильНастроекЭДО, ЭтоТест = Ложь) Экспорт
	
	Если ЭтоТест Тогда
		ШаблонСообщения = НСтр("ru='Тест. Проверка установки FTP соединения.
            |%1'
            |;uk='Тест. Перевірка установки з''єднання FTP.
            |%1'");
	Иначе
		ШаблонСообщения = "%1";
	КонецЕсли;
		
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
				НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"АдресСервера, Логин, Пароль, Порт, ПассивноеСоединение");
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыПрофиляНастроекЭДО.АдресСервера,
											ПараметрыПрофиляНастроекЭДО.Порт,
											ПараметрыПрофиляНастроекЭДО.Логин,
											ПараметрыПрофиляНастроекЭДО.Пароль,
											Прокси,
											ПараметрыПрофиляНастроекЭДО.ПассивноеСоединение);
	Исключение
		ШаблонРезультата = НСтр("ru='%1
            |%2'
            |;uk='%1
            |%2'");
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("121");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ЭтоТест Тогда
		РезультатТеста = НСтр("ru='Пройден успешно.';uk='Пройдено успішно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат FTPСоединение;
	
КонецФункции

// Только для внутреннего использования
Процедура ПодготовитьПутьFTP(Путь) Экспорт
	Путь = СтрЗаменить(Путь, "\", "/");
	Если ЗначениеЗаполнено(Путь) Тогда
		Если НЕ Лев(Путь, 1) = "/" Тогда
			Путь = "/" + Путь;
		КонецЕсли;
		Если НЕ Прав(Путь, 1) = "/" Тогда
			Путь = Путь + "/";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура используется для проведения тестирования настроек обмена через FTP.
//
// Параметры:
//  ПрофильНастроекЭДО - СправочникСсылка.Соглашение - тестируемое соглашение.
//  КаталогВходящихДокументов - Строка - путь к каталогу обмена входящими документами.
//  КаталогИсходящихДокументов - Строка - путь к каталогу обмена исходящими документами.
//
Процедура ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов) Экспорт
	
	FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО, Истина);
	
	Если FTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru='Проверка каталога исходящих документов.
                            |%1'
                            |;uk='Перевірка каталогу вихідних документів.
                            |%1'");
	
	ТекстОшибки = "";
	Попытка
		ПодготовитьПутьFTP(КаталогИсходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогИсходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогИсходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru='Пройден успешно.';uk='Пройдено успішно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru='Тест обмена по профилю %1.';uk='Тест обміну за профілем %1.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru='Проверка записи и чтения файлов в каталоге исходящих документов.
                                    |%1'
                                    |;uk='Перевірка запису і читання файлів у каталозі вихідних документів.
                                    |%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru='Пройден успешно.';uk='Пройдено успішно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ТекстСообщения = НСтр("ru='Тест обмена по профилю %1.';uk='Тест обміну за профілем %1.'") + " " + ТекстСообщения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ШаблонСообщения = НСтр("ru='Проверка каталога входящих документов.
        |%1'
        |;uk='Перевірка каталогу вхідних документів.
        |%1'");
	Попытка
		ПодготовитьПутьFTP(КаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(КаталогВходящихДокументов);
	Исключение
		СоздатьКаталогиFTP(FTPСоединение, КаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		РезультатТеста = ТекстОшибки;
	Иначе
		РезультатТеста = НСтр("ru='Пройден успешно.';uk='Пройдено успішно.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru='Тест обмена по профилю %1.';uk='Тест обміну за профілем %1.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru='Проверка записи и чтения файлов в каталоге входящих документов.
                                    |%1'
                                    |;uk='Перевірка запису і читання файлів у каталозі вхідних документів.
                                    |%1'");
		ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			РезультатТеста = ТекстОшибки;
		Иначе
			РезультатТеста = НСтр("ru='Пройден успешно.';uk='Пройдено успішно.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ТекстСообщения = НСтр("ru='Тест обмена по профилю %1.';uk='Тест обміну за профілем %1.'") + " " + ТекстСообщения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СоздатьКаталогиFTP(FTPСоединение, ПолныйПуть, ЭтоТест = Ложь, ТекстОшибки = Неопределено) Экспорт
	
	ПолныйПуть = СтрЗаменить(ПолныйПуть, "\", "/");
	МассивКаталогов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйПуть, "/", Истина);
	ТекущийПуть = "/";
	FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
	Для Каждого Элемент Из МассивКаталогов Цикл
		
		мКаталог = Новый Массив;
		
		НайтиФайлыВКаталогеFTP(FTPСоединение, Элемент, Неопределено, Истина, ТекстОшибки, мКаталог);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		Если мКаталог.Количество() = 1 Тогда 
			Если мКаталог[0].ЭтоФайл() Тогда 
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("122");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
			СоздаватьКаталог = Ложь;
		Иначе
			СоздаватьКаталог = Истина;
		КонецЕсли;

		Если СоздаватьКаталог Тогда
			Попытка
				FTPСоединение.СоздатьКаталог(Элемент);
			Исключение
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("123");
				Если НЕ ЭтоТест Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецПопытки
		КонецЕсли;
		
		ТекущийПуть = ТекущийПуть + Элемент + "/";
		
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(ТекущийПуть);
		Исключение
			ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("124");
			Если НЕ ЭтоТест Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ЗаписатьФайлНаFTP(FTPСоединение,
							Источник,
							ИмяВыходногоФайла,
							ЭтоТест = Ложь,
							РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Записать(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("127");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

// Загружает файл с FTP источника.
//
// Параметры:
//  FTPСоединение - FTPСоединение - используемое соединение для получения файла.
//  Источник - Строка - адрес ресурса.
//  ИмяВыходногоФайла - Строка - имя файла, в который помещаются данные полученного ресурса.
//  ЭтоТест - Булево - получение файла выполняется в рамках тестирования.
//  РезультатТеста - Строка - текст ошибки, если она возникнет.
//
Процедура ПолучитьФайлСFTP(FTPСоединение, Источник, ИмяВыходногоФайла, ЭтоТест = Ложь, РезультатТеста = Неопределено) Экспорт
	
	Попытка
		FTPСоединение.Получить(Источник, ИмяВыходногоФайла);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("128");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет файл с FTP источника.
//
// Параметры:
//    FTPСоединение - FTPСоединение - используемое соединение для получения файла.
//    Путь - Строка - путь к удаляемым файлам на сервере.
//    РезультатТеста - Строка - текст ошибки, если она возникнет.
//    ЭтоТест - Булево - получение файла выполняется в рамках тестирования.
//
Процедура УдалитьФайлFTP(FTPСоединение, Путь, РезультатТеста = Неопределено, ЭтоТест = Ложь) Экспорт
	
	Попытка
		FTPСоединение.Удалить(Путь);
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("129");
		
		Если НЕ ЭтоТест Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка пакетов электронных документов

// Создает пакет электронных документов.
// 
// Параметры:
//  МассивЭД - Массив ссылок на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - булево, признак, что документы подписаны ЭП.
//
Функция СоздатьДокументыПакетовЭД(МассивЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТЗ_ПЭД = Новый ТаблицаЗначений;
	ТЗ_ПЭД.Колонки.Добавить("ПЭД");
	ТЗ_ПЭД.Колонки.Добавить("СпособОбменаЭД");
	ТЗ_ПЭД.Колонки.Добавить("АдресРесурсаПолучателя");
	ТЗ_ПЭД.Колонки.Добавить("ТребуетсяШифрованиеНаКлиенте");
	ТЗ_ПЭД.Колонки.Добавить("ВерсияФорматаПакета");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, СоглашениеЭД, НаправлениеЭД, ОтправительЭД, ПолучательЭД, ВладелецФайла");
		
		ДокументНеПодписан = РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						 ИЛИ РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан;
		Если (ПризнакПодписи И ДокументНеПодписан) ИЛИ НЕ УстановленныеПодписиВалидны(ЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск настройки ЭДО для исходящего пакета ЭД.
		Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ПолучательЭД, РеквизитыЭД.ОтправительЭД);
		ИначеЕсли РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ПараметрыНастройкиЭДО = ПолучитьНастройкиОбменаЭДПоИД(РеквизитыЭД.ОтправительЭД, РеквизитыЭД.ПолучательЭД);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыНастройкиЭДО) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭДТабличнойЧасти = Новый Массив;
		ЭДТабличнойЧасти.Добавить(ЭД);
		
		ПЭД = СоздатьПакетЭД(ПараметрыНастройкиЭДО, ЭДТабличнойЧасти);
			
		Если ЗначениеЗаполнено(ПЭД) Тогда
			НовСтрока = ТЗ_ПЭД.Добавить();
			НовСтрока.ПЭД = ПЭД;
			Если ПараметрыНастройкиЭДО.Свойство("АдресПолучателя") Тогда
				НовСтрока.АдресРесурсаПолучателя = ПараметрыНастройкиЭДО.АдресПолучателя;
			КонецЕсли;
			НовСтрока.ТребуетсяШифрованиеНаКлиенте = ПараметрыНастройкиЭДО.Свойство("ТребуетсяШифрованиеНаКлиенте")
														И ПараметрыНастройкиЭДО.ТребуетсяШифрованиеНаКлиенте;
			НовСтрока.ВерсияФорматаПакета = ПараметрыНастройкиЭДО.ВерсияФорматаПакета;
			НовСтрока.СпособОбменаЭД = ПараметрыНастройкиЭДО.СпособОбменаЭД;
			МассивПодготовленныхКОтправкеЭД.Добавить(ЭД);
		КонецЕсли;

	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте.
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТЗ_ПЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД",                    ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("АдресРесурсаПолучателя", ТекСтрока.АдресРесурсаПолучателя);
		СтруктураПЭД.Вставить("ТребуетсяШифрованиеНаКлиенте", Ложь);
		Если ТекСтрока.ТребуетсяШифрованиеНаКлиенте = Истина Тогда
			СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте = Истина;
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Продолжить;
		КонецЕсли;
		
		СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
		МассивСтруктурПЭД.Добавить(СтруктураПЭД);
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		
		Если СтруктураПараметров.Свойство("ПрофильНастроекЭДО") Тогда
			ПакетЭД.ПрофильНастроекЭДО      = СтруктураПараметров.ПрофильНастроекЭДО;
		КонецЕсли;
		
		ПакетЭД.НастройкаЭДО            = СтруктураПараметров.НастройкаЭДО;
		ПакетЭД.СпособОбменаЭД          = СтруктураПараметров.СпособОбменаЭД;
		
		ПакетЭД.ВерсияФорматаПакета     = СтруктураПараметров.ВерсияФорматаПакета;
		
		ПакетЭД.ДанныеЗашифрованы       = СтруктураПараметров.Зашифрован;
		Если СтруктураПараметров.СертификатОрганизацииДляРасшифровки <> Неопределено Тогда
			ПакетЭД.СертификатШифрования = СтруктураПараметров.СертификатОрганизацииДляРасшифровки;
		КонецЕсли;
		
		ПакетЭД.АдресРесурсаКонтрагента = СтруктураПараметров.АдресОтправителя;
		ПакетЭД.АдресРесурсаОрганизации = СтруктураПараметров.АдресПолучателя;
		
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='создание нового ПакетаЭД';uk='створення нового ПакетаЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД.Ссылка;
	
КонецФункции

// Только для внутреннего использования
Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресЗипКонтейнера) Экспорт
	
	// Так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресЗипКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресЗипКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Конверт);
	ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение,".", ""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

	НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
		ПараметрыФайла, АдресВоВременномХранилище, , , НоваяСсылкаЭД);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПакетЭД.ЭлектронныеДокументы.Количество() = 0 Тогда
		
		ШаблонОшибки = НСтр("ru='Документ %1 не был отправлен. Подробнее см. Журнал регистрации';uk='Документ %1 не був відправлений. Докладніше див. Журнал реєстрації'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ШаблонОшибки = НСтр("ru='Не корректно заполнен документ %1.
            |Не заполнена табличная часть ""ОбменСКонтрагентами""'
            |;uk='Не коректно заповнено документ %1.
            |Не заповнена таблична частина ""ОбменСКонтрагентами""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru='Отправка пакета ЭД и обновление статусов ЭД';uk='Відправлення пакету ЕД і оновлення статусів ЕД'"),
			ТекстОшибки,
			ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Попытка
		
		НачатьТранзакцию();
		
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		
		ЭД = ПакетЭД.ЭлектронныеДокументы[0];
		Если ТипЗнч(ЭД.ОбъектВладелец)=Тип("ДокументСсылка.ПроизвольныйЭД")
			И ЭД.ЭлектронныйДокумент.ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
			И (НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен
			ИЛИ НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен) Тогда
			
			Объект = ЭД.ОбъектВладелец.ПолучитьОбъект();
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД.ЭлектронныйДокумент);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий
					И ЭД.ЭлектронныйДокумент.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД.ЭлектронныйДокумент);
				КонецЕсли;
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД.ЭлектронныйДокумент);
				ИначеЕсли Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					Объект.СтатусДокумента = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД.ЭлектронныйДокумент);
				КонецЕсли;
			КонецЕсли;
			Объект.Записать();
		КонецЕсли;
		
		ПакетОбъект = ПакетЭД.ПолучитьОбъект();
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru='смена статуса пакета ЭД и обновление статусов ЭД';uk='зміна статусу пакету ЕД і оновлення статусів ЕД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Функция определяет настройки обмена ЭД
// по источнику - документу базы данных или по ЭД.
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(
				Источник,
				ВыводитьСообщения = Истина,
				МассивОтпечатковСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено,
				ФлагДействующиеСоглашения = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник, , ЭД.ВидЭД);
		
		Если ЗначениеЗаполнено(ЭД.СоглашениеЭД) Тогда
			ПараметрыЭД.СоглашениеЭД = ЭД.СоглашениеЭД;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
			ПараметрыЭД.Контрагент = ЭД.Контрагент;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			ПараметрыЭД.Организация = ЭД.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
			ПараметрыЭД.ВидЭД = ЭД.ВидЭД;
		КонецЕсли;
		
		Если ЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
			ПараметрыЭД.Вставить("ВидЭДВладельца", ЭД.ЭлектронныйДокументВладелец.ВидЭД);
		КонецЕсли;
		
		ПараметрыЭД.Вставить("УстановленныеПодписи", ЭД.ЭлектронныеПодписи.ВыгрузитьКолонку("Отпечаток"));
	Иначе
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
	КонецЕсли;
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, МассивОтпечатковСертификатов, ФлагДействующиеСоглашения);
	
	Если Результат = Неопределено Тогда
		Если ВыводитьСообщения Тогда
			ПараметрыЭД.Удалить("ИмяРеквизитаОрганизации");
			ПараметрыЭД.Удалить("ИмяРеквизитаКонтрагента");
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры:
//  ИДОтправителя - Строка - строка с уникальный идентификатор отправителя.
//  ИДПолучателя - Строка - строка с уникальный идентификатор получателя.
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
	|	НастройкиЭДОИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ЭлектроннаяПочтаКонтрагента,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатОрганизацииДляРасшифровки,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатКонтрагентаДляШифрования,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ВерсияФорматаПакета
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ПрофильНастроекЭДО",  Выборка.ПрофильНастроекЭД);
		СтруктураВозврата.Вставить("НастройкаЭДО",        Выборка.НастройкаЭДО);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("СертификатОрганизацииДляРасшифровки", Выборка.СертификатОрганизацииДляРасшифровки);
		СтруктураВозврата.Вставить("СертификатКонтрагентаДляШифрования",  Выборка.СертификатКонтрагентаДляШифрования);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		
		АдресОтправителя = Выборка.РесурсВходящихДокументов;
		АдресПолучателя  = Выборка.РесурсИсходящихДокументов;
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			АдресОтправителя = Выборка.ОбщийРесурсВходящихДокументов;
			АдресПолучателя  = Выборка.ЭлектроннаяПочтаКонтрагента;
			
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументов);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументов);
		
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументовFTP);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументовFTP)
			
		КонецЕсли;
		СтруктураВозврата.Вставить("АдресОтправителя", АдресОтправителя);
		СтруктураВозврата.Вставить("АдресПолучателя",  АдресПолучателя);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает текстовое представление электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ, текстовое представление которого необходимо получить.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Версия = СсылкаНаЭД.НомерВерсииЭД;
	Если СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И ЗначениеЗаполнено(СсылкаНаЭД.ДатаФормированияЭДОтправителем) Тогда
		Версия = СсылкаНаЭД.ДатаФормированияЭДОтправителем;
	ИначеЕсли СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И ЗначениеЗаполнено(СсылкаНаЭД.ДатаСоздания) Тогда
		Версия = СсылкаНаЭД.ДатаСоздания;
	КонецЕсли;
	ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
	ТекстДаты = ?(ЗначениеЗаполнено(СсылкаНаЭД.ДатаДокументаОтправителя),
		" от " + Формат(СсылкаНаЭД.ДатаДокументаОтправителя, "ДЛФ=D"), "");
	
	Если СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ СсылкаНаЭд.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		Представление = "" + СсылкаНаЭД.ВидЭД + ТекстДаты + ТекстВерсии;
	ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Представление = "" + СсылкаНаЭД.ТипЭлементаВерсииЭД + ТекстДаты;
	Иначе
		Представление = "" + СсылкаНаЭД.ВидЭД + " № " + СсылкаНаЭД.НомерДокументаОтправителя + ТекстДаты + ТекстВерсии;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Определяет представление электронного документа.
//
// Параметры:
//  ВидЭД - Перечисление.ВидЭД - вид электронного документа.
//  СтруктураПараметров - Структура - НомерВладельца, ДатаВладельца, ВерсияЭД.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров) Экспорт
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = " № " + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = " от " + Формат(ЗначениеСвойства, "ДЛФ=D");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru=' (версия %1)';uk=' (версія %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		ТекстВидЭД = НСтр("ru='Товарная накладная (ТОРГ-12)';uk='Товарна накладна (ТОРГ-12)'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
		ТекстВидЭД = НСтр("ru='Акт';uk='Акт'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ТекстВидЭД = НСтр("ru='Акт на передачу прав';uk='Акт на передачу прав'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		ТекстВидЭД = Строка(ВидЭД);
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		ТекстВидЭД = НСтр("ru='Счет';uk='Рахунок'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		ТекстВидЭД = НСтр("ru='Заказ товара';uk='Замовлення товару'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		ТекстВидЭД = НСтр("ru='Ответ на заказ';uk='Відповідь на замовлення'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		ТекстВидЭД = НСтр("ru='Прайс-лист';uk='Прайс-лист'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ТекстВидЭД = НСтр("ru='Каталог товаров';uk='Каталог товарів'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		ТекстВидЭД = НСтр("ru='Отчет о продажах комиссионного товара';uk='Звіт про продажі комісійного товару'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		ТекстВидЭД = НСтр("ru='Отчет о списании комиссионного товара';uk='Звіт про списання комісійного товару'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = НСтр("ru='Передача Интеркампани';uk='Передача Интеркампани'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		ТекстВидЭД = НСтр("ru='Возврат Интеркампани';uk='Повернення Интеркампани'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		ТекстВидЭД = НСтр("ru='Извещение о получении';uk='Повідомлення про одержання'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ТекстВидЭД = НСтр("ru='Произвольный электронный документ';uk='Довільний електронний документ'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Подтверждение Тогда
		ТекстВидЭД = НСтр("ru='Подтверждение';uk='Підтвердження'");
		ТипЭД = "";
		Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД) Тогда
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			 ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " даты получения";
			Иначе
				ТекстВидЭД = ТекстВидЭД + " даты отправки";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		ТекстВидЭД = НСтр("ru='Уведомление об уточнении';uk='Повідомлення про уточнення'");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		ТекстВидЭД = НСтр("ru='Предложение об аннулировании';uk='Пропозиція про анулювання'");
	КонецЕсли;
	
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

// Определяет состояние версии электронного документа на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(СсылкаНаЭД, ВерсияФорматаПакетаЭД = Неопределено, ПринудительнаяСменаСостояния = Ложь,
	ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если СсылкаНаЭД = Неопределено Или СсылкаНаЭД = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭД.СоглашениеЭД) Тогда
		
		ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "СтатусЭД");
		
		НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
		
		Если ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
			ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
			
				Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
					ИЛИ НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					
					Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
						
						Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
						Иначе
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
						КонецЕсли;
						
					ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий
						И ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
						И НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
						
					Иначе
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяКорректировка;
					КонецЕсли;
					
				Иначе
					Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
					Иначе
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
					КонецЕсли;
				КонецЕсли;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать;
		ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован Тогда
			ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Аннулирован;
		ИначеЕсли НастройкиОбмена <> Неопределено Тогда
			
			Если ВерсияФорматаПакетаЭД = Неопределено Тогда
				ВерсияФорматаПакетаЭД = ВерсияПакетаЭД(СсылкаНаЭД);
			КонецЕсли;
			
			Если ВерсияФорматаПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
				// Если у документа владельца ЭД есть неотправленное подтверждение о получении
				// то меняем состояние версии ЭД.
				Если (ТекущийСтатус = Перечисления.СтатусыЭД.Получен И ЭтоСчетНаОплату(СсылкаНаЭД))
						// для cml документов последний статус
						Или (ТекущийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И Не ЭтоCMLДокумент(СсылкаНаЭД)) Тогда
								
								Если ЕстьНеотправленноеПодтверждение(СсылкаНаЭД.ВладелецФайла, ВозвращаемоеЗначение) Тогда
									Возврат ВозвращаемоеЗначение;
								КонецЕсли;
					
				КонецЕсли;

				
			КонецЕсли;
			
			МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
			Если МассивСтатусов.Количество() > 0 Тогда
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				Если ИндексТекущегоСтатуса = Неопределено Тогда
				ИначеЕсли ИндексТекущегоСтатуса + 1 = МассивСтатусов.Количество() Тогда
					
					Если ТекущийСтатус = Перечисления.СтатусыЭД.Утвержден 
						И НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий 
						И Не ОтклонениеАннулирования  Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
						
					Иначе
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
						
					КонецЕсли;
				Иначе
					СледующийСтатус = МассивСтатусов[ИндексТекущегоСтатуса + 1];
					Если СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаУтверждении;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Подписан
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
						И Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД.ПрофильНастроекЭДО, "СпособОбменаЭД")) Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПереданОператору Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
						ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Доставлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
							
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
						
					ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
						
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
					
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет, все ли установленные на ЭД подписи являются валидными.
//
// Параметры: 
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Функция УстановленныеПодписиВалидны(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &Ссылка
	|	И НЕ ЭДПрисоединенныеФайлыЭлектронныеПодписи.ПодписьВерна";
	Запрос.УстановитьПараметр("Ссылка", ЭД.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() > 0 Тогда
		ШаблонТекста = НСтр("ru='Обработка электронного документа %1.
        |Документ не обработан, так как содержит невалидные подписи.'
        |;uk='Обробка електронного документа %1.
        |Документ не оброблений, так як містить невалідні підписи.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Только для внутреннего использования
Функция ОтправкаСформированныхЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	Результат = 0;
	// Создадим и заполним документы ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты,
																				СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет получение новых электронных документов на основе заведенных соглашений об обмене.
Функция ПолучитьНовыеЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено, ПовторноеПолучение = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Новый Структура("МассивПакетовЭД, ВызватьОповещение",
		Новый Массив, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
	
	РесурсыДляПроверки = Запрос.Выполнить().Выгрузить();
	
	ОтборЭП = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	МассивРесурсовЭП = РесурсыДляПроверки.НайтиСтроки(ОтборЭП);

	Для Каждого СтрокаРесурсовЭП Из МассивРесурсовЭП Цикл
		Если ПустаяСтрока(СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетнаяЗаписьЭП = СтрокаРесурсовЭП.ОбщийРесурсВходящихДокументов;
		НаборСообщений = Новый Массив();
		Попытка
			НаборСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьЭП);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Текст = НСтр("ru='Ошибка при получении сообщения с сервера электронной почты.
            |%1'
            |;uk='Помилка при отриманні повідомлення з сервера електронної пошти.
            |%1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
			ТекстСообщения = НСтр("ru='Ошибка при получении новых эл.документов.';uk='Помилка при отриманні нових ел.документів.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				НСтр("ru='Получение новых эл.документов';uk='Отримання нових ел.документів'"), ТекстОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Для Каждого Сообщение Из НаборСообщений Цикл
			СтруктураПараметров = Новый Структура;
			Если НЕ НеобходимоПолучить(Сообщение, СтруктураПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") Тогда
				ОбработатьПодтверждениеПолучения(Сообщение);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			Для Каждого ЭлементВложенийПисьма Из Сообщение.Вложения Цикл
				ДвоичныеДанныеЭлемента = ЭлементВложенийПисьма.Значение;
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
				ИмяБезРасширения = Лев(ЭлементВложенийПисьма.Ключ, СтрДлина(ЭлементВложенийПисьма.Ключ) -4);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементВложенийПисьма.Ключ, 3));
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
				НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
				ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
					ПараметрыФайла, АдресВХранилище, , , НоваяСсылкаЭД);
			КонецЦикла;
			
			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, УчетнаяЗаписьЭП, Сообщение.Отправитель,
												Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			КонецЕсли;
				
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	ОтборКаталог = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	МассивРесурсовКаталоги = РесурсыДляПроверки.НайтиСтроки(ОтборКаталог);
	Для Каждого СтрокаРесурсовКаталог Из МассивРесурсовКаталоги Цикл
		КаталогСФайлами = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовКаталог.ОбщийРесурсВходящихДокументов, СтрокаРесурсовКаталог.КаталогВходящихДокументов);
			
		МассивИменФайлов = Новый Массив;
		МассивФайлов = НайтиФайлы(КаталогСФайлами, "*");
		Для Каждого ЭлементФайл Из МассивФайлов Цикл
			Если ЭлементФайл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			Если Не НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлы(ЭлементФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",       Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",      Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4));
			ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементФайл.Имя, 3));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
				ПараметрыФайла, АдресВХранилище, , , НоваяСсылкаЭД);

			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, СтрокаРесурсовКаталог, СтруктураПараметров.АдресОтправителя,
					Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			КонецЕсли;
			
			УдалитьФайлы(ЭлементФайл.ПолноеИмя);
			
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	ОтборFTP = Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезFTP);
	МассивРесурсовFTP = РесурсыДляПроверки.НайтиСтроки(ОтборFTP);
	Для Каждого СтрокаРесурсовFTP Из МассивРесурсовFTP Цикл
		ПрофильНастроекЭДО = СтрокаРесурсовFTP.ПрофильНастроекЭДО;
		FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
		Если FTPСоединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КаталогВхДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			СтрокаРесурсовFTP.ОбщийРесурсВходящихДокументов, СтрокаРесурсовFTP.КаталогВходящихДокументовFTP);
			
		МассивИменФайлов = Новый Массив;
		МассивФайловFTP = Новый Массив;
		ТекстОшибки = "";
		ПодготовитьПутьFTP(КаталогВхДокументов);
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(КаталогВхДокументов);
		Исключение
			Продолжить;
		КонецПопытки;
		НайтиФайлыВКаталогеFTP(FTPСоединение, КаталогВхДокументов, "*", Ложь, ТекстОшибки, МассивФайловFTP);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ФайлFTP Из МассивФайловFTP Цикл
			Если ФайлFTP.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			ВремКаталог = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", Новый УникальныйИдентификатор);
			ПолноеИмяФайла = ВремКаталог + ФайлFTP.Имя;
			ПолучитьФайлСFTP(FTPСоединение, ФайлFTP.ПолноеИмя, ПолноеИмяФайла, , ТекстОшибки);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			ЭлементФайл = Новый Файл(ПолноеИмяФайла);
			ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя);
			СтруктураПараметров = Новый Структура;
			
			Если ЭлементФайл.Расширение = ".xml" Тогда
				ОбработатьПодтверждениеПолучения(ЭлементФайл, Истина);
				СтруктураВозврата.ВызватьОповещение = Истина;
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементФайл.Расширение = ".zip" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеЭлемента, ЭлементФайл.Имя, СтруктураПараметров) Тогда
				УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
				УдалитьФайлы(ВремКаталог);
				Продолжить;
			КонецЕсли;
			
			СтруктураПараметров.Вставить("СтатусПакета",   Перечисления.СтатусыПакетовЭД.КРаспаковке);
			СтруктураПараметров.Вставить("НаправленияЭД",  Перечисления.НаправленияЭД.Входящий);
			ПакетЭД = СформироватьНовыйПакетЭД(СтруктураПараметров);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
			
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПакетЭД);
			ПараметрыФайла.Вставить("ИмяБезРасширения", Лев(ЭлементФайл.Имя, СтрДлина(ЭлементФайл.Имя) -4));
			ПараметрыФайла.Вставить("РасширениеБезТочки", Прав(ЭлементФайл.Имя, 3));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
				ПараметрыФайла, АдресВХранилище, , , НоваяСсылкаЭД);
			
			Если Не СтруктураПараметров.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				ОтправитьПодтверждениеПоПакету(ПакетЭД, СтрокаРесурсовFTP, СтруктураПараметров.АдресОтправителя,
					Перечисления.СпособыОбменаЭД.ЧерезFTP);
			КонецЕсли;
			
			УдалитьФайлFTP(FTPСоединение, ФайлFTP.ПолноеИмя);
			УдалитьФайлы(ВремКаталог);
			
			СтруктураВозврата.МассивПакетовЭД.Добавить(ПакетЭД);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, Ссылка - объект либо ссылка документа/справочника-источника.
//  ФорматCML - Булево, если истина, то для формирования ЭД будут использоваться схемы CML,
//              в параметрах должны быть указаны соответствующие виды ЭД.
//
// Возвращаемое значение:
//  ПараметрыЭД - Структура - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.ПроизвольныйЭД")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПроизвольныйЭД") Тогда
		
		ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПараметрыЭД.НаправлениеЭД = Источник.Направление;
		ПараметрыЭД.Контрагент    = Источник.Контрагент;
		ПараметрыЭД.Организация   = Источник.Организация;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.КаталогТоваров;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.СоглашениеЭД  = Источник.Ссылка;
		Если Не Источник.ЭтоИнтеркампани Тогда
			
			ПараметрыЭД.Контрагент  = Источник.Контрагент;
			ПараметрыЭД.Организация = Источник.Организация;
			ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.Организации")
		Или ТипИсточника = Тип("СправочникОбъект.Организации") Тогда
		
		ПараметрыЭД.ВидЭД = "РеквизитыОрганизации";
		ПараметрыЭД.Организация = Источник;
		ПараметрыЭД.Вставить("РеквизитыОрганизации", Истина);
	Иначе
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы.
//
// Параметры:
//  ДобавленныйФайл - СправочникСсылка - ссылка на элемент справочника с электронным документом,
//  СтруктураЭД - Структура - структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Если ПоверятьОбязательныеРеквизиты Тогда
		ТекстОшибки = "";
		СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, Контрагент, ВидЭД, НаправлениеЭД, СоглашениеЭД");
		Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			Значение = Неопределено;
			Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Текст = НСтр("ru='Значение параметра <%1> не заполнено!';uk='Значення параметра <%1> не заповнено!'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru='Не передан обязательный параметр <%1>!';uk='Не переданий обов''язковий параметр <%1>!'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстСообщения = НСтр("ru='Ошибка заполнения доп.свойств электронного документа!
            |%1'
            |;uk='Помилка заповнення дод. властивостей електронного документа!
            |%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбменСКонтрагентамиПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
	
	ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
	
	ПринудительнаяСменаСостоянияВерсии = Ложь;
	
	Если СтруктураЭД.Свойство("Автор") Тогда
		ФайлОбъект.Автор = СтруктураЭД.Автор;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ВерсияРегламентаЭДО") Тогда
		ФайлОбъект.ВерсияРегламентаЭДО = СтруктураЭД.ВерсияРегламентаЭДО;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ВидЭД") Тогда
		ФайлОбъект.ВидЭД = СтруктураЭД.ВидЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаДокументаОтправителя") Тогда
		ФайлОбъект.ДатаДокументаОтправителя = СтруктураЭД.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
		ФайлОбъект.ДатаИзмененияСтатусаЭД = СтруктураЭД.ДатаИзмененияСтатусаЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаИзмененияВнешнегоСтатусаЭД") Тогда
		ФайлОбъект.ДатаИзмененияВнешнегоСтатусаЭД = СтруктураЭД.ДатаИзмененияВнешнегоСтатусаЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаМодификацииУниверсальная") Тогда
		ФайлОбъект.ДатаМодификацииУниверсальная = СтруктураЭД.ДатаМодификацииУниверсальная;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаСоздания") Тогда
		ФайлОбъект.ДатаСоздания = СтруктураЭД.ДатаСоздания;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем") Тогда
		ФайлОбъект.ДатаФормированияЭДОтправителем = СтруктураЭД.ДатаФормированияЭДОтправителем;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДополнительнаяИнформация") Тогда
		ФайлОбъект.ДополнительнаяИнформация = СтруктураЭД.ДополнительнаяИнформация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДополнительныеРеквизиты") Тогда
		Если ЗначениеЗаполнено(ФайлОбъект.ДополнительныеРеквизиты) Тогда
			ДополнительныеРеквизиты = ФайлОбъект.ДополнительныеРеквизиты.Получить();
			Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
				ДополнительныеРеквизиты = Новый Структура;
			КонецЕсли;
		Иначе
			ДополнительныеРеквизиты = СтруктураЭД.ДополнительныеРеквизиты;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из СтруктураЭД.ДополнительныеРеквизиты Цикл
			ДополнительныеРеквизиты.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		ФайлОбъект.ДополнительныеРеквизиты = Новый ХранилищеЗначения(СтруктураЭД.ДополнительныеРеквизиты);
	КонецЕсли;
	
	ИдентификаторыОснований = Неопределено;
	Если СтруктураЭД.Свойство("ИдентификаторыДокументовИЭДОснований", ИдентификаторыОснований) Тогда
		ФайлОбъект.ИдентификаторыОснованийВладельцаФайла.Очистить();
		Для Каждого СтрокаИдентификатора Из ИдентификаторыОснований Цикл
			НоваяСтрока = ФайлОбъект.ИдентификаторыОснованийВладельцаФайла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИдентификатора);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Изменил") Тогда
		ФайлОбъект.Изменил = СтруктураЭД.Изменил;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Контрагент") Тогда
		ФайлОбъект.Контрагент = СтруктураЭД.Контрагент;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Наименование") Тогда
		ФайлОбъект.Наименование = СтруктураЭД.Наименование;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаименованиеФайла") Тогда
		ФайлОбъект.НаименованиеФайла = СтруктураЭД.НаименованиеФайла;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
		ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерВерсииЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = СтруктураЭД.НомерВерсииЭД;
	ИначеЕсли СтруктураЭД.Свойство("ВладелецЭД") Тогда
		ФайлОбъект.НомерВерсииЭД = НомерВерсииЭДПоВладельцу(СтруктураЭД.ВладелецЭД);
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерДокументаОтправителя") Тогда
		ФайлОбъект.НомерДокументаОтправителя = СтруктураЭД.НомерДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("НомерЭД") Тогда 
		ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Описание") Тогда
		ФайлОбъект.Описание = СокрЛП(СтруктураЭД.Описание);
	Иначе
		ФайлОбъект.Описание = "";
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Организация") Тогда
		ФайлОбъект.Организация = СтруктураЭД.Организация;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Ответственный") Тогда
		ФайлОбъект.Ответственный = СтруктураЭД.Ответственный;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.Ответственный) Тогда
		ФайлОбъект.Ответственный = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда
		ФайлОбъект.ОтправительЭД = СтруктураЭД.Отправитель;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПодписанныеДанные") Тогда
		ХранилищеПодписанныхДанных = Новый ХранилищеЗначения(СтруктураЭД.ПодписанныеДанные);
		ФайлОбъект.ПодписанныеДанные = ХранилищеПодписанныхДанных;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
		ФайлОбъект.ПолучательЭД = СтруктураЭД.Получатель;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПричинаОтклонения") Тогда
		ФайлОбъект.ПричинаОтклонения = СтруктураЭД.ПричинаОтклонения;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ПрофильНастроекЭДО") Тогда
		ФайлОбъект.ПрофильНастроекЭДО = СтруктураЭД.ПрофильНастроекЭДО;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("Расширение") Тогда
		ФайлОбъект.Расширение = СтруктураЭД.Расширение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СоглашениеЭД") Тогда
		ФайлОбъект.СоглашениеЭД = СтруктураЭД.СоглашениеЭД;
		ФайлОбъект.ДополнительныеСвойства.Вставить("СоглашениеЭД", СтруктураЭД.СоглашениеЭД);
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СтатусЭД") Тогда
		
		Если ФайлОбъект.СтатусЭД <> СтруктураЭД.СтатусЭД Тогда
			ПринудительнаяСменаСостоянияВерсии = Истина;
		КонецЕсли;
		
		ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
		Если Не СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
			ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьСостояниеЭД = Неопределено;
	Если СтруктураЭД.Свойство("ОбновитьСостояниеЭД", ОбновитьСостояниеЭД)
		И Не ОбновитьСостояниеЭД = Неопределено Тогда
		ПринудительнаяСменаСостоянияВерсии = ОбновитьСостояниеЭД;
	КонецЕсли;
	
	ОтклонениеАннулирования = Ложь;
	Если СтруктураЭД.Свойство("ОтклонениеАннулирования") Тогда
		ОтклонениеАннулирования = Истина;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("СуммаДокумента") И ЗначениеЗаполнено(СтруктураЭД.СуммаДокумента) Тогда
		ФайлОбъект.СуммаДокумента = СтруктураЭД.СуммаДокумента;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТекстУточнения") Тогда
		ФайлОбъект.ПричинаОтклонения = СтруктураЭД.ТекстУточнения;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
		ФайлОбъект.ТипЭлементаВерсииЭД = СтруктураЭД.ТипЭлементаВерсииЭД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УдалитьЭП") Тогда
		ФайлОбъект.ЭлектронныеПодписи.Очистить();
		ФайлОбъект.ПодписанЭП = Ложь;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИД") Тогда
		ФайлОбъект.УникальныйИД = СтруктураЭД.УникальныйИД;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("УникальныйИДВнешний") Тогда
		ФайлОбъект.УникальныйИДВнешний = СтруктураЭД.УникальныйИДВнешний;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда
		ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
		СтруктураЭД.Вставить(
				"СуммаДокумента",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЭД.ЭлектронныйДокументВладелец, "СуммаДокумента"));
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДатаВыпискиБанка") Тогда
		ФайлОбъект.ДатаВыпискиБанка = СтруктураЭД.ДатаВыпискиБанка;
	КонецЕсли;
	
	ВерсияФорматаПакета = Неопределено;
	СтруктураЭД.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
	ФайлОбъект.ДополнительныеСвойства.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
	ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
	ФайлОбъект.ДополнительныеСвойства.Вставить("ОбновитьВерсиюЭД", Истина);
	ФайлОбъект.ДополнительныеСвойства.Вставить("ОтклонениеАннулирования", ОтклонениеАннулирования);

	ФайлОбъект.Записать();
	
	Если ФайлОбъект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлОбъект.Ссылка, "ВладелецФайла");
		СтатусДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "СтатусДокумента");
		Если Не СтатусДокумента = ФайлОбъект.СтатусЭД Тогда
			
			ВладелецЭД = ВладелецФайла.ПолучитьОбъект();
			ВладелецЭД.СтатусДокумента = ФайлОбъект.СтатусЭД;
			ВладелецЭД.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает структуру данных файла, полученную из одноименной функции общего модуля ПрисоединенныеФайлы.
// В полученной структуре данных меняет значение элемента с ключом Наименование на полное наименование,
// хранящееся в реквизите элемента справочника НаименованиеФайла, так же заново формирует значениеэлемента ИмяФайла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
//  ИдентификаторФормы - УникальныйИдентификатор формы,
//                 используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина,
//                 если передать Ложь, то ссылка на двоичные данные не будет получена,
//                 что существенно ускорит выполнение для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//    СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    ОтносительныйПуть                  - Строка.
//    ДатаМодификацииУниверсальная       - Дата.
//    ИмяФайла                           - Строка.
//    Наименование                       - Строка, соответствует значению реквизита элемента справочника НаименованиеФайла.
//    Расширение                         - Строка.
//    Размер                             - Число.
//    Редактирует                        - СправочникСсылка.Пользователи.
//    ПодписанЭП                         - Булево.
//    Зашифрован                         - Булево.
//    ФайлРедактируется                  - Булево.
//    ФайлРедактируетТекущийПользователь - Булево.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВидЭД, УникальныйИД, НаименованиеФайла");
		Если ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФайла) Тогда
			ДанныеФайла.Наименование = СокрЛП(СтруктураПараметров.НаименованиеФайла);
			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

// Только для внутреннего использования
Процедура СохранитьПриглашения(ТаблицаПриглашений) Экспорт
	
	Если ТаблицаПриглашений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	МАКСИМУМ(Приглашения.Изменен) КАК Изменен
	|ПОМЕСТИТЬ ПоследниеИзмененияЗаписей
	|ИЗ
	|	Приглашения КАК Приглашения
	|
	|СГРУППИРОВАТЬ ПО
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ПрофильНастроекЭДО,
	|	Приглашения.ТекстПриглашения,
	|	Приглашения.Идентификатор,
	|	Приглашения.ВнешнийИД,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки,
	|	Приглашения.Состояние КАК СтатусУчастника
	|ИЗ
	|	ПоследниеИзмененияЗаписей КАК ПоследниеИзмененияЗаписей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
	|		ПО ПоследниеИзмененияЗаписей.ПрофильНастроекЭДО = Приглашения.ПрофильНастроекЭДО
	|			И ПоследниеИзмененияЗаписей.Идентификатор = Приглашения.Идентификатор
	|			И ПоследниеИзмененияЗаписей.ИНН = Приглашения.ИНН
	|			И ПоследниеИзмененияЗаписей.Изменен = Приглашения.Изменен
	|			И ПоследниеИзмененияЗаписей.ВнешнийИД = Приглашения.ВнешнийИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Изменен";
	Запрос.УстановитьПараметр("Приглашения", ТаблицаПриглашений);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТЗПоследнихИзменений = Результат.Выгрузить();
		
		СдвигатьДату = Истина;
		Для Каждого НовыеПриглашения Из ТЗПоследнихИзменений Цикл
			Контрагент = Неопределено;
			Ошибка = (НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Ошибка);
			Если ЗначениеЗаполнено(НовыеПриглашения.ИНН) Тогда
				ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
				ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
				
				Запрос = Новый Запрос;
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НастройкиЭДО.Контрагент
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК НастройкиЭДО
				|ГДЕ
				|	НЕ НастройкиЭДО.ПометкаУдаления
				|	И (НастройкиЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))
				|	И НастройкиЭДО.Контрагент." + ИмяРеквизитаИННКонтрагента + " = &ИНН";
				Запрос.УстановитьПараметр("ИНН", НовыеПриглашения.ИНН);
				Если ЗначениеЗаполнено(НовыеПриглашения.КПП) И ИмяРеквизитаКППКонтрагента <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
						|	И НастройкиЭДО.Контрагент." + ИмяРеквизитаКППКонтрагента + " = &КПП";
					Запрос.УстановитьПараметр("КПП", НовыеПриглашения.КПП);
				КонецЕсли;
				Запрос.Текст = ТекстЗапроса;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Контрагент = Выборка.Контрагент;
				Иначе
					Контрагент = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", НовыеПриглашения.ИНН,
						НовыеПриглашения.КПП);
				КонецЕсли;
			КонецЕсли;
			
			Если Контрагент = Неопределено Тогда
				СдвигатьДату = Ложь;
				Если Не Ошибка Тогда
					Текст = НСтр("ru='Обмен по профилю настроек ЭДО %1.
                    |В базе не найден контрагент:
                    |Наименование: %2
                    |ИНН: %3
                    |КПП: %4
                    |Статус: %5.'
                    |;uk='Обмін за профілем налаштувань ЕДО %1.
                    |В базі не знайдено контрагент:
                    |Найменування: %2
                    |ІПН: %3
                    |КПП: %4
                    |Статус: %5.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.ПрофильНастроекЭДО,
						НовыеПриглашения.Наименование, НовыеПриглашения.ИНН, НовыеПриглашения.КПП, НовыеПриглашения.СтатусУчастника);
				Иначе
					ОписаниеОшибки = ?(ЗначениеЗаполнено(НовыеПриглашения.ОписаниеОшибки),
						НовыеПриглашения.ОписаниеОшибки, НСтр("ru='Ошибка';uk='Помилка'"));
					Наименование = ?(ЗначениеЗаполнено(Контрагент), Контрагент.Наименование, "");
					Текст = НСтр("ru='Обмен по профилю настроек ЭДО %1.
                    |%2 в приглашении для контрагента:
                    |Наименование: %3
                    |Адрес ЭП: %4
                    |ИНН: %5
                    |КПП: %6
                    |Статус: %7.'
                    |;uk='Обмін за профілем налаштувань ЕДО %1.
                    |%2 в запрошенні для контрагента:
                    |Найменування: %3
                    |Адреса ЕП: %4
                    |ІПН: %5
                    |КПП: %6
                    |Статус: %7.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.ПрофильНастроекЭДО,
						ОписаниеОшибки, Наименование, НовыеПриглашения.Наименование, НовыеПриглашения.ИНН, НовыеПриглашения.КПП,
						НовыеПриглашения.СтатусУчастника);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
			|ГДЕ
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
			|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
			|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
			|	И НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
			|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	НастройкаЭДОИсходящиеДокументы.Ссылка,
			|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения,
			|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения";
			
			Запрос.УстановитьПараметр("Контрагент",  Контрагент);
			Запрос.УстановитьПараметр("ИдентификаторКонтрагента", НовыеПриглашения.Идентификатор);
			Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
			Запрос.УстановитьПараметр("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
			
			Если Запрос.Выполнить().Пустой() Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения КАК РасширенныйРежимНастройки,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
				|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
				|ГДЕ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
				|	И НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента = """"
				|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
				|
				|СГРУППИРОВАТЬ ПО
				|	НастройкаЭДОИсходящиеДокументы.Ссылка,
				|	НастройкаЭДОИсходящиеДокументы.ИдентификаторКонтрагента,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СпособОбменаЭД,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.РасширенныйРежимНастройкиСоглашения,
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения";
				
				Запрос.УстановитьПараметр("Контрагент",  Контрагент);
				Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
				Запрос.УстановитьПараметр("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
				
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Если Выборка.СтатусПодключения = НовыеПриглашения.СтатусУчастника
					И Выборка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор Тогда
					
					Продолжить;
				КонецЕсли;
				
				НастройкаЭДО = Выборка.НастройкаЭДО.ПолучитьОбъект();
				
				Если Не Выборка.РасширенныйРежимНастройки
					И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
					
					НастройкаЭДО.РасширенныйРежимНастройкиСоглашения = Истина;
					
					ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
						"ИдентификаторОрганизации, СпособОбменаЭД");
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("ПрофильНастроекЭДО", НовыеПриглашения.ПрофильНастроекЭДО);
					НайденныеСтроки = НастройкаЭДО.ИсходящиеДокументы.НайтиСтроки(Отбор);
					Для каждого Строка Из НайденныеСтроки Цикл
						Строка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
					КонецЦикла;
				КонецЕсли;
			Иначе
				НастройкаЭДО = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				// Пишем новые настройки ЭДО по входящим приглашениям всегда, даже если они не уникальны.
				НастройкаЭДО.ОбменДанными.Загрузка = Истина;
				
				НастройкаЭДО.Контрагент = Контрагент;
				НастройкаЭДО.Наименование = Строка(Контрагент);
				
				НастройкаЭДО.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовыеПриглашения.ПрофильНастроекЭДО,
					"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы");
				
				НастройкаЭДО.Организация                 = ПараметрыПрофиляНастроек.Организация;
				НастройкаЭДО.СпособОбменаЭД              = ПараметрыПрофиляНастроек.СпособОбменаЭД;
				НастройкаЭДО.ИдентификаторОрганизации    = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
				НастройкаЭДО.ВерсияФорматаПакета         = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
				
				// Загружаем ТЧ из профиля настроек ЭДО.
				ИсходнаяТаблицаЭД = ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить();
				ИсходнаяТаблицаЭД.Колонки.Добавить("ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.Колонки.Добавить("СпособОбменаЭД");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.Колонки.Добавить("ИдентификаторКонтрагента");

				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.ПрофильНастроекЭДО, "ПрофильНастроекЭДО");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.СпособОбменаЭД, "СпособОбменаЭД");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(ПараметрыПрофиляНастроек.ИдентификаторОрганизации, "ИдентификаторОрганизации");
				ИсходнаяТаблицаЭД.ЗаполнитьЗначения(НовыеПриглашения.Идентификатор, "ИдентификаторКонтрагента");
				
				НастройкаЭДО.ИсходящиеДокументы.Загрузить(ИсходнаяТаблицаЭД);
			КонецЕсли;
			
			НастройкаЭДО.ИдентификаторКонтрагента    = НовыеПриглашения.Идентификатор;
			Если ЗначениеЗаполнено(НовыеПриглашения.ТекстПриглашения) Тогда
				НастройкаЭДО.ТекстПриглашения        = НовыеПриглашения.ТекстПриглашения;
			КонецЕсли;
			
			НастройкаЭДО.СтатусПодключения           = НовыеПриглашения.СтатусУчастника;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(НастройкаЭДО);
			
			СостояниеСоглашения                      = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
				СостояниеСоглашения                  = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
				
				// Проверка на существование уже присоединенной настройки по данному контрагенту.
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкаЭДОИсходящиеДокументы
				|ГДЕ
				|	НастройкаЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
				|	И НастройкаЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
				|	И НЕ НастройкаЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
				|
				|СГРУППИРОВАТЬ ПО
				|	НастройкаЭДОИсходящиеДокументы.Ссылка";
				
				Запрос.УстановитьПараметр("Контрагент",  Контрагент);
				Запрос.УстановитьПараметр("Организация", НовыеПриглашения.ПрофильНастроекЭДО.Организация);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НастройкаЭДО.ОбменДанными.Загрузка = Истина;
					НастройкаЭДО.СтатусПодключения     = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие;
					НастройкаЭДО.Комментарий           = НСтр("ru='##Автоматически снят статус ""присоединен"". Уже существует настройка ЭДО по выбранному контрагенту.';uk='##Автоматично знято статус ""приєднаний"". Вже існує настройка ЕДО за обраним контрагенту.'");
				КонецЕсли;
				
			ИначеЕсли НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
				СостояниеСоглашения                  = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			НастройкаЭДО.СостояниеСоглашения = СостояниеСоглашения;
			
			ТекстОписанияОшибки = "";
			Если Ошибка Тогда
				ШаблонОписанияОшибки = НСтр("ru='%1. Повторите отправку.';uk='%1. Повторіть відправку.'");
				ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
					НовыеПриглашения.ОписаниеОшибки);
			КонецЕсли;
			НастройкаЭДО.ОписаниеОшибки = ТекстОписанияОшибки;
			НастройкаЭДО.АвтоПереходНаНовыеФорматы = Истина;
			
			НастройкаЭДО.Записать();
			
			Если СдвигатьДату Тогда
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
				Запись.ПрофильНастроекЭДО = НовыеПриглашения.ПрофильНастроекЭДО;
				Запись.Прочитать();
				Запись.ДатаПоследнегоПолученияПриглашений = НовыеПриглашения.Изменен;
				Запись.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами
// Только для внутреннего использования
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ОбменСКонтрагентамиПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Сравнение электронных документов

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - Массив - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL.
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			ДанныеЭД.Записать(ИмяФайла);
			
			ФайлыАрхива = Новый Массив;
			Если СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				
				ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
				ПапкаДляРаспаковки =  ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("proc", ЭД.УникальныйИдентификатор());
				
				Попытка
					ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"),
						ТекстОшибки, ТекстСообщения);
					ЗИПЧтение.Закрыть();
				КонецПопытки;

				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				
				ФайлДанных = Новый Файл(ИмяФайла);
				ФайлыАрхива.Добавить(ФайлДанных);
			КонецЕсли;
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ИД", ЭД.УникальныйИдентификатор());
				ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
																								 ЭД.НаправлениеЭД,
																								 ПараметрыПечати);
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ПолучитьПредставлениеЭД(ЭД.Ссылка);
					
					СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
					ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				КонецЕсли;
				
				Прервать; // Должен быть только один файл данных.
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				УдалитьФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;

	Возврат ПереченьВременныхФайлов;
	
КонецФункции

// Только для внутреннего использования
Функция НастройкиОбменаЭД(СсылкаНаЭД) Экспорт
	
	НастройкиОбмена = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			РеквизитыЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаЭД);
		Иначе
			РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД,
				"ВидЭД, НаправлениеЭД, СоглашениеЭД, ПрофильНастроекЭДО, ВерсияРегламентаЭДО, ПодписанЭП");
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыЭД) Тогда
			НастройкиОбмена = Новый Структура;
			
			СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.СоглашениеЭД, "СпособОбменаЭД");
				
			РеквизитыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ПрофильНастроекЭДО,
			"СпособОбменаЭД");
			
			НастройкиОбмена.Вставить("СпособОбмена",          РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
			ВидЭД = Неопределено;
			Если РеквизитыЭД.Свойство("ВидЭД", ВидЭД) И ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВладелецФайла");
				ТребоватьПодтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ТребуетсяПодтверждение");
				НастройкиОбмена.Вставить("ТребоватьПодтверждения", ТребоватьПодтверждения);
			КонецЕсли;
			
			НастройкиОбмена.Вставить("Направление",           РеквизитыЭД.НаправлениеЭД);
			НастройкиОбмена.Вставить("ВидЭД",                 РеквизитыЭД.ВидЭД);
			НастройкиОбмена.Вставить("ИспользоватьПодпись",   РеквизитыЭД.ПодписанЭП);
			НастройкиОбмена.Вставить("ИспользоватьКвитанции", Ложь);
			НастройкиОбмена.Вставить("ВерсияРегламентаЭДО",   РеквизитыЭД.ВерсияРегламентаЭДО); 
			
			СоглашениеЭД = РеквизитыЭД.СоглашениеЭД;
			ВерсияФорматаПакета = ВерсияПакетаЭД(СсылкаНаЭД);
			
			НастройкиОбмена.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
			
			ЗапросПоНастройкам = Новый Запрос;
			ЗапросПоНастройкам.УстановитьПараметр("СоглашениеЭД",    РеквизитыЭД.СоглашениеЭД);
			ЗапросПоНастройкам.УстановитьПараметр("НаправлениеЭД",   РеквизитыЭД.НаправлениеЭД);
			
			Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
				ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
				ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				ВидЭД = ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;		
			КонецЕсли;
			
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭД",           РеквизитыЭД.ВидЭД);
			ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеПодписиЭД");
			
			ЗапросПоНастройкам.УстановитьПараметр("ИспользуетсяЭП", ИспользоватьЭП);
			
			ВидЭДВладельца = Неопределено;
			ЭтоСлужебныйЭД = Ложь;
			Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
				ЭтоСлужебныйЭД = Истина;
				ЭДВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
				Если ЗначениеЗаполнено(ЭДВладелец) Тогда
					ВидЭДВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВладелец, "ВидЭД");
				КонецЕсли;
			КонецЕсли;
			ЗапросПоНастройкам.УстановитьПараметр("ВидЭДВладельца", ВидЭДВладельца);
			ЗапросПоНастройкам.УстановитьПараметр("ЭтоСлужебныйЭД", ЭтоСлужебныйЭД);
			
			ЗапросПоНастройкам.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА &ИспользуетсяЭП
			|			ТОГДА Соглашение.ИспользоватьПодпись
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИспользоватьПодпись,
			|	Соглашение.ИспользоватьКвитанции
			|ИЗ
			|	(ВЫБРАТЬ
			|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьПодпись,
			|		ВЫБОР
			|			КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета = ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ИспользоватьКвитанции,
			|		ВЫБОР
			|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
			|			ИНАЧЕ ВЫБОР
			|					КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|				КОНЕЦ
			|		КОНЕЦ КАК НаправлениеЭД
			|	ИЗ
			|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|	ГДЕ
			|		ВЫБОР
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Торг12Покупатель)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
			|				КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
			|				КОГДА &ЭтоСлужебныйЭД
			|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
			|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|			КОНЕЦ
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
			|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать) КАК Соглашение
			|ГДЕ
			|	Соглашение.НаправлениеЭД = &НаправлениеЭД";
			
			Результат = ЗапросПоНастройкам.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				ТЗ = Результат.Выгрузить();
				ЗаполнитьЗначенияСвойств(НастройкиОбмена, ТЗ[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Только для внутреннего использования
Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ДопДанные)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Только для внутреннего использования
Процедура СохранитьФайлыДопДанныхЭД(ПрисоединенныйФайл, ИмяКаталога, СтруктураФайловЭД) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		Выборка = ВыборкаДопДанныеЭД(ПрисоединенныйФайл);

		Если Выборка.Следующий() Тогда
			Файл = Новый Файл(ИмяКаталога);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			ДанныеФайла = ПолучитьДанныеФайла(Выборка.Ссылка);
			ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		
			СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяПолучаемогоФайла);
			
			// Необходимо предусмотреть заполнение подписей для дополнительного файла в дереве транспортной информации.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена для проверки имени файла на наличие некорректных символов.
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции".
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла.
//  ФлУдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки.
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция КорректноеИмяФайла(Знач СтрИмяФайла, ФлУдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS
	СтрИсключения = """/\[]:;|=,?*<>";
	
	Результат = Истина;
	
	Для Сч = 1 По СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если СтрНайти(СтрИмяФайла, Символ) <> 0 Тогда
			Если ФлУдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru='В имени файла не должно быть следующих символов: %1
        |Имя файла: %2'
        |;uk='В імені файлу не повинно бути таких символів: %1
        |Ім''я файлу: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Только для внутреннего использования
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД) Экспорт
	
	ТекущийСтатус = Неопределено;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Если ТипЗнч(СсылкаНаЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
			ТекущийСтатус = СсылкаНаЭД.СтатусДокумента;
		Иначе
			ТекущийСтатус = СсылкаНаЭД.СтатусЭД;
		КонецЕсли;
		
		Если НовыйСтатус = Перечисления.СтатусыЭД.Отклонен ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
			ИЛИ НЕ ЗначениеЗаполнено(ТекущийСтатус) ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.Аннулирован
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
			ТекущийСтатус = НовыйСтатус;
		Иначе
			НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
			
			// Заначка
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				Если НастройкиОбмена.ИспользоватьКвитанции = Ложь Тогда
					
				КонецЕсли;
			КонецЕсли;
			Если НастройкиОбмена <> Неопределено Тогда
			
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				
				ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
				ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
				Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
					Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
						ТекущийСтатус = НовыйСтатус;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Только для внутреннего использования
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена) Экспорт
	
	МассивСтатусов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		Возврат МассивСтатусов;
	КонецЕсли;
	
	ТребоватьПодтверждения = Истина;
	Если ТипЗнч(НастройкиОбмена) = Тип("Структура") Тогда
		Если Не НастройкиОбмена.Свойство("ТребоватьПодтверждения", ТребоватьПодтверждения) Тогда
			ТребоватьПодтверждения = Истина;
		КонецЕсли;
	Иначе
		Если НастройкиОбмена.Владелец().Колонки.Найти("ТребоватьПодтверждения") = Неопределено Тогда
			ТребоватьПодтверждения = Истина;
		Иначе
			ТребоватьПодтверждения = НастройкиОбмена.ТребоватьПодтверждения;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ТребоватьПодтверждения) <> Тип("Булево") Тогда
		ТребоватьПодтверждения = Истина;
	КонецЕсли;
	
	Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
		Иначе
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				Если ТребоватьПодтверждения Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
					// Не будем для ответных титулов добавлять статус Доставлен,
					// т.к. по ним не должны приходить Уведомления.
					Если Не (НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
						Или НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
						Или НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						
						Если (НастройкиОбмена.ИспользоватьПодпись
							И Не НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату) Тогда
							
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					// Если формат исходящих документов 2.0
					Если НастройкиОбмена.ИспользоватьКвитанции Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
					Если НастройкиОбмена.ИспользоватьПодпись
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		
		Если НЕ (НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
			
			Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					Если ТребоватьПодтверждения Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СчетНаОплату Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					Если ТребоватьПодтверждения Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
					Если НастройкиОбмена.ИспользоватьПодпись
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
						И НастройкиОбмена.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
						И НЕ (НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
						И НастройкиОбмена.ВерсияФорматаПакета =
						Перечисления.ВерсииФорматаПакетаЭД.Версия30) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
						Если НастройкиОбмена.ИспользоватьКвитанции
							И Не НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Интеркампани Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
	КонецЕсли;
	
	
	Возврат МассивСтатусов;
	
КонецФункции

// Только для внутреннего использования
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока СтрНайти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается из клиентского модуля, удаляет папку,
// созданную на сервере и переданную на клиент в качестве параметра.
// 
// Параметры:
//  Папка - Строка - путь к временной папке на сервере.
//
Процедура УдалитьПапкуНаСервере(Папка) Экспорт
	
	Если ЗначениеЗаполнено(Папка) Тогда
		
		Файл = Новый Файл(Папка);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Папка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки обмена электронными документами по структуре параметров.
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, МассивОтпечатковСертификатов = Неопределено, ФлагДействующиеСоглашения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД)
		И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("НаправлениеЭД",	НаправлениеЭД);
		Запрос.УстановитьПараметр("ВидЭД",			ВидЭД);
		Запрос.УстановитьПараметр("Контрагент",		Контрагент);
		
		ДоговорКонтрагента = "";
		Если СтруктураПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
		ВидЭДВладельца = Неопределено;
		Если СтруктураПараметров.Свойство("ВидЭДВладельца", ВидЭДВладельца) Тогда
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Истина);
		Иначе
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Ложь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидЭДВладельца",				ВидЭДВладельца);
		Запрос.УстановитьПараметр("ТолькоДействующиеСоглашения",ФлагДействующиеСоглашения);
		Запрос.УстановитьПараметр("ПользовательНеУказан",		Пользователи.СсылкаНеуказанногоПользователя());
		
		СоглашениеЭД = "";
		Организация = "";
		ВыполнятьЗапрос = Истина;
		Если СтруктураПараметров.Свойство("СоглашениеЭД", СоглашениеЭД) И ЗначениеЗаполнено(СоглашениеЭД) Тогда
			Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
			ПолучитьТекстНастроекОбменаПоСоглашению(Запрос.Текст);
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				Партнер = "";
				СтруктураПараметров.Свойство("Партнер", Партнер);
				Запрос.УстановитьПараметр("Партнер", Партнер);
			КонецЕсли;
			ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(Запрос.Текст);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыполнятьЗапрос = Ложь;
			Если РезультатЗапроса[2].Пустой() Тогда
				// Поищем настройку ЭДО без указания договора контрагента.
				ДоговорКонтрагента = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				ВыполнятьЗапрос = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			Если ВыполнятьЗапрос Тогда
				РезультатЗапроса = Запрос.ВыполнитьПакет();
			КонецЕсли;
			ТЗ = РезультатЗапроса[2].Выгрузить();
			
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если МассивОтпечатковСертификатов <> Неопределено Тогда

					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если МассивОтпечатковСертификатов = Неопределено ИЛИ МассивОтпечатковСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если НастройкиОбменаЭД.Свойство("Подписывать") Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция СтруктураЗначенийРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	СтруктураДанных = "";
	ОбменСКонтрагентамиПереопределяемый.ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Функция формирует электронные документы и помещает их в справочник присоединенных файлов.
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты, к которым надо создать электронный документ;
//  СоответствиеПараметров - Соответствие - соответствие, содержащая настройки обмена ЭД для объектов.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьХМЛФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхФайлов = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураОбмена.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);
	
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		ФлагПродолжить = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ФлагПродолжить = Истина;
		ИначеЕсли СтруктураОбмена.Свойство("ПолноеИмяДопФайла") Тогда
			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл);
			Если НЕ ДопФайлСоздан Тогда
				ФлагПродолжить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьФайлы(Файл.Путь);
		Если ФлагПродолжить Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("МассивФайлов") И СтруктураОбмена.МассивФайлов.Количество() > 0 Тогда
			АдресАрхива = АрхивДополнительныхФайлов(СтруктураОбмена.МассивФайлов);
			Если Не АдресАрхива = Неопределено Тогда
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
				ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru='Дополнительные файлы';uk='Додаткові файли'"));
				ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
				НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
				ДопФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресАрхива, , , НоваяСсылкаЭД);
			
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
				СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
				СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
				СтруктураПараметров.Вставить("Организация", СтруктураОбмена.СтруктураЭД.Организация);
				СтруктураПараметров.Вставить("Контрагент", СтруктураОбмена.СтруктураЭД.Контрагент);
				СтруктураПараметров.Вставить("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
				СтруктураПараметров.Вставить("ВладелецЭД", СтруктураОбмена.СтруктураЭД.ВладелецЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", Строка(ДобавленныйФайл.УникальныйИдентификатор()));
				
		ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		
		СтруктураОбмена.СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтатусЭД = Неопределено;
		Если НЕ (СтруктураОбмена.СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
			СтруктураОбмена.СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		КонецЕсли;
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		
		УстановитьСсылкуДляВладельцаВРегистреСостояний(ВладелецЭД, ДобавленныйФайл);
		
		МассивСформированныхФайлов.Добавить(ДобавленныйФайл);
		
	КонецЦикла;
	
	Возврат МассивСформированныхФайлов;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьХМЛФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = "") Экспорт
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

// Только для внутреннего использования.
Процедура ПроверитьДлинуНомераСчета(НомерСчета, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки) Экспорт
	
	ПространствоИменСхемы = ОбменСКонтрагентамиПовтИсп.ПространствоИменCML();
	Длина = Число(ОбменСКонтрагентамиВнутренний.ПолучитьСвойствоПоляXDTOСхемы(ПространствоИменСхемы, "РасчетныйСчет", "НомерСчета", ВидФасетаXDTO.Длина));

	Если Длина <> СтрДлина(СокрЛП(НомерСчета)) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Длина);
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);
		ЕстьОшибкиЗаполнения = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

// Меняет состояние ЭД документа ИБ
// Параметры:
// ИзменяемыеДокументы - массив - ссылка на документ ИБ
// НовоеСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - значение нового состояния
// ИзменяемыеСостояния - Массив- ПеречислениеСсылка.СостоянияВерсийЭД - Массив состояний, менять которые не нужно
//
Процедура ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние, ИзменяемыеСостояния = Неопределено) Экспорт
	
	Если Не ТипЗнч(ИзменяемыеДокументы) = Тип("Массив") Тогда
		
		ДокументыИБ = Новый Массив;
		ДокументыИБ.Добавить(ИзменяемыеДокументы);
	Иначе
		ДокументыИБ = ИзменяемыеДокументы;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Для Каждого ДокументИБ Из ДокументыИБ Цикл
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияЭД");
		ЭлементБлокировки.УстановитьЗначение("СсылкаНаОбъект", ДокументИБ);
		Блокировка.Заблокировать();
		
		СостояниеЭД = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		СостояниеЭД.СсылкаНаОбъект = ДокументИБ;
		СостояниеЭД.Прочитать();
		
		Если Не ИзменяемыеСостояния = Неопределено Тогда
			Если ИзменяемыеСостояния.Найти(СостояниеЭД.СостояниеВерсииЭД) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СостояниеЭД.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СостояниеЭД.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СостояниеЭД.СостояниеВерсииЭД = НовоеСостояние;
		СостояниеЭД.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БСП ЭлектроннаяПодпись

// Преобразует назначения сертификатов в дружественный вид.
//
// Параметры:
//  Назначение  - Строка - назначение сертификата вида "TLS Web Client Authentication (1.3.6.1.5.5.7.3.2)".
//  НовоеНазначение  - Строка - удобное для понимания назначение сертификата вида "Проверка подлинности клиента".
//  ДобавлятьКодНазначения  - Булево - надо ли добавлять к назначению код назначения 
//    (например 1.3.6.1.5.5.7.3.2, чтобы получилось "Проверка подлинности клиента (1.3.6.1.5.5.7.3.2)").
//
Процедура ЗаполнитьНазначениеСертификата(Назначение, НовоеНазначение, ДобавлятьКодНазначения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НовоеНазначение = "";
	
	Для Индекс = 1 По СтрЧислоСтрок(Назначение) Цикл
		
		Строка = СтрПолучитьСтроку(Назначение, Индекс); 		
		Представление = Назначение;
		Код = "";
		
		Позиция = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(Строка, "(");
		Если Позиция <> 0 Тогда
			
			Представление = Лев(Строка, Позиция - 1);
			Код = Сред(Строка, Позиция + 1, СтрДлина(Строка) - Позиция - 1);
			
			Если ДобавлятьКодНазначения Тогда
				Представление = Представление  + " (" + Код + ")";
			КонецЕсли;
			
		КонецЕсли;		
		
		НовоеНазначение = НовоеНазначение + Представление;
		НовоеНазначение = НовоеНазначение + Символы.ПС;
		
	КонецЦикла;	
	
КонецПроцедуры

// Получает все подписи файла.
//
// Параметры:
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//  МассивВозврата - массив структур с возвращаемыми значениями.
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ПолноеИмяОбъектаСЭП = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
					|	ЭлектронныеПодписи.Подпись             КАК Подпись,
					|	ЭлектронныеПодписи.ИмяФайлаПодписи     КАК ИмяФайлаПодписи
					|ИЗ
					|	[ПолноеИмяОбъектаСЭП].ЭлектронныеПодписи КАК ЭлектронныеПодписи
					|ГДЕ
					|	ЭлектронныеПодписи.Ссылка = &СсылкаНаОбъект";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъектаСЭП]", ПолноеИмяОбъектаСЭП);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		СтруктураВозврата = Новый Структура("АдресПодписи, КомуВыданСертификат, ИмяФайлаПодписи",
											АдресПодписи,
											ВыборкаЗапроса.КомуВыданСертификат,
											ВыборкаЗапроса.ИмяФайлаПодписи);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Вызывается из формы Произвольного ЭД
Функция ОтпечаткиОжидаемыхСертификатов(ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО
	|ПОМЕСТИТЬ ВТ_ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Отпечаток КАК Отпечаток
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|						ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					СоглашенияЭДСертификаты.Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|						ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	|				ПО СертификатыЭП.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
	|			ПО ПодписываемыеВидыЭД.СертификатЭП = СертификатыЭП.Ссылка
	|		ПО ВТ_ЭД.ВидЭД = ПодписываемыеВидыЭД.ВидЭД
	|ГДЕ
	|	НЕ СертификатыЭП.Отозван
	|	И НЕ СертификатыЭП.ПометкаУдаления
	|	И ПодписываемыеВидыЭД.Использовать
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияЭДСертификатыКонтрагента.Отпечаток
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияЭДСертификатыКонтрагента
	|		ПО СоглашенияЭДСертификатыКонтрагента.Ссылка = ВТ_ЭД.СоглашениеЭД";
	Запрос.УстановитьПараметр("Ссылка", ЭлектронныйДокумент);
	
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Сервис1CЭДО

// Только для внутреннего использования
Функция ПрочитатьТекстИзФайла(ИмяФайла, Кодировка = Неопределено, АвтоопределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, Кодировка);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаНаДиске);
	
	Возврат ТекстИзФайла;
	
КонецФункции

// Только для внутреннего использования
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

// Только для внутреннего использования
Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

// Только для внутреннего использования
Функция БилетНаСайтПоддержки(Аутентификация, ПоказыватьОшибки = Истина) Экспорт
	
	Билет = "";
	Попытка
		ВебСервис = ОбщегоНазначения.WSПрокси(
			"https://login.1c.ru/api/public/ticket?wsdl",
			"http://api.cas.jasig.org/",
			"TicketApiImplService",
			"TicketApiImplPort",
			Аутентификация.Логин,
			Аутентификация.Пароль,
			5,
			Ложь);
		
		Билет = ВебСервис.getTicket(
			Аутентификация.Логин,
			Аутентификация.Пароль,
			"1C-EDO");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Если СтрНайти(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), "IncorrectLoginOrPasswordApiException") > 0 Тогда
			КраткоеПредставлениеОшибки = НСтр("ru='Некорректный логин или пароль пользователя.';uk='Неправильний логін або пароль користувача.'");
		КонецЕсли;
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось подключиться к пользовательскому сайту по причине:
                       |%1'
                       |;uk='Не вдалося підключитися до користувача сайту через:
                       |%1'"),
			КраткоеПредставлениеОшибки);
			
		Если ПоказыватьОшибки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Билет;
	
КонецФункции

// Только для внутреннего использования
Функция РегистрационныйПакетДляОператораЭДО(РеквизитыПакета, ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО) Экспорт
		
	// Сформируем пакет для 1СЭДО
	ИмяФайлаПакетаДля1СЭДО = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог() + "EDI_"
		+ РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО + ".zip";
	
	АдресКаталогаРегистрации = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(
		"reg", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаПакетаДляОператораЭДО            = АдресКаталогаРегистрации + "packet.zip";
	ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.zip";
	ИмяВременногоФайлаЭДКарточки                       = АдресКаталогаРегистрации + "card.xml";
	ИмяВременногоФайлаЭДТранспортнойИнформации         = АдресКаталогаРегистрации + "meta.xml";
	
	// Готовим данные для ОператораЭДО
	ИмяФайла = АдресКаталогаРегистрации + НовыйUUID() + ".bin";
	ЗашифрованныеДвоичныеДанныеОператораЭДО.Записать(ИмяФайла);
	
	ИмяФайлаПодписи = АдресКаталогаРегистрации + НовыйUUID() + ".bin";
	ПодписанныеДвоичныеДанныеДляОператораЭДО.Записать(ИмяФайлаПодписи);
	
	ИмяФайлаОписанияПакетаДляОператораЭДО = АдресКаталогаРегистрации + "packageDescription.xml";
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО = ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи);
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО.Записать(ИмяФайлаОписанияПакетаДляОператораЭДО);
	
	МассивФайловПакетаНаПодключениеЭДО = Новый Массив;
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаОписанияПакетаДляОператораЭДО);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайла);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаПодписи);
	СформироватьЗипАрхивФайлов(ИмяВременногоФайлаПакетаДляОператораЭДО, МассивФайловПакетаНаПодключениеЭДО);
	
	// Готовим соглашение для 1СЭДО
	ИмяФайлаСоглашенияНаПодключениеЭДО       = АдресКаталогаРегистрации + "LicenseCard.xml";
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлаСоглашенияНаПодключениеЭДО);
	
	ИмяФайлПодписиСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.p7s";
	ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО = Новый Массив;
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлаСоглашенияНаПодключениеЭДО);
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	СформироватьЗипАрхивФайлов(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО, МассивФайловАрхиваСоглашенияНаПодключениеЭДО);
	
	// Готовим описание пакета для 1СЭДО
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДКарточки", ИмяВременногоФайлаЭДКарточки);
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДТранспортнойИнформации", ИмяВременногоФайлаЭДТранспортнойИнформации);
	СоздатьФайлыОписанияПакета(РеквизитыПакета);
	
	МассивФайловРегистрационногоПакета = Новый Массив;
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаПакетаДляОператораЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДКарточки);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДТранспортнойИнформации);
	СформироватьЗипАрхивФайлов(ИмяФайлаПакетаДля1СЭДО, МассивФайловРегистрационногоПакета);
	
	УдалитьФайлы(АдресКаталогаРегистрации);
	
	Возврат ИмяФайлаПакетаДля1СЭДО;

КонецФункции

// Только для внутреннего использования
Процедура ОтправитьРегистрационныйПакет1СЭДО(Знач Файл, ПараметрыАутентификации, ЕстьОшибки) Экспорт
	
	Билет = БилетНаСайтПоддержки(ПараметрыАутентификации);
	Если Не ЗначениеЗаполнено(Билет) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	АдресРесурса = "SendRequest?ticket=" + Билет;
	
	// возможно будет ответ от сервера
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("txt");
	Попытка
		Соединение.ОтправитьДляОбработки(Файл, АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ЕстьОшибки = Истина;
		
		ФайлРезультата = Новый ТекстовыйДокумент;
		ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
		Результат = ФайлРезультата.ПолучитьТекст();
		
		ШаблонСообщения = НСтр("ru='При отправке заявления о регистрации: %1 на сервисе 1С-ЭДО возникла ошибка:';uk='При надсиланні заяви про реєстрації: %1 на сервісі 1С-ЕДО виникла помилка:'");
		
		Файл = Новый Файл(Файл);
		ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, Файл.Имя);
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрЗаменить(Результат, """", "");
			Результат = СтрЗаменить(Результат, ":", ",");
			МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
			
			КодОшибки = МассивПараметровОшибки[5];
			
			ШаблонОшибки = НСтр("ru='%1: %2.';uk='%1: %2.'");
			ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
			
			ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
				КодОшибки, ТекстОшибкиЭДО);
			
			ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
		Иначе
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			Результат, ТекстСообщения);
		
	КонецПопытки;
	УдалитьФайлы(ИмяФайлаРезультата);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьФайлОтветаОтСервераЭДО(АдресРесурса, ПараметрЗапросаОтветаОтСервера = Неопределено) Экспорт
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
	Если ПараметрЗапросаОтветаОтСервера <> Неопределено Тогда
		АдресРесурса = АдресРесурса + "/" + ПараметрЗапросаОтветаОтСервера;
	КонецЕсли;
	
	Попытка
		Соединение.Получить(АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ФайлРезультата = Новый ТекстовыйДокумент;
		ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
		Результат = ФайлРезультата.ПолучитьТекст();
		
		ТекстЗаголовкаСообщения = НСтр("ru='При работе с сервисом 1С-ЭДО возникла ошибка:';uk='При роботі з сервісом 1С-ЕДО виникла помилка:'");
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрЗаменить(Результат, """", "");
			Результат = СтрЗаменить(Результат, ":", ",");
			МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
			
			КодОшибки = МассивПараметровОшибки[5];
			
			ШаблонОшибки = НСтр("ru='%1: %2.';uk='%1: %2.'");
			ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
			
			
			ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
				КодОшибки, ТекстОшибкиЭДО);
			
			ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
			
		Иначе
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			Результат, ТекстСообщения);
			
	КонецПопытки;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

Функция ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи)
	
	ИмяВременногоФайлаОписаниеПакетаЭДО = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента = Новый ЗаписьXML;
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ОткрытьФайл(ИмяВременногоФайлаОписаниеПакетаЭДО, "windows-1251");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьОбъявлениеXML();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("ТрансИнф");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("ВерсПрог",
		ВРЕГ(Лев(Метаданные.Имя + " " + СокрЛП(Метаданные.Версия), 40)));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокументооборота",
		РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокументооборота", "Участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типТранзакции", "УчастникНП");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("отправитель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "абонент");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // отправитель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("получатель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторСубъекта", РеквизитыПакета.ОператорЭДОИд);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // получатель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("документ");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокумента", НовыйUUID());
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("сжат", XMLСтрока(Ложь));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("зашифрован", XMLСтрока(Истина));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокумента", "участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСодержимого", "xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("содержимое");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // содержимое
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("подпись");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПодписи).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // подпись
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // документ
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // ТрансИнф
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.Закрыть();
	
	ДвоичныеДанныеОписаниеПакетаЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаОписаниеПакетаЭДО);
	УдалитьФайлы(ИмяВременногоФайлаОписаниеПакетаЭДО);
	
	Возврат ДвоичныеДанныеОписаниеПакетаЭДО;
	
КонецФункции

Процедура СоздатьФайлыОписанияПакета(РеквизитыПакета)
	
	// Card
	ЭДКарточки = Новый ЗаписьXML;
	ЭДКарточки.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДКарточки, "windows-1251");
	ЭДКарточки.ЗаписатьОбъявлениеXML();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("card");
	
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДКарточки.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/card");
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Identifiers");
	ЭДКарточки.ЗаписатьАтрибут("ExternalIdentifier", "packet.zip");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Type");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Registration");
	ЭДКарточки.ЗаписатьАтрибут("ResignRequired", XMLСтрока(Истина));
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Description");
	ЭДКарточки.ЗаписатьАтрибут("Title", "Регистрация");
	ЭДКарточки.ЗаписатьАтрибут("Date", XMLСтрока(ТекущаяДатаСеанса()));
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalData");
	
	Для каждого Отпечаток Из РеквизитыПакета.МассивОтпечатков Цикл
		ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
		ЭДКарточки.ЗаписатьАтрибут("Name", "Imprint");
		ЭДКарточки.ЗаписатьАтрибут("Value", Отпечаток);
		ЭДКарточки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "OperatorID");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОператорЭДОИд);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияБЭД");
	ЭДКарточки.ЗаписатьАтрибут("Value", ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки());
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ПрикладноеРешение");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияПрикладногоРешения");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Версия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Sender");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Abonent");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьАтрибут("Inn", РеквизитыПакета.ИННОрганизации);
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.КППОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Kpp", РеквизитыПакета.КППОрганизации);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.ИдентификаторОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Id", РеквизитыПакета.ИдентификаторОрганизации);
	КонецЕсли;
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Receiver");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Organization");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.ОператорЭДО);
	ЭДКарточки.ЗаписатьАтрибут("Type", "SpecOperator");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.Закрыть();
	
	// meta
	ЭДТранспортнойИнформации = Новый ЗаписьXML;
	ЭДТранспортнойИнформации.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДТранспортнойИнформации, "windows-1251");
	ЭДТранспортнойИнформации.ЗаписатьОбъявлениеXML();
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ContainerDescription");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/meta");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("DocFlow");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Id", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Documents");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "AccessionAgreement");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Documents
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // DocFlow
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ContainerDescription
	ЭДТранспортнойИнформации.Закрыть();
	
КонецПроцедуры

#Область ПроверкаСостоянияКонтрагентовВ1СЭДО

#Область ПроверкаКонтрагентов

// Часть фонового задания по проверке контрагента из формы контрагента
Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт
	
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере
	Если Не Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры, Параметры.АдресХранилища);
	Исключение
		
		Операция = НСтр("ru='Проверка подключения контрагента к 1С-ЭДО из формы контрагента.';uk='Перевірка підключення контрагента до 1С-ЕДО з форми контрагента.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Процедура - Проверка одного контрагента по ИНН, КПП и Дате.
//
// Параметры:
//  Параметры	 - Структура - Параметры запуска фонового задания. Ключи структуры:
//		"Контрагент" - СправочникСсылка.<Контрагенты> - Проверяемый контрагент.
//		"ИНН"		 - Строка - ИНН Контрагента.
//		"КПП"		 - Строка - КПП Контрагента.
//		"Дата"		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//		                  тогда берется текущая дата.
//		"СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат
//		                  проверки контрагента сразу сохранять в регистр.
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  АдресХранилища	 - Строка - Адрес временного хранилища, в который будет помещен результат проверки контрагента.
Процедура ПроверитьКонтрагента(Параметры, АдресХранилища) Экспорт 
	
	// Готовим данные в нужном формате для передачи на проверку.
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		НоваяСтрока.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, Истина, Параметры.СохранятьРезультатСразуПослеПроверки);
	
КонецПроцедуры

// Процедура - Проверка нескольких контрагентов.
//
// Параметры:
//  ДанныеКонтрагентов					 - ТаблицаЗначений - Содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  АдресХранилища						 - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  ЭтоПроверкаСправочника				 - Булево - Указывает, выполняется ли проверка справочника. 
//		Для справочника результат проверки сохраняется во временное хранилище, либо записывается в регистр.
//		Для остальных объектов результат проверки заполняется в колонке Состояние таблицы ДанныеКонтрагентов.
//  СохранятьРезультатСразуПослеПроверки - Булево - Признак, указывающий нужно ли результат проверки контрагента.
Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища = Неопределено, ЭтоПроверкаСправочника = Истина, СохранятьРезультатСразуПослеПроверки = Ложь) Экспорт
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	Если ЭтоПроверкаСправочника Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	КонецЕсли;

	// Приведение данных к нужному формату, выявление записей с ошибками.
	ПодготовитьДанныеКПроверке(ДанныеКонтрагентов);
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние и у которых нет ошибок.
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
	ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	
	// Сохраняем результаты проверки, если это справочник.
	Если ЭтоПроверкаСправочника Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища, СохранятьРезультатСразуПослеПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры = Неопределено) Экспорт
	
	Возврат;
	
	
	// Выбираем контрагентов, которых нет в регистре сведений.
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ %5
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.%1 КАК ИНН,
	|	Контрагенты.%2 КАК КПП,
	|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	Справочник.%3 КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|		ПО Контрагенты.Ссылка = СостоянияКонтрагентовБЭД.Контрагент
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Состояние ЕСТЬ NULL 
	|	%4";
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Текст = СтрЗаменить(
			Текст,
			"&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
		
	КонецЕсли;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	УсловиеНаГруппу = "";
	Если СправочникКонтрагентовИерархический() Тогда
		УсловиеНаГруппу = "И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	
	ОграничениеНаПрава = "";
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		РазмерПорции = 1000;
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0");
	Иначе
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ";
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(Текст, 
		ИмяРеквизитаИННКонтрагента, 
		ИмяРеквизитаКППКонтрагента, 
		ИмяПрикладногоСправочника, 
		УсловиеНаГруппу,
		ОграничениеНаПрава);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Прерываем обновление, если не осталось необработанных данных.
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		Параметры.ОбработкаЗавершена = ДанныеКонтрагентов.Количество() = 0;
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки регламентным заданием.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент.
//  Отказ			 - Булево - Параметр обработчика подписки на событие.
Процедура СохранитьРезультатПроверкиКонтрагентаПриЗаписи(КонтрагентОбъект, Отказ) Экспорт 
	
	Возврат;
	
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СправочникКонтрагентовИерархический() И КонтрагентОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.ИНН = &ИНН
	|	И СостоянияКонтрагентовБЭД.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", КонтрагентОбъект[ИмяРеквизитаИННКонтрагента]);
	Запрос.УстановитьПараметр("КПП", КонтрагентОбъект[ИмяРеквизитаКППКонтрагента]);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентОбъект.Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("Контрагент",	КонтрагентОбъект.Ссылка);
	ДанныеКонтрагента.Вставить("ИНН", 			КонтрагентОбъект[ИмяРеквизитаИННКонтрагента]);
	ДанныеКонтрагента.Вставить("КПП",			КонтрагентОбъект[ИмяРеквизитаКППКонтрагента]);
	ДанныеКонтрагента.Вставить("Дата", 			НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагента.Вставить("Состояние", 	Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагента.Вставить("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхКПроверке

// Проверка ошибок, удаление дублей.
Процедура ПодготовитьДанныеКПроверке(ДанныеКонтрагентовДляПроверки)
	
	ДанныеКонтрагентов = ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки);
	ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов);
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

Функция ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	ЕстьОбластьДанных = ДанныеКонтрагентовДляПроверки.Колонки.Найти("ОбластьДанныхВспомогательныеДанные") <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса");
	
	// Копируем таблицу, сохраняя типы колонок.
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками.
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		
		// В зависимости от наличия колонки ОбластьДанныхВспомогательныеДанные, копируем разный набор данных.
		СписокСвойств = "Контрагент, ИНН, КПП, Состояние, Дата";
		Если ЕстьОбластьДанных Тогда
			СписокСвойств = СписокСвойств + ", ОбластьДанныхВспомогательныеДанные";
		КонецЕсли;
		
		// Гарантировано контрагнет не подключен, если поля не заполнены.
		Если Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.ИНН) И Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.КПП) Тогда
			ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки, СписокСвойств);
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура СвернутьДанныеКонтрагентов(ДанныеКонтрагентов)
	
	// Удаляем из таблицы дубли
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, ОбластьДанныхВспомогательныеДанные");
	Иначе
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - В таблице ДанныеКонтрагентов оставляет только записи по контрагентам,
//		к которым есть доступ. В модели сервиса из неразделенной области проверку делать
//		не нужно, поскольку регламентное задание выполняется под администратором 
//		и нет доступа к разделенному справочнику контрагентов.
//
Процедура ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов)
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	Если НЕ РазделениеВключено
		ИЛИ РазделениеВключено И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ВсеДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ ВсеКонтрагенты
			|ИЗ
			|	Справочник.%1 КАК СправочникКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ПО СправочникКонтрагентов.Ссылка = ВсеДанныеКонтрагентов.Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеКонтрагенты КАК ВсеКонтрагенты
			|		ПО (ВсеКонтрагенты.Контрагент = ВсеДанныеКонтрагентов.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|ГДЕ
			|	ВсеДанныеКонтрагентов.Контрагент = ЗНАЧЕНИЕ(Справочник.%1.ПустаяСсылка)";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
		Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяПрикладногоСправочника);
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВебСервисом

Процедура ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор) Экспорт
	
	// Проверяем только тех контрагентов, которые соответствуют указанному отбору
	ДанныеКонтрагентовДляПроверкиСервисом = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		// Нет данных для проверки
		Возврат;
	КонецЕсли;
	
	РазмерПорции = 10000;
	
	// Разбиваем всю таблицу на блоки запросов 
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
		
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;
		
		ИмяВременногоФайлаЗапросаСостояний = ТекущееИмяВременногоФайла("xml");
		ЗапросСостояний = Новый ЗаписьXML;
		ЗапросСостояний.ОткрытьФайл(ИмяВременногоФайлаЗапросаСостояний, "windows-1251");
		ЗапросСостояний.ЗаписатьОбъявлениеXML();
		ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonents");
			
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			
			ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonent");
				ЗапросСостояний.ЗаписатьНачалоЭлемента("INN");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.ИНН);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
				ЗапросСостояний.ЗаписатьНачалоЭлемента("KPP");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.КПП);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
			ЗапросСостояний.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		ЗапросСостояний.ЗаписатьКонецЭлемента();
		ЗапросСостояний.Закрыть();
		
		Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		АдресРесурса = "GetMassInfo";
		
		// возможно будет ответ от сервера
		ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml"); ДанныеФайла = "";
		Попытка
			Соединение.ОтправитьДляОбработки(ИмяВременногоФайлаЗапросаСостояний, АдресРесурса, ИмяФайлаРезультата);
			
			ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаРезультата, , Истина);
			ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом);
		Исключение
			ЕстьОшибки = Истина;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			ШаблонСообщения = НСтр("ru='При проверке состояния контрагентов на сервисе 1С-ЭДО возникла ошибка:';uk='При перевірці стану контрагентів на сервісі 1С-ЕДО виникла помилка:'");
			
			Файл = Новый Файл(Файл);
			ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Файл.Имя);
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = СтрЗаменить(Результат, """", "");
				Результат = СтрЗаменить(Результат, ":", ",");
				МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
				
				КодОшибки = МассивПараметровОшибки[5];
				
				ШаблонОшибки = НСтр("ru='%1: %2.';uk='%1: %2.'");
				ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
				
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
					КодОшибки, ТекстОшибкиЭДО);
				
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
			Иначе
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
				Результат, ТекстСообщения);
		КонецПопытки;
		
		УдалитьФайлы(ИмяВременногоФайлаЗапросаСостояний);
		УдалитьФайлы(ИмяФайлаРезультата);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом)
	
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		
		ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			
			Для каждого Строка Из ДанныеКонтрагентовДляПроверкиСервисом Цикл
				Если ЗначениеЗаполнено(ДеревоXML.Строки.Найти(Строка.ИНН, "Значение", Истина))
					И ЗначениеЗаполнено(ДеревоXML.Строки.Найти(Строка.КПП, "Значение", Истина)) Тогда
					
					Строка.Состояние = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
				Иначе
					Строка.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьРезультатаПроверкиВРегистрСведений

// Проверка нескольких контрагентов.
Процедура СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища = Неопределено, СохранятьРезультатСразуПослеПроверки = Ложь)
	
	Если ДанныеКонтрагентов.Количество() = 1 Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[0]; 
	
		// Сохраняем во временное хранилище.
		Если ЗначениеЗаполнено(АдресХранилища)  Тогда
			ПоместитьВоВременноеХранилище(ДанныеКонтрагента.Состояние, АдресХранилища);
		КонецЕсли;
			
		// Сохраняем в регистр
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) 
			И (НЕ ЗначениеЗаполнено(АдресХранилища) ИЛИ СохранятьРезультатСразуПослеПроверки) Тогда
			
			СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
			
		КонецЕсли;
		
	Иначе
		
		СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента)
	
	Попытка
		
		Контрагент = ДанныеКонтрагента.Контрагент;
		
		// Блокируем по Контрагенту
		СтруктураКлюча = Новый Структура();
		СтруктураКлюча.Вставить("Контрагент", Контрагент);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			ОбластьДанныхВспомогательныеДанные	= ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			СтруктураКлюча.Вставить("ОбластьДанныхВспомогательныеДанные", ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;

		Ключ = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		// Записываем данные в регистр.
		НаборЗаписей = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
		
		НаборЗаписей.Записать();
		
	Исключение
		
		Операция = НСтр("ru='Запись результатов проверки подключения контрагентов к 1С-ЭДО в регистр.';uk='Запис результатів перевірки підключення контрагентів до 1С-ЕДО в регістр.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
// Функция - Шаблон таблицы, используемой для передачи данных в веб-сервис.
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица с колонками "Контрагент", "ИНН", "КПП", "Дата", "Состояние", "ДополнительныеПараметры"
//                   "ОбластьДанныхВспомогательныеДанные"(если есть подсистема РаботаВМоделиСервиса).
Функция ШаблонТаблицыДанныеКонтрагента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	//СвойстваСправочника = ПроверкаКонтрагентовКлиентСервер.СвойстваСправочникаКонтрагенты();
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Тип = "СправочникСсылка." + ИмяПрикладногоСправочника;
	
	// Проверяемый контрагент
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов(Тип));
	// ИНН контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаИННКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	// КПП контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаКППКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	// Дата, на которую выполняется проверка контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	// Результат проверки контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	// Область данных
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
КонецПроцедуры

Функция СправочникКонтрагентовИерархический()
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	Возврат Метаданные.Справочники[ИмяПрикладногоСправочника].Иерархический;
	
КонецФункции

Процедура ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, ПолучатьВсеСостоянияИзРегистра = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ДанныеКонтрагентов.Дата
	              	|ПОМЕСТИТЬ ДанныеКонтрагентов
	              	|ИЗ
	              	|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент,
	              	|	ДанныеКонтрагентов.ИНН,
	              	|	ДанныеКонтрагентов.КПП,
	              	|	ДанныеКонтрагентов.Дата,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	              	|	ВЫБОР
	              	|		КОГДА &ПолучатьВсеСостоянияИзРегистра
	              	|			ТОГДА СостоянияКонтрагентовБЭД.Состояние
	              	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.ПустаяСсылка)
	              	|	КОНЕЦ КАК Состояние
	              	|ИЗ
	              	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	              	|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентовБЭД.Контрагент
	              	|			И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентовБЭД.ИНН
	              	|			И ДанныеКонтрагентов.КПП = СостоянияКонтрагентовБЭД.КПП
	              	|			И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные";
					
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные",
			"");
		
	КонецЕсли;
				  
	Запрос.УстановитьПараметр("ПолучатьВсеСостоянияИзРегистра", ПолучатьВсеСостоянияИзРегистра); 
	
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Только для внутреннего использования
Функция НовыйUUID() Экспорт
	
	Возврат нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Только для внутреннего использования
Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт, МассивСтруктурДанных = Неопределено) Экспорт
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	ЭтоПроизвольныйДокумент = ЭтоПакетПроизвольногоЭД(ПодготовленныеДокументы);
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	УдалитьФайлы(АдресКаталога, "*");
	Для Каждого СтрокаЭД Из Конверт.ЭлектронныеДокументы Цикл
		ДокументНаОтправку = СтрокаЭД.ЭлектронныйДокумент;
		
		ДанныеФайла = ПолучитьДанныеФайла(ДокументНаОтправку);
		
		// Шифрование ЭД
		Если Конверт.ДанныеЗашифрованы Тогда
			Если МассивСтруктурДанных <> Неопределено Тогда // шифрование произведено на клиенте
				Для Каждого ЭлементДанных Из МассивСтруктурДанных Цикл
					Если ЭлементДанных.ЭлектронныйДокумент = СтрокаЭД.ЭлектронныйДокумент Тогда
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ЭлементДанных.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПараметрыШифрования = ПолучитьМассивАдресовСертификатовШифрования(ДокументНаОтправку);
				Если ПараметрыШифрования <> Неопределено Тогда
					Отказ = Ложь;
					МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
					Если Отказ Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						УдалитьФайлы(АдресКаталога);
						Возврат;
					КонецЕсли;
					
					МассивСертификатов = Новый Массив;
					Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
						
						ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
						Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
						МассивСертификатов.Добавить(Сертификат);
					КонецЦикла;
					
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку) Тогда
			СохранитьВместеСПоследнейЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			СохранитьВместеСЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		УдалитьФайлы(АдресКаталога);
		Возврат;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	ЗипКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	ЗипКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
	
	Для Каждого Файл Из Файлы Цикл
		ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений    = ПолучитьСоответствиеФайловИПодписей(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(
									Конверт,
									СоответствиеВложений,
									СоответствиеФайлЭД,
									ЭтоПроизвольныйДокумент);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога + "packageDescription.xml");
	УдалитьФайлы(ТекстОписанияУчастников);
	ЗипКонтейнер.Добавить(АдресКаталога + "packageDescription.xml");
	
	ЗипКонтейнер.Записать();
	
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
	УдалитьФайлы(АдресКаталога);
	
КонецПроцедуры

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПакетПроизвольногоЭД(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл
		Если ТипЗнч(Документ.ВладелецФайла) = Тип("ДокументСсылка.ПроизвольныйЭД")
			И Документ.ВладелецФайла.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если СтрНайти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сертификатами ЭП

Процедура СохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,

							МассивСтруктурПодписей,
							АдресКаталога,
							СоответствиеФайлЭД,
							БезИсходногоФайла = Ложь,
							ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	
	Если НЕ БезИсходногоФайла Тогда
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи, ТипПлатформыСервера);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ФайлСсылка.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ФайлСсылка.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(Файл.Имя, СтруктураПараметровЭД);
		Иначе
			// СоответствиеФайлЭД - структура файлов ЭД.
			НоваяСтрока = СоответствиеФайлЭД.ГлавныйФайлПодписи.Добавить();
			НоваяСтрока.Имя = "";
			НоваяСтрока.Путь = Файл.Имя
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		ДвоичныеДанныеПодписи.Записать(ПолныйПутьПодписи);
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеФайловИПодписей(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						ЭтоПроизвольныйЭД = Неопределено,
						СоответствиеФайлЭД = Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла, СтруктураПараметровЭД);
		Иначе
			СоответствиеФайлЭД.Вставить("ГлавныйФайл", ДанныеФайла.ИмяФайла);
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроизвольныйЭД = Истина Тогда
		
		ИмяФайла      = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога + ИмяФайла + ".zip";
		ИмяАрхива     = ИмяФайла + ".zip";
		
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭП.zip";
			ИмяАрхива     = ИмяФайла + "ЭП.zip";
		КонецЕсли;
		
		ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);
		ЗипКонтейнер.Добавить(ИмяКаталога + ИмяПолучаемогоФайла );
		
		ЗипКонтейнер.Записать();
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			УдалитьФайлы(ИмяКаталога + ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ИмяАрхива, СтруктураПараметровЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Добавление объектов в присоединенные файлы

Процедура СформироватьХМЛФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	
	ВерсияСхемыCML2 = ОбменСКонтрагентамиПовтИсп.ВерсияСхемыCML2();
	ВерсияСхемыCML402 = ОбменСКонтрагентамиПовтИсп.ВерсияСхемыCML402();
	
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И НЕ ДопПараметры.Свойство("БыстрыйОбмен") Тогда
			НастройкиОбменаЭД = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Иначе
			НастройкиОбменаЭД = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
			Продолжить
		КонецЕсли;
		
		Если НастройкиОбменаЭД.ПрофильНастроекЭДО.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		КонецЕсли;

		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			Если НастройкиОбменаЭД.ВерсияФормата = ВерсияСхемыCML2 Тогда
				
				СтруктураВозврата = ОбменСКонтрагентамиВнутренний.СформироватьСчетНаОплатуПоДокументу(ОбъектДляВыгрузки,
					НастройкиОбменаЭД);

			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураВозврата) Тогда
			ВерсияРегламентаЭДО = "";
			Если НЕ НастройкиОбменаЭД.Свойство("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО)
				ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламентаЭДО) Тогда
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			СтруктураВозврата.СтруктураЭД.Вставить("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО);
			
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗипАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлЗипАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьЗип = Новый ЗаписьZIPФайла(ФайлЗипАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьЗип.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьЗип.Записать();
		Возврат ФайлЗипАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru='Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
            |и наличие доступа к каталогу временных файлов.'
            |;uk='Перевірте підтримку російської мови в регіональних настройках ОС для non-Unicode programs
            |і наявність доступу до каталогу тимчасових файлів.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='запись файла архива на диск';uk='запис файлу архіву на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка сообщений

Функция СоздатьТекстОписиЭД(Конверт, СоответствиеВложений, СоответствиеФайлЭД, ЭтоПроизвольныйДокумент)
	
	РеквизитыКонверта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт, "Отправитель, Получатель");
	ЦентрОбменаЭД =    РеквизитыКонверта.Отправитель;
	УчастникОбменаЭД = РеквизитыКонверта.Получатель;
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьХМЛ.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьХМЛ.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	// Текст произвольного документа
	Если ЭтоПроизвольныйДокумент Тогда 
		Текст = Конверт.ЭлектронныеДокументы[0].ЭлектронныйДокумент.ВладелецФайла.Текст;
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Текст");
		ЗаписьХМЛ.ЗаписатьТекст(Текст);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЕсли;	
	
	// Шифрование по документам
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьХМЛ.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Зашифрован");
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьТекст("Да");
		Иначе
			ЗаписьХМЛ.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьХМЛ.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьХМЛ.ЗаписатьТекст(Вложение.Ключ);
		
		СтруктураПараметровЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		НомерЭД = ""; УникальныйИД = "";
		Если СтруктураПараметровЭД.Свойство("НомерЭД", НомерЭД) И ЗначениеЗаполнено(НомерЭД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьХМЛ.ЗаписатьТекст(НомерЭД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		Если СтруктураПараметровЭД.Свойство("УникальныйИД", УникальныйИД) И ЗначениеЗаполнено(УникальныйИД) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("УникальныйИД");
			ЗаписьХМЛ.ЗаписатьТекст(УникальныйИД);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьХМЛ.ЗаписатьТекст(Подпись);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение почты

Процедура ОбработатьПодтверждениеПолучения(Сообщение, ЭтоФайл = Ложь)
	
	Если ЭтоФайл Тогда
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(Сообщение.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
			КонецЕсли;
			Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЧтениеХМЛ.Прочитать();
				ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
			КонецЕсли;
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		
		Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
			И ДатаПолучения <> Дата('00010101') Тогда
			ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
		КонецЕсли;
		УдалитьФайлы(Сообщение.ПолноеИмя);
	Иначе
		Если СтрНайти(Сообщение.Тема, "Подтверждение получения пакета электронных документов") > 0 Тогда
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеПодтверждения = Вложение.Значение;
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
				ДвоичныеДанныеПодтверждения.Записать(ИмяФайла);
				
				ЧтениеХМЛ = Новый ЧтениеXML;
				ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
				Пока ЧтениеХМЛ.Прочитать() Цикл
					Если ЧтениеХМЛ.ЛокальноеИмя = "ЭлектронныйДокумент" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДокументПакетЭД = ОпределитьПодтверждаемыйПакетЭД(ЧтениеХМЛ.Значение);
					КонецЕсли;
					Если ЧтениеХМЛ.ЛокальноеИмя = "ДатаПолучения" И ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеХМЛ.Прочитать();
						ДатаПолучения = Дата(ЧтениеХМЛ.Значение);
					КонецЕсли;
				КонецЦикла;
				ЧтениеХМЛ.Закрыть();
				УдалитьФайлы(ИмяФайла);
				Если ЗначениеЗаполнено(ДокументПакетЭД) И ДокументПакетЭД.СтатусПакета <> Перечисления.СтатусыПакетовЭД.Доставлен
					И ДатаПолучения <> Дата('00010101') Тогда
					
					ОбновитьСтатусыДокументовПакетаЭД(ДокументПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ДатаПолучения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьПодтверждениеПоПакету(ПакетЭД, РесурсОтправителя, АдресОтправителя, ТипОтправки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
	Если ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Тогда
		Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			СоответствиеВложений = Новый Соответствие;
			СоответствиеВложений.Вставить(ФайлХМЛ.Имя, Новый ДвоичныеДанные(ФайлХМЛ.ПолноеИмя));
			
			ПараметрыОтправки = Новый Структура();
			ПараметрыОтправки.Вставить("Кому",     АдресОтправителя);
			ПараметрыОтправки.Вставить("Тема",     "Подтверждение получения пакета электронных документов: " + ИмяПакетаЭД);
			ПараметрыОтправки.Вставить("Тело",     "");
			ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
			ПараметрыОтправки.Вставить("Пароль",   РесурсОтправителя.Пароль);
			Попытка
				РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РесурсОтправителя, ПараметрыОтправки);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Текст = НСтр("ru='Ошибка при отправке сообщения на сервер электронной почты.
                |%1'
                |;uk='Помилка при відправці повідомлення на сервер електронної пошти.
                |%1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
				
				ТекстСообщения = НСтр("ru='Ошибка при отправке эл.документов.';uk='Помилка при відправці ел.документів.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Отправка эл.документов';uk='Відправлення ел.документів'"),
				ТекстОшибки,
				ТекстСообщения);
			КонецПопытки;
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			ПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "ПрофильНастроекЭДО");
			FTPСоединение = ПолучитьFTPСоединение(ПрофильНастроекЭДО);
			Если FTPСоединение = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			КаталогИсхДокументов = АдресОтправителя;
			
			ПодготовитьПутьFTP(КаталогИсхДокументов);
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			
			ТекстОшибки = "";
			Попытка
				FTPСоединение.УстановитьТекущийКаталог(КаталогИсхДокументов);
			Исключение
				СоздатьКаталогиFTP(FTPСоединение, КаталогИсхДокументов, , ТекстОшибки);
			КонецПопытки;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				Возврат;
			КонецЕсли;
			ЗаписатьФайлНаFTP(FTPСоединение, ФайлХМЛ.ПолноеИмя, ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			ИмяПакетаЭД = ВыборкаПрисоединенныхФайлов.Наименование;
			
			ФайлХМЛ = СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД);
			АдресКаталога = АдресОтправителя + ?(Прав(АдресОтправителя, 1) <> "\", "\", "");
			КопироватьФайл(ФайлХМЛ.ПолноеИмя, АдресКаталога + ФайлХМЛ.Имя);
			УдалитьФайлы(ФайлХМЛ.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьХМЛФайлПодтвержденияПолучения(ИмяПакетаЭД)
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(ИмяФайла);
	// Корневой элемент
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Подтверждение");
	// Имя документа
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ЭлектронныйДокумент");
	ЗаписьХМЛ.ЗаписатьТекст(ИмяПакетаЭД);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ДатаПолучения");
	ЗаписьХМЛ.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.Закрыть();
	
	Возврат Новый Файл(ИмяФайла);
	
КонецФункции

Функция НеобходимоПолучить(Сообщение, СтруктураПараметров)
	
	Если Сообщение.Вложения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Вложения.Количество() = 1 Тогда 
	
		Если СтрНайти(Сообщение.Тема, "Подтверждение") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если СтрНайти(Сообщение.Тема, "Обмен эл.документами:") Тогда
			
			Для Каждого Вложение Из Сообщение.Вложения Цикл
				ДвоичныеДанныеВложения = Вложение.Значение;
			КонецЦикла;
		
			Результат = НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанныеВложения, Вложение.Ключ, СтруктураПараметров);
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НеобходимоПолучитьДвоичныеДанные(ДвоичныеДанные, ИмяФайла, СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определим из файла вложений идентификаторы отправителя и получателя и сохраним файл на диск.
	ИмяВременногоФайлаЗИП = ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаЗИП);
	
	ЗИПЧтение = Новый ЧтениеZipФайла(ИмяВременногоФайлаЗИП);
	КлючУникальности = Новый УникальныйИдентификатор();
	ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("input", КлючУникальности);
	
	Попытка
		ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Распаковка пакета ЭД';uk='Розпакування пакету ЕД'"),
			ТекстОшибки, ТекстСообщения);
		ЗипЧтение.Закрыть();
		УдалитьФайлы(ИмяВременногоФайлаЗИП);
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецПопытки;
	
	ЗипЧтение.Закрыть();
	УдалитьФайлы(ИмяВременногоФайлаЗИП);
	РаспакованныеФайлы = НайтиФайлы(ПапкаДляРаспаковки, "*");
	
	ФайлИнформации      = Неопределено;
	ФайлКарточки        = Неопределено;
	НастройкиСоглашения = Неопределено;
	
	Для Каждого ТекФайл Из РаспакованныеФайлы Цикл
		Если СтрНайти(ТекФайл.Имя, "packageDescription") > 0 Тогда
			ФайлИнформации = ТекФайл;
			Прервать;
		ИначеЕсли СтрНайти(ТекФайл.Имя, "card") > 0 Тогда
			ФайлКарточки = ТекФайл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Зашифрован = Ложь;
	Если НЕ ФайлИнформации = Неопределено Тогда
		// Определим в этом файле строку с отправителем и получателем и признак шифрования и попытаемся найти соглашение.
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Отправитель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДОтправителя = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Зашифрован ИЛИ Булево(ЧтениеХМЛ.Значение);
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Получатель" Тогда
				ЧтениеХМЛ.Прочитать();
				ИДПолучателя = ЧтениеХМЛ.Значение;
			КонецЕсли;
				
		КонецЦикла;
		
		ЧтениеХМЛ.Закрыть();
		НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
		
		ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия10;
		
	КонецЕсли;
	
	Если НЕ ФайлКарточки = Неопределено Тогда
		
		ИДПолучателя  = Неопределено;
		ИДОтправителя = Неопределено;
		
		ОбъектXML = Новый ЧтениеXML;
		СтруктураЗначений = Новый Структура;
		
		Попытка
			ТипКарточки = ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card");
			ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ТипКарточки);
			ОбъектXML.Закрыть();
			ИДОтправителя = ЭД.Sender.Abonent.ID;
			ИДПолучателя  = ЭД.Receiver.Abonent.ID;
			Если ЭД.Description <> Неопределено
				И ЭД.Description.Свойства().Получить("AdditionalData") <> Неопределено
				И ЭД.Description.AdditionalData <> Неопределено
				И ЭД.Description.AdditionalData.Свойства().Получить("AdditionalParameter") <> Неопределено
				И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
				
				Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
					Если Свойство.Name = "Зашифрован" Тогда
						Зашифрован = Булево(Свойство.Value);
						Продолжить;
					КонецЕсли;
					Если Свойство.Name = "ВерсияФорматаПакета" Тогда
						ВерсияФорматаПакета = ВерсияФорматаИзСтроки(Свойство.Value);
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			НастройкиСоглашения = ПолучитьНастройкиОбменаЭДПоИД(ИДПолучателя, ИДОтправителя);
			
		Исключение
			
			ОбъектXML.Закрыть();
			
			ШаблонСообщения = НСтр("ru='Возникла ошибка при чтении данных из файла %1: %2.';uk='Виникла помилка при читанні даних з файлу %1: %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Чтение ЭД.';uk='Читання ЕД.'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	Если (ФайлИнформации = Неопределено И ФайлКарточки = Неопределено)
		ИЛИ НастройкиСоглашения = Неопределено Тогда // не нашли файл с описанием или нет обмена
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// Теперь проверим, что такого транспортного пакета от этого отправителя еще не было.
	ИмяПакета = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	
	ЗапросПрисоединенногоФайла = Новый Запрос;
	ЗапросПрисоединенногоФайла.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПрисоединенныйФайл
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Направление = &Направление
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Получатель ПОДОБНО &Получатель
	|	И ВЫРАЗИТЬ(ЭДПрисоединенныеФайлы.ВладелецФайла КАК Документ.ПакетЭД).Отправитель ПОДОБНО &Отправитель
	|	И ЭДПрисоединенныеФайлы.Наименование ПОДОБНО &Наименование
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Направление",  Перечисления.НаправленияЭД.Входящий);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Получатель",   ИДПолучателя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Отправитель",  ИДОтправителя);
	ЗапросПрисоединенногоФайла.УстановитьПараметр("Наименование", ИмяПакета);
	
	РезультатПустой = ЗапросПрисоединенногоФайла.Выполнить().Пустой();
	
	УдалитьФайлы(ПапкаДляРаспаковки);
	
	Если РезультатПустой Тогда
		СтруктураПараметров.Вставить("Получатель",          ИДПолучателя);
		СтруктураПараметров.Вставить("Отправитель",         ИДОтправителя);
		СтруктураПараметров.Вставить("Организация",         НастройкиСоглашения.Организация);
		СтруктураПараметров.Вставить("Контрагент",          НастройкиСоглашения.Контрагент);
		СтруктураПараметров.Вставить("ПрофильНастроекЭДО",  НастройкиСоглашения.ПрофильНастроекЭДО);
		СтруктураПараметров.Вставить("НастройкаЭДО",        НастройкиСоглашения.НастройкаЭДО);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      НастройкиСоглашения.СпособОбменаЭД);
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", НастройкиСоглашения.СертификатОрганизацииДляРасшифровки);
		СтруктураПараметров.Вставить("АдресОтправителя",    НастройкиСоглашения.АдресОтправителя);
		СтруктураПараметров.Вставить("АдресПолучателя",     НастройкиСоглашения.АдресПолучателя);
		СтруктураПараметров.Вставить("Зашифрован",          Зашифрован);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьПодтверждаемыйПакетЭД(ПредставлениеПакета)
	
	СтрокаИдентификатора = СтрЗаменить(ПредставлениеПакета, "EDI_", "");
	Идентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатора);
	ДокументПакет = Документы.ПакетЭД.ПолучитьСсылку(Идентификатор);
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументПакет) Тогда
		ДокументПакет = Неопределено;
	КонецЕсли;
	
	Возврат ДокументПакет;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

// Обновляет статусы электронных документов.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на электронные документы, состояние которых надо обновить.
//  ПризнакПодписи - Булево - признак того, что документы подписаны ЭП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
			Если ((ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				
			ИЛИ (ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение))
			
			И Не (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			 		И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			НачатьТранзакцию();
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
			
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокумент);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
			
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='подготовка к отправке ЭД';uk='підготовка до відправки ЕД'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция ПолучитьМассивАдресовСертификатовШифрования(ПрисоединенныйФайл) Экспорт
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла, , , ПрисоединенныйФайл);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения)
		ИЛИ Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(ПараметрыСоглашения.СпособОбменаЭД) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	
	Если СертификатКонтрагентаШифрования = Неопределено ИЛИ СертификатОрганизацииШифрования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата            = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ДанныеСертификата.Получить();
	
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Процедура ЗаписатьДатуПолучения(ЭД, ДатаИзменения)
	
	ТекСтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СтатусЭД");
	
	Попытка
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='запись даты получения ЭД';uk='запис дати отримання ЕД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ЭД, ДатаИзменения)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, ВидЭД, СоглашениеЭД, ПрофильНастроекЭДО");
	ТекСтатусЭД = РеквизитыЭД.СтатусЭД;
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
	
	Попытка
		
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД)
				
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
				И РеквизитыЭД.ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ЭД);
				
			Иначе
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='запись даты отправки ЭД';uk='запис дати відправлення ЕД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция СтруктураПараметровЭД()
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("ДоговорКонтрагента",   Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",         Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ПараметрыЭД.Вставить("Партнер",          Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Версии электронных документов

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД КАК НомерВерсии
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла = &СсылкаНаВладельца
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсии;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через каталог

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураПараметров.Свойство("ИдентификаторДопФайла", УникальныйИдентификаторЭД);
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);

		УдалитьФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
			ВспомогательнаяСтруктура.Вставить("Организация", СтруктураПараметров.СтруктураЭД.Организация);
			ВспомогательнаяСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомогательнаяСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомогательнаяСтруктура.Вставить("СоглашениеЭД", СтруктураПараметров.СтруктураЭД.СоглашениеЭД);
			ВспомогательнаяСтруктура.Вставить("НомерЭД", СтруктураПараметров.СтруктураЭД.НомерЭД);
			ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураПараметров.УникальныйИдентификатор);
			ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
			ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомогательнаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

Функция ПреобразоватьДатуВКаноническийВид(ИскомаяДата)
	
	Если ТипЗнч(ИскомаяДата) = Тип("Дата") Тогда
		
		ДатаКаноническогоВида = Формат(Год(ИскомаяДата),"ЧГ=0") + Формат(Месяц(ИскомаяДата), "ЧЦ=2; ЧВН=")
			+ Формат(День(ИскомаяДата), "ЧЦ=2; ЧВН=") + Формат(Час(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=")
			+ Формат(Минута(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		ДатаКаноническогоВида = ИскомаяДата;
	КонецЕсли;
	
	Возврат ДатаКаноническогоВида;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через FTP

Процедура ПроверитьФайл(ШаблонСообщения, FTPСоединение, ТекстОшибки)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТестоваяСтрока = "Тестовая строка";
	ТекстовыйДокумент.УстановитьТекст(ТестоваяСтрока);
	ТекстовыйДокумент.Записать(ВремФайл);
	ФайлТест = Новый Файл(ВремФайл);
		
	ЗаписатьФайлНаFTP(FTPСоединение, ВремФайл, ФайлТест.Имя, Истина, ТекстОшибки);
	
	УдалитьФайлы(ВремФайл);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлПолучатель = ПолучитьИмяВременногоФайла();
	
	ПолучитьФайлСFTP(FTPСоединение, ФайлТест.Имя, ФайлПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		УдалитьФайлы(ФайлПолучатель);
		Возврат;
	КонецЕсли;
		
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПолучатель);
	СтрокаРезультата = ТекстовыйДокумент.ПолучитьТекст();
	УдалитьФайлы(ФайлПолучатель);
	Если НЕ СтрокаРезультата = ТестоваяСтрока Тогда
		ШаблонСообщения = НСтр("ru='%1 %2.';uk='%1 %2.'");
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("126");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстСообщения,
			FTPСоединение.ТекущийКаталог());
		
		Возврат;
	КонецЕсли;
	
	УдалитьФайлFTP(FTPСоединение, ФайлТест.Имя, Истина, ТекстОшибки);
	
КонецПроцедуры

Процедура НайтиФайлыВКаталогеFTP(FTPСоединение, Путь, Маска, ЭтоТест, РезультатТеста, МассивФайлов)
	
	Попытка
		Если Маска = Неопределено Тогда
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь);
		Иначе
			МассивФайлов = FTPСоединение.НайтиФайлы(Путь, Маска);
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("125");
		
		Если НЕ ЭтоТест = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Создает документ ПакетЭД и заполняет его реквизиты.
//
// Параметры:
//  РеквизитыДокумента - Структура - значения реквизитов документа.
//  МассивЭД - Массив - содержит ссылки на справочник ЭДПрисоединенныеФайлы.
//
// Возвращаемое значение:
//  ДокументСсылка.ПакетЭД - ссылка на созданный документ.
//
Функция СоздатьПакетЭД(РеквизитыДокумента, МассивЭД, ТекстСообщения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗашифрованы = Ложь;
	СертификатШифрования = Неопределено;
	ТребуетсяШифрованиеНаКлиенте = Ложь;
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	Если ИспользоватьЭП Тогда
		Если РеквизитыДокумента.Свойство("СертификатКонтрагентаДляШифрования") 
			И ЗначениеЗаполнено(РеквизитыДокумента.СертификатКонтрагентаДляШифрования)
			И РеквизитыДокумента.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			// Исторически сложилось, что шифруются только существенные данные - первичные ЭД (счета-фактуры
			// "ходят" только через операторов ЭДО, при обмене через операторов данные не шифруются).
			// Служебные ЭД не должны шифроваться (ответная подпись, извещения о получении, отклонение, аннулирование).
			Соответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ВидЭД, НаправлениеЭД, ТипЭлементаВерсииЭД");
			ЗашифроватьДанные = Ложь;
			Для Каждого КлючЗначение Из Соответствие Цикл
				Если КлючЗначение.Значение.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
					И КлючЗначение.Значение.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
					
					ЗашифроватьДанные = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗашифроватьДанные Тогда
				СертификатШифрования = РеквизитыДокумента.СертификатКонтрагентаДляШифрования.Получить();
				Если ЗначениеЗаполнено(СертификатШифрования) Тогда
					ДанныеЗашифрованы = Истина;
					
					СертификатКриптографии = Новый СертификатКриптографии(СертификатШифрования);
					СертификатШифрования   = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
					
					Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						ТребуетсяШифрованиеНаКлиенте = Истина;
						РеквизитыДокумента.Вставить("ТребуетсяШифрованиеНаКлиенте", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПЭД = Документы.ПакетЭД.СоздатьДокумент();
	ПЭД.Дата = ТекущаяДатаСеанса();
	Если РеквизитыДокумента.Свойство("Отправитель") Тогда
		ПЭД.Отправитель = РеквизитыДокумента.Отправитель;
	КонецЕсли;
	Если РеквизитыДокумента.Свойство("Получатель") Тогда
		ПЭД.Получатель = РеквизитыДокумента.Получатель;
	КонецЕсли;
	ПЭД.Контрагент = РеквизитыДокумента.Контрагент;
	ПЭД.Организация = РеквизитыДокумента.Организация;
	
	ПЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПЭД.Направление = Перечисления.НаправленияЭД.Исходящий;
	ПЭД.ДанныеЗашифрованы = ДанныеЗашифрованы;
	ПЭД.СертификатШифрования = СертификатШифрования;
	Если РеквизитыДокумента.Свойство("ВерсияФорматаПакета") Тогда
		ПЭД.ВерсияФорматаПакета = РеквизитыДокумента.ВерсияФорматаПакета;
	КонецЕсли;
	
	Если РеквизитыДокумента.Свойство("АдресОтправителя") Тогда
		ПЭД.АдресРесурсаОрганизации = РеквизитыДокумента.АдресОтправителя;
	КонецЕсли;
	Если РеквизитыДокумента.Свойство("АдресПолучателя") Тогда
		ПЭД.АдресРесурсаКонтрагента = РеквизитыДокумента.АдресПолучателя;
	КонецЕсли;

	Если РеквизитыДокумента.Свойство("СоглашениеЭД") Тогда
		ПЭД.НастройкаЭДО = РеквизитыДокумента.СоглашениеЭД;
	Иначе
		ПЭД.НастройкаЭДО = РеквизитыДокумента.НастройкаЭДО;
	КонецЕсли;
	
	ПЭД.СпособОбменаЭД = РеквизитыДокумента.СпособОбменаЭД;
	
	Если РеквизитыДОкумента.Свойство("ПрофильНастроекЭДО") Тогда
		ПЭД.ПрофильНастроекЭДО = РеквизитыДокумента.ПрофильНастроекЭДО;
	КонецЕсли;
	
	ВладельцыЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЭД, "ВладелецФайла");
	
	Для Каждого ЭД Из МассивЭД Цикл
		НоваяСтрока = ПЭД.ЭлектронныеДокументы.Добавить();
		НоваяСтрока.ЭлектронныйДокумент = ЭД;
		НоваяСтрока.ОбъектВладелец = ВладельцыЭД.Получить(ЭД);
	КонецЦикла;
	
	Попытка
		ПЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru='формирование пакета ЭД';uk='формування пакету ЕД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
								Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ПЭД.Ссылка;
	
КонецФункции

Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			Иначе
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			КонецЕсли;
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с журналом регистрации

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
		ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
		НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
		
		МенеджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
		МенеджерЗаписи.НомерЗаписи        = НомерЗаписи;
		МенеджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
		МенеджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
		МенеджерЗаписи.Дата               = ТекущаяДатаСеанса();
		МенеджерЗаписи.Пользователь       = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Ответственный      = СсылкаНаЭД.Ответственный;
		МенеджерЗаписи.Комментарий        = СсылкаНаЭД.Описание;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на временное хранилище двоичных данных архива с дополнительными файлами каталога.
//
// Параметры:
//  МассивФайлов - Массив - ссылки на временное хранилище дополнительного файла.
//
// Возвращаемое значение:
//  Строка - ссылка на временное хранилище.
//
Функция АрхивДополнительныхФайлов(МассивФайлов) Экспорт
	
	ВремПапка = ЭлектронноеВзаимодействиеСлужебный.ТекущийКаталогВременныхФайлов()
				+ Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремПапка);
	УдалитьФайлы(ВремПапка, "*");
	Для Каждого Элемент Из МассивФайлов Цикл
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.АдресВременногоХранилища);
		СоздатьКаталог(ВремПапка + Элемент.ИдТовара + "\");
		ДвоичныеДанныеФайла.Записать(ВремПапка + Элемент.ИдТовара + "\" + Элемент.ИмяФайла);
	КонецЦикла;
	Архив = ПолучитьИмяВременногоФайла();
	Zip = Новый ЗаписьZipФайла(Архив);
	Zip.Добавить(
			ВремПапка + "*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Попытка
		Zip.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru='Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
            |и наличие доступа к каталогу временных файлов.'
            |;uk='Перевірте підтримку російської мови в регіональних настройках ОС для non-Unicode programs
            |і наявність доступу до каталогу тимчасових файлів.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='запись файла архива на диск';uk='запис файлу архіву на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		УдалитьФайлы(Архив);
		УдалитьФайлы(ВремПапка);
		Возврат Неопределено;
	КонецПопытки;
	ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(Архив);
	УдалитьФайлы(ВремПапка);
	УдалитьФайлы(Архив);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива);
	
КонецФункции

Функция ВерсияПакетаЭД(ЭД) Экспорт
	
	Если ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ВерсияФормата = ФорматПакетаЭД(ЭД);
		
	Иначе
		
		Если ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			Или ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			Или ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ВерсияФормата = ФорматПакетаЭД(ЭД.ЭлектронныйДокументВладелец);
			
		Иначе
			 
			ВерсияФормата = ЭД.СоглашениеЭД.ВерсияФорматаПакета;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ФорматПакетаЭД(ЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВерсияФормата = Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ВерсияФормата = Выборка.ВерсияФорматаПакета;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ВерсияФорматаИзСтроки(Версия)
	Если Версия = "2" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия20;
	ИначеЕсли Версия = "3" Тогда
		Результат = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьНеотправленноеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ПодписанЭП,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ) КАК ВладелецПодписанЭП
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
	|	И ЭДПрисоединенныеФайлы.СтатусЭД В(&СтатусыНеотправленногоЭД)";
	
	СтатусыНеотправленногоЭД = Новый Массив;
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	
	Запрос.УстановитьПараметр("СтатусыНеотправленногоЭД", СтатусыНеотправленногоЭД);
	Запрос.УстановитьПараметр("ВидЭД", Перечисления.ВидыЭД.ИзвещениеОПолучении);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
		
		Если Выборка.ВладелецПодписанЭП И Не Выборка.ПодписанЭП Тогда
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		Иначе
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		КонецЕсли;
		
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция определяет есть ли подтверждение о доставке для документов
Функция ЕстьНепринятоеПодтверждение(ВладелецФайла, СостояниеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСчетНаОплату(СсылкаНаЭД)
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоCMLДокумент(СсылкаНаЭД)
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		Или ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		Или ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		
		Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник)
	
	Если НЕ ОбменСКонтрагентамиПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru='Обработка %1.
                                 |Операция не выполнена!
                                 |Необходимо создать ""Настройку ЭДО"" с реквизитами:'
                                 |;uk='Обробка %1.
                                 |Операція не виконана!
                                 |Необхідно створити ""Настройку ЕДО"" з реквізитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ДоговорКонтрагента") Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") Тогда
			Порядок = 5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru='<%1>: %2';uk='<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Процедура ПолучитьТекстНастроекОбменаПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса = ОбменСКонтрагентамиПереопределяемый.ПолучитьТекстНастроекОбменаПоСоглашению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
		|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.НастройкаЭДОДействует
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
		|		ИСТИНА КАК Поле1,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НастройкаЭДОДействует
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
		|		И ВЫБОР
		|				КОГДА &ЭтоСлужебныйЭД
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|				ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Организация КАК Организация,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СоглашенияЭДСертификаты.Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВидыЭДЭП.ВидЭД = &ВидЭД
		|	И (Сертификаты.Пользователь = &Пользователь
		|			ИЛИ Сертификаты.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка)
		|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
		|	И ВидыЭДЭП.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА &НаправлениеЭД <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолученОргПолуч,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.НастройкаЭДОДействует
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И (ВТ_Сертификаты.Организация = ВТ_ТЧ_Соглашения.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток,
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	КонецЕсли;
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(ТекстЗапроса)
	
	ТекстЗапроса = ОбменСКонтрагентамиПереопределяемый.ПолучитьТекстЗапросаНастроекОбменаСПриоритетами();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
		|	ИСТИНА КАК ОжидатьКвитанциюОДоставке,
		|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.Приоритет,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.НастройкаЭДОДействует
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
		|		ИСТИНА КАК Поле1,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		0 КАК Приоритет,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НастройкаЭДОДействует
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|						И ВЫБОР
		|							КОГДА &ЭтоСлужебныйЭД
		|								ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|							ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|						КОНЕЦ
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|						И &Партнер
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Организация КАК Организация,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СоглашенияЭДСертификаты.Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВидыЭДЭП.ВидЭД = &ВидЭД
		|		КОНЕЦ
		|	И (Сертификаты.Пользователь = &Пользователь
		|			ИЛИ Сертификаты.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка)
		|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
		|	И ВидыЭДЭП.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
		|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолученОргПолуч,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.НастройкаЭДОДействует
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
		|					И ВЫБОР
		|						КОГДА &ЭтоСлужебныйЭД
	    |							ТОГДА ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭДВладельца
		|						ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
		|					КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		ТекстЗапросаПартнеры = "ИСТИНА";
		Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
			ТекстЗапросаПартнеры = "&Партнер <> НЕОПРЕДЕЛЕНО
			|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент.Партнер = &Партнер";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер", ТекстЗапросаПартнеры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область НовыеМетоды

// Добавление нового параметра в ПараметрыКлиентаНаСервере.
//
// Параметры:
//  ИмяПараметра      - Произвольный - имя добавляемого параметра.
//  ЗначениеПараметра - Произвольный - значение добавляемого параметра.
//
Процедура ПоместитьПараметрВПараметрыКлиентаНаСервере(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ПараметрыОбменСКонтрагентами = Неопределено ИЛИ ТипЗнч(ПараметрыОбменСКонтрагентами) <> Тип("ФиксированноеСоответствие") Тогда
		// Параметр еще не установлен.
		ПараметрыОбменСКонтрагентами = Новый Соответствие;
	Иначе
		ПараметрыОбменСКонтрагентами = Новый Соответствие(ПараметрыОбменСКонтрагентами);
	КонецЕсли;
	
	ПараметрыОбменСКонтрагентами.Вставить(ИмяПараметра, ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра));
	ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение хранящегося в ПараметрыКлиентаНаСервере параметра.
//
// Параметры:
//   ИмяПараметра                  - Произвольный - имя добавляемого параметра.
//   УдалитьПараметрПослеПолучения - Булево - признак необходимости удаления параметра из ПараметрыКлиентаНаСервере,
//                                  после получения значения.
//
// Возвращаемое значение:
//   Произвольный, Неопределено - хранимое в параметре значение, если параметра с таким именем нет, то неопределено.
//
Функция ПараметрИзПараметрыКлиентаНаСервере(ИмяПараметра, УдалитьПараметрПослеПолучения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ЗначениеПараметра = Неопределено;
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ТипЗнч(ПараметрыОбменСКонтрагентами) = Тип("ФиксированноеСоответствие") Тогда
		ЗначениеПараметра = ПараметрыОбменСКонтрагентами.Получить(ИмяПараметра);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра = ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра);
			Если УдалитьПараметрПослеПолучения И ЗначениеПараметра <> Неопределено Тогда
				ПараметрыОбменСКонтрагентами = Новый Соответствие(ПараметрыОбменСКонтрагентами);
				ПараметрыОбменСКонтрагентами.Удалить(ИмяПараметра);
				ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
				ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Соответствие") Тогда
		ВозвращаемоеЗначение = Новый ФиксированноеСоответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
		ВозвращаемоеЗначение = Новый ФиксированнаяСтруктура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		ВозвращаемоеЗначение = Новый ФиксированныйМассив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("ФиксированноеСоответствие") Тогда
		ВозвращаемоеЗначение = Новый Соответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированнаяСтруктура") Тогда
		ВозвращаемоеЗначение = Новый Структура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированныйМассив") Тогда
		ВозвращаемоеЗначение = Новый Массив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

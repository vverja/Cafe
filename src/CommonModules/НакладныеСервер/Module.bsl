
////////////////////////////////////////////////////////////////////////////////
// Модуль "НакладныеСервер" содержит процедуры и функции для
// поддержки заполнения накладных и функциональности форм документов
// и списков накладных.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет список для отбора распоряжений, исходя из состояния оформления накладных по распоряжениям.
// Используется в формах списков распоряжений на отгрузку.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен сосояниями оформления.
//
Процедура ЗаполнитьСписокСостоянийОформленияНакладной(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Все оформлено';uk='Все оформлено'"),        Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Создать накладную';uk='Створити накладну'"),    Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2", НСтр("ru='Дооформить накладную';uk='Дооформити накладну'"), Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
КонецПроцедуры

// Заполняет список для отбора распоряжений, исходя из состояния оформления ордеров по распоряжениям.
// Используется в формах списков распоряжений на отгрузку.
//
// Параметры:
//  СписокВыбора - СписокЗначений - список, который будет заполнен сосояниями оформления.
//
Процедура ЗаполнитьСписокСоответствияОрдеров(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru='Соответствуют накладным';uk='Відповідають накладним'"),    Ложь, БиблиотекаКартинок.ВыполненоУспешно);
	СписокВыбора.Добавить("1", НСтр("ru='Не оформлены';uk='Не оформлені'"),               Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3", НСтр("ru='Не соответствуют накладным';uk='Не відповідають накладним'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
КонецПроцедуры

// Заполняет заголовок команды подбора по заказам/ордерам.
//
// Параметры:
//  Элемент - Элемент формы - элемент для заполнения заголовока
//  Параметры - Структура - структура с полями:
//                          "ОрдернаяСхемаПриОтгрузке",
//                          "ИспользоватьЗаказы",
//                          "ИспользоватьНакладныеПоНесколькимЗаказам".
//  ПроверятьДоступность - Булево - Истина, если доступность элемента подлежит обновлению.
//
Процедура НастроитьКомандуПодобратьПоЗаказамОрдерам(Элемент, Параметры, УстанавливатьДоступность = Истина) Экспорт
	
	Если УстанавливатьДоступность Тогда
		Элемент.Видимость = Параметры.ОрдернаяСхемаПриОтгрузке Или Параметры.ИспользоватьЗаказы;
	КонецЕсли;
	
	Если Параметры.ИспользоватьЗаказы Тогда
		
		Если Параметры.ОрдернаяСхемаПриОтгрузке Тогда
			
			Элемент.Заголовок = ?(Параметры.ИспользоватьНакладныеПоНесколькимЗаказам,
				НСтр("ru='Подобрать товары по заказам/ордерам';uk='Підібрати товари по замовленнях/ордерах'"),
				НСтр("ru='Подобрать товары по заказу/ордерам';uk='Підібрати товари по замовленню/ордеру'"));
			
		Иначе
			
			Элемент.Заголовок = ?(Параметры.ИспользоватьНакладныеПоНесколькимЗаказам,
				НСтр("ru='Подобрать товары по заказам';uk='Підібрати товари по замовленнях'"),
				НСтр("ru='Подобрать товары по заказу';uk='Підібрати товари по замовленню'"));
			
		КонецЕсли;
		
	Иначе
		
		Элемент.Заголовок = НСтр("ru='Подобрать товары по ордерам';uk='Підібрати товари по ордерах'");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие расходных ордеров по распоряжению.
//
// Параметры:
//  Распоряжения - ДокументСсылка - массив распоряжений-заказов.
//
// Возвращаемое значение:
//  Булево - Истина, если есть ордера, Ложь - если нет ордеров.
//
Функция ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(Распоряжения, УчитыватьСобирается = Истина) Экспорт
	
	Запрос = новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , , ,
		|	ДокументОтгрузки В (&Заказы)
		|	И Склад В(
		|		ВЫБРАТЬ
		|			СпрСклады.Ссылка КАК Склад
		|		ИЗ
		|			Справочник.Склады КАК СпрСклады
		|		ГДЕ
		|			СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|			И СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня)) КАК Таблица
		|ГДЕ
		|	Таблица.КОтгрузкеРасход + Таблица.СобраноПриход + Таблица.СобираетсяПриход > 0";
	
	Если Не УчитыватьСобирается Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "+ Таблица.СобираетсяПриход", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказы", Распоряжения);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Списывает количество для оформления по ордерам на количество для оформления по заказам.
//
// Параметры:
//  ТаблицаПриемник - ТаблицаЗначений - таблица, содержащая данные для оформления по заказам.
//  ТаблицаИсточник - ТаблицаЗначений - таблица, содержащая данные для оформления по ордерам.
//  ПоляКлюча - Строка - ключ связи таблиц для списания.
//
Процедура ЗаполнитьПоказательКоличествоПоОрдерам(ТаблицаПриемник, ТаблицаИсточник, ПоляКлюча) Экспорт
	
	// Поддержка "старых" назначений, которые не проходят по складу.
	ИмяПоляНазначение = ИмяПоляНазначение(ТаблицаПриемник, ПоляКлюча);
	ДобавитьКолонкуДвиженияПоСкладскимРегистрам(ТаблицаПриемник, ПоляКлюча);
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	Если ТаблицаПриемник.Колонки.Найти("КоличествоВОрдере") = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить("КоличествоВОрдере", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	КонецЕсли;
	Если ТаблицаПриемник.Колонки.Найти("Собирается") = Неопределено Тогда
		ТаблицаПриемник.Колонки.Добавить("Собирается", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	КонецЕсли;
	
	ТаблицаИсточник.Индексы.Добавить(ПоляКлюча);
	ПараметрыПоиска = Новый Структура(ПоляКлюча);
	
	// Попытка сохранить количество в накладной.
	Для Каждого СтрокаПриемник Из ТаблицаПриемник Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаПриемник);
		Если Не СтрокаПриемник.ДвиженияПоСкладскимРегистрам Тогда
			ПараметрыПоиска[ИмяПоляНазначение] = ПустоеНазначение;
		КонецЕсли;
		НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаИсточник = НайденныеСтроки[0];
			СтрокаПриемник.Собирается = СтрокаИсточник.Собирается;
			КоличествоСписать = Мин(СтрокаИсточник.Количество,
				?(СтрокаПриемник.КоличествоВНакладной > 0, Макс(СтрокаПриемник.КоличествоВНакладной, СтрокаПриемник.КоличествоВЗаказе), 0));
			Если КоличествоСписать > 0 Тогда
				
				СтрокаПриемник.КоличествоВОрдере = КоличествоСписать;
				СтрокаИсточник.Количество = СтрокаИсточник.Количество - КоличествоСписать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополнение отгрузки до заказа.
	Для Каждого СтрокаПриемник Из ТаблицаПриемник Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаПриемник);
		Если Не СтрокаПриемник.ДвиженияПоСкладскимРегистрам Тогда
			ПараметрыПоиска[ИмяПоляНазначение] = ПустоеНазначение;
		КонецЕсли;
		НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаИсточник = НайденныеСтроки[0];
			КоличествоСписать = Мин(СтрокаИсточник.Количество, СтрокаПриемник.КоличествоВЗаказе - СтрокаПриемник.КоличествоВОрдере);
			Если КоличествоСписать > 0 Тогда
				
				СтрокаПриемник.КоличествоВОрдере = СтрокаПриемник.КоличествоВОрдере + КоличествоСписать;
				СтрокаИсточник.Количество = СтрокаИсточник.Количество - КоличествоСписать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление строк сверх заказа.
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		Если СтрокаИсточник.Количество > 0 Тогда
			
			КоличествоСписать = СтрокаИсточник.Количество;
			
			СтрокаПриемник = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
			СтрокаПриемник.КоличествоВОрдере = КоличествоСписать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу по варианту заполнения (по данным заказа или данным ордера).
//
// Параметры:
//  ТаблицаПриемник - ТаблицаЗначений - таблица с обязательными колонками "Количество" и "Количество упаковок".
//  ТаблицаИсточник - ТаблицаЗначений - таблица, содержащая данные для оформления по заказам, либо по заказам и ордерам.
//  ВариантЗаполнения - Строка - "ЗаполнятьПоОрдеру" - если требуется заполнение по ордеру.
//
Процедура ЗаполнитьПоВарианту(Приемник, Источник, ВариантЗаполнения, ДобавлятьСтроки = Истина) Экспорт
	
	Для Каждого СтрокаТаблицы Из Источник Цикл
		
		Если ВариантЗаполнения = "ЗаполнятьПоОрдеру" И СтрокаТаблицы.КоличествоВОрдере = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДобавлятьСтроки Тогда
			НоваяСтрока = Приемник.Добавить();
		Иначе
			НоваяСтрока = Приемник;
		КонецЕсли;
		
		Если ВариантЗаполнения = "ЗаполнятьПоОрдеру" Тогда
			ЗаполнитьСтрокуПоВарианту(НоваяСтрока, СтрокаТаблицы, СтрокаТаблицы.КоличествоВОрдере);
		ИначеЕсли ВариантЗаполнения = "ЗаполнятьПоЗаказу" Тогда
			ЗаполнитьСтрокуПоВарианту(НоваяСтрока, СтрокаТаблицы, СтрокаТаблицы.КоличествоВЗаказе);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет, возможно ли оформление накладных для выделенных документов списка распоряжений к оформлению
// Исходя из состава выделенных распоряжений и параметров оформления накладных.
//
//  Параметры:
//   ДокументыПоВидам - Структура - структура с полями: "Заказы" и "Накладные", ссылки на выделенные документы в спсике рапоряжений.
//   ПоОрдерам - Булево - Истина, если необходимо оформлять накладную по ордерам, ложь, если необходимо оформлять накладную по заказам.
//
//  Возвращаемое значение:
//   Структура - содержит поля: "ЕстьОшибки" - Истина, если нельзя оформить накладную, "ТекстОшибки" - текст ошибки при наличии.
//
Функция ПроверитьСоставДокументовКОформлениюНакладной(ДокументыПоВидам, ПоОрдерам) Экспорт
	
	ДокументыДляОбработки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДляОбработки, ДокументыПоВидам.Накладные);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДляОбработки, ДокументыПоВидам.Заказы);
	
	ТекстОшибки = "";
	Если ПоОрдерам Тогда
		
		Если ДокументыДляОбработки.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Оформление по ордерам недоступно для выделенных документов.
                                             |Для оформления накладных по ордерам необходимо выделить
                                             |либо заказы на отгрузку с ордерного склада, либо накладную,
                                             |которую необходимо перезаполнить по ордерам.'
                                             |;uk='Оформлення по ордерах недоступне для виділених документів.
                                             |Для оформлення накладних по ордерах необхідно виділити
                                             |або замовлення на відвантаження з ордерного складу, або накладну,
                                             |яку необхідно перезаповнити по ордерах.'");
			
		ИначеЕсли ДокументыПоВидам.Заказы.Количество() > 0 И ДокументыПоВидам.Накладные.Количество() > 0 Тогда
			
			ТекстОшибки = НСтр("ru='Оформление по ордерам недоступно для документов различных видов.
                                             |Для оформления накладных по ордерам необходимо выделить
                                             |либо заказы на отгрузку с ордерного склада, либо накладную,
                                             |которую необходимо перезаполнить по ордерам.'
                                             |;uk='Оформлення по ордерах недоступне для документів різних видів.
                                             |Для оформлення накладних по ордерах необхідно виділити
                                             |або замовлення на відвантаження з ордерного складу, або накладну,
                                             |яку необхідно перезаповнити по ордерах.'");
			
		ИначеЕсли ДокументыПоВидам.СоответствиеОрдера = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Оформление по ордерам недоступно, так как ордера соответствуют накладным.';uk='Оформлення по ордерах недоступне, тому що ордера відповідають накладним.'");
			
		КонецЕсли;
		
	ИначеЕсли ДокументыПоВидам.Заказы.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Оформление по заказам недоступно для выделенных документов.
                                         |Для оформления накладных по заказам необходимо выделить
                                         |хотя бы один заказ из списка заказов и накладных.'
                                         |;uk='Оформлення по замовленнях недоступне для виділених документів.
                                         |Для оформлення накладних по замовленнях необхідно виділити
                                         |хоча б одне замовлення зі списку замовлень і накладних.'");
		
	КонецЕсли;
	
	Результат = Новый Структура("ЕстьОшибки, ТекстОшибки", ТекстОшибки <> "", ТекстОшибки);
	Возврат Результат;
	
КонецФункции

// Проверяет возможность выполнения команды "Оформить" для выделенных документов в списке.
//
//  Параметры:
//   Контекст - Структура - определяет контекст (рабочее место) вызова команды. Содержит поля:
//                          "ИмяТипаНакладной" - для использования экспортных функций модуля менеджера накладной.
//                          "НастройкиФормыПереоформления" - настройки формы переоформления накладных
//                                                           (см. функцию "НакладныеСервер.НастройкиФормыПереоформленияНакладных").
//   ПараметрыВыполненияКоманды - Структура - определяет действие, выбранное пользователем в рабочем месте. Содержит поля:
//                                            "ПоОрдерам" - Булево, признак, что заполнение необходимо производить по ордерам.
//                                            "ДокументыПоВидам" - Структура - выбранные документы в спсике для оформления накладных.
//                                                                             (см. функцию "НакладныеКлиент.СсылкиВыделенныхСтрокСпискаПоВидам").
//                                            "Склад" - Склад, отобранный в рабочем месте.
//  Возвращаемое значение:
//   Струкутра - Структура с полями "ЕстьОшибки", "ТекстОшибки".
//
Функция ПроверитьВозможностьВыполненияКомандыОформить(Контекст, ПараметрыВыполненияКоманды) Экспорт
	
	ПоОрдерам        = ПараметрыВыполненияКоманды.ПоОрдерам;
	ДокументыПоВидам = ПараметрыВыполненияКоманды.ДокументыПоВидам;
	Склад            = ПараметрыВыполненияКоманды.Склад;
	
	Если ПоОрдерам Тогда
		
		// Исключение распоряжений на отгрузку с неордерных складов.
		ДокументыПоВидам.Вставить("Заказы",    ЗаказыНаОтгрузкуСОрдерныхСкладов(ДокументыПоВидам.Заказы, ДокументыПоВидам.СвойстваЗаказов));
		ДокументыПоВидам.Вставить("Накладные", ЗаказыНаОтгрузкуСОрдерныхСкладов(ДокументыПоВидам.Накладные, Новый Массив));
		
	КонецЕсли;
	
	// Проверка возможности оформления накладной.
	РезультатПроверки = ПроверитьСоставДокументовКОформлениюНакладной(ДокументыПоВидам, ПоОрдерам);
	РезультатПроверки.Вставить("РеквизитыШапки", Неопределено);
	
	Если Не РезультатПроверки.ЕстьОшибки И ДокументыПоВидам.Заказы.Количество() > 0 Тогда // дополнительная проверка возможности оформления одной накладной по нескольким заказам.
		
		МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ." + Контекст.ИмяТипаНакладной);
		РеквизитыШапки = МенеджерНакладной.ДанныеЗаполненияНакладной(ДокументыПоВидам.Заказы, ДокументыПоВидам.СвойстваЗаказов);
		РезультатПроверки = МенеджерНакладной.ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки);
		РезультатПроверки.Вставить("РеквизитыШапки", РеквизитыШапки);
		
	КонецЕсли;
	
	Если Не РезультатПроверки.ЕстьОшибки И ПоОрдерам
		И Не ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(ДокументыПоВидам.Заказы, Ложь)
		И Не ЕстьРасходныйОрдерДляЗаказовНаОтгрузку(ДокументыПоВидам.Накладные, Ложь) Тогда
		
		РезультатПроверки.ЕстьОшибки = Истина;
		РезультатПроверки.ТекстОшибки = НСтр("ru='Оформление по ордерам недоступно, так как отгрузка
                                                   |по выбранным распоряжениям еще не начата.'
                                                   |;uk='Оформлення по ордерах недоступне,тому що відвантаження
                                                   |за обраним розпорядженнями ще не розпочато.'");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Определяет параметры и имя формы, которую необходимо открыть при выполеннии команд оформления накладных в списке распоряжений к оформлению.
//
//  Параметры:
//   Контекст - Структура - определяет контекст (рабочее место) вызова команды. Содержит поля:
//                          "ИмяТипаНакладной" - для использования экспортных функций модуля менеджера накладной.
//                          "НастройкиФормыПереоформления" - настройки формы переоформления накладных
//                                                           (см. функцию "НакладныеСервер.НастройкиФормыПереоформленияНакладных").
//   ПараметрыВыполненияКоманды - Структура - определяет действие, выбранное пользователем в рабочем месте. Содержит поля:
//                                            "ПоОрдерам" - Булево, признак, что заполнение необходимо производить по ордерам.
//                                            "ДокументыПоВидам" - Структура - выбранные документы в спсике для оформления накладных.
//                                                                             (см. функцию "НакладныеКлиент.СсылкиВыделенныхСтрокСпискаПоВидам").
//                                            "Склад" - Склад, отобранный в рабочем месте.
//   РеквизитыШапки - Стркутура - содержит данные заполнения накладной по заказам.
//
//  Возвращаемое значение:
//   Струкутра - Структура с полями "Имя", "Параметры".
//
Функция ПараметрыИИмяФормыОформленияНакладной(Контекст, ПараметрыВыполненияКоманды, РеквизитыШапки) Экспорт
	
	ПоОрдерам        = ПараметрыВыполненияКоманды.ПоОрдерам;
	ДокументыПоВидам = ПараметрыВыполненияКоманды.ДокументыПоВидам;
	Склад            = ПараметрыВыполненияКоманды.Склад;
	
	ПараметрыИИмяФормы = Новый Структура("ЕстьОшибки, Имя, Параметры", Ложь);
	Если ПоОрдерам И ДокументыПоВидам.Накладные.Количество() > 0 Тогда // перезаполнение по ордерам выделенной накладной
		
		ПараметрыИИмяФормы.Имя = Контекст.НастройкиФормыПереоформления.ИмяФормыНакладной;
		ПерезаполняемаяНакладная = ДокументыПоВидам.Накладные[0];
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(ПерезаполняемаяНакладная);
		ЗначенияЗаполнения = Новый Структура("ЗаполнятьПоОрдеру, МассивЗаказов", Истина, МассивЗаказов);
		ПараметрыИИмяФормы.Параметры = Новый Структура("Ключ, ЗначенияЗаполнения", ПерезаполняемаяНакладная, ЗначенияЗаполнения);
		
	Иначе // оформление накладной по выделенным заказам
		
		Если Не ПоОрдерам Или ДокументыПоВидам.СостояниеНакладной = 1 Тогда // накладных нет, оформление новой накладной
		
			ПараметрыИИмяФормы.Имя = Контекст.НастройкиФормыПереоформления.ИмяФормыНакладной;
			ДанныеЗаполнения = Новый Структура("МассивЗаказов, ЗаполнятьПоОрдеру, РеквизитыШапки",
				ДокументыПоВидам.Заказы, ПоОрдерам, РеквизитыШапки);
			ПараметрыИИмяФормы.Параметры = Новый Структура("Основание", ДанныеЗаполнения);
		
		Иначе // переоформление накладных
		
			ПараметрыИИмяФормы.Имя = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
			ПараметрыИИмяФормы.Параметры = Новый Структура("Заказы, Склад, РеквизитыШапки, НастройкиФормы",
				ДокументыПоВидам.Заказы, Склад, РеквизитыШапки, Контекст.НастройкиФормыПереоформления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыИИмяФормы;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// Заказ - ДокументСсылка.ЗаказНаПеремещение - Документ, на основании которого осуществляется ввод.
// ЗначенияРеквизитов - Структура, Содержащая поля "Статус" и "Проведен", документа на основании которого осуществляется ввод.
//
// Возвращаемое значение:
// Строка - текст ошибки, пустая строка если нет ошибок.
//
Функция ПроверитьВозможностьВводаПеремещенияНаОснованииЗаказа(Заказ, ЗначенияРеквизитов) Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение") Тогда
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	КонецЕсли;
	
	ЕстьОшибкиПроведен = Не ЗначенияРеквизитов.Проведен;
	ЕстьОшибкиСтатус   = МассивДопустимыхСтатусов.Найти(ЗначенияРеквизитов.Статус) = Неопределено;
	
	ТекстОшибки = ПроверитьВозможностьВводаНаОсновании(
		Заказ, ЗначенияРеквизитов.Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);
	
	ЗначенияРеквизитов.Удалить("Статус");
	ЗначенияРеквизитов.Удалить("Проведен");
	
	Возврат ТекстОшибки;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// Заказ - ДокументСсылка.ЗаказНаСборку - Документ, на основании которого осуществляется ввод.
// ЗначенияРеквизитов - Структура, Содержащая поля "Статус" и "Проведен", документа на основании которого осуществляется ввод.
//
// Возвращаемое значение:
// Строка - текст ошибки, пустая строка если нет ошибок.
//
Функция ПроверитьВозможностьВводаСборкиНаОснованииЗаказа(Заказ, ЗначенияРеквизитов) Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку") Тогда
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	КонецЕсли;
	
	ЕстьОшибкиПроведен = Не ЗначенияРеквизитов.Проведен;
	ЕстьОшибкиСтатус   = МассивДопустимыхСтатусов.Найти(ЗначенияРеквизитов.Статус) = Неопределено;
	
	ТекстОшибки = ПроверитьВозможностьВводаНаОсновании(
		Заказ, ЗначенияРеквизитов.Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);
	
	ЗначенияРеквизитов.Удалить("Статус");
	ЗначенияРеквизитов.Удалить("Проведен");
	
	Возврат ТекстОшибки;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// Заказ - ДокументСсылка.ЗаказНаВнутреннееПотребление - Документ, на основании которого осуществляется ввод.
// ЗначенияРеквизитов - Структура, Содержащая поля "Статус" и "Проведен", документа на основании которого осуществляется ввод.
//
// Возвращаемое значение:
// Строка - текст ошибки, пустая строка если нет ошибок.
//
Функция ПроверитьВозможностьВводаВнутреннегоПотребленияНаОснованииЗаказа(Заказ, ЗначенияРеквизитов) Экспорт
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		
		МассивДопустимыхСтатусов = Новый Массив;
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
		Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаВнутреннееПотреблениеБезПолнойОтгрузки")
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаВнутреннееПотребление") Тогда
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
		КонецЕсли;
		
	КонецЕсли;
	ЕстьОшибкиПроведен = Не ЗначенияРеквизитов.Проведен;
	ЕстьОшибкиСтатус   = МассивДопустимыхСтатусов.Найти(ЗначенияРеквизитов.Статус) = Неопределено;
	
	ТекстОшибки = НакладныеСервер.ПроверитьВозможностьВводаНаОсновании(
		Заказ, ЗначенияРеквизитов.Статус, ЕстьОшибкиПроведен, ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);
	
	ЗначенияРеквизитов.Удалить("Статус");
	ЗначенияРеквизитов.Удалить("Проведен");
	
	Возврат ТекстОшибки;
	
КонецФункции

#Область ПереоформлениеНакладных

// Формирует структуру параметров настройки общей формы "Переоформление накладных по распоряжениям".
//
// Возвращаемое значение:
//  Структура - структура с полями параметров настройки.
//
Функция НастройкиФормыПереоформленияНакладных() Экспорт
	
	НастройкиФормы = Новый Структура("ИспользоватьНакладныеПоНесколькимЗаказам,
	                                 |ИмяФормыНакладной");
	НастройкиФормы.Вставить("Заголовок", Неопределено); // Если неопределено, используется заголовок формы в конфигураторе.
	НастройкиФормы.Вставить("НакладнаяНаПриемкуИОтгрузку", Ложь);
	
	КлючТовара = Новый Структура("Номенклатура, Характеристика, Склад");
	ОсновнойТовар = Новый Структура("Ключ, КартинкаШапки, КартинкаЗначений",
	                                 КлючТовара, БиблиотекаКартинок.Набор, БиблиотекаКартинок.Наборы);
	НастройкиФормы.Вставить("ОсновнойТовар", ОсновнойТовар);
	
	Возврат НастройкиФормы;
	
КонецФункции

// Переносит в табличную часть документа подобранные по заказам и ордерам строки.
//
// Параметры:
//  ДеревоСтрок - Массив - элементами массива являются строки для переноса с одинаковыми значениями ключевых полей.
//  ПоляПоиска - Строка - ключевые поля поиска, перечисленные через запятую.
//  ТабЧасть - ДанныеФормыКоллекция - таблица в которою необходимо перенести подобранные строки.
//  ПустыеПоляСвязиСЗаказом - Структура - значения полей "Код строки" и "Заказ..." в табличной части документа для строки без заказа.
//  НеЗаполняемыеПоля - Строка - Поля через запятую, которые не нужно переносить в табличную часть из дерева строк.
//
// Возвращаемое значение:
//  Массив - добавленные строки.
//
Функция ЗаполнитьТоварыПодобраннымиИзЗаказа(ДеревоСтрок, ПоляПоиска, ТабЧасть, ПустыеПоляСвязиСЗаказом, НеЗаполняемыеПоля = "") Экспорт
	
	ДобавленныеСтроки = Новый Массив();
	СтруктураПоиска = Новый Структура(ПоляПоиска);
	Для Каждого ПодобранныеСтроки Из ДеревоСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПодобранныеСтроки[0]);
		НайденныеСтроки = ТабЧасть.НайтиСтроки(СтруктураПоиска);
		
		// Новая строка - добавление строк.
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Для Каждого СтрокаИсточник Из ПодобранныеСтроки Цикл
				
				Если СтрокаИсточник.Количество > 0 Тогда
					СтрокаПриемник = ТабЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
					Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
					КонецЕсли;
					ДобавленныеСтроки.Добавить(СтрокаПриемник);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				
				Для Счетчик = 1 По НайденныеСтроки.Количество() - 1 Цикл
					ТабЧасть.Удалить(НайденныеСтроки[Счетчик]);
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПодобранныеСтроки.Количество() = 1 Тогда
			
				СтрокаИсточник = ПодобранныеСтроки[0];
				СтрокаПриемник = НайденныеСтроки[0];
				Если СтрокаИсточник.Количество = 0 Тогда
					ТабЧасть.Удалить(СтрокаПриемник);
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
					Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
					КонецЕсли;
				КонецЕсли;
			
			Иначе
				
				СтрокаПриемник = НайденныеСтроки[0];
				СтрокаПриемник.Количество = 0;
				
				Для Каждого СтрокаИсточник Из ПодобранныеСтроки Цикл
				
					Если СтрокаИсточник.Количество > 0 Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, НеЗаполняемыеПоля);
						Если СтрокаИсточник.ОтвязатьОтЗаказа Тогда
							ЗаполнитьЗначенияСвойств(СтрокаПриемник, ПустыеПоляСвязиСЗаказом);
						КонецЕсли;
						СтрокаПриемник = ТабЧасть.Добавить();
						ДобавленныеСтроки.Добавить(СтрокаПриемник);
					КонецЕсли;
				
				КонецЦикла;
				
				Если СтрокаПриемник.Количество = 0 Тогда
					ТабЧасть.Удалить(СтрокаПриемник);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

// Уменьшает количество в строках таблицы УменьшаемаяТаблица на соответствующие ей строки в таблице ВычитаемаяТаблица
//  Возвращается уменьшенная копия таблицы УменьшаемаяТаблица. Строки с количеством <= 0 удаляются.
//  Входящие таблицы остаются неизменными
//
// Параметры:
//  УменьшаемаяТаблица		 - ТаблицаЗначений	 - 
//  ВычитаемаяТаблица		 - ТаблицаЗначений	 - 
//  КлючевыеПоля			 - Строка			 - поля связи таблиц
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция ВычестьТаблицу(УменьшаемаяТаблица, ВычитаемаяТаблица, КлючевыеПоля) Экспорт
	
	// Вычитание таблицы оформлено из таблица отгружено. Оставшиеся строки - строки исключенной накладной, 
	// 		а так же строки ордера которые еще не были оформлены
	
	ВозвращаемаяТаблица = УменьшаемаяТаблица.Скопировать();
	
	ВозвращаемаяТаблица.Свернуть(КлючевыеПоля, "Количество");
	ВычитаемаяТаблица.Свернуть(КлючевыеПоля, "Количество");
	
	ПараметрыОтбора = Новый Структура(КлючевыеПоля);
	
	МассивКУдалению = Новый Массив();
	
	Для Каждого Строка Из ВозвращаемаяТаблица Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Строка);
		НайденныеСтроки = ВычитаемаяТаблица.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаОформлено Из НайденныеСтроки Цикл
			Строка.Количество = Строка.Количество - СтрокаОформлено.Количество;
		КонецЦикла;
		
		Если Строка.Количество <= 0 Тогда
			МассивКУдалению.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из МассивКУдалению Цикл
		ВозвращаемаяТаблица.Удалить(Строка);
	КонецЦикла;
	
	Возврат ВозвращаемаяТаблица;
	
КонецФункции

// Уменьшает количество в строках таблицы ТаблицаНакладная, в случае если количество в соответствующий ей строке таблицы ТаблицаОстатков меньше.
// Уменьшает количество в строках таблицы ТаблицаОстатков на количество соответствующий ей строке таблицы ТаблицаНакладная.
// Возвращается уменьшенная копия таблицы ТаблицаНакладная с актуализированным количеством. Добавляется колонка "ИндексСтроки".
// Входящая таблица ТаблицаНакладная остается неизменной
// Входящая таблица ТаблицаОстатков изменяется, строки с количеством <= 0 удаляются.
//
// Параметры:
//  ТаблицаОстатков		 - ТаблицаЗначений - 
//  ТаблицаНакладная	 - ТаблицаЗначений, ДанныеФормыКоллекция - Таблица содержащая поле "НомерСтроки".
//  ПоляОтбора			 - Строка - 
//  ПараметрыИменПолей	 - Структура - Структура содержащая имя поля "Количество" для изменения ("ИмяПоляКоличествоДляИзменения")
//										и имя поля "Количество" значение которого подставляется в возвращаемые строки по умолчанию 
//										перед сопоставлением с таблицей остатков ("ИмяПоляКоличествоПоРаспоряжению").
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция МинимумТаблиц(ТаблицаОстатков, ТаблицаНакладная, ПоляОтбора, ПараметрыИменПолей = Неопределено) Экспорт
	
	РезультирующаяТаблицаСуществующиеСтроки = ТаблицаНакладная.СкопироватьКолонки();
	РезультирующаяТаблицаСуществующиеСтроки.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	
	Отбор = Новый Структура(ПоляОтбора);
	
	СтрокиКУдалению = Новый Массив();
	
	// Поле со значением количества по умолчанию. В общем случае - "Количество". В Актах о расхождениях - "КоличествоПоДокументу"
	ИмяПоляКоличествоПоРаспоряжению = ?(ПараметрыИменПолей <> Неопределено, ПараметрыИменПолей.ИмяПоляКоличествоПоРаспоряжению, "Количество");
	// Количество которое нужно актуализировать
	ИмяПоляКоличествоДляИзменения = ?(ПараметрыИменПолей <> Неопределено, ПараметрыИменПолей.ИмяПоляКоличествоДляИзменения, "Количество");
	
	// Создание таблицы со строками которые уже присутствуют в накладной
	// Уменьшение количества существующих строк, если необходимо
	Для Каждого Строка Из ТаблицаНакладная Цикл
		
		НоваяСтрока = РезультирующаяТаблицаСуществующиеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока[ИмяПоляКоличествоДляИзменения] = Строка[ИмяПоляКоличествоПоРаспоряжению];
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		
		// Для последующего соединения с ТЧ накладной в функции ПерезаполнитьТоварыНакладной
		НоваяСтрока.ИндексСтроки = Строка.НомерСтроки - 1;
		
		// Поиск отгруженного количества по текущей строке
		// Уменьшение отгруженного количества на величину количества строки
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			
			Если НайденнаяСтрока.Количество < НоваяСтрока[ИмяПоляКоличествоПоРаспоряжению] Тогда
				// Если отгружено меньше чем в накладной, накладная уменьшается
				НоваяСтрока[ИмяПоляКоличествоДляИзменения] = НайденнаяСтрока.Количество;
				
				НайденнаяСтрока.Количество = 0; // Количество полностью списано
			Иначе
				// Если отгружено больше чем в накладной, или столько же, накладная не изменяется
				// Строка с данными отгрузки уменьшается на количество накладной
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - НоваяСтрока[ИмяПоляКоличествоДляИзменения];
			КонецЕсли;
			
			Если НайденнаяСтрока.Количество <= 0 Тогда
				Если СтрокиКУдалению.Найти(НайденнаяСтрока) = Неопределено Тогда
					СтрокиКУдалению.Добавить(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Строка не отгружена. Обнуление для последующего удаления
			НоваяСтрока[ИмяПоляКоличествоДляИзменения] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаОстатков.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат РезультирующаяТаблицаСуществующиеСтроки;
	
КонецФункции

// Функция распределяет количество из таблица ТаблицаОстатков на таблицу Таблица и добавляет результат в таблицу РаспределенноеКоличество.
// Строки таблицы Таблица которую не удалось сопоставить с таблицей ТаблицаОстатков добавляеются в таблицу НеРаспределенноеКоличество
// Входящая таблица Таблица не изменяется
// Входящая таблица ТаблицаОстатков уменьшается
// 
// Параметры:
//  Таблица			 - ТаблицаЗначений - 
//  ТаблицаОстатков	 - ТаблицаЗначений - 
//  ПоляОтбора		 - Строка - поля соединения таблица Таблица и ТаблицаОстатков
//  ЗаполняемоеПоле	 - Строка - имя поля, которое заполняется в новых строках из строки таблицы ТаблицаОстатков
// 
// Возвращаемое значение:
//   - Структура - Таблица распределенных строк и Таблица нераспределенных строк
//
Функция РаспределитьОстаткиНаТаблицу(Таблица, ТаблицаОстатков, ПоляОтбора, ЗаполняемоеПоле) Экспорт
	
	РаспределенноеКоличество = Таблица.СкопироватьКолонки();
	НеРаспределенноеКоличество = Таблица.СкопироватьКолонки();
	
	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	
	Для Каждого Строка Из Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Строка);
		
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбора);
		
		Количество = Строка.Количество;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Количество > 0 Тогда
				
				НоваяСтрока = РаспределенноеКоличество.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока[ЗаполняемоеПоле] = НайденнаяСтрока[ЗаполняемоеПоле];
				
				НоваяСтрока.Количество = Мин(НайденнаяСтрока.Количество, Количество);
				Если НайденнаяСтрока.Количество <= Количество Тогда
					Количество = Количество - НайденнаяСтрока.Количество;
					НайденнаяСтрока.Количество = 0;
				Иначе
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - Количество;
					Количество = 0;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		// Нераспределенное количество
		Если Количество > 0 Тогда
			НоваяСтрока = НеРаспределенноеКоличество.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Количество = Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("РаспределенноеКоличество", РаспределенноеКоличество);
	РезультатВыполнения.Вставить("НеРаспределенноеКоличество", НеРаспределенноеКоличество);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Функция заполняет таблицу ТаблицаНовыхСтрок новыми строками
//
// Параметры:
//  ТаблицаНовыхСтрок					 - ТаблицаЗначений	 - Таблица дополняемая в новыми строками
//  ТаблицаОстаткаКРаспределению		 - ТаблицаЗначений	 - Таблица строки которой необходимо добавить в таблицу ТаблицаНовыхСтрок
//  ТаблицаКОформлениюОстаток			 - ТаблицаЗначений	 - Таблица содержащая информацию о ожидаемом к оформлению количестве.
//  	Для соединения с таблицей ТаблицаОстаткаКРаспределению.
//  ПоляОтбора							 - Строка			 - поля связи таблиц ТаблицаОстаткаКРаспределению и ТаблицаКОформлениюОстаток
//  ДобавитьСтрокиСверхРаспоряжения		 - Булево			 - Добавлять ли новую строку, если связь между таблицуами ТаблицаОстаткаКРаспределению и ТаблицаКОформлениюОстаток
//  			не установлена, либо если в строке ТаблицаОстаткаКРаспределению оказалось больше количества чем в ТаблицаКОформлениюОстаток
//  ПараметрыИменПолей					 - Структура		 - Структура содержащая имя поля "Количество" для изменения в таблице ТаблицаНовыхСтрок ("ИмяПоляКоличествоДляИзменения")
//  		и имя поля "Количество" в таблице ТаблицаКОформлениюОстаток ("ИмяПоляКоличествоПоРаспоряжению").
//  ПоляДляДозаполненияПоДаннымОрдера	 - Строка			 - Поля которые необходимо заполнить в результирующих строках по данным ордера, а не заказа
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - ТаблицаНовыхСтрок
//
Функция РазвернутьПоКодамСтрок(ТаблицаНовыхСтрок, 
			ТаблицаОстаткаКРаспределению, 
			ТаблицаКОформлениюОстаток, 
			ПоляОтбора, 
			ДобавитьСтрокиСверхРаспоряжения = Ложь, 
			ПараметрыИменПолей = Неопределено,
			ПоляДляДозаполненияПоДаннымОрдера = "") Экспорт
	
	// Создание и заполнение итоговой таблицы с добавляемыми строками
	Отбор = Новый Структура(ПоляОтбора);
	
	ИмяПоляКоличествоПоРаспоряжению = ?(ПараметрыИменПолей <> Неопределено, ПараметрыИменПолей.ИмяПоляКоличествоПоРаспоряжению, "Количество");
	ИмяПоляКоличествоДляИзменения = ?(ПараметрыИменПолей <> Неопределено, ПараметрыИменПолей.ИмяПоляКоличествоДляИзменения, "Количество");
	ЕстьПолеКодСтроки = ТаблицаНовыхСтрок.Колонки.Найти("КодСтроки") <> Неопределено;
	
	Для Каждого Строка Из ТаблицаОстаткаКРаспределению Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		
		// Ввести новые строки в накладную
		// Поиск подходящего кода строки
		НайденныеСтроки = ТаблицаКОформлениюОстаток.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Для Каждого СтрокаЗаказа Из НайденныеСтроки Цикл
				
				КоличествоНовойСтроки = 0;
				
				Если Строка.Количество > СтрокаЗаказа[ИмяПоляКоличествоПоРаспоряжению] Тогда
					КоличествоНовойСтроки = СтрокаЗаказа[ИмяПоляКоличествоПоРаспоряжению];
					Строка.Количество = Строка.Количество - СтрокаЗаказа[ИмяПоляКоличествоПоРаспоряжению];
				Иначе
					КоличествоНовойСтроки = Строка.Количество;
					Строка.Количество = 0;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаНовыхСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаказа);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ПоляДляДозаполненияПоДаннымОрдера);
				НоваяСтрока[ИмяПоляКоличествоДляИзменения] = КоличествоНовойСтроки;
				
				// Отказ дальнейшей обработки если Количество закончилось
				Если Строка.Количество <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Принято больше, чем заказано
			Если Строка.Количество >= 0 
				И ДобавитьСтрокиСверхРаспоряжения Тогда
				
				НоваяСтрока = ТаблицаНовыхСтрок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока[ИмяПоляКоличествоДляИзменения] = Строка.Количество;
				Строка.Количество = 0;
				Если ЕстьПолеКодСтроки Тогда
					НоваяСтрока.КодСтроки = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ДобавитьСтрокиСверхРаспоряжения Тогда
			
			НоваяСтрока = ТаблицаНовыхСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока[ИмяПоляКоличествоДляИзменения] = Строка.Количество;
			Строка.Количество = 0;
			Если ЕстьПолеКодСтроки Тогда
				НоваяСтрока.КодСтроки = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНовыхСтрок;
	
КонецФункции

#КонецОбласти

#Область ФормаПодбораПоЗаказамОрдерам

// Подготавливает данные для переноса в документ из формы подбора по заказам.
//
// Параметры:
//  ТаблицаТовары - ДанныеФормыКоллекция - данные таблицы в форме подбора.
//  ИмяПоляЗаказ - Строка - имя реквизита таблицы "Заказ".
//  ПустойЗаказ - ДокументСсылка, Неопределено - значение поля "Заказ" по умолчанию.
//
// Возвращаемое значение:
//  Строка - Адрес в хранилище, куда будут помещена таблица для переноса в документ.
//
Функция ПодборПоЗаказамПоместитьТоварыВХранилище(ТаблицаТовары) Экспорт
	
	Результат = ТаблицаТовары.Выгрузить(Новый Массив());
	Результат.Колонки.Добавить("ОтвязатьОтЗаказа");
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если СтрокаТовары.СтрокаВыбрана Тогда
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			НоваяСтрока.ОтвязатьОтЗаказа = НоваяСтрока.КоличествоВЗаказе = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Новый Структура("Товары", Результат));
	
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет строку по варианту заполнения (по данным заказа или данным ордера).
//
// Параметры:
//  ТаблицаПриемник - СтрокаТаблицыЗначений, ДанныеФормыСтруктура - структура с обязательными колонками "Количество" и "Количество упаковок".
//  ТаблицаИсточник - ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - структура, содержащая данные для оформления по заказам, либо по заказам и ордерам.
//  Колчиество - Число - Количество для заполнения.
//
Процедура ЗаполнитьСтрокуПоВарианту(Приемник, Источник, Количество)
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	
	Приемник.Количество = Количество;
	// Заполнение количества упаковок.
	Если ЗначениеЗаполнено(Источник.КоличествоВЗаказе) И Источник.КоличествоВЗаказе > 0 Тогда
		
		Приемник.Упаковка = Источник.УпаковкаЗаказа;
		Приемник.КоличествоУпаковок = Приемник.Количество / Источник.УпаковкаЗаказаКоэффициент;
		
	ИначеЕсли ЗначениеЗаполнено(Источник.КоличествоВНакладной) И Источник.КоличествоВНакладной > 0 Тогда
		
		Приемник.Упаковка = Источник.УпаковкаНакладной;
		Приемник.КоличествоУпаковок = Приемник.Количество / Источник.УпаковкаНакладнойКоэффициент;
		
	Иначе
		
		Приемник.КоличествоУпаковок = Приемник.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено) Экспорт
	
	ТекстОшибки = "";
	Если ЕстьОшибкиПроведен Тогда
		
		ТекстОшибки = НСтр("ru='Документ не проведен. Ввод на основании непроведенного документа запрещен.';uk='Документ не проведено. Введення на підставі непроведенного документа заборонене.'");
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		СтрокаДопустимыхСтатусов = "";
		
		Для Каждого ДопустимыйСтатус Из МассивДопустимыхСтатусов Цикл
			СтрокаДопустимыхСтатусов = СтрокаДопустимыхСтатусов + """" + ДопустимыйСтатус + """, ";
		КонецЦикла;
		
		СтрокаДопустимыхСтатусов = Лев(СтрокаДопустимыхСтатусов, СтрДлина(СтрокаДопустимыхСтатусов)-2);
		
		Если МассивДопустимыхСтатусов.Количество() = 1 Тогда
			ТекстОшибки = НСтр("ru='Документ находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусе %СтрокаДопустимыхСтатусов%.';uk='Документ знаходиться у статусі ""%Статус%"". Введення на підставі дозволене тільки в статусі %СтрокаДопустимыхСтатусов%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрокаДопустимыхСтатусов);
		Иначе
			ТекстОшибки = НСтр("ru='Документ находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусах %СтрокаДопустимыхСтатусов%.';uk='Документ знаходиться у статусі ""%Статус%"". Введення на підставі дозволене тільки в статусах %СтрокаДопустимыхСтатусов%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрокаДопустимыхСтатусов);
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
	
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ЗаказыНаОтгрузкуСОрдерныхСкладов(Заказы, СвойстваЗаказов, ПриемкаИОтгрузка = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.ДокументОтгрузки КАК Ссылка,
		|	Таблица.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК Таблица
		|ГДЕ
		|	Таблица.ДокументОтгрузки В(&Заказы)
		|	И (Таблица.Склад В (&Склады)
		|			ИЛИ НЕ &ОтборПоСкладу)
		|	И Таблица.Активность
		|	И Таблица.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|	И Таблица.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня";
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	МассивСкладов = Новый Массив;
	Для каждого ЗначенияСвойств Из СвойстваЗаказов Цикл
		Если ЗначенияСвойств.Свойство("Склад") И МассивСкладов.Найти(ЗначенияСвойств.Склад) = Неопределено Тогда
			МассивСкладов.Добавить(ЗначенияСвойств.Склад);
		КонецЕсли; 
	КонецЦикла; 
	Запрос.УстановитьПараметр("Склады", МассивСкладов);
	Запрос.УстановитьПараметр("ОтборПоСкладу", МассивСкладов.Количество() <> 0);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Нужно удалить строки по неордерным складам
	Если МассивСкладов.Количество() <> 0 Тогда
		СтрокиКУдалению = Новый Массив;
		Для ИндексСтроки = -СвойстваЗаказов.ВГраница() По 0 Цикл
			Отбор = Новый Структура("Склад", СвойстваЗаказов[-ИндексСтроки].Склад);
			Если Результат.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(-ИндексСтроки);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого ИндексСтроки Из СтрокиКУдалению Цикл
			СвойстваЗаказов.Удалить(ИндексСтроки);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Результат.ВыгрузитьКолонку("Ссылка"));
	
КонецФункции

Функция ИмяПоляНазначение(Таблица, Поля)
	
	СтруктураПолей = Новый Структура(Поля);
	Для Каждого Элемент Из СтруктураПолей Цикл
		
		Колонка = Таблица.Колонки.Найти(Элемент.Ключ);
		Если Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Назначения")) Тогда
			Возврат Элемент.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьКолонкуДвиженияПоСкладскимРегистрам(Таблица, Поля)
	
	ИмяПоляНазначение = ИмяПоляНазначение(Таблица, Поля);
	МассивНазначений = Таблица.ВыгрузитьКолонку(ИмяПоляНазначение);
	СкладскиеНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНазначений, "ДвиженияПоСкладскимРегистрам");
	Таблица.Колонки.Добавить("ДвиженияПоСкладскимРегистрам", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтрокаТаблицы.ДвиженияПоСкладскимРегистрам = ЗначениеЗаполнено(СтрокаТаблицы[ИмяПоляНазначение])
			И СкладскиеНазначения[СтрокаТаблицы[ИмяПоляНазначение]].ДвиженияПоСкладскимРегистрам;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНазначенияВТабличнойЧасти(ТабличнаяЧасть, Назначение) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			Строка.Назначение = ПустоеНазначение;
			
		КонецЦикла;
		
	Иначе
		
		Таблица = Новый ТаблицаЗначений();
		Таблица.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Индекс = 0;
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Индекс = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Таблица.Индекс       КАК Индекс,
			|	Таблица.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ВтТовары
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|//////////////////////////////
			|ВЫБРАТЬ
			|	Таблица.Индекс КАК Индекс,
			|	
			|	ВЫБОР КОГДА СпрНоменклатура.Ссылка ЕСТЬ NULL ТОГДА
			|				ЛОЖЬ
			|			ИНАЧЕ
			|				ИСТИНА
			|		КОНЕЦ КАК ЗаполнятьНазначение
			|ИЗ
			|	ВтТовары КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО СпрНоменклатура.Ссылка = Таблица.Номенклатура
			|			И СпрНоменклатура.ТипНоменклатуры В(
			|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";
			
		Запрос.УстановитьПараметр("Таблица", Таблица);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЗаполнятьНазначение Тогда
				
				ТабличнаяЧасть[Выборка.Индекс].Назначение = Назначение;
				
			Иначе
				
				ТабличнаяЧасть[Выборка.Индекс].Назначение = ПустоеНазначение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Перем ТабличныйДокумент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		Период.ДатаНачала = НачалоМесяца(Параметры.ПериодРегистрации);
		Период.ДатаОкончания = КонецМесяца(Параметры.ПериодРегистрации);
		Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.ГруппаОтборБезОрганизации.Видимость = Не ИспользоватьНесколькоОрганизаций;
	Элементы.ГруппаОтбор.Видимость               = ИспользоватьНесколькоОрганизаций;
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = НСтр("ru='Помощник исправления отрицательных остатков товаров организации';uk='Помічник виправлення від''ємних залишків товарів організації'");
		Элементы.ГруппаОтбор.Заголовок = НСтр("ru='Выберите период, по которым будет выполнен анализ остатков товаров организации';uk='Оберіть період, за яким буде виконаний аналіз залишків товарів організації'");
		Элементы.ГруппаСостояниеОтрицательныхОстатковОстатков.Заголовок = НСтр("ru='Наличие отрицательных остатков товаров организации';uk='Наявність від''ємних залишків товарів організації'");
		Элементы.НадписьОтрицательныеОстатки.Заголовок = НСтр("ru='Отрицательные остатки товаров организации могут возникнуть при несоответствии приходов и расходов товаров в разрезе организации';uk='Від''ємні залишки товарів організації можуть виникнути при невідповідності надходжень і витрат товарів в розрізі організації'");
		Элементы.ГруппаОформлениеПоступленийТоваров.Заголовок = НСтр("ru='Поступления товаров в организацию';uk='Надходження товарів в організацію'");
	КонецЕсли;
	
	Элементы.КартинкаЕстьПредупреждения.Видимость = Ложь;
	Элементы.ПерейтиВЖурналРегистрацииСобытийФормированияЗаданий.Видимость = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		ТекстНадписи = НСтр("ru='Для исправления отрицательных остатков необходимо оформить недостающие поступления товаров или оформить передачи товаров между организациями';uk='Для виправлення від''ємних залишків необхідно оформити надходження товарів, яких не вистачає, або оформити передачі товарів між організаціями'");
	Иначе
		ТекстНадписи = НСтр("ru='Для исправления отрицательных остатков необходимо оформить недостающие поступления товаров';uk='Для виправлення негативних залишків необхідно оформити надходження товарів, яких не вистачає'");
	КонецЕсли;
	Элементы.НадписьОтрицательныеОстаткиИсправление.Заголовок = ТекстНадписи;
	
	ПолучитьСостояниеОстатковТоваровОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостьюКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	Оповестить("ЗакрытаФорма_ПомощникИсправленияОтрицательныхОстатковОрганизаций");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПередачаТоваровМеждуОрганизациями" Тогда
		Элементы.ТоварыКПередачеМеждуОрганизациями.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("Организация") Тогда
		Настройки.Удалить("Организация");
	КонецЕсли;
	
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		Настройки.Удалить("Период.Вариант");
		Настройки.Удалить("Период.ДатаНачала");
		Настройки.Удалить("Период.ДатаОкончания");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не Параметры.Свойство("Организация") Тогда
		Организация = Настройки.Получить("Организация");
	КонецЕсли;
	
	Если Не Параметры.Свойство("ПериодРегистрации") Тогда
		Вариант = Настройки.Получить("Период.Вариант");
		ДатаНачала = Настройки.Получить("Период.ДатаНачала");
		ДатаОкончания = Настройки.Получить("Период.ДатаОкончания");
	КонецЕсли;
	
	Если Вариант <> Неопределено Тогда
		Период.Вариант = Вариант;
	КонецЕсли;
	Если ДатаНачала <> Неопределено И Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Период.ДатаНачала = ДатаНачала;
	КонецЕсли;
	Если ДатаОкончания <> Неопределено И Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Период.ДатаОкончания = ДатаОкончания;
	КонецЕсли;
	
	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		Период.ДатаОкончания = Дата(1,1,1);
	КонецЕсли;
	
	Если Не Параметры.Свойство("Организация")
	 И (ЗначениеЗаполнено(Организация)
	 ИЛИ ЗначениеЗаполнено(Период.ДатаНачала)
	 ИЛИ ЗначениеЗаполнено(Период.ДатаОкончания)) Тогда
		ПолучитьСостояниеОстатковТоваровОрганизаций();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПолучитьСостояниеОстатковТоваровОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПолучитьСостояниеОстатковТоваровОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНаличиеОтрицательныхОстатковНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючНазначенияИспользования = "ОтрицательныеОстатки";
	ПараметрыФормы.КлючВарианта = "ОтрицательныеОстатки";
	
	ПараметрыФормы.Отбор = Новый Структура("Период, ЕстьОтрицательныеОстатки, ТолькоОтрицательныеОстатки", Период, Истина, Истина);
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.АнализОстатковТоваровОрганизаций.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНаличиеРазвернутогоСальдоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючНазначенияИспользования = "НаличиеРазвернутогоСальдо";
	ПараметрыФормы.КлючВарианта = "НаличиеРазвернутогоСальдо";
	
	ПараметрыФормы.Отбор = Новый Структура("Период, ЕстьРазвернутоеСальдо", Период, Истина);
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.АнализОстатковТоваровОрганизаций.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНедостаточноТоваровОрганизацийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючНазначенияИспользования = "НедостаточноТоваров";
	ПараметрыФормы.КлючВарианта = "НедостаточноТоваров";
	
	ПараметрыФормы.Отбор = Новый Структура("Период, ЕстьОтрицательныеОстатки", Период, Истина);
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.АнализОстатковТоваровОрганизаций.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПередачаТоваровМеждуОрганизациямиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючНазначенияИспользования = "ТребуетсяПередачаТоваров";
	ПараметрыФормы.КлючВарианта = "ТребуетсяПередачаТоваров";
	
	ПараметрыФормы.Отбор = Новый Структура("Период, ЕстьОтрицательныеОстатки, ТолькоОтрицательныеОстатки", Период, Истина, Ложь);
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.АнализОстатковТоваровОрганизаций.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСостояние(Команда)
	
	ПолучитьСостояниеОстатковТоваровОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПередачуТоваров(Команда)
	
	СтрокаТаблицы = Элементы.ТоварыКПередачеМеждуОрганизациями.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		
		СтруктураОснование = Новый Структура("Дата, Организация, ОрганизацияПолучатель, Склад, ЗаполнятьПоОтрицательнымОстаткам",
			КонецМесяца(СтрокаТаблицы.Период),
			СтрокаТаблицы.Отправитель,
			СтрокаТаблицы.Получатель,
			СтрокаТаблицы.Склад,
			Истина);
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
		ОткрытьФорму("Документ.ПередачаТоваровМеждуОрганизациями.ФормаОбъекта", СтруктураПараметры, Элементы.ТоварыКПередачеМеждуОрганизациями);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийПерепроведенияДокументов(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если ТаблицаИзмененныхДокументов.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", НСтр("ru='Изменены коды УКТВЭД и номера ГТД';uk='Змінено коди УКТЗЕД та номери ВМД'"));
	Иначе
		ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", НСтр("ru='Перепроведение документов';uk='Перепроведення документів'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("ДатаНачала", ДатаНачалаПерепроведенияДокументов);
	ПараметрыФормы.Вставить("ДатаОкончания", ДатаОкончанияПерепроведенияДокументов);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийОшибки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", НСтр("ru='Ошибка при перепроведении документов';uk='Помилка при перепроведенні документів'"));
	ПараметрыФормы.Вставить("ДатаНачала", ДатаНачалаПерепроведенияДокументов);
	ПараметрыФормы.Вставить("ДатаОкончания", ДатаОкончанияПерепроведенияДокументов);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийФормированияЗаданий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", НСтр("ru='Сформировано задание на печать реестра кодов УКТВЭД и номеров ГТД';uk='Сформовано завдання на друк реєстру кодів УКТЗЕД та номерів ВМД'"));
	ПараметрыФормы.Вставить("ДатаНачала", НачалоДня(ТекущаяДата()));
	ПараметрыФормы.Вставить("ДатаОкончания", КонецДня(ТекущаяДата()));
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпискаИзмененныхДокументов(Команда)
	
	ТабличныйДокумент = ПечатьСпискаИзмененныхДокументовСервер();
		
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.Показать();
	
КонецПроцедуры


&НаКлиенте
Процедура ОформлениеИсправительныхНалоговыхДокументов(Команда)
	ОткрытьФорму("ЖурналДокументов.ИсходящиеНалоговыеДокументы.ФормаСписка");
	Оповестить("ИсходящиеНалоговыеДокументы_АктивироватьОформлениеНалоговыхДокументов", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаданияДляМенеджеров(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Будет сформировано %1 для менеджеров, указанных в измененных документах. Продолжить?';uk='Буде сформовано %1 для менеджерів, зазначених у змінених документах. Продовжити?'"),
		ЧислоЗаданийПрописью(ТаблицаИзмененныхДокументов.Количество()));
    КодОтвета = Неопределено;

    ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьЗаданияДляМенеджеровЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаданияДляМенеджеровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        
        СформироватьЗаданияДляМенеджеровСервер();
        
        ТекстСообщения = НСтр("ru='Сформированы задания для менеджеров, указанных в измененных документах';uk='Сформовані завдання для менеджерів, зазначених у змінених документах'");
        ТекстЗаголовка = НСтр("ru='Сформированы задания';uk='Сформовані завдання'");
        ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОформлениеДокументов Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСостояние;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПерепроведение Тогда
		
		Если ЕстьОтрицательныеОстатки Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОформлениеДокументов;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСостояние;
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатПерепроведения Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПерепроведение;
		
	КонецЕсли;
	
	УправлениеВидимостьюКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Перем ПерепроведениеВыполнено;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСостояние Тогда
		
		Если ЕстьОтрицательныеОстатки Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОформлениеДокументов;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПерепроведение;
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОформлениеДокументов Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПерепроведение;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПерепроведение Тогда
		ПерепровестиДокументы();
		
	КонецЕсли;
	
	УправлениеВидимостьюКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементамиФормы

&НаКлиенте
Процедура УправлениеВидимостьюКоманд()
	
	Элементы.Назад.Видимость = (Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаСостояние);
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОформлениеДокументов Тогда
		Элементы.Готово.Видимость = Ложь;
		Элементы.Далее.Видимость = Истина;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатПерепроведения Тогда
		Элементы.Готово.Видимость = Истина;
		Элементы.Далее.Видимость = Ложь;
		
	Иначе
		Элементы.Готово.Видимость = Ложь;
		Элементы.Далее.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеНаличиеОтрицательныхОстатков(РезультатЗапроса)
	
	Если РезультатЗапроса.Пустой() Тогда
		ЕстьОтрицательныеОстатки = Ложь;
		СостояниеНаличиеОтрицательныхОстатков = НСтр("ru='Отрицательных остатков не обнаружено';uk='Від''ємних залишків не виявлено'");
		Элементы.СостояниеНаличиеОтрицательныхОстатков.ЦветТекста = ЦветаСтиля.ПоясняющийТекст; 
		Элементы.СостояниеНаличиеОтрицательныхОстатков.Гиперссылка = Ложь;
		Элементы.НадписьОтрицательныеОстатки.Видимость = Ложь;
		Элементы.НадписьОтрицательныеОстаткиИсправление.Видимость = Ложь;
		Элементы.КартинкаОтрицательныеОстаткиИсправление.Видимость = Ложь;
		
	Иначе
		ЕстьОтрицательныеОстатки = Истина;
		СостояниеНаличиеОтрицательныхОстатков = НСтр("ru='Обнаружены отрицательные остатки на конец месяца:';uk='Виявлені від''ємні залишки на кінець місяця:'") + " ";
		Элементы.СостояниеНаличиеОтрицательныхОстатков.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст; 
		Элементы.СостояниеНаличиеОтрицательныхОстатков.Гиперссылка = Истина;
		Элементы.НадписьОтрицательныеОстатки.Видимость = Истина;
		Элементы.НадписьОтрицательныеОстаткиИсправление.Видимость = Истина;
		Элементы.КартинкаОтрицательныеОстаткиИсправление.Видимость = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СостояниеНаличиеОтрицательныхОстатков = СостояниеНаличиеОтрицательныхОстатков
				+ Формат(Выборка.Период, "ДФ=""ММММ гггг""")
				+ ", ";
		КонецЦикла;
		Если Прав(СостояниеНаличиеОтрицательныхОстатков, 2) = ", " Тогда
			СостояниеНаличиеОтрицательныхОстатков = Лев(СостояниеНаличиеОтрицательныхОстатков, СтрДлина(СостояниеНаличиеОтрицательныхОстатков) - 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеНаличиеРазвернутогоСальдо(РезультатЗапроса)
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ЕстьРазвернутоеСальдо = Ложь;
		СостояниеНаличиеРазвернутогоСальдо = НСтр("ru='Развернутого сальдо по видам запасов, кодам УКТВЭД и номерам ГТД не обнаружено';uk='Розгорнутого сальдо за видами запасів, кодами УКТЗЕД та номерами ВМД не виявлено'");
		СостояниеПерепроведениеДокументов = НСтр("ru='Перепроведения документов не требуется';uk='Перепроведения документів не потрібно'");
		
		Элементы.СостояниеНаличиеРазвернутогоСальдо.ЦветТекста = ЦветаСтиля.ПоясняющийТекст; 
		Элементы.СостояниеНаличиеРазвернутогоСальдо.Гиперссылка = Ложь;
		Элементы.СостояниеПерепроведениеДокументов.ЦветТекста = ЦветаСтиля.ПоясняющийТекст; 
		
		Элементы.НадписьРазвернутоеСальдо.Видимость = Ложь;
		Элементы.НадписьРазвернутоеСальдоИсправление.Видимость = Ложь;
		Элементы.КартинкаРазвернутоеСальдоИсправление.Видимость = Ложь;
		
	Иначе
		
		ЕстьРазвернутоеСальдо = Истина;
		СостояниеНаличиеРазвернутогоСальдо = НСтр("ru='Обнаружено развернутое сальдо на конец месяца:';uk='Виявлено розгорнуте сальдо на кінець місяця:'") + " ";
		
		Элементы.СостояниеНаличиеРазвернутогоСальдо.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст; 
		Элементы.СостояниеНаличиеРазвернутогоСальдо.Гиперссылка = Истина;
		Элементы.СостояниеПерепроведениеДокументов.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст; 
		
		Элементы.НадписьРазвернутоеСальдо.Видимость = Истина;
		Элементы.НадписьРазвернутоеСальдоИсправление.Видимость = Истина;
		Элементы.КартинкаРазвернутоеСальдоИсправление.Видимость = Истина;
		
		ПервыйПериод = Неопределено;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СостояниеНаличиеРазвернутогоСальдо = СостояниеНаличиеРазвернутогоСальдо
				+ Формат(Выборка.Период, "ДФ=""ММММ гггг""")
				+ ", ";
			Если ПервыйПериод = Неопределено Тогда
				ПервыйПериод = Выборка.Период;
			КонецЕсли;
		КонецЦикла;
		Если Прав(СостояниеНаличиеРазвернутогоСальдо, 2) = ", " Тогда
			СостояниеНаличиеРазвернутогоСальдо = Лев(СостояниеНаличиеРазвернутогоСальдо, СтрДлина(СостояниеНаличиеРазвернутогоСальдо) - 2);
		КонецЕсли;
		
		СостояниеПерепроведениеДокументов = НСтр("ru='Требуется перепроведение документов начиная с периода:';uk='Потрібно перепроведення документів починаючи з періоду:'")
			+ " " + Формат(ПервыйПериод, "ДФ=""ММММ гггг""") + " " + НСтр("ru='г.';uk='р.'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеНедостаточноТоваровОрганизаций(РезультатЗапроса)
	
	Если РезультатЗапроса.Пустой() Тогда
		СостояниеНедостаточноТоваровОрганизаций = НСтр("ru='Оформление поступлений товаров не требуется';uk='Оформлення надходжень товарів не потрібно'");
		Элементы.СостояниеНедостаточноТоваровОрганизаций.ЦветТекста = ЦветаСтиля.ПоясняющийТекст; 
		Элементы.СостояниеНедостаточноТоваровОрганизаций.Гиперссылка = Ложь;
		
	Иначе
		СостояниеНедостаточноТоваровОрганизаций = НСтр("ru='Требуется оформить поступления товаров в периодах:';uk='Потрібно оформити надходження товарів в періодах:'") + " ";
		Элементы.СостояниеНедостаточноТоваровОрганизаций.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст; 
		Элементы.СостояниеНедостаточноТоваровОрганизаций.Гиперссылка = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СостояниеНедостаточноТоваровОрганизаций = СостояниеНедостаточноТоваровОрганизаций
				+ Формат(Выборка.Период, "ДФ=""ММММ гггг""")
				+ ", ";
		КонецЦикла;
		Если Прав(СостояниеНедостаточноТоваровОрганизаций, 2) = ", " Тогда
			СостояниеНедостаточноТоваровОрганизаций = Лев(СостояниеНедостаточноТоваровОрганизаций, СтрДлина(СостояниеНедостаточноТоваровОрганизаций) - 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеПередачаТоваровМеждуОрганизациями(РезультатЗапроса)
	
	Если РезультатЗапроса.Пустой() Тогда
		СостояниеПередачаТоваровМеждуОрганизациями = НСтр("ru='Оформление передач товаров между организациями не требуется';uk='Оформлення передач товарів між організаціями не потрібно'");
		Элементы.СостояниеПередачаТоваровМеждуОрганизациями.ЦветТекста = ЦветаСтиля.ПоясняющийТекст; 
		Элементы.СостояниеПередачаТоваровМеждуОрганизациями.Гиперссылка = Ложь;
		Элементы.ТоварыКПередачеМеждуОрганизациями.Видимость = Ложь;
		
	Иначе
		СостояниеПередачаТоваровМеждуОрганизациями = НСтр("ru='Требуется оформить передачи товаров между организациями в периодах:';uk='Потрібно оформити передачі товарів між організаціями в періодах:'") + " ";
		Элементы.СостояниеПередачаТоваровМеждуОрганизациями.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст; 
		Элементы.СостояниеПередачаТоваровМеждуОрганизациями.Гиперссылка = Истина;
		Элементы.ТоварыКПередачеМеждуОрганизациями.Видимость = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СостояниеПередачаТоваровМеждуОрганизациями = СостояниеПередачаТоваровМеждуОрганизациями
				+ Формат(Выборка.Период, "ДФ=""ММММ гггг""")
				+ ", ";
		КонецЦикла;
		Если Прав(СостояниеПередачаТоваровМеждуОрганизациями, 2) = ", " Тогда
			СостояниеПередачаТоваровМеждуОрганизациями = Лев(СостояниеПередачаТоваровМеждуОрганизациями, СтрДлина(СостояниеПередачаТоваровМеждуОрганизациями) - 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПерепроведениеДокументов

&НаСервере
Процедура УстановитьАктивностьДвиженийПоРегистрам(МассивДокументов, Активность)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|   ТоварыОрганизаций.Регистратор КАК Регистратор,
	|	ТоварыОрганизаций.Регистратор.Дата КАК Дата
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	(ТоварыОрганизаций.Регистратор В (&МассивДокументов) ИЛИ &Активность)
	|	И ТоварыОрганизаций.Активность <> &Активность
	|    
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыОрганизаций.Регистратор.Дата Возр,
	|	ТоварыОрганизаций.Регистратор 
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Активность", Активность);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		НаборЗаписей.УстановитьАктивность(Активность);
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьАктивностьДвиженийПоРегистрам()

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоДокументовПрописью(КоличествоДокументов)
	
	КоличествоПрописью = ЧислоПрописью(
		КоличествоДокументов,
		"Л = ru_RU; НП = Истина; НД = Ложь; ДП = Ложь;",
		НСтр("ru='документ,документа,документов,м,,,,,0';uk='документ,документа,документів,м,,,,,0'"));
	Поз = СтрНайти(КоличествоПрописью, "документ");
	Если Поз <> 0 Тогда
		КоличествоПрописью = Сред(КоличествоПрописью, Поз);
	КонецЕсли;
	КоличествоПрописью = Строка(КоличествоДокументов) + " " + НРег(КоличествоПрописью);
	
	Возврат КоличествоПрописью;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоЗаданийПрописью(КоличествоЗаданий)
	
	КоличествоПрописью = ЧислоПрописью(
		КоличествоЗаданий,
		"Л = ru_RU; НП = Истина; НД = Ложь; ДП = Ложь;",
		НСтр("ru='задание,задания,заданий,с,,,,,0';uk='завдання,завдання,завдань,с,,,,,0'"));
	Поз = СтрНайти(КоличествоПрописью, "задани");
	Если Поз <> 0 Тогда
		КоличествоПрописью = Сред(КоличествоПрописью, Поз);
	КонецЕсли;
	КоличествоПрописью = Строка(КоличествоЗаданий) + " " + НРег(КоличествоПрописью);
	
	Возврат КоличествоПрописью;
	
КонецФункции

&НаСервере
Функция МассивДокументовДляПолногоПерепроведения()
	
	МассивОрганизаций = МассивДоступныхОрганизаций();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|   ТоварыОрганизаций.Регистратор КАК Регистратор,
	|	ТоварыОрганизаций.Регистратор.Дата КАК Дата
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор,
	|		Организация В (&МассивОрганизаций)
	|	) КАК ТоварыОрганизаций
	|ГДЕ
	|	Не ТоварыОрганизаций.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ТоварыОрганизаций.КоличествоРасход <> 0
	|    
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыОрганизаций.Регистратор.Дата Возр,
	|	ТоварыОрганизаций.Регистратор 
	|");
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	МассивДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Регистратор");
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Функция МассивДокументовДляПерепроведения()
	
	МассивОрганизаций = МассивДоступныхОрганизаций();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.Период КАК Период
	|
	|ПОМЕСТИТЬ ВтТаблицаОтрицательныхОстатков
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Месяц,, 
	|		Организация В (&МассивОрганизаций)
	|	) КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоКонечныйОстаток < 0
	|	И ТоварыОрганизаций.КоличествоНачальныйОстаток <> ТоварыОрганизаций.КоличествоКонечныйОстаток
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Период
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.ВидЗапасов КАК ВидЗапасов,
	|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	|	ТоварыОрганизаций.Период КАК Период
	|	
	|ПОМЕСТИТЬ ВтТаблицаРазвернутоеСальдо
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Месяц,,
	|		Организация В (&МассивОрганизаций)
	|	) КАК ТоварыОрганизаций
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтТаблицаОтрицательныхОстатков КАК ТаблицаОтрицательныхОстатков
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ТаблицаОтрицательныхОстатков.АналитикаУчетаНоменклатуры
	|		И ТоварыОрганизаций.Период = ТаблицаОтрицательныхОстатков.Период
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоКонечныйОстаток < 0
	|	И ТоварыОрганизаций.КоличествоНачальныйОстаток <> ТоварыОрганизаций.КоличествоКонечныйОстаток
	|	И ТаблицаОтрицательныхОстатков.Период ЕСТЬ NULL
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	НомерГТД,
	|	Период
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРазвернутоеСальдо.Организация,
	|	ТаблицаРазвернутоеСальдо.АналитикаУчетаНоменклатуры,
	|	ТаблицаРазвернутоеСальдо.Период
	|	
	|ПОМЕСТИТЬ ВтТаблицаОтборНоменклатурыПоПериодам
	|ИЗ
	|	ВтТаблицаРазвернутоеСальдо КАК ТаблицаРазвернутоеСальдо
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.ПериодСекунда,
	|	ТоварыОрганизаций.Регистратор,
	|	СУММА(ТоварыОрганизаций.КоличествоРасход) КАК КоличествоРасход
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, Авто, Движения, 
	|		(Организация, АналитикаУчетаНоменклатуры) В (
	|			ВЫБРАТЬ
	|				ТаблицаРазвернутоеСальдо.Организация,
	|				ТаблицаРазвернутоеСальдо.АналитикаУчетаНоменклатуры
	|			ИЗ
	|				ВтТаблицаРазвернутоеСальдо КАК ТаблицаРазвернутоеСальдо
	|			)
	|	) КАК ТоварыОрганизаций
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтТаблицаОтборНоменклатурыПоПериодам КАК ТаблицаОтборНоменклатурыПоПериодам
	|	ПО
	|		ТоварыОрганизаций.Организация = ТаблицаОтборНоменклатурыПоПериодам.Организация
	|		И ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ТаблицаОтборНоменклатурыПоПериодам.АналитикаУчетаНоменклатуры
	|		И ТоварыОрганизаций.ПериодМесяц = ТаблицаОтборНоменклатурыПоПериодам.Период
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтТаблицаРазвернутоеСальдо КАК ТаблицаРазвернутоеСальдо
	|	ПО
	|		ТоварыОрганизаций.Организация = ТаблицаРазвернутоеСальдо.Организация
	|		И ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ТаблицаРазвернутоеСальдо.АналитикаУчетаНоменклатуры
	|		И ТоварыОрганизаций.ВидЗапасов = ТаблицаРазвернутоеСальдо.ВидЗапасов
	|		И ТоварыОрганизаций.НомерГТД = ТаблицаРазвернутоеСальдо.НомерГТД
	|		И ТоварыОрганизаций.ПериодМесяц = ТаблицаРазвернутоеСальдо.Период
	|ГДЕ
	|	Не ТоварыОрганизаций.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И ТоварыОрганизаций.КоличествоРасход <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизаций.ПериодСекунда,
	|	ТоварыОрганизаций.Регистратор
	|		
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоРасход ВОЗР,
	|	ТоварыОрганизаций.ПериодСекунда,
	|	ТоварыОрганизаций.Регистратор
	|");
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; // Используется для вызова отладочной процедуры ЗапасыСервер.ПоказатьВременнуюТаблицу
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	МассивДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Регистратор");
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Процедура ПерепроведениеДокументовПоТоварамОрганизаций(МассивДокументов, Знач КоличествоДокументовЗаСеанс, Счетчик, ТекущийПериод = Неопределено, МассивНепроведенныхДокументов = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОбработанныхДокументов = Новый Массив;
	
	Для Каждого Регистратор Из МассивДокументов Цикл
		
		ДокументОбъект = Регистратор.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПерезаполнитьВидыЗапасов", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ИгнорироватьОперативныеОстатки", Истина);
		
		
		// Контролируем список документов, которые необходимо перепечатать. Важна только печатная форма РТУ 
		// "Реестр кодов УКТВЭД и номеров ГТД". Выдается при продаже и при комиссии (в случаях когда выдаются
		// налоговые документы). Сами налоговые документы переформировываются отдельно регламентным заданием
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("КонтролироватьИзменениеНомеровГТД", Истина);
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ДокументПроведенУспешно = Истина;
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Ошибка при проведении документа';uk='Помилка при проведенні документа'"), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ДокументПроведенУспешно = Ложь;
		КонецПопытки;
		
		Если ДокументПроведенУспешно Тогда
			
			Если ДокументОбъект.ДополнительныеСвойства.Свойство("НедостаточноОстатковТоваровОрганизаций") Тогда
				СтруктураОтбора = Новый Структура("Документ", Регистратор);
				Если ТаблицаНеПроведенныхДокументов.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru='Ошибка при перепроведении документов';uk='Помилка при перепроведенні документів'"), 
						УровеньЖурналаРегистрации.Ошибка,
						ДокументОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента,
						ДокументОбъект.Ссылка,
						НСтр("ru='Для документа недостаточно остатков товаров организаций. Документ не перепроведен';uk='Для документа недостатньо залишків товарів організацій. Документ не перепроведений'"),
						РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
					НоваяСтрока = ТаблицаНеПроведенныхДокументов.Добавить();
					НоваяСтрока.Документ = Регистратор;
					НоваяСтрока.Тип = ТипЗнч(Регистратор);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументОбъект, "Дата, Номер, Организация");
				КонецЕсли;
			Иначе
				ЗаписьЖурналаРегистрации(
					НСтр("ru='Перепроведение документов';uk='Перепроведення документів'"), 
					УровеньЖурналаРегистрации.Информация,
					ДокументОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента,
					ДокументОбъект.Ссылка,
					НСтр("ru='Выполнено перезаполнение видов запасов документа. Документ перепроведен';uk='Виконано перезаповнення видів запасів документа. Документ перепроведений'"), 
					РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			КонецЕсли;
			
			Если ДокументОбъект.ДополнительныеСвойства.Свойство("ИзменилисьНомераГТД") Тогда
				
				НоваяСтрока = ТаблицаИзмененныхДокументов.Добавить();
				НоваяСтрока.Документ = Регистратор;
				НоваяСтрока.Ответственный = ДокументОбъект.Менеджер;
				НоваяСтрока.Тип = ТипЗнч(Регистратор);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументОбъект, "Дата, Номер, Организация, Склад, Подразделение");
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru='Изменены коды УКТВЭД и номера ГТД';uk='Змінено коди УКТЗЕД та номери ВМД'"), 
					УровеньЖурналаРегистрации.Предупреждение,
					ДокументОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента,
					ДокументОбъект.Ссылка,
					НСтр("ru='В документе изменены данные о кодах УКТВЭД и номерах ГТД товаров';uk='У документі змінені дані про коди УКТЗЕД та номери ВМД товарів'"),
					РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийПериод = Дата(1,1,1) Тогда
			ТекущийПериод = НачалоМесяца(ДокументОбъект.Дата);
		КонецЕсли;
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("НедостаточноОстатковТоваровОрганизаций")
		 И МассивНепроведенныхДокументов <> Неопределено Тогда
			МассивНепроведенныхДокументов.Добавить(Регистратор);
		КонецЕсли;
		
		МассивОбработанныхДокументов.Добавить(Регистратор);
		Счетчик = Счетчик + 1;
		КоличествоДокументовЗаСеанс = КоличествоДокументовЗаСеанс - 1;
		
		Если МассивНепроведенныхДокументов <> Неопределено
		 И МассивНепроведенныхДокументов.Количество() > 0
		 И ТекущийПериод <> НачалоМесяца(ДокументОбъект.Дата) Тогда
		 
			ПерепроведениеДокументовПоТоварамОрганизаций(МассивНепроведенныхДокументов, КоличествоДокументовЗаСеанс, Счетчик);
			ТекущийПериод = НачалоМесяца(ДокументОбъект.Дата);
			
		КонецЕсли;
		
		Если КоличествоДокументовЗаСеанс = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Регистратор Из МассивОбработанныхДокументов Цикл
		Индекс = МассивДокументов.Найти(Регистратор);
		Если Индекс <> Неопределено Тогда
			МассивДокументов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МассивИзмененныхДокументов()
	
	ТаблицаДокументов = ТаблицаИзмененныхДокументов.Выгрузить(, "Документ");
	ТаблицаДокументов.Свернуть("Документ", "");
	МассивДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Документ");
	
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Функция ПечатьСпискаИзмененныхДокументовСервер()
	
	Перем ТабличныйДокументСервер;
	
	МассивДокументов = МассивИзмененныхДокументов();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("СхемаКомпоновкиДанныхСписокДокументов");
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.Восстановить();
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаДокументов", ТаблицаИзмененныхДокументов.Выгрузить());
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		НастройкиКомпоновкиДанных,
		, // ДанныеРасшифровки,
		, // МакетОформления
		Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		ВнешниеНаборыДанных,
		,); // ДанныеРасшифровки
	
	ТабличныйДокументСервер = Новый ТабличныйДокумент;		
	ТабличныйДокументСервер.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокументСервер);
	ТабличныйДокументСервер = ПроцессорВывода.Вывести(
		ПроцессорКомпоновки,
		Истина); // Воможность прерывания пользователем
	
	ТабличныйДокументСервер.ОтображатьЗаголовки = Ложь;
	ТабличныйДокументСервер.ОтображатьСетку = Ложь;
	ТабличныйДокументСервер.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокументСервер
	
КонецФункции


&НаСервере
Процедура СформироватьЗаданияДляМенеджеровСервер()
	
	Для Каждого СтрокаТаблицы Из ТаблицаИзмененныхДокументов Цикл
		
		НовоеЗадание = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
		НовоеЗадание.Дата = ТекущаяДата();
		НовоеЗадание.Предмет = СтрокаТаблицы.Документ;
		НовоеЗадание.Исполнитель = СтрокаТаблицы.Ответственный;
		НовоеЗадание.Наименование = НСтр("ru='Перепечатать реестр кодов УКТВЭД и номеров ГТД для документа: ';uk='Передрукувати реєстр кодів УКТЗЕД та номерів ВМД для документа: '") + Строка(СтрокаТаблицы.Документ);
		НовоеЗадание.Содержание = НСтр("ru='В документе изменены коды УКТВЭД и номера ГТД. Требуется перепечатать реестр кодов УКТВЭД и номеров ГТД .';uk='У документі змінені коди УКТЗЕД та номери ВМД. Потрібно передрукувати реєстр кодів УКТЗЕД та номерів ВМД .'");
		НовоеЗадание.СрокИсполнения = ТекущаяДата();
		НовоеЗадание.Автор = Пользователи.ТекущийПользователь();
		НовоеЗадание.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		
		НовоеЗадание.Записать();
		НовоеЗадание.Старт();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Сформировано задание на печать реестра кодов УКТВЭД и номеров ГТД';uk='Сформовано завдання на друк реєстру кодів УКТЗЕД та номерів ВМД'"), 
			УровеньЖурналаРегистрации.Информация,
			НовоеЗадание.Метаданные(),
			НовоеЗадание.Ссылка,
			НСтр("ru='Сформировано задание для менеджера документа реализации товаров';uk='Сформовано завдання для менеджера документу реалізації товарів'"),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецЦикла;
	
	ЗаголовокКнопкиПерейти = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сформировано %1';uk='Сформовано %1'"),
		ЧислоЗаданийПрописью(ТаблицаИзмененныхДокументов.Количество()));
	Элементы.ПерейтиВЖурналРегистрацииСобытийФормированияЗаданий.Заголовок = ЗаголовокКнопкиПерейти;
	Элементы.ПерейтиВЖурналРегистрацииСобытийФормированияЗаданий.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументы()
	
	Если СпособПерезаполненияВидовЗапасовВДокументах = 1 Тогда
		МассивДокументов = МассивДокументовДляПолногоПерепроведения();
	Иначе
		МассивДокументов = МассивДокументовДляПерепроведения();
	КонецЕсли;
	МассивНепроведенныхДокументов = Новый Массив;
	
	КоличествоДокументов = МассивДокументов.Количество();
	КоличествоДокументовЗаСеанс = Окр(КоличествоДокументов / 10);
	
	ДополнительныеПараметры = Новый Структура("МассивДокументов", МассивДокументов);
	Если КоличествоДокументов > 1 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Будет перепроведено %1, что может занять длительное время. Продолжить?';uk='Буде перепроведено %1, що може зайняти тривалий час. Продовжити?'"),
			ЧислоДокументовПрописью(КоличествоДокументов));
		ПоказатьВопрос(Новый ОписаниеОповещения("ПерепровестиДокументыЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		КодОтвета = КодВозвратаДиалога.Да;
		ПерепровестиДокументыЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = ДополнительныеПараметры.МассивДокументов;
	МассивНепроведенныхДокументов = Новый Массив;
	
	КоличествоДокументов = МассивДокументов.Количество();
	КоличествоДокументовЗаСеанс = Окр(КоличествоДокументов / 10);
	
	Если СпособПерезаполненияВидовЗапасовВДокументах = 1 Тогда
		УстановитьАктивностьДвиженийПоРегистрам(
		МассивДокументов,
		Ложь); // Активность
	КонецЕсли;

	ДатаНачалаПерепроведенияДокументов = ТекущаяДата();
	ТаблицаИзмененныхДокументов.Очистить();
	ТаблицаНеПроведенныхДокументов.Очистить();
	
	ТекущийПериод = Дата(1,1,1);
	Счетчик = 0;
	Пока Счетчик < КоличествоДокументов Цикл
		
		Состояние(НСтр("ru='Перепроведение документов';uk='Перепроведення документів'"), Счетчик / КоличествоДокументов * 100);
		
		ПерепроведениеДокументовПоТоварамОрганизаций(
			МассивДокументов,
			КоличествоДокументовЗаСеанс,
			Счетчик,
			ТекущийПериод,
			МассивНепроведенныхДокументов);
		
		Состояние(НСтр("ru='Перепроведение документов';uk='Перепроведення документів'"), Счетчик / КоличествоДокументов * 100);
		
	КонецЦикла;
	
	Если МассивНепроведенныхДокументов.Количество() > 0 Тогда
		ПерепроведениеДокументовПоТоварамОрганизаций(
			МассивНепроведенныхДокументов,
			КоличествоДокументовЗаСеанс,
			Счетчик,
			Неопределено,
			МассивНепроведенныхДокументов);
	КонецЕсли;
	
	ДатаОкончанияПерепроведенияДокументов = ТекущаяДата();
	
	Если КоличествоДокументов = 1 Тогда
		ЗаголовокКнопкиПерейти = НСтр("ru='Перепроведен 1 документ';uk='Перепроведений 1 документ'");
	Иначе
		ЗаголовокКнопкиПерейти = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Перепроведено %1';uk='Перепроведено %1'"),
			ЧислоДокументовПрописью(КоличествоДокументов));
	КонецЕсли;
	КоличествоИзмененныхДокументов = ТаблицаИзмененныхДокументов.Количество();
	Если КоличествоИзмененныхДокументов > 0 Тогда
		ЗаголовокКнопкиПерейти = ЗаголовокКнопкиПерейти + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=', изменены данные о кодах УКТВЭД и номерах ГТД в %1';uk=', змінені дані про коди УКТЗЕД та номери ВМД %1'"),
			ЧислоДокументовПрописью(КоличествоИзмененныхДокументов));
	КонецЕсли;
	Элементы.ПерейтиВЖурналРегистрацииСобытийПерепроведенияДокументов.Заголовок = ЗаголовокКнопкиПерейти;
	ЕстьИзмененныеДокументы = (ТаблицаИзмененныхДокументов.Количество() > 0);
	
	КоличествоНеПроведенныхДокументов = ТаблицаНеПроведенныхДокументов.Количество();
	Если КоличествоНеПроведенныхДокументов = 1 Тогда
		Элементы.ПерейтиВЖурналРегистрацииСобытийОшибки.Заголовок = НСтр("ru='В т.ч. перепроведен с ошибками 1 документ';uk='В т. ч. перепроведений з помилками 1 документ'")
	ИначеЕсли КоличествоНеПроведенныхДокументов > 1 Тогда
		Элементы.ПерейтиВЖурналРегистрацииСобытийОшибки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В т.ч. перепроведено с ошибками %1';uk='В т. ч. перепроведено з помилками %1'"),
			ЧислоДокументовПрописью(ТаблицаНеПроведенныхДокументов.Количество()));
	КонецЕсли;
	
	Элементы.КартинкаЕстьПредупреждения.Видимость = ЕстьИзмененныеДокументы;
	Элементы.ПерейтиВЖурналРегистрацииСобытийОшибки.Видимость = (КоличествоНеПроведенныхДокументов > 0);
	
	Элементы.ПечатьСпискаИзмененныхДокументов.Доступность = ЕстьИзмененныеДокументы;
	Элементы.СформироватьЗаданияДляМенеджеров.Доступность = ЕстьИзмененныеДокументы;
	
	ТекстСообщения = НСтр("ru='Выполнено перепроведение документов, приводящих к отрицательным остаткам';uk='Виконано перепроведення документів, що призводять до від''ємних залишків'");
	ТекстЗаголовка = НСтр("ru='Выполнено перепроведение документов';uk='Виконано перепроведення документів'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
	ПолучитьСостояниеОстатковТоваровОрганизаций();
	
	// Восстанавливаем активность движений по регистрам.
	Если СпособПерезаполненияВидовЗапасовВДокументах = 1 Тогда
		УстановитьАктивностьДвиженийПоРегистрам(
			МассивДокументов,
			Истина); // Активность
	КонецЕсли;
		
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРезультатПерепроведения;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	ТоварыКПередачеМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("ДатаНачала", Период.ДатаНачала);
	ТоварыКПередачеМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", Период.ДатаОкончания);
	ТоварыКПередачеМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("МассивОрганизаций", МассивДоступныхОрганизаций());
	
КонецПроцедуры

&НаСервере
Функция МассивДоступныхОрганизаций()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Организация
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаСервере
Процедура ПолучитьСостояниеОстатковТоваровОрганизаций()
	
	Если ЗначениеЗаполнено(Период.ДатаНачала)
	 И Период.ДатаНачала > Период.ДатаОкончания Тогда
	 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата начала периода не должна быть больше окончания периода %1';uk='Дата початку періоду не повинна бути більше закінчення періоду %1'"),
			Формат(Период.ДатаОкончания, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Период",
			, // ПутьКДанным
			);
		Возврат;
	 
	КонецЕсли;

	
	МассивОрганизаций = МассивДоступныхОрганизаций();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = Обработки.ПомощникИсправленияОстатковТоваровОрганизаций.ТекстЗапросаСостояниеОстатковТоваровОрганизаций();
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// МассивРезультатов[0] - ВтТаблицаОтрицательныхОстатков
	// МассивРезультатов[1] - ВтТаблицаОтсутствующихТоваров
	РезультатЗапросаОтрицательныеОстатки = МассивРезультатов[2];
	РезультатЗапросаРазвернутоеСальдо = МассивРезультатов[3];
	РезультатЗапросаНедостаточноТоваров = МассивРезультатов[4];
	РезультатЗапросаПередачиТоваров = МассивРезультатов[5];
	
	УстановитьСостояниеНаличиеОтрицательныхОстатков(РезультатЗапросаОтрицательныеОстатки);
	УстановитьСостояниеНаличиеРазвернутогоСальдо(РезультатЗапросаРазвернутоеСальдо);
	УстановитьСостояниеНедостаточноТоваровОрганизаций(РезультатЗапросаНедостаточноТоваров);
	УстановитьСостояниеПередачаТоваровМеждуОрганизациями(РезультатЗапросаПередачиТоваров);
		
	Элементы.Далее.Доступность = ЕстьОтрицательныеОстатки ИЛИ ЕстьРазвернутоеСальдо;
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

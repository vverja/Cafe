////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	Массив.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML,
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	Перем ВидЭД, НаправлениеЭД, Организация, Контрагент;
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если ФорматCML Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		ИначеЕсли Источник.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
		Иначе			
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеУслугПрочихАктивов") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями;
		НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.ОрганизацияПолучатель;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями;
		НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, ОрганизацияПолучатель, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.ОрганизацияПолучатель;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.ОрганизацияПолучатель;
			Договор = Источник.Договор;
		КонецЕсли;
	
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказКлиента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент; 
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РегистрацияЦенНоменклатурыПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			Реквизиты = Новый Структура("Организация, Контрагент", "Организация", "Соглашение.Контрагент");
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, Реквизиты);
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Соглашение, "Контрагент");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионера")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, 
				"ХозяйственнаяОперация, Организация, Контрагент, Договор");
			ХозяйственнаяОперация = ЗначенияРеквизитов.ХозяйственнаяОперация;
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			ХозяйственнаяОперация = Источник.ХозяйственнаяОперация;
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
					И Источник.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, Договор");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
			Договор = ЗначенияРеквизитов.Договор;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
			Договор = Источник.Договор;
		КонецЕсли; 		
	КонецЕсли;
	
	ПараметрыЭД.ВидЭД = ВидЭД;
	ПараметрыЭД.НаправлениеЭД = НаправлениеЭД;
	ПараметрыЭД.Организация = Организация;
	ПараметрыЭД.Контрагент = Контрагент;
	ПараметрыЭД.ДоговорКонтрагента = Договор;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	Владелец = Справочники.НоменклатураПоставщиков.ПустаяСсылка().Владелец;
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяРеквизитаВладельца = "Контрагент";
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ИмяРеквизитаВладельца = "Партнер";
	КонецЕсли;
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом", "ВариантыОплатыКлиентом");
	СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "ВариантыОплатыПоставщику");
	СоответствиеПеречислений.Вставить("ФормыОплаты", "ФормыОплаты");
	СоответствиеПеречислений.Вставить("СпособРасчета", "СпособыРасчетаКомиссионногоВознаграждения");
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("7",       Перечисления.СтавкиНДС.НДС7);
//   Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//   Соответствие.Вставить("не НДС",  Перечисления.СтавкиНДС.НеНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("7",       Перечисления.СтавкиНДС.НДС7);
    Соответствие.Вставить("14",      Перечисления.СтавкиНДС.НДС14);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	Соответствие.Вставить("не НДС",  Перечисления.СтавкиНДС.НеНДС);
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьСоответствиеСтавокНДС.
// Необходимо заполнить соответствие ставок и сумм НДС
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

// Определяет, является ли объект корректировочным документом
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Возврат Результат;
	
КонецФункции

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партнеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Истина;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = Истина;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = Истина;
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа со деревом данных CML

// Заполняет данные для электронного документа типа Акт на передачу прав формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	
	ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыАктНаПередачуПрав(ПараметрыПечати, МассивОбъектов);
	
	ВыборкаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаТоваров.Сбросить();
	
	НайденСледующий = ВыборкаТоваров.НайтиСледующий(СтруктураПоиска);
	
	Если НайденСледующий Тогда
	
		ТаблицаТоваров = Новый ТаблицаЗначений();	
		ТаблицаТоваров.Колонки.Добавить("Артикул");   
		ТаблицаТоваров.Колонки.Добавить("Наименование");
		ТаблицаТоваров.Колонки.Добавить("Описание");
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("Характеристика");
		ТаблицаТоваров.Колонки.Добавить("Упаковка");
		ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
		ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
		ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("Сумма");
		ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		
		ИтоговыеСуммы = СтруктураИтоговыеСуммы(СтруктураЭД.ВидЭД);
	
		ДанныеСтроки = ВыборкаТоваров.Выбрать();
		Пока ДанныеСтроки.Следующий() Цикл
			
			СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыТоваров, ДанныеСтроки);
			
			СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.НоменклатураКод;
			СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Номенклатура;
			СтрокаТаблицыТоваров.Наименование				= ДанныеСтроки.НоменклатураНаименованиеКраткое;
			СтрокаТаблицыТоваров.Описание					= ДанныеСтроки.НоменклатураНаименование;
			СтрокаТаблицыТоваров.Упаковка 					= ДанныеСтроки.ЕдиницаИзмерения;
			СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
			СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
			СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное = "-";
			СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение = "-";
			
			СтрокаТаблицыТоваров.Количество 		= ДанныеСтроки.Количество;
			СтрокаТаблицыТоваров.НДСУчтеноВСумме 	= Ложь;
			
			СтрокаТаблицыТоваров.Сумма = ДанныеСтроки.СуммаБезНДС;
			СтрокаТаблицыТоваров.Цена = Окр(ДанныеСтроки.Цена, 2);
			
			СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
			СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
			
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки, СтруктураЭД.ВидЭД);
			
		КонецЦикла;
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Номер", РеквизитыШапки.Номер);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Дата", РеквизитыШапки.Дата);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта", ВалютаРегламентированногоУчета.Код);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Курс", "1");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма", ИтоговыеСуммы.СуммаСНДС);
		
		СведенияОЛицензиаре = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.БанковскийСчетОрганизации);
		СведенияОЛицензиате = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.БанковскийСчетГрузополучателя);
		СведенияОПлательщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.БанковскийСчетКонтрагента);
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиаре, "Лицензиар",  "Факт");
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиате, "Лицензиат",  "Факт");
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПлательщике, "Плательщик", "Юр");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "Товары");
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, 
				"ВидОперации", 
				Перечисления.ВидыОперацийЭД.Исправление);
			ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект);
		Иначе
			ЗаполнитьДокументыОснованияПоЗаказам(ДеревоДанных, СсылкаНаОбъект);
			ЗаполнитьУИП(ДеревоДанных, СсылкаНаОбъект.ИдентификаторПлатежа);			
		КонецЕсли;		
		
		//Заполнение документов сделки
		ТаблицаДокументовСделки = Новый ТаблицаЗначений();
		ТаблицаДокументовСделки.Колонки.Добавить("Представление");
		
		Если ЗначениеЗаполнено(РеквизитыШапки.Основание) Тогда
			СтрокаТаблицаДокументовСделки = ТаблицаДокументовСделки.Добавить();
			СтрокаТаблицаДокументовСделки.Представление = РеквизитыШапки.Основание;
		КонецЕсли;
		
		Если ТаблицаДокументовСделки.Количество() > 0 Тогда
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаДокументовСделки, "ДокументыСделки");
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Документ %1 не содержит данных для формирования ЭД.';uk='Документ %1 не містить даних для формування ЕД.'"), 
			РеквизитыШапки.Ссылка);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры: 
// СсылкаНаОбъект - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	СведенияОбОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", "Юр");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты " + СсылкаНаОбъект.Наименование);

КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  ТоварыКаталога - Массив, список товаров для заполнения каталога.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт

КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - Дерево значений - Дерево значений, соответствующее макету ПрайсЛист обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Номер,
	|	КоммерческоеПредложениеКлиенту.Организация,
	|	КоммерческоеПредложениеКлиенту.Дата,
	|	КоммерческоеПредложениеКлиенту.Валюта,
	|	КоммерческоеПредложениеКлиенту.Валюта.Код КАК ВалютаКод,
	|	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Цена,
	|	Товары.Количество,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка,
	|	Товары.Ссылка.Валюта.Код КАК ВалютаЦены
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ВидЦены КАК ТипЦены,
	|	Товары.ВидЦены.Наименование КАК Наименование,
	|	Товары.Ссылка.Валюта.Код КАК Валюта,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК ВключаетНДС
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность
	|";
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура." + ИмяДопКолонки, """"""));
					
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДействительноС", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДействительноДо", 
			РеквизитыШапки.СрокДействия);
			
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Цены по комм. предложению %1 от %2';uk='Ціни по комм. пропозиції %1 від %2'"),
				ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыШапки.Номер, Ложь, Ложь),
				РеквизитыШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Описание", 
			Описание);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Владелец", "Юр");
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ТаблицаТипыЦен = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТипыЦен, "ТипыЦен");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  Дерево документа - дерево значений - дерево значений, соответствующее макету СчетНаОплату обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	ДопустимыеВидыДокументов = Новый Массив;
	ДопустимыеВидыДокументов.Добавить("ЗаказКлиента");
	ДопустимыеВидыДокументов.Добавить("РеализацияТоваровУслуг");
	ДопустимыеВидыДокументов.Добавить("АктВыполненныхРабот");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомиссионера");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомиссионераОСписании");
	ДопустимыеВидыДокументов.Добавить("ОтчетКомитенту");
	ДопустимыеВидыДокументов.Добавить("ЗаявкаНаВозвратТоваровОтКлиента");
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование"); 
	ВидДокумента = ДокументОснование.Метаданные().Имя;
	
	Если ДопустимыеВидыДокументов.Найти(ВидДокумента) = Неопределено Тогда
		ВызватьИсключение 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ЭД ""Счет на оплату"" не может быть сформирована, т.к. не определено получение данных для основания вида %1';uk='ЕД ""Рахунок на оплату"" не може бути сформована, тому що не визначено отримання даних для заснування виду  %1'"),
				ВидДокумента);
	КонецЕсли;
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, 
							"ЦенаВключаетНДС, НалогообложениеНДС, Дата, Номер, СуммаДокумента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Валюта КАК Валюта,
	|	СчетНаОплатуКлиенту.Валюта.Код КАК ВалютаКод,
	|	СчетНаОплатуКлиенту.Дата,
	|	СчетНаОплатуКлиенту.СуммаДокумента,
	|	СчетНаОплатуКлиенту.БанковскийСчет,
	|	СчетНаОплатуКлиенту.НазначениеПлатежа,
	|	СчетНаОплатуКлиенту.ЧастичнаяОплата,
	|	СчетНаОплатуКлиенту.Организация,
	|	СчетНаОплатуКлиенту.Контрагент,
	|	СчетНаОплатуКлиенту.ИдентификаторПлатежа,
	|	СчетНаОплатуКлиенту.ДокументОснование
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СчетЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК СчетЭтапыГрафикаОплаты
	|ГДЕ
	|	СчетЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Запрос.УстановитьПараметр("ДокОснование", СсылкаНаОбъект.ДокументОснование);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияККоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли  ВидДокумента = "АктВыполненныхРабот"  Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
			|	Товары.Количество КАК Количество,
			|	1 КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание КАК Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионера" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ОтчетКомиссионера.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионераОСписании" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомитенту" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ОтчетКомитенту.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			ТекстЗапросаТовары = 
			"ВЫБРАТЬ
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары	КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		КонецЕсли;
		
		ИмяДопКолонки = ИмяДополнительнойКолонки();
		ТекстЗапросаТовары = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстЗапросаТовары, 
				?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура." + ИмяДопКолонки, """"""));
		
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаКодЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Код",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
				
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Наименование",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
			
		ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Товары.Упаковка",
				"Товары.Номенклатура"));
	КонецЕсли;   
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТовары;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки= РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НазначениеПлатежа", 
			РеквизитыШапки.НазначениеПлатежа);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ЧастичнаяОплата", 
			РеквизитыШапки.ЧастичнаяОплата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НалогообложениеНДС", 
			Строка(РеквизитыОснования.НалогообложениеНДС));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.НомерДокументаОснования", 
			РеквизитыОснования.Номер);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.ДатаДокументаОснования", 
			РеквизитыОснования.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДокументОснования.НаименованиеДокументаОснования", 
			Строка(ДокументОснование));
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец", "Юр");
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	// Заполняем документ основание
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ВыборкаСрокПлатежа = РезультатЗапроса[1].Выбрать();
	ВыборкаСрокПлатежа.Следующий();
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"СрокПлатежа", 
			ВыборкаСрокПлатежа.ДатаПлатежа);
	
	ЭтапыГрафикаОплаты = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ЭтапыГрафикаОплаты, "ГрафикОплаты");
	
	ТаблицаТоваров = РезультатЗапроса[3].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.Сумма", 
			ТаблицаТоваров.Итог("Сумма"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНДС", 
			ТаблицаТоваров.Итог("СуммаНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыОснования.ЦенаВключаетНДС);
	
	СуммаБезСкидки = ТаблицаТоваров.Итог("Сумма");
	СуммаСкидки = 0;
	Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
		СуммаСкидки = ТаблицаТоваров.Итог("СуммаСкидки");
	КонецЕсли;
	СуммаБезСкидки = СуммаБезСкидки + СуммаСкидки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаСкидки", 
			СуммаСкидки);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаБезСкидки", 
			СуммаБезСкидки);
	
	// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	Если РеквизитыШапки.ЧастичнаяОплата Тогда
		ИтоговаяСтрока = НСтр("ru='Всего на сумму %СуммаПрописью%';uk='Всього на суму %СуммаПрописью%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаПрописью%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	Иначе
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%';uk='Всього найменувань %Количество%, на суму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТОваров.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	КонецЕсли;
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ЗаказТовара обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Валюта.Код КАК ВалютаКод,
	|	ЗаказПоставщику.Валюта,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.ЦенаВключаетНДС,
	|	ЗаказПоставщику.ДополнительнаяИнформация,
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.Организация,
	|	ЗаказПоставщику.Контрагент,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика,
	|	ЗаказПоставщику.АдресДоставки,
	|	ЗаказПоставщику.ДокументОснование,
	|	ЗаказПоставщику.БанковскийСчет,
	|	ЗаказПоставщику.Договор.Дата КАК ДоговорДата,
	|	ЗаказПоставщику.Договор.Номер КАК ДоговорНомер
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК ИдТовараУКонтрагента,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.СуммаСНДС,
	|	Товары.СуммаРучнойСкидки КАК СуммаСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентСкидки,
	|	Товары.Цена,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки             = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта",	РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.ДополнительнаяИнформация);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДоговорНомер", РеквизитыШапки.ДоговорНомер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДоговорДата", РеквизитыШапки.ДоговорДата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
			
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Заполняем банковский счет
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.ЦенаВключаетНДС);
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Всего наименований %1, на сумму %2';uk='Всього найменувань %1, на суму %2'"),
						ТаблицаТоваров.Количество(), 
						ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ЭлектронныеДокументы.
//
 Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Валюта.Код КАК ВалютаКод,
	|	ЗаказКлиента.Валюта КАК Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.Организация,
	|	ЗаказКлиента.Контрагент,
	|	ЗаказКлиента.СуммаДокумента,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымКлиента,
	|	ЗаказКлиента.БанковскийСчет,	
	|	ЗаказКлиента.ДополнительнаяИнформация,		
	|	ЗаказКлиента.АдресДоставки,
	|	ЗаказКлиента.ИдентификаторПлатежа,
	|	ЗаказКлиента.ДокументОснование,
	|	ЗаказКлиента.Договор.Номер КАК ДоговорНомер,
	|	ЗаказКлиента.Договор.Дата КАК ДоговорДата
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Упаковка КАК ЕдиницаИзмерения,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстЗапроса, 
						?(ЗначениеЗаполнено(ИмяДопКолонки), "Товары.Номенклатура." + ИмяДопКолонки, """"""));
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.НомерСчета", 
			БанковскийСчет.НомерСчета);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.НаимБанк", 
			БанковскийСчет.Банк.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Продавец.БанковскийСчет.БИК", 
			БанковскийСчет.Банк.Код);
			
		ДобавитьВДеревоДанныеСчета(ДеревоДокумента, БанковскийСчет);
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Комментарий", 
			РеквизитыШапки.ДополнительнаяИнформация);
	
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаИтог", 
			ТаблицаТоваров.Итог("Сумма"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНалогаИтог", 
			ТаблицаТоваров.Итог("СуммаНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.ЦенаВключаетНДС);
			
	// Номер и дата договора.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДоговорНомер",	РеквизитыШапки.ДоговорНомер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДоговорДата",	РеквизитыШапки.ДоговорДата);
	
	// Документ основание.
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДокументыОснования", РеквизитыШапки.ДокументОснование);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ЭлектронныеДокументы.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата,
	|	ОтчетКомитенту.Валюта,
	|	ОтчетКомитенту.Валюта.Код КАК ВалютаКод,	
	|	ОтчетКомитенту.СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	ОтчетКомитенту.НалогообложениеНДС,
	|	ОтчетКомитенту.НачалоПериода,
	|	ОтчетКомитенту.КонецПериода,
	|	ОтчетКомитенту.ФормаОплаты,
	|	ОтчетКомитенту.СпособРасчетаВознаграждения,
	|	ОтчетКомитенту.ПроцентВознаграждения,
	|	ОтчетКомитенту.ДатаПлатежа,
	|	ОтчетКомитенту.ИдентификаторПлатежа,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения,
	|	ОтчетКомитенту.СуммаНДСВознаграждения,
	|	ОтчетКомитенту.Контрагент,
	|	ОтчетКомитенту.Организация,
	|	ОтчетКомитенту.Организация КАК Организация1,
	|	ОтчетКомитенту.Контрагент КАК Контрагент1
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК ИдТовараУКонтрагента,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаПродажи КАК СуммаПродажи,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Упаковка КАК ЕдиницаИзмерения,
	|	Товары.ДатаСчетаФактуры КАК ДатаПродажи,
	|	Товары.Покупатель КАК Контрагент,
	|	Товары.ЦенаПродажи КАК ЦенаПродажи,
	|	Товары.Цена
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетКомитенту.ЭтапыГрафикаОплаты КАК ОтчетКомитентуЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Услуга.Код КАК ИД,
	|	ОтчетКомитенту.Услуга.Артикул КАК Артикул,
	|	ОтчетКомитенту.Услуга.Наименование КАК Наименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.НачалоПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.КонецПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ФормаОплаты", 
			Строка(РеквизитыШапки.ФормаОплаты));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"СпособРасчета", 
			Строка(РеквизитыШапки.СпособРасчетаВознаграждения));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаОплаты", 
			РеквизитыШапки.ДатаПлатежа);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр");
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр");
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");

	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		Покупатель = ТаблицаТоваров[Число(Товар.Значение) - 1].Контрагент;
		
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Покупатель);
		ЗаполнитьДанныеУчастника(Товар, СведенияОПокупателе, "Товары.НомерСтроки.Покупатель", "Юр", "Товары.НомерСтроки");
	КонецЦикла;
	
	ТаблицаЭтаповГрафикаОплаты = РезультатЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
	// Информация по услуге вознаграждения
	
	Услуга = РезультатЗапроса[3].Выбрать();
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.Артикул", 
			Услуга.Артикул);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.Наименование", 
			Услуга.Наименование);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаКод", 
			Услуга.БазоваяЕдиницаКод);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаНаименование", 
			Услуга.БазоваяЕдиницаНаименование);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаНаименованиеПолное", 
			Услуга.БазоваяЕдиницаНаименованиеПолное);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Услуга.БазоваяЕдиницаМеждународноеСокращение", 
			Услуга.БазоваяЕдиницаМеждународноеСокращение);
	
	// Итоги документа
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаДокумента", 
			ТаблицаТоваров.Итог("СуммаПродажи"));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.ЦенаВключаетНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СтавкаНДСВознаграждения", 
			?(РеквизитыШапки.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.ПустаяСсылка(), 
													Перечисления.СтавкиНДС.БезНДС, РеквизитыШапки.СтавкаНДСВознаграждения));
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаНДСВознаграждения", 
			РеквизитыШапки.СуммаНДСВознаграждения);

	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СуммаВознаграждения", 
			ТаблицаТоваров.Итог("СуммаВознаграждения"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.Процент", 
			РеквизитыШапки.ПроцентВознаграждения);
	 
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = НСтр("ru='Всего возвращено наименований';uk='Всього повернуто найменувань'");
	Иначе
		ТекстИтоговаяСтрока = НСтр("ru='Всего продано наименований';uk='Всього продано найменувань'");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ НСтр("ru=', на сумму';uk=', на суму'")
		+ " "
		+ ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = НСтр("ru='Сумма комиссионного вознаграждения составила';uk='Сума комісійної винагороди склала'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, НСтр("ru='минус';uk='мінус'") + " ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.Валюта);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
			
	ЗаполнитьУИП(ДеревоДокумента, РеквизитыШапки.ИдентификаторПлатежа);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОСписании.Валюта,
	|	ОтчетКомитентуОСписании.Дата,
	|	ОтчетКомитентуОСписании.СуммаДокумента,
	|	ОтчетКомитентуОСписании.НачалоПериода,
	|	ОтчетКомитентуОСписании.КонецПериода,
	|	ОтчетКомитентуОСписании.Организация,
	|	ОтчетКомитентуОСписании.Контрагент
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|ГДЕ
	|	ОтчетКомитентуОСписании.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК Ид,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.СуммаСНДС,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК ЕдиниицаЗмерения,
	|	Товары.Цена
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.Валюта);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.НачалоПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.КонецПериода);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр");
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр");

	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТоваров Цикл 
		СтрокаТовары.БазоваяЕдиницаКод = СокрЛП(СтрокаТовары.БазоваяЕдиницаКод);			
	КонецЦикла;	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ИтоговаяСтрока = НСтр("ru='Всего списано наименований';uk='Усього списано найменувань'")
		+ " "+
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru=', на сумму';uk=', на суму'") + " ", "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта), "");
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока);
	 
КонецПроцедуры

// Устаревшие: Работа со структурой данных CML

// Устарела. Следует использовать ЗаполнитьДанныеПоКаталогуТоваровCML.
// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// ТоварыКаталога - Массив, список товаров для заполнения каталога.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыКаталога.Номенклатура,
	|	ТоварыКаталога.Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыКаталога КАК ТоварыКаталога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	1 Как Коэффициент,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка
	|ИЗ
	|	Товары КАК Товары";
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварыКаталога", ТоварыКаталога);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 	ТекущаяДата());
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, ДатаФормирования, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Устарела. Следует использовать ЗаполнитьДанныеПоПрайсЛисту.
// Подготавливает данные для электронного документа типа ПрайсЛист.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Активность 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Номер,
	|	КоммерческоеПредложениеКлиенту.Дата,
	|	КоммерческоеПредложениеКлиенту.Валюта
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Валюта", 				РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 	ТекущаяДата());
	СтруктураПараметров.Вставить("Дата", 				СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Цены по комм.предложению №%1 от %2';uk='Ціни по комм.пропозиції №%1 від %2'"), РеквизитыШапки.Номер, РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("Описание", 			Описание);
	СтруктураПараметров.Вставить("Курс", 				РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, Валюта, ДатаФормирования, Дата, ВидЭД,
		|НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
КонецПроцедуры

// Устарела. Следует использовать ЗаполнитьДанныеПоСчету.
// Подготавливает данные для электронного документа типа Счет.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ВидДокумента = "";
	РезультатЗапроса = Неопределено;
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ВидДокумента = "ЗаказКлиента";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидДокумента = "РеализацияТоваровУслуг";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ВидДокумента = "АктВыполненныхРабот";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			ВидДокумента = "ОтчетКомиссионера";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДокумента = "ОтчетКомиссионераОСписании";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			ВидДокумента = "ОтчетКомитенту";
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента";
		КонецЕсли;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(СсылкаНаОбъект, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = "";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Запрос.УстановитьПараметр("ДокОснование", СсылкаНаОбъект.ДокументОснование);
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли  ВидДокумента = "АктВыполненныхРабот"  Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
			|	Товары.Количество КАК Количество,
			|	1 КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	НЕОПРЕДЕЛЕНО КАК Упаковка
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание КАК Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионера" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионера.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
 	 	ИначеЕсли ВидДокумента = "ОтчетКомиссионераОСписании" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомитенту" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомитенту.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
			|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары	КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"Товары.Упаковка",
				"Товары.Номенклатура"));
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Наименование",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКодЕдиницыИзмерения",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
				"Код",
				"Товары.Упаковка",
				"Товары.Номенклатура"));
		
		ИмяДопКолонки = ИмяДополнительнойКолонки();
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
		
	КонецЕсли;   
	
	ТекстЗапроса = ТекстЗапроса 
		+ "ВЫБРАТЬ
		  |	МАКСИМУМ(СчетЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК СчетЭтапыГрафикаОплаты
		  |ГДЕ
		  |	СчетЭтапыГрафикаОплаты.Ссылка = &Ссылка
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
		  |	ЭтапыГрафикаОплаты.ПроцентПлатежа,
		  |	ЭтапыГрафикаОплаты.СуммаПлатежа
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
		  |ГДЕ
		  |	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
		  |
		  |УПОРЯДОЧИТЬ ПО
		  |	ДатаПлатежа
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	СчетНаОплатуКлиенту.Валюта,
		  |	СчетНаОплатуКлиенту.Дата,
		  |	СчетНаОплатуКлиенту.СуммаДокумента,
		  |	СчетНаОплатуКлиенту.ДокументОснование.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		  |	СчетНаОплатуКлиенту.ДокументОснование.НалогообложениеНДС КАК НалогообложениеНДС,
		  |	СчетНаОплатуКлиенту.БанковскийСчет.НомерСчета КАК НомерСчета,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.НаименованиеБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.Наименование
		  |	КОНЕЦ КАК Банк,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.БИКБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.Код
		  |	КОНЕЦ КАК БИК,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.КоррСчетБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.КоррСчет
		  |	КОНЕЦ КАК КоррСчет,
		  |	СчетНаОплатуКлиенту.БанковскийСчет.БанкДляРасчетов КАК БанкДляРасчетов,
		  |	СчетНаОплатуКлиенту.НазначениеПлатежа,
		  |	СчетНаОплатуКлиенту.ЧастичнаяОплата,
		  |	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
		  |	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК Бухгалтер,
		  |	СчетНаОплатуКлиенту.ДокументОснование.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
		  |	СчетНаОплатуКлиенту.ДокументОснование.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
		  |	ПРЕДСТАВЛЕНИЕ(СчетНаОплатуКлиенту.ДокументОснование) КАК ДокументОснование,
		  |	СчетНаОплатуКлиенту.СуммаДокумента / СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента КАК ПроцентОплаты
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
		  |		ЛЕВОЕ СОЕДИНЕНИЕ 
		  |			ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
		  |		ПО 
		  |			СчетНаОплатуКлиенту.Ссылка = ТаблицаОтветственныеЛица.Ссылка
		  |
		  |ГДЕ
		  |	СчетНаОплатуКлиенту.Ссылка = &Ссылка";
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КолЭлем = РезультатЗапроса.Количество();
	ТаблицаТоваров = Новый ТаблицаЗначений();
	Если КолЭлем = 4 Тогда
		ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	КонецЕсли;
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	ТаблицаЭтаповГрафикаОплаты = РезультатЗапроса[КолЭлем-2].Выгрузить();
	РеквизитыШапки= РезультатЗапроса[КолЭлем-1].Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 				ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",	ТаблицаЭтаповГрафикаОплаты); 
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("НалогообложениеНДС",			Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("НазначениеПлатежа",			РеквизитыШапки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("НазначениеПлатежа",			РеквизитыШапки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("Руководитель",				РеквизитыШапки.Руководитель);
    СтруктураПараметров.Вставить("Бухгалтер",					РеквизитыШапки.Бухгалтер);
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента",		РеквизитыШапки.НомерПоДаннымКлиента);
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента",			РеквизитыШапки.ДатаПоДаннымКлиента);
	СтруктураПараметров.Вставить("ДокументОснование",			РеквизитыШапки.ДокументОснование);
	СтруктураПараметров.Вставить("ЧастичнаяОплата",				РеквизитыШапки.ЧастичнаяОплата);
	Если ТаблицаТоваров.Количество()>0 Тогда
		СтруктураПараметров.Вставить("СуммаНДС", 				ОКР(ТаблицаТоваров.Итог("СуммаНДС")*РеквизитыШапки.ПроцентОплаты,2));
	Иначе	
		СтруктураПараметров.Вставить("СуммаНДС", 0);
	КонецЕсли;
	
	Если РеквизитыШапки.ЧастичнаяОплата Тогда
		ИтоговаяСтрока = НСтр("ru='Всего на сумму %СуммаПрописью%';uk='Всього на суму %СуммаПрописью%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаПрописью%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	Иначе
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%';uk='Всього найменувань %Количество%, на суму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТОваров.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	КонецЕсли;
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	Если РезультатЗапроса <> Неопределено Тогда
		СтруктураПараметров.Вставить("СрокПлатежа", РезультатЗапроса[1].Выгрузить()[0].ДатаПлатежа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		РасчетныйСчет = Новый Структура();
		РасчетныйСчет.Вставить("НомерСчета", РеквизитыШапки.НомерСчета);
		РасчетныйСчет.Вставить("Банк",       РеквизитыШапки.Банк);
		РасчетныйСчет.Вставить("КоррСчет",   РеквизитыШапки.КоррСчет);
		РасчетныйСчет.Вставить("БИК",        РеквизитыШапки.БИК);
		СтруктураПараметров.Вставить("РасчетныйСчет", РасчетныйСчет);
	Иначе
		СтруктураПараметров.Вставить("РасчетныйСчет", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		РеквизитыБанкаКорреспондента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование, КоррСчет, Код");
		БанкКорреспондент = Новый Структура();
		БанкКорреспондент.Вставить("Банк",     РеквизитыБанкаКорреспондента.Наименование);
		БанкКорреспондент.Вставить("КоррСчет", РеквизитыБанкаКорреспондента.КоррСчет);
		БанкКорреспондент.Вставить("БИК",      РеквизитыБанкаКорреспондента.Код);
		СтруктураПараметров.Вставить("БанкКорреспондент", БанкКорреспондент);
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, РасчетныйСчет");
	
КонецПроцедуры

// Устарела. Следует использовать ЗаполнитьДанныеПоЗаказуТоваров.
// 
// Подготавливает данные для электронного документа типа ЗаказТоваров.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК Ид,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.СуммаСНДС,
	|	Товары.СуммаРучнойСкидки КАК СуммаСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентСкидки,
	|	Товары.Цена,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Валюта,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.ЦенаВключаетНДС,
	|	ЗаказПоставщику.ДополнительнаяИнформация,
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика,
	|	ЗаказПоставщику.АдресДоставки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров             = МассивРезультатовЗапроса[0].Выгрузить();
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[1].Выгрузить();
	РеквизитыШапки             = МассивРезультатовЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 			СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 			"4.02");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", РеквизитыШапки.НомерПоДаннымПоставщика);
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	РеквизитыШапки.ДатаПоДаннымПоставщика);
	СтруктураПараметров.Вставить("ТаблицаТоваров", 			ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",ТаблицаЭтаповГрафикаОплаты);
	СтруктураПараметров.Вставить("Организация", 			СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 				СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 						СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 		ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 					СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 					СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 					РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 					РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 					РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 	  	РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 				ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 					СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 			СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Роль",					"Покупатель");
	СтруктураПараметров.Вставить("Комментарий",				РеквизитыШапки.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента",	РеквизитыШапки.Номер);
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента",	  	РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("АдресДоставки",			РеквизитыШапки.АдресДоставки);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерПоДаннымПоставщика) Тогда
		СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", РеквизитыШапки.НомерПоДаннымПоставщика);
		СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	РеквизитыШапки.ДатаПоДаннымПоставщика);
	КонецЕсли;
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%';uk='Всього найменувань %Количество%, на суму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "ИД, Наименование, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Устарела. Следует следует использовать ЗаполнитьДанныеПоОтветуНаЗаказ.
// 
// Подготавливает данные для электронного документа типа ОтветНаЗаказ.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.СуммаДокумента,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымКлиента,
	|	ЗаказКлиента.БанковскийСчет,
	|	ЗаказКлиента.ДополнительнаяИнформация,
	|	ЗаказКлиента.АдресДоставки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
    Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = МассивРезультатовЗапроса[0].Выгрузить();
	ТаблицаЭтаповГрафикаОплаты= МассивРезультатовЗапроса[1].Выгрузить();
	РеквизитыШапки= МассивРезультатовЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 				ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",	ТаблицаЭтаповГрафикаОплаты);
	СтруктураПараметров.Вставить("Роль", 						"Продавец");
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 					ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Комментарий", 				РеквизитыШапки.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика",	    РеквизитыШапки.Номер);
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 		РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("АдресДоставки",		 		РеквизитыШапки.АдресДоставки);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерПоДаннымКлиента) Тогда
		СтруктураПараметров.Вставить("НомерПоДаннымКлиента", РеквизитыШапки.НомерПоДаннымКлиента);
		СтруктураПараметров.Вставить("ДатаПоДаннымКлиента", РеквизитыШапки.ДатаПоДаннымКлиента);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
		
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%';uk='Всього найменувань %Количество%, на суму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
КонецПроцедуры

// Устарела. Следует использовать ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара. 
// Подготавливает данные для электронного документа типа ОтчетКомитенту.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата,
	|	ОтчетКомитенту.Валюта,
	|	ОтчетКомитенту.СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	ОтчетКомитенту.НалогообложениеНДС,
	|	ОтчетКомитенту.НачалоПериода,
	|	ОтчетКомитенту.КонецПериода,
	|	ОтчетКомитенту.ФормаОплаты,
	|	ОтчетКомитенту.СпособРасчетаВознаграждения,
	|	ОтчетКомитенту.ПроцентВознаграждения,
	|	ОтчетКомитенту.ДатаПлатежа,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения,
	|	ОтчетКомитенту.СуммаНДСВознаграждения
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК ИД,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаПродажи КАК СуммаПродажи,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.ДатаСчетаФактуры КАК ДатаПродажи,
	|	Товары.Покупатель КАК Контрагент
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетКомитенту.ЭтапыГрафикаОплаты КАК ОтчетКомитентуЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Услуга КАК Номенклатура,
	|	ОтчетКомитенту.Услуга.Код КАК ИД,
	|	ОтчетКомитенту.Услуга.Артикул КАК Артикул,
	|	ОтчетКомитенту.Услуга.Наименование КАК Наименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ВыборкаПоТоварам = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		
		НоваяСтрока.БазоваяЕдиницаКод = СокрЛП(ВыборкаПоТоварам.БазоваяЕдиницаКод);
		НоваяСтрока.УпаковкаКод = СокрЛП(ВыборкаПоТоварам.УпаковкаКод);
		
		// Заполним сведения, необходимые для выставления счета-фактуры комитентом
		СтруктураДополнительныхДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
			СтруктураПараметров.ДополнительныеРеквизитыДляТаблицыТоваров);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.ДатаПродажи);
		СтруктураДополнительныхДанных.Вставить("ДатаПродажи", МассивЗначений);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС));
		СтруктураДополнительныхДанных.Вставить("СтавкаНДС", МассивЗначений);
		
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ВыборкаПоТоварам.Контрагент);
		
		Если ЗначениеЗаполнено(СведенияОПокупателе.ПолноеНаименование) 
			И ЗначениеЗаполнено(СведенияОПокупателе.ИНН) Тогда
			 
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СведенияОПокупателе.ПолноеНаименование);
			СтруктураДополнительныхДанных.Вставить("ПокупательНаименование", МассивЗначений);
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СведенияОПокупателе.ИНН);
			СтруктураДополнительныхДанных.Вставить("ПокупательИНН", МассивЗначений);
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(?(ЗначениеЗаполнено(СведенияОПокупателе.КПП), СведенияОПокупателе.КПП, ""));
			СтруктураДополнительныхДанных.Вставить("ПокупательКПП", МассивЗначений);
			
			// Заполним адреса: юридический и фактический
			ТекстОшибки = "";
			ЮрАдресУчастника = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьАдресСтруктурой(ВыборкаПоТоварам, 
				"Контрагент", 
				"Юр", 
				ТекстОшибки);
				
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЮрАдресУчастника.АдресРФ Тогда
					ЗаполнитьАдресВСпискеТиповАдресов(СтруктураДополнительныхДанных.ПокупательЮрАдрес, ЮрАдресУчастника, "Структурированный");
				КонецЕсли;
			КонецЕсли;
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СтруктураДополнительныхДанных.ПокупательЮрАдрес);
			СтруктураДополнительныхДанных.Вставить("ПокупательЮрАдрес", МассивЗначений);
			
			ТекстОшибки = "";
			ФактАдресУчастника = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьАдресСтруктурой(ВыборкаПоТоварам, 
				"Контрагент", 
				"Факт", 
				ТекстОшибки);
				
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ФактАдресУчастника.АдресРФ Тогда 
					ЗаполнитьАдресВСпискеТиповАдресов(СтруктураДополнительныхДанных.ПокупательФактАдрес, ФактАдресУчастника, "Структурированный");
				КонецЕсли;
			КонецЕсли;
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СтруктураДополнительныхДанных.ПокупательФактАдрес);
			СтруктураДополнительныхДанных.Вставить("ПокупательФактАдрес", МассивЗначений);
			
		КонецЕсли;
		
		НоваяСтрока.ДополнительныеРеквизиты = СтруктураДополнительныхДанных;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты", РезультатЗапроса[2].Выгрузить());
	
	Услуга = РезультатЗапроса[3].Выбрать();
	Если Услуга.Следующий() И ЗначениеЗаполнено(Услуга.Номенклатура) Тогда
		СтруктураПараметров.Вставить("Услуга",Услуга);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 					СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("СуммаВознаграждения", 		РеквизитыШапки.СуммаВознаграждения);
	СтруктураПараметров.Вставить("НалогообложениеНДС",			Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("НачалоПериода",				РеквизитыШапки.НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",				РеквизитыШапки.КонецПериода);
	СтруктураПараметров.Вставить("ФормаОплаты",					Строка(РеквизитыШапки.ФормаОплаты));
	СтруктураПараметров.Вставить("СпособРасчета",				Строка(РеквизитыШапки.СпособРасчетаВознаграждения));
	СтруктураПараметров.Вставить("Процент",						РеквизитыШапки.ПроцентВознаграждения);
	СтруктураПараметров.Вставить("ДатаОплаты",					РеквизитыШапки.ДатаПлатежа);
	
	СтруктураПараметров.Вставить("СтавкаНДСВознаграждения",		РеквизитыШапки.СтавкаНДСВознаграждения);
	СтруктураПараметров.Вставить("СуммаНДСВознаграждения",		РеквизитыШапки.СуммаНДСВознаграждения);
 	
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = НСтр("ru='Всего возвращено наименований ';uk='Всього повернуто найменувань '");
	Иначе
		ТекстИтоговаяСтрока = НСтр("ru='Всего продано наименований ';uk='Всього продано найменувань '");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ СтруктураПараметров.ТаблицаТоваров.Количество()
		+ НСтр("ru=', на сумму ';uk=', на суму '")
		+ ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = НСтр("ru='Сумма комиссионного вознаграждения составила ';uk='Сума комісійної винагороди склала '")
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, НСтр("ru='минус ';uk='мінус '"), "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.Валюта);
	КонецЕсли;

	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	СтруктураПараметров.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	
КонецПроцедуры

// Устарела. Следует использовать ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара.
// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК Ид,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.СуммаСНДС,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуОСписании.Валюта,
	|	ОтчетКомитентуОСписании.Дата,
	|	ОтчетКомитентуОСписании.СуммаДокумента
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|ГДЕ
	|	ОтчетКомитентуОСписании.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 	  СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	  ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	  СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 		  СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			  РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма",			  РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ВидЭД", 			  СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  СтруктураЭД.НаправлениеЭД);
	ИтоговаяСтрока = НСтр("ru='Всего списано наименований ';uk='Усього списано найменувань '")
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru=', на сумму ';uk=', на суму '"), "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта), "");
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
    ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование");
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - строка параметров для загрузки,
//  ДеревоРазбора     - ДеревоЗначений, структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка объекта.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда		
		НайденныйОбъект = НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда		
		НайденныйОбъект = НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		НайденныйОбъект = НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
	
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		НайденныйОбъект = НайтиСоглашениеОбИспользованииЭД(СтрокаДляЗагрузки, ДеревоРазбора);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		Иначе
			НайденныйОбъект = НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
// СтрокаОбъекта - Структура параметров записываемого объекта,
// ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовЭл = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовЭл = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	ИначеЕсли СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчетаКонтрагентов" Тогда
		НовЭл = СоздатьРасчетныйСчет(СтрокаОбъекта,"БанковскийСчетКонтрагента", ДеревоРазбора);
	КонецЕсли;
	
	Возврат НовЭл;
	
КонецФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - Организация, ссылка на элемент справочника организации
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник."+ТипОбъекта+" КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН И
	|	Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов
//
// Возвращаемое значение:
//  Контрагент.Ссылка - ссылка на справочник контрагентов
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	Партнер   = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, Найти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, Найти(ИНН_КПП, "/") + 1);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		// Заполним реквизиты партнера
		
		Если Контрагент.ЭтоНовый() Тогда
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
			Партнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
			Контрагент.Партнер = СсылкаНовогоПартнера;
		Иначе
			Партнер = Контрагент.Партнер.ПолучитьОбъект();
		КонецЕсли;
		
		Партнер.Наименование = Контрагент.Наименование;
		Партнер.ИНН          = Контрагент.ИНН;
		Партнер.КПП          = Контрагент.КПП;
		
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		Контрагент.Записать();
		Если Партнер <> Неопределено Тогда
			Партнер.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		Результат = Контрагент.Ссылка;
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru=' (подробности см. в Журнале регистрации).';uk=' (подробиці див. у Журналі реєстрації).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Загрузка реквизитов контрагента';uk='Завантаження реквізитів контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру реквизитов товара 
//
// Параметры:
// РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//
// Возвращаемое значение:
// Структура, содержащая ссылки на номенклатуру, характеристику, упаковку
//
Процедура ПолучитьРеквизитыТовара (РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика",НоменклатураПоставщика)Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
		СтруктураВозврата.Характеристика = НоменклатураПоставщика.Характеристика;
		СтруктураВозврата.Упаковка = НоменклатураПоставщика.Упаковка;
	КонецЕсли;
		
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры
//  Контрагент - ссылка на контрагента (Организация или Контрагент)
// 	ВидКонтрагента - строка, определяющая вид контрагента
//
// Возвращаемое значение:
//  строка со значением ИдКонтрагента
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента)	Экспорт
	
	ИдКонтрагента = "";
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ИдКонтрагента;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	КонецЕсли;
	Возврат ИдКонтрагента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	Результат = Неопределено;
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("Структура") 
		И СсылкаНаЭД.Свойство("СпособОбменаЭД") 
		И СсылкаНаЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если (СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			И (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель))
		ИЛИ (СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)) Тогда
		
		АдресТоваровВХранилище = ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(СсылкаНаЭД.ВладелецФайла.Товары);
		Если НЕ ЗначениеЗаполнено(АдресТоваровВХранилище) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОткрытияФормы = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		
		Результат = Новый Структура;
		Результат.Вставить("ИмяФормы", "ОбщаяФорма.ЗаполнениеНоменклатурыПоНоменклатуреПоставщика");
		Результат.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	Если ЗначениеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеЗаполнения);
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		МассивСтрокКоллекции = ДанныеФормы.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения католога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	АдресВоВременномХранилище = Неопределено;
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Найти(ВРег(ЭлПеречисления.Синоним), ВРег(ПредставлениеПеречисления)) > 0
			ИЛИ Найти(ВРег(ЭлПеречисления.Имя), ВРег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	РеквизитыСвидетельства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИП, "СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
	ШаблонДанныхСвидетельства = НСтр("ru='Свидетельство %1 от %2';uk='Свідоцтво %1 від %2'");
	
	Сведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДанныхСвидетельства, 
		РеквизитыСвидетельства.СвидетельствоСерияНомер,
		Формат(РеквизитыСвидетельства.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy"));
	
КонецПроцедуры

// Получает контактную информацию организации по ссылке
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	//В запросе реквизит Представление присваивается полю Значение, т.к в схеме XDTO поле Значение обязательно к заполнению,
	//а для адреса электронной почты реквизит Значение пустой
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Значение,			
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Ссылка
	|	И (ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает название региона по коду
//
// Параметры:
//  КодРегиона - Строка, содержащая двухсимвольный код региона
//
// Возвращаемое значение:
//  Строка - название региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона);
	Если Результат <> Неопределено Тогда
		Возврат Результат
	Иначе
		Возврат ""
	КонецЕсли;

КонецФункции

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	Адрес = ПолучитьАдресИзКонтактнойИнформации(СтруктураПараметров[ВидКонтрагента], ВидАдреса);
	
	Параметр1 = СтруктураПараметров[ВидКонтрагента];
	Параметр2 = ?(ВидАдреса="Юр", НСтр("ru='юридический';uk='юридичний'"), НСтр("ru='фактический';uk='фактичний'"));
	
	Если НЕ ЗначениеЗаполнено(Адрес.Представление) Тогда
		
		Ошибка = НСтр("ru='Для %1 необходимо указать %2 адрес.';uk='Для %1 необхідно зазначити %2 адресу.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2); 
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Адрес.ЗначенияПолей) Тогда
		Ошибка =  НСтр("ru='Для %1 необходимо заполнить %2 адрес по классификатору.';uk='Для %1 необхідно заповнити %2 адресу за класифікатором.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2); 
		Возврат;
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура("Индекс, Регион, КодРегиона, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира");
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Адрес.ЗначенияПолей));
	
	АдресРФ = (Адрес.Страна = "РОССИЯ" ИЛИ Адрес.Страна = "");
	
	СтруктураАдреса.Вставить("АдресРФ",     АдресРФ);
	СтруктураАдреса.Вставить("Индекс",      СтруктураРезультата.Индекс);
	СтруктураАдреса.Вставить("КодРегион",   СтруктураРезультата.КодРегиона);
	СтруктураАдреса.Вставить("Район",       СтруктураРезультата.Район);
	СтруктураАдреса.Вставить("Город",       СтруктураРезультата.Город);
	СтруктураАдреса.Вставить("НаселПункт",  СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица",       СтруктураРезультата.Улица);
	СтруктураАдреса.Вставить("Дом",         СтруктураРезультата.Дом);
	СтруктураАдреса.Вставить("Корпус",      СтруктураРезультата.Корпус);
	СтруктураАдреса.Вставить("Кварт",       СтруктураРезультата.Квартира);
	Если НЕ АдресРФ Тогда
		СтруктураАдреса.Вставить("КодСтр",   СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("АдрТекст", Адрес.Представление);
	КонецЕсли;
	
КонецПроцедуры
 
// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почты.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	Возврат ПолучитьАдресЭПИзКонтактнойИнформации(Контрагент);
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
	|	//ОтборПоБанку И БанковскиеСчетаОрганизаций.Банк = &Банк";
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоБанку", "");
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;

	Запрос.УстановитьПараметр("Владелец", Организация);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК РасчетныйСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.КоррСчет
	|	КОНЕЦ КАК КорреспондентскийСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Код
	|	КОНЕЦ КАК БанкДляРасчетовБИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	ЭСФ = Неопределено;
	ИменаРеквизитов = Новый Массив();
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		// Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ДатаВыставления = ЭД.ДатаДокументаОтправителя;
		ИменаРеквизитов.Добавить("ДатыВыставления");
		ЭСФ.ВыставленВЭлектронномВиде = Истина;
		ИменаРеквизитов.Добавить("ВыставленВЭлектронномВиде");
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		// Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.Дата = ЭД.ДатаДокументаОтправителя;
		ИменаРеквизитов.Добавить("Дата");
		ЭСФ.ПолученВЭлектронномВиде = Истина;
		ИменаРеквизитов.Добавить("ПолученВЭлектронномВиде");
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ВыставленВЭлектронномВиде = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ВыставленВЭлектронномВиде");
		Если Не ВыставленВЭлектронномВиде Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ВыставленВЭлектронномВиде = Истина;
			ИменаРеквизитов.Добавить("ВыставленВЭлектронномВиде");
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ПолученВЭлектронномВиде = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ПолученВЭлектронномВиде");
		Если Не ПолученВЭлектронномВиде Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ПолученВЭлектронномВиде = Истина;
			ИменаРеквизитов.Добавить("ПолученВЭлектронномВиде");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РежимЗаписи = ?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ЭСФ.Записать(РежимЗаписи);
	Исключение
		
		Если ИменаРеквизитов.Количество() > 1 Тогда
			ШаблонОшибки = НСтр("ru='При установке реквизитов %1 документа %2 возникла ошибка. Описание ошибки: ""%3""';uk='При встановленні реквізитів %1 документа %2 виникла помилка. Опис помилки: ""%3""'");
		Иначе
			ШаблонОшибки = НСтр("ru='При установке реквизита %1 документа %2 возникла ошибка. Описание ошибки: ""%3""';uk='При встановленні реквізиту %1 документа %2 виникла помилка. Опис помилки: ""%3""'")
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, 
			СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ИменаРеквизитов),
			ЭСФ.Ссылка,
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Ошибка установки реквизитов счета-фактуры при получении служебного ЭД от оператора';uk='Помилка встановлення реквізитів рахунку-фактури при отриманні службового ЕД від оператора'"),
			УровеньЖурналаРегистрации.Ошибка,
			ЭСФ.Метаданные(),
			ЭСФ.Ссылка,
			ТекстОшибки);
		
	КонецПопытки;

КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта,
//  Организация - ссылка - ссылка на элемент справочника организации,
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - таблица значений с полями: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//  НаименованиеДляСообщенияПользователю.
//    Наименование - передается Оператору ЭДО,
//    НаименованиеДляСообщенияПользователю - выводится в сообщении пользователю ИБ.
//  МассивКонтрагентов - массив ссылок на участников-контрагентов.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Формирует текст НДС по этапу оплаты
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
//  ПроцентПлатежа       - Число - Процент платежа по этапу
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%';uk='ПДВ(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%';uk=', ПДВ(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В т.ч. %1';uk='В т.ч. %1'"), ТекстНДС);
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)';uk='Без податку (ПДВ)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции // СформироватьТекстНДСЭтапаОплаты()

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты",КодВалюты);
 	Возврат ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Если ЗначениеЗаполнено(КодВалюты) Тогда 
		Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты",КодВалюты);
		СтрокаСумма = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	Иначе
		СтрокаСумма = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	КонецЕсли;
	Возврат СтрокаСумма;
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	Возврат ФормированиеПечатныхФорм.ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС);
	
КонецФункции // ТекстНДСПоСтавке()

// Возвращает ответственного за электронный документооборот по данному соглашению
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент.Партнер) Тогда
		Если Контрагент.Партнер.Метаданные().Реквизиты.Найти("ОсновнойМенеджер")<> Неопределено 
			И ЗначениеЗаполнено(Контрагент.Партнер.ОсновнойМенеджер) Тогда 
			ОтветственныйПоЭД = Контрагент.Партнер.ОсновнойМенеджер;
		КонецЕсли;
	КонецЕсли;
	Возврат ОтветственныйПоЭД;
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЭтоФизЛицо = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
		ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	Если ИспользоватьСкидки Тогда
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			Пока Товары.Следующий() Цикл
				Если ЗначениеЗаполнено(Товары.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НужноВыводитьСкидки()

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Возврат ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	
КонецФункции // ИмяДополнительнойКолонки()

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Результат = Неопределено;
	
	Если СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
		Результат = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтавкуНДСЧислом()

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Возврат ЗначениеНДС;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
	Попытка
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ФайлОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru=' (подробности см. в Журнале регистрации).';uk=' (подробиці див. у Журналі реєстрації).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='утверждение ЭД';uk='затвердження ЕД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
	
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
	
	
КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  Источник - Документ.Объект - проверяемый объект
//  Отказ - Булево - в случае запрета изменения, устанавливается Истина
//
Функция ПроверитьВозможностьРедактированияОбъекта(Источник, Отказ) Экспорт

	СсылкаНаОбъект = Источник.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СостояниеВерсииЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()
		И НЕ (Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении
		ИЛИ Выборка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.Отклонен) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецФункции

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Результат = Истина;
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист И НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработчик события "ОбработкаЗаполнения" электронных документов.
// 
// Параметры:
//  Источник		 		- Объект 	   - Электронный документ;
//	ДанныеЗаполнения 		- Произвольный - Значение, которое используется как основание для заполнения;
//  СтандартнаяОбработка    - Булево       - Признак выполнения стандартной (системной) обработки события.
//
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчетеОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчете(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю

// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - таблица - соответствие параметров для типов метаданных их пользовательским представлениям
//  содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	// БанковскиеСчетаКонтрагентов
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "БанковскиеСчетаКонтрагентов";
	НовСтрока.Порядок 		= 1;
	// Номенклатура поставщиков
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "НоменклатураПоставщиков";
	НовСтрока.Порядок 		= 2;
	
	Возврат Таблица;
	
КонецФункции

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	// Переопределим структуру возврата
	СтруктураВозврата = Новый Структура();
	
	ОбъектXML = Новый ЧтениеXML;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
	ВремФайл = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ВремФайл);
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		ОбъектXML.Закрыть();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru=' (подробности см. в Журнале регистрации).';uk=' (подробиці див. у Журналі реєстрації).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Разбор файла с реквизитами контрагента';uk='Розбір файлу з реквізитами контрагента'"), ТекстОшибки, ТекстСообщения);
		
		РезультатРазбора = Ложь;
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		СвойствоЭД = ЭД.Свойства().Получить("Контакты");
		Если НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено Тогда
			Для Каждого ТекКонтакт Из ЭД.Контакты.Контакт Цикл
				Если ТекКонтакт.Тип = "Телефон рабочий" Тогда
					СтруктураВозврата.Вставить("ТелефонПартнера", ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("ТелефонКЛ",       ТекКонтакт.Значение);
				ИначеЕсли ТекКонтакт.Тип = "Почта" Тогда
					СтруктураВозврата.Вставить("АдресЭППартнера", ТекКонтакт.Значение);
					СтруктураВозврата.Вставить("АдресЭПКЛ",       ТекКонтакт.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");
		Если СвойствоЭД <> Неопределено Тогда
			
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				Для Каждого ТекСв Из ЗнДанных.РасчетныйСчет Цикл
					
					СтруктураВозврата.Вставить("НомерСчета",         ТекСв.НомерСчета);
					СтруктураВозврата.Вставить("БИКБанка",           ТекСв.Банк.БИК);
					СтруктураВозврата.Вставить("КоррСчетБанка",      ТекСв.Банк.СчетКорреспондентский);
					СтруктураВозврата.Вставить("ПредставлениеБанка", ТекСв.Банк.Наименование);
					СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента", Истина);
					
					Если НЕ ТекСв.БанкКорреспондент = Неопределено Тогда
						СтруктураВозврата.Вставить("БИКБанкаДляРасчетов",           ТекСв.БанкКорреспондент.БИК);
						СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов",      ТекСв.БанкКорреспондент.СчетКорреспондентский);
						СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов", ТекСв.БанкКорреспондент.Наименование);
						СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов",   Истина);
					КонецЕсли;
					Прервать;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты", Истина);
		ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
		
		СвойствоЭД = ЭД.Свойства().Получить("ЮрЛицо");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				СтруктураВозврата.Вставить("ВидКомпании", 0);
				СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
				Если СвойствоИНН <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИНН", ЗнДанных.Получить(СвойствоИНН));
				КонецЕсли;
				СвойствоКПП = ЗнДанных.Свойства().Получить("КПП");
				Если СвойствоКПП <> Неопределено Тогда
					СтруктураВозврата.Вставить("КПП", ЗнДанных.Получить(СвойствоКПП));
				КонецЕсли;
				СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
				Если СвойствоОКПО <> Неопределено Тогда
					СтруктураВозврата.Вставить("КодПоОКПО", ЗнДанных.Получить(СвойствоОКПО));
				КонецЕсли;
				СвойствоОФНаим = ЗнДанных.Свойства().Получить("ОфициальноеНаименование");
				Если СвойствоОФНаим <> Неопределено Тогда
					СтруктураВозврата.Вставить("ПолноеНаименование", ЗнДанных.Получить(СвойствоОфНаим));
					СтруктураВозврата.Вставить("ПолноеЮридическоеНаименование", ЗнДанных.Получить(СвойствоОфНаим));
				КонецЕсли;
				
				СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");
				Если СвойствоЮрАдрес <> Неопределено Тогда
					ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
					Если ЗнЮрАдрес <> Неопределено Тогда
						СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
						ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
						Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
							Если ТекСв.Тип = "Почтовый индекс" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление =  "Индекс";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "НаселенныйПункт";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 ТОгда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = ТекСв.Тип;
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							КонецЕсли;
						КонецЦикла;
						
						СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
					КонецЕсли
				КонецЕсли;
				
				СвойствоРуководитель = ЗнДанных.Свойства().Получить("Руководитель");
				Если СвойствоРуководитель <> Неопределено Тогда
					ЗнРуководитель = ЗнДанных.Получить(СвойствоРуководитель);
					Если ЗнРуководитель <> Неопределено Тогда
						СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");
						Если СвойствоФизЛицо <> Неопределено Тогда
							ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);
							Если ФизЛицо <> Неопределено Тогда
								СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица", Истина);
								ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизЛицо.ПолноеНаименование);
								СтруктураВозврата.Вставить("ФамилияКЛ",  ФИО.Фамилия);
								СтруктураВозврата.Вставить("ИмяКЛ",      ФИО.Имя);
								СтруктураВозврата.Вставить("ОтчествоКЛ", ФИО.Отчество);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("ФизЛицо");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				
				СтруктураВозврата.Вставить("ВидКомпании", 2);
				СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");
				Если СвойствоИНН <> Неопределено Тогда
					СтруктураВозврата.Вставить("ИНН", ЗнДанных.Получить(СвойствоИНН));
				КонецЕсли;
				
				СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");
				Если СвойствоОКПО <> Неопределено Тогда
					КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);
					СтруктураВозврата.Вставить("КодПоОКПО", ЗнДанных.Получить(СвойствоОКПО));
				КонецЕсли;
				
				СвойствоОФНаим = ЗнДанных.Свойства().Получить("ПолноеНаименование");
				Если СвойствоОФНаим <> Неопределено Тогда
					СтруктураВозврата.Вставить("ПолноеНаименование", ЗнДанных.Получить(СвойствоОфНаим));
					СтруктураВозврата.Вставить("ПолноеЮридическоеНаименование", ЗнДанных.Получить(СвойствоОфНаим));
				КонецЕсли;
				
				СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("АдресРегистрации");
				Если СвойствоЮрАдрес <> Неопределено Тогда
					
					ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);
					Если ЗнЮрАдрес <> Неопределено Тогда
						
						СтруктураВозврата.Вставить("ЮридическийАдрес", ЗнЮрАдрес.Представление);
						ЮридическийАдресЗначенияПолей = Новый СписокЗначений;
						Для Каждого ТекСв Из ЗнЮрАдрес.АдресноеПоле Цикл
							Если ТекСв.Тип = "Почтовый индекс" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "Индекс";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = "НаселенныйПункт";
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип)>0 ТОгда
								ЮрАдресЗначения = ЮридическийАдресЗначенияПолей.Добавить();
								ЮрАдресЗначения.Представление = ТекСв.Тип;
								ЮрАдресЗначения.Значение = ТекСв.Значение;
							КонецЕсли;
						КонецЦикла;
						
						СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей", ЮридическийАдресЗначенияПолей);
					КонецЕсли
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("Наименование");
		Если СвойствоЭД <> Неопределено Тогда
			СтруктураВозврата.Вставить("Название", ЭД.Получить(СвойствоЭД));
		КонецЕсли;
		
		СвойствоЭД = ЭД.Свойства().Получить("Адрес");
		Если СвойствоЭД <> Неопределено Тогда
			ЗнДанных = ЭД.Получить(СвойствоЭД);
			Если ЗнДанных <> Неопределено Тогда
				
				СтруктураВозврата.Вставить("ФактическийАдрес", ЗнДанных.Представление);
				ФактическийАдресЗначенияПолей = Новый СписокЗначений;
				Для Каждого ТекСв Из ЗнДанных.АдресноеПоле Цикл
					Если ТекСв.Тип = "Почтовый индекс" Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление = "Индекс";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Представление = "НаселенныйПункт";
						ФактАдресЗначения.Значение = ТекСв.Значение;
					ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) > 0 ТОгда
						ФактАдресЗначения = ФактическийАдресЗначенияПолей.Добавить();
						ФактАдресЗначения.Значение = ТекСв.Значение;
						ФактАдресЗначения.Представление = ТекСв.Тип;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей", ФактическийАдресЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru=' (подробности см. в Журнале регистрации).';uk=' (подробиці див. у Журналі реєстрації).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Разбор файла с реквизитами контрагента';uk='Розбір файлу з реквізитами контрагента'"), ТекстОшибки, ТекстСообщения);
		
		РезультатРазбора = Ложь;
		Возврат;
		
	КонецПопытки;
	
	РезультатРазбора = Истина;
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокВозврата.Добавить(
			Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(), 
			Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот 
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокВозврата.Добавить(
			Документы.ПоступлениеУслугПрочихАктивов.ПустаяСсылка(), 
			Метаданные.Документы.ПоступлениеУслугПрочихАктивов.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ОтчетКомиссионера.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионера.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ОтчетКомиссионераОСписании.ПустаяСсылка(), 
			Метаданные.Документы.ОтчетКомиссионераОСписании.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		СписокВозврата.Добавить(
			Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка(), 
			 Метаданные.Документы.РегистрацияЦенНоменклатурыПоставщика.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка(), 
			Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказКлиента.ПустаяСсылка(),
			Метаданные.Документы.ЗаказКлиента.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		СписокВозврата.Добавить(
			Документы.ЗаказПоставщику.ПустаяСсылка(),
			Метаданные.Документы.ЗаказПоставщику.Представление());
	КонецЕсли;

	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, ЮрФизЛицо, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, РеквизитыОрганизации);
	СтруктураВозврата.ОКПО = РеквизитыОрганизации.КодПоОКПО;
	
	ЮрАдресОрганизации = ПолучитьАдресИзКонтактнойИнформации(Организация, "Юр");
	СтруктураВозврата.ЮридическийАдрес     = ЮрАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейЮрАдрес = ЮрАдресОрганизации.ЗначенияПолей;
	
	ФактАдресОрганизации = ПолучитьАдресИзКонтактнойИнформации(Организация, "Факт");
	СтруктураВозврата.ФактическийАдрес       = ФактАдресОрганизации.Представление;
	СтруктураВозврата.ЗначенияПолейФактАдрес = ФактАдресОрганизации.ЗначенияПолей;
	
	СтруктураВозврата.Телефон = ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	Если СтруктураВозврата.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация);
		СтруктураВозврата.Руководитель          = СтруктураОтветственных.Руководитель;
		СтруктураВозврата.ДолжностьРуководителя = СтруктураОтветственных.РуководительДолжность;
	Иначе
		СтруктураВозврата.СвидетельствоНомер = РеквизитыОрганизации.СвидетельствоСерияНомер;
		СтруктураВозврата.СвидетельствоДата  = РеквизитыОрганизации.СвидетельствоДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
 Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Ид КАК Ид
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|		КОНЕЦ КАК Коэффициент,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТовары.Упаковка КАК Упаковка,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие),
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ИдентификаторПлатежа,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	ОбработатьТаблицуТоваров(ТаблицаТоваров);

	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПараметров.Вставить("Исполнитель", 	  	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	 	РеквизитыШапки.Организация);
	СтруктураПараметров.Вставить("Контрагент",			РеквизитыШапки.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  	СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  	ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  	СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  	СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  	РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("ИдентификаторПлатежа",РеквизитыШапки.ИдентификаторПлатежа);
	СтруктураПараметров.Вставить("Курс", 			  	РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 			  	РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("СуммаНДС", 		  	ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			  	СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  	СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("АдресДоставки",	  	РеквизитыШапки.АдресДоставки);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("Грузоотправитель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  РеквизитыШапки.Грузоотправитель, СтруктураЭД.Организация));
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	СтруктураПараметров.Вставить("Грузополучатель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  РеквизитыШапки.Грузополучатель, СтруктураЭД.Контрагент));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",					РеквизитыШапки.ЦенаВключаетНДС);
 	// данные по расч.счетам
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетКонтрагента);
		СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетОрганизации) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетОрганизации);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузоотправителя", БанковскийСчет);
	КонецЕсли;
 	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетГрузополучателя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузополучателя", БанковскийСчет);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, БазоваяЕдиницаКод, УпаковкаКод");
	                                                      
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Ид КАК Ид,
	|	ВложенныйЗапрос.Упаковка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		&ТекстЗапросаКодЕдиницыИзмерения КАК УпаковкаКод,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|		КОНЕЦ КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.КоличествоУпаковок = 0
	|				ТОГДА ТаблицаТовары.Цена
	|			ИНАЧЕ ТаблицаТовары.Сумма / ТаблицаТовары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|		ТаблицаТовары.Упаковка КАК Упаковка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", 	  	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	 	РеквизитыШапки.Организация);
	СтруктураПараметров.Вставить("Контрагент",			РеквизитыШапки.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  	СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  	ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  	СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  	СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  	РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			  	РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 			  	РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("СуммаНДС", 		  	ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			  	СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  	СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("АдресДоставки",	  	РеквизитыШапки.АдресДоставки);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("Грузоотправитель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  РеквизитыШапки.Грузоотправитель, СтруктураЭД.Организация));
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	СтруктураПараметров.Вставить("Грузополучатель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  РеквизитыШапки.Грузополучатель, 
														  СтруктураЭД.Контрагент));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",					РеквизитыШапки.ЦенаВключаетНДС);
 	// данные по расч.счетам
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетКонтрагента);
		СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетОрганизации) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетОрганизации);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузоотправителя", БанковскийСчет);
	КонецЕсли;
 	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетГрузополучателя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузополучателя", БанковскийСчет);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, БазоваяЕдиницаКод, УпаковкаКод");                                               
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКоманд - Структура - структура состава команд ЭДО
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
    Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
	
		СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваровУслуг");
		СоставКомандЭДО.Исходящие.Добавить("Документ.АктВыполненныхРабот");
		СоставКомандЭДО.Исходящие.Добавить("ЖурналДокументов.ДокументыПродажи");
		СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
		СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказКлиента");
		СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплатуКлиенту");
		СоставКомандЭДО.Исходящие.Добавить("Документ.КоммерческоеПредложениеКлиенту");
		СоставКомандЭДО.Исходящие.Добавить("ЖурналДокументов.ОтчетыКомитентам");
		СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитенту");
		СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОСписании");
		СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
		
		СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеТоваровУслуг");
		СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеУслугПрочихАктивов");
		СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказПоставщику");
		СоставКомандЭДО.Входящие.Добавить("Документ.ЗаказКлиента");
		СоставКомандЭДО.Входящие.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
		СоставКомандЭДО.Входящие.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
		СоставКомандЭДО.Входящие.Добавить("ЖурналДокументов.ОтчетыКомиссионеров");
		СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионера");
		СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионераОСписании");
		СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПоступления");
		
		СоставКомандЭДО.Интеркампани.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
		СоставКомандЭДО.Интеркампани.Добавить("Документ.ВозвратТоваровМеждуОрганизациями");
		
		СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияТоваровУслуг");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.АктВыполненныхРабот");
		СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ДокументыПродажи");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказКлиента");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуКлиенту");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.КоммерческоеПредложениеКлиенту");
		СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ОтчетыКомитентам");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитенту");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитентуОСписании");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаРеализации");
		
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ПоступлениеТоваровУслуг");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ПоступлениеУслугПрочихАктивов");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.РегистрацияЦенНоменклатурыПоставщика");
		СоставКомандЭДО.БезПодписи.Добавить("ЖурналДокументов.ОтчетыКомиссионеров");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионера");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионераОСписании");
		СоставКомандЭДО.БезПодписи.Добавить("Документ.КорректировкаПоступления");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", КорневойЭлементДерева = "")
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		Или СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП, КорневойЭлементДерева);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
	
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН", СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
			
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ПолноеНаименование)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		КонецЕсли;
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия", СведенияОбУчастнике.Фамилия, КорневойЭлементДерева);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя", СведенияОбУчастнике.Имя, КорневойЭлементДерева);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество", СведенияОбУчастнике.Отчество, КорневойЭлементДерева);
		
	КонецЕсли;
	
	АдресУчастника = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьАдресСтруктурой(СведенияОбУчастнике, "Ссылка", ВидАдреса);
	ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, "Структурированный", ВидУчастника, КорневойЭлементДерева);
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Контакт.Телефон",
									СведенияОбУчастнике.Телефоны, КорневойЭлементДерева);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) 
		 И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета", НомерСчета, КорневойЭлементДерева);
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.НаимБанк", БанкНаименование, КорневойЭлементДерева);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.БИК", БИК, КорневойЭлементДерева);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) 
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	Если ТипАдреса = "Произвольный" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".Адрес.Произвольный", АдресУчастника.АдрТекст, КорневойЭлементДерева);
	Иначе
		Если АдресУчастника.АдресРФ = Ложь Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Кварт");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
		КонецЕсли;
		
		Для каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ, Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // Передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		
		Если ИмяРеквизита = "СтавкаНДС" ИЛИ ИмяРеквизита = "НалСтВел" Тогда
			Результат = НайтиПеречисление("НДС", Результат);
		ИначеЕсли ИмяРеквизита = "ВариантОплаты" Тогда
			Если Результат = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения
			ИначеЕсли Результат = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления 
			ИначеЕсли Результат = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
			ИначеЕсли Результат = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки
			КонецЕсли
		Иначе
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// Работа с контактной информацией

Функция ПолучитьАдресИзКонтактнойИнформации(Владелец, ТипАдреса = "Юр")
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Страна,
	|	КонтактнаяИнформация.Регион,
	|	КонтактнаяИнформация.ЗначенияПолей,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидАдреса";
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресПартнера"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Партнеры");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец",  Владелец);
	Запрос.УстановитьПараметр("Тип",       Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидАдреса", ВидАдреса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТелефонИзКонтактнойИнформации(Владелец)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Телефон
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидТелефона";
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонПартнера"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Партнеры");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец",    Владелец);
	Запрос.УстановитьПараметр("Тип",         Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидТелефона", ВидТелефона);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Телефон;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресЭПИзКонтактнойИнформации(Владелец)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК АдресЭП
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидEmail";
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидEmail = Справочники.ВидыКонтактнойИнформации["EmailПартнера"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Партнеры");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Тип",      Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидEmail", ВидEmail);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.АдресЭП;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйДок = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе	
    				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;	
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПоставщику КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора, ЭтоЗаказ = Ложь)
	
	НовСтрока = ТЗ.Добавить();
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ИмяРеквизитаВБД = "Описание" Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли ИмяРеквизитаВБД = "СумНДС" Тогда
			ИмяРеквизитаВБД = "СуммаНДС";
		ИначеЕсли ИмяРеквизитаВБД = "СтТовУчНал" Тогда
			ИмяРеквизитаВБД = "Сумма";
		ИначеЕсли ИмяРеквизитаВБД = "НалСтВел" Тогда
			ИмяРеквизитаВБД = "СтавкаНДС";
		КонецЕсли;
		
		Если ИмяРеквизитаВБД = "СуммаСНДС" Тогда
			Если ЭтоЗаказ Тогда
				НовСтрока.Сумма = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение характеристики номенклатуры и упаковки.
		Если ИмяРеквизитаВБД = "НоменклатураПоставщика" Тогда
			Если ТЗ.Колонки.Найти("Характеристика") <> Неопределено Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Характеристика = НайденноеЗначение.Характеристика;	
				КонецЕсли;
			КонецЕсли;
			Если ТЗ.Колонки.Найти("Упаковка") <> Неопределено Тогда
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
					НовСтрока.Упаковка = НайденноеЗначение.Упаковка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		Если ТекСтрока.Реквизит = "Номенклатура" Тогда
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита, "ИндексСтроки", Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				НовСтрока.Упаковка = НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НомерПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("ДатаПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("НомерПоДаннымКлиента");
	ТЗ.Колонки.Добавить("ДатаПоДаннымКлиента");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// реквизиты для связки "заказ - поступление"
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымКлиента", 		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымКлиента",  		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымПоставщика", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымПоставщика"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымПоставщика",  	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымПоставщика"));
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из ТЗ Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПоступлениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НоменклатураПоставщика");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	// а также НомерСтрокиДокументаПоставщика
	НомерСтрокиДокумента = 0;
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
			ТекСтрока.Содержание = ТекСтрока.НоменклатураПоставщика;
		КонецЕсли;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ЧастичнаяОплата = истина;
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
		
	СтрокаСрокПлатежа = СтрокаДляЗагрузки.Строки.Найти("ДатаОкончанияДействияСчета", "Реквизит");
	ДанныеЗаполненияШапки.Вставить("СрокПлатежа", СтрокаСрокПлатежа.ЗначениеРеквизита);
	
	СтрокаСуммаДокумента = СтрокаДляЗагрузки.Строки.Найти("СуммаИтог", 		"Реквизит");
	СтрокаСуммаНДС 		 = СтрокаДляЗагрузки.Строки.Найти("СуммаНалогаИтог","Реквизит");
	
	Если ЧастичнаяОплата Тогда
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита + СтрокаСуммаНДС.ЗначениеРеквизита);
	Иначе
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерДокументаОснования"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаДокументаОснования"));
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения 
	
	// найдем ВидЦеныПоставщика или создадим новый
	ВидЦеныПоставщика = ОпределитьВидЦеныПоставщика(ДанныеЗаполненияШапки.Партнер, СтрокаДляЗагрузки.Строки.Найти("ТипыЦен").ЗначениеРеквизита);
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика, а также обязательный реквизит ВидЦеныПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПоставщика.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПоставщика.Упаковка;
			КонецЕсли;
		КонецЕсли;
		ТекСтрока.ВидЦеныПоставщика = ВидЦеныПоставщика;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказКлиента.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказКлиента.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		КонецЕсли;
    КонецЦикла;
		
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказПоставщику.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора, Истина); 
		КонецЕсли;
	КонецЦикла;
	
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПоставщика.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПоставщика.Упаковка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 			   ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",			   ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионера.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ОтчетКомиссионера.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();  	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			
			НоваяСтрока = ТЗ.Добавить();
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;
				
				Если ИмяРеквизитаВБД = "ДополнительныеРеквизиты" Тогда
					
					СтруктураДополнительныхРеквизитов = ТекСтрока.ЗначениеРеквизита;
					Если СтруктураДополнительныхРеквизитов.Свойство("ДатаПродажи") Тогда
						НоваяСтрока["ДатаСчетаФактурыКомиссионера"] = СтруктураДополнительныхРеквизитов.ДатаПродажи;
					КонецЕсли;
					
					// Заполним информацию о покупателе
					ДанныеПокупателя = Новый Структура("НаименованиеПолное, ИНН, КПП, ЮрАдрес, ФактАдрес");
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательНаименование") Тогда
						ДанныеПокупателя.НаименованиеПолное = СтруктураДополнительныхРеквизитов.ПокупательНаименование;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательИНН") Тогда
						ДанныеПокупателя.ИНН = СтруктураДополнительныхРеквизитов.ПокупательИНН;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательКПП") Тогда
						ДанныеПокупателя.КПП = СтруктураДополнительныхРеквизитов.ПокупательКПП;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательЮрАдрес") Тогда
						ДанныеПокупателя.ЮрАдрес = СтруктураДополнительныхРеквизитов.ПокупательЮрАдрес;
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательФактАдрес") Тогда
						ДанныеПокупателя.ФактАдрес = СтруктураДополнительныхРеквизитов.ПокупательФактАдрес;
					КонецЕсли;
					
					// Попробуем найти среди существующих
					Покупатель = СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеПокупателя.ИНН, ДанныеПокупателя.КПП);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
						Покупатель = СоздатьКонтрагентаВБД(ДанныеПокупателя)
					КонецЕсли;
					
					НоваяСтрока.Покупатель = Покупатель;
					
				КонецЕсли;
				
				Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
		
		ТекущийПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаПродажиНДС = Окр(ТекСтрока.СуммаПродажи * ТекущийПроцентНДС / (1 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЦикла;
	
	Если ТЗ.Итог("СуммаПродажиНДС") > 0 Тогда
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	Иначе
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	КонецЕсли;
	
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("Сумма"), "СуммаСНДС");
	ТЗ.Колонки.Удалить("Сумма");
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионераОСписании.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
   	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступения(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура();
	ДанныеЗаполнения = Новый Структура();
	Товары = Документы.КорректировкаПоступления.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполнения.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Если СтрокаРеквизита.Реквизит = "Основание" Тогда
						ИмяРеквизита = "ДокументОснование";
					Иначе
						ИмяРеквизита = СтрокаРеквизита.Реквизит;
					КонецЕсли;
					ДанныеЗаполнения.Вставить(ИмяРеквизита, Реквизит);
				КонецЕсли;
				
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// Дополним ДанныеЗаполнения реквизитами основания
	ДокументОснование = Неопределено;
	Если ДанныеЗаполнения.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование; 
		
		ТекстЗапроса = "";
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Склад				 КАК Склад,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.Сделка				 КАК Сделка,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	ДанныеДокумента.ПоступлениеПоЗаказам КАК ПоступлениеПоЗаказам
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда 
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка				 КАК ДокументОснование,
			|	ДанныеДокумента.Партнер				 КАК Партнер,
			|	ДанныеДокумента.Контрагент			 КАК Контрагент,
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Организация			 КАК Организация,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	Ложь								 КАК ПоступлениеПоЗаказам
			|
			|ИЗ
			|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ДанныеЗаполнения.Вставить(Колонка.Имя);
			КонецЦикла;
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Товары.Итог("СуммаНДС") > 0 Тогда
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		Иначе	
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ЦенаВключаетНДС", Ложь);
		
	КонецЕсли;
	
	// Вид операции ЭД определяет хоз. операцию документа
	ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ИсправлениеОшибок);
	Иначе
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон);
	КонецЕсли;
	
	ЭтоКорректировкаПоступленияУслуг = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов"));
	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// Заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентУпаковки(ТекСтрока.Упаковка, ТекСтрока.Номенклатура);
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
		
		Если ЭтоКорректировкаПоступленияУслуг Тогда
			ТекСтрока.Содержание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.НоменклатураПоставщика, "Наименование");
			ТекСтрока.НоменклатураПоставщика = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполнения);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	Перем ВозвращаемоеЗначение;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	РеквизитыИБКонтрагента = Новый Структура;
	
	// попробуем найти заказ поставщику
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		ДокументОбъект.ПоступлениеПоЗаказам = Истина;
	КонецЕсли;

	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ЕстьЗаказВТЧ = Ложь;
	Для Каждого Строка Из ДанныеДляЗагрузки.Товары Цикл
		РеквизитыИБ = Новый Структура;
		Если ЗначениеЗаполнено(Строка.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", Строка.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", Строка.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			Строка.ЗаказПоставщику = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДокументОбъект.Контрагент, РеквизитыИБ);
			ЕстьЗаказВТЧ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Отказ = Ложь;
	
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(ДокументОбъект.Товары, Отказ);
	
	Если ЕстьЗаказВТЧ Тогда
		ДанныеДляЗагрузки.Товары.Свернуть("ЗаказПоставщику");
		Если ДанныеДляЗагрузки.Товары.Количество()>1 Тогда
			ДокументОбъект.ПоступлениеПоЗаказам=Истина;
			ДанныеПривязки = ПолучитьДанныеПривязкиСтрокЗаказов(ДокументОбъект.Товары.Выгрузить(,"Номенклатура, Количество, ЗаказПоставщику"));
			индекс = 0;
			Для Каждого Строка ИЗ ДанныеПривязки Цикл
				ДокСтрокаТовары = документОбъект.Товары.Получить(Индекс);
				ЗаполнитьЗначенияСвойств(ДокСтрокаТовары, Строка);
				Если НЕ ЗначениеЗаполнено(ДокСтрокаТовары.КодСтроки) ИЛИ ДокСтрокаТовары.КодСтроки = 0 Тогда
					ДокСтрокаТовары.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
				КонецЕсли;
				Индекс = индекс + 1;
			КонецЦикла
		ИначеЕсли ДанныеДляЗагрузки.Товары.Количество()=1 Тогда
			ДокументОбъект.ЗаказПоставщику = ДанныеДляЗагрузки.Товары[0].ЗаказПоставщику;
		КонецЕсли
	КонецЕсли;
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	Если ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	// пересчет цен и сумм в зависимости от включения НДС в цену
	НДСпоСтавкам4и2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "НДСпоСтавкам4и2");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", НДСпоСтавкам4и2);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда 		
		СтруктураДействий.Вставить("ПересчитатьЦенуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;

	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПоступлениеУслугПрочихАктивов.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// попробуем найти заказ поставщику
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
		РеквизитыИБКонтрагента = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	Если Значениезаполнено(НайденныйДок) ТОгда
		ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	КонецЕсли;

	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Расходы.Загрузить(ДанныеДляЗагрузки.Расходы);
	
	Если ДокументОбъект.Расходы.Итог("СуммаНДС") > 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Конецесли;
	ДокументОбъект.ЦенаВключаетНДС = Ложь;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Расходы, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
        КонецЕсли;
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
	Иначе  // создаем новый
		ДокументОбъект = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("СрокПлатежа") Тогда 
		ДокументОбъект.ЖелательнаяДатаПлатежа = ДанныеЗаполнения.СрокПлатежа;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НомерДокументаОснования") 
	   И ДанныеЗаполнения.Свойство("ДатаДокументаОснования") 
	   И ЗначениеЗаполнено(ДанныеЗаполнения.НомерДокументаОснования)
	   И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаДокументаОснования) Тогда
	   	РеквизитыИБ = Новый Структура;
		РеквизитыИБ.Вставить("Номер", 	ДанныеЗаполнения.НомерДокументаОснования);
		Если ТипЗнч(ДанныеЗаполнения.ДатаДокументаОснования) = Тип("Строка") Тогда
        	РеквизитыИБ.Вставить("Дата", 	ПолучитьДатуВремяИзСтроки(ДанныеЗаполнения.ДатаДокументаОснования));
		Иначе
        	РеквизитыИБ.Вставить("Дата", 	ДанныеЗаполнения.ДатаДокументаОснования);
		КонецЕсли;	
		НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ);
		Если ЗначениеЗаполнено(НайденныйДок) Тогда
			ДокументОбъект.ДокументОснование = НайденныйДок;
		КонецЕсли;	
	КонецЕсли;   
	 	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ДанныеЗаполнения.Сумма;
	
	// табл.часть расшифровка
	НовСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	НовСтрока.ВалютаВзаиморасчетов 	= ДокументОбъект.Валюта;
	НовСтрока.Сумма 				= ДокументОбъект.СуммаДокумента;
	НовСтрока.СуммаВзаиморасчетов 	= ДокументОбъект.СуммаДокумента;
    Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		НовСтрока.Партнер = ДанныеЗаполнения.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		НовСтрока.Заказ = НайденныйДок;
	КонецЕсли;
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		НомерВПределахДня = УстановкаЦенВызовСервера.РассчитатьНомерВПределахДня(ТекущаяДата(), ДокументОбъект.Ссылка);
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";   
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
			
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
        КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымКлиента", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымКлиента", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
				РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ЗаказТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		Если ДанныеЗаполнения.Свойство("ДополнительнаяИнформация") Тогда
			ДанныеЗаполнения.Вставить("ДопИнф", ДанныеЗаполнения.ДополнительнаяИнформация);
			ДанныеЗаполнения.Удалить("ДополнительнаяИнформация");
		КонецЕсли;
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("ДопИнф") Тогда
			ДокументОбъект.ДополнительнаяИнформация = ДанныеЗаполнения.ДопИнф;
		КонецЕсли;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
		
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// заполнение договора
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДокументОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда
		Для Каждого Строка из ДокументОбъект.Товары Цикл
			Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
		КонецЦикла	
	КонецЕсли;	
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ДанныеДляЗагрузки.Шапка.СуммаИтог;
	
	Если ЗначениеЗаполнено(ДанныеДляЗагрузки.Шапка.СуммаНалогаИтог) Тогда
		ДокументОбъект.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе	
		ДокументОбъект.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
	КонецЕсли;	
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
		КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если Записывать И ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// заполнение договора
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
		Если ДокументОбъект.Соглашение.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
			ДокументОбъект.Договор = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда
		Для Каждого Строка из ДокументОбъект.Товары Цикл
			Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионера.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Для Каждого Строка ИЗ ДокументОбъект.Товары Цикл
		Строка.Сумма = Строка.СуммаСНДС - Строка.СуммаНДС;
	КонецЦикла;	
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионераОСписании.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступения(СтрокаДляЗагрузки, ДеревоРазбора);
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru='Операция возможна только для непроведенных документов!';uk='Операція можлива тільки для непроведених документів!'");
		КонецЕсли;
	Иначе // создаем новый
		ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	// заполнение контрагента
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		ДокументОбъект.Контрагент = ДанныеЗаполнения.Контрагент;
	КонецЕсли;	
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Отказ = Ложь;
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(ДокументОбъект.Товары, Отказ);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// заполнение соглашения по статистике
	Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
	КонецЕсли;
	
	// Склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// Пересчет цен и сумм в зависимости от включения НДС в цену
	НДСпоСтавкам4и2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "НДСпоСтавкам4и2");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", НДСпоСтавкам4и2);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда 		
		СтруктураДействий.Вставить("ПересчитатьЦенуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Для Каждого Строка Из ДокументОбъект.Товары Цикл 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	
	// Сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Заполнение документа на основе ЭД. %1';uk='Заповнення документа на основі ЕД. %1'"), Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Процедура ЗаполнитьАдресВСпискеТиповАдресов(СписокТиповАдресов, АдресУчастника, ТипАдреса = "Структурированный")
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	СписокТиповАдресов.ЗаполнитьПометки(Ложь);
	ВыбранныйТипАдреса = Неопределено;
	Для Каждого Элемент Из СписокТиповАдресов Цикл
		Если Элемент.Представление = ТипАдреса Тогда
			ВыбранныйТипАдреса = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранныйТипАдреса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВыбранныйТипАдреса.Значение, АдресУчастника);
		ВыбранныйТипАдреса.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы(ВидЭД)
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Структура.Вставить("КоличествоМест", 0);
	Структура.Вставить("МассаНетто", 0);
	Структура.Вставить("МассаБрутто", 0);
	Структура.Вставить("СуммаБезНДС", 0);
	Структура.Вставить("СуммаНДС", 0);
	Структура.Вставить("СуммаСНДС", 0);
	
	Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		Структура.Вставить("МассаНеттоДоКорректировки", 0);
		Структура.Вставить("СуммаБезНДСДоКорректировки", 0);
		Структура.Вставить("СуммаНДСДоКорректировки", 0);
		Структура.Вставить("СуммаСНДСДоКорректировки", 0);
	КонецЕсли;
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, ДанныеСтроки, ВидЭД)
	
	КоличествоМест = ДанныеСтроки.КоличествоМест;
	Если КоличествоМест <> Цел(КоличествоМест) Тогда
		КоличествоМест = Цел(КоличествоМест) + 1;
	КонецЕсли;
	
	ИтоговыеСуммы.КоличествоМест = ИтоговыеСуммы.КоличествоМест + КоличествоМест;
	ИтоговыеСуммы.СуммаБезНДС    = ИтоговыеСуммы.СуммаБезНДС + ДанныеСтроки.СуммаБезНДС;
	ИтоговыеСуммы.СуммаНДС       = ИтоговыеСуммы.СуммаНДС + ДанныеСтроки.СуммаНДС;
	ИтоговыеСуммы.СуммаСНДС      = ИтоговыеСуммы.СуммаСНДС + ДанныеСтроки.СуммаСНДС;
	ИтоговыеСуммы.МассаБрутто    = ИтоговыеСуммы.МассаБрутто + ДанныеСтроки.МассаБрутто;
	ИтоговыеСуммы.МассаНетто     = ИтоговыеСуммы.МассаНетто + ДанныеСтроки.МассаНетто;
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей + 1;
	
	Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		ИтоговыеСуммы.МассаНеттоДоКорректировки  = ИтоговыеСуммы.МассаНеттоДоКорректировки + ДанныеСтроки.МассаНеттоДоКорректировки;
		ИтоговыеСуммы.СуммаБезНДСДоКорректировки = ИтоговыеСуммы.СуммаБезНДСДоКорректировки + ДанныеСтроки.СуммаБезНДСДоКорректировки;
		ИтоговыеСуммы.СуммаНДСДоКорректировки    = ИтоговыеСуммы.СуммаНДСДоКорректировки + ДанныеСтроки.СуммаНДСДоКорректировки;
		ИтоговыеСуммы.СуммаСНДСДоКорректировки   = ИтоговыеСуммы.СуммаСНДСДоКорректировки 
			+ ДанныеСтроки.СуммаБезНДСДоКорректировки 
			+ ДанныеСтроки.СуммаНДСДоКорректировки;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров)
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ИД) Тогда
			ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
			Если ТипЗнч(Строка.Характеристика) = Тип("Строка") Тогда
				СсылкаНаХарактеристику = Строка.ХарактеристикаСсылка;
			Иначе
				СсылкаНаХарактеристику = Строка.Характеристика;
			КонецЕсли;
			ИДХарактеристики = ?(ЗначениеЗаполнено(СсылкаНаХарактеристику),СсылкаНаХарактеристику.УникальныйИдентификатор(),"");
			Если ТипЗнч(Строка.Упаковка) = Тип("Строка") Тогда
				СсылкаНаУпаковку = Строка.УпаковкаСсылка;
			Иначе
				СсылкаНаУпаковку = Строка.Упаковка;
			КонецЕсли;
			ИДУпаковки = ?(ЗначениеЗаполнено(СсылкаНаУпаковку),СсылкаНаУпаковку.УникальныйИдентификатор(),"");
			Строка.ИД = Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
			Строка.Наименование = ?(ЗначениеЗаполнено(Строка.Наименование),Строка.Наименование,"")  //номенклатура
			+ ?(ЗначениеЗаполнено(Строка.Характеристика)," (","") //Открывающаяся скобка
			+ ?(ЗначениеЗаполнено(Строка.Характеристика),Строка.Характеристика,"") //характеристика
			+ ?(ЗначениеЗаполнено(Строка.Характеристика),")",""); //Закрывающаяся скобка
		КонецЕсли;
		//Коды единиц измерения для CML 4.02
		Строка.БазоваяЕдиницаКод = СокрЛП(Строка.БазоваяЕдиницаКод);
		Строка.УпаковкаКод = СокрЛП(Строка.УпаковкаКод);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснования(ДеревоДанных, СсылкаНаОбъект)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДокументыОснования", 
			МассивДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	//
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
		// Заполняем идентификатор номенклатуры поставщика, если он получен в реквизите Ид
		СтрокаИд = СтрокаОбъекта.Строки.Найти("Ид", "Реквизит", Истина);
		Если НЕ ЗначениеЗаполнено(НовЭл.Идентификатор) И ЗначениеЗаполнено(СтрокаИд) Тогда
			НовЭл.Идентификатор = СтрокаИд.ЗначениеРеквизита;
		КонецЕсли;
		// Заполнение найденного поставщика (владельца, тип Справочник.Партнеры)
		СтрокиПартнеры = ДеревоРазбора.Строки.Найти("Партнеры", "ТипОбъекта", Истина);
		Если СтрокиПартнеры.Строки.Количество() = 1 Тогда
			НовЭл.Владелец = СтрокиПартнеры.Строки[0].СсылкаНаОбъект;
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	//
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = НСтр("ru='Создание элемента справочника ""Номенклатура поставщиков"".';uk='Створення елемента довідника ""Номенклатура постачальників"".'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция СоздатьКонтрагентаВБД(ДанныеКонтрагента)
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) 
		 ИЛИ НЕ ЗначениеЗаполнено(ДанныеКонтрагента.КПП) Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	НовыйПартнер        = Неопределено;
	СсылкаНаКонтрагента = Неопределено;
	
	Если СтрДлина(ДанныеКонтрагента.ИНН) = 10 Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
	Иначе
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Наименование", ДанныеКонтрагента.НаименованиеПолное);
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйПартнер, ДанныеКонтрагента);
		
		НовыйПартнер.ПрочиеОтношения = Истина;
		
			
		СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
		НовыйПартнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
		
		НовыйКонтрагент.Партнер = СсылкаНовогоПартнера;
		
	Иначе
		НовыйКонтрагент.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		НовыйКонтрагент.Записать();
		Если НовыйПартнер <> Неопределено Тогда
			НовыйПартнер.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		СсылкаНаКонтрагента = НовыйКонтрагент.Ссылка;
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru=' (подробности см. в Журнале регистрации).';uk=' (подробиці див. у Журналі реєстрації).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru='Создание нового контрагента';uk='Створення нового контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат СсылкаНаКонтрагента; 
	
КонецФункции

Функция НайтиПеречисление(Наименование, ПредставлениеПеречисления) Экспорт
	
	НайденноеЗначение = Неопределено;
	Если Наименование = "НДС" Тогда
		ИмяПеречисления = "СтавкиНДС";
		Если НЕ ТипЗнч(ПредставлениеПеречисления)=Тип("ПеречислениеСсылка.СтавкиНДС") Тогда // определяем по числу
			Возврат ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(ПредставлениеПеречисления); 
		КонецЕсли;
	ИначеЕсли Наименование = "ТипНоменклатуры" Тогда
		ИмяПеречисления = "ТипыНоменклатуры";
	ИначеЕсли Наименование = "ТипыНалогообложенияНДС" Тогда
		ИмяПеречисления = "ТипыНалогообложенияНДС";	
	ИначеЕсли Наименование = "СпособыРасчетаКомиссионногоВознаграждения" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
	ИначеЕсли Наименование = "ВариантыОплатыКлиентом" Тогда
		ИмяПеречисления = "ВариантыОплатыКлиентом";	
	ИначеЕсли Наименование = "ВариантыОплатыПоставщику" Тогда
		ИмяПеречисления = "ВариантыОплатыПоставщику";			
	ИначеЕсли Наименование = "ФормыОплаты" Тогда
		ИмяПеречисления = "ФормыОплаты";	
	ИначеЕсли Наименование = "СпособРасчета" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
		Если ПредставлениеПеречисления = "От суммы" Тогда
			ПредставлениеПеречисления = НСтр("ru = Процент от суммы продажи'");
		ИначеЕсли ПредставлениеПеречисления = "От разницы" Тогда
			ПредставлениеПеречисления = НСтр("ru = Процент от разности суммы продажи и суммы комитента'");
		КонецЕсли;	
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Функция РеквизитыБанковскогоСчета(ИмяСправочника, СсылкаНаБанковскийСчет)
	
	БанковскийСчет = Новый Структура;
	ЗапросРасчСчет = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
					|	БанковскиеСчета.НомерСчета,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.НаименованиеБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Наименование
					|	КОНЕЦ КАК НаименованиеБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.БИКБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Код
					|	КОНЕЦ КАК БИКБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.КоррСчетБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.НаименованиеБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Наименование
					|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.БИКБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Код
					|	КОНЕЦ КАК БИКБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.КоррСчетБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов
					|ИЗ
					|	Справочник."+ИмяСправочника+" КАК БанковскиеСчета
					|ГДЕ
					|	БанковскиеСчета.Ссылка = &Ссылка";
					ЗапросРасчСчет.Текст = ТекстЗапроса;
	ЗапросРасчСчет.УстановитьПараметр("Ссылка", СсылкаНаБанковскийСчет);
	Выборка = ЗапросРасчСчет.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		БанковскийСчет.Вставить("НомерСчета", Выборка.НомерСчета);
		Банк = Новый Структура;
		Банк.Вставить("Наименование", Выборка.НаименованиеБанка);
		Банк.Вставить("Код", Выборка.БИКБанка);
		Банк.Вставить("КоррСчет", Выборка.КоррСчетБанка);
		БанковскийСчет.Вставить("Банк", Банк);
		БанкДляРасчетов = Неопределено; // заполнение анализируется в модуле формирования
		Если ЗначениеЗаполнено(Выборка.БИКБанкаДляРасчетов) Тогда // используется банк для расчетов
			БанкДляРасчетов = Новый Структура;
			БанкДляРасчетов.Вставить("Наименование", Выборка.НаименованиеБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("Код", Выборка.БИКБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("КоррСчет", Выборка.КоррСчетБанкаДляРасчетов);
		КонецЕсли;
		БанковскийСчет.Вставить("БанкДляРасчетов", БанкДляРасчетов);
	КонецЕсли;
	Возврат БанковскийСчет;
	
КонецФункции

Функция ПолучитьДанныеПривязкиСтрокЗаказов(Товары)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
	|	ТаблицаЗаказы.Склад КАК Склад,
	|	ТаблицаЗаказы.КОформлению КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				(Номенклатура, ЗаказПоставщику) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура КАК Номенклатура,
	|						Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|					ИЗ
	|						Товары КАК Товары)) КАК ЗаказыОстатки
	|	ГДЕ
	|		ЗаказыОстатки.КОформлениюОстаток > 0) КАК ТаблицаЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.ЗаказПоставщику,
	|	ЗаказыПоставщикам.КодСтроки,
	|	ЗаказыПоставщикам.Склад,
	|	ЗаказыПоставщикам.Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|		ПО Товары.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|			И Товары.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
	|			И Товары.Количество <= ЗаказыПоставщикам.КОформлениюОстаток";
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	
  
Функция НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки)
	
	СсылкаНаОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
			СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция СоздатьРасчетныйСчет(СтрокаОбъекта, ВидРС, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Неопределено;
	НайденнаяСтрока = СтрокаОбъекта;
	
	Если ВидРС = "БанковскийСчетКонтрагента" Тогда
		НовЭл = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		Если (НЕ ДеревоРазбора.Строки.Найти("Контрагенты")=Неопределено) 
		   И ДеревоРазбора.Строки.Найти("Контрагенты").Строки.Количество()>0 Тогда
			СсылкаНаВладельца = ДеревоРазбора.Строки.Найти("Контрагенты").Строки[0].СсылкаНаОбъект;
		КонецЕсли;	
	ИначеЕсли ВидРС = "БанковскийСчетОрганизации" Тогда
		НовЭл = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
		НовЭл.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	НовЭл.НомерСчета 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "НомерСчета");
		
	//
	ИндексИскомойСтроки = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Банк");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.Банк 			= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	ИндексИскомойСтроки 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "БанкКорреспондент");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.БанкДляРасчетов 	= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		СсылкаНаВладельца = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Владелец");	
	КонецЕсли;
	НовЭл.Владелец 		= СсылкаНаВладельца;
	НовЭл.Наименование 	= Прав(СокрЛП(НовЭл.НомерСчета), 4)+" в "+НовЭл.Банк.Наименование; // наименование расч.счета
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Создание элемента справочника %1.';uk='Створення елемента довідника %1.'"), ВидРС); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект; // запишем в дерево
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСоглашениеОбИспользованииЭД(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоглашениеОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеОбИспользованииЭД
		|ГДЕ
		|	СоглашениеОбИспользованииЭД.Контрагент = &Контрагент
		|	И СоглашениеОбИспользованииЭД.Партнер = &Партнер");
	  
	Запрос.УстановитьПараметр("Контрагент",	ОбменСКонтрагентамиВнутренний.ПолучитьРеквизитШапкиЭД(СтрокаОбъекта, "Контрагент", ДеревоРазбора));					  
	Запрос.УстановитьПараметр("Партнер",	ОбменСКонтрагентамиВнутренний.ПолучитьРеквизитШапкиЭД(СтрокаОбъекта, "Партнер", ДеревоРазбора));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	МетаданныеОбъекта = ТекущийОбъект.Метаданные();
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) 
			 И МетаданныеОбъекта.Реквизиты.Найти(Строка.Ключ) <> Неопределено
			 И ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
			ТекущийОбъект[Строка.Ключ] = Строка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
		
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВДеревоДанныеСчета(ДеревоДокумента, ДанныеСчета);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", ДанныеСчета.НомерСчета);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", ДанныеСчета.Банк.Наименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", ДанныеСчета.Банк.Код);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", ДанныеСчета.Банк.КоррСчет);
	
	Если ЗначениеЗаполнено(ДанныеСчета.БанкДляРасчетов) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", ДанныеСчета.БанкДляРасчетов.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", ДанныеСчета.БанкДляРасчетов.КоррСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", ДанныеСчета.БанкДляРасчетов.Код);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснованияПоЗаказам(ДеревоДанных, СсылкаНаОбъект)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ЗаказКлиента");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, 
			"ДокументыОснования", 
			МассивДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьВидЦеныПоставщика(Партнер, ТипыЦен)
	
	ПараметрыЦены = ТипыЦен[0];
	ИспользоватьНесколькоВалют = Константы.ИспользоватьНесколькоВалют.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦенПоставщиков.Ссылка
	               |ИЗ
	               |	Справочник.ВидыЦенПоставщиков КАК ВидыЦенПоставщиков
	               |ГДЕ
	               |	ВидыЦенПоставщиков.Владелец = &Владелец
	               |	И ВидыЦенПоставщиков.ЦенаВключаетНДС = &ЦенаВключаетНДС";
				   
	Запрос.УстановитьПараметр("Владелец", 		 Партнер);	
	Запрос.УстановитьПараметр("Валюта", 		 ПараметрыЦены.Валюта);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ПараметрыЦены.ВключаетНДС);
	
	Если ИспользоватьНесколькоВалют Тогда
		Запрос.Текст = Запрос.Текст + " И ВидыЦенПоставщиков.Валюта.Код = &Валюта";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ТипЦенДляТЧ = Результат.Ссылка;
	Иначе
		ТипЦенДляТЧ = Справочники.ВидыЦенПоставщиков.СоздатьЭлемент();
		ТипЦенДляТЧ.Наименование =    "Основной";
		ТипЦенДляТЧ.Владелец = 		  Партнер;
		ТипЦенДляТЧ.ЦенаВключаетНДС = ПараметрыЦены.ВключаетНДС;
		Если ИспользоватьНесколькоВалют Тогда
			ТипЦенДляТЧ.Валюта =  	  Справочники.Валюты.НайтиПоКоду(ПараметрыЦены.Валюта);
		КонецЕсли;
		
		Попытка
			ТипЦенДляТЧ.Записать();
		Исключение
			Текст = НСтр("ru='Создание элемента справочника ""Виды цен поставщиков"".';uk='Створення елемента довідника ""Види цін постачальників"".'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТипЦенДляТЧ.Ссылка
	
КонецФункции

Процедура ЗаполнитьСоглашениеПоСтатистике(Объект)
	
	ЗаполняемыеРеквизиты = Новый Структура("Соглашение");
		
	РеквизитыДляОтбора = Новый Структура;
	РеквизитыДляОтбора.Вставить("Партнер", Объект.Партнер);
	РеквизитыДляОтбора.Вставить("Валюта", Объект.Валюта);
	РеквизитыДляОтбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);

	ЗаполнениеСвойствПоСтатистикеСервер.ПолучитьЗначенияСвойств(
			Объект.Ссылка, ЗаполняемыеРеквизиты, РеквизитыДляОтбора);
				
	Если ЗначениеЗаполнено(ЗаполняемыеРеквизиты.Соглашение) Тогда
		Объект.Соглашение = ЗаполняемыеРеквизиты.Соглашение;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчете(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	ОбщегоНазначенияУТ.ОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЗаполнитьУИП(ДеревоДокумента, УИП)
	
	СтруктураДопДанных = Новый Структура("ИдентификаторПлатежа", УИП);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДокумента, СтруктураДопДанных, Истина);
	
КонецПроцедуры

Функция ПолучитьДатуВремяИзСтроки(ДатаВремяСтрокой)
	
	Результат = Неопределено;
	ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, "-", "");
	ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, ":", "");
	Если СтрДлина(ДатаВремяСтрокой) - Найти(ДатаВремяСтрокой, " ") = 5 Тогда // время в формате Ч:ММ:СС
		ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, " ", "0");
	ИначеЕсли Найти(ДатаВремяСтрокой, "T") > 0 Тогда //время в формате ГГГГММДДTЧЧММСС
		ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, "T", "");
	Иначе // время в формате ЧЧ:ММ:СС
		ДатаВремяСтрокой = СтрЗаменить(ДатаВремяСтрокой, " ", "");
	КонецЕсли;
	
	Попытка
		Результат = Дата(ДатаВремяСтрокой); // дата и время в виде "ГГГГММДДЧЧММСС"
	Исключение
		Попытка
			Результат = Дата(Лев(ДатаВремяСтрокой, 8)); // только дата "ГГГГММДД"
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

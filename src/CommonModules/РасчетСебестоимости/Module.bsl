///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм оффлайнового (неоперативного) расчета себестоимости
//
//---------------------------------------------------------------------------------------------------------------------
// Движения по регистрам себестоимости, общая информация.
//---------------------------------------------------------------------------------------------------------------------
// Начиная с версии ERP 2.1.3 (и соответствующих ей версий КА и УТ) различаются два типа движения:
//	- "первичные" - формируемые в соответствии с логикой документов при их проведении
//	- "расчетные" - формируемые данным механизмом
// (идентификатором типа движения является новый реквизит "РасчетСебестоимости" регистров накопления)
// Список регистров, обслуживаемых механизмом расчета себестоимости, см. в ИсходящиеДанныеМеханизма()
//
// Регистратором расчетных движений теперь является первичный документ (из реквизита ДокументДвижения),
// а не документ РасчетСебестоимостиТоваров.
// Документ РасчетСебестоимостиТоваров больше не делает движений по следующим регистрам:
// ВыручкаИСебестоимостьПродаж, Закупки, ПрочиеРасходыНезавершенногоПроизводства (есть только в ERP и КА)
// (документ остается регистратором для этих регистров для обратной совместимости)
//
// При перепроведении документов расчетные движения сохраняются, независимо от внесенных в документ изменений.
// (Для этого в модуле набор записей обслуживаемых регистров размещен специальный код.
//  Для примера см. модуль регистра накопления СебестоимостьТоваров - вызовы процедур этого модуля.)
// Изменения в документе будут учтены в расчетных движениях при перерасчете себестоимости.
//
// Начиная с версии ERP 2.1.3 изменился алгоритм формирования и записи движений.
// Теперь по каждому обслуживаемому механизмом регистру движения формируются следующим образом:
//	- перед началом расчета старые расчетные движения не очищаются - они остаются в ИБ до окончания расчета
//	- новые расчетные движения, формируемые механизмом, помещаются в таблицу значений
//	- при достижении определенного размера таблицы значений или при окончании очередного этапа расчета
//	  новые движения из таблицы значений перекладываются во временную таблицу
//	- при окончании расчета сравниваются новые (из временной таблицы) и старые (из данных ИБ) движения
//		= перезаписываются движения только у тех документов, у которых есть отличия между старыми и новыми расчетными движениями
//		= только документы с перезаписанными движениями регистрируются к отражению в учете
//
// Данные изменения позволяют:
//	- посмотреть себестоимость по документу из самого документа - отчетом "Движения документа"
//	- при перерасчете себестоимости перезаписывать только реально измененные расчетные движения
//	- регистрировать к отражению в учете только документы с перезаписанными движениями (в ERP и КА)
//
//---------------------------------------------------------------------------------------------------------------------
// Переход на версию ERP 2.1.3 (и соответствующие ей версии КА2 и УТ11)
//---------------------------------------------------------------------------------------------------------------------
// При переходе на новую версию ранее сформированные расчетные движения автоматически не изменяются,
// т.к. для этого нужен не простой перенос движений между регистраторами, а "эмуляция" пересчета себестоимости, что чревато...
// Если запустить перерасчет старого периода, то в нем будут сформированы корректные движения по новой схеме.
//
//---------------------------------------------------------------------------------------------------------------------
// Запуск расчета себестоимости.
//---------------------------------------------------------------------------------------------------------------------
// Точкой входа в алгоритм расчета является процедура РассчитатьВсе()
//	- период расчета - месяц
//	- возможен "облегченный" предварительный расчет себестоимости - позволяет формировать некоторые отчеты
//	  	= если за указанный период уже был выполнен фактический расчет, то предварительный расчет выполняться не будет
//	- расчет выполняется или по указанному массиву организаций, или по всем организациям,
//	  связанным с указанной организацией по схеме Интеркампани (см. СвязиОрганизацийПоСхемеИнтеркампани())
//  	= если организация для расчета не указана, то будет выполнен расчет по всем организациям,
// 	  	  имеющим в указанном периоде движения по регистрам себестоимости.
//  	= все организации, по которым выполняется фактический расчет, должны иметь одинаковый метод оценки стоимости запасов
//		  (см. ОпределитьМетодОценкиСтоимости())
//	- запуск расчета себестоимости возможен как интерактивно (из механизма закрытия месяца), так и из регламентного задания
// Перед расчетом для каждой организации будет сформирован документ РасчетСебестоимостиТоваров (если его еще не было)
//	- в реквизите Организация шапки документа будет указана организация, которой принадлежит данный документ
//	- в табличной части Организации будут указаны все организации, связанные с ней по схеме Интеркампани, в т.ч. и она сама
//  	= до версии ERP 2.1.3 (и соответствующих ей версий КА и УТ) такого реквизита шапки не было,
//	  	  а документ расчета себестоимости создавался один на всю группу организаций, связанных по схеме Интеркампани
//	- (информация о документах расчета себестоимости в разрезе организаций хранится в общих параметрах расчета -
// 	  во временной таблице ВТДокументыРасчетаСебестоимости и свойстве ДокументыРасчетаПоОрганизациям)
// Для выполнения расчета без падения в случае возникновении ошибки, есть функция-обертка РассчитатьВсеВПопыткеИсключении().
//
//---------------------------------------------------------------------------------------------------------------------
// Выполнение расчета себестоимости.
//---------------------------------------------------------------------------------------------------------------------
// Непосредственный расчет выполняется в функции РассчитатьСебестоимостьПоГруппеОрганизаций()
// Схематически расчет выглядит следующим образом:
//	- выполняется инициализация общих параметров для всего алгоритма
//	  (см. ИнициализироватьПараметрыРасчета())
//	- последовательно вызываются процедуры-этапы расчета (подробнее ниже)
//		= некоторые этапы могут быть пропущены из-за настроек системы и/или параметров запуска расчета
//		= результатом выполнения этапа являются сформированные расчетные движения
//		  и/или "глобальные" временные таблицы (используемые на следующих этапах)
//	- выполняется запись измененных расчетных движений
//		= запись может выполняться в несколько потоков, с использованием фоновых заданий (см. свойство "МаксимальноеКоличествоФЗ")
//	- выполняется отражение измененных документов в учете
//
//---------------------------------------------------------------------------------------------------------------------
// Структура этапа расчета.
//---------------------------------------------------------------------------------------------------------------------
// Схематически процедура-этап расчета выглядит следующим образом:
//	- создается запрос выборки исходных данных для этапа; заполняются его свойства; запрос выполняется
//		= если целью этапа является только формирование "глобальных" временных таблиц, дальнейшее к нему не относит
//	- по данным запроса выполняется формирование расчетных движений по регистрам расчета себестоимости
//		= некоторые этапы движений не формируют - формируют только "глобальные" временные таблицы
// 		= код формирования движений вынесен в процедуры вида СформироватьДвижения<Имя регистра><Уточнение операции>()
// 		= внутри этих процедур для добавления движения обязательно используется процедура ДобавитьЗаписьВТаблицуДвижений()
//	- удаляются "локальные" временные таблицы, используемые только внутри этапа (см. УничтожитьВременныеТаблицы())
//	- сформированные движения перекладываются из таблиц значений во временные таблицы (см. КэшироватьСформированныеДвижения())
//	  	= при этом также выполняется обновление служебных кэшей оборотов и остатков (подробнее ниже)
//		= т.о. в промежутке между выборкой исходных данных и окончанием этапа обращаться к кэшам нельзя - они не актуализированы!
//
//---------------------------------------------------------------------------------------------------------------------
// Обращение к данным ИБ в запросах.
//---------------------------------------------------------------------------------------------------------------------
// Поскольку новые расчетные движения по регистрам себестоимости записываются в ИБ только в конце расчета,
// то в ходе расчета при обращении к таблицам этих регистров (реальным или виртуальным) надо соблюдать некоторые правила.
// (касается только регистров, перечисленных в ИнициализироватьРегистры())
// 
// 1. Обороты (движения) регистра за период должны получаться объединением
//	- основной таблицы регистра с отбором "Т.РасчетСебестоимости = Ложь" (первичные движения)
//	- временной таблицы ВТКэш<Имя регистра> (новые расчетные движения)
// Для удобства, по некоторым регистрам эти данные автоматически кэшируются во временной таблице ВТКэшЗаписи<Имя регистра>
// Список регистров указан в свойстве "РегистрыСРасчетнымиЗаписями" общих параметров расчета.
//
// 2. Остатки регистра (для регистров остатков) на конец периода должны получаться объединением
//	- остатков регистра на начало периода
//  - основной таблицы регистра с отбором "Т.РасчетСебестоимости = Ложь" (первичные движения за период)
//	- временной таблицы ВТКэш<Имя регистра> (новые расчетные движения за период)
// Для удобства, по некоторым регистрам эти данные автоматически кэшируются во временной таблице ВТКэшРасчетныеОстатки<Имя регистра>
// Список регистров указан в свойстве "РегистрыСРасчетнымиОстатками" общих параметров расчета.
//
// 3. Новые движения, сформированные на предыдущих этапах расчета, хранятся во временной таблице ВТКэш<Имя регистра>.
// Данная временная таблица создается для всех регистров, обслуживаемые механизмом расчета себестоимости.
//
// Также имеются ряд дополнительных особенностей работы с запросами (причины: оптимизация, платформа и т.д.)
//
// 1. Данные, используемые для отборов во всех запросах механизма расчета, хранятся 
//	- в общих параметрах расчета (организации, период, значения функциональных опций и т.п.)
//	- в "глобальных" временных таблицах (например, ВТОтборАналитикаПоПартнерам - см. ИнициализироватьВременныеТаблицыДляОтборов())
// Для установки этих параметров используется универсальная процедура ИнициализироватьСвойстваЗапроса()
// В результате, все запросы механизма расчета гарантировано используют одинаковые отборы.
// Эта же процедура устанавливает запросу общий менеджер временных таблиц, в котором хранятся все перечисленные выше таблицы кэшей.
//
// 2. Существует ошибка Платформы 30025997, в результате которой возникают проблемы с полем ВидДвижения во временных таблицах.
// Для обхода ошибки во всех временных таблицах вида ВТКэш, ВТКэшЗаписи, ВТКэшРасчетныеОстатки
// вместо стандартного поля ВидДвижения хранится техногенное поле СлужебноеВидДвиженияПриход с типом "Булево"
//	- в запросах к этим временным таблицам следует обращаться только к полю СлужебноеВидДвиженияПриход
//	- в таблицах значений, в которых предварительно накапливаются новые расчетные записи, есть только стандартное поле ВидДвижения
//	- преобразование поля между таблицей значения и временной таблицей выполняется автоматически, дополнительных действий не требуется
// 
//---------------------------------------------------------------------------------------------------------------------
// Отладка и поиск проблем.
//---------------------------------------------------------------------------------------------------------------------
// Для облегчения разработки, тестирования и поиска проблем реализован механизм протоколирования расчета.
// (см. процедуры вида ПротоколРасчета_...)
//	- при начале очередного этапа расчета в журнал регистрации делает запись - для отслеживания прогресса выполнения расчета.
//	- при окончании расчета в журнал регистрации выводится подробный протокол расчета.
// Также реализована возможность переопределения некоторых параметров расчета (см. РассчитатьВсе(), параметр ПараметрыОтладки)
//
//---------------------------------------------------------------------------------------------------------------------

#Область ПрограммныйИнтерфейс

#Область ОсновнойИнтерфейсМеханизма

// Запуск расчета себестоимости.
// (ранее - ВыполнитьРегламентноеЗаданиеРасчетСебестоимости() модуля менеджера документа расчета себестоимости)
//
// Параметры:
//	Дата - Дата - период расчета себестоимости
//	ПредварительныйРасчет - Булево - выполнять фактический или предварительный расчет;
//		предварительный расчет может выполняться
//			= регламентным заданием
//			= как подготовительный этап к распределению расходов на продукцию
//	Организация - СправочникСсылка.Организации - рассчитывать только по указанной организации;
//		также будут пересчитана себестоимость по организациям, связанным по схеме Интеркампани с указанной
//				- Массив - массив организаций, по которым надо рассчитать себестоимость, другие организации не рассчитываются
//	РегламентноеЗадание - Булево - если Истина, значит вызвана из регламентного задания расчета предварительной себестоимости
//	ПараметрыОтладки - Структура - предназначена для переопределения одноименных свойств структуры ПараметрыРасчета
//								   (подробнее см. пояснения в коде ИнициализироватьПараметрыРасчета() к параметру ПараметрыОтладки)
//
Процедура РассчитатьВсе(Дата, ПредварительныйРасчет, Организация = Неопределено, РегламентноеЗадание = Ложь, ПараметрыОтладки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПредварительныйРасчет И РегламентноеЗадание Тогда
		// Вызвано из регламентного задания расчета предварительной себестоимости
		Если НЕ ПолучитьФункциональнуюОпцию("РассчитыватьПредварительнуюСтоимостьРегламентнымЗаданием") Тогда
			Возврат; // задание отключено
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(ПараметрыОтладки) И ПараметрыОтладки.Свойство("ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ")) Тогда
		ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(НСтр("ru='Расчет себестоимости';uk='Розрахунок собівартості'"));
	КонецЕсли;
	
	// В ходе расчета будем запоминать регистры, по которым отключали итоги
	РегистрыСОтключеннымиИтогами = Новый Соответствие;
	
	// Инициализируем запрос для выборки данных
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Дата));
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		// Расчет по переданному массиву организаций
		ОтборОрганизации = Организация;
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		// Расчет по одной организации
		ОтборОрганизации = Новый Массив;
		ОтборОрганизации.Добавить(Организация);
	Иначе
		// Расчет по всем организациям
		ОтборОрганизации = Новый Массив;
	КонецЕсли;
    
	ПоВсемОрганизациям = НЕ ЗначениеЗаполнено(ОтборОрганизации);
    
	// Оставим только те организации, по которым в указанном периоде были движения по себестоимости
	МассивОрганизаций = ОрганизацииСДвижениямиПоСебестоимости(Дата, ОтборОрганизации);
	
	Если МассивОрганизаций.Количество() = 0 Тогда
		
		// Нет организаций для расчета - удалим ранее сформированные документы расчета себестоимости за период
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетСебестоимости.Ссылка,
		|	ИСТИНА КАК Удалять
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимости
		|ГДЕ
		|	РасчетСебестоимости.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ РасчетСебестоимости.ПометкаУдаления
		|	И (РасчетСебестоимости.Организация В (&ОтборОрганизации)
		|		ИЛИ &ПоВсемОрганизациям)";
        
		Запрос.УстановитьПараметр("ОтборОрганизации", 	ОтборОрганизации);
		Запрос.УстановитьПараметр("ПоВсемОрганизациям", ПоВсемОрганизациям);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
		УдалитьДокументыРасчетаСебестоимости(
			ТаблицаДокументов,
			Новый Структура("Удалять", Истина));
		
		Возврат;
		
	КонецЕсли;
	
	// Получим массив групп организаций, связанных по Интеркампани
	МассивГруппДляРасчета = СвязиОрганизацийПоСхемеИнтеркампани(Дата, МассивОрганизаций, Истина);
	МассивДляРасчета = Новый Массив; // все организации из МассивГруппДляРасчета
	
	// Выберем все не удаленные документы расчета себестоимости за расчетный период.
	// Если по организации уже существует подходящий документ расчета себестоимости, то новый документ создаваться не будет.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетСебестоимости.Ссылка КАК Ссылка,
	|	РасчетСебестоимости.Ссылка.Проведен КАК Проведен,
	|	РасчетСебестоимости.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РасчетСебестоимости.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НовыйФорматДокумента,
	|	РасчетСебестоимости.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимости
	|ГДЕ
	|	РасчетСебестоимости.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ РасчетСебестоимости.Ссылка.ПометкаУдаления
	|	И РасчетСебестоимости.Организация В (&ОтборОрганизации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	НовыйФорматДокумента УБЫВ,
	|	Проведен УБЫВ,
	|	ПредварительныйРасчет,
	|	РасчетСебестоимости.Ссылка.Дата УБЫВ";
	
	// Выполним расчет себестоимости по каждой из групп связанных организаций.
	Для Каждого ГруппаДляРасчета Из МассивГруппДляРасчета Цикл
		
		// Получим таблицу существующих документов расчета себестоимости для группы связанных организаций.
		Запрос.УстановитьПараметр("ОтборОрганизации", ГруппаДляРасчета);
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		// Удалим все документы расчета себестоимости в "старом формате" - когда организации не было в шапке документа.
		УдалитьДокументыРасчетаСебестоимости(
			ТаблицаДокументов,
			Новый Структура("НовыйФорматДокумента", Ложь));
		
		ВозможенРасчет = Истина;
		
		// Сохраним связь Организация - Документ расчета себестоимости, который будем пересчитывать.
		ДокументыОрганизаций = Новый Соответствие;
		
		// По организации за период может оказаться несколько документов расчета себестоимости - оставим только один.
        Для Каждого ТекущаяОрганизация Из ГруппаДляРасчета Цикл
            
			МассивДляРасчета.Добавить(ТекущаяОрганизация);
			
			СтрокиФакт = ТаблицаДокументов.НайтиСтроки(
				Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Ложь));
			
			Если СтрокиФакт.Количество() > 0 Тогда
				// Документы предварительного расчета больше не нужны.
				УдалитьДокументыРасчетаСебестоимости(
					ТаблицаДокументов,
					Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Истина));
			КонецЕсли;
			
			Если ПредварительныйРасчет Тогда
				
				Если СтрокиФакт.Количество() > 0 Тогда // уже был выполнен расчет фактической себестоимости
					
					Если РегламентноеЗадание Тогда
						
						// Т.к. уже есть документы фактического расчета,
						// то предварительный расчет регламентным заданием больше не выполняем.
						ВозможенРасчет = Ложь;
						
						// Предварительная себестоимость не рассчитывалась
						ЗаписьЖурналаРегистрации(
							ИмяСобытияЖурналаРегистрации(НСтр("ru='Отказ';uk='Відмова'")),
							УровеньЖурналаРегистрации.Информация,
							Метаданные.Справочники.Организации,
							ТекущаяОрганизация,
							НСтр("ru='Предварительная себестоимость не обновлена, т.к. выполнен расчет фактической себестоимости.';uk='Попередня собівартість не оновлена, тому що виконаний розрахунок фактичної собівартості.'"));
							
						Продолжить;
					
					КонецЕсли;
					
					// Пересчитаем предварительную себестоимость по документу с признаком "Фактический расчет".
					// При этом корректируются только движения по регистру сведений СтоимостьТоваров,
					// остальные движения останутся от расчета фактической себестоимости.
					
				Иначе
					
					// Расчета фактической себестоимости нет - нужно "штатно" рассчитать (или пересчитать) предварительную себестоимость.
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Оставим только один документ для расчета, самый поздний по дате (если почему-то документов осталось несколько).
			ДокументРасчета = УдалитьДокументыРасчетаСебестоимости(
				ТаблицаДокументов,
				Новый Структура("Организация", ТекущаяОрганизация),
				Истина);
			
			ДокументыОрганизаций.Вставить(ТекущаяОрганизация, ДокументРасчета);
			
		КонецЦикла;
			
		Если НЕ ВозможенРасчет Тогда
			// По данной группе организаций предварительный расчет себестоимости выполнить нельзя.
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПредварительныйРасчет Тогда
			// Определим метод оценки для группы организаций - он должен быть одинаковым у всех организаций.
			МетодОценки = ОпределитьМетодОценкиСтоимости(ГруппаДляРасчета, Дата);
		Иначе
			МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ПустаяСсылка();
		КонецЕсли;
		
		// Подготовим документы расчета себестоимости.
		МассивДокументов = Новый Массив;
		
		Для Каждого КлючИЗначение Из ДокументыОрганизаций Цикл
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументОбъект = КлючИЗначение.Значение.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.РасчетСебестоимостиТоваров.СоздатьДокумент();
			КонецЕсли;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
			
			ДанныеЗаполненияДокумента = Новый Структура;
			ДанныеЗаполненияДокумента.Вставить("Дата", 					Дата);
			ДанныеЗаполненияДокумента.Вставить("Организация", 			КлючИЗначение.Ключ);
			ДанныеЗаполненияДокумента.Вставить("ПредварительныйРасчет", ПредварительныйРасчет);
			ДанныеЗаполненияДокумента.Вставить("МетодОценки", 			МетодОценки);
			
			// В шапке документа будет указана организация, по которой рассчитывается себестоимость.
			// Она же будет продублирована в табличной части документа.
			ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);
			
			// Записываем документ проведенным, при этом его старые движения останутся до окончания расчета.
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			МассивДокументов.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
		РезультатРасчета = РассчитатьСебестоимостьПоГруппеОрганизаций(
			Дата,
			ГруппаДляРасчета,
			МассивДокументов,
			РегламентноеЗадание,
			ПредварительныйРасчет,
			МетодОценки,
			ПараметрыОтладки);
		
		// Дополним перечень регистров с отключенными итогами
		Для Каждого КлючИЗначение Из РезультатРасчета.РегистрыСОтключеннымиИтогами Цикл
			РегистрыСОтключеннымиИтогами.Вставить(КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЦикла;
    
	МассивНеРассчитываемых = ОбщегоНазначенияКлиентСервер.СократитьМассив(ОтборОрганизации, МассивДляРасчета);
	
	Если ПоВсемОрганизациям ИЛИ МассивНеРассчитываемых.Количество() > 0 Тогда
		
		// Удалим ранее сформированные документы расчета себестоимости по организациям, по которым расчет проводить не нужно.
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетСебестоимости.Ссылка,
		|	ИСТИНА КАК Удалять
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимости
		|ГДЕ
		|	РасчетСебестоимости.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ РасчетСебестоимости.ПометкаУдаления
		|	И (&ПоВсемОрганизациям
		|			И НЕ РасчетСебестоимости.Организация В (&МассивДляРасчета)
		|		ИЛИ
		|	   НЕ &ПоВсемОрганизациям
		|			И РасчетСебестоимости.Организация В (&МассивНеРассчитываемых))";
		
		Запрос.УстановитьПараметр("МассивДляРасчета", 		МассивДляРасчета);
		Запрос.УстановитьПараметр("МассивНеРассчитываемых", МассивНеРассчитываемых);
		Запрос.УстановитьПараметр("ПоВсемОрганизациям", 	ПоВсемОрганизациям);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
		УдалитьДокументыРасчетаСебестоимости(
			ТаблицаДокументов,
			Новый Структура("Удалять", Истина));
		
	КонецЕсли;
    
	// Включим итоги, которые были отключены (при многопоточной записи движений)
	Если ЗначениеЗаполнено(РегистрыСОтключеннымиИтогами) Тогда
		
		ПараметрыОбработчикаЗадания = Новый Массив;
		ПараметрыОбработчикаЗадания.Добавить(РегистрыСОтключеннымиИтогами); // менеджеры регистров

		ФоновыеЗадания.Выполнить(
			"РасчетСебестоимости.ВключитьИтогиПоРегистрамФоновымЗаданием",
			ПараметрыОбработчикаЗадания,
			,
			НСтр("ru='Расчет себестоимости, включение итогов.';uk='Розрахунок собівартості, включення підсумків.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обертка для запуска расчета - выполняет расчет в Попытке - Исключении
// Параметры аналогичны процедуре РассчитатьВсе()
//
// Возвращаемое значение - Булево - признак успешного выполнения расчета.
//
Функция РассчитатьВсеВПопыткеИсключении(Дата, ПредварительныйРасчет, Организация = Неопределено, РегламентноеЗадание = Ложь, ПараметрыОтладки = Неопределено) Экспорт
	
	БылиОшибки = Ложь;
	
	Попытка
		РассчитатьВсе(
			Дата,
			ПредварительныйРасчет,
			Организация,
			РегламентноеЗадание,
			ПараметрыОтладки);
	Исключение
		
		БылиОшибки  = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если НЕ (СтрНайти(ТекстОшибки, "ОбщийМодуль.РасчетСебестоимости.Модуль(") > 0
		 И СтрНайти(ТекстОшибки, "ВызватьИсключение") > 0) Тогда
			
			// Если исключение возникло в этом модуле, то не надо его дублировать в ЖР, т.к.
			// информация об ошибке уже должна быть выведена в ЖР в месте ее обнаружения.
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат НЕ БылиОшибки;
	
КонецФункции

// Дополняет перечень организаций из МассивОрганизаций остальными организациями ИБ, связанными с ними по схеме Интеркампани.
//
// Параметры:
//	Дата - Дата - период расчета себестоимости
//	МассивОрганизаций - Массив или СправочникСсылка.Организации - отбор по организациям
//	Группировать - Булево - возвращать сгруппированный результат, или в все найденные организации в виде обычного массива
//
// Возвращаемое значение:
//	Массив - если Группировать, то результат аналогичен возвращаемому значению ВсеСвязиОрганизацийПоСхемеИнтеркампани(),
//			 но возвращены будут только те группы (массивы) организаций, в которые входят организации из МассивОрганизаций
//			 Если НЕ Группировать - то эти же группы будут слиты в один массив.
//			 Т.е. по сути эта функция лишь отбор для ВсеСвязиОрганизацийПоСхемеИнтеркампани()
//			 с возможностью представления результат в "линейном" виде.
//
Функция СвязиОрганизацийПоСхемеИнтеркампани(Дата, МассивОрганизаций, Группировать) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(МассивОрганизаций) = Тип("Массив") Тогда
		ОтборПоОрганизациям = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивОрганизаций);
	Иначе // ссылка на организацию
		ОтборПоОрганизациям = Новый Массив;
		ОтборПоОрганизациям.Добавить(МассивОрганизаций);
	КонецЕсли;
	
	// Получим все организации ИБ, сгруппированные по связям схемы Интеркампани
	МассивГрупп = ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата);
	
	// Оставим такие группы организаций, в которых хоть одна организация группы
	// нуждается в пересчете (входит в требуемый ОтборПоОрганизациям)
	Результат = Новый Массив;
	
	Для Каждого ЭлементГруппа Из МассивГрупп Цикл
		Для Каждого Организация Из ЭлементГруппа Цикл
			
			Если ОтборПоОрганизациям.Найти(Организация) <> Неопределено Тогда
				
				// Эту группу связанных организаций надо пересчитать
				Если Группировать Тогда
					// Результат в виде "массив из массивов"
					Результат.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ЭлементГруппа));
				Иначе
					// Результат в виде "массив"
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ЭлементГруппа);
				КонецЕсли;
				
				Прервать; // переходим к следующей группе
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыВызываемыеИзМодуляНабораЗаписейРегистра

// Возвращает признак записи движений по регистру механизмом расчета себестоимости.
//
// Параметры:
//	НаборЗаписей - набор записей регистра
//
// Возвращаемое значение:
//	Булево - Истина, если движения записываются регламентной операцией закрытия месяца
//
Функция ДвиженияЗаписываютсяРасчетомСебестоимости(НаборЗаписей) Экспорт
	
	Возврат НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());
	
КонецФункции

// Вызывается ПередЗаписью набора записей регистра - сохраняет движения документа, сформированные расчетом себестоимости.
// Такие движения формируются механизмом расчета себестоимости и имеют реквизит РасчетСебестоимости = Истина.
// При перепроведении документа эти движения добавляются к набору движений, сформированному самим документом.
//
// Параметры:
//	НаборЗаписей - НаборЗаписейРегистраНакопления - свойство ЭтотОбъект модуля набора записей
//	Замещение - Булево - режим записи набора (параметр события ПередЗаписью)
//
Процедура СохранитьДвиженияСформированныеРасчетомСебестоимости(НаборЗаписей, Замещение) Экспорт
	
	Если НЕ Замещение Тогда
		Возврат; // движения, сформированные расчетом себестоимости, не затираются
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат; // движения, сформированные расчетом себестоимости, надо удалить
	КонецЕсли;
	
	// Готовим вспомогательные данные
	ОписаниеРегистра = СформироватьОписаниеРегистра(НаборЗаписей.Метаданные());
	
	ТекстПоляОсновнойТаблицыРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "
		|	Рег.");
		
	// Готовим запрос для выборки движений, сформированных расчетом себестоимости
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ %1
	|ИЗ
	|	РегистрНакопления.%2 КАК Рег
	|ГДЕ
	|	Рег.РасчетСебестоимости
	|	И Рег.Регистратор = &Регистратор
	|	И НАЧАЛОПЕРИОДА(Рег.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(&Регистратор КАК %3).Дата, МЕСЯЦ)
	|");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ТекстПоляОсновнойТаблицыРегистра,
		ОписаниеРегистра.ИмяРегистра,
		Регистратор.Метаданные().ПолноеИмя());
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	// Дополним набор записей документа движениями, сформированных расчетом себестоимости
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзОбменов

// При получении из периферийного узла данных, требующих перерасчета себестоимости, добавляет запись в регистр ЗаданияКРасчетуСебестоимости.
//
// Параметры:
//	ПолученныеДанные - Произвольный - это параметр ЭлементДанных одноименного события плана обмена
//
// Возвращаемое значение:
//	Булево - признак того, что ПолученныеДанные - это данные, относящиеся к механизму расчета себестоимости
//
Функция ПриПолученииДанныхОтПодчиненного(ПолученныеДанные) Экспорт
	
	Попытка
		МетаданныеПолученныхДанных = ПолученныеДанные.Метаданные();
	Исключение
		Возврат Ложь; // у этого объекта нет метода для получения его метаданных - объект не нужно обрабатывать
	КонецПопытки;
	
	ВходящиеДанные = ВходящиеДанныеМеханизма(Истина);
	Если ВходящиеДанные.Получить(МетаданныеПолученныхДанных) = Неопределено
	 ИЛИ НЕ Метаданные.РегистрыНакопления.Содержит(МетаданныеПолученныхДанных) Тогда
		// Только изменение регистра накопления, являющегося исходными данными для расчета,
		// приводит к необходимости расчета себестоимости.
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если МетаданныеПолученныхДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ИмяПоляОрганизации = "Организация";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ОрганизацияВладелец") <> Неопределено Тогда
		ИмяПоляОрганизации = "ОрганизацияВладелец";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ВидЗапасов") <> Неопределено Тогда
		ИмяПоляОрганизации = "ВидЗапасов";
		ИмяКонтейнераОрганизации = "Справочник.ВидыЗапасов"; // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "Ссылка";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено Тогда
		ИмяПоляОрганизации = "АналитикаУчетаПоПартнерам";
		ИмяКонтейнераОрганизации = "РегистрСведений.АналитикаУчетаПоПартнерам";  // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "КлючАналитики";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	Иначе
		Возврат Ложь; // невозможно определить организацию из данных регистра
	КонецЕсли;
	
	ТаблицаНабора = ПолученныеДанные.Выгрузить(, "Период," + ИмяПоляОрганизации);
	ТаблицаНабора.Свернуть("Период," + ИмяПоляОрганизации);
	
	Запрос.УстановитьПараметр("Т",	    ТаблицаНабора);
	Запрос.УстановитьПараметр("Ссылка", ПолученныеДанные.Отбор.Регистратор.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|	Т.%ИмяПоляОрганизации          КАК Организация
	|ПОМЕСТИТЬ ВТПолученныеДанные
	|ИЗ
	|	&Т КАК Т
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизации", ИмяПоляОрганизации);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период 	  КАК Период,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПолученныеДанные КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|	Т.%ИмяПоляОрганизации          КАК Организация
	|ИЗ
	|	РегистрНакопления.%ИмяПолученныхДанных КАК Т
	|ГДЕ
	|	Т.Регистратор = &Ссылка
	|";
	
	Если ЗначениеЗаполнено(ИмяКонтейнераОрганизации) Тогда
		
		// Организация хранится не в поле объекта, а в каком-то другом месте - с ним надо сделать соединение
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Период КАК Период,
		|	Контейнер.%ИмяПоляОрганизацииВКонтейнере КАК Организация
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|(" + СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТПериоды", "") + ") КАК Т
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ИмяКонтейнераОрганизации КАК Контейнер
		|ПО Т.Организация = Контейнер.%ИмяПоляСвязиВКонтейнере
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период 	  КАК Месяц,
	|	Т.Организация КАК Организация,
	|	&Ссылка 	  КАК Документ
	|ИЗ
	|	ВТПериоды КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК ЗаданияКРасчетуСебестоимости
	|			ПО Т.Период = ЗаданияКРасчетуСебестоимости.Месяц
	|			 И Т.Организация = ЗаданияКРасчетуСебестоимости.Организация
	|			 И ЗаданияКРасчетуСебестоимости.Документ = &Ссылка
	|ГДЕ
	|	ЗаданияКРасчетуСебестоимости.НомерЗадания ЕСТЬ NULL
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПолученныхДанных", 			МетаданныеПолученныхДанных.Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяКонтейнераОрганизации",  		ИмяКонтейнераОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляСвязиВКонтейнере",  		ИмяПоляСвязиВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизацииВКонтейнере",  ИмяПоляОрганизацииВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляОрганизации",  			ИмяПоляОрганизации);
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	
	Возврат Истина; // данные обработаны успешно
	
КонецФункции

#КонецОбласти

#Область ПроцедурыВызываемыеИзРегламентныхЗаданийИРегламентныхОпераций

// Обновления стоимости товаров регламентным заданием.
//
Процедура ПредварительныйРасчетСебестоимости() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	// Предварительный расчет
	СебестоимостьРассчитана = РассчитатьВсеВПопыткеИсключении(
		ТекущаяДатаСеанса(),
		Истина,
		,
		Истина);

КонецПроцедуры

// Возвращает текущее состояние расчета себестоимости.
//
// Параметры:
//	ОтборОрганизации - Массив - организации, по которым надо получить состояние расчета
//	ПериодРасчета - Дата - месяц расчета себестоимости
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца - текущее состояние расчета себестоимости
//
Функция СостояниеРасчетаСебестоимости(ОтборОрганизации, ПериодРасчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Дополним отбор связанными по Интеркампани организациями
	МассивОрганизаций = СвязиОрганизацийПоСхемеИнтеркампани(ПериодРасчета, ОтборОрганизации, Ложь);
	
	Если МассивОрганизаций.Количество() = 0 Тогда
		// В указанном месяце нет движений по регистрам себестоимости
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	
	// Запрос составляем из трех "частей":
	// - "общие" проверки
	// - проверки исходных данных для расчета (аналогично этапу 1.1)
	// - проверка результатов расчета (аналогично этапу 4.6)
	// Требования к текстам запросов каждой из "частей":
	// - каждая "часть" итогового запроса может состоять из нескольких запросов.
	// - символ ";" в тексте запроса должен использоваться только для разделения запросов пакета
	// - результат каждой "части" должен возвращать ее последний запрос - если его результат пустой, то считаем что проверка пройдена успешно
	// Для определения номеров запросов, результат которых надо анализировать, выполняем разбор текстов запросов по символу ";".
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", 			НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  			КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", 	Новый Граница(КонецМесяца(ПериодРасчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций",   	МассивОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацииСДвижениями",	ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета, МассивОрганизаций));
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
							  ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	// Требования к тексту этого запроса см. выше
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РассчитанныеОрганизации
	|		ПО Организации.Ссылка = РассчитанныеОрганизации.Организация
	|			И (РассчитанныеОрганизации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РассчитанныеОрганизации.Ссылка.Проведен)
	|			И (НЕ РассчитанныеОрганизации.Ссылка.ПредварительныйРасчет)
	|ГДЕ
	|	Организации.Ссылка В(&ОрганизацииСДвижениями)
	|	И РассчитанныеОрганизации.Организация ЕСТЬ NULL 
	|";
	
	ТекстПроверкиИсходныхДанных 	= ТекстЗапросаПроверкаКорректностиИсходныхДанныхДоРасчета();
	ТекстПроверкиРезультатовРасчета = ТекстЗапросаПроверкаКорректностиОстатковВРегистреСебестоимостьТоваровПослеРасчета();
	
	// Определим номера запросов, результаты которых необходимо анализировать
	НомераЗапросов = Новый Массив(3);
	НомераЗапросов[0] = СтрЧислоВхождений(Запрос.Текст, ";");
	НомераЗапросов[1] = СтрЧислоВхождений(ТекстПроверкиИсходныхДанных, ";") + 1 + НомераЗапросов[0];
	НомераЗапросов[2] = СтрЧислоВхождений(ТекстПроверкиРезультатовРасчета, ";") + 1 + НомераЗапросов[1];
	
	Запрос.Текст = Запрос.Текст + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|" + ТекстПроверкиИсходныхДанных + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|" + ТекстПроверкиРезультатовРасчета;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[НомераЗапросов[0]].Пустой()
	   И Результат[НомераЗапросов[1]].Пустой()
	   И Результат[НомераЗапросов[2]].Пустой() Тогда
		// По всем организациям есть документы расчета себестоимости и в регистрах нет некорректных остатков
		СостояниеРасчета = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		// Не выполнены все предшествующие регламентные операции или предыдущий расчет был выполнен некорректно
		СостояниеРасчета = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	КонецЕсли;
	
	// Состояние "НеВыполнено" будет установлено только в случае, если аналогичный статус установлен у этапа расчета партий
	
	Возврат СостояниеРасчета;	
	
КонецФункции

// Дополняет параметры обработки ЖурналРегистрации для просмотра ключевых событий расчета себестоимости.
// Параметры процедуры соответствуют аналогичным параметрам формы этой обработки.
//
// Параметры;
//	ОтборПоУровню  - СписокЗначений - отбор по уровням событий журнала регистрации
//	ОтборПоСобытию - Массив - отбор по событиям журнала регистрации
//
Процедура ДополнитьОтборыДляЖурналаРегистрации(ОтборПоУровню, ОтборПоСобытию) Экспорт
	
	Если ОтборПоУровню.НайтиПоЗначению("Ошибка") = Неопределено Тогда
		ОтборПоУровню.Добавить("Ошибка", "Ошибка"); // для ошибок расчета
	КонецЕсли;
	Если ОтборПоУровню.НайтиПоЗначению("Информация") = Неопределено Тогда
		ОтборПоУровню.Добавить("Информация", "Информация"); // для протокола расчета
	КонецЕсли;
	
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации());
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации());
	
КонецПроцедуры

// Возвращает строковое представление массива организаций.
//
// Параметры:
//	МассивОрганизаций - Массив - организации, для которых надо получить представление
//
// Возвращаемое значение:
//	Строка - строковое представление массива организаций
//
Функция ПредставлениеОрганизаций(МассивОрганизаций, Разделитель = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеОрганизаций = "";
	
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ВК;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Наименование КАК ОрганизацияПредставление
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка В(&МассивОрганизаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеОрганизаций = ПредставлениеОрганизаций
			+ ?(ПустаяСтрока(ПредставлениеОрганизаций), "", Разделитель)
			+ Выборка.ОрганизацияПредставление;
	КонецЦикла;

	Возврат ПредставлениеОрганизаций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АлгоритмРасчетаСебестоимости

#Область ИнициализацияПараметровРасчетаСебестоимости

// Перед началом расчета заполняет все необходимые параметры и инициализирует все структуры данных, используемые алгоритма расчета.
// Если какая-то сущность используется более чем в одном этапе, то ее стоит описать в этой процедуре.
//
Функция ИнициализироватьПараметрыРасчета(Дата, МассивОрганизаций, ДокументыРасчетаСебестоимости,
			РегламентноеЗадание, ПредварительныйРасчет, МетодОценки, ПараметрыОтладки)
	
	ПараметрыРасчета = Новый Структура; // контейнер всех общих параметров, используемых механизмом расчета себестоимости
	
	// Создаем описание данных для протоколирования расчета себестоимости
	ПротоколРасчета_НачалоРасчета(ПараметрыРасчета);
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ИнициализироватьПараметрыРасчета");
	
	// Общие параметры расчета
	ПараметрыРасчета.Вставить("МассивОрганизаций", 			   МассивОрганизаций);
	ПараметрыРасчета.Вставить("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);
	ПараметрыРасчета.Вставить("РегламентноеЗадание", 		   РегламентноеЗадание);
	ПараметрыРасчета.Вставить("ПредварительныйРасчет", 		   ПредварительныйРасчет);
	ПараметрыРасчета.Вставить("МетодОценки", 			  	   МетодОценки);
	ПараметрыРасчета.Вставить("МестоВызоваРасчета", 		   НСтр("ru='Не указано';uk='Не зазначено'")); // откуда позвали расчет, для протокола; придет в ПараметрыОтладки
	ПараметрыРасчета.Вставить("ИспользоватьРаздельныйУчетПоНалогообложению", Константы.ИспользоватьРаздельныйУчетПоНалогообложению.Получить());
	ПараметрыРасчета.Вставить("ВключатьНДСВСебестоимостьПриУсловнойПродаже", 	НДСОбщегоНазначенияПовтИсп.ВключатьНДСВСебестоимостьПриУсловнойПродаже());
	ПараметрыРасчета.Вставить("ИсключатьНДСИзСебестоимостиПриВосстановленииНДС",НДСОбщегоНазначенияПовтИсп.ИсключатьНДСИзСебестоимостиПриВосстановленииНДС());
	
	// Периода расчета и границы периода
	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода", 		 НачалоМесяца(Дата));
	РасчетныйПериод.Вставить("КонецПериода",  		 ?(ПредварительныйРасчет, КонецДня(Дата), КонецМесяца(Дата)));
	РасчетныйПериод.Вставить("ГраницаНачалоПериода", Новый Граница(РасчетныйПериод.НачалоПериода, ВидГраницы.Исключая));
	РасчетныйПериод.Вставить("ГраницаКонецПериода",  Новый Граница(РасчетныйПериод.КонецПериода,  ВидГраницы.Включая));
	
	ПараметрыРасчета.Вставить("РасчетныйПериод", РасчетныйПериод);
	
	// Общий менеджер временных таблиц для всех этапов расчета
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц",	   Новый МенеджерВременныхТаблиц);
	
	// Параметры решения СЛУ
	ПараметрыРасчета.Вставить("ТребуемаяТочность", 			   0.000001); // точность решения СЛУ
	ПараметрыРасчета.Вставить("МаксКоличествоИтераций",		   200); // циклов решения СЛУ
	ПараметрыРасчета.Вставить("ЗначениеПогрешности", 		   1); // какую сумму считать ошибкой округления
	
	// Ограничения на размер таблиц значений и наборов записей регистров:
	ПараметрыРасчета.Вставить("КоличествоСтрокТЗ", 		   	   100000); // макс. количество строк в таблице значений
	ПараметрыРасчета.Вставить("РазмерНабораЗаписей",		   10000); // макс. количество строк в наборе записей; 0 - запись данных в ИБ не выполняется
	
	// Многопоточная запись (если запущено не в файловой ИБ и не из регламентного задания)
	// Стабильность многопоточной записи на разном железе зависит от сочетания нескольких факторов:
	// - количества активных фоновых заданий (чем больше заданий, тем больше надо памяти для сервера Предприятия)
	// - количества движений, записываемых одним заданием (чем больше движений - тем больше памяти надо этому заданию)
	// - одновременности выполнения записи одного регистра разными заданиями (чем больше заданий пишет один регистр,
	//		тем больше вероятность возникновения ошибок, например, "Lock request time out period exceeded")
	ПараметрыРасчета.Вставить("МаксимальноеКоличествоФЗ",
		?(ОбщегоНазначения.ИнформационнаяБазаФайловая()
		  	ИЛИ ПредварительныйРасчет, 			   			   1, 5)); // максимальное количество одновременно выполняемых заданий записи
	ПараметрыРасчета.Вставить("КоличествоДвиженийВФЗ",	   	   100000); // количество движений регистра, записываемое одним фоновым заданием
	ПараметрыРасчета.Вставить("ПоследовательнаяЗаписьРегистра",Истина); // надо ли порции записи ожидать окончания записи предыдущей порции этого регистра
	ПараметрыРасчета.Вставить("СтекЗаданийЗаписи", 		       Новый Массив); // стек вызовов фоновых заданий для записи движений
	ПараметрыРасчета.Вставить("ТаблицаЗаданийЗаписи", 		   Новый ТаблицаЗначений); // описание каждого запущенного задания
	ПараметрыРасчета.ТаблицаЗаданийЗаписи.Колонки.Добавить("ИдентификаторЗадания");
	ПараметрыРасчета.ТаблицаЗаданийЗаписи.Колонки.Добавить("ПредыдущееЗадание");
	ПараметрыРасчета.ТаблицаЗаданийЗаписи.Колонки.Добавить("ИмяРегистра");
	ПараметрыРасчета.ТаблицаЗаданийЗаписи.Колонки.Добавить("КоличествоДвижений");
	ПараметрыРасчета.Вставить("ОтключатьИтогиПередЗаписью",    Истина); // выполнять запись движений с отключенными текущими итогами по регистру остатков
	ПараметрыРасчета.Вставить("РегистрыСОтключеннымиИтогами",  Новый Соответствие); // менеджеры регистров, у которых были отключены итоги
	
	// Массивы операций для отбора в запросах
	ПараметрыРасчета.Вставить("МассивыОпераций", Новый Структура);
	
	ПараметрыРасчета.МассивыОпераций.Вставить("ВнешниеПоступления", 		МассивОперацийВнешнееПоступление());
	ПараметрыРасчета.МассивыОпераций.Вставить("Реализации", 				МассивОперацийРеализации());
	ПараметрыРасчета.МассивыОпераций.Вставить("ПередачиТоваров", 			МассивОперацийПередачиТоваров());
	ПараметрыРасчета.МассивыОпераций.Вставить("ВозвратыПрошлыхПериодов", 	МассивОперацийВозвратыПрошлыхПериодов());
	ПараметрыРасчета.МассивыОпераций.Вставить("ОценкаОстаткаТоваровПоФИФО", МассивОперацийДляОценкиОстаткаТоваровПоФИФО());
	
	// Функциональные опции, используемые механизмом расчета себестоимости
	// Также они устанавливаются в качестве одноименных параметров при инициализации запросов
	// ФО ИспользоватьПартионныйУчет добавлена только для вывода в протокол расчета.
	ПараметрыРасчета.Вставить("ФО", Новый Структура);
	ИменаФО =
		"ИспользоватьПартионныйУчет,
		|ИспользоватьУчетПрочихДоходовРасходов,
		|УчитыватьСебестоимостьТоваровПоВидамЗапасов,
		|ФормироватьВидыЗапасовПоГруппамФинансовогоУчета,
		|ФормироватьФинансовыйРезультат";
	Для Каждого КлючИЗначение Из Новый Структура(ИменаФО) Цикл
		ПараметрыРасчета.ФО.Вставить(КлючИЗначение.Ключ, ПолучитьФункциональнуюОпцию(КлючИЗначение.Ключ));
	КонецЦикла;
	
	// Отладочные свойства
	ПараметрыРасчета.Вставить("Отладка", 			  	       		   Новый Структура);
	
	// 1. Если сформировано движение с пустым регистратором, то это свойство позволяет заполнить регистратор документом расчета себестоимости.
	// Движения с пустым регистратором говорят об ошибке в метаданных или в алгоритме расчета.
	// Данное свойство позволяет обойти такую ошибку - установить "неправильный" регистратор, который позволит записать движение.
	ПараметрыРасчета.Отладка.Вставить("ИсправлятьПустойРегистратор",   Ложь); 
	
	// 2. Данное свойство позволяет очистить все старые расчетные движения перед новым расчетом - эмулирует первый расчет периода.
	// Следует использовать только для отладки, т.к. очистка может выполняться достаточно долго.
	ПараметрыРасчета.Отладка.Вставить("ОчищатьСтарыеДвижения", 		   Ложь);
	
	// 3. Если используется многопоточная запись движений, то должно соблюдаться условие:
	// движения одного регистратора по одному регистру должны делаться только одним фоновым заданием.
	// Иначе, в лучшем случае, фоновое задание упадет с ошибкой превышения времени ожидания блокировки,
	// а в худшем - сможет затереть движения другого задания по этому регистру и регистратору.
	ПараметрыРасчета.Отладка.Вставить("КонтролироватьРегистраторыВФЗ", Ложь);
	// Вспомогательная таблица для хранения информации о том, сколько раз в фоновое задание передавалось сочетание регистр/регистратор.
	// Если в итоге получится хоть одна строка с "Количество > 1" - это критичная ошибка.
	ПараметрыРасчета.Отладка.Вставить("РегистраторыВФЗ", 		   	   Новый ТаблицаЗначений);
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Колонки.Добавить("ИмяРегистра");
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Колонки.Добавить("Регистратор");
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Колонки.Добавить("Количество");
	
	// 4. Для анализа решения СЛУ можно сохранить таблицы, используемые при решении СЛУ, в виде файлов mxl в указанный каталог.
	// Если имя каталога не заполнено, сохранение таблиц не выполняется.
	ПараметрыРасчета.Отладка.Вставить("КаталогДляСохраненияДанныхСЛУ", "");
	
	// Переопределение свойств ПараметрыРасчета из свойств ПараметрыОтладки
	Если ЗначениеЗаполнено(ПараметрыОтладки) Тогда
		
		// Для целей отладки расчета переопределим требуемые параметры расчета - возьмем их значения из соответствующих свойств ПараметрыОтладки
		// Можно переопределить
		//	- все параметры структуры ПараметрыРасчета с примитивными типами, существующие к моменту выполнения этого кода
		// 	- параметры вложенных структур ПараметрыРасчета.ФО и ПараметрыРасчета.Отладка
		ИменаВложенныхСтруктур = "ПротоколРасчета, МассивыОпераций, РасчетныйПериод, ФО, Отладка";
		ИменаСуществующихСтруктурВПараметрахОтладки = "";
		
		Для Каждого КлючИЗначение Из Новый Структура(ИменаВложенныхСтруктур) Цикл
			Если ПараметрыОтладки.Свойство(КлючИЗначение.Ключ) Тогда
				ИменаСуществующихСтруктурВПараметрахОтладки = ИменаСуществующихСтруктурВПараметрахОтладки
					+ ?(ИменаСуществующихСтруктурВПараметрахОтладки = "", "", ", ") + КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета, ПараметрыОтладки, , ИменаСуществующихСтруктурВПараметрахОтладки);
		
		Если ПараметрыОтладки.Свойство("ФО") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыРасчета.ФО, ПараметрыОтладки.ФО);
		КонецЕсли;
		Если ПараметрыОтладки.Свойство("Отладка") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыРасчета.Отладка, ПараметрыОтладки.Отладка);
		КонецЕсли;
		
	КонецЕсли;
	
	// Служебные параметры
	ПараметрыРасчета.Вставить("БылиОшибки", 		Ложь); // были ли выявлены какие-то ошибки в расчете
	ПараметрыРасчета.Вставить("ОбщееКоличествоФЗ", 	0); // общее количество выполненных фоновых заданий записи
	ПараметрыРасчета.Вставить("ОшибкиФЗ", 		   	Новый Массив); // тексты ошибок, с которыми падали фоновые задания записи
	ПараметрыРасчета.Вставить("ОшибкиДвижений",	   	Новый Массив); // тексты ошибок о некорректных регистраторах
	ПараметрыРасчета.Вставить("СтрокаСоединенияИБ",	СтрокаСоединенияИнформационнойБазы());
	
	// Далее инициализируем "сложные" параметры - описание регистров и служебные временные таблицы
	
	// Формирует общие временные таблицы для отбора данных в запросах
	ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	
	// Формирует описания движений по регистрам, поддерживаемых данным механизмом
	ИнициализироватьРегистры(ПараметрыРасчета);
	
	// Формирует временную таблицу ВТДокументыРасчетаСебестоимости и свойство ДокументыРасчетаПоОрганизациям
	ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета);
	
	Если ПараметрыРасчета.Отладка.ОчищатьСтарыеДвижения Тогда
		// Для отладки - полная очистка всех движений, сформированных предыдущим расчетом
		ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета);
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Действия, выполняемые при окончании расчета.
//
Функция ПриОкончанииРасчета(ПараметрыРасчета)
	
	ПараметрыРасчета.МенеджерВременныхТаблиц.Закрыть();
	
	ПротоколРасчета_ОкончаниеРасчета(ПараметрыРасчета);
	
КонецФункции


#Область ИнициализацияРегистров

// Инициализирует общие параметры расчета, описывающие обслуживаемые механизмом расчета регистры.
//
Процедура ИнициализироватьРегистры(ПараметрыРасчета)
	
	// Регистры, для которых надо иметь сформированные таблицы расчетных остатков на конец периода
	// К "реальным" остаткам этих регистров обращаться нельзя, т.к. они некорректны - содержат результаты предыдущего расчета
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОстатками",
		Новый Структура("СебестоимостьТоваров, ПрочиеРасходы, ПрочиеДоходы", Истина, Истина, Истина));
	
	// Регистры, для которых надо иметь сформированные таблицы корректных записей за период
	// К основным таблицам этих регистров обращаться нельзя, т.к. они содержат результаты предыдущего расчета
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиЗаписями",
		Новый Структура("СебестоимостьТоваров, ВыручкаИСебестоимостьПродаж, ПрочиеРасходы, ПрочиеДоходы", Истина, Истина, Истина, Истина));
	
	// Значения этих структур РегистрыСРасчетнымиОстатками и РегистрыСРасчетнымиЗаписями определяет,
	// будет ли выполняться автообновления расчетных остатков/движений при кэшировании сформированных движений.
	// Если требуется отключить автообновление, то перед обращением к расчетным таблицам надо добавить вызов
	// ОбновитьРасчетныеОстаткиРегистра() или ОбновитьРасчетныеЗаписиРегистра()
	
	// Описание всех поддерживаемых регистров
	ПараметрыРасчета.Вставить("Движения", Новый Структура);
	
	Для Каждого ИсходящиеДанные Из ИсходящиеДанныеМеханизма() Цикл
		ИнициализироватьДанныеРегистра(ПараметрыРасчета, ИсходящиеДанные.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует общий параметр расчета, описывающий один конкретный регистр.
//
Процедура ИнициализироватьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра)
	
	ОписаниеРегистра = СформироватьОписаниеРегистра(МетаданныеРегистра);
	
	// Создадим временную таблицу для кэширования всех новых движений регистра
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТКэш" + ОписаниеРегистра.ИмяРегистра,
		ОписаниеРегистра.Таблица,
		ОписаниеРегистра.ПоляКэшаРегистра);
		
	// Добавим описание регистра в параметры расчета
	ПараметрыРасчета.Движения.Вставить(ОписаниеРегистра.ИмяРегистра, ОписаниеРегистра);
	
	// Создадим временную таблицу для кэширования расчетных остатков
	Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		
		Запрос = Новый Запрос;
		ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%ИзмеренияРегистра,
		|	%РесурсыРегистраСумма
		|ПОМЕСТИТЬ ВТКэшПервичныеОстатки%ИмяРегистра
		|ИЗ
		|	(ВЫБРАТЬ
		|		%ИзмеренияРегистра,
		|		%РесурсыРегистраОбороты
		|	ИЗ
		|		РегистрНакопления.%ИмяРегистра КАК Т
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И НЕ Т.РасчетСебестоимости
		|		И Т.Активность
		|		%ОтборПоОрганизацииОбороты
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		%ИзмеренияРегистра,
		|		%РесурсыРегистраОстатки
		|	ИЗ
		|		РегистрНакопления.%ИмяРегистра.Остатки(&ГраницаНачалоПериода, %ОтборПоОрганизацииОстатки) КАК Т
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	%ИзмеренияРегистра";
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизацииОбороты = "И Т.Организация В (&МассивОрганизаций)";
			ОтборПоОрганизацииОстатки = "Организация В (&МассивОрганизаций)";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизацииОбороты = "И Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
			ОтборПоОрганизацииОстатки = "И АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
		Иначе
			ОтборПоОрганизацииОбороты = "";
			ОтборПоОрганизацииОстатки = "";
		КонецЕсли;
			
		ИзмеренияРегистра = СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
		
		РесурсыРегистраСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОписаниеРегистра.РесурсыРегистраССуффиксом,
			"СУММА(Т.",
			")");
		РесурсыРегистраОбороты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОписаниеРегистра.РесурсыРегистраССуффиксом,
			"ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т.",
			"");
		РесурсыРегистраОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОписаниеРегистра.РесурсыРегистраССуффиксом,
			"Т.",
			"Остаток");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", 			   ОписаниеРегистра.ИмяРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизацииОбороты", ОтборПоОрганизацииОбороты);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизацииОстатки", ОтборПоОрганизацииОстатки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистра", 		   ИзмеренияРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраСумма", 	   РесурсыРегистраСумма);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОбороты",    РесурсыРегистраОбороты);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОстатки",    РесурсыРегистраОстатки);
		
		Запрос.Выполнить();
		
		ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
		
	КонецЕсли;
	
	// Создадим временную таблицу для кэширования записей основной таблицы регистра
	Если ПараметрыРасчета.РегистрыСРасчетнымиЗаписями.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		
		ОбновитьРасчетныеЗаписиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует описание свойств и полей регистра, обслуживаемого механизмом расчета.
//
Функция СформироватьОписаниеРегистра(МетаданныеРегистра)
	
	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("ИмяРегистра",          	  МетаданныеРегистра.Имя);
	ОписаниеРегистра.Вставить("ПолноеИмяРегистра",    	  МетаданныеРегистра.ПолноеИмя());
	ОписаниеРегистра.Вставить("ЭтоРегистрНакопления", 	  Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра));
	
	ОписаниеРегистра.Вставить("ЕстьОрганизация", 		  МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьАналитикаПартнеров",   МетаданныеРегистра.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено);
	ОписаниеРегистра.Вставить("НадоОбновитьРасчетныйКэш", Ложь); // были сформированы движения, еще не учтенные в расчетных остатках/записях
	
	Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
		МенеджерРегистра = РегистрыНакопления[ОписаниеРегистра.ИмяРегистра];
	Иначе
		МенеджерРегистра = РегистрыСведений[ОписаниеРегистра.ИмяРегистра];
	КонецЕсли;
	
	ОписаниеРегистра.Вставить("МетаданныеРегистра", 	  МетаданныеРегистра);
	ОписаниеРегистра.Вставить("МенеджерРегистра", 		  МенеджерРегистра);
	ОписаниеРегистра.Вставить("ЕстьСвойствоВидДвижения",
		ОписаниеРегистра.ЭтоРегистрНакопления И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
	
#Область РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях

	// В конфигурации есть документы, которые могут делать движения по регистру (и/или)
	//	- в разных расчетных периодах
	//	- по разным организациям
	// Для таких документов при расчете надо сохранять не только первичные движения в расчетном периоде,
	// но и все (первичные + расчетные) движения по другим периодам и организациям.
	
	ДокументыССохраняемымиДвижениями = ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(Истина, Истина);
	
	ОписаниеРегистра.Вставить("РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях", Новый Соответствие);
	
	Для Каждого КлючИЗначение Из ДокументыССохраняемымиДвижениями Цикл
		Если КлючИЗначение.Ключ.Движения.Содержит(МетаданныеРегистра) Тогда
			ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях.Вставить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
#КонецОбласти
	
#Область Таблица

	// Таблица для накапливания формируемых движений
	ОписаниеРегистра.Вставить(
		"Таблица", 
		МенеджерРегистра.СоздатьНаборЗаписей().ВыгрузитьКолонки());
		
	// Колонку "Регистратор" поместим на первое место
	КолонкаРегистратор = ОписаниеРегистра.Таблица.Колонки.Найти("Регистратор");
	ОписаниеРегистра.Таблица.Колонки.Сдвинуть(
		КолонкаРегистратор,
		-ОписаниеРегистра.Таблица.Колонки.Индекс(КолонкаРегистратор));
		
	// Для остаточных регистров накопления создадим служебную колонку СлужебноеВидДвиженияПриход.
	// В ней будем хранить булево представление вида движения (обход ошибки Платформы 30025997)
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ОписаниеРегистра.Таблица.Колонки.Добавить("СлужебноеВидДвиженияПриход",	Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
#КонецОбласти
	
#Область ПоляРегистра

	// Список всех полей регистра, за исключением "техногенных"
	// Перед именем каждого поля стоят символы "%1" - для автоподстановки имен таблиц в запросах
	ПоляОсновнойТаблицыРегистра = ""; // здесь поле "ВидДвижения"
	ПоляКэшаРегистра  			= ""; // здесь поле "СлужебноеВидДвиженияПриход"
	ИгнорируемыеПоля  			= Новый Структура("НомерСтроки, Активность, МоментВремени, ВидДвижения");
	
	Для Каждого Колонка Из ОписаниеРегистра.Таблица.Колонки Цикл
		Если Колонка.Имя = "СлужебноеВидДвиженияПриход" Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + "ВидДвижения";
			ПоляКэшаРегистра = ПоляКэшаРегистра
				+ ?(ПоляКэшаРегистра = "", "", ", ") + "%1" + "СлужебноеВидДвиженияПриход";
		ИначеЕсли НЕ ИгнорируемыеПоля.Свойство(Колонка.Имя) Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + Колонка.Имя;
			ПоляКэшаРегистра = ПоляКэшаРегистра
				+ ?(ПоляКэшаРегистра = "", "", ", ") + "%1" + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	ОписаниеРегистра.Вставить("ПоляКэшаРегистра", 			 ПоляКэшаРегистра);
	
#КонецОбласти

#Область ИзмеренияРегистра

	// Список всех измерений регистра
	// Перед именем каждого измерения стоят символы "%1" - для автоподстановки имен таблиц в запросах
	ИзмеренияРегистра = "";
	Для Каждого Мета Из МетаданныеРегистра.Измерения Цикл
		ИзмеренияРегистра = ИзмеренияРегистра
			+ ?(ИзмеренияРегистра = "", "", ", ") + "%1" + Мета.Имя;
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ИзмеренияРегистра", ИзмеренияРегистра);
	
#КонецОбласти

#Область РесурсыРегистра

	// Список всех ресурсов регистра
	// Перед именем каждого ресурса стоят символы "%1" - для автоподстановки имен таблиц в запросах
	РесурсыРегистра = "";
	РесурсыРегистраССуффиксом = "";
	Для Каждого Мета Из МетаданныеРегистра.Ресурсы Цикл
		РесурсыРегистра = РесурсыРегистра
			+ ?(РесурсыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		РесурсыРегистраССуффиксом = РесурсыРегистраССуффиксом
			+ ?(РесурсыРегистраССуффиксом = "", "", ", ") + "%1" + Мета.Имя + "%2 КАК " + Мета.Имя;
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("РесурсыРегистра", 		   РесурсыРегистра);
	ОписаниеРегистра.Вставить("РесурсыРегистраССуффиксом", РесурсыРегистраССуффиксом);
	
#КонецОбласти

	Возврат ОписаниеРегистра;
	
КонецФункции

// Для регистров, к остаткам которых на конец периода есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшПервичныеОстатки<ИмяРегистра> - в ней будет "постоянная" сумма начальных остатков и первичных движений за период
// - ВТКэшРасчетныеОстатки<ИмяРегистра> - в ней будет пересчитываемая сумма ПервичныеОстатки + Кэш сформированных движений
// Т.о. на любом этапе расчета будет готовая таблица расчетных остатков,
// которую надо использовать вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Остатки()
Процедура ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь)
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшРасчетныеОстатки" + ОписаниеРегистра.ИмяРегистра);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если НЕ Инициализация Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ВТКэшРасчетныеОстатки%ИмяРегистра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	%ИзмеренияРегистра,
	|	%РесурсыРегистраСумма
	|ПОМЕСТИТЬ ВТКэшРасчетныеОстатки%ИмяРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		%ИзмеренияРегистра,
	|		%РесурсыРегистраОстатки
	|	ИЗ
	|		ВТКэшПервичныеОстатки%ИмяРегистра КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		%ИзмеренияРегистра,
	|		%РесурсыРегистраОбороты
	|	ИЗ
	|		ВТКэш%ИмяРегистра КАК Т
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	%ИзмеренияРегистра";
	
	ИзмеренияРегистра = СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
	
	РесурсыРегистраСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"СУММА(Т.",
		")");
	РесурсыРегистраОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"Т.",
		"");
	РесурсыРегистраОбороты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т.",
		"");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", 			ОписаниеРегистра.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИзмеренияРегистра", 		ИзмеренияРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраСумма", 	РесурсыРегистраСумма);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОстатки", РесурсыРегистраОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РесурсыРегистраОбороты", РесурсыРегистраОбороты);
	
	Запрос.Выполнить();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Для регистров, к основным таблицам которых есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшЗаписи<ИмяРегистра> - в ней будет объединение первичных движений за период и новых расчетных движений
// Т.о. на любом этапе расчета будет готовая таблица "реальных" записей регистра,
// которую надо использовать вместо основной таблицы РегистрНакопления.<ИмяРегистра>
Процедура ОбновитьРасчетныеЗаписиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь)
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшЗаписи" + ОписаниеРегистра.ИмяРегистра);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если НЕ Инициализация Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ВТКэшЗаписи%ИмяРегистра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	%ПоляОсновнойТаблицыРегистра
	|ПОМЕСТИТЬ ВТКэшЗаписи%ИмяРегистра
	|ИЗ
	|	РегистрНакопления.%ИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.РасчетСебестоимости
	|	И Т.Активность
	|	%ОтборПоОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%ПоляКэшаРегистра
	|ИЗ
	|	ВТКэш%ИмяРегистра КАК Т
	|";
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизации = "И Т.Организация В (&МассивОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
		ОтборПоОрганизации = "И Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
	Иначе
		ОтборПоОрганизации = "";
	КонецЕсли;
		
	ПоляКэшаРегистра 			= СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "Т.");
	ПоляОсновнойТаблицыРегистра = СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т.");
	
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра,
			"Т.ВидДвижения",
			"ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СлужебноеВидДвиженияПриход");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", 			     ОписаниеРегистра.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации",   		 ОтборПоОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра", 			 ПоляКэшаРегистра);
	
	Запрос.Выполнить();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

#КонецОбласти

// Формирует общие временные таблицы для отбора данных в запросах и свойство ОрганизацияПоАналитикеПартнеров.
//
Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики 				КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация 				КАК Организация,
	|	АналитикаПоПартнерам.Контрагент					КАК Контрагент,
	|	АналитикаПоПартнерам.Партнер 					КАК Партнер,
	|	АналитикаПоПартнерам.НаправлениеДеятельности 	КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВТОтборАналитикаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В (&МассивОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|";
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");
	Запрос.Выполнить();
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Если ПараметрыРасчета.Отладка.ИсправлятьПустойРегистратор Тогда
		
		// Сформируем соответствие, из которого по ключу аналитики можно получить организацию
		ОрганизацияПоАналитикеПартнеров = Новый Соответствие;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.КлючАналитики,
		|	Т.Организация
		|ИЗ
		|	ВТОтборАналитикаПоПартнерам КАК Т
		|";
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОрганизацияПоАналитикеПартнеров.Вставить(Выборка.КлючАналитики, Выборка.Организация);
		КонецЦикла;
	
		ПараметрыРасчета.Вставить("ОрганизацияПоАналитикеПартнеров", ОрганизацияПоАналитикеПартнеров);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу ВТДокументыРасчетаСебестоимости и свойство ДокументыРасчетаПоОрганизациям
//
Процедура ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	// Поместим рассчитываемые документы расчета себестоимости во временную таблицу ВТДокументыРасчетаСебестоимости
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетСебестоимостиТоваров.Ссылка,
	|	РасчетСебестоимостиТоваров.Организация КАК Организация
	|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимости
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
	|ГДЕ
	|	РасчетСебестоимостиТоваров.Ссылка В(&ДокументыРасчетаСебестоимости)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор,
	|	""ВыручкаИСебестоимостьПродаж"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Т
	|ГДЕ
	|	Т.Регистратор В(&ДокументыРасчетаСебестоимости)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор,
	|	""Закупки""
	|ИЗ
	|	РегистрНакопления.Закупки КАК Т
	|ГДЕ
	|	Т.Регистратор В(&ДокументыРасчетаСебестоимости)
	|";
	
	Запрос.УстановитьПараметр("ДокументыРасчетаСебестоимости", ПараметрыРасчета.ДокументыРасчетаСебестоимости);
	
	// Документ расчета себестоимости больше не имеет движений по регистрам:
	//	- ВыручкаИСебестоимостьПродаж
	//	- Закупки
	// Кроме того, теперь документ расчета себестоимости при перепроведении не очищает свои движения автоматически.
	// Поэтому если перепроводим старый документ расчета себестоимости, то движения по этим регистрам надо почистить "вручную".
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления[Выборка.ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	// Заполним соответствие Организация - Документ расчета себестоимости
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка,
	|	ДокументыРасчетаСебестоимости.Организация
	|ИЗ
	|	ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости";
	
	ДокументыРасчетаПоОрганизациям = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументыРасчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Ссылка);
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("ДокументыРасчетаПоОрганизациям", ДокументыРасчетаПоОрганизациям);
	
КонецПроцедуры


#Область ОтборыПоХозяйственнымОперациям

Функция МассивОперацийРеализации()

	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияВРозницу);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СторноРеализации);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетДавальцу);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДавальцу);

	Возврат МассивОпераций;

КонецФункции

Функция МассивОперацийПередачиТоваров()

	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	Возврат Массив;

КонецФункции

Функция МассивОперацийВозвратыПрошлыхПериодов()

	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТарыОтКлиентаПрошлыхПериодов);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы);
	Возврат МассивОпераций;

КонецФункции

Функция МассивОперацийВнешнееПоступление()

	// Формируется список всех хоз. операций, которые являются внешним поступлением (известна их стоимость).
	ХозОперации = Новый Массив;
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет); // сторнирование реализации регл. учета по управленческой организации
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчикаФиксированнаяСтоимость);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОтчетДавальцу);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаВПроизводство);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика);
	
	// Возврат прошлого периода используется только для операций расчета по среднему,
	// т.к. оценивать остатки для ФИФО не корректно.
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТарыОтКлиентаПрошлыхПериодов);
	
	// Операции по комиссионным и давальческим товарам
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	
	Возврат ХозОперации;

КонецФункции

Функция МассивОперацийДляОценкиОстаткаТоваровПоФИФО()

	ХозОперации = Новый Массив;
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет); // сторнирование реализации регл. учета по управленческой организации
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчикаФиксированнаяСтоимость);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОтчетДавальцу);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаВПроизводство);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика);
	
	// Операции по комиссионным и давальческим товарам
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	
	Возврат ХозОперации;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЭтапыРасчетаСебестоимости

// Этап 0 - начало расчета
Функция РассчитатьСебестоимостьПоГруппеОрганизаций(Дата, МассивОрганизаций, ДокументыРасчетаСебестоимости, 
			РегламентноеЗадание, ПредварительныйРасчет, МетодОценки, ПараметрыОтладки)
	
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета(
		Дата,
		МассивОрганизаций,
		ДокументыРасчетаСебестоимости,
		РегламентноеЗадание,
		ПредварительныйРасчет,
		МетодОценки,
		ПараметрыОтладки);
	
	// Этап 1.1
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда
		ПроверитьКорректностьИсходныхДанныхДоРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет
	 И ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
		
		// Этап 2.1
		// Формирует движения по регистрам:
		// - СебестоимостьТоваров
		// - ПрочиеРасходы
		// - ПрочиеДоходы
		// - ДвиженияНоменклатураДоходыРасходы
		// - ДвиженияНоменклатураНоменклатура
		СкорректироватьСтоимостьСписанияЗапасовПоФИФОСкользящая(ПараметрыРасчета);
		
		// Этап 2.2
		// Формирует движения по регистрам:
		// - ВыручкаИСебестоимостьПродаж
		// - Закупки
		СкорректироватьСтоимостьПродажПоФИФОСкользящая(ПараметрыРасчета);
		
		
		// Этап 2.5
		// Формирует движения по регистрам:
		// - СтоимостьТоваров
		ЗарегистрироватьСтоимостьФИФО(ПараметрыРасчета);
		
	Иначе

		// Этап 3.1
		// Формирует движения по регистрам:
		// - СебестоимостьТоваров
		// - ПрочиеРасходы
		Если Не ПараметрыРасчета.ПредварительныйРасчет И ПараметрыРасчета.ИспользоватьРаздельныйУчетПоНалогообложению Тогда	
			ВключитьИсключитьНДСВСтоимость(ПараметрыРасчета);
		КонецЕсли;
		
		// Этап 3.2
		// Формирует временную таблицу ВТДопРасходов (для фактического расчета она пустая)
		РаспределитьРасходыНаСебестоимость(ПараметрыРасчета);

		// Этап 3.3
		// Формирует временную таблицу ВТВозвраты (для фактического расчета она пустая)
		// Формирует движения по регистрам (если выполняется фактический расчет):
		// - СебестоимостьТоваров
		// - ВыручкаИСебестоимостьПродаж
		// - ПрочиеРасходы
		// - ПрочиеДоходы
		// - ДвиженияНоменклатураДоходыРасходы
		// - ДвиженияНоменклатураНоменклатура
		СкорректироватьСтоимостьВозвратовПрошлыхПериодов(ПараметрыРасчета);

		
		// Этап 3.5
		// Формирует временную таблицу ВтПередачиТоваров
		СформироватьТаблицуПередачМеждуОрганизациями(ПараметрыРасчета);
		
		// Этап 3.6
		// Формирует временную таблицу ВтУзлыКорректировки
		СформироватьУзлыКорректировкиСписанияСтоимости(ПараметрыРасчета);

		Если ПараметрыРасчета.КоличествоУзлов <> 0 Тогда
			
			// Этап 3.7
			// Формирует временные таблицы ВтТаблицаРешений, ВтПеремещенияСписания
			РассчитатьСтоимость(ПараметрыРасчета, Ложь);
			
			// Этап 3.8
			// Формирует движения по регистрам:
			// - СтоимостьТоваров
			ЗарегистрироватьСтоимость(ПараметрыРасчета, Ложь);
		
		КонецЕсли;

		
		УничтожитьВременныеТаблицы(
			ПараметрыРасчета.МенеджерВременныхТаблиц,
			"ВтУзлыКорректировки, ВтПередачиТоваров
			|" + ?(ПараметрыРасчета.КоличествоУзлов <> 0, ", ВтТаблицаРешений, ВтПеремещенияСписания", ""));
		
		// Этап 3.10
		// Формирует временную таблицу ВтУзлыКорректировки
		СформироватьУзлыКорректировкиСписанияСтоимостиРегл(ПараметрыРасчета);
		
		Если ПараметрыРасчета.КоличествоУзловРегл <> 0 Тогда

			// Этап 3.11
			// Формирует временные таблицы ВтТаблицаРешений, ВтПеремещенияСписания
			РассчитатьСтоимость(ПараметрыРасчета, Истина);

			// Этап 3.12
			// Формирует движения по регистрам:
			// - СтоимостьТоваров
			ЗарегистрироватьСтоимость(ПараметрыРасчета, Истина);

		КонецЕсли;
		
		
		УничтожитьВременныеТаблицы(
			ПараметрыРасчета.МенеджерВременныхТаблиц,
			"ВтУзлыКорректировки, ВТВозвраты, ВТДопРасходов
			|" + ?(ПараметрыРасчета.КоличествоУзловРегл <> 0, ", ВтТаблицаРешений, ВтПеремещенияСписания", ""));
			
		Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда
			
			// Этап 3.14
			// Формирует движения по регистрам:
			// - СебестоимостьТоваров
			// - ПрочиеРасходы
			// - ПрочиеДоходы
			// - ДвиженияНоменклатураДоходыРасходы
			// - ДвиженияНоменклатураНоменклатура
			СкорректироватьСтоимостьСписанияЗапасов(ПараметрыРасчета);
			
			
			// Этап 3.17
			// Формирует движения по регистрам:
			// - ВыручкаИСебестоимостьПродаж
			// - Закупки
			СкорректироватьСтоимостьПродаж(ПараметрыРасчета);
			
			// Этап 3.18
			// Формирует движения по регистрам:
			// - ВыручкаИСебестоимостьПродаж
			Если ПараметрыРасчета.ИспользоватьРаздельныйУчетПоНалогообложению Тогда	
				ВключитьИсключитьНДСВСтоимостьПродаж(ПараметрыРасчета);
			КонецЕсли;

			// Этап 3.19
			// Формирует движения по регистрам:
			// - СебестоимостьТоваров
			// - ПрочиеРасходы
			Если ПараметрыРасчета.ЗначениеПогрешности > 0 Тогда
				СписатьОшибкиОкругленияРасчетаСебестоимости(ПараметрыРасчета);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда
		
		Если ПараметрыРасчета.ФО.ФормироватьФинансовыйРезультат Тогда
			// Этап 4.1
			// Формирует движения по регистрам:
			// - ФинансовыеРезультаты
			РаспределитьВыручкуПоНаправлениямДеятельности(ПараметрыРасчета);
		Иначе
			// Этап 4.2
			// Формирует движения по регистрам:
			// - ПрочиеДоходы
			// - ПрочиеРасходы
			СписатьПрочиеДоходыРасходы(ПараметрыРасчета);
		КонецЕсли;
		
		// Этап 4.3
		// Формирует движения по регистрам:
		// - ПрочиеАктивыПассивы
		ОтразитьПрибылиИУбытки(ПараметрыРасчета);
		
	КонецЕсли;
	
	// Записывает движения и формирует временную таблицу ВТИзмененныеДокументы
	ЗаписатьСформированныеДвижения(ПараметрыРасчета);
	
	
	// Ожидает окончания заданий записи для последующей проверки корректности результатов расчета
	ПриОкончанииЗаписиДвижений(ПараметрыРасчета);
	
	// Этап 4.6
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда
		ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	ПриОкончанииРасчета(ПараметрыРасчета);
	
	Возврат Новый Структура("РегистрыСОтключеннымиИтогами", ПараметрыРасчета.РегистрыСОтключеннымиИтогами);
	
КонецФункции

// Этап 1.1
// Проверяет корректность исходных данных для расчета себестоимости
//
Процедура ПроверитьКорректностьИсходныхДанныхДоРасчета(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьИсходныхДанныхДоРасчета");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета, Ложь);
	
	Запрос.Текст = ТекстЗапросаПроверкаКорректностиИсходныхДанныхДоРасчета();

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстОшибки = "";
		Если Выборка.ВидПроверки = "Остатки" Тогда
			ПредставлениеТовара = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='""%1"", склад ""%2"", организация ""%3""';uk='""%1"", склад ""%2"", організація ""%3""'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия),
				Выборка.Склад,
				Выборка.Организация);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Номенклатура %1 - обнаружен отрицательный остаток по количеству (%2 ед.) на конец периода %3 в регистре ""Себестоимость товаров""';uk='Номенклатура %1 - виявлено від''ємний залишок по кількості (%2 од.) на кінець періоду %3 в регістрі ""Собівартість товарів""'"),
				ПредставлениеТовара,
				- Выборка.Количество,
				Формат(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, "ДФ='MMMM yyyy'"));
				
		ИначеЕсли Выборка.ВидПроверки = "Передачи" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не оформлены передачи товаров от отправителя ""%1"" на получателя ""%2"" по складу ""%3"" за %4';uk='Не оформлені передачі товарів від відправника ""%1"" на одержувача ""%2"" по складу ""%3"" за %4'"),
				Выборка.Владелец,
				Выборка.Организация,
				Выборка.Склад,
				Формат(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, "ДФ='MMMM yyyy'"));
				
		ИначеЕсли Выборка.ВидПроверки = "ЛишниеПередачи" Тогда
			ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Номенклатура ""%1"" - за %2 от отправителя ""%3"" на получателя ""%4"" по складу ""%5"" передано больше, чем требуется на %6 ед.';uk='Номенклатура ""%1""-  за %2 від відправника ""%3"" на одержувача ""%4"" по складу ""%5"" передано більше, ніж потрібно на %6 од.'"),
				ПредставлениеТовара,
				Формат(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, "ДФ='MMMM yyyy'"),
				Выборка.Владелец,
				Выборка.Организация,
				Выборка.Склад,
				Выборка.Количество);
		
		ИначеЕсли Выборка.ВидПроверки = "Комиссия" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не оформлены отчеты комитенту ""%1"" о списании по организации ""%2"" за %3';uk='Не оформлені звіти комітенту ""%1"" про списання по організації ""%2"" за %3'"),
				Выборка.Владелец,
				Выборка.Организация,
				Формат(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, "ДФ='MMMM yyyy'"));
				
		ИначеЕсли Выборка.ВидПроверки = "Работы" Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не отражено поступление %1 шт. работы ""%2"" в подразделение ""%3"" организации ""%4"" за %5';uk='Не відображено надходження %1 шт. роботи ""%2"" в підрозділ ""%3"" організації ""%4"" за %5'"),
				- Выборка.Количество,
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика),
				Выборка.Склад,
				Выборка.Организация,
				Формат(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, "ДФ='MMMM yyyy'"));
				
		КонецЕсли;
		
		// Ошибка в исходных данных
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкиДляЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
		
		ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, ТекстОшибки);
		
	КонецЦикла;
	
	// Добавим запись в протокол расчета
	СтрокаПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Найдено ошибок: %1';uk='Знайдено помилок: %1'"),
		ПротоколРасчета_ПредставлениеЗначения(Выборка.Количество())
			+ ?(Выборка.Количество() = 0, "", " !"));
		
	ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, СтрокаПротокола);
	
	ПараметрыРасчета.БылиОшибки = ПараметрыРасчета.БылиОшибки ИЛИ (Выборка.Количество() > 0);
	
КонецПроцедуры


// Этап 2.1
Процедура СкорректироватьСтоимостьСписанияЗапасовПоФИФОСкользящая(ПараметрыРасчета)

	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СкорректироватьСтоимостьСписанияЗапасовПоФИФОСкользящая");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	 ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|		И УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента) ТОГДА
	|		(ВЫБОР
	|			КОГДА УчетСебестоимости.Количество < 0 ТОГДА 2
	|			КОГДА УчетСебестоимости.ХозяйственнаяОперация =
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов) ТОГДА 2
	|			ИНАЧЕ 3 КОНЕЦ)
	|		ИНАЧЕ 2 КОНЕЦ КАК Порядок,
	|	УчетСебестоимости.Период						КАК Период,
	|	УчетСебестоимости.Регистратор					КАК Регистратор,
	|	УчетСебестоимости.Организация					КАК Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов					КАК ВидЗапасов,
	|	ВЫБОР КОГДА Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|	КОГДА УчетСебестоимости.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) ТОГДА
	|		УчетСебестоимости.ВидЗапасов.ТипЗапасов
	|	ИНАЧЕ
	|		 (ВЫБОР УчетСебестоимости.РазделУчета
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КОНЕЦ)
	|	КОНЕЦ КАК ТипЗапасов,
	|	ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцу))
	|	ТОГДА
	|		УчетСебестоимости.КорАналитикаУчетаНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК АналитикаУчетаПродукции,
	|	УчетСебестоимости.ПериодПродажи					КАК ПериодПродажи,
	|
	|	ВЫБОР
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                   						КАК ВидДвижения,
	|	УчетСебестоимости.РазделУчета					КАК РазделУчета,
	|	УчетСебестоимости.АналитикаУчетаПоПартнерам		КАК АналитикаУчетаПоПартнерам,
	|	УчетСебестоимости.ЗаказКлиента					КАК ЗаказКлиента,
	|	УчетСебестоимости.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	УчетСебестоимости.КорАналитикаУчетаНоменклатуры	КАК КорАналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.КорРазделУчета				КАК КорРазделУчета,
	|	УчетСебестоимости.КорВидЗапасов					КАК КорВидЗапасов,
	|	КорАналитикаНоменклатуры.Склад					КАК КорСклад,
	|	УчетСебестоимости.КорОрганизация				КАК КорОрганизация,
	|	УчетСебестоимости.Подразделение					КАК Подразделение,
	|	УчетСебестоимости.АналитикаРасходов				КАК АналитикаРасходов,
	|	УчетСебестоимости.СтатьяРасходовСписания		КАК СтатьяРасходовСписания,
	|	УчетСебестоимости.СтатьяРасходовСписания.ВариантРаспределенияРасходов КАК ВариантРаспределенияРасходов,
	|	УчетСебестоимости.АналитикаАктивовПассивов		КАК АналитикаАктивовПассивов,
	|	УчетСебестоимости.СтатьяАктивовПассивов			КАК СтатьяАктивовПассивов,
	|	УчетСебестоимости.СтатьяДоходов					КАК СтатьяДоходов,
	|	УчетСебестоимости.АналитикаДоходов				КАК АналитикаДоходов,
	|	УчетСебестоимости.Регистратор					КАК ДокументДвижения,
	|	УчетСебестоимости.НалоговоеНазначение      		КАК НалоговоеНазначение,
	|	УчетСебестоимости.КорНалоговоеНазначение      	КАК КорНалоговоеНазначение,
	|	УчетСебестоимости.ИдентификаторСтроки			КАК ИдентификаторСтроки,
	|	УчетСебестоимости.ГруппаПродукции				КАК ГруппаПродукции,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		УчетСебестоимости.ВидЗапасов
	|	ИНАЧЕ
	|		Аналитика.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		УчетСебестоимости.КорВидЗапасов
	|	ИНАЧЕ
	|		КорАналитикаНоменклатуры.Номенклатура
	|	КОНЕЦ КАК КорИсточникГФУНоменклатуры,
	|	Аналитика.Склад КАК Склад,
	|
	|	ВЫБОР КОГДА КорАналитикаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|	КОГДА УчетСебестоимости.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) ТОГДА
	|		УчетСебестоимости.ВидЗапасов.ТипЗапасов
	|	ИНАЧЕ
	|		 (ВЫБОР УчетСебестоимости.РазделУчета
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КОНЕЦ)
	|	КОНЕЦ КАК КорТипЗапасов,
	|	ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&МассивОперацийРеализации) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Продажа,
	|	ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию))
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаМеждуОрганизациями,
	|	ВЫБОР КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	 ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|		И УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратОтКлиента,
	|
	|	СУММА(ВЫБОР КОГДА УчетСебестоимости.Количество < 0 ТОГДА
	|		0 - УчетСебестоимости.Количество
	|	ИНАЧЕ
	|		УчетСебестоимости.Количество
	|	КОНЕЦ) КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК НДСРеглКорректировкаСтоимости,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	СУММА(
	|		ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация
	|			= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов)
	|		ТОГДА
	|			- УчетСебестоимости.Количество
	|		КОГДА УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			И УчетСебестоимости.Количество < 0
	|		ТОГДА
	|			- УчетСебестоимости.Количество
	|		ИНАЧЕ
	|			УчетСебестоимости.Количество
	|		КОНЕЦ) КАК ИсходноеКоличество,
	|	СУММА(УчетСебестоимости.КорСтоимость) КАК КорСтоимость,
	|	СУММА(УчетСебестоимости.Стоимость) КАК ИсходнаяСтоимость,
	|	СУММА(УчетСебестоимости.СтоимостьРегл) КАК ИсходнаяСтоимостьРегл,
	|	СУММА(УчетСебестоимости.СтоимостьРеглБезНДС) КАК ИсходнаяСтоимостьРеглБезНДС,
	|	СУММА(УчетСебестоимости.НДСРегл) КАК ИсходнаяНДСРегл,
	|	СУММА(УчетСебестоимости.СтоимостьБезНДС) КАК ИсходнаяСтоимостьБезНДС
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорАналитикаНоменклатуры
	|	ПО
	|		УчетСебестоимости.КорАналитикаУчетаНоменклатуры = КорАналитикаНоменклатуры.Ссылка
	|	
	|	
	|ГДЕ
	|	(НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|		ИЛИ УчетСебестоимости.ХозяйственнаяОперация 
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов)
	|		ИЛИ УчетСебестоимости.ХозяйственнаяОперация
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноСписанияНаРасходы)
	|		ИЛИ УчетСебестоимости.ХозяйственнаяОперация 
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|		ИЛИ УчетСебестоимости.ХозяйственнаяОперация 
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|		ИЛИ (УчетСебестоимости.ХозяйственнаяОперация 
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) И УчетСебестоимости.Количество <> 0)
	|		ИЛИ (УчетСебестоимости.ХозяйственнаяОперация 
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение) И УчетСебестоимости.Количество <> 0)
	|		ИЛИ (УчетСебестоимости.ХозяйственнаяОперация 
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцу) И УчетСебестоимости.Количество <> 0)
	|		ИЛИ (УчетСебестоимости.ХозяйственнаяОперация 
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика) И УчетСебестоимости.Количество <> 0)
	|		ИЛИ (УчетСебестоимости.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями И УчетСебестоимости.Количество <> 0)
	|		ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		ИЛИ УчетСебестоимости.ХозяйственнаяОперация
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров)
	|		ИЛИ УчетСебестоимости.ХозяйственнаяОперация
	|				= ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПересортицаТоваров)
	|	)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	 ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|		И УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента) ТОГДА
	|		(ВЫБОР
	|			КОГДА УчетСебестоимости.Количество < 0 ТОГДА 2
	|			КОГДА УчетСебестоимости.ХозяйственнаяОперация =
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов) ТОГДА 2
	|			ИНАЧЕ 3 КОНЕЦ)
	|		ИНАЧЕ 2 КОНЕЦ,
	|	УчетСебестоимости.СтатьяДоходов,
	|	УчетСебестоимости.КорАналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.АналитикаДоходов,
	|	УчетСебестоимости.СтатьяРасходовСписания,
	|	УчетСебестоимости.СтатьяРасходовСписания.ВариантРаспределенияРасходов,
	|	УчетСебестоимости.КорВидЗапасов,
	|	УчетСебестоимости.АналитикаРасходов,
	|	УчетСебестоимости.СтатьяАктивовПассивов,
	|	УчетСебестоимости.АналитикаАктивовПассивов,
	|	УчетСебестоимости.НалоговоеНазначение,
	|	УчетСебестоимости.КорНалоговоеНазначение,
	|	УчетСебестоимости.ИдентификаторСтроки,
	|	УчетСебестоимости.ПериодПродажи,
	|	УчетСебестоимости.ГруппаПродукции,
	|	УчетСебестоимости.КорРазделУчета,
	|	УчетСебестоимости.КорОрганизация,
	|	УчетСебестоимости.Подразделение,
	|	ВЫБОР
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	УчетСебестоимости.Период,
	|	УчетСебестоимости.ВидЗапасов,
	|	ВЫБОР КОГДА Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|	КОГДА УчетСебестоимости.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) ТОГДА
	|		УчетСебестоимости.ВидЗапасов.ТипЗапасов
	|	ИНАЧЕ
	|		 (ВЫБОР УчетСебестоимости.РазделУчета
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КОНЕЦ)
	|	КОНЕЦ,
	|	УчетСебестоимости.ХозяйственнаяОперация,
	|	УчетСебестоимости.РазделУчета,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.АналитикаУчетаПоПартнерам,
	|	УчетСебестоимости.ЗаказКлиента,
	|	УчетСебестоимости.Организация,
	|	УчетСебестоимости.Регистратор,
	|	ВЫБОР КОГДА КорАналитикаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|	КОГДА УчетСебестоимости.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) ТОГДА
	|		УчетСебестоимости.ВидЗапасов.ТипЗапасов
	|	ИНАЧЕ
	|		 (ВЫБОР УчетСебестоимости.РазделУчета
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КОНЕЦ)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&МассивОперацийРеализации) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		УчетСебестоимости.ВидЗапасов
	|	ИНАЧЕ
	|		Аналитика.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		УчетСебестоимости.КорВидЗапасов
	|	ИНАЧЕ
	|		КорАналитикаНоменклатуры.Номенклатура
	|	КОНЕЦ,
	|	Аналитика.Склад,
	|	КорАналитикаНоменклатуры.Склад,
	|	ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) ТОГДА
	|		УчетСебестоимости.КорАналитикаУчетаНоменклатуры
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	 ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|		И УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	&НачалоПериода КАК Период,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Партии.ВидЗапасов КАК ВидЗапасов,
	|	Партии.ТипЗапасов КАК ТипЗапасов,
	|	Партии.АналитикаУчетаПродукции,
	|	Партии.ПериодПродажи,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидДвижения,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказКлиента,
	|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО КАК КорСклад,
	|	НЕОПРЕДЕЛЕНО КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО КАК ВариантРаспределенияРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК ДокументДвижения,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначение,
	|	НЕОПРЕДЕЛЕНО КАК КорНалоговоеНазначение,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаПродукции,
	|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУНоменклатуры,
	|	НЕОПРЕДЕЛЕНО КАК КорИсточникГФУНоменклатуры,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|
	|	НЕОПРЕДЕЛЕНО КАК КорТипЗапасов,
	|	НЕОПРЕДЕЛЕНО КАК Продажа,
	|	НЕОПРЕДЕЛЕНО КАК ЭтоПередачаМеждуОрганизациями,
	|	ВЫБОР КОГДА Партии.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратОтКлиента,
	|
	|	Партии.Количество КАК Количество,
	|	Партии.Стоимость КАК Стоимость,
	|	Партии.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|	Партии.СуммаДопРасходов КАК СуммаДопРасходов,
	|	Партии.СуммаДопРасходовБезНДС КАК СуммаДопРасходовБезНДС,
	|	Партии.СтоимостьРегл КАК СтоимостьРегл,
	|	ВЫБОР КОГДА Партии.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента ТОГДА
	|		0
	|	ИНАЧЕ
	|		Партии.НДСРегл
	|	КОНЕЦ КАК НДСРеглКорректировкаСтоимости,
	|	Партии.СтоимостьРеглБезНДС КАК СтоимостьРеглБезНДС,
	|	Партии.НДСРеглРесурс КАК НДСРегл,
	|	Партии.ПостояннаяРазница КАК ПостояннаяРазница,
	|	Партии.ВременнаяРазница КАК ВременнаяРазница,
	|
	|	0 КАК ИсходноеКоличество,
	|	0 КАК КорСтоимость,
	|	0 КАК ИсходнаяСтоимость,
	|	0 КАК ИсходнаяСтоимостьРегл,
	|	0 КАК ИсходнаяСтоимостьРеглБезНДС,
	|	0 КАК ИсходнаяНДСРегл,
	|	0 КАК ИсходнаяСтоимостьБезНДС
	|ИЗ
	|	ВтПартии КАК Партии
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	ТипЗапасов,
	|	АналитикаУчетаПродукции,
	|	ПериодПродажи УБЫВ,
	|	Подразделение,
	|	СтатьяРасходовСписания,
	|	АналитикаРасходов,
	|	КорВидЗапасов,
	|	Порядок
	|";
	
	ЗаписьРаспределения = Новый Структура("
	|Период, ВидДвижения, АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов, Организация, Склад,
	|ХозяйственнаяОперация, ЗаказКлиента, ТипЗапасов, АналитикаУчетаПоПартнерам, ЭтоПередачаМеждуОрганизациями,
	|КорАналитикаУчетаНоменклатуры, КорРазделУчета, КорВидЗапасов, КорТипЗапасов,КорОрганизация, АналитикаАктивовПассивов, КорСклад,
	|СтатьяАктивовПассивов, Подразделение, АналитикаРасходов, СтатьяРасходовСписания, СтатьяДоходов, АналитикаДоходов,
	|ДокументДвижения, ИдентификаторСтроки, ВариантРаспределенияРасходов, ИсточникГФУНоменклатуры, КорИсточникГФУНоменклатуры,
	|НалоговоеНазначение, КорНалоговоеНазначение, 
	|ПериодПродажи, ГруппаПродукции, 
	|Стоимость, СтоимостьБезНДС, Количество, КорСтоимость, ПостояннаяРазница, ВременнаяРазница,
	|СтоимостьРеглБезНДС, НДСРегл, 
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, СтоимостьРегл, НДСРеглКорректировкаСтоимости
	|");
	
	СуммыРаспределения = Новый Структура("Количество, Стоимость, СтоимостьБезНДС, СтоимостьРегл, НДСРеглКорректировкаСтоимости,
	|СтоимостьРеглБезНДС, НДСРегл, 
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, ПостояннаяРазница, ВременнаяРазница
	|");
	
	СтрокаОстатка = Новый Структура("Регистратор, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, ТипЗапасов, АналитикаУчетаПродукции, ПериодПродажи,
	|Количество, Стоимость, СтоимостьБезНДС, СтоимостьРегл, НДСРеглКорректировкаСтоимости,
	|СтоимостьРеглБезНДС, НДСРегл, 
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, ПостояннаяРазница, ВременнаяРазница
	|");
	
	СуммыВозврата = Новый Структура("Регистратор, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, ТипЗапасов, АналитикаУчетаПродукции,
	|Количество, Стоимость, СтоимостьБезНДС, СтоимостьРегл, НДСРеглКорректировкаСтоимости,
	|СтоимостьРеглБезНДС, НДСРегл, 
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, ПостояннаяРазница, ВременнаяРазница
	|");
	
	// Сформируем ВТПартии
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТПартии");
	ПолучитьСебестоимостьПартийТоваров(ПараметрыРасчета);
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Формируются движения по регистрам:
	// - СебестоимостьТоваров
	// - ПрочиеРасходы
	// - ПрочиеДоходы
	// - ДвиженияНоменклатураДоходыРасходы
	// - ДвиженияНоменклатураНоменклатура
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Порядок = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, Выборка);
			Если Выборка.ЭтоВозвратОтКлиента Тогда
				Если СуммыВозврата.Регистратор = Выборка.Регистратор
				 И СуммыВозврата.Организация = Выборка.Организация
				 И СуммыВозврата.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры
				 И СуммыВозврата.ВидЗапасов = Выборка.ВидЗапасов
				 И СуммыВозврата.ТипЗапасов = Выборка.ТипЗапасов
				 И СуммыВозврата.АналитикаУчетаПродукции = Выборка.АналитикаУчетаПродукции Тогда
					СуммыВозврата.Количество = СуммыВозврата.Количество + Выборка.Количество;
					ДополнитьСуммыРаспределения(СуммыВозврата, Выборка);
				Иначе
					ЗаполнитьЗначенияСвойств(СуммыВозврата, Выборка);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтрокаОстатка.Регистратор = Выборка.Регистратор
			И СтрокаОстатка.Организация = Выборка.Организация
			И СтрокаОстатка.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры
			И СтрокаОстатка.ВидЗапасов = Выборка.ВидЗапасов
			И СтрокаОстатка.ТипЗапасов = Выборка.ТипЗапасов
			И СтрокаОстатка.АналитикаУчетаПродукции = Выборка.АналитикаУчетаПродукции
			И (СтрокаОстатка.ПериодПродажи = Выборка.ПериодПродажи
				ИЛИ Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
				ИЛИ Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) Тогда
			
			ЗаполнитьЗначенияСвойств(ЗаписьРаспределения, Выборка);
			
			Если Выборка.Порядок = 2 И СтрокаОстатка.Количество > 0 Тогда
				РаспределитьСтоимость(СуммыРаспределения, СтрокаОстатка, Выборка, Выборка.Количество);	
			ИначеЕсли Выборка.Порядок = 3 Тогда
				РаспределитьСтоимость(СуммыРаспределения, СуммыВозврата, Выборка, Выборка.Количество);
			КонецЕсли;
			
			Если НЕ (Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции
			 И Выборка.ВидДвижения = ВидДвиженияНакопления.Приход) Тогда
				ДополнитьСуммыРаспределения(ЗаписьРаспределения, СуммыРаспределения);
			КонецЕсли;
			
					
			// Корректировка списания товаров
			Если Выборка.ИсходнаяСтоимость <> 0 Тогда
				ЗаписьРаспределения.Стоимость = ЗаписьРаспределения.Стоимость - Выборка.ИсходнаяСтоимость;
			КонецЕсли;
			Если Выборка.ИсходнаяСтоимостьРегл <> 0 Тогда
				ЗаписьРаспределения.СтоимостьРегл = ЗаписьРаспределения.СтоимостьРегл - Выборка.ИсходнаяСтоимостьРегл;
			КонецЕсли;
			Если Выборка.ИсходнаяСтоимостьБезНДС <> 0 Тогда
				ЗаписьРаспределения.СтоимостьБезНДС = ЗаписьРаспределения.СтоимостьБезНДС - Выборка.ИсходнаяСтоимостьБезНДС;
			КонецЕсли;
			Если Выборка.ИсходнаяСтоимостьРеглБезНДС <> 0 Тогда
				ЗаписьРаспределения.СтоимостьРеглБезНДС = ЗаписьРаспределения.СтоимостьРеглБезНДС - Выборка.ИсходнаяСтоимостьРеглБезНДС;
			КонецЕсли;
			Если Выборка.ИсходнаяНДСРегл <> 0 Тогда
				ЗаписьРаспределения.НДСРегл = ЗаписьРаспределения.НДСРегл - Выборка.ИсходнаяНДСРегл;
			КонецЕсли;
			
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов Тогда
				
				ЗаписьРаспределения.Стоимость = - ЗаписьРаспределения.Стоимость;
				ЗаписьРаспределения.СтоимостьБезНДС = - ЗаписьРаспределения.СтоимостьБезНДС;
				ЗаписьРаспределения.СуммаДопРасходов = - ЗаписьРаспределения.СуммаДопРасходов;
				ЗаписьРаспределения.СуммаДопРасходовБезНДС = - ЗаписьРаспределения.СуммаДопРасходовБезНДС;
				ЗаписьРаспределения.СтоимостьРегл = - ЗаписьРаспределения.СтоимостьРегл;
				ЗаписьРаспределения.СтоимостьРеглБезНДС = - ЗаписьРаспределения.СтоимостьРеглБезНДС;
				ЗаписьРаспределения.НДСРегл = - ЗаписьРаспределения.НДСРегл;
				ЗаписьРаспределения.ПостояннаяРазница = - ЗаписьРаспределения.ПостояннаяРазница;
				ЗаписьРаспределения.ВременнаяРазница = - ЗаписьРаспределения.ВременнаяРазница;
				
				СформироватьДвиженияСебестоимостьТоваров(ПараметрыРасчета, ЗаписьРаспределения,	ВидДвиженияНакопления.Приход);
				
			Иначе
				
				СформироватьДвиженияСебестоимостьТоваров(ПараметрыРасчета, ЗаписьРаспределения, Выборка.ВидДвижения);
				
			КонецЕсли;

			// Если есть кор. раздел - необходимо скорректировать стоимость в кор. части.
			Если ЗначениеЗаполнено(ЗаписьРаспределения.КорРазделУчета)
			 И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СборкаТоваров
			 И НЕ (ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
			 	И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
			 И ТипЗнч(Выборка.Регистратор) <> Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
             И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПересортицаТоваров
			 И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеремещениеТоваров Тогда
			 
				СформироватьКорДвиженияСебестоимостьТоваров(ПараметрыРасчета, ЗаписьРаспределения);
				
			КонецЕсли;
			
				
			// Сторнирование себестоимости товаров по управленческой организации.
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет Тогда
				
				СформироватьДвиженияСебестоимостьТоваровСторноВУпрУчете(ПараметрыРасчета, ЗаписьРаспределения);
				
			КонецЕсли;

			// Корректировка списания товаров на затраты в регистре учет прочих расходов.
			Если (Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваров
					Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию
					Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы
					Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели
					Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию
					Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании)
				 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию
				 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку Тогда
				 
					ЭтоВыпускПродукции = Ложь;
					
					Если ЗначениеЗаполнено(ЗаписьРаспределения.СтатьяАктивовПассивов) Тогда
						СформироватьДвиженияПрочиеАктивыПассивы(
							ПараметрыРасчета,
							ЗаписьРаспределения,
							ЗаписьРаспределения.Стоимость + ЗаписьРаспределения.СуммаДопРасходов);
					Иначе
						СформироватьДвиженияПрочиеРасходы(
							ПараметрыРасчета,
							ЗаписьРаспределения,
							ЗаписьРаспределения.Стоимость + ЗаписьРаспределения.СуммаДопРасходов + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяСтоимость, 0),
							ЗаписьРаспределения.СтоимостьБезНДС + ЗаписьРаспределения.СуммаДопРасходовБезНДС + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяСтоимостьБезНДС, 0),
							ЗаписьРаспределения.СтоимостьРегл + ЗаписьРаспределения.НДСРеглКорректировкаСтоимости + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяСтоимостьРегл, 0),
							ЗаписьРаспределения.СтоимостьРеглБезНДС + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяСтоимостьРеглБезНДС, 0),
							ЗаписьРаспределения.НДСРегл + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяНДСРегл, 0),
							ЗаписьРаспределения.ПостояннаяРазница,
							ЗаписьРаспределения.ВременнаяРазница);
					КонецЕсли;

			КонецЕсли;
					
			// Формирование прочих доходов\расходов при пересортице
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой
			 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию
			 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку Тогда
				 
			 СуммаПереоценки = ЗаписьРаспределения.Стоимость + ЗаписьРаспределения.СуммаДопРасходов - Выборка.КорСтоимость;
				Если СуммаПереоценки > 0 Тогда 

					СформироватьДвиженияПрочиеРасходы(
						ПараметрыРасчета,
						ЗаписьРаспределения,
						СуммаПереоценки,
						ЗаписьРаспределения.СтоимостьБезНДС + ЗаписьРаспределения.СуммаДопРасходовБезНДС,
						ЗаписьРаспределения.СтоимостьРегл + ЗаписьРаспределения.НДСРеглКорректировкаСтоимости,
						ЗаписьРаспределения.СтоимостьРеглБезНДС,
						ЗаписьРаспределения.НДСРегл,
						ЗаписьРаспределения.ПостояннаяРазница,
						ЗаписьРаспределения.ВременнаяРазница);

				ИначеЕсли СуммаПереоценки < 0 Тогда

					СформироватьДвиженияПрочиеДоходы(
						ПараметрыРасчета,
						ЗаписьРаспределения,
						- СуммаПереоценки);

				КонецЕсли;

			КонецЕсли;
		
			// Формирование прочих расходов при порче
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой
				 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию
				 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку Тогда
			
				СуммаПереоценки = ЗаписьРаспределения.Стоимость + ЗаписьРаспределения.СуммаДопРасходов - Выборка.КорСтоимость;
				Если СуммаПереоценки <> 0 Тогда
					
					СформироватьДвиженияПрочиеРасходы(
						ПараметрыРасчета,
						ЗаписьРаспределения,
						СуммаПереоценки,
						ЗаписьРаспределения.СтоимостьБезНДС + ЗаписьРаспределения.СуммаДопРасходовБезНДС,
						ЗаписьРаспределения.СтоимостьРегл + ЗаписьРаспределения.НДСРеглКорректировкаСтоимости,
						ЗаписьРаспределения.СтоимостьРеглБезНДС,
						ЗаписьРаспределения.НДСРегл,
						ЗаписьРаспределения.ПостояннаяРазница,
						ЗаписьРаспределения.ВременнаяРазница);
					
				КонецЕсли;

			КонецЕсли;

			// Формирование прочих доходов/расходов при возврате товаров поставщику.
			Если ((Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику
				И ЗаписьРаспределения.КорСтоимость <> 0)
				ИЛИ Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПереданнойВозвратнойТары
				ИЛИ Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями
				ИЛИ Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПереданнойТары)
				И ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов
				И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию
				И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку
			Тогда
				Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями Тогда
					СуммаПереоценки = 0;
				Иначе
					СуммаПереоценки = ЗаписьРаспределения.Стоимость + ЗаписьРаспределения.СуммаДопРасходов;
				КонецЕсли;
				Если СуммаПереоценки > 0 ИЛИ ЗаписьРаспределения.СтоимостьРегл > 0 Тогда

					СформироватьДвиженияПрочиеРасходы(
						ПараметрыРасчета,
						ЗаписьРаспределения,
						СуммаПереоценки,
						ЗаписьРаспределения.СтоимостьБезНДС + ЗаписьРаспределения.СуммаДопРасходовБезНДС,
						ЗаписьРаспределения.СтоимостьРегл,
						ЗаписьРаспределения.СтоимостьРеглБезНДС,
						ЗаписьРаспределения.НДСРегл,
						ЗаписьРаспределения.ПостояннаяРазница,
						ЗаписьРаспределения.ВременнаяРазница);

				ИначеЕсли СуммаПереоценки < 0 Тогда

					СформироватьДвиженияПрочиеДоходы(
						ПараметрыРасчета,
						ЗаписьРаспределения,
						- СуммаПереоценки);

				КонецЕсли;
				
            КонецЕсли;
            
            Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику 
                И ЗаписьРаспределения.КорСтоимость <> 0
    			И ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов 
                И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.НалоговоеНазначение,    "ВидДеятельностиНДС") = Перечисления.ВидыДеятельностиНДС.Необлагаемая 
                И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.КорНалоговоеНазначение, "ВидДеятельностиНДС") = Перечисления.ВидыДеятельностиНДС.Облагаемая 
                
                Тогда
                
                    СформироватьДвиженияПрочиеРасходы(
                        ПараметрыРасчета,
                        ЗаписьРаспределения,
                        0,
                        0,
                        Выборка.ИсходнаяНДСРегл,
                        Выборка.ИсходнаяНДСРегл,
                        0,
                        0,
                        0
                    );

            КонецЕсли;
            
			// Корректировка движений по оборотным регистрам управленческого учета.
			СформироватьДвиженияПоОборотнымРегистрамУпрУчета(ПараметрыРасчета, ЗаписьРаспределения);
			
		КонецЕсли;

	КонецЦикла;
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТПартии");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

// Этап 2.2
Процедура СкорректироватьСтоимостьПродажПоФИФОСкользящая(ПараметрыРасчета)

	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СкорректироватьСтоимостьПродажПоФИФОСкользящая");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	2 КАК Порядок,
	|	Продажи.Период                     КАК Период,
	|	Продажи.Регистратор                КАК Регистратор,
	|	Продажи.Регистратор                КАК ДокументДвижения,
	|	АналитикаПартнеров.Организация     КАК Организация,
	|	Продажи.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Продажи.ВидЗапасов                 КАК ВидЗапасов,
	|	Продажи.ТипЗапасов                 КАК ТипЗапасов,
	|
	|	Продажи.ЗаказКлиента               КАК ЗаказКлиента,
	|	Продажи.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|	АналитикаПартнеров.Партнер         КАК Партнер,
	|	АналитикаПартнеров.Контрагент      КАК Контрагент,
	|	Продажи.Подразделение              КАК Подразделение,
	|	Продажи.Менеджер                   КАК Менеджер,
	|	Продажи.Склад                      КАК Склад,
	|	Продажи.Соглашение                 КАК Соглашение,
	|	Продажи.Договор                    КАК Договор,
	|	Продажи.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
	|	Продажи.НалоговоеНазначение        КАК НалоговоеНазначение,
	|	Продажи.ВалютаВзаиморасчетов       КАК ВалютаВзаиморасчетов,
	|	Продажи.ВалютаДокумента            КАК ВалютаДокумента,
	|	Продажи.ИсточникГФУНоменклатуры    КАК ИсточникГФУНоменклатуры,
	|	Продажи.ИсточникГФУРасчетов        КАК ИсточникГФУРасчетов,
	|	СУММА(
	|		ВЫБОР КОГДА Продажи.Количество < 0 ТОГДА
	|			0 - Продажи.Количество
	|		ИНАЧЕ
	|			Продажи.Количество
	|		КОНЕЦ
	|	) КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК НДСРеглКорректировкаСтоимости,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	СУММА(Продажи.Количество)          КАК ИсходноеКоличество,
	|	0                                  КАК КорСтоимость
	|ИЗ
	|	ВТКэшЗаписиВыручкаИСебестоимостьПродаж КАК Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
	|			ПО Продажи.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|
	|ГДЕ
	|	Продажи.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И (Продажи.ХозяйственнаяОперация В (&МассивОперацийРеализации)
	|		ИЛИ Продажи.ХозяйственнаяОперация В (&МассивОперацийВозвратыПрошлыхПериодов))
	|	
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Период,
	|	Продажи.Регистратор,
	|	Продажи.АналитикаУчетаНоменклатуры,
	|	Продажи.ЗаказКлиента,
	|	Продажи.АналитикаУчетаПоПартнерам,
	|	АналитикаПартнеров.Партнер,
	|	АналитикаПартнеров.Контрагент,
	|	Продажи.Подразделение,
	|	Продажи.ТипЗапасов,
	|	Продажи.ВидЗапасов,
	|	Продажи.Менеджер,
	|	Продажи.Склад,
	|	Продажи.Соглашение,
	|	Продажи.Договор,
	|	Продажи.ХозяйственнаяОперация,
	|	Продажи.НалоговоеНазначение,
	|	Продажи.ВалютаВзаиморасчетов,
	|	Продажи.ВалютаДокумента,
	|	Продажи.ИсточникГФУНоменклатуры,
	|	Продажи.ИсточникГФУРасчетов,
	|	АналитикаПартнеров.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Продажи.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	&НачалоПериода КАК Период,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Регистратор КАК ДокументДвижения,
	|	Партии.Организация КАК Организация,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Партии.ВидЗапасов КАК ВидЗапасов,
	|	Партии.ТипЗапасов КАК ТипЗапасов,
	|
	|	НЕОПРЕДЕЛЕНО КАК ЗаказКлиента,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК Соглашение,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначение,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУНоменклатуры,
	|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУРасчетов,
	|
	|	Партии.Количество КАК Количество,
	|	Партии.Стоимость КАК Стоимость,
	|	Партии.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|	Партии.СуммаДопРасходов КАК СуммаДопРасходов,
	|	Партии.СуммаДопРасходовБезНДС КАК СуммаДопРасходовБезНДС,
	|	Партии.СтоимостьРегл КАК СтоимостьРегл,
	|	Партии.СтоимостьРеглБезНДС КАК СтоимостьРеглБезНДС,
	|	Партии.НДСРеглРесурс КАК НДСРегл,
	|	Партии.НДСРегл КАК НДСРеглКорректировкаСтоимости,
	|	Партии.ПостояннаяРазница КАК ПостояннаяРазница,
	|	Партии.ВременнаяРазница КАК ВременнаяРазница,
	|
	|	0 КАК ИсходноеКоличество,
	|	0 КАК КорСтоимость
	|ИЗ
	|	ВтПартии КАК Партии
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	ТипЗапасов,
	|	Порядок
	|";
	
	ЗаписьРаспределения = Новый Структура("
	|Период, АналитикаУчетаНоменклатуры, ВидЗапасов, Организация, Менеджер,
	|ХозяйственнаяОперация, ЗаказКлиента, ТипЗапасов,
	|Подразделение, АналитикаУчетаПоПартнерам, Партнер, Контрагент,
	|Склад, Соглашение, Договор, ВалютаВзаиморасчетов, ВалютаДокумента,
	|ИсточникГФУНоменклатуры, ИсточникГФУРасчетов,
	|НалоговоеНазначение, ДокументДвижения,
	|Стоимость, СтоимостьБезНДС, Количество,
	|СуммаДопРасходов, СуммаДопРасходовБезНДС,
	|СтоимостьРегл, СтоимостьРеглБезНДС, НДСРегл, НДСРеглКорректировкаСтоимости, ПостояннаяРазница, ВременнаяРазница
	|");
	
	СтрокаОстатка = Новый Структура("
	|Регистратор, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, ТипЗапасов,
	|Количество, Стоимость, СтоимостьБезНДС, СтоимостьРегл, СтоимостьРеглБезНДС, НДСРегл, НДСРеглКорректировкаСтоимости,
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, ПостояннаяРазница, ВременнаяРазница
	|");

	// Сформируем ВТПартии
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТПартии");
	ПолучитьСебестоимостьПартийТоваров(ПараметрыРасчета, Истина);
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Формируются движения по регистрам:
	// - ВыручкаИСебестоимостьПродаж
	// - Закупки
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Порядок = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, Выборка);
			
		ИначеЕсли СтрокаОстатка.Регистратор = Выборка.Регистратор
		 И СтрокаОстатка.Организация = Выборка.Организация
		 И СтрокаОстатка.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры
		 И СтрокаОстатка.ВидЗапасов = Выборка.ВидЗапасов
		 И СтрокаОстатка.ТипЗапасов = Выборка.ТипЗапасов
		 И СтрокаОстатка.Количество > 0 Тогда
		
			ЗаполнитьЗначенияСвойств(ЗаписьРаспределения, Выборка);
			РаспределитьСтоимость(ЗаписьРаспределения, СтрокаОстатка, Выборка, Выборка.Количество);
			
			СформироватьДвиженияВыручкаИСебестоимостьПродаж(ПараметрыРасчета, ЗаписьРаспределения);
			
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда	
				
				СформироватьДвиженияЗакупки(ПараметрыРасчета, ЗаписьРаспределения);
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТПартии");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);

КонецПроцедуры


// Этап 2.5
Процедура ЗарегистрироватьСтоимостьФИФО(ПараметрыРасчета)

	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ЗарегистрироватьСтоимостьФИФО");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Себестоимость.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.ВидЗапасов						КАК ВидЗапасов,
	|	Себестоимость.Организация						КАК Организация,
	|	Себестоимость.РазделУчета						КАК РазделУчета,
	|	СУММА(Себестоимость.Количество)					КАК Количество,
	|	СУММА(Себестоимость.Стоимость)					КАК Стоимость,
	|	СУММА(Себестоимость.СтоимостьБезНДС)			КАК СтоимостьБезНДС,
	|	СУММА(Себестоимость.СуммаДопРасходов)			КАК СтоимостьДопРасходы,
	|	СУММА(Себестоимость.СуммаДопРасходовБезНДС) 	КАК СтоимостьДопРасходыБезНДС,
	|	СУММА(Себестоимость.СтоимостьРеглБезНДС)		КАК СтоимостьРеглБезНДС,
	|	СУММА(Себестоимость.НДСРегл)				    КАК НДСРегл,
	|	СУММА(Себестоимость.СтоимостьРегл)				КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВТСебестоимостьОборот
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|ГДЕ
	|	НЕ Себестоимость.СлужебноеВидДвиженияПриход
	|	ИЛИ Себестоимость.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|
	|СГРУППИРОВАТЬ ПО
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.ВидЗапасов,
	|	Себестоимость.Организация,
	|	Себестоимость.РазделУчета
	|
	|ИМЕЮЩИЕ
	|	СУММА(Себестоимость.Количество) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТКэшСтоимостьТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка		КАК Регистратор,
	|	&НачалоПериода								КАК Период,
	|	ИСТИНА										КАК Активность,
	|
	|	Себестоимость.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.ВидЗапасов					КАК ВидЗапасов,
	|	Себестоимость.Организация					КАК Организация,
	|	Себестоимость.РазделУчета					КАК РазделУчета,
	|
	|	ВЫРАЗИТЬ((Себестоимость.Стоимость / Себестоимость.Количество) КАК Число(15,2)) 					КАК Стоимость,
	|	ВЫРАЗИТЬ((Себестоимость.СтоимостьБезНДС / Себестоимость.Количество) КАК Число(15,2)) 			КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ((Себестоимость.СтоимостьДопРасходы / Себестоимость.Количество) КАК Число(15,2)) 		КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ((Себестоимость.СтоимостьДопРасходыБезНДС / Себестоимость.Количество) КАК Число(15,2))  КАК СтоимостьДопРасходыБезНДС,
	|	ВЫРАЗИТЬ((Себестоимость.СтоимостьРегл / Себестоимость.Количество) КАК Число(15,2)) 				КАК СтоимостьРегл,
	|	ВЫРАЗИТЬ((Себестоимость.СтоимостьРеглБезНДС / Себестоимость.Количество) КАК Число(15,2)) 		КАК СтоимостьРеглБезНДС,
	|	ВЫРАЗИТЬ((Себестоимость.НДСРегл / Себестоимость.Количество) КАК Число(15,2)) 				    КАК НДСРегл,
	|	ВЫРАЗИТЬ(0 КАК Число(15,2)) 																	КАК ПостояннаяРазница,
	|	ВЫРАЗИТЬ(0 КАК Число(15,2)) 																	КАК ВременнаяРазница
	|ПОМЕСТИТЬ ВТКэшСтоимостьТоваров
	|ИЗ
	|	ВТСебестоимостьОборот КАК Себестоимость
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|			ПО Себестоимость.Организация = ДокументыРасчетаСебестоимости.Организация
	|";
	
	// ВТКэшСтоимостьТоваров единственный кэш движений, который не использует общий механизм кэширования движений.
	// Регистратором этого регистра сведений является только документ расчета себестоимости,
	// поэтому с этим кэшем работаем по "индивидуальной" схеме, без использования механизма кэширования движений.
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшСтоимостьТоваров");
	Запрос.Выполнить();
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	ПротоколРасчета_КэшированиеСформированныхДвижений(
		ПараметрыРасчета,
		"СтоимостьТоваров",
		УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСтоимостьТоваров"));
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТСебестоимостьОборот");
	
КонецПроцедуры


// Этап 3.1
Процедура ВключитьИсключитьНДСВСтоимость(ПараметрыРасчета)

	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ВключитьИсключитьНДСВСтоимость");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Регистратор,
	|	Партии.Организация,
	|	Партии.АналитикаУчетаНоменклатуры,
	|	Партии.ДокументПоступления,
	|	Партии.ВидЗапасов,
	|	Партии.СтатьяРасходовСписания,
	|	Партии.АналитикаРасходов
	|ПОМЕСТИТЬ РасходыПартий
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Активность
	|	И Партии.Организация В(&МассивОрганизаций)
	|	И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Партии.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|ИНДЕКСИРОВАТЬ ПО
	|	Партии.Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		Партии.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасов,
	|	Партии.СтатьяРасходовСписания КАК СтатьяРасходовСписания,
	|	Партии.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(Партии.Количество) КАК Количество,
	|	СУММА(
	|	ВЫБОР КОГДА 
	|		(АналитикаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|	   		И Партии.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая))
	|		ИЛИ (АналитикаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.ПропорциональноОблагаемая) 
	|	   		И Партии.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность))
	|		ТОГДА
	|			ВЫБОР КОГДА &ВключатьНДСВСебестоимостьПриУсловнойПродаже ТОГДА
	|				Партии.НДСРегл
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|
	|		КОГДА АналитикаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|			И Партии.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|		ТОГДА
	|			ВЫБОР КОГДА &ИсключатьНДСИзСебестоимостиПриВосстановленииНДС ТОГДА
	|				-Партии.НДСРегл
    |           КОГДА Партии.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику ТОГДА
    |				-Партии.НДСРегл
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК НДСРегл
	|
	|ПОМЕСТИТЬ ВтПартии
	|ИЗ (
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Партии.ВидЗапасов КАК ВидЗапасов,
	|		Партии.СтатьяРасходовСписания КАК СтатьяРасходовСписания,
	|		Партии.АналитикаРасходов КАК АналитикаРасходов,
	|		Партии.АналитикаУчетаПартий,
	|		Партии.НалоговоеНазначение,
	|		Партии.Количество КАК Количество,
	|		Партии.НДСРегл КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.АналитикаУчетаПродукции КАК АналитикаУчетаНоменклатуры,
	|		РасходыПартий.ВидЗапасов КАК ВидЗапасов,
	|		Партии.СтатьяРасходовСписания КАК СтатьяРасходовСписания,
	|		Партии.АналитикаРасходов КАК АналитикаРасходов,
	|		Партии.АналитикаУчетаПартий,
	|		Партии.НалоговоеНазначение,
	|		0 КАК Количество,
	|		Партии.НДСРегл КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииЗатратНаВыпуск КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасходыПартий КАК РасходыПартий
	|			ПО РасходыПартий.Регистратор = Партии.Регистратор
	|			И РасходыПартий.Организация = Партии.Организация
	|			И РасходыПартий.АналитикаУчетаНоменклатуры = Партии.АналитикаУчетаПродукции
	|			И РасходыПартий.ДокументПоступления = Партии.ДокументВыпуска
	|			И РасходыПартий.СтатьяРасходовСписания = Партии.СтатьяРасходовСписания
	|			И РасходыПартий.АналитикаРасходов = Партии.АналитикаРасходов 
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Партии.ВидЗапасов КАК ВидЗапасов,
	|		Партии.СтатьяРасходовСписания КАК СтатьяРасходовСписания,
	|		Партии.АналитикаРасходов КАК АналитикаРасходов,
	|		Партии.АналитикаУчетаПартий,
	|		Партии.НалоговоеНазначение,
	|		0 КАК Количество,
	|		Партии.НДСРегл КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|	) КАК Партии
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
	|	ПО
	|		АналитикаПартий.КлючАналитики = Партии.АналитикаУчетаПартий
	|
	|ГДЕ
	|	НЕ АналитикаУчетаПартий.НалоговоеНазначение ЕСТЬ NULL
	|	И АналитикаУчетаПартий.НалоговоеНазначение <> Партии.НалоговоеНазначение 
	|	И Партии.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Регистратор,
	|	Партии.Организация,
	|	Партии.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		Партии.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ,
	|	Партии.СтатьяРасходовСписания,
	|	Партии.АналитикаРасходов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтРегистраторы
	|ИЗ
	|	ВтПартии КАК Партии
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	УчетСебестоимости.Период КАК Период,
	|	УчетСебестоимости.Регистратор КАК Регистратор,
	|	УчетСебестоимости.Организация КАК Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов КАК ВидЗапасов,
	|	УчетСебестоимости.СтатьяРасходовСписания КАК СтатьяРасходовСписания,
	|	УчетСебестоимости.АналитикаРасходов КАК АналитикаРасходов,
	|
	|	УчетСебестоимости.РазделУчета КАК РазделУчета,
	|	УчетСебестоимости.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	УчетСебестоимости.ЗаказКлиента КАК ЗаказКлиента,
	|	УчетСебестоимости.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	УчетСебестоимости.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.КорРазделУчета КАК КорРазделУчета,
	|	УчетСебестоимости.КорВидЗапасов КАК КорВидЗапасов,
	|	УчетСебестоимости.КорОрганизация КАК КорОрганизация,
	|	УчетСебестоимости.Подразделение КАК Подразделение,
	|	УчетСебестоимости.СтатьяРасходовСписания.ВариантРаспределенияРасходов КАК ВариантРаспределенияРасходов,
	|	УчетСебестоимости.ГруппаПродукции КАК ГруппаПродукции,
	|	УчетСебестоимости.Регистратор КАК ДокументДвижения,
	|	ЛОЖЬ КАК ЭтоПередачаМеждуОрганизациями,
	|	УчетСебестоимости.НалоговоеНазначение      		КАК НалоговоеНазначение,
	|	УчетСебестоимости.КорНалоговоеНазначение      	КАК КорНалоговоеНазначение,
	|
	|	СУММА(УчетСебестоимости.Количество) КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРеглКорректировкаСтоимости,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	СУММА(УчетСебестоимости.Количество) КАК ИсходноеКоличество
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистраторы КАК Регистраторы
	|			ПО Регистраторы.Регистратор = УчетСебестоимости.Регистратор
	|ГДЕ
	|	НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|	И (УчетСебестоимости.КорРазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
	|		ИЛИ УчетСебестоимости.СтатьяРасходовСписания <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка))
	|	И УчетСебестоимости.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И УчетСебестоимости.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|	И УчетСебестоимости.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|	
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.Период,
	|	УчетСебестоимости.Регистратор,
	|	УчетСебестоимости.Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов,
	|	УчетСебестоимости.СтатьяРасходовСписания,
	|	УчетСебестоимости.СтатьяРасходовСписания.ВариантРаспределенияРасходов,
	|	УчетСебестоимости.АналитикаРасходов,
	|
	|	УчетСебестоимости.РазделУчета,
	|	УчетСебестоимости.АналитикаУчетаПоПартнерам,
	|	УчетСебестоимости.ЗаказКлиента,
	|	УчетСебестоимости.ХозяйственнаяОперация,
	|	УчетСебестоимости.КорАналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.КорРазделУчета,
	|	УчетСебестоимости.КорВидЗапасов,
	|	УчетСебестоимости.КорОрганизация,
	|	УчетСебестоимости.Подразделение,
	|	УчетСебестоимости.НалоговоеНазначение,
	|	УчетСебестоимости.КорНалоговоеНазначение,
	|	УчетСебестоимости.ГруппаПродукции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	&НачалоПериода КАК Период,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Партии.ВидЗапасов КАК ВидЗапасов,
	|	Партии.СтатьяРасходовСписания КАК СтатьяРасходовСписания,
	|	Партии.АналитикаРасходов КАК АналитикаРасходов,
	|
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказКлиента,
	|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК ВариантРаспределенияРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаПродукции,
	|	НЕОПРЕДЕЛЕНО КАК ДокументДвижения,
	|	ЛОЖЬ 		 КАК ЭтоПередачаМеждуОрганизациями,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначение,
	|	НЕОПРЕДЕЛЕНО КАК КорНалоговоеНазначение,
	|
	|	Партии.Количество КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|	Партии.НДСРегл КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРеглКорректировкаСтоимости,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК ИсходноеКоличество
	|ИЗ
	|	ВтПартии КАК Партии
	|ГДЕ
	|	Партии.Количество > 0
	|	И Партии.НДСРегл <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	СтатьяРасходовСписания,
	|	АналитикаРасходов,
	|	Порядок
	|";
	
	ЗаписьРаспределения = Новый Структура("
	|Период, АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов, Организация, Склад,
	|ХозяйственнаяОперация, ЗаказКлиента, ТипЗапасов, АналитикаУчетаПоПартнерам, ЭтоПередачаМеждуОрганизациями,
	|КорАналитикаУчетаНоменклатуры, КорРазделУчета, КорВидЗапасов, КорТипЗапасов, КорОрганизация, АналитикаАктивовПассивов, КорСклад,
	|СтатьяАктивовПассивов, Подразделение, АналитикаРасходов, СтатьяРасходовСписания, СтатьяДоходов, АналитикаДоходов,
	|ДокументДвижения, ИдентификаторСтроки, ВариантРаспределенияРасходов, ГруппаПродукции, 
	|ИсточникГФУНоменклатуры, КорИсточникГФУНоменклатуры,
	|НалоговоеНазначение, КорНалоговоеНазначение, 
	|Стоимость, СтоимостьБезНДС, Количество, КорСтоимость, ПостояннаяРазница, ВременнаяРазница,
	|СтоимостьРеглБезНДС, НДСРеглКорректировкаСтоимости,
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, СтоимостьРегл, НДСРегл
	|");
	
	СуммыРаспределения = Новый Структура("
	|Количество, Стоимость, СтоимостьБезНДС, СтоимостьРегл, НДСРегл,
	|СтоимостьРеглБезНДС, НДСРеглКорректировкаСтоимости,
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, ПостояннаяРазница, ВременнаяРазница
	|");
	
	СтрокаОстатка = Новый Структура("
	|Регистратор, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов,
	|СтатьяРасходовСписания, АналитикаРасходов,
	|Количество, Стоимость, СтоимостьБезНДС, СтоимостьРегл, НДСРегл,
	|СтоимостьРеглБезНДС, НДСРеглКорректировкаСтоимости,
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, ПостояннаяРазница, ВременнаяРазница
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Формируются движения по регистрам:
	// - СебестоимостьТоваров
	// - ПрочиеРасходы
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Порядок = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, Выборка);
			
		ИначеЕсли СтрокаОстатка.Регистратор = Выборка.Регистратор
			И СтрокаОстатка.Организация = Выборка.Организация
			И СтрокаОстатка.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры
			И СтрокаОстатка.ВидЗапасов = Выборка.ВидЗапасов
            И (СтрокаОстатка.СтатьяРасходовСписания = Выборка.СтатьяРасходовСписания ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику"))
            И (СтрокаОстатка.АналитикаРасходов = Выборка.АналитикаРасходов ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) 
            Тогда
			
			ЗаполнитьЗначенияСвойств(ЗаписьРаспределения, Выборка);
			
			РаспределитьСтоимость(СуммыРаспределения, СтрокаОстатка, Выборка, Выборка.Количество);
			ДополнитьСуммыРаспределения(ЗаписьРаспределения, СуммыРаспределения);
			
			Если ЗаписьРаспределения.СтоимостьРегл <> 0 Тогда
					
				// Если есть кор. раздел - необходимо скорректировать стоимость в кор. части.
				Если ЗначениеЗаполнено(ЗаписьРаспределения.КорРазделУчета) Тогда
					
					// Накопим все движения по регистру, чтобы перед записью их можно было сохранить во временную таблицу
					СформироватьКорДвиженияСебестоимостьТоваров(ПараметрыРасчета, ЗаписьРаспределения);
							
				КонецЕсли;
					
				// Корректировка списания товаров на затраты в регистре учет прочих расходов.
				Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваров
				 Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию
				 Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы
				 Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой
				 Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели
				 Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию
				 Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании Тогда
				 
				 	СформироватьДвиженияПрочиеРасходы(
				 		ПараметрыРасчета,
						ЗаписьРаспределения,
						0,
						0,
						ЗаписьРаспределения.СтоимостьРегл,
						0,
						0,
						0,
						0,
						Ложь);
					
                 КонецЕсли;
                    
                 Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
                 
				 	СформироватьДвиженияПрочиеРасходы(
				 		ПараметрыРасчета,
						ЗаписьРаспределения,
						0,
						0,
						-ЗаписьРаспределения.СтоимостьРегл, 
						-ЗаписьРаспределения.СтоимостьРегл, 
						0,
						0,
						0,
						Ложь
                    );
                 
                 КонецЕсли; 

			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"РасходыПартий, ВтПартии, ВтРегистраторы");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

// Этап 3.2
// Формирует временную таблицу ВТДопРасходов
//
Процедура РаспределитьРасходыНаСебестоимость(ПараметрыРасчета)

	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "РаспределитьРасходыНаСебестоимость");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТДопРасходов");
	
	Если ПараметрыРасчета.ПредварительныйРасчет Тогда 
		
		ТаблицаДопРасходов = ТаблицаРаспределенияРасходовНаСебестоимостьТоваров(ПараметрыРасчета);
		
		ТаблицаДопРасходов.Колонки.Удалить("Подразделение");
		ТаблицаДопРасходов.Колонки.Удалить("СтатьяРасходовСписания");
		ТаблицаДопРасходов.Колонки.Удалить("АналитикаРасходов");
		
		Запрос.УстановитьПараметр("ТаблицаДопРасходов", ТаблицаДопРасходов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
		|	Таблица.ВидЗапасов                 КАК ВидЗапасов,
		|	Таблица.Организация                КАК Организация,
		|	Таблица.СуммаДопРасходов           КАК СуммаДопРасходов,
		|	Таблица.СуммаДопРасходовБезНДС     КАК СуммаДопРасходовБезНДС,
		|	Таблица.СтоимостьРеглБезНДС        КАК СтоимостьРеглБезНДС,
		|	Таблица.НДСРегл                    КАК НДСРегл,
		|	Таблица.СтоимостьРегл              КАК СтоимостьРегл
		|
		|ПОМЕСТИТЬ ВТДопРасходов
		|
		|ИЗ
		|	&ТаблицаДопРасходов КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры,
		|	Организация
		|";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаНоменклатуры,
		|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	0 КАК СуммаДопРасходов,
		|	0 КАК СуммаДопРасходовБезНДС,
		|	0 КАК СтоимостьРеглБезНДС,
		|	0 КАК НДСРегл,
		|	0 КАК СтоимостьРегл
		|
		|ПОМЕСТИТЬ ВТДопРасходов
		|";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Этап 3.3
// Выполняет корректировку стоимости возвратов от клиента прошлых периодов
//
Процедура СкорректироватьСтоимостьВозвратовПрошлыхПериодов(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СкорректироватьСтоимостьВозвратовПрошлыхПериодов");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДД.АналитикаУчетаНоменклатуры,
	|	ДД.РазделУчета,
	|	ДД.ВидЗапасов,
	|	ДД.Организация,
	|	СУММА(ДД.Количество) КАК Количество,
	|	МАКСИМУМ(Стоимости.Период) КАК Период
	|ПОМЕСТИТЬ
	|	СторноОтчетыКомиссионера
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК ДД
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК Отчет
	|		ПО Отчет.Ссылка = ДД.Регистратор
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьТоваров КАК Стоимости
	|		ПО Стоимости.Период < &НачалоПериода
	|		И Стоимости.АналитикаУчетаНоменклатуры = ДД.АналитикаУчетаНоменклатуры
	|		И Стоимости.РазделУчета = ДД.РазделУчета
	|		И Стоимости.ВидЗапасов = ДД.ВидЗапасов
	|		И Стоимости.Организация = ДД.Организация
	|ГДЕ
	|	НЕ ДД.СлужебноеВидДвиженияПриход
	|СГРУППИРОВАТЬ ПО
	|	ДД.АналитикаУчетаНоменклатуры,
	|	ДД.РазделУчета,
	|	ДД.ВидЗапасов,
	|	ДД.Организация
	|ИМЕЮЩИЕ
	|	СУММА(ДД.Количество) < 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Себестоимость.Период                              КАК Период,
	|	ВЫБОР
	|		КОГДА Себестоимость.СлужебноеВидДвиженияПриход
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                   						  КАК ВидДвижения,
	|	Себестоимость.АналитикаУчетаНоменклатуры          КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета                         КАК РазделУчета,
	|	Себестоимость.ВидЗапасов                          КАК ВидЗапасов,
	|	Себестоимость.ВидЗапасов.ТипЗапасов               КАК ТипЗапасов,
	// В кор. части могут быть данные об исходной аналитике продажи (если возврат идет на другой склад)
	|	ВЫБОР КОГДА Себестоимость.КорВидЗапасов <> Значение(Справочник.ВидыЗапасов.ПустаяСсылка) ТОГДА
	|			Себестоимость.КорВидЗапасов
	|		ИНАЧЕ
	|			Себестоимость.ВидЗапасов
	|	КОНЕЦ                                             КАК ВидыЗапасовДляЦены,
	// В кор. части могут быть данные об исходной виде запасов продажи (в случае возврата проданного по Интеркампани товара)
	|	ВЫБОР КОГДА Себестоимость.КорАналитикаУчетаНоменклатуры <> Значение(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) ТОГДА
	|			Себестоимость.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ
	|			Себестоимость.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                             КАК АналитикаНоменклатурыДляЦены,
	|	СУММА(Себестоимость.Количество)                   КАК Количество,
	|
	|	СУММА(Себестоимость.Стоимость)                    КАК Стоимость,
	|	СУММА(Себестоимость.СтоимостьБезНДС)              КАК СтоимостьБезНДС,
	|
	|	СУММА(Себестоимость.СуммаДопРасходов)             КАК СуммаДопРасходов,
	|	СУММА(Себестоимость.СуммаДопРасходовБезНДС)       КАК СуммаДопРасходовБезНДС,
	|
	|	СУММА(Себестоимость.СтоимостьРегл)                КАК СтоимостьРегл,
	|	СУММА(Себестоимость.СтоимостьРеглБезНДС)          КАК СтоимостьРеглБезНДС,
	|	СУММА(Себестоимость.НДСРегл)                      КАК НДСРегл,
	|
	|	СУММА(Себестоимость.ПостояннаяРазница)            КАК ПостояннаяРазница,
	|	СУММА(Себестоимость.ВременнаяРазница)             КАК ВременнаяРазница,
	|
	|	Себестоимость.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|	Себестоимость.КорАналитикаУчетаНоменклатуры       КАК КорАналитикаУчетаНоменклатуры,
	|	Себестоимость.КорРазделУчета                      КАК КорРазделУчета,
	|	Себестоимость.КорВидЗапасов                       КАК КорВидЗапасов,
	|	Себестоимость.АналитикаУчетаПоПартнерам           КАК АналитикаУчетаПоПартнерам,
	|	Себестоимость.ЗаказКлиента                        КАК ЗаказКлиента,
	|	Себестоимость.Подразделение                       КАК Подразделение,
	|	Себестоимость.Организация                         КАК Организация,
	|	Себестоимость.КорОрганизация                      КАК КорОрганизация,
	|	Себестоимость.ПериодПродажи                       КАК ПериодПродажи,
	|	ЕСТЬNULL(СторноОтчетыКомиссионера.Период,
	|		НАЧАЛОПЕРИОДА(Себестоимость.ПериодПродажи, МЕСЯЦ)) КАК ПериодРеализации,
	|	Себестоимость.АналитикаРасходов                   КАК АналитикаРасходов,
	|	Себестоимость.СтатьяРасходовСписания              КАК СтатьяРасходовСписания,
	|	Себестоимость.СтатьяДоходов                       КАК СтатьяДоходов,
	|	Себестоимость.АналитикаДоходов                    КАК АналитикаДоходов,
	|	Себестоимость.ГруппаПродукции                     КАК ГруппаПродукции,
	|	Себестоимость.Регистратор                         КАК ДокументДвижения,
	|	Себестоимость.НалоговоеНазначение      		      КАК НалоговоеНазначение,
	|	Себестоимость.КорНалоговоеНазначение      	      КАК КорНалоговоеНазначение,
	|	Себестоимость.ИдентификаторСтроки                 КАК ИдентификаторСтроки,
	|	Возврат.Менеджер                                  КАК Менеджер
	|
	|ПОМЕСТИТЬ ВтВозвратыПрошлыхПериодов
	|
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК Возврат
	|		ПО Возврат.Ссылка = Себестоимость.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ СторноОтчетыКомиссионера КАК СторноОтчетыКомиссионера
	|		ПО СторноОтчетыКомиссионера.АналитикаУчетаНоменклатуры = Себестоимость.АналитикаУчетаНоменклатуры
	|		И СторноОтчетыКомиссионера.РазделУчета = Себестоимость.РазделУчета
	|		И СторноОтчетыКомиссионера.ВидЗапасов = Себестоимость.ВидЗапасов
	|		И СторноОтчетыКомиссионера.Организация = Себестоимость.Организация
	|ГДЕ
	|	(Себестоимость.СлужебноеВидДвиженияПриход
	|		И Себестоимость.ХозяйственнаяОперация В (&МассивОперацийВозвратыПрошлыхПериодов))
	|	ИЛИ (Себестоимость.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомиссионера)
	|		И НЕ СторноОтчетыКомиссионера.Период ЕСТЬ NULL)
	|	И НЕ Себестоимость.РасчетСебестоимости
	|	
	|СГРУППИРОВАТЬ ПО
	|	Себестоимость.Период,
	|	ВЫБОР
	|		КОГДА Себестоимость.СлужебноеВидДвиженияПриход
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	Себестоимость.ВидЗапасов.ТипЗапасов,
	|	Себестоимость.Подразделение,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА Себестоимость.КорАналитикаУчетаНоменклатуры <> Значение(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		ТОГДА Себестоимость.КорАналитикаУчетаНоменклатуры
	|	ИНАЧЕ Себестоимость.АналитикаУчетаНоменклатуры КОНЕЦ,
	|	ВЫБОР КОГДА Себестоимость.КорВидЗапасов <> Значение(Справочник.ВидыЗапасов.ПустаяСсылка) ТОГДА
	|			Себестоимость.КорВидЗапасов
	|		ИНАЧЕ
	|			Себестоимость.ВидЗапасов
	|	КОНЕЦ,
	|	Себестоимость.КорАналитикаУчетаНоменклатуры,
	|	Себестоимость.ЗаказКлиента,
	|	Себестоимость.АналитикаУчетаПоПартнерам,
	|	Себестоимость.ХозяйственнаяОперация,
	|	Себестоимость.КорРазделУчета,
	|	Себестоимость.КорВидЗапасов,
	|	Себестоимость.ПериодПродажи,
	|	ЕСТЬNULL(СторноОтчетыКомиссионера.Период,
	|		НАЧАЛОПЕРИОДА(Себестоимость.ПериодПродажи, МЕСЯЦ)),
	|	Себестоимость.Организация,
	|	Себестоимость.КорОрганизация,
	|	Себестоимость.АналитикаРасходов,
	|	Себестоимость.СтатьяРасходовСписания,
	|	Себестоимость.СтатьяДоходов,
	|	Себестоимость.АналитикаДоходов,
	|	Себестоимость.ГруппаПродукции,
	|	Себестоимость.Регистратор,
	|	Себестоимость.НалоговоеНазначение,
	|	Себестоимость.КорНалоговоеНазначение,
	|	Себестоимость.ИдентификаторСтроки,
	|	Возврат.Менеджер
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВозвратов.Период                        КАК Период,
	|	ТаблицаВозвратов.ВидДвижения                   КАК ВидДвижения,
	|	ТаблицаВозвратов.Организация                   КАК Организация,
	|	ТаблицаВозвратов.КорОрганизация                КАК КорОрганизация,
	|	ТаблицаВозвратов.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВозвратов.РазделУчета                   КАК РазделУчета,
	|	ТаблицаВозвратов.ВидЗапасов                    КАК ВидЗапасов,
	|	ЕСТЬNULL(ТаблицаВозвратов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК ТипЗапасов,
	|	ТаблицаВозвратов.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	ТаблицаВозвратов.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВозвратов.КорРазделУчета                КАК КорРазделУчета,
	|	ТаблицаВозвратов.КорВидЗапасов                 КАК КорВидЗапасов,
	|	ТаблицаВозвратов.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаВозвратов.ЗаказКлиента                  КАК ЗаказКлиента,
	|	ТаблицаВозвратов.Подразделение                 КАК Подразделение,
	|	ТаблицаВозвратов.ПериодРеализации              КАК ПериодРеализации,
	|	ТаблицаВозвратов.АналитикаДоходов              КАК АналитикаДоходов,
	|	ТаблицаВозвратов.СтатьяДоходов                 КАК СтатьяДоходов,
	|	ТаблицаВозвратов.АналитикаРасходов             КАК АналитикаРасходов,
	|	ТаблицаВозвратов.СтатьяРасходовСписания        КАК СтатьяРасходовСписания,
	|	ТаблицаВозвратов.ГруппаПродукции               КАК ГруппаПродукции,
	|	ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходов, НЕОПРЕДЕЛЕНО) КАК ВариантРаспределенияРасходов,
	|	НЕОПРЕДЕЛЕНО                                   КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                                   КАК СтатьяАктивовПассивов,
	|	ТаблицаВозвратов.НалоговоеНазначение		   КАК НалоговоеНазначение,
	|	ТаблицаВозвратов.КорНалоговоеНазначение        КАК КорНалоговоеНазначение,
	|	ТаблицаВозвратов.ИдентификаторСтроки           КАК ИдентификаторСтроки,
	|	ТаблицаВозвратов.Менеджер                      КАК Менеджер,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		ТаблицаВозвратов.ВидЗапасов
	|	ИНАЧЕ
	|		Аналитика.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	Аналитика.Склад                                     КАК Склад,
	|	ТаблицаВозвратов.ДокументДвижения              КАК ДокументДвижения,
	|	ТаблицаВозвратов.ПериодПродажи                 КАК ПериодПродажи,
	|	ТаблицаВозвратов.Количество                    КАК Количество,
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			 * СтоимостьТоваров.Стоимость
	|			 - ТаблицаВозвратов.Стоимость
	|				КАК ЧИСЛО(15, 2))                  КАК Стоимость,
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			 * СтоимостьТоваров.СтоимостьБезНДС
	|			 - ТаблицаВозвратов.СтоимостьБезНДС
	|				КАК ЧИСЛО(15, 2))                  КАК СтоимостьБезНДС,
	|
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			* СтоимостьТоваров.СтоимостьДопРасходы
	|			- ТаблицаВозвратов.СуммаДопРасходов 
	|				КАК ЧИСЛО(15, 2))                  КАК СуммаДопРасходов,
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			* СтоимостьТоваров.СтоимостьДопРасходыБезНДС
	|			- ТаблицаВозвратов.СуммаДопРасходовБезНДС 
	|				КАК ЧИСЛО(15, 2))                  КАК СуммаДопРасходовБезНДС,
	|
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			 * СтоимостьТоваров.СтоимостьРегл
	|			- ТаблицаВозвратов.СтоимостьРегл 
	|			КАК ЧИСЛО(15, 2))                      КАК СтоимостьРегл,
	|
	|
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			 * СтоимостьТоваров.СтоимостьРеглБезНДС
	|			- ТаблицаВозвратов.СтоимостьРеглБезНДС 
	|			КАК ЧИСЛО(15, 2))                      КАК СтоимостьРеглБезНДС,
	|
	|
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			 * СтоимостьТоваров.НДСРегл
	|			- ТаблицаВозвратов.НДСРегл 
	|			КАК ЧИСЛО(15, 2))                      КАК НДСРегл,
	|
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			 * СтоимостьТоваров.ПостояннаяРазница
	|			- ТаблицаВозвратов.ПостояннаяРазница 
	|			КАК ЧИСЛО(15, 2))                      КАК ПостояннаяРазница,
	|
	|	ВЫРАЗИТЬ(
	|			ТаблицаВозвратов.Количество
	|			 * СтоимостьТоваров.ВременнаяРазница
	|			- ТаблицаВозвратов.ВременнаяРазница 
	|			КАК ЧИСЛО(15, 2))                      КАК ВременнаяРазница
	|
	|ИЗ
	|	ВтВозвратыПрошлыхПериодов КАК ТаблицаВозвратов
	// Соединение с ценой периода продажи
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьТоваров КАК СтоимостьТоваров
	|		ПО ТаблицаВозвратов.АналитикаНоменклатурыДляЦены = СтоимостьТоваров.АналитикаУчетаНоменклатуры
	|			И ТаблицаВозвратов.ВидыЗапасовДляЦены        = СтоимостьТоваров.ВидЗапасов
	|			И ТаблицаВозвратов.Организация               = СтоимостьТоваров.Организация
	|			И ТаблицаВозвратов.ПериодРеализации          = СтоимостьТоваров.Период
	// Получаем данные статьи расходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО ТаблицаВозвратов.СтатьяРасходовСписания = СтатьиРасходов.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВозвратов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Подготовим таблицу значения для переноса во временную таблицу ВТВозвраты
	//  - в случае предварительного расчета движения с/с не пишутся в регистр - сохраняются только в этой ВТ
	//  - при окончательном расчете движения будут в регистре, а эта ВТ будет пустой
	ОписаниеРегистраСебестоимость = ПараметрыРасчета.Движения[Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя];
	
	ПоляТаблицыВозвратов =
		"ВидДвижения, СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов, "
		+ СтрЗаменить(ОписаниеРегистраСебестоимость.РесурсыРегистра, "%1", "");
	
	ТаблицаВозвратов = ОписаниеРегистраСебестоимость.Таблица.СкопироватьКолонки(ПоляТаблицыВозвратов);
	
	// Формируются движения по регистрам:
	// - СебестоимостьТоваров
	// - ВыручкаИСебестоимостьПродаж
	// - ПрочиеРасходы
	// - ПрочиеДоходы
	// - ДвиженияНоменклатураДоходыРасходы
	// - ДвиженияНоменклатураНоменклатура
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда

		// Корректировка стоимости.
		Пока Выборка.Следующий() Цикл
			
			// Накопим новые движения себестоимости в таблице значений
			СформироватьДвиженияСебестоимостьТоваров(ПараметрыРасчета, Выборка, Выборка.ВидДвижения);

			Если Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы Тогда
				
				СформироватьДвиженияВыручкаИСебестоимостьПродажВозврат(ПараметрыРасчета, Выборка);
				
			КонецЕсли;

			// Формирование прочих доходов/расходов при возврате тары от клиента
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТарыОтКлиентаПрошлыхПериодов
			 И ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов Тогда
				
				СуммаПереоценки = Выборка.Стоимость + Выборка.СуммаДопРасходов;
				
				Если СуммаПереоценки < 0 Тогда 

					СформироватьДвиженияПрочиеРасходы(
						ПараметрыРасчета,
						Выборка,
						-СуммаПереоценки,
						-Выборка.СтоимостьБезНДС + Выборка.СуммаДопРасходовБезНДС,
						-Выборка.СтоимостьРегл,
						-Выборка.СтоимостьРеглБезНДС,
						-Выборка.НДСРегл,
						-Выборка.ПостояннаяРазница,
						-Выборка.ВременнаяРазница);

				ИначеЕсли СуммаПереоценки > 0 Тогда

					СформироватьДвиженияПрочиеДоходы(
						ПараметрыРасчета,
						Выборка,
						СуммаПереоценки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы
			 И ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов Тогда
				
				СформироватьДвиженияПрочиеРасходы(
					ПараметрыРасчета,
					Выборка,
					- (Выборка.Стоимость + Выборка.СуммаДопРасходов),
					- (Выборка.СтоимостьБезНДС + Выборка.СуммаДопРасходовБезНДС),
					- Выборка.СтоимостьРегл,
					- Выборка.СтоимостьРеглБезНДС,
					- Выборка.НДСРегл,
					- Выборка.ПостояннаяРазница,
					- Выборка.ВременнаяРазница);
				
			КонецЕсли;
				
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера
			 И Выборка.Количество < 0 Тогда
				СтрокаВозврата = ТаблицаВозвратов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВозврата, Выборка);
				СтрокаВозврата.СлужебноеВидДвиженияПриход = Истина;
				СтрокаВозврата.Количество = - Выборка.Количество;
				СтрокаВозврата.Стоимость = - Выборка.Стоимость;
				СтрокаВозврата.СтоимостьБезНДС = - Выборка.СтоимостьБезНДС;
				СтрокаВозврата.СуммаДопРасходов = - Выборка.СуммаДопРасходов;
				СтрокаВозврата.СуммаДопРасходовБезНДС = - Выборка.СуммаДопРасходовБезНДС;
				СтрокаВозврата.СтоимостьРегл = - Выборка.СтоимостьРегл;
				СтрокаВозврата.СтоимостьРеглБезНДС = - Выборка.СтоимостьРеглБезНДС;
				СтрокаВозврата.НДСРегл = - Выборка.НДСРегл;
				СтрокаВозврата.ПостояннаяРазница = - Выборка.ПостояннаяРазница;
				СтрокаВозврата.ВременнаяРазница = - Выборка.ВременнаяРазница;
			КонецЕсли;
				
			// Корректировка движений по оборотным регистрам управленческого учета.
			СформироватьДвиженияПоОборотнымРегистрамУпрУчета(ПараметрыРасчета, Выборка);
			
		КонецЦикла;
		
	Иначе // предварительный расчет
		
		// Соберем движения себестоимости в таблице значений, подобно СформироватьДвиженияСебестоимостьТоваров()
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ТаблицаВозвратов.Добавить(), Выборка);
			
		КонецЦикла;
		
		ТаблицаВозвратов.ЗаполнитьЗначения(Истина, "СлужебноеВидДвиженияПриход");
		ТаблицаВозвратов.ЗаполнитьЗначения(0,	   "Количество");
		
	КонецЕсли;
	
	// Сохраним таблицу возвратов в общем менеджере временных таблиц
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТВозвраты");
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТВозвраты",
		ТаблицаВозвратов,
		ПоляТаблицыВозвратов);
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВтВозвратыПрошлыхПериодов");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры


// Этап 3.5
// Формирует временную таблицу ВтПередачиТоваров
//
Процедура СформироватьТаблицуПередачМеждуОрганизациями(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СформироватьТаблицуПередачМеждуОрганизациями");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец            КАК ОрганизацияПродавец,
	|	ПроданныеТовары.ВидЗапасовПродавца.Организация КАК ОрганизацияПолучатель,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	СУММА(ПроданныеТовары.КоличествоОстаток)       КАК Количество,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ПроданныеТовары.ВидЗапасовПродавца.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасовПродавца,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ПроданныеТовары.ВидЗапасовПродавца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасовПолучателя
	|
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|		&ПредварительныйРасчет
	|		И ОрганизацияВладелец В (&МассивОрганизаций)
	|		И ВидЗапасовПродавца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	) КАК ПроданныеТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ПроданныеТовары.ВидЗапасовПродавца.Организация,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ПроданныеТовары.ВидЗапасовПродавца.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ПроданныеТовары.ВидЗапасовПродавца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                  КАК ВидДвижения,
	|	&КонецПериода                                                           КАК Период,
	|	Товары.АналитикаУчетаНоменклатуры                                       КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПродавец                                              КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|
	|	Товары.ВидЗапасовПродавца   КАК ВидЗапасов,
	|	Товары.ВидЗапасовПолучателя КАК КорВидЗапасов,
	|
	|	Товары.Количество КАК Количество,
	|	0                 КАК Стоимость,
	|	0                 КАК ПостояннаяРазница,
	|	0                 КАК ВременнаяРазница,
	|	0                 КАК СтоимостьБезНДС,
	|	0                 КАК СтоимостьРегл,
	|	0                 КАК СтоимостьРеглБезНДС,
	|	0                 КАК НДСРегл,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)          КАК КорРазделУчета,
	|	Товары.ОрганизацияПолучатель                                                     КАК КорОрганизация,
	|	Товары.АналитикаУчетаНоменклатуры                                                КАК КорАналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию) КАК ХозяйственнаяОперация
	|
	|ПОМЕСТИТЬ ВтПередачиТоваров
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&КонецПериода КАК Период,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПолучатель КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|
	|	Товары.ВидЗапасовПолучателя КАК ВидЗапасов,
	|	Неопределено КАК КорВидЗапасов,
	|
	|	Товары.Количество КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРегл,
	|
	|	Неопределено КАК КорРазделУчета,
	|	Неопределено КАК КорОрганизация,
	|	Неопределено КАК КорАналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию) КАК ХозяйственнаяОперация
	|ИЗ
	|	Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Организация
	|";
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВтПередачиТоваров");
	Запрос.Выполнить();
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"Товары");
	
КонецПроцедуры

// Этап 3.6
Процедура СформироватьУзлыКорректировкиСписанияСтоимости(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СформироватьУзлыКорректировкиСписанияСтоимости");
	
	ТекстЗапроса =
	"
	// Данные об аналитике для расчета.
	|//ПредварительныйРасчет ВЫБРАТЬ РАЗЛИЧНЫЕ
	|//ПредварительныйРасчет	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|//ПредварительныйРасчет	УчетСебестоимости.РазделУчета                КАК РазделУчета,
	|//ПредварительныйРасчет	УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов
	|//ПредварительныйРасчет ПОМЕСТИТЬ ВтАналитикаНоменклатуры
	|//ПредварительныйРасчет ИЗ
	|//ПредварительныйРасчет	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|//ПредварительныйРасчет ГДЕ
	|//ПредварительныйРасчет	НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|//ПредварительныйРасчет	ИЛИ УчетСебестоимости.РазделУчета = Значение(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|//ПредварительныйРасчет
	|//ПредварительныйРасчет ОБЪЕДИНИТЬ
	|//ПредварительныйРасчет
	|//ПредварительныйРасчет ВЫБРАТЬ
	|//ПредварительныйРасчет	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|//ПредварительныйРасчет	УчетСебестоимости.РазделУчета                КАК РазделУчета,
	|//ПредварительныйРасчет	УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов
	|//ПредварительныйРасчет ИЗ
	|//ПредварительныйРасчет	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаНачалоПериода,
	|//ПредварительныйРасчет		Организация В (&МассивОрганизаций)
	|//ПредварительныйРасчет		И РазделУчета = Значение(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|//ПредварительныйРасчет	) КАК УчетСебестоимости
	|//ПредварительныйРасчет ;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Организация,
	|	ДД.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ДД.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета
	|ПОМЕСТИТЬ
	|	ЕстьВозвратныеОтходы
	|ИЗ
	|	РегистрНакопления.ПартииПроизводственныхЗатрат КАК ДД
	|ГДЕ
	|	ДД.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДД.Количество < 0
	|	И ДД.Организация В (&МассивОрганизаций)
	|	И ДД.Активность
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	// Данные о движении товаров за период.
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация                КАК Организация,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.РазделУчета                КАК РазделУчета,
	|	ВложенныйЗапрос.ВидЗапасов                 КАК ВидЗапасов,
	|	СУММА(ВложенныйЗапрос.Количество)          КАК Количество,
	|	ВЫРАЗИТЬ(
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|				ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.Стоимость) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(23,10))  КАК Стоимость,
	|	ВЫРАЗИТЬ(
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|				ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.СтоимостьБезНДС) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(23,10))  КАК СтоимостьБезНДС,
	|
	|	ВЫРАЗИТЬ(
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|				ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.СуммаДопРасходов) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(23,10))  КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|				ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.СуммаДопРасходовБезНДС) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(23,10))  КАК СтоимостьДопРасходыБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))  КАК СтоимостьРеглБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))  КАК НДСРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))  КАК ПостояннаяРазница,
	|	1 КАК ПостояннаяРазницаЗнак,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))  КАК ВременнаяРазница,
	|	1 КАК ВременнаяРазницаЗнак
	|
	|//ДляФИФО ПОМЕСТИТЬ ТаблицаУзлыКорректировки
	|ИЗ
	|
	|	(ВЫБРАТЬ
			// Данные по всем движениям за период. По 'внешним' приходам собираются суммы и количество поступления.
	|		УчетСебестоимости.Организация                КАК Организация,
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		(ВЫБОР
	|			КОГДА УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			 И УчетСебестоимости.Количество < 0
	|			 И НЕ ЕстьВозвратныеОтходы.Организация ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка) // возвратные отходы учитываем по пустому разделу учета
	|			ИНАЧЕ УчетСебестоимости.РазделУчета КОНЕЦ) КАК РазделУчета,
	|		УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|				ТОГДА УчетСебестоимости.Количество
	|			КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями И УчетСебестоимости.Количество < 0
	|				ТОГДА -УчетСебестоимости.Количество
	|			ИНАЧЕ 0 КОНЕЦ КАК Количество,
	|
	|		// Данные о суммах внешних поступлений.
	|		ВЫБОР КОГДА (УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика))
	|		 И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|		 И УчетСебестоимости.Количество = 0
	|		 И НЕ &ПредварительныйРасчет ТОГДА
	|			УчетСебестоимости.Стоимость
	|
	|		КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&МассивОперацийПоступление)
	|			И УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК Стоимость,
	|
	|		ВЫБОР КОГДА (УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика))
	|		 И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|		 И УчетСебестоимости.Количество = 0
	|		 И НЕ &ПредварительныйРасчет ТОГДА
	|			УчетСебестоимости.СтоимостьБезНДС
	|
	|		КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&МассивОперацийПоступление)
	|			И УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.СтоимостьБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СтоимостьБезНДС,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.СуммаДопРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СуммаДопРасходов,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.СуммаДопРасходовБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СуммаДопРасходовБезНДС
	|	ИЗ
	|		ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьВозвратныеОтходы КАК ЕстьВозвратныеОтходы
	|			ПО ЕстьВозвратныеОтходы.Организация = УчетСебестоимости.Организация
	|			И ЕстьВозвратныеОтходы.АналитикаУчетаНоменклатуры = УчетСебестоимости.АналитикаУчетаНоменклатуры
	|			И ЕстьВозвратныеОтходы.ВидЗапасов = УчетСебестоимости.ВидЗапасов
	|			И ЕстьВозвратныеОтходы.РазделУчета = УчетСебестоимости.РазделУчета
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
			//Данные о возвратах прошлых периодов.
	|		УчетСебестоимости.Организация                КАК Организация,
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		УчетСебестоимости.РазделУчета                КАК РазделУчета,
	|		УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК Количество,
			// Данные о суммах внешних поступлений.
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК Стоимость,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.СтоимостьБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СтоимостьБезНДС,
	|
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.СуммаДопРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СуммаДопРасходов,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.СуммаДопРасходовБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СуммаДопРасходовБезНДС
	|	ИЗ
	|		ВТВозвраты КАК УчетСебестоимости
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
			//Данные о передачах между организациям.
	|		УчетСебестоимости.Организация                КАК Организация,
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		УчетСебестоимости.РазделУчета                КАК РазделУчета,
	|		УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов,
	|		ВЫБОР КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК Количество,
			// Данные о суммах внешних поступлений.
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК Стоимость,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СтоимостьБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СтоимостьБезНДС,
	|
	|		0                                            КАК СуммаДопРасходов,
	|		0                                            КАК СуммаДопРасходовБезНДС
	|	ИЗ
	|		ВтПередачиТоваров КАК УчетСебестоимости
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Таблица.Организация                КАК Организация,
	|		Таблица.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Таблица.РазделУчета                КАК РазделУчета,
	|		Таблица.ВидЗапасов                 КАК ВидЗапасов,
	|		0                                  КАК Количество,
	|		0                                  КАК Стоимость,
	|		0                                  КАК СтоимостьБезНДС,
	|		Таблица.СуммаДопРасходов           КАК СуммаДопРасходов,
	|		Таблица.СуммаДопРасходовБезНДС     КАК СуммаДопРасходовБезНДС
	|	ИЗ ВТДопРасходов КАК Таблица
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	// Данные по остаткам на начало расчетного периода.
	|	ВЫБРАТЬ
	|		УчетСебестоимости.Организация                   КАК Организация,
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|		УчетСебестоимости.РазделУчета                   КАК РазделУчета,
	|		УчетСебестоимости.ВидЗапасов                    КАК ВидЗапасов,
	|		УчетСебестоимости.КоличествоОстаток             КАК Количество,
	|		УчетСебестоимости.СтоимостьОстаток              КАК Стоимость,
	|		УчетСебестоимости.СтоимостьБезНДСОстаток        КАК СтоимостьБезНДС,
	|		УчетСебестоимости.СуммаДопРасходовОстаток       КАК СуммаДопРасходов,
	|		УчетСебестоимости.СуммаДопРасходовБезНДСОстаток КАК СуммаДопРасходовБезНДС
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаНачалоПериода,
	|			Организация В (&МассивОрганизаций)
	|			//ПредварительныйРасчет И (АналитикаУчетаНоменклатуры,
	|			//ПредварительныйРасчет 	РазделУчета,
	|			//ПредварительныйРасчет 	ВидЗапасов)
	|			//ПредварительныйРасчет В
	|			//ПредварительныйРасчет (ВЫБРАТЬ
	|			//ПредварительныйРасчет 	АналитикаУчетаНоменклатуры,
	|			//ПредварительныйРасчет 	РазделУчета,
	|			//ПредварительныйРасчет 	ВидЗапасов
	|			//ПредварительныйРасчет	ИЗ ВтАналитикаНоменклатуры)
	|		) КАК УчетСебестоимости
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.ВидЗапасов,
	|	ВложенныйЗапрос.РазделУчета,
	|	ВложенныйЗапрос.Организация
	|";
	
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПредварительныйРасчет", "");
	КонецЕсли;

	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВтУзлыКорректировки");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Если ПараметрыРасчета.ПредварительныйРасчет
	 ИЛИ ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц Тогда
		ТаблицаУзлов = Запрос.Выполнить().Выгрузить();
	Иначе // ФИФОВзвешеннаяОценка
		ТаблицаУзлов = ПодготовитьДанныеДляРасчетаСтоимостиПоФИФО(ПараметрыРасчета, Запрос);
	КонецЕсли;

	МассивУзлов = Новый Массив;
	Для СчетчикУзлов = 1 По ТаблицаУзлов.Количество() Цикл
		МассивУзлов.Добавить(СчетчикУзлов);
	КонецЦикла;

	ТаблицаУзлов.Колонки.Добавить("НомерУзла", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(25, 0));
	ТаблицаУзлов.ЗагрузитьКолонку(МассивУзлов, "НомерУзла");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВтУзлыКорректировки
	|
	|ИЗ
	|	&ТаблицаУзлов КАК ТаблицаУзлов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	РазделУчета,
	|	ВидЗапасов,
	|	Организация,
	|	НомерУзла
	|";
	
	Запрос.УстановитьПараметр("ТаблицаУзлов", ТаблицаУзлов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Выборка.Следующий();
	ПараметрыРасчета.Вставить("КоличествоУзлов", Выборка.Количество);
	
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда
		УничтожитьВременныеТаблицы(
			ПараметрыРасчета.МенеджерВременныхТаблиц,
			"ВтАналитикаНоменклатуры");
	КонецЕсли;
	
КонецПроцедуры

// Этап 3.7, 3.11
Процедура РассчитатьСтоимость(ПараметрыРасчета, РасчетСтоимостиРегл)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "РассчитатьСтоимость" + ?(РасчетСтоимостиРегл, "(Регл)", ""));
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = ?(РасчетСтоимостиРегл, ТекстЗапросаДвиженияСтоимостиРегл(), ТекстЗапросаДвиженияСтоимости());
	
	Запрос.Выполнить();
	
	РешитьСЛУ(ПараметрыРасчета, РасчетСтоимостиРегл);
	
КонецПроцедуры

// Этап 3.8, 3.12
Процедура ЗарегистрироватьСтоимость(ПараметрыРасчета, РегистрацияСтоимостиРегл)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ЗарегистрироватьСтоимость" + ?(РегистрацияСтоимостиРегл, "(Регл)", ""));
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.УстановитьПараметр("РегистрацияСтоимостиРегл", РегистрацияСтоимостиРегл);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.АналитикаУчетаНоменклатуры 							 				   КАК АналитикаУчетаНоменклатуры,
	|	Остатки.РазделУчета 										 				   КАК РазделУчета,
	|	Остатки.ВидЗапасов 											 				   КАК ВидЗапасов,
	|	Остатки.Организация 										 				   КАК Организация,
	|	Остатки.Количество 											 				   КАК Количество,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.Стоимость КАК ЧИСЛО(23,10)) / Остатки.Количество 				 КАК ЧИСЛО(23,10)) КАК Стоимость,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.СтоимостьБезНДС КАК ЧИСЛО(23,10)) / Остатки.Количество 		 КАК ЧИСЛО(23,10)) КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.СуммаДопРасходов КАК ЧИСЛО(23,10)) / Остатки.Количество 		 КАК ЧИСЛО(23,10)) КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.СуммаДопРасходовБезНДС КАК ЧИСЛО(23,10)) / Остатки.Количество КАК ЧИСЛО(23,10)) КАК СтоимостьДопРасходыБезНДС,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.СтоимостьРегл КАК ЧИСЛО(23,10)) / Остатки.Количество 			 КАК ЧИСЛО(23,10)) КАК СтоимостьРегл,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.СтоимостьРеглБезНДС КАК ЧИСЛО(23,10)) / Остатки.Количество     КАК ЧИСЛО(23,10)) КАК СтоимостьРеглБезНДС,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.НДСРегл КАК ЧИСЛО(23,10)) / Остатки.Количество 			     КАК ЧИСЛО(23,10)) КАК НДСРегл,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.ПостояннаяРазница КАК ЧИСЛО(23,10)) / Остатки.Количество 		 КАК ЧИСЛО(23,10)) КАК ПостояннаяРазница,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(Остатки.ВременнаяРазница КАК ЧИСЛО(23,10)) / Остатки.Количество 		 КАК ЧИСЛО(23,10)) КАК ВременнаяРазница,
	|	ВЫБОР
	|	  КОГДА Остатки.ПостояннаяРазница / Остатки.Количество < 0
	|		ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ 														 				   КАК ПостояннаяРазницаЗнак,
	|	ВЫБОР
	|	  КОГДА Остатки.ВременнаяРазница / Остатки.Количество < 0
	|		ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ 														 				   КАК ВременнаяРазницаЗнак
	|ПОМЕСТИТЬ ВТОстаткиСтоимости
	|ИЗ
	|	ВТКэшРасчетныеОстаткиСебестоимостьТоваров КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК Узлы
	|			ПО Узлы.АналитикаУчетаНоменклатуры = Остатки.АналитикаУчетаНоменклатуры
	|			И Узлы.РазделУчета = Остатки.РазделУчета
	|			И Узлы.ВидЗапасов = Остатки.ВидЗапасов
	|			И Узлы.Организация = Остатки.Организация
	|			И Узлы.Количество > 0
	|ГДЕ
	|	Остатки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	И Остатки.Количество > 0
	|	И Узлы.НомерУзла ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Таблица.Организация                                   	 КАК Организация,
	|	Таблица.АналитикаУчетаНоменклатуры                    	 КАК АналитикаУчетаНоменклатуры,
	|	Таблица.ВидЗапасов                                    	 КАК ВидЗапасов,
	|	Таблица.РазделУчета                                   	 КАК РазделУчета,
	|
	|	СУММА(Таблица.Стоимость)                             	 КАК Стоимость,
	|	СУММА(Таблица.СтоимостьБезНДС)                      	 КАК СтоимостьБезНДС,
	|	СУММА(Таблица.ПостояннаяРазница)                      	 КАК ПостояннаяРазница,
	|	СУММА(Таблица.ВременнаяРазница)                       	 КАК ВременнаяРазница,
	|	СУММА(Таблица.СтоимостьДопРасходы)                 	     КАК СтоимостьДопРасходы,
	|	СУММА(Таблица.СтоимостьДопРасходыБезНДС)           	     КАК СтоимостьДопРасходыБезНДС,
	|	СУММА(Таблица.СтоимостьРегл)                         	 КАК СтоимостьРегл,
	|	СУММА(Таблица.СтоимостьРеглБезНДС)                       КАК СтоимостьРеглБезНДС,
	|	СУММА(Таблица.НДСРегл)                         	 		 КАК НДСРегл,
	|
	|	СУММА(Таблица.СтоимостьНовоеЗначение)                    КАК СтоимостьНовоеЗначение,
	|	СУММА(Таблица.СтоимостьБезНДСНовоеЗначение)              КАК СтоимостьБезНДСНовоеЗначение,
	|	СУММА(Таблица.ПостояннаяРазницаНовоеЗначение)
	|		* СУММА(Таблица.ПостояннаяРазницаЗнак) 				 КАК ПостояннаяРазницаНовоеЗначение,
	|	СУММА(Таблица.ВременнаяРазницаНовоеЗначение)
	|		* СУММА(Таблица.ВременнаяРазницаЗнак) 				 КАК ВременнаяРазницаНовоеЗначение,
	|	СУММА(Таблица.СтоимостьРеглБезНДСНовоеЗначение)          КАК СтоимостьРеглБезНДСНовоеЗначение,
	|	СУММА(Таблица.НДСРеглНовоеЗначение)                      КАК НДСРеглНовоеЗначение,
	|	СУММА(Таблица.СтоимостьДопРасходыНовоеЗначение)          КАК СтоимостьДопРасходыНовоеЗначение,
	|	СУММА(Таблица.СтоимостьДопРасходыБезНДСНовоеЗначение)    КАК СтоимостьДопРасходыБезНДСНовоеЗначение
	|ПОМЕСТИТЬ ВТВременныйКэшСтоимостьТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		УзлыКорректировки.Организация                КАК Организация,
	|		УзлыКорректировки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		УзлыКорректировки.ВидЗапасов                 КАК ВидЗапасов,
	|		УзлыКорректировки.РазделУчета                КАК РазделУчета,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК Стоимость,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК СтоимостьБезНДС,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК ПостояннаяРазница,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК ВременнаяРазница,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК СтоимостьДопРасходы,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК СтоимостьДопРасходыБезНДС,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК СтоимостьРегл,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК СтоимостьРеглБезНДС,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))				 КАК НДСРегл,
	|		ТаблицаРешений.Стоимость                     КАК СтоимостьНовоеЗначение,
	|		ТаблицаРешений.СтоимостьБезНДС               КАК СтоимостьБезНДСНовоеЗначение,
	|		ТаблицаРешений.ПостояннаяРазница             КАК ПостояннаяРазницаНовоеЗначение,
	|		ТаблицаРешений.ПостояннаяРазницаЗнак         КАК ПостояннаяРазницаЗнак,
	|		ТаблицаРешений.ВременнаяРазница              КАК ВременнаяРазницаНовоеЗначение,
	|		ТаблицаРешений.ВременнаяРазницаЗнак          КАК ВременнаяРазницаЗнак,
	|		ТаблицаРешений.СтоимостьРеглБезНДС           КАК СтоимостьРеглБезНДСНовоеЗначение,
	|		ТаблицаРешений.НДСРегл                       КАК НДСРеглНовоеЗначение,
	|		ТаблицаРешений.СтоимостьДопРасходы           КАК СтоимостьДопРасходыНовоеЗначение,
	|		ТаблицаРешений.СтоимостьДопРасходыБезНДС     КАК СтоимостьДопРасходыБезНДСНовоеЗначение
	|	ИЗ
	|		ВтТаблицаРешений КАК ТаблицаРешений
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировки
	|				ПО ТаблицаРешений.НомерУзла = УзлыКорректировки.НомерУзла
	|	ГДЕ
	|		(ТаблицаРешений.Стоимость <> 0
	|			ИЛИ ТаблицаРешений.СтоимостьБезНДС <> 0
	|			ИЛИ ТаблицаРешений.СтоимостьДопРасходы <> 0
	|			ИЛИ ТаблицаРешений.СтоимостьДопРасходыБезНДС <> 0)
	|		И УзлыКорректировки.АналитикаУчетаНоменклатуры ССЫЛКА Справочник.КлючиАналитикиУчетаНоменклатуры
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Остатки.Организация                   КАК Организация,
	|		Остатки.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|		Остатки.ВидЗапасов                    КАК ВидЗапасов,
	|		Остатки.РазделУчета                	  КАК РазделУчета,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК Стоимость,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК СтоимостьБезНДС,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК ПостояннаяРазница,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК ВременнаяРазница,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК СтоимостьДопРасходы,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК СтоимостьДопРасходыБезНДС,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК СтоимостьРегл,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК СтоимостьРеглБезНДС,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  КАК НДСРегл,
	|		Остатки.Стоимость                     КАК СтоимостьНовоеЗначение,
	|		Остатки.СтоимостьБезНДС               КАК СтоимостьБезНДСНовоеЗначение,
	|		Остатки.ПостояннаяРазница             КАК ПостояннаяРазницаНовоеЗначение,
	|		Остатки.ПостояннаяРазницаЗнак         КАК ПостояннаяРазницаЗнак,
	|		Остатки.ВременнаяРазница              КАК ВременнаяРазницаНовоеЗначение,
	|		Остатки.ВременнаяРазницаЗнак          КАК ВременнаяРазницаЗнак,
	|		Остатки.СтоимостьРеглБезНДС           КАК СтоимостьРеглБезНДСНовоеЗначение,
	|		Остатки.НДСРегл                       КАК НДСРеглНовоеЗначение,
	|		Остатки.СтоимостьДопРасходы           КАК СтоимостьДопРасходыНовоеЗначение,
	|		Остатки.СтоимостьДопРасходыБезНДС     КАК СтоимостьДопРасходыБезНДСНовоеЗначение
	|	ИЗ
	|		ВТОстаткиСтоимости КАК Остатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтоимостьТоваров.Организация 				КАК Организация,
	|		СтоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		СтоимостьТоваров.ВидЗапасов 				КАК ВидЗапасов,
	|		СтоимостьТоваров.РазделУчета 				КАК РазделУчета,
	|		СтоимостьТоваров.Стоимость 					КАК Стоимость,
	|		СтоимостьТоваров.СтоимостьБезНДС 			КАК СтоимостьБезНДС,
	|		СтоимостьТоваров.ПостояннаяРазница 			КАК ПостояннаяРазница,
	|		СтоимостьТоваров.ВременнаяРазница 			КАК ВременнаяРазница,
	|		СтоимостьТоваров.СтоимостьДопРасходы 		КАК СтоимостьДопРасходы,
	|		СтоимостьТоваров.СтоимостьДопРасходыБезНДС 	КАК СтоимостьДопРасходыБезНДС,
	|		СтоимостьТоваров.СтоимостьРегл 				КАК СтоимостьРегл,
	|		СтоимостьТоваров.СтоимостьРеглБезНДС 		КАК СтоимостьРеглБезНДС,
	|		СтоимостьТоваров.НДСРегл 				    КАК НДСРегл,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  		КАК СтоимостьНовоеЗначение,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  		КАК СтоимостьБезНДСНовоеЗначение,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  		КАК ПостояннаяРазницаНовоеЗначение,
	|		0 											КАК ПостояннаяРазницаЗнак,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  		КАК ВременнаяРазницаНовоеЗначение,
	|		0 											КАК ВременнаяРазницаЗнак,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  		КАК СтоимостьРеглБезНДСНовоеЗначение,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  		КАК НДСРеглНовоеЗначение,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  		КАК СтоимостьДопРасходыНовоеЗначение,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))		  		КАК СтоимостьДопРасходыБезНДСНовоеЗначение
	|	ИЗ
	|		ВТКэшСтоимостьТоваров КАК СтоимостьТоваров
	|	) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АналитикаУчетаНоменклатуры,
	|	Таблица.Организация,
	|	Таблица.ВидЗапасов,
	|	Таблица.РазделУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТКэшСтоимостьТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка								КАК Регистратор,
	|	&НачалоПериода 														КАК Период,
	|	ИСТИНА 																КАК Активность,
	|
	|	СтоимостьТоваров.Организация 										КАК Организация,
	|	СтоимостьТоваров.АналитикаУчетаНоменклатуры 						КАК АналитикаУчетаНоменклатуры,
	|	СтоимостьТоваров.ВидЗапасов 										КАК ВидЗапасов,
	|	СтоимостьТоваров.РазделУчета 										КАК РазделУчета,
	|
	|	ВЫБОР КОГДА НЕ &РегистрацияСтоимостиРегл
	|		ТОГДА СтоимостьТоваров.СтоимостьНовоеЗначение
	|		ИНАЧЕ СтоимостьТоваров.Стоимость
	|	КОНЕЦ 																КАК Стоимость,
	|	ВЫБОР КОГДА НЕ &РегистрацияСтоимостиРегл
	|		ТОГДА СтоимостьТоваров.СтоимостьБезНДСНовоеЗначение
	|		ИНАЧЕ СтоимостьТоваров.СтоимостьБезНДС
	|	КОНЕЦ 																КАК СтоимостьБезНДС,
	|	СтоимостьТоваров.ПостояннаяРазница
	|		+ СтоимостьТоваров.ПостояннаяРазницаНовоеЗначение				КАК ПостояннаяРазница,
	|	СтоимостьТоваров.ВременнаяРазница
	|		+ СтоимостьТоваров.ВременнаяРазницаНовоеЗначение				КАК ВременнаяРазница,
	|	ВЫБОР КОГДА &РегистрацияСтоимостиРегл
	|		ТОГДА СтоимостьТоваров.СтоимостьРеглБезНДСНовоеЗначение
	|		ИНАЧЕ СтоимостьТоваров.СтоимостьРеглБезНДС
	|	КОНЕЦ 																КАК СтоимостьРеглБезНДС,
	|	ВЫБОР КОГДА &РегистрацияСтоимостиРегл
	|		ТОГДА СтоимостьТоваров.НДСРеглНовоеЗначение
	|		ИНАЧЕ СтоимостьТоваров.НДСРегл
	|	КОНЕЦ 																КАК НДСРегл,
	|	ВЫБОР КОГДА НЕ &РегистрацияСтоимостиРегл
	|		ТОГДА СтоимостьТоваров.СтоимостьДопРасходыНовоеЗначение
	|		ИНАЧЕ СтоимостьТоваров.СтоимостьДопРасходы
	|	КОНЕЦ 																КАК СтоимостьДопРасходы,
	|	ВЫБОР КОГДА НЕ &РегистрацияСтоимостиРегл
	|		ТОГДА СтоимостьТоваров.СтоимостьДопРасходыБезНДСНовоеЗначение
	|		ИНАЧЕ СтоимостьТоваров.СтоимостьДопРасходыБезНДС
	|	КОНЕЦ 																КАК СтоимостьДопРасходыБезНДС,
	|
	|	ВЫБОР КОГДА &РегистрацияСтоимостиРегл
	|		ТОГДА СтоимостьТоваров.СтоимостьНовоеЗначение
	|		ИНАЧЕ СтоимостьТоваров.СтоимостьРегл
	|	КОНЕЦ 																КАК СтоимостьРегл
	|
	|ПОМЕСТИТЬ ВТКэшСтоимостьТоваров
	|ИЗ
	|	ВТВременныйКэшСтоимостьТоваров КАК СтоимостьТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|			ПО СтоимостьТоваров.Организация = ДокументыРасчетаСебестоимости.Организация
	|";
	
	// ВТКэшСтоимостьТоваров единственный кэш движений, который не использует общий механизм кэширования движений.
	// Регистратором этого регистра сведений является только документ расчета себестоимости,
	// поэтому с этим кэшем работаем по "индивидуальной" схеме, без использования механизма кэширования движений.
    НачальныйРазмерТаблицы = УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСтоимостьТоваров");
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТКэшСтоимостьТоваров");
	Запрос.Выполнить();
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	ПротоколРасчета_КэшированиеСформированныхДвижений(
		ПараметрыРасчета,
		"СтоимостьТоваров",
		УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСтоимостьТоваров") - НачальныйРазмерТаблицы);
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТОстаткиСтоимости, ВТВременныйКэшСтоимостьТоваров");
	
КонецПроцедуры


// Этап 3.10
// Формирует временную таблицу узлов корректировки - ВтУзлыКорректировки.
//
Процедура СформироватьУзлыКорректировкиСписанияСтоимостиРегл(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СформироватьУзлыКорректировкиСписанияСтоимостиРегл");
	
	ТекстЗапроса =
	"
	// Данные об аналитике для расчета.
	|//ПредварительныйРасчет ВЫБРАТЬ РАЗЛИЧНЫЕ
	|//ПредварительныйРасчет	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|//ПредварительныйРасчет	УчетСебестоимости.РазделУчета                КАК РазделУчета,
	|//ПредварительныйРасчет	УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов
	|//ПредварительныйРасчет ПОМЕСТИТЬ ВтАналитикаНоменклатуры
	|//ПредварительныйРасчет ИЗ
	|//ПредварительныйРасчет	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|//ПредварительныйРасчет
	|//ПредварительныйРасчет ОБЪЕДИНИТЬ
	|//ПредварительныйРасчет 
	|//ПредварительныйРасчет ВЫБРАТЬ
	|//ПредварительныйРасчет	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|//ПредварительныйРасчет	УчетСебестоимости.РазделУчета                КАК РазделУчета,
	|//ПредварительныйРасчет	УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов
	|//ПредварительныйРасчет ИЗ
	|//ПредварительныйРасчет	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаНачалоПериода,
	|//ПредварительныйРасчет		РазделУчета = Значение(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|//ПредварительныйРасчет		И Организация В (&МассивОрганизаций)
	|//ПредварительныйРасчет	) КАК УчетСебестоимости
	|//ПредварительныйРасчет ;
	|////////////////////////////////////////////////////////////////////////////////
	|
	// Данные о движении товаров за период.
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация                КАК Организация,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.РазделУчета                КАК РазделУчета,
	|	ВложенныйЗапрос.ВидЗапасов                 КАК ВидЗапасов,
	|	СУММА(ВложенныйЗапрос.Количество)          КАК Количество,
	|	ВЫРАЗИТЬ(
	|		ВЫБОР КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|			ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.Стоимость) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО(23,10))   КАК Стоимость,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))  КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.ПостояннаяРазница) < 0 И СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|				-ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.ПостояннаяРазница) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|			КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|				ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.ПостояннаяРазница) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(23,10))  КАК ПостояннаяРазница,
	|	(ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.ПостояннаяРазница) < 0 ТОГДА -1
	|		ИНАЧЕ 1 КОНЕЦ) КАК ПостояннаяРазницаЗнак,
	|	ВЫРАЗИТЬ(
	|		ВЫБОР
	|			КОГДА СУММА(ВложенныйЗапрос.ВременнаяРазница) < 0 И СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|				-ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.ВременнаяРазница) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|			КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|				ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.ВременнаяРазница) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(23,10))  КАК ВременнаяРазница,
	|	(ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.ВременнаяРазница) < 0 ТОГДА -1
	|		ИНАЧЕ 1 КОНЕЦ) КАК ВременнаяРазницаЗнак,
	|
	|	ВЫРАЗИТЬ(
	|		ВЫБОР КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|			ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.СтоимостьРеглБезНДС) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО(23,10))   КАК СтоимостьРеглБезНДС,
	|
	|	ВЫРАЗИТЬ(
	|		ВЫБОР КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|			ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.НДСРегл) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО(23,10))   КАК НДСРегл,
	|
	|	ВЫРАЗИТЬ(
	|		ВЫБОР КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0 ТОГДА
	|			ВЫРАЗИТЬ(СУММА(ВложенныйЗапрос.СтоимостьДопРасходы) КАК ЧИСЛО(23,10)) / СУММА(ВложенныйЗапрос.Количество)
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК ЧИСЛО(23,10))   КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(23,10))  КАК СтоимостьДопРасходыБезНДС
	|
	|//ДляФИФО ПОМЕСТИТЬ ТаблицаУзлыКорректировки
	|ИЗ
	|
	|	(ВЫБРАТЬ
			// Данные по всем движениям за период. По 'внешним' приходам собираются суммы и количество поступления.
	|		УчетСебестоимости.Организация                КАК Организация,
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		(ВЫБОР
	|			КОГДА УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			 И УчетСебестоимости.Количество < 0
	|			 И НЕ ЕстьВозвратныеОтходы.Организация ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка) // возвратные отходы учитываем по пустому разделу учета
	|				ИНАЧЕ УчетСебестоимости.РазделУчета КОНЕЦ) КАК РазделУчета,
	|		УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Количество,
	// Данные о суммах внешних поступлений.
	|		ВЫБОР КОГДА (УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика))
	|		 И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|		 И УчетСебестоимости.Количество = 0
	|		 И НЕ &ПредварительныйРасчет ТОГДА
	|			УчетСебестоимости.СтоимостьРегл
	|
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И УчетСебестоимости.РасчетСебестоимости
	|		ТОГДА
	|			УчетСебестоимости.СтоимостьРегл
	|
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		ТОГДА
	|			УчетСебестоимости.СтоимостьРегл
	|
	|		КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&МассивОперацийПоступление)
	|			И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И (УчетСебестоимости.Количество <> 0 ИЛИ &СредняяЗаМесяц)
	|		ТОГДА
	|			УчетСебестоимости.СтоимостьРегл
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК Стоимость,
	|
	|		ВЫБОР КОГДА (УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика))
	|		 И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|		 И УчетСебестоимости.Количество = 0
	|		 И НЕ &ПредварительныйРасчет ТОГДА
	|			УчетСебестоимости.СтоимостьРеглБезНДС
	|
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И УчетСебестоимости.РасчетСебестоимости
	|		ТОГДА
	|			УчетСебестоимости.СтоимостьРеглБезНДС
	|
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		ТОГДА
	|			УчетСебестоимости.СтоимостьРеглБезНДС
	|
	|		КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&МассивОперацийПоступление)
	|			И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И (УчетСебестоимости.Количество <> 0 ИЛИ &СредняяЗаМесяц)
	|		ТОГДА
	|			УчетСебестоимости.СтоимостьРеглБезНДС
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК СтоимостьРеглБезНДС,
	|
	|		ВЫБОР КОГДА (УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|			ИЛИ УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика))
	|		 И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|		 И УчетСебестоимости.Количество = 0
	|		 И НЕ &ПредварительныйРасчет ТОГДА
	|			УчетСебестоимости.НДСРегл
	|
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И УчетСебестоимости.РасчетСебестоимости
	|		ТОГДА
	|			УчетСебестоимости.НДСРегл
	|
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		ТОГДА
	|			УчетСебестоимости.НДСРегл
	|
	|		КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&МассивОперацийПоступление)
	|			И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И (УчетСебестоимости.Количество <> 0 ИЛИ &СредняяЗаМесяц)
	|		ТОГДА
	|			УчетСебестоимости.НДСРегл
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК НДСРегл,
	|
	|
	|		ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&МассивОперацийПоступление)
	|			И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			И УчетСебестоимости.Количество = 0
	|			И НЕ &СредняяЗаМесяц
	|			И НЕ УчетСебестоимости.РасчетСебестоимости
	|		ТОГДА
	|			УчетСебестоимости.СтоимостьРегл
	|			ИНАЧЕ
	|			0
	|		КОНЕЦ КАК СтоимостьДопРасходы,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.ПостояннаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПостояннаяРазница,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.ВременнаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВременнаяРазница
	|	ИЗ
	|		ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьВозвратныеОтходы КАК ЕстьВозвратныеОтходы
	|			ПО ЕстьВозвратныеОтходы.Организация = УчетСебестоимости.Организация
	|			И ЕстьВозвратныеОтходы.АналитикаУчетаНоменклатуры = УчетСебестоимости.АналитикаУчетаНоменклатуры
	|			И ЕстьВозвратныеОтходы.ВидЗапасов = УчетСебестоимости.ВидЗапасов
	|			И ЕстьВозвратныеОтходы.РазделУчета = УчетСебестоимости.РазделУчета
	|
	|		//ПредварительныйРасчет		ГДЕ
	|		//ПредварительныйРасчет    		(УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|		//ПредварительныйРасчет			УчетСебестоимости.РазделУчета,
	|		//ПредварительныйРасчет			УчетСебестоимости.ВидЗапасов)
	|		//ПредварительныйРасчет				В
	|		//ПредварительныйРасчет				(ВЫБРАТЬ
	|		//ПредварительныйРасчет					АналитикаУчетаНоменклатуры,
	|		//ПредварительныйРасчет					РазделУчета,
	|		//ПредварительныйРасчет					ВидЗапасов
	|		//ПредварительныйРасчет			 	ИЗ ВтАналитикаНоменклатуры)
	|	
	////////////////////// Эта часть для предварительного расчета стоимости.
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
			// Данные по всем движениям за период. По 'внешним' приходам собираются суммы и количество поступления.
	|		УчетСебестоимости.Организация                КАК Организация,
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		УчетСебестоимости.РазделУчета                КАК РазделУчета,
	|		УчетСебестоимости.ВидЗапасов                 КАК ВидЗапасов,
	|		УчетСебестоимости.Количество                 КАК Количество,
			// Данные о суммах внешних поступлений.
	|		УчетСебестоимости.СтоимостьРегл              КАК Стоимость,
	|		УчетСебестоимости.СтоимостьРеглБезНДС        КАК СтоимостьРеглБезНДС,
	|		УчетСебестоимости.НДСРегл                    КАК НДСРегл,
	|		0                                            КАК СтоимостьДопРасходы,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.ПостояннаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК ПостояннаяРазница,
	|		ВЫБОР КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход ТОГДА
	|				УчетСебестоимости.ВременнаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК ВременнаяРазница
	|	ИЗ
	|		ВТВозвраты КАК УчетСебестоимости
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ // Доп. расходы
	|		Таблица.Организация                КАК Организация,
	|		Таблица.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Таблица.РазделУчета                КАК РазделУчета,
	|		Таблица.ВидЗапасов                 КАК ВидЗапасов,
	|		0                                  КАК Количество,
	|		0                                  КАК Стоимость,
	|		0                                  КАК СтоимостьРеглБезНДС,
	|		0                                  КАК НДСРегл,
	|		Таблица.СтоимостьРегл              КАК СтоимостьДопРасходы,
	|		0                                  КАК ПостояннаяРазница,
	|		0                                  КАК ВременнаяРазница
	|
	|	ИЗ ВТДопРасходов КАК Таблица
	|
	/////////////////////////////
	|	ОБЪЕДИНИТЬ ВСЕ
	// Данные по остаткам на начало расчетного периода.
	|	ВЫБРАТЬ
	|		УчетСебестоимости.Организация                           КАК Организация,
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры            КАК АналитикаУчетаНоменклатуры,
	|		УчетСебестоимости.РазделУчета                           КАК РазделУчета,
	|		УчетСебестоимости.ВидЗапасов                            КАК ВидЗапасов,
	|		УчетСебестоимости.КоличествоОстаток                     КАК Количество,
	|		УчетСебестоимости.СтоимостьРеглОстаток                  КАК Стоимость,
	|		УчетСебестоимости.СтоимостьРеглБезНДСОстаток            КАК СтоимостьРеглБезНДС,
	|		УчетСебестоимости.НДСРеглОстаток                        КАК НДСРегл,
	|		0                                                       КАК СтоимостьДопРасходы,
	|		УчетСебестоимости.ПостояннаяРазницаОстаток              КАК ПостояннаяРазница,
	|		УчетСебестоимости.ВременнаяРазницаОстаток               КАК ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаНачалоПериода,
	|			Организация В (&МассивОрганизаций)
	|			//ПредварительныйРасчет И (АналитикаУчетаНоменклатуры,
	|			//ПредварительныйРасчет 	РазделУчета,
	|			//ПредварительныйРасчет 	ВидЗапасов)
	|			//ПредварительныйРасчет В
	|			//ПредварительныйРасчет (ВЫБРАТЬ
	|			//ПредварительныйРасчет 	АналитикаУчетаНоменклатуры,
	|			//ПредварительныйРасчет 	РазделУчета,
	|			//ПредварительныйРасчет 	ВидЗапасов
	|			//ПредварительныйРасчет	ИЗ ВтАналитикаНоменклатуры)
	|		) КАК УчетСебестоимости
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.ВидЗапасов,
	|	ВложенныйЗапрос.РазделУчета,
	|	ВложенныйЗапрос.Организация
	|";
	
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПредварительныйРасчет", "");
	КонецЕсли;

	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВтУзлыКорректировки");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	Если ПараметрыРасчета.ПредварительныйРасчет
	 ИЛИ ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц Тогда
		ТаблицаУзлов = Запрос.Выполнить().Выгрузить();
	Иначе // ФИФОВзвешеннаяОценка
		ТаблицаУзлов = ПодготовитьДанныеДляРасчетаСтоимостиРеглПоФИФО(ПараметрыРасчета, Запрос);
	КонецЕсли;

	МассивУзлов = Новый Массив;
	Для СчетчикУзлов = 1 По ТаблицаУзлов.Количество() Цикл
		МассивУзлов.Добавить(СчетчикУзлов);
	КонецЦикла;

	ТаблицаУзлов.Колонки.Добавить("НомерУзла", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(25, 0));
	ТаблицаУзлов.ЗагрузитьКолонку(МассивУзлов, "НомерУзла");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВтУзлыКорректировки
	|
	|ИЗ
	|	&ТаблицаУзлов КАК ТаблицаУзлов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	РазделУчета,
	|	ВидЗапасов,
	|	Организация,
	|	НомерУзла
	|";
	
	Запрос.УстановитьПараметр("ТаблицаУзлов", ТаблицаУзлов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Выборка.Следующий();
	ПараметрыРасчета.Вставить("КоличествоУзловРегл", Выборка.Количество);
	
	Если НЕ ПараметрыРасчета.ПредварительныйРасчет Тогда
		УничтожитьВременныеТаблицы(
			ПараметрыРасчета.МенеджерВременныхТаблиц,
			"ВтАналитикаНоменклатуры");
	КонецЕсли;
	
КонецПроцедуры


// Этап 3.14
// Процедура рассчитывает отклонения в суммах движений по регистру СебестоимостьТоваров от рассчитанной себестоимости 
// и производит корректировку движений следующих регистров:
// СебестоимостьТоваров, ПрочиеРасходы
//
Процедура СкорректироватьСтоимостьСписанияЗапасов(ПараметрыРасчета)

	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СкорректироватьСтоимостьСписанияЗапасов");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетСебестоимости.Период                        	КАК Период,
	|	ВЫБОР
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ                   							КАК ВидДвижения,
	|	УчетСебестоимости.Регистратор                   	КАК ДокументДвижения,
	|	УчетСебестоимости.Организация                   	КАК Организация,
	|	АналитикаНоменклатуры.Склад                     	КАК Склад,
	|	АналитикаНоменклатуры.Номенклатура             		КАК Номенклатура,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры    	КАК АналитикаУчетаНоменклатуры,
	|	(ВЫБОР
	|		КОГДА УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		 И УчетСебестоимости.Количество < 0
	|		 И НЕ ЕстьВозвратныеОтходы.Организация ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка) // возвратные отходы учитываем по пустому разделу учета
	|		ИНАЧЕ УчетСебестоимости.РазделУчета КОНЕЦ) КАК РазделУчета,
	|	УчетСебестоимости.ВидЗапасов                    	КАК ВидЗапасов,
	|	УчетСебестоимости.ВидЗапасов.ТипЗапасов            	КАК ТипЗапасов,
	|	УчетСебестоимости.ХозяйственнаяОперация         	КАК ХозяйственнаяОперация,
	|	УчетСебестоимости.КорАналитикаУчетаНоменклатуры 	КАК КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаНоменклатуры.Склад                  	КАК КорСклад,
	|	КорАналитикаНоменклатуры.Номенклатура           	КАК КорНоменклатура,
	|	УчетСебестоимости.КорРазделУчета                	КАК КорРазделУчета,
	|	УчетСебестоимости.КорВидЗапасов                 	КАК КорВидЗапасов,
	|	УчетСебестоимости.КорВидЗапасов.ТипЗапасов         	КАК КорТипЗапасов,
	|	УчетСебестоимости.КорОрганизация                	КАК КорОрганизация,
	|	УчетСебестоимости.Подразделение                 	КАК Подразделение,
	|	УчетСебестоимости.АналитикаУчетаПоПартнерам     	КАК АналитикаУчетаПоПартнерам,
	|	УчетСебестоимости.ЗаказКлиента                  	КАК ЗаказКлиента,
	|	УчетСебестоимости.АналитикаРасходов            		КАК АналитикаРасходов,
	|	УчетСебестоимости.СтатьяРасходовСписания        	КАК СтатьяРасходовСписания,
	|	УчетСебестоимости.СтатьяРасходовСписания.ВариантРаспределенияРасходов КАК ВариантРаспределенияРасходов,
	|	УчетСебестоимости.СтатьяДоходов                 	КАК СтатьяДоходов,
	|	УчетСебестоимости.АналитикаДоходов              	КАК АналитикаДоходов,
	|	УчетСебестоимости.СтатьяАктивовПассивов         	КАК СтатьяАктивовПассивов,
	|	УчетСебестоимости.АналитикаАктивовПассивов      	КАК АналитикаАктивовПассивов,
	|	УчетСебестоимости.НалоговоеНазначение      			КАК НалоговоеНазначение,
	|	УчетСебестоимости.КорНалоговоеНазначение      		КАК КорНалоговоеНазначение,
	|	УчетСебестоимости.ИдентификаторСтроки           	КАК ИдентификаторСтроки,
	|	УчетСебестоимости.ПериодПродажи                 	КАК ПериодПродажи,
	|	УчетСебестоимости.ГруппаПродукции               	КАК ГруппаПродукции,
	|	(ВЫБОР
	|		КОГДА НЕ СторноОтчетыКомиссионера.Период ЕСТЬ NULL
	|		 И УчетСебестоимости.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК СторноОтчетПоКомиссии,
	|	СУММА(УчетСебестоимости.Количество)        			КАК Количество,
	|	СУММА(УчетСебестоимости.Стоимость)              	КАК Стоимость,
	|	СУММА(УчетСебестоимости.СтоимостьБезНДС)        	КАК СтоимостьБезНДС,
	|	СУММА(УчетСебестоимости.СтоимостьРегл)          	КАК СтоимостьРегл,
	|	СУММА(УчетСебестоимости.СтоимостьРеглБезНДС)        КАК СтоимостьРеглБезНДС,
	|	СУММА(УчетСебестоимости.НДСРегл)          	        КАК НДСРегл,
	|	СУММА(УчетСебестоимости.ПостояннаяРазница)      	КАК ПостояннаяРазница,
	|	СУММА(УчетСебестоимости.ВременнаяРазница)       	КАК ВременнаяРазница,
	|	СУММА(УчетСебестоимости.КорСтоимость)           	КАК КорСтоимость
	|ПОМЕСТИТЬ
	|	ВтТаблицаКорректировки
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО УчетСебестоимости.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорАналитикаНоменклатуры
	|		ПО УчетСебестоимости.КорАналитикаУчетаНоменклатуры = КорАналитикаНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ СторноОтчетыКомиссионера КАК СторноОтчетыКомиссионера
	|		ПО СторноОтчетыКомиссионера.АналитикаУчетаНоменклатуры = УчетСебестоимости.АналитикаУчетаНоменклатуры
	|		И СторноОтчетыКомиссионера.РазделУчета = УчетСебестоимости.РазделУчета
	|		И СторноОтчетыКомиссионера.ВидЗапасов = УчетСебестоимости.ВидЗапасов
	|		И СторноОтчетыКомиссионера.Организация = УчетСебестоимости.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЕстьВозвратныеОтходы КАК ЕстьВозвратныеОтходы
	|		ПО ЕстьВозвратныеОтходы.Организация = УчетСебестоимости.Организация
	|		И ЕстьВозвратныеОтходы.АналитикаУчетаНоменклатуры = УчетСебестоимости.АналитикаУчетаНоменклатуры
	|		И ЕстьВозвратныеОтходы.ВидЗапасов = УчетСебестоимости.ВидЗапасов
	|		И ЕстьВозвратныеОтходы.РазделУчета = УчетСебестоимости.РазделУчета
	|ГДЕ
	|	(НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|	ИЛИ (УчетСебестоимости.Количество <> 0
	|		И УчетСебестоимости.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|			 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение),
	|			 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика))))
	|	
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.Период,
	|	ВЫБОР
	|		КОГДА УчетСебестоимости.СлужебноеВидДвиженияПриход
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	УчетСебестоимости.Регистратор,
	|	УчетСебестоимости.Организация,
	|	АналитикаНоменклатуры.Склад,
	|	АналитикаНоменклатуры.Номенклатура,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	(ВЫБОР
	|		КОГДА УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		 И УчетСебестоимости.Количество < 0
	|		 И НЕ ЕстьВозвратныеОтходы.Организация ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка) // возвратные отходы учитываем по пустому разделу учета
	|			ИНАЧЕ УчетСебестоимости.РазделУчета КОНЕЦ),
	|	УчетСебестоимости.ВидЗапасов,
	|	УчетСебестоимости.ВидЗапасов.ТипЗапасов,
	|	УчетСебестоимости.ХозяйственнаяОперация,
	|	УчетСебестоимости.КорАналитикаУчетаНоменклатуры,
	|	КорАналитикаНоменклатуры.Склад,
	|	КорАналитикаНоменклатуры.Номенклатура,
	|	УчетСебестоимости.КорРазделУчета,
	|	УчетСебестоимости.КорВидЗапасов,
	|	УчетСебестоимости.КорВидЗапасов.ТипЗапасов,
	|	УчетСебестоимости.КорОрганизация,
	|	УчетСебестоимости.Подразделение,
	|	УчетСебестоимости.АналитикаУчетаПоПартнерам,
	|	УчетСебестоимости.ЗаказКлиента,
	|	УчетСебестоимости.АналитикаРасходов,
	|	УчетСебестоимости.СтатьяРасходовСписания,
	|	УчетСебестоимости.СтатьяРасходовСписания.ВариантРаспределенияРасходов,
	|	УчетСебестоимости.СтатьяДоходов,
	|	УчетСебестоимости.АналитикаДоходов,
	|	УчетСебестоимости.СтатьяАктивовПассивов,
	|	УчетСебестоимости.АналитикаАктивовПассивов,
	|	УчетСебестоимости.НалоговоеНазначение,
	|	УчетСебестоимости.КорНалоговоеНазначение,
	|	УчетСебестоимости.ИдентификаторСтроки,
	|	УчетСебестоимости.ПериодПродажи,
	|	УчетСебестоимости.ГруппаПродукции,
	|	(ВЫБОР
	|		КОГДА НЕ СторноОтчетыКомиссионера.Период ЕСТЬ NULL
	|		 И УчетСебестоимости.Регистратор ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ)
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	Организация,
	|	РазделУчета
	|;
	|ВЫБРАТЬ
	|	ТаблицаКорректировки.Период                        КАК Период,
	|	ТаблицаКорректировки.ВидДвижения                   КАК ВидДвижения,
	|	ТаблицаКорректировки.ДокументДвижения              КАК ДокументДвижения,
	|	ТаблицаКорректировки.Организация                   КАК Организация,
	|	ТаблицаКорректировки.Склад                         КАК Склад,
	|	ТаблицаКорректировки.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|	(ВЫБОР
	|		КОГДА ТаблицаКорректировки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ТаблицаКорректировки.РазделУчета КОНЕЦ) КАК РазделУчета,
	|	ТаблицаКорректировки.ВидЗапасов                    КАК ВидЗапасов,
	|	ЕСТЬNULL(ТаблицаКорректировки.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК ТипЗапасов,
	|	ТаблицаКорректировки.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	ТаблицаКорректировки.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаКорректировки.КорСклад                      КАК КорСклад,
	|	ТаблицаКорректировки.КорРазделУчета                КАК КорРазделУчета,
	|	ТаблицаКорректировки.КорВидЗапасов                 КАК КорВидЗапасов,
	|	ЕСТЬNULL(ТаблицаКорректировки.КорТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК КорТипЗапасов,
	|	ТаблицаКорректировки.КорОрганизация                КАК КорОрганизация,
	|	ТаблицаКорректировки.Подразделение                 КАК Подразделение,
	|	ТаблицаКорректировки.АналитикаУчетаПоПартнерам     КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаКорректировки.ЗаказКлиента                  КАК ЗаказКлиента,
	|	ТаблицаКорректировки.АналитикаРасходов             КАК АналитикаРасходов,
	|	ТаблицаКорректировки.СтатьяРасходовСписания        КАК СтатьяРасходовСписания,
	|	ТаблицаКорректировки.ВариантРаспределенияРасходов  КАК ВариантРаспределенияРасходов,
	|	ТаблицаКорректировки.СтатьяДоходов                 КАК СтатьяДоходов,
	|	ТаблицаКорректировки.АналитикаДоходов              КАК АналитикаДоходов,
	|	ТаблицаКорректировки.СтатьяАктивовПассивов         КАК СтатьяАктивовПассивов,
	|	ТаблицаКорректировки.АналитикаАктивовПассивов      КАК АналитикаАктивовПассивов,
	|	ТаблицаКорректировки.НалоговоеНазначение      	   КАК НалоговоеНазначение,
	|	ТаблицаКорректировки.КорНалоговоеНазначение        КАК КорНалоговоеНазначение,
	|	ТаблицаКорректировки.ИдентификаторСтроки           КАК ИдентификаторСтроки,
	|	ТаблицаКорректировки.ПериодПродажи                 КАК ПериодПродажи,
	|	ТаблицаКорректировки.ГруппаПродукции               КАК ГруппаПродукции,
	|	ТаблицаКорректировки.СторноОтчетПоКомиссии,
	|	
	|	
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаКорректировки.ВидЗапасов
	|		ИНАЧЕ 
	|			ТаблицаКорректировки.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаКорректировки.КорВидЗапасов
	|		ИНАЧЕ 
	|			ТаблицаКорректировки.КорНоменклатура
	|	КОНЕЦ КАК КорИсточникГФУНоменклатуры,
	|	ВЫБОР КОГДА ТаблицаКорректировки.ХозяйственнаяОперация В (&МассивОперацийПередачи) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                              КАК ЭтоПередачаМеждуОрганизациями,
	|	ТаблицаКорректировки.КорСтоимость                  КАК КорСтоимость,
	|
	|	(ВЫБОР КОГДА ТаблицаКорректировки.ДокументДвижения ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		И ТаблицаКорректировки.Количество < 0
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(ТаблицаКорректировки.Количество * ЕСТЬNULL(СтоимостьТоваров.Стоимость, 0) КАК ЧИСЛО(15,2))
	|		- ТаблицаКорректировки.Стоимость
	|	КОНЕЦ) КАК Стоимость,
	|
	|	(ВЫБОР КОГДА ТаблицаКорректировки.ДокументДвижения ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		И ТаблицаКорректировки.Количество < 0
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(ТаблицаКорректировки.Количество * ЕСТЬNULL(СтоимостьТоваров.СтоимостьБезНДС, 0) КАК ЧИСЛО(15,2))
	|		- ТаблицаКорректировки.СтоимостьБезНДС
	|	КОНЕЦ) КАК СтоимостьБезНДС,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.ПостояннаяРазница, 0)  КАК ЧИСЛО(15,2))
	|		 - ТаблицаКорректировки.ПостояннаяРазница        КАК ПостояннаяРазница,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.ВременнаяРазница, 0)  КАК ЧИСЛО(15,2))
	|		 - ТаблицаКорректировки.ВременнаяРазница        КАК ВременнаяРазница,
	|
	|
	|	(ВЫБОР КОГДА ТаблицаКорректировки.ДокументДвижения ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		И ТаблицаКорректировки.Количество < 0
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(ТаблицаКорректировки.Количество * ЕСТЬNULL(СтоимостьТоваров.СтоимостьДопРасходы, 0) КАК ЧИСЛО(15,2))
	|	КОНЕЦ) КАК СуммаДопРасходов,
	|
	|	(ВЫБОР КОГДА ТаблицаКорректировки.ДокументДвижения ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|		И ТаблицаКорректировки.Количество < 0
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(ТаблицаКорректировки.Количество * ЕСТЬNULL(СтоимостьТоваров.СтоимостьДопРасходыБезНДС, 0) КАК ЧИСЛО(15,2))
	|	КОНЕЦ) КАК СуммаДопРасходовБезНДС,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.СтоимостьРегл, 0) КАК ЧИСЛО(15,2))
	|		 - ТаблицаКорректировки.СтоимостьРегл       КАК СтоимостьРегл,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.СтоимостьРеглБезНДС, 0) КАК ЧИСЛО(15,2))
	|		 - ТаблицаКорректировки.СтоимостьРеглБезНДС КАК СтоимостьРеглБезНДС,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.НДСРегл, 0) КАК ЧИСЛО(15,2))
	|		 - ТаблицаКорректировки.НДСРегл КАК НДСРегл,
	|
	|	0 КАК НДСРеглКорректировкаСтоимости,
	|	ТаблицаКорректировки.Стоимость КАК ИсходнаяСтоимость,
	|	ТаблицаКорректировки.СтоимостьБезНДС КАК ИсходнаяСтоимостьБезНДС,
	|	ТаблицаКорректировки.СтоимостьРегл КАК ИсходнаяСтоимостьРегл,
	|	ТаблицаКорректировки.СтоимостьРеглБезНДС КАК ИсходнаяСтоимостьРеглБезНДС,
	|	ТаблицаКорректировки.НДСРегл КАК ИсходнаяНДСРегл,
	|	ТаблицаКорректировки.Количество КАК Количество
	|ИЗ
	|	ВтТаблицаКорректировки КАК ТаблицаКорректировки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКэшСтоимостьТоваров КАК СтоимостьТоваров
	|		ПО СтоимостьТоваров.АналитикаУчетаНоменклатуры = ТаблицаКорректировки.АналитикаУчетаНоменклатуры
	|		И СтоимостьТоваров.ВидЗапасов               = ТаблицаКорректировки.ВидЗапасов
	|		И СтоимостьТоваров.Организация              = ТаблицаКорректировки.Организация
	|		И СтоимостьТоваров.РазделУчета              = ТаблицаКорректировки.РазделУчета
	|		И ТаблицаКорректировки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	
	|ГДЕ
	|	НЕ ТаблицаКорректировки.СторноОтчетПоКомиссии
	|";
	
	// Формируются движения по регистрам:
	// - СебестоимостьТоваров
	// - ПрочиеРасходы
	// - ПрочиеДоходы
	// - ДвиженияНоменклатураДоходыРасходы
	// - ДвиженияНоменклатураНоменклатура
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Корректировка списания товаров
		СформироватьДвиженияСебестоимостьТоваров(ПараметрыРасчета, Выборка, Выборка.ВидДвижения);

		// Если есть кор. раздел - необходимо скорректировать стоимость в кор. части.
		Если ЗначениеЗаполнено(Выборка.КорРазделУчета)
		 И НЕ (Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию
				И Выборка.РазделУчета = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию) Тогда
			
			СформироватьКорДвиженияСебестоимостьТоваров(ПараметрыРасчета, Выборка);
			
		КонецЕсли;
			
		// Сторнирование себестоимости товаров по управленческой организации.
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет Тогда

			СформироватьДвиженияСебестоимостьТоваровСторноВУпрУчете(ПараметрыРасчета, Выборка);

		КонецЕсли;

		// Корректировка списания товаров на затраты в регистре учет прочих расходов.
		Если ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов
		 И (Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваров
			Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию
			Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы
			Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели
			Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию
			Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании
			)
		 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию
		 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку Тогда
		
			ЭтоВыпускПродукции = Ложь;
			Если ЗначениеЗаполнено(Выборка.СтатьяАктивовПассивов) Тогда
				СформироватьДвиженияПрочиеАктивыПассивы(
					ПараметрыРасчета,
					Выборка,
					Выборка.Стоимость + Выборка.СуммаДопРасходов);
			Иначе
				СформироватьДвиженияПрочиеРасходы(
					ПараметрыРасчета,
					Выборка,
					Выборка.Стоимость + Выборка.СуммаДопРасходов + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяСтоимость, 0),
					Выборка.СтоимостьБезНДС + Выборка.СуммаДопРасходовБезНДС + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяСтоимостьБезНДС, 0),
					Выборка.СтоимостьРегл + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяСтоимостьРегл, 0),
					Выборка.СтоимостьРеглБезНДС + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяСтоимостьРеглБезНДС, 0),
					Выборка.НДСРегл + ?(ЭтоВыпускПродукции, Выборка.ИсходнаяНДСРегл, 0),
					Выборка.ПостояннаяРазница,
					Выборка.ВременнаяРазница);
			КонецЕсли;
		КонецЕсли;

		// Формирование прочих доходов\расходов при пересортице
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой
		 И ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов
		 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию
		 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку Тогда

			СуммаПереоценки = Выборка.Стоимость + Выборка.СуммаДопРасходов - Выборка.КорСтоимость;
			Если СуммаПереоценки > 0 Тогда 

				СформироватьДвиженияПрочиеРасходы(
					ПараметрыРасчета,
					Выборка,
					СуммаПереоценки,
					Выборка.СтоимостьБезНДС + Выборка.СуммаДопРасходовБезНДС,
					Выборка.СтоимостьРегл,
					Выборка.СтоимостьРеглБезНДС,
					Выборка.НДСРегл,
					Выборка.ПостояннаяРазница,
					Выборка.ВременнаяРазница);

			ИначеЕсли СуммаПереоценки < 0 Тогда

				СформироватьДвиженияПрочиеДоходы(
					ПараметрыРасчета,
					Выборка,
					-СуммаПереоценки);

			КонецЕсли;

		КонецЕсли;

		// Формирование прочих расходов при порче
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой
		 И ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов
		 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию
		 И Выборка.РазделУчета <> Перечисления.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку Тогда

			СуммаПереоценки = Выборка.Стоимость + Выборка.СуммаДопРасходов - Выборка.КорСтоимость;

			Если СуммаПереоценки <> 0 Тогда
				
				СформироватьДвиженияПрочиеРасходы(
					ПараметрыРасчета,
					Выборка,
					СуммаПереоценки,
					Выборка.СтоимостьБезНДС + Выборка.СуммаДопРасходовБезНДС,
					Выборка.СтоимостьРегл,
					Выборка.СтоимостьРеглБезНДС,
					Выборка.НДСРегл,
					Выборка.ПостояннаяРазница,
					Выборка.ВременнаяРазница);

			КонецЕсли;

		КонецЕсли;

		// Формирование прочих доходов/расходов при возврате товаров поставщику.
		Если ((Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику
			И Выборка.КорСтоимость <> 0)
			ИЛИ Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПереданнойВозвратнойТары
			ИЛИ Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПереданнойТары)
			И ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов Тогда
			
			СуммаПереоценки = Выборка.Стоимость + Выборка.СуммаДопРасходов;
            СуммаПереоценкиРегл = Выборка.СтоимостьРегл;
            Если СуммаПереоценки > 0 ИЛИ СуммаПереоценкиРегл > 0 Тогда 

				СформироватьДвиженияПрочиеРасходы(
					ПараметрыРасчета,
					Выборка,
					СуммаПереоценки,
					Выборка.СтоимостьБезНДС + Выборка.СуммаДопРасходовБезНДС,
					Выборка.СтоимостьРегл,
					Выборка.СтоимостьРеглБезНДС,
					Выборка.НДСРегл,
					Выборка.ПостояннаяРазница,
					Выборка.ВременнаяРазница);

			ИначеЕсли СуммаПереоценки < 0 Тогда

				СформироватьДвиженияПрочиеДоходы(
					ПараметрыРасчета,
					Выборка,
					- СуммаПереоценки);

			КонецЕсли;
			
        КонецЕсли;
        
        Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику 
            И Выборка.КорСтоимость <> 0
			И ПараметрыРасчета.ФО.ИспользоватьУчетПрочихДоходовРасходов 
            И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.НалоговоеНазначение,    "ВидДеятельностиНДС") = Перечисления.ВидыДеятельностиНДС.Необлагаемая 
            И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.КорНалоговоеНазначение, "ВидДеятельностиНДС") = Перечисления.ВидыДеятельностиНДС.Облагаемая 
            
            
            Тогда
            
                СформироватьДвиженияПрочиеРасходы(
                    ПараметрыРасчета,
                    Выборка,
                    0,
                    0,
                    -Выборка.НДСРегл,
                    -Выборка.НДСРегл,
                    0,
                    0,
                    0
                );

        КонецЕсли;
		
		// Корректировка движений по оборотным регистрам управленческого учета.
		СформироватьДвиженияПоОборотнымРегистрамУпрУчета(ПараметрыРасчета, Выборка);

	КонецЦикла;
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВтТаблицаКорректировки, ЕстьВозвратныеОтходы");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры


// Этап 3.17
Процедура СкорректироватьСтоимостьПродаж(ПараметрыРасчета)

	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СкорректироватьСтоимостьПродаж");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Продажи.Период                     КАК Период,
	|	Продажи.Регистратор                КАК ДокументДвижения,
	|	АналитикаПартнеров.Организация     КАК Организация,
	|	Продажи.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Продажи.ЗаказКлиента               КАК ЗаказКлиента,
	|	Продажи.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|	АналитикаПартнеров.Партнер         КАК Партнер,
	|	АналитикаПартнеров.Контрагент      КАК Контрагент,
	|	Продажи.Подразделение              КАК Подразделение,
	|	Продажи.ТипЗапасов                 КАК ТипЗапасов,
	|	(ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА Продажи.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КОНЕЦ) КАК ВидЗапасов,
	|	Продажи.Менеджер                   КАК Менеджер,
	|	Продажи.Склад                      КАК Склад,
	|	Продажи.Соглашение                 КАК Соглашение,
	|	Продажи.Договор                    КАК Договор,
	|	Продажи.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
	|	Продажи.НалоговоеНазначение        КАК НалоговоеНазначение,
	|	Продажи.ВалютаВзаиморасчетов       КАК ВалютаВзаиморасчетов,
	|	Продажи.ВалютаДокумента            КАК ВалютаДокумента,
	|	Продажи.ИсточникГФУНоменклатуры    КАК ИсточникГФУНоменклатуры,
	|	Продажи.ИсточникГФУРасчетов        КАК ИсточникГФУРасчетов,
	|	(ВЫБОР КОГДА Продажи.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|	КОГДА Аналитика.Склад ССЫЛКА Справочник.Партнеры ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|	КОГДА Аналитика.Склад ССЫЛКА Справочник.Организации ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|	КОГДА Продажи.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ) КАК РазделУчета,
	|	СУММА(Продажи.Количество)          КАК Количество
	|
	|ПОМЕСТИТЬ ВтТаблицаКорректировки
	|
	|ИЗ
	|	ВТКэшЗаписиВыручкаИСебестоимостьПродаж КАК Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Аналитика.Ссылка = Продажи.АналитикаУчетаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
	|			ПО Продажи.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|
	|ГДЕ
	|	Продажи.ХозяйственнаяОперация В (&МассивОперацийРеализации)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Период,
	|	Продажи.Регистратор,
	|	Продажи.АналитикаУчетаНоменклатуры,
	|	Продажи.ЗаказКлиента,
	|	Продажи.АналитикаУчетаПоПартнерам,
	|	АналитикаПартнеров.Партнер,
	|	АналитикаПартнеров.Контрагент,
	|	Продажи.Подразделение,
	|	Продажи.ТипЗапасов,
	|	(ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА Продажи.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КОНЕЦ),
	|	Продажи.Менеджер,
	|	Продажи.Склад,
	|	Продажи.Соглашение,
	|	Продажи.Договор,
	|	Продажи.ХозяйственнаяОперация,
	|	Продажи.НалоговоеНазначение,
	|	Продажи.ВалютаВзаиморасчетов,
	|	Продажи.ВалютаДокумента,
	|	Продажи.ИсточникГФУНоменклатуры,
	|	Продажи.ИсточникГФУРасчетов,
	|	АналитикаПартнеров.Организация,
	|	(ВЫБОР КОГДА Продажи.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|	КОГДА Аналитика.Склад ССЫЛКА Справочник.Партнеры ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|	КОГДА Аналитика.Склад ССЫЛКА Справочник.Организации ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|	КОГДА Продажи.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ)
	|
	|ИМЕЮЩИЕ
	|
	|	СУММА(Продажи.Количество) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	Организация,
	|	РазделУчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаКорректировки.Период                     КАК Период,
	|	ТаблицаКорректировки.ДокументДвижения           КАК ДокументДвижения,
	|	ТаблицаКорректировки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаКорректировки.ЗаказКлиента               КАК ЗаказКлиента,
	|	ТаблицаКорректировки.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаКорректировки.Организация                КАК Организация,
	|	ТаблицаКорректировки.Партнер                    КАК Партнер,
	|	ТаблицаКорректировки.Контрагент                 КАК Контрагент,
	|	ТаблицаКорректировки.Подразделение              КАК Подразделение,
	|	ТаблицаКорректировки.ТипЗапасов                 КАК ТипЗапасов,
	|	ТаблицаКорректировки.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаКорректировки.Менеджер                   КАК Менеджер,
	|	ТаблицаКорректировки.Склад                      КАК Склад,
	|	ТаблицаКорректировки.Соглашение                 КАК Соглашение,
	|	ТаблицаКорректировки.Договор                    КАК Договор,
	|	ТаблицаКорректировки.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
	|	ТаблицаКорректировки.НалоговоеНазначение        КАК НалоговоеНазначение,
	|	ТаблицаКорректировки.ВалютаВзаиморасчетов       КАК ВалютаВзаиморасчетов,
	|	ТаблицаКорректировки.ВалютаДокумента            КАК ВалютаДокумента,
	|	ТаблицаКорректировки.ИсточникГФУНоменклатуры    КАК ИсточникГФУНоменклатуры,
	|	ТаблицаКорректировки.ИсточникГФУРасчетов        КАК ИсточникГФУРасчетов,
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* СтоимостьТоваров.Стоимость            КАК ЧИСЛО(15,2))
	|		              КАК Стоимость,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* СтоимостьТоваров.СтоимостьБезНДС      КАК ЧИСЛО(15,2))
	|		         КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* СтоимостьТоваров.ПостояннаяРазница      КАК ЧИСЛО(15,2))
	|		         КАК ПостояннаяРазница,
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* СтоимостьТоваров.ВременнаяРазница      КАК ЧИСЛО(15,2))
	|		         КАК ВременнаяРазница,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* СтоимостьТоваров.СтоимостьДопРасходы
	|		КАК ЧИСЛО(15,2))                            КАК СуммаДопРасходов,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* СтоимостьТоваров.СтоимостьДопРасходыБезНДС
	|		КАК ЧИСЛО(15,2))                            КАК СуммаДопРасходовБезНДС,
	|
	|	ВЫРАЗИТЬ(
	|		ТаблицаКорректировки.Количество
	|			* СтоимостьТоваров.СтоимостьРегл
	|		КАК ЧИСЛО(15,2))                            КАК СтоимостьРегл,
	|	0 КАК НДСРеглКорректировкаСтоимости
	|ИЗ
	|	ВтТаблицаКорректировки КАК ТаблицаКорректировки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТКэшСтоимостьТоваров КАК СтоимостьТоваров
	|	ПО 
	|		СтоимостьТоваров.АналитикаУчетаНоменклатуры = ТаблицаКорректировки.АналитикаУчетаНоменклатуры
	|		И СтоимостьТоваров.ВидЗапасов = ТаблицаКорректировки.ВидЗапасов
	|		И СтоимостьТоваров.Организация = ТаблицаКорректировки.Организация
	|		И СтоимостьТоваров.РазделУчета = ТаблицаКорректировки.РазделУчета
	|";
	
	// Формируются движения по регистрам:
	// - ВыручкаИСебестоимостьПродаж
	// - Закупки
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Корректировка себестоимости продаж по хоз операциям продажи.
		СформироватьДвиженияВыручкаИСебестоимостьПродаж(ПараметрыРасчета, Выборка);
		
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда	
			
			СформироватьДвиженияЗакупки(ПараметрыРасчета, Выборка);
				
		КонецЕсли;

	КонецЦикла;
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВтТаблицаКорректировки");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

// Этап 3.18
Процедура ВключитьИсключитьНДСВСтоимостьПродаж(ПараметрыРасчета)

	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ВключитьИсключитьНДСВСтоимостьПродаж");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Организация КАК Организация,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		Партии.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасов,
	|	СУММА(Партии.Количество) КАК Количество,
	|	СУММА(
	|		ВЫБОР КОГДА 
	|			(АналитикаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|	   			И Партии.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая))
	|			ИЛИ (АналитикаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.ПропорциональноОблагаемая) 
	|	   			И Партии.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность))
	|		ТОГДА
	|			ВЫБОР КОГДА &ВключатьНДСВСебестоимостьПриУсловнойПродаже ТОГДА
	|				Партии.НДСРегл
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|
	|		КОГДА АналитикаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|			И Партии.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|		ТОГДА
	|			ВЫБОР КОГДА &ИсключатьНДСИзСебестоимостиПриВосстановленииНДС ТОГДА
	|				-Партии.НДСРегл
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК НДСРегл
	|
	|ПОМЕСТИТЬ ВтПартии
	|ИЗ (
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Партии.ВидЗапасов КАК ВидЗапасов,
	|		Партии.АналитикаУчетаПартий,
	|		Партии.НалоговоеНазначение,
	|		Партии.Количество КАК Количество,
	|		Партии.НДСРегл КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.АналитикаУчетаПродукции КАК АналитикаУчетаНоменклатуры,
	|		(ВЫБОР
	|			КОГДА Партии.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|				ТОГДА Партии.КорВидЗапасов
	|			ИНАЧЕ Партии.ВидЗапасов КОНЕЦ) КАК ВидЗапасов,
	|		Партии.АналитикаУчетаПартий,
	|		Партии.НалоговоеНазначение,
	|		0 КАК Количество,
	|		Партии.НДСРегл КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииЗатратНаВыпуск КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.ВидЗапасов.ТипЗапасов В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Партии.ВидЗапасов КАК ВидЗапасов,
	|		Партии.АналитикаУчетаПартий,
	|		Партии.НалоговоеНазначение,
	|		0 КАК Количество,
	|		Партии.НДСРегл КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.НДСРегл <> 0
	|		И Партии.ВидЗапасов.ТипЗапасов В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Партии.Регистратор КАК Регистратор,
	|		Партии.Организация КАК Организация,
	|		Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Партии.ВидЗапасов КАК ВидЗапасов,
	|		Партии.АналитикаУчетаПартий,
	|		Партии.НалоговоеНазначение,
	|		Партии.Количество КАК Количество,
	|		Партии.НДСРегл КАК НДСРегл
	|	ИЗ
	|		РегистрНакопления.ПартииПроизводственныхЗатрат КАК Партии
	|	ГДЕ
	|		Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Партии.Активность
	|		И Партии.Организация В(&МассивОрганизаций)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Партии.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|
	|	) КАК Партии
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
	|	ПО
	|		АналитикаПартий.КлючАналитики = Партии.АналитикаУчетаПартий
	|
	|ГДЕ
	|	НЕ АналитикаУчетаПартий.НалоговоеНазначение ЕСТЬ NULL
	|	И АналитикаУчетаПартий.НалоговоеНазначение <> Партии.НалоговоеНазначение 
	|	И Партии.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Регистратор,
	|	Партии.Организация,
	|	Партии.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		Партии.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВтРегистраторы
	|ИЗ
	|	ВтПартии КАК Партии
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	Продажи.Период                     КАК Период,
	|	Продажи.Регистратор                КАК Регистратор,
	|	Продажи.Регистратор                КАК ДокументДвижения,
	|	АналитикаПартнеров.Организация     КАК Организация,
	|	Продажи.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Продажи.ВидЗапасов                 КАК ВидЗапасов,
	|
	|	Продажи.ЗаказКлиента               КАК ЗаказКлиента,
	|	Продажи.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|	Продажи.Подразделение              КАК Подразделение,
	|	Продажи.ТипЗапасов                 КАК ТипЗапасов,
	|	Продажи.Менеджер                   КАК Менеджер,
	|	Продажи.Склад                      КАК Склад,
	|	Продажи.Соглашение                 КАК Соглашение,
	|	Продажи.Договор                    КАК Договор,
	|	Продажи.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
	|	Продажи.НалоговоеНазначение        КАК НалоговоеНазначение,
	|	Продажи.ВалютаВзаиморасчетов       КАК ВалютаВзаиморасчетов,
	|	Продажи.ВалютаДокумента            КАК ВалютаДокумента,
	|	Продажи.ИсточникГФУНоменклатуры    КАК ИсточникГФУНоменклатуры,
	|	Продажи.ИсточникГФУРасчетов        КАК ИсточникГФУРасчетов,
	|	СУММА(
	|		ВЫБОР КОГДА Продажи.Количество < 0 ТОГДА
	|			0 - Продажи.Количество
	|		ИНАЧЕ
	|			Продажи.Количество
	|		КОНЕЦ
	|	) КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК НДСРеглКорректировкаСтоимости,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	СУММА(Продажи.Количество)          КАК ИсходноеКоличество,
	|	0                                  КАК КорСтоимость
	|ИЗ
	|	ВТКэшЗаписиВыручкаИСебестоимостьПродаж КАК Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистраторы КАК Регистраторы
	|			ПО Регистраторы.Регистратор = Продажи.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
	|			ПО Продажи.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|
	|ГДЕ
	|	Продажи.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И Продажи.ХозяйственнаяОперация В (&МассивОперацийРеализации)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Продажи.Период,
	|	Продажи.Регистратор,
	|	Продажи.АналитикаУчетаНоменклатуры,
	|	Продажи.ЗаказКлиента,
	|	Продажи.АналитикаУчетаПоПартнерам,
	|	Продажи.Подразделение,
	|	Продажи.ТипЗапасов,
	|	Продажи.ВидЗапасов,
	|	Продажи.Менеджер,
	|	Продажи.Склад,
	|	Продажи.Соглашение,
	|	Продажи.Договор,
	|	Продажи.ХозяйственнаяОперация,
	|	Продажи.НалоговоеНазначение,
	|	Продажи.ВалютаВзаиморасчетов,
	|	Продажи.ВалютаДокумента,
	|	Продажи.ИсточникГФУНоменклатуры,
	|	Продажи.ИсточникГФУРасчетов,
	|	АналитикаПартнеров.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Продажи.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	&НачалоПериода КАК Период,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.Регистратор КАК ДокументДвижения,
	|	Партии.Организация КАК Организация,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Партии.ВидЗапасов КАК ВидЗапасов,
	|
	|	НЕОПРЕДЕЛЕНО КАК ЗаказКлиента,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК ТипЗапасов,
	|	НЕОПРЕДЕЛЕНО КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК Соглашение,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначение,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУНоменклатуры,
	|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУРасчетов,
	|
	|	Партии.Количество КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СуммаДопРасходов,
	|	0 КАК СуммаДопРасходовБезНДС,
	|	Партии.НДСРегл КАК СтоимостьРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК НДСРеглКорректировкаСтоимости,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	0 КАК ИсходноеКоличество,
	|	0 КАК КорСтоимость
	|ИЗ
	|	ВтПартии КАК Партии
	|ГДЕ
	|	Партии.Количество > 0
	|	И Партии.НДСРегл <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	Порядок
	|";
	
	ЗаписьРаспределения = Новый Структура("
	|Период, АналитикаУчетаНоменклатуры, ВидЗапасов, Организация, Менеджер,
	|ХозяйственнаяОперация, ЗаказКлиента, ТипЗапасов,
	|Подразделение, АналитикаУчетаПоПартнерам,
	|Склад, Соглашение, Договор, ВалютаВзаиморасчетов, ВалютаДокумента,
	|ИсточникГФУНоменклатуры, ИсточникГФУРасчетов,
	|НалоговоеНазначение, ДокументДвижения,
	|Стоимость, СтоимостьБезНДС, Количество,
	|СуммаДопРасходов, СуммаДопРасходовБезНДС,
	|СтоимостьРегл, СтоимостьРеглБезНДС, НДСРегл, НДСРеглКорректировкаСтоимости, ПостояннаяРазница, ВременнаяРазница
	|");
	
	СтрокаОстатка = Новый Структура("
	|Регистратор, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов,
	|Количество, Стоимость, СтоимостьБезНДС, СтоимостьРегл, СтоимостьРеглБезНДС, НДСРегл, НДСРеглКорректировкаСтоимости, 
	|СуммаДопРасходов, СуммаДопРасходовБезНДС, ПостояннаяРазница, ВременнаяРазница
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	
	// Формируются движения по регистрам:
	// - ВыручкаИСебестоимостьПродаж
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Порядок = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, Выборка);
			
		ИначеЕсли СтрокаОстатка.Регистратор = Выборка.Регистратор
		 И СтрокаОстатка.Организация = Выборка.Организация
		 И СтрокаОстатка.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры
		 И СтрокаОстатка.ВидЗапасов = Выборка.ВидЗапасов
		 И СтрокаОстатка.Количество > 0 Тогда
		
			ЗаполнитьЗначенияСвойств(ЗаписьРаспределения, Выборка);
			
			РаспределитьСтоимость(ЗаписьРаспределения, СтрокаОстатка, Выборка, Выборка.Количество);
			
			СформироватьДвиженияВыручкаИСебестоимостьПродаж(ПараметрыРасчета, ЗаписьРаспределения);

		КонецЕсли;
		
	КонецЦикла;
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВтПартии, ВтРегистраторы");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

// Этап 3.19
Процедура СписатьОшибкиОкругленияРасчетаСебестоимости(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СписатьОшибкиОкругленияРасчетаСебестоимости");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// Списываем только те остатки, в которых все "суммовые" ресурсы имеют значения, укладывающиеся в пределы погрешности. 
	// Если хоть один "суммовой" ресурс превышает величину погрешности, то такой остаток ошибкой округления не считаем.
	// Для регистра ПрочиеРасходы подход отличается: для него проверка ведется остатка для каждого ресурса по-отдельности.
	// Если какой-то ресурс укладывается в пределы погрешности, то списываем только его.
	
	// Списание ошибок округления в регистре СебестоимостьТоваров
	// Также создадим пустую временную таблицу ВТОкруглениеПрочиеРасходы для УТ - там не будет ошибок округления в регистре ПрочиеРасходы.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка 		КАК ДокументДвижения,
	|	&КонецПериода								КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)		КАК ВидДвижения,
	|
	|	Себестоимость.Организация 					КАК Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета 					КАК РазделУчета,
	|	Себестоимость.ВидЗапасов 					КАК ВидЗапасов,
	|
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости)	КАК СтатьяРасходовСписания,
	|	(ВЫБОР
	|		КОГДА Аналитика.Склад ССЫЛКА Справочник.СтруктураПредприятия ТОГДА Аналитика.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ) КАК Подразделение,
	|
	|	Себестоимость.Стоимость 					КАК Стоимость,
	|	Себестоимость.СтоимостьБезНДС 				КАК СтоимостьБезНДС,
	|	Себестоимость.СуммаДопРасходов 				КАК СуммаДопРасходов,
	|	Себестоимость.СуммаДопРасходовБезНДС 		КАК СуммаДопРасходовБезНДС,
	|	Себестоимость.СтоимостьРегл 				КАК СтоимостьРегл,
	|	Себестоимость.СтоимостьРеглБезНДС 			КАК СтоимостьРеглБезНДС,
	|	Себестоимость.НДСРегл 						КАК НДСРегл,
	|	Себестоимость.ПостояннаяРазница 			КАК ПостояннаяРазница,
	|	Себестоимость.ВременнаяРазница 				КАК ВременнаяРазница
	|
	|ПОМЕСТИТЬ ВТОкруглениеСебестоимостьТоваров
	|
	|ИЗ
	|	ВТКэшРасчетныеОстаткиСебестоимостьТоваров КАК Себестоимость
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|			ПО Себестоимость.Организация = ДокументыРасчетаСебестоимости.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Аналитика.Ссылка = Себестоимость.АналитикаУчетаНоменклатуры
	|
	|ГДЕ
	|	Себестоимость.Количество = 0
	|	И (Себестоимость.Стоимость МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|		И Себестоимость.СтоимостьБезНДС МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|		И Себестоимость.СуммаДопРасходов МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|		И Себестоимость.СуммаДопРасходовБезНДС МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|		И Себестоимость.СтоимостьРеглБезНДС МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|		И Себестоимость.НДСРегл МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|		И Себестоимость.СтоимостьРегл МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	НЕОПРЕДЕЛЕНО КАК ДокументДвижения,
	|	НЕОПРЕДЕЛЕНО КАК Период,
	|	ЛОЖЬ		 КАК ВидДвижения,
	|	НЕОПРЕДЕЛЕНО КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	0 			 КАК Сумма,
	|	0 			 КАК СуммаБезНДС,
	|	0 			 КАК СуммаРегл,
	|	0 			 КАК СуммаРеглБезНДС,
	|	0 			 КАК НДСРегл,
	|	0 			 КАК ПостояннаяРазница,
	|	0 			 КАК ВременнаяРазница
	|
	|ПОМЕСТИТЬ ВТОкруглениеПрочиеРасходы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТОкруглениеСебестоимостьТоваров КАК Т
	|";
	
	СформироватьДвиженияПоРегиструПоДаннымЗапроса(
		ПараметрыРасчета,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя,
		Запрос);
	
	
	// Формирование кор. движений в регистре ПрочиеРасходы
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.ДокументДвижения 																КАК ДокументДвижения,
	|	&КонецПериода 																	КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 											КАК ВидДвижения,
	|	Т.Организация 																	КАК Организация,
	|	Т.Подразделение																	КАК Подразделение,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости) КАК СтатьяРасходов,
	|	СУММА(Т.Сумма) 																	КАК Сумма
	|
	|ПОМЕСТИТЬ ВТКорДвиженияПрочиеРасходы
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.ДокументДвижения КАК ДокументДвижения,
	|		Т.Организация КАК Организация,
	|		Т.Подразделение КАК Подразделение,
	|		Т.Стоимость + Т.СуммаДопРасходов КАК Сумма
	|	ИЗ
	|		ВТОкруглениеСебестоимостьТоваров КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.ДокументДвижения,
	|		Т.Организация,
	|		Т.Подразделение КАК Подразделение,
	|		Т.Сумма
	|	ИЗ
	|		ВТОкруглениеПрочиеРасходы КАК Т) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ДокументДвижения,
	|	Т.Организация,
	|	Т.Подразделение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.Сумма) <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТКорДвиженияПрочиеРасходы КАК Т
	|";
	
	СформироватьДвиженияПоРегиструПоДаннымЗапроса(
		ПараметрыРасчета,
		Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя,
		Запрос);
		
	// Корректировка движений по оборотным регистрам управленческого учета.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&КонецПериода 					КАК Период,
	|	НЕОПРЕДЕЛЕНО 					КАК ХозяйственнаяОперация,
	|	Т.ДокументДвижения 				КАК ДокументДвижения,
	|	Т.Организация 					КАК Организация,
	|	Т.Подразделение 				КАК Подразделение,
	|	Т.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	Т.Склад 						КАК Склад,
	|	Т.ТипЗапасов 					КАК ТипЗапасов,
	|	Т.ВидЗапасов 					КАК ВидЗапасов,
	|	Т.СтатьяДоходовРасходов 		КАК СтатьяДоходовРасходов,
	|	Т.АналитикаРасходов 			КАК АналитикаРасходов,
	|	Т.Стоимость 					КАК Стоимость,
	|	Т.СтоимостьБезНДС 				КАК СтоимостьБезНДС,
	|	Т.СтоимостьРегл 				КАК СтоимостьРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.ДокументДвижения 											КАК ДокументДвижения,
	|		Т.Организация 												КАК Организация,
	|		НЕОПРЕДЕЛЕНО 												КАК Подразделение,
	|		Т.АналитикаУчетаНоменклатуры 								КАК АналитикаУчетаНоменклатуры,
	|		АналитикаНоменклатуры.Склад 								КАК Склад,
	|		Т.ВидЗапасов.ТипЗапасов 									КАК ТипЗапасов,
	|		Т.ВидЗапасов 												КАК ВидЗапасов,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости) КАК СтатьяДоходовРасходов,
	|		НЕОПРЕДЕЛЕНО 												КАК АналитикаРасходов,
	|		ВЫБОР
	|			КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|				ТОГДА Т.ВидЗапасов
	|			ИНАЧЕ АналитикаНоменклатуры.Номенклатура
	|		КОНЕЦ 														КАК ИсточникГФУНоменклатуры,
	|		-(Т.Стоимость + Т.СуммаДопРасходов)							КАК Стоимость,
	|		-(Т.СтоимостьБезНДС + Т.СуммаДопРасходовБезНДС)				КАК СтоимостьБезНДС,
	|		-Т.СтоимостьРегл 											КАК СтоимостьРегл
	|	ИЗ
	|		ВТОкруглениеСебестоимостьТоваров КАК Т
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|			ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.ДокументДвижения 											КАК ДокументДвижения,
	|		Т.Организация 												КАК Организация,
	|		Т.Подразделение 											КАК Подразделение,
	|		НЕОПРЕДЕЛЕНО 												КАК АналитикаУчетаНоменклатуры,
	|		НЕОПРЕДЕЛЕНО 												КАК Склад,
	|		НЕОПРЕДЕЛЕНО 												КАК ТипЗапасов,
	|		НЕОПРЕДЕЛЕНО 												КАК ВидЗапасов,
	|		Т.СтатьяРасходов 											КАК СтатьяДоходовРасходов,
	|		Т.АналитикаРасходов 										КАК АналитикаРасходов,
	|		НЕОПРЕДЕЛЕНО 												КАК ИсточникГФУНоменклатуры,
	|		-Т.Сумма 													КАК Стоимость,
	|		-Т.СуммаБезНДС 												КАК СтоимостьБезНДС,
	|		-Т.СуммаРегл 												КАК СтоимостьРегл
	|	ИЗ
	|		ВТОкруглениеПрочиеРасходы КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.ДокументДвижения 											КАК ДокументДвижения,
	|		Т.Организация 												КАК Организация,
	|		НЕОПРЕДЕЛЕНО 												КАК Подразделение,
	|		НЕОПРЕДЕЛЕНО 												КАК АналитикаУчетаНоменклатуры,
	|		НЕОПРЕДЕЛЕНО 												КАК Склад,
	|		НЕОПРЕДЕЛЕНО 												КАК ТипЗапасов,
	|		НЕОПРЕДЕЛЕНО 												КАК ВидЗапасов,
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости) КАК СтатьяДоходовРасходов,
	|		НЕОПРЕДЕЛЕНО 												КАК АналитикаРасходов,
	|		НЕОПРЕДЕЛЕНО 												КАК ИсточникГФУНоменклатуры,
	|		Т.Сумма 													КАК Стоимость,
	|		0 															КАК СтоимостьБезНДС,
	|		0 															КАК СтоимостьРегл
	|	ИЗ
	|		ВТКорДвиженияПрочиеРасходы КАК Т) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ДокументДвижения,
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.Склад,
	|	Т.ТипЗапасов,
	|	Т.ВидЗапасов,
	|	Т.СтатьяДоходовРасходов,
	|	Т.АналитикаРасходов,
	|	Т.Стоимость,
	|	Т.СтоимостьБезНДС,
	|	Т.СтоимостьРегл
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Т.Стоимость) <> 0
	|		ИЛИ СУММА(Т.СтоимостьБезНДС) <> 0
	|		ИЛИ СУММА(Т.СтоимостьРегл) <> 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СформироватьДвиженияПоОборотнымРегистрамУпрУчета(ПараметрыРасчета, Выборка);
	КонецЦикла;
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТОкруглениеСебестоимостьТоваров, ВТОкруглениеПрочиеРасходы, ВТКорДвиженияПрочиеРасходы");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

// Этап 4.1
// Процедура выполняет распределение выручки и себестоимости продаж по направлениям деятельности.
// Параметры:
// НачалоПериода - дата, начало периода для сбора данных о продажах.
// КонецПериода - дата, окончание периода для сбора данных о продажах.
//
Процедура РаспределитьВыручкуПоНаправлениямДеятельности(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "РаспределитьВыручкуПоНаправлениямДеятельности");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимость.Подразделение             		 КАК Подразделение,
	|	АналитикаПоПартнерам.Организация                		 КАК Организация,
	|	АналитикаПоПартнерам.Партнер                    		 КАК Партнер,
	|	АналитикаПоПартнерам.НаправлениеДеятельности      		 КАК НаправлениеДеятельности,
	|	АналитикаНоменклатуры.Номенклатура              		 КАК Номенклатура,
	|	СУММА(ВыручкаИСебестоимость.СуммаВыручки)				 КАК СуммаВыручки,
	|	СУММА(ВыручкаИСебестоимость.Себестоимость
	|		+ ВыручкаИСебестоимость.СуммаДополнительныхРасходов) КАК Себестоимость
	|ПОМЕСТИТЬ ВТТаблицаВыручки
	|ИЗ
	|	ВТКэшЗаписиВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПоПартнерам
	|			ПО ВыручкаИСебестоимость.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|			ПО ВыручкаИСебестоимость.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|ГДЕ
	|	ВыручкаИСебестоимость.ТипЗапасов В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыручкаИСебестоимость.Подразделение,
	|	АналитикаПоПартнерам.Организация,
	|	АналитикаПоПартнерам.Партнер,
	|	АналитикаПоПартнерам.НаправлениеДеятельности,
	|	АналитикаНоменклатуры.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВыручкаИСебестоимость.СуммаВыручки) <> 0
	|	ИЛИ СУММА(ВыручкаИСебестоимость.Себестоимость + ВыручкаИСебестоимость.СуммаДополнительныхРасходов) <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаВыручки.Подразделение               КАК Подразделение,
	|	ТаблицаВыручки.Организация                 КАК Организация,
	|	ТаблицаВыручки.Номенклатура                КАК Номенклатура,
	|	ТаблицаВыручки.Партнер                     КАК Партнер,
	|	ТаблицаВыручки.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТаблицаВыручки.СуммаВыручки                КАК СуммаВыручки,
	|	ТаблицаВыручки.Себестоимость               КАК Себестоимость,
	|	НастройкаРаспределения.СпособРаспределения КАК СпособРаспределения,
	|	ВЫБОР
	|		КОГДА ТаблицаВыручки.Партнер = НастройкаРаспределения.Партнер ТОГДА
	|			1000
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТаблицаВыручки.Подразделение = НастройкаРаспределения.Подразделение ТОГДА
	|			100
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТаблицаВыручки.Номенклатура = НастройкаРаспределения.Номенклатура ТОГДА
	|			10
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ТаблицаВыручки.Организация = НастройкаРаспределения.Организация ТОГДА
	|			1
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                      КАК Приоритет
	|ПОМЕСТИТЬ ВтТаблицаРаспределения
	|
	|ИЗ
	|	ВТТаблицаВыручки КАК ТаблицаВыручки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НастройкаРаспределенияПоНаправлениямДеятельности.СрезПоследних(
	|			&КонецПериода,
	|		) КАК НастройкаРаспределения
	|		ПО
	|			НастройкаРаспределения.Используется
	|			И ТаблицаВыручки.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			И (ТаблицаВыручки.Организация              = НастройкаРаспределения.Организация
	|				ИЛИ НастройкаРаспределения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|			И (ТаблицаВыручки.Партнер              = НастройкаРаспределения.Партнер
	|				ИЛИ НастройкаРаспределения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|
	|			И (ТаблицаВыручки.Подразделение              = НастройкаРаспределения.Подразделение
	|				ИЛИ НастройкаРаспределения.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|			И (ТаблицаВыручки.Номенклатура              = НастройкаРаспределения.Номенклатура
	|				ИЛИ НастройкаРаспределения.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Партнер,
	|	Подразделение,
	|	Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка 								 КАК ДокументДвижения,
	|	&КонецПериода                                                        КАК Период,
	|	ТаблицаФинансовыхРезультатов.Организация                             КАК Организация,
	|	ТаблицаФинансовыхРезультатов.Подразделение                           КАК Подразделение,
	|	ТаблицаФинансовыхРезультатов.СпособРаспределения                     КАК СпособРаспределения,
	|	СУММА(ТаблицаФинансовыхРезультатов.СуммаВыручки)                     КАК СуммаВыручки,
	|	СУММА(ТаблицаФинансовыхРезультатов.Себестоимость)                    КАК Себестоимость,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ВыручкаОтПродаж)       КАК СтатьяДоходов,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж)  КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА ТаблицаФинансовыхРезультатов.СпособРаспределения ССЫЛКА Справочник.НаправленияДеятельности ТОГДА
	|			ТаблицаФинансовыхРезультатов.СпособРаспределения
	|		ИНАЧЕ
	|			СпособыРаспределения.НаправлениеДеятельности
	|	КОНЕЦ                                                                КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ТаблицаФинансовыхРезультатов.СпособРаспределения ССЫЛКА Справочник.НаправленияДеятельности ТОГДА
	|			1
	|		ИНАЧЕ
	|			ЕСТЬNULL(СпособыРаспределения.Коэффициент, 1)
	|	КОНЕЦ                                                                КАК КоэффициентРаспределения
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаРаспределения.Организация                   КАК Организация,
	|		ТаблицаРаспределения.Подразделение                 КАК Подразделение,
	|		СУММА(ТаблицаРаспределения.СуммаВыручки)           КАК СуммаВыручки,
	|		СУММА(ТаблицаРаспределения.Себестоимость)          КАК Себестоимость,
	|		ЕСТЬNULL(ТаблицаРаспределения.СпособРаспределения, НЕОПРЕДЕЛЕНО) КАК СпособРаспределения
	|	ИЗ
	|		ВтТаблицаРаспределения КАК ТаблицаРаспределения
	|
	|	ГДЕ
	|		ТаблицаРаспределения.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		И ТаблицаРаспределения.Приоритет В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Таб.Приоритет) КАК Приоритет
	|				ИЗ
	|					ВтТаблицаРаспределения КАК Таб
	|				ГДЕ
	|					Таб.Организация        = ТаблицаРаспределения.Организация
	|					И Таб.Партнер            = ТаблицаРаспределения.Партнер
	|					И Таб.Подразделение      = ТаблицаРаспределения.Подразделение
	|					И Таб.Номенклатура         = ТаблицаРаспределения.Номенклатура)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРаспределения.Организация,
	|		ТаблицаРаспределения.Подразделение,
	|		ЕСТЬNULL(ТаблицаРаспределения.СпособРаспределения, НЕОПРЕДЕЛЕНО)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТаблицаРаспределения.Организация                   КАК Организация,
	|		ТаблицаРаспределения.Подразделение                 КАК Подразделение,
	|		СУММА(ТаблицаРаспределения.СуммаВыручки)           КАК СуммаВыручки,
	|		СУММА(ТаблицаРаспределения.Себестоимость)          КАК Себестоимость,
	|		ТаблицаРаспределения.НаправлениеДеятельности       КАК СпособРаспределения
	|	ИЗ
	|		ВтТаблицаРаспределения КАК ТаблицаРаспределения
	|
	|	ГДЕ
	|		ТаблицаРаспределения.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРаспределения.Организация,
	|		ТаблицаРаспределения.Подразделение,
	|		ТаблицаРаспределения.НаправлениеДеятельности
	|
	|	) КАК ТаблицаФинансовыхРезультатов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СпособыРаспределенияПоНаправлениямДеятельности.НаправленияДеятельности КАК СпособыРаспределения
	|		ПО ТаблицаФинансовыхРезультатов.СпособРаспределения = СпособыРаспределения.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|		ПО ТаблицаФинансовыхРезультатов.Организация = ДокументыРасчетаСебестоимости.Организация
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДокументыРасчетаСебестоимости.Ссылка,
	|	ТаблицаФинансовыхРезультатов.Организация,
	|	ТаблицаФинансовыхРезультатов.Подразделение,
	|	ТаблицаФинансовыхРезультатов.СпособРаспределения,
	|	ВЫБОР
	|		КОГДА ТаблицаФинансовыхРезультатов.СпособРаспределения ССЫЛКА Справочник.НаправленияДеятельности ТОГДА
	|			ТаблицаФинансовыхРезультатов.СпособРаспределения
	|		ИНАЧЕ
	|			СпособыРаспределения.НаправлениеДеятельности
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаФинансовыхРезультатов.СпособРаспределения ССЫЛКА Справочник.НаправленияДеятельности ТОГДА
	|			1
	|		ИНАЧЕ
	|			ЕСТЬNULL(СпособыРаспределения.Коэффициент, 1)
	|	КОНЕЦ
	|
	|ИТОГИ
	|	МАКСИМУМ(СуммаВыручки),
	|	МАКСИМУМ(Себестоимость),
	|	СУММА(КоэффициентРаспределения)
	|
	|ПО
	|	Организация,
	|	Подразделение,
	|	СпособРаспределения
	|";
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ВыборкаПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
		
		Пока ВыборкаПодразделение.Следующий() Цикл
			
			ВыборкаСпособыРаспределения = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СпособРаспределения");
			
			Пока ВыборкаСпособыРаспределения.Следующий() Цикл
				
				ВсегоДолей            = ВыборкаСпособыРаспределения.КоэффициентРаспределения;
				РасходыКРаспределению = ВыборкаСпособыРаспределения.Себестоимость;
				ДоходыКРаспределению  = ВыборкаСпособыРаспределения.СуммаВыручки;
				
				ВыборкаДетали = ВыборкаСпособыРаспределения.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				Пока ВыборкаДетали.Следующий() Цикл

					Если ВсегоДолей <> 0 Тогда
						Расходы = Окр(РасходыКРаспределению * ВыборкаДетали.КоэффициентРаспределения / ВсегоДолей,
										2, РежимОкругления.Окр15как20);
					Иначе
						Расходы = 0;
					КонецЕсли;

					Если ВсегоДолей <> 0 Тогда
						Доходы = Окр(ДоходыКРаспределению * ВыборкаДетали.КоэффициентРаспределения / ВсегоДолей,
										2, РежимОкругления.Окр15как20);
					Иначе
						Доходы = 0;
					КонецЕсли;

					РасходыКРаспределению = РасходыКРаспределению - Расходы;
					ДоходыКРаспределению  = ДоходыКРаспределению  - Доходы;
					ВсегоДолей            = ВсегоДолей            - ВыборкаДетали.КоэффициентРаспределения;

					// Формирование движений по фин. результату.
					ДанныеДвижения = Новый Структура(
						"Период, ДокументДвижения, Организация, Подразделение, НаправлениеДеятельности, СпособРаспределения");
					ЗаполнитьЗначенияСвойств(ДанныеДвижения, ВыборкаДетали);
					
					Если Доходы <> 0 Тогда
						ДанныеДвижения.Вставить("Доходы", 		 Доходы);
						ДанныеДвижения.Вставить("СтатьяДоходов", ВыборкаДетали.СтатьяДоходов);
					КонецЕсли;

					Если Расходы <> 0 Тогда
						ДанныеДвижения.Вставить("Расходы", 		  Расходы);
						ДанныеДвижения.Вставить("СтатьяРасходов", ВыборкаДетали.СтатьяРасходов);
					КонецЕсли;
					
					СформироватьДвиженияПоРегистру(
						ПараметрыРасчета,
						Метаданные.РегистрыНакопления.ФинансовыеРезультаты.Имя,
						ДанныеДвижения);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТТаблицаВыручки, ВтТаблицаРаспределения");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);

КонецПроцедуры

// Этап 4.2
Процедура СписатьПрочиеДоходыРасходы(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "СписатьПрочиеДоходыРасходы");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка 		КАК ДокументДвижения,
	|	&КонецПериода								КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)		КАК ВидДвижения,
	|	ПрочиеДоходы.Организация 					КАК Организация,
	|	ПрочиеДоходы.Подразделение 					КАК Подразделение,
	|	ПрочиеДоходы.СтатьяДоходов 					КАК СтатьяДоходов,
	|	ПрочиеДоходы.АналитикаДоходов 				КАК АналитикаДоходов,
	|	ПрочиеДоходы.Сумма							КАК Сумма
	|ИЗ
	|	ВТКэшРасчетныеОстаткиПрочиеДоходы КАК ПрочиеДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|			ПО ПрочиеДоходы.Организация = ДокументыРасчетаСебестоимости.Организация
	|ГДЕ
	|	ПрочиеДоходы.Сумма <> 0
	|";
	
	СформироватьДвиженияПоРегиструПоДаннымЗапроса(
		ПараметрыРасчета,
		Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя,
		Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка 		КАК ДокументДвижения,
	|	&КонецПериода								КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)		КАК ВидДвижения,
	|	ПрочиеРасходы.Организация 					КАК Организация,
	|	ПрочиеРасходы.НалоговоеНазначение 			КАК НалоговоеНазначение,
	|	ПрочиеРасходы.Подразделение 				КАК Подразделение,
	|	ПрочиеРасходы.СтатьяРасходов 				КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов 			КАК АналитикаРасходов,
	|	ПрочиеРасходы.СуммаРегл						КАК СуммаРегл, 
	|	ПрочиеРасходы.СуммаРеглБезНДС				КАК СуммаРеглБезНДС, 
	|	ПрочиеРасходы.НДСРегл						КАК НДСРегл, 
	|	ПрочиеРасходы.Сумма							КАК Сумма
	|ИЗ
	|	ВТКэшРасчетныеОстаткиПрочиеРасходы КАК ПрочиеРасходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|			ПО ПрочиеРасходы.Организация = ДокументыРасчетаСебестоимости.Организация
	|ГДЕ
	|	ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	И (ПрочиеРасходы.Сумма <> 0 ИЛИ ПрочиеРасходы.СуммаРегл <> 0 ИЛИ ПрочиеРасходы.СуммаРеглБезНДС <> 0 ИЛИ ПрочиеРасходы.НДСРегл <> 0)
	|";
	
	СформироватьДвиженияПоРегиструПоДаннымЗапроса(
		ПараметрыРасчета,
		Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя,
		Запрос);
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

// Этап 4.3
Процедура ОтразитьПрибылиИУбытки(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ОтразитьПрибылиИУбытки");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимость.ДокументДвижения	КАК ДокументДвижения,
	|	ВыручкаИСебестоимость.Период			КАК Период,
	|	ВыручкаИСебестоимость.Организация		КАК Организация,
	|	ВыручкаИСебестоимость.Организация		КАК Аналитика,
	|	СУММА(ВыручкаИСебестоимость.Сумма)		КАК Сумма
	|ПОМЕСТИТЬ ВТПромежуточнаяТаблица1
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВыручкаИСебестоимость.Регистратор 							КАК ДокументДвижения,
	|		НАЧАЛОПЕРИОДА(ВыручкаИСебестоимость.Период, ДЕНЬ)  			КАК Период,
	|		АналитикаПоПартнерам.Организация                			КАК Организация,
	|		ВЫБОР КОГДА ВыручкаИСебестоимость.ТипЗапасов В (
	|			Значение(Перечисление.ТипыЗапасов.Товар),
	|			Значение(Перечисление.ТипыЗапасов.Услуга))
	|		ТОГДА
	|			- (ВыручкаИСебестоимость.СуммаВыручки
	|				- ВыручкаИСебестоимость.Себестоимость
	|				- ВыручкаИСебестоимость.СуммаДополнительныхРасходов)
	|		ИНАЧЕ
	|			ВыручкаИСебестоимость.СуммаДополнительныхРасходов
	|		КОНЕЦ 														КАК Сумма
	|	ИЗ
	|		ВТКэшЗаписиВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПоПартнерам
	|				ПО ВыручкаИСебестоимость.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|   ) КАК ВыручкаИСебестоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыручкаИСебестоимость.ДокументДвижения,
	|	ВыручкаИСебестоимость.Период,
	|	ВыручкаИСебестоимость.Организация
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВыручкаИСебестоимость.ДокументДвижения	КАК ДокументДвижения,
	|	ВыручкаИСебестоимость.Период			КАК Период,
	|	ВыручкаИСебестоимость.Контрагент		КАК Организация,
	|	ВыручкаИСебестоимость.Организация		КАК Аналитика,
	|	СУММА(ВыручкаИСебестоимость.Сумма)		КАК Сумма
	|ПОМЕСТИТЬ ВТПромежуточнаяТаблица2
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВыручкаИСебестоимость.Регистратор 							КАК ДокументДвижения,
	|		НАЧАЛОПЕРИОДА(ВыручкаИСебестоимость.Период, ДЕНЬ)  			КАК Период,
	|		АналитикаПоПартнерам.Организация                			КАК Организация,
	|		АналитикаПоПартнерам.Контрагент                				КАК Контрагент,
	|		ВыручкаИСебестоимость.СуммаВыручки
	|			- ВыручкаИСебестоимость.Себестоимость
	|			- ВыручкаИСебестоимость.СуммаДополнительныхРасходов 	КАК Сумма
	|	ИЗ
	|		ВТКэшЗаписиВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			ПО
	|				ВыручкаИСебестоимость.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|				И АналитикаПоПартнерам.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|				И АналитикаПоПартнерам.Контрагент ССЫЛКА Справочник.Организации
	|				И АналитикаПоПартнерам.Контрагент <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|	ГДЕ
	|		ВыручкаИСебестоимость.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|   ) КАК ВыручкаИСебестоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыручкаИСебестоимость.ДокументДвижения,
	|	ВыручкаИСебестоимость.Период,
	|	ВыручкаИСебестоимость.Контрагент,
	|	ВыручкаИСебестоимость.Организация
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПрочиеДоходы.Регистратор				 КАК ДокументДвижения,
	|	НАЧАЛОПЕРИОДА(ПрочиеДоходы.Период, ДЕНЬ) КАК Период,
	|	ПрочиеДоходы.Организация				 КАК Организация,
	|	ПрочиеДоходы.Организация				 КАК Аналитика,
	|	СУММА(ПрочиеДоходы.Сумма)				 КАК Сумма
	|ПОМЕСТИТЬ ВТПромежуточнаяТаблица3
	|ИЗ
	|	ВТКэшЗаписиПрочиеДоходы КАК ПрочиеДоходы
	|ГДЕ
	|	НЕ &ФормироватьФинансовыйРезультат
	|	И ПрочиеДоходы.РасчетСебестоимости
	|	И НЕ ПрочиеДоходы.СлужебноеВидДвиженияПриход
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеДоходы.Регистратор,
	|	НАЧАЛОПЕРИОДА(ПрочиеДоходы.Период, ДЕНЬ),
	|	ПрочиеДоходы.Организация
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПрочиеРасходы.Регистратор				  КАК ДокументДвижения,
	|	НАЧАЛОПЕРИОДА(ПрочиеРасходы.Период, ДЕНЬ) КАК Период,
	|	ПрочиеРасходы.Организация				  КАК Организация,
	|	ПрочиеРасходы.Организация				  КАК Аналитика,
	|	СУММА(-ПрочиеРасходы.Сумма) 			  КАК Сумма
	|ПОМЕСТИТЬ ВТПромежуточнаяТаблица4
	|ИЗ
	|	ВТКэшЗаписиПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	НЕ &ФормироватьФинансовыйРезультат
	|	И ПрочиеРасходы.РасчетСебестоимости
	|	И НЕ ПрочиеРасходы.СлужебноеВидДвиженияПриход
	|	И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.Регистратор,
	|	НАЧАЛОПЕРИОДА(ПрочиеРасходы.Период, ДЕНЬ),
	|	ПрочиеРасходы.Организация
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеДвижений.ДокументДвижения 	 								  КАК ДокументДвижения,
	|	ДанныеДвижений.Период				 								  КАК Период,
	|	ДанныеДвижений.Организация			 								  КАК Организация,
	|	ДанныеДвижений.Аналитика			 								  КАК Аналитика,
	|	ДанныеДвижений.ВидДвижения			 								  КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
	|	СУММА(ДанныеДвижений.Сумма)			 								  КАК Сумма
	|ИЗ
	|
	|	(ВЫБРАТЬ
	|		Т.ДокументДвижения						КАК ДокументДвижения,
	|		Т.Период								КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
	|		Т.Организация							КАК Организация,
	|		Т.Аналитика								КАК Аналитика,
	|		Т.Сумма									КАК Сумма
	|	ИЗ
	|		ВТПромежуточнаяТаблица1 КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.ДокументДвижения						КАК ДокументДвижения,
	|		Т.Период								КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|		Т.Организация							КАК Организация,
	|		Т.Аналитика								КАК Аналитика,
	|		Т.Сумма									КАК Сумма
	|	ИЗ
	|		ВТПромежуточнаяТаблица2 КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.ДокументДвижения						КАК ДокументДвижения,
	|		Т.Период								КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)	КАК ВидДвижения,
	|		Т.Организация							КАК Организация,
	|		Т.Аналитика								КАК Аналитика,
	|		Т.Сумма									КАК Сумма
	|	ИЗ
	|		ВТПромежуточнаяТаблица3 КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.ДокументДвижения						КАК ДокументДвижения,
	|		Т.Период								КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)	КАК ВидДвижения,
	|		Т.Организация							КАК Организация,
	|		Т.Аналитика								КАК Аналитика,
	|		Т.Сумма									КАК Сумма
	|	ИЗ
	|		ВТПромежуточнаяТаблица4 КАК Т
	|
	|	) КАК ДанныеДвижений
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДвижений.ДокументДвижения,
	|	ДанныеДвижений.Период,
	|	ДанныеДвижений.Организация,
	|	ДанныеДвижений.Аналитика,
	|	ДанныеДвижений.ВидДвижения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеДвижений.Сумма) <> 0
	|";
	
	СформироватьДвиженияПоРегиструПоДаннымЗапроса(
		ПараметрыРасчета,
		Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя,
		Запрос);
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВТПромежуточнаяТаблица1, ВТПромежуточнаяТаблица2, ВТПромежуточнаяТаблица3, ВТПромежуточнаяТаблица4");
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры



// Этап 4.6
// Проверяет корректность результатов расчета себестоимости
//
Процедура ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета, Ложь);

	Запрос.Текст = ТекстЗапросаПроверкаКорректностиОстатковВРегистреСебестоимостьТоваровПослеРасчета();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия);
		ПредставлениеТовара = ПредставлениеТовара + НСтр("ru=', код: ';uk=', код: '") + Выборка.КодНоменклатуры;
		ПредставлениеТовара = ПредставлениеТовара + НСтр("ru=', склад: ';uk=', склад: '") + Выборка.Склад + НСтр("ru=', организация: ';uk=', організація: '") + Выборка.Организация;
		ПредставлениеТовара = ПредставлениеТовара + НСтр("ru=', раздел учета: ';uk=', розділ обліку: '") + Выборка.РазделУчета;
		Если ЗначениеЗаполнено(Выборка.ВидЗапасов) Тогда
			ПредставлениеТовара = ПредставлениеТовара + НСтр("ru=', вид запасов: ';uk=', вид запасів: '") + Выборка.ВидЗапасов;
		КонецЕсли;
		
		ПредставлениеНекорректногоОстатка = "Количество = 0"
				+ ?(Выборка.Стоимость <> 0,", Стоимость = " + Выборка.Стоимость, "")
				+ ?(Выборка.СтоимостьБезНДС <> 0,", СтоимостьБезНДС = " + Выборка.СтоимостьБезНДС, "")
				+ ?(Выборка.СуммаДопРасходов <> 0,", СуммаДопРасходов = " + Выборка.СуммаДопРасходов, "")
				+ ?(Выборка.СуммаДопРасходовБезНДС <> 0,", СуммаДопРасходовБезНДС = " + Выборка.СуммаДопРасходовБезНДС, "")
				+ ?(Выборка.СтоимостьРегл <> 0,", СтоимостьРегл = " + Выборка.СтоимостьРегл, "")
				+ ?(Выборка.СтоимостьРеглБезНДС <> 0,", СтоимостьРеглБезНДС = " + Выборка.СтоимостьРеглБезНДС, "")
				+ ?(Выборка.НДСРегл <> 0,", НДСРегл = " + Выборка.НДСРегл, "")
				+ "";
				
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По номенклатуре %1 обнаружен некорректный остаток на %2 в регистре ""Себестоимость товаров"": %3';uk='По номенклатурі %1 виявлено некоректний залишок на %2 в регістрі ""Собівартість товарів"": %3'"),
			ПредставлениеТовара,
			Формат(КонецМесяца(ПараметрыРасчета.РасчетныйПериод.КонецПериода), "ДЛФ=D"),
			ПредставлениеНекорректногоОстатка);
		
		// Ошибка в итоговых данных
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкиДляЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			Строка(Выборка.Номенклатура) + " (" + СокрЛП(Выборка.КодНоменклатуры) + ")",
			ТекстОшибки);
		
		ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, ТекстОшибки);
		
	КонецЦикла;
	
	// Добавим запись в протокол расчета
	СтрокаПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Найдено ошибок: %1';uk='Знайдено помилок: %1'"),
		ПротоколРасчета_ПредставлениеЗначения(Выборка.Количество())
			+ ?(Выборка.Количество() = 0, "", " !"));
		
	ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, СтрокаПротокола);
	
	ПараметрыРасчета.БылиОшибки = ПараметрыРасчета.БылиОшибки ИЛИ (Выборка.Количество() > 0);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыАлгоритмаРасчетаСебестоимости

#Область ПроцедурыИнициализацииТекстовИПараметровЗапросов

// Универсальная процедура установки параметров запроса из общих параметров расчета.
// Следует использовать для идентичности имен и значений параметров во всех запросах.
//
Процедура ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета, ИспользоватьОбщийМенеджерВТ = Истина)
	
	// Общие параметры
	Запрос.УстановитьПараметр("НачалоПериода", 	       				   ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 		   				   ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода",  				   ПараметрыРасчета.РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПериода",   				   ПараметрыРасчета.РасчетныйПериод.ГраницаКонецПериода);

	Запрос.УстановитьПараметр("ПредварительныйРасчет", 				   ПараметрыРасчета.ПредварительныйРасчет);
	Запрос.УстановитьПараметр("ЗначениеПогрешности",  				   ПараметрыРасчета.ЗначениеПогрешности);
	Запрос.УстановитьПараметр("МассивОрганизаций",     				   ПараметрыРасчета.МассивОрганизаций);
	
	Запрос.УстановитьПараметр("МассивОперацийРеализации", 			   ПараметрыРасчета.МассивыОпераций.Реализации);
	Запрос.УстановитьПараметр("МассивОперацийВозвратыПрошлыхПериодов", ПараметрыРасчета.МассивыОпераций.ВозвратыПрошлыхПериодов);
	Запрос.УстановитьПараметр("МассивОперацийПередачи",    			   ПараметрыРасчета.МассивыОпераций.ПередачиТоваров);
	Запрос.УстановитьПараметр("МассивОперацийПоступление",  		   ПараметрыРасчета.МассивыОпераций.ВнешниеПоступления);
	Запрос.УстановитьПараметр("МассивОперацийПоступлениеВнешнее", 	   ПараметрыРасчета.МассивыОпераций.ОценкаОстаткаТоваровПоФИФО);
	
	Запрос.УстановитьПараметр("СредняяЗаМесяц",
		(ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц));
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
		
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПараметрыРасчета.ИспользоватьРаздельныйУчетПоНалогообложению);
	Запрос.УстановитьПараметр("ВключатьНДСВСебестоимостьПриУсловнойПродаже", ПараметрыРасчета.ВключатьНДСВСебестоимостьПриУсловнойПродаже);
	Запрос.УстановитьПараметр("ИсключатьНДСИзСебестоимостиПриВосстановленииНДС", ПараметрыРасчета.ИсключатьНДСИзСебестоимостиПриВосстановленииНДС);
	
	// Значения функциональных опций
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ФО Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	// Менеджер временных таблиц
	Если ИспользоватьОбщийМенеджерВТ Тогда
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // используется в редких случаях
	КонецЕсли;
	
КонецПроцедуры


// Служебная, этап 1.1, также используется в механизме закрытия месяца
Функция ТекстЗапросаПроверкаКорректностиИсходныхДанныхДоРасчета()
	
	// Требования к тексту этого запроса см. в СостояниеРасчетаСебестоимости()
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец            КАК ОрганизацияПродавец,
	|	ПроданныеТовары.ВидЗапасовПродавца.Организация КАК ОрганизацияПолучатель,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	СУММА(ПроданныеТовары.КоличествоОстаток)       КАК Количество,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ПроданныеТовары.ВидЗапасовПродавца.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасовПродавца,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ПроданныеТовары.ВидЗапасовПродавца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасовПолучателя
	|
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|		ОрганизацияВладелец В (&МассивОрганизаций)
	|		И ВидЗапасовПродавца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	) КАК ПроданныеТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ПроданныеТовары.ВидЗапасовПродавца.Организация,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ПроданныеТовары.ВидЗапасовПродавца.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ПроданныеТовары.ВидЗапасовПродавца
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПродавец КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.ВидЗапасовПродавца   КАК ВидЗапасов,
	|	Товары.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ВтНетПередачТоваров
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПолучатель КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.ВидЗапасовПолучателя КАК ВидЗапасов,
	|	Товары.Количество КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СписанныеТовары.ВидЗапасов.Организация КАК Организация,
	|	СписанныеТовары.ВидЗапасов.Комитент КАК Владелец,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	СУММА(СписанныеТовары.КоличествоСписаноОстаток) КАК Количество,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		СписанныеТовары.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасов
	|
	|ПОМЕСТИТЬ ВтНетОтчетовОСписании
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&ГраницаКонецПериода,
	|		ВидЗапасов.Организация В (&МассивОрганизаций)
	|	) КАК СписанныеТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	СписанныеТовары.ВидЗапасов.Организация,
	|	СписанныеТовары.ВидЗапасов.Комитент,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		СписанныеТовары.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Остатки.Организация 		КАК Организация,
	|	Остатки.Номенклатура 		КАК Номенклатура,
	|	Остатки.Характеристика 		КАК Характеристика,
	|	Остатки.Серия 				КАК Серия,
	|	Остатки.Подразделение 		КАК Подразделение,
	|	Остатки.КоличествоОстаток 	КАК Количество
	|ПОМЕСТИТЬ ВтРаботыОстатки
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)) КАК Остатки
	|ГДЕ
	|	Остатки.КоличествоОстаток < 0
	|	И Остатки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Остатки.Организация 	КАК Организация,
	|	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	Остатки.Количество 		КАК Количество
	|ПОМЕСТИТЬ ВтРаботы
	|ИЗ
	|	ВтРаботыОстатки КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = Остатки.Номенклатура
	|		И Аналитика.Характеристика = Остатки.Характеристика
	|		И Аналитика.Серия = Остатки.Серия
	|		И Аналитика.Склад = Остатки.Подразделение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	""Остатки""                            КАК ВидПроверки,
	|	Таб.РазделУчета                        КАК РазделУчета,
	|	Таб.ВидЗапасов                         КАК ВидЗапасов,
	|	Таб.Организация                        КАК Организация,
	|	Таб.Организация                        КАК Владелец,
	|	АналитикаНоменклатуры.Номенклатура     КАК Номенклатура,
	|	АналитикаНоменклатуры.Характеристика   КАК Характеристика,
	|	АналитикаНоменклатуры.Серия            КАК Серия,
	|	АналитикаНоменклатуры.Склад            КАК Склад,
	|	СУММА(Таб.Количество)                  КАК Количество
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		Т.РазделУчета КАК РазделУчета,
	|		ВЫБОР КОГДА Аналитика.Склад ССЫЛКА Справочник.Партнеры
	|		 ИЛИ Аналитика.Склад ССЫЛКА Справочник.СтруктураПредприятия ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			Т.ВидЗапасов
	|		КОНЕЦ КАК ВидЗапасов,
	|		Т.Организация КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПериода,
	|			Организация В (&МассивОрганизаций)) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Т.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО СпрНоменклатура.Ссылка = Аналитика.Номенклатура
	|	ГДЕ
	|		Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИЛИ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.РазделУчета                КАК РазделУчета,
	|		Т.ВидЗапасов                 КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				Т.Количество
	|			ИНАЧЕ
	|				-Т.Количество
	|		КОНЕЦ                        КАК Количество
	|	ИЗ
	|		ВтНетПередачТоваров КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|		НЕОПРЕДЕЛЕНО                 КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.Количество                 КАК Количество
	|	ИЗ
	|		ВтНетОтчетовОСписании КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|		НЕОПРЕДЕЛЕНО                 КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		-Т.Количество                КАК Количество
	|	ИЗ
	|		ВтРаботы КАК Т
	|
	|	) КАК Таб
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Таб.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаНоменклатуры.Характеристика,
	|	Таб.РазделУчета,
	|	Таб.ВидЗапасов,
	|	Таб.Организация,
	|	АналитикаНоменклатуры.Номенклатура,
	|	АналитикаНоменклатуры.Серия,
	|	АналитикаНоменклатуры.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Передачи"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	Таб.ОрганизацияПолучатель КАК Организация,
	|	Таб.ОрганизацияПродавец КАК Владелец,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	АналитикаНоменклатуры.Склад КАК Склад,
	|	0 КАК Количество
	|ИЗ
	|	Товары КАК Таб
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		Таб.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.ОрганизацияПолучатель,
	|	Таб.ОрганизацияПродавец,
	|	АналитикаНоменклатуры.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Комиссия"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	Таб.Организация КАК Организация,
	|	Таб.Владелец КАК Владелец,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	0 КАК Количество
	|ИЗ
	|	ВтНетОтчетовОСписании КАК Таб
	|СГРУППИРОВАТЬ ПО
	|	Таб.Организация,
	|	Таб.Владелец
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Работы"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	Таб.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Владелец,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Склад,
	|	СУММА(Таб.Количество) КАК Количество
	|ИЗ
	|	ВтРаботы КАК Таб
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Ссылка = Таб.АналитикаУчетаНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	Таб.Организация,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЛишниеПередачи"" КАК ВидПроверки,
	|	НЕОПРЕДЕЛЕНО КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	Таб.ОрганизацияПолучатель КАК Организация,
	|	Таб.ОрганизацияПродавец КАК Владелец,
	|	АналитикаНоменклатуры.Номенклатура,
	|	АналитикаНоменклатуры.Характеристика,
	|	АналитикаНоменклатуры.Серия,
	|	АналитикаНоменклатуры.Склад КАК Склад,
	|	-СУММА(Таб.Количество) КАК Количество
	|ИЗ
	|	Товары КАК Таб
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Таб.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.ОрганизацияПолучатель,
	|	Таб.ОрганизацияПродавец,
	|	АналитикаНоменклатуры.Номенклатура,
	|	АналитикаНоменклатуры.Характеристика,
	|	АналитикаНоменклатуры.Серия,
	|	АналитикаНоменклатуры.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) < 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции


// Служебная, этап 3.2 (ТаблицаРаспределенияРасходовНаСебестоимостьТоваров)
Функция ТекстЗапросаВтТаблицаРасходовПоОстаткам()
	
	ТекстЗапроса = "
	| ВЫБРАТЬ
	|	ТаблицаРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасходы.Организация КАК Организация,
	|	ТаблицаРасходы.Подразделение КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаРасходы.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ТаблицаРасходы.Сумма КАК Сумма,
	|	ТаблицаРасходы.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаРасходы.СуммаРегл КАК СуммаРегл,
	|	ТаблицаРасходы.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|	ТаблицаРасходы.НДСРегл КАК НДСРегл,
	|	ТаблицаРасходы.ПостояннаяРазница КАК ПостояннаяРазница,
	|	ТаблицаРасходы.ВременнаяРазница КАК ВременнаяРазница
	|
	|ПОМЕСТИТЬ ВтТаблицаРасходов
	|ИЗ
	|	&ТаблицаРасходов КАК ТаблицаРасходы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Служебная, этап 3.2 (ТаблицаРаспределенияРасходовНаСебестоимостьТоваров)
Функция ТекстЗапросаТаблицаСпособовРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРасходы.Организация КАК Организация,
	|	ТаблицаРасходы.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР КОГДА ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК АналитикаЗаполнена,
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК ИндексБазы
	|ПОМЕСТИТЬ ТаблицаСпособовРаспределения
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.Организация,
	|	ТаблицаРасходы.ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ВЫБОР КОГДА ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Служебная, этап 3.2 (ТаблицаРаспределенияРасходовНаСебестоимостьТоваров)
Функция ТекстЗапросаТаблицаДокументов()
	
	ТекстЗапроса = "
	// Поступление товаров по конкретным документам закупки или по заказам поставщикам.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И (ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|       	ИЛИ ТаблицаТовары.ЗаказПоставщику = ТаблицаСпособовРаспределения.АналитикаРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Поступления товаров по любым документам закупки.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (ТаблицаТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Перемещения товаров по конкретным документам перемещения или по заказам на перемещение.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И (ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|       	ИЛИ ДанныеДокумента.ЗаказНаПеремещение = ТаблицаСпособовРаспределения.АналитикаРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Перемещения товаров по любым документам перемещения или по любым заказам на перемещение.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (ДанныеДокумента.ЗаказНаПеремещение <> ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка) И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Передачи товаров между организациями.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Служебная, этап 3.2 (ТаблицаРаспределенияРасходовНаСебестоимостьТоваров)
Функция ТекстЗапросаТаблицаПоступленияТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УчетСебестоимости.Организация КАК Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов КАК ВидЗапасов,
	|	УчетСебестоимости.КоличествоОстаток КАК Количество,
	|	УчетСебестоимости.СтоимостьОстаток КАК Стоимость
	|ПОМЕСТИТЬ ВтПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаНачалоПериода,
	|		РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		И Организация В(&МассивОрганизаций)
	|	) КАК УчетСебестоимости
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетСебестоимости.Организация КАК Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(
	|		ВЫБОР КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ПеремещениеТоваров ТОГДА
	|			0
	|		ИНАЧЕ
	|			УчетСебестоимости.Количество
	|		КОНЕЦ
	|	) КАК Количество,
	|	СУММА(
	|		ВЫБОР КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ПеремещениеТоваров ТОГДА
	|			0
	|		ИНАЧЕ
	|			УчетСебестоимости.Стоимость
	|		КОНЕЦ
	|	) КАК Стоимость
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|ГДЕ
	|	УчетСебестоимости.СлужебноеВидДвиженияПриход
	|	И УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	И (УчетСебестоимости.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|		ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|		ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|		ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.СборкаТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексБазы КАК ИндексБазы,
	|	УчетСебестоимости.Организация КАК Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(УчетСебестоимости.Количество) КАК Количество,
	|	СУММА(УчетСебестоимости.Стоимость) КАК Стоимость
	|ПОМЕСТИТЬ ТаблицаПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК УчетСебестоимости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО УчетСебестоимости.Регистратор = ТаблицаДокументов.Ссылка
	|	
	|ГДЕ
	// движения прошлых периодов
	|	УчетСебестоимости.Период < &НачалоПериода
	|	И УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	И УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И УчетСебестоимости.Активность
	|	И УчетСебестоимости.Организация В (&МассивОрганизаций)
	|	И (УчетСебестоимости.АналитикаУчетаНоменклатуры, УчетСебестоимости.ВидЗапасов) В (
	|		ВЫБРАТЬ
	|       	ВтПоступленияТоваров.АналитикаУчетаНоменклатуры,
	|           ВтПоступленияТоваров.ВидЗапасов
	|		ИЗ
	|			ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|		)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.ИндексБазы,
	|	УчетСебестоимости.Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексБазы КАК ИндексБазы,
	|	УчетСебестоимости.Организация КАК Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(УчетСебестоимости.Количество) КАК Количество,
	|	СУММА(УчетСебестоимости.Стоимость) КАК Стоимость
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|			ПО УчетСебестоимости.Регистратор = ТаблицаДокументов.Ссылка
	|	
	|ГДЕ
	|	УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	И УчетСебестоимости.СлужебноеВидДвиженияПриход
	|	И (УчетСебестоимости.АналитикаУчетаНоменклатуры, УчетСебестоимости.ВидЗапасов) В (
	|		ВЫБРАТЬ
	|       	ВтПоступленияТоваров.АналитикаУчетаНоменклатуры,
	|           ВтПоступленияТоваров.ВидЗапасов
	|		ИЗ
	|			ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|		)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.ИндексБазы,
	|	УчетСебестоимости.Организация,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.ВидЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	ВтПоступленияТоваров.Организация КАК Организация,
	|	ВтПоступленияТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВтПоступленияТоваров.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(ВтПоступленияТоваров.Количество) КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость) КАК Стоимость
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|			ПО ВтПоступленияТоваров.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|			ПО ВтПоступленияТоваров.Организация = ТаблицаСпособовРаспределения.Организация
	|			И (ТаблицаСпособовРаспределения.АналитикаРасходов = АналитикаНоменклатуры.Склад
	|				ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = АналитикаНоменклатуры.Номенклатура
	|				ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы,
	|	ВтПоступленияТоваров.Организация,
	|	ВтПоступленияТоваров.АналитикаУчетаНоменклатуры,
	|	ВтПоступленияТоваров.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Служебная, этап 3.2 (ТаблицаРаспределенияРасходовНаСебестоимостьТоваров)
Функция ТекстЗапросаТаблицаБазыРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	ТаблицаСпособовРаспределения.Организация КАК Организация,
	|	ТаблицаСпособовРаспределения.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ТаблицаСпособовРаспределения.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаПоступленияТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаПоступленияТоваров.ВидЗапасов КАК ВидЗапасов,
	|	ВЫБОР КОГДА ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		= ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноКоличеству)
	|	ТОГДА
	|		ЕСТЬNULL(ТаблицаПоступленияТоваров.Количество, 0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ТаблицаПоступленияТоваров.Стоимость, 0)
	|	КОНЕЦ КАК База
	|
	|ИЗ
	|	ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПоступленияТоваров КАК ТаблицаПоступленияТоваров
	|	ПО
	|		ТаблицаСпособовРаспределения.ИндексБазы = ТаблицаПоступленияТоваров.ИндексБазы
	|		И ТаблицаСпособовРаспределения.Организация = ТаблицаПоступленияТоваров.Организация
	|ИТОГИ
	|	СУММА(База)
	|ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Служебная, этап 3.2 (ТаблицаРаспределенияРасходовНаСебестоимостьТоваров)
Функция ТекстЗапросаТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК НомерСтроки,
	|	&КонецПериода КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	ТаблицаРасходы.Организация КАК Организация,
	|	ТаблицаРасходы.Подразделение КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов КАК СтатьяРасходовСписания,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	СУММА(ТаблицаРасходы.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРасходы.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаРасходы.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ТаблицаРасходы.СуммаРеглБезНДС) КАК СуммаРеглБезНДС,
	|	СУММА(ТаблицаРасходы.НДСРегл) КАК НДСРегл,
	|	СУММА(ТаблицаРасходы.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(ТаблицаРасходы.ВременнаяРазница) КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаРасходы.ПравилоРаспределения = ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		И ТаблицаРасходы.АналитикаРасходов = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.Организация,
	|	ТаблицаРасходы.Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ТаблицаСпособовРаспределения.ИндексБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Служебная, этап 3.7
Функция ТекстЗапросаДвиженияСтоимости()

	ТекстЗапроса = 
	"
	// В качестве вектора решений на первой итерации берутся свободные коэффициенты.
	|ВЫБРАТЬ
	|	УзлыКорректировки.НомерУзла                                             КАК НомерУзла,
	|	УзлыКорректировки.ВременнаяРазницаЗнак                                  КАК ВременнаяРазницаЗнак,
	|	УзлыКорректировки.ПостояннаяРазницаЗнак                                 КАК ПостояннаяРазницаЗнак,
	|	ВЫРАЗИТЬ(УзлыКорректировки.Стоимость КАК ЧИСЛО(23,10))                  КАК Стоимость,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьБезНДС КАК ЧИСЛО(23,10))            КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(УзлыКорректировки.ПостояннаяРазница КАК ЧИСЛО(23,10))          КАК ПостояннаяРазница,
	|	ВЫРАЗИТЬ(УзлыКорректировки.ВременнаяРазница КАК ЧИСЛО(23,10))           КАК ВременнаяРазница,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьРеглБезНДС КАК ЧИСЛО(23,10))       КАК СтоимостьРеглБезНДС,
	|	ВЫРАЗИТЬ(УзлыКорректировки.НДСРегл КАК ЧИСЛО(23,10))                   КАК НДСРегл,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьДопРасходы КАК ЧИСЛО(23,10))        КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьДопРасходыБезНДС КАК ЧИСЛО(23,10))  КАК СтоимостьДопРасходыБезНДС
	|
	|ПОМЕСТИТЬ ВтТаблицаРешений
	|ИЗ
	|	ВтУзлыКорректировки КАК УзлыКорректировки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	//Подготовим таблицу списаний за период (коэффициенты уравнения)
	|ВЫБРАТЬ
	|	УчетСебестоимости.НомерУзлаИсточник КАК НомерУзлаИсточник,
	|	УчетСебестоимости.НомерУзлаПриемник КАК НомерУзлаПриемник,
	|	ЛОЖЬ 								КАК ПередачаВЭксплуатацию,
	|	СУММА(УчетСебестоимости.Количество) КАК Количество
	|
	|ПОМЕСТИТЬ ВтПеремещенияСписания
	|ИЗ (
	|	ВЫБРАТЬ
	|		УзлыКорректировкиИсточник.НомерУзла  КАК НомерУзлаИсточник,
	|
	|		ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет) ТОГДА
	|			УзлыКорректировкиПриемникРеглУчет.НомерУзла
	|		КОГДА УчетСебестоимости.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
	|			УзлыКорректировкиПриемникПередачи.НомерУзла
	|		ИНАЧЕ
	|			УзлыКорректировкиПриемник.НомерУзла
	|		КОНЕЦ КАК НомерУзлаПриемник,
	|
	|		ВЫБОР КОГДА УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет) ТОГДА
	|			УзлыКорректировкиПриемникРеглУчет.Количество
	|		КОГДА УчетСебестоимости.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
	|			УзлыКорректировкиПриемникПередачи.Количество
	|		ИНАЧЕ
	|			УзлыКорректировкиПриемник.Количество
	|		КОНЕЦ КАК ВсегоКоличество,
	|
	|		УчетСебестоимости.Количество КАК Количество
	|	ИЗ
	|		ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|		ПО
	|			УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиИсточник.АналитикаУчетаНоменклатуры
	|			И УчетСебестоимости.РазделУчета              = УзлыКорректировкиИсточник.РазделУчета
	|			И УчетСебестоимости.ВидЗапасов               = УзлыКорректировкиИсточник.ВидЗапасов
	|			И УчетСебестоимости.Организация              = УзлыКорректировкиИсточник.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтУзлыКорректировки КАК УзлыКорректировкиПриемник
	|		ПО
	|			УчетСебестоимости.КорАналитикаУчетаНоменклатуры = УзлыКорректировкиПриемник.АналитикаУчетаНоменклатуры
	|			И УчетСебестоимости.КорРазделУчета = УзлыКорректировкиПриемник.РазделУчета
	|			И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемник.ВидЗапасов
	|			И УчетСебестоимости.Организация = УзлыКорректировкиПриемник.Организация
	|			И УчетСебестоимости.КорОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтУзлыКорректировки КАК УзлыКорректировкиПриемникПередачи
	|		ПО
	|			УчетСебестоимости.КорАналитикаУчетаНоменклатуры = УзлыКорректировкиПриемникПередачи.АналитикаУчетаНоменклатуры
	|			И УчетСебестоимости.КорРазделУчета = УзлыКорректировкиПриемникПередачи.РазделУчета
	|			И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемникПередачи.ВидЗапасов
	|			И УчетСебестоимости.КорОрганизация = УзлыКорректировкиПриемникПередачи.Организация
	|			И УчетСебестоимости.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И УчетСебестоимости.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтУзлыКорректировки КАК УзлыКорректировкиПриемникРеглУчет
	|		ПО
	|			УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиПриемникРеглУчет.АналитикаУчетаНоменклатуры
	|			И УчетСебестоимости.РазделУчета = УзлыКорректировкиПриемникРеглУчет.РазделУчета
	|			И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемникРеглУчет.ВидЗапасов
	|			И ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) = УзлыКорректировкиПриемникРеглУчет.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьВозвратныеОтходы КАК ЕстьВозвратныеОтходы
	|			ПО ЕстьВозвратныеОтходы.Организация = УчетСебестоимости.Организация
	|			И ЕстьВозвратныеОтходы.АналитикаУчетаНоменклатуры = УчетСебестоимости.АналитикаУчетаНоменклатуры
	|			И ЕстьВозвратныеОтходы.ВидЗапасов = УчетСебестоимости.ВидЗапасов
	|			И ЕстьВозвратныеОтходы.РазделУчета = УчетСебестоимости.РазделУчета
	|	ГДЕ
	|		НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|		И НЕ (УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			И УчетСебестоимости.Количество < 0
	|			И НЕ ЕстьВозвратныеОтходы.Организация ЕСТЬ NULL)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		УзлыКорректировкиИсточник.НомерУзла  КАК НомерУзлаИсточник,
	|		УзлыКорректировкиПриемникРеглУчет.НомерУзла КАК НомерУзлаПриемник,
	|		УзлыКорректировкиПриемникРеглУчет.Количество КАК ВсегоКоличество,
	|		УзлыКорректировкиПриемникРеглУчет.Количество КАК Количество
	|	ИЗ
	|		ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|		ПО
	|			УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиИсточник.АналитикаУчетаНоменклатуры
	|			И УчетСебестоимости.РазделУчета              = УзлыКорректировкиИсточник.РазделУчета
	|			И УчетСебестоимости.ВидЗапасов               = УзлыКорректировкиИсточник.ВидЗапасов
	|			И УчетСебестоимости.Организация              = УзлыКорректировкиИсточник.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВтУзлыКорректировки КАК УзлыКорректировкиПриемникРеглУчет
	|		ПО
	|			УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиПриемникРеглУчет.АналитикаУчетаНоменклатуры
	|			И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемникРеглУчет.ВидЗапасов
	|			И ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) = УзлыКорректировкиПриемникРеглУчет.Организация
	|	ГДЕ
	|		НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|		И УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|		И УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		И УзлыКорректировкиПриемникРеглУчет.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		УзлыКорректировкиИсточник.НомерУзла  КАК НомерУзлаИсточник,
	|		УзлыКорректировкиПриемник.НомерУзла  КАК НомерУзлаПриемник,
	|		УзлыКорректировкиПриемник.Количество КАК ВсегоКоличество,
	|		УчетСебестоимости.Количество КАК Количество
	|	ИЗ
	|		ВтПередачиТоваров КАК УчетСебестоимости
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|		ПО
	|			УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиИсточник.АналитикаУчетаНоменклатуры
	|			И УчетСебестоимости.РазделУчета = УзлыКорректировкиИсточник.РазделУчета
	|			И УчетСебестоимости.ВидЗапасов = УзлыКорректировкиИсточник.ВидЗапасов
	|			И УчетСебестоимости.Организация = УзлыКорректировкиИсточник.Организация
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВтУзлыКорректировки КАК УзлыКорректировкиПриемник
	|		ПО
	|			УчетСебестоимости.КорАналитикаУчетаНоменклатуры = УзлыКорректировкиПриемник.АналитикаУчетаНоменклатуры
	|			И УчетСебестоимости.КорРазделУчета = УзлыКорректировкиПриемник.РазделУчета
	|			И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемник.ВидЗапасов
	|			И УчетСебестоимости.КорОрганизация = УзлыКорректировкиПриемник.Организация
	|	ГДЕ
	|		УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|
	|	) КАК УчетСебестоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.НомерУзлаИсточник,
	|	УчетСебестоимости.НомерУзлаПриемник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзлаПриемник
	|";

	Возврат ТекстЗапроса;

КонецФункции

// Служебная, этап 3.11
Функция ТекстЗапросаДвиженияСтоимостиРегл()

	ТекстЗапроса = 
	"
	// В качестве вектора решений на первой итерации берутся свободные коэффициенты.
	|ВЫБРАТЬ
	|	УзлыКорректировки.НомерУзла                                            КАК НомерУзла,
	|	УзлыКорректировки.ВременнаяРазницаЗнак                                 КАК ВременнаяРазницаЗнак,
	|	УзлыКорректировки.ПостояннаяРазницаЗнак                                КАК ПостояннаяРазницаЗнак,
	|	ВЫРАЗИТЬ(УзлыКорректировки.Стоимость КАК ЧИСЛО(23,10))                 КАК Стоимость,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьБезНДС КАК ЧИСЛО(23,10))           КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(УзлыКорректировки.ПостояннаяРазница КАК ЧИСЛО(23,10))         КАК ПостояннаяРазница,
	|	ВЫРАЗИТЬ(УзлыКорректировки.ВременнаяРазница КАК ЧИСЛО(23,10))          КАК ВременнаяРазница,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьРеглБезНДС КАК ЧИСЛО(23,10))       КАК СтоимостьРеглБезНДС,
	|	ВЫРАЗИТЬ(УзлыКорректировки.НДСРегл КАК ЧИСЛО(23,10))                   КАК НДСРегл,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьДопРасходы КАК ЧИСЛО(23,10))       КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьДопРасходыБезНДС КАК ЧИСЛО(23,10)) КАК СтоимостьДопРасходыБезНДС
	|
	|ПОМЕСТИТЬ ВтТаблицаРешений
	|ИЗ
	|	ВтУзлыКорректировки КАК УзлыКорректировки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	//Подготовим таблицу списаний за период (коэффициенты уравнения)
	|ВЫБРАТЬ
	|	УчетСебестоимости.НомерУзлаИсточник 			  КАК НомерУзлаИсточник,
	|	УчетСебестоимости.НомерУзлаПриемник 			  КАК НомерУзлаПриемник,
	|	УчетСебестоимости.ПередачаВЭксплуатацию           КАК ПередачаВЭксплуатацию,
	|	СУММА(УчетСебестоимости.Количество) 			  КАК Количество
	|
	|ПОМЕСТИТЬ ВтПеремещенияСписания
	|ИЗ (
	|ВЫБРАТЬ
	|	УзлыКорректировкиИсточник.НомерУзла   КАК НомерУзлаИсточник,
	|	УзлыКорректировкиПриемник.НомерУзла   КАК НомерУзлаПриемник,
	|	УзлыКорректировкиПриемник.Количество  КАК ВсегоКоличество,
	|	УчетСебестоимости.Количество          КАК Количество,
	|	ЛОЖЬ 								  КАК ПередачаВЭксплуатацию
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|	ПО УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиИсточник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.РазделУчета  = УзлыКорректировкиИсточник.РазделУчета
	|		И УчетСебестоимости.ВидЗапасов  = УзлыКорректировкиИсточник.ВидЗапасов
	|		И УчетСебестоимости.Организация  = УзлыКорректировкиИсточник.Организация
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиПриемник
	|	ПО УчетСебестоимости.КорАналитикаУчетаНоменклатуры = УзлыКорректировкиПриемник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.КорРазделУчета = УзлыКорректировкиПриемник.РазделУчета
	|		И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемник.ВидЗапасов
	|		И УчетСебестоимости.Организация = УзлыКорректировкиПриемник.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЕстьВозвратныеОтходы КАК ЕстьВозвратныеОтходы
	|		ПО ЕстьВозвратныеОтходы.Организация = УчетСебестоимости.Организация
	|		И ЕстьВозвратныеОтходы.АналитикаУчетаНоменклатуры = УчетСебестоимости.АналитикаУчетаНоменклатуры
	|		И ЕстьВозвратныеОтходы.ВидЗапасов = УчетСебестоимости.ВидЗапасов
	|		И ЕстьВозвратныеОтходы.РазделУчета = УчетСебестоимости.РазделУчета
	|
	|
	|ГДЕ
	|	НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|	И УчетСебестоимости.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И УчетСебестоимости.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И УчетСебестоимости.КорОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НЕ (УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		И УчетСебестоимости.Количество < 0
	|		И НЕ ЕстьВозвратныеОтходы.Организация ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УзлыКорректировкиИсточник.НомерУзла   КАК НомерУзлаИсточник,
	|	УзлыКорректировкиПриемник.НомерУзла   КАК НомерУзлаПриемник,
	|	УзлыКорректировкиПриемник.Количество  КАК ВсегоКоличество,
	|	УчетСебестоимости.Количество          КАК Количество,
	|	ЛОЖЬ 								  КАК ПередачаВЭксплуатацию
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|	ПО УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиИсточник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.РазделУчета  = УзлыКорректировкиИсточник.РазделУчета
	|		И УчетСебестоимости.ВидЗапасов  = УзлыКорректировкиИсточник.ВидЗапасов
	|		И УчетСебестоимости.Организация  = УзлыКорректировкиИсточник.Организация
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиПриемник
	|	ПО УчетСебестоимости.КорАналитикаУчетаНоменклатуры = УзлыКорректировкиПриемник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.КорРазделУчета = УзлыКорректировкиПриемник.РазделУчета
	|		И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемник.ВидЗапасов
	|		И УчетСебестоимости.КорОрганизация = УзлыКорректировкиПриемник.Организация
	|
	|ГДЕ
	|	НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|	И УчетСебестоимости.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И УчетСебестоимости.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И УчетСебестоимости.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|	И УчетСебестоимости.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УзлыКорректировкиИсточник.НомерУзла   КАК НомерУзлаИсточник,
	|	УзлыКорректировкиПриемник.НомерУзла   КАК НомерУзлаПриемник,
	|	УзлыКорректировкиПриемник.Количество  КАК ВсегоКоличество,
	|	УчетСебестоимости.Количество          КАК Количество,
	|	ЛОЖЬ 								  КАК ПередачаВЭксплуатацию
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|	ПО УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиИсточник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.РазделУчета  = УзлыКорректировкиИсточник.РазделУчета
	|		И УчетСебестоимости.ВидЗапасов  = УзлыКорректировкиИсточник.ВидЗапасов
	|		И УчетСебестоимости.Организация  = УзлыКорректировкиИсточник.Организация
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиПриемник
	|	ПО УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиПриемник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.РазделУчета = УзлыКорректировкиПриемник.РазделУчета
	|		И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемник.ВидЗапасов
	|		И ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) = УзлыКорректировкиПриемник.Организация
	|ГДЕ
	|	НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|	И УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И УчетСебестоимости.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|	И УзлыКорректировкиПриемник.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УзлыКорректировкиИсточник.НомерУзла   КАК НомерУзлаИсточник,
	|	УзлыКорректировкиПриемник.НомерУзла   КАК НомерУзлаПриемник,
	|	УзлыКорректировкиПриемник.Количество  КАК ВсегоКоличество,
	|	УчетСебестоимости.Количество          КАК Количество,
	|	ЛОЖЬ 								  КАК ПередачаВЭксплуатацию
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|	ПО УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиИсточник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.РазделУчета  = УзлыКорректировкиИсточник.РазделУчета
	|		И УчетСебестоимости.ВидЗапасов  = УзлыКорректировкиИсточник.ВидЗапасов
	|		И УчетСебестоимости.Организация  = УзлыКорректировкиИсточник.Организация
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиПриемник
	|	ПО УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиПриемник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.КорВидЗапасов = УзлыКорректировкиПриемник.ВидЗапасов
	|		И ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) = УзлыКорректировкиПриемник.Организация
	|ГДЕ
	|	НЕ УчетСебестоимости.СлужебноеВидДвиженияПриход
	|	И УчетСебестоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|
	|	) КАК УчетСебестоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.НомерУзлаИсточник,
	|	УчетСебестоимости.НомерУзлаПриемник,
	|	УчетСебестоимости.ПередачаВЭксплуатацию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзлаПриемник
	|";

	Возврат ТекстЗапроса;

КонецФункции


// Служебная, этап 4.6, также используется в механизме закрытия месяца
Функция ТекстЗапросаПроверкаКорректностиОстатковВРегистреСебестоимостьТоваровПослеРасчета()
	
	// Требования к тексту этого запроса см. в СостояниеРасчетаСебестоимости()
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.РазделУчета КАК РазделУчета,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.Организация КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.КоличествоОстаток КАК Количество,
	|	Т.СтоимостьОстаток КАК Стоимость,
	|	Т.СтоимостьБезНДСОстаток КАК СтоимостьБезНДС,
	|	Т.СуммаДопРасходовОстаток КАК СуммаДопРасходов,
	|	Т.СуммаДопРасходовБезНДСОстаток КАК СуммаДопРасходовБезНДС,
	|	Т.СтоимостьРеглБезНДСОстаток КАК СтоимостьРеглБезНДС,
	|	Т.НДСРеглОстаток КАК НДСРегл,
	|	Т.СтоимостьРеглОстаток КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК Т
	|ГДЕ
	|	Т.КоличествоОстаток = 0
	|	И НЕ (Т.СтоимостьОстаток = 0
	|		И Т.СтоимостьБезНДСОстаток = 0
	|		И Т.СуммаДопРасходовОстаток = 0
	|		И Т.СуммаДопРасходовБезНДСОстаток = 0
	|		И Т.СтоимостьРеглОстаток = 0)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета 							КАК РазделУчета,
	|	Т.ВидЗапасов 							КАК ВидЗапасов,
	|	Т.Организация 						 	КАК Организация,
	|	АналитикаНоменклатуры.Номенклатура   	КАК Номенклатура,
	|	АналитикаНоменклатуры.Номенклатура.Код 	КАК КодНоменклатуры,
	|	АналитикаНоменклатуры.Характеристика 	КАК Характеристика,
	|	АналитикаНоменклатуры.Серия 			КАК Серия,
	|	АналитикаНоменклатуры.Склад 			КАК Склад,
	|	Т.Количество 							КАК Количество,
	|	Т.Стоимость 							КАК Стоимость,
	|	Т.СтоимостьБезНДС 						КАК СтоимостьБезНДС,
	|	Т.СуммаДопРасходов 						КАК СуммаДопРасходов,
	|	Т.СуммаДопРасходовБезНДС 				КАК СуммаДопРасходовБезНДС,
	|	Т.СтоимостьРеглБезНДС 					КАК СтоимостьРеглБезНДС,
	|	Т.НДСРегл 						        КАК НДСРегл,
	|	Т.СтоимостьРегл 						КАК СтоимостьРегл
	|ИЗ
	|	ВТОстатки КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыФормированияДвиженийПоРегистрам

#Область ДвиженияНоменклатура

// Служебная, этап 2.1, 3.3, 3.14
Процедура СформироватьДвиженияПоОборотнымРегистрамУпрУчета(ПараметрыРасчета, ДанныеДвижения)
	
	// Формирование движений Номенклатура - Доходы\Расходы
	Если ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваров
		Или ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию
		Или ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели
		Или ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию
		Или ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании Тогда
		
		СформироватьДвиженияНоменклатураДоходыРасходы(ПараметрыРасчета, ДанныеДвижения,
				ДанныеДвижения.Стоимость + ДанныеДвижения.СуммаДопРасходов,
				ДанныеДвижения.СтоимостьБезНДС + ДанныеДвижения.СуммаДопРасходовБезНДС,
				ДанныеДвижения.СтоимостьРегл);

	КонецЕсли;
	
	Если ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы Тогда
		
		Знак = ?(ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка, 1, -1);

		СформироватьДвиженияНоменклатураДоходыРасходы(ПараметрыРасчета, ДанныеДвижения,
				Знак * (ДанныеДвижения.Стоимость + ДанныеДвижения.СуммаДопРасходов),
				Знак * (ДанныеДвижения.СтоимостьБезНДС + ДанныеДвижения.СуммаДопРасходовБезНДС),
				Знак * ДанныеДвижения.СтоимостьРегл);
		
	КонецЕсли;
	
	// Формирование движений Номенклатура - Номенклатура
	Если (ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров
			И ДанныеДвижения.ВидДвижения = ВидДвиженияНакопления.Расход)
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОбособленногоУчета
		ИЛИ (ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров
			И ДанныеДвижения.ВидДвижения = ВидДвиженияНакопления.Расход)
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаНалоговыхНазначений
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПереработчику
		ИЛИ (ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваров
			И ДанныеДвижения.ВидДвижения = ВидДвиженияНакопления.Расход)
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваров
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда

		СформироватьДвиженияНоменклатураНоменклатура(ПараметрыРасчета, ДанныеДвижения,
				ДанныеДвижения.Стоимость + ДанныеДвижения.СуммаДопРасходов,
				ДанныеДвижения.СтоимостьБезНДС + ДанныеДвижения.СуммаДопРасходовБезНДС,
				ДанныеДвижения.СтоимостьРегл,
				?(ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности,
					Перечисления.ХозяйственныеОперации.ОтгрузкаБезПереходаПраваСобственности,
					Неопределено));
				
		Если ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров Тогда
			СформироватьДвиженияНоменклатураНоменклатура(ПараметрыРасчета, ДанныеДвижения,
					ДанныеДвижения.Стоимость + ДанныеДвижения.СуммаДопРасходов,
					ДанныеДвижения.СтоимостьБезНДС + ДанныеДвижения.СуммаДопРасходовБезНДС,
					ДанныеДвижения.СтоимостьРегл,
					Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров);
		КонецЕсли;

	КонецЕсли;
	
	// Формирование прочих доходов\расходов при пересортице
	Если ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой Тогда

		СуммаПереоценки = ДанныеДвижения.Стоимость + ДанныеДвижения.СуммаДопРасходов - ДанныеДвижения.КорСтоимость;
		
		Если СуммаПереоценки > 0 Тогда 

			СформироватьДвиженияНоменклатураДоходыРасходы(ПараметрыРасчета, ДанныеДвижения,
					СуммаПереоценки,
					0,
					ДанныеДвижения.СтоимостьРегл,
					Ложь,
					Перечисления.ХозяйственныеОперации.РасходыОтПереоценкиТоваров);

		ИначеЕсли СуммаПереоценки < 0 Тогда
					
			СформироватьДвиженияНоменклатураДоходыРасходы(ПараметрыРасчета, ДанныеДвижения,
					-СуммаПереоценки,
					0,
					-ДанныеДвижения.СтоимостьРегл,
					Истина,
					Перечисления.ХозяйственныеОперации.ДоходыОтПереоценкиТоваров);

		КонецЕсли;

	КонецЕсли;
	
	// Формирование прочих расходов при порче
	Если ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой Тогда

		СуммаПереоценки = ДанныеДвижения.Стоимость + ДанныеДвижения.СуммаДопРасходов - ДанныеДвижения.КорСтоимость;
		
		Если СуммаПереоценки <> 0 Тогда
			
			СформироватьДвиженияНоменклатураДоходыРасходы(ПараметрыРасчета, ДанныеДвижения,
					СуммаПереоценки,
					ДанныеДвижения.СтоимостьБезНДС + ДанныеДвижения.СуммаДопРасходовБезНДС,
					ДанныеДвижения.СтоимостьРегл,
					Ложь,
					Перечисления.ХозяйственныеОперации.РасходыОтПереоценкиТоваров);
			
		КонецЕсли;

	КонецЕсли;
	
	// Формирование прочих доходов/расходов возникших от переоценки товаров.
	Если (ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику
			И ДанныеДвижения.КорСтоимость <> 0)
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПереданнойВозвратнойТары
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями
		ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПереданнойТары Тогда
		
		Если ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями Тогда
			СуммаПереоценки = 0;
		Иначе
			СуммаПереоценки = ДанныеДвижения.Стоимость + ДанныеДвижения.СуммаДопРасходов;
		КонецЕсли;
		
		Если СуммаПереоценки > 0 ИЛИ ДанныеДвижения.СтоимостьРегл > 0 Тогда 

			СформироватьДвиженияНоменклатураДоходыРасходы(ПараметрыРасчета, ДанныеДвижения,
					СуммаПереоценки,
					0,
					ДанныеДвижения.СтоимостьРегл,
					Ложь,
					Перечисления.ХозяйственныеОперации.РасходыОтПереоценкиТоваров);

		ИначеЕсли СуммаПереоценки < 0 Тогда
					
			СформироватьДвиженияНоменклатураДоходыРасходы(ПараметрыРасчета, ДанныеДвижения,
					-СуммаПереоценки,
					0,
					-ДанныеДвижения.СтоимостьРегл,
					Истина,
					Перечисления.ХозяйственныеОперации.ДоходыОтПереоценкиТоваров);

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Служебная, этап 2.1, 3.3, 3.14 (СформироватьДвиженияПоОборотнымРегистрамУпрУчета)
Процедура СформироватьДвиженияНоменклатураДоходыРасходы(ПараметрыРасчета, ДанныеДвижения,
			Стоимость, СтоимостьБезНДС, СтоимостьРегл, ЭтоДоход = Ложь,	ХозяйственнаяОперация = Неопределено)

	ИмяРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.Имя;
	
	КопируемыеПоля = "
	|Период, ХозяйственнаяОперация, Организация, Подразделение,
	|АналитикаУчетаНоменклатуры,Склад,ТипЗапасов,ВидЗапасов,
	|ИсточникГФУНоменклатуры, ДокументДвижения";

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.Стоимость	   = Стоимость;
	Запись.СтоимостьБезНДС = СтоимостьБезНДС;
	Запись.СтоимостьРегл   = СтоимостьРегл;
	
	Если ХозяйственнаяОперация <> Неопределено Тогда
		Запись.ХозяйственнаяОперация = ХозяйственнаяОперация;
	КонецЕсли;
	
	Если ЭтоДоход Тогда
		Запись.СтатьяДоходовРасходов = ДанныеДвижения.СтатьяДоходов;
		Запись.АналитикаДоходов 	 = ДанныеДвижения.АналитикаДоходов;
	Иначе
		Запись.СтатьяДоходовРасходов = ДанныеДвижения.СтатьяРасходовСписания;
		Запись.АналитикаРасходов 	 = ДанныеДвижения.АналитикаРасходов;
	КонецЕсли;
	
КонецПроцедуры

// Служебная, этап 2.1, 3.3, 3.14 (СформироватьДвиженияПоОборотнымРегистрамУпрУчета)
Процедура СформироватьДвиженияНоменклатураНоменклатура(ПараметрыРасчета, ДанныеДвижения,
			Стоимость, СтоимостьБезНДС, СтоимостьРегл, ХозяйственнаяОперация)
	
	Если НЕ ЗначениеЗаполнено(ДанныеДвижения.КорАналитикаУчетаНоменклатуры)
	 И (ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров
	 	ИЛИ ДанныеДвижения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.Имя;
	
	КопируемыеПоля = "
	|Период, ХозяйственнаяОперация, Организация, Подразделение,
	|АналитикаУчетаНоменклатуры,Склад,ТипЗапасов,ВидЗапасов,
	|КорАналитикаУчетаНоменклатуры,КорСклад,КорТипЗапасов,КорВидЗапасов,
	|ИсточникГФУНоменклатуры, КорИсточникГФУНоменклатуры, ДокументДвижения, КорОрганизация";

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Если ХозяйственнаяОперация <> Неопределено Тогда
		Запись.ХозяйственнаяОперация = ХозяйственнаяОперация;
		Если Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров Тогда
			Запись.Организация    = ДанныеДвижения.КорОрганизация;
			Запись.КорОрганизация = ДанныеДвижения.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Запись.Стоимость		= Стоимость;
	Запись.СтоимостьБезНДС	= СтоимостьБезНДС;
	Запись.СтоимостьРегл	= СтоимостьРегл;
	
	Если ТипЗнч(ДанныеДвижения.Склад) = Тип("СправочникСсылка.Партнеры") Тогда
		Запись.Количество = ДанныеДвижения.Количество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДвиженияСебестоимостьТоваров

// Служебная, этап 2.1, 3.3, 3.14
Процедура СформироватьДвиженияСебестоимостьТоваров(ПараметрыРасчета, ДанныеДвижения, ВидДвижения)

	ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	
	// Кор. стоимость не включается в список полей.
	КопируемыеПоля = "
	|Период, АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов, Организация,
	|ХозяйственнаяОперация,
	|КорАналитикаУчетаНоменклатуры, КорРазделУчета, КорВидЗапасов,КорОрганизация,
	|АналитикаУчетаПоПартнерам,
	|Подразделение, АналитикаРасходов, СтатьяРасходовСписания, СтатьяДоходов, АналитикаДоходов,
	|СтатьяАктивовПассивов, АналитикаАктивовПассивов,
	|НалоговоеНазначение, КорНалоговоеНазначение,
	|ИдентификаторСтроки, ДокументДвижения, ПериодПродажи, ГруппаПродукции,
	|Стоимость, СтоимостьБезНДС,
	|СуммаДопРасходов, СуммаДопРасходовБезНДС,
	|ПостояннаяРазница, ВременнаяРазница,
	|СтоимостьРеглБезНДС, НДСРегл, 
	|СтоимостьРегл";

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.ВидДвижения = ВидДвижения;
	Запись.Количество  = 0;
	
КонецПроцедуры

// Служебная, этап 2.1, 3.14
Процедура СформироватьДвиженияСебестоимостьТоваровСторноВУпрУчете(ПараметрыРасчета, ДанныеДвижения)

	ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	
	КопируемыеПоля = "
	|Период, АналитикаУчетаНоменклатуры, Организация,
	|ХозяйственнаяОперация, ДокументДвижения,
	|Подразделение, АналитикаРасходов, СтатьяРасходовСписания,
	|Стоимость, СтоимостьБезНДС, СуммаДопРасходов, СуммаДопРасходовБезНДС,
	|ПостояннаяРазница, ВременнаяРазница";

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.ВидДвижения   = ВидДвиженияНакопления.Приход;
	Запись.Организация   = Справочники.Организации.УправленческаяОрганизация;
	Запись.ВидЗапасов    = ДанныеДвижения.КорВидЗапасов;
	Запись.СтоимостьРегл = ДанныеДвижения.СтоимостьРегл + ДанныеДвижения.НДСРеглКорректировкаСтоимости;
	Запись.СтоимостьРеглБезНДС = ДанныеДвижения.СтоимостьРеглБезНДС;
	Запись.НДСРегл = ДанныеДвижения.НДСРегл;
	Запись.Количество    = 0;
	
	Если ДанныеДвижения.РазделУчета = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию Тогда
		Запись.РазделУчета = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах;
	Иначе
		Запись.РазделУчета = ДанныеДвижения.РазделУчета;
	КонецЕсли;
	
КонецПроцедуры

// Служебная, этап 2.1, 3.1, 3.14
Процедура СформироватьКорДвиженияСебестоимостьТоваров(ПараметрыРасчета, ДанныеДвижения)
	
	ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	
	КопируемыеПоля = "
	|Период, ХозяйственнаяОперация, ДокументДвижения, ИдентификаторСтроки,
	|Подразделение, ГруппаПродукции,
	|Стоимость, СтоимостьБезНДС, СуммаДопРасходов, СуммаДопРасходовБезНДС";

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.ВидДвижения                = ВидДвиженияНакопления.Приход;
	Запись.АналитикаУчетаНоменклатуры = ДанныеДвижения.КорАналитикаУчетаНоменклатуры;
	Запись.РазделУчета                = ДанныеДвижения.КорРазделУчета;
	Запись.ВидЗапасов                 = ДанныеДвижения.КорВидЗапасов;
	Запись.Организация                = ?(ЗначениеЗаполнено(ДанныеДвижения.КорОрганизация), ДанныеДвижения.КорОрганизация, ДанныеДвижения.Организация);
	Запись.НалоговоеНазначение        = ДанныеДвижения.КорНалоговоеНазначение;
	Запись.КорНалоговоеНазначение     = ДанныеДвижения.НалоговоеНазначение;
	Запись.Количество 				  = 0;

	Если Не ДанныеДвижения.ЭтоПередачаМеждуОрганизациями Тогда
		Запись.СтоимостьРегл = ДанныеДвижения.СтоимостьРегл;
		Запись.СтоимостьРеглБезНДС = ДанныеДвижения.СтоимостьРеглБезНДС;
		Запись.НДСРегл = ДанныеДвижения.НДСРегл;
		Запись.ПостояннаяРазница = ДанныеДвижения.ПостояннаяРазница;
		Запись.ВременнаяРазница = ДанныеДвижения.ВременнаяРазница;
	Иначе
		Запись.СтоимостьРегл = 0;
		Запись.СтоимостьРеглБезНДС = 0;
		Запись.НДСРегл = 0;
		Запись.ПостояннаяРазница = 0;
		Запись.ВременнаяРазница = 0;
	КонецЕсли;
	
	Если ДанныеДвижения.НДСРеглКорректировкаСтоимости <> 0 И НЕ ДанныеДвижения.ЭтоПередачаМеждуОрганизациями Тогда	
		
		КопируемыеПоля = "
		|Период, ХозяйственнаяОперация, ДокументДвижения, ИдентификаторСтроки,
		|ГруппаПродукции,
		|Подразделение, Организация";
		
		// Добавим движение и заполним его основные свойства
		Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
		
		// Заполним дополнительные свойства движения
		Запись.ВидДвижения 				  = ВидДвиженияНакопления.Приход;
		Запись.АналитикаУчетаНоменклатуры = ДанныеДвижения.КорАналитикаУчетаНоменклатуры;
		Запись.РазделУчета 				  = ДанныеДвижения.КорРазделУчета;
		Запись.ВидЗапасов 				  = ДанныеДвижения.КорВидЗапасов;
		Запись.Организация                = ?(ЗначениеЗаполнено(ДанныеДвижения.КорОрганизация), ДанныеДвижения.КорОрганизация, ДанныеДвижения.Организация);
		Запись.НалоговоеНазначение        = ДанныеДвижения.КорНалоговоеНазначение;
		Запись.КорНалоговоеНазначение     = ДанныеДвижения.НалоговоеНазначение;
		
		Запись.СтоимостьРегл 			  = ДанныеДвижения.НДСРеглКорректировкаСтоимости;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДвиженияПрочиеРасходы

// Служебная, этап 2.1, 3.1, 3.3, 3.14
Процедура СформироватьДвиженияПрочиеРасходы(ПараметрыРасчета, ДанныеДвижения,
			Сумма, СуммаБезНДС, СуммаРегл, СуммаРеглБезНДС, НДСРегл, ПостояннаяРазница, ВременнаяРазница,
			ФормироватьФинансовыйРезультат = Неопределено)

	ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя;
	
	КопируемыеПоля = "
	|Период, Организация, Подразделение, АналитикаРасходов, ХозяйственнаяОперация,
	|АналитикаУчетаНоменклатуры, ГруппаПродукции, ДокументДвижения";

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.ВидДвижения       = ВидДвиженияНакопления.Приход;
	Запись.Сумма             = Сумма;
	Запись.СтатьяРасходов    = ДанныеДвижения.СтатьяРасходовСписания;
	
	Если ФормироватьФинансовыйРезультат = Неопределено Тогда
		ФормироватьФинансовыйРезультат = ПараметрыРасчета.ФО.ФормироватьФинансовыйРезультат;
	КонецЕсли;
	
	Если НЕ ФормироватьФинансовыйРезультат
	 И ДанныеДвижения.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
	 И Сумма <> 0 Тогда
		
		// Добавим движение и заполним его основные свойства
		Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
		
		// Заполним дополнительные свойства движения
		Запись.ВидДвижения       = ВидДвиженияНакопления.Расход;
		Запись.Сумма             = Сумма;
		Запись.СтатьяРасходов    = ДанныеДвижения.СтатьяРасходовСписания;
		
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДвиженияПрочиеДоходы

// Служебная, этап 2.1, 3.3, 3.14
Процедура СформироватьДвиженияПрочиеДоходы(ПараметрыРасчета, ДанныеДвижения, Сумма)
	
	ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя;
	
	КопируемыеПоля = "
	|Период, Организация, Подразделение, СтатьяДоходов, АналитикаДоходов, ХозяйственнаяОперация";

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
	Запись.Сумма	   = Сумма;
	
	Если НЕ ПараметрыРасчета.ФО.ФормироватьФинансовыйРезультат Тогда
		
		// Добавим движение и заполним его основные свойства
		Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
		
		// Заполним дополнительные свойства движения
		Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
		Запись.Сумма	   = Сумма;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДвиженияВыручкаИСебестоимостьПродаж

// Служебная, этап 2.2, 3.17, 3.18
Процедура СформироватьДвиженияВыручкаИСебестоимостьПродаж(ПараметрыРасчета, ДанныеДвижения)

	ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	
	КопируемыеПоля = "
	|Период, Подразделение, АналитикаУчетаНоменклатуры, Менеджер,
	|АналитикаУчетаПоПартнерам, ТипЗапасов, ВидЗапасов, ЗаказКлиента, ХозяйственнаяОперация,
	|Склад, Соглашение, Договор, ВалютаВзаиморасчетов, ВалютаДокумента,
	|ИсточникГФУНоменклатуры, ИсточникГФУРасчетов,
	|НалоговоеНазначение, ДокументДвижения";
	
	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.Себестоимость       = ДанныеДвижения.Стоимость;
	Запись.СебестоимостьБезНДС = ДанныеДвижения.СтоимостьБезНДС;
	Запись.ПостояннаяРазница   = ДанныеДвижения.ПостояннаяРазница;
	Запись.ВременнаяРазница    = ДанныеДвижения.ВременнаяРазница;
	Запись.СебестоимостьРегл   = ДанныеДвижения.СтоимостьРегл;

	Запись.СуммаДополнительныхРасходов       = ДанныеДвижения.СуммаДопРасходов;
	Запись.СуммаДополнительныхРасходовБезНДС = ДанныеДвижения.СуммаДопРасходовБезНДС;
	
	Если ДанныеДвижения.НДСРеглКорректировкаСтоимости <> 0 Тогда	
		
		// Добавим движение и заполним его основные свойства
		Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
		
		// Заполним дополнительные свойства движения
		Запись.СебестоимостьРегл = ДанныеДвижения.НДСРеглКорректировкаСтоимости;
		
	КонецЕсли;
	
КонецПроцедуры

// Служебная, этап 3.3
Процедура СформироватьДвиженияВыручкаИСебестоимостьПродажВозврат(ПараметрыРасчета, ДанныеДвижения)

	ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя;
	
	КопируемыеПоля = "
	|Период, Подразделение, АналитикаУчетаПоПартнерам, ЗаказКлиента, ТипЗапасов, ВидЗапасов,
	|ХозяйственнаяОперация, Менеджер, ДокументДвижения";

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);

	// Заполним дополнительные свойства движения
	Если ЗначениеЗаполнено(ДанныеДвижения.КорАналитикаУчетаНоменклатуры) Тогда
		Запись.АналитикаУчетаНоменклатуры = ДанныеДвижения.КорАналитикаУчетаНоменклатуры;
	Иначе
		Запись.АналитикаУчетаНоменклатуры = ДанныеДвижения.АналитикаУчетаНоменклатуры;
	КонецЕсли;

	Запись.Себестоимость					 = - ДанныеДвижения.Стоимость;
	Запись.СебестоимостьБезНДС				 = - ДанныеДвижения.СтоимостьБезНДС;
	Запись.СуммаДополнительныхРасходов		 = - ДанныеДвижения.СуммаДопРасходов;
	Запись.СуммаДополнительныхРасходовБезНДС = - ДанныеДвижения.СуммаДопРасходовБезНДС;
	Запись.СебестоимостьРегл				 = - ДанныеДвижения.СтоимостьРегл;

КонецПроцедуры

#КонецОбласти

#Область ДвиженияЗакупки

// Служебная, этап 2.2, 3.17
Процедура СформироватьДвиженияЗакупки(ПараметрыРасчета, ДанныеДвижения)
	
	ИмяРегистра = Метаданные.РегистрыНакопления.Закупки.Имя;
	
	КопируемыеПоля = "
	|Период, Подразделение, Менеджер, АналитикаУчетаНоменклатуры,
	|Склад, ТипЗапасов, ВидЗапасов, Партнер, Соглашение, Договор,
	|ВалютаДокумента, ВалютаВзаиморасчетов, ИсточникГФУНоменклатуры, ИсточникГФУРасчетов, ДокументДвижения,
	|Стоимость, СтоимостьБезНДС, СуммаДопРасходов, СуммаДопРасходовБезНДС";
	
	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.Организация 			 = ДанныеДвижения.Контрагент;
	Запись.Контрагент 			 = ДанныеДвижения.Организация;
	Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУДругойОрганизации;
	
КонецПроцедуры

#КонецОбласти


#Область ДвиженияПрочиеАктивыПассивы

// Служебная, этап 2.1
Процедура СформироватьДвиженияПрочиеАктивыПассивы(ПараметрыРасчета, ДанныеДвижения, Сумма)

	ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя;
	
	КопируемыеПоля = "
	|Период, Организация";
	
	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля);
	
	// Заполним дополнительные свойства движения
	Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
	Запись.Сумма 	   = Сумма;
	Запись.Статья 	   = ДанныеДвижения.СтатьяАктивовПассивов;
	Запись.Аналитика   = ДанныеДвижения.АналитикаАктивовПассивов;

КонецПроцедуры

#КонецОбласти

#Область ДвиженияПоЛюбомуРегистру

Процедура СформироватьДвиженияПоРегиструПоДаннымЗапроса(ПараметрыРасчета, ИмяРегистра, Запрос)

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СформироватьДвиженияПоРегистру(ПараметрыРасчета, ИмяРегистра, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегистру(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения)

	// Добавим движение и заполним его основные свойства
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ПроцедурыРаспределенияСтоимости

// Служебная, этап 2.1, 2.2
// Формирует ВтПартии
//
Процедура ПолучитьСебестоимостьПартийТоваров(ПараметрыРасчета, ДляСтоимостиПродаж = Ложь)
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	Запрос.УстановитьПараметр("ДляСтоимостиПродаж", ДляСтоимостиПродаж);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Партии.Организация КАК Организация,
	|	(ВЫБОР
	|		КОГДА Возврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL ИЛИ НЕ Корректировка.Ссылка ЕСТЬ NULL) 
	|			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(Реализация.Дата, ЕСТЬNULL(Розница.Дата, ДАТАВРЕМЯ(1,1,1))), ДЕНЬ)
	|		КОГДА НЕ СторноСписанияНаРасходы.Ссылка ЕСТЬ NULL 
	|			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(СписаниеНаРасходы.Дата, ДАТАВРЕМЯ(1,1,1)), ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК ПериодПродажи,
    |	ВЫБОР КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL)
	|		И Партии.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И (НАЧАЛОПЕРИОДА(Возврат.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|			ИЛИ НАЧАЛОПЕРИОДА(Возврат.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|		    ИЛИ НАЧАЛОПЕРИОДА(ВозвратРозница.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|			ИЛИ НАЧАЛОПЕРИОДА(ВозвратРозница.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|			ИЛИ &ДляСтоимостиПродаж)
	|	ТОГДА
	|		Партии.КорВидЗапасов
	|	ИНАЧЕ
	|		Партии.ВидЗапасов
	|	КОНЕЦ КАК ВидЗапасов,
	|	Партии.Регистратор КАК Регистратор,
    |	ВЫБОР КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL)
	|		И Партии.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И (НАЧАЛОПЕРИОДА(Возврат.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|			ИЛИ НАЧАЛОПЕРИОДА(Возврат.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|		    ИЛИ НАЧАЛОПЕРИОДА(ВозвратРозница.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|			ИЛИ НАЧАЛОПЕРИОДА(ВозвратРозница.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|			ИЛИ Возврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ИЛИ &ДляСтоимостиПродаж)
	|	ТОГДА
	|		Партии.КорАналитикаУчетаНоменклатуры
	|	КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтПереработчика)
	|		ТОГДА Партии.КорАналитикаУчетаНоменклатуры
	|	ИНАЧЕ
	|		Партии.АналитикаУчетаНоменклатуры
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Количество < 0 
	|			ТОГДА 0 - Партии.Количество
	|			ИНАЧЕ Партии.Количество
	|		КОНЕЦ
	|	)										КАК Количество,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Количество < 0 
	|			ТОГДА 0 - Партии.Стоимость
	|			ИНАЧЕ Партии.Стоимость
	|		КОНЕЦ
	|	)										КАК Стоимость,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Количество < 0 
	|			ТОГДА 0 - Партии.СтоимостьБезНДС
	|			ИНАЧЕ Партии.СтоимостьБезНДС
	|		КОНЕЦ
	|	)										КАК СтоимостьБезНДС,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Количество < 0 
	|			ТОГДА 0 - Партии.ПостояннаяРазница
	|			ИНАЧЕ Партии.ПостояннаяРазница
	|		КОНЕЦ
	|	)										КАК ПостояннаяРазница,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Количество < 0 
	|			ТОГДА 0 - Партии.ВременнаяРазница
	|			ИНАЧЕ Партии.ВременнаяРазница
	|		КОНЕЦ
	|	)										КАК ВременнаяРазница,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА Партии.Количество < 0 
	|					ТОГДА 0 - Партии.СтоимостьРегл - Партии.НДСРегл 
	|					ИНАЧЕ Партии.СтоимостьРегл + Партии.НДСРегл 
	|				КОНЕЦ
	|			ИНАЧЕ
	|				ВЫБОР
	|					КОГДА Партии.Количество < 0 
	|					ТОГДА 0 - Партии.СтоимостьРегл 
	|					ИНАЧЕ Партии.СтоимостьРегл
	|				КОНЕЦ
	|		КОНЕЦ
	|	)										КАК СтоимостьРегл,
	|
	|	СУММА(
	|		ВЫБОР КОГДА 
	|			(
	|				(Партии.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|	   				И Партии.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая))
	|				ИЛИ (Партии.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.ПропорциональноОблагаемая) 
	|	   				И Партии.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность))
	|           )
	|			И &ВключатьНДСВСебестоимостьПриУсловнойПродаже
	|		ТОГДА
	|			ВЫБОР КОГДА Партии.Количество < 0 ТОГДА
	|				0 - Партии.НДСРегл
	|			ИНАЧЕ
	|				Партии.НДСРегл
	|			КОНЕЦ
	|
	|		КОГДА Партии.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|		      И Партии.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
    |		      И (&ИсключатьНДСИзСебестоимостиПриВосстановленииНДС)
    // |		      И (&ИсключатьНДСИзСебестоимостиПриВосстановленииНДС ИЛИ Партии.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику)
	|		ТОГДА
	|			ВЫБОР КОГДА Партии.Количество < 0 ТОГДА
	|				Партии.НДСРегл
	|			ИНАЧЕ
	|				- Партии.НДСРегл
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК НДСРегл,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Количество < 0 
	|			ТОГДА 0 - Партии.СтоимостьРегл
	|			ИНАЧЕ Партии.СтоимостьРегл
	|		КОНЕЦ
	|	)										КАК СтоимостьРеглБезНДС,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Количество < 0 
	|			ТОГДА 0 - Партии.НДСРегл
	|			ИНАЧЕ Партии.НДСРегл
	|		КОНЕЦ
	|	)										КАК НДСРеглРесурс,
	|	
	|	Партии.Номенклатура						КАК Номенклатура,
	|	Партии.Характеристика					КАК Характеристика
	|
	|ПОМЕСТИТЬ ТаблицаПартий
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК Возврат
	|		ПО Возврат.Ссылка = Партии.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Корректировка
	|		ПО Корректировка.Ссылка = Партии.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Реализация
	|		ПО Реализация.Ссылка = Партии.ДокументИсточник
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК Розница
	|		ПО Розница.Ссылка = Партии.ДокументИсточник
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ВозвратРозница
	|		ПО ВозвратРозница.Ссылка = Партии.Регистратор И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК СторноСписанияНаРасходы
	|		ПО СторноСписанияНаРасходы.Ссылка = Партии.Регистратор
	|       И  СторноСписанияНаРасходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноСписанияНаРасходы)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК СписаниеНаРасходы
	|		ПО СписаниеНаРасходы.Ссылка = Партии.ДокументИсточник
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Активность
	|	И Партии.Организация В (&МассивОрганизаций)
	|	И (
	|		(Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И НЕ Партии.Регистратор Ссылка Документ.ВозвратТоваровМеждуОрганизациями
	|		ИЛИ Партии.ХозяйственнаяОперация В(
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаНалоговыхНазначений),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПересортицаТоваров),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика)
	|			)
	|		) ИЛИ Партии.Регистратор Ссылка Документ.ВозвратТоваровМеждуОрганизациями
	|		)
	|	И НЕ (Партии.Регистратор Ссылка Документ.ВозвратТоваровОтКлиента И Партии.Первичное)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	(ВЫБОР
	|		КОГДА Возврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL ИЛИ НЕ Корректировка.Ссылка ЕСТЬ NULL)
	|			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(Реализация.Дата, ЕСТЬNULL(Розница.Дата, ДАТАВРЕМЯ(1,1,1))), ДЕНЬ)
	|		КОГДА НЕ СторноСписанияНаРасходы.Ссылка ЕСТЬ NULL 
	|			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(СписаниеНаРасходы.Дата, ДАТАВРЕМЯ(1,1,1)), ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ),
    |	ВЫБОР КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL)
	|		И Партии.КорВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И (НАЧАЛОПЕРИОДА(Возврат.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|			ИЛИ НАЧАЛОПЕРИОДА(Возврат.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|		    ИЛИ НАЧАЛОПЕРИОДА(ВозвратРозница.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|			ИЛИ НАЧАЛОПЕРИОДА(ВозвратРозница.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|			ИЛИ &ДляСтоимостиПродаж)
	|	ТОГДА
	|		Партии.КорВидЗапасов
	|	ИНАЧЕ
	|		Партии.ВидЗапасов
	|	КОНЕЦ,
	|	Партии.Регистратор,
    |	ВЫБОР КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL)
	|		И Партии.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		И (НАЧАЛОПЕРИОДА(Возврат.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|			ИЛИ НАЧАЛОПЕРИОДА(Возврат.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|		    ИЛИ НАЧАЛОПЕРИОДА(ВозвратРозница.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|			ИЛИ НАЧАЛОПЕРИОДА(ВозвратРозница.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|			ИЛИ Возврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ИЛИ &ДляСтоимостиПродаж)
	|	ТОГДА
	|		Партии.КорАналитикаУчетаНоменклатуры 
	|	КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтПереработчика)
	|		ТОГДА Партии.КорАналитикаУчетаНоменклатуры
	|	ИНАЧЕ
	|		Партии.АналитикаУчетаНоменклатуры
	|	КОНЕЦ,
	|	Партии.Номенклатура,
	|	Партии.Характеристика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Организация,
	|	Партии.АналитикаУчетаПродукции,
	|	Партии.ДокументВыпуска,
	|	Партии.Регистратор
	|ПОМЕСТИТЬ ЗатратыНаВыпуск
	|ИЗ
	|	РегистрНакопления.ПартииЗатратНаВыпуск КАК Партии
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода	
	|	И Партии.Активность
	|	И Партии.Организация В (&МассивОрганизаций)
	|ИНДЕКСИРОВАТЬ ПО
	|	Партии.Регистратор,
	|	Партии.Организация,
	|	Партии.АналитикаУчетаПродукции,
	|	Партии.ДокументВыпуска
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Организация КАК Организация,
	|	Партии.ВидЗапасов КАК ВидЗапасов,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Партии.ДокументПоступления КАК ДокументПоступления
	|
	|ПОМЕСТИТЬ СборкиТоваровВидыЗапасов
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЗатратыНаВыпуск КАК ПартииЗатратНаВыпуск
	|	ПО
	|		Партии.Регистратор = ПартииЗатратНаВыпуск.Регистратор
	|		И Партии.Организация = ПартииЗатратНаВыпуск.Организация
	|		И Партии.АналитикаУчетаНоменклатуры = ПартииЗатратНаВыпуск.АналитикаУчетаПродукции
	|		И Партии.ДокументПоступления = ПартииЗатратНаВыпуск.ДокументВыпуска
	|ГДЕ
	|	&УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|	И Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Активность
	|	И Партии.Организация В (&МассивОрганизаций)
	|	И (
	|		Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИЛИ Партии.ХозяйственнаяОперация В(
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаНалоговыхНазначений),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|			)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Организация КАК Организация,
	|	Партии.ВидЗапасов КАК ВидЗапасов,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Партии.ДокументПоступления КАК ДокументПоступления
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеНаКомиссию КАК Партии
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЗатратыНаВыпуск КАК ПартииЗатратНаВыпуск
	|	ПО
	|		Партии.Организация = ПартииЗатратНаВыпуск.Организация
	|		И Партии.Регистратор = ПартииЗатратНаВыпуск.Регистратор
	|		И Партии.АналитикаУчетаНоменклатуры = ПартииЗатратНаВыпуск.АналитикаУчетаПродукции
	|		И Партии.ДокументПоступления = ПартииЗатратНаВыпуск.ДокументВыпуска
	|ГДЕ
	|	&УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|	И Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Активность
	|	И Партии.Организация В (&МассивОрганизаций)
	|	И (
	|		Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИЛИ Партии.ХозяйственнаяОперация В(
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|			)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Организация КАК Организация,
	|	Партии.ВидЗапасов КАК ВидЗапасов,
	|	Партии.Регистратор КАК Регистратор,
	|	Партии.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Партии.ДокументПоступления КАК ДокументПоступления
	|ИЗ
	|	РегистрНакопления.ПартииПроизводственныхЗатрат КАК Партии
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ЗатратыНаВыпуск КАК ПартииЗатратНаВыпуск
	|	ПО
	|		Партии.Организация = ПартииЗатратНаВыпуск.Организация
	|		И Партии.Регистратор = ПартииЗатратНаВыпуск.Регистратор
	|		И Партии.АналитикаУчетаНоменклатуры = ПартииЗатратНаВыпуск.АналитикаУчетаПродукции
	|		И Партии.ДокументПоступления = ПартииЗатратНаВыпуск.ДокументВыпуска
	|ГДЕ
	|	&УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|	И Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Активность
	|	И Партии.Организация В (&МассивОрганизаций)
	|	И (Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Партии.Организация 						КАК Организация,
	|	(ВЫБОР
	|		КОГДА Возврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL ИЛИ НЕ Корректировка.Ссылка ЕСТЬ NULL)
	|			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(Реализация.Дата, ЕСТЬNULL(Розница.Дата, ДАТАВРЕМЯ(1,1,1))), ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК ПериодПродажи,
	|	Партии.Регистратор 						КАК Регистратор,
	|	ВЫБОР
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL) 
	|			И Партии.КорАналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И (НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|				ИЛИ НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|				ИЛИ &ДляСтоимостиПродаж)
	|		ТОГДА Партии.КорАналитикаУчетаПродукции
	|		ИНАЧЕ Партии.АналитикаУчетаПродукции
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL) 
	|			И (НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|				ИЛИ НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|				ИЛИ &ДляСтоимостиПродаж)
	|			ТОГДА Партии.КорВидЗапасов
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		 ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|			И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА Партии.КорВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорВидЗапасов,
	|	0 КАК Количество,
	|	СУММА(
	|		ВЫБОР КОГДА Партии.Знаменатель < 0 ТОГДА
	|			0 - Партии.Стоимость
	|		ИНАЧЕ
	|			Партии.Стоимость
	|		КОНЕЦ) КАК Стоимость,
	|	СУММА(
	|		ВЫБОР КОГДА Партии.Знаменатель < 0 ТОГДА
	|			0 - Партии.СтоимостьБезНДС
	|		ИНАЧЕ
	|			Партии.СтоимостьБезНДС
	|		КОНЕЦ) КАК СтоимостьБезНДС,
	|	СУММА(
	|		ВЫБОР КОГДА Партии.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
    |					ИЛИ (Партии.НалоговоеНазначениеПродукции.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) И Партии.НалоговоеНазначениеПартии.ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.ПропорциональноОблагаемая)) 
	|					ИЛИ Партии.НалоговоеНазначениеПартии.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|		ТОГДА
	|			ВЫБОР КОГДА Партии.Знаменатель < 0 ТОГДА
	|				0 - Партии.СтоимостьРегл - Партии.НДСРегл 
	|			ИНАЧЕ
	|				Партии.СтоимостьРегл + Партии.НДСРегл 
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР КОГДА Партии.Знаменатель < 0 ТОГДА
	|				0 - Партии.СтоимостьРегл 
	|			ИНАЧЕ
	|				Партии.СтоимостьРегл
	|			КОНЕЦ
	|		КОНЕЦ
	|	)										КАК СтоимостьРегл,
	|	СУММА(
	|		ВЫБОР КОГДА 
	|			(
    |				(Партии.НалоговоеНазначениеПродукции.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|	   				И Партии.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая))
    |				ИЛИ (Партии.НалоговоеНазначениеПродукции.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.ПропорциональноОблагаемая) 
	|	   				И Партии.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность))
	|           )
	|		    И &ВключатьНДСВСебестоимостьПриУсловнойПродаже
	|		ТОГДА
	|			ВЫБОР КОГДА Партии.Знаменатель < 0 ТОГДА
	|				0 - Партии.НДСРегл
	|			ИНАЧЕ
	|				Партии.НДСРегл
	|			КОНЕЦ
	|
    |		КОГДА Партии.НалоговоеНазначениеПродукции.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|		    И Партии.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|		    И &ИсключатьНДСИзСебестоимостиПриВосстановленииНДС
	|		ТОГДА
	|			ВЫБОР КОГДА Партии.Знаменатель < 0 ТОГДА
	|				Партии.НДСРегл
	|			ИНАЧЕ
	|				- Партии.НДСРегл
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК НДСРегл,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Знаменатель < 0 
	|			ТОГДА 0 - Партии.СтоимостьРегл
	|			ИНАЧЕ Партии.СтоимостьРегл
	|		КОНЕЦ
	|	) КАК СтоимостьРеглБезНДС,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Знаменатель < 0 
	|			ТОГДА 0 - Партии.НДСРегл
	|			ИНАЧЕ Партии.НДСРегл
	|		КОНЕЦ
	|	) КАК НДСРеглРесурс,
	|
	|	СУММА(
	|		ВЫБОР КОГДА Партии.Знаменатель < 0 ТОГДА
	|			0 - Партии.ПостояннаяРазница
	|		ИНАЧЕ
	|			Партии.ПостояннаяРазница
	|		КОНЕЦ) КАК ПостояннаяРазница,
	|	СУММА(
	|		ВЫБОР КОГДА Партии.Знаменатель < 0 ТОГДА
	|			0 - Партии.ВременнаяРазница
	|		ИНАЧЕ
	|			Партии.ВременнаяРазница
	|		КОНЕЦ) КАК ВременнаяРазница,
    |	ВЫБОР КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL) 
	|		И Партии.КорАналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	ТОГДА
	|		Партии.КорАналитикаУчетаПродукции 
	|	ИНАЧЕ
	|		Партии.АналитикаУчетаПродукции
	|	КОНЕЦ КАК АналитикаУчетаПродукции,
	|	Партии.АналитикаУчетаПродукции КАК ИсходнаяАналитикаУчетаПродукции,
	|	Партии.ДокументВыпуска
	|
	|ПОМЕСТИТЬ СборкиТоваровПартии
	|
	|ИЗ
	|	РегистрНакопления.ПартииЗатратНаВыпуск КАК Партии
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК Возврат
	|		ПО Возврат.Ссылка = Партии.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Корректировка
	|		ПО Корректировка.Ссылка = Партии.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Реализация
	|		ПО Реализация.Ссылка = Партии.ДокументИсточник
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК Розница
	|		ПО Розница.Ссылка = Партии.ДокументИсточник
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ВозвратРозница
	|		ПО ВозвратРозница.Ссылка = Партии.Регистратор И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Активность
	|	И Партии.Организация В (&МассивОрганизаций)
	|	И Не (Партии.Регистратор ССЫЛКА Документ.КорректировкаНазначенияТоваров И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|	И Не (Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|		И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	(ВЫБОР
	|		КОГДА Возврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL ИЛИ НЕ Корректировка.Ссылка ЕСТЬ NULL)
	|			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(Реализация.Дата, ЕСТЬNULL(Розница.Дата, ДАТАВРЕМЯ(1,1,1))), ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ),
	|	Партии.Регистратор,
	|	ВЫБОР
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL) 
	|			И Партии.КорАналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И (НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|				ИЛИ НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|				ИЛИ &ДляСтоимостиПродаж)
	|		ТОГДА Партии.КорАналитикаУчетаПродукции
	|		ИНАЧЕ Партии.АналитикаУчетаПродукции
	|	КОНЕЦ,
	|	ВЫБОР
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL) 
	|			И (НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|				ИЛИ НАЧАЛОПЕРИОДА(Партии.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|				ИЛИ &ДляСтоимостиПродаж)
	|			ТОГДА Партии.КорВидЗапасов
	|		КОГДА Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		 ИЛИ Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|			И Партии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА Партии.КорВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
    |	ВЫБОР КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL) 
	|		И Партии.КорАналитикаУчетаПродукции <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	ТОГДА
	|		Партии.КорАналитикаУчетаПродукции 
	|	ИНАЧЕ
	|		Партии.АналитикаУчетаПродукции
	|	КОНЕЦ,
	|	Партии.АналитикаУчетаПродукции,
	|	Партии.ДокументВыпуска
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Партии.Организация,
	|	(ВЫБОР
	|		КОГДА Партии.КорВидЗапасов <> НЕОПРЕДЕЛЕНО ТОГДА Партии.КорВидЗапасов
	|		ИНАЧЕ ТаблицаПартий.ВидЗапасов КОНЕЦ) КАК ВидЗапасов,
	|	Партии.Регистратор,
	|	Партии.АналитикаУчетаНоменклатуры,
	|	Партии.ПериодПродажи,
	|	Партии.Количество,
	|	Партии.Стоимость,
	|	Партии.СтоимостьБезНДС,
	|	Партии.СтоимостьРегл,
	|	Партии.НДСРегл,
	|	Партии.СтоимостьРеглБезНДС,
	|	Партии.НДСРеглРесурс,
	|	Партии.ПостояннаяРазница,
	|	Партии.ВременнаяРазница,
	|	Партии.АналитикаУчетаПродукции
	|ПОМЕСТИТЬ СборкиТоваров
	|ИЗ
	|	СборкиТоваровПартии КАК Партии
	|	ЛЕВОЕ СОЕДИНЕНИЕ СборкиТоваровВидыЗапасов КАК ТаблицаПартий
	|		ПО ТаблицаПартий.Организация = Партии.Организация
	|		И ТаблицаПартий.АналитикаУчетаНоменклатуры = Партии.ИсходнаяАналитикаУчетаПродукции
	|		И ТаблицаПартий.ДокументПоступления = Партии.ДокументВыпуска
	|		И ТаблицаПартий.Регистратор = Партии.Регистратор
	|		И Партии.КорВидЗапасов = НЕОПРЕДЕЛЕНО
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партии.Регистратор КАК Ссылка,
	|	Партии.Период КАК Дата,
	|	Партии.ДокументПоступления,
	|	Партии.АналитикаУчетаНоменклатуры,
	|	Партии.КорАналитикаУчетаНоменклатуры,
	|	Партии.ВидЗапасов,
	|	Партии.КорВидЗапасов
	|ПОМЕСТИТЬ Возвраты
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК Партии
	|ГДЕ
	|	Партии.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Партии.Активность
	|	И Партии.Организация В (&МассивОрганизаций)
    |	И (Партии.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	  ИЛИ (Партии.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах И Партии.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя))
    |   )
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПартииРасходов.Организация,
	|	(ВЫБОР
	|		КОГДА Возврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL ИЛИ НЕ Корректировка.Ссылка ЕСТЬ NULL)
	|			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(Реализация.Дата, ЕСТЬNULL(Розница.Дата, ДАТАВРЕМЯ(1,1,1))), ДЕНЬ)
	|		КОГДА НЕ Потребление.Ссылка ЕСТЬ NULL
	|			ТОГДА НАЧАЛОПЕРИОДА(Потребление.Дата, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ) КАК ПериодПродажи,
	|	ПартииРасходов.Регистратор,
	|	ВЫБОР
	|		КОГДА Не Партии.Ссылка ЕСТЬ NULL
	|			И ПартииРасходов.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И (НАЧАЛОПЕРИОДА(Партии.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|				ИЛИ НАЧАЛОПЕРИОДА(Партии.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|				ИЛИ &ДляСтоимостиПродаж)
	|		ТОГДА ПартииРасходов.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ПартииРасходов.АналитикаУчетаНоменклатуры
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	
	|	ВЫБОР
	|		КОГДА Не Партии.Ссылка ЕСТЬ NULL
	|			И ПартииРасходов.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И (НАЧАЛОПЕРИОДА(Партии.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|				ИЛИ НАЧАЛОПЕРИОДА(Партии.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|				ИЛИ &ДляСтоимостиПродаж)
	|		ТОГДА Партии.КорВидЗапасов
	|		ИНАЧЕ ПартииРасходов.ВидЗапасов
	|	КОНЕЦ КАК ВидЗапасов,
	|	
	|	(ВЫБОР
	|		КОГДА ПартииРасходов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			ТОГДА ПартииРасходов.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КОНЕЦ) КАК АналитикаУчетаПродукции,
	|	СУММА(
	|		ВЫБОР КОГДА ПартииРасходов.Количество < 0 ТОГДА
	|			0 - ПартииРасходов.Стоимость
	|		ИНАЧЕ
	|			ПартииРасходов.Стоимость
	|		КОНЕЦ
	|	) КАК Стоимость,
	|	СУММА(
	|		ВЫБОР КОГДА ПартииРасходов.Количество < 0 ТОГДА
	|			0 - ПартииРасходов.СтоимостьБезНДС
	|		ИНАЧЕ
	|			ПартииРасходов.СтоимостьБезНДС
	|		КОНЕЦ
	|	) КАК СтоимостьБезНДС,
	|	СУММА(
	|		ВЫБОР КОГДА ПартииРасходов.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|		ТОГДА
	|			ВЫБОР КОГДА ПартииРасходов.Количество < 0 ТОГДА
	|				0 - ПартииРасходов.СтоимостьРегл - ПартииРасходов.НДСРегл 
	|			ИНАЧЕ
	|				ПартииРасходов.СтоимостьРегл + ПартииРасходов.НДСРегл 
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР КОГДА ПартииРасходов.Количество < 0 ТОГДА
	|				0 - ПартииРасходов.СтоимостьРегл 
	|			ИНАЧЕ
	|				ПартииРасходов.СтоимостьРегл
	|			КОНЕЦ
	|		КОНЕЦ
	|		) КАК СтоимостьРегл,
	|	СУММА(
	|		ВЫБОР КОГДА 
	|			(
	|				(ПартииРасходов.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|	   				И ПартииРасходов.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая))
	|				ИЛИ (ПартииРасходов.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.ПропорциональноОблагаемая) 
	|	   				И ПартииРасходов.НалоговоеНазначение = ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность))
	|           )
	|		    И &ВключатьНДСВСебестоимостьПриУсловнойПродаже
	|		ТОГДА
	|			ВЫБОР КОГДА ПартииРасходов.Количество < 0 ТОГДА
	|				0 - ПартииРасходов.НДСРегл
	|			ИНАЧЕ
	|				ПартииРасходов.НДСРегл
	|			КОНЕЦ
	|
	|		КОГДА ПартииРасходов.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|		    И ПартииРасходов.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Облагаемая) 
	|		    И &ИсключатьНДСИзСебестоимостиПриВосстановленииНДС
	|		ТОГДА
	|			ВЫБОР КОГДА ПартииРасходов.Количество < 0 ТОГДА
	|				ПартииРасходов.НДСРегл
	|			ИНАЧЕ
	|				- ПартииРасходов.НДСРегл
	|			КОНЕЦ
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК НДСРегл,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ПартииРасходов.Количество < 0 
	|			ТОГДА 0 - ПартииРасходов.СтоимостьРегл
	|			ИНАЧЕ ПартииРасходов.СтоимостьРегл
	|		КОНЕЦ
	|	) КАК СтоимостьРеглБезНДС,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ПартииРасходов.Количество < 0 
	|			ТОГДА 0 - ПартииРасходов.НДСРегл
	|			ИНАЧЕ ПартииРасходов.НДСРегл
	|		КОНЕЦ
	|	) КАК НДСРеглРесурс,
	|	СУММА(
	|		ВЫБОР КОГДА ПартииРасходов.Количество < 0 ТОГДА
	|			0 - ПартииРасходов.ПостояннаяРазница
	|		ИНАЧЕ
	|			ПартииРасходов.ПостояннаяРазница
	|		КОНЕЦ
	|	) КАК ПостояннаяРазница,
	|	СУММА(
	|		ВЫБОР КОГДА ПартииРасходов.Количество < 0 ТОГДА
	|			0 - ПартииРасходов.ВременнаяРазница
	|		ИНАЧЕ
	|			ПартииРасходов.ВременнаяРазница
	|		КОНЕЦ
	|	) КАК ВременнаяРазница
	|ПОМЕСТИТЬ ПартииРасходов
	|ИЗ
	|	РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК ПартииРасходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Возвраты КАК Партии
	|		ПО Партии.Ссылка = ПартииРасходов.Регистратор
	|		И Партии.ДокументПоступления = ПартииРасходов.ДокументПоступления
	|		И Партии.АналитикаУчетаНоменклатуры = ПартииРасходов.АналитикаУчетаНоменклатуры
	|		И Партии.КорАналитикаУчетаНоменклатуры = ПартииРасходов.КорАналитикаУчетаНоменклатуры
	|		И Партии.ВидЗапасов = ПартииРасходов.ВидЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК Возврат
	|		ПО Возврат.Ссылка = ПартииРасходов.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Корректировка
	|		ПО Корректировка.Ссылка = ПартииРасходов.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Реализация
	|		ПО Реализация.Ссылка = ПартииРасходов.ДокументИсточник
	|		И Реализация.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК Розница
	|		ПО Розница.Ссылка = ПартииРасходов.ДокументИсточник
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ВозвратРозница
	|		ПО ВозвратРозница.Ссылка = ПартииРасходов.Регистратор И ПартииРасходов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК Потребление
	|		ПО Потребление.Ссылка = ПартииРасходов.ДокументИсточник
	|ГДЕ
	|	ПартииРасходов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПартииРасходов.Активность
	|	И ПартииРасходов.Организация В (&МассивОрганизаций)
	|	И Не (ПартииРасходов.Регистратор ССЫЛКА Документ.КорректировкаНазначенияТоваров И ПартииРасходов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|	И Не (ПартииРасходов.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг И ПартииРасходов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|	И Не (ПартииРасходов.Регистратор ССЫЛКА Документ.КорректировкаПоступления И ПартииРасходов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииРасходов.Организация,
	|	(ВЫБОР
	|		КОГДА Возврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ТОГДА ДАТАВРЕМЯ(1,1,1)
    |		КОГДА (НЕ Возврат.Ссылка ЕСТЬ NULL ИЛИ НЕ ВозвратРозница.Ссылка ЕСТЬ NULL ИЛИ НЕ Корректировка.Ссылка ЕСТЬ NULL)
	|			ТОГДА НАЧАЛОПЕРИОДА(ЕСТЬNULL(Реализация.Дата, ЕСТЬNULL(Розница.Дата, ДАТАВРЕМЯ(1,1,1))), ДЕНЬ)
	|		КОГДА НЕ Потребление.Ссылка ЕСТЬ NULL
	|			ТОГДА НАЧАЛОПЕРИОДА(Потребление.Дата, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1,1,1) КОНЕЦ),
	|	ПартииРасходов.Регистратор,
	|	ВЫБОР
	|		КОГДА Не Партии.Ссылка ЕСТЬ NULL
	|			И ПартииРасходов.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И (НАЧАЛОПЕРИОДА(Партии.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|				ИЛИ НАЧАЛОПЕРИОДА(Партии.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|				ИЛИ &ДляСтоимостиПродаж)
	|		ТОГДА ПартииРасходов.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ПартииРасходов.АналитикаУчетаНоменклатуры
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Не Партии.Ссылка ЕСТЬ NULL
	|			И ПартииРасходов.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			И (НАЧАЛОПЕРИОДА(Партии.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Реализация.Дата, МЕСЯЦ)
	|				ИЛИ НАЧАЛОПЕРИОДА(Партии.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Розница.Дата, МЕСЯЦ)
	|				ИЛИ &ДляСтоимостиПродаж)
	|		ТОГДА Партии.КорВидЗапасов
	|		ИНАЧЕ ПартииРасходов.ВидЗапасов
	|	КОНЕЦ,
	|	(ВЫБОР
	|		КОГДА ПартииРасходов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			ТОГДА ПартииРасходов.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КОНЕЦ)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Партии.Организация,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		Партии.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЗапасов,
	|	ВЫБОР КОГДА Партии.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|	ИНАЧЕ
	|		ЕСТЬNULL(Партии.ВидЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар))
	|	КОНЕЦ КАК ТипЗапасов,
	|	Партии.Регистратор,
	|	Партии.АналитикаУчетаНоменклатуры,
	|	Партии.АналитикаУчетаПродукции,
	|	(ВЫБОР
	|		КОГДА &ДляСтоимостиПродаж ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		ИНАЧЕ Партии.ПериодПродажи КОНЕЦ) КАК ПериодПродажи,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА Партии.Количество < 0 ТОГДА 0 - Партии.Количество
	|			ИНАЧЕ Партии.Количество КОНЕЦ) КАК Количество,
	|	СУММА(Партии.Стоимость) КАК Стоимость,
	|	СУММА(Партии.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(Партии.СуммаДопРасходов) КАК СуммаДопРасходов,
	|	СУММА(Партии.СуммаДопРасходовБезНДС) КАК СуммаДопРасходовБезНДС,
	|	СУММА(Партии.СтоимостьРегл) КАК СтоимостьРегл,
	|	СУММА(Партии.НДСРегл) КАК НДСРегл,
	|	СУММА(Партии.СтоимостьРеглБезНДС) КАК СтоимостьРеглБезНДС,
	|	СУММА(Партии.НДСРеглРесурс) КАК НДСРеглРесурс,
	|	СУММА(Партии.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(Партии.ВременнаяРазница) КАК ВременнаяРазница
	|
	|ПОМЕСТИТЬ ВтПартии
	|ИЗ (
	|	ВЫБРАТЬ
	|		Таблица.Организация КАК Организация,
	|		Таблица.ВидЗапасов КАК ВидЗапасов,
	|		Таблица.Регистратор КАК Регистратор,
	|		Таблица.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаПродукции,
	|		Таблица.ПериодПродажи КАК ПериодПродажи,
	|		Таблица.Количество КАК Количество,
	|		Таблица.Стоимость КАК Стоимость,
	|		Таблица.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|		0 КАК СуммаДопРасходов,
	|		0 КАК СуммаДопРасходовБезНДС,
	|		Таблица.СтоимостьРегл КАК СтоимостьРегл,
	|		Таблица.НДСРегл КАК НДСРегл,
	|		Таблица.СтоимостьРеглБезНДС КАК СтоимостьРеглБезНДС,
	|		Таблица.НДСРеглРесурс КАК НДСРеглРесурс,
	|		Таблица.ПостояннаяРазница КАК ПостояннаяРазница,
	|		Таблица.ВременнаяРазница КАК ВременнаяРазница
	|	ИЗ
	|		ТаблицаПартий КАК Таблица
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПартииРасходов.Организация КАК Организация,
	|		ПартииРасходов.ВидЗапасов КАК ВидЗапасов,
	|		ПартииРасходов.Регистратор КАК Регистратор,
	|		ПартииРасходов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ПартииРасходов.АналитикаУчетаПродукции,
	|		ПартииРасходов.ПериодПродажи КАК ПериодПродажи,
	|		0 КАК Количество,
	|		0 КАК Стоимость,
	|		0 КАК СтоимостьБезНДС,
	|		ПартииРасходов.Стоимость КАК СуммаДопРасходов,
	|		ПартииРасходов.СтоимостьБезНДС КАК СуммаДопРасходовБезНДС,
	|		ПартииРасходов.СтоимостьРегл КАК СтоимостьРегл,
	|		ПартииРасходов.НДСРегл КАК НДСРегл,
	|		ПартииРасходов.СтоимостьРеглБезНДС КАК СтоимостьРеглБезНДС,
	|		ПартииРасходов.НДСРеглРесурс КАК НДСРеглРесурс,
	|		ПартииРасходов.ПостояннаяРазница КАК ПостояннаяРазница,
	|		ПартииРасходов.ВременнаяРазница КАК ВременнаяРазница
	|	ИЗ
	|		ПартииРасходов КАК ПартииРасходов
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Таблица.Организация КАК Организация,
	|		Таблица.ВидЗапасов КАК ВидЗапасов,
	|		Таблица.Регистратор КАК Регистратор,
	|		Таблица.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаПродукции,
	|		Таблица.ПериодПродажи КАК ПериодПродажи,
	|		Таблица.Количество КАК Количество,
	|		Таблица.Стоимость КАК Стоимость,
	|		Таблица.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|		0 КАК СуммаДопРасходов,
	|		0 КАК СуммаДопРасходовБезНДС,
	|		Таблица.СтоимостьРегл КАК СтоимостьРегл,
	|		Таблица.НДСРегл КАК НДСРегл,
	|		Таблица.СтоимостьРеглБезНДС КАК СтоимостьРеглБезНДС,
	|		Таблица.НДСРеглРесурс КАК НДСРеглРесурс,
	|		Таблица.ПостояннаяРазница КАК ПостояннаяРазница,
	|		Таблица.ВременнаяРазница КАК ВременнаяРазница
	|	ИЗ
	|		СборкиТоваров КАК Таблица
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ПартииНаКомиссии.Организация,
	|		ПартииНаКомиссии.ВидЗапасов,
	|		ПартииНаКомиссии.Регистратор,
	|		ПартииНаКомиссии.АналитикаУчетаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаПродукции,
	|		ДАТАВРЕМЯ(1,1,1) КАК ПериодПродажи,
	|		СУММА(
	|			ВЫБОР
	|				КОГДА ПартииНаКомиссии.КоличествоРасход < 0 
	|				ТОГДА 0 - ПартииНаКомиссии.КоличествоРасход
	|				ИНАЧЕ ПартииНаКомиссии.КоличествоРасход
	|			КОНЕЦ
	|		) КАК Количество,
	|		СУММА(
	|			ВЫБОР
	|				КОГДА ПартииНаКомиссии.КоличествоРасход < 0 
	|				ТОГДА 0 - ПартииНаКомиссии.СтоимостьРасход
	|				ИНАЧЕ ПартииНаКомиссии.СтоимостьРасход
	|			КОНЕЦ
	|		) КАК СтоимостьРасход,
	|		СУММА(
	|			ВЫБОР
	|				КОГДА ПартииНаКомиссии.КоличествоРасход < 0 
	|				ТОГДА 0 - ПартииНаКомиссии.СтоимостьБезНДСРасход
	|				ИНАЧЕ ПартииНаКомиссии.СтоимостьБезНДСРасход
	|			КОНЕЦ
	|		) КАК СтоимостьБезНДСРасход,
	|		0,
	|		0,
	|		СУММА(
	|		ВЫБОР КОГДА ПартииНаКомиссии.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.НеОблагаемая) 
	|			ТОГДА
	|				ВЫБОР КОГДА ПартииНаКомиссии.КоличествоРасход < 0 ТОГДА
	|					0 - (ПартииНаКомиссии.СтоимостьРеглРасход + ПартииНаКомиссии.НДСРеглРасход)
	|				ИНАЧЕ
	|					ПартииНаКомиссии.СтоимостьРеглРасход + ПартииНаКомиссии.НДСРеглРасход
	|				КОНЕЦ
	|			ИНАЧЕ
	|				ВЫБОР КОГДА ПартииНаКомиссии.КоличествоРасход < 0 ТОГДА
	|					0 - ПартииНаКомиссии.СтоимостьРеглРасход
	|				ИНАЧЕ
	|					ПартииНаКомиссии.СтоимостьРеглРасход
	|				КОНЕЦ
	|			КОНЕЦ
	|		) КАК СтоимостьРегл,
	|		0 КАК НДСРегл,
	|		СУММА(
	|			ВЫБОР
	|				КОГДА ПартииНаКомиссии.КоличествоРасход < 0 
	|				ТОГДА 0 - ПартииНаКомиссии.СтоимостьРеглРасход
	|				ИНАЧЕ ПартииНаКомиссии.СтоимостьРеглРасход
	|			КОНЕЦ
	|		) КАК СтоимостьРеглБезНДС,
	|		СУММА(
	|			ВЫБОР
	|				КОГДА ПартииНаКомиссии.КоличествоРасход < 0 
	|				ТОГДА 0 - ПартииНаКомиссии.НДСРеглРасход
	|				ИНАЧЕ ПартииНаКомиссии.НДСРеглРасход
	|			КОНЕЦ
	|		) КАК НДСРеглРесурс,
	|		СУММА(
	|			ВЫБОР
	|				КОГДА ПартииНаКомиссии.КоличествоРасход < 0 
	|				ТОГДА 0 - ПартииНаКомиссии.ПостояннаяРазницаРасход
	|				ИНАЧЕ ПартииНаКомиссии.ПостояннаяРазницаРасход
	|			КОНЕЦ
	|		) КАК ПостояннаяРазницаРасход,
	|		СУММА(
	|			ВЫБОР
	|				КОГДА ПартииНаКомиссии.КоличествоРасход < 0 
	|				ТОГДА 0 - ПартииНаКомиссии.ВременнаяРазницаРасход
	|				ИНАЧЕ ПартииНаКомиссии.ВременнаяРазницаРасход
	|			КОНЕЦ
	|		) КАК ВременнаяРазницаРасход
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровПереданныеНаКомиссию.Обороты(&НачалоПериода, &КонецПериода,
	|			Регистратор,
	|			Организация В (&МассивОрганизаций)
	|		) КАК ПартииНаКомиссии
	|	ГДЕ
	|		НЕ ПартииНаКомиссии.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|
	|	СГРУППИРОВАТЬ ПО
	|		ПартииНаКомиссии.Организация,
	|		ПартииНаКомиссии.ВидЗапасов,
	|		ПартииНаКомиссии.Регистратор,
	|		ПартииНаКомиссии.АналитикаУчетаНоменклатуры
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Затраты.Организация,
	|		Затраты.ВидЗапасов,
	|		Затраты.Регистратор,
	|		Затраты.АналитикаУчетаНоменклатуры,
	|		ВЫБОР
	|			КОГДА Затраты.СтатьяРасходовСписания = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КОНЕЦ КАК АналитикаУчетаПродукции,
	|		ДАТАВРЕМЯ(1,1,1) КАК ПериодПродажи,
	|		ВЫБОР КОГДА Затраты.Количество < 0 ТОГДА
	|			0 - Затраты.Количество
	|		ИНАЧЕ
	|			Затраты.Количество
	|		КОНЕЦ КАК Количество,
	|		ВЫБОР КОГДА Затраты.Количество < 0 ТОГДА
	|			0 - Затраты.Стоимость
	|		ИНАЧЕ
	|			Затраты.Стоимость
	|		КОНЕЦ КАК Стоимость,
	|		ВЫБОР КОГДА Затраты.Количество < 0 ТОГДА
	|			0 - Затраты.СтоимостьБезНДС
	|		ИНАЧЕ
	|			Затраты.СтоимостьБезНДС
	|		КОНЕЦ КАК СтоимостьБезНДС,
	|		0 КАК СуммаДопРасходов,
	|		0 КАК СуммаДопРасходовБезНДС,
	|		ВЫБОР КОГДА Затраты.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.НеОблагаемая) 
	|		ТОГДА
	|			ВЫБОР КОГДА Затраты.Количество < 0 ТОГДА
	|				0 - (Затраты.СтоимостьРегл + Затраты.НДСРегл )
	|			ИНАЧЕ
	|				Затраты.СтоимостьРегл + Затраты.НДСРегл
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР КОГДА Затраты.Количество < 0 ТОГДА
	|				0 - Затраты.СтоимостьРегл
	|			ИНАЧЕ
	|				Затраты.СтоимостьРегл
	|			КОНЕЦ
	|		КОНЕЦ КАК СтоимостьРегл,
	|		0 КАК НДСРегл,
	|		ВЫБОР
	|			КОГДА Затраты.Количество < 0 
	|			ТОГДА 0 - Затраты.СтоимостьРегл
	|			ИНАЧЕ Затраты.СтоимостьРегл
	|		КОНЕЦ КАК СтоимостьРеглБезНДС,
	|		ВЫБОР
	|			КОГДА Затраты.Количество < 0 
	|			ТОГДА 0 - Затраты.НДСРегл
	|			ИНАЧЕ Затраты.НДСРегл
	|		КОНЕЦ КАК НДСРеглРесурс,
	|		ВЫБОР КОГДА Затраты.Количество < 0 ТОГДА
	|			0 - Затраты.ПостояннаяРазница
	|		ИНАЧЕ
	|			Затраты.ПостояннаяРазница
	|		КОНЕЦ КАК ПостояннаяРазница,
	|		ВЫБОР КОГДА Затраты.Количество < 0 ТОГДА
	|			0 - Затраты.ВременнаяРазница
	|		ИНАЧЕ
	|			Затраты.ВременнаяРазница
	|		КОНЕЦ КАК ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.ПартииПроизводственныхЗатрат КАК Затраты
	|	ГДЕ
	|		Затраты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Затраты.Активность
	|		И Затраты.Организация В(&МассивОрганизаций)
	|		И (Затраты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ИЛИ Затраты.Регистратор ССЫЛКА Документ.ПрочееОприходованиеТоваров
	|			ИЛИ Затраты.Регистратор ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|			)
	|
	|	) КАК Партии
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.Организация,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		Партии.ВидЗапасов
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА Партии.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|	ИНАЧЕ
	|		ЕСТЬNULL(Партии.ВидЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар))
	|	КОНЕЦ,
	|	Партии.Регистратор,
	|	Партии.АналитикаУчетаНоменклатуры,
	|	Партии.АналитикаУчетаПродукции,
	|	(ВЫБОР
	|		КОГДА &ДляСтоимостиПродаж ТОГДА ДАТАВРЕМЯ(1,1,1)
	|		ИНАЧЕ Партии.ПериодПродажи КОНЕЦ)
	|";
	
	Запрос.Выполнить();
    
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ТаблицаПартий, ЗатратыНаВыпуск, СборкиТоваровВидыЗапасов,
		|СборкиТоваровПартии, СборкиТоваров, Возвраты, ПартииРасходов");
	
КонецПроцедуры


// Служебная, этап 2.1, 2.2, 3.1, 3.18
Процедура РаспределитьСтоимость(ЗаписьРаспределения, СтрокаОстатка, Выборка, Знач КоличествоКРаспределению)
	
	Если КоличествоКРаспределению >= СтрокаОстатка.Количество Тогда
		
		КоличествоКРаспределению 	= КоличествоКРаспределению - СтрокаОстатка.Количество;
			
		КоличествоКСписанию 			= СтрокаОстатка.Количество;
		СтоимостьКСписанию				= СтрокаОстатка.Стоимость;
		СтоимостьБезНДСКСписанию		= СтрокаОстатка.СтоимостьБезНДС;
		СтоимостьРеглКСписанию			= СтрокаОстатка.СтоимостьРегл;
		НДСРеглКорректировкаСтоимостиКСписанию = СтрокаОстатка.НДСРеглКорректировкаСтоимости;
		СтоимостьРеглБезНДСКСписанию	= СтрокаОстатка.СтоимостьРеглБезНДС;
		НДСРеглКСписанию			    = СтрокаОстатка.НДСРегл;
		СуммаДопРасходовКСписанию		= СтрокаОстатка.СуммаДопРасходов;
		СуммаДопРасходовБезНДСКСписанию	= СтрокаОстатка.СуммаДопРасходовБезНДС;
		ПостояннаяРазницаКСписанию		= СтрокаОстатка.ПостояннаяРазница;
		ВременнаяРазницаКСписанию		= СтрокаОстатка.ВременнаяРазница;
		

	ИначеЕсли КоличествоКРаспределению < СтрокаОстатка.Количество Тогда
		
		СтоимостьКСписанию				= Окр((КоличествоКРаспределению * СтрокаОстатка.Стоимость / СтрокаОстатка.Количество),2);
		СтоимостьБезНДСКСписанию		= Окр((КоличествоКРаспределению * СтрокаОстатка.СтоимостьБезНДС / СтрокаОстатка.Количество),2);
		СтоимостьРеглКСписанию			= Окр((КоличествоКРаспределению * СтрокаОстатка.СтоимостьРегл / СтрокаОстатка.Количество),2);
		НДСРеглКорректировкаСтоимостиКСписанию = Окр((КоличествоКРаспределению * СтрокаОстатка.НДСРеглКорректировкаСтоимости / СтрокаОстатка.Количество),2);
		СтоимостьРеглБезНДСКСписанию	= Окр((КоличествоКРаспределению * СтрокаОстатка.СтоимостьРеглБезНДС / СтрокаОстатка.Количество),2);
		НДСРеглКСписанию			    = Окр((КоличествоКРаспределению * СтрокаОстатка.НДСРегл / СтрокаОстатка.Количество),2);
		СуммаДопРасходовКСписанию		= Окр((КоличествоКРаспределению * СтрокаОстатка.СуммаДопРасходов / СтрокаОстатка.Количество),2);
		СуммаДопРасходовБезНДСКСписанию	= Окр((КоличествоКРаспределению * СтрокаОстатка.СуммаДопРасходовБезНДС / СтрокаОстатка.Количество),2);
		ПостояннаяРазницаКСписанию		= Окр((КоличествоКРаспределению * СтрокаОстатка.ПостояннаяРазница / СтрокаОстатка.Количество),2);
		ВременнаяРазницаКСписанию		= Окр((КоличествоКРаспределению * СтрокаОстатка.ВременнаяРазница / СтрокаОстатка.Количество),2);
			
		КоличествоКСписанию	 		    = КоличествоКРаспределению;
		КоличествоКРаспределению 	    = 0;
		
		СтрокаОстатка.Количество 			 = СтрокаОстатка.Количество - КоличествоКСписанию;
		СтрокаОстатка.Стоимость 			 = СтрокаОстатка.Стоимость - СтоимостьКСписанию;
		СтрокаОстатка.СтоимостьБезНДС 		 = СтрокаОстатка.СтоимостьБезНДС - СтоимостьБезНДСКСписанию;
		СтрокаОстатка.СтоимостьРегл 		 = СтрокаОстатка.СтоимостьРегл - СтоимостьРеглКСписанию;
		СтрокаОстатка.НДСРеглКорректировкаСтоимости = СтрокаОстатка.НДСРеглКорректировкаСтоимости - НДСРеглКорректировкаСтоимостиКСписанию;
		СтрокаОстатка.СтоимостьРеглБезНДС 	 = СтрокаОстатка.СтоимостьРеглБезНДС - СтоимостьРеглБезНДСКСписанию;
		СтрокаОстатка.НДСРегл 		         = СтрокаОстатка.НДСРегл - НДСРеглКСписанию;
		СтрокаОстатка.СуммаДопРасходов 		 = СтрокаОстатка.СуммаДопРасходов - СуммаДопРасходовКСписанию;
		СтрокаОстатка.СуммаДопРасходовБезНДС = СтрокаОстатка.СуммаДопРасходовБезНДС - СуммаДопРасходовБезНДСКСписанию;
		СтрокаОстатка.ПостояннаяРазница 	 = СтрокаОстатка.ПостояннаяРазница - ПостояннаяРазницаКСписанию;
		СтрокаОстатка.ВременнаяРазница 		 = СтрокаОстатка.ВременнаяРазница - ВременнаяРазницаКСписанию;

	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаписьРаспределения, Выборка);
	Если Выборка.ИсходноеКоличество < 0 Тогда
		ЗаписьРаспределения.Количество				= 0 - КоличествоКСписанию;
		ЗаписьРаспределения.Стоимость				= 0 - СтоимостьКСписанию;
		ЗаписьРаспределения.СтоимостьБезНДС			= 0 - СтоимостьБезНДСКСписанию;
		ЗаписьРаспределения.СтоимостьРегл			= 0 - СтоимостьРеглКСписанию;
		ЗаписьРаспределения.НДСРеглКорректировкаСтоимости = 0 - НДСРеглКорректировкаСтоимостиКСписанию;
		ЗаписьРаспределения.СтоимостьРеглБезНДС		= 0 - СтоимостьРеглБезНДСКСписанию;
		ЗаписьРаспределения.НДСРегл			        = 0 - НДСРеглКСписанию;
		ЗаписьРаспределения.СуммаДопРасходов		= 0 - СуммаДопРасходовКСписанию;
		ЗаписьРаспределения.СуммаДопРасходовБезНДС	= 0 - СуммаДопРасходовБезНДСКСписанию;
		ЗаписьРаспределения.ПостояннаяРазница		= 0 - ПостояннаяРазницаКСписанию;
		ЗаписьРаспределения.ВременнаяРазница		= 0 - ВременнаяРазницаКСписанию;
	Иначе
		ЗаписьРаспределения.Количество				= КоличествоКСписанию;
		ЗаписьРаспределения.Стоимость				= СтоимостьКСписанию - Выборка.Стоимость;
		ЗаписьРаспределения.СтоимостьБезНДС			= СтоимостьБезНДСКСписанию;
		ЗаписьРаспределения.СтоимостьРегл			= СтоимостьРеглКСписанию - Выборка.СтоимостьРегл;
		ЗаписьРаспределения.НДСРеглКорректировкаСтоимости = НДСРеглКорректировкаСтоимостиКСписанию;
		ЗаписьРаспределения.СтоимостьРеглБезНДС		= СтоимостьРеглБезНДСКСписанию - Выборка.СтоимостьРеглБезНДС;
		ЗаписьРаспределения.НДСРегл			        = НДСРеглКСписанию;
		ЗаписьРаспределения.СуммаДопРасходов		= СуммаДопРасходовКСписанию;
		ЗаписьРаспределения.СуммаДопРасходовБезНДС	= СуммаДопРасходовБезНДСКСписанию;
		ЗаписьРаспределения.ПостояннаяРазница		= ПостояннаяРазницаКСписанию;
		ЗаписьРаспределения.ВременнаяРазница		= ВременнаяРазницаКСписанию;
	КонецЕсли;
					
КонецПроцедуры

// Служебная, этап 2.1, 3.1
Процедура ДополнитьСуммыРаспределения(ЗаписьРаспределения, СуммыРаспределения)
	
	ЗаписьРаспределения.Стоимость 				= ЗаписьРаспределения.Стоимость + СуммыРаспределения.Стоимость;
	ЗаписьРаспределения.СтоимостьБезНДС 		= ЗаписьРаспределения.СтоимостьБезНДС + СуммыРаспределения.СтоимостьБезНДС;
	ЗаписьРаспределения.СтоимостьРегл 			= ЗаписьРаспределения.СтоимостьРегл + СуммыРаспределения.СтоимостьРегл;
	ЗаписьРаспределения.НДСРеглКорректировкаСтоимости = ЗаписьРаспределения.НДСРеглКорректировкаСтоимости + СуммыРаспределения.НДСРеглКорректировкаСтоимости;
	ЗаписьРаспределения.СтоимостьРеглБезНДС 	= ЗаписьРаспределения.СтоимостьРеглБезНДС + СуммыРаспределения.СтоимостьРеглБезНДС;
	ЗаписьРаспределения.НДСРегл 			    = ЗаписьРаспределения.НДСРегл + СуммыРаспределения.НДСРегл;
	ЗаписьРаспределения.СуммаДопРасходов 		= ЗаписьРаспределения.СуммаДопРасходов + СуммыРаспределения.СуммаДопРасходов;
	ЗаписьРаспределения.СуммаДопРасходовБезНДС 	= ЗаписьРаспределения.СуммаДопРасходовБезНДС + СуммыРаспределения.СуммаДопРасходовБезНДС;
	ЗаписьРаспределения.ПостояннаяРазница 		= ЗаписьРаспределения.ПостояннаяРазница + СуммыРаспределения.ПостояннаяРазница;
	ЗаписьРаспределения.ВременнаяРазница 		= ЗаписьРаспределения.ВременнаяРазница + СуммыРаспределения.ВременнаяРазница;
	
КонецПроцедуры

// Служебная, этап 3.2
// Формирует таблицу расходов, распределенных на себестоимость товаров
// по указанному в статьях расходов правилу распределения.
//
// Параметры:
//	Дата - Дата, на которую выполняется получение остатка расходов
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица распределения расходов на себестоимость
//
Функция ТаблицаРаспределенияРасходовНаСебестоимостьТоваров(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	0                               КАК НомерСтроки,
	|	ПрочиеРасходы.Организация       КАК Организация,
	|	ПрочиеРасходы.Подразделение     КАК Подразделение,
	|	ПрочиеРасходы.СтатьяРасходов    КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ПрочиеРасходы.СтатьяРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения,
	|	ПрочиеРасходы.СтоимостьОстаток КАК Сумма,
	|	ПрочиеРасходы.СтоимостьБезНДСОстаток КАК СуммаБезНДС,
	|	ПрочиеРасходы.СтоимостьРеглОстаток +
	|	ВЫБОР КОГДА ПрочиеРасходы.АналитикаУчетаПартий.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|	ТОГДА
	|		ПрочиеРасходы.НДСРеглОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаРегл,
	|	ПрочиеРасходы.СтоимостьРеглОстаток КАК СуммаРеглБезНДС,
	|	ПрочиеРасходы.НДСРеглОстаток КАК НДСРегл,
	|	ПрочиеРасходы.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
	|	ПрочиеРасходы.ВременнаяРазницаОстаток КАК ВременнаяРазница
	|ИЗ
	|	РегистрНакопления.ПартииПрочихРасходов.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)
	|		И СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	) КАК ПрочиеРасходы
	|ГДЕ
	|	(ПрочиеРасходы.СтоимостьОстаток > 0
	|		ИЛИ ПрочиеРасходы.СтоимостьБезНДСОстаток > 0)
	|	И ПрочиеРасходы.СтатьяРасходов.ПравилоРаспределенияНаСебестоимость <> ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПустаяСсылка)
	|";
	
	ТаблицаРасходов = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРасходов Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаРасходов", ТаблицаРасходов);
	
	Запрос.Текст = ""
		+ ТекстЗапросаВтТаблицаРасходовПоОстаткам()
		+ ТекстЗапросаТаблицаСпособовРаспределения()
		+ ТекстЗапросаТаблицаДокументов()
		+ ТекстЗапросаТаблицаПоступленияТоваров()
		+ ТекстЗапросаТаблицаБазыРаспределения()
		+ ТекстЗапросаТаблицаРасходов();
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// МассивРезультатов[0] - временная таблица "ВтТаблицаРасходов"
	// МассивРезультатов[1] - временная таблица "ТаблицаСпособовРаспределения"
	// МассивРезультатов[2] - временная таблица "ТаблицаДокументов"
	// МассивРезультатов[3] - временная таблица "ВтПоступленияТоваров"
	// МассивРезультатов[4] - временная таблица "ТаблицаПоступленияТоваров"
	РезультатЗапросаПоБазе = МассивРезультатов[5];
	ТаблицаРасходов = МассивРезультатов[6].Выгрузить();
	
	// Сформируем таблицу распределения расходов.
	ТаблицаРаспределенияРасходов = Новый ТаблицаЗначений;
	Колонки = ТаблицаРаспределенияРасходов.Колонки;
	Колонки.Добавить("Организация",                Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Колонки.Добавить("Подразделение",              Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Колонки.Добавить("СтатьяРасходовСписания",     Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	Колонки.Добавить("АналитикаРасходов");
	Колонки.Добавить("АналитикаУчетаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры"));
	Колонки.Добавить("ВидЗапасов",                 Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов"));
	Колонки.Добавить("СуммаДопРасходов",           ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("СуммаДопРасходовБезНДС",     ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("СтоимостьРегл",              ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("СтоимостьРеглБезНДС",        ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("НДСРегл",                    ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("ПостояннаяРазница",          ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("ВременнаяРазница",           ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	
	СтруктураОтбора = Новый Структура("ИндексБазы");

	// Выборка строк базы распределения по индексу аналитики.
	ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексу.Следующий() Цикл
		
		Если ВыборкаПоИндексу.База = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;

		// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
		// Данные затраты будут распределены по одинаковой базе распределения.
		МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		Если МассивРасходов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Для Каждого СтрокаРасходов Из МассивРасходов Цикл
		
			СуммаКРаспределению				= СтрокаРасходов.Сумма;
			СуммаБезНДСКРаспределению		= СтрокаРасходов.СуммаБезНДС;
			СуммаРеглКРаспределению			= СтрокаРасходов.СуммаРегл;
			СуммаРеглБезНДСКРаспределению	= СтрокаРасходов.СуммаРеглБезНДС;
			НДСРеглКРаспределению			= СтрокаРасходов.НДСРегл;
			ПостояннаяРазницаКРаспределению	= СтрокаРасходов.ПостояннаяРазница;
			ВременнаяРазницаКРаспределению	= СтрокаРасходов.ВременнаяРазница;
			БазаВсего						= ВыборкаПоИндексу.База;
		
			// Выборка строк базы распределения по индексу базы распределения
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл

				Если БазаВсего <> 0 Тогда
					Стоимость			= Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1); 
					СтоимостьБезНДС		= Окр(СуммаБезНДСКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьРегл		= Окр(СуммаРеглКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьРеглБезНДС	= Окр(СуммаРеглБезНДСКРаспределению * Выборка.База / БазаВсего, 2, 1);
					НДСРегл				= Окр(НДСРеглКРаспределению * Выборка.База / БазаВсего, 2, 1);
					ПостояннаяРазница	= Окр(ПостояннаяРазницаКРаспределению * Выборка.База / БазаВсего, 2, 1);
					ВременнаяРазница	= Окр(ВременнаяРазницаКРаспределению * Выборка.База / БазаВсего, 2, 1);
				Иначе
					Стоимость			= 0;
					СтоимостьБезНДС		= 0;
					СтоимостьРегл		= 0;
					СтоимостьРеглБезНДС	= 0;
					НДСРегл				= 0;
					ПостояннаяРазница	= 0;
					ВременнаяРазница	= 0;
				КонецЕсли;

				СуммаКРаспределению = СуммаКРаспределению - Стоимость;
				СуммаБезНДСКРаспределению = СуммаБезНДСКРаспределению - СтоимостьБезНДС;
				СуммаРеглКРаспределению = СуммаРеглКРаспределению - СтоимостьРегл;
				СуммаРеглБезНДСКРаспределению = СуммаРеглБезНДСКРаспределению - СтоимостьРеглБезНДС;
				НДСРеглКРаспределению = НДСРеглКРаспределению - НДСРегл;
				ПостояннаяРазницаКРаспределению = ПостояннаяРазницаКРаспределению - ПостояннаяРазница;
				ВременнаяРазницаКРаспределению = ВременнаяРазницаКРаспределению - ВременнаяРазница;
				БазаВсего = БазаВсего - Выборка.База;

				НоваяСтрока = ТаблицаРаспределенияРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасходов);
				НоваяСтрока.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры;
				НоваяСтрока.ВидЗапасов                 = Выборка.ВидЗапасов;
				НоваяСтрока.Организация                = Выборка.Организация;
				НоваяСтрока.СуммаДопРасходов           = Стоимость;
				НоваяСтрока.СуммаДопРасходовБезНДС     = СтоимостьБезНДС;
				НоваяСтрока.СтоимостьРегл              = СтоимостьРегл;
				НоваяСтрока.СтоимостьРеглБезНДС        = СтоимостьРеглБезНДС;
				НоваяСтрока.НДСРегл                    = НДСРегл;
				НоваяСтрока.ПостояннаяРазница          = ПостояннаяРазница;
				НоваяСтрока.ВременнаяРазница           = ВременнаяРазница;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УничтожитьВременныеТаблицы(
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		"ВтТаблицаРасходов, ТаблицаСпособовРаспределения,
		|ТаблицаДокументов, ВтПоступленияТоваров, ТаблицаПоступленияТоваров");
	
	Возврат ТаблицаРаспределенияРасходов;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПодготовкаИРешениеСЛУ

// Служебная, этап 3.6
// Функция выполняет корректировку стоимости и количества внешних приходов в узлах при расчете стоимости по ФИФО (Скользящая оценка).
//
// Параметры:
// Запрос - запрос по формированию узлов корректировки.
//
// Возвращаемое значение
// Таблица значений - узлы корректировки стоимости.
//
Функция ПодготовитьДанныеДляРасчетаСтоимостиПоФИФО(ПараметрыРасчета, Запрос)

	// Формирование таблицы узлов.
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ДляФИФО","");
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	Себестоимость.Организация,
	|	Себестоимость.КоличествоОстаток
	|ПОМЕСТИТЬ ВТНачальныеОстатки
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаНачалоПериода,
	|			Организация В (&МассивОрганизаций)
	|				И (АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов) В
	|					(ВЫБРАТЬ
	|						Таблица.АналитикаУчетаНоменклатуры,
	|						Таблица.РазделУчета,
	|						Таблица.ВидЗапасов
	|					ИЗ
	|						ВтАналитикаНоменклатуры КАК Таблица)) КАК Себестоимость
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	Себестоимость.Организация,
	|	Себестоимость.Количество КАК КоличествоОстаток,
	|	Себестоимость.СуммаДопРасходов КАК СуммаДопРасходовОстаток,
	|	Себестоимость.СуммаДопРасходовБезНДС КАК СуммаДопРасходовБезНДСОстаток
	|ПОМЕСТИТЬ ВТКонечныеОстатки
	|ИЗ
	|	ВТКэшРасчетныеОстаткиСебестоимостьТоваров КАК Себестоимость
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикаНоменклатуры КАК Таблица
	|		ПО Себестоимость.АналитикаУчетаНоменклатуры = Таблица.АналитикаУчетаНоменклатуры
	|		И Себестоимость.РазделУчета = Таблица.РазделУчета
	|		И Себестоимость.ВидЗапасов = Таблица.ВидЗапасов
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	СУММА(Себестоимость.Количество) КАК КоличествоПриход
	|ПОМЕСТИТЬ ВТПриходы
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикаНоменклатуры КАК Таблица
	|		ПО Себестоимость.АналитикаУчетаНоменклатуры = Таблица.АналитикаУчетаНоменклатуры
	|			И Себестоимость.РазделУчета = Таблица.РазделУчета
	|			И Себестоимость.ВидЗапасов = Таблица.ВидЗапасов
	|ГДЕ
	|	Себестоимость.СлужебноеВидДвиженияПриход
	|
	|СГРУППИРОВАТЬ ПО
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	КонечныеОстатки.Организация,
	|	КонечныеОстатки.АналитикаУчетаНоменклатуры,
	|	КонечныеОстатки.РазделУчета,
	|	КонечныеОстатки.ВидЗапасов,
	|	(ВЫБОР
	|		КОГДА КонечныеОстатки.КоличествоОстаток > 0 ТОГДА КонечныеОстатки.КоличествоОстаток
	|		ИНАЧЕ 0 КОНЕЦ) КАК КоличествоОстаток,
	|	(ВЫБОР
	|		КОГДА КонечныеОстатки.КоличествоОстаток > 0 ТОГДА КонечныеОстатки.КоличествоОстаток
	|		ИНАЧЕ 0 КОНЕЦ) КАК КоличествоОстатокНаКонецПериода,
	|	0 КАК СтоимостьОстаток,
	|	0 КАК СтоимостьБезНДСОстаток,
	|	0 КАК СтоимостьРеглБезНДСОстаток,
	|	0 КАК НДСРеглОстаток,
	|	0 КАК ПостояннаяРазницаОстаток,
	|	0 КАК ВременнаяРазницаОстаток,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(НачальныеОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(Приходы.КоличествоПриход, 0) > 0
	|			ТОГДА КонечныеОстатки.КоличествоОстаток * КонечныеОстатки.СуммаДопРасходовОстаток /
	|					(ЕСТЬNULL(НачальныеОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(Приходы.КоличествоПриход, 0))
	|		ИНАЧЕ 0 КОНЕЦ) КАК СтоимостьДопРасходыОстаток,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(НачальныеОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(Приходы.КоличествоПриход, 0) > 0
	|			ТОГДА КонечныеОстатки.КоличествоОстаток * КонечныеОстатки.СуммаДопРасходовБезНДСОстаток /
	|					(ЕСТЬNULL(НачальныеОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(Приходы.КоличествоПриход, 0))
	|		ИНАЧЕ 0 КОНЕЦ) КАК СтоимостьДопРасходыБезНДСОстаток,
	|	ЕСТЬNULL(НачальныеОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(Приходы.КоличествоПриход, 0) КАК КоличествоПриход,
	|	ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1) КАК Период
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	ВТКонечныеОстатки КАК КонечныеОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТНачальныеОстатки КАК НачальныеОстатки
	|		ПО КонечныеОстатки.Организация = НачальныеОстатки.Организация
	|		И КонечныеОстатки.АналитикаУчетаНоменклатуры = НачальныеОстатки.АналитикаУчетаНоменклатуры
	|		И КонечныеОстатки.РазделУчета = НачальныеОстатки.РазделУчета
	|		И КонечныеОстатки.ВидЗапасов = НачальныеОстатки.ВидЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПриходы КАК Приходы
	|		ПО КонечныеОстатки.Организация = Приходы.Организация
	|		И КонечныеОстатки.АналитикаУчетаНоменклатуры = Приходы.АналитикаУчетаНоменклатуры
	|		И КонечныеОстатки.РазделУчета = Приходы.РазделУчета
	|		И КонечныеОстатки.ВидЗапасов = Приходы.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТНачальныеОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТКонечныеОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТПриходы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	1 
	|ПОМЕСТИТЬ ТаблицаПериодыПартий
	|";
	Запрос.Выполнить();

	Запрос.Текст =
	"
	|УНИЧТОЖИТЬ ТаблицаПериодыПартий
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.Организация                           КАК Организация,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры            КАК АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.РазделУчета                           КАК РазделУчета,
	|	СебестоимостьТоваров.ВидЗапасов                            КАК ВидЗапасов,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, День)) КАК Период
	|ПОМЕСТИТЬ ТаблицаПериодыПартий
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|			ПО СебестоимостьТоваров.АналитикаУчетаНоменклатуры = ТаблицаОстатков.АналитикаУчетаНоменклатуры
	|				И СебестоимостьТоваров.РазделУчета = ТаблицаОстатков.РазделУчета
	|				И СебестоимостьТоваров.ВидЗапасов  = ТаблицаОстатков.ВидЗапасов
	|				И СебестоимостьТоваров.Организация = ТаблицаОстатков.Организация
	|				И ТаблицаОстатков.КоличествоОстаток <> 0
	|ГДЕ
	|	СебестоимостьТоваров.СлужебноеВидДвиженияПриход
	|	И СебестоимостьТоваров.Стоимость <> 0
	|	И СебестоимостьТоваров.Период < ТаблицаОстатков.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.ВидЗапасов,
	|	СебестоимостьТоваров.РазделУчета,
	|	СебестоимостьТоваров.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Себестоимость.Организация                           КАК Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры            КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета                           КАК РазделУчета,
	|	Себестоимость.ВидЗапасов                            КАК ВидЗапасов,
	|	Себестоимость.Период                                КАК Период,
	|	СУММА(Себестоимость.Количество)        				КАК Количество,
	|	СУММА(Себестоимость.Стоимость)         				КАК Стоимость,
	|	СУММА(Себестоимость.СтоимостьБезНДС)   				КАК СтоимостьБезНДС,
	|	СУММА(Себестоимость.СтоимостьРеглБезНДС)   			КАК СтоимостьРеглБезНДС,
	|	СУММА(Себестоимость.НДСРегл)   				        КАК НДСРегл,
	|	СУММА(Себестоимость.ПостояннаяРазница) 				КАК ПостояннаяРазница,
	|	СУММА(Себестоимость.ВременнаяРазница)  				КАК ВременнаяРазница
	|ПОМЕСТИТЬ ТаблицаВнешнихПоступлений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПериодыПартий.Организация                           КАК Организация,
	|		ПериодыПартий.АналитикаУчетаНоменклатуры            КАК АналитикаУчетаНоменклатуры,
	|		ПериодыПартий.РазделУчета                           КАК РазделУчета,
	|		ПериодыПартий.ВидЗапасов                            КАК ВидЗапасов,
	|		ПериодыПартий.Период                                КАК Период,
	|		ЕСТЬNULL(Себестоимость.Количество, 0)        		КАК Количество,
	|		ЕСТЬNULL(Себестоимость.Стоимость, 0)         		КАК Стоимость,
	|		ЕСТЬNULL(Себестоимость.СтоимостьБезНДС, 0)   		КАК СтоимостьБезНДС,
	|		ЕСТЬNULL(Себестоимость.СтоимостьРеглБезНДС, 0)   	КАК СтоимостьРеглБезНДС,
	|		ЕСТЬNULL(Себестоимость.НДСРегл, 0)   		        КАК НДСРегл,
	|		ЕСТЬNULL(Себестоимость.ПостояннаяРазница, 0) 		КАК ПостояннаяРазница,
	|		ЕСТЬNULL(Себестоимость.ВременнаяРазница, 0)  		КАК ВременнаяРазница
	|	ИЗ
	|		ТаблицаПериодыПартий КАК ПериодыПартий
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|			ПО ПериодыПартий.АналитикаУчетаНоменклатуры = Себестоимость.АналитикаУчетаНоменклатуры
	|				И ПериодыПартий.РазделУчета             = Себестоимость.РазделУчета
	|				И ПериодыПартий.ВидЗапасов              = Себестоимость.ВидЗапасов
	|				И ПериодыПартий.Организация             = Себестоимость.Организация
	|				И Себестоимость.СлужебноеВидДвиженияПриход
	|				И (Себестоимость.Период МЕЖДУ ПериодыПартий.Период И КОНЕЦПЕРИОДА(ПериодыПартий.Период, ДЕНЬ))
	|				И (Себестоимость.ХозяйственнаяОперация В (&МассивОперацийПоступлениеВнешнее))
	|	) КАК Себестоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	Себестоимость.Организация,
	|	Себестоимость.Период
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов,
	|	(ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток > ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ТаблицаОстатков.КоличествоОстаток - ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|		ИНАЧЕ 0 КОНЕЦ) КАК НовыйКоличествоОстаток,
	|	ТаблицаОстатков.КоличествоОстатокНаКонецПериода,
	|	ТаблицаОстатков.КоличествоПриход,
	|
	|	ТаблицаОстатков.СтоимостьОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.Стоимость, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВнешнихПоступлений.Стоимость, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                      КАК НоваяСтоимостьОстаток,
	|
	|	ТаблицаОстатков.СтоимостьБезНДСОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьБезНДС, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьБезНДС, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                      КАК НоваяСтоимостьБезНДСОстаток,
	|
	|
	|	ТаблицаОстатков.СтоимостьРеглБезНДСОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьРеглБезНДС, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьРеглБезНДС, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                      КАК НоваяСтоимостьРеглБезНДСОстаток,
	|
	|	ТаблицаОстатков.НДСРеглОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.НДСРегл, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВнешнихПоступлений.НДСРегл, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                      КАК НоваяНДСРеглОстаток,
	|
	|
	|	ТаблицаВнешнихПоступлений.Период           КАК Период,
	|
	|	ТаблицаОстатков.ПостояннаяРазницаОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.ПостояннаяРазница, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВнешнихПоступлений.ПостояннаяРазница, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                      КАК НоваяПостояннаяРазницаОстаток,
	|
	|	ТаблицаОстатков.ВременнаяРазницаОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.ВременнаяРазница, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаВнешнихПоступлений.ВременнаяРазница, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                      КАК НоваяВременнаяРазницаОстаток,
	|
	|	ТаблицаОстатков.СтоимостьДопРасходыОстаток КАК НоваяСтоимостьДопРасходыОстаток,
	|	ТаблицаОстатков.СтоимостьДопРасходыБезНДСОстаток КАК НоваяСтоимостьДопРасходыБезНДСОстаток
	|
	|ПОМЕСТИТЬ ТаблицаНовыхОстатков
	|
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВнешнихПоступлений КАК ТаблицаВнешнихПоступлений
	|		ПО ТаблицаОстатков.АналитикаУчетаНоменклатуры = ТаблицаВнешнихПоступлений.АналитикаУчетаНоменклатуры
	|			И ТаблицаОстатков.Организация = ТаблицаВнешнихПоступлений.Организация
	|			И ТаблицаОстатков.РазделУчета = ТаблицаВнешнихПоступлений.РазделУчета
	|			И ТаблицаОстатков.ВидЗапасов  = ТаблицаВнешнихПоступлений.ВидЗапасов
	|			И ТаблицаОстатков.КоличествоОстаток <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаОстатков
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаВнешнихПоступлений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаНовыхОстатков.Организация,
	|	ТаблицаНовыхОстатков.АналитикаУчетаНоменклатуры,
	|	ТаблицаНовыхОстатков.РазделУчета,
	|	ТаблицаНовыхОстатков.ВидЗапасов,
	|	ТаблицаНовыхОстатков.НовыйКоличествоОстаток КАК КоличествоОстаток,
	|	ТаблицаНовыхОстатков.КоличествоОстатокНаКонецПериода КАК КоличествоОстатокНаКонецПериода,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьОстаток КАК СтоимостьОстаток,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьБезНДСОстаток КАК СтоимостьБезНДСОстаток,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьРеглБезНДСОстаток КАК СтоимостьРеглБезНДСОстаток,
	|	ТаблицаНовыхОстатков.НоваяНДСРеглОстаток КАК НДСРеглОстаток,
	|	ТаблицаНовыхОстатков.НоваяПостояннаяРазницаОстаток КАК ПостояннаяРазницаОстаток,
	|	ТаблицаНовыхОстатков.НоваяВременнаяРазницаОстаток КАК ВременнаяРазницаОстаток,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьДопРасходыОстаток КАК СтоимостьДопРасходыОстаток,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьДопРасходыБезНДСОстаток КАК СтоимостьДопРасходыБезНДСОстаток,
	|	ТаблицаНовыхОстатков.КоличествоПриход,
	|	ТаблицаНовыхОстатков.Период
	|
	|ПОМЕСТИТЬ ТаблицаОстатков
	|
	|ИЗ
	|	ТаблицаНовыхОстатков КАК ТаблицаНовыхОстатков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаНовыхОстатков
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	ТаблицаПериодыПартий КАК ТаблицаПериодыПартий
	|";
	Пока Не Запрос.Выполнить().Пустой() Цикл 
		// Максимальное количество выполнений запроса = максимальному количеству поступлений товара на склад.
	КонецЦикла;

	// Выполняется корректировка количества и стоимости внешних приходов в узел.
	Запрос.Текст = "
	|УНИЧТОЖИТЬ ТаблицаПериодыПартий
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлыКорректировки.Организация                КАК Организация,
	|	ТаблицаУзлыКорректировки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаУзлыКорректировки.РазделУчета                КАК РазделУчета,
	|	ТаблицаУзлыКорректировки.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаУзлыКорректировки.Количество
	|		 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.Стоимость * ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.СтоимостьОстаток, 0)) 
	|			 	 /(ТаблицаУзлыКорректировки.Количество
	|			 	 	 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 	 	  + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ                                 КАК Стоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.СтоимостьБезНДС * ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.СтоимостьБезНДСОстаток, 0)) 
	|			 	 /(ТаблицаУзлыКорректировки.Количество
	|			 	 	 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 	 	  + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ                                 КАК СтоимостьБезНДС,
	|
	|
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.СтоимостьРеглБезНДС * ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.СтоимостьРеглБезНДСОстаток, 0)) 
	|			 	 /(ТаблицаУзлыКорректировки.Количество
	|			 	 	 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 	 	  + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ                                 КАК СтоимостьРеглБезНДС,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.НДСРегл * ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.НДСРеглОстаток, 0)) 
	|			 	 /(ТаблицаУзлыКорректировки.Количество
	|			 	 	 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 	 	  + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ                                 КАК НДСРегл,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.ПостояннаяРазница * ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.ПостояннаяРазницаОстаток, 0)) 
	|			 	 /(ТаблицаУзлыКорректировки.Количество
	|			 	 	 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 	 	  + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ                                 КАК ПостояннаяРазница,
	|	ТаблицаУзлыКорректировки.ПостояннаяРазницаЗнак,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.ВременнаяРазница * ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.ВременнаяРазницаОстаток, 0)) 
	|			 	 /(ТаблицаУзлыКорректировки.Количество
	|			 	 	 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 	 	  + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ                                 КАК ВременнаяРазница,
	|	ТаблицаУзлыКорректировки.ВременнаяРазницаЗнак,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) = 0
	|			ТОГДА 0
	|		КОГДА (ТаблицаУзлыКорректировки.Стоимость * ТаблицаУзлыКорректировки.Количество - ЕСТЬNULL(ТаблицаОстатков.СтоимостьОстаток, 0)) = 0
	|			И ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) <> 0
	|			ТОГДА 0	
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.СтоимостьДопРасходы * ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.СтоимостьДопРасходыОстаток, 0)) 
	|			 	 /(ТаблицаУзлыКорректировки.Количество
	|			 	 	 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0))
	|	КОНЕЦ                                 КАК СтоимостьДопРасходы,
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) = 0
	|			ТОГДА 0
	|		КОГДА (ТаблицаУзлыКорректировки.СтоимостьБезНДС * ТаблицаУзлыКорректировки.Количество - ЕСТЬNULL(ТаблицаОстатков.СтоимостьБезНДСОстаток, 0)) = 0
	|			И ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) <> 0
	|			ТОГДА 0	
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.СтоимостьДопРасходыБезНДС * ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.СтоимостьДопРасходыБезНДСОстаток, 0)) 
	|			 	 /(ТаблицаУзлыКорректировки.Количество
	|			 	 	 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0))
	|	КОНЕЦ                                 КАК СтоимостьДопРасходыБезНДС
	|ИЗ
	|	ТаблицаУзлыКорректировки КАК ТаблицаУзлыКорректировки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО ТаблицаУзлыКорректировки.АналитикаУчетаНоменклатуры = ТаблицаОстатков.АналитикаУчетаНоменклатуры
	|			И ТаблицаУзлыКорректировки.РазделУчета             = ТаблицаОстатков.РазделУчета
	|			И ТаблицаУзлыКорректировки.ВидЗапасов              = ТаблицаОстатков.ВидЗапасов
	|			И ТаблицаУзлыКорректировки.Организация             = ТаблицаОстатков.Организация
	|";
	
	ТаблицаУзлов = Запрос.Выполнить().Выгрузить();
	
	УничтожитьВременныеТаблицы(
		Запрос.МенеджерВременныхТаблиц,
		"ТаблицаОстатков, ТаблицаУзлыКорректировки");
	
	Возврат ТаблицаУзлов;
	
КонецФункции

// Служебная, этап 3.10
Функция ПодготовитьДанныеДляРасчетаСтоимостиРеглПоФИФО(ПараметрыРасчета, Запрос)

	// Формирование таблицы узлов.
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ДляФИФО","");
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	Себестоимость.КоличествоОстаток
	|ПОМЕСТИТЬ ВТНачальныеОстатки
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаНачалоПериода,
	|		Организация В (&МассивОрганизаций)
	|		И (АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов) В (
	|			ВЫБРАТЬ
	|				Таблица.АналитикаУчетаНоменклатуры,
	|				Таблица.РазделУчета,
	|				Таблица.ВидЗапасов
	|			ИЗ ВтАналитикаНоменклатуры КАК Таблица)
	|	) КАК Себестоимость
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	Себестоимость.Организация,
	|	Себестоимость.Количество КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТКонечныеОстатки
	|ИЗ
	|	ВТКэшРасчетныеОстаткиСебестоимостьТоваров КАК Себестоимость
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикаНоменклатуры КАК Таблица
	|		ПО Себестоимость.АналитикаУчетаНоменклатуры = Таблица.АналитикаУчетаНоменклатуры
	|		И Себестоимость.РазделУчета = Таблица.РазделУчета
	|		И Себестоимость.ВидЗапасов = Таблица.ВидЗапасов
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	СУММА(Себестоимость.Количество) КАК КоличествоПриход,
	|	СУММА(ВЫБОР
	|		КОГДА Себестоимость.Количество = 0
	|		 И Себестоимость.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|		 И НЕ Себестоимость.ХозяйственнаяОперация В (&МассивОперацийВозвратыПрошлыхПериодов)
	|			ТОГДА Себестоимость.СтоимостьРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СтоимостьДопРасходы
	|ПОМЕСТИТЬ ВТПриходы
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикаНоменклатуры КАК Таблица
	|		ПО Себестоимость.АналитикаУчетаНоменклатуры = Таблица.АналитикаУчетаНоменклатуры
	|			И Себестоимость.РазделУчета = Таблица.РазделУчета
	|			И Себестоимость.ВидЗапасов = Таблица.ВидЗапасов
	|ГДЕ
	|	Себестоимость.СлужебноеВидДвиженияПриход
	|
	|СГРУППИРОВАТЬ ПО
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	КонечныеОстатки.Организация,
	|	КонечныеОстатки.АналитикаУчетаНоменклатуры,
	|	КонечныеОстатки.РазделУчета,
	|	КонечныеОстатки.ВидЗапасов,
	|	(ВЫБОР
	|		КОГДА КонечныеОстатки.КоличествоОстаток > 0 ТОГДА КонечныеОстатки.КоличествоОстаток
	|		ИНАЧЕ 0 КОНЕЦ) КАК КоличествоОстаток,
	|	(ВЫБОР
	|		КОГДА КонечныеОстатки.КоличествоОстаток > 0 ТОГДА КонечныеОстатки.КоличествоОстаток
	|		ИНАЧЕ 0 КОНЕЦ) КАК КоличествоОстатокНаКонецПериода,
	|	0 КАК СтоимостьРеглОстаток,
	|	0 КАК СтоимостьРеглБезНДСОстаток,
	|	0 КАК НДСРеглОстаток,
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(Приходы.КоличествоПриход, 0) + ЕСТЬNULL(НачальныеОстатки.КоличествоОстаток, 0) > 0
	|			ТОГДА КонечныеОстатки.КоличествоОстаток * ЕСТЬNULL(Приходы.СтоимостьДопРасходы, 0) /
	|					(ЕСТЬNULL(Приходы.КоличествоПриход, 0) + ЕСТЬNULL(НачальныеОстатки.КоличествоОстаток, 0))
	|		ИНАЧЕ 0 КОНЕЦ) КАК СтоимостьДопРасходыОстаток,
	|	ЕСТЬNULL(Приходы.КоличествоПриход, 0) + ЕСТЬNULL(НачальныеОстатки.КоличествоОстаток, 0) КАК КоличествоПриход,
	|	ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1) КАК Период
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	ВТКонечныеОстатки КАК КонечныеОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТНачальныеОстатки КАК НачальныеОстатки
	|		ПО КонечныеОстатки.Организация = НачальныеОстатки.Организация
	|		И КонечныеОстатки.АналитикаУчетаНоменклатуры = НачальныеОстатки.АналитикаУчетаНоменклатуры
	|		И КонечныеОстатки.РазделУчета = НачальныеОстатки.РазделУчета
	|		И КонечныеОстатки.ВидЗапасов = НачальныеОстатки.ВидЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПриходы КАК Приходы
	|		ПО КонечныеОстатки.Организация = Приходы.Организация
	|		И КонечныеОстатки.АналитикаУчетаНоменклатуры = Приходы.АналитикаУчетаНоменклатуры
	|		И КонечныеОстатки.РазделУчета = Приходы.РазделУчета
	|		И КонечныеОстатки.ВидЗапасов = Приходы.ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТНачальныеОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТКонечныеОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТПриходы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	1 
	|ПОМЕСТИТЬ ТаблицаПериодыПартий
	|";
	Запрос.Выполнить();

	Запрос.Текст =
	"
	|УНИЧТОЖИТЬ ТаблицаПериодыПартий
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.Организация                           КАК Организация,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры            КАК АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.РазделУчета                           КАК РазделУчета,
	|	СебестоимостьТоваров.ВидЗапасов                            КАК ВидЗапасов,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, День)) КАК Период
	|
	|ПОМЕСТИТЬ ТаблицаПериодыПартий
	|
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО СебестоимостьТоваров.АналитикаУчетаНоменклатуры = ТаблицаОстатков.АналитикаУчетаНоменклатуры
	|			И СебестоимостьТоваров.РазделУчета = ТаблицаОстатков.РазделУчета
	|			И СебестоимостьТоваров.ВидЗапасов  = ТаблицаОстатков.ВидЗапасов
	|			И СебестоимостьТоваров.Организация = ТаблицаОстатков.Организация
	|			И ТаблицаОстатков.КоличествоОстаток <> 0
	|ГДЕ
	|	СебестоимостьТоваров.СлужебноеВидДвиженияПриход
	|	И СебестоимостьТоваров.СтоимостьРегл <> 0
	|	И СебестоимостьТоваров.Период < ТаблицаОстатков.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.ВидЗапасов,
	|	СебестоимостьТоваров.РазделУчета,
	|	СебестоимостьТоваров.Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПериодыПартий.Организация                         КАК Организация,
	|	ПериодыПартий.АналитикаУчетаНоменклатуры          КАК АналитикаУчетаНоменклатуры,
	|	ПериодыПартий.РазделУчета                         КАК РазделУчета,
	|	ПериодыПартий.ВидЗапасов                          КАК ВидЗапасов,
	|	ПериодыПартий.Период                              КАК Период,
	|	СУММА(ЕСТЬNULL(Себестоимость.Количество, 0))      КАК Количество,
	|	СУММА(
	|		ВЫБОР КОГДА ЕСТЬNULL(Себестоимость.Количество, 0) <> 0 ТОГДА ЕСТЬNULL(Себестоимость.СтоимостьРеглБезНДС, 0)
	|		ИНАЧЕ 0 КОНЕЦ
	|	) КАК СтоимостьРеглБезНДС,
	|	СУММА(
	|		ВЫБОР КОГДА ЕСТЬNULL(Себестоимость.Количество, 0) <> 0 ТОГДА ЕСТЬNULL(Себестоимость.НДСРегл, 0)
	|		ИНАЧЕ 0 КОНЕЦ
	|	) КАК НДСРегл,
	|	СУММА(
	|		ВЫБОР КОГДА ЕСТЬNULL(Себестоимость.Количество, 0) <> 0 ТОГДА ЕСТЬNULL(Себестоимость.СтоимостьРегл, 0)
	|		ИНАЧЕ 0 КОНЕЦ
	|	) КАК СтоимостьРегл
	|
	|ПОМЕСТИТЬ ТаблицаВнешнихПоступлений
	|
	|ИЗ
	|	ТаблицаПериодыПартий КАК ПериодыПартий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|		ПО ПериодыПартий.АналитикаУчетаНоменклатуры = Себестоимость.АналитикаУчетаНоменклатуры
	|			И ПериодыПартий.РазделУчета             = Себестоимость.РазделУчета
	|			И ПериодыПартий.ВидЗапасов              = Себестоимость.ВидЗапасов
	|			И ПериодыПартий.Организация             = Себестоимость.Организация
	|			И Себестоимость.СлужебноеВидДвиженияПриход
	|			И (Себестоимость.Период МЕЖДУ ПериодыПартий.Период И КОНЕЦПЕРИОДА(ПериодыПартий.Период, ДЕНЬ))
	|			И (Себестоимость.ХозяйственнаяОперация В (&МассивОперацийПоступлениеВнешнее))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПартий.АналитикаУчетаНоменклатуры,
	|	ПериодыПартий.РазделУчета,
	|	ПериодыПартий.ВидЗапасов,
	|	ПериодыПартий.Организация,
	|	ПериодыПартий.Период
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.РазделУчета,
	|	ТаблицаОстатков.ВидЗапасов,
	|	(ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток > ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ТаблицаОстатков.КоличествоОстаток - ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|		ИНАЧЕ 0 КОНЕЦ) КАК НовыйКоличествоОстаток,
	|	ТаблицаОстатков.КоличествоОстатокНаКонецПериода,
	|	ТаблицаОстатков.КоличествоПриход,
	|
	|	ТаблицаОстатков.СтоимостьРеглОстаток +
	|	ВЫБОР КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0) ТОГДА
	|		ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьРегл, 0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьРегл, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ КАК НоваяСтоимостьРеглОстаток,
	|
	|	ТаблицаОстатков.СтоимостьРеглБезНДСОстаток +
	|	ВЫБОР КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0) ТОГДА
	|		ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьРеглБезНДС, 0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьРеглБезНДС, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ КАК НоваяСтоимостьРеглБезНДСОстаток,
	|
	|	ТаблицаОстатков.НДСРеглОстаток +
	|	ВЫБОР КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0) ТОГДА
	|		ЕСТЬNULL(ТаблицаВнешнихПоступлений.НДСРегл, 0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ТаблицаВнешнихПоступлений.НДСРегл, 0) * ТаблицаОстатков.КоличествоОстаток / ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ КАК НоваяНДСРеглОстаток,
	|
	|
	|	ТаблицаОстатков.СтоимостьДопРасходыОстаток КАК НоваяСтоимостьДопРасходыОстаток,
	|	ТаблицаВнешнихПоступлений.Период КАК Период
	|
	|ПОМЕСТИТЬ ТаблицаНовыхОстатков
	|
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВнешнихПоступлений КАК ТаблицаВнешнихПоступлений
	|		ПО ТаблицаОстатков.АналитикаУчетаНоменклатуры = ТаблицаВнешнихПоступлений.АналитикаУчетаНоменклатуры
	|			И ТаблицаОстатков.Организация = ТаблицаВнешнихПоступлений.Организация
	|			И ТаблицаОстатков.РазделУчета = ТаблицаВнешнихПоступлений.РазделУчета
	|			И ТаблицаОстатков.ВидЗапасов  = ТаблицаВнешнихПоступлений.ВидЗапасов
	|			И ТаблицаОстатков.КоличествоОстаток <> 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаОстатков
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаВнешнихПоступлений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаНовыхОстатков.Организация,
	|	ТаблицаНовыхОстатков.АналитикаУчетаНоменклатуры,
	|	ТаблицаНовыхОстатков.РазделУчета,
	|	ТаблицаНовыхОстатков.ВидЗапасов,
	|	ТаблицаНовыхОстатков.НовыйКоличествоОстаток          КАК КоличествоОстаток,
	|	ТаблицаНовыхОстатков.КоличествоОстатокНаКонецПериода КАК КоличествоОстатокНаКонецПериода,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьРеглОстаток       КАК СтоимостьРеглОстаток,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьРеглБезНДСОстаток КАК СтоимостьРеглБезНДСОстаток,
	|	ТаблицаНовыхОстатков.НоваяНДСРеглОстаток             КАК НДСРеглОстаток,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьДопРасходыОстаток КАК СтоимостьДопРасходыОстаток,
	|	ТаблицаНовыхОстатков.КоличествоПриход,
	|	ТаблицаНовыхОстатков.Период
	|
	|ПОМЕСТИТЬ ТаблицаОстатков
	|
	|ИЗ
	|	ТаблицаНовыхОстатков КАК ТаблицаНовыхОстатков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ТаблицаНовыхОстатков
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	ТаблицаПериодыПартий КАК ТаблицаПериодыПартий
	|";
	Пока Не Запрос.Выполнить().Пустой() Цикл 
		// Максимальное количество выполнений запроса - максимальному количеству поступлений товара на склад.
	КонецЦикла;

	// Выполняется корректировка количества и стоимости внешних приходов в узел.
	Запрос.Текст = "
	|УНИЧТОЖИТЬ ТаблицаПериодыПартий
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаУзлыКорректировки.Организация                КАК Организация,
	|	ТаблицаУзлыКорректировки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаУзлыКорректировки.РазделУчета                КАК РазделУчета,
	|	ТаблицаУзлыКорректировки.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		+ ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) КАК Количество,
	|
	|	(ВЫБОР КОГДА ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		+ ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|	ТОГДА
	|		0
	|	КОГДА (ТаблицаУзлыКорректировки.Стоимость * ТаблицаУзлыКорректировки.Количество - ЕСТЬNULL(ТаблицаОстатков.СтоимостьРеглОстаток, 0)) = 0
	|		И ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) <> 0
	|		ТОГДА 0	
	|	ИНАЧЕ
	|		(ТаблицаУзлыКорректировки.Стоимость * ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.СтоимостьРеглОстаток, 0))
	|		/(ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		+ ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ)
	|	+ (ВЫБОР КОГДА ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) = 0 
	|	ТОГДА
	|		0
	|	КОГДА (ТаблицаУзлыКорректировки.Стоимость * ТаблицаУзлыКорректировки.Количество - ЕСТЬNULL(ТаблицаОстатков.СтоимостьРеглОстаток, 0)) = 0
	|		И ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) <> 0
	|		ТОГДА 0	
	|	ИНАЧЕ
	|		(ТаблицаУзлыКорректировки.СтоимостьДопРасходы * ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.СтоимостьДопРасходыОстаток, 0))
	|		/(ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0))
	|	КОНЕЦ) КАК Стоимость,
	|
	|	(ВЫБОР КОГДА ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		+ ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|	ТОГДА
	|		0
	|	КОГДА (ТаблицаУзлыКорректировки.СтоимостьРеглБезНДС * ТаблицаУзлыКорректировки.Количество - ЕСТЬNULL(ТаблицаОстатков.СтоимостьРеглБезНДСОстаток, 0)) = 0
	|		И ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) <> 0
	|   ТОГДА 
	|		0	
	|	ИНАЧЕ
	|		(ТаблицаУзлыКорректировки.СтоимостьРеглБезНДС * ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.СтоимостьРеглБезНДСОстаток, 0))
	|		/(ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		+ ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ)
	|		КАК СтоимостьРеглБезНДС,
	|
	|	(ВЫБОР КОГДА ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		+ ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|	ТОГДА
	|		0
	|	КОГДА (ТаблицаУзлыКорректировки.НДСРегл * ТаблицаУзлыКорректировки.Количество - ЕСТЬNULL(ТаблицаОстатков.НДСРеглОстаток, 0)) = 0
	|		И ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0) <> 0
	|		ТОГДА 0	
	|	ИНАЧЕ
	|		(ТаблицаУзлыКорректировки.НДСРегл * ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.НДСРеглОстаток, 0))
	|		/(ТаблицаУзлыКорректировки.Количество
	|		- ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		+ ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0))
	|	КОНЕЦ)
	|		КАК НДСРегл,
	|
	|
	|	ТаблицаУзлыКорректировки.СтоимостьБезНДС           КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьДопРасходы,
	|	ТаблицаУзлыКорректировки.СтоимостьДопРасходыБезНДС КАК СтоимостьДопРасходыБезНДС,
	|	ТаблицаУзлыКорректировки.ПостояннаяРазница         КАК ПостояннаяРазница,
	|	ТаблицаУзлыКорректировки.ПостояннаяРазницаЗнак,
	|	ТаблицаУзлыКорректировки.ВременнаяРазница          КАК ВременнаяРазница,
	|	ТаблицаУзлыКорректировки.ВременнаяРазницаЗнак
	|ИЗ
	|	ТаблицаУзлыКорректировки КАК ТаблицаУзлыКорректировки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО ТаблицаУзлыКорректировки.АналитикаУчетаНоменклатуры = ТаблицаОстатков.АналитикаУчетаНоменклатуры
	|			И ТаблицаУзлыКорректировки.РазделУчета             = ТаблицаОстатков.РазделУчета
	|			И ТаблицаУзлыКорректировки.ВидЗапасов              = ТаблицаОстатков.ВидЗапасов
	|			И ТаблицаУзлыКорректировки.Организация             = ТаблицаОстатков.Организация
	|";
	
	ТаблицаУзлов = Запрос.Выполнить().Выгрузить();
	
	УничтожитьВременныеТаблицы(
		Запрос.МенеджерВременныхТаблиц,
		"ТаблицаОстатков, ТаблицаУзлыКорректировки");
	
	Возврат ТаблицаУзлов;

КонецФункции


// Служебная, этап 3.7, 3.11
// Процедура выполняет расчет себестоимости аналитики номенклатуры в узлах корректировки стоимости списания.
// Результатом работы данной процедуры будет временная таблица "ВтТаблицаРешений", содержащая себестоимость
// в каждом узле корректировки.
//
Процедура РешитьСЛУ(ПараметрыРасчета, РасчетСтоимостиРегл)
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	СчетчикИтераций   = 1;
	ТекущееОтклонение = 1;
	
	Пока ТекущееОтклонение > ПараметрыРасчета.ТребуемаяТочность И СчетчикИтераций <= ПараметрыРасчета.МаксКоличествоИтераций Цикл
		
		Запрос.Текст = 
		"
		// 0 Расчет коэффициентов (количество перехода из состояния в состояние) уравнения.
		|ВЫБРАТЬ
		|	УзлыКорректировки.НомерУзла                                     КАК НомерУзла,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.Стоимость)                  КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициент,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.СтоимостьБезНДС)            КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициентБезНДС,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.ПостояннаяРазница)          КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициентПостояннаяРазница,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.ВременнаяРазница)           КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициентВременнаяРазница,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.СтоимостьРеглБезНДС)        КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициентСтоимостьРеглБезНДС,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.НДСРегл)                    КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициентНДСРегл,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.СтоимостьДопРасходы)        КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициентДопРасходы,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.СтоимостьДопРасходыБезНДС)  КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициентДопРасходыБезНДС,
		|
		|	МАКСИМУМ(УзлыКорректировки.ВременнаяРазницаЗнак) КАК ВременнаяРазницаЗнак,
		|	МАКСИМУМ(УзлыКорректировки.ПостояннаяРазницаЗнак) КАК ПостояннаяРазницаЗнак,
		|
		|	ВЫРАЗИТЬ(СУММА(
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПеремещенияСписания.ПередачаВЭксплуатацию, ЛОЖЬ) ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(ВтТаблицаРешений.Стоимость, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0) КОНЕЦ) КАК ЧИСЛО(23,10))
		|		/ УзлыКорректировки.Количество КАК Стоимость,
		|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВтТаблицаРешений.СтоимостьБезНДС, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0)) КАК ЧИСЛО(23,10))
		|		/ УзлыКорректировки.Количество КАК СтоимостьБезНДС,
		|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВтТаблицаРешений.ПостояннаяРазница, 0) * ЕСТЬNULL(ВтТаблицаРешений.ПостояннаяРазницаЗнак, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0)) КАК ЧИСЛО(23,10))
		|		/ УзлыКорректировки.Количество КАК ПостояннаяРазница,
		|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВтТаблицаРешений.ВременнаяРазница, 0) * ЕСТЬNULL(ВтТаблицаРешений.ВременнаяРазницаЗнак, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0)) КАК ЧИСЛО(23,10))
		|		/ УзлыКорректировки.Количество КАК ВременнаяРазница,
		|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВтТаблицаРешений.СтоимостьРеглБезНДС, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0)) КАК ЧИСЛО(23,10))
		|		/ УзлыКорректировки.Количество КАК СтоимостьРеглБезНДС,
		|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВтТаблицаРешений.НДСРегл, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0)) КАК ЧИСЛО(23,10))
		|		/ УзлыКорректировки.Количество КАК НДСРегл,
		|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВтТаблицаРешений.СтоимостьДопРасходы, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0)) КАК ЧИСЛО(23,10))
		|		/ УзлыКорректировки.Количество КАК СтоимостьДопРасходы,
		|	ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВтТаблицаРешений.СтоимостьДопРасходыБезНДС, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0)) КАК ЧИСЛО(23,10))
		|		/ УзлыКорректировки.Количество КАК СтоимостьДопРасходыБезНДС
		|
		|ПОМЕСТИТЬ ВременнаяТаблицаРешений
		|ИЗ
		|	ВтУзлыКорректировки КАК УзлыКорректировки
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтПеремещенияСписания КАК ПеремещенияСписания
		|		ПО УзлыКорректировки.НомерУзла = ПеремещенияСписания.НомерУзлаПриемник
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаРешений КАК ВтТаблицаРешений
		|		ПО ПеремещенияСписания.НомерУзлаИсточник = ВтТаблицаРешений.НомерУзла
		|ГДЕ
		|	УзлыКорректировки.Количество <> 0
		|	И ЕСТЬNULL(ВтТаблицаРешений.Стоимость, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0) > -999999999.999999999
		|	И ЕСТЬNULL(ВтТаблицаРешений.Стоимость, 0) * ЕСТЬNULL(ПеремещенияСписания.Количество, 0) < 999999999.999999999
		|
		|СГРУППИРОВАТЬ ПО
		|	УзлыКорректировки.НомерУзла,
		|	УзлыКорректировки.Количество
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		// 1 Расчет ошибки расчета.
		|ВЫБРАТЬ
		|	ЕСТЬNULL(
		|		МАКСИМУМ(
		|			ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.Стоимость,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициент
		|			 + ВременнаяТаблицаРешений.Стоимость)) > 0 ТОГДА
		|
		|					ЕСТЬNULL(ТаблицаРешений.Стоимость,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициент
		|				 		+ ВременнаяТаблицаРешений.Стоимость)
		|			ИНАЧЕ
		|				-(
		|					ЕСТЬNULL(ТаблицаРешений.Стоимость,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициент
		|						+ ВременнаяТаблицаРешений.Стоимость)
		|					)
		|			КОНЕЦ
		|			)
		|		,0) КАК Отклонение,
		|	ЕСТЬNULL(
		|		МАКСИМУМ(
		|			ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.СтоимостьБезНДС,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентБезНДС
		|			 + ВременнаяТаблицаРешений.СтоимостьБезНДС)) > 0 ТОГДА
		|
		|					ЕСТЬNULL(ТаблицаРешений.СтоимостьБезНДС,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентБезНДС
		|				 		+ ВременнаяТаблицаРешений.СтоимостьБезНДС)
		|			ИНАЧЕ
		|				-(
		|					ЕСТЬNULL(ТаблицаРешений.СтоимостьБезНДС,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентБезНДС
		|						+ ВременнаяТаблицаРешений.СтоимостьБезНДС)
		|					)
		|			КОНЕЦ
		|			)
		|		,0) КАК ОтклонениеБезНДС,
		|	ЕСТЬNULL(
		|		МАКСИМУМ(
		|			ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.СтоимостьРеглБезНДС,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентСтоимостьРеглБезНДС
		|			 + ВременнаяТаблицаРешений.СтоимостьРеглБезНДС)) > 0 ТОГДА
		|
		|					ЕСТЬNULL(ТаблицаРешений.СтоимостьРеглБезНДС,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентСтоимостьРеглБезНДС
		|				 		+ ВременнаяТаблицаРешений.СтоимостьРеглБезНДС)
		|			ИНАЧЕ
		|				-(
		|					ЕСТЬNULL(ТаблицаРешений.СтоимостьРеглБезНДС,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентСтоимостьРеглБезНДС
		|						+ ВременнаяТаблицаРешений.СтоимостьРеглБезНДС)
		|					)
		|			КОНЕЦ
		|			)
		|		,0) КАК ОтклонениеСтоимостьРеглБезНДС,
		|	ЕСТЬNULL(
		|		МАКСИМУМ(
		|			ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.НДСРегл,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентНДСРегл
		|			 + ВременнаяТаблицаРешений.НДСРегл)) > 0 ТОГДА
		|
		|					ЕСТЬNULL(ТаблицаРешений.НДСРегл,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентНДСРегл
		|				 		+ ВременнаяТаблицаРешений.НДСРегл)
		|			ИНАЧЕ
		|				-(
		|					ЕСТЬNULL(ТаблицаРешений.НДСРегл,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентНДСРегл
		|						+ ВременнаяТаблицаРешений.НДСРегл)
		|					)
		|			КОНЕЦ
		|			)
		|		,0) КАК ОтклонениеНДСРегл,
		|	ЕСТЬNULL(
		|		МАКСИМУМ(
		|			ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.СтоимостьДопРасходы,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентДопРасходы
		|					 + ВременнаяТаблицаРешений.СтоимостьДопРасходы)) >  0 ТОГДА
		|
		|					ЕСТЬNULL(ТаблицаРешений.СтоимостьДопРасходы,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентДопРасходы
		|					 	+ ВременнаяТаблицаРешений.СтоимостьДопРасходы)
		|
		|			ИНАЧЕ
		|				-(
		|					ЕСТЬNULL(ТаблицаРешений.СтоимостьДопРасходы,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентДопРасходы
		|						+ ВременнаяТаблицаРешений.СтоимостьДопРасходы)
		|					)
		|			КОНЕЦ
		|			)
		|		,0) КАК ОтклонениеДопРасходы,
		|	ЕСТЬNULL(
		|		МАКСИМУМ(
		|			ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.СтоимостьДопРасходы,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентДопРасходы
		|					 + ВременнаяТаблицаРешений.СтоимостьДопРасходы)) > 0 ТОГДА
		|
		|					ЕСТЬNULL(ТаблицаРешений.СтоимостьДопРасходы,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентДопРасходы
		|						+ ВременнаяТаблицаРешений.СтоимостьДопРасходы)
		|
		|			ИНАЧЕ
		|				-(
		|					ЕСТЬNULL(ТаблицаРешений.СтоимостьДопРасходы,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициентДопРасходы
		|						+ ВременнаяТаблицаРешений.СтоимостьДопРасходы)
		|					)
		|			КОНЕЦ
		|			)
		|		,0) КАК ОтклонениеДопРасходыБезНДС
		|ИЗ
		|	ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаРешений КАК ТаблицаРешений
		|		ПО ВременнаяТаблицаРешений.НомерУзла = ТаблицаРешений.НомерУзла
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		// 2 Удаление таблиц.
		|УНИЧТОЖИТЬ ВтТаблицаРешений
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		// 3 Суммирование коэффициентов.
		|ВЫБРАТЬ
		|	ВременнаяТаблицаРешений.НомерУзла  КАК НомерУзла,
		|	ВЫБОР
		|	 	КОГДА ВременнаяТаблицаРешений.СвободныйКоэффициентВременнаяРазница * ВременнаяТаблицаРешений.ВременнаяРазницаЗнак + ВременнаяТаблицаРешений.ВременнаяРазница < 0
		|			ТОГДА -1
		|			ИНАЧЕ 1
	    |	КОНЕЦ КАК ВременнаяРазницаЗнак,
		|	ВЫБОР
		|	 	КОГДА ВременнаяТаблицаРешений.СвободныйКоэффициентПостояннаяРазница * ВременнаяТаблицаРешений.ПостояннаяРазницаЗнак	+ ВременнаяТаблицаРешений.ПостояннаяРазница < 0
		|			ТОГДА -1
		|			ИНАЧЕ 1
	    |	КОНЕЦ КАК ПостояннаяРазницаЗнак,
		|	ВЫРАЗИТЬ(
		|		ВременнаяТаблицаРешений.СвободныйКоэффициент
		|			+ ВременнаяТаблицаРешений.Стоимость
		|		КАК ЧИСЛО(23,10))              КАК Стоимость,
		|	ВЫРАЗИТЬ(
		|		ВременнаяТаблицаРешений.СвободныйКоэффициентБезНДС
		|			+ ВременнаяТаблицаРешений.СтоимостьБезНДС
		|		КАК ЧИСЛО(23,10))              КАК СтоимостьБезНДС,
		|	ВЫРАЗИТЬ(ВЫБОР
		|	 	КОГДА ВременнаяТаблицаРешений.СвободныйКоэффициентВременнаяРазница * ВременнаяТаблицаРешений.ВременнаяРазницаЗнак + ВременнаяТаблицаРешений.ВременнаяРазница < 0
		|			ТОГДА -(ВременнаяТаблицаРешений.СвободныйКоэффициентВременнаяРазница * ВременнаяТаблицаРешений.ВременнаяРазницаЗнак + ВременнаяТаблицаРешений.ВременнаяРазница)
		|			ИНАЧЕ ВременнаяТаблицаРешений.СвободныйКоэффициентВременнаяРазница * ВременнаяТаблицаРешений.ВременнаяРазницаЗнак + ВременнаяТаблицаРешений.ВременнаяРазница
	    |	КОНЕЦ КАК ЧИСЛО(23,10)) КАК ВременнаяРазница,
		|	ВЫРАЗИТЬ(ВЫБОР
		|	 	КОГДА ВременнаяТаблицаРешений.СвободныйКоэффициентПостояннаяРазница * ВременнаяТаблицаРешений.ПостояннаяРазницаЗнак	+ ВременнаяТаблицаРешений.ПостояннаяРазница < 0
		|			ТОГДА -(ВременнаяТаблицаРешений.СвободныйКоэффициентПостояннаяРазница * ВременнаяТаблицаРешений.ПостояннаяРазницаЗнак	+ ВременнаяТаблицаРешений.ПостояннаяРазница)
		|			ИНАЧЕ ВременнаяТаблицаРешений.СвободныйКоэффициентПостояннаяРазница * ВременнаяТаблицаРешений.ПостояннаяРазницаЗнак	+ ВременнаяТаблицаРешений.ПостояннаяРазница
	    |	КОНЕЦ КАК ЧИСЛО(23,10)) КАК ПостояннаяРазница,
		|
		|	ВЫРАЗИТЬ(
		|		ВременнаяТаблицаРешений.СвободныйКоэффициентСтоимостьРеглБезНДС
		|			+ ВременнаяТаблицаРешений.СтоимостьРеглБезНДС
		|		КАК ЧИСЛО(23,10))              КАК СтоимостьРеглБезНДС,
		|	ВЫРАЗИТЬ(
		|		ВременнаяТаблицаРешений.СвободныйКоэффициентНДСРегл
		|			+ ВременнаяТаблицаРешений.НДСРегл
		|		КАК ЧИСЛО(23,10))              КАК НДСРегл,
		|
		|	ВЫРАЗИТЬ(
		|		ВременнаяТаблицаРешений.СвободныйКоэффициентДопРасходы
		|			+ ВременнаяТаблицаРешений.СтоимостьДопРасходы 
		|		КАК ЧИСЛО(23,10))              КАК СтоимостьДопРасходы,
		|	ВЫРАЗИТЬ(
		|		ВременнаяТаблицаРешений.СвободныйКоэффициентДопРасходыБезНДС
		|			+ ВременнаяТаблицаРешений.СтоимостьДопРасходыБезНДС 
		|		КАК ЧИСЛО(23,10))              КАК СтоимостьДопРасходыБезНДС
		|
		|ПОМЕСТИТЬ ВтТаблицаРешений
		|
		|ИЗ
		|	ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		// 4 Удаление таблицы.
		|	УНИЧТОЖИТЬ ВременнаяТаблицаРешений
		|";
		
		ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВтТаблицаРешений");
		РезультатЗапроса = Запрос.ВыполнитьПакет()[1];
		ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ТекущееОтклонение =	Макс(
				Выборка.Отклонение,
				Выборка.ОтклонениеБезНДС,
				Выборка.ОтклонениеСтоимостьРеглБезНДС,
				Выборка.ОтклонениеНДСРегл,
				Выборка.ОтклонениеДопРасходы,
				Выборка.ОтклонениеДопРасходыБезНДС);
		Иначе
			ТекущееОтклонение = 0;
		КонецЕсли;
		
		СчетчикИтераций = СчетчикИтераций + 1;
		
	КонецЦикла;
	
	// Добавим запись в протокол расчета
	СтрокаПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выполнено решение СЛУ (итерации / отклонение): %1 / %2';uk='Виконано рішення СЛР (ітерації / відхилення): %1 / %2'"),
		ПротоколРасчета_ПредставлениеЗначения(СчетчикИтераций),
		ПротоколРасчета_ПредставлениеЗначения(ТекущееОтклонение));
		
	ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, СтрокаПротокола);
	
	// Для целей отладки сохраним СЛУ
	СохранитьДанныеСЛУ(ПараметрыРасчета, РасчетСтоимостиРегл);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыРаботыСДвижениями

// Добавляет новую строку в таблицу движений указанного регистра и заполняет служебные поля.
//
Функция ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля = Неопределено)
	
	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
	
	// При необходимости кэшируем сформированную порцию движений
	Если ОписаниеРегистра.Таблица.Количество() >= ПараметрыРасчета.КоличествоСтрокТЗ Тогда
		КэшироватьСформированныеДвижения(ПараметрыРасчета, ИмяРегистра, Ложь);
	КонецЕсли;
	
	// Добавим новую строку в таблицу движений и заполним ее поля
	Запись = ОписаниеРегистра.Таблица.Добавить();
	
	Если ЗначениеЗаполнено(КопируемыеПоля) Тогда
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения, КопируемыеПоля);
	Иначе
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения);
	КонецЕсли;
	
	// Заполним поле Регистратор из обязательного свойства ДокументДвижения источника ДанныеДвижения.
	Запись.Регистратор = ДанныеДвижения.ДокументДвижения;
	
	// Заполним пустой регистратор соответствующим документом расчета себестоимости
	Если ПараметрыРасчета.Отладка.ИсправлятьПустойРегистратор И НЕ ЗначениеЗаполнено(Запись.Регистратор) Тогда
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			Запись.Регистратор = ПараметрыРасчета.ДокументыРасчетаПоОрганизациям.Получить(ДанныеДвижения.Организация);
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			Запись.Регистратор = ПараметрыРасчета.ДокументыРасчетаПоОрганизациям.Получить(
				ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров.Получить(ДанныеДвижения.АналитикаУчетаПоПартнерам));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Регистратор) Тогда
			ТекстОшибки = НСтр("ru='Документ %1 установлен регистратором движения регистра %2 вместо %3,
                |который не может иметь движений по данному регистру.'
                |;uk='Документ %1 встановлений реєстратором руху регістра %2 замість %3,
                |який не може мати рухів з даного регістру.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Запись.Регистратор,
				ИмяРегистра,
				ДанныеДвижения.ДокументДвижения);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если регистратор не заполнен, то запомним информацию об ошибке
	Если НЕ ЗначениеЗаполнено(Запись.Регистратор) Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеДвижения.ДокументДвижения) Тогда
			
			// Ошибка в запросах - не заполнено обязательное поле ДокументДвижения
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не заполнено свойство ДокументДвижения для движения по регистру ""%1""';uk='Не заповнена властивість ДокументДвижения для руху по регістру ""%1""'"),
				ИмяРегистра);
			
		Иначе
			
			// Ошибка в метаданных - документ не является регистратором для данного регистра
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ ""%1"" не может иметь движений по регистру ""%2""';uk='Документ ""%1"" не може мати рухів по регістру ""%2""'"),
				СокрЛП(ДанныеДвижения.ДокументДвижения),
				ИмяРегистра);
			
		КонецЕсли;
		
		ПараметрыРасчета.БылиОшибки = Истина;
		ПараметрыРасчета.ОшибкиДвижений.Добавить(ТекстОшибки);
		
		Для Каждого КлючИЗначение Из ПараметрыРасчета.ДокументыРасчетаПоОрганизациям Цикл
			// Заполним регистратор произвольным "первым" документом расчета себестоимости - чтобы движения можно было записать.
			// Расчет все равно в итоге будет завершен с ошибкой, но т.о. можно получить информацию о всех ошибочных регистраторах.
			Запись.Регистратор = КлючИЗначение.Ключ;
			Прервать;
		КонецЦикла;

	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

// Переносит новые движения регистра из таблицы значений во временную таблицу.
// Процедуру необходимо вызывать в конце каждого этапа, на котором формируются какие-то движения,
// иначе следующий этап может не учесть движения предыдущего.
//
Процедура КэшироватьСформированныеДвижения(ПараметрыРасчета, ИмяРегистра = Неопределено, ОкончаниеЭтапа = Истина)
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ИмяРегистра <> Неопределено И НРег(КлючИЗначение.Ключ) <> НРег(ИмяРегистра) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда
			
			// Переместим сформированные движения из ОписаниеРегистра.Таблица во временную таблицу ВТКэш
			
			// Дозаполним поле СлужебноеВидДвиженияПриход
			Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
				Для Каждого Запись Из ОписаниеРегистра.Таблица Цикл
					Запись.СлужебноеВидДвиженияПриход = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход);
				КонецЦикла;
			КонецЕсли;
			
			// Дозаполним поле РасчетСебестоимости
			Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(Истина, "РасчетСебестоимости");
			КонецЕсли;
			
			// Добавим информацию в протокол 
			ПротоколРасчета_КэшированиеСформированныхДвижений(
				ПараметрыРасчета,
				КлючИЗначение.Ключ,
				ОписаниеРегистра.Таблица.Количество());
			
			// Добавим данные из таблицы во временную таблицу
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета.МенеджерВременныхТаблиц, 
				"ВТКэш" + КлючИЗначение.Ключ,
				ОписаниеРегистра.Таблица,
				ОписаниеРегистра.ПоляКэшаРегистра,
				ОписаниеРегистра.РесурсыРегистра);
				
			// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу
			ОписаниеРегистра.Таблица.Очистить();
			
			// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшЗаписи
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
			
		КонецЕсли;
		
		Если ОкончаниеЭтапа И ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда
			
			// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшЗаписи нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).
			
			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
			 И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда      // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиЗаписями.Свойство(КлючИЗначение.Ключ)  // нужна таблица записей 
			 И ПараметрыРасчета.РегистрыСРасчетнымиЗаписями[КлючИЗначение.Ключ] Тогда       // нужно автообновление таблицы записей
				ОбновитьРасчетныеЗаписиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает все сформированные новые движения.
//
Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЗаписиДвижений(ПараметрыРасчета);
	
	// Проверим, что при расчете не было ошибочно сформировано движений по организациям, не входящим в отбор
	ПроверитьКорректностьОрганизацииВДвижениях(ПараметрыРасчета);
	
	ОбработаноРегистров = 0;
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ПараметрыРасчета.ПредварительныйРасчет
		 И КлючИЗначение.Ключ <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
			// При предварительном расчете пересчитывается только стоимость товаров.
			// Движения по всем остальным регистрам остаются без изменений.
			Продолжить;
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшИзмененныеДокументы
		СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Подсчитаем количество документов с измененными движениями
		КоличествоДокументов = УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументы");
		
		ПротоколРасчета_ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, КоличествоДокументов);
		
		Если КоличествоДокументов > 0 Тогда
			
			// Шаблоны для замены в тексте запроса
			ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
				|		Т."));
			ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
				|		Т."));
			ТекстПоляКэшаРегистра = СтрЗаменить(
				ТекстПоляКэшаРегистра,
				"Т.СлужебноеВидДвиженияПриход",
				"ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КОНЕЦ КАК ВидДвижения");
				
			ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
				|		Т."));
			ТекстПоляСортировки = "Т.Регистратор, Т.Период"
				+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
				+ ?(ОписаниеРегистра.ЭтоРегистрНакопления, ", Т.РасчетСебестоимости", "");
			
			Если ОписаниеРегистра.ЕстьОрганизация Тогда
				ОтборПоОрганизации = "И Т.Организация В (&МассивОрганизаций)";
			ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
				ОтборПоОрганизации = "И Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
			Иначе
				ОтборПоОрганизации = "";
			КонецЕсли;
			
			// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
			СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			// Сформируем ВТКэшОчищаемыеДокументы
			СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			// Подготовим данные для очистки старых движений
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТКэшОчищаемыеДокументы КАК Т";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если ПараметрыРасчета.МаксимальноеКоличествоФЗ < 2 Тогда
				
				// Запишем движения синхронно, без фоновых заданий.
				
				// Очистим старые движения у выбранных регистраторов
				Если НЕ РезультатЗапроса.Пустой() Тогда
					ЗаписатьДвиженияПоРегистру(РезультатЗапроса.Выбрать(), ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.РазмерНабораЗаписей);
				КонецЕсли;
				
				// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- движения документа по другим периодам и/или организациям
				//	- новые "расчетные" движения документа
				Запрос.Текст =
				"ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	%ВидРегистра.%ИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|			И (НЕ %ОтборРасчетныеДвижения)
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	%ОтборПоОрганизации
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	%ПоляКэшаРегистра
				|ИЗ
				|	ВТКэш%ИмяРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|
				|УПОРЯДОЧИТЬ ПО
				|	%Порядок";
				
				// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидРегистра",
					?(ОписаниеРегистра.ЭтоРегистрНакопления, "РегистрНакопления", "РегистрСведений"));
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения",
					?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", ТекстПоляСортировки);
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра",    			 КлючИЗначение.Ключ);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",   		 ТекстПоляКэшаРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации",   	     ОтборПоОрганизации);
				
				// Выберем движения
				Выборка = Запрос.Выполнить().Выбрать();
				
				ПротоколРасчета_ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, , Выборка.Количество());
				
				ЗаписатьДвиженияПоРегистру(Выборка, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.РазмерНабораЗаписей);
				
			Иначе
					
				// Запишем движения асинхронно, в фоновых заданиях.
				
				Если ПараметрыРасчета.ОтключатьИтогиПередЗаписью
				 И ОписаниеРегистра.ЕстьСвойствоВидДвижения // регистр остатков
				 И ОписаниеРегистра.МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов() Тогда
					ОписаниеРегистра.МенеджерРегистра.УстановитьИспользованиеТекущихИтогов(Ложь); // отключим итоги
					ПараметрыРасчета.РегистрыСОтключеннымиИтогами.Вставить(ОписаниеРегистра.МенеджерРегистра); // запомним регистр - потом включим итоги обратно
				КонецЕсли;
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					// Очистим старые движения движения у выбранных регистраторов.
					ЗапуститьЗаданиеЗаписи(
						ПараметрыРасчета,
						ОписаниеРегистра,
						РезультатЗапроса.Выгрузить(),
						НСтр("ru='Расчет себестоимости, очистка старых движений.';uk='Розрахунок собівартості, видалення старих рухів.'"));
					
				КонецЕсли;
				
				// Деление регистраторов на порции для параллельной записи:
				// - размер порции будет примерно соответствовать ограничению на максимальный размер таблицы значений
				// - один документ не может присутствовать в нескольких порциях - иначе одно задание записи затрет результаты другого
				// - "большие" документы пишутся по одному документу на порцию - считаем, что движения документа всегда "поместятся" в таблицу значений
				Запрос.УстановитьПараметр("КоличествоДвиженийВФЗ", ПараметрыРасчета.КоличествоДвиженийВФЗ);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.Регистратор   		  	КАК Регистратор,
				|	СУММА(Т.КоличествоДвижений) КАК КоличествоДвижений
				|ПОМЕСТИТЬ ВТКоличествоДвиженийДокументов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ИзмененныеДокументы.Регистратор   КАК Регистратор,
				|		СУММА(1) 						  КАК КоличествоДвижений
				|	ИЗ
				|		%ВидРегистра.%ИмяРегистра КАК Т
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|	ГДЕ
				|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|		%ОтборПоОрганизации
				|		И (НЕ %ОтборРасчетныеДвижения)
				|	СГРУППИРОВАТЬ ПО
				|		ИзмененныеДокументы.Регистратор
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		Т.Регистратор,
				|		СУММА(1) КАК КоличествоДвижений
				|	ИЗ
				|		ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|	СГРУППИРОВАТЬ ПО
				|		Т.Регистратор
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ИзмененныеДокументы.Регистратор,
				|		СУММА(1) КАК КоличествоДвижений
				|	ИЗ
				|		ВТКэш%ИмяРегистра КАК Т
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|	СГРУППИРОВАТЬ ПО
				|		ИзмененныеДокументы.Регистратор
				|	) КАК Т
				|
				|СГРУППИРОВАТЬ ПО
				|	Т.Регистратор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т.Регистратор   		  	КАК Регистратор,
				|	Т.Регистратор.МоментВремени КАК МоментВремени,
				|	Т.КоличествоДвижений 		КАК КоличествоДвижений
				|ПОМЕСТИТЬ ВТДвиженияДокументов
				|ИЗ
				|	ВТКоличествоДвиженийДокументов КАК Т
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТДвиженияДокументов.Регистратор,
				|	СУММА(ЕСТЬNULL(ВТДвиженияДокументов2.КоличествоДвижений, 0)) / &КоличествоДвиженийВФЗ КАК НомерПорцииЗаписи,
				|	ВТДвиженияДокументов.КоличествоДвижений КАК КоличествоДвиженийДокумента
				|ПОМЕСТИТЬ ВТПорцииДвиженийМаленькихДокументов
				|ИЗ
				|	ВТДвиженияДокументов КАК ВТДвиженияДокументов
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияДокументов КАК ВТДвиженияДокументов2
				|		ПО ВТДвиженияДокументов.МоментВремени > ВТДвиженияДокументов2.МоментВремени
				|			И (ВТДвиженияДокументов2.КоличествоДвижений < &КоличествоДвиженийВФЗ)
				|ГДЕ
				|	ВТДвиженияДокументов.КоличествоДвижений < &КоличествоДвиженийВФЗ
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТДвиженияДокументов.Регистратор,
				|	ВТДвиженияДокументов.КоличествоДвижений
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТДвиженияДокументов.Регистратор,
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТДвиженияДокументов2.Регистратор) + 1 + МАКСИМУМ(ЕСТЬNULL(НомераПредыдущихПорций.НомерПорцииЗаписи, 0)) КАК НомерПорцииЗаписи,
				|	ВТДвиженияДокументов.КоличествоДвижений КАК КоличествоДвиженийДокумента
				|ПОМЕСТИТЬ ВТПорцииИзмененныхДокументов
				|ИЗ
				|	ВТДвиженияДокументов КАК ВТДвиженияДокументов
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияДокументов КАК ВТДвиженияДокументов2
				|		ПО ВТДвиженияДокументов.МоментВремени > ВТДвиженияДокументов2.МоментВремени
				|			И (ВТДвиженияДокументов2.КоличествоДвижений >= &КоличествоДвиженийВФЗ)
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПорцииДвиженийМаленькихДокументов КАК НомераПредыдущихПорций
				|		ПО (ИСТИНА)
				|ГДЕ
				|	ВТДвиженияДокументов.КоличествоДвижений >= &КоличествоДвиженийВФЗ
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТДвиженияДокументов.Регистратор,
				|	ВТДвиженияДокументов.КоличествоДвижений
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	НомераПредыдущихПорций.Регистратор,
				|	НомераПредыдущихПорций.НомерПорцииЗаписи,
				|	НомераПредыдущихПорций.КоличествоДвиженийДокумента
				|ИЗ
				|	ВТПорцииДвиженийМаленькихДокументов КАК НомераПредыдущихПорций
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МИНИМУМ(ПорцииЗаписи.НомерПорцииЗаписи) КАК МинНомерПорцииЗаписи,
				|	МАКСИМУМ(ПорцииЗаписи.НомерПорцииЗаписи) КАК МаксНомерПорцииЗаписи
				|ИЗ
				|	ВТПорцииИзмененныхДокументов КАК ПорцииЗаписи
				|
				|ИМЕЮЩИЕ
				|	НЕ МИНИМУМ(ПорцииЗаписи.НомерПорцииЗаписи) ЕСТЬ NULL";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидРегистра",
					?(ОписаниеРегистра.ЭтоРегистрНакопления, "РегистрНакопления", "РегистрСведений"));
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", КлючИЗначение.Ключ);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации", ОтборПоОрганизации);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения",
					?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					// Если же результат запроса пустой, значит не было сформировано ни одного движения по регистру,
					// но в ИБ есть движения, сформированные предыдущим расчетом себестоимости.
					
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					
					МинНомерПорцииЗаписи  = Цел(Выборка.МинНомерПорцииЗаписи);
					МаксНомерПорцииЗаписи = Цел(Выборка.МаксНомерПорцииЗаписи);
					
					// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
					//	- "первичные" движения документа в периоде расчета
					//	- движения документа по другим периодам и/или организациям
					//	- новые "расчетные" движения документа
					// В поле НомерПорцииЗаписи хранится дробное число, целую часть которого можно считать условным номером задания записи.
					Запрос.Текст =
					"ВЫБРАТЬ
					|	%ПоляОсновнойТаблицыРегистра
					|ИЗ
					|	%ВидРегистра.%ИмяРегистра КАК Т
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорцииИзмененныхДокументов КАК ИзмененныеДокументы
					|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
					|			И ИзмененныеДокументы.НомерПорцииЗаписи >= &НомерПорции
					|			И ИзмененныеДокументы.НомерПорцииЗаписи < (&НомерПорции + 1)
					|			И (НЕ %ОтборРасчетныеДвижения)
					|ГДЕ
					|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
					|	%ОтборПоОрганизации
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	%ПоляОсновнойТаблицыРегистра
					|ИЗ
					|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорцииИзмененныхДокументов КАК ИзмененныеДокументы
					|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
					|			И ИзмененныеДокументы.НомерПорцииЗаписи >= &НомерПорции
					|			И ИзмененныеДокументы.НомерПорцииЗаписи < (&НомерПорции + 1)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	%ПоляКэшаРегистра
					|ИЗ
					|	ВТКэш%ИмяРегистра КАК Т
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорцииИзмененныхДокументов КАК ИзмененныеДокументы
					|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
					|			И ИзмененныеДокументы.НомерПорцииЗаписи >= &НомерПорции
					|			И ИзмененныеДокументы.НомерПорцииЗаписи < (&НомерПорции + 1)
					|
					|УПОРЯДОЧИТЬ ПО
					|	%Порядок";
					
					// Заменим шаблоны в тексте запроса
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидРегистра",
						?(ОписаниеРегистра.ЭтоРегистрНакопления, "РегистрНакопления", "РегистрСведений"));
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения",
						?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок", ТекстПоляСортировки);
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра",    			 КлючИЗначение.Ключ);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",   		 ТекстПоляКэшаРегистра);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации",   	     ОтборПоОрганизации);
					
					Для НомерПорции = МинНомерПорцииЗаписи По МаксНомерПорцииЗаписи Цикл
						
						// Выберем очередную порцию движений
						Запрос.УстановитьПараметр("НомерПорции", Цел(НомерПорции));
						
						ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
						
						Если ТаблицаДвижений.Количество() = 0 Тогда
							Продолжить; // в эту порцию ничего не попало
						КонецЕсли;
						
						ПротоколРасчета_ЗаписьСформированныхДвижений(ПараметрыРасчета, КлючИЗначение.Ключ, , ТаблицаДвижений.Количество());
						
						// Запишем новые движения.
						ЗапуститьЗаданиеЗаписи(
							ПараметрыРасчета,
							ОписаниеРегистра,
							ТаблицаДвижений,
							НСтр("ru='Расчет себестоимости, запись движений.';uk='Розрахунок собівартості, запис рухів.'"));
						
					КонецЦикла;
				
				КонецЕсли;
				
				УничтожитьВременныеТаблицы(
					ПараметрыРасчета.МенеджерВременныхТаблиц,
					"ВТКоличествоДвиженийДокументов, ВТДвиженияДокументов,
					|ВТПорцииДвиженийМаленькихДокументов, ВТПорцииИзмененныхДокументов");
				
			КонецЕсли; // пишем в фоновых заданиях
			
			УничтожитьВременныеТаблицы(
				ПараметрыРасчета.МенеджерВременныхТаблиц,
				"ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");
			
		КонецЕсли; // есть измененные документы
		
		// Добавим ВТКэшИзмененныеДокументы текущего регистра в общую таблицу ВТИзмененныеДокументы 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор,
		|	""%ИмяРегистра"" КАК ИмяРегистра
		|ИЗ
		|	ВТКэшИзмененныеДокументы КАК Т";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", КлючИЗначение.Ключ);
		
		ТаблицаРегистраторов = Запрос.Выполнить().Выгрузить();
		
		ОбработаноРегистров = ОбработаноРегистров + 1;
		Если ОбработаноРегистров = 1 Тогда
			
			// Таблицу первого регистра всегда помещаем во временную таблицу
			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
				ПараметрыРасчета.МенеджерВременныхТаблиц,
				"ВТИзмененныеДокументы",
				ТаблицаРегистраторов,
				"%1Регистратор, %1ИмяРегистра");
			
		ИначеЕсли ТаблицаРегистраторов.Количество() > 0 Тогда
			
			// Таблицы следующих регистров добавляем во временную таблицу только если они непустые
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета.МенеджерВременныхТаблиц,
				"ВТИзмененныеДокументы",
				ТаблицаРегистраторов,
				"%1Регистратор, %1ИмяРегистра",
				"");
			
		КонецЕсли;
		
		УничтожитьВременныеТаблицы(
			ПараметрыРасчета.МенеджерВременныхТаблиц,
			"ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы");
		
	КонецЦикла;
	
	Если ПараметрыРасчета.МаксимальноеКоличествоФЗ < 2 Тогда
		ПротоколРасчета_ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры


// Выполняет запись движений документов по указанному регистру.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - движения по регистру, упорядоченные по регистратору
//		Если в выборке есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - менеджер регистра
//	РазмерНабораЗаписей - Число - количество записей в наборе, при достижении которого выполняется запись набора
//
Процедура ЗаписатьДвиженияПоРегистру(Выборка, МенеджерРегистра, РазмерНабораЗаписей)
	
	Если НЕ ЗначениеЗаполнено(РазмерНабораЗаписей) Тогда
		Возврат; // для отладки - расчет без изменения данных ИБ
	КонецЕсли;
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	ТекущийРегистратор = Неопределено;
	НомерПорцииЗаписи = 1;
	
	// Если в выборке нет обязательных колонок, например, Период,
	// то считаем, что передана выборка из регистраторов, у которых надо просто очистить движения.
	ТолькоОчищатьЗаписи = (Выборка.Владелец().Колонки.Найти("Период") = Неопределено);
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийРегистратор <> Выборка.Регистратор Тогда
			
			// Если изменился регистратор в движениях - запишем движения предыдущего регистратора
			Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				НаборЗаписей.Записать(НомерПорцииЗаписи = 1);
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			ТекущийРегистратор = Выборка.Регистратор;
			НомерПорцииЗаписи = 1;
			
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			
		ИначеЕсли НЕ ТолькоОчищатьЗаписи И НаборЗаписей.Количество() >= РазмерНабораЗаписей Тогда
			
			// Если в движениях документа много записей - будем записывать их порциями
			// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям
			НаборЗаписей.Записать(НомерПорцииЗаписи = 1);
			НаборЗаписей.Очистить();
			
			НомерПорцииЗаписи = НомерПорцииЗаписи + 1;
			
		КонецЕсли;
		
		Если НЕ ТолькоОчищатьЗаписи Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
		НаборЗаписей.Записать(НомерПорцииЗаписи = 1);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись движений документов по указанному регистру в фоновом задании.
//
// Параметры:
//	Таблица - ТаблицаЗначений - движения по регистру, упорядоченные по регистратору
//		Если в таблице есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - менеджер регистра
//	РазмерНабораЗаписей - Число - количество записей в наборе, при достижении которого выполняется запись набора
//	ПредыдущееЗадание - УникальныйИдентификатор - идентификатор задания, записывающего предыдущую порцию движений по этому регистру
//		Если идентификатор указан, то перед записью этой порции надо дождаться окончания предыдущей.
//
Процедура ЗаписатьДвиженияПоРегиструФоновымЗаданием(Таблица, МенеджерРегистра, РазмерНабораЗаписей, ПредыдущееЗадание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПредыдущееЗадание) Тогда
		// Подождем завершения предыдущего задания.
		// Даже если оно почему-то завершилось с ошибкой, все равно запишем текущую порцию.
		// Тогда при перезапуске расчета движения текущей порции уже будут в ИБ, перезаписывать их будет не надо.
		// Т.о. при перезапуске расчета будут только дописаны движения, которые "не успели" дописать упавшие задания.
		// Результат завершения предыдущего задания будет обработан централизованно, в ОжидатьЗавершенияФоновогоЗадания()
		Попытка
			ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ПредыдущееЗадание).ОжидатьЗавершения();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТТаблица
	|ИЗ
	|	&Т КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТТаблица КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Регистратор";
	
	Запрос.УстановитьПараметр("Т", Таблица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписатьДвиженияПоРегистру(Выборка, МенеджерРегистра, РазмерНабораЗаписей);
	
КонецПроцедуры


// Проверяет корректность указания Организации в сформированных движениях 
//
Функция ПроверитьКорректностьОрганизацииВДвижениях(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор
			|ИЗ
			|	ВТКэш%1 КАК Т
			|ГДЕ
			|	НЕ (Т.Организация В(&МассивОрганизаций))
			|";
			
		Иначе // ЕстьАналитикаПартнеров
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор
			|ИЗ
			|	ВТКэш%1 КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
			|			ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
			|ГДЕ
			|	АналитикаПартнеров.КлючАналитики ЕСТЬ NULL
			|";
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ОписаниеРегистра.ИмяРегистра);
		
		РезультатЗапроса = Запрос.Выполнить();
		КоличествоОшибочныхДвижений = РезультатЗапроса.Выбрать().Количество();
		
		Если КоличествоОшибочныхДвижений > 0 Тогда
			ПараметрыРасчета.БылиОшибки = Истина;
			ПротоколРасчета_КорректностьДвижений(ПараметрыРасчета, ОписаниеРегистра.ИмяРегистра, КоличествоОшибочныхДвижений);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции
		
// Формирует временную таблицу ВТКэшСтарыеДокументы - документы, у которых были "старые" расчетные движения
//
Процедура СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшСтарыеДокументы",
		НСтр("ru='Регистр: ';uk='Регістр: '") + ОписаниеРегистра.ИмяРегистра);
	
	// Выберем все старые регистраторы данного регистра (кроме док. КорректировкаРегистров)
	// Поле Активность не проверяем
	Если НЕ ОписаниеРегистра.ЭтоРегистрНакопления Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	РегистрСведений.%1 КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.Организация В(&МассивОрганизаций)
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор";
		
	ИначеЕсли ОписаниеРегистра.ЕстьОрганизация Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	РегистрНакопления.%1 КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.РасчетСебестоимости
		|	И Т.Организация В(&МассивОрганизаций)
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор";
		
	Иначе // ЕстьАналитикаПартнеров
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	РегистрНакопления.%1 КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
		|			ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.РасчетСебестоимости
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор";
		
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ОписаниеРегистра.ИмяРегистра);
	
	Запрос.Выполнить();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшИзмененныеДокументы - документы, у которых изменились расчетные движения
//
Процедура СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшИзмененныеДокументы",
		НСтр("ru='Регистр: ';uk='Регістр: '") + ОписаниеРегистра.ИмяРегистра,
		"ВТКэшСтарыеДокументы, ВТКэш" + ОписаниеРегистра.ИмяРегистра);
	
	// Шаблоны для замены в тексте запроса
	ТекстОтборНепустыхРесурсов 		 = "";
	ТекстГруппировкаПолей 	   		 = "";
	ТекстПоляОсновнойТаблицыРегистра = ""; // ресурсы с "минусом"
	ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
		|		Т.")); // ресурсы с "плюсом
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.РесурсыРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		ЭтоРесурсРегистра = (МассивРесурсов.Найти(ТекущееПоле) <> Неопределено);
		
		Если ЭтоРесурсРегистра Тогда
			// Ресурс
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
			// Измерение или реквизит
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
		КонецЕсли;
		
		ТекстПоляОсновнойТаблицыРегистра = ТекстПоляОсновнойТаблицыРегистра 
			+ ?(ТекстПоляОсновнойТаблицыРегистра = "", "", ",
			|	") + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;
		
	КонецЦикла;
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
		
	// Выбор регистраторов, у которых есть хоть какие-то отличия в старых и новых движениях
	// Будут перезаписаны движения только этих регистраторов
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТКэшИзмененныеДокументы
	|ИЗ
	|	(ВЫБРАТЬ // новые движения, с плюсом
	|		%ПоляКэшаРегистра
	|	ИЗ
	|		ВТКэш%ИмяРегистра КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ // старые движения, с минусом
	|		%ПоляОсновнойТаблицыРегистра
	|	ИЗ
	|		%ВидРегистра.%ИмяРегистра КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшСтарыеДокументы КАК СтарыеДокументы
	|			ПО Т.Регистратор = СтарыеДокументы.Регистратор
	|				%ОтборРасчетныеДвижения
	|		ГДЕ
	|			Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	) КАК Т
	|
	|%ГруппировкаПолей
	|
	|%ОтборНепустыхРесурсов
	|";
	
	// Заменим шаблоны в тексте запроса
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидРегистра",
		?(ОписаниеРегистра.ЭтоРегистрНакопления, "РегистрНакопления", "РегистрСведений"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения",
		?(ОписаниеРегистра.ЭтоРегистрНакопления, "И Т.РасчетСебестоимости", ""));
	
	// Заменим значение поля ВидДвижения основной таблицы регистра на булево значение; ресурсы с "минусом"
	ТекстПоляОсновнойТаблицыРегистра = СтрЗаменить(
		ТекстПоляОсновнойТаблицыРегистра,
		"Т.СлужебноеВидДвиженияПриход",
		"ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СлужебноеВидДвиженияПриход");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра",				 ОписаниеРегистра.ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляКэшаРегистра",			 ТекстПоляКэшаРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей",			 ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов",		 ТекстОтборНепустыхРесурсов);
	
	Запрос.Выполнить();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшДвиженияДругихПериодовИлиОрганизаций - движения измененных документов по другим периодам и/или организациям
//
Процедура СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	МогутБытьДвиженияПоДругимПериодамИлиОрганизациям = 
		(ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях.Количество() > 0);
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшДвиженияДругихПериодовИлиОрганизаций",
		НСтр("ru='Регистр: ';uk='Регістр: '") + ОписаниеРегистра.ИмяРегистра,
		?(МогутБытьДвиженияПоДругимПериодамИлиОрганизациям, "ВТКэшИзмененныеДокументы", ""));
	
	Если МогутБытьДвиженияПоДругимПериодамИлиОрганизациям Тогда
		
		// По этому регистру есть регистраторы с движениями по другим периодам и/или организациям.
		// Сохраним такие движения во временной таблице ВТКэшДвиженияДругихПериодовИлиОрганизаций.
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "ИЛИ НЕ (Т.Организация В (&МассивОрганизаций))";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "ИЛИ НЕ (Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор))";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;
		
		ОтборПоТипамРегистраторов = "";
		Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
			ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов + ?(ОтборПоТипамРегистраторов = "", "", ", ")
				+ "ТИП(Документ." + КлючИЗначение.Ключ.Имя + ")";
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТОтборПоРегистраторам
		|ИЗ
		|	ВТКэшИзмененныеДокументы КАК Т
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Т.Регистратор) В (%ОтборПоТипамРегистраторов)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
		|ИЗ
		|	%ВидРегистра.%ИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборПоРегистраторам КАК ИзмененныеДокументы
		|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
		|ГДЕ
		|	НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)
		|	%ОтборПоОрганизации
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТОтборПоРегистраторам
		|";
		
		// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации",   	   ОтборПоОрганизации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", 			   ОписаниеРегистра.ИмяРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидРегистра",
			?(ОписаниеРегистра.ЭтоРегистрНакопления, "РегистрНакопления", "РегистрСведений"));
		
	Иначе
		
		// По этому регистру не может быть регистраторов с движениями по другим периодам и/или организациям.
		// Создадим пустую временную таблицу с полями, идентичными полям регистра.
		
		Запрос.УстановитьПараметр("ПустаяТаблицаРегистра", ОписаниеРегистра.МенеджерРегистра.СоздатьНаборЗаписей().Выгрузить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
		|ИЗ
		|	&ПустаяТаблицаРегистра КАК Т";
		
	КонецЕсли;
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
		|		Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
		
	Запрос.Выполнить();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшОчищаемыеДокументы - документы, у которых не осталось расчетных движений
//
Процедура СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ПротоколРасчета_НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшОчищаемыеДокументы",
		НСтр("ru='Регистр: ';uk='Регістр: '") + ОписаниеРегистра.ИмяРегистра,
		"ВТКэшИзмененныеДокументы, ВТКэш" + ОписаниеРегистра.ИмяРегистра + ", ВТКэшДвиженияДругихПериодовИлиОрганизаций");
	
	// Выберем регистраторы, у которых (по И)
	// - есть только старые движения расчета себестоимости (нет "первичных движений")
	// - нет новых движений расчета себестоимости
	// - нет движений по другим периодам и/или организациям
	// Для таких документов надо просто очистить их движения - записать пустой набор.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТКэшОчищаемыеДокументы
	|ИЗ
	|	%ВидРегистра.%ИмяРегистра КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
	|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.Регистратор
	|			 ИЗ
	|				ВТКэш%ИмяРегистра КАК Т
	|
	|			 ОБЪЕДИНИТЬ ВСЕ
	|
	|			 ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.Регистратор
	|			 ИЗ
	|				ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т) КАК НеОчищаемыеДокументы
	|			ПО Т.Регистратор = НеОчищаемыеДокументы.Регистратор
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НеОчищаемыеДокументы.Регистратор ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(%ОтборРасчетныеДвижения) = ИСТИНА";
	
	// Заменим шаблоны в тексте запроса
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидРегистра",
		?(ОписаниеРегистра.ЭтоРегистрНакопления, "РегистрНакопления", "РегистрСведений"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения",
		?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра", ОписаниеРегистра.ИмяРегистра);
	
	Запрос.Выполнить();
	
	ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры



// Отладочная процедура - очистка всех движений, сформированных предыдущим расчетом.
// Может выполняться достаточно долго, поэтому рекомендуется только для целей отладки.
//
Процедура ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета)
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ОчиститьСтарыеДвиженияРасчетаСебестоимости");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	%ПоляРегистра
		|ИЗ
		|	%ВидРегистра.%ИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшСтарыеДокументы КАК СтарыеДокументы
		|		ПО Т.Регистратор = СтарыеДокументы.Регистратор
		|			И (НЕ %ОтборРасчетныеДвижения)
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	%Порядок";
		
		// Заменим шаблоны в тексте запроса
		ТекстПоляРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
			|		Т."));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидРегистра",
			?(ОписаниеРегистра.ЭтоРегистрНакопления, "РегистрНакопления", "РегистрСведений"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения",
			?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Порядок",
			?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.Регистратор, Т.РасчетСебестоимости", "Т.Регистратор"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра",    КлючИЗначение.Ключ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПоляРегистра",   ТекстПоляРегистра);
		
		// Выберем и запишем только "первичные" движения - старые движения расчета себестоимости будут затерты
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗаписатьДвиженияПоРегистру(Выборка, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.РазмерНабораЗаписей);
		
		// Выберем регистраторы, у которых есть только движения расчета себестоимости (нет "первичных движений")
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ИЗ
		|	%ВидРегистра.%ИмяРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшСтарыеДокументы КАК СтарыеДокументы
		|		ПО Т.Регистратор = СтарыеДокументы.Регистратор
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Регистратор
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(%ОтборРасчетныеДвижения) = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Регистратор";
		
		// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидРегистра",
			?(ОписаниеРегистра.ЭтоРегистрНакопления, "РегистрНакопления", "РегистрСведений"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборРасчетныеДвижения",
			?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра",    КлючИЗначение.Ключ);
		
		// Очистим движения у выбранных регистраторов
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			ЗаписатьДвиженияПоРегистру(Выборка, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.РазмерНабораЗаписей);
		КонецЕсли;
		
		УничтожитьВременныеТаблицы(
			ПараметрыРасчета.МенеджерВременныхТаблиц,
			"ВТКэшСтарыеДокументы");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыРаботыСФоновымиЗаданиями

// Ожидает завершения одного или всех заданий в очереди записи движений.
//
Процедура ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, ЗавершениеВсехЗаданий = Ложь)
	
	Если ЗавершениеВсехЗаданий ИЛИ ПараметрыРасчета.СтекЗаданийЗаписи.Количество() >= ПараметрыРасчета.МаксимальноеКоличествоФЗ Тогда
		
		// Если размер очереди заданий записи достиг максимума, то удалим из очереди завершенные задания
		НомерЗадания = 0;
		
		Пока НомерЗадания < ПараметрыРасчета.СтекЗаданийЗаписи.Количество() Цикл
			
			Если НЕ ЗавершениеВсехЗаданий Тогда
				Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
				Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					НомерЗадания = НомерЗадания + 1; // движения еще записываются
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, НомерЗадания);
			
		КонецЦикла;
		
		Если ПараметрыРасчета.СтекЗаданийЗаписи.Количество() >= ПараметрыРасчета.МаксимальноеКоличествоФЗ Тогда
			// Если в очереди нет завершенных заданий, то подождем пока освободится хотя бы одно место в очереди.
			ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, 0); // самое старое задание
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗавершениеВсехЗаданий Тогда
		// В случае, когда ПараметрыРасчета.МаксимальноеКоличествоФЗ > 1
		ПротоколРасчета_ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Ожидает завершения указанного фонового задания.
//
Функция ОжидатьЗавершенияФоновогоЗадания(ПараметрыРасчета, НомерЗадания)
	
	Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		Попытка
			Задание.ОжидатьЗавершения();
		Исключение
			// Возвращается неинформативная ошибка "Выполнение одного или нескольких заданий завершилось с ошибкой"
		КонецПопытки;
		
		// Чтобы узнать статус завершенного задания надо получить его повторно
		Задание = ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания);
		
	КонецЕсли;
	
	Если Задание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
		
		// ЗавершеноАварийно или Отменено - запись движений не выполнилась
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Фоновое задание %1 %2 по причине:
                |%3'
                |;uk='Фонове завдання %1 %2 з причини:
                |%3'"),
			"""" + СокрЛП(Задание.Ключ) + """",
			?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено, "отменено", "завершено аварийно"),
			?(Задание.ИнформацияОбОшибке = Неопределено, "", ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
			
		ПараметрыРасчета.БылиОшибки = Истина;
		ПараметрыРасчета.ОшибкиФЗ.Добавить(ТекстОшибки);
		
	КонецЕсли;
		
	ПараметрыРасчета.СтекЗаданийЗаписи.Удалить(НомерЗадания); // закончено
	
КонецФункции

// Получает фоновое задание по его номеру в очереди.
//
Функция ПолучитьФоновоеЗадание(ПараметрыРасчета, НомерЗадания)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
		ПараметрыРасчета.СтекЗаданийЗаписи[НомерЗадания]);
	
	Возврат Задание;
	
КонецФункции


// Запускает новое задание многопоточной записи движений.
//
Процедура ЗапуститьЗаданиеЗаписи(ПараметрыРасчета, ОписаниеРегистра, ТаблицаДвижений, ОписаниеЗадания = "")
	
	// Если накопилось много незавершенных заданий записи движений, то подождем, пока хоть одно завершится.
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета);
	
	// Определим, должно ли новое задание ожидать завершения предыдущего
	ПредыдущееЗадание = Неопределено; // идентификатор задания записи предыдущей порции этого регистра
	Если ПараметрыРасчета.ПоследовательнаяЗаписьРегистра
	 И ПараметрыРасчета.ТаблицаЗаданийЗаписи.Количество() > 0 Тогда
		ПоследняяСтрока = ПараметрыРасчета.ТаблицаЗаданийЗаписи[ПараметрыРасчета.ТаблицаЗаданийЗаписи.Количество() - 1];
		Если ПоследняяСтрока.ИмяРегистра = ОписаниеРегистра.ИмяРегистра Тогда
			ПредыдущееЗадание = ПоследняяСтрока.ИдентификаторЗадания;
		КонецЕсли;
	КонецЕсли;

	// Подготовим и запустим новое задание записи.
	ПараметрыРасчета.ОбщееКоличествоФЗ = ПараметрыРасчета.ОбщееКоличествоФЗ + 1;
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ТаблицаДвижений); // таблица первичных и расчетных движений
	ПараметрыОбработчикаЗадания.Добавить(ОписаниеРегистра.МенеджерРегистра); // менеджер регистра
	ПараметрыОбработчикаЗадания.Добавить(ПараметрыРасчета.РазмерНабораЗаписей); // порция записи
	ПараметрыОбработчикаЗадания.Добавить(ПредыдущееЗадание); // ожидать завершения этого задания
	
	// Запустим задание и запомним его идентификатор в стеке и общей таблице заданий записи
	НовоеЗадание = ФоновыеЗадания.Выполнить(
		"РасчетСебестоимости.ЗаписатьДвиженияПоРегиструФоновымЗаданием",
		ПараметрыОбработчикаЗадания,
		"ФЗ №" + СокрЛП(ПараметрыРасчета.ОбщееКоличествоФЗ)  + " - " + ОписаниеРегистра.ИмяРегистра,
		ОписаниеЗадания);
	
	ПараметрыРасчета.СтекЗаданийЗаписи.Добавить(НовоеЗадание.УникальныйИдентификатор);
	
	ПоследняяСтрока = ПараметрыРасчета.ТаблицаЗаданийЗаписи.Добавить();
	ПоследняяСтрока.ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	ПоследняяСтрока.ПредыдущееЗадание 	 = ПредыдущееЗадание;
	ПоследняяСтрока.ИмяРегистра 		 = ОписаниеРегистра.ИмяРегистра;
	ПоследняяСтрока.КоличествоДвижений	 = ТаблицаДвижений.Количество();
	
	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРегистраторов = ТаблицаДвижений.Скопировать(, "Регистратор");
	ТаблицаРегистраторов.Свернуть("Регистратор", "");
	
	Для Каждого ТекСтр Из ТаблицаРегистраторов Цикл
		НовСтр = ПараметрыРасчета.Отладка.РегистраторыВФЗ.Добавить();
		НовСтр.ИмяРегистра = ОписаниеРегистра.ИмяРегистра;
		НовСтр.Регистратор = ТекСтр.Регистратор;
		НовСтр.Количество = 1;
	КонецЦикла;
	
КонецПроцедуры

// Завершает процесс многопоточной записи движений.
//
Процедура ПриОкончанииЗаписиДвижений(ПараметрыРасчета)
	
	Если ПараметрыРасчета.МаксимальноеКоличествоФЗ < 2 Тогда
		// Запись уже закончена - выполнялась в один поток, без фоновых заданий
		Возврат;
	КонецЕсли;
	
	// Если движения пишутся фоновыми заданиями, то дождемся окончания всех заданий
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, Истина);
	
	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ
	 ИЛИ ПараметрыРасчета.Отладка.РегистраторыВФЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Свернуть("ИмяРегистра, Регистратор", "Количество");
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Сортировать("Количество Убыв, ИмяРегистра, Регистратор");
	
	Если ПараметрыРасчета.Отладка.РегистраторыВФЗ[0].Количество > 1 Тогда
		ТекстОшибки =
			НСтр("ru='Некорректно выполнено разделение движений на порции для многопоточной записи.
                        |Движения могут быть записаны некорректно.'
                        |;uk='Некоректно виконано розділення рухів на порції для багатопотокового запису.
                        |Рухи можуть бути записані некоректно.'");
		ПараметрыРасчета.БылиОшибки = Истина;
		ПараметрыРасчета.ОшибкиФЗ.Добавить(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыРаботыСВременнымиТаблицами

// Добавляет таблицу значений в существующую временную таблицу
//
Процедура ОбъединитьТаблицуЗначенийИВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяПриемника, Таблица, ПоляТаблицы, РесурсыТаблицы)
	
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, "ВТВременноеХранилищеТаблицыЗначений", Таблица, ПоляТаблицы);
	
	ОбъединитьВременныеТаблицы(МенеджерВременныхТаблиц, "ВТВременноеХранилищеТаблицыЗначений", ИмяПриемника, ПоляТаблицы, РесурсыТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТВременноеХранилищеТаблицыЗначений";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Переносит данные из одной временной таблицы в другую
//
Процедура ОбъединитьВременныеТаблицы(МенеджерВременныхТаблиц, ИмяИсточника, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы)
	
	// Записи итоговой временной таблицы сворачиваются по всем измерениям и реквизитам регистра.
	// Записи со всеми пустыми ресурсами не помещаются в итоговую временную таблицу.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%Поля
	|ПОМЕСТИТЬ ВТВременноеХранилищеОбъединяемыхТаблиц
	|ИЗ
	|	%ИмяИсточника КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%Поля
	|ИЗ
	|	%ИмяПриемника КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяПриемника
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	%СгруппированныеПоля
	|ПОМЕСТИТЬ %ИмяПриемника
	|ИЗ
	|	ВТВременноеХранилищеОбъединяемыхТаблиц КАК Т
	|
	|%ГруппировкаПолей
	|
	|%ОтборНепустыхРесурсов
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТВременноеХранилищеОбъединяемыхТаблиц";
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	
	ТекстСгруппированныеПоля   = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей 	   = "";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ПоляТаблицы, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(РесурсыТаблицы, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		Если МассивРесурсов.Найти(ТекущееПоле) <> Неопределено Тогда
			
			// Ресурс
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля 
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + "СУММА(" + ТекущееПоле + ")";
				
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
			
		Иначе
			
			// Измерение или реквизит
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля 
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + ТекущееПоле;
			
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля",   	  			ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника", 			ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", 			ИмяПриемника);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СгруппированныеПоля", 	ТекстСгруппированныеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей", 		ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", 	ТекстОтборНепустыхРесурсов);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Помещает таблицу значений в новую временную таблицу
//
Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяПриемника, Таблица, ПоляТаблицы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	%Поля
	|ПОМЕСТИТЬ %ИмяПриемника
	|ИЗ
	|	&Таблица КАК Т";
	
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля",   	  ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника", ИмяПриемника);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Уничтожает указанные временные таблицы
//
Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, ИменаТаблиц)
	
	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	ТекстЗапроса 	= "";
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		ТекстЗапроса = ТекстЗапроса 
			+ ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ВспомогательныеПроцедурыЗапускаРасчетаСебестоимости

// По переданному массиву организаций определяет метод оценки стоимости на указанную дату.
//
// Параметры:
//	МассивОрганизаций - Массив - организации
//	Дата - Дата - период расчета себестоимости
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - метод оценки стоимости
//
Функция ОпределитьМетодОценкиСтоимости(МассивОрганизаций, Дата)
	
	МетодОценкиСтоимости  = Неопределено;
	ОдинаковыйМетодОценки = Истина;
	ТекстОрганизации      = "";
	
	Для Каждого Организация Из МассивОрганизаций Цикл

		Результат = ЗначениеНастроекПовтИсп.ПолучитьМетодОценкиСтоимостиТоваров(Организация, НачалоМесяца(Дата));

		Если Результат <> Неопределено Тогда
			
			Если МетодОценкиСтоимости <> Результат Тогда
				Если МетодОценкиСтоимости = Неопределено Тогда 
					МетодОценкиСтоимости = Результат;
				Иначе
					ОдинаковыйМетодОценки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ТекстОрганизации = ТекстОрганизации
				+ ?(Не ПустаяСтрока(ТекстОрганизации), ", ", "")
				+ Строка(Организация);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОдинаковыйМетодОценки Тогда
		
		ТекстИсключения = НСтр("ru='Различается метод оценки стоимости запасов для организаций: %Организации%.
            |Настройку можно сделать в учетной политике организации'
            |;uk='Розрізняється метод оцінки вартості запасів для організацій: %Организации%.
            |Настройку можна зробити в обліковій політиці організації'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Организации%", ТекстОрганизации);
		
		// Не совпадает метод оценки стоимости
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкиДляЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации,
			,
			ТекстИсключения,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		ВызватьИсключение ТекстИсключения;
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МетодОценкиСтоимости) Тогда
		МетодОценкиСтоимости = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
	КонецЕсли;
	
	Возврат МетодОценкиСтоимости;

КонецФункции

// Выполняет удаления лишних документов расчета себестоимости.
//
Функция УдалитьДокументыРасчетаСебестоимости(ТаблицаДокументов, Отбор, ОставитьПервый = Ложь)
	
	ОставленныйДокумент = Неопределено;
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Отбор);
	Иначе
		СтрокиТаблицы = Отбор;
	КонецЕсли;
	
	Индекс = 0;
	
	НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
	
	Для Каждого ТекущаяСтрока Из СтрокиТаблицы Цикл
		
		Индекс = Индекс + 1;
		Если ОставитьПервый И Индекс = 1 Тогда
			ОставленныйДокумент = ТекущаяСтрока.Ссылка;
			Продолжить;
		КонецЕсли;
		
		// Пометим документ на удаление
		ДокументОбъект = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		
		// Очистим задание к расчету, которое запишется из события в модулях наборов записей распроведенного документа
		НаборЗаписей.Отбор.Документ.Установить(ТекущаяСтрока.Ссылка);
		НаборЗаписей.Записать(Истина);
		
		ТаблицаДокументов.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ОставленныйДокумент;
	
КонецФункции

// Выполняет включение ранее отключенных итогов по регистрам в фоновом задании.
//
Процедура ВключитьИтогиПоРегистрамФоновымЗаданием(РегистрыСОтключеннымиИтогами) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из РегистрыСОтключеннымиИтогами Цикл
		МенеджерРегистра = КлючИЗначение.Ключ;
		МенеджерРегистра.УстановитьИспользованиеТекущихИтогов(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыРасчетаПоНужнымОрганизациям

// Возвращает информацию о всех организациях ИБ, сгруппированную по их участию в схеме Интеркампани в указанном периоде.
//
// Параметры:
//	Дата - Дата - период расчета себестоимости
//
// Возвращаемое значение:
//	Массив - элементами данного массива являются массивы организаций (СправочникСсылка.Организации),
//			 связанных между собой по схеме Интеркампани.
//	 	= если организация не связана с другими, то она будет в массиве одна.
//		= одна и та же организация может входить только в один массив - не может встречаться в результате функции несколько раз.
//
// Например,
//	- есть организации 1, 2, 3, 4, 5
//	- по Интеркампани товары перемещаются между организациями 1-3 и 3-5
//	- организация 2 в этом периоде работает "сама по себе", не связана с другими организациями
//	- по организации 4 в этом периоде не было движений по регистру СебестоимостьТоваров
// Возвращаемый функцией массив будет иметь следующий вид:
//	элемент(0) - массив (организация 1, организация 3, организация 5) - схема Интеркампани
//	элемент(1) - массив (организация 2) - "одиночная", несвязанная организация
//	элемент(2) - массив (организация 4) - несмотря на отсутствие по ней движений будет дополнена из справочника организаций
//
Функция ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата)

	МассивГрупп = Новый Массив; // результат функции - массив из массивов организаций
	УчтенныеОрганизации = Новый Массив; // связанные по Интеркампани - их не надо выбирать из справочника организаций
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СебестоимостьТоваров.КорОрганизация КАК КорОрганизация,
	|	ВЫБОР
	|		КОГДА СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РеализацияКлиентуРеглУчет
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.Активность
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Организация КАК Организация,
	|	Организации.КорОрганизация КАК КорОрганизация
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Организация КАК Организация,
	|		Организации.КорОрганизация КАК КорОрганизация
	|	ИЗ
	|		ВТОрганизации КАК Организации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Организация,
	|		ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	ИЗ
	|		ВТОрганизации КАК Организации
	|	ГДЕ
	|		Организации.РеализацияКлиентуРеглУчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КПередаче.ОрганизацияВладелец,
	|		КПередаче.ВидЗапасовПродавца.Организация
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|			ВидЗапасовПродавца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК КПередаче
	|	) КАК Организации
	|ГДЕ
	|	Организации.Организация <> Организации.КорОрганизация
	|	И Организации.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Организации.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	КорОрганизация";
	Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",  		 КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));

	РезультатЗапроса = Запрос.Выполнить();

	// Необходимо собрать в группы организации, которые участвовали в перепродажах или межфирменных перемещениях.
	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			ГруппаОрганизации    = НайтиВМассивеГруппОрганизаций(Выборка.Организация,    МассивГрупп);
			ГруппаКорОрганизации = НайтиВМассивеГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп);
			
			Если ГруппаОрганизации = Неопределено И ГруппаКорОрганизации = Неопределено Тогда
				
				// таких организаций еще не было в выборке - добавим обе организации в новую группу
				ДобавитьВМассивГруппОрганизаций(Выборка.Организация,    МассивГрупп, Неопределено);
				ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, МассивГрупп.Количество() - 1);
				
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				
			ИначеЕсли ГруппаОрганизации <> Неопределено И ГруппаКорОрганизации <> Неопределено Тогда
				
				// обе организации уже были в выборке
				Если ГруппаОрганизации <> ГруппаКорОрганизации Тогда
					// перенесем все организации из группы кор.организации в группу организации
					ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ГруппаОрганизации, ГруппаКорОрганизации);
				КонецЕсли;
				
			Иначе
				// одной из организаций еще не было в выборке
				Если ГруппаОрганизации = Неопределено Тогда
					// добавим организацию в группу кор. организации
					ДобавитьВМассивГруппОрганизаций(Выборка.Организация,    МассивГрупп, ГруппаКорОрганизации);
					
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				Иначе
					// добавим кор. организацию в группу организации
					ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, ГруппаОрганизации);
					
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	// Дополним остальными организациями из справочника.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|			ТОГДА 0
	|		ИНАЧЕ 100
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУпрОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ Организации.Ссылка В (&УчтенныеОрганизации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ,
	|	Организация";
	
	Запрос.УстановитьПараметр("УчтенныеОрганизации",        УчтенныеОрганизации);
	Запрос.УстановитьПараметр("ИспользоватьУпрОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Новая группа-массив с одним элементом
		ДобавитьВМассивГруппОрганизаций(Выборка.Организация, МассивГрупп, Неопределено); 
	КонецЦикла;
	
	Возврат МассивГрупп;
	
КонецФункции


Функция НайтиВМассивеГруппОрганизаций(Значение, МассивГрупп)

	Для СчетчикГрупп = 0 По МассивГрупп.Количество() - 1 Цикл
		Если МассивГрупп[СчетчикГрупп].Найти(Значение) <> Неопределено Тогда
			Возврат СчетчикГрупп;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Процедура ДобавитьВМассивГруппОрганизаций(Значение, МассивГрупп, ПозицияГруппы)

	Если ПозицияГруппы = Неопределено Тогда
		МассивГрупп.Добавить(Новый Массив);
		ПозицияГруппы = МассивГрупп.Количество() - 1;
	КонецЕсли;

	ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппы], Значение);

КонецПроцедуры

Процедура ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ПозицияГруппыКуда, ПозицияГруппыОткуда)

	Для Каждого Значение Из МассивГрупп[ПозицияГруппыОткуда] Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппыКуда], Значение);
	КонецЦикла;

	МассивГрупп.Удалить(ПозицияГруппыОткуда);

КонецПроцедуры


// Возвращает массив организаций, по которым были движения по основным регистрам себестоимости
//
Функция ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета, ОтборОрганизации = Неопределено)
	
	Если ОтборОрганизации = Неопределено Тогда
		ОтборОрганизации = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Данные.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Данные
	|	ГДЕ
	|		Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Данные.Активность
	|		И (&ПоВсемОрганизациям
	|				ИЛИ Данные.Организация В (&ОтборОрганизации))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КлючиАналитики.Организация
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Данные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитики
	|			ПО Данные.АналитикаУчетаПоПартнерам = КлючиАналитики.Ссылка
	|				И (Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И (Данные.Активность)
	|				И (Данные.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга))
	|				И (&ПоВсемОрганизациям
	|					ИЛИ КлючиАналитики.Организация В (&ОтборОрганизации))
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Данные.Организация КАК Организация
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы КАК Данные
	|	ГДЕ
    |       НЕ &ФормироватьФинансовыйРезультат
	|		И Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
    |		И Данные.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|		И Данные.Активность
	|		И (&ПоВсемОрганизациям
	|				ИЛИ Данные.Организация В (&ОтборОрганизации))
	|	) КАК Данные";
    
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",		КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ОтборОрганизации", 	ОтборОрганизации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ОтборОрганизации));
    Запрос.УстановитьПараметр("ФормироватьФинансовыйРезультат", ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыВеденияПротоколаРасчета

// Инициализирует вспомогательные данные для ведения протокола расчета и начинает протоколирование.
//
Процедура ПротоколРасчета_НачалоРасчета(ПараметрыРасчета)
	
	// Сделаем запись о начале этапа в ЖР
	ПротоколРасчета_ОтметкаВЖурналеРегистрации("ИнициализироватьПараметрыРасчета");
	
	ПротоколРасчета = Новый Структура;
	
	// Общая информация о расчете
	ПротоколРасчета.Вставить("ДатаНачала",  ТекущаяДатаСеанса());
	ПротоколРасчета.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	ПротоколРасчета.Вставить("ВремяОкончания");
	
	// Информация о записанных в ИБ движениях
	ПротоколРасчета.Вставить("ЗаписьДвижений", Новый Структура);
	
	// Для подсчета общего количества сформированных в кэше движений (нарастающим итогом)
	ПротоколРасчета.Вставить("СформированныеДвижения", Новый Структура);
	
	// Таблица описания каждого этапа
	ПротоколРасчета.Вставить("Этапы", Новый ТаблицаЗначений);
	ПротоколРасчета.Этапы.Колонки.Добавить("ПредставлениеЭтапа");
	ПротоколРасчета.Этапы.Колонки.Добавить("УровеньЭтапа");
	ПротоколРасчета.Этапы.Колонки.Добавить("ДатаНачала");
	ПротоколРасчета.Этапы.Колонки.Добавить("ВремяНачала");
	ПротоколРасчета.Этапы.Колонки.Добавить("ВремяОкончания");
	ПротоколРасчета.Этапы.Колонки.Добавить("СформированныеДвижения"); // по конкретному этапу, только по измененным регистрам
	ПротоколРасчета.Этапы.Колонки.Добавить("ВременныеТаблицы"); // Структура(имя временной таблицы - Массив(Структура(количество записей, время формирования)))
	ПротоколРасчета.Этапы.Колонки.Добавить("ДополнительныеСведения"); // массив произвольных строк
	
	// Добавим протокол в общие параметры расчета
	ПараметрыРасчета.Вставить("ПротоколРасчета", ПротоколРасчета);
	
КонецПроцедуры

// Завершает ведение протокола и записывает в журнал регистрации отчет о выполнении расчета.
//
Процедура ПротоколРасчета_ОкончаниеРасчета(ПараметрыРасчета)
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	// Если не было явного объявления конца предыдущего этапа расчета, то закроем его в связи с окончание расчета
	ПротоколРасчета_ОкончаниеЭтапаРасчета(ПараметрыРасчета);
	
	ПротоколРасчета.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	БылиОшибкиДвижений = (ПараметрыРасчета.ОшибкиДвижений.Количество() > 0);
	БылиОшибкиФЗ 	   = (ПараметрыРасчета.ОшибкиФЗ.Количество() > 0);
	
	// Сформируем текст протокола
	Протокол = Новый ТекстовыйДокумент;
	
	Если ПараметрыРасчета.БылиОшибки Тогда
		Протокол.ДобавитьСтроку(НСтр("ru='ВНИМАНИЕ !';uk='УВАГА !'"));
		Протокол.ДобавитьСтроку(НСтр("ru='В ходе расчета были диагностированы ошибки (см. ниже, отмечены символом ""!"")';uk='У ході розрахунку були діагностовані помилки (див. нижче, відмічені символом ""!"")'"));
		Если БылиОшибкиДвижений ИЛИ БылиОшибкиФЗ Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Расчет себестоимости завершился аварийно.';uk='Розрахунок собівартості завершився аварійно.'"));
		КонецЕсли;
		Протокол.ДобавитьСтроку("");
	КонецЕсли;
	
#Область ЗаголовокОтчета
	
	Протокол.ДобавитьСтроку(НСтр("ru='Протокол расчета себестоимости.';uk='Протокол розрахунку собівартості.'"));
	Протокол.ДобавитьСтроку(НСтр("ru='Конфигурация:';uk='Конфігурація:'") + " " + ПротоколРасчета_ПредставлениеЗначения(Метаданные.Имя)
		+ ", " + НСтр("ru='версия:';uk='версія:'") + " " + ПротоколРасчета_ПредставлениеЗначения(Метаданные.Версия));
	Протокол.ДобавитьСтроку(НСтр("ru='Информационная база:';uk='Інформаційна база:'") + " " 
		+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.СтрокаСоединенияИБ));
	Протокол.ДобавитьСтроку(НСтр("ru='Начало расчета:';uk='Початок розрахунку:'") + " " + Формат(ПротоколРасчета.ДатаНачала, "ДЛФ=DT")
		+ ", " + НСтр("ru='длительность:';uk='тривалість:'") + " " + ПротоколРасчета_ПредставлениеВремениВыполнения(ПротоколРасчета));
	Протокол.ДобавитьСтроку(НСтр("ru='Место вызова расчета:';uk='Місце виклику розрахунку:'") + " " 
		+ ПротоколРасчета_ПредставлениеЗначения(?(ПараметрыРасчета.РегламентноеЗадание, НСтр("ru='Регламентное задание';uk='Регламентне завдання'"), ПараметрыРасчета.МестоВызоваРасчета)));
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку(НСтр("ru='Период расчета:';uk='Період розрахунку:'") + " "
		+ Формат(ПараметрыРасчета.РасчетныйПериод.НачалоПериода, "ДФ='MMMM yyyy'"));
	Протокол.ДобавитьСтроку(НСтр("ru='Вид расчета:';uk='Вид розрахунку:'") + " "
		+ Формат(ПараметрыРасчета.ПредварительныйРасчет, "БЛ=Фактический; БИ=Предварительный"));
	Протокол.ДобавитьСтроку(НСтр("ru='Организации для расчета:';uk='Організації для розрахунку:'") + Символы.ВК + "	- "
		+ ПредставлениеОрганизаций(ПараметрыРасчета.МассивОрганизаций, Символы.ВК + "	- "));
	Протокол.ДобавитьСтроку(НСтр("ru='Метод оценки стоимости:';uk='Метод оцінки вартості:'") + " "
		+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.МетодОценки));
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("=================================================================================");
	Протокол.ДобавитьСтроку(НСтр("ru='Функциональные опции, влияющие на результат расчета:';uk='Функціональні опції, що впливають на результат розрахунку:'"));
	Для Каждого ТекущаяФО Из ПараметрыРасчета.ФО Цикл
		Протокол.ДобавитьСтроку("	- " + ТекущаяФО.Ключ + ": "
			+ ПротоколРасчета_ПредставлениеЗначения(ТекущаяФО.Значение));
	КонецЦикла;
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("=================================================================================");
	Протокол.ДобавитьСтроку(НСтр("ru='Технические параметры расчета:';uk='Технічні параметри розрахунку:'"));
	
	Протокол.ДобавитьСтроку(НСтр("ru='	- Макс. допустимое отклонение при решении СЛУ:';uk=' - Макс. допустиме відхилення при вирішенні СЛР:'") + " "
		+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.ТребуемаяТочность));
	Протокол.ДобавитьСтроку(НСтр("ru='	- Макс. количество итераций решения СЛУ:';uk=' - Макс. кількість ітерацій вирішення СЛР:'") + " "
		+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.МаксКоличествоИтераций));
	Протокол.ДобавитьСтроку(НСтр("ru='	- Макс. сумма, считаемая ошибкой округления:';uk=' - Макс. сума, яка вважається помилкою округлення:'") + " "
		+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.ЗначениеПогрешности));
	Протокол.ДобавитьСтроку(НСтр("ru='	- Макс. количество строк в таблице значений:';uk=' - Макс. кількість рядків у таблиці значень:'") + " "
		+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.КоличествоСтрокТЗ));
	Протокол.ДобавитьСтроку(НСтр("ru='	- Макс. количество строк в наборе записей:';uk=' - Макс. кількість рядків у наборі записів:'") + " "
		+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.РазмерНабораЗаписей));
	Протокол.ДобавитьСтроку(НСтр("ru='	- Макс. количество потоков записи движений:';uk=' - Макс. кількість потоків запису рухів:'") + " "
		+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.МаксимальноеКоличествоФЗ));
	Если ПараметрыРасчета.МаксимальноеКоличествоФЗ > 1 Тогда
		Протокол.ДобавитьСтроку(НСтр("ru='	- Макс. количество движений, записываемое фоновым заданием:';uk=' - Макс. кількість рухів, яку буде записувати фонове завдання:'") + " "
			+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.КоличествоДвиженийВФЗ));
		Протокол.ДобавитьСтроку(НСтр("ru='	- Запись движений с включенными итогами по регистру:';uk='	- Запис рухів з включеними підсумками по регістру:'") + " "
			+ ПротоколРасчета_ПредставлениеЗначения(НЕ ПараметрыРасчета.ОтключатьИтогиПередЗаписью));
		Протокол.ДобавитьСтроку(НСтр("ru='	- Последовательная запись порций движений регистра:';uk=' - Послідовний запис порцій рухів регістра:'") + " "
			+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.ПоследовательнаяЗаписьРегистра));
	КонецЕсли;
	
	Если ПараметрыРасчета.Отладка.ИсправлятьПустойРегистратор
	 ИЛИ ПараметрыРасчета.Отладка.ОчищатьСтарыеДвижения
	 ИЛИ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ Тогда
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку("=================================================================================");
		Протокол.ДобавитьСтроку(НСтр("ru='Отладочные параметры:';uk='Налагоджувальні параметри:'"));
		Протокол.ДобавитьСтроку(НСтр("ru='	- Исправлять пустой регистратор:';uk=' - Виправляти порожній реєстратор:'") + " "
			+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.Отладка.ИсправлятьПустойРегистратор));
		Протокол.ДобавитьСтроку(НСтр("ru='	- Очищать все старые расчетные движения:';uk=' - Очищати всі старі розрахункові рухи:'") + " "
			+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.Отладка.ОчищатьСтарыеДвижения));
		Протокол.ДобавитьСтроку(НСтр("ru='	- Контролировать корректность формирования порций многопоточной записи:';uk=' - Контролювати коректність формування порцій багатопотокового запису:'") + " "
			+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ));
	КонецЕсли;
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("=================================================================================");
	Протокол.ДобавитьСтроку(НСтр("ru='Обслуживаемые регистры:';uk='Регістри, що обслуговуються:'"));
	
	Для Каждого ОписаниеРегистра Из ПараметрыРасчета.Движения Цикл
		Протокол.ДобавитьСтроку("	- " + ОписаниеРегистра.Значение.ПолноеИмяРегистра
			+ ?(ПараметрыРасчета.РегистрыСРасчетнымиЗаписями.Свойство(ОписаниеРегистра.Ключ),
				" (" + НСтр("ru='кэш оборотов';uk='кеш оборотів'") + ")", "")
			+ ?(ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.Ключ),
				" (" + НСтр("ru='кэш остатков';uk='кеш залишків'") + ")", ""));
	КонецЦикла;

#КонецОбласти

#Область ЭтапыРасчета
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("=================================================================================");
	Протокол.ДобавитьСтроку(НСтр("ru='Протокол выполнения этапов расчета:';uk='Протокол виконання етапів розрахунку:'"));
	
	Счетчик = 0;
	
	Для Каждого ОписаниеЭтапа Из ПротоколРасчета.Этапы Цикл
		
		Счетчик = Счетчик + 1;
		
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку(СокрЛП(Счетчик) + ". " + ОписаниеЭтапа.ПредставлениеЭтапа); // УровеньЭтапа пока не поддерживаем
		Протокол.ДобавитьСтроку(НСтр("ru='Начало этапа:';uk='Початок етапу:'") + " " + Формат(ОписаниеЭтапа.ДатаНачала, "ДЛФ=DT")
			+ ", " + НСтр("ru='длительность:';uk='тривалість:'") + " " + ПротоколРасчета_ПредставлениеВремениВыполнения(ОписаниеЭтапа, ПротоколРасчета));
		
		Если ЗначениеЗаполнено(ОписаниеЭтапа.СформированныеДвижения) Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Сформированы движения по регистрам (всего / уникальных):';uk='Сформовані рухи по регістрах (всього / унікальних):'"));
			Для Каждого ОписаниеДвижений Из ОписаниеЭтапа.СформированныеДвижения Цикл
				Протокол.ДобавитьСтроку("	- " + ОписаниеДвижений.Ключ + ": "
					+ ПротоколРасчета_ПредставлениеЗначения(ОписаниеДвижений.Значение.Всего) + " / "
					+ ПротоколРасчета_ПредставлениеЗначения(ОписаниеДвижений.Значение.Уникальных));
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеЭтапа.ВременныеТаблицы) Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Сформированы временные таблицы (размер / время (% времени этапа) / уточнение / исходные таблицы):';uk='Сформовані тимчасові таблиці (розмір / час (% часу етапу) / уточнення / вихідні таблиці):'"));
			Для Каждого ОписаниеТаблицы Из ОписаниеЭтапа.ВременныеТаблицы Цикл
				Протокол.ДобавитьСтроку("	- " + ОписаниеТаблицы.Ключ + ": ");
				Для Каждого ОписаниеДействия Из ОписаниеТаблицы.Значение Цикл
					Протокол.ДобавитьСтроку("		- "
						+ ПротоколРасчета_ПредставлениеЗначения(ОписаниеДействия.КоличествоСтрок)
						+ " / " + ПротоколРасчета_ПредставлениеВремениВыполнения(ОписаниеДействия, ОписаниеЭтапа)
						+ ?(НЕ ЗначениеЗаполнено(ОписаниеДействия.Пояснение), "",
							" / " + ПротоколРасчета_ПредставлениеЗначения(ОписаниеДействия.Пояснение))
						+ ?(НЕ ЗначениеЗаполнено(ОписаниеДействия.ИсходныеДанные), "",
							" / " + ПротоколРасчета_ПредставлениеЗначения(ОписаниеДействия.ИсходныеДанные)));
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеЭтапа.ДополнительныеСведения) Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Дополнительные сведения об этапе:';uk='Додаткові відомості про етап:'"));
			Для Каждого ОписаниеСведений Из ОписаниеЭтапа.ДополнительныеСведения Цикл
				Протокол.ДобавитьСтроку("	- " + ПротоколРасчета_ПредставлениеЗначения(ОписаниеСведений));
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
#КонецОбласти
	
#Область ИтоговыеПоказатели
	
	// Длительность этапов
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("=================================================================================");
	Протокол.ДобавитьСтроку(НСтр("ru='Итоговая информация о длительности этапов (абсолютная (относительная)):';uk='Підсумкова інформація про тривалість етапів (абсолютна (відносна)):'"));
	Протокол.ДобавитьСтроку("");
		
	Счетчик = 0;
	
	Для Каждого ОписаниеЭтапа Из ПротоколРасчета.Этапы Цикл
		
		Счетчик = Счетчик + 1;
		
		Протокол.ДобавитьСтроку(СокрЛП(Счетчик) + ". " + ОписаниеЭтапа.ПредставлениеЭтапа + ": "
			+ ПротоколРасчета_ПредставлениеВремениВыполнения(ОписаниеЭтапа, ПротоколРасчета));
		
	КонецЦикла;
	
	// Сформированные движения
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("=================================================================================");
	Протокол.ДобавитьСтроку(НСтр("ru='Итоговая информация о сформированных движениях по регистрам (всего / уникальных):';uk='Підсумкова інформація про сформовані рухи по регістрах (всього / унікальних):'"));
	Если ЗначениеЗаполнено(ПротоколРасчета.СформированныеДвижения) Тогда
		Для Каждого ОписаниеДвижений Из ПротоколРасчета.СформированныеДвижения Цикл
			Протокол.ДобавитьСтроку("	- " + ОписаниеДвижений.Ключ + ": "
				+ ПротоколРасчета_ПредставлениеЗначения(ОписаниеДвижений.Значение.Всего) + " / "
				+ ПротоколРасчета_ПредставлениеЗначения(ОписаниеДвижений.Значение.Уникальных));
			Если ОписаниеДвижений.Значение.Ошибочных > 0 Тогда
				Протокол.ДобавитьСтроку("		- " + НСтр("ru='в т.ч. ошибочных:';uk='в т. ч. помилкових:'") + " "
					+ ПротоколРасчета_ПредставлениеЗначения(ОписаниеДвижений.Значение.Ошибочных) + " !");
			КонецЕсли;
		КонецЦикла;
	Иначе
		Протокол.ДобавитьСтроку(НСтр("ru='Нет сформированных движений.';uk='Немає сформованих рухів.'"));
	КонецЕсли;
	
	// Выведем информацию об ошибках
	Если БылиОшибкиДвижений Тогда
		
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку(НСтр("ru='При формировании движений были обнаружены ошибки!';uk='При формуванні рухів були виявлені помилки!'"));
		
		НомерОшибкиДвижений = 0;
		
		Для Каждого ТекстОшибкиДвижений Из ПараметрыРасчета.ОшибкиДвижений Цикл
			
			НомерОшибкиДвижений = НомерОшибкиДвижений + 1;
			
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку(ПротоколРасчета_ПредставлениеЗначения(НомерОшибкиДвижений) + ". "
				+ ПротоколРасчета_ПредставлениеЗначения(ТекстОшибкиДвижений));
				
			// Продублируем в журнал регистрации
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				СокрЛП(ТекстОшибкиДвижений));
				
		КонецЦикла;
		
	КонецЕсли;
	
	// Записанные движения
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("=================================================================================");
	Протокол.ДобавитьСтроку(НСтр("ru='Итоговая информация о записанных движениях по регистрам (документов / записей):';uk='Підсумкова інформація про записані рухи по регістрах (документів / записів):'")); // количество записей - с учетом "первичных"
	
	КоличествоДокументов 	= 0;
	КоличествоЗаписей		= 0;
	
	Если НЕ БылиОшибкиФЗ Тогда
		
		Если ЗначениеЗаполнено(ПротоколРасчета.СформированныеДвижения) Тогда
			Для Каждого ОписаниеДвижений Из ПротоколРасчета.ЗаписьДвижений.СформированныеДвижения Цикл
				Если ОписаниеДвижений.Значение.КоличествоЗаписей > 0 Тогда
					
					КоличествоДокументов = КоличествоДокументов + ОписаниеДвижений.Значение.КоличествоДокументов;
					КоличествоЗаписей    = КоличествоЗаписей + ОписаниеДвижений.Значение.КоличествоЗаписей;
					
					Протокол.ДобавитьСтроку("	- " + ОписаниеДвижений.Ключ + ": "
						+ ПротоколРасчета_ПредставлениеЗначения(ОписаниеДвижений.Значение.КоличествоДокументов) + " / "
						+ ПротоколРасчета_ПредставлениеЗначения(ОписаниеДвижений.Значение.КоличествоЗаписей));
					
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоЗаписей > 0 Тогда
				Протокол.ДобавитьСтроку(НСтр("ru='Всего записано движений по регистрам:';uk='Всього записано рухів по регістрах:'") + " "
					+ ПротоколРасчета_ПредставлениеЗначения(КоличествоДокументов) + " / "
					+ ПротоколРасчета_ПредставлениеЗначения(КоличествоЗаписей));
			КонецЕсли;
			
			Протокол.ДобавитьСтроку(НСтр("ru='Длительность операций записи:';uk='Тривалість операцій запису:'") + " "
				+ ПротоколРасчета_ПредставлениеВремениВыполнения(ПротоколРасчета.ЗаписьДвижений, ПротоколРасчета));
			
		КонецЕсли;
		
		Если КоличествоЗаписей = 0 Тогда
			Протокол.ДобавитьСтроку(НСтр("ru='Запись движений не выполнялась - нет измененных движений.';uk='Запис рухів не виконувався - немає змінених рухів.'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыРасчета.ОбщееКоличествоФЗ > 0 Тогда
		
		Протокол.ДобавитьСтроку("");
		Протокол.ДобавитьСтроку(НСтр("ru='Всего запущено фоновых заданий записи движений:';uk='Всього запущено фонових завдань запису рухів:'") + " "
			+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.ОбщееКоличествоФЗ)
			+ ?(НЕ БылиОшибкиФЗ, "", ", " + НСтр("ru='из них завершено с ошибками';uk='з них завершено з помилками'") + ": "
					+ ПротоколРасчета_ПредставлениеЗначения(ПараметрыРасчета.ОшибкиФЗ.Количество()) + " !"));
					
		НомерОшибкиФЗ = 0;
		
		// Выведем информацию об ошибках
		Для Каждого ТекстОшибкиФЗ Из ПараметрыРасчета.ОшибкиФЗ Цикл
			
			НомерОшибкиФЗ = НомерОшибкиФЗ + 1;
			
			Протокол.ДобавитьСтроку("");
			Протокол.ДобавитьСтроку(ПротоколРасчета_ПредставлениеЗначения(НомерОшибкиФЗ) + ". "
				+ ПротоколРасчета_ПредставлениеЗначения(ТекстОшибкиФЗ));
				
			// Продублируем в журнал регистрации
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				СокрЛП(ТекстОшибкиФЗ));
				
		КонецЦикла;
		
	КонецЕсли;
	
	Протокол.ДобавитьСтроку("");
	Протокол.ДобавитьСтроку("=================================================================================");
	
#КонецОбласти
		
	// Запишем протокол в журнал регистрации
	ЗаписьЖурналаРегистрации(
		ИмяСобытияПротоколДляЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Протокол.ПолучитьТекст());
	
	Если БылиОшибкиДвижений ИЛИ БылиОшибкиФЗ Тогда
		// Движения сформированы/записаны некорректно - расчет не выполнен
		ВызватьИсключение НСтр("ru='Расчет себестоимости завершился аварийно.
                                |Подробнее см. в Журнале регистрации'
                                |;uk='Розрахунок собівартості завершився аварійно.
                                |Докладніше див. у Журналі реєстрації'");
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыПротоколированияЭтапаРасчета

// Протоколирует начало этапа расчета.
//
Процедура ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, ПредставлениеЭтапа, УровеньЭтапа = 1)
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	// Если не было явного объявления конца предыдущего этапа расчета, то закроем его в связи с началом нового этапа
	ПротоколРасчета_ОкончаниеЭтапаРасчета(ПараметрыРасчета);
	
	Если УровеньЭтапа = 1 Тогда
		// Сделаем запись о начале этапа в ЖР
		ПротоколРасчета_ОтметкаВЖурналеРегистрации(ПредставлениеЭтапа);
	КонецЕсли;
	
	ОписаниеЭтапа = ПротоколРасчета.Этапы.Добавить();
	
	ОписаниеЭтапа.ПредставлениеЭтапа 	 = ПредставлениеЭтапа;
	ОписаниеЭтапа.УровеньЭтапа 			 = УровеньЭтапа;
	ОписаниеЭтапа.ДатаНачала 	 		 = ТекущаяДатаСеанса();
	ОписаниеЭтапа.ВремяНачала 	 		 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеЭтапа.СформированныеДвижения = Новый Структура;
	ОписаниеЭтапа.ВременныеТаблицы 		 = Новый Структура;
	ОписаниеЭтапа.ДополнительныеСведения = Новый Массив;
	
КонецПроцедуры

// Протоколирует окончание этапа расчета. Необязательно вызывать в явном виде - вызовется при начале следующего этапа.
//
Процедура ПротоколРасчета_ОкончаниеЭтапаРасчета(ПараметрыРасчета)
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	ОписаниеЭтапа 	= ПротоколРасчета_ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеЭтапа) // еще не начали протоколирование расчета
	 ИЛИ ЗначениеЗаполнено(ОписаниеЭтапа.ВремяОкончания) Тогда // протокол этапа уже сформирован
		Возврат;
	КонецЕсли;
	
	ОписаниеЭтапа.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для Каждого ОписаниеДвижения Из ОписаниеЭтапа.СформированныеДвижения Цикл
		
		Если НЕ ПротоколРасчета.СформированныеДвижения.Свойство(ОписаниеДвижения.Ключ) Тогда
			// первое формирование движений по этому регистру
			ПротоколРасчета.СформированныеДвижения.Вставить(
				ОписаниеДвижения.Ключ,
				Новый Структура("Всего, Уникальных, Ошибочных", 0, 0, 0)); //в таблице значений и во временной таблице (свернутые записи)
		КонецЕсли;
		
		// Подсчитаем количество уникальных движений, сформированных на текущем этапе
		ВсегоДвижений = УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэш" + ОписаниеДвижения.Ключ);
		ОписаниеЭтапа.СформированныеДвижения[ОписаниеДвижения.Ключ].Уникальных =
			ВсегоДвижений - ПротоколРасчета.СформированныеДвижения[ОписаниеДвижения.Ключ].Уникальных;
		
		// Пересчитаем общее количество сформированных движений
		ПротоколРасчета.СформированныеДвижения[ОписаниеДвижения.Ключ].Всего = 
			ПротоколРасчета.СформированныеДвижения[ОписаниеДвижения.Ключ].Всего + ОписаниеДвижения.Значение.Всего;
		ПротоколРасчета.СформированныеДвижения[ОписаниеДвижения.Ключ].Уникальных = ВсегоДвижений;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПроцедурыПротоколированияВременныхТаблиц

// Протоколирует начало формирования временной таблицы (внутри этапа расчета).
//
Процедура ПротоколРасчета_НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, ИмяВременнойТаблицы, Пояснение = "", ИменаИсходныхТаблиц = "")
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	ПротоколРасчета.Вставить(
		"ФормированиеВременнойТаблицы",
		Новый Структура(
			"ИмяВременнойТаблицы, ВремяНачала, Пояснение, ИсходныеДанные",
			ИмяВременнойТаблицы, ТекущаяУниверсальнаяДатаВМиллисекундах(), "", ""));
	
	Если ЗначениеЗаполнено(Пояснение) Тогда
		ПротоколРасчета.ФормированиеВременнойТаблицы.Вставить("Пояснение", Пояснение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаИсходныхТаблиц) Тогда
		
		ТекстИсходныеДанные = "";
		
		Для Каждого КлючИЗначение Из Новый Структура(ИменаИсходныхТаблиц) Цикл
			ТекстИсходныеДанные =
				ТекстИсходныеДанные + ?(ТекстИсходныеДанные = "", "", ", ")
				+ КлючИЗначение.Ключ + " ("
				+ ПротоколРасчета_ПредставлениеЗначения(
					УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, КлючИЗначение.Ключ)) + ")";
		КонецЦикла;
		
		ПротоколРасчета.ФормированиеВременнойТаблицы.Вставить("ИсходныеДанные", ТекстИсходныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

// Протоколирует окончание формирования временной таблицы (внутри этапа расчета).
//
Процедура ПротоколРасчета_ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета)
	
	ПротоколРасчета 	= ПараметрыРасчета.ПротоколРасчета;
	ОписаниеЭтапа 		= ПротоколРасчета_ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	ИмяВременнойТаблицы = ПротоколРасчета.ФормированиеВременнойТаблицы.ИмяВременнойТаблицы;
	
	Если НЕ ОписаниеЭтапа.ВременныеТаблицы.Свойство(ИмяВременнойТаблицы) Тогда
		ОписаниеЭтапа.ВременныеТаблицы.Вставить(ИмяВременнойТаблицы, Новый Массив);
	КонецЕсли;
	
	КоличествоСтрок = УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(ПараметрыРасчета, ИмяВременнойТаблицы);
	
	ОписаниеЭтапа.ВременныеТаблицы[ИмяВременнойТаблицы].Добавить(
		Новый Структура(
			"КоличествоСтрок, ВремяНачала, ВремяОкончания, Пояснение, ИсходныеДанные",
				КоличествоСтрок,
				ПротоколРасчета.ФормированиеВременнойТаблицы.ВремяНачала,
				ТекущаяУниверсальнаяДатаВМиллисекундах(),
				ПротоколРасчета.ФормированиеВременнойТаблицы.Пояснение,
				ПротоколРасчета.ФормированиеВременнойТаблицы.ИсходныеДанные));
	
	ПротоколРасчета.Вставить("ФормированиеВременнойТаблицы");
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПротоколированияДополнительныхСведений

// Добавляет в протокол произвольный текст (внутри этапа расчета).
//
Процедура ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, ТекстовоеОписание)
	
	ПротоколРасчета	= ПараметрыРасчета.ПротоколРасчета;
	ОписаниеЭтапа	= ПротоколРасчета_ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	ОписаниеЭтапа.ДополнительныеСведения.Добавить(ТекстовоеОписание);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПротоколированияДвижений

// Протоколирует начало записи сформированных движений.
//
Процедура ПротоколРасчета_НачалоЗаписиДвижений(ПараметрыРасчета)
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	ЗаписьДвижений	= ПротоколРасчета.ЗаписьДвижений;
	
	// Если не было явного объявления конца предыдущего этапа расчета, то закроем его в связи с началом нового этапа
	ПротоколРасчета_ОкончаниеЭтапаРасчета(ПараметрыРасчета);
	
	ПротоколРасчета_НачалоЭтапаРасчета(ПараметрыРасчета, "ЗаписатьСформированныеДвижения");
	
	// Сделаем запись в ЖР
	ПротоколРасчета_ОтметкаВЖурналеРегистрации("ЗаписатьСформированныеДвижения");
	
	ЗаписьДвижений.Вставить("ВремяНачала", 			  ТекущаяУниверсальнаяДатаВМиллисекундах());
	ЗаписьДвижений.Вставить("СформированныеДвижения", Новый Структура);
	
КонецПроцедуры

// Протоколирует окончание записи сформированных движений.
//
Процедура ПротоколРасчета_ОкончаниеЗаписиДвижений(ПараметрыРасчета)
	
	ЗаписьДвижений	= ПараметрыРасчета.ПротоколРасчета.ЗаписьДвижений;
	
	ЗаписьДвижений.Вставить("ВремяОкончания", ТекущаяУниверсальнаяДатаВМиллисекундах());
	
КонецПроцедуры

// Протоколирует количественные показатели кэширования сформированных движений.
//
Процедура ПротоколРасчета_КэшированиеСформированныхДвижений(ПараметрыРасчета, ИмяРегистра, КоличествоСтрокТаблицыЗначений)
	
	ОписаниеЭтапа = ПротоколРасчета_ОписаниеТекущегоЭтапа(ПараметрыРасчета);
	
	Если НЕ ОписаниеЭтапа.СформированныеДвижения.Свойство(ИмяРегистра) Тогда
		ОписаниеЭтапа.СформированныеДвижения.Вставить(
			ИмяРегистра,
			Новый Структура("Всего, Уникальных", КоличествоСтрокТаблицыЗначений, 0)); //в таблице значений и во временной таблице (свернутые записи)
	Иначе
		ОписаниеЭтапа.СформированныеДвижения[ИмяРегистра].Всего =
			ОписаниеЭтапа.СформированныеДвижения[ИмяРегистра].Всего + КоличествоСтрокТаблицыЗначений;
	КонецЕсли;
	
КонецПроцедуры

// Протоколирует количественные показатели записи сформированных движений.
//
Процедура ПротоколРасчета_ЗаписьСформированныхДвижений(ПараметрыРасчета, ИмяРегистра, КоличествоДокументов = 0, КоличествоЗаписей = 0)
	
	ЗаписьДвижений	= ПараметрыРасчета.ПротоколРасчета.ЗаписьДвижений;
	
	Если НЕ ЗаписьДвижений.СформированныеДвижения.Свойство(ИмяРегистра) Тогда
		ЗаписьДвижений.СформированныеДвижения.Вставить(
			ИмяРегистра,
			Новый Структура("КоличествоДокументов, КоличествоЗаписей", КоличествоДокументов, КоличествоЗаписей));
	Иначе
		ЗаписьДвижений.СформированныеДвижения[ИмяРегистра].КоличествоДокументов =
			ЗаписьДвижений.СформированныеДвижения[ИмяРегистра].КоличествоДокументов + КоличествоДокументов;
		ЗаписьДвижений.СформированныеДвижения[ИмяРегистра].КоличествоЗаписей =
			ЗаписьДвижений.СформированныеДвижения[ИмяРегистра].КоличествоЗаписей + КоличествоЗаписей;
	КонецЕсли;
	
КонецПроцедуры

// Протоколирует ошибки в сформированных движениях.
//
Процедура ПротоколРасчета_КорректностьДвижений(ПараметрыРасчета, ИмяРегистра, КоличествоОшибочныхДвижений)
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	ПротоколРасчета.СформированныеДвижения[ИмяРегистра].Ошибочных = 
		ПротоколРасчета.СформированныеДвижения[ИмяРегистра].Ошибочных + КоличествоОшибочныхДвижений;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыПротоколирования

// Возвращает описание текущего этапа (строку таблицы этапов)
//
Функция ПротоколРасчета_ОписаниеТекущегоЭтапа(ПараметрыРасчета)
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета;
	
	// Пока не поддерживается вложенность этапов.
	// Если понадобится вложенность, то это код надо будет изменить.
	Если ПротоколРасчета.Этапы.Количество() = 0 Тогда
		ОписаниеТекущегоЭтапа = Неопределено;
	Иначе
		ОписаниеТекущегоЭтапа = ПротоколРасчета.Этапы[ПротоколРасчета.Этапы.Количество()-1];
	КонецЕсли;
	
	Возврат ОписаниеТекущегоЭтапа;
	
КонецФункции

// Делает запись в журнал регистрации.
//
Процедура ПротоколРасчета_ОтметкаВЖурналеРегистрации(ПредставлениеЭтапа, Уровень = Неопределено, Комментарий = "")
	
	Если НЕ ЗначениеЗаполнено(Уровень) Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Комментарий = НСтр("ru='Начало выполнения этапа.';uk='Початок виконання етапу.'");
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(НСтр("ru='Этап';uk='Етап'") + "." + ПредставлениеЭтапа),
		Уровень,
		,
		,
		Комментарий);
	
КонецПроцедуры

// Возвращает представление интервала времени (ВремяНачала, ВремяОкончания) и его % от общего времени расчета.
//
Функция ПротоколРасчета_ПредставлениеВремениВыполнения(ИсточникДанныхОВремени, ИсточникДанныхОбОбщемВремени = Неопределено)
	
	Секунды = (ИсточникДанныхОВремени.ВремяОкончания - ИсточникДанныхОВремени.ВремяНачала) / 1000;
	
	Если ИсточникДанныхОбОбщемВремени <> Неопределено Тогда
		ПроцентВремени = Окр(100*Секунды/((ИсточникДанныхОбОбщемВремени.ВремяОкончания - ИсточникДанныхОбОбщемВремени.ВремяНачала + 1) / 1000), 2);
	Иначе
		ПроцентВремени = Неопределено;
	КонецЕсли;
	
	Часы = Цел(Секунды / 3600);
	Секунды = Секунды - Часы*3600;
	
	Минуты  = Цел(Секунды / 60);
	Секунды = Секунды - Минуты*60;
	
	ПредставлениеВремени = ""
		+ ?(Часы = 0, "", ПротоколРасчета_ПредставлениеЗначения(Часы) + " " + НСтр("ru='ч.';uk='год.'") + " ")
		+ ?(Минуты = 0, "", ПротоколРасчета_ПредставлениеЗначения(Минуты) + " " + НСтр("ru='мин.';uk='хв.'") + " ")
		+ ПротоколРасчета_ПредставлениеЗначения(Секунды) + " " + НСтр("ru='сек.';uk='сек.'")
		+ ?(ПроцентВремени = Неопределено, "", " (" + ПротоколРасчета_ПредставлениеЗначения(ПроцентВремени) + "%)");
	
	Возврат СокрЛП(ПредставлениеВремени);
	
КонецФункции

// Возвращает представление произвольного значения для записи в протокол.
// При использовании этой функции все значения одинакового типа будут одинаковое форматирование.
//
Функция ПротоколРасчета_ПредставлениеЗначения(Значение)
	
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Возврат Формат(Значение, "БЛ=Нет; БИ=Да");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда 
		
		Если Значение <> 0 И Значение > -0.001 И Значение < 0.001 Тогда
			
			// Представление малых чисел
			
			Степень 	  = 0;
			НовоеЗначение = Значение;
			
			Пока НовоеЗначение > -1 И НовоеЗначение < 1 Цикл
				Степень = Степень + 1;
				НовоеЗначение = НовоеЗначение * 10;
			КонецЦикла;
			
			Возврат СокрЛП(НовоеЗначение) + " * 10^-" + СокрЛП(Степень);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров") Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат "<" + НСтр("ru='Не используется';uk='Не використовується'") + ">";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СокрЛП(Значение);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыОтладки

// Сохраняет временные таблицы, используемые для решения СЛУ, в файлы на диск.
//
Процедура СохранитьДанныеСЛУ(ПараметрыРасчета, РасчетСтоимостиРегл)
	
	ИмяКаталога = ПараметрыРасчета.Отладка.КаталогДляСохраненияДанныхСЛУ;
	Если НЕ ЗначениеЗаполнено(ИмяКаталога) Тогда
		Возврат; // выгрузка СЛУ не требуется
	КонецЕсли;
	
	Каталог = Новый Файл(ИмяКаталога);
	Если НЕ Каталог.Существует() ИЛИ НЕ Каталог.ЭтоКаталог() Тогда
		СтрокаПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не найден каталог для сохранения данных СЛУ: ""%1""';uk='Не знайдений каталог для збереження даних СЛР: ""%1""'"),
			ПротоколРасчета_ПредставлениеЗначения(ИмяКаталога));
		ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, СтрокаПротокола);
		Возврат; // каталог для выгрузки не найден
	КонецЕсли;
	
	// ВтУзлыКорректировки и ВтТаблицаРешений выгружаем в один файл "...Узлы".
	//	- одноименным колонкам этих таблиц присвоим префиксы "Узел" и "Решение" соответственно
	// ВтПеремещенияСписания выгружаем в файл "...Дуги".
	
	ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	
	ШаблонИмениФайла =
		Формат(ТекущаяДатаСеанса() - Дата(1,1,1), "ЧЦ=12; ЧВН=; ЧГ=")      // дата-время выгрузки
		+ "_" + ?(ПараметрыРасчета.ПредварительныйРасчет, "Предв", "Факт") // какой вид расчета
		+ "_" + ?(РасчетСтоимостиРегл, "Регл", "Упр")					   // какую себестоимость рассчитываем
		+ "_%1.mxl";													   // какую временную таблицу выгружаем
	
	// Получим данные из временных таблиц
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УзлыКорректировки.НомерУзла					 	КАК НомерУзла,
	|	УзлыКорректировки.Организация                	КАК Организация,
	|	УзлыКорректировки.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	УзлыКорректировки.РазделУчета                	КАК РазделУчета,
	|	УзлыКорректировки.ВидЗапасов                 	КАК ВидЗапасов,
	|	УзлыКорректировки.Количество          		 	КАК Количество,
	|
	|	УзлыКорректировки.Стоимость 				 	КАК УзелСтоимость,
	|	УзлыКорректировки.СтоимостьБезНДС 				КАК УзелСтоимостьБезНДС,
	|	УзлыКорректировки.ПостояннаяРазница
	|		* УзлыКорректировки.ПостояннаяРазницаЗнак 	КАК УзелПостояннаяРазница,
	|	УзлыКорректировки.ВременнаяРазница
	|		* УзлыКорректировки.ВременнаяРазницаЗнак 	КАК УзелВременнаяРазница,
	|	УзлыКорректировки.СтоимостьРеглБезНДС 			КАК УзелСтоимостьРеглБезНДС,
	|	УзлыКорректировки.НДСРегл                       КАК УзелНДСРегл,
	|	УзлыКорректировки.СтоимостьДопРасходы 			КАК УзелСтоимостьДопРасходы,
	|	УзлыКорректировки.СтоимостьДопРасходыБезНДС 	КАК УзелСтоимостьДопРасходыБезНДС,
	|
	|	ТаблицаРешений.Стоимость 				 		КАК РешениеСтоимость,
	|	ТаблицаРешений.СтоимостьБезНДС 					КАК РешениеСтоимостьБезНДС,
	|	ТаблицаРешений.ПостояннаяРазница
	|		* ТаблицаРешений.ПостояннаяРазницаЗнак 		КАК РешениеПостояннаяРазница,
	|	ТаблицаРешений.ВременнаяРазница
	|		* ТаблицаРешений.ВременнаяРазницаЗнак 		КАК РешениеВременнаяРазница,
	|	ТаблицаРешений.СтоимостьРеглБезНДС 				КАК РешениеСтоимостьРеглБезНДС,
	|	ТаблицаРешений.НДСРегл 							КАК РешениеНДСРегл,
	|	ТаблицаРешений.СтоимостьДопРасходы 				КАК РешениеСтоимостьДопРасходы,
	|	ТаблицаРешений.СтоимостьДопРасходыБезНДС 		КАК РешениеСтоимостьДопРасходыБезНДС
	|
	|ИЗ
	|	ВТУзлыКорректировки КАК УзлыКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаРешений КАК ТаблицаРешений
	|		ПО УзлыКорректировки.НомерУзла = ТаблицаРешений.НомерУзла
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерУзла
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПеремещенияСписания.НомерУзлаИсточник 		КАК НомерУзлаИсточник,
	|	ПеремещенияСписания.НомерУзлаПриемник 		КАК НомерУзлаПриемник,
	|	ПеремещенияСписания.Количество 				КАК Количество,
	|	ПеремещенияСписания.ПередачаВЭксплуатацию	КАК ПередачаВЭксплуатацию
	|ИЗ
	|	ВТПеремещенияСписания КАК ПеремещенияСписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерУзлаПриемник,
	|	НомерУзлаИсточник
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Сохраним первый файл
	СтрокаПротокола = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(
		РезультатЗапроса[0].Выгрузить(),
		ИмяКаталога + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, "Узлы"));
	
	Если ЗначениеЗаполнено(СтрокаПротокола) Тогда
		ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, СтрокаПротокола); // ошибка записи файла
	КонецЕсли;
	
	// Сохраним второй файл
	СтрокаПротокола = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(
		РезультатЗапроса[1].Выгрузить(),
		ИмяКаталога + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, "Дуги"));
	
	Если ЗначениеЗаполнено(СтрокаПротокола) Тогда
		ПротоколРасчета_ДобавитьДополнительныеСведения(ПараметрыРасчета, СтрокаПротокола); // ошибка записи файла
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОписаниеДанныхМеханизма

// Возвращает перечень объектов метаданных, на основании данных которых выполняется расчет себестоимости.
//
// Параметры:
//	ТолькоТребующиеПерерасчетаСебестоимости - Булево - если установлен, то будет возвращен перечень только тех данных,
//		изменение которых влечет за собой необходимость перерасчета себестоимости
//		При изменении этих данных должна создаваться запись в регистре сведений ЗаданияКРасчетуСебестоимости.
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных
//
Функция ВходящиеДанныеМеханизма(ТолькоТребующиеПерерасчетаСебестоимости = Ложь) Экспорт
	
	ВходящиеДанные = Новый Соответствие;
	Если ТолькоТребующиеПерерасчетаСебестоимости Тогда
		Значение = Истина; // чтобы можно было проверить вхождение объекта метаданных в это соответствие
	Иначе
		Значение = Неопределено;
	КонецЕсли;
	
	// Документы
	
	Если НЕ ТолькоТребующиеПерерасчетаСебестоимости Тогда 
		ВходящиеДанные.Вставить(Метаданные.Документы.ВнутреннееПотреблениеТоваров, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ВозвратТоваровОтКлиента, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.КорректировкаРеализации, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ОтчетОРозничныхПродажах, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ПеремещениеТоваров, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.ПоступлениеТоваровУслуг, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.РасчетСебестоимостиТоваров, Значение);
		ВходящиеДанные.Вставить(Метаданные.Документы.РеализацияТоваровУслуг, Значение);
		
	КонецЕсли;

	
	// Регистры накопления
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизаций, Значение);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизацийКПередаче, Значение);

	Если НЕ ТолькоТребующиеПерерасчетаСебестоимости Тогда 
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы, Значение);
	КонецЕсли;
	
	// Регистры сведений
	
	Если НЕ ТолькоТребующиеПерерасчетаСебестоимости Тогда 
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаПартий, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.АналитикаУчетаПоПартнерам, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.НастройкаРаспределенияПоНаправлениямДеятельности, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СтоимостьТоваров, Значение);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций, Значение);
		
	КонецЕсли;
	
	Возврат ВходящиеДанные;
	
КонецФункции

// Возвращает перечень регистров, обслуживаемых механизмом расчета себестоимости.
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных
//
Функция ИсходящиеДанныеМеханизма() Экспорт
	
	// Перечень метаданных регистров, по которым формируются движения при расчете себестоимости.
	ИсходящиеДанные = Новый Соответствие;
	
	Значение = Истина; // чтобы можно было проверить вхождение объекта метаданных в это соответствие
	
	ИсходящиеДанные.Вставить(Метаданные.РегистрыСведений.СтоимостьТоваров, 							Значение);
	
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж, 			Значение);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров, 					Значение);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.Закупки, 								Значение);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы, 		Значение);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура, 		Значение);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы, 							Значение);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы, 							Значение);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы, 					Значение);
	ИсходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ФинансовыеРезультаты, 					Значение);
	
	Возврат ИсходящиеДанные;
	
КонецФункции


// Возвращает перечень документов, которые могут иметь движения в разных месяцах или по нескольким организациям.
//
// Параметры:
//	РазныеПериоды - Булево - добавлять в результат документы с движениями в разных периодах
//	РазныеОрганизации - Булево - добавлять в результат документы с движениями по нескольким организациям
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных
//
Функция ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации) Экспорт
	
	ОписаниеДокументов = Новый Соответствие;
	
	Значение = Истина; // чтобы можно было проверить вхождение объекта метаданных в это соответствие
	
	Если РазныеПериоды Тогда
		ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг, Значение); // операция РеализацияБезПереходаПраваСобственности
	КонецЕсли;
	
	Если РазныеОрганизации Тогда
		ОписаниеДокументов.Вставить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями, 			 Значение);
		ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями, 		 Значение);
		ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании, Значение);
		ОписаниеДокументов.Вставить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями, 		 Значение);
		ОписаниеДокументов.Вставить(Метаданные.Документы.ПеремещениеТоваров, 						 Значение);
		ОписаниеДокументов.Вставить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств, 		 Значение); // расходы на себестоимость
	КонецЕсли;
	
	Возврат ОписаниеДокументов;
	
КонецФункции

#КонецОбласти


#Область ВспомогательныеПроцедурыДляБлокировкиАлгоритмаПриОбновленииИБ

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации)
	
	ЗакрытиеМесяцаУТВызовСервера.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(
		ВходящиеДанныеМеханизма(),
		ПредставлениеОперации);
	
КонецПроцедуры

#КонецОбласти


#Область Прочие

// Возвращает общее для всех этапов расчета себестоимости имя события для журнала регистрации.
//
Функция ИмяСобытияЖурналаРегистрации(Уточнение)
	
	ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Расчет себестоимости%1';uk='Розрахунок собівартості%1'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		?(Уточнение = "", "", "." + Уточнение));
	
	Возврат ИмяСобытия;
	
КонецФункции

// Возвращает имя события журнала для записи ошибки расчета.
//
Функция ИмяСобытияОшибкиДляЖурналаРегистрации()
	
	Возврат ИмяСобытияЖурналаРегистрации(НСтр("ru='Ошибка';uk='Помилка'"));
	
КонецФункции

// Возвращает имя события журнала для записи протокола расчета.
//
Функция ИмяСобытияПротоколДляЖурналаРегистрации()
	
	Возврат ИмяСобытияЖурналаРегистрации(НСтр("ru='Протокол расчета';uk='Протокол розрахунку'"));
	
КонецФункции


// Возвращает имя служебного доп. свойства, устанавливаемого у всех объектов, записываемых этим механизмом.
//
Функция ИмяСлужебногоДополнительногоСвойстваОбъекта()
	Возврат "РасчетСебестоимости";
КонецФункции

#КонецОбласти

#КонецОбласти

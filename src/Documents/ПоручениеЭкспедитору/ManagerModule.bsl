#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.ДатаВыполнения    КАК Дата,
	|
	|	Шапка.Пункт
	|                           КАК ПолучательОтправитель,
	|
	|	НЕОПРЕДЕЛЕНО            КАК Перевозчик,
	|	Шапка.СпособДоставки    КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|	Шапка.АдресДоставки     КАК Адрес,
	|
	|	Шапка.АдресДоставкиЗначенияПолей
	|		                    КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформация,
	|	Шапка.Склад             КАК Склад,
	|	ИСТИНА                  КАК ДоставитьПолностью,
	|	ИСТИНА                  КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	Документ.ПоручениеЭкспедитору КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка В (&Ссылки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция извлекает из оснований данные для заполнения поручения.
//
// Возвращаемое значение:
//	Основания - Массив оснований
//
Функция ДанныеОснований(Основания) Экспорт
	
	ШаблонЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) КАК КонтактноеЛицо
	|ПОМЕСТИТЬ ДанныеОснований
	|ИЗ #ТаблицаДокумента КАК Т
	|
	|ГДЕ Т.Ссылка В (&Основания)";
	
	ОснованияПоТипам = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(Основания);
	ПервыйЗапрос = Истина;
	ТекстЗапроса = "";
	Для Каждого КлючИЗначение Из ОснованияПоТипам Цикл
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяТаблицыОбъекта = МетаданныеОбъекта.ПолноеИмя();
		ТекстЗапросаПоТипу = ШаблонЗапроса;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад", "Склад КАК Склад");
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Партнер", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер", "Партнер КАК Партнер");
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Подразделение", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение", "Подразделение КАК Подразделение");
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КонтактноеЛицо", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) КАК КонтактноеЛицо", "КонтактноеЛицо КАК КонтактноеЛицо");
		КонецЕсли;
		ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаПоТипу, ПервыйЗапрос, ИмяТаблицыОбъекта);
		
		ТекстЗапросаПоТипу = ШаблонЗапроса;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад", "СкладОтправитель КАК Склад");
		КонецЕсли;		
		ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаПоТипу, ПервыйЗапрос, ИмяТаблицыОбъекта);
		
		ТекстЗапросаПоТипу = ШаблонЗапроса;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладПолучатель", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад", "СкладПолучатель КАК Склад");
		КонецЕсли;		
		ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаПоТипу, ПервыйЗапрос, ИмяТаблицыОбъекта);
		
		Для Каждого ТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ТЧ) Тогда
				Продолжить;
			КонецЕсли;
			ИмяТаблицыТЧ = ИмяТаблицыОбъекта + "." + ТЧ.Имя;
			ТекстЗапросаПоТипу = ШаблонЗапроса;
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад", "Склад КАК Склад");
			ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаПоТипу, ПервыйЗапрос, ИмяТаблицыТЧ);
		КонецЦикла;
		Для Каждого ТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", ТЧ) Тогда
				Продолжить;
			КонецЕсли;
			ИмяТаблицыТЧ = ИмяТаблицыОбъекта + "." + ТЧ.Имя;
			ТекстЗапросаПоТипу = ШаблонЗапроса;
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад", "СкладОтправитель КАК Склад");			
			ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаПоТипу, ПервыйЗапрос, ИмяТаблицыТЧ);
		КонецЦикла;
		Для Каждого ТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладПолучатель", ТЧ) Тогда
				Продолжить;
			КонецЕсли;
			ИмяТаблицыТЧ = ИмяТаблицыОбъекта + "." + ТЧ.Имя;
			ТекстЗапросаПоТипу = ШаблонЗапроса;
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад", "СкладПолучатель КАК Склад");
			ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаПоТипу, ПервыйЗапрос, ИмяТаблицыТЧ);
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|//////////////////////////////////////////
	|;
	|" +
	"ВЫБРАТЬ
	|	Т.Склад
	|ИЗ
	|	ДанныеОснований КАК Т
	|ГДЕ
	|	Т.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И НЕ Т.Склад.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	КОЛИЧЕСТВО(*) УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Пункт
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Партнер КАК Пункт,
	|		1 КАК Порядок
	|	ИЗ
	|		ДанныеОснований КАК Т
	|	ГДЕ
	|		Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Подразделение,
	|		2
	|	ИЗ
	|		ДанныеОснований КАК Т
	|	ГДЕ
	|		Т.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Склад,
	|		3
	|	ИЗ
	|		ДанныеОснований КАК Т
	|	ГДЕ
	|		Т.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		И НЕ Т.Склад.ЭтоГруппа) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Пункт,
	|	Т.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Порядок,
	|	КОЛИЧЕСТВО(*) УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.КонтактноеЛицо
	|ИЗ
	|	ДанныеОснований КАК Т
	|ГДЕ
	|	Т.КонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.КонтактноеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	КОЛИЧЕСТВО(*) УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основания", Основания);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СтруктураВозврата = Новый Структура("Склады, Пункты, Контакты");
	СтруктураВозврата.Склады   = РезультатЗапроса[РезультатЗапроса.Количество()-3].Выгрузить().ВыгрузитьКолонку("Склад");
	СтруктураВозврата.Пункты   = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выгрузить().ВыгрузитьКолонку("Пункт");
	СтруктураВозврата.Контакты = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить().ВыгрузитьКолонку("КонтактноеЛицо");
	
	Возврат СтруктураВозврата;

КонецФункции

Процедура ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаДляДополнения, ПервыйЗапрос, ИмяТаблицы)
	
	Если Не ЗначениеЗаполнено(ТекстЗапросаДляДополнения) Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "#ТаблицаДокумента", ИмяТаблицы);
	Если ПервыйЗапрос Тогда
		ПервыйЗапрос = Ложь;
		ТекстЗапроса = ТекстЗапросаДляДополнения;
	Иначе
		ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "ПОМЕСТИТЬ ДанныеОснований", "");
		ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|"
		+ ТекстЗапросаДляДополнения;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Поручение экспедитору
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПоручениеЭкспедитору";
	КомандаПечати.Представление = НСтр("ru='Печать';uk='Друк'");
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПоручениеЭкспедитору") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПоручениеЭкспедитору",
			НСтр("ru='Поручение экспедитору';uk='Доручення експедитору'"),
			СформироватьПечатнуюФормуПорученияЭкспедитору(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода),
			,
			"Документ.ПоручениеЭкспедитору.ПФ_MXL_ПоручениеЭкспедитору",
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма
			);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуПорученияЭкспедитору(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода)


	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыПоручениеЭкспедитору(МассивОбъектов, ПараметрыПечати);
	ЗаполнитьТабличныйДокументПоручениеЭкспедитору(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыВывода);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПОРУЧЕНИЕЭКСПЕДИТОРУ";
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыПоручениеЭкспедитору(МассивОбъектов, ПараметрыПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоручениеЭкспедитору.Ссылка КАК Ссылка,
	|	ПоручениеЭкспедитору.Номер КАК НомерПоручения,
	|	ПоручениеЭкспедитору.Дата КАК Дата,
	|	ПоручениеЭкспедитору.СпособДоставки КАК СпособДоставки,
	|	ПоручениеЭкспедитору.Склад.Представление КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ПоручениеЭкспедитору.Пункт) КАК Пункт,
	|	ПоручениеЭкспедитору.КонтактноеЛицо.Представление КАК Контакт,
	|	ПоручениеЭкспедитору.АдресДоставки КАК АдресДоставки,
	|	ПоручениеЭкспедитору.ЗонаДоставки.Представление КАК ЗонаДоставки,
	|	ПоручениеЭкспедитору.ВремяДоставкиС КАК ВремяС,
	|	ПоручениеЭкспедитору.ВремяДоставкиПо КАК ВремяПо,
	|	ПоручениеЭкспедитору.ДополнительнаяИнформацияПоДоставке КАК ИнформацияПоПункту,
	|	ПоручениеЭкспедитору.ОсобыеУсловияПеревозкиОписание КАК ОписаниеПоручения,
	|	ПоручениеЭкспедитору.Ответственный.Представление КАК Ответственный
	|ИЗ
	|	Документ.ПоручениеЭкспедитору КАК ПоручениеЭкспедитору
	|ГДЕ
	|	ПоручениеЭкспедитору.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеДляПечати = РезультатЗапроса.Выгрузить();
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПоручениеЭкспедитору(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыВывода)

	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;

	ДанныеДляПечатиСтрока = ДанныеДляПечати[0];
    ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоручениеЭкспедитору.ПФ_MXL_ПоручениеЭкспедитору",КодЯзыкаПечать);
	
	// Области документа
	ОбластьШтрихкода = Макет.ПолучитьОбласть("ОбластьШтрихкода");
	ОбластьЗаголовока = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПункта = Макет.ПолучитьОбласть("ОбластьПункт");
	ОбластьАдреса = Макет.ПолучитьОбласть("ОбластьАдресДоставки");
	ОбластьОписания = Макет.ПолучитьОбласть("ОбластьОписание");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	// Реквизиты заголовка документа
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Номер", ДанныеДляПечатиСтрока.НомерПоручения);
	РеквизитыДокумента.Вставить("Дата", ДанныеДляПечатиСтрока.Дата);
	
	ЗаголовокДокумента = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента,
		НСтр("ru='Поручение экспедитору';uk='Доручення експедитору'",КодЯзыкаПечать),КодЯзыкаПечать);
	
	// Заполнение параметров областей ПФ_MXL_ПоручениеЭкспедитору
	ОбластьЗаголовока.Параметры.ТекстЗаголовка = ЗаголовокДокумента;
	
	ОбластьПункта.Параметры.Заполнить(ДанныеДляПечатиСтрока);
	ОбластьАдреса.Параметры.Заполнить(ДанныеДляПечатиСтрока);
	ОбластьОписания.Параметры.Заполнить(ДанныеДляПечатиСтрока);
	ОбластьПодписи.Параметры.Заполнить(ДанныеДляПечатиСтрока);
	
	// Вывод областей ПФ_MXL_ПоручениеЭкспедитору
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент,
		Макет,
		ОбластьЗаголовока,
		ДанныеДляПечатиСтрока.Ссылка);
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовока);
	
	Если ДанныеДляПечатиСтрока.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуСоСклада
		Или ДанныеДляПечатиСтрока.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуНаСклад Тогда
		
		ОбластьНаправлениеОткуда = Макет.ПолучитьОбласть("ЗаголовокНаправление");
		ОбластьСклада = Макет.ПолучитьОбласть("ОбластьСклад");
		ОбластьНаправлениеКуда = Макет.ПолучитьОбласть("ЗаголовокНаправление");
		
		ОбластьНаправлениеОткуда.Параметры.Направление = НСтр("ru='Откуда';uk='Звідки'",КодЯзыкаПечать);
		ОбластьСклада.Параметры.Склад = ДанныеДляПечатиСтрока.Склад;
		ОбластьНаправлениеКуда.Параметры.Направление = НСтр("ru='Куда';uk='Куди'",КодЯзыкаПечать);
		
		Если ДанныеДляПечатиСтрока.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуСоСклада Тогда
			
			ТабличныйДокумент.Вывести(ОбластьНаправлениеОткуда);
			ТабличныйДокумент.Вывести(ОбластьСклада);
			ТабличныйДокумент.Вывести(ОбластьНаправлениеКуда);
			
		Иначе
			
			ТабличныйДокумент.Вывести(ОбластьНаправлениеКуда);
			ТабличныйДокумент.Вывести(ОбластьСклада);
			ТабличныйДокумент.Вывести(ОбластьНаправлениеОткуда);
			
		КонецЕсли;
		
	Иначе
		ОбластьНаправление = Макет.ПолучитьОбласть("ЗаголовокНаправление");
		ОбластьНаправление.Параметры.Направление = НСтр("ru='Где';uk='Де'",КодЯзыкаПечать);
		
		ТабличныйДокумент.Вывести(ОбластьНаправление);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьПункта);
	
	Если ЗначениеЗаполнено(ДанныеДляПечатиСтрока.Контакт) Тогда
		ОбластьКонтакта = Макет.ПолучитьОбласть("ОбластьКонтакт");
		
		ОбластьКонтакта.Параметры.Заполнить(ДанныеДляПечатиСтрока);
		ТабличныйДокумент.Вывести(ОбластьКонтакта);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьАдреса);
	
	Если ЗначениеЗаполнено(ДанныеДляПечатиСтрока.ЗонаДоставки) Тогда
		ОбластьЗоны = Макет.ПолучитьОбласть("ОбластьЗона");
		
		ОбластьЗоны.Параметры.Заполнить(ДанныеДляПечатиСтрока);
		ТабличныйДокумент.Вывести(ОбластьЗоны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляПечатиСтрока.ВремяС)
		Или ЗначениеЗаполнено(ДанныеДляПечатиСтрока.ВремяПо) Тогда
		
		ОбластьВремени = Макет.ПолучитьОбласть("ОбластьВремяДоставки");
		
 		ВремяС = Формат(ДанныеДляПечатиСтрока.ВремяС, "ДФ=ЧЧ:мм");
		ВремяПо = Формат(ДанныеДляПечатиСтрока.ВремяПо, "ДФ=ЧЧ:мм");
		
		ОбластьВремени.Параметры.ВремяС = ВремяС;
		ОбластьВремени.Параметры.ВремяПо = ВремяПо;
		
		ТабличныйДокумент.Вывести(ОбластьВремени);
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьОписания);
	ТабличныйДокумент.Вывести(ОбластьПодписи);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоручениеЭкспедитору) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПоручениеЭкспедитору.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.ПоручениеЭкспедитору";
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПоручениеЭкспедитору);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеДоставкой";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

#КонецОбласти 

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеИнформационнойБазы


Процедура УстановитьПараметрыНабораСвойств() Экспорт
	
	ПараметрыНабораСвойств = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабораСвойств.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПоручениеЭкспедитору", ПараметрыНабораСвойств);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

